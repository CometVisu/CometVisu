{"attributes": {"fullName": "qx.bom.element.Animation", "packageName": "qx.bom.element", "isStatic": true, "type": "bootstrap", "name": "Animation"}, "type": "class", "children": [{"attributes": {"text": "<p>Wrapper for {@link qx.bom.element.AnimationCss} and\n{@link qx.bom.element.AnimationJs}. It offers the public <span class=\"caps\">API</span> and decides using\nfeature checks either to use <span class=\"caps\">CSS</span> animations or JS animations.</p>\n\n<p>If you use this class, the restrictions of the JavaScript animations apply.\nThis means that you can not use transforms and custom bezier timing functions.</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"access": "private", "line": 124, "isStatic": true, "name": "__hasOnlyCssKeys"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "el"}, "type": "param", "children": [{"attributes": {"text": "<p>The element to check for the styles.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "keyFrames"}, "type": "param", "children": [{"attributes": {"text": "<p>The keyFrames of the animation.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Detection helper which detects if only <span class=\"caps\">CSS</span> keys are in\nthe animations key frames.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<code>true</code> if only css properties are included."}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"line": 86, "isStatic": true, "name": "animate"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "el"}, "type": "param", "children": [{"attributes": {"text": "<p>The element to animate.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "desc"}, "type": "param", "children": [{"attributes": {"text": "<p>The animations description.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "duration"}, "type": "param", "children": [{"attributes": {"text": "<p>The duration in milliseconds of the animation which will override the duration given in the description.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>This function takes care of the feature check and starts the animation.\nIt takes a <span class=\"caps\">DOM</span> element to apply the animation to, and a description.\nThe description should be a map, which could look like this:</p>\n\n<pre class=\"javascript\">\n{\n  \"duration\": 1000,\n  \"keep\": 100,\n  \"keyFrames\": {\n    0 : {\"opacity\": 1, \"scale\": 1},\n    100 : {\"opacity\": 0, \"scale\": 0}\n  },\n  \"origin\": \"50% 50%\",\n  \"repeat\": 1,\n  \"timing\": \"ease-out\",\n  \"alternate\": false,\n  \"delay\" : 2000\n}\n</pre>\n\n<p><strong>duration</strong> is the time in milliseconds one animation cycle should take.</p>\n\n<p><strong>keep</strong> is the key frame to apply at the end of the animation. (optional)\n  Keep in mind that the keep key is reversed in case you use an reverse\n  animation or set the alternate key and a even repeat count.</p>\n\n<p><strong>keyFrames</strong> is a map of separate frames. Each frame is defined by a\n  number which is the percentage value of time in the animation. The value\n  is a map itself which holds css properties or transforms\n  {@link qx.bom.element.Transform} (Transforms only for <span class=\"caps\">CSS</span> Animations).</p>\n\n<p><strong>origin</strong> maps to the transform origin {@link qx.bom.element.Transform#setOrigin}\n  (Only for <span class=\"caps\">CSS</span> animations).</p>\n\n<p><strong>repeat</strong> is the amount of time the animation should be run in\n  sequence. You can also use &#8220;infinite&#8221;.</p>\n\n<p><strong>timing</strong> takes one of the predefined value:\n  <code>ease</code> | <code>linear</code> | <code>ease-in</code>\n  | <code>ease-out</code> | <code>ease-in-out</code> |\n  <code>cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)</code>\n  (cubic-bezier only available for <span class=\"caps\">CSS</span> animations)</p>\n\n<p><strong>alternate</strong> defines if every other animation should be run in reverse order.</p>\n\n<p><strong>delay</strong> is the time in milliseconds the animation should wait before start.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>AnimationHandle instance to control the animation.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.element.AnimationHandle"}, "type": "entry"}]}]}]}, {"attributes": {"line": 107, "isStatic": true, "name": "animateReverse"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "el"}, "type": "param", "children": [{"attributes": {"text": "<p>The element to animate.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Element"}, "type": "entry"}]}]}, {"attributes": {"name": "desc"}, "type": "param", "children": [{"attributes": {"text": "<p>The animations description.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"optional": true, "name": "duration"}, "type": "param", "children": [{"attributes": {"text": "<p>The duration in milliseconds of the animation which will override the duration given in the description.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Starts an animation in reversed order. For further details, take a look at\nthe {@link #animate} method.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>AnimationHandle instance to control the animation.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.bom.element.AnimationHandle"}, "type": "entry"}]}]}]}]}]}