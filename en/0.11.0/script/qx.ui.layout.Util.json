{"attributes": {"isStatic": true, "name": "Util", "isInternal": true, "packageName": "qx.ui.layout", "access": "internal", "fullName": "qx.ui.layout.Util", "type": "class"}, "type": "class", "children": [{"attributes": {"text": "<p>Common set of utility methods used by the standard qooxdoo layouts.</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"line": 438, "isStatic": true, "name": "arrangeIdeals"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "beginMin"}, "type": "param", "children": [{"attributes": {"text": "<p>Minimum size of first widget (from size hint)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "beginIdeal"}, "type": "param", "children": [{"attributes": {"text": "<p>Ideal size of first widget (maybe after dragging the splitter)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "beginMax"}, "type": "param", "children": [{"attributes": {"text": "<p>Maximum size of first widget (from size hint)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "endMin"}, "type": "param", "children": [{"attributes": {"text": "<p>Minimum size of second widget (from size hint)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "endIdeal"}, "type": "param", "children": [{"attributes": {"text": "<p>Ideal size of second widget (maybe after dragging the splitter)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "endMax"}, "type": "param", "children": [{"attributes": {"text": "<p>Maximum size of second widget (from size hint)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Arranges two sizes in one box to best respect their individual limitations.</p>\n\n<p>Mainly used by split layouts (Split Panes) where the layout is mainly defined\nby the outer dimensions.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Map with the keys <code>begin<code>end</code> with the arranged dimensions.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"line": 257, "isStatic": true, "name": "collapseMargins"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "varargs"}, "type": "param", "children": [{"attributes": {"text": "<p>Any number of configured margins</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "arguments"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Collapses two margins.</p>\n\n<p>Supports positive and negative margins.\nCollapsing find the largest positive and the largest\nnegative value. Afterwards the result is computed through the\nsubtraction of the negative from the positive value.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>The collapsed margin</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 51, "isStatic": true, "name": "computeFlexOffsets"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "flexibles"}, "type": "param", "children": [{"attributes": {"text": "<p>Each entry must have these keys: <code>id</code>, <code>potential</code> and <code>flex</code>. The ID is used in the result map as the key for the user to work with later (e.g. upgrade sizes etc. to respect the given offset) The potential is an integer value which is the difference of the currently interesting direction (e.g. shrinking=width-minWidth, growing= maxWidth-width). The flex key holds the flex value of the item.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}, {"attributes": {"name": "avail"}, "type": "param", "children": [{"attributes": {"text": "<p>Full available space to allocate (ignoring used one)</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "used"}, "type": "param", "children": [{"attributes": {"text": "<p>Size of already allocated space</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Computes the flex offsets needed to reduce the space\ndifference as much as possible by respecting the\npotential of the given elements (being in the range of\ntheir min/max values)</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>A map which contains the calculated offsets under the key which is identical to the ID given in the incoming map.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Map"}, "type": "entry"}]}]}]}, {"attributes": {"line": 152, "isStatic": true, "name": "computeHorizontalAlignOffset"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "align"}, "type": "param", "children": [{"attributes": {"text": "<p>One of <code>top</code>, <code>center</code> or <code>bottom</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "width"}, "type": "param", "children": [{"attributes": {"text": "<p>The visible width of the widget</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "availWidth"}, "type": "param", "children": [{"attributes": {"text": "<p>The available inner width of the parent</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "0", "optional": true, "name": "marginLeft"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional left margin of the widget</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "0", "optional": true, "name": "marginRight"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional right margin of the widget</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Computes the offset which needs to be added to the top position\nto result in the stated vertical alignment. Also respects\nexisting margins (without collapsing).</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Computed top coordinate</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 287, "isStatic": true, "name": "computeHorizontalGaps"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "children"}, "type": "param", "children": [{"attributes": {"text": "<p>List of children</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "0", "optional": true, "name": "spacing"}, "type": "param", "children": [{"attributes": {"text": "<p>Spacing between every child</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "optional": true, "name": "collapse"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional margin collapsing mode</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Computes the sum of all horizontal gaps. Normally the\nresult is used to compute the available width in a widget.</p>\n\n<p>The method optionally respects margin collapsing as well. In\nthis mode the spacing is collapsed together with the margins.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Sum of all gaps in the final layout.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 377, "isStatic": true, "name": "computeHorizontalSeparatorGaps"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "children"}, "type": "param", "children": [{"attributes": {"text": "<p>List of children</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.ui.core.LayoutItem", "dimensions": 1}, "type": "entry"}]}]}, {"attributes": {"name": "spacing"}, "type": "param", "children": [{"attributes": {"text": "<p>Configured spacing</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "separator"}, "type": "param", "children": [{"attributes": {"text": "<p>Separator to render</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}, {"attributes": {"type": "qx.ui.decoration.IDecorator"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Computes the gaps together with the configuration of separators.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Sum of gaps</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 205, "isStatic": true, "name": "computeVerticalAlignOffset"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "align"}, "type": "param", "children": [{"attributes": {"text": "<p>One of <code>top</code>, <code>middle</code> or <code>bottom</code>.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}, {"attributes": {"name": "height"}, "type": "param", "children": [{"attributes": {"text": "<p>The visible height of the widget</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "availHeight"}, "type": "param", "children": [{"attributes": {"text": "<p>The available inner height of the parent</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "0", "optional": true, "name": "marginTop"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional top margin of the widget</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "0", "optional": true, "name": "marginBottom"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional bottom margin of the widget</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Computes the offset which needs to be added to the top position\nto result in the stated vertical alignment. Also respects\nexisting margins (without collapsing).</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Computed top coordinate</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 334, "isStatic": true, "name": "computeVerticalGaps"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "children"}, "type": "param", "children": [{"attributes": {"text": "<p>List of children</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "0", "optional": true, "name": "spacing"}, "type": "param", "children": [{"attributes": {"text": "<p>Spacing between every child</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"defaultValue": "false", "optional": true, "name": "collapse"}, "type": "param", "children": [{"attributes": {"text": "<p>Optional margin collapsing mode</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Computes the sum of all vertical gaps. Normally the\nresult is used to compute the available height in a widget.</p>\n\n<p>The method optionally respects margin collapsing as well. In\nthis mode the spacing is collapsed together with the margins.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Sum of all gaps in the final layout.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"line": 404, "isStatic": true, "name": "computeVerticalSeparatorGaps"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "children"}, "type": "param", "children": [{"attributes": {"text": "<p>List of children</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "qx.ui.core.LayoutItem", "dimensions": 1}, "type": "entry"}]}]}, {"attributes": {"name": "spacing"}, "type": "param", "children": [{"attributes": {"text": "<p>Configured spacing</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "separator"}, "type": "param", "children": [{"attributes": {"text": "<p>Separator to render</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}, {"attributes": {"type": "qx.ui.decoration.IDecorator"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Computes the gaps together with the configuration of separators.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Sum of gaps</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"type": "Regexp", "name": "PERCENT_VALUE", "value": "/[0-9]+(?:\\.[0-9]+)?%/"}, "type": "constant", "children": [{"attributes": {"text": "<p>Regular expression to match percent values</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "RegExp"}, "type": "entry"}]}]}]}]}