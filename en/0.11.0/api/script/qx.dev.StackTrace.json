{"attributes": {"fullName": "qx.dev.StackTrace", "packageName": "qx.dev", "isStatic": true, "type": "bootstrap", "name": "StackTrace"}, "type": "class", "children": [{"attributes": {"text": "<p>Methods to get information about the JavaScript call stack.</p>"}, "type": "desc"}, {"attributes": {}, "type": "methods-static", "children": [{"attributes": {"access": "private", "line": 331, "isStatic": true, "name": "__fileNameToClassName"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "fileName"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">URL</span> of the JavaScript file</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Converts the <span class=\"caps\">URL</span> of a JavaScript file to a class name using either a\nuser-defined ({@link #FILENAME_TO_CLASSNAME}) or default\n({@link #__fileNameToClassNameDefault}) converter</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Result of the conversion</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 355, "isStatic": true, "name": "__fileNameToClassNameDefault"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "fileName"}, "type": "param", "children": [{"attributes": {"text": "<p><span class=\"caps\">URL</span> of the JavaScript file</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Converts the <span class=\"caps\">URL</span> of a JavaScript file to a class name if the file is\nnamed using the qooxdoo naming conventions.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>class name of the file if conversion was possible. Otherwise the fileName is returned unmodified.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String"}, "type": "entry"}]}]}]}, {"attributes": {"access": "private", "line": 376, "isStatic": true, "name": "__formatStackTrace"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "trace"}, "type": "param", "children": [{"attributes": {"text": "<p>Stack trace information</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Runs the given stack trace array through the formatter function\n({@link #FORMAT_STACKTRACE}) if available and returns it. Otherwise, the\noriginal array is returned</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Formatted stack trace info</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"line": 64, "isStatic": true, "name": "getStackTrace"}, "type": "method", "children": [{"attributes": {"text": "<p>Get a stack trace of the current position in the code.</p>\n\n<p>Browser compatibility:\n<ul>\n  <li>In new versions of Gecko, WebKit and Opera, the output of\n  {@link #getStackTraceFromError} and {@link #getStackTraceFromCaller} is\n  combined to generate the richest trace, including line numbers.</li>\n  <li>For Internet Explorer (and other engines that do not provide stack\n   traces), {@link #getStackTraceFromCaller} is used</li>\n</ul></p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Stack trace of the current position in the code. Each line in the array represents one call in the stack trace.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"line": 147, "isStatic": true, "name": "getStackTraceFromCaller"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "args"}, "type": "param", "children": [{"attributes": {"text": "<p>arguments variable.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "arguments"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Get a stack trace from the arguments special variable using the\n<code>caller</code> property.</p>\n\n<p>This methods returns class/mixin and function names of each step\nin the call stack.</p>\n\n<p>Recursion is not supported.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Stack trace of caller of the function the arguments variable belongs to. Each line in the array represents one call in the stack trace.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String", "dimensions": 1}, "type": "entry"}]}]}]}, {"attributes": {"line": 212, "isStatic": true, "name": "getStackTraceFromError"}, "type": "method", "children": [{"attributes": {}, "type": "params", "children": [{"attributes": {"name": "error"}, "type": "param", "children": [{"attributes": {"text": "<p>Error exception instance.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "Error"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Try to get a stack trace from an Error object. Mozilla sets the field\n<code>stack</code> for Error objects thrown using <code>throw new Error()</code>.\nFrom this field it is possible to get a stack trace from the position\nthe exception was thrown at.</p>\n\n<p>This will get the JavaScript file names and the line numbers of each call.\nThe file names are converted into qooxdoo class names if possible (customizable\nvia {@link #FILENAME_TO_CLASSNAME}).</p>\n\n<p>The stack trace can be custom formatted using {@link #FORMAT_STACKTRACE}.</p>\n\n<p>This works reliably in Gecko-based browsers. Later Opera versions and\nChrome also provide a useful stack trace. For Safari, only the class or\nfile name and line number where the error occurred are returned.\nIE 6/7/8/9 does not attach any stack information to error objects so an\nempty array is returned.</p>"}, "type": "desc"}, {"attributes": {}, "type": "return", "children": [{"attributes": {"text": "<p>Stack trace of the exception. Each line in the array represents one call in the stack trace.</p>"}, "type": "desc"}, {"attributes": {}, "type": "types", "children": [{"attributes": {"type": "String", "dimensions": 1}, "type": "entry"}]}]}]}]}, {"attributes": {}, "type": "constants", "children": [{"attributes": {"type": "Null", "name": "FILENAME_TO_CLASSNAME", "value": "null"}, "type": "constant", "children": [{"attributes": {"text": "<p>Optional user-defined function to convert source file names into readable\nclass names. Will be called with the source file name extracted from the\nbrowser&#8217;s stack trace information as the only argument. The returned\nstring is used in the output of {@link #getStackTraceFromError}</p>"}, "type": "desc"}]}, {"attributes": {"type": "Null", "name": "FORMAT_STACKTRACE", "value": "null"}, "type": "constant", "children": [{"attributes": {"text": "<p>Optional user-defined formatting function for stack trace information.\nWill be called by with an array of strings representing the calls in the\nstack trace. {@link #getStackTraceFromError} will return the output of\nthis function. Must return an array of strings.</p>"}, "type": "desc"}]}]}]}