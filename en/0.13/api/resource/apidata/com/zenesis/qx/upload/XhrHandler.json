{
  "className": "com.zenesis.qx.upload.XhrHandler",
  "packageName": "com.zenesis.qx.upload",
  "name": "XhrHandler",
  "superClass": "com.zenesis.qx.upload.AbstractHandler",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 39,
        "column": 0,
        "index": 1251
      },
      "end": {
        "line": 263,
        "column": 3,
        "index": 8108
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        },
        {
          "name": "@description",
          "body": "<p>Implementation of AbstractHandler that uses XMLHttpRequest; this is based on\n work at http://valums.com/ajax-upload/.\n Call com.zenesis.qx.upload.XhrHandler.isSupported() to check whether this\n class can be used (otherwise use FormHandler)</p>"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "File"
        },
        {
          "name": "@ignore",
          "body": "FileReader"
        },
        {
          "name": "@ignore",
          "body": "FormData"
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "addBlob": {
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1404
        },
        "end": {
          "line": 56,
          "column": 5,
          "index": 1758
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "com.zenesis.qx.upload.AbstractHandler",
      "appearsIn": [
        "com.zenesis.qx.upload.AbstractHandler"
      ]
    },
    "_createFile": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1797
        },
        "end": {
          "line": 80,
          "column": 5,
          "index": 2490
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "com.zenesis.qx.upload.AbstractHandler",
      "appearsIn": [
        "com.zenesis.qx.upload.AbstractHandler"
      ]
    },
    "_doUpload": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2529
        },
        "end": {
          "line": 213,
          "column": 5,
          "index": 7002
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "com.zenesis.qx.upload.AbstractHandler",
      "appearsIn": [
        "com.zenesis.qx.upload.AbstractHandler"
      ]
    },
    "_doCancel": {
      "location": {
        "start": {
          "line": 218,
          "column": 4,
          "index": 7041
        },
        "end": {
          "line": 224,
          "column": 5,
          "index": 7248
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "com.zenesis.qx.upload.AbstractHandler",
      "appearsIn": [
        "com.zenesis.qx.upload.AbstractHandler"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getMaxConnections": {
      "type": "function",
      "name": "getMaxConnections",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxConnections</code>.\n\nFor further details take a look at the property definition: {@link #maxConnections}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for maxConnections"
          }
        ]
      }
    },
    "setMaxConnections": {
      "type": "function",
      "name": "setMaxConnections",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxConnections</code>.\n\nFor further details take a look at the property definition: {@link #maxConnections}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for maxConnections"
          }
        ]
      }
    },
    "resetMaxConnections": {
      "type": "function",
      "name": "resetMaxConnections",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>maxConnections</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #maxConnections}."
          }
        ]
      }
    }
  },
  "statics": {
    "__withCredentials": {
      "location": {
        "start": {
          "line": 228,
          "column": 4,
          "index": 7273
        },
        "end": {
          "line": 228,
          "column": 28,
          "index": 7297
        }
      },
      "type": "variable",
      "access": "private"
    },
    "isSupported": {
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 7423
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 7726
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether this handler is support on the current browser</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setWithCredentials": {
      "location": {
        "start": {
          "line": 251,
          "column": 4,
          "index": 7845
        },
        "end": {
          "line": 253,
          "column": 5,
          "index": 7915
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to set XMLHttpRequest.withCredentials (used for CORS uploads wth\n cookies)</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isWithCredentials": {
      "location": {
        "start": {
          "line": 259,
          "column": 4,
          "index": 8034
        },
        "end": {
          "line": 261,
          "column": 5,
          "index": 8098
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to set XMLHttpRequest.withCredentials (used for CORS uploads wth\n cookies)</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}