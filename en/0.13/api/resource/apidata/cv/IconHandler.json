{
  "className": "cv.IconHandler",
  "packageName": "cv",
  "name": "IconHandler",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0,
        "index": 955
      },
      "end": {
        "line": 306,
        "column": 3,
        "index": 9556
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The object \"icon\" contains the whole API necessary to handle the icons.</p><div class=\"authors\"><label>Author:</label> Christian Mayer</div><div class=\"since\"><label>Since:</label> 2012</div>"
        }
      ],
      "@author": [
        {
          "name": "@author",
          "body": "Christian Mayer"
        }
      ],
      "@since": [
        {
          "name": "@since",
          "body": "2012"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": true,
  "construct": {
    "location": {
      "start": {
        "line": 38,
        "column": 2,
        "index": 1183
      },
      "end": {
        "line": 40,
        "column": 3,
        "index": 1234
      }
    },
    "jsdoc": {}
  },
  "members": {
    "__db": {
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 1985
        },
        "end": {
          "line": 66,
          "column": 14,
          "index": 1995
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          },
          {
            "name": "@description",
            "body": ""
          },
          {
            "name": "@description",
            "body": "<p>Internal database of the known icons.\n Initially filled with the default icons.</p>"
          }
        ],
        "@typedef": [
          {
            "name": "@typedef",
            "body": "iconDBEntry"
          },
          {
            "name": "@typedef",
            "body": "iconDB\n Hierachy:      name,           type,                   flavour,                color,   URI"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{object}"
          },
          {
            "name": "@type",
            "body": "{Object.<string, Object.<string, (string|Object.<string, (string|Object.<string, (iconDBEntry|recolorCallback)>)>)>>}"
          },
          {
            "name": "@type",
            "body": "{iconDB}"
          }
        ],
        "@property": [
          {
            "name": "@property",
            "body": "{string} uri"
          },
          {
            "name": "@property",
            "body": "{string} styling"
          },
          {
            "name": "@property",
            "body": "{(string|HTMLCanvasElement|SVGElement)} icon"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "insert": {
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2512
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 3328
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert or overwrite one or many icons into the database. The parameter\n might be a full hash of icon definitions or a single one consisting out of\n a name and a URI path. Optional further parameters are a \"type\" and a\n flavour.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} name"
          },
          {
            "name": "@param",
            "body": "{string} uri"
          },
          {
            "name": "@param",
            "body": "{string?} type"
          },
          {
            "name": "@param",
            "body": "{string?} flavour"
          },
          {
            "name": "@param",
            "body": "{string?} color"
          },
          {
            "name": "@param",
            "body": "{string?} styling"
          },
          {
            "name": "@param",
            "body": "{string?} dynamic"
          },
          {
            "name": "@param",
            "body": "{string?} source"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "get": {
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3661
        },
        "end": {
          "line": 164,
          "column": 5,
          "index": 5497
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the icon information for a name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} name"
          },
          {
            "name": "@param",
            "body": "{string?} type"
          },
          {
            "name": "@param",
            "body": "{string?} flavour"
          },
          {
            "name": "@param",
            "body": "{string?} color (only relevant for monochrome icons)",
            "paramName": "color",
            "description": "(only relevant for monochrome icons)",
            "optional": true,
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{(string|recolorCallback|undefined)} The URI for the icon - or \"undefined\" if not known",
            "type": "(string|recolorCallback|undefined)",
            "description": " The URI for the icon - or \"undefined\" if not known"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MProperty"
      ]
    },
    "getURI": {
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5504
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 5676
        }
      },
      "type": "function",
      "access": "public"
    },
    "getIconElement": {
      "location": {
        "start": {
          "line": 189,
          "column": 4,
          "index": 6228
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7848
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the icon - either as DOM element (<code>asText = false</code>) or as string\n (<code>asText = true</code>).\n When it is returned as string and it was added to the DOM, the\n fillIcons method must be called to fill missing content (e.g. the\n <canvas> icons.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} name"
          },
          {
            "name": "@param",
            "body": "{string?} type"
          },
          {
            "name": "@param",
            "body": "{string?} flavour"
          },
          {
            "name": "@param",
            "body": "{string?} color (only relevant for monochrome icons)",
            "paramName": "color",
            "description": "(only relevant for monochrome icons)",
            "optional": true,
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{string?} styling"
          },
          {
            "name": "@param",
            "body": "{string?} iconclass"
          },
          {
            "name": "@param",
            "body": "{boolean?} asText"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getIconSource": {
      "location": {
        "start": {
          "line": 248,
          "column": 4,
          "index": 8136
        },
        "end": {
          "line": 274,
          "column": 5,
          "index": 8894
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provide a value that can be used by cv.ui.manager.basic.Image to display the icon on an qooxdoo widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} name"
          },
          {
            "name": "@param",
            "body": "{string?} classes - optional css classes used in the svg icon code (default is 'icon')",
            "paramName": "classes",
            "description": "- optional css classes used in the svg icon code (default is 'icon')",
            "optional": true,
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string}",
            "type": "string",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fillIcons": {
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 8973
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 9074
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fill the icons in the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array",
            "paramName": "array",
            "type": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "list": {
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 9194
        },
        "end": {
          "line": 292,
          "column": 5,
          "index": 9245
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List all known icons</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string[]} List of all known icon names",
            "type": "string[]",
            "description": " List of all known icon names"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "debug": {
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 9509
        },
        "end": {
          "line": 304,
          "column": 5,
          "index": 9548
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return icon database for debuging purposes - use ONLY for debugging as it's\n circumventing the data hiding and exposes a writeable reference to the\n database object!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The icon database",
            "type": "Object",
            "description": " The icon database"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MLogging"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}