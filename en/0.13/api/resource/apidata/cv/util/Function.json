{
  "version": 0.3,
  "lastModified": 1722153538631,
  "lastModifiedIso": "2024-07-28T07:58:58.631Z",
  "classFilename": "../../source/class/cv/util/Function.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 886
    },
    "end": {
      "line": 79,
      "column": 3,
      "index": 2762
    }
  },
  "className": "cv.util.Function",
  "jsdoc": {
    "raw": [
      "*",
      " * Utility module to give some support to work with functions.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Utility module to give some support to work with functions.</p>"
      }
    ]
  },
  "statics": {
    "throttle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Like qx.util.Function.throttle with additional support to abort the throttling.",
          "     * @param callback {function} the callback which should be executed in the given interval",
          "     * @param interval {number} Interval in milliseconds",
          "     * @param options {object} the keys are <code>leading</code> and <code>trailing</code> to control the",
          "     * executing of the callback precisely. Default values are <code>true</code> for both options.",
          "     * @param context",
          "     * @return {object} with 2 keys <code>call</code> a wrapper function which <em>shields</em> the given callback function",
          "     * <code>abort</code> abort throttling and skip the trailing value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Like qx.util.Function.throttle with additional support to abort the throttling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {function} the callback which should be executed in the given interval",
            "paramName": "callback",
            "description": " the callback which should be executed in the given interval",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "interval {number} Interval in milliseconds",
            "paramName": "interval",
            "description": " Interval in milliseconds",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "options {object} the keys are <code>leading</code> and <code>trailing</code> to control the\n executing of the callback precisely. Default values are <code>true</code> for both options.",
            "paramName": "options",
            "description": " the keys are <code>leading</code> and <code>trailing</code> to control the\n executing of the callback precisely. Default values are <code>true</code> for both options.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "context",
            "paramName": "context",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{object} with 2 keys <code>call</code> a wrapper function which <em>shields</em> the given callback function\n <code>abort</code> abort throttling and skip the trailing value",
            "type": "Record<any, any>",
            "description": "with 2 keys <code>call</code> a wrapper function which <em>shields</em> the given callback function\n <code>abort</code> abort throttling and skip the trailing value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 35,
          "column": 4,
          "index": 1617
        },
        "end": {
          "line": 77,
          "column": 5,
          "index": 2754
        }
      },
      "type": "function",
      "params": [
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "interval",
          "type": "number"
        },
        {
          "name": "options",
          "type": "Record<any, any>"
        },
        {
          "name": "context"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}