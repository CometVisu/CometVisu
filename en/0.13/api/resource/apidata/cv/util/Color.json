{
  "version": 0.3,
  "lastModified": 1726088789849,
  "lastModifiedIso": "2024-09-11T21:06:29.849Z",
  "classFilename": "../../source/class/cv/util/Color.js",
  "type": "class",
  "location": {
    "start": {
      "line": 27,
      "column": 0,
      "index": 874
    },
    "end": {
      "line": 1198,
      "column": 3,
      "index": 38427
    }
  },
  "className": "cv.util.Color",
  "jsdoc": {
    "raw": [
      "*",
      " * Color",
      " *",
      " * @author ChristianMayer",
      " * @since 2021",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Color</p>"
      }
    ],
    "@author": [
      {
        "name": "@author",
        "body": "ChristianMayer"
      }
    ],
    "@since": [
      {
        "name": "@since",
        "body": "2021"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "statics": {
    "solve2d": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Solve the 2 dimensional linear equation",
          "     * <pre>",
          "     *    ( A00 A01 ) (x0) = (y0)",
          "     *    ( A10 A11 ) (x1)   (y1)",
          "     * </pre>",
          "     * @param {number} A00",
          "     * @param {number} A10",
          "     * @param {number} A01",
          "     * @param {number} A11",
          "     * @param {number} y0",
          "     * @param {number} y1",
          "     * @returns {number[]}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Solve the 2 dimensional linear equation\n </p>\n<pre>\n    ( A00 A01 ) (x0) = (y0)\n    ( A10 A11 ) (x1)   (y1)\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} A00",
            "paramName": "A00",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A10",
            "paramName": "A10",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A01",
            "paramName": "A01",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A11",
            "paramName": "A11",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} y0",
            "paramName": "y0",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} y1",
            "paramName": "y1",
            "description": "",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{number[]}",
            "type": "number[]",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1434
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1606
        }
      },
      "type": "function",
      "params": [
        {
          "name": "A00",
          "type": "number"
        },
        {
          "name": "A10",
          "type": "number"
        },
        {
          "name": "A01",
          "type": "number"
        },
        {
          "name": "A11",
          "type": "number"
        },
        {
          "name": "y0",
          "type": "number"
        },
        {
          "name": "y1",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "number[]"
      },
      "appearsIn": []
    },
    "solve3d": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Solve the 3 dimensional linear equation",
          "     * <pre>",
          "     *    ( A00 A01 A02 ) (x0)   (y0)",
          "     *    ( A10 A11 A12 ) (x1) = (y1)",
          "     *    ( A20 A21 A22 ) (x2)   (y2)",
          "     * </pre>",
          "     * @param {number} A00",
          "     * @param {number} A10",
          "     * @param {number} A20",
          "     * @param {number} A01",
          "     * @param {number} A11",
          "     * @param {number} A21",
          "     * @param {number} A02",
          "     * @param {number} A12",
          "     * @param {number} A22",
          "     * @param {number} y0",
          "     * @param {number} y1",
          "     * @param {number} y2",
          "     * @returns {number[]}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Solve the 3 dimensional linear equation\n </p>\n<pre>\n    ( A00 A01 A02 ) (x0)   (y0)\n    ( A10 A11 A12 ) (x1) = (y1)\n    ( A20 A21 A22 ) (x2)   (y2)\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} A00",
            "paramName": "A00",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A10",
            "paramName": "A10",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A20",
            "paramName": "A20",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A01",
            "paramName": "A01",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A11",
            "paramName": "A11",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A21",
            "paramName": "A21",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A02",
            "paramName": "A02",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A12",
            "paramName": "A12",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} A22",
            "paramName": "A22",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} y0",
            "paramName": "y0",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} y1",
            "paramName": "y1",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} y2",
            "paramName": "y2",
            "description": "",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{number[]}",
            "type": "number[]",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2165
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 3045
        }
      },
      "type": "function",
      "params": [
        {
          "name": "A00",
          "type": "number"
        },
        {
          "name": "A10",
          "type": "number"
        },
        {
          "name": "A20",
          "type": "number"
        },
        {
          "name": "A01",
          "type": "number"
        },
        {
          "name": "A11",
          "type": "number"
        },
        {
          "name": "A21",
          "type": "number"
        },
        {
          "name": "A02",
          "type": "number"
        },
        {
          "name": "A12",
          "type": "number"
        },
        {
          "name": "A22",
          "type": "number"
        },
        {
          "name": "y0",
          "type": "number"
        },
        {
          "name": "y1",
          "type": "number"
        },
        {
          "name": "y2",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "number[]"
      },
      "appearsIn": []
    },
    "intersect": {
      "jsdoc": {
        "raw": [
          "*",
          "     * calculate the intersection point between lines 1-2 and 3-4 as well as",
          "     * points 3 and 4 are on different sides of the line 1-2",
          "     * @param {{x: number, y: number}} p1",
          "     * @param {{x: number, y: number}} p2",
          "     * @param {{x: number, y: number}} p3",
          "     * @param {{x: number, y: number}} p4",
          "     * @returns {{x: number, y: number, factors: number[]}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>calculate the intersection point between lines 1-2 and 3-4 as well as\n points 3 and 4 are on different sides of the line 1-2</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{{x: number, y: number}} p1"
          },
          {
            "name": "@param",
            "body": "{{x: number, y: number}} p2"
          },
          {
            "name": "@param",
            "body": "{{x: number, y: number}} p3"
          },
          {
            "name": "@param",
            "body": "{{x: number, y: number}} p4"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{x: number, y: number, factors: number[]}}",
            "type": "{x: number, y: number, factors: number[]}",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 3434
        },
        "end": {
          "line": 124,
          "column": 5,
          "index": 3851
        }
      },
      "type": "function",
      "params": [
        {
          "name": "p1"
        },
        {
          "name": "p2"
        },
        {
          "name": "p3"
        },
        {
          "name": "p4"
        }
      ],
      "returnType": {
        "type": "{x: number, y: number, factors: number[]}"
      },
      "appearsIn": []
    },
    "wavelength2xy": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the CIE xy coordinates for a light wavelength.",
          "     * Algorithm as of: http://jcgt.org/published/0002/02/01/",
          "     * @param {number} wave wavelength in nanometers",
          "     * @returns {{x: number, y: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the CIE xy coordinates for a light wavelength.\n Algorithm as of: http://jcgt.org/published/0002/02/01/</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} wave wavelength in nanometers",
            "paramName": "wave",
            "description": "wavelength in nanometers",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{x: number, y: number}}",
            "type": "{x: number, y: number}",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4088
        },
        "end": {
          "line": 147,
          "column": 5,
          "index": 5003
        }
      },
      "type": "function",
      "params": [
        {
          "name": "wave",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "{x: number, y: number}"
      },
      "appearsIn": []
    },
    "temperature2xy": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the CIE xy coordinates for a white given its temperature",
          "     * @param {number} T temperature in Kelvin, 1667 K <= T <= 25000 K",
          "     * @returns {{x: number, y: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the CIE xy coordinates for a white given its temperature</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} T temperature in Kelvin, 1667 K <= T <= 25000 K",
            "paramName": "T",
            "description": "temperature in Kelvin, 1667 K <= T <= 25000 K",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{x: number, y: number}}",
            "type": "{x: number, y: number}",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 5206
        },
        "end": {
          "line": 169,
          "column": 5,
          "index": 5836
        }
      },
      "type": "function",
      "params": [
        {
          "name": "T",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "{x: number, y: number}"
      },
      "appearsIn": []
    },
    "xy2sRGB": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert xy coordinates to sRGB (D65) for display on the screen, including",
          "     * gamma correction and simple gamut mapping",
          "     * @param {{x: number, y: number}} xy The `x` and `y` values of the xyY color",
          "     * @param {number} Y The `Y` value of the xyY color",
          "     * @returns {{r: number, g: number, b: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert xy coordinates to sRGB (D65) for display on the screen, including\n gamma correction and simple gamut mapping</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{{x: number, y: number}} xy The <code>x</code> and <code>y</code> values of the xyY color"
          },
          {
            "name": "@param",
            "body": "{number} Y The <code>Y</code> value of the xyY color",
            "paramName": "Y",
            "description": "The <code>Y</code> value of the xyY color",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{r: number, g: number, b: number}}",
            "type": "{r: number, g: number, b: number}",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 6179
        },
        "end": {
          "line": 191,
          "column": 5,
          "index": 6788
        }
      },
      "type": "function",
      "params": [
        {
          "name": "xy"
        },
        {
          "name": "Y",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "{r: number, g: number, b: number}"
      },
      "appearsIn": []
    },
    "curve": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert a color component to a real world value by applying the dim curve",
          "     * @param {number} component the color component (i.e. r, g or b value) to convert",
          "     * @param {(string|number[])} curve -the curve type (`log` or `exp`), an one element array with the gamma value or an array with the lookup table",
          "     * @param {number} scale the maximal number of the real world value, usually 1, 100 or 255",
          "     * @returns {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert a color component to a real world value by applying the dim curve</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} component the color component (i.e. r, g or b value) to convert",
            "paramName": "component",
            "description": "the color component (i.e. r, g or b value) to convert",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{(string|number[])} curve -the curve type (<code>log</code> or <code>exp</code>), an one element array with the gamma value or an array with the lookup table",
            "paramName": "curve",
            "description": "-the curve type (<code>log</code> or <code>exp</code>), an one element array with the gamma value or an array with the lookup table",
            "type": [
              "(string",
              {
                "type": "number",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "{number} scale the maximal number of the real world value, usually 1, 100 or 255",
            "paramName": "scale",
            "description": "the maximal number of the real world value, usually 1, 100 or 255",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{number}",
            "type": "number",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 7249
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 8264
        }
      },
      "type": "function",
      "params": [
        {
          "name": "component",
          "type": "number"
        },
        {
          "name": "curve",
          "type": [
            "(string",
            {
              "type": "number",
              "dimensions": 2
            }
          ]
        },
        {
          "name": "scale",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "invCurve": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert a real world value to a color component by applying the inverse dim curve",
          "     * @param {number} value",
          "     * @param {(string|number[])} curve -the curve type (`log` or `exp`), an one element array with the gamma value or an array with the lookup table",
          "     * @param {number} scale",
          "     * @returns {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert a real world value to a color component by applying the inverse dim curve</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} value",
            "paramName": "value",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{(string|number[])} curve -the curve type (<code>log</code> or <code>exp</code>), an one element array with the gamma value or an array with the lookup table",
            "paramName": "curve",
            "description": "-the curve type (<code>log</code> or <code>exp</code>), an one element array with the gamma value or an array with the lookup table",
            "type": [
              "(string",
              {
                "type": "number",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "{number} scale",
            "paramName": "scale",
            "description": "",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{number}",
            "type": "number",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 232,
          "column": 4,
          "index": 8609
        },
        "end": {
          "line": 261,
          "column": 5,
          "index": 9597
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "number"
        },
        {
          "name": "curve",
          "type": [
            "(string",
            {
              "type": "number",
              "dimensions": 2
            }
          ]
        },
        {
          "name": "scale",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    }
  },
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "Rxy"
      },
      {
        "name": "Gxy"
      },
      {
        "name": "Bxy"
      },
      {
        "name": "Wxy"
      }
    ],
    "location": {
      "start": {
        "line": 279,
        "column": 2,
        "index": 10132
      },
      "end": {
        "line": 329,
        "column": 3,
        "index": 11975
      }
    }
  },
  "members": {
    "__R": {
      "jsdoc": {
        "raw": [
          " the base colors defining the color space of this color"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 337,
          "column": 4,
          "index": 12192
        },
        "end": {
          "line": 337,
          "column": 18,
          "index": 12206
        }
      },
      "appearsIn": []
    },
    "__G": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 338,
          "column": 4,
          "index": 12212
        },
        "end": {
          "line": 338,
          "column": 18,
          "index": 12226
        }
      },
      "appearsIn": []
    },
    "__B": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 339,
          "column": 4,
          "index": 12232
        },
        "end": {
          "line": 339,
          "column": 18,
          "index": 12246
        }
      },
      "appearsIn": []
    },
    "__W": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 340,
          "column": 4,
          "index": 12252
        },
        "end": {
          "line": 340,
          "column": 18,
          "index": 12266
        }
      },
      "appearsIn": []
    },
    "__x": {
      "jsdoc": {
        "raw": [
          "*",
          "     * CIE 1931 XYZ color space: x of xyY",
          "     * @type {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>CIE 1931 XYZ color space: x of xyY</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{number}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 347,
          "column": 4,
          "index": 12377
        },
        "end": {
          "line": 347,
          "column": 14,
          "index": 12387
        }
      },
      "appearsIn": []
    },
    "__y": {
      "jsdoc": {
        "raw": [
          "*",
          "     * CIE 1931 XYZ color space: y of xyY",
          "     * @type {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>CIE 1931 XYZ color space: y of xyY</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{number}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 12473
        },
        "end": {
          "line": 352,
          "column": 14,
          "index": 12483
        }
      },
      "appearsIn": []
    },
    "__Y": {
      "jsdoc": {
        "raw": [
          "*",
          "     * CIE 1931 XYZ color space: Y of xyY or XYZ - normalized to be between 0...1",
          "     * @type {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>CIE 1931 XYZ color space: Y of xyY or XYZ - normalized to be between 0…1</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{number}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 357,
          "column": 4,
          "index": 12609
        },
        "end": {
          "line": 357,
          "column": 10,
          "index": 12615
        }
      },
      "appearsIn": []
    },
    "__hsv": {
      "jsdoc": {
        "raw": [
          "*",
          "     * HSV color space - h, s and v are normalized to the range 0...1",
          "     * @type {{h: number, s: number, v: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>HSV color space - h, s and v are normalized to the range 0…1</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{{h: number, s: number, v: number}}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 364,
          "column": 4,
          "index": 12826
        },
        "end": {
          "line": 364,
          "column": 20,
          "index": 12842
        }
      },
      "appearsIn": []
    },
    "__HSV_h_last": {
      "jsdoc": {
        "raw": [
          "*",
          "     * HSV color space - last known value of h",
          "     * @type {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>HSV color space - last known value of h</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{number}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 369,
          "column": 4,
          "index": 12933
        },
        "end": {
          "line": 369,
          "column": 19,
          "index": 12948
        }
      },
      "appearsIn": []
    },
    "__LCh_h_last": {
      "jsdoc": {
        "raw": [
          "*",
          "     * LCh color space - last known value of h",
          "     * @type {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>LCh color space - last known value of h</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{number}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 374,
          "column": 4,
          "index": 13039
        },
        "end": {
          "line": 374,
          "column": 19,
          "index": 13054
        }
      },
      "appearsIn": []
    },
    "__rbg": {
      "jsdoc": {
        "raw": [
          "*",
          "     * RGB color space - r, g and b are normalized to the range 0...1",
          "     * @type {{r: number, g: number, b: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>RGB color space - r, g and b are normalized to the range 0…1</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{{r: number, g: number, b: number}}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 13195
        },
        "end": {
          "line": 379,
          "column": 20,
          "index": 13211
        }
      },
      "appearsIn": []
    },
    "__rbgw": {
      "jsdoc": {
        "raw": [
          "*",
          "     * RGBW color space - r, g, b and w are normalized to the range 0...1",
          "     * @type {{r: number, g: number, b: number, w: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>RGBW color space - r, g, b and w are normalized to the range 0…1</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{{r: number, g: number, b: number, w: number}}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 13367
        },
        "end": {
          "line": 384,
          "column": 21,
          "index": 13384
        }
      },
      "appearsIn": []
    },
    "__T": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Color temperature in Kelvin",
          "     * @type {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Color temperature in Kelvin</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{number}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 389,
          "column": 4,
          "index": 13463
        },
        "end": {
          "line": 389,
          "column": 18,
          "index": 13477
        }
      },
      "appearsIn": []
    },
    "__Lab": {
      "jsdoc": {
        "raw": [
          "*",
          "     * L*a*b* color space - with L in 0...100, a* and b* in roughly -150...150",
          "     * @type {{L: number, a: number, b: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>L<em>a</em>b* color space - with L in 0…100, a* and b* in roughly -150…150</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{{L: number, a: number, b: number}}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 394,
          "column": 4,
          "index": 13627
        },
        "end": {
          "line": 394,
          "column": 20,
          "index": 13643
        }
      },
      "appearsIn": []
    },
    "__LCh": {
      "jsdoc": {
        "raw": [
          "*",
          "     * L*C*h° color space - with L in 0...1 instead of 0...100; C in 0...1 instead of 0...150",
          "     * @type {{L: number, C: number, h: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>L<em>C</em>h° color space - with L in 0…1 instead of 0…100; C in 0…1 instead of 0…150</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{{L: number, C: number, h: number}}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 399,
          "column": 4,
          "index": 13808
        },
        "end": {
          "line": 399,
          "column": 20,
          "index": 13824
        }
      },
      "appearsIn": []
    },
    "__getXYZ": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get X, Y, Z from this color",
          "     * @private",
          "     * @returns {{X: number, Y: number, Z: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get X, Y, Z from this color</p>"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{X: number, Y: number, Z: number}}",
            "type": "{X: number, Y: number, Z: number}",
            "description": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 13950
        },
        "end": {
          "line": 412,
          "column": 5,
          "index": 14153
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "{X: number, Y: number, Z: number}"
      },
      "appearsIn": []
    },
    "__setXYZ": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set internal __x, __y and __Y from XYZ color",
          "     * @private",
          "     * @param {number} X",
          "     * @param {number} Y",
          "     * @param {number} Z",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set internal __x, __y and __Y from XYZ color</p>"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} X",
            "paramName": "X",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} Y",
            "paramName": "Y",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} Z",
            "paramName": "Z",
            "description": "",
            "type": "number"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 420,
          "column": 4,
          "index": 14318
        },
        "end": {
          "line": 426,
          "column": 5,
          "index": 14574
        }
      },
      "type": "function",
      "params": [
        {
          "name": "X",
          "type": "number"
        },
        {
          "name": "Y",
          "type": "number"
        },
        {
          "name": "Z",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "__gamutMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * move x and y to be inside the color range that the R, G and B span",
          "     * @private",
          "     * @param {number} x",
          "     * @param {number} y",
          "     * @returns {{x: number, y: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>move x and y to be inside the color range that the R, G and B span</p>"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} x",
            "paramName": "x",
            "description": "",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{number} y",
            "paramName": "y",
            "description": "",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{x: number, y: number}}",
            "type": "{x: number, y: number}",
            "description": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 435,
          "column": 4,
          "index": 14778
        },
        "end": {
          "line": 470,
          "column": 5,
          "index": 15825
        }
      },
      "type": "function",
      "params": [
        {
          "name": "x",
          "type": "number"
        },
        {
          "name": "y",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "{x: number, y: number}"
      },
      "appearsIn": []
    },
    "__validateHSV": {
      "jsdoc": {
        "raw": [
          " make derived color valid"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 473,
          "column": 4,
          "index": 15864
        },
        "end": {
          "line": 595,
          "column": 5,
          "index": 20210
        }
      },
      "type": "function",
      "params": [
        {
          "name": "force"
        }
      ],
      "appearsIn": []
    },
    "__validateRGB": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 597,
          "column": 4,
          "index": 20217
        },
        "end": {
          "line": 625,
          "column": 5,
          "index": 21012
        }
      },
      "type": "function",
      "params": [
        {
          "name": "force"
        }
      ],
      "appearsIn": []
    },
    "__validateRGBW": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 627,
          "column": 4,
          "index": 21019
        },
        "end": {
          "line": 678,
          "column": 5,
          "index": 22488
        }
      },
      "type": "function",
      "params": [
        {
          "name": "force"
        }
      ],
      "appearsIn": []
    },
    "__validateT": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 680,
          "column": 4,
          "index": 22495
        },
        "end": {
          "line": 691,
          "column": 5,
          "index": 23116
        }
      },
      "type": "function",
      "params": [
        {
          "name": "force"
        }
      ],
      "appearsIn": []
    },
    "__validateLab": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 693,
          "column": 4,
          "index": 23123
        },
        "end": {
          "line": 711,
          "column": 5,
          "index": 23670
        }
      },
      "type": "function",
      "params": [
        {
          "name": "force"
        }
      ],
      "appearsIn": []
    },
    "__validateLCh": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 713,
          "column": 4,
          "index": 23677
        },
        "end": {
          "line": 727,
          "column": 5,
          "index": 24206
        }
      },
      "type": "function",
      "params": [
        {
          "name": "force"
        }
      ],
      "appearsIn": []
    },
    "__invalidateBut": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Invalidate all cached values but the one to keep",
          "     * @private",
          "     * @param {string} keep",
          "     * @param {string} [keep2]",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Invalidate all cached values but the one to keep</p>"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} keep",
            "paramName": "keep",
            "description": "",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{string} [keep2]",
            "paramName": "[keep2]",
            "description": "",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 735,
          "column": 4,
          "index": 24360
        },
        "end": {
          "line": 741,
          "column": 5,
          "index": 24584
        }
      },
      "type": "function",
      "params": [
        {
          "name": "keep",
          "type": "string"
        },
        {
          "name": "keep2"
        }
      ],
      "appearsIn": []
    },
    "__syncHSV2xy": {
      "jsdoc": {
        "raw": [
          " synchronise xyY"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 744,
          "column": 4,
          "index": 24614
        },
        "end": {
          "line": 798,
          "column": 5,
          "index": 26636
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__syncRGB2xy": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 800,
          "column": 4,
          "index": 26643
        },
        "end": {
          "line": 809,
          "column": 5,
          "index": 27271
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__syncRGBW2xy": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 811,
          "column": 4,
          "index": 27278
        },
        "end": {
          "line": 833,
          "column": 5,
          "index": 28143
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__syncT2xy": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 835,
          "column": 4,
          "index": 28150
        },
        "end": {
          "line": 840,
          "column": 5,
          "index": 28306
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__syncY2xy": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 842,
          "column": 4,
          "index": 28313
        },
        "end": {
          "line": 844,
          "column": 5,
          "index": 28368
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__syncLab2xy": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 846,
          "column": 4,
          "index": 28375
        },
        "end": {
          "line": 864,
          "column": 5,
          "index": 28936
        }
      },
      "type": "function",
      "params": [
        {
          "name": "keepLCh"
        }
      ],
      "appearsIn": []
    },
    "__syncLCh2xy": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 866,
          "column": 4,
          "index": 28943
        },
        "end": {
          "line": 874,
          "column": 5,
          "index": 29197
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "changeComponent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Change the color by changing one of it's components.",
          "     *",
          "     * Expected values are:",
          "     * - h, s, v: 0...1",
          "     * - r, g, b, w: 0...1",
          "     * - T: 1667...25000 Kelvin",
          "     * - x, y, Y: 0...1",
          "     * - L, C, h: 0...1",
          "     *",
          "     * @param {string} component",
          "     * @param {(number|number[]|{h:number,s:number,v:number}|{r:number,g:number,b:number,w:number}|{x:number,y:number,Y:number})} value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Change the color by changing one of it's components.\n Expected values are:</p>\n<ul>\n<li>h, s, v: 0…1</li>\n<li>r, g, b, w: 0…1</li>\n<li>T: 1667…25000 Kelvin</li>\n<li>x, y, Y: 0…1</li>\n<li>L, C, h: 0…1</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} component",
            "paramName": "component",
            "description": "",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{(number|number[]|{h:number,s:number,v:number}|{r:number,g:number,b:number,w:number}|{x:number,y:number,Y:number})} value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 889,
          "column": 4,
          "index": 29622
        },
        "end": {
          "line": 1019,
          "column": 5,
          "index": 32970
        }
      },
      "type": "function",
      "params": [
        {
          "name": "component",
          "type": "string"
        },
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "_forceHSV": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the internal value to the given HSV value without a check.",
          "     * THIS IS FOR INTERNAL USE ONLY! DO NOT USE!",
          "     * @private",
          "     * @param {{h: number, s: number, v: number}} hsv",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the internal value to the given HSV value without a check.\n THIS IS FOR INTERNAL USE ONLY! DO NOT USE!</p>"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{{h: number, s: number, v: number}} hsv"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1027,
          "column": 4,
          "index": 33183
        },
        "end": {
          "line": 1030,
          "column": 5,
          "index": 33256
        }
      },
      "type": "function",
      "params": [
        {
          "name": "hsv"
        }
      ],
      "appearsIn": []
    },
    "_forceLCh": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 1031,
          "column": 4,
          "index": 33262
        },
        "end": {
          "line": 1034,
          "column": 5,
          "index": 33335
        }
      },
      "type": "function",
      "params": [
        {
          "name": "LCh"
        }
      ],
      "appearsIn": []
    },
    "getComponent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the value(s) of the specified component",
          "     *",
          "     * Value ranges are:",
          "     * - h, s, v: 0...1",
          "     * - r, g, b, w: 0...1",
          "     * - T: 1667...25000 Kelvin",
          "     * - x, y, Y: 0...1",
          "     * - L, a, b: 0...100 for `L` and roughly -150...150 for `a` and `b`",
          "     * - L, C, h: 0...1",
          "     *",
          "     * @param {string} component",
          "     * @param {boolean} gamutMap",
          "     * @param {boolean} force",
          "     * @returns {(number|{x:number, y:number}|{h:number,s:number,v:number}|{r:number,g:number,b:number}|{r:number,g:number,b:number,w:number}|{L:number,a:number,b:number}|{L:number,C:number,h:number})}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the value(s) of the specified component\n Value ranges are:</p>\n<ul>\n<li>h, s, v: 0…1</li>\n<li>r, g, b, w: 0…1</li>\n<li>T: 1667…25000 Kelvin</li>\n<li>x, y, Y: 0…1</li>\n<li>L, a, b: 0…100 for <code>L</code> and roughly -150…150 for <code>a</code> and <code>b</code></li>\n<li>L, C, h: 0…1</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} component",
            "paramName": "component",
            "description": "",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{boolean} gamutMap",
            "paramName": "gamutMap",
            "description": "",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "{boolean} force",
            "paramName": "force",
            "description": "",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{(number|{x:number, y:number}|{h:number,s:number,v:number}|{r:number,g:number,b:number}|{r:number,g:number,b:number,w:number}|{L:number,a:number,b:number}|{L:number,C:number,h:number})}",
            "type": "(number|{x:number, y:number}|{h:number,s:number,v:number}|{r:number,g:number,b:number}|{r:number,g:number,b:number,w:number}|{L:number,a:number,b:number}|{L:number,C:number,h:number})",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1052,
          "column": 4,
          "index": 33950
        },
        "end": {
          "line": 1143,
          "column": 5,
          "index": 36711
        }
      },
      "type": "function",
      "params": [
        {
          "name": "component",
          "type": "string"
        },
        {
          "name": "gamutMap",
          "type": "boolean"
        },
        {
          "name": "force",
          "type": "boolean"
        }
      ],
      "returnType": {
        "type": "(number|{x:number, y:number}|{h:number,s:number,v:number}|{r:number,g:number,b:number}|{r:number,g:number,b:number,w:number}|{L:number,a:number,b:number}|{L:number,C:number,h:number})"
      },
      "appearsIn": []
    },
    "copy": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return a copy from this color",
          "     * @returns {cv.util.Color}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a copy from this color</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{cv.util.Color}",
            "type": "cv.util.Color",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1149,
          "column": 4,
          "index": 36803
        },
        "end": {
          "line": 1151,
          "column": 5,
          "index": 36872
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "cv.util.Color"
      },
      "appearsIn": []
    },
    "delta": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calculate the distance (difference) between this color and the otherColor",
          "     * in Lab color space, i.e. calculate the Delta E.",
          "     * @param {cv.util.Color} otherColor",
          "     * @returns {number}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculate the distance (difference) between this color and the otherColor\n in Lab color space, i.e. calculate the Delta E.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{cv.util.Color} otherColor",
            "paramName": "otherColor",
            "description": "",
            "type": "cv.util.Color"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{number}",
            "type": "number",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1159,
          "column": 4,
          "index": 37097
        },
        "end": {
          "line": 1167,
          "column": 5,
          "index": 37390
        }
      },
      "type": "function",
      "params": [
        {
          "name": "otherColor",
          "type": "cv.util.Color"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "blend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create a new color by calculating (1-ratio)*thisColor + ratio*otherColor.",
          "     * The blending is done by mixing the LCh coordinates.",
          "     * otherColor must have the same base colors xy coordinates, as this",
          "     * is not checked or even enforced doing a blend between such different",
          "     * colors will create an undesired result.",
          "     * @param {cv.util.Color} otherColor",
          "     * @param {number} ratio",
          "     * @returns {cv.util.Color}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create a new color by calculating (1-ratio)<em>thisColor + ratio</em>otherColor.\n The blending is done by mixing the LCh coordinates.\n otherColor must have the same base colors xy coordinates, as this\n is not checked or even enforced doing a blend between such different\n colors will create an undesired result.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{cv.util.Color} otherColor",
            "paramName": "otherColor",
            "description": "",
            "type": "cv.util.Color"
          },
          {
            "name": "@param",
            "body": "{number} ratio",
            "paramName": "ratio",
            "description": "",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{cv.util.Color}",
            "type": "cv.util.Color",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1179,
          "column": 4,
          "index": 37851
        },
        "end": {
          "line": 1196,
          "column": 5,
          "index": 38419
        }
      },
      "type": "function",
      "params": [
        {
          "name": "otherColor",
          "type": "cv.util.Color"
        },
        {
          "name": "ratio",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "cv.util.Color"
      },
      "appearsIn": []
    }
  },
  "properties": {}
}