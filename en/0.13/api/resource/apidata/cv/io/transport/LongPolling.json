{
  "version": 0.3,
  "lastModified": 1722153538383,
  "lastModifiedIso": "2024-07-28T07:58:58.383Z",
  "classFilename": "../../client/source/class/cv/io/transport/LongPolling.js",
  "type": "class",
  "location": {
    "start": {
      "line": 20,
      "column": 0,
      "index": 818
    },
    "end": {
      "line": 345,
      "column": 3,
      "index": 11088
    }
  },
  "className": "cv.io.transport.LongPolling",
  "jsdoc": {
    "raw": [
      " LongPolling.js",
      " *",
      " * copyright (c) 2010-2016, Christian Mayer and the CometVisu contributers.",
      " *",
      " * This program is free software; you can redistribute it and/or modify it",
      " * under the terms of the GNU General Public License as published by the Free",
      " * Software Foundation; either version 3 of the License, or (at your option)",
      " * any later version.",
      " *",
      " * This program is distributed in the hope that it will be useful, but WITHOUT",
      " * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or",
      " * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for",
      " * more details.",
      " *",
      " * You should have received a copy of the GNU General Public License along",
      " * with this program; if not, write to the Free Software Foundation, Inc.,",
      " * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA",
      " "
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "client"
      }
    ],
    "location": {
      "start": {
        "line": 32,
        "column": 2,
        "index": 1087
      },
      "end": {
        "line": 36,
        "column": 3,
        "index": 1215
      }
    }
  },
  "members": {
    "watchdog": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1371
        },
        "end": {
          "line": 44,
          "column": 18,
          "index": 1385
        }
      },
      "appearsIn": []
    },
    "doRestart": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1391
        },
        "end": {
          "line": 45,
          "column": 20,
          "index": 1407
        }
      },
      "appearsIn": []
    },
    "xhr": {
      "jsdoc": {
        "raw": [
          " are we currently in a restart, e.g. due to the watchdog"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1472
        },
        "end": {
          "line": 46,
          "column": 13,
          "index": 1481
        }
      },
      "appearsIn": []
    },
    "lastIndex": {
      "jsdoc": {
        "raw": [
          " the ongoing AJAX request"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1515
        },
        "end": {
          "line": 47,
          "column": 17,
          "index": 1528
        }
      },
      "appearsIn": []
    },
    "retryCounter": {
      "jsdoc": {
        "raw": [
          " index returned by the last request"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1572
        },
        "end": {
          "line": 48,
          "column": 19,
          "index": 1587
        }
      },
      "appearsIn": []
    },
    "retryServerErrorCounter": {
      "jsdoc": {
        "raw": [
          " count number of retries (reset with each valid response)"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1653
        },
        "end": {
          "line": 49,
          "column": 30,
          "index": 1679
        }
      },
      "appearsIn": []
    },
    "sessionId": {
      "jsdoc": {
        "raw": [
          " count number of successive temporary server errors"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1739
        },
        "end": {
          "line": 50,
          "column": 19,
          "index": 1754
        }
      },
      "appearsIn": []
    },
    "client": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1760
        },
        "end": {
          "line": 51,
          "column": 16,
          "index": 1772
        }
      },
      "appearsIn": []
    },
    "running": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1778
        },
        "end": {
          "line": 52,
          "column": 17,
          "index": 1791
        }
      },
      "appearsIn": []
    },
    "handleSession": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This function gets called once the communication is established",
          "     * and this.client information is available.",
          "     *",
          "     * @param args {Array} arguments from the XHR response callback",
          "     * @param connect {Boolean} whether to start the connection or not",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function gets called once the communication is established\n and this.client information is available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {Array} arguments from the XHR response callback",
            "paramName": "args",
            "description": " arguments from the XHR response callback",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "connect {Boolean} whether to start the connection or not",
            "paramName": "connect",
            "description": " whether to start the connection or not",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 2080
        },
        "end": {
          "line": 77,
          "column": 5,
          "index": 2732
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "Array<any>"
        },
        {
          "name": "connect",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "connect": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2739
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3269
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__startReading": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 3276
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 3680
        }
      },
      "type": "function",
      "params": [
        {
          "name": "data"
        },
        {
          "name": "callback"
        }
      ],
      "appearsIn": []
    },
    "handleRead": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This function gets called once the communication is established",
          "     * and this.client information is available",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function gets called once the communication is established\n and this.client information is available</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 115,
          "column": 4,
          "index": 3822
        },
        "end": {
          "line": 175,
          "column": 5,
          "index": 5926
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "handleReadStart": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5933
        },
        "end": {
          "line": 215,
          "column": 5,
          "index": 7362
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "handleError": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This function gets called on an error",
          "     *",
          "     *",
          "     * @param ev {Event}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function gets called on an error</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {Event}",
            "paramName": "ev",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 223,
          "column": 4,
          "index": 7469
        },
        "end": {
          "line": 276,
          "column": 6,
          "index": 9319
        }
      },
      "appearsIn": []
    },
    "beforeSend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * manipulates the header of the current ajax query before it is",
          "     * been send to the server",
          "     *",
          "     * @param xhr {Object} the native XHR object",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>manipulates the header of the current ajax query before it is\n been send to the server</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "xhr {Object} the native XHR object",
            "paramName": "xhr",
            "description": " the native XHR object",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 285,
          "column": 4,
          "index": 9505
        },
        "end": {
          "line": 296,
          "column": 5,
          "index": 9916
        }
      },
      "type": "function",
      "params": [
        {
          "name": "xhr",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "readResendHeaderValues": {
      "jsdoc": {
        "raw": [
          "*",
          "     * read the header values of a response and stores them to the",
          "     * resendHeaders array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>read the header values of a response and stores them to the\n resendHeaders array</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 10033
        },
        "end": {
          "line": 306,
          "column": 5,
          "index": 10205
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "isConnectionRunning": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Check if the connection is still running.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if the connection is still running.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 311,
          "column": 4,
          "index": 10277
        },
        "end": {
          "line": 313,
          "column": 5,
          "index": 10325
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "restart": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Restart the read request, e.g. when the watchdog kicks in",
          "     *",
          "     * @param doFullReload {Boolean} reload all data and not only restart connection",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restart the read request, e.g. when the watchdog kicks in</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "doFullReload {Boolean} reload all data and not only restart connection",
            "paramName": "doFullReload",
            "description": " reload all data and not only restart connection",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 320,
          "column": 4,
          "index": 10505
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 10731
        }
      },
      "type": "function",
      "params": [
        {
          "name": "doFullReload",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "abort": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Abort the read request properly",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abort the read request properly</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 333,
          "column": 4,
          "index": 10799
        },
        "end": {
          "line": 343,
          "column": 5,
          "index": 11080
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}