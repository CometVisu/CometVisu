{
  "version": 0.3,
  "lastModified": 1729100955157,
  "lastModifiedIso": "2024-10-16T17:49:15.157Z",
  "classFilename": "../../client/source/class/cv/io/IClient.js",
  "type": "interface",
  "location": {
    "start": {
      "line": 4,
      "column": 0,
      "index": 58
    },
    "end": {
      "line": 216,
      "column": 3,
      "index": 6144
    }
  },
  "className": "cv.io.IClient",
  "jsdoc": {
    "raw": [
      "*",
      " * Interface all CometVisu-Client must implement.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Interface all CometVisu-Client must implement.</p>"
      }
    ]
  },
  "properties": {
    "connected": {
      "location": {
        "start": {
          "line": 11,
          "column": 4,
          "index": 242
        },
        "end": {
          "line": 15,
          "column": 5,
          "index": 334
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeConnected"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "server": {
      "location": {
        "start": {
          "line": 20,
          "column": 4,
          "index": 411
        },
        "end": {
          "line": 24,
          "column": 5,
          "index": 500
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changedServer"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The server the client is currently speaking to",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The server the client is currently speaking to</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "dataReceived": {
      "location": {
        "start": {
          "line": 29,
          "column": 4,
          "index": 625
        },
        "end": {
          "line": 32,
          "column": 5,
          "index": 688
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * needed to be able to check if the incoming update is the initial answer or a successing update",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>needed to be able to check if the incoming update is the initial answer or a successing update</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "name": {
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 757
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 814
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The name this client is registered for",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name this client is registered for</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "getBackend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current backend configuration",
          "     * @return {Map}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current backend configuration</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map}",
            "type": "Map<any, any>",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1046
        },
        "end": {
          "line": 53,
          "column": 19,
          "index": 1061
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "getType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the backend type",
          "     * @return {string} e.g. openhab, mqtt or knxd",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the backend type</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string} e.g. openhab, mqtt or knxd",
            "type": "string",
            "description": "e.g. openhab, mqtt or knxd"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1167
        },
        "end": {
          "line": 59,
          "column": 16,
          "index": 1179
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "hasProvider": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns true, when the backend provides a special data provider for this kind of data",
          "     * @param name {String}",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true, when the backend provides a special data provider for this kind of data</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String}",
            "paramName": "name",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 1348
        },
        "end": {
          "line": 66,
          "column": 24,
          "index": 1368
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getProviderUrl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * URL to the provided data",
          "     * @param name",
          "     * @return {String}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>URL to the provided data</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name",
            "paramName": "name",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "string",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1466
        },
        "end": {
          "line": 73,
          "column": 27,
          "index": 1489
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "getProviderData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the provided data directly from client, return null when not implemented",
          "     * @param name {String}",
          "     * @param format {String} 'monaco' for texteditor and 'dp' for Tree editor",
          "     * @return {Promise<variant>|null}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the provided data directly from client, return null when not implemented</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String}",
            "paramName": "name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "format {String} 'monaco' for texteditor and 'dp' for Tree editor",
            "paramName": "format",
            "description": " 'monaco' for texteditor and 'dp' for Tree editor",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<variant>|null}",
            "type": "Promise<variant>|null",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 1745
        },
        "end": {
          "line": 81,
          "column": 47,
          "index": 1788
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "format",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Promise<variant>|null"
      },
      "appearsIn": []
    },
    "getProviderConvertFunction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mapping function the convert the data from the backend to a format the CometVisu data provider consumer can process.",
          "     * @param name {String}",
          "     * @param format {String} 'monaco' for texteditor and 'dp' for Tree editor",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping function the convert the data from the backend to a format the CometVisu data provider consumer can process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String}",
            "paramName": "name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "format {String} 'monaco' for texteditor and 'dp' for Tree editor",
            "paramName": "format",
            "description": " 'monaco' for texteditor and 'dp' for Tree editor",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2042
        },
        "end": {
          "line": 88,
          "column": 47,
          "index": 2085
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "format",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "setInitialAddresses": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set a subset of addresses the client should request initially (e.g. the ones one the start page).",
          "     * This can be used to increase the init state loading speed by sending an initial request with a smaller",
          "     * subset of addresses to the backend and send the rest later.",
          "     * @param addresses {Array}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a subset of addresses the client should request initially (e.g. the ones one the start page).\n This can be used to increase the init state loading speed by sending an initial request with a smaller\n subset of addresses to the backend and send the rest later.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "addresses {Array}",
            "paramName": "addresses",
            "type": "Array<any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 96,
          "column": 4,
          "index": 2422
        },
        "end": {
          "line": 96,
          "column": 37,
          "index": 2455
        }
      },
      "type": "function",
      "params": [
        {
          "name": "addresses",
          "type": "Array<any>"
        }
      ],
      "appearsIn": []
    },
    "subscribe": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Subscribe to the addresses in the parameter. The second parameter",
          "     * (filter) is optional",
          "     *",
          "     * @param addresses {Array<String>} addresses to subscribe to",
          "     * @param filters {Array?} Filters",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Subscribe to the addresses in the parameter. The second parameter\n (filter) is optional</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "addresses {Array<String>} addresses to subscribe to",
            "paramName": "addresses",
            "description": " addresses to subscribe to",
            "type": "Array<String>"
          },
          {
            "name": "@param",
            "body": "filters {Array?} Filters",
            "paramName": "filters",
            "description": " Filters",
            "optional": true,
            "type": "Array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 2698
        },
        "end": {
          "line": 106,
          "column": 36,
          "index": 2730
        }
      },
      "type": "function",
      "params": [
        {
          "name": "addresses",
          "type": "Array<String>"
        },
        {
          "name": "filters",
          "type": "Array",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "addSubscription": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a single subscription",
          "     * @param address {String}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a single subscription</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String}",
            "paramName": "address",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 2817
        },
        "end": {
          "line": 112,
          "column": 31,
          "index": 2844
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "login": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This function starts the communication by a login and then runs the",
          "     * ongoing communication task",
          "     *",
          "     * @param loginOnly {Boolean} if true only login and backend configuration, no subscription",
          "     *                            to addresses (default: false)",
          "     * @param credentials {Map} map with \"username\" and \"password\" (optional)",
          "     * @param callback {Function} call this function when login is done",
          "     * @param context {Object} context for the callback (this)",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function starts the communication by a login and then runs the\n ongoing communication task</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "loginOnly {Boolean} if true only login and backend configuration, no subscription\n                            to addresses (default: false)",
            "paramName": "loginOnly",
            "description": " if true only login and backend configuration, no subscription\n                            to addresses (default: false)",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "credentials {Map} map with \"username\" and \"password\" (optional)",
            "paramName": "credentials",
            "description": " map with \"username\" and \"password\" (optional)",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "callback {Function} call this function when login is done",
            "paramName": "callback",
            "description": " call this function when login is done",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "context {Object} context for the callback (this)",
            "paramName": "context",
            "description": " context for the callback (this)",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3363
        },
        "end": {
          "line": 125,
          "column": 55,
          "index": 3414
        }
      },
      "type": "function",
      "params": [
        {
          "name": "loginOnly",
          "type": "boolean"
        },
        {
          "name": "credentials",
          "type": "Map<any, any>"
        },
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "context",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "authorize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Authorize a Request by adding the necessary headers.",
          "     * @param req {qx.io.request.Xhr}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Authorize a Request by adding the necessary headers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "req {qx.io.request.Xhr}",
            "paramName": "req",
            "type": "qx.io.request.Xhr"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3535
        },
        "end": {
          "line": 131,
          "column": 21,
          "index": 3552
        }
      },
      "type": "function",
      "params": [
        {
          "name": "req",
          "type": "qx.io.request.Xhr"
        }
      ],
      "appearsIn": []
    },
    "canAuthorize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Client is able to authorize a request, by knowing the credentials",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Client is able to authorize a request, by knowing the credentials</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 137,
          "column": 4,
          "index": 3673
        },
        "end": {
          "line": 137,
          "column": 21,
          "index": 3690
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getResourcePath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * return the relative path to a resource on the currently used backend",
          "     *",
          "     * @param name {String} Name of the resource (e.g. login, read, write, chart)",
          "     * @param params {Map?} optional data needed to generate the resource path",
          "     * @return {String|null} relative path to the resource, returns `null` when the backend does not provide that resource",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>return the relative path to a resource on the currently used backend</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the resource (e.g. login, read, write, chart)",
            "paramName": "name",
            "description": " Name of the resource (e.g. login, read, write, chart)",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "params {Map?} optional data needed to generate the resource path",
            "paramName": "params",
            "description": " optional data needed to generate the resource path",
            "optional": true,
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} relative path to the resource, returns <code>null</code> when the backend does not provide that resource",
            "type": "String|null",
            "description": "relative path to the resource, returns <code>null</code> when the backend does not provide that resource"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4080
        },
        "end": {
          "line": 146,
          "column": 36,
          "index": 4112
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "params",
          "type": "Map",
          "optional": true
        }
      ],
      "returnType": {
        "type": "String|null"
      },
      "appearsIn": []
    },
    "setResourcePath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the relative path to a resource on the currently used backend",
          "     * @param name {String} Name of the resource (e.g. login, read, write, chart)",
          "     * @param path {String} relative path to the resource",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the relative path to a resource on the currently used backend</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the resource (e.g. login, read, write, chart)",
            "paramName": "name",
            "description": " Name of the resource (e.g. login, read, write, chart)",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "path {String} relative path to the resource",
            "paramName": "path",
            "description": " relative path to the resource",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4348
        },
        "end": {
          "line": 153,
          "column": 34,
          "index": 4378
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "path",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "hasCustomChartsDataProcessor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This client provides an own processor for charts data",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This client provides an own processor for charts data</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4487
        },
        "end": {
          "line": 159,
          "column": 37,
          "index": 4520
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "processChartsData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * For custom backend charts data some processing might be done to convert it in a format the CometVisu can handle",
          "     * @param data {var}",
          "     * @param config {{scaling: number, offset: number}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>For custom backend charts data some processing might be done to convert it in a format the CometVisu can handle</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {var}",
            "paramName": "data",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "config {{scaling: number, offset: number}}",
            "paramName": "config",
            "description": "}",
            "type": "{scaling: number, offset: number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 4744
        },
        "end": {
          "line": 166,
          "column": 38,
          "index": 4778
        }
      },
      "type": "function",
      "params": [
        {
          "name": "data",
          "type": "var"
        },
        {
          "name": "config",
          "type": "{scaling: number, offset: number"
        }
      ],
      "appearsIn": []
    },
    "write": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This function sends a value",
          "     * @param address {String} address to send the value to",
          "     * @param value {String} value to send",
          "     * @param options {Object} optional options, depending on backend",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function sends a value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} address to send the value to",
            "paramName": "address",
            "description": " address to send the value to",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {String} value to send",
            "paramName": "value",
            "description": " value to send",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Object} optional options, depending on backend",
            "paramName": "options",
            "description": " optional options, depending on backend",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 5016
        },
        "end": {
          "line": 175,
          "column": 37,
          "index": 5049
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "options",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "getLastError": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the last recorded error",
          "     *",
          "     * @return {{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the last recorded error</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*}",
            "type": "{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 5229
        },
        "end": {
          "line": 182,
          "column": 21,
          "index": 5246
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "{code: (*|Integer), text: (*|String), response: (*|String|null), url: (*|String), time: number}|*"
      },
      "appearsIn": []
    },
    "restart": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Restart the connection",
          "     * @param full",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restart the connection</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "full",
            "paramName": "full",
            "type": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 5318
        },
        "end": {
          "line": 188,
          "column": 20,
          "index": 5334
        }
      },
      "type": "function",
      "params": [
        {
          "name": "full"
        }
      ],
      "appearsIn": []
    },
    "terminate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Called directly before the page gets unloaded. Can be used to disconnect correctly.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called directly before the page gets unloaded. Can be used to disconnect correctly.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 193,
          "column": 4,
          "index": 5448
        },
        "end": {
          "line": 193,
          "column": 18,
          "index": 5462
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "update": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handle the incoming state updates. This method is not implemented by the client itself.",
          "     * It is injected by the project using the client.",
          "     * @param json",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle the incoming state updates. This method is not implemented by the client itself.\n It is injected by the project using the client.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "json",
            "paramName": "json",
            "type": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 199,
          "column": 4,
          "index": 5653
        },
        "end": {
          "line": 199,
          "column": 19,
          "index": 5668
        }
      },
      "type": "function",
      "params": [
        {
          "name": "json"
        }
      ],
      "appearsIn": []
    },
    "record": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Can be overridden to record client communication with backend",
          "     * @param type {String} type of event to record",
          "     * @param data {Object} data to record",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Can be overridden to record client communication with backend</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} type of event to record",
            "paramName": "type",
            "description": " type of event to record",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {Object} data to record",
            "paramName": "data",
            "description": " data to record",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 206,
          "column": 4,
          "index": 5855
        },
        "end": {
          "line": 206,
          "column": 25,
          "index": 5876
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "data",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "showError": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Can be overridden to provide an error handler for client errors",
          "     * @param type {Number} one of cv.io.Client.ERROR_CODES",
          "     * @param message {String} detailed error message",
          "     * @param args",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Can be overridden to provide an error handler for client errors</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {Number} one of cv.io.Client.ERROR_CODES",
            "paramName": "type",
            "description": " one of cv.io.Client.ERROR_CODES",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "message {String} detailed error message",
            "paramName": "message",
            "description": " detailed error message",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "args",
            "paramName": "args",
            "type": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 214,
          "column": 4,
          "index": 6103
        },
        "end": {
          "line": 214,
          "column": 37,
          "index": 6136
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "number"
        },
        {
          "name": "message",
          "type": "string"
        },
        {
          "name": "args"
        }
      ],
      "appearsIn": []
    }
  },
  "statics": {}
}