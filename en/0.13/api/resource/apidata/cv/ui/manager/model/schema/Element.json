{
  "version": 0.3,
  "lastModified": 1722153538623,
  "lastModifiedIso": "2024-07-28T07:58:58.623Z",
  "classFilename": "../../source/class/cv/ui/manager/model/schema/Element.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 858
    },
    "end": {
      "line": 752,
      "column": 3,
      "index": 24455
    }
  },
  "className": "cv.ui.manager.model.schema.Element",
  "jsdoc": {
    "raw": [
      "*",
      " * a single element from the schema",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>a single element from the schema</p>"
      }
    ]
  },
  "superClass": "cv.ui.manager.model.schema.Base",
  "mixins": [
    "cv.ui.manager.model.schema.MAnnotation"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "node"
      },
      {
        "name": "schema"
      }
    ],
    "location": {
      "start": {
        "line": 32,
        "column": 2,
        "index": 1137
      },
      "end": {
        "line": 35,
        "column": 3,
        "index": 1209
      }
    }
  },
  "statics": {
    "getElementName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the name of a schema-element",
          "     * @param e object  element to find the name of",
          "     * @param schema",
          "     * @return  string          name of the element",
          "     * @throws  if the name can not be found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the name of a schema-element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e object  element to find the name of"
          },
          {
            "name": "@param",
            "body": "schema",
            "paramName": "schema",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "string          name of the element"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "if the name can not be found"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1577
        },
        "end": {
          "line": 68,
          "column": 5,
          "index": 2099
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        },
        {
          "name": "schema"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "getTypeNode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * find the type-node for this element",
          "     * @param node",
          "     * @param schema",
          "     * @return  object  object of the type-Node",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>find the type-node for this element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node",
            "paramName": "node",
            "type": ""
          },
          {
            "name": "@param",
            "body": "schema",
            "paramName": "schema",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object  object of the type-Node"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2253
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 3216
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        },
        {
          "name": "schema"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "sortChildNodes": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 3223
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4740
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sorting"
        }
      ],
      "appearsIn": []
    }
  },
  "properties": {
    "type": {
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4892
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 4947
        }
      },
      "json": {
        "refine": true,
        "init": "element"
      },
      "jsdoc": null,
      "appearsIn": [
        "cv.ui.manager.model.schema.Base"
      ]
    },
    "name": {
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 4954
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 5005
        }
      },
      "json": {
        "check": "String",
        "init": ""
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "defaultValue": {
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 5012
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 5077
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "sortable": {
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 5084
        },
        "end": {
          "line": 178,
          "column": 5,
          "index": 5174
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeSortable"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "mixed": {
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 5181
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 5237
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": null,
      "appearsIn": []
    }
  },
  "members": {
    "__allowedContentLoaded": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 5383
        },
        "end": {
          "line": 192,
          "column": 33,
          "index": 5412
        }
      },
      "appearsIn": []
    },
    "__allowedContent": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 193,
          "column": 4,
          "index": 5418
        },
        "end": {
          "line": 193,
          "column": 26,
          "index": 5440
        }
      },
      "appearsIn": []
    },
    "__allowedAttributes": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 5446
        },
        "end": {
          "line": 194,
          "column": 29,
          "index": 5471
        }
      },
      "appearsIn": []
    },
    "__textNodeSchemaElement": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5477
        },
        "end": {
          "line": 195,
          "column": 33,
          "index": 5506
        }
      },
      "appearsIn": []
    },
    "__extendedElement": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5512
        },
        "end": {
          "line": 196,
          "column": 32,
          "index": 5540
        }
      },
      "appearsIn": []
    },
    "_type": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get and set the type-node for the element",
          "     * @var object  Type-Node (most certainly a complexType)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get and set the type-node for the element</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "object  Type-Node (most certainly a complexType)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 202,
          "column": 4,
          "index": 5673
        },
        "end": {
          "line": 202,
          "column": 15,
          "index": 5684
        }
      },
      "appearsIn": []
    },
    "parse": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 5691
        },
        "end": {
          "line": 216,
          "column": 5,
          "index": 6181
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.manager.model.schema.Base",
      "appearsIn": [
        "cv.ui.manager.model.schema.Base"
      ]
    },
    "getExtendedElement": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 218,
          "column": 4,
          "index": 6188
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 6969
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getAllowedContent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get a list of allowed elements for this element",
          "     *",
          "     * @return  object  object of SchemaElement-elements, key is the name",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get a list of allowed elements for this element</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object  object of SchemaElement-elements, key is the name"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 242,
          "column": 4,
          "index": 7128
        },
        "end": {
          "line": 298,
          "column": 5,
          "index": 9619
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "appearsIn": []
    },
    "_parseGrouping": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 300,
          "column": 4,
          "index": 9626
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 10506
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        },
        {
          "name": "schema"
        }
      ],
      "appearsIn": []
    },
    "getAllowedAttributes": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get and set the list of allowed attributes",
          "     * @var array   List of SchemaAttribute-objects",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get and set the list of allowed attributes</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "array   List of SchemaAttribute-objects"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 334,
          "column": 4,
          "index": 10631
        },
        "end": {
          "line": 382,
          "column": 5,
          "index": 12602
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "areChildrenSortable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * are these elements children sortable? this is not the case if a sequence is used, e.g.",
          "     *",
          "     * @return  boolean     are children sortable?",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>are these elements children sortable? this is not the case if a sequence is used, e.g.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "boolean     are children sortable?"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 389,
          "column": 4,
          "index": 12777
        },
        "end": {
          "line": 398,
          "column": 5,
          "index": 13056
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "appearsIn": []
    },
    "getRequiredElements": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get a list of required elements.",
          "     * if an element is required multiple times, it is listed multiple times",
          "     *",
          "     * @return  array   list of required elements",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get a list of required elements.\n if an element is required multiple times, it is listed multiple times</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "array   list of required elements"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 13253
        },
        "end": {
          "line": 427,
          "column": 5,
          "index": 13859
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "overriddenFrom": "cv.ui.manager.model.schema.Base",
      "appearsIn": [
        "cv.ui.manager.model.schema.Base"
      ]
    },
    "getAllowedElements": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get a list of all allowed elements for this element",
          "     * @param excludeComment",
          "     * @return  object  list of SchemaElement-elements, key is the name",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get a list of all allowed elements for this element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "excludeComment",
            "paramName": "excludeComment",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object  list of SchemaElement-elements, key is the name"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 434,
          "column": 4,
          "index": 14042
        },
        "end": {
          "line": 462,
          "column": 5,
          "index": 15136
        }
      },
      "type": "function",
      "params": [
        {
          "name": "excludeComment"
        }
      ],
      "returnType": {},
      "overriddenFrom": "cv.ui.manager.model.schema.Base",
      "appearsIn": [
        "cv.ui.manager.model.schema.Base"
      ]
    },
    "getAllowedElementsSorting": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the sorting of the allowed elements.",
          "     *",
          "     * @return  object              list of allowed elements, with their sort-number as value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the sorting of the allowed elements.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object              list of allowed elements, with their sort-number as value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 469,
          "column": 4,
          "index": 15308
        },
        "end": {
          "line": 477,
          "column": 5,
          "index": 15539
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "overriddenFrom": "cv.ui.manager.model.schema.Base",
      "appearsIn": [
        "cv.ui.manager.model.schema.Base"
      ]
    },
    "getFirstLevelElementSorting": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 479,
          "column": 4,
          "index": 15546
        },
        "end": {
          "line": 492,
          "column": 5,
          "index": 16013
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getChildBounds": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the bounds for this elements children (as defined by a choice)",
          "     *",
          "     * @return  object  bounds ({min: x, max: y})",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the bounds for this elements children (as defined by a choice)</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object  bounds ({min: x, max: y})",
            "type": "min: x, max: y",
            "description": ")"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 499,
          "column": 4,
          "index": 16167
        },
        "end": {
          "line": 513,
          "column": 5,
          "index": 16634
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "min: x, max: y"
      },
      "appearsIn": []
    },
    "getBoundsForElementName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the bounds for a specific element-name",
          "     * will go through all of the groupings-tree to find out, just how many elements of this may appear",
          "     *",
          "     * @param   childName   string  name of the child-to-be",
          "     * @return  object              {min: x, max: y}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the bounds for a specific element-name\n will go through all of the groupings-tree to find out, just how many elements of this may appear</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "childName   string  name of the child-to-be"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object              {min: x, max: y}",
            "type": "min: x, max: y",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 522,
          "column": 4,
          "index": 16931
        },
        "end": {
          "line": 526,
          "column": 5,
          "index": 17103
        }
      },
      "type": "function",
      "params": [
        {
          "name": "childName"
        }
      ],
      "returnType": {
        "type": "min: x, max: y"
      },
      "overriddenFrom": "cv.ui.manager.model.schema.Base",
      "appearsIn": [
        "cv.ui.manager.model.schema.Base"
      ]
    },
    "isTextContentAllowed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * check if a text-only-node is allowed ...",
          "     *",
          "     * @return  boolean",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>check if a text-only-node is allowed …</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 533,
          "column": 4,
          "index": 17205
        },
        "end": {
          "line": 549,
          "column": 5,
          "index": 17746
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "appearsIn": []
    },
    "isTextContentRequired": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 551,
          "column": 4,
          "index": 17753
        },
        "end": {
          "line": 556,
          "column": 5,
          "index": 17937
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "isChildElementAllowed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * check if an element (specified by its name) is allowed as one of our immediate children",
          "     * Goes recursive if we have choices.",
          "     *",
          "     * @param   child   string  name of the element we want to check",
          "     * @return  boolean         is this element allowed?",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>check if an element (specified by its name) is allowed as one of our immediate children\n Goes recursive if we have choices.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child   string  name of the element we want to check"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "boolean         is this element allowed?"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 565,
          "column": 4,
          "index": 18230
        },
        "end": {
          "line": 587,
          "column": 5,
          "index": 19037
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "getSchemaElementForElementName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the SchemaElement-object for a certain element-name.",
          "     * May return undefined if no element is found, so you might be interested in checking isElementAllowed beforehand.",
          "     *",
          "     * @param   elementName string  name of the element to find the SchemaElement for",
          "     * @return  object              SchemaElement-object, or undefined if none is found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the SchemaElement-object for a certain element-name.\n May return undefined if no element is found, so you might be interested in checking isElementAllowed beforehand.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elementName string  name of the element to find the SchemaElement for"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object              SchemaElement-object, or undefined if none is found"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 596,
          "column": 4,
          "index": 19425
        },
        "end": {
          "line": 642,
          "column": 5,
          "index": 21438
        }
      },
      "type": "function",
      "params": [
        {
          "name": "elementName"
        }
      ],
      "returnType": {},
      "overriddenFrom": "cv.ui.manager.model.schema.Base",
      "appearsIn": [
        "cv.ui.manager.model.schema.Base"
      ]
    },
    "getSchemaDOM": {
      "jsdoc": {
        "raw": [
          "*",
          "     * return the DOM this Schema is based on",
          "     *",
          "     * @return  object  DOM of $xsd",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>return the DOM this Schema is based on</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object  DOM of $xsd"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 649,
          "column": 4,
          "index": 21550
        },
        "end": {
          "line": 651,
          "column": 5,
          "index": 21618
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "appearsIn": []
    },
    "isValueValid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * check if a given value is valid for this element",
          "     *",
          "     * @param   value   string  value to check",
          "     * @return  boolean         is it valid?",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>check if a given value is valid for this element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value   string  value to check"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "boolean         is it valid?"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 659,
          "column": 4,
          "index": 21796
        },
        "end": {
          "line": 673,
          "column": 5,
          "index": 22174
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "getRegex": {
      "jsdoc": {
        "raw": [
          "*",
          "     * create and retrieve the part of a regular expression which describes this very element",
          "     *",
          "     * @param   separator   string  the string used to separate different elements, e.g. ';'",
          "     * @param   nocapture   bool    when set to true non capturing groups are used",
          "     * @return  string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>create and retrieve the part of a regular expression which describes this very element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "separator   string  the string used to separate different elements, e.g. ';'"
          },
          {
            "name": "@param",
            "body": "nocapture   bool    when set to true non capturing groups are used"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 682,
          "column": 4,
          "index": 22497
        },
        "end": {
          "line": 717,
          "column": 5,
          "index": 23425
        }
      },
      "type": "function",
      "params": [
        {
          "name": "separator"
        },
        {
          "name": "nocapture"
        }
      ],
      "returnType": {},
      "overriddenFrom": "cv.ui.manager.model.schema.Base",
      "appearsIn": [
        "cv.ui.manager.model.schema.Base"
      ]
    },
    "getChildrenRegex": {
      "jsdoc": {
        "raw": [
          "*",
          "     * create a full-blown regular expression that describes this elements immediate children",
          "     * @param separator   string  the string used to separate different elements, e.g. ';'",
          "     * @param nocapture",
          "     * @return  string              the regular expression",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>create a full-blown regular expression that describes this elements immediate children</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "separator   string  the string used to separate different elements, e.g. ';'"
          },
          {
            "name": "@param",
            "body": "nocapture",
            "paramName": "nocapture",
            "type": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "string              the regular expression"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 725,
          "column": 4,
          "index": 23716
        },
        "end": {
          "line": 739,
          "column": 5,
          "index": 24140
        }
      },
      "type": "function",
      "params": [
        {
          "name": "separator"
        },
        {
          "name": "nocapture"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "__appInfoCache": {
      "jsdoc": {
        "raw": [
          "*",
          "     * cache for getAppinfo",
          "     * @var array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>cache for getAppinfo</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "array"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1484
        },
        "end": {
          "line": 44,
          "column": 24,
          "index": 1504
        }
      },
      "mixin": "cv.ui.manager.model.schema.MAnnotation",
      "appearsIn": [
        "cv.ui.manager.model.schema.MAnnotation"
      ]
    },
    "__linkRegex": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1510
        },
        "end": {
          "line": 45,
          "column": 21,
          "index": 1527
        }
      },
      "mixin": "cv.ui.manager.model.schema.MAnnotation",
      "appearsIn": [
        "cv.ui.manager.model.schema.MAnnotation"
      ]
    },
    "__language": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1533
        },
        "end": {
          "line": 46,
          "column": 20,
          "index": 1549
        }
      },
      "mixin": "cv.ui.manager.model.schema.MAnnotation",
      "appearsIn": [
        "cv.ui.manager.model.schema.MAnnotation"
      ]
    },
    "__documentationCache": {
      "jsdoc": {
        "raw": [
          "*",
          "     * cache for getDocumentation",
          "     * @var array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>cache for getDocumentation</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "array"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1624
        },
        "end": {
          "line": 52,
          "column": 30,
          "index": 1650
        }
      },
      "mixin": "cv.ui.manager.model.schema.MAnnotation",
      "appearsIn": [
        "cv.ui.manager.model.schema.MAnnotation"
      ]
    },
    "__getTextNodesByXPath": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1657
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 2294
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        },
        {
          "name": "xpath"
        }
      ],
      "mixin": "cv.ui.manager.model.schema.MAnnotation",
      "appearsIn": [
        "cv.ui.manager.model.schema.MAnnotation"
      ]
    },
    "getAppinfo": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the appinfo information from the element, if any",
          "     *",
          "     * @return  array   list of texts, or empty list if none",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the appinfo information from the element, if any</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "array   list of texts, or empty list if none"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2445
        },
        "end": {
          "line": 107,
          "column": 5,
          "index": 3518
        }
      },
      "type": "function",
      "params": [],
      "mixin": "cv.ui.manager.model.schema.MAnnotation",
      "appearsIn": [
        "cv.ui.manager.model.schema.MAnnotation"
      ]
    },
    "getDocumentation": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the documentation information from the element, if any",
          "     *",
          "     * @return  array   list of texts, or empty list if none",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the documentation information from the element, if any</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "array   list of texts, or empty list if none"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3675
        },
        "end": {
          "line": 147,
          "column": 5,
          "index": 5019
        }
      },
      "type": "function",
      "params": [],
      "mixin": "cv.ui.manager.model.schema.MAnnotation",
      "appearsIn": [
        "cv.ui.manager.model.schema.MAnnotation"
      ]
    },
    "createDocumentationWebLinks": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Transform documentation text to link to the online documentation when it",
          "     * contains a reference.",
          "     * @param text",
          "     * @return string The transformed input string.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Transform documentation text to link to the online documentation when it\n contains a reference.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "text"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "string The transformed input string."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 5222
        },
        "end": {
          "line": 175,
          "column": 5,
          "index": 5959
        }
      },
      "type": "function",
      "params": [
        {
          "name": "text"
        }
      ],
      "mixin": "cv.ui.manager.model.schema.MAnnotation",
      "appearsIn": [
        "cv.ui.manager.model.schema.MAnnotation"
      ]
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 747,
        "column": 2,
        "index": 24274
      },
      "end": {
        "line": 751,
        "column": 3,
        "index": 24451
      }
    }
  }
}