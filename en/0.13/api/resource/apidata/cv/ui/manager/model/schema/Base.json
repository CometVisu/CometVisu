{
  "version": 0.3,
  "lastModified": 1726088789841,
  "lastModifiedIso": "2024-09-11T21:06:29.841Z",
  "classFilename": "../../source/class/cv/ui/manager/model/schema/Base.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 822
    },
    "end": {
      "line": 312,
      "column": 3,
      "index": 8805
    }
  },
  "className": "cv.ui.manager.model.schema.Base",
  "jsdoc": {
    "raw": [
      "*",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": ""
      }
    ]
  },
  "superClass": "qx.core.Object",
  "isSingleton": false,
  "abstract": true,
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "node"
      },
      {
        "name": "schema"
      }
    ],
    "location": {
      "start": {
        "line": 36,
        "column": 2,
        "index": 1183
      },
      "end": {
        "line": 48,
        "column": 3,
        "index": 1440
      }
    }
  },
  "properties": {
    "type": {
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1650
        },
        "end": {
          "line": 63,
          "column": 5,
          "index": 1708
        }
      },
      "json": {
        "check": "String",
        "init": "unknown"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * type of this object",
          "     * @var string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>type of this object</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "string"
          }
        ]
      },
      "appearsIn": []
    },
    "elementsHaveOrder": {
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1715
        },
        "end": {
          "line": 68,
          "column": 5,
          "index": 1783
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "schema": {
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 1790
        },
        "end": {
          "line": 73,
          "column": 5,
          "index": 1870
        }
      },
      "json": {
        "check": "cv.ui.manager.model.Schema",
        "nullable": false
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "node": {
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 1877
        },
        "end": {
          "line": 78,
          "column": 5,
          "index": 1933
        }
      },
      "json": {
        "check": "Node",
        "nullable": false
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "subGroupings": {
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2040
        },
        "end": {
          "line": 86,
          "column": 5,
          "index": 2082
        }
      },
      "json": {
        "check": "Array"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * array of sub-choices, -sequences, -groups that are defined",
          "     * @var array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>array of sub-choices, -sequences, -groups that are defined</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "array"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "_bounds": {
      "jsdoc": {
        "raw": [
          "*",
          "     * bounds for this element",
          "     * @var object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>bounds for this element</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "object"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2294
        },
        "end": {
          "line": 99,
          "column": 17,
          "index": 2307
        }
      },
      "appearsIn": []
    },
    "_regexCache": {
      "jsdoc": {
        "raw": [
          "*",
          "     * cache for getRegex",
          "     * @var string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>cache for getRegex</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "string"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 2375
        },
        "end": {
          "line": 105,
          "column": 21,
          "index": 2392
        }
      },
      "appearsIn": []
    },
    "_allowedElements": {
      "jsdoc": {
        "raw": [
          "*",
          "     * list of elements that are allowed as per our own definition",
          "     * @var object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>list of elements that are allowed as per our own definition</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "object"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 2501
        },
        "end": {
          "line": 111,
          "column": 26,
          "index": 2523
        }
      },
      "appearsIn": []
    },
    "_sortedContent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * the sorted listed of allowed elements and sub-groupings",
          "     * @var array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>the sorted listed of allowed elements and sub-groupings</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "array"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 2627
        },
        "end": {
          "line": 117,
          "column": 24,
          "index": 2647
        }
      },
      "appearsIn": []
    },
    "_subGroupings": {
      "jsdoc": {
        "raw": [
          "*",
          "     * array of sub-choices, -sequences, -groups that are defined",
          "     * @var array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>array of sub-choices, -sequences, -groups that are defined</p>"
          }
        ],
        "@var": [
          {
            "name": "@var",
            "body": "array"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 2754
        },
        "end": {
          "line": 123,
          "column": 23,
          "index": 2773
        }
      },
      "appearsIn": []
    },
    "parse": {
      "jsdoc": {
        "raw": [
          "/ needs to be implemented by the inheriting classes"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 2838
        },
        "end": {
          "line": 134,
          "column": 5,
          "index": 3211
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "isElementAllowed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * is an element (specified by its name) allowed in this group?",
          "     * Goes recursive.",
          "     * Does NOT check bounds! Does NOT check dependencies!",
          "     *",
          "     * @param   element string  the element we check for",
          "     * @return  boolean         is it allowed?",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>is an element (specified by its name) allowed in this group?\n Goes recursive.\n Does NOT check bounds! Does NOT check dependencies!</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element string  the element we check for"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "boolean         is it allowed?"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 3495
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 3962
        }
      },
      "type": "function",
      "params": [
        {
          "name": "element"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "getSchemaElementForElementName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the SchemaElement-object for a certain element-name.",
          "     * May return undefined if no element is found, so you might be interested in checking isElementAllowed beforehand.",
          "     *",
          "     * @param   elementName string  name of the element to find the SchemaElement for",
          "     * @return  object              SchemaElement-object, or undefined if none is found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the SchemaElement-object for a certain element-name.\n May return undefined if no element is found, so you might be interested in checking isElementAllowed beforehand.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elementName string  name of the element to find the SchemaElement for"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object              SchemaElement-object, or undefined if none is found"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 4350
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 5037
        }
      },
      "type": "function",
      "params": [
        {
          "name": "elementName"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "getRequiredElements": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get a list of required elements.",
          "     * if an element is required multiple times, it is listed multiple times",
          "     * Attention: elements are NOT sorted.",
          "     *",
          "     * @return  array   list of required elements",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get a list of required elements.\n if an element is required multiple times, it is listed multiple times\n Attention: elements are NOT sorted.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "array   list of required elements"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 5277
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 6215
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "appearsIn": []
    },
    "getAllowedElements": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the elements allowed for this group",
          "     *",
          "     * @return  object      list of allowed elements, key is the name",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the elements allowed for this group</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object      list of allowed elements, key is the name"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 230,
          "column": 4,
          "index": 6362
        },
        "end": {
          "line": 243,
          "column": 5,
          "index": 6772
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "appearsIn": []
    },
    "getAllowedElementsSorting": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the sorting of the allowed elements.",
          "     * @param   sortNumber  integer the sort number of a parent (only used when recursive)",
          "     * @return  object              list of allowed elements, with their sort-number as value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the sorting of the allowed elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sortNumber  integer the sort number of a parent (only used when recursive)"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object              list of allowed elements, with their sort-number as value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 250,
          "column": 4,
          "index": 7028
        },
        "end": {
          "line": 252,
          "column": 5,
          "index": 7090
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sortNumber"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "getRegex": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get a regex (string) describing this choice",
          "     *",
          "     * @param   separator   string  the string used to separate different elements, e.g. ';'",
          "     * @param   nocapture   bool    when set to true non capturing groups are used",
          "     * @return  string  regex",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get a regex (string) describing this choice</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "separator   string  the string used to separate different elements, e.g. ';'"
          },
          {
            "name": "@param",
            "body": "nocapture   bool    when set to true non capturing groups are used"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "string  regex"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 7377
        },
        "end": {
          "line": 263,
          "column": 5,
          "index": 7432
        }
      },
      "type": "function",
      "params": [
        {
          "name": "separator"
        },
        {
          "name": "nocapture"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "hasMultiLevelBounds": {
      "jsdoc": {
        "raw": [
          "*",
          "     * find out if this Grouping has multi-level-bounds, i.e. sub-groupings with bounds.",
          "     * This makes it more or less impossible to know in advance which elements might be needed",
          "     *",
          "     * @return  boolean does it?",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>find out if this Grouping has multi-level-bounds, i.e. sub-groupings with bounds.\n This makes it more or less impossible to know in advance which elements might be needed</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "boolean does it?"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 7679
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 7752
        }
      },
      "type": "function",
      "params": [],
      "returnType": {},
      "appearsIn": []
    },
    "getBounds": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get the bounds of this very grouping",
          "     *",
          "     * @return  object  like {min: x, max: y}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get the bounds of this very grouping</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object  like {min: x, max: y}",
            "type": "min: x, max: y",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 7872
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 7918
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "min: x, max: y"
      },
      "appearsIn": []
    },
    "getBoundsForElementName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * get bounds for a specific element.",
          "     * Take into account the bounds of the element and/or our own bounds",
          "     *",
          "     * @param   childName   string  name of the child-to-be",
          "     * @return  object              {max: x, min: y}, or undefined if none found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>get bounds for a specific element.\n Take into account the bounds of the element and/or our own bounds</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "childName   string  name of the child-to-be"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object              {max: x, min: y}, or undefined if none found",
            "type": "max: x, min: y",
            "description": ", or undefined if none found"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 8204
        },
        "end": {
          "line": 293,
          "column": 5,
          "index": 8273
        }
      },
      "type": "function",
      "params": [
        {
          "name": "childName"
        }
      ],
      "returnType": {
        "type": "max: x, min: y"
      },
      "appearsIn": []
    },
    "regexFromString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * create a regex-object from a pattern",
          "     *",
          "     * For some obscure reason, this may not be inside a classes method, or else that class is not instantiateable",
          "     *",
          "     * @param   input       string  the pattern to match (without //)",
          "     * @param   modifiers   string  modifiers, if any",
          "     * @return  object              RegExp-object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>create a regex-object from a pattern\n For some obscure reason, this may not be inside a classes method, or else that class is not instantiateable</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "input       string  the pattern to match (without"
          },
          {
            "name": "@param",
            "body": "modifiers   string  modifiers, if any"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "object              RegExp-object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 304,
          "column": 4,
          "index": 8643
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 8797
        }
      },
      "type": "function",
      "params": [
        {
          "name": "input"
        },
        {
          "name": "modifiers"
        }
      ],
      "returnType": {},
      "appearsIn": []
    }
  },
  "statics": {}
}