{
  "version": 0.3,
  "lastModified": 1735341547559,
  "lastModifiedIso": "2024-12-27T23:19:07.559Z",
  "classFilename": "../../source/class/cv/ui/common/Operate.js",
  "type": "mixin",
  "location": {
    "start": {
      "line": 24,
      "column": 0,
      "index": 956
    },
    "end": {
      "line": 115,
      "column": 3,
      "index": 4068
    }
  },
  "className": "cv.ui.common.Operate",
  "jsdoc": {
    "raw": [
      "*",
      " * Provides methods for widgets that can be controlled by the user.",
      " * Usually this operation includes sending values to the backend.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Provides methods for widgets that can be controlled by the user.\n Usually this operation includes sending values to the backend.</p>"
      }
    ]
  },
  "members": {
    "action": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Action performed when the widget got clicked, sends data to the backend",
          "     *",
          "     * @param event {Event} tap event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Action performed when the widget got clicked, sends data to the backend</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} tap event",
            "paramName": "event",
            "description": " tap event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1291
        },
        "end": {
          "line": 49,
          "column": 5,
          "index": 1675
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "downaction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles pointerdown events",
          "     * @param event {Event} pointerdown event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles pointerdown events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} pointerdown event",
            "paramName": "event",
            "description": " pointerdown event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1778
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1947
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "sendToBackend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Send the given value to all writeable addresses known to this widget",
          "     *",
          "     * @param value {any} value to send",
          "     * @param filter {Function} optional filter function for addresses",
          "     * @param currentBusValues {Object} optional: the (assumed) last encoded values",
          "     *          that were sent on the bus. When the encoding of the new value",
          "     *          to send is equal to the currentBusValues a transmission will",
          "     *          be suppressed. The object is a hash with the encoding as a key",
          "     *          for the encoded value",
          "     * @return {Object} the object/hash of encoded values that were sent last time",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given value to all writeable addresses known to this widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {any} value to send",
            "paramName": "value",
            "description": " value to send",
            "type": "any"
          },
          {
            "name": "@param",
            "body": "filter {Function} optional filter function for addresses",
            "paramName": "filter",
            "description": " optional filter function for addresses",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "currentBusValues {Object} optional: the (assumed) last encoded values\n          that were sent on the bus. When the encoding of the new value\n          to send is equal to the currentBusValues a transmission will\n          be suppressed. The object is a hash with the encoding as a key\n          for the encoded value",
            "paramName": "currentBusValues",
            "description": " optional: the (assumed) last encoded values\n          that were sent on the bus. When the encoding of the new value\n          to send is equal to the currentBusValues a transmission will\n          be suppressed. The object is a hash with the encoding as a key\n          for the encoded value",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the object/hash of encoded values that were sent last time",
            "type": "Record<any, any>",
            "description": "the object/hash of encoded values that were sent last time"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2603
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 4060
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "filter",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "currentBusValues",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}