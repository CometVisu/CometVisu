{
  "className": "cv.ui.common.BasicUpdate",
  "packageName": "cv.ui.common",
  "name": "BasicUpdate",
  "superClass": null,
  "interfaces": [],
  "mixins": [
    "cv.ui.common.HasAddress"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0,
        "index": 876
      },
      "end": {
        "line": 314,
        "column": 3,
        "index": 9950
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This role provides the basic update methods</p>"
        }
      ]
    }
  },
  "type": "mixin",
  "properties": {
    "value": {
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1217
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1298
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation, mapping and formatting"
          }
        ]
      },
      "name": "value",
      "propertyType": "new",
      "event": "changeValue",
      "nullable": true,
      "allowNull": true
    },
    "basicValue": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1380
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1438
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation"
          }
        ]
      },
      "name": "basicValue",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true
    },
    "format": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1503
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 1578
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format to apply to incoming values</p>"
          }
        ]
      },
      "name": "format",
      "propertyType": "new",
      "nullable": true,
      "init": "",
      "allowNull": true,
      "check": "String",
      "defaultValue": ""
    },
    "address": {
      "type": "property",
      "name": "address",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "cv.ui.common.HasAddress",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of addresses (KNX-GA's or openHAB item names) this widget communicates with</p>"
          }
        ]
      }
    }
  },
  "statics": {
    "applyMapping": {
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1996
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3249
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{*} value - value to be mapped",
            "paramName": "value",
            "description": "- value to be mapped",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": "- mapping name, if not set the <code>mapping</code> property value is used",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the mapped value",
            "type": "*",
            "description": " the mapped value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "formatValueCache": {
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3409
        },
        "end": {
          "line": 123,
          "column": 26,
          "index": 3431
        }
      },
      "type": "variable",
      "access": "public"
    },
    "applyTransform": {
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3643
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 3854
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decode the given data with the addresses transform</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB-item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB-item name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} value to be decoded",
            "paramName": "data",
            "description": " value to be decoded",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var}",
            "type": "var",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "applyMapping": {
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4120
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4307
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to be mapped",
            "paramName": "value",
            "description": " value to be mapped",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": " mapping name, if not set the <code>mapping</code> property value is used",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the mapped value",
            "type": "var",
            "description": " the mapped value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getNextMappedValue": {
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4623
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 4883
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Look up the entry for <code>value</code> in the mapping <code>this_map</code> and\n return the next value in the list (including wrap around).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to look up",
            "paramName": "value",
            "description": " value to look up",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "this_map {String} mapping name",
            "paramName": "this_map",
            "description": " mapping name",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the next mapped value",
            "type": "var",
            "description": " the next mapped value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "applyFormat": {
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5186
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5628
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format the given value according to the defined format.\n If no format is defined the value will not be changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB item name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} value to be formatted",
            "paramName": "value",
            "description": " value to be formatted",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the formatted value",
            "type": "var",
            "description": " the formatted value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "defaultValueHandling": {
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5948
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7206
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default value handling for most of the widgets.\n This method applies the transform, mapping, format and styling to the value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} address - KNX-GA or openHAB item name",
            "paramName": "address",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - value to be processes",
            "paramName": "data",
            "description": "- value to be processes",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the processed value",
            "type": "*",
            "description": " the processed value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "defaultValue2DOM": {
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 7736
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 8236
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          },
          {
            "name": "@description",
            "body": "<p>Method to handle all special cases for the value. The might come from\n the mapping where it can be quite complex as it can contain icons.</p>"
          }
        ],
        "@typedef": [
          {
            "name": "@typedef",
            "body": "widgetValueTypes"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{(string|number|Uint8Array|Map|Function)}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{(*|*[])} value - the value, or an array of values, that will be inserted",
            "paramName": "value",
            "description": "- the value, or an array of values, that will be inserted",
            "type": [
              "(*",
              {
                "type": "*",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - the element where <code>value</code> will be added to",
            "paramName": "targetElement",
            "description": "- the element where <code>value</code> will be added to",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{Function?} modifyFn - callback function that modifies the DOM",
            "paramName": "modifyFn",
            "description": "- callback function that modifies the DOM",
            "optional": true,
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "defaultUpdate": {
      "location": {
        "start": {
          "line": 277,
          "column": 4,
          "index": 8616
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 9322
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Default update function, processes the incoming value and applies it to the DOM value element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} ga - KNX-GA or openHAB item name",
            "paramName": "ga",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - the raw value from the bus",
            "paramName": "data",
            "description": "- the raw value from the bus",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
            "paramName": "passedElement",
            "description": "- the element to update, if not given {@link getDomElement()} is used",
            "optional": true,
            "type": "HTMLElement"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} - value",
            "type": "*",
            "description": " - value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyValueToDom": {
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 9537
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 9942
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function which updates the DOM element with the given value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - element to update",
            "paramName": "targetElement",
            "description": "- element to update",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{*} value - value to add to the element",
            "paramName": "value",
            "description": "- value to add to the element",
            "type": "*"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getAddress": {
      "type": "function",
      "name": "getAddress",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>address</code>.\n\nFor further details take a look at the property definition: {@link #address}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for address"
          }
        ]
      }
    },
    "setAddress": {
      "type": "function",
      "name": "setAddress",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>address</code>.\n\nFor further details take a look at the property definition: {@link #address}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for address"
          }
        ]
      }
    },
    "resetAddress": {
      "type": "function",
      "name": "resetAddress",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>address</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #address}."
          }
        ]
      }
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>value</code>.\n\nFor further details take a look at the property definition: {@link #value}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for value"
          }
        ]
      }
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>value</code>.\n\nFor further details take a look at the property definition: {@link #value}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for value"
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>value</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #value}."
          }
        ]
      }
    },
    "getBasicValue": {
      "type": "function",
      "name": "getBasicValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>basicValue</code>.\n\nFor further details take a look at the property definition: {@link #basicValue}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for basicValue"
          }
        ]
      }
    },
    "setBasicValue": {
      "type": "function",
      "name": "setBasicValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>basicValue</code>.\n\nFor further details take a look at the property definition: {@link #basicValue}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for basicValue"
          }
        ]
      }
    },
    "resetBasicValue": {
      "type": "function",
      "name": "resetBasicValue",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>basicValue</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #basicValue}."
          }
        ]
      }
    },
    "getFormat": {
      "type": "function",
      "name": "getFormat",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>format</code>.\n\nFor further details take a look at the property definition: {@link #format}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for format"
          }
        ]
      }
    },
    "setFormat": {
      "type": "function",
      "name": "setFormat",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>format</code>.\n\nFor further details take a look at the property definition: {@link #format}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for format"
          }
        ]
      }
    },
    "resetFormat": {
      "type": "function",
      "name": "resetFormat",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>format</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #format}."
          }
        ]
      }
    }
  },
  "descendants": []
}