{
  "version": 0.3,
  "lastModified": 1735222205778,
  "lastModifiedIso": "2024-12-26T14:10:05.778Z",
  "classFilename": "../../source/class/cv/ui/structure/pure/ImageTrigger.js",
  "type": "class",
  "location": {
    "start": {
      "line": 70,
      "column": 0,
      "index": 3051
    },
    "end": {
      "line": 164,
      "column": 3,
      "index": 5968
    }
  },
  "className": "cv.ui.structure.pure.ImageTrigger",
  "jsdoc": {
    "raw": [
      "*",
      " * Adds an image like the {@link cv.ui.structure.pure.Image} widget, but additionally the image can be changed by incoming",
      " * data and can send data to the backend by clicking on it.",
      " * There are two modes to react on incoming data:",
      " *",
      " * <ul>",
      " *  <li><code>type=\"show\"</code>: Hides the image when incoming data === 0</li>",
      " *  <li><code>type=\"select\"</code>: Changes the image by appending the incoming data to the initial configured image source, or hide it when incoming data === 0</li>",
      " * </ul>",
      " * Example:",
      " * <pre class=\"sunlight-highlight-xml\">",
      " * &lt;imagetrigger src=\"resource/icons/comet\" suffix=\"svg\" sendValue=\"clicked\" type=\"select\"&gt;",
      " *    &lt;address transform=\"DPT:16.001\" mode=\"readwrite\"&gt;0/0/0&lt;/address&gt;",
      " * &lt;/imagetrigger&gt;",
      " * </pre>",
      " *",
      " * initially shows nothing. When the CometVisu receives the string <code>_icon</code> in address <code>0/0/0</code>,",
      " * the image <code>icons/comet_opt_icon.svg</code> is shown. When the CometVisu receives '0' on address <code>0/0/0</code>,",
      " * this image is hidden.",
      " *",
      " * @widgetexample <settings>",
      " *   <screenshot name=\"image_trigger\">",
      " *     <caption>Image changed by incoming data 'blue'</caption>",
      " *     <data address=\"0/0/0\">blue</data>",
      " *   </screenshot>",
      " *   <screenshot name=\"image_trigger_changes\">",
      " *     <caption>Image changed by incoming data 'grey'</caption>",
      " *     <data address=\"0/0/0\">grey</data>",
      " *   </screenshot>",
      " *  </settings>",
      " *  <imagetrigger src=\"resource/icons/CometVisu_\" suffix=\"png\" sendValue=\"clicked\" type=\"select\" width=\"45px\" height=\"32px\">",
      " *    <layout colspan=\"1\" />",
      " *    <address transform=\"DPT:16.001\" mode=\"readwrite\">0/0/0</address>",
      " *  </imagetrigger>",
      " *",
      " * @widgetexample <settings>",
      " *   <caption>Disable layout width by settings it to '0', to have widget with === image width</caption>",
      " *   <screenshot name=\"image_trigger_colspan0\">",
      " *     <data address=\"0/0/0\">1</data>",
      " *   </screenshot>",
      " *  </settings>",
      " *  <imagetrigger src=\"resource/icons/CometVisu_orange\" suffix=\"png\" sendValue=\"clicked\" type=\"show\" width=\"45px\" height=\"32px\">",
      " *    <layout colspan=\"0\" />",
      " *    <address transform=\"DPT:1.001\" mode=\"readwrite\">0/0/0</address>",
      " *  </imagetrigger>",
      " *",
      " *",
      " * @author Christian Mayer",
      " * @since 0.8.0 (2012)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Adds an image like the {@link cv.ui.structure.pure.Image} widget, but additionally the image can be changed by incoming\n data and can send data to the backend by clicking on it.\n There are two modes to react on incoming data:\n </p>\n<ul>\n  <li><code>type=\"show\"</code>: Hides the image when incoming data === 0</li>\n  <li><code>type=\"select\"</code>: Changes the image by appending the incoming data to the initial configured image source, or hide it when incoming data === 0</li>\n </ul>\n<p>Example:\n </p>\n<pre class=\"sunlight-highlight-xml\">\n &lt;imagetrigger src=\"resource/icons/comet\" suffix=\"svg\" sendValue=\"clicked\" type=\"select\"&gt;\n    &lt;address transform=\"DPT:16.001\" mode=\"readwrite\"&gt;0/0/0&lt;/address&gt;\n &lt;/imagetrigger&gt;\n </pre>\n<p>initially shows nothing. When the CometVisu receives the string <code>_icon</code> in address <code>0/0/0</code>,\n the image <code>icons/comet_opt_icon.svg</code> is shown. When the CometVisu receives '0' on address <code>0/0/0</code>,\n this image is hidden.</p>"
      }
    ],
    "@widgetexample": [
      {
        "name": "@widgetexample",
        "body": "<settings>\n   <screenshot name=\"image_trigger\">\n     <caption>Image changed by incoming data 'blue'</caption>\n     <data address=\"0/0/0\">blue</data>\n   </screenshot>\n   <screenshot name=\"image_trigger_changes\">\n     <caption>Image changed by incoming data 'grey'</caption>\n     <data address=\"0/0/0\">grey</data>\n   </screenshot>\n  </settings>\n  <imagetrigger src=\"resource/icons/CometVisu_\" suffix=\"png\" sendValue=\"clicked\" type=\"select\" width=\"45px\" height=\"32px\">\n    <layout colspan=\"1\" />\n    <address transform=\"DPT:16.001\" mode=\"readwrite\">0/0/0</address>\n  </imagetrigger>"
      },
      {
        "name": "@widgetexample",
        "body": "<settings>\n   <caption>Disable layout width by settings it to '0', to have widget with === image width</caption>\n   <screenshot name=\"image_trigger_colspan0\">\n     <data address=\"0/0/0\">1</data>\n   </screenshot>\n  </settings>\n  <imagetrigger src=\"resource/icons/CometVisu_orange\" suffix=\"png\" sendValue=\"clicked\" type=\"show\" width=\"45px\" height=\"32px\">\n    <layout colspan=\"0\" />\n    <address transform=\"DPT:1.001\" mode=\"readwrite\">0/0/0</address>\n  </imagetrigger>"
      }
    ],
    "@author": [
      {
        "name": "@author",
        "body": "Christian Mayer"
      }
    ],
    "@since": [
      {
        "name": "@since",
        "body": "0.8.0 (2012)"
      }
    ]
  },
  "superClass": "cv.ui.structure.pure.AbstractWidget",
  "mixins": [
    "cv.ui.common.Operate",
    "cv.ui.common.HasAnimatedButton",
    "cv.ui.common.Refresh",
    "cv.ui.common.Update"
  ],
  "properties": {
    "height": {
      "location": {
        "start": {
          "line": 80,
          "column": 4,
          "index": 3423
        },
        "end": {
          "line": 80,
          "column": 47,
          "index": 3466
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "updateType": {
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 3472
        },
        "end": {
          "line": 81,
          "column": 45,
          "index": 3513
        }
      },
      "json": {
        "check": "String",
        "init": ""
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "width": {
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 3519
        },
        "end": {
          "line": 82,
          "column": 44,
          "index": 3559
        }
      },
      "json": {
        "check": "String",
        "init": "100%"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "src": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 3565
        },
        "end": {
          "line": 83,
          "column": 44,
          "index": 3605
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "suffix": {
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 3611
        },
        "end": {
          "line": 84,
          "column": 47,
          "index": 3654
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "sendValue": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 3660
        },
        "end": {
          "line": 85,
          "column": 44,
          "index": 3700
        }
      },
      "json": {
        "check": "String",
        "init": ""
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "refresh": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1550
        },
        "end": {
          "line": 54,
          "column": 5,
          "index": 1603
        }
      },
      "json": {
        "check": "Number",
        "init": 0
      },
      "jsdoc": null,
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "cachecontrol": {
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1610
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 1673
        }
      },
      "json": {
        "check": "String",
        "init": "full"
      },
      "jsdoc": null,
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "restartOnVisible": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1680
        },
        "end": {
          "line": 65,
          "column": 5,
          "index": 1786
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyRestartOnVisible"
      },
      "jsdoc": null,
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "value": {
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1217
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1298
        }
      },
      "json": {
        "nullable": true,
        "event": "changeValue"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {var} the incoming value after transformation, mapping and formatting",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation, mapping and formatting"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "basicValue": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1380
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1438
        }
      },
      "json": {
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {var} the incoming value after transformation",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "format": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1503
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 1578
        }
      },
      "json": {
        "check": "String",
        "init": "",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Format to apply to incoming values",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format to apply to incoming values</p>"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "address": {
      "location": {
        "start": {
          "line": 33,
          "column": 4,
          "index": 1173
        },
        "end": {
          "line": 36,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Object",
        "init": {}
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Map of addresses (KNX-GA's or openHAB item names) this widget communicates with",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of addresses (KNX-GA's or openHAB item names) this widget communicates with</p>"
          }
        ]
      },
      "mixin": "cv.ui.common.Update",
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate",
        "cv.ui.common.HasAddress"
      ]
    }
  },
  "members": {
    "_getInnerDomString": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 3878
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 4581
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.structure.pure.AbstractWidget",
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "_update": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 4588
        },
        "end": {
          "line": 142,
          "column": 5,
          "index": 5448
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "__getUrl": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 5455
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 5726
        }
      },
      "type": "function",
      "params": [
        {
          "name": "url"
        }
      ],
      "appearsIn": []
    },
    "_action": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 5733
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 5861
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "action": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Action performed when the widget got clicked, sends data to the backend",
          "     *",
          "     * @param event {Event} tap event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Action performed when the widget got clicked, sends data to the backend</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} tap event",
            "paramName": "event",
            "description": " tap event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1291
        },
        "end": {
          "line": 49,
          "column": 5,
          "index": 1675
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Operate",
        "cv.ui.structure.pure.AbstractWidget"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "downaction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles pointerdown events",
          "     * @param event {Event} pointerdown event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles pointerdown events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} pointerdown event",
            "paramName": "event",
            "description": " pointerdown event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1778
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1947
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Operate",
        "cv.ui.structure.pure.AbstractWidget"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "sendToBackend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Send the given value to all writeable addresses known to this widget",
          "     *",
          "     * @param value {any} value to send",
          "     * @param filter {Function} optional filter function for addresses",
          "     * @param currentBusValues {Object} optional: the (assumed) last encoded values",
          "     *          that were sent on the bus. When the encoding of the new value",
          "     *          to send is equal to the currentBusValues a transmission will",
          "     *          be suppressed. The object is a hash with the encoding as a key",
          "     *          for the encoded value",
          "     * @return {Object} the object/hash of encoded values that were sent last time",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given value to all writeable addresses known to this widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {any} value to send",
            "paramName": "value",
            "description": " value to send",
            "type": "any"
          },
          {
            "name": "@param",
            "body": "filter {Function} optional filter function for addresses",
            "paramName": "filter",
            "description": " optional filter function for addresses",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "currentBusValues {Object} optional: the (assumed) last encoded values\n          that were sent on the bus. When the encoding of the new value\n          to send is equal to the currentBusValues a transmission will\n          be suppressed. The object is a hash with the encoding as a key\n          for the encoded value",
            "paramName": "currentBusValues",
            "description": " optional: the (assumed) last encoded values\n          that were sent on the bus. When the encoding of the new value\n          to send is equal to the currentBusValues a transmission will\n          be suppressed. The object is a hash with the encoding as a key\n          for the encoded value",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the object/hash of encoded values that were sent last time",
            "type": "Record<any, any>",
            "description": "the object/hash of encoded values that were sent last time"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2603
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 4060
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "filter",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "currentBusValues",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": [
        "cv.ui.common.Operate"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "__olid": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1259
        },
        "end": {
          "line": 36,
          "column": 16,
          "index": 1271
        }
      },
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__ilid": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1277
        },
        "end": {
          "line": 37,
          "column": 16,
          "index": 1289
        }
      },
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__downTarget": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 1295
        },
        "end": {
          "line": 38,
          "column": 22,
          "index": 1313
        }
      },
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__initListeners": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1320
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1628
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__getActors": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1635
        },
        "end": {
          "line": 60,
          "column": 5,
          "index": 1895
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "buttonPressed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create an action handling that shows a button press animation.",
          "     * When the action is not set, it will be searched for - so that widgets",
          "     * with bind_click_to_widget will also work.",
          "     *",
          "     * @param event {Event} pointerdown event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an action handling that shows a button press animation.\n When the action is not set, it will be searched for - so that widgets\n with bind<em>click</em>to_widget will also work.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} pointerdown event",
            "paramName": "event",
            "description": " pointerdown event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 69,
          "column": 4,
          "index": 2167
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2881
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__updateButtons": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2888
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 3371
        }
      },
      "type": "function",
      "params": [
        {
          "name": "buttons"
        },
        {
          "name": "pressed"
        }
      ],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "buttonReleased": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create an action handling that shows a button unpress animation.",
          "     * When the action is not set, it will be searched for - so that widgets",
          "     * with bind_click_to_widget will also work.",
          "     *",
          "     * @param event {Event} pointerup event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an action handling that shows a button unpress animation.\n When the action is not set, it will be searched for - so that widgets\n with bind<em>click</em>to_widget will also work.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} pointerup event",
            "paramName": "event",
            "description": " pointerup event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3643
        },
        "end": {
          "line": 135,
          "column": 5,
          "index": 4221
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "_timer": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 1948
        },
        "end": {
          "line": 74,
          "column": 16,
          "index": 1960
        }
      },
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "__timerId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 1966
        },
        "end": {
          "line": 75,
          "column": 19,
          "index": 1981
        }
      },
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "__setup": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 1987
        },
        "end": {
          "line": 76,
          "column": 18,
          "index": 2001
        }
      },
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "__lastRun": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2007
        },
        "end": {
          "line": 77,
          "column": 19,
          "index": 2022
        }
      },
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "__restartTimer": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2028
        },
        "end": {
          "line": 78,
          "column": 24,
          "index": 2048
        }
      },
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "__restartOnVisible": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2054
        },
        "end": {
          "line": 79,
          "column": 29,
          "index": 2079
        }
      },
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "_applyRestartOnVisible": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2086
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2186
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "_maintainTimerState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stop the while invisible",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop the while invisible</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2241
        },
        "end": {
          "line": 128,
          "column": 5,
          "index": 3528
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "setupRefreshAction": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 3535
        },
        "end": {
          "line": 166,
          "column": 5,
          "index": 4890
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "refreshAction": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 168,
          "column": 4,
          "index": 4897
        },
        "end": {
          "line": 216,
          "column": 5,
          "index": 6521
        }
      },
      "type": "function",
      "params": [
        {
          "name": "target"
        },
        {
          "name": "src"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "_initOnCreate": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1530
        },
        "end": {
          "line": 48,
          "column": 24,
          "index": 1550
        }
      },
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "__initUpdater": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1557
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 2196
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "update": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Process the incoming data, update the shown value and the stylings",
          "     *",
          "     * @param address {String} Address of the incoming value",
          "     * @param data {String} the incoming value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Process the incoming data, update the shown value and the stylings</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} Address of the incoming value",
            "paramName": "address",
            "description": " Address of the incoming value",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {String} the incoming value",
            "paramName": "data",
            "description": " the incoming value",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2408
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2675
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "string"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "processIncomingValue": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2682
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 3103
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "data"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "update3d": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Description",
          "     *",
          "     * @param ev {var}",
          "     * @param data {var}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Description</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {var}",
            "paramName": "ev",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "data {var}",
            "paramName": "data",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3200
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3664
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "var"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "formatValueCache": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3409
        },
        "end": {
          "line": 123,
          "column": 26,
          "index": 3431
        }
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyTransform": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Decode the given data with the addresses transform",
          "     *",
          "     * @param address {String} KNX-GA or openHAB-item name",
          "     * @param data {var} value to be decoded",
          "     * @return {var}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decode the given data with the addresses transform</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB-item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB-item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {var} value to be decoded",
            "paramName": "data",
            "description": " value to be decoded",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var}",
            "type": "var",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3643
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 3854
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyMapping": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply the given mapping to the value",
          "     *",
          "     * @param value {var} value to be mapped",
          "     * @param mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
          "     * @return {var} the mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to be mapped",
            "paramName": "value",
            "description": " value to be mapped",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": " mapping name, if not set the <code>mapping</code> property value is used",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the mapped value",
            "type": "var",
            "description": "the mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4120
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4307
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "mappingName",
          "type": "String",
          "optional": true
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "getNextMappedValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Look up the entry for <code>value</code> in the mapping <code>this_map</code> and",
          "     * return the next value in the list (including wrap around).",
          "     *",
          "     * @param value {var} value to look up",
          "     * @param this_map {String} mapping name",
          "     * @return {var} the next mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Look up the entry for <code>value</code> in the mapping <code>this_map</code> and\n return the next value in the list (including wrap around).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to look up",
            "paramName": "value",
            "description": " value to look up",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "this_map {String} mapping name",
            "paramName": "this_map",
            "description": " mapping name",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the next mapped value",
            "type": "var",
            "description": "the next mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4623
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 4883
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "this_map",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyFormat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Format the given value according to the defined format.",
          "     * If no format is defined the value will not be changed.",
          "     *",
          "     * @param address {String} KNX-GA or openHAB item name",
          "     * @param value {var} value to be formatted",
          "     * @return {var} the formatted value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format the given value according to the defined format.\n If no format is defined the value will not be changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} value to be formatted",
            "paramName": "value",
            "description": " value to be formatted",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the formatted value",
            "type": "var",
            "description": "the formatted value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5186
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5628
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultValueHandling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The default value handling for most of the widgets.",
          "     * This method applies the transform, mapping, format and styling to the value.",
          "     *",
          "     * @param {string} address - KNX-GA or openHAB item name",
          "     * @param {*} data - value to be processes",
          "     * @return {*} the processed value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default value handling for most of the widgets.\n This method applies the transform, mapping, format and styling to the value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} address - KNX-GA or openHAB item name",
            "paramName": "address",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - value to be processes",
            "paramName": "data",
            "description": "- value to be processes",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the processed value",
            "type": "*",
            "description": "the processed value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5948
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7206
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultValue2DOM": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Method to handle all special cases for the value. The might come from",
          "     * the mapping where it can be quite complex as it can contain icons.",
          "     * @param {(*|*[])} value - the value, or an array of values, that will be inserted",
          "     * @param {HTMLElement} targetElement - the element where `value` will be added to",
          "     * @param {Function?} modifyFn - callback function that modifies the DOM",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method to handle all special cases for the value. The might come from\n the mapping where it can be quite complex as it can contain icons.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{(*|*[])} value - the value, or an array of values, that will be inserted",
            "paramName": "value",
            "description": "- the value, or an array of values, that will be inserted",
            "type": [
              "(*",
              {
                "type": "*",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - the element where <code>value</code> will be added to",
            "paramName": "targetElement",
            "description": "- the element where <code>value</code> will be added to",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{Function?} modifyFn - callback function that modifies the DOM",
            "paramName": "modifyFn",
            "description": "- callback function that modifies the DOM",
            "optional": true,
            "type": "Function"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 7736
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 8236
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "(*",
            {
              "type": "*",
              "dimensions": 2
            }
          ]
        },
        {
          "name": "targetElement",
          "type": "HTMLElement"
        },
        {
          "name": "modifyFn",
          "type": "Function",
          "optional": true
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultUpdate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Default update function, processes the incoming value and applies it to the DOM value element.",
          "     *",
          "     * @param {string} ga - KNX-GA or openHAB item name",
          "     * @param {*} data - the raw value from the bus",
          "     * @param {HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
          "     * @return {*} - value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Default update function, processes the incoming value and applies it to the DOM value element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} ga - KNX-GA or openHAB item name",
            "paramName": "ga",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - the raw value from the bus",
            "paramName": "data",
            "description": "- the raw value from the bus",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
            "paramName": "passedElement",
            "description": "- the element to update, if not given {@link getDomElement()} is used",
            "optional": true,
            "type": "HTMLElement"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} - value",
            "type": "*",
            "description": "- value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 277,
          "column": 4,
          "index": 8616
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 9322
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ga",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        },
        {
          "name": "passedElement",
          "type": "HTMLElement",
          "optional": true
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "_applyValueToDom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal function which updates the DOM element with the given value",
          "     * @param {HTMLElement} targetElement - element to update",
          "     * @param {*} value - value to add to the element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function which updates the DOM element with the given value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - element to update",
            "paramName": "targetElement",
            "description": "- element to update",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{*} value - value to add to the element",
            "paramName": "value",
            "description": "- value to add to the element",
            "type": "*"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 9537
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 9942
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetElement",
          "type": "HTMLElement"
        },
        {
          "name": "value",
          "type": "*"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    }
  },
  "statics": {
    "__forceImgReload": {
      "jsdoc": {
        "raw": [
          " based on https://stackoverflow.com/questions/1077041/refresh-image-with-a-new-one-at-the-same-url"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 238,
          "column": 4,
          "index": 7041
        },
        "end": {
          "line": 242,
          "column": 5,
          "index": 7247
        }
      },
      "type": "function",
      "params": [
        {
          "name": "src"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Refresh"
      ],
      "mixin": "cv.ui.common.Refresh"
    },
    "applyMapping": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply the given mapping to the value",
          "     *",
          "     * @param {*} value - value to be mapped",
          "     * @param {string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
          "     * @return {*} the mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{*} value - value to be mapped",
            "paramName": "value",
            "description": "- value to be mapped",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": "- mapping name, if not set the <code>mapping</code> property value is used",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the mapped value",
            "type": "*",
            "description": "the mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1996
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3249
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "*"
        },
        {
          "name": "mappingName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    }
  }
}