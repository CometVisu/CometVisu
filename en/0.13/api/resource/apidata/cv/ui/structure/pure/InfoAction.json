{
  "version": 0.3,
  "lastModified": 1717235105610,
  "lastModifiedIso": "2024-06-01T09:45:05.610Z",
  "classFilename": "../../source/class/cv/ui/structure/pure/InfoAction.js",
  "type": "class",
  "location": {
    "start": {
      "line": 68,
      "column": 0,
      "index": 2228
    },
    "end": {
      "line": 100,
      "column": 3,
      "index": 2936
    }
  },
  "className": "cv.ui.structure.pure.InfoAction",
  "jsdoc": {
    "raw": [
      "*",
      " * The infoaction widget is a combination of an info/text widget and an \"action\"-widget, e.g. switch or trigger.",
      " *",
      " * Use case: if you have a group of lights, you can show the number of lights currently switched on",
      " * and control the whole group in one widget.",
      " *",
      " * @widgetexample <settings>",
      " *   <caption>Example combines an info widget to show the number of lights currently switched on, and an Switch to control them</caption>",
      " *   <screenshot name=\"infoaction_lights\">",
      " *     <data address=\"0/0/0\">4</data>",
      " *     <data address=\"0/0/1\">1</data>",
      " *   </screenshot>",
      " * </settings>",
      " * <meta>",
      " *  <mappings>",
      " *    <mapping name=\"OnOff\">",
      " *      <entry value=\"0\">Off</entry>",
      " *      <entry value=\"1\">On</entry>",
      " *    </mapping>",
      " *  </mappings>",
      " *  <stylings>",
      " *    <styling name=\"GreyGreen\">",
      " *      <entry value=\"0\">grey</entry>",
      " *      <entry value=\"1\">green</entry>",
      " *    </styling>",
      " *  </stylings>",
      " * </meta>",
      " * <infoaction>",
      " *  <layout colspan=\"4\"/>",
      " *  <label>Lights</label>",
      " *  <widgetinfo>",
      " *    <info>",
      " *     <address transform=\"DPT:9.001\">0/0/0</address>",
      " *    </info>",
      " *  </widgetinfo>",
      " *  <widgetaction>",
      " *   <switch mapping=\"OnOff\" styling=\"GreyGreen\">",
      " *    <layout colspan=\"3\" />",
      " *    <address transform=\"DPT:1.001\" mode=\"readwrite\">0/0/1</address>",
      " *   </switch>",
      " *  </widgetaction>",
      " * </infoaction>",
      " *",
      " *",
      " *",
      " * @author Tobias Bräutigam",
      " * @since 0.10.0 (as widget), 0.9.2 (as plugin)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The infoaction widget is a combination of an info/text widget and an \"action\"-widget, e.g. switch or trigger.\n Use case: if you have a group of lights, you can show the number of lights currently switched on\n and control the whole group in one widget.</p>"
      }
    ],
    "@widgetexample": [
      {
        "name": "@widgetexample",
        "body": "<settings>\n   <caption>Example combines an info widget to show the number of lights currently switched on, and an Switch to control them</caption>\n   <screenshot name=\"infoaction_lights\">\n     <data address=\"0/0/0\">4</data>\n     <data address=\"0/0/1\">1</data>\n   </screenshot>\n </settings>\n <meta>\n  <mappings>\n    <mapping name=\"OnOff\">\n      <entry value=\"0\">Off</entry>\n      <entry value=\"1\">On</entry>\n    </mapping>\n  </mappings>\n  <stylings>\n    <styling name=\"GreyGreen\">\n      <entry value=\"0\">grey</entry>\n      <entry value=\"1\">green</entry>\n    </styling>\n  </stylings>\n </meta>\n <infoaction>\n  <layout colspan=\"4\"/>\n  <label>Lights</label>\n  <widgetinfo>\n    <info>\n     <address transform=\"DPT:9.001\">0/0/0</address>\n    </info>\n  </widgetinfo>\n  <widgetaction>\n   <switch mapping=\"OnOff\" styling=\"GreyGreen\">\n    <layout colspan=\"3\" />\n    <address transform=\"DPT:1.001\" mode=\"readwrite\">0/0/1</address>\n   </switch>\n  </widgetaction>\n </infoaction>"
      }
    ],
    "@author": [
      {
        "name": "@author",
        "body": "Tobias Bräutigam"
      }
    ],
    "@since": [
      {
        "name": "@since",
        "body": "0.10.0 (as widget), 0.9.2 (as plugin)"
      }
    ]
  },
  "superClass": "cv.ui.structure.pure.AbstractWidget",
  "mixins": [
    "cv.ui.common.HasChildren"
  ],
  "properties": {
    "anonymous": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2526
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2581
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": null,
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "children": {
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 2032
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 2086
        }
      },
      "json": {
        "check": "Array",
        "init": []
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Array with child paths",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Array with child paths</p>"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.HasChildren"
      ],
      "mixin": "cv.ui.common.HasChildren"
    },
    "childWidgets": {
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 2148
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 2206
        }
      },
      "json": {
        "check": "Array",
        "init": []
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Array with child widget objects",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Array with child widget objects</p>"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.HasChildren"
      ],
      "mixin": "cv.ui.common.HasChildren"
    }
  },
  "members": {
    "_getInnerDomString": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2761
        },
        "end": {
          "line": 94,
          "column": 5,
          "index": 2831
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.structure.pure.AbstractWidget",
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "getChildrenDomString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates the HTML code for the children if this widget",
          "     *",
          "     * @param {boolean=} noWidgetContainer if false: do not surround the childrens with a div-element with class 'widget_container'",
          "     * @return {string} HTML code",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the HTML code for the children if this widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{boolean=} noWidgetContainer if false: do not surround the childrens with a div-element with class 'widget_container'",
            "paramName": "noWidgetContainer",
            "description": "if false: do not surround the childrens with a div-element with class 'widget_container'",
            "type": "boolean="
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string} HTML code",
            "type": "string",
            "description": "HTML code"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2616
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 3562
        }
      },
      "type": "function",
      "params": [
        {
          "name": "noWidgetContainer",
          "type": "boolean="
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": [
        "cv.ui.common.HasChildren"
      ],
      "mixin": "cv.ui.common.HasChildren"
    },
    "getChildrenDom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create a collection of html elements of the children",
          "     * @returns {DocumentFragment}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create a collection of html elements of the children</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{DocumentFragment}",
            "type": "DocumentFragment",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3680
        },
        "end": {
          "line": 127,
          "column": 5,
          "index": 4105
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "DocumentFragment"
      },
      "appearsIn": [
        "cv.ui.common.HasChildren"
      ],
      "mixin": "cv.ui.common.HasChildren"
    }
  },
  "statics": {}
}