{
  "version": 0.3,
  "lastModified": 1722151563987,
  "lastModifiedIso": "2024-07-28T07:26:03.987Z",
  "classFilename": "../../source/class/cv/ui/structure/pure/ColorChooser.js",
  "type": "class",
  "location": {
    "start": {
      "line": 42,
      "column": 0,
      "index": 1631
    },
    "end": {
      "line": 917,
      "column": 3,
      "index": 33187
    }
  },
  "className": "cv.ui.structure.pure.ColorChooser",
  "jsdoc": {
    "raw": [
      "*",
      " * The ColorChooser let you select and display a color, e.g. for lighting effects.",
      " * It supports a RGB light source with red, green and blue light components as well",
      " * as a RGBW light source that also has a white channel.",
      " *",
      " * @widgetexample",
      " * <settings>",
      " *      <screenshot name=\"colorchooser_example\">",
      " *          <caption>ColorChooser, simple example</caption>",
      " *      </screenshot>",
      " * </settings>",
      " * <colorchooser>",
      " *   <layout colspan=\"6\" rowspan=\"4\"/>",
      " *   <label>RGB kitchen</label>",
      " *   <address transform=\"DPT:5.001\" mode=\"readwrite\" variant=\"r\">1/2/59</address>",
      " *   <address transform=\"DPT:5.001\" mode=\"readwrite\" variant=\"g\">1/2/60</address>",
      " *   <address transform=\"DPT:5.001\" mode=\"readwrite\" variant=\"b\">1/2/61</address>",
      " * </colorchooser>",
      " *",
      " * @author Christian Mayer",
      " * @since 2012",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The ColorChooser let you select and display a color, e.g. for lighting effects.\n It supports a RGB light source with red, green and blue light components as well\n as a RGBW light source that also has a white channel.</p>"
      }
    ],
    "@widgetexample": [
      {
        "name": "@widgetexample",
        "body": "<settings>\n      <screenshot name=\"colorchooser_example\">\n          <caption>ColorChooser, simple example</caption>\n      </screenshot>\n </settings>\n <colorchooser>\n   <layout colspan=\"6\" rowspan=\"4\"/>\n   <label>RGB kitchen</label>\n   <address transform=\"DPT:5.001\" mode=\"readwrite\" variant=\"r\">1/2/59</address>\n   <address transform=\"DPT:5.001\" mode=\"readwrite\" variant=\"g\">1/2/60</address>\n   <address transform=\"DPT:5.001\" mode=\"readwrite\" variant=\"b\">1/2/61</address>\n </colorchooser>"
      }
    ],
    "@author": [
      {
        "name": "@author",
        "body": "Christian Mayer"
      }
    ],
    "@since": [
      {
        "name": "@since",
        "body": "2012"
      }
    ]
  },
  "superClass": "cv.ui.structure.pure.AbstractWidget",
  "mixins": [
    "cv.ui.common.Operate",
    "cv.ui.common.Update"
  ],
  "statics": {
    "coord2sv": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calculate the saturation and value from (x,y) relative widget coordinates",
          "     * based on a centered SV-triangle.",
          "     * @param x position for the calculation",
          "     * @param y position for the calculation",
          "     * @param hue value for the orientation of the triangle",
          "     * @param radius (outside) radius of the triangle",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculate the saturation and value from (x,y) relative widget coordinates\n based on a centered SV-triangle.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x position for the calculation"
          },
          {
            "name": "@param",
            "body": "y position for the calculation"
          },
          {
            "name": "@param",
            "body": "hue value for the orientation of the triangle"
          },
          {
            "name": "@param",
            "body": "radius (outside) radius of the triangle"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 2284
        },
        "end": {
          "line": 83,
          "column": 5,
          "index": 3393
        }
      },
      "type": "function",
      "params": [
        {
          "name": "x"
        },
        {
          "name": "y"
        },
        {
          "name": "hue"
        },
        {
          "name": "radius"
        }
      ],
      "appearsIn": []
    },
    "applyMapping": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply the given mapping to the value",
          "     *",
          "     * @param {*} value - value to be mapped",
          "     * @param {string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
          "     * @return {*} the mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{*} value - value to be mapped",
            "paramName": "value",
            "description": "- value to be mapped",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": "- mapping name, if not set the <code>mapping</code> property value is used",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the mapped value",
            "type": "*",
            "description": "the mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1996
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3249
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "*"
        },
        {
          "name": "mappingName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    }
  },
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "props"
      }
    ],
    "location": {
      "start": {
        "line": 91,
        "column": 2,
        "index": 3542
      },
      "end": {
        "line": 111,
        "column": 3,
        "index": 4211
      }
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 118,
        "column": 2,
        "index": 4341
      },
      "end": {
        "line": 123,
        "column": 3,
        "index": 4518
      }
    }
  },
  "properties": {
    "controls": {
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 4680
        },
        "end": {
          "line": 133,
          "column": 5,
          "index": 4719
        }
      },
      "json": {
        "check": "String"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "baseColors": {
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 4726
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 4767
        }
      },
      "json": {
        "check": "Object"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "sendOnFinish": {
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 4774
        },
        "end": {
          "line": 142,
          "column": 5,
          "index": 4837
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "throttleInterval": {
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 4844
        },
        "end": {
          "line": 147,
          "column": 5,
          "index": 4908
        }
      },
      "json": {
        "check": "Number",
        "init": 250
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "value": {
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1217
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1298
        }
      },
      "json": {
        "nullable": true,
        "event": "changeValue"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {var} the incoming value after transformation, mapping and formatting",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation, mapping and formatting"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "basicValue": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1380
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1438
        }
      },
      "json": {
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {var} the incoming value after transformation",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "format": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1503
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 1578
        }
      },
      "json": {
        "check": "String",
        "init": "",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Format to apply to incoming values",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format to apply to incoming values</p>"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "address": {
      "location": {
        "start": {
          "line": 33,
          "column": 4,
          "index": 1173
        },
        "end": {
          "line": 36,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Object",
        "init": {}
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Map of addresses (KNX-GA's or openHAB item names) this widget communicates with",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of addresses (KNX-GA's or openHAB item names) this widget communicates with</p>"
          }
        ]
      },
      "mixin": "cv.ui.common.Update",
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate",
        "cv.ui.common.HasAddress"
      ]
    }
  },
  "events": {
    "colorChanged": {
      "type": "qx.event.type.Event",
      "jsdoc": null,
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 5052
        },
        "end": {
          "line": 156,
          "column": 39,
          "index": 5087
        }
      }
    }
  },
  "members": {
    "__mode": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 5247
        },
        "end": {
          "line": 165,
          "column": 14,
          "index": 5257
        }
      },
      "appearsIn": []
    },
    "__colorOld": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5263
        },
        "end": {
          "line": 166,
          "column": 25,
          "index": 5284
        }
      },
      "appearsIn": []
    },
    "__colorCurrent": {
      "jsdoc": {
        "raw": [
          " the color where the animation started"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 5331
        },
        "end": {
          "line": 167,
          "column": 29,
          "index": 5356
        }
      },
      "appearsIn": []
    },
    "__color": {
      "jsdoc": {
        "raw": [
          " the current color of the running animation"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 168,
          "column": 4,
          "index": 5408
        },
        "end": {
          "line": 168,
          "column": 22,
          "index": 5426
        }
      },
      "appearsIn": []
    },
    "__lastBusValue": {
      "jsdoc": {
        "raw": [
          " the current color of the widget, also the target for the animation"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 5502
        },
        "end": {
          "line": 169,
          "column": 29,
          "index": 5527
        }
      },
      "appearsIn": []
    },
    "__animator": {
      "jsdoc": {
        "raw": [
          " initialize with empty object in the constructor to prevent object being shared between instances"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 5633
        },
        "end": {
          "line": 170,
          "column": 20,
          "index": 5649
        }
      },
      "appearsIn": []
    },
    "__button": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 171,
          "column": 4,
          "index": 5655
        },
        "end": {
          "line": 171,
          "column": 23,
          "index": 5674
        }
      },
      "appearsIn": []
    },
    "__range": {
      "jsdoc": {
        "raw": [
          " cache for DOM element"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 172,
          "column": 4,
          "index": 5705
        },
        "end": {
          "line": 172,
          "column": 22,
          "index": 5723
        }
      },
      "appearsIn": []
    },
    "__actors": {
      "jsdoc": {
        "raw": [
          " cache for DOM element"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 5754
        },
        "end": {
          "line": 173,
          "column": 23,
          "index": 5773
        }
      },
      "appearsIn": []
    },
    "__pageSizeListener": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 5779
        },
        "end": {
          "line": 174,
          "column": 33,
          "index": 5808
        }
      },
      "appearsIn": []
    },
    "__components": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 5814
        },
        "end": {
          "line": 175,
          "column": 27,
          "index": 5837
        }
      },
      "appearsIn": []
    },
    "__inDrag": {
      "jsdoc": {
        "raw": [
          " set of all color components required to send"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 5891
        },
        "end": {
          "line": 176,
          "column": 19,
          "index": 5906
        }
      },
      "appearsIn": []
    },
    "__coordMin": {
      "jsdoc": {
        "raw": [
          " is the handle currently dragged?"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5948
        },
        "end": {
          "line": 177,
          "column": 25,
          "index": 5969
        }
      },
      "appearsIn": []
    },
    "__Tmin": {
      "jsdoc": {
        "raw": [
          " minimal screen coordinate of slider"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 6014
        },
        "end": {
          "line": 178,
          "column": 16,
          "index": 6026
        }
      },
      "appearsIn": []
    },
    "__Tmax": {
      "jsdoc": {
        "raw": [
          " minimal color temperature to show in slider"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 6079
        },
        "end": {
          "line": 179,
          "column": 17,
          "index": 6092
        }
      },
      "appearsIn": []
    },
    "getColor": {
      "jsdoc": {
        "raw": [
          " maximal color temperature to show in slider"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 6146
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 6191
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_getInnerDomString": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 6216
        },
        "end": {
          "line": 269,
          "column": 5,
          "index": 9814
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.structure.pure.AbstractWidget",
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "_onDomReady": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 272,
          "column": 4,
          "index": 9839
        },
        "end": {
          "line": 280,
          "column": 5,
          "index": 10152
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.structure.pure.AbstractWidget",
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "_update": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 282,
          "column": 4,
          "index": 10159
        },
        "end": {
          "line": 471,
          "column": 5,
          "index": 16042
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "data"
        }
      ],
      "appearsIn": []
    },
    "__setSliderTo": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The internal slider state and its handle and displayed value",
          "     * @param {number} value The new value",
          "     * @param {string} variant The color component to change",
          "     * @param {boolean} instant Animate or instant change",
          "     * @private",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The internal slider state and its handle and displayed value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} value The new value",
            "paramName": "value",
            "description": "The new value",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{string} variant The color component to change",
            "paramName": "variant",
            "description": "The color component to change",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{boolean} instant Animate or instant change",
            "paramName": "instant",
            "description": "Animate or instant change",
            "type": "boolean"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 480,
          "column": 4,
          "index": 16311
        },
        "end": {
          "line": 488,
          "column": 5,
          "index": 16722
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "number"
        },
        {
          "name": "variant",
          "type": "string"
        },
        {
          "name": "instant",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "__updateHandlePosition": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 490,
          "column": 4,
          "index": 16729
        },
        "end": {
          "line": 624,
          "column": 5,
          "index": 23126
        }
      },
      "type": "function",
      "params": [
        {
          "name": "newColor"
        }
      ],
      "appearsIn": []
    },
    "invalidateScreensize": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 626,
          "column": 4,
          "index": 23133
        },
        "end": {
          "line": 629,
          "column": 5,
          "index": 23283
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "handleEvent": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 631,
          "column": 4,
          "index": 23290
        },
        "end": {
          "line": 794,
          "column": 5,
          "index": 29813
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event"
        }
      ],
      "appearsIn": []
    },
    "__changeColor": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 796,
          "column": 4,
          "index": 29820
        },
        "end": {
          "line": 799,
          "column": 5,
          "index": 29951
        }
      },
      "type": "function",
      "params": [
        {
          "name": "component"
        },
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "__onChangeValue": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 801,
          "column": 4,
          "index": 29958
        },
        "end": {
          "line": 911,
          "column": 5,
          "index": 33080
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "action": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Action performed when the widget got clicked, sends data to the backend",
          "     *",
          "     * @param event {Event} tap event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Action performed when the widget got clicked, sends data to the backend</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} tap event",
            "paramName": "event",
            "description": " tap event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1291
        },
        "end": {
          "line": 49,
          "column": 5,
          "index": 1675
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Operate",
        "cv.ui.structure.pure.AbstractWidget"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "downaction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles pointerdown events",
          "     * @param event {Event} pointerdown event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles pointerdown events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} pointerdown event",
            "paramName": "event",
            "description": " pointerdown event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1778
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1947
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Operate",
        "cv.ui.structure.pure.AbstractWidget"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "sendToBackend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Send the given value to all writeable addresses known to this widget",
          "     *",
          "     * @param value {var} value to send",
          "     * @param filter {Function} optional filter function for addresses",
          "     * @param currentBusValues {Object} optional: the (assumed) last encoded values",
          "     *          that were sent on the bus. When the encoding of the new value",
          "     *          to send is equal to the currentBusValues a transmission will",
          "     *          be suppressed. The object is a hash with the encoding as a key",
          "     *          for the encoded value",
          "     * @return the object/hash of encoded values that were sent last time",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given value to all writeable addresses known to this widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to send",
            "paramName": "value",
            "description": " value to send",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "filter {Function} optional filter function for addresses",
            "paramName": "filter",
            "description": " optional filter function for addresses",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "currentBusValues {Object} optional: the (assumed) last encoded values\n          that were sent on the bus. When the encoding of the new value\n          to send is equal to the currentBusValues a transmission will\n          be suppressed. The object is a hash with the encoding as a key\n          for the encoded value",
            "paramName": "currentBusValues",
            "description": " optional: the (assumed) last encoded values\n          that were sent on the bus. When the encoding of the new value\n          to send is equal to the currentBusValues a transmission will\n          be suppressed. The object is a hash with the encoding as a key\n          for the encoded value",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "the object/hash of encoded values that were sent last time"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2594
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 4221
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "filter",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "currentBusValues",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {},
      "appearsIn": [
        "cv.ui.common.Operate"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "_initOnCreate": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1530
        },
        "end": {
          "line": 48,
          "column": 24,
          "index": 1550
        }
      },
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "__initUpdater": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1557
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 2196
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "update": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Process the incoming data, update the shown value and the stylings",
          "     *",
          "     * @param address {String} Address of the incoming value",
          "     * @param data {String} the incoming value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Process the incoming data, update the shown value and the stylings</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} Address of the incoming value",
            "paramName": "address",
            "description": " Address of the incoming value",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {String} the incoming value",
            "paramName": "data",
            "description": " the incoming value",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2408
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2675
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "string"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "processIncomingValue": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2682
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 3103
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "data"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "update3d": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Description",
          "     *",
          "     * @param ev {var}",
          "     * @param data {var}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Description</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {var}",
            "paramName": "ev",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "data {var}",
            "paramName": "data",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3200
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3664
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "var"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "formatValueCache": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3409
        },
        "end": {
          "line": 123,
          "column": 26,
          "index": 3431
        }
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyTransform": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Decode the given data with the addresses transform",
          "     *",
          "     * @param address {String} KNX-GA or openHAB-item name",
          "     * @param data {var} value to be decoded",
          "     * @return {var}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decode the given data with the addresses transform</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB-item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB-item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {var} value to be decoded",
            "paramName": "data",
            "description": " value to be decoded",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var}",
            "type": "var",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3643
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 3854
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyMapping": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply the given mapping to the value",
          "     *",
          "     * @param value {var} value to be mapped",
          "     * @param mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
          "     * @return {var} the mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to be mapped",
            "paramName": "value",
            "description": " value to be mapped",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": " mapping name, if not set the <code>mapping</code> property value is used",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the mapped value",
            "type": "var",
            "description": "the mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4120
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4307
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "mappingName",
          "type": "String",
          "optional": true
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "getNextMappedValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Look up the entry for <code>value</code> in the mapping <code>this_map</code> and",
          "     * return the next value in the list (including wrap around).",
          "     *",
          "     * @param value {var} value to look up",
          "     * @param this_map {String} mapping name",
          "     * @return {var} the next mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Look up the entry for <code>value</code> in the mapping <code>this_map</code> and\n return the next value in the list (including wrap around).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to look up",
            "paramName": "value",
            "description": " value to look up",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "this_map {String} mapping name",
            "paramName": "this_map",
            "description": " mapping name",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the next mapped value",
            "type": "var",
            "description": "the next mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4623
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 4883
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "this_map",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyFormat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Format the given value according to the defined format.",
          "     * If no format is defined the value will not be changed.",
          "     *",
          "     * @param address {String} KNX-GA or openHAB item name",
          "     * @param value {var} value to be formatted",
          "     * @return {var} the formatted value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format the given value according to the defined format.\n If no format is defined the value will not be changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} value to be formatted",
            "paramName": "value",
            "description": " value to be formatted",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the formatted value",
            "type": "var",
            "description": "the formatted value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5186
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5628
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultValueHandling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The default value handling for most of the widgets.",
          "     * This method applies the transform, mapping, format and styling to the value.",
          "     *",
          "     * @param {string} address - KNX-GA or openHAB item name",
          "     * @param {*} data - value to be processes",
          "     * @return {*} the processed value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default value handling for most of the widgets.\n This method applies the transform, mapping, format and styling to the value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} address - KNX-GA or openHAB item name",
            "paramName": "address",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - value to be processes",
            "paramName": "data",
            "description": "- value to be processes",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the processed value",
            "type": "*",
            "description": "the processed value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5948
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7206
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultValue2DOM": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Method to handle all special cases for the value. The might come from",
          "     * the mapping where it can be quite complex as it can contain icons.",
          "     * @param {(*|*[])} value - the value, or an array of values, that will be inserted",
          "     * @param {HTMLElement} targetElement - the element where `value` will be added to",
          "     * @param {Function?} modifyFn - callback function that modifies the DOM",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method to handle all special cases for the value. The might come from\n the mapping where it can be quite complex as it can contain icons.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{(*|*[])} value - the value, or an array of values, that will be inserted",
            "paramName": "value",
            "description": "- the value, or an array of values, that will be inserted",
            "type": [
              "(*",
              {
                "type": "*",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - the element where <code>value</code> will be added to",
            "paramName": "targetElement",
            "description": "- the element where <code>value</code> will be added to",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{Function?} modifyFn - callback function that modifies the DOM",
            "paramName": "modifyFn",
            "description": "- callback function that modifies the DOM",
            "optional": true,
            "type": "Function"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 7736
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 8236
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "(*",
            {
              "type": "*",
              "dimensions": 2
            }
          ]
        },
        {
          "name": "targetElement",
          "type": "HTMLElement"
        },
        {
          "name": "modifyFn",
          "type": "Function",
          "optional": true
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultUpdate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Default update function, processes the incoming value and applies it to the DOM value element.",
          "     *",
          "     * @param {string} ga - KNX-GA or openHAB item name",
          "     * @param {*} data - the raw value from the bus",
          "     * @param {HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
          "     * @return {*} - value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Default update function, processes the incoming value and applies it to the DOM value element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} ga - KNX-GA or openHAB item name",
            "paramName": "ga",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - the raw value from the bus",
            "paramName": "data",
            "description": "- the raw value from the bus",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
            "paramName": "passedElement",
            "description": "- the element to update, if not given {@link getDomElement()} is used",
            "optional": true,
            "type": "HTMLElement"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} - value",
            "type": "*",
            "description": "- value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 277,
          "column": 4,
          "index": 8616
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 9322
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ga",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        },
        {
          "name": "passedElement",
          "type": "HTMLElement",
          "optional": true
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "_applyValueToDom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal function which updates the DOM element with the given value",
          "     * @param {HTMLElement} targetElement - element to update",
          "     * @param {*} value - value to add to the element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function which updates the DOM element with the given value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - element to update",
            "paramName": "targetElement",
            "description": "- element to update",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{*} value - value to add to the element",
            "paramName": "value",
            "description": "- value to add to the element",
            "type": "*"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 9537
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 9942
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetElement",
          "type": "HTMLElement"
        },
        {
          "name": "value",
          "type": "*"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    }
  }
}