{
  "version": 0.3,
  "lastModified": 1735383634064,
  "lastModifiedIso": "2024-12-28T11:00:34.064Z",
  "classFilename": "../../source/class/cv/ui/structure/pure/WgPluginInfo.js",
  "type": "class",
  "location": {
    "start": {
      "line": 30,
      "column": 0,
      "index": 1176
    },
    "end": {
      "line": 111,
      "column": 3,
      "index": 3269
    }
  },
  "className": "cv.ui.structure.pure.WgPluginInfo",
  "jsdoc": {
    "raw": [
      "*",
      " * Adds an dynamic field to the visu that shows live information from a WireGate plugin.",
      " *",
      " * Note: The service helper from",
      " * https://raw.githubusercontent.com/OpenAutomationProject/Wiregate/master/tools/wg-plugindb/wg-plugindb.php",
      " * must be \"installed\" in the directory /var/www/ (i.e. the web root)",
      " *",
      " * @author Christian Mayer",
      " * @since 2012",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Adds an dynamic field to the visu that shows live information from a WireGate plugin.\n Note: The service helper from\n https://raw.githubusercontent.com/OpenAutomationProject/Wiregate/master/tools/wg-plugindb/wg-plugindb.php\n must be \"installed\" in the directory /var/www/ (i.e. the web root)</p>"
      }
    ],
    "@author": [
      {
        "name": "@author",
        "body": "Christian Mayer"
      }
    ],
    "@since": [
      {
        "name": "@since",
        "body": "2012"
      }
    ]
  },
  "superClass": "cv.ui.structure.pure.AbstractWidget",
  "mixins": [
    "cv.ui.common.Update"
  ],
  "properties": {
    "variable": {
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1470
        },
        "end": {
          "line": 40,
          "column": 74,
          "index": 1540
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "apply": "_applyVariable"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "value": {
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1217
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1298
        }
      },
      "json": {
        "nullable": true,
        "event": "changeValue"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {var} the incoming value after transformation, mapping and formatting",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation, mapping and formatting"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "basicValue": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1380
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1438
        }
      },
      "json": {
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {var} the incoming value after transformation",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "format": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1503
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 1578
        }
      },
      "json": {
        "check": "String",
        "init": "",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Format to apply to incoming values",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format to apply to incoming values</p>"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "address": {
      "location": {
        "start": {
          "line": 33,
          "column": 4,
          "index": 1173
        },
        "end": {
          "line": 36,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Object",
        "init": {}
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Map of addresses (KNX-GA's or openHAB item names) this widget communicates with",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of addresses (KNX-GA's or openHAB item names) this widget communicates with</p>"
          }
        ]
      },
      "mixin": "cv.ui.common.Update",
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate",
        "cv.ui.common.HasAddress"
      ]
    }
  },
  "members": {
    "__request": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1700
        },
        "end": {
          "line": 49,
          "column": 19,
          "index": 1715
        }
      },
      "appearsIn": []
    },
    "_applyVariable": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1744
        },
        "end": {
          "line": 68,
          "column": 5,
          "index": 2300
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "getRequest": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 2307
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 2356
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onSuccess": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handle successful requests from {@link qx.io.request.Xhr}",
          "     * @param ev {Event}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle successful requests from {@link qx.io.request.Xhr}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {Event}",
            "paramName": "ev",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2469
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2650
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "_getInnerDomString": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2675
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2771
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.structure.pure.AbstractWidget",
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "handleUpdate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Triggers an {@link qx.io.request.Xhr} request to query the plugin value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Triggers an {@link qx.io.request.Xhr} request to query the plugin value</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2873
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 2962
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_initOnCreate": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1530
        },
        "end": {
          "line": 48,
          "column": 24,
          "index": 1550
        }
      },
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "__initUpdater": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1557
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 2196
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "update": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Process the incoming data, update the shown value and the stylings",
          "     *",
          "     * @param address {String} Address of the incoming value",
          "     * @param data {String} the incoming value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Process the incoming data, update the shown value and the stylings</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} Address of the incoming value",
            "paramName": "address",
            "description": " Address of the incoming value",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {String} the incoming value",
            "paramName": "data",
            "description": " the incoming value",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2408
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2675
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "string"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "processIncomingValue": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2682
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 3103
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "data"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "update3d": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Description",
          "     *",
          "     * @param ev {var}",
          "     * @param data {var}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Description</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {var}",
            "paramName": "ev",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "data {var}",
            "paramName": "data",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3200
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3664
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "var"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "formatValueCache": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3409
        },
        "end": {
          "line": 123,
          "column": 26,
          "index": 3431
        }
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyTransform": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Decode the given data with the addresses transform",
          "     *",
          "     * @param address {String} KNX-GA or openHAB-item name",
          "     * @param data {var} value to be decoded",
          "     * @return {var}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decode the given data with the addresses transform</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB-item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB-item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {var} value to be decoded",
            "paramName": "data",
            "description": " value to be decoded",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var}",
            "type": "var",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3643
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 3854
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyMapping": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply the given mapping to the value",
          "     *",
          "     * @param value {var} value to be mapped",
          "     * @param mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
          "     * @return {var} the mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to be mapped",
            "paramName": "value",
            "description": " value to be mapped",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": " mapping name, if not set the <code>mapping</code> property value is used",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the mapped value",
            "type": "var",
            "description": "the mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4120
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4307
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "mappingName",
          "type": "String",
          "optional": true
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "getNextMappedValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Look up the entry for <code>value</code> in the mapping <code>this_map</code> and",
          "     * return the next value in the list (including wrap around).",
          "     *",
          "     * @param value {var} value to look up",
          "     * @param this_map {String} mapping name",
          "     * @return {var} the next mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Look up the entry for <code>value</code> in the mapping <code>this_map</code> and\n return the next value in the list (including wrap around).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to look up",
            "paramName": "value",
            "description": " value to look up",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "this_map {String} mapping name",
            "paramName": "this_map",
            "description": " mapping name",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the next mapped value",
            "type": "var",
            "description": "the next mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4623
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 4883
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "this_map",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyFormat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Format the given value according to the defined format.",
          "     * If no format is defined the value will not be changed.",
          "     *",
          "     * @param address {String} KNX-GA or openHAB item name",
          "     * @param value {var} value to be formatted",
          "     * @return {var} the formatted value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format the given value according to the defined format.\n If no format is defined the value will not be changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} value to be formatted",
            "paramName": "value",
            "description": " value to be formatted",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the formatted value",
            "type": "var",
            "description": "the formatted value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5186
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5628
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultValueHandling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The default value handling for most of the widgets.",
          "     * This method applies the transform, mapping, format and styling to the value.",
          "     *",
          "     * @param {string} address - KNX-GA or openHAB item name",
          "     * @param {*} data - value to be processes",
          "     * @return {*} the processed value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default value handling for most of the widgets.\n This method applies the transform, mapping, format and styling to the value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} address - KNX-GA or openHAB item name",
            "paramName": "address",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - value to be processes",
            "paramName": "data",
            "description": "- value to be processes",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the processed value",
            "type": "*",
            "description": "the processed value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5948
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7206
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultValue2DOM": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Method to handle all special cases for the value. The might come from",
          "     * the mapping where it can be quite complex as it can contain icons.",
          "     * @param {(*|*[])} value - the value, or an array of values, that will be inserted",
          "     * @param {HTMLElement} targetElement - the element where `value` will be added to",
          "     * @param {Function?} modifyFn - callback function that modifies the DOM",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method to handle all special cases for the value. The might come from\n the mapping where it can be quite complex as it can contain icons.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{(*|*[])} value - the value, or an array of values, that will be inserted",
            "paramName": "value",
            "description": "- the value, or an array of values, that will be inserted",
            "type": [
              "(*",
              {
                "type": "*",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - the element where <code>value</code> will be added to",
            "paramName": "targetElement",
            "description": "- the element where <code>value</code> will be added to",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{Function?} modifyFn - callback function that modifies the DOM",
            "paramName": "modifyFn",
            "description": "- callback function that modifies the DOM",
            "optional": true,
            "type": "Function"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 7736
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 8236
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "(*",
            {
              "type": "*",
              "dimensions": 2
            }
          ]
        },
        {
          "name": "targetElement",
          "type": "HTMLElement"
        },
        {
          "name": "modifyFn",
          "type": "Function",
          "optional": true
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultUpdate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Default update function, processes the incoming value and applies it to the DOM value element.",
          "     *",
          "     * @param {string} ga - KNX-GA or openHAB item name",
          "     * @param {*} data - the raw value from the bus",
          "     * @param {HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
          "     * @return {*} - value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Default update function, processes the incoming value and applies it to the DOM value element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} ga - KNX-GA or openHAB item name",
            "paramName": "ga",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - the raw value from the bus",
            "paramName": "data",
            "description": "- the raw value from the bus",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
            "paramName": "passedElement",
            "description": "- the element to update, if not given {@link getDomElement()} is used",
            "optional": true,
            "type": "HTMLElement"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} - value",
            "type": "*",
            "description": "- value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 277,
          "column": 4,
          "index": 8616
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 9322
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ga",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        },
        {
          "name": "passedElement",
          "type": "HTMLElement",
          "optional": true
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "_applyValueToDom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal function which updates the DOM element with the given value",
          "     * @param {HTMLElement} targetElement - element to update",
          "     * @param {*} value - value to add to the element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function which updates the DOM element with the given value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - element to update",
            "paramName": "targetElement",
            "description": "- element to update",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{*} value - value to add to the element",
            "paramName": "value",
            "description": "- value to add to the element",
            "type": "*"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 9537
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 9942
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetElement",
          "type": "HTMLElement"
        },
        {
          "name": "value",
          "type": "*"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 104,
        "column": 2,
        "index": 3110
      },
      "end": {
        "line": 106,
        "column": 3,
        "index": 3165
      }
    }
  },
  "statics": {
    "applyMapping": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply the given mapping to the value",
          "     *",
          "     * @param {*} value - value to be mapped",
          "     * @param {string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
          "     * @return {*} the mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{*} value - value to be mapped",
            "paramName": "value",
            "description": "- value to be mapped",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": "- mapping name, if not set the <code>mapping</code> property value is used",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the mapped value",
            "type": "*",
            "description": "the mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1996
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3249
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "*"
        },
        {
          "name": "mappingName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    }
  }
}