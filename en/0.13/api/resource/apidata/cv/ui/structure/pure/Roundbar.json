{
  "version": 0.3,
  "lastModified": 1729100955409,
  "lastModifiedIso": "2024-10-16T17:49:15.409Z",
  "classFilename": "../../source/class/cv/ui/structure/pure/Roundbar.js",
  "type": "class",
  "location": {
    "start": {
      "line": 37,
      "column": 0,
      "index": 1281
    },
    "end": {
      "line": 766,
      "column": 3,
      "index": 26402
    }
  },
  "className": "cv.ui.structure.pure.Roundbar",
  "jsdoc": {
    "raw": [
      "*",
      " * Adds a display to the visu that can represent values from the BUS",
      " * and shows them with a round bar.",
      " *",
      " * @widgetexample <settings>",
      " *    <caption>Example roundbar widget</caption>",
      " *    <screenshot name=\"roundbar_simple\">",
      " *      <data address=\"3/3/1\">63.3</data>",
      " *    </screenshot>",
      " *  </settings>",
      " *  <roundbar>",
      " *      <address transform=\"DPT:9.001\" mode=\"read\">3/3/1</address>",
      " *  </roundbar>",
      " *",
      " * @author Christian Mayer",
      " * @since 0.12.0 (2020)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Adds a display to the visu that can represent values from the BUS\n and shows them with a round bar.</p>"
      }
    ],
    "@widgetexample": [
      {
        "name": "@widgetexample",
        "body": "<settings>\n    <caption>Example roundbar widget</caption>\n    <screenshot name=\"roundbar_simple\">\n      <data address=\"3/3/1\">63.3</data>\n    </screenshot>\n  </settings>\n  <roundbar>\n      <address transform=\"DPT:9.001\" mode=\"read\">3/3/1</address>\n  </roundbar>"
      }
    ],
    "@author": [
      {
        "name": "@author",
        "body": "Christian Mayer"
      }
    ],
    "@since": [
      {
        "name": "@since",
        "body": "0.12.0 (2020)"
      }
    ]
  },
  "superClass": "cv.ui.structure.pure.AbstractWidget",
  "mixins": [
    "cv.ui.common.Update"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "props"
      }
    ],
    "location": {
      "start": {
        "line": 46,
        "column": 2,
        "index": 1540
      },
      "end": {
        "line": 49,
        "column": 3,
        "index": 1617
      }
    }
  },
  "statics": {
    "coord": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1773
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 1862
        }
      },
      "type": "function",
      "params": [
        {
          "name": "position"
        }
      ],
      "appearsIn": []
    },
    "createBarPath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create the SVG path for the round bar.",
          "     * Angle = 0 === horizontal on the right",
          "     *",
          "     * @param startAngle {Float}",
          "     * @param startArrowPoint {Float}",
          "     * @param endAngle {Float}",
          "     * @param endArrowPoint {Float}",
          "     * @param radius {Float}",
          "     * @param width {Float}",
          "     * @param getBBox {Boolean} return the bounding box instead of the path itself",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create the SVG path for the round bar.\n Angle = 0 === horizontal on the right</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startAngle {Float}",
            "paramName": "startAngle",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "startArrowPoint {Float}",
            "paramName": "startArrowPoint",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "endAngle {Float}",
            "paramName": "endAngle",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "endArrowPoint {Float}",
            "paramName": "endArrowPoint",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "radius {Float}",
            "paramName": "radius",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "width {Float}",
            "paramName": "width",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "getBBox {Boolean} return the bounding box instead of the path itself",
            "paramName": "getBBox",
            "description": " return the bounding box instead of the path itself",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 2260
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 7368
        }
      },
      "type": "function",
      "params": [
        {
          "name": "startAngle",
          "type": "Float"
        },
        {
          "name": "startArrowPoint",
          "type": "Float"
        },
        {
          "name": "endAngle",
          "type": "Float"
        },
        {
          "name": "endArrowPoint",
          "type": "Float"
        },
        {
          "name": "radius",
          "type": "Float"
        },
        {
          "name": "width",
          "type": "Float"
        },
        {
          "name": "getBBox",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "createPointerPath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create the SVG path for an pointer.",
          "     * @param angle {Float}",
          "     * @param p {Object} Indicator object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create the SVG path for an pointer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "angle {Float}",
            "paramName": "angle",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "p {Object} Indicator object",
            "paramName": "p",
            "description": " Indicator object",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 7503
        },
        "end": {
          "line": 236,
          "column": 5,
          "index": 8356
        }
      },
      "type": "function",
      "params": [
        {
          "name": "angle",
          "type": "Float"
        },
        {
          "name": "p",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "applyMapping": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply the given mapping to the value",
          "     *",
          "     * @param {*} value - value to be mapped",
          "     * @param {string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
          "     * @return {*} the mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{*} value - value to be mapped",
            "paramName": "value",
            "description": "- value to be mapped",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{string} mappingName - mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": "- mapping name, if not set the <code>mapping</code> property value is used",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the mapped value",
            "type": "*",
            "description": "the mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1996
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3249
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "*"
        },
        {
          "name": "mappingName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    }
  },
  "properties": {
    "type": {
      "location": {
        "start": {
          "line": 245,
          "column": 4,
          "index": 8524
        },
        "end": {
          "line": 245,
          "column": 28,
          "index": 8548
        }
      },
      "json": {
        "check": "Array"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "indicators": {
      "location": {
        "start": {
          "line": 246,
          "column": 4,
          "index": 8554
        },
        "end": {
          "line": 246,
          "column": 34,
          "index": 8584
        }
      },
      "json": {
        "check": "Array"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "min": {
      "location": {
        "start": {
          "line": 248,
          "column": 4,
          "index": 8591
        },
        "end": {
          "line": 248,
          "column": 28,
          "index": 8615
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "max": {
      "location": {
        "start": {
          "line": 249,
          "column": 4,
          "index": 8621
        },
        "end": {
          "line": 249,
          "column": 28,
          "index": 8645
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "axisradius": {
      "location": {
        "start": {
          "line": 250,
          "column": 4,
          "index": 8651
        },
        "end": {
          "line": 250,
          "column": 35,
          "index": 8682
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "axiswidth": {
      "location": {
        "start": {
          "line": 251,
          "column": 4,
          "index": 8688
        },
        "end": {
          "line": 251,
          "column": 34,
          "index": 8718
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "axiscolor": {
      "location": {
        "start": {
          "line": 252,
          "column": 4,
          "index": 8724
        },
        "end": {
          "line": 252,
          "column": 34,
          "index": 8754
        }
      },
      "json": {
        "check": "String"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "ranges": {
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 8760
        },
        "end": {
          "line": 253,
          "column": 30,
          "index": 8786
        }
      },
      "json": {
        "check": "Array"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "minorradius": {
      "location": {
        "start": {
          "line": 254,
          "column": 4,
          "index": 8792
        },
        "end": {
          "line": 254,
          "column": 36,
          "index": 8824
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "minorwidth": {
      "location": {
        "start": {
          "line": 255,
          "column": 4,
          "index": 8830
        },
        "end": {
          "line": 255,
          "column": 35,
          "index": 8861
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "minorspacing": {
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 8867
        },
        "end": {
          "line": 256,
          "column": 37,
          "index": 8900
        }
      },
      "json": {
        "check": "String"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "minorcolor": {
      "location": {
        "start": {
          "line": 257,
          "column": 4,
          "index": 8906
        },
        "end": {
          "line": 257,
          "column": 35,
          "index": 8937
        }
      },
      "json": {
        "check": "String"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "majorradius": {
      "location": {
        "start": {
          "line": 258,
          "column": 4,
          "index": 8943
        },
        "end": {
          "line": 258,
          "column": 36,
          "index": 8975
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "majorwidth": {
      "location": {
        "start": {
          "line": 259,
          "column": 4,
          "index": 8981
        },
        "end": {
          "line": 259,
          "column": 35,
          "index": 9012
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "majorposition": {
      "location": {
        "start": {
          "line": 260,
          "column": 4,
          "index": 9018
        },
        "end": {
          "line": 260,
          "column": 38,
          "index": 9052
        }
      },
      "json": {
        "check": "String"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "majorcolor": {
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 9058
        },
        "end": {
          "line": 261,
          "column": 35,
          "index": 9089
        }
      },
      "json": {
        "check": "String"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "labels": {
      "location": {
        "start": {
          "line": 262,
          "column": 4,
          "index": 9095
        },
        "end": {
          "line": 262,
          "column": 30,
          "index": 9121
        }
      },
      "json": {
        "check": "Array"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "labelstyle": {
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 9127
        },
        "end": {
          "line": 263,
          "column": 35,
          "index": 9158
        }
      },
      "json": {
        "check": "String"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "start": {
      "location": {
        "start": {
          "line": 264,
          "column": 4,
          "index": 9164
        },
        "end": {
          "line": 264,
          "column": 30,
          "index": 9190
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "end": {
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 9196
        },
        "end": {
          "line": 265,
          "column": 28,
          "index": 9220
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "arrowtype": {
      "location": {
        "start": {
          "line": 266,
          "column": 4,
          "index": 9226
        },
        "end": {
          "line": 266,
          "column": 34,
          "index": 9256
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "spacing": {
      "location": {
        "start": {
          "line": 267,
          "column": 4,
          "index": 9262
        },
        "end": {
          "line": 267,
          "column": 32,
          "index": 9290
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "overflowarrow": {
      "location": {
        "start": {
          "line": 268,
          "column": 4,
          "index": 9296
        },
        "end": {
          "line": 268,
          "column": 39,
          "index": 9331
        }
      },
      "json": {
        "check": "Boolean"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "fontsize": {
      "location": {
        "start": {
          "line": 269,
          "column": 4,
          "index": 9337
        },
        "end": {
          "line": 269,
          "column": 33,
          "index": 9366
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "textx": {
      "location": {
        "start": {
          "line": 270,
          "column": 4,
          "index": 9372
        },
        "end": {
          "line": 270,
          "column": 30,
          "index": 9398
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "texty": {
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 9404
        },
        "end": {
          "line": 271,
          "column": 30,
          "index": 9430
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "textlength": {
      "location": {
        "start": {
          "line": 272,
          "column": 4,
          "index": 9436
        },
        "end": {
          "line": 272,
          "column": 35,
          "index": 9467
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "textanchor": {
      "location": {
        "start": {
          "line": 273,
          "column": 4,
          "index": 9473
        },
        "end": {
          "line": 273,
          "column": 35,
          "index": 9504
        }
      },
      "json": {
        "check": "String"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "linespace": {
      "location": {
        "start": {
          "line": 274,
          "column": 4,
          "index": 9510
        },
        "end": {
          "line": 274,
          "column": 34,
          "index": 9540
        }
      },
      "json": {
        "check": "Number"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "bboxgrow": {
      "location": {
        "start": {
          "line": 275,
          "column": 4,
          "index": 9546
        },
        "end": {
          "line": 275,
          "column": 33,
          "index": 9575
        }
      },
      "json": {
        "check": "Object"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "debug": {
      "location": {
        "start": {
          "line": 276,
          "column": 4,
          "index": 9581
        },
        "end": {
          "line": 276,
          "column": 31,
          "index": 9608
        }
      },
      "json": {
        "check": "Boolean"
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "currentRatioValue": {
      "location": {
        "start": {
          "line": 277,
          "column": 4,
          "index": 9614
        },
        "end": {
          "line": 277,
          "column": 51,
          "index": 9661
        }
      },
      "json": {
        "check": "Array",
        "init": []
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "targetRatioValue": {
      "location": {
        "start": {
          "line": 278,
          "column": 4,
          "index": 9667
        },
        "end": {
          "line": 278,
          "column": 50,
          "index": 9713
        }
      },
      "json": {
        "check": "Array",
        "init": []
      },
      "jsdoc": null,
      "appearsIn": []
    },
    "value": {
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1217
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1298
        }
      },
      "json": {
        "nullable": true,
        "event": "changeValue"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {var} the incoming value after transformation, mapping and formatting",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation, mapping and formatting"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "basicValue": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1380
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1438
        }
      },
      "json": {
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {var} the incoming value after transformation",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{var} the incoming value after transformation"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "format": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1503
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 1578
        }
      },
      "json": {
        "check": "String",
        "init": "",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Format to apply to incoming values",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format to apply to incoming values</p>"
          }
        ]
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "address": {
      "location": {
        "start": {
          "line": 33,
          "column": 4,
          "index": 1173
        },
        "end": {
          "line": 36,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Object",
        "init": {}
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Map of addresses (KNX-GA's or openHAB item names) this widget communicates with",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map of addresses (KNX-GA's or openHAB item names) this widget communicates with</p>"
          }
        ]
      },
      "mixin": "cv.ui.common.Update",
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate",
        "cv.ui.common.HasAddress"
      ]
    }
  },
  "members": {
    "__animator": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 287,
          "column": 4,
          "index": 9873
        },
        "end": {
          "line": 287,
          "column": 25,
          "index": 9894
        }
      },
      "appearsIn": []
    },
    "__indicatorDOMElement": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 288,
          "column": 4,
          "index": 9900
        },
        "end": {
          "line": 288,
          "column": 31,
          "index": 9927
        }
      },
      "appearsIn": []
    },
    "__postponedUpdates": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 289,
          "column": 4,
          "index": 9933
        },
        "end": {
          "line": 289,
          "column": 33,
          "index": 9962
        }
      },
      "appearsIn": []
    },
    "_getInnerDomString": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 292,
          "column": 4,
          "index": 9987
        },
        "end": {
          "line": 659,
          "column": 5,
          "index": 22524
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.structure.pure.AbstractWidget",
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "_onDomReady": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 662,
          "column": 4,
          "index": 22549
        },
        "end": {
          "line": 670,
          "column": 5,
          "index": 22815
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.structure.pure.AbstractWidget",
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "_update": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates the roundbar widget",
          "     *",
          "     * @param address {String} KNX-GA or openHAB item name",
          "     * @param data {*} incoming data",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the roundbar widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {*} incoming data",
            "paramName": "data",
            "description": " incoming data",
            "type": "*"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 678,
          "column": 4,
          "index": 22976
        },
        "end": {
          "line": 715,
          "column": 5,
          "index": 24356
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        }
      ],
      "appearsIn": []
    },
    "__updateIndicatorPosition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Callback to update the display of the indicators.",
          "     *",
          "     * Note: It is a design decision not to pool multiple updates in one requestAnimationFrame which might be beneficial",
          "     * performance wise. But as it's assumed that a typical visu config is only containing one roundbar per address",
          "     * a pooling wouldn't make a difference on the one hand but complicate the code on the other hand.",
          "     * Even with a few roundbars using the same address the performance impact is negligible.",
          "     * @param ratio",
          "     * @param indicatorNumber",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Callback to update the display of the indicators.\n Note: It is a design decision not to pool multiple updates in one requestAnimationFrame which might be beneficial\n performance wise. But as it's assumed that a typical visu config is only containing one roundbar per address\n a pooling wouldn't make a difference on the one hand but complicate the code on the other hand.\n Even with a few roundbars using the same address the performance impact is negligible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ratio",
            "paramName": "ratio",
            "type": ""
          },
          {
            "name": "@param",
            "body": "indicatorNumber",
            "paramName": "indicatorNumber",
            "type": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 727,
          "column": 4,
          "index": 24927
        },
        "end": {
          "line": 764,
          "column": 5,
          "index": 26394
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ratio"
        },
        {
          "name": "indicatorNumber"
        }
      ],
      "appearsIn": []
    },
    "_initOnCreate": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1530
        },
        "end": {
          "line": 48,
          "column": 24,
          "index": 1550
        }
      },
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "__initUpdater": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1557
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 2196
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "update": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Process the incoming data, update the shown value and the stylings",
          "     *",
          "     * @param address {String} Address of the incoming value",
          "     * @param data {String} the incoming value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Process the incoming data, update the shown value and the stylings</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} Address of the incoming value",
            "paramName": "address",
            "description": " Address of the incoming value",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {String} the incoming value",
            "paramName": "data",
            "description": " the incoming value",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2408
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2675
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "string"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "processIncomingValue": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2682
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 3103
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "data"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "update3d": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Description",
          "     *",
          "     * @param ev {var}",
          "     * @param data {var}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Description</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {var}",
            "paramName": "ev",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "data {var}",
            "paramName": "data",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3200
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3664
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "var"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "formatValueCache": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3409
        },
        "end": {
          "line": 123,
          "column": 26,
          "index": 3431
        }
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyTransform": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Decode the given data with the addresses transform",
          "     *",
          "     * @param address {String} KNX-GA or openHAB-item name",
          "     * @param data {var} value to be decoded",
          "     * @return {var}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decode the given data with the addresses transform</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB-item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB-item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {var} value to be decoded",
            "paramName": "data",
            "description": " value to be decoded",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var}",
            "type": "var",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3643
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 3854
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyMapping": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply the given mapping to the value",
          "     *",
          "     * @param value {var} value to be mapped",
          "     * @param mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
          "     * @return {var} the mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the given mapping to the value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to be mapped",
            "paramName": "value",
            "description": " value to be mapped",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "mappingName {String?} mapping name, if not set the <code>mapping</code> property value is used",
            "paramName": "mappingName",
            "description": " mapping name, if not set the <code>mapping</code> property value is used",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the mapped value",
            "type": "var",
            "description": "the mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4120
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4307
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "mappingName",
          "type": "String",
          "optional": true
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "getNextMappedValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Look up the entry for <code>value</code> in the mapping <code>this_map</code> and",
          "     * return the next value in the list (including wrap around).",
          "     *",
          "     * @param value {var} value to look up",
          "     * @param this_map {String} mapping name",
          "     * @return {var} the next mapped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Look up the entry for <code>value</code> in the mapping <code>this_map</code> and\n return the next value in the list (including wrap around).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to look up",
            "paramName": "value",
            "description": " value to look up",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "this_map {String} mapping name",
            "paramName": "this_map",
            "description": " mapping name",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the next mapped value",
            "type": "var",
            "description": "the next mapped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4623
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 4883
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "this_map",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "applyFormat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Format the given value according to the defined format.",
          "     * If no format is defined the value will not be changed.",
          "     *",
          "     * @param address {String} KNX-GA or openHAB item name",
          "     * @param value {var} value to be formatted",
          "     * @return {var} the formatted value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Format the given value according to the defined format.\n If no format is defined the value will not be changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "address {String} KNX-GA or openHAB item name",
            "paramName": "address",
            "description": " KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} value to be formatted",
            "paramName": "value",
            "description": " value to be formatted",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the formatted value",
            "type": "var",
            "description": "the formatted value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5186
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5628
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultValueHandling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The default value handling for most of the widgets.",
          "     * This method applies the transform, mapping, format and styling to the value.",
          "     *",
          "     * @param {string} address - KNX-GA or openHAB item name",
          "     * @param {*} data - value to be processes",
          "     * @return {*} the processed value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default value handling for most of the widgets.\n This method applies the transform, mapping, format and styling to the value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} address - KNX-GA or openHAB item name",
            "paramName": "address",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - value to be processes",
            "paramName": "data",
            "description": "- value to be processes",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the processed value",
            "type": "*",
            "description": "the processed value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5948
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7206
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultValue2DOM": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Method to handle all special cases for the value. The might come from",
          "     * the mapping where it can be quite complex as it can contain icons.",
          "     * @param {(*|*[])} value - the value, or an array of values, that will be inserted",
          "     * @param {HTMLElement} targetElement - the element where `value` will be added to",
          "     * @param {Function?} modifyFn - callback function that modifies the DOM",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method to handle all special cases for the value. The might come from\n the mapping where it can be quite complex as it can contain icons.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{(*|*[])} value - the value, or an array of values, that will be inserted",
            "paramName": "value",
            "description": "- the value, or an array of values, that will be inserted",
            "type": [
              "(*",
              {
                "type": "*",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - the element where <code>value</code> will be added to",
            "paramName": "targetElement",
            "description": "- the element where <code>value</code> will be added to",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{Function?} modifyFn - callback function that modifies the DOM",
            "paramName": "modifyFn",
            "description": "- callback function that modifies the DOM",
            "optional": true,
            "type": "Function"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 7736
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 8236
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "(*",
            {
              "type": "*",
              "dimensions": 2
            }
          ]
        },
        {
          "name": "targetElement",
          "type": "HTMLElement"
        },
        {
          "name": "modifyFn",
          "type": "Function",
          "optional": true
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "defaultUpdate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Default update function, processes the incoming value and applies it to the DOM value element.",
          "     *",
          "     * @param {string} ga - KNX-GA or openHAB item name",
          "     * @param {*} data - the raw value from the bus",
          "     * @param {HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
          "     * @return {*} - value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Default update function, processes the incoming value and applies it to the DOM value element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} ga - KNX-GA or openHAB item name",
            "paramName": "ga",
            "description": "- KNX-GA or openHAB item name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{*} data - the raw value from the bus",
            "paramName": "data",
            "description": "- the raw value from the bus",
            "type": "*"
          },
          {
            "name": "@param",
            "body": "{HTMLElement?} passedElement - the element to update, if not given {@link getDomElement()} is used",
            "paramName": "passedElement",
            "description": "- the element to update, if not given {@link getDomElement()} is used",
            "optional": true,
            "type": "HTMLElement"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} - value",
            "type": "*",
            "description": "- value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 277,
          "column": 4,
          "index": 8616
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 9322
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ga",
          "type": "string"
        },
        {
          "name": "data",
          "type": "*"
        },
        {
          "name": "passedElement",
          "type": "HTMLElement",
          "optional": true
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    },
    "_applyValueToDom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal function which updates the DOM element with the given value",
          "     * @param {HTMLElement} targetElement - element to update",
          "     * @param {*} value - value to add to the element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function which updates the DOM element with the given value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{HTMLElement} targetElement - element to update",
            "paramName": "targetElement",
            "description": "- element to update",
            "type": "HTMLElement"
          },
          {
            "name": "@param",
            "body": "{*} value - value to add to the element",
            "paramName": "value",
            "description": "- value to add to the element",
            "type": "*"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 9537
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 9942
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetElement",
          "type": "HTMLElement"
        },
        {
          "name": "value",
          "type": "*"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Update",
        "cv.ui.common.BasicUpdate"
      ],
      "mixin": "cv.ui.common.Update"
    }
  }
}