{
  "version": 0.3,
  "lastModified": 1731947857575,
  "lastModifiedIso": "2024-11-18T16:37:37.575Z",
  "classFilename": "../../source/class/cv/ui/structure/pure/DesignToggle.js",
  "type": "class",
  "location": {
    "start": {
      "line": 33,
      "column": 0,
      "index": 1059
    },
    "end": {
      "line": 87,
      "column": 3,
      "index": 2775
    }
  },
  "className": "cv.ui.structure.pure.DesignToggle",
  "jsdoc": {
    "raw": [
      "*",
      " * Adds a button to toggle through the available designs",
      " * @widgetexample",
      " * <designtoggle>",
      " *   <layout colspan=\"6\"/>",
      " *   <label>Change Design</label>",
      " * </designtoggle>",
      " *",
      " *",
      " *",
      " * @author Christian Mayer",
      " * @since 0.5.3 (2010)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Adds a button to toggle through the available designs</p>"
      }
    ],
    "@widgetexample": [
      {
        "name": "@widgetexample",
        "body": "<designtoggle>\n   <layout colspan=\"6\"/>\n   <label>Change Design</label>\n </designtoggle>"
      }
    ],
    "@author": [
      {
        "name": "@author",
        "body": "Christian Mayer"
      }
    ],
    "@since": [
      {
        "name": "@since",
        "body": "0.5.3 (2010)"
      }
    ]
  },
  "superClass": "cv.ui.structure.pure.AbstractWidget",
  "mixins": [
    "cv.ui.common.Operate",
    "cv.ui.common.HasAnimatedButton"
  ],
  "members": {
    "_getInnerDomString": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1402
        },
        "end": {
          "line": 46,
          "column": 5,
          "index": 1542
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "cv.ui.structure.pure.AbstractWidget",
      "appearsIn": [
        "cv.ui.structure.pure.AbstractWidget"
      ]
    },
    "_action": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Action performed when the widget got clicked",
          "     *",
          "     *",
          "     * @param path {String} - Internal path of the widget",
          "     * @param actor {Element} - DOMElement",
          "     * @param isCanceled {Boolean} - If true the action does nothing",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Action performed when the widget got clicked</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "path {String} - Internal path of the widget",
            "paramName": "path",
            "description": " - Internal path of the widget",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "actor {Element} - DOMElement",
            "paramName": "actor",
            "description": " - DOMElement",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "isCanceled {Boolean} - If true the action does nothing",
            "paramName": "isCanceled",
            "description": " - If true the action does nothing",
            "type": "boolean"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1800
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2668
        }
      },
      "type": "function",
      "params": [
        {
          "name": "path",
          "type": "string"
        },
        {
          "name": "actor",
          "type": "Element"
        },
        {
          "name": "isCanceled",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "action": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Action performed when the widget got clicked, sends data to the backend",
          "     *",
          "     * @param event {Event} tap event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Action performed when the widget got clicked, sends data to the backend</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} tap event",
            "paramName": "event",
            "description": " tap event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1291
        },
        "end": {
          "line": 49,
          "column": 5,
          "index": 1675
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Operate",
        "cv.ui.structure.pure.AbstractWidget"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "downaction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles pointerdown events",
          "     * @param event {Event} pointerdown event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles pointerdown events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} pointerdown event",
            "paramName": "event",
            "description": " pointerdown event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1778
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1947
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.Operate",
        "cv.ui.structure.pure.AbstractWidget"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "sendToBackend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Send the given value to all writeable addresses known to this widget",
          "     *",
          "     * @param value {var} value to send",
          "     * @param filter {Function} optional filter function for addresses",
          "     * @param currentBusValues {Object} optional: the (assumed) last encoded values",
          "     *          that were sent on the bus. When the encoding of the new value",
          "     *          to send is equal to the currentBusValues a transmission will",
          "     *          be suppressed. The object is a hash with the encoding as a key",
          "     *          for the encoded value",
          "     * @return the object/hash of encoded values that were sent last time",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given value to all writeable addresses known to this widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to send",
            "paramName": "value",
            "description": " value to send",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "filter {Function} optional filter function for addresses",
            "paramName": "filter",
            "description": " optional filter function for addresses",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "currentBusValues {Object} optional: the (assumed) last encoded values\n          that were sent on the bus. When the encoding of the new value\n          to send is equal to the currentBusValues a transmission will\n          be suppressed. The object is a hash with the encoding as a key\n          for the encoded value",
            "paramName": "currentBusValues",
            "description": " optional: the (assumed) last encoded values\n          that were sent on the bus. When the encoding of the new value\n          to send is equal to the currentBusValues a transmission will\n          be suppressed. The object is a hash with the encoding as a key\n          for the encoded value",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "the object/hash of encoded values that were sent last time"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2594
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 4221
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "filter",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "currentBusValues",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {},
      "appearsIn": [
        "cv.ui.common.Operate"
      ],
      "mixin": "cv.ui.common.Operate"
    },
    "__olid": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1259
        },
        "end": {
          "line": 36,
          "column": 16,
          "index": 1271
        }
      },
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__ilid": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1277
        },
        "end": {
          "line": 37,
          "column": 16,
          "index": 1289
        }
      },
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__downTarget": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 1295
        },
        "end": {
          "line": 38,
          "column": 22,
          "index": 1313
        }
      },
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__initListeners": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1320
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1628
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__getActors": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1635
        },
        "end": {
          "line": 60,
          "column": 5,
          "index": 1895
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "buttonPressed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create an action handling that shows a button press animation.",
          "     * When the action is not set, it will be searched for - so that widgets",
          "     * with bind_click_to_widget will also work.",
          "     *",
          "     * @param event {Event} pointerdown event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an action handling that shows a button press animation.\n When the action is not set, it will be searched for - so that widgets\n with bind<em>click</em>to_widget will also work.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} pointerdown event",
            "paramName": "event",
            "description": " pointerdown event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 69,
          "column": 4,
          "index": 2167
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2881
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "__updateButtons": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2888
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 3371
        }
      },
      "type": "function",
      "params": [
        {
          "name": "buttons"
        },
        {
          "name": "pressed"
        }
      ],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    },
    "buttonReleased": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create an action handling that shows a button unpress animation.",
          "     * When the action is not set, it will be searched for - so that widgets",
          "     * with bind_click_to_widget will also work.",
          "     *",
          "     * @param event {Event} pointerup event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an action handling that shows a button unpress animation.\n When the action is not set, it will be searched for - so that widgets\n with bind<em>click</em>to_widget will also work.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} pointerup event",
            "paramName": "event",
            "description": " pointerup event",
            "type": "Event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3643
        },
        "end": {
          "line": 135,
          "column": 5,
          "index": 4221
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        }
      ],
      "appearsIn": [
        "cv.ui.common.HasAnimatedButton"
      ],
      "mixin": "cv.ui.common.HasAnimatedButton"
    }
  },
  "statics": {},
  "properties": {}
}