{
  "version": 0.3,
  "lastModified": 1722151563971,
  "lastModifiedIso": "2024-07-28T07:26:03.971Z",
  "classFilename": "../../source/class/cv/Transform.js",
  "type": "class",
  "location": {
    "start": {
      "line": 44,
      "column": 0,
      "index": 1559
    },
    "end": {
      "line": 272,
      "column": 3,
      "index": 9571
    }
  },
  "className": "cv.Transform",
  "jsdoc": {
    "raw": [
      "*",
      " * This class defines some default transformations like <code>raw</code>, <code>int</code> and <code>float</code>.",
      " * New transformation can be added and used. For example an openHAB transformation for a switch item is added by",
      " * {@link cv.transforms.OpenHab} like this:",
      " *",
      " * <pre class=\"javascript\">",
      " *   cv.Transform.addTransform('OH', {",
      " *    'switch': {",
      " *      name: 'OH_Switch',",
      " *       encode: function (phy) {",
      " *         return phy == 1 ? 'ON' : 'OFF';",
      " *      },",
      " *",
      " *       decode: function (string) {",
      " *         if (cv.transforms.OpenHab.isUndefined(string)) return 0;",
      " *         return (string == \"ON\" || parseInt(string) > 0) ? 1 : 0;",
      " *       }",
      " *     }",
      " *   });",
      " * </pre>",
      " *",
      " * @author Christian Mayer",
      " * @since 2010",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This class defines some default transformations like <code>raw</code>, <code>int</code> and <code>float</code>.\n New transformation can be added and used. For example an openHAB transformation for a switch item is added by\n {@link cv.transforms.OpenHab} like this:\n </p>\n<pre class=\"javascript\">\n   cv.Transform.addTransform('OH', {\n    'switch': {\n      name: 'OH_Switch',\n       encode: function (phy) {\n         return phy == 1 ? 'ON' : 'OFF';\n      },\n       decode: function (string) {\n         if (cv.transforms.OpenHab.isUndefined(string)) return 0;\n         return (string == \"ON\" || parseInt(string) > 0) ? 1 : 0;\n       }\n     }\n   });\n </pre>"
      }
    ],
    "@author": [
      {
        "name": "@author",
        "body": "Christian Mayer"
      }
    ],
    "@since": [
      {
        "name": "@since",
        "body": "2010"
      }
    ]
  },
  "isSingleton": false,
  "abstract": false,
  "statics": {
    "registry": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1767
        },
        "end": {
          "line": 83,
          "column": 5,
          "index": 2296
        }
      },
      "appearsIn": []
    },
    "addTransform": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add transformation rules to the registry",
          "     * @param prefix {String} Transformation prefix (e.g. DPT for KNX transformations or OH for openHAB transformations)",
          "     * @param transforms {Object} map of transformations",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add transformation rules to the registry</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prefix {String} Transformation prefix (e.g. DPT for KNX transformations or OH for openHAB transformations)",
            "paramName": "prefix",
            "description": " Transformation prefix (e.g. DPT for KNX transformations or OH for openHAB transformations)",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "transforms {Object} map of transformations",
            "paramName": "transforms",
            "description": " map of transformations",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2852
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 3201
        }
      },
      "type": "function",
      "params": [
        {
          "name": "prefix",
          "type": "string"
        },
        {
          "name": "transforms",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "clip": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Enforce that value stays within range",
          "     * When value is not a valid number, the min value is returned",
          "     * @param {number} min lower threshold",
          "     * @param {any} value value to clip",
          "     * @param {number} max upper threshold",
          "     * @param [scaling] {Number} scale the clipping result by that amount",
          "     * @return {number} the clipped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enforce that value stays within range\n When value is not a valid number, the min value is returned</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} min lower threshold",
            "paramName": "min",
            "description": "lower threshold",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{any} value value to clip",
            "paramName": "value",
            "description": "value to clip",
            "type": "any"
          },
          {
            "name": "@param",
            "body": "{number} max upper threshold",
            "paramName": "max",
            "description": "upper threshold",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "[scaling] {Number} scale the clipping result by that amount",
            "paramName": "[scaling]",
            "description": " scale the clipping result by that amount",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{number} the clipped value",
            "type": "number",
            "description": "the clipped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3578
        },
        "end": {
          "line": 117,
          "column": 5,
          "index": 3744
        }
      },
      "type": "function",
      "params": [
        {
          "name": "min",
          "type": "number"
        },
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "max",
          "type": "number"
        },
        {
          "name": "scaling"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "clipInt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Enforce that value stays within range and is an integer",
          "     * When value is not a valid number, the min value is returned",
          "     * @param {number} min lower threshold",
          "     * @param {any} value value to clip",
          "     * @param {number} max upper threshold",
          "     * @param [scaling] {Number} scale the clipping result by that amount",
          "     * @return {number} the clipped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enforce that value stays within range and is an integer\n When value is not a valid number, the min value is returned</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} min lower threshold",
            "paramName": "min",
            "description": "lower threshold",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "{any} value value to clip",
            "paramName": "value",
            "description": "value to clip",
            "type": "any"
          },
          {
            "name": "@param",
            "body": "{number} max upper threshold",
            "paramName": "max",
            "description": "upper threshold",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "[scaling] {Number} scale the clipping result by that amount",
            "paramName": "[scaling]",
            "description": " scale the clipping result by that amount",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{number} the clipped value",
            "type": "number",
            "description": "the clipped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 4139
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 4320
        }
      },
      "type": "function",
      "params": [
        {
          "name": "min",
          "type": "number"
        },
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "max",
          "type": "number"
        },
        {
          "name": "scaling"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "encodeBusAndRaw": {
      "jsdoc": {
        "raw": [
          "*",
          "     * transform JavaScript to bus value and raw value",
          "     *",
          "     * @param {{transform: string, selector?: string, ignoreError?: string, variantInfo?: string}} address - type of the transformation, as address object",
          "     * @param {*} value - value to transform",
          "     * @return {*} object with both encoded values",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>transform JavaScript to bus value and raw value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{{transform: string, selector?: string, ignoreError?: string, variantInfo?: string}} address - type of the transformation, as address object"
          },
          {
            "name": "@param",
            "body": "{*} value - value to transform",
            "paramName": "value",
            "description": "- value to transform",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} object with both encoded values",
            "type": "*",
            "description": "object with both encoded values"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 140,
          "column": 4,
          "index": 4656
        },
        "end": {
          "line": 173,
          "column": 5,
          "index": 5921
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "value",
          "type": "*"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": []
    },
    "encode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * transform JavaScript to bus value",
          "     *",
          "     * @param {{transform: string, selector?: string, ignoreError?: string}} address - type of the transformation, as address object",
          "     * @param {*} value - value to transform",
          "     * @return {*} the encoded value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>transform JavaScript to bus value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{{transform: string, selector?: string, ignoreError?: string}} address - type of the transformation, as address object"
          },
          {
            "name": "@param",
            "body": "{*} value - value to transform",
            "paramName": "value",
            "description": "- value to transform",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the encoded value",
            "type": "*",
            "description": "the encoded value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 6207
        },
        "end": {
          "line": 184,
          "column": 5,
          "index": 6292
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "value",
          "type": "*"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": []
    },
    "decode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * transform bus to JavaScript value",
          "     * @param {{transform: string, selector?: string, ignoreError?: string, variantInfo?: string}} address - type of the transformation, as address object",
          "     * @param {*} value - value to transform",
          "     * @return {*} the decoded value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>transform bus to JavaScript value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{{transform: string, selector?: string, ignoreError?: string, variantInfo?: string}} address - type of the transformation, as address object"
          },
          {
            "name": "@param",
            "body": "{*} value - value to transform",
            "paramName": "value",
            "description": "- value to transform",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{*} the decoded value",
            "type": "*",
            "description": "the decoded value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 6593
        },
        "end": {
          "line": 244,
          "column": 5,
          "index": 8517
        }
      },
      "type": "function",
      "params": [
        {
          "name": "address"
        },
        {
          "name": "value",
          "type": "*"
        }
      ],
      "returnType": {
        "type": "*"
      },
      "appearsIn": []
    },
    "__getFirstElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the first element of the (JSON) selector",
          "     * @param {string} selector - the JSON (sub-)selector",
          "     * @returns {{firstPart: string, remainingPart: string}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the first element of the (JSON) selector</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} selector - the JSON (sub-)selector",
            "paramName": "selector",
            "description": "- the JSON (sub-)selector",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{firstPart: string, remainingPart: string}}",
            "type": "{firstPart: string, remainingPart: string}",
            "description": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 251,
          "column": 4,
          "index": 8711
        },
        "end": {
          "line": 270,
          "column": 5,
          "index": 9563
        }
      },
      "type": "function",
      "params": [
        {
          "name": "selector",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "{firstPart: string, remainingPart: string}"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}