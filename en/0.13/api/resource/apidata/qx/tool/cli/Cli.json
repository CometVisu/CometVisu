{
  "version": 0.3,
  "lastModified": 1722151624515,
  "lastModifiedIso": "2024-07-28T07:27:04.515Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/tool/cli/Cli.js",
  "type": "class",
  "location": {
    "start": {
      "line": 26,
      "column": 0,
      "index": 611
    },
    "end": {
      "line": 713,
      "column": 3,
      "index": 21741
    }
  },
  "className": "qx.tool.cli.Cli",
  "jsdoc": {
    "raw": [
      "*",
      " * Entry point for the CLI",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Entry point for the CLI</p>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "properties": {
    "command": {
      "location": {
        "start": {
          "line": 29,
          "column": 4,
          "index": 694
        },
        "end": {
          "line": 31,
          "column": 5,
          "index": 740
        }
      },
      "json": {
        "apply": "__applyCommand"
      },
      "jsdoc": null,
      "appearsIn": []
    }
  },
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 34,
        "column": 2,
        "index": 749
      },
      "end": {
        "line": 43,
        "column": 3,
        "index": 1042
      }
    }
  },
  "members": {
    "yargs": {
      "jsdoc": {
        "raw": [
          "* @type {typeof import(\"yargs\")} the current yargs instance "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{typeof import(\"yargs\")} the current yargs instance"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1131
        },
        "end": {
          "line": 47,
          "column": 15,
          "index": 1142
        }
      },
      "appearsIn": []
    },
    "argv": {
      "jsdoc": {
        "raw": [
          "* @type {Object} the current argv "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Object} the current argv"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1192
        },
        "end": {
          "line": 50,
          "column": 14,
          "index": 1202
        }
      },
      "appearsIn": []
    },
    "_compilerApi": {
      "jsdoc": {
        "raw": [
          "* @type {qx.tool.cli.api.CompilerApi} the CompilerApi instance "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.tool.cli.api.CompilerApi} the CompilerApi instance"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1281
        },
        "end": {
          "line": 53,
          "column": 22,
          "index": 1299
        }
      },
      "appearsIn": []
    },
    "_compileJsFilename": {
      "jsdoc": {
        "raw": [
          "* @type {String} the compile.js filename, if there is one "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} the compile.js filename, if there is one"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1373
        },
        "end": {
          "line": 56,
          "column": 28,
          "index": 1397
        }
      },
      "appearsIn": []
    },
    "_compileJsonFilename": {
      "jsdoc": {
        "raw": [
          "* @type {String} the compile.json filename, if there is one "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} the compile.json filename, if there is one"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1473
        },
        "end": {
          "line": 59,
          "column": 30,
          "index": 1499
        }
      },
      "appearsIn": []
    },
    "__parsedArgs": {
      "jsdoc": {
        "raw": [
          "* @type {Object} Parsed arguments "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Object} Parsed arguments"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1549
        },
        "end": {
          "line": 62,
          "column": 22,
          "index": 1567
        }
      },
      "appearsIn": []
    },
    "__librariesNotified": {
      "jsdoc": {
        "raw": [
          "* @type {Boolean} Whether libraries have had their `.load()` method called yet "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether libraries have had their <code>.load()</code> method called yet"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1662
        },
        "end": {
          "line": 65,
          "column": 30,
          "index": 1688
        }
      },
      "appearsIn": []
    },
    "__applyCommand": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1695
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 1820
        }
      },
      "type": "function",
      "params": [
        {
          "name": "command"
        }
      ],
      "appearsIn": []
    },
    "__createYargs": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates an instance of yargs, with minimal options",
          "     *",
          "     * @return {import(\"yargs\")}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates an instance of yargs, with minimal options</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{import(\"yargs\")}",
            "type": "import(\"yargs\")",
            "description": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1941
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 3063
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "import(\"yargs\")"
      },
      "appearsIn": []
    },
    "__bootstrapArgv": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initialises this.argv with the bare minimum required to load the config files and begin",
          "     * processing",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialises this.argv with the bare minimum required to load the config files and begin\n processing</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3199
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 4020
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__fullArgv": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reloads this.argv with the full set of arguments",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reloads this.argv with the full set of arguments</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4099
        },
        "end": {
          "line": 210,
          "column": 5,
          "index": 5654
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__notifyCommand": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This is to notify the commands after loading the full args.",
          "     * The commands can overload special arg arguments here.",
          "     * e.g. Deploy will will overload the target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This is to notify the commands after loading the full args.\n The commands can overload special arg arguments here.\n e.g. Deploy will will overload the target.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 217,
          "column": 4,
          "index": 5855
        },
        "end": {
          "line": 222,
          "column": 5,
          "index": 6016
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__notifyLibraries": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calls the `.load()` method of each library, safe to call multiple times.  This is",
          "     * to delay the calling of `load()` until after we know that the command has been selected",
          "     * by Yargs",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calls the <code>.load()</code> method of each library, safe to call multiple times.  This is\n to delay the calling of <code>load()</code> until after we know that the command has been selected\n by Yargs</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 229,
          "column": 4,
          "index": 6239
        },
        "end": {
          "line": 243,
          "column": 5,
          "index": 6620
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "processCommand": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Processes a command.  All commands should use this method when invoked by Yargs, because it",
          "     * provides a standard error control and makes sure that the libraries know what command has",
          "     * been selected.",
          "     *",
          "     * @param command {qx.tool.cli.commands.Command} the command being run",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Processes a command.  All commands should use this method when invoked by Yargs, because it\n provides a standard error control and makes sure that the libraries know what command has\n been selected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "command {qx.tool.cli.commands.Command} the command being run",
            "paramName": "command",
            "description": " the command being run",
            "type": "qx.tool.cli.commands.Command"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 252,
          "column": 4,
          "index": 6943
        },
        "end": {
          "line": 258,
          "column": 5,
          "index": 7221
        }
      },
      "type": "function",
      "params": [
        {
          "name": "command",
          "type": "qx.tool.cli.commands.Command"
        }
      ],
      "appearsIn": []
    },
    "getParsedArgs": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the parsed command line and configuration data",
          "     *",
          "     * @return {Object}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the parsed command line and configuration data</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Record<any, any>",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 7337
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 7392
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "run": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Parses the command line and loads configuration data from a .js or .json file;",
          "     * if you provide a .js file the file must be a module which returns an object which",
          "     * has any of these properties:",
          "     *",
          "     *  CompilerApi - the class (derived from qx.tool.cli.api.CompilerApi)",
          "     *    for configuring the compiler",
          "     *",
          "     * Each library can also have a compile.js, and that is also a module which can",
          "     * return an object with any of these properties:",
          "     *",
          "     *  LibraryApi - the class (derived from qx.tool.cli.api.LibraryApi)",
          "     *    for configuring the library",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Parses the command line and loads configuration data from a .js or .json file;\n if you provide a .js file the file must be a module which returns an object which\n has any of these properties:\n  CompilerApi - the class (derived from qx.tool.cli.api.CompilerApi)\n    for configuring the compiler\n Each library can also have a compile.js, and that is also a module which can\n return an object with any of these properties:\n  LibraryApi - the class (derived from qx.tool.cli.api.LibraryApi)\n    for configuring the library</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 8017
        },
        "end": {
          "line": 290,
          "column": 5,
          "index": 8235
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__parseArgsImpl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Does the work of parsing command line arguments and loading `compile.js[on]`",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does the work of parsing command line arguments and loading <code>compile.js[on]</code></p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 295,
          "column": 4,
          "index": 8342
        },
        "end": {
          "line": 576,
          "column": 5,
          "index": 18136
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__loadJs": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Loads a .js file using `require`, handling exceptions as best as possible",
          "     *",
          "     * @param aPath {String} the file to load",
          "     * @return {Object} the module",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loads a .js file using <code>require</code>, handling exceptions as best as possible</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "aPath {String} the file to load",
            "paramName": "aPath",
            "description": " the file to load",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the module",
            "type": "Record<any, any>",
            "description": "the module"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 584,
          "column": 4,
          "index": 18328
        },
        "end": {
          "line": 612,
          "column": 5,
          "index": 19133
        }
      },
      "type": "function",
      "params": [
        {
          "name": "aPath",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "compileJsExists": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns if the file compile.js exists",
          "     *",
          "     * @returns {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns if the file compile.js exists</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 619,
          "column": 4,
          "index": 19234
        },
        "end": {
          "line": 621,
          "column": 5,
          "index": 19296
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getCompilerApi": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the CompilerApi instance",
          "     *",
          "     * @return {qx.tool.cli.api.CompilerApi}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the CompilerApi instance</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.tool.cli.api.CompilerApi}",
            "type": "qx.tool.cli.api.CompilerApi",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 628,
          "column": 4,
          "index": 19411
        },
        "end": {
          "line": 630,
          "column": 5,
          "index": 19467
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.tool.cli.api.CompilerApi"
      },
      "appearsIn": []
    },
    "getCompileJsFilename": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the filename of compile.js, if there is one",
          "     *",
          "     * @return {String?} filename",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the filename of compile.js, if there is one</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String?} filename",
            "type": "String?",
            "description": "filename"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 637,
          "column": 4,
          "index": 19590
        },
        "end": {
          "line": 639,
          "column": 5,
          "index": 19658
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "String?"
      },
      "appearsIn": []
    },
    "getCompileJsonFilename": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the filename of compile.json, if there is one",
          "     *",
          "     * @return {String?} filename",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the filename of compile.json, if there is one</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String?} filename",
            "type": "String?",
            "description": "filename"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 646,
          "column": 4,
          "index": 19783
        },
        "end": {
          "line": 648,
          "column": 5,
          "index": 19855
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "String?"
      },
      "appearsIn": []
    },
    "isExplicitArg": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the command line explicit set an option (as opposed to yargs",
          "     * providing a default value).  Note that this does not handle aliases, use the",
          "     * actual, full option name.",
          "     *",
          "     * @param option {String} the name of the option, eg \"listen-port\"",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the command line explicit set an option (as opposed to yargs\n providing a default value).  Note that this does not handle aliases, use the\n actual, full option name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "option {String} the name of the option, eg \"listen-port\"",
            "paramName": "option",
            "description": " the name of the option, eg \"listen-port\"",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 658,
          "column": 4,
          "index": 20182
        },
        "end": {
          "line": 663,
          "column": 5,
          "index": 20388
        }
      },
      "type": "function",
      "params": [
        {
          "name": "option",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "statics": {
    "compileJsFilename": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 667,
          "column": 4,
          "index": 20412
        },
        "end": {
          "line": 667,
          "column": 35,
          "index": 20443
        }
      },
      "appearsIn": []
    },
    "__instance": {
      "jsdoc": {
        "raw": [
          "* {CompileJs} singleton instance "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>{CompileJs} singleton instance</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 670,
          "column": 4,
          "index": 20492
        },
        "end": {
          "line": 670,
          "column": 20,
          "index": 20508
        }
      },
      "appearsIn": []
    },
    "getInstance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the singleton instance, throws an error if it has not been created",
          "     *",
          "     * @return {qx.tool.cli.Cli}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the singleton instance, throws an error if it has not been created</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.tool.cli.Cli}",
            "type": "qx.tool.cli.Cli",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 677,
          "column": 4,
          "index": 20653
        },
        "end": {
          "line": 682,
          "column": 5,
          "index": 20832
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.tool.cli.Cli"
      },
      "appearsIn": []
    },
    "addYargsCommands": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds commands to Yargs",
          "     *",
          "     * @param yargs {typeof import(\"yargs\")} the Yargs instance",
          "     * @param classNames {String[]} array of class names, each of which is in the `packageName` package",
          "     * @param packageName {String} the name of the package to find each command class",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds commands to Yargs</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "yargs {typeof import(\"yargs\")} the Yargs instance",
            "paramName": "yargs",
            "description": " the Yargs instance",
            "type": "typeof import(\"yargs\")"
          },
          {
            "name": "@param",
            "body": "classNames {String[]} array of class names, each of which is in the <code>packageName</code> package",
            "paramName": "classNames",
            "description": " array of class names, each of which is in the <code>packageName</code> package",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "packageName {String} the name of the package to find each command class",
            "paramName": "packageName",
            "description": " the name of the package to find each command class",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 691,
          "column": 4,
          "index": 21146
        },
        "end": {
          "line": 711,
          "column": 5,
          "index": 21733
        }
      },
      "type": "function",
      "params": [
        {
          "name": "yargs",
          "type": "typeof import(\"yargs\")"
        },
        {
          "name": "classNames",
          "type": "String[]"
        },
        {
          "name": "packageName",
          "type": "string"
        }
      ],
      "appearsIn": []
    }
  }
}