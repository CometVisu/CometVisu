{
  "version": 0.3,
  "lastModified": 1717235172682,
  "lastModifiedIso": "2024-06-01T09:46:12.682Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/tool/utils/Utils.js",
  "type": "class",
  "location": {
    "start": {
      "line": 31,
      "column": 0,
      "index": 757
    },
    "end": {
      "line": 606,
      "column": 3,
      "index": 16255
    }
  },
  "className": "qx.tool.utils.Utils",
  "jsdoc": {
    "raw": [
      "*",
      " * Utility methods",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Utility methods</p>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "statics": {
    "newExternalPromise": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates a Promise which can be resolved/rejected externally - it has",
          "     * the resolve/reject methods as properties",
          "     *",
          "     * @returns {Promise} a promise",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a Promise which can be resolved/rejected externally - it has\n the resolve/reject methods as properties</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise} a promise",
            "type": "Promise<any>",
            "description": "a promise"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 41,
          "column": 4,
          "index": 1025
        },
        "end": {
          "line": 51,
          "column": 5,
          "index": 1297
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Promise<any>"
      },
      "appearsIn": []
    },
    "promisifyThis": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1304
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 1693
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fn"
        },
        {
          "name": "self"
        },
        {
          "name": "...args"
        }
      ],
      "appearsIn": []
    },
    "UserError": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Error that can be thrown to indicate wrong user input  and which doesn't",
          "     * need a stack trace",
          "     *",
          "     * @type {new (message: string) => Error}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Error that can be thrown to indicate wrong user input  and which doesn't\n need a stack trace</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{new (message: string) => Error}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1875
        },
        "end": {
          "line": 83,
          "column": 5,
          "index": 2034
        }
      },
      "appearsIn": []
    },
    "formatTime": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Formats the time in a human readable format, eg \"1h 23m 45.678s\"",
          "     *",
          "     * @param {number} millisec",
          "     * @returns {string} formatted string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formats the time in a human readable format, eg \"1h 23m 45.678s\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{number} millisec",
            "paramName": "millisec",
            "description": "",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{string} formatted string",
            "type": "string",
            "description": "formatted string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2210
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 2930
        }
      },
      "type": "function",
      "params": [
        {
          "name": "millisec",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "mkpath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates a dir",
          "     * @param dir",
          "     * @param cb",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a dir</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dir",
            "paramName": "dir",
            "type": ""
          },
          {
            "name": "@param",
            "body": "cb",
            "paramName": "cb",
            "type": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3009
        },
        "end": {
          "line": 166,
          "column": 5,
          "index": 4221
        }
      },
      "type": "function",
      "params": [
        {
          "name": "dir"
        },
        {
          "name": "cb"
        }
      ],
      "appearsIn": []
    },
    "mkParentPath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates the parent directory of a filename, if it does not already exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the parent directory of a filename, if it does not already exist</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 171,
          "column": 4,
          "index": 4324
        },
        "end": {
          "line": 179,
          "column": 5,
          "index": 4538
        }
      },
      "type": "function",
      "params": [
        {
          "name": "dir"
        },
        {
          "name": "cb"
        }
      ],
      "appearsIn": []
    },
    "makeParentDir": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates the parent directory of a filename, if it does not already exist",
          "     *",
          "     * @param {string} filename the filename to create the parent directory of",
          "     *",
          "     * @return {Promise?} the value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the parent directory of a filename, if it does not already exist</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} filename the filename to create the parent directory of",
            "paramName": "filename",
            "description": "the filename to create the parent directory of",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise?} the value",
            "type": "Promise?",
            "description": "the value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 4770
        },
        "end": {
          "line": 191,
          "column": 5,
          "index": 4906
        }
      },
      "type": "function",
      "params": [
        {
          "name": "filename",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Promise?"
      },
      "appearsIn": []
    },
    "makeDirs": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates a directory, if it does not exist, including all intermediate paths",
          "     *",
          "     * @param {string} filename the directory to create",
          "     *",
          "     * @return {Promise?} the value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a directory, if it does not exist, including all intermediate paths</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{string} filename the directory to create",
            "paramName": "filename",
            "description": "the directory to create",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise?} the value",
            "type": "Promise?",
            "description": "the value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5118
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 5220
        }
      },
      "type": "function",
      "params": [
        {
          "name": "filename",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Promise?"
      },
      "appearsIn": []
    },
    "LineCountingTransform": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Writable stream that keeps track of what the current line number is",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writable stream that keeps track of what the current line number is</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 208,
          "column": 4,
          "index": 5318
        },
        "end": {
          "line": 208,
          "column": 31,
          "index": 5345
        }
      },
      "appearsIn": []
    },
    "StripSourceMapTransform": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Writable stream that strips out sourceMappingURL comments",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writable stream that strips out sourceMappingURL comments</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 213,
          "column": 4,
          "index": 5433
        },
        "end": {
          "line": 213,
          "column": 33,
          "index": 5462
        }
      },
      "appearsIn": []
    },
    "ToStringWriteStream": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Writable stream that keeps track of what's been written and can return",
          "     * a copy as a string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writable stream that keeps track of what's been written and can return\n a copy as a string</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 219,
          "column": 4,
          "index": 5589
        },
        "end": {
          "line": 219,
          "column": 29,
          "index": 5614
        }
      },
      "appearsIn": []
    },
    "isPlainObject": {
      "jsdoc": {
        "raw": [
          "  Function to test if an object is a plain object, i.e. is constructed",
          "     **  by the built-in Object constructor and inherits directly from Object.prototype",
          "     **  or null. Some built-in objects pass the test, e.g. Math which is a plain object",
          "     **  and some host or exotic objects may pass also.",
          "     **",
          "     **  @param {} obj - value to test",
          "     **  @returns {Boolean} true if passes tests, false otherwise",
          "     *",
          "     * @see https://stackoverflow.com/a/5878101/2979698",
          "     "
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 231,
          "column": 4,
          "index": 6115
        },
        "end": {
          "line": 247,
          "column": 5,
          "index": 6730
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj"
        }
      ],
      "appearsIn": []
    },
    "runCommand": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Runs the given command and returns an object containing information on the",
          "     * `exitCode`, the `output`, potential `error`s, and additional `messages`.",
          "     * @param {String} cwd The current working directory",
          "     * @param {String} args One or more command line arguments, including the",
          "     * command itself",
          "     * @return {{exitCode: Number, output: String, error: *, messages: *}}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Runs the given command and returns an object containing information on the\n <code>exitCode</code>, the <code>output</code>, potential <code>error</code>s, and additional <code>messages</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} cwd The current working directory",
            "paramName": "cwd",
            "description": "The current working directory",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{String} args One or more command line arguments, including the\n command itself",
            "paramName": "args",
            "description": "One or more command line arguments, including the\n command itself",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{{exitCode: Number, output: String, error: *, messages: *}}",
            "type": "{exitCode: Number, output: String, error: *, messages: *}",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 257,
          "column": 4,
          "index": 7147
        },
        "end": {
          "line": 325,
          "column": 5,
          "index": 8854
        }
      },
      "type": "function",
      "params": [
        {
          "name": "cwd",
          "type": "string"
        },
        {
          "name": "...args"
        }
      ],
      "returnType": {
        "type": "{exitCode: Number, output: String, error: *, messages: *}"
      },
      "appearsIn": []
    },
    "run": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Awaitable wrapper around child_process.spawn.",
          "     * Runs a command in a separate process. The output of the command",
          "     * is ignored. Throws when the exit code is not 0.",
          "     * @param  {String} cmd Name of the command",
          "     * @param  {Array} args Array of arguments to the command",
          "     * @return {Promise<Number>} A promise that resolves with the exit code",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Awaitable wrapper around child_process.spawn.\n Runs a command in a separate process. The output of the command\n is ignored. Throws when the exit code is not 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} cmd Name of the command",
            "paramName": "cmd",
            "description": "Name of the command",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{Array} args Array of arguments to the command",
            "paramName": "args",
            "description": "Array of arguments to the command",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<Number>} A promise that resolves with the exit code",
            "type": "Promise<Number>",
            "description": "A promise that resolves with the exit code"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 335,
          "column": 4,
          "index": 9242
        },
        "end": {
          "line": 358,
          "column": 5,
          "index": 10036
        }
      },
      "type": "function",
      "params": [
        {
          "name": "cmd",
          "type": "string"
        },
        {
          "name": "args",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Promise<Number>"
      },
      "appearsIn": []
    },
    "exec": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Awaitable wrapper around child_process.exec",
          "     * Executes a command and return its result wrapped in a Promise.",
          "     * @param cmd {String} Command with all parameters",
          "     * @return {Promise<String>} Promise that resolves with the result",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Awaitable wrapper around child_process.exec\n Executes a command and return its result wrapped in a Promise.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cmd {String} Command with all parameters",
            "paramName": "cmd",
            "description": " Command with all parameters",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Promise<String>} Promise that resolves with the result",
            "type": "Promise<String>",
            "description": "Promise that resolves with the result"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 366,
          "column": 4,
          "index": 10306
        },
        "end": {
          "line": 378,
          "column": 5,
          "index": 10612
        }
      },
      "type": "function",
      "params": [
        {
          "name": "cmd",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Promise<String>"
      },
      "appearsIn": []
    },
    "parseCommand": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Parses a command line and separates them out into an array that can be given to `child_process.spawn` etc",
          "     *",
          "     * @param {String} cmd",
          "     * @returns {String[]}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Parses a command line and separates them out into an array that can be given to <code>child_process.spawn</code> etc</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} cmd",
            "paramName": "cmd",
            "description": "",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]}",
            "type": "String[]",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 386,
          "column": 4,
          "index": 10809
        },
        "end": {
          "line": 426,
          "column": 5,
          "index": 11721
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str"
        }
      ],
      "returnType": {
        "type": "String[]"
      },
      "appearsIn": []
    },
    "quoteCommand": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Quotes special characters in the argument array, ensuring that they are safe to pass to the command line",
          "     *",
          "     * @param {String[]} cmd",
          "     * @returns {String[]}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Quotes special characters in the argument array, ensuring that they are safe to pass to the command line</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String[]} cmd",
            "paramName": "cmd",
            "description": "",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]}",
            "type": "String[]",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 434,
          "column": 4,
          "index": 11919
        },
        "end": {
          "line": 455,
          "column": 5,
          "index": 12524
        }
      },
      "type": "function",
      "params": [
        {
          "name": "cmd",
          "type": "String[]"
        }
      ],
      "returnType": {
        "type": "String[]"
      },
      "appearsIn": []
    },
    "formatCommand": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reformats a command line",
          "     *",
          "     * @param {String} cmd",
          "     * @returns {String}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reformats a command line</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} cmd",
            "paramName": "cmd",
            "description": "",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "string",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 463,
          "column": 4,
          "index": 12638
        },
        "end": {
          "line": 465,
          "column": 5,
          "index": 12726
        }
      },
      "type": "function",
      "params": [
        {
          "name": "cmd",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "killTree": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Kills a process tree",
          "     *",
          "     * @param {Number} parentId parent process ID to kill",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Kills a process tree</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{Number} parentId parent process ID to kill",
            "paramName": "parentId",
            "description": "parent process ID to kill",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 472,
          "column": 4,
          "index": 12842
        },
        "end": {
          "line": 494,
          "column": 5,
          "index": 13382
        }
      },
      "type": "function",
      "params": [
        {
          "name": "parentId",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "getTemplateDir": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the absolute path to the template directory",
          "     * @return {String}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the absolute path to the template directory</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "string",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 499,
          "column": 4,
          "index": 13488
        },
        "end": {
          "line": 506,
          "column": 5,
          "index": 13681
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "isExplicitArg": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the command line explicit set an option (as opposed to yargs",
          "     * providing a default value).  Note that this does not handle aliases, use the",
          "     * actual, full option name.",
          "     *",
          "     * @param option {String} the name of the option, eg \"listen-port\"",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the command line explicit set an option (as opposed to yargs\n providing a default value).  Note that this does not handle aliases, use the\n actual, full option name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "option {String} the name of the option, eg \"listen-port\"",
            "paramName": "option",
            "description": " the name of the option, eg \"listen-port\"",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 516,
          "column": 4,
          "index": 14008
        },
        "end": {
          "line": 521,
          "column": 5,
          "index": 14214
        }
      },
      "type": "function",
      "params": [
        {
          "name": "option",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}