{
  "version": 0.3,
  "lastModified": 1735222259178,
  "lastModifiedIso": "2024-12-26T14:10:59.178Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/Mixin.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 30,
      "column": 0,
      "index": 859
    },
    "end": {
      "line": 550,
      "column": 3,
      "index": 16833
    }
  },
  "className": "qx.Mixin",
  "jsdoc": {
    "raw": [
      "*",
      " * This class is used to define mixins (similar to mixins in Ruby).",
      " *",
      " * Mixins are collections of code and variables, which can be merged into",
      " * other classes. They are similar to classes but don't support inheritance.",
      " *",
      " * See the description of the {@link #define} method how a mixin is defined.",
      " *",
      " * @require(qx.lang.normalize.Array)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This class is used to define mixins (similar to mixins in Ruby).\n Mixins are collections of code and variables, which can be merged into\n other classes. They are similar to classes but don't support inheritance.\n See the description of the {@link #define} method how a mixin is defined.</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.lang.normalize.Array"
      }
    ]
  },
  "statics": {
    "define": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Define a new mixin.",
          "     *",
          "     * Example:",
          "     * <pre class='javascript'>",
          "     * qx.Mixin.define(\"name\",",
          "     * {",
          "     *   include: [SuperMixins],",
          "     *",
          "     *   properties: {",
          "     *     tabIndex: {type: \"number\", init: -1}",
          "     *   },",
          "     *",
          "     *   members:",
          "     *   {",
          "     *     prop1: \"foo\",",
          "     *     meth1: function() {},",
          "     *     meth2: function() {}",
          "     *   }",
          "     * });",
          "     * </pre>",
          "     *",
          "     * @param name {String} name of the mixin",
          "     * @param config {Map ? null} Mixin definition structure. The configuration map has the following keys:",
          "     *   <table>",
          "     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>",
          "     *     <tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each",
          "     *         class including this mixin. The constructor takes no parameters.</td></tr>",
          "     *     <tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>",
          "     *     <tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>",
          "     *     <tr><th>statics</th><td>Map</td><td>",
          "     *         Map of statics of the mixin. The statics will not get copied into the target class. They remain",
          "     *         accessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).",
          "     *     </td></tr>",
          "     *     <tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>",
          "     *     <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see",
          "     *           {@link qx.core.Property}.</td></tr>",
          "     *     <tr><th>events</th><td>Map</td><td>",
          "     *         Map of events the mixin fires. The keys are the names of the events and the values are",
          "     *         corresponding event type classes.",
          "     *     </td></tr>",
          "     *   </table>",
          "     *",
          "     * @return {qx.Mixin} The configured mixin",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Define a new mixin.\n Example:\n </p>\n<pre class='javascript'>\n qx.Mixin.define(\"name\",\n {\n   include: [SuperMixins],\n   properties: {\n     tabIndex: {type: \"number\", init: -1}\n   },\n   members:\n   {\n     prop1: \"foo\",\n     meth1: function() {},\n     meth2: function() {}\n   }\n });\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} name of the mixin",
            "paramName": "name",
            "description": " name of the mixin",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "config {Map ? null} Mixin definition structure. The configuration map has the following keys:\n   <table>\n     <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     <tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each\n         class including this mixin. The constructor takes no parameters.</td></tr>\n     <tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>\n     <tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>\n     <tr><th>statics</th><td>Map</td><td>\n         Map of statics of the mixin. The statics will not get copied into the target class. They remain\n         accessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).\n     </td></tr>\n     <tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>\n     <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n           {@link qx.core.Property}.</td></tr>\n     <tr><th>events</th><td>Map</td><td>\n         Map of events the mixin fires. The keys are the names of the events and the values are\n         corresponding event type classes.\n     </td></tr>\n   </table>",
            "paramName": "config",
            "description": " Mixin definition structure. The configuration map has the following keys:\n   <table>\n     <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     <tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each\n         class including this mixin. The constructor takes no parameters.</td></tr>\n     <tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>\n     <tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>\n     <tr><th>statics</th><td>Map</td><td>\n         Map of statics of the mixin. The statics will not get copied into the target class. They remain\n         accessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).\n     </td></tr>\n     <tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>\n     <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n           {@link qx.core.Property}.</td></tr>\n     <tr><th>events</th><td>Map</td><td>\n         Map of events the mixin fires. The keys are the names of the events and the values are\n         corresponding event type classes.\n     </td></tr>\n   </table>",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Mixin} The configured mixin",
            "type": "qx.Mixin",
            "description": "The configured mixin"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 3066
        },
        "end": {
          "line": 164,
          "column": 5,
          "index": 5235
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "config",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.Mixin"
      },
      "appearsIn": []
    },
    "checkCompatibility": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Check compatibility between mixins (including their includes)",
          "     *",
          "     * @param mixins {Mixin[]} an array of mixins",
          "     * @throws {Error} when there is a conflict between the mixins",
          "     * @return {Boolean} <code>true</code> if the mixin passed the compatibility check",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check compatibility between mixins (including their includes)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mixins {Mixin[]} an array of mixins",
            "paramName": "mixins",
            "description": " an array of mixins",
            "type": "Mixin[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when there is a conflict between the mixins",
            "type": "Error",
            "description": " when there is a conflict between the mixins"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the mixin passed the compatibility check",
            "type": "boolean",
            "description": "<code>true</code> if the mixin passed the compatibility check"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 5538
        },
        "end": {
          "line": 239,
          "column": 5,
          "index": 7037
        }
      },
      "type": "function",
      "params": [
        {
          "name": "mixins",
          "type": "Mixin[]"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isCompatible": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if a class is compatible to the given mixin (no conflicts)",
          "     *",
          "     * @param mixin {Mixin} mixin to check",
          "     * @param clazz {Class} class to check",
          "     * @throws {Error} when the given mixin is incompatible to the class",
          "     * @return {Boolean} true if the mixin is compatible to the given class",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if a class is compatible to the given mixin (no conflicts)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mixin {Mixin} mixin to check",
            "paramName": "mixin",
            "description": " mixin to check",
            "type": "qx.Mixin"
          },
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when the given mixin is incompatible to the class",
            "type": "Error",
            "description": " when the given mixin is incompatible to the class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the mixin is compatible to the given class",
            "type": "boolean",
            "description": "true if the mixin is compatible to the given class"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 249,
          "column": 4,
          "index": 7375
        },
        "end": {
          "line": 253,
          "column": 5,
          "index": 7531
        }
      },
      "type": "function",
      "params": [
        {
          "name": "mixin",
          "type": "qx.Mixin"
        },
        {
          "name": "clazz",
          "type": "qx.Class"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getByName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a mixin by name",
          "     *",
          "     * @param name {String} class name to resolve",
          "     * @return {Class} the class",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a mixin by name</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} class name to resolve",
            "paramName": "name",
            "description": " class name to resolve",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class} the class",
            "type": "qx.Class",
            "description": "the class"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 7675
        },
        "end": {
          "line": 263,
          "column": 5,
          "index": 7734
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.Class"
      },
      "appearsIn": []
    },
    "isDefined": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Determine if mixin exists",
          "     *",
          "     * @param name {String} mixin name to check",
          "     * @return {Boolean} true if mixin exists",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determine if mixin exists</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} mixin name to check",
            "paramName": "name",
            "description": " mixin name to check",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if mixin exists",
            "type": "boolean",
            "description": "true if mixin exists"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 7891
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 7963
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getTotalNumber": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Determine the number of mixins which are defined",
          "     *",
          "     * @return {Number} the number of mixins",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determine the number of mixins which are defined</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the number of mixins",
            "type": "number",
            "description": "the number of mixins"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 8094
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 8178
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "flatten": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Generates a list of all mixins given plus all the",
          "     * mixins these includes plus... (deep)",
          "     *",
          "     * @param mixins {Mixin[] ? []} List of mixins",
          "     * @return {Array} List of all mixins",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Generates a list of all mixins given plus all the\n mixins these includes plus… (deep)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mixins {Mixin[] ? []} List of mixins",
            "paramName": "mixins",
            "description": " List of mixins",
            "optional": true,
            "defaultValue": "[]",
            "type": "Mixin[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of all mixins",
            "type": "Array<any>",
            "description": "List of all mixins"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 8402
        },
        "end": {
          "line": 306,
          "column": 5,
          "index": 8778
        }
      },
      "type": "function",
      "params": [
        {
          "name": "mixins",
          "type": "Mixin[]",
          "optional": true,
          "defaultValue": "[]"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "baseClassMethod": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method is used to determine the base method to call at runtime, and is used",
          "     * by Mixins where the mixin method calls `this.base()`.  It is only required by the",
          "     * compiler, and not the generator.",
          "     *",
          "     * The problem is that while Mixin's cannot override the same methods in a single class,",
          "     * they can override methods that were implemented in a base base - but the compiler",
          "     * cannot emit compile-time code which knows the base class method because that depends",
          "     * on the class that the mixin is mixed-into.",
          "     *",
          "     * This method will search the hierarchy of the class at runtime, and figure out the",
          "     * nearest superclass method to call; the result is cached, and it is acceptable for",
          "     * a mixin's method to override a method mixed into a superclass.",
          "     *",
          "     * Technically, this method should be private - it is internal and no notification will",
          "     * be given if the API changes.  However, because it needs to be called by generated code",
          "     * in any class, it has to appear as public.  Do not use it directly.",
          "     *",
          "     * @param clazz {Class} the class that is to be examined",
          "     * @param mixin {Mixin} the mixin that is calling `this.base`",
          "     * @param methodName {String} the name of the method in `mixin` that is calling `this.base`",
          "     * @return {Function} the base class function to call",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is used to determine the base method to call at runtime, and is used\n by Mixins where the mixin method calls <code>this.base()</code>.  It is only required by the\n compiler, and not the generator.\n The problem is that while Mixin's cannot override the same methods in a single class,\n they can override methods that were implemented in a base base - but the compiler\n cannot emit compile-time code which knows the base class method because that depends\n on the class that the mixin is mixed-into.\n This method will search the hierarchy of the class at runtime, and figure out the\n nearest superclass method to call; the result is cached, and it is acceptable for\n a mixin's method to override a method mixed into a superclass.\n Technically, this method should be private - it is internal and no notification will\n be given if the API changes.  However, because it needs to be called by generated code\n in any class, it has to appear as public.  Do not use it directly.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} the class that is to be examined",
            "paramName": "clazz",
            "description": " the class that is to be examined",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "mixin {Mixin} the mixin that is calling <code>this.base</code>",
            "paramName": "mixin",
            "description": " the mixin that is calling <code>this.base</code>",
            "type": "qx.Mixin"
          },
          {
            "name": "@param",
            "body": "methodName {String} the name of the method in <code>mixin</code> that is calling <code>this.base</code>",
            "paramName": "methodName",
            "description": " the name of the method in <code>mixin</code> that is calling <code>this.base</code>",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the base class function to call",
            "type": "((...args: any[]) => any)",
            "description": "the base class function to call"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 331,
          "column": 4,
          "index": 10159
        },
        "end": {
          "line": 414,
          "column": 5,
          "index": 13044
        }
      },
      "type": "function",
      "params": [
        {
          "name": "clazz",
          "type": "qx.Class"
        },
        {
          "name": "mixin",
          "type": "qx.Mixin"
        },
        {
          "name": "methodName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "((...args: any[]) => any)"
      },
      "appearsIn": []
    },
    "genericToString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method will be attached to all mixins to return",
          "     * a nice identifier for them.",
          "     *",
          "     * @internal",
          "     * @return {String} The mixin identifier",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method will be attached to all mixins to return\n a nice identifier for them.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The mixin identifier",
            "type": "string",
            "description": "The mixin identifier"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 429,
          "column": 4,
          "index": 13434
        },
        "end": {
          "line": 431,
          "column": 5,
          "index": 13501
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "$$registry": {
      "jsdoc": {
        "raw": [
          "* Registers all defined mixins "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers all defined mixins</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 434,
          "column": 4,
          "index": 13548
        },
        "end": {
          "line": 434,
          "column": 18,
          "index": 13562
        }
      },
      "appearsIn": []
    },
    "__allowedKeys": {
      "jsdoc": {
        "raw": [
          "* @type {Map} allowed keys in mixin definition "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} allowed keys in mixin definition"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 437,
          "column": 4,
          "index": 13625
        },
        "end": {
          "line": 450,
          "column": 6,
          "index": 14033
        }
      },
      "appearsIn": []
    },
    "__validateConfig": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Validates incoming configuration and checks keys and values",
          "     *",
          "     * @signature function(name, config)",
          "     * @param name {String} The name of the class",
          "     * @param config {Map} Configuration map",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates incoming configuration and checks keys and values</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(name, config)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the class",
            "paramName": "name",
            "description": " The name of the class",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "config {Map} Configuration map",
            "paramName": "config",
            "description": " Configuration map",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 459,
          "column": 4,
          "index": 14266
        },
        "end": {
          "line": 548,
          "column": 6,
          "index": 16825
        }
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}