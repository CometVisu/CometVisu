{
  "version": 0.3,
  "lastModified": 1729101022896,
  "lastModifiedIso": "2024-10-16T17:50:22.896Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/RadioButton.js",
  "type": "class",
  "location": {
    "start": {
      "line": 39,
      "column": 0,
      "index": 1103
    },
    "end": {
      "line": 209,
      "column": 3,
      "index": 5447
    }
  },
  "className": "qx.ui.form.RadioButton",
  "jsdoc": {
    "raw": [
      "*",
      " * Radio buttons can be used in radio groups to allow to the user to select",
      " * exactly one item from a list. Radio groups are established by adding",
      " * radio buttons to a radio manager {@link qx.ui.form.RadioGroup}.",
      " *",
      " * Example:",
      " * <pre class=\"javascript\">",
      " *   var container = new qx.ui.container.Composite(new qx.ui.layout.VBox);",
      " *",
      " *   var female = new qx.ui.form.RadioButton(\"female\");",
      " *   var male = new qx.ui.form.RadioButton(\"male\");",
      " *",
      " *   var mgr = new qx.ui.form.RadioGroup();",
      " *   mgr.add(female, male);",
      " *",
      " *   container.add(male);",
      " *   container.add(female);",
      " * </pre>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Radio buttons can be used in radio groups to allow to the user to select\n exactly one item from a list. Radio groups are established by adding\n radio buttons to a radio manager {@link qx.ui.form.RadioGroup}.\n Example:\n </p>\n<pre class=\"javascript\">\n   var container = new qx.ui.container.Composite(new qx.ui.layout.VBox);\n   var female = new qx.ui.form.RadioButton(\"female\");\n   var male = new qx.ui.form.RadioButton(\"male\");\n   var mgr = new qx.ui.form.RadioGroup();\n   mgr.add(female, male);\n   container.add(male);\n   container.add(female);\n </pre>"
      }
    ]
  },
  "superClass": "qx.ui.form.Button",
  "mixins": [
    "qx.ui.form.MForm",
    "qx.ui.form.MModelProperty"
  ],
  "interfaces": [
    "qx.ui.form.IRadioItem",
    "qx.ui.form.IForm",
    "qx.ui.form.IBooleanForm",
    "qx.ui.form.IModel"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "label"
      }
    ],
    "location": {
      "start": {
        "line": 59,
        "column": 2,
        "index": 1630
      },
      "end": {
        "line": 75,
        "column": 3,
        "index": 2151
      }
    }
  },
  "properties": {
    "group": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2462
        },
        "end": {
          "line": 89,
          "column": 5,
          "index": 2563
        }
      },
      "json": {
        "check": "qx.ui.form.RadioGroup",
        "nullable": true,
        "apply": "_applyGroup"
      },
      "jsdoc": {
        "raw": [
          "* The assigned qx.ui.form.RadioGroup which handles the switching between registered buttons "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The assigned qx.ui.form.RadioGroup which handles the switching between registered buttons</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "value": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2638
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2772
        }
      },
      "json": {
        "check": "Boolean",
        "nullable": true,
        "event": "changeValue",
        "apply": "_applyValue",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "* The value of the widget. True, if the widget is checked. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The value of the widget. True, if the widget is checked.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "appearance": {
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2797
        },
        "end": {
          "line": 104,
          "column": 5,
          "index": 2862
        }
      },
      "json": {
        "refine": true,
        "init": "radiobutton"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.form.Button",
        "qx.ui.basic.Atom",
        "qx.ui.core.Widget"
      ]
    },
    "allowGrowX": {
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 2887
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 2944
        }
      },
      "json": {
        "refine": true,
        "init": false
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "valid": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 956
        },
        "end": {
          "line": 43,
          "column": 5,
          "index": 1067
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyValid",
        "event": "changeValid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is valid. If a widget is invalid, an invalid",
          "     * state will be set.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is valid. If a widget is invalid, an invalid\n state will be set.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "required": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1137
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeRequired"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is required.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1325
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1447
        }
      },
      "json": {
        "nullable": true,
        "check": "String",
        "event": "changeInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an tooltip if the widget is invalid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an tooltip if the widget is invalid.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 1575
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 1695
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeRequiredInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an invalid tooltip if the {@link #required} is",
          "     * set to true.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an invalid tooltip if the {@link #required} is\n set to true.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "model": {
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1367
        },
        "end": {
          "line": 45,
          "column": 5,
          "index": 1483
        }
      },
      "json": {
        "nullable": true,
        "event": "changeModel",
        "apply": "_applyModel",
        "dereference": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Model property for storing additional information for the including",
          "     * object. It can act as value property on form items for example.",
          "     *",
          "     * Be careful using that property as this is used for the",
          "     * {@link qx.ui.form.MModelSelection} it has some restrictions:",
          "     *",
          "     * * Don't use equal models in one widget using the",
          "     *     {@link qx.ui.form.MModelSelection}.",
          "     *",
          "     * * Avoid setting only some model properties if the widgets are added to",
          "     *     a {@link qx.ui.form.MModelSelection} widget.",
          "     *",
          "     * Both restrictions result of the fact, that the set models are deputies",
          "     * for their widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Model property for storing additional information for the including\n object. It can act as value property on form items for example.\n Be careful using that property as this is used for the\n {@link qx.ui.form.MModelSelection} it has some restrictions:</p>\n<ul>\n<li>Don't use equal models in one widget using the\n {@link qx.ui.form.MModelSelection}.</li>\n<li>Avoid setting only some model properties if the widgets are added to\n a {@link qx.ui.form.MModelSelection} widget.\nBoth restrictions result of the fact, that the set models are deputies\nfor their widget.</li>\n</ul>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MModelProperty"
      ],
      "mixin": "qx.ui.form.MModelProperty"
    }
  },
  "members": {
    "_forwardStates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @lint ignoreReferenceField(_forwardStates)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3289
        },
        "end": {
          "line": 129,
          "column": 5,
          "index": 3395
        }
      },
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button",
        "qx.ui.basic.Atom",
        "qx.ui.core.Widget"
      ]
    },
    "_bindableProperties": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @lint ignoreReferenceField(_bindableProperties)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_bindableProperties)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 3546
        },
        "end": {
          "line": 135,
          "column": 77,
          "index": 3619
        }
      },
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button",
        "qx.ui.core.MExecutable"
      ]
    },
    "_applyValue": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 3844
        },
        "end": {
          "line": 147,
          "column": 5,
          "index": 4022
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyGroup": {
      "jsdoc": {
        "raw": [
          "* The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4138
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4273
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_onExecute": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for the \"execute\" event.",
          "     *",
          "     * Sets the property \"checked\" to true.",
          "     *",
          "     * @param e {qx.event.type.Event} execute event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for the \"execute\" event.\n Sets the property \"checked\" to true.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} execute event",
            "paramName": "e",
            "description": " execute event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 4648
        },
        "end": {
          "line": 180,
          "column": 5,
          "index": 4831
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "_onKeyPress": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for the \"keyPress\" event.",
          "     *",
          "     * Selects the previous RadioButton when pressing \"Left\" or \"Up\" and",
          "     * Selects the next RadioButton when pressing \"Right\" and \"Down\"",
          "     *",
          "     * @param e {qx.event.type.KeySequence} KeyPress event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for the \"keyPress\" event.\n Selects the previous RadioButton when pressing \"Left\" or \"Up\" and\n Selects the next RadioButton when pressing \"Right\" and \"Down\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} KeyPress event",
            "paramName": "e",
            "description": " KeyPress event",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 190,
          "column": 4,
          "index": 5117
        },
        "end": {
          "line": 207,
          "column": 5,
          "index": 5439
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.KeySequence"
        }
      ],
      "appearsIn": []
    },
    "_applyValid": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1739
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 1840
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "__onChangeLocale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Locale change event handler",
          "     *",
          "     * @signature function(e)",
          "     * @param e {Event} the change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locale change event handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event",
            "paramName": "e",
            "description": " the change event",
            "type": "Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 1976
        },
        "end": {
          "line": 102,
          "column": 6,
          "index": 2570
        }
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "_applyModel": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1527
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1588
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MModelProperty"
      ],
      "mixin": "qx.ui.form.MModelProperty"
    }
  },
  "statics": {}
}