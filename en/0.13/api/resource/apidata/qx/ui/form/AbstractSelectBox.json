{
  "version": 0.3,
  "lastModified": 1729101019740,
  "lastModifiedIso": "2024-10-16T17:50:19.740Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/AbstractSelectBox.js",
  "type": "class",
  "location": {
    "start": {
      "line": 29,
      "column": 0,
      "index": 835
    },
    "end": {
      "line": 385,
      "column": 3,
      "index": 10293
    }
  },
  "className": "qx.ui.form.AbstractSelectBox",
  "jsdoc": {
    "raw": [
      "*",
      " * Basic class for a selectbox like lists. Basically supports a popup",
      " * with a list and the whole children management.",
      " *",
      " * @childControl list {qx.ui.form.List} list component of the selectbox",
      " * @childControl popup {qx.ui.popup.Popup} popup which shows the list",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Basic class for a selectbox like lists. Basically supports a popup\n with a list and the whole children management.</p>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "list {qx.ui.form.List} list component of the selectbox"
      },
      {
        "name": "@childControl",
        "body": "popup {qx.ui.popup.Popup} popup which shows the list"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.MRemoteChildrenHandling",
    "qx.ui.form.MForm"
  ],
  "interfaces": [
    "qx.ui.form.IForm"
  ],
  "isSingleton": false,
  "abstract": true,
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 43,
        "column": 2,
        "index": 1227
      },
      "end": {
        "line": 63,
        "column": 3,
        "index": 1824
      }
    }
  },
  "properties": {
    "focusable": {
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 2052
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 2107
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "width": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2132
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2182
        }
      },
      "json": {
        "refine": true,
        "init": 120
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "maxListHeight": {
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2339
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2458
        }
      },
      "json": {
        "check": "Number",
        "apply": "_applyMaxListHeight",
        "nullable": true,
        "init": 200
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The maximum height of the list popup. Setting this value to",
          "     * <code>null</code> will set cause the list to be auto-sized.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The maximum height of the list popup. Setting this value to\n <code>null</code> will set cause the list to be auto-sized.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "format": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2621
        },
        "end": {
          "line": 105,
          "column": 5,
          "index": 2752
        }
      },
      "json": {
        "check": "Function",
        "init": "[[ ObjectMethod Function ]]",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Formatter which format the value from the selected <code>ListItem</code>.",
          "     * Uses the default formatter {@link #_defaultFormat}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formatter which format the value from the selected <code>ListItem</code>.\n Uses the default formatter {@link #_defaultFormat}.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "readOnly": {
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 2813
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 2934
        }
      },
      "json": {
        "check": "Boolean",
        "event": "changeReadOnly",
        "apply": "_applyReadOnly",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the field is read only",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the field is read only</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "valid": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 956
        },
        "end": {
          "line": 43,
          "column": 5,
          "index": 1067
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyValid",
        "event": "changeValid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is valid. If a widget is invalid, an invalid",
          "     * state will be set.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is valid. If a widget is invalid, an invalid\n state will be set.</p>"
          }
        ]
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    },
    "required": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1137
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeRequired"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is required.</p>"
          }
        ]
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1325
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1447
        }
      },
      "json": {
        "nullable": true,
        "check": "String",
        "event": "changeInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an tooltip if the widget is invalid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an tooltip if the widget is invalid.</p>"
          }
        ]
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 1575
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 1695
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeRequiredInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an invalid tooltip if the {@link #required} is",
          "     * set to true.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an invalid tooltip if the {@link #required} is\n set to true.</p>"
          }
        ]
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    }
  },
  "members": {
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3160
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 4856
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyMaxListHeight": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 5081
        },
        "end": {
          "line": 194,
          "column": 5,
          "index": 5176
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyReadOnly": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5183
        },
        "end": {
          "line": 198,
          "column": 5,
          "index": 5222
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getChildrenContainer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the list widget.",
          "     * @return {qx.ui.form.List} the list",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.List} the list",
            "type": "qx.ui.form.List",
            "description": "the list"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 206,
          "column": 8,
          "index": 5503
        },
        "end": {
          "line": 208,
          "column": 5,
          "index": 5576
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.form.List"
      },
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "open": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Shows the list popup.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shows the list popup.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 219,
          "column": 4,
          "index": 5826
        },
        "end": {
          "line": 224,
          "column": 5,
          "index": 5949
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "close": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Hides the list popup.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hides the list popup.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 229,
          "column": 4,
          "index": 6001
        },
        "end": {
          "line": 234,
          "column": 5,
          "index": 6141
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "toggle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Toggles the popup's visibility.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Toggles the popup's visibility.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 239,
          "column": 4,
          "index": 6203
        },
        "end": {
          "line": 246,
          "column": 5,
          "index": 6375
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_defaultFormat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the formatted label text from the <code>ListItem</code>.",
          "     * The formatter removes all HTML tags and converts all HTML entities",
          "     * to string characters when the rich property is <code>true</code>.",
          "     *",
          "     * @param item {qx.ui.form.IListItem} The list item to format.",
          "     * @return {String} The formatted text.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the formatted label text from the <code>ListItem</code>.\n The formatter removes all HTML tags and converts all HTML entities\n to string characters when the rich property is <code>true</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.IListItem} The list item to format.",
            "paramName": "item",
            "description": " The list item to format.",
            "type": "qx.ui.form.IListItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The formatted text.",
            "type": "string",
            "description": "The formatted text."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 262,
          "column": 4,
          "index": 6931
        },
        "end": {
          "line": 272,
          "column": 5,
          "index": 7227
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.form.IListItem"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "_onBlur": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the blur event of the current widget.",
          "     *",
          "     * @param e {qx.event.type.Focus} The blur event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the blur event of the current widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Focus} The blur event.",
            "paramName": "e",
            "description": " The blur event.",
            "type": "qx.event.type.Focus"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 285,
          "column": 4,
          "index": 7565
        },
        "end": {
          "line": 287,
          "column": 5,
          "index": 7603
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Focus"
        }
      ],
      "appearsIn": []
    },
    "_onKeyPress": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reacts on special keys and forwards other key events to the list widget.",
          "     *",
          "     * @param e {qx.event.type.KeySequence} Keypress event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reacts on special keys and forwards other key events to the list widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} Keypress event",
            "paramName": "e",
            "description": " Keypress event",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 294,
          "column": 4,
          "index": 7772
        },
        "end": {
          "line": 320,
          "column": 5,
          "index": 8461
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.KeySequence"
        }
      ],
      "appearsIn": []
    },
    "_onResize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates list minimum size.",
          "     *",
          "     * @param e {qx.event.type.Data} Data event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates list minimum size.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event",
            "paramName": "e",
            "description": " Data event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 327,
          "column": 4,
          "index": 8573
        },
        "end": {
          "line": 329,
          "column": 5,
          "index": 8661
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onListAddItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets ARIA attributes on the item",
          "     *",
          "     * @param e {qx.event.type.Data} Data Event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets ARIA attributes on the item</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data Event",
            "paramName": "e",
            "description": " Data Event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 336,
          "column": 4,
          "index": 8779
        },
        "end": {
          "line": 346,
          "column": 5,
          "index": 9273
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onListChangeSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Syncs the own property from the list change",
          "     *",
          "     * @param e {qx.event.type.Data} Data Event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Syncs the own property from the list change</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data Event",
            "paramName": "e",
            "description": " Data Event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 353,
          "column": 4,
          "index": 9402
        },
        "end": {
          "line": 355,
          "column": 5,
          "index": 9503
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "__onListPointerDownImpl": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 357,
          "column": 4,
          "index": 9510
        },
        "end": {
          "line": 362,
          "column": 5,
          "index": 9634
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "appearsIn": []
    },
    "_onListPointerDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Redirects pointerdown event from the list to this widget.",
          "     *",
          "     * @param e {qx.event.type.Pointer} Pointer Event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Redirects pointerdown event from the list to this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer Event",
            "paramName": "e",
            "description": " Pointer Event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 368,
          "column": 4,
          "index": 9782
        },
        "end": {
          "line": 370,
          "column": 5,
          "index": 9875
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onPopupChangeVisibility": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Redirects changeVisibility event from the list to this widget.",
          "     *",
          "     * @param e {qx.event.type.Data} Property change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Redirects changeVisibility event from the list to this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Property change event",
            "paramName": "e",
            "description": " Property change event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 377,
          "column": 4,
          "index": 10034
        },
        "end": {
          "line": 383,
          "column": 5,
          "index": 10285
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "setEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the enabled state of the widget.",
          "     *",
          "     * @param enabled {Boolean} The enabled state.",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the enabled state of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "enabled {Boolean} The enabled state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1762
        },
        "end": {
          "line": 65,
          "column": 5,
          "index": 1825
        }
      },
      "type": "function",
      "params": [
        {
          "name": "enabled"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the current set enabled state.",
          "     *",
          "     * @return {Boolean} If the widget is enabled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the current set enabled state.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the widget is enabled."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 1951
        },
        "end": {
          "line": 72,
          "column": 19,
          "index": 1966
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "setRequired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the required state of a widget.",
          "     *",
          "     * @param required {Boolean} A flag signaling if the widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the required state of a widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "required {Boolean} A flag signaling if the widget is required."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2316
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2381
        }
      },
      "type": "function",
      "params": [
        {
          "name": "required"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getRequired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the current required state of the widget.",
          "     *",
          "     * @return {Boolean} True, if the widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the current required state of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} True, if the widget is required."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2525
        },
        "end": {
          "line": 94,
          "column": 20,
          "index": 2541
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "setValid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the valid state of the widget.",
          "     *",
          "     * @param valid {Boolean} The valid state of the widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the valid state of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "valid {Boolean} The valid state of the widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 2871
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 2930
        }
      },
      "type": "function",
      "params": [
        {
          "name": "valid"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getValid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the valid state of the widget.",
          "     *",
          "     * @return {Boolean} If the state of the widget is valid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the valid state of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the state of the widget is valid."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3068
        },
        "end": {
          "line": 116,
          "column": 17,
          "index": 3081
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "setInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the invalid message of the widget.",
          "     *",
          "     * @param message {String} The invalid message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the invalid message of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message {String} The invalid message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3416
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 3486
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the invalid message of the widget.",
          "     *",
          "     * @return {String} The current set message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the invalid message of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The current set message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3615
        },
        "end": {
          "line": 138,
          "column": 26,
          "index": 3637
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "setRequiredInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the invalid message if required of the widget.",
          "     *",
          "     * @param message {String} The invalid message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the invalid message if required of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message {String} The invalid message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 3993
        },
        "end": {
          "line": 153,
          "column": 5,
          "index": 4071
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getRequiredInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the invalid message if required of the widget.",
          "     *",
          "     * @return {String} The current set message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the invalid message if required of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The current set message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 4212
        },
        "end": {
          "line": 160,
          "column": 34,
          "index": 4242
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "__forward": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Forward the call with the given function name to the children container",
          "     *",
          "     * @param functionName {String} name of the method to forward",
          "     * @param a1 {var?} first argument of the method to call",
          "     * @param a2 {var?} second argument of the method to call",
          "     * @param a3 {var?} third argument of the method to call",
          "     * @return {var} The return value of the forward method",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Forward the call with the given function name to the children container</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "functionName {String} name of the method to forward",
            "paramName": "functionName",
            "description": " name of the method to forward",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "a1 {var?} first argument of the method to call",
            "paramName": "a1",
            "description": " first argument of the method to call",
            "optional": true,
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a2 {var?} second argument of the method to call",
            "paramName": "a2",
            "description": " second argument of the method to call",
            "optional": true,
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a3 {var?} third argument of the method to call",
            "paramName": "a3",
            "description": " third argument of the method to call",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The return value of the forward method",
            "type": "var",
            "description": "The return value of the forward method"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1555
        },
        "end": {
          "line": 51,
          "column": 5,
          "index": 1782
        }
      },
      "type": "function",
      "params": [
        {
          "name": "functionName",
          "type": "string"
        },
        {
          "name": "a1",
          "type": "var",
          "optional": true
        },
        {
          "name": "a2",
          "type": "var",
          "optional": true
        },
        {
          "name": "a3",
          "type": "var",
          "optional": true
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)",
            "type": "qx.ui.core.LayoutItem[]",
            "description": "The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1979
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 2044
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.LayoutItem[]"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "boolean",
            "description": "Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2200
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2265
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to add.",
          "     * @param options {Map?null} Optional layout data for item.",
          "     * @return {qx.ui.core.Widget} This object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to add.",
            "paramName": "child",
            "description": " the item to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "description": "This object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2752
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2831
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child item.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to remove",
          "     * @return {qx.ui.core.Widget} This object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to remove",
            "paramName": "child",
            "description": " the item to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "description": "This object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 3030
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3097
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     * @return {Array} An array containing the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children.",
            "type": "Array<any>",
            "description": "An array containing the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 3213
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 3274
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given item if it is",
          "     * a child item. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given item is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given item if it is\n a child item. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to query for",
            "paramName": "child",
            "description": " the item to query for",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given item is no child of this layout.",
            "type": "Integer",
            "description": "The index position or <code>-1</code> when\n   the given item is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3909
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3978
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param index {Integer} Index, at which the item will be inserted",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the item will be inserted",
            "paramName": "index",
            "description": " Index, at which the item will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4541
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 4631
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add an item before another already inserted item",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param before {qx.ui.core.LayoutItem} item before the new item will be inserted.",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an item before another already inserted item\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} item before the new item will be inserted.",
            "paramName": "before",
            "description": " item before the new item will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 5224
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 5324
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "before",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add an item after another already inserted item",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param after {qx.ui.core.LayoutItem} item, after which the new item will be inserted",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an item after another already inserted item\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} item, after which the new item will be inserted",
            "paramName": "after",
            "description": " item, after which the new item will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5920
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 6016
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "after",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the item at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the item to remove.",
          "     * @return {qx.ui.core.LayoutItem} The removed item",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the item at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to remove.",
            "paramName": "index",
            "description": " Index of the item to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item",
            "type": "qx.ui.core.LayoutItem",
            "description": "The removed item"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 6507
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 6578
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.LayoutItem"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "_applyValid": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1739
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 1840
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    },
    "__onChangeLocale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Locale change event handler",
          "     *",
          "     * @signature function(e)",
          "     * @param e {Event} the change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locale change event handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 1976
        },
        "end": {
          "line": 102,
          "column": 6,
          "index": 2570
        }
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    }
  },
  "statics": {}
}