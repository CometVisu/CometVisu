{
  "version": 0.3,
  "lastModified": 1735383688389,
  "lastModifiedIso": "2024-12-28T11:01:28.389Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/Slider.js",
  "type": "class",
  "location": {
    "start": {
      "line": 57,
      "column": 0,
      "index": 2150
    },
    "end": {
      "line": 1074,
      "column": 3,
      "index": 30146
    }
  },
  "className": "qx.ui.form.Slider",
  "jsdoc": {
    "raw": [
      "*",
      " * The Slider widget provides a vertical or horizontal slider.",
      " *",
      " * The Slider is the classic widget for controlling a bounded value.",
      " * It lets the user move a slider handle along a horizontal or vertical",
      " * groove and translates the handle's position into an integer value",
      " * within the defined range.",
      " *",
      " * The Slider has very few of its own functions.",
      " * The most useful functions are slideTo() to set the slider directly to some",
      " * value; setSingleStep(), setPageStep() to set the steps; and setMinimum()",
      " * and setMaximum() to define the range of the slider.",
      " *",
      " * A slider accepts focus on Tab and provides both a mouse wheel and",
      " * a keyboard interface. The keyboard interface is the following:",
      " *",
      " * * Left/Right move a horizontal slider by one single step.",
      " * * Up/Down move a vertical slider by one single step.",
      " * * PageUp moves up one page.",
      " * * PageDown moves down one page.",
      " * * Home moves to the start (minimum).",
      " * * End moves to the end (maximum).",
      " *",
      " * Here are the main properties of the class:",
      " *",
      " * # <code>value</code>: The bounded integer that {@link qx.ui.form.INumberForm}",
      " * maintains.",
      " * # <code>minimum</code>: The lowest possible value.",
      " * # <code>maximum</code>: The highest possible value.",
      " * # <code>singleStep</code>: The smaller of two natural steps that an abstract",
      " * sliders provides and typically corresponds to the user pressing an arrow key.",
      " * # <code>pageStep</code>: The larger of two natural steps that an abstract",
      " * slider provides and typically corresponds to the user pressing PageUp or",
      " * PageDown.",
      " *",
      " * @childControl knob {qx.ui.core.Widget} knob to set the value of the slider",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The Slider widget provides a vertical or horizontal slider.\n The Slider is the classic widget for controlling a bounded value.\n It lets the user move a slider handle along a horizontal or vertical\n groove and translates the handle's position into an integer value\n within the defined range.\n The Slider has very few of its own functions.\n The most useful functions are slideTo() to set the slider directly to some\n value; setSingleStep(), setPageStep() to set the steps; and setMinimum()\n and setMaximum() to define the range of the slider.\n A slider accepts focus on Tab and provides both a mouse wheel and\n a keyboard interface. The keyboard interface is the following:</p>\n<ul>\n<li>Left/Right move a horizontal slider by one single step.</li>\n<li>Up/Down move a vertical slider by one single step.</li>\n<li>PageUp moves up one page.</li>\n<li>PageDown moves down one page.</li>\n<li>Home moves to the start (minimum).</li>\n<li>End moves to the end (maximum).\nHere are the main properties of the class:\n# <code>value</code>: The bounded integer that {@link qx.ui.form.INumberForm}\nmaintains.\n# <code>minimum</code>: The lowest possible value.\n# <code>maximum</code>: The highest possible value.\n# <code>singleStep</code>: The smaller of two natural steps that an abstract\nsliders provides and typically corresponds to the user pressing an arrow key.\n# <code>pageStep</code>: The larger of two natural steps that an abstract\nslider provides and typically corresponds to the user pressing PageUp or\nPageDown.</li>\n</ul>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "knob {qx.ui.core.Widget} knob to set the value of the slider"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "interfaces": [
    "qx.ui.form.IForm",
    "qx.ui.form.INumberForm",
    "qx.ui.form.IRange"
  ],
  "mixins": [
    "qx.ui.form.MForm"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "orientation"
      }
    ],
    "location": {
      "start": {
        "line": 73,
        "column": 2,
        "index": 2624
      },
      "end": {
        "line": 101,
        "column": 3,
        "index": 3535
      }
    }
  },
  "events": {
    "changeValue": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Change event for the value.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Change event for the value.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 3788
        },
        "end": {
          "line": 113,
          "column": 37,
          "index": 3821
        }
      }
    },
    "slideAnimationEnd": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired as soon as the slide animation ended. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired as soon as the slide animation ended.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3883
        },
        "end": {
          "line": 116,
          "column": 44,
          "index": 3923
        }
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 4155
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 4215
        }
      },
      "json": {
        "refine": true,
        "init": "slider"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "focusable": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4240
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 4295
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "orientation": {
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 4359
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 4479
        }
      },
      "json": {
        "check": [
          "horizontal",
          "vertical"
        ],
        "init": "horizontal",
        "apply": "_applyOrientation"
      },
      "jsdoc": {
        "raw": [
          "* Whether the slider is horizontal or vertical. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the slider is horizontal or vertical.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "value": {
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 4751
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4929
        }
      },
      "json": {
        "check": "typeof value==='number'&&value>=this.getMinimum()&&value<=this.getMaximum()",
        "init": 0,
        "apply": "_applyValue",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The current slider value.",
          "     *",
          "     * Strictly validates according to {@link #minimum} and {@link #maximum}.",
          "     * Do not apply any value correction to the incoming value. If you depend",
          "     * on this, please use {@link #slideTo} instead.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The current slider value.\n Strictly validates according to {@link #minimum} and {@link #maximum}.\n Do not apply any value correction to the incoming value. If you depend\n on this, please use {@link #slideTo} instead.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "minimum": {
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 5060
        },
        "end": {
          "line": 169,
          "column": 5,
          "index": 5174
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyMinimum",
        "event": "changeMinimum"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The minimum slider value (may be negative). This value must be smaller",
          "     * than {@link #maximum}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The minimum slider value (may be negative). This value must be smaller\n than {@link #maximum}.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "maximum": {
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 5304
        },
        "end": {
          "line": 180,
          "column": 5,
          "index": 5420
        }
      },
      "json": {
        "check": "Integer",
        "init": 100,
        "apply": "_applyMaximum",
        "event": "changeMaximum"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The maximum slider value (may be negative). This value must be larger",
          "     * than {@link #minimum}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The maximum slider value (may be negative). This value must be larger\n than {@link #minimum}.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "singleStep": {
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 5553
        },
        "end": {
          "line": 189,
          "column": 5,
          "index": 5610
        }
      },
      "json": {
        "check": "Integer",
        "init": 1
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The amount to increment on each event. Typically corresponds",
          "     * to the user pressing an arrow key.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The amount to increment on each event. Typically corresponds\n to the user pressing an arrow key.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "pageStep": {
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5775
        },
        "end": {
          "line": 198,
          "column": 5,
          "index": 5831
        }
      },
      "json": {
        "check": "Integer",
        "init": 10
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The amount to increment on each event. Typically corresponds",
          "     * to the user pressing <code>PageUp</code> or <code>PageDown</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The amount to increment on each event. Typically corresponds\n to the user pressing <code>PageUp</code> or <code>PageDown</code>.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "knobFactor": {
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 5969
        },
        "end": {
          "line": 208,
          "column": 5,
          "index": 6065
        }
      },
      "json": {
        "check": "Number",
        "apply": "_applyKnobFactor",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Factor to apply to the width/height of the knob in relation",
          "     * to the dimension of the underlying area.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Factor to apply to the width/height of the knob in relation\n to the dimension of the underlying area.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "valid": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 956
        },
        "end": {
          "line": 43,
          "column": 5,
          "index": 1067
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyValid",
        "event": "changeValid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is valid. If a widget is invalid, an invalid",
          "     * state will be set.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is valid. If a widget is invalid, an invalid\n state will be set.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "required": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1137
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeRequired"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is required.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1325
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1447
        }
      },
      "json": {
        "nullable": true,
        "check": "String",
        "event": "changeInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an tooltip if the widget is invalid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an tooltip if the widget is invalid.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 1575
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 1695
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeRequiredInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an invalid tooltip if the {@link #required} is",
          "     * set to true.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an invalid tooltip if the {@link #required} is\n set to true.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    }
  },
  "members": {
    "__sliderLocation": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 218,
          "column": 4,
          "index": 6273
        },
        "end": {
          "line": 218,
          "column": 26,
          "index": 6295
        }
      },
      "appearsIn": []
    },
    "__knobLocation": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 219,
          "column": 4,
          "index": 6301
        },
        "end": {
          "line": 219,
          "column": 24,
          "index": 6321
        }
      },
      "appearsIn": []
    },
    "__knobSize": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 220,
          "column": 4,
          "index": 6327
        },
        "end": {
          "line": 220,
          "column": 20,
          "index": 6343
        }
      },
      "appearsIn": []
    },
    "__dragMode": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 221,
          "column": 4,
          "index": 6349
        },
        "end": {
          "line": 221,
          "column": 20,
          "index": 6365
        }
      },
      "appearsIn": []
    },
    "__dragOffset": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 222,
          "column": 4,
          "index": 6371
        },
        "end": {
          "line": 222,
          "column": 22,
          "index": 6389
        }
      },
      "appearsIn": []
    },
    "__trackingMode": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 223,
          "column": 4,
          "index": 6395
        },
        "end": {
          "line": 223,
          "column": 24,
          "index": 6415
        }
      },
      "appearsIn": []
    },
    "__trackingDirection": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 224,
          "column": 4,
          "index": 6421
        },
        "end": {
          "line": 224,
          "column": 29,
          "index": 6446
        }
      },
      "appearsIn": []
    },
    "__trackingEnd": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 225,
          "column": 4,
          "index": 6452
        },
        "end": {
          "line": 225,
          "column": 23,
          "index": 6471
        }
      },
      "appearsIn": []
    },
    "__timer": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 226,
          "column": 4,
          "index": 6477
        },
        "end": {
          "line": 226,
          "column": 17,
          "index": 6490
        }
      },
      "appearsIn": []
    },
    "__dragTimer": {
      "jsdoc": {
        "raw": [
          " event delay stuff during drag"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 229,
          "column": 4,
          "index": 6534
        },
        "end": {
          "line": 229,
          "column": 21,
          "index": 6551
        }
      },
      "appearsIn": []
    },
    "__lastValueEvent": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 230,
          "column": 4,
          "index": 6557
        },
        "end": {
          "line": 230,
          "column": 26,
          "index": 6579
        }
      },
      "appearsIn": []
    },
    "__dragValue": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 231,
          "column": 4,
          "index": 6585
        },
        "end": {
          "line": 231,
          "column": 21,
          "index": 6602
        }
      },
      "appearsIn": []
    },
    "__scrollAnimationframe": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 233,
          "column": 4,
          "index": 6609
        },
        "end": {
          "line": 233,
          "column": 32,
          "index": 6637
        }
      },
      "appearsIn": []
    },
    "_forwardStates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @lint ignoreReferenceField(_forwardStates)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 239,
          "column": 4,
          "index": 6728
        },
        "end": {
          "line": 241,
          "column": 5,
          "index": 6771
        }
      },
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "renderLayout": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 244,
          "column": 4,
          "index": 6796
        },
        "end": {
          "line": 248,
          "column": 5,
          "index": 7001
        }
      },
      "type": "function",
      "params": [
        {
          "name": "left"
        },
        {
          "name": "top"
        },
        {
          "name": "width"
        },
        {
          "name": "height"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 251,
          "column": 4,
          "index": 7026
        },
        "end": {
          "line": 266,
          "column": 5,
          "index": 7496
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_onPointerOver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for pointerover events at the knob child control.",
          "     *",
          "     * Adds the 'hovered' state",
          "     *",
          "     * @param e {qx.event.type.Pointer} Incoming pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for pointerover events at the knob child control.\n Adds the 'hovered' state</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming pointer event",
            "paramName": "e",
            "description": " Incoming pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 7894
        },
        "end": {
          "line": 283,
          "column": 5,
          "index": 7951
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onPointerOut": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for pointerout events at the knob child control.",
          "     *",
          "     * Removes the 'hovered' state",
          "     *",
          "     * @param e {qx.event.type.Pointer} Incoming pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for pointerout events at the knob child control.\n Removes the 'hovered' state</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming pointer event",
            "paramName": "e",
            "description": " Incoming pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 292,
          "column": 4,
          "index": 8156
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 8215
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onRoll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener of roll event",
          "     *",
          "     * @param e {qx.event.type.Roll} Incoming event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener of roll event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Roll"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 8334
        },
        "end": {
          "line": 314,
          "column": 5,
          "index": 8677
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Roll"
        }
      ],
      "appearsIn": []
    },
    "_onKeyPress": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for keypress events.",
          "     *",
          "     * Adds support for arrow keys, page up, page down, home and end keys.",
          "     *",
          "     * @param e {qx.event.type.KeySequence} Incoming keypress event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for keypress events.\n Adds support for arrow keys, page up, page down, home and end keys.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} Incoming keypress event",
            "paramName": "e",
            "description": " Incoming keypress event",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 323,
          "column": 4,
          "index": 8899
        },
        "end": {
          "line": 359,
          "column": 5,
          "index": 9660
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.KeySequence"
        }
      ],
      "appearsIn": []
    },
    "_onPointerDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener of pointerdown event. Initializes drag or tracking mode.",
          "     *",
          "     * @param e {qx.event.type.Pointer} Incoming event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener of pointerdown event. Initializes drag or tracking mode.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 366,
          "column": 4,
          "index": 9825
        },
        "end": {
          "line": 447,
          "column": 5,
          "index": 12525
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onPointerUp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener of pointerup event. Used for cleanup of previously",
          "     * initialized modes.",
          "     *",
          "     * @param e {qx.event.type.Pointer} Incoming event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener of pointerup event. Used for cleanup of previously\n initialized modes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 455,
          "column": 4,
          "index": 12710
        },
        "end": {
          "line": 533,
          "column": 5,
          "index": 15138
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onPointerMove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener of pointermove event for the knob. Only used in drag mode.",
          "     *",
          "     * @param e {qx.event.type.Pointer} Incoming event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener of pointermove event for the knob. Only used in drag mode.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 540,
          "column": 4,
          "index": 15305
        },
        "end": {
          "line": 555,
          "column": 5,
          "index": 15755
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onInterval": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener of interval event by the internal timer. Only used",
          "     * in tracking sequences.",
          "     *",
          "     * @param e {qx.event.type.Event} Incoming event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener of interval event by the internal timer. Only used\n in tracking sequences.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 563,
          "column": 4,
          "index": 15942
        },
        "end": {
          "line": 586,
          "column": 5,
          "index": 16639
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "_onUpdate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener of resize event for both the slider itself and the knob.",
          "     *",
          "     * @param e {qx.event.type.Data} Incoming event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener of resize event for both the slider itself and the knob.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Incoming event object",
            "paramName": "e",
            "description": " Incoming event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 593,
          "column": 4,
          "index": 16801
        },
        "end": {
          "line": 608,
          "column": 5,
          "index": 17334
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "__isHorizontal": {
      "jsdoc": {
        "raw": [
          "* @type {Boolean} Whether the slider is laid out horizontally "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the slider is laid out horizontally"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 617,
          "column": 4,
          "index": 17599
        },
        "end": {
          "line": 617,
          "column": 25,
          "index": 17620
        }
      },
      "appearsIn": []
    },
    "__slidingSpace": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Integer} Available space for knob to slide on, computed on resize of",
          "     * the widget",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Available space for knob to slide on, computed on resize of\n the widget"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 623,
          "column": 4,
          "index": 17744
        },
        "end": {
          "line": 623,
          "column": 21,
          "index": 17761
        }
      },
      "appearsIn": []
    },
    "__computeTrackingEnd": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Computes the value where the tracking should end depending on",
          "     * the current pointer position.",
          "     *",
          "     * @param e {qx.event.type.Pointer} Incoming pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the value where the tracking should end depending on\n the current pointer position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Incoming pointer event",
            "paramName": "e",
            "description": " Incoming pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 631,
          "column": 4,
          "index": 17960
        },
        "end": {
          "line": 674,
          "column": 5,
          "index": 19325
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_positionToValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts the given position to a value.",
          "     *",
          "     * Does not respect single or page step.",
          "     *",
          "     * @param position {Integer} Position to use",
          "     * @return {Integer} Resulting value (rounded)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts the given position to a value.\n Does not respect single or page step.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "position {Integer} Position to use",
            "paramName": "position",
            "description": " Position to use",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Resulting value (rounded)",
            "type": "Integer",
            "description": "Resulting value (rounded)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 684,
          "column": 4,
          "index": 19554
        },
        "end": {
          "line": 706,
          "column": 5,
          "index": 20154
        }
      },
      "type": "function",
      "params": [
        {
          "name": "position",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "_valueToPosition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts the given value to a position to place",
          "     * the knob to.",
          "     *",
          "     * @param value {Integer} Value to use",
          "     * @return {Integer} Computed position (rounded)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts the given value to a position to place\n the knob to.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Value to use",
            "paramName": "value",
            "description": " Value to use",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Computed position (rounded)",
            "type": "Integer",
            "description": "Computed position (rounded)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 715,
          "column": 4,
          "index": 20355
        },
        "end": {
          "line": 743,
          "column": 5,
          "index": 21057
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "_updateKnobPosition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates the knob position following the currently configured",
          "     * value. Useful on reflows where the dimensions of the slider",
          "     * itself have been modified.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the knob position following the currently configured\n value. Useful on reflows where the dimensions of the slider\n itself have been modified.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 751,
          "column": 4,
          "index": 21256
        },
        "end": {
          "line": 753,
          "column": 5,
          "index": 21354
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_setKnobPosition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Moves the knob to the given position.",
          "     *",
          "     * @param position {Integer} Any valid position (needs to be",
          "     *   greater or equal than zero)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Moves the knob to the given position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "position {Integer} Any valid position (needs to be\n   greater or equal than zero)",
            "paramName": "position",
            "description": " Any valid position (needs to be\n   greater or equal than zero)",
            "type": "Integer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 761,
          "column": 4,
          "index": 21531
        },
        "end": {
          "line": 780,
          "column": 5,
          "index": 22288
        }
      },
      "type": "function",
      "params": [
        {
          "name": "position",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "_updateKnobSize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reconfigures the size of the knob depending on",
          "     * the optionally defined {@link #knobFactor}.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reconfigures the size of the knob depending on\n the optionally defined {@link #knobFactor}.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 787,
          "column": 4,
          "index": 22423
        },
        "end": {
          "line": 810,
          "column": 5,
          "index": 23002
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "slideToBegin": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Slides backward to the minimum value",
          "     * @param duration {Number} The time in milliseconds the slide to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Slides backward to the minimum value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 822,
          "column": 4,
          "index": 23347
        },
        "end": {
          "line": 824,
          "column": 5,
          "index": 23426
        }
      },
      "type": "function",
      "params": [
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "slideToEnd": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Slides forward to the maximum value",
          "     * @param duration {Number} The time in milliseconds the slide to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Slides forward to the maximum value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 830,
          "column": 4,
          "index": 23575
        },
        "end": {
          "line": 832,
          "column": 5,
          "index": 23652
        }
      },
      "type": "function",
      "params": [
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "slideForward": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Slides forward (right or bottom depending on orientation)",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Slides forward (right or bottom depending on orientation)</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 838,
          "column": 4,
          "index": 23747
        },
        "end": {
          "line": 840,
          "column": 5,
          "index": 23811
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "slideBack": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Slides backward (to left or top depending on orientation)",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Slides backward (to left or top depending on orientation)</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 846,
          "column": 4,
          "index": 23906
        },
        "end": {
          "line": 848,
          "column": 5,
          "index": 23968
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "slidePageForward": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Slides a page forward (to right or bottom depending on orientation)",
          "     * @param duration {Number} The time in milliseconds the slide to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Slides a page forward (to right or bottom depending on orientation)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 854,
          "column": 4,
          "index": 24149
        },
        "end": {
          "line": 856,
          "column": 5,
          "index": 24233
        }
      },
      "type": "function",
      "params": [
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "slidePageBack": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Slides a page backward (to left or top depending on orientation)",
          "     * @param duration {Number} The time in milliseconds the slide to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Slides a page backward (to left or top depending on orientation)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 862,
          "column": 4,
          "index": 24411
        },
        "end": {
          "line": 864,
          "column": 5,
          "index": 24493
        }
      },
      "type": "function",
      "params": [
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "slideBy": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Slides by the given offset.",
          "     *",
          "     * This method works with the value, not with the coordinate.",
          "     *",
          "     * @param offset {Integer} Offset to scroll by",
          "     * @param duration {Number} The time in milliseconds the slide to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Slides by the given offset.\n This method works with the value, not with the coordinate.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "offset {Integer} Offset to scroll by",
            "paramName": "offset",
            "description": " Offset to scroll by",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 874,
          "column": 4,
          "index": 24765
        },
        "end": {
          "line": 876,
          "column": 5,
          "index": 24854
        }
      },
      "type": "function",
      "params": [
        {
          "name": "offset",
          "type": "Integer"
        },
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "slideTo": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Slides to the given value",
          "     *",
          "     * This method works with the value, not with the coordinate.",
          "     *",
          "     * @param value {Integer} Scroll to a value between the defined",
          "     *   minimum and maximum.",
          "     * @param duration {Number} The time in milliseconds the slide to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Slides to the given value\n This method works with the value, not with the coordinate.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Scroll to a value between the defined\n   minimum and maximum.",
            "paramName": "value",
            "description": " Scroll to a value between the defined\n   minimum and maximum.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 887,
          "column": 4,
          "index": 25171
        },
        "end": {
          "line": 895,
          "column": 5,
          "index": 25361
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Integer"
        },
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "updatePosition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates the position property considering the minimum and maximum values.",
          "     * @param value {Number} The new position.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the position property considering the minimum and maximum values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Number} The new position.",
            "paramName": "value",
            "description": " The new position.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 901,
          "column": 4,
          "index": 25512
        },
        "end": {
          "line": 903,
          "column": 5,
          "index": 25592
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "stopSlideAnimation": {
      "jsdoc": {
        "raw": [
          "*",
          "     * In case a slide animation is currently running, it will be stopped.",
          "     * If not, the method does nothing.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>In case a slide animation is currently running, it will be stopped.\n If not, the method does nothing.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 909,
          "column": 4,
          "index": 25730
        },
        "end": {
          "line": 914,
          "column": 5,
          "index": 25905
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__normalizeValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper to normalize the given value concerning the minimum",
          "     * and maximum value.",
          "     * @param value {Number} The value to normalize.",
          "     * @return {Number} The normalized value.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper to normalize the given value concerning the minimum\n and maximum value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Number} The value to normalize.",
            "paramName": "value",
            "description": " The value to normalize.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The normalized value.",
            "type": "number",
            "description": "The normalized value."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 922,
          "column": 4,
          "index": 26128
        },
        "end": {
          "line": 935,
          "column": 5,
          "index": 26573
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "__animateTo": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Animation helper which takes care of the animated slide.",
          "     * @param to {Number} The target value.",
          "     * @param duration {Number} The time in milliseconds the slide to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Animation helper which takes care of the animated slide.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "to {Number} The target value.",
            "paramName": "to",
            "description": " The target value.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "duration {Number} The time in milliseconds the slide to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the slide to should take.",
            "type": "number"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 942,
          "column": 4,
          "index": 26787
        },
        "end": {
          "line": 967,
          "column": 5,
          "index": 27451
        }
      },
      "type": "function",
      "params": [
        {
          "name": "to",
          "type": "number"
        },
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "_applyOrientation": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 976,
          "column": 4,
          "index": 27685
        },
        "end": {
          "line": 1006,
          "column": 5,
          "index": 28566
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyKnobFactor": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1009,
          "column": 4,
          "index": 28595
        },
        "end": {
          "line": 1019,
          "column": 5,
          "index": 28882
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyValue": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1022,
          "column": 4,
          "index": 28911
        },
        "end": {
          "line": 1036,
          "column": 5,
          "index": 29325
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_fireValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper for applyValue which fires the changeValue event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper for applyValue which fires the changeValue event.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1041,
          "column": 4,
          "index": 29412
        },
        "end": {
          "line": 1048,
          "column": 5,
          "index": 29614
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_applyMinimum": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1051,
          "column": 4,
          "index": 29643
        },
        "end": {
          "line": 1060,
          "column": 5,
          "index": 29876
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyMaximum": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1063,
          "column": 4,
          "index": 29905
        },
        "end": {
          "line": 1072,
          "column": 5,
          "index": 30138
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyValid": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1739
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 1840
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "__onChangeLocale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Locale change event handler",
          "     *",
          "     * @signature function(e)",
          "     * @param e {Event} the change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locale change event handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event",
            "paramName": "e",
            "description": " the change event",
            "type": "Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 1976
        },
        "end": {
          "line": 102,
          "column": 6,
          "index": 2570
        }
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    }
  },
  "statics": {}
}