{
  "version": 0.3,
  "lastModified": 1722151626799,
  "lastModifiedIso": "2024-07-28T07:27:06.799Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/RepeatButton.js",
  "type": "class",
  "location": {
    "start": {
      "line": 49,
      "column": 0,
      "index": 1649
    },
    "end": {
      "line": 408,
      "column": 3,
      "index": 10972
    }
  },
  "className": "qx.ui.form.RepeatButton",
  "jsdoc": {
    "raw": [
      "*",
      " * The RepeatButton is a special button, which fires repeatedly {@link #execute}",
      " * events, while a button is pressed on the button. The initial delay",
      " * and the interval time can be set using the properties {@link #firstInterval}",
      " * and {@link #interval}. The {@link #execute} events will be fired in a shorter",
      " * amount of time if a button is hold, until the min {@link #minTimer}",
      " * is reached. The {@link #timerDecrease} property sets the amount of milliseconds",
      " * which will decreased after every firing.",
      " *",
      " * <pre class='javascript'>",
      " *   var button = new qx.ui.form.RepeatButton(\"Hello World\");",
      " *",
      " *   button.addListener(\"execute\", function(e) {",
      " *     alert(\"Button is executed\");",
      " *   }, this);",
      " *",
      " *   this.getRoot.add(button);",
      " * </pre>",
      " *",
      " * This example creates a button with the label \"Hello World\" and attaches an",
      " * event listener to the {@link #execute} event.",
      " *",
      " * *External Documentation*",
      " *",
      " * <a href='http://qooxdoo.org/docs/#desktop/widget/repeatbutton.md' target='_blank'>",
      " * Documentation of this widget in the qooxdoo manual.</a>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The RepeatButton is a special button, which fires repeatedly {@link #execute}\n events, while a button is pressed on the button. The initial delay\n and the interval time can be set using the properties {@link #firstInterval}\n and {@link #interval}. The {@link #execute} events will be fired in a shorter\n amount of time if a button is hold, until the min {@link #minTimer}\n is reached. The {@link #timerDecrease} property sets the amount of milliseconds\n which will decreased after every firing.\n </p>\n<pre class='javascript'>\n   var button = new qx.ui.form.RepeatButton(\"Hello World\");\n   button.addListener(\"execute\", function(e) {\n     alert(\"Button is executed\");\n   }, this);\n   this.getRoot.add(button);\n </pre>\n<p>This example creates a button with the label \"Hello World\" and attaches an\n event listener to the {@link #execute} event.\n<em>External Documentation</em>\n <a href='http://qooxdoo.org/docs/#desktop/widget/repeatbutton.md' target='_blank'>\n Documentation of this widget in the qooxdoo manual.</a></p>"
      }
    ]
  },
  "superClass": "qx.ui.form.Button",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "label"
      },
      {
        "name": "icon"
      }
    ],
    "location": {
      "start": {
        "line": 56,
        "column": 2,
        "index": 1821
      },
      "end": {
        "line": 62,
        "column": 3,
        "index": 2038
      }
    }
  },
  "events": {
    "execute": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * This event gets dispatched with every interval. The timer gets executed",
          "     * as long as the user holds down a button.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event gets dispatched with every interval. The timer gets executed\n as long as the user holds down a button.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 69,
          "column": 4,
          "index": 2200
        },
        "end": {
          "line": 69,
          "column": 34,
          "index": 2230
        }
      }
    },
    "press": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * This event gets dispatched when the button is pressed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event gets dispatched when the button is pressed.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2315
        },
        "end": {
          "line": 74,
          "column": 32,
          "index": 2343
        }
      }
    },
    "release": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * This event gets dispatched when the button is released.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event gets dispatched when the button is released.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2429
        },
        "end": {
          "line": 79,
          "column": 34,
          "index": 2459
        }
      }
    }
  },
  "properties": {
    "interval": {
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2654
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2711
        }
      },
      "json": {
        "check": "Integer",
        "init": 100
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Interval used after the first run of the timer. Usually a smaller value",
          "     * than the \"firstInterval\" property value to get a faster reaction.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Interval used after the first run of the timer. Usually a smaller value\n than the \"firstInterval\" property value to get a faster reaction.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "firstInterval": {
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2908
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2970
        }
      },
      "json": {
        "check": "Integer",
        "init": 500
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Interval used for the first run of the timer. Usually a greater value",
          "     * than the \"interval\" property value to a little delayed reaction at the first",
          "     * time.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Interval used for the first run of the timer. Usually a greater value\n than the \"interval\" property value to a little delayed reaction at the first\n time.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "minTimer": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 3046
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 3102
        }
      },
      "json": {
        "check": "Integer",
        "init": 20
      },
      "jsdoc": {
        "raw": [
          "* This configures the minimum value for the timer interval. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This configures the minimum value for the timer interval.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "timerDecrease": {
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3207
        },
        "end": {
          "line": 112,
          "column": 5,
          "index": 3267
        }
      },
      "json": {
        "check": "Integer",
        "init": 2
      },
      "jsdoc": {
        "raw": [
          "* Decrease of the timer on each interval (for the next interval) until minTimer reached. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decrease of the timer on each interval (for the next interval) until minTimer reached.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__executed": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3291
        },
        "end": {
          "line": 116,
          "column": 20,
          "index": 3307
        }
      },
      "appearsIn": []
    },
    "__timer": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3313
        },
        "end": {
          "line": 117,
          "column": 17,
          "index": 3326
        }
      },
      "appearsIn": []
    },
    "press": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calling this function is like a tap from the user on the",
          "     * button with all consequences.",
          "     * <span style='color: red'>Be sure to call the {@link #release} function.</span>",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calling this function is like a tap from the user on the\n button with all consequences.\n <span style='color: red'>Be sure to call the {@link #release} function.</span></p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3543
        },
        "end": {
          "line": 138,
          "column": 5,
          "index": 3915
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "release": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calling this function is like a release from the user on the",
          "     * button with all consequences.",
          "     * Usually the {@link #release} function will be called before the call of",
          "     * this function.",
          "     *",
          "     * @param fireExecuteEvent {Boolean?true} flag which signals, if an event should be fired",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calling this function is like a release from the user on the\n button with all consequences.\n Usually the {@link #release} function will be called before the call of\n this function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fireExecuteEvent {Boolean?true} flag which signals, if an event should be fired",
            "paramName": "fireExecuteEvent",
            "description": " flag which signals, if an event should be fired",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 4245
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 4770
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fireExecuteEvent",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "true"
        }
      ],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_applyEnabled": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5000
        },
        "end": {
          "line": 193,
          "column": 5,
          "index": 5455
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_onPointerOver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"pointerover\" event",
          "     * <ul>",
          "     * <li>Adds state \"hovered\"</li>",
          "     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>",
          "     * </ul>",
          "     *",
          "     * @param e {qx.event.type.Pointer} Pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"pointerover\" event\n </p>\n<ul>\n <li>Adds state \"hovered\"</li>\n <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 5934
        },
        "end": {
          "line": 222,
          "column": 5,
          "index": 6225
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onPointerOut": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"pointerout\" event",
          "     * <ul>",
          "     * <li>Removes \"hovered\" state</li>",
          "     * <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>",
          "     * </ul>",
          "     *",
          "     * @param e {qx.event.type.Pointer} Pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"pointerout\" event\n </p>\n<ul>\n <li>Removes \"hovered\" state</li>\n <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 233,
          "column": 4,
          "index": 6509
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 6799
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onPointerDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Callback method for the \"pointerdown\" method.",
          "     *",
          "     * Sets the interval of the timer (value of firstInterval property) and",
          "     * starts the timer. Additionally removes the state \"abandoned\" and adds the",
          "     * state \"pressed\".",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointerdown event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Callback method for the \"pointerdown\" method.\n Sets the interval of the timer (value of firstInterval property) and\n starts the timer. Additionally removes the state \"abandoned\" and adds the\n state \"pressed\".</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerdown event",
            "paramName": "e",
            "description": " pointerdown event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 7128
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 7392
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onPointerUp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Callback method for the \"pointerup\" event.",
          "     *",
          "     * Handles the case that the user is releasing a button",
          "     * before the timer interval method got executed. This way the",
          "     * \"execute\" method get executed at least one time.",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointerup event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Callback method for the \"pointerup\" event.\n Handles the case that the user is releasing a button\n before the timer interval method got executed. This way the\n \"execute\" method get executed at least one time.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerup event",
            "paramName": "e",
            "description": " pointerup event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 278,
          "column": 4,
          "index": 7718
        },
        "end": {
          "line": 291,
          "column": 5,
          "index": 8013
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onTap": {
      "jsdoc": {
        "raw": [
          " Nothing to do, 'execute' is already fired by _onPointerUp."
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 294,
          "column": 4,
          "index": 8086
        },
        "end": {
          "line": 294,
          "column": 16,
          "index": 8098
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onKeyUp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"keyup\" event.",
          "     *",
          "     * Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)",
          "     * for the keys \"Enter\" or \"Space\" and stops the internal timer",
          "     * (same like pointer up).",
          "     *",
          "     * @param e {Event} Key event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"keyup\" event.\n Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\n for the keys \"Enter\" or \"Space\" and stops the internal timer\n (same like pointer up).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 305,
          "column": 4,
          "index": 8385
        },
        "end": {
          "line": 320,
          "column": 5,
          "index": 8786
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "Event"
        }
      ],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onKeyDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"keydown\" event.",
          "     *",
          "     * Removes \"abandoned\" and adds \"pressed\" state",
          "     * for the keys \"Enter\" or \"Space\". It also starts",
          "     * the internal timer (same like pointerdown).",
          "     *",
          "     * @param e {Event} Key event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"keydown\" event.\n Removes \"abandoned\" and adds \"pressed\" state\n for the keys \"Enter\" or \"Space\". It also starts\n the internal timer (same like pointerdown).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 331,
          "column": 4,
          "index": 9059
        },
        "end": {
          "line": 340,
          "column": 5,
          "index": 9317
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "Event"
        }
      ],
      "overriddenFrom": "qx.ui.form.Button",
      "appearsIn": [
        "qx.ui.form.Button"
      ]
    },
    "_onInterval": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Callback for the interval event.",
          "     *",
          "     * Stops the timer and starts it with a new interval",
          "     * (value of the \"interval\" property - value of the \"timerDecrease\" property).",
          "     * Dispatches the \"execute\" event.",
          "     *",
          "     * @param e {qx.event.type.Event} interval event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Callback for the interval event.\n Stops the timer and starts it with a new interval\n (value of the \"interval\" property - value of the \"timerDecrease\" property).\n Dispatches the \"execute\" event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} interval event",
            "paramName": "e",
            "description": " interval event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 351,
          "column": 4,
          "index": 9626
        },
        "end": {
          "line": 354,
          "column": 5,
          "index": 9711
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "__startInternalTimer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Starts the internal timer which causes firing of execution",
          "     * events in an interval. It also presses the button.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Starts the internal timer which causes firing of execution\n events in an interval. It also presses the button.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 367,
          "column": 4,
          "index": 10061
        },
        "end": {
          "line": 383,
          "column": 5,
          "index": 10461
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__stopInternalTimer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stops the internal timer and releases the button.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the internal timer and releases the button.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 389,
          "column": 4,
          "index": 10548
        },
        "end": {
          "line": 396,
          "column": 5,
          "index": 10711
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 405,
        "column": 2,
        "index": 10915
      },
      "end": {
        "line": 407,
        "column": 3,
        "index": 10968
      }
    }
  },
  "statics": {}
}