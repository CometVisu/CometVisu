{
  "version": 0.3,
  "lastModified": 1735383686313,
  "lastModifiedIso": "2024-12-28T11:01:26.313Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/core/AbstractVirtualBox.js",
  "type": "class",
  "location": {
    "start": {
      "line": 26,
      "column": 0,
      "index": 772
    },
    "end": {
      "line": 470,
      "column": 3,
      "index": 12102
    }
  },
  "className": "qx.ui.form.core.AbstractVirtualBox",
  "jsdoc": {
    "raw": [
      "*",
      " * Basic class for widgets which need a virtual list as popup for example a",
      " * SelectBox. It's basically supports a drop-down as popup with a virtual list",
      " * and the whole children management.",
      " *",
      " * @childControl dropdown {qx.ui.form.core.VirtualDropDownList} The drop-down list.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Basic class for widgets which need a virtual list as popup for example a\n SelectBox. It's basically supports a drop-down as popup with a virtual list\n and the whole children management.</p>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "dropdown {qx.ui.form.core.VirtualDropDownList} The drop-down list."
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.form.MForm"
  ],
  "interfaces": [
    "qx.ui.form.IForm"
  ],
  "isSingleton": false,
  "abstract": true,
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "model"
      }
    ],
    "location": {
      "start": {
        "line": 35,
        "column": 2,
        "index": 1022
      },
      "end": {
        "line": 63,
        "column": 3,
        "index": 1757
      }
    }
  },
  "properties": {
    "focusable": {
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1798
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 1853
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "width": {
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1878
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 1928
        }
      },
      "json": {
        "refine": true,
        "init": 120
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "model": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2017
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2165
        }
      },
      "json": {
        "check": "qx.data.Array",
        "apply": "_applyModel",
        "event": "changeModel",
        "nullable": false,
        "deferredInit": true
      },
      "jsdoc": {
        "raw": [
          "* Data array containing the data which should be shown in the drop-down. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data array containing the data which should be shown in the drop-down.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "delegate": {
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2321
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 2439
        }
      },
      "json": {
        "apply": "_applyDelegate",
        "event": "changeDelegate",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Delegation object which can have one or more functions defined by the",
          "     * {@link qx.ui.list.core.IListDelegate} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Delegation object which can have one or more functions defined by the\n {@link qx.ui.list.core.IListDelegate} interface.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "labelPath": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2629
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 2755
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyLabelPath",
        "event": "changeLabelPath",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The path to the property which holds the information that should be",
          "     * displayed as a label. This is only needed if objects are stored in the",
          "     * model.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The path to the property which holds the information that should be\n displayed as a label. This is only needed if objects are stored in the\n model.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "labelOptions": {
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 2932
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3044
        }
      },
      "json": {
        "apply": "_applyLabelOptions",
        "event": "changeLabelOptions",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * A map containing the options for the label binding. The possible keys",
          "     * can be found in the {@link qx.data.SingleValueBinding} documentation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the label binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "iconPath": {
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3264
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3387
        }
      },
      "json": {
        "check": "String",
        "event": "changeIconPath",
        "apply": "_applyIconPath",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The path to the property which holds the information that should be",
          "     * displayed as an icon. This is only needed if objects are stored in the",
          "     * model and icons should be displayed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The path to the property which holds the information that should be\n displayed as an icon. This is only needed if objects are stored in the\n model and icons should be displayed.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "iconOptions": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3563
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 3672
        }
      },
      "json": {
        "apply": "_applyIconOptions",
        "event": "changeIconOptions",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * A map containing the options for the icon binding. The possible keys",
          "     * can be found in the {@link qx.data.SingleValueBinding} documentation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the icon binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "itemHeight": {
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 3711
        },
        "end": {
          "line": 148,
          "column": 5,
          "index": 3824
        }
      },
      "json": {
        "check": "Integer",
        "init": 25,
        "apply": "_applyRowHeight",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Default item height. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Default item height.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "maxListHeight": {
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 3985
        },
        "end": {
          "line": 159,
          "column": 5,
          "index": 4104
        }
      },
      "json": {
        "check": "Number",
        "apply": "_applyMaxListHeight",
        "nullable": true,
        "init": 200
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The maximum height of the drop-down list. Setting this value to",
          "     * <code>null</code> will set cause the list to be auto-sized.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The maximum height of the drop-down list. Setting this value to\n <code>null</code> will set cause the list to be auto-sized.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "allowGrowDropDown": {
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 4185
        },
        "end": {
          "line": 169,
          "column": 5,
          "index": 4316
        }
      },
      "json": {
        "init": false,
        "nullable": false,
        "check": "Boolean",
        "event": "changeAllowGrowDropDown"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Allow the drop-down to grow wider than its parent.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Allow the drop-down to grow wider than its parent.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "valid": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 956
        },
        "end": {
          "line": 43,
          "column": 5,
          "index": 1067
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyValid",
        "event": "changeValid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is valid. If a widget is invalid, an invalid",
          "     * state will be set.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is valid. If a widget is invalid, an invalid\n state will be set.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "required": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1137
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeRequired"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is required.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1325
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1447
        }
      },
      "json": {
        "nullable": true,
        "check": "String",
        "event": "changeInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an tooltip if the widget is invalid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an tooltip if the widget is invalid.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 1575
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 1695
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeRequiredInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an invalid tooltip if the {@link #required} is",
          "     * set to true.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an invalid tooltip if the {@link #required} is\n set to true.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    }
  },
  "members": {
    "__defaultModel": {
      "jsdoc": {
        "raw": [
          "* @type {qx.data.Array} The initial model array of this virtual box. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.data.Array} The initial model array of this virtual box."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 4472
        },
        "end": {
          "line": 175,
          "column": 24,
          "index": 4492
        }
      },
      "appearsIn": []
    },
    "_forwardStates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @lint ignoreReferenceField(_forwardStates)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 4565
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 4629
        }
      },
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "refresh": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Trigger a rebuild from the internal data structure.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Trigger a rebuild from the internal data structure.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 4903
        },
        "end": {
          "line": 197,
          "column": 5,
          "index": 5035
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "open": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Shows the drop-down.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shows the drop-down.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 202,
          "column": 4,
          "index": 5086
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 5173
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "close": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Hides the drop-down.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hides the drop-down.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 5224
        },
        "end": {
          "line": 213,
          "column": 5,
          "index": 5314
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "toggle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Toggles the drop-down visibility.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Toggles the drop-down visibility.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 218,
          "column": 4,
          "index": 5378
        },
        "end": {
          "line": 226,
          "column": 5,
          "index": 5550
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 5769
        },
        "end": {
          "line": 251,
          "column": 5,
          "index": 6170
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_beforeOpen": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method is called before the drop-down is opened.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called before the drop-down is opened.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 6254
        },
        "end": {
          "line": 256,
          "column": 20,
          "index": 6270
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_beforeClose": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method is called before the drop-down is closed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called before the drop-down is closed.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 6354
        },
        "end": {
          "line": 261,
          "column": 21,
          "index": 6371
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_getAction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the action dependent on the user interaction: e. q. <code>open</code>,",
          "     * or <code>close</code>.",
          "     *",
          "     * @param event {qx.event.type.KeySequence} The keyboard event.",
          "     * @return {String|null} The action or <code>null</code> when interaction",
          "     *  doesn't hit any action.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the action dependent on the user interaction: e. q. <code>open</code>,\n or <code>close</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.KeySequence} The keyboard event.",
            "paramName": "event",
            "description": " The keyboard event.",
            "type": "qx.event.type.KeySequence"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} The action or <code>null</code> when interaction\n  doesn't hit any action.",
            "type": "String|null",
            "description": "The action or <code>null</code> when interaction\n  doesn't hit any action."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 6695
        },
        "end": {
          "line": 287,
          "column": 5,
          "index": 7201
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.KeySequence"
        }
      ],
      "returnType": {
        "type": "String|null"
      },
      "appearsIn": []
    },
    "_getBindPath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper Method to create bind path depended on the passed path.",
          "     *",
          "     * @param source {String} The path to the selection.",
          "     * @param path {String?null} The path to the item's property.",
          "     * @return {String} The created path.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper Method to create bind path depended on the passed path.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {String} The path to the selection.",
            "paramName": "source",
            "description": " The path to the selection.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "path {String?null} The path to the item's property.",
            "paramName": "path",
            "description": " The path to the item's property.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The created path.",
            "type": "string",
            "description": "The created path."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 296,
          "column": 4,
          "index": 7466
        },
        "end": {
          "line": 304,
          "column": 5,
          "index": 7642
        }
      },
      "type": "function",
      "params": [
        {
          "name": "source",
          "type": "string"
        },
        {
          "name": "path",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "_isModifierPressed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to check if one modifier key is pressed. e.q.",
          "     * <code>Control</code>, <code>Shift</code>, <code>Meta</code> or",
          "     * <code>Alt</code>.",
          "     *",
          "     * @param event {qx.event.type.KeySequence} The keyboard event.",
          "     * @return {Boolean} <code>True</code> when a modifier key is pressed,",
          "     *   <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to check if one modifier key is pressed. e.q.\n <code>Control</code>, <code>Shift</code>, <code>Meta</code> or\n <code>Alt</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.KeySequence} The keyboard event.",
            "paramName": "event",
            "description": " The keyboard event.",
            "type": "qx.event.type.KeySequence"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>True</code> when a modifier key is pressed,\n   <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>True</code> when a modifier key is pressed,\n   <code>false</code> otherwise."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 315,
          "column": 4,
          "index": 8016
        },
        "end": {
          "line": 327,
          "column": 5,
          "index": 8394
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.KeySequence"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_onBlur": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the blur event of the current widget.",
          "     *",
          "     * @param event {qx.event.type.Focus} The blur event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the blur event of the current widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Focus} The blur event.",
            "paramName": "event",
            "description": " The blur event.",
            "type": "qx.event.type.Focus"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 340,
          "column": 4,
          "index": 8736
        },
        "end": {
          "line": 342,
          "column": 5,
          "index": 8778
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.Focus"
        }
      ],
      "appearsIn": []
    },
    "_handleKeyboard": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles the complete keyboard events for user interaction. If there is",
          "     * no defined user interaction {@link #_getAction}, the event is delegated",
          "     * to the {@link qx.ui.form.core.VirtualDropDownList#_handleKeyboard} method.",
          "     *",
          "     * @param event {qx.event.type.KeySequence} The keyboard event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles the complete keyboard events for user interaction. If there is\n no defined user interaction {@link #<em>getAction}, the event is delegated\n to the {@link qx.ui.form.core.VirtualDropDownList#</em>handleKeyboard} method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.KeySequence} The keyboard event.",
            "paramName": "event",
            "description": " The keyboard event.",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 351,
          "column": 4,
          "index": 9115
        },
        "end": {
          "line": 370,
          "column": 5,
          "index": 9551
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.KeySequence"
        }
      ],
      "appearsIn": []
    },
    "_handlePointer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles all pointer events dispatched on the widget.",
          "     *",
          "     * @param event {qx.event.type.Pointer|qx.event.type.Roll} The pointer event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles all pointer events dispatched on the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Pointer|qx.event.type.Roll} The pointer event.",
            "paramName": "event",
            "description": " The pointer event.",
            "type": [
              "qx.event.type.Pointer",
              "qx.event.type.Roll"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 377,
          "column": 4,
          "index": 9723
        },
        "end": {
          "line": 377,
          "column": 28,
          "index": 9747
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": [
            "qx.event.type.Pointer",
            "qx.event.type.Roll"
          ]
        }
      ],
      "appearsIn": []
    },
    "_onResize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates drop-down minimum size.",
          "     *",
          "     * @param event {qx.event.type.Data} Data event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates drop-down minimum size.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Data} Data event.",
            "paramName": "event",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 9869
        },
        "end": {
          "line": 386,
          "column": 5,
          "index": 9968
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onPopupChangeVisibility": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds/removes the state 'popupOpen' depending on the visibility of the popup",
          "     *",
          "     * @param event {qx.event.type.Data} Data event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds/removes the state 'popupOpen' depending on the visibility of the popup</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Data} Data event",
            "paramName": "event",
            "description": " Data event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 393,
          "column": 4,
          "index": 10133
        },
        "end": {
          "line": 397,
          "column": 5,
          "index": 10285
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_applyModel": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 10510
        },
        "end": {
          "line": 409,
          "column": 5,
          "index": 10662
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyDelegate": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 412,
          "column": 4,
          "index": 10691
        },
        "end": {
          "line": 416,
          "column": 5,
          "index": 10826
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyLabelPath": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 419,
          "column": 4,
          "index": 10855
        },
        "end": {
          "line": 424,
          "column": 5,
          "index": 11033
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyLabelOptions": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 11062
        },
        "end": {
          "line": 432,
          "column": 5,
          "index": 11246
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyIconPath": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 435,
          "column": 4,
          "index": 11275
        },
        "end": {
          "line": 440,
          "column": 5,
          "index": 11451
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyIconOptions": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 443,
          "column": 4,
          "index": 11480
        },
        "end": {
          "line": 448,
          "column": 5,
          "index": 11662
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyRowHeight": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 451,
          "column": 4,
          "index": 11691
        },
        "end": {
          "line": 455,
          "column": 5,
          "index": 11829
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyMaxListHeight": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 458,
          "column": 4,
          "index": 11858
        },
        "end": {
          "line": 462,
          "column": 5,
          "index": 11999
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "setEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the enabled state of the widget.",
          "     *",
          "     * @param enabled {Boolean} The enabled state.",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the enabled state of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "enabled {Boolean} The enabled state.",
            "paramName": "enabled",
            "description": " The enabled state.",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1762
        },
        "end": {
          "line": 65,
          "column": 5,
          "index": 1825
        }
      },
      "type": "function",
      "params": [
        {
          "name": "enabled",
          "type": "boolean"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "getEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the current set enabled state.",
          "     *",
          "     * @return {Boolean} If the widget is enabled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the current set enabled state.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the widget is enabled.",
            "type": "boolean",
            "description": "If the widget is enabled."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 1951
        },
        "end": {
          "line": 72,
          "column": 19,
          "index": 1966
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "setRequired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the required state of a widget.",
          "     *",
          "     * @param required {Boolean} A flag signaling if the widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the required state of a widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "required {Boolean} A flag signaling if the widget is required.",
            "paramName": "required",
            "description": " A flag signaling if the widget is required.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2316
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2381
        }
      },
      "type": "function",
      "params": [
        {
          "name": "required",
          "type": "boolean"
        }
      ],
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "getRequired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the current required state of the widget.",
          "     *",
          "     * @return {Boolean} True, if the widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the current required state of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} True, if the widget is required.",
            "type": "boolean",
            "description": "True, if the widget is required."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2525
        },
        "end": {
          "line": 94,
          "column": 20,
          "index": 2541
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "setValid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the valid state of the widget.",
          "     *",
          "     * @param valid {Boolean} The valid state of the widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the valid state of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "valid {Boolean} The valid state of the widget.",
            "paramName": "valid",
            "description": " The valid state of the widget.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 2871
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 2930
        }
      },
      "type": "function",
      "params": [
        {
          "name": "valid",
          "type": "boolean"
        }
      ],
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "getValid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the valid state of the widget.",
          "     *",
          "     * @return {Boolean} If the state of the widget is valid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the valid state of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the state of the widget is valid.",
            "type": "boolean",
            "description": "If the state of the widget is valid."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3068
        },
        "end": {
          "line": 116,
          "column": 17,
          "index": 3081
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "setInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the invalid message of the widget.",
          "     *",
          "     * @param message {String} The invalid message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the invalid message of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message {String} The invalid message.",
            "paramName": "message",
            "description": " The invalid message.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3416
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 3486
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message",
          "type": "string"
        }
      ],
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "getInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the invalid message of the widget.",
          "     *",
          "     * @return {String} The current set message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the invalid message of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The current set message.",
            "type": "string",
            "description": "The current set message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3615
        },
        "end": {
          "line": 138,
          "column": 26,
          "index": 3637
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "setRequiredInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the invalid message if required of the widget.",
          "     *",
          "     * @param message {String} The invalid message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the invalid message if required of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message {String} The invalid message.",
            "paramName": "message",
            "description": " The invalid message.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 3993
        },
        "end": {
          "line": 153,
          "column": 5,
          "index": 4071
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message",
          "type": "string"
        }
      ],
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "getRequiredInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the invalid message if required of the widget.",
          "     *",
          "     * @return {String} The current set message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the invalid message if required of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The current set message.",
            "type": "string",
            "description": "The current set message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 4212
        },
        "end": {
          "line": 160,
          "column": 34,
          "index": 4242
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": [
        "qx.ui.form.IForm"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm"
    },
    "_applyValid": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1739
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 1840
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "__onChangeLocale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Locale change event handler",
          "     *",
          "     * @signature function(e)",
          "     * @param e {Event} the change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locale change event handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event",
            "paramName": "e",
            "description": " the change event",
            "type": "Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 1976
        },
        "end": {
          "line": 102,
          "column": 6,
          "index": 2570
        }
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 465,
        "column": 2,
        "index": 12008
      },
      "end": {
        "line": 469,
        "column": 3,
        "index": 12098
      }
    }
  },
  "statics": {}
}