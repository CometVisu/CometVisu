{
  "version": 0.3,
  "lastModified": 1735341601779,
  "lastModifiedIso": "2024-12-27T23:20:01.779Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/Form.js",
  "type": "class",
  "location": {
    "start": {
      "line": 27,
      "column": 0,
      "index": 848
    },
    "end": {
      "line": 439,
      "column": 3,
      "index": 13242
    }
  },
  "className": "qx.ui.form.Form",
  "jsdoc": {
    "raw": [
      "*",
      " * The form object is responsible for managing form items. For that, it takes",
      " * advantage of two existing qooxdoo classes.",
      " * The {@link qx.ui.form.Resetter} is used for resetting and the",
      " * {@link qx.ui.form.validation.Manager} is used for all validation purposes.",
      " *",
      " * The view code can be found in the used renderer ({@link qx.ui.form.renderer}).",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The form object is responsible for managing form items. For that, it takes\n advantage of two existing qooxdoo classes.\n The {@link qx.ui.form.Resetter} is used for resetting and the\n {@link qx.ui.form.validation.Manager} is used for all validation purposes.\n The view code can be found in the used renderer ({@link qx.ui.form.renderer}).</p>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 30,
        "column": 2,
        "index": 914
      },
      "end": {
        "line": 38,
        "column": 3,
        "index": 1131
      }
    }
  },
  "events": {
    "change": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired as soon as something changes in the form."
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired as soon as something changes in the form.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1208
        },
        "end": {
          "line": 42,
          "column": 33,
          "index": 1237
        }
      }
    }
  },
  "members": {
    "__groups": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1261
        },
        "end": {
          "line": 46,
          "column": 18,
          "index": 1275
        }
      },
      "appearsIn": []
    },
    "_validationManager": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1281
        },
        "end": {
          "line": 47,
          "column": 28,
          "index": 1305
        }
      },
      "appearsIn": []
    },
    "_groupCounter": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1311
        },
        "end": {
          "line": 48,
          "column": 20,
          "index": 1327
        }
      },
      "appearsIn": []
    },
    "_buttons": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1333
        },
        "end": {
          "line": 49,
          "column": 18,
          "index": 1347
        }
      },
      "appearsIn": []
    },
    "_buttonOptions": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1353
        },
        "end": {
          "line": 50,
          "column": 24,
          "index": 1373
        }
      },
      "appearsIn": []
    },
    "_resetter": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1379
        },
        "end": {
          "line": 51,
          "column": 19,
          "index": 1394
        }
      },
      "appearsIn": []
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a form item to the form including its internal",
          "     * {@link qx.ui.form.validation.Manager} and {@link qx.ui.form.Resetter}.",
          "     *",
          "     * *Hint:* The order of all add calls represent the order in the layout.",
          "     *",
          "     * @param item {qx.ui.form.IForm} A supported form item.",
          "     * @param label {String} The string, which should be used as label.",
          "     * @param validator {Function | qx.ui.form.validation.AsyncValidator ? null}",
          "     *   The validator which is used by the validation",
          "     *   {@link qx.ui.form.validation.Manager}.",
          "     * @param name {String?null} The name which is used by the data binding",
          "     *   controller {@link qx.data.controller.Form}.",
          "     * @param validatorContext {var?null} The context of the validator.",
          "     * @param options {Map?null} An additional map containing custom data which",
          "     *   will be available in your form renderer specific to the added item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a form item to the form including its internal\n {@link qx.ui.form.validation.Manager} and {@link qx.ui.form.Resetter}.\n<em>Hint:</em> The order of all add calls represent the order in the layout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.IForm} A supported form item.",
            "paramName": "item",
            "description": " A supported form item.",
            "type": "qx.ui.form.IForm"
          },
          {
            "name": "@param",
            "body": "label {String} The string, which should be used as label.",
            "paramName": "label",
            "description": " The string, which should be used as label.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "validator {Function | qx.ui.form.validation.AsyncValidator ? null}\n   The validator which is used by the validation\n   {@link qx.ui.form.validation.Manager}.",
            "paramName": "validator",
            "description": "\n   The validator which is used by the validation\n   {@link qx.ui.form.validation.Manager}.",
            "optional": true,
            "defaultValue": "null",
            "type": [
              "Function",
              "qx.ui.form.validation.AsyncValidator"
            ]
          },
          {
            "name": "@param",
            "body": "name {String?null} The name which is used by the data binding\n   controller {@link qx.data.controller.Form}.",
            "paramName": "name",
            "description": " The name which is used by the data binding\n   controller {@link qx.data.controller.Form}.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "validatorContext {var?null} The context of the validator.",
            "paramName": "validatorContext",
            "description": " The context of the validator.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "options {Map?null} An additional map containing custom data which\n   will be available in your form renderer specific to the added item.",
            "paramName": "options",
            "description": " An additional map containing custom data which\n   will be available in your form renderer specific to the added item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2506
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 3570
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.form.IForm"
        },
        {
          "name": "label",
          "type": "string"
        },
        {
          "name": "validator",
          "type": [
            "Function",
            "qx.ui.form.validation.AsyncValidator"
          ],
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "name",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "validatorContext",
          "type": "var",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "addGroupHeader": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a group header to the form.",
          "     *",
          "     * *Hint:* The order of all add calls represent the order in the layout.",
          "     *",
          "     * @param title {String} The title of the group header.",
          "     * @param options {Map?null} A special set of custom data which will be",
          "     *   given to the renderer.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a group header to the form.\n<em>Hint:</em> The order of all add calls represent the order in the layout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "title {String} The title of the group header.",
            "paramName": "title",
            "description": " The title of the group header.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map?null} A special set of custom data which will be\n   given to the renderer.",
            "paramName": "options",
            "description": " A special set of custom data which will be\n   given to the renderer.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3892
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 4235
        }
      },
      "type": "function",
      "params": [
        {
          "name": "title",
          "type": "string"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "addButton": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a button to the form.",
          "     *",
          "     * *Hint:* The order of all add calls represent the order in the layout.",
          "     *",
          "     * @param button {qx.ui.form.Button} The button to add.",
          "     * @param options {Map?null} An additional map containing custom data which",
          "     *   will be available in your form renderer specific to the added button.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a button to the form.\n<em>Hint:</em> The order of all add calls represent the order in the layout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "button {qx.ui.form.Button} The button to add.",
            "paramName": "button",
            "description": " The button to add.",
            "type": "qx.ui.form.Button"
          },
          {
            "name": "@param",
            "body": "options {Map?null} An additional map containing custom data which\n   will be available in your form renderer specific to the added button.",
            "paramName": "options",
            "description": " An additional map containing custom data which\n   will be available in your form renderer specific to the added button.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 4602
        },
        "end": {
          "line": 148,
          "column": 5,
          "index": 4782
        }
      },
      "type": "function",
      "params": [
        {
          "name": "button",
          "type": "qx.ui.form.Button"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "__isFirstAdd": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns whether something has already been added.",
          "     *",
          "     * @return {Boolean} true, if nothing has been added jet.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether something has already been added.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if nothing has been added jet.",
            "type": "boolean",
            "description": "true, if nothing has been added jet."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 4931
        },
        "end": {
          "line": 157,
          "column": 5,
          "index": 4994
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given item from the form.",
          "     *",
          "     * @param item {qx.ui.form.IForm} A supported form item.",
          "     * @return {Boolean} <code>true</code>, if the item could be removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given item from the form.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.IForm} A supported form item.",
            "paramName": "item",
            "description": " A supported form item.",
            "type": "qx.ui.form.IForm"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the item could be removed.",
            "type": "boolean",
            "description": "<code>true</code>, if the item could be removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 171,
          "column": 4,
          "index": 5393
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 6186
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.form.IForm"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "removeGroupHeader": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given group header from the form. All items in the group will be moved to",
          "     * another group (usually the previous group). If there is more than one group with",
          "     * the same title, only the first group will be removed.",
          "     *",
          "     * @param title {String} The title.",
          "     * @return {Boolean} <code>true</code>, if the header could be removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given group header from the form. All items in the group will be moved to\n another group (usually the previous group). If there is more than one group with\n the same title, only the first group will be removed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "title {String} The title.",
            "paramName": "title",
            "description": " The title.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the header could be removed.",
            "type": "boolean",
            "description": "<code>true</code>, if the header could be removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 6574
        },
        "end": {
          "line": 247,
          "column": 5,
          "index": 7936
        }
      },
      "type": "function",
      "params": [
        {
          "name": "title",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "removeButton": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given button from the form.",
          "     *",
          "     * @param button {qx.ui.form.Button} The button to remove.",
          "     * @return {Boolean} <code>true</code>, if the button could be removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given button from the form.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "button {qx.ui.form.Button} The button to remove.",
            "paramName": "button",
            "description": " The button to remove.",
            "type": "qx.ui.form.Button"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the button could be removed.",
            "type": "boolean",
            "description": "<code>true</code>, if the button could be removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 255,
          "column": 4,
          "index": 8152
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 8533
        }
      },
      "type": "function",
      "params": [
        {
          "name": "button",
          "type": "qx.ui.form.Button"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getItems": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all added items as a map.",
          "     *",
          "     * @return {Map} A map containing for every item an entry with its name.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all added items as a map.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map containing for every item an entry with its name.",
            "type": "Map<any, any>",
            "description": "A map containing for every item an entry with its name."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 274,
          "column": 4,
          "index": 8681
        },
        "end": {
          "line": 286,
          "column": 5,
          "index": 9038
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "getItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return an item by name.",
          "     *",
          "     * @param name {string} Item name.",
          "     * @return {qx.ui.form.IForm|null} The form item or null.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return an item by name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {string} Item name.",
            "paramName": "name",
            "description": " Item name.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.IForm|null} The form item or null.",
            "type": "qx.ui.form.IForm|null",
            "description": "The form item or null."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 294,
          "column": 4,
          "index": 9200
        },
        "end": {
          "line": 305,
          "column": 5,
          "index": 9495
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.ui.form.IForm|null"
      },
      "appearsIn": []
    },
    "reset": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Resets the form. This means reseting all form items and the validation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the form. This means reseting all form items and the validation.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 316,
          "column": 4,
          "index": 9793
        },
        "end": {
          "line": 319,
          "column": 5,
          "index": 9877
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MProperty"
      ]
    },
    "redefineResetter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Redefines the values used for resetting. It calls",
          "     * {@link qx.ui.form.Resetter#redefine} to get that.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Redefines the values used for resetting. It calls\n {@link qx.ui.form.Resetter#redefine} to get that.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 325,
          "column": 4,
          "index": 10014
        },
        "end": {
          "line": 327,
          "column": 5,
          "index": 10073
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "redefineResetterItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Redefines the value used for resetting of the given item. It calls",
          "     * {@link qx.ui.form.Resetter#redefineItem} to get that.",
          "     *",
          "     * @param item {qx.ui.core.Widget} The item to redefine.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Redefines the value used for resetting of the given item. It calls\n {@link qx.ui.form.Resetter#redefineItem} to get that.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} The item to redefine.",
            "paramName": "item",
            "description": " The item to redefine.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 335,
          "column": 4,
          "index": 10299
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 10374
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": []
    },
    "validate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Validates the form using the",
          "     * {@link qx.ui.form.validation.Manager#validate} method.",
          "     *",
          "     * @return {Boolean|null} The validation result.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates the form using the\n {@link qx.ui.form.validation.Manager#validate} method.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|null} The validation result.",
            "type": "Boolean|null",
            "description": "The validation result."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 351,
          "column": 4,
          "index": 10748
        },
        "end": {
          "line": 353,
          "column": 5,
          "index": 10815
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Boolean|null"
      },
      "appearsIn": []
    },
    "getValidationManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the internally used validation manager. If you want to do some",
          "     * enhanced validation tasks, you need to use the validation manager.",
          "     *",
          "     * @return {qx.ui.form.validation.Manager} The used manager.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the internally used validation manager. If you want to do some\n enhanced validation tasks, you need to use the validation manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.validation.Manager} The used manager.",
            "type": "qx.ui.form.validation.Manager",
            "description": "The used manager."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 361,
          "column": 4,
          "index": 11062
        },
        "end": {
          "line": 363,
          "column": 5,
          "index": 11130
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.form.validation.Manager"
      },
      "appearsIn": []
    },
    "getGroups": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Accessor method for the renderer which returns all added items in a",
          "     * array containing a map of all items:",
          "     * {title: title, items: [], labels: [], names: []}",
          "     *",
          "     * @return {Array} An array containing all necessary data for the renderer.",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Accessor method for the renderer which returns all added items in a\n array containing a map of all items:\n {title: title, items: [], labels: [], names: []}</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing all necessary data for the renderer.",
            "type": "Array<any>",
            "description": "An array containing all necessary data for the renderer."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 11631
        },
        "end": {
          "line": 381,
          "column": 5,
          "index": 11678
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "getButtons": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Accessor method for the renderer which returns all added buttons in an",
          "     * array.",
          "     * @return {Array} An array containing all added buttons.",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Accessor method for the renderer which returns all added buttons in an\n array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing all added buttons.",
            "type": "Array<any>",
            "description": "An array containing all added buttons."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 389,
          "column": 4,
          "index": 11872
        },
        "end": {
          "line": 391,
          "column": 5,
          "index": 11920
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "getButtonOptions": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Accessor method for the renderer which returns all added options for",
          "     * the buttons in an array.",
          "     * @return {Array} An array containing all added options for the buttons.",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Accessor method for the renderer which returns all added options for\n the buttons in an array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing all added options for the buttons.",
            "type": "Array<any>",
            "description": "An array containing all added options for the buttons."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 399,
          "column": 4,
          "index": 12146
        },
        "end": {
          "line": 401,
          "column": 5,
          "index": 12206
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "_createValidationManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and returns the used validation manager.",
          "     *",
          "     * @return {qx.ui.form.validation.Manager} The validation manager.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and returns the used validation manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.validation.Manager} The validation manager.",
            "type": "qx.ui.form.validation.Manager",
            "description": "The validation manager."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 414,
          "column": 4,
          "index": 12554
        },
        "end": {
          "line": 416,
          "column": 5,
          "index": 12638
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.form.validation.Manager"
      },
      "appearsIn": []
    },
    "_createResetter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and returns the used resetter.",
          "     *",
          "     * @return {qx.ui.form.Resetter} the resetter class.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and returns the used resetter.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.Resetter} the resetter class.",
            "type": "qx.ui.form.Resetter",
            "description": "the resetter class."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 423,
          "column": 4,
          "index": 12771
        },
        "end": {
          "line": 425,
          "column": 5,
          "index": 12836
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.form.Resetter"
      },
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 433,
        "column": 2,
        "index": 13031
      },
      "end": {
        "line": 438,
        "column": 3,
        "index": 13238
      }
    }
  },
  "statics": {},
  "properties": {}
}