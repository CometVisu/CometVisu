{
  "version": 0.3,
  "lastModified": 1717235172554,
  "lastModifiedIso": "2024-06-01T09:46:12.554Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/ToggleButton.js",
  "type": "class",
  "location": {
    "start": {
      "line": 25,
      "column": 0,
      "index": 674
    },
    "end": {
      "line": 360,
      "column": 3,
      "index": 9298
    }
  },
  "className": "qx.ui.form.ToggleButton",
  "jsdoc": {
    "raw": [
      "*",
      " * A toggle Button widget",
      " *",
      " * If the user presses the button by tapping on it pressing the enter or",
      " * space key, the button toggles between the pressed an not pressed states.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A toggle Button widget\n If the user presses the button by tapping on it pressing the enter or\n space key, the button toggles between the pressed an not pressed states.</p>"
      }
    ]
  },
  "superClass": "qx.ui.basic.Atom",
  "mixins": [
    "qx.ui.core.MExecutable"
  ],
  "interfaces": [
    "qx.ui.form.IBooleanForm",
    "qx.ui.form.IExecutable",
    "qx.ui.form.IRadioItem"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "label"
      },
      {
        "name": "icon"
      }
    ],
    "location": {
      "start": {
        "line": 47,
        "column": 2,
        "index": 1236
      },
      "end": {
        "line": 67,
        "column": 3,
        "index": 1926
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2154
        },
        "end": {
          "line": 80,
          "column": 5,
          "index": 2221
        }
      },
      "json": {
        "refine": true,
        "init": "toggle-button"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.basic.Atom",
        "qx.ui.core.Widget"
      ]
    },
    "focusable": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2246
        },
        "end": {
          "line": 86,
          "column": 5,
          "index": 2301
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "value": {
      "location": {
        "start": {
          "line": 89,
          "column": 4,
          "index": 2376
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 2510
        }
      },
      "json": {
        "check": "Boolean",
        "nullable": true,
        "event": "changeValue",
        "apply": "_applyValue",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "* The value of the widget. True, if the widget is checked. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The value of the widget. True, if the widget is checked.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "group": {
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2619
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 2720
        }
      },
      "json": {
        "check": "qx.ui.form.RadioGroup",
        "nullable": true,
        "apply": "_applyGroup"
      },
      "jsdoc": {
        "raw": [
          "* The assigned qx.ui.form.RadioGroup which handles the switching between registered buttons. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The assigned qx.ui.form.RadioGroup which handles the switching between registered buttons.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "triState": {
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3060
        },
        "end": {
          "line": 117,
          "column": 5,
          "index": 3171
        }
      },
      "json": {
        "check": "Boolean",
        "apply": "_applyTriState",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the button has a third state. Use this for tri-state checkboxes.",
          "     *",
          "     * When enabled, the value null of the property value stands for \"undetermined\",",
          "     * while true is mapped to \"enabled\" and false to \"disabled\" as usual. Note",
          "     * that the value property is set to false initially.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the button has a third state. Use this for tri-state checkboxes.\n When enabled, the value null of the property value stands for \"undetermined\",\n while true is mapped to \"enabled\" and false to \"disabled\" as usual. Note\n that the value property is set to false initially.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "executeBehavior": {
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3481
        },
        "end": {
          "line": 127,
          "column": 5,
          "index": 3560
        }
      },
      "json": {
        "check": [
          "cycle",
          "toggle"
        ],
        "init": "toggle"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The behavior when the button is executed (e.g. clicked). Only useful for tri-state checkboxes.",
          "     * If \"cycle\" is set, the button cycles through the states \"disabled\", \"undetermined\", and \"enabled\"",
          "     * If \"toggle\" is set, the button toggles between \"disabled\" and \"enabled\".",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The behavior when the button is executed (e.g. clicked). Only useful for tri-state checkboxes.\n If \"cycle\" is set, the button cycles through the states \"disabled\", \"undetermined\", and \"enabled\"\n If \"toggle\" is set, the button toggles between \"disabled\" and \"enabled\".</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "readOnly": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3621
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 3711
        }
      },
      "json": {
        "check": "Boolean",
        "event": "changeReadOnly",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the field is read only",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the field is read only</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "command": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1320
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1455
        }
      },
      "json": {
        "check": "qx.ui.command.Command",
        "apply": "_applyCommand",
        "event": "changeCommand",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * A command called if the {@link #execute} method is called, e.g. on a",
          "     * button tap.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A command called if the {@link #execute} method is called, e.g. on a\n button tap.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MExecutable"
      ],
      "mixin": "qx.ui.core.MExecutable"
    }
  },
  "members": {
    "_applyGroup": {
      "jsdoc": {
        "raw": [
          "* The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 147,
          "column": 4,
          "index": 4028
        },
        "end": {
          "line": 155,
          "column": 5,
          "index": 4163
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Changes the state of the button dependent on the checked value.",
          "     *",
          "     * @param value {Boolean} Current value",
          "     * @param old {Boolean} Previous value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Changes the state of the button dependent on the checked value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "old {Boolean} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "boolean"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 4351
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 4800
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        },
        {
          "name": "old",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "_applyTriState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply value property when triState property is modified.",
          "     *",
          "     * @param value {Boolean} Current value",
          "     * @param old {Boolean} Previous value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply value property when triState property is modified.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "old {Boolean} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "boolean"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 4981
        },
        "end": {
          "line": 187,
          "column": 5,
          "index": 5056
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        },
        {
          "name": "old",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "_onExecute": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the execute event.",
          "     *",
          "     * @param e {qx.event.type.Event} The execute event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the execute event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} The execute event.",
            "paramName": "e",
            "description": " The execute event.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 5181
        },
        "end": {
          "line": 212,
          "column": 5,
          "index": 5670
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "_onPointerOver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"pointerover\" event.",
          "     * <ul>",
          "     * <li>Adds state \"hovered\"</li>",
          "     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>",
          "     * </ul>",
          "     *",
          "     * @param e {qx.event.type.Pointer} Pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"pointerover\" event.\n </p>\n<ul>\n <li>Adds state \"hovered\"</li>\n <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 223,
          "column": 4,
          "index": 5955
        },
        "end": {
          "line": 237,
          "column": 5,
          "index": 6251
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onPointerOut": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"pointerout\" event.",
          "     * <ul>",
          "     * <li>Removes \"hovered\" state</li>",
          "     * <li>Adds \"abandoned\" state (if \"pressed\" state is set)</li>",
          "     * <li>Removes \"pressed\" state (if \"pressed\" state is set and button is not checked)",
          "     * </ul>",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"pointerout\" event.\n </p>\n<ul>\n <li>Removes \"hovered\" state</li>\n <li>Adds \"abandoned\" state (if \"pressed\" state is set)</li>\n <li>Removes \"pressed\" state (if \"pressed\" state is set and button is not checked)\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer event",
            "paramName": "e",
            "description": " pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 249,
          "column": 4,
          "index": 6603
        },
        "end": {
          "line": 263,
          "column": 5,
          "index": 6888
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onPointerDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"pointerdown\" event.",
          "     * <ul>",
          "     * <li>Activates capturing</li>",
          "     * <li>Removes \"abandoned\" state</li>",
          "     * <li>Adds \"pressed\" state</li>",
          "     * </ul>",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"pointerdown\" event.\n </p>\n<ul>\n <li>Activates capturing</li>\n <li>Removes \"abandoned\" state</li>\n <li>Adds \"pressed\" state</li>\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer event",
            "paramName": "e",
            "description": " pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 275,
          "column": 4,
          "index": 7160
        },
        "end": {
          "line": 290,
          "column": 5,
          "index": 7514
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onPointerUp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"pointerup\" event.",
          "     * <ul>",
          "     * <li>Releases capturing</li>",
          "     * <li>Removes \"pressed\" state (if not \"abandoned\" state is set and \"pressed\" state is set)</li>",
          "     * <li>Removes \"abandoned\" state (if set)</li>",
          "     * <li>Toggles {@link #value} (if state \"abandoned\" is not set and state \"pressed\" is set)</li>",
          "     * </ul>",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"pointerup\" event.\n </p>\n<ul>\n <li>Releases capturing</li>\n <li>Removes \"pressed\" state (if not \"abandoned\" state is set and \"pressed\" state is set)</li>\n <li>Removes \"abandoned\" state (if set)</li>\n <li>Toggles {@link #value} (if state \"abandoned\" is not set and state \"pressed\" is set)</li>\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer event",
            "paramName": "e",
            "description": " pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 303,
          "column": 4,
          "index": 7956
        },
        "end": {
          "line": 314,
          "column": 5,
          "index": 8228
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onKeyDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"keydown\" event.<br/>",
          "     * Removes \"abandoned\" and adds \"pressed\" state",
          "     * for the keys \"Enter\" or \"Space\"",
          "     *",
          "     * @param e {Event} Key event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"keydown\" event.<br/>\n Removes \"abandoned\" and adds \"pressed\" state\n for the keys \"Enter\" or \"Space\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 323,
          "column": 4,
          "index": 8432
        },
        "end": {
          "line": 335,
          "column": 5,
          "index": 8708
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "_onKeyUp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"keyup\" event.<br/>",
          "     * Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)",
          "     * for the keys \"Enter\" or \"Space\". It also toggles the {@link #value} property.",
          "     *",
          "     * @param e {Event} Key event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"keyup\" event.<br/>\n Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\n for the keys \"Enter\" or \"Space\". It also toggles the {@link #value} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 344,
          "column": 4,
          "index": 8979
        },
        "end": {
          "line": 358,
          "column": 5,
          "index": 9290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "__executableBindingIds": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1663
        },
        "end": {
          "line": 63,
          "column": 32,
          "index": 1691
        }
      },
      "appearsIn": [
        "qx.ui.core.MExecutable"
      ],
      "mixin": "qx.ui.core.MExecutable"
    },
    "__semaphore": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1697
        },
        "end": {
          "line": 64,
          "column": 22,
          "index": 1715
        }
      },
      "appearsIn": [
        "qx.ui.core.MExecutable"
      ],
      "mixin": "qx.ui.core.MExecutable"
    },
    "__executeListenerId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1721
        },
        "end": {
          "line": 65,
          "column": 29,
          "index": 1746
        }
      },
      "appearsIn": [
        "qx.ui.core.MExecutable"
      ],
      "mixin": "qx.ui.core.MExecutable"
    },
    "_bindableProperties": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Set of properties, which will by synced from the command to the",
          "     *    including widget",
          "     *",
          "     * @lint ignoreReferenceField(_bindableProperties)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Set of properties, which will by synced from the command to the\n    including widget"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_bindableProperties)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1941
        },
        "end": {
          "line": 77,
          "column": 6,
          "index": 2161
        }
      },
      "appearsIn": [
        "qx.ui.core.MExecutable"
      ],
      "mixin": "qx.ui.core.MExecutable"
    },
    "execute": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initiate the execute action.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initiate the execute action.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2220
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 2491
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MExecutable",
        "qx.ui.form.IExecutable"
      ],
      "mixin": "qx.ui.core.MExecutable"
    },
    "__onCommandExecute": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the execute event of the command.",
          "     *",
          "     * @param e {qx.event.type.Event} The execute event of the command.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the execute event of the command.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} The execute event of the command.",
            "paramName": "e",
            "description": " The execute event of the command.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 2646
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 2912
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MExecutable"
      ],
      "mixin": "qx.ui.core.MExecutable"
    },
    "_applyCommand": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 2941
        },
        "end": {
          "line": 173,
          "column": 5,
          "index": 4874
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MExecutable"
      ],
      "mixin": "qx.ui.core.MExecutable"
    }
  },
  "statics": {}
}