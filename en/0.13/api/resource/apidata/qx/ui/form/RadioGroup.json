{
  "version": 0.3,
  "lastModified": 1717235172090,
  "lastModifiedIso": "2024-06-01T09:46:12.090Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/RadioGroup.js",
  "type": "class",
  "location": {
    "start": {
      "line": 34,
      "column": 0,
      "index": 1131
    },
    "end": {
      "line": 524,
      "column": 3,
      "index": 13626
    }
  },
  "className": "qx.ui.form.RadioGroup",
  "jsdoc": {
    "raw": [
      "*",
      " * The radio group handles a collection of items from which only one item",
      " * can be selected. Selection another item will deselect the previously selected",
      " * item.",
      " *",
      " * This class is e.g. used to create radio groups or {@link qx.ui.form.RadioButton}",
      " * or {@link qx.ui.toolbar.RadioButton} instances.",
      " *",
      " * We also offer a widget for the same purpose which uses this class. So if",
      " * you like to act with a widget instead of a pure logic coupling of the",
      " * widgets, take a look at the {@link qx.ui.form.RadioButtonGroup} widget.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The radio group handles a collection of items from which only one item\n can be selected. Selection another item will deselect the previously selected\n item.\n This class is e.g. used to create radio groups or {@link qx.ui.form.RadioButton}\n or {@link qx.ui.toolbar.RadioButton} instances.\n We also offer a widget for the same purpose which uses this class. So if\n you like to act with a widget instead of a pure logic coupling of the\n widgets, take a look at the {@link qx.ui.form.RadioButtonGroup} widget.</p>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.ui.core.ISingleSelection",
    "qx.ui.form.IField",
    "qx.ui.form.IForm",
    "qx.ui.form.IModelSelection"
  ],
  "mixins": [
    "qx.ui.core.MSingleSelectionHandling",
    "qx.ui.form.MModelSelection"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "varargs"
      }
    ],
    "location": {
      "start": {
        "line": 55,
        "column": 2,
        "index": 1764
      },
      "end": {
        "line": 67,
        "column": 3,
        "index": 2036
      }
    }
  },
  "properties": {
    "groupedProperty": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2332
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2475
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyGroupedProperty",
        "event": "changeGroupedProperty",
        "init": "value"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The property name in each of the added widgets that is grouped",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The property name in each of the added widgets that is grouped</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "groupProperty": {
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2619
        },
        "end": {
          "line": 94,
          "column": 5,
          "index": 2720
        }
      },
      "json": {
        "check": "String",
        "event": "changeGroupProperty",
        "init": "group"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The property name in each of the added widgets that is informed of the",
          "     * RadioGroup object it is a member of",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The property name in each of the added widgets that is informed of the\n RadioGroup object it is a member of</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "enabled": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2785
        },
        "end": {
          "line": 104,
          "column": 5,
          "index": 2902
        }
      },
      "json": {
        "check": "Boolean",
        "apply": "_applyEnabled",
        "event": "changeEnabled",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the radio group is enabled",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the radio group is enabled</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "wrap": {
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3047
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 3101
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the selection should wrap around. This means that the successor of",
          "     * the last item is the first item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the selection should wrap around. This means that the successor of\n the last item is the first item.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "allowEmptySelection": {
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 3258
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 3370
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyAllowEmptySelection"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * If is set to <code>true</code> the selection could be empty,",
          "     * otherwise is always one <code>RadioButton</code> selected.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If is set to <code>true</code> the selection could be empty,\n otherwise is always one <code>RadioButton</code> selected.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "valid": {
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3491
        },
        "end": {
          "line": 134,
          "column": 5,
          "index": 3602
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyValid",
        "event": "changeValid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if the group at all is valid. All children will have the",
          "     * same state.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if the group at all is valid. All children will have the\n same state.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "required": {
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 3673
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 3763
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeRequired"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if the group is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if the group is required.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 3839
        },
        "end": {
          "line": 153,
          "column": 5,
          "index": 3974
        }
      },
      "json": {
        "check": "String",
        "init": "",
        "event": "changeInvalidMessage",
        "apply": "_applyInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which is shown in an invalid tooltip.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which is shown in an invalid tooltip.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4097
        },
        "end": {
          "line": 163,
          "column": 5,
          "index": 4209
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which is shown in an invalid tooltip if the {@link #required} is",
          "     * set to true.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which is shown in an invalid tooltip if the {@link #required} is\n set to true.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__items": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.form.IRadioItem[]} The items of the radio group "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.form.IRadioItem[]} The items of the radio group"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 4489
        },
        "end": {
          "line": 174,
          "column": 17,
          "index": 4502
        }
      },
      "appearsIn": []
    },
    "getItems": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get all managed items",
          "     *",
          "     * @return {qx.ui.form.IRadioItem[]} All managed items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get all managed items</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.IRadioItem[]} All managed items.",
            "type": "qx.ui.form.IRadioItem[]",
            "description": "All managed items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 4812
        },
        "end": {
          "line": 189,
          "column": 5,
          "index": 4857
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.form.IRadioItem[]"
      },
      "appearsIn": []
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add the passed items to the radio group.",
          "     *",
          "     * @param varargs {qx.ui.form.IRadioItem} A variable number of items to add.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add the passed items to the radio group.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {qx.ui.form.IRadioItem} A variable number of items to add.",
            "paramName": "varargs",
            "description": " A variable number of items to add.",
            "type": "qx.ui.form.IRadioItem"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 202,
          "column": 4,
          "index": 5206
        },
        "end": {
          "line": 242,
          "column": 5,
          "index": 6240
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "qx.ui.form.IRadioItem"
        }
      ],
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove an item from the radio group.",
          "     *",
          "     * @param item {qx.ui.form.IRadioItem} The item to remove.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an item from the radio group.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.IRadioItem} The item to remove.",
            "paramName": "item",
            "description": " The item to remove.",
            "type": "qx.ui.form.IRadioItem"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 249,
          "column": 4,
          "index": 6377
        },
        "end": {
          "line": 275,
          "column": 5,
          "index": 7163
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.form.IRadioItem"
        }
      ],
      "appearsIn": []
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array containing the group's items.",
          "     *",
          "     * @return {qx.ui.form.IRadioItem[]} The item array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array containing the group's items.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.IRadioItem[]} The item array",
            "type": "qx.ui.form.IRadioItem[]",
            "description": "The item array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 282,
          "column": 4,
          "index": 7303
        },
        "end": {
          "line": 284,
          "column": 5,
          "index": 7351
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.form.IRadioItem[]"
      },
      "appearsIn": []
    },
    "_onItemChangeChecked": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for <code>changeValue</code> event of every managed item.",
          "     *",
          "     * @param e {qx.event.type.Data} Data event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for <code>changeValue</code> event of every managed item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event",
            "paramName": "e",
            "description": " Data event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 297,
          "column": 4,
          "index": 7716
        },
        "end": {
          "line": 306,
          "column": 5,
          "index": 7999
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_applyGroupedProperty": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 315,
          "column": 4,
          "index": 8224
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 8843
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyInvalidMessage": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 340,
          "column": 4,
          "index": 8872
        },
        "end": {
          "line": 344,
          "column": 5,
          "index": 9024
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyValid": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 347,
          "column": 4,
          "index": 9053
        },
        "end": {
          "line": 351,
          "column": 5,
          "index": 9187
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyEnabled": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 354,
          "column": 4,
          "index": 9216
        },
        "end": {
          "line": 365,
          "column": 5,
          "index": 9536
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyAllowEmptySelection": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 368,
          "column": 4,
          "index": 9565
        },
        "end": {
          "line": 372,
          "column": 5,
          "index": 9696
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "selectNext": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Select the item following the given item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Select the item following the given item.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 383,
          "column": 4,
          "index": 9959
        },
        "end": {
          "line": 407,
          "column": 5,
          "index": 10521
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "selectPrevious": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Select the item previous the given item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Select the item previous the given item.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 412,
          "column": 4,
          "index": 10592
        },
        "end": {
          "line": 436,
          "column": 5,
          "index": 11171
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_getItems": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the items for the selection.",
          "     *",
          "     * @return {qx.ui.form.IRadioItem[]} Items to select.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the items for the selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.IRadioItem[]} Items to select.",
            "type": "qx.ui.form.IRadioItem[]",
            "description": "Items to select."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 449,
          "column": 4,
          "index": 11517
        },
        "end": {
          "line": 451,
          "column": 5,
          "index": 11566
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.form.IRadioItem[]"
      },
      "appearsIn": []
    },
    "_isAllowEmptySelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns if the selection could be empty or not.",
          "     *",
          "     * @return {Boolean} <code>true</code> If selection could be empty,",
          "     *    <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns if the selection could be empty or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> If selection could be empty,\n    <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>true</code> If selection could be empty,\n    <code>false</code> otherwise."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 459,
          "column": 4,
          "index": 11763
        },
        "end": {
          "line": 461,
          "column": 5,
          "index": 11838
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_isItemSelectable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns whether the item is selectable. In opposite to the default",
          "     * implementation (which checks for visible items) every radio button",
          "     * which is part of the group is selected even if it is currently not visible.",
          "     *",
          "     * @param item {qx.ui.form.IRadioItem} The item to check if its selectable.",
          "     * @return {Boolean} <code>true</code> if the item is part of the radio group",
          "     *    <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the item is selectable. In opposite to the default\n implementation (which checks for visible items) every radio button\n which is part of the group is selected even if it is currently not visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.form.IRadioItem} The item to check if its selectable.",
            "paramName": "item",
            "description": " The item to check if its selectable.",
            "type": "qx.ui.form.IRadioItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the item is part of the radio group\n    <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>true</code> if the item is part of the radio group\n    <code>false</code> otherwise."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 472,
          "column": 4,
          "index": 12301
        },
        "end": {
          "line": 474,
          "column": 5,
          "index": 12379
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.form.IRadioItem"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__onChangeSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for <code>changeSelection</code>.",
          "     *",
          "     * @param e {qx.event.type.Data} Data event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for <code>changeSelection</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 481,
          "column": 4,
          "index": 12513
        },
        "end": {
          "line": 498,
          "column": 5,
          "index": 12999
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "__isGroupFocused": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if this group is focused by checking focused state of each item",
          "     * @returns {Boolean} result",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if this group is focused by checking focused state of each item</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} result",
            "type": "boolean",
            "description": "result"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 504,
          "column": 4,
          "index": 13133
        },
        "end": {
          "line": 512,
          "column": 5,
          "index": 13375
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__manager": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.core.SingleSelectionManager} the single selection manager "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.core.SingleSelectionManager} the single selection manager"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1691
        },
        "end": {
          "line": 56,
          "column": 19,
          "index": 1706
        }
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * setValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @param item {null|qx.ui.core.Widget} Item to set as selected value.",
          "     * @returns {null|TypeError} The status of this operation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {null|qx.ui.core.Widget} Item to set as selected value.",
            "paramName": "item",
            "description": " Item to set as selected value.",
            "type": [
              "null",
              "qx.ui.core.Widget"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|TypeError} The status of this operation.",
            "type": "null|TypeError",
            "description": "The status of this operation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 2142
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2496
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": [
            "null",
            "qx.ui.core.Widget"
          ]
        }
      ],
      "returnType": {
        "type": "null|TypeError"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * getValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @returns {null|qx.ui.core.Widget} The currently selected widget or null if there is none.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|qx.ui.core.Widget} The currently selected widget or null if there is none.",
            "type": "null|qx.ui.core.Widget",
            "description": "The currently selected widget or null if there is none."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2699
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2773
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "null|qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * resetValue implements part of the {@link qx.ui.form.IField} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>resetValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2874
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2937
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "getSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array of currently selected items.",
          "     *",
          "     * Note: The result is only a set of selected items, so the order can",
          "     * differ from the sequence in which the items were added.",
          "     *",
          "     * @return {qx.ui.core.Widget[]} List of items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of currently selected items.\n Note: The result is only a set of selected items, so the order can\n differ from the sequence in which the items were added.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} List of items.",
            "type": "qx.ui.core.Widget[]",
            "description": "List of items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3216
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3386
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "setSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces current selection with the given items.",
          "     *",
          "     * @param items {qx.ui.core.Widget[]} Items to select.",
          "     * @throws {Error} if one of the items is not a child element and if",
          "     *    items contains more than one elements.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces current selection with the given items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "items {qx.ui.core.Widget[]} Items to select.",
            "paramName": "items",
            "description": " Items to select.",
            "type": "qx.ui.core.Widget[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the items is not a child element and if\n    items contains more than one elements.",
            "type": "Error",
            "description": " if one of the items is not a child element and if\n    items contains more than one elements."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3653
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 4077
        }
      },
      "type": "function",
      "params": [
        {
          "name": "items",
          "type": "qx.ui.core.Widget[]"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "resetSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clears the whole selection at once.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the whole selection at once.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 4143
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4210
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "isSelected": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the given item is currently selected.",
          "     *",
          "     * @param item {qx.ui.core.Widget} Any valid selectable item.",
          "     * @return {Boolean} Whether the item is selected.",
          "     * @throws {Error} if one of the items is not a child element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the given item is currently selected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Any valid selectable item.",
            "paramName": "item",
            "description": " Any valid selectable item.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item is selected.",
            "type": "boolean",
            "description": "Whether the item is selected."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the items is not a child element.",
            "type": "Error",
            "description": " if one of the items is not a child element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4489
        },
        "end": {
          "line": 161,
          "column": 5,
          "index": 4564
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "isSelectionEmpty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the selection is empty.",
          "     *",
          "     * @return {Boolean} Whether the selection is empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the selection is empty.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the selection is empty.",
            "type": "boolean",
            "description": "Whether the selection is empty."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 168,
          "column": 4,
          "index": 4690
        },
        "end": {
          "line": 170,
          "column": 5,
          "index": 4769
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "getSelectables": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all elements which are selectable.",
          "     *",
          "     * @param all {Boolean} true for all selectables, false for the",
          "     *   selectables the user can interactively select",
          "     * @return {qx.ui.core.Widget[]} The contained items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all elements which are selectable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "all {Boolean} true for all selectables, false for the\n   selectables the user can interactively select",
            "paramName": "all",
            "description": " true for all selectables, false for the\n   selectables the user can interactively select",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The contained items.",
            "type": "qx.ui.core.Widget[]",
            "description": "The contained items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5030
        },
        "end": {
          "line": 181,
          "column": 5,
          "index": 5111
        }
      },
      "type": "function",
      "params": [
        {
          "name": "all",
          "type": "boolean"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "_onChangeSelected": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for <code>changeSelected</code> event on single",
          "     * selection manager.",
          "     *",
          "     * @param e {qx.event.type.Data} Data event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for <code>changeSelected</code> event on single\n selection manager.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5481
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 5843
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "__getManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the selection manager if it is already exists, otherwise creates",
          "     * the manager.",
          "     *",
          "     * @return {qx.ui.core.SingleSelectionManager} Single selection manager.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the selection manager if it is already exists, otherwise creates\n the manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.SingleSelectionManager} Single selection manager.",
            "type": "qx.ui.core.SingleSelectionManager",
            "description": "Single selection manager."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 211,
          "column": 4,
          "index": 6049
        },
        "end": {
          "line": 237,
          "column": 5,
          "index": 6736
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.SingleSelectionManager"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "__modelSelection": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1376
        },
        "end": {
          "line": 48,
          "column": 26,
          "index": 1398
        }
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__inSelectionChange": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1404
        },
        "end": {
          "line": 49,
          "column": 30,
          "index": 1430
        }
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__onModelSelectionChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the selection change of the including class e.g. SelectBox,",
          "     * List, ...",
          "     * It sets the new modelSelection via {@link #setModelSelection}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the selection change of the including class e.g. SelectBox,\n List, …\n It sets the new modelSelection via {@link #setModelSelection}.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1619
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2327
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__onModelSelectionArrayChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener for the change of the internal model selection data array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener for the change of the internal model selection data array.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2425
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3468
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "getModelSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns always an array of the models of the selected items. If no",
          "     * item is selected or no model is given, the array will be empty.",
          "     *",
          "     * *CAREFUL!* The model selection can only work if every item item in the",
          "     * selection providing widget has a model property!",
          "     *",
          "     * @return {qx.data.Array} An array of the models of the selected items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns always an array of the models of the selected items. If no\n item is selected or no model is given, the array will be empty.\n<em>CAREFUL!</em> The model selection can only work if every item item in the\n selection providing widget has a model property!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} An array of the models of the selected items.",
            "type": "qx.data.Array",
            "description": "An array of the models of the selected items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3861
        },
        "end": {
          "line": 128,
          "column": 5,
          "index": 3924
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.data.Array"
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection",
        "qx.ui.form.IModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "setModelSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes the given models in the array and searches for the corresponding",
          "     * selectables. If an selectable does have that model attached, it will be",
          "     * selected.",
          "     *",
          "     * *Attention:* This method can have a time complexity of O(n^2)!",
          "     *",
          "     * *CAREFUL!* The model selection can only work if every item item in the",
          "     * selection providing widget has a model property!",
          "     *",
          "     * @param modelSelection {Array} An array of models, which should be",
          "     *   selected.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes the given models in the array and searches for the corresponding\n selectables. If an selectable does have that model attached, it will be\n selected.\n<em>Attention:</em> This method can have a time complexity of O(n^2)!\n<em>CAREFUL!</em> The model selection can only work if every item item in the\n selection providing widget has a model property!</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "modelSelection {Array} An array of models, which should be\n   selected.",
            "paramName": "modelSelection",
            "description": " An array of models, which should be\n   selected.",
            "type": "Array<any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 4438
        },
        "end": {
          "line": 164,
          "column": 5,
          "index": 5064
        }
      },
      "type": "function",
      "params": [
        {
          "name": "modelSelection",
          "type": "Array<any>"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MModelSelection",
        "qx.ui.form.IModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 521,
        "column": 2,
        "index": 13571
      },
      "end": {
        "line": 523,
        "column": 3,
        "index": 13622
      }
    }
  },
  "statics": {}
}