{
  "version": 0.3,
  "lastModified": 1717235168758,
  "lastModifiedIso": "2024-06-01T09:46:08.758Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/AbstractField.js",
  "type": "class",
  "location": {
    "start": {
      "line": 29,
      "column": 0,
      "index": 853
    },
    "end": {
      "line": 1091,
      "column": 3,
      "index": 31140
    }
  },
  "className": "qx.ui.form.AbstractField",
  "jsdoc": {
    "raw": [
      "*",
      " * This is a basic form field with common functionality for",
      " * {@link TextArea} and {@link TextField}.",
      " *",
      " * On every keystroke the value is synchronized with the",
      " * value of the textfield. Value changes can be monitored by listening to the",
      " * {@link #input} or {@link #changeValue} events, respectively.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This is a basic form field with common functionality for\n {@link TextArea} and {@link TextField}.\n On every keystroke the value is synchronized with the\n value of the textfield. Value changes can be monitored by listening to the\n {@link #input} or {@link #changeValue} events, respectively.</p>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "interfaces": [
    "qx.ui.form.IStringForm",
    "qx.ui.form.IForm"
  ],
  "mixins": [
    "qx.ui.form.MForm"
  ],
  "isSingleton": false,
  "abstract": true,
  "statics": {
    "__stylesheet": {
      "jsdoc": {
        "raw": [
          "* Stylesheet needed to style the native placeholder element. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stylesheet needed to style the native placeholder element.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 39,
          "column": 4,
          "index": 1126
        },
        "end": {
          "line": 39,
          "column": 22,
          "index": 1144
        }
      },
      "appearsIn": []
    },
    "__addedPlaceholderRules": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 41,
          "column": 4,
          "index": 1151
        },
        "end": {
          "line": 41,
          "column": 34,
          "index": 1181
        }
      },
      "appearsIn": []
    },
    "__addPlaceholderRules": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds the CSS rules needed to style the native placeholder element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the CSS rules needed to style the native placeholder element.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1278
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 3504
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "value"
      }
    ],
    "location": {
      "start": {
        "line": 120,
        "column": 2,
        "index": 3799
      },
      "end": {
        "line": 151,
        "column": 3,
        "index": 4837
      }
    }
  },
  "events": {
    "input": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * The event is fired on every keystroke modifying the value of the field.",
          "     *",
          "     * The method {@link qx.event.type.Data#getData} returns the",
          "     * current value of the text field.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The event is fired on every keystroke modifying the value of the field.\n The method {@link qx.event.type.Data#getData} returns the\n current value of the text field.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5246
        },
        "end": {
          "line": 166,
          "column": 31,
          "index": 5273
        }
      }
    },
    "changeValue": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * The event is fired each time the text field looses focus and the",
          "     * text field values has changed.",
          "     *",
          "     * If you change {@link #liveUpdate} to true, the changeValue event will",
          "     * be fired after every keystroke and not only after every focus loss. In",
          "     * that mode, the changeValue event is equal to the {@link #input} event.",
          "     *",
          "     * The method {@link qx.event.type.Data#getData} returns the",
          "     * current text value of the field.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The event is fired each time the text field looses focus and the\n text field values has changed.\n If you change {@link #liveUpdate} to true, the changeValue event will\n be fired after every keystroke and not only after every focus loss. In\n that mode, the changeValue event is equal to the {@link #input} event.\n The method {@link qx.event.type.Data#getData} returns the\n current text value of the field.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5758
        },
        "end": {
          "line": 179,
          "column": 37,
          "index": 5791
        }
      }
    }
  },
  "properties": {
    "textAlign": {
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 6050
        },
        "end": {
          "line": 197,
          "column": 5,
          "index": 6186
        }
      },
      "json": {
        "check": [
          "left",
          "center",
          "right"
        ],
        "nullable": true,
        "themeable": true,
        "apply": "_applyTextAlign"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Alignment of the text",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alignment of the text</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "readOnly": {
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 6235
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 6356
        }
      },
      "json": {
        "check": "Boolean",
        "apply": "_applyReadOnly",
        "event": "changeReadOnly",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "* Whether the field is read only "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the field is read only</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "selectable": {
      "location": {
        "start": {
          "line": 208,
          "column": 4,
          "index": 6381
        },
        "end": {
          "line": 211,
          "column": 5,
          "index": 6437
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "focusable": {
      "location": {
        "start": {
          "line": 214,
          "column": 4,
          "index": 6462
        },
        "end": {
          "line": 217,
          "column": 5,
          "index": 6517
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "maxLength": {
      "location": {
        "start": {
          "line": 220,
          "column": 4,
          "index": 6601
        },
        "end": {
          "line": 224,
          "column": 5,
          "index": 6704
        }
      },
      "json": {
        "apply": "_applyMaxLength",
        "check": "PositiveInteger",
        "init": "Infinity"
      },
      "jsdoc": {
        "raw": [
          "* Maximal number of characters that can be entered in the TextArea. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Maximal number of characters that can be entered in the TextArea.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "liveUpdate": {
      "location": {
        "start": {
          "line": 231,
          "column": 4,
          "index": 6899
        },
        "end": {
          "line": 234,
          "column": 5,
          "index": 6960
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the {@link #changeValue} event should be fired on every key",
          "     * input. If set to true, the changeValue event is equal to the",
          "     * {@link #input} event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the {@link #changeValue} event should be fired on every key\n input. If set to true, the changeValue event is equal to the\n {@link #input} event.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "liveUpdateOnRxMatch": {
      "location": {
        "start": {
          "line": 241,
          "column": 4,
          "index": 7180
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 7283
        }
      },
      "json": {
        "check": "RegExp",
        "transform": "_string2RegExp"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Fire a {@link #changeValue} event whenever the content of the",
          "     * field matches the given regular expression. Accepts both regular",
          "     * expression objects as well as strings for input.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a {@link #changeValue} event whenever the content of the\n field matches the given regular expression. Accepts both regular\n expression objects as well as strings for input.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "placeholder": {
      "location": {
        "start": {
          "line": 252,
          "column": 4,
          "index": 7468
        },
        "end": {
          "line": 256,
          "column": 5,
          "index": 7566
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "apply": "_applyPlaceholder"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * String value which will be shown as a hint if the field is all of:",
          "     * unset, unfocused and enabled. Set to null to not show a placeholder",
          "     * text.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>String value which will be shown as a hint if the field is all of:\n unset, unfocused and enabled. Set to null to not show a placeholder\n text.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "filter": {
      "location": {
        "start": {
          "line": 267,
          "column": 4,
          "index": 8032
        },
        "end": {
          "line": 271,
          "column": 5,
          "index": 8109
        }
      },
      "json": {
        "check": "RegExp",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * RegExp responsible for filtering the value of the textfield. the RegExp",
          "     * gives the range of valid values.",
          "     * Note: The regexp specified is applied to each character in turn,",
          "     * NOT to the entire string. So only regular expressions matching a",
          "     * single character make sense in the context.",
          "     * The following example only allows digits in the textfield.",
          "     * <pre class='javascript'>field.setFilter(/[0-9]/);</pre>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>RegExp responsible for filtering the value of the textfield. the RegExp\n gives the range of valid values.\n Note: The regexp specified is applied to each character in turn,\n NOT to the entire string. So only regular expressions matching a\n single character make sense in the context.\n The following example only allows digits in the textfield.\n </p>\n<pre class='javascript'>field.setFilter(/[0-9]/);</pre>"
          }
        ]
      },
      "appearsIn": []
    },
    "valid": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 956
        },
        "end": {
          "line": 43,
          "column": 5,
          "index": 1067
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyValid",
        "event": "changeValid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is valid. If a widget is invalid, an invalid",
          "     * state will be set.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is valid. If a widget is invalid, an invalid\n state will be set.</p>"
          }
        ]
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    },
    "required": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1137
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeRequired"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is required.</p>"
          }
        ]
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1325
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1447
        }
      },
      "json": {
        "nullable": true,
        "check": "String",
        "event": "changeInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an tooltip if the widget is invalid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an tooltip if the widget is invalid.</p>"
          }
        ]
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 1575
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 1695
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeRequiredInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an invalid tooltip if the {@link #required} is",
          "     * set to true.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an invalid tooltip if the {@link #required} is\n set to true.</p>"
          }
        ]
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    }
  },
  "members": {
    "__nullValue": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 8370
        },
        "end": {
          "line": 281,
          "column": 21,
          "index": 8387
        }
      },
      "appearsIn": []
    },
    "_placeholder": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 282,
          "column": 4,
          "index": 8393
        },
        "end": {
          "line": 282,
          "column": 22,
          "index": 8411
        }
      },
      "appearsIn": []
    },
    "__oldValue": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 283,
          "column": 4,
          "index": 8417
        },
        "end": {
          "line": 283,
          "column": 20,
          "index": 8433
        }
      },
      "appearsIn": []
    },
    "__oldInputValue": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 8439
        },
        "end": {
          "line": 284,
          "column": 25,
          "index": 8460
        }
      },
      "appearsIn": []
    },
    "__useQxPlaceholder": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 285,
          "column": 4,
          "index": 8466
        },
        "end": {
          "line": 285,
          "column": 28,
          "index": 8490
        }
      },
      "appearsIn": []
    },
    "__font": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 286,
          "column": 4,
          "index": 8496
        },
        "end": {
          "line": 286,
          "column": 16,
          "index": 8508
        }
      },
      "appearsIn": []
    },
    "__webfontListenerId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 287,
          "column": 4,
          "index": 8514
        },
        "end": {
          "line": 287,
          "column": 29,
          "index": 8539
        }
      },
      "appearsIn": []
    },
    "getFocusElement": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 296,
          "column": 4,
          "index": 8756
        },
        "end": {
          "line": 301,
          "column": 5,
          "index": 8865
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_createInputElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates the input element. Derived classes may override this",
          "     * method, to create different input elements.",
          "     *",
          "     * @return {qx.html.Input} a new input element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the input element. Derived classes may override this\n method, to create different input elements.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Input} a new input element.",
            "type": "qx.html.Input",
            "description": "a new input element."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 309,
          "column": 4,
          "index": 9066
        },
        "end": {
          "line": 311,
          "column": 5,
          "index": 9135
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Input"
      },
      "appearsIn": []
    },
    "renderLayout": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 314,
          "column": 4,
          "index": 9160
        },
        "end": {
          "line": 373,
          "column": 5,
          "index": 10973
        }
      },
      "type": "function",
      "params": [
        {
          "name": "left"
        },
        {
          "name": "top"
        },
        {
          "name": "width"
        },
        {
          "name": "height"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_renderContentElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Hook into {@link qx.ui.form.AbstractField#renderLayout} method.",
          "     * Called after the contentElement has a width and an innerWidth.",
          "     *",
          "     * Note: This was introduced to fix BUG#1585",
          "     *",
          "     * @param innerHeight {Integer} The inner height of the element.",
          "     * @param element {Element} The element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hook into {@link qx.ui.form.AbstractField#renderLayout} method.\n Called after the contentElement has a width and an innerWidth.\n Note: This was introduced to fix BUG#1585</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "innerHeight {Integer} The inner height of the element.",
            "paramName": "innerHeight",
            "description": " The inner height of the element.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "element {Element} The element.",
            "paramName": "element",
            "description": " The element.",
            "type": "Element"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 11314
        },
        "end": {
          "line": 386,
          "column": 5,
          "index": 11397
        }
      },
      "type": "function",
      "params": [
        {
          "name": "innerHeight",
          "type": "Integer"
        },
        {
          "name": "element",
          "type": "Element"
        }
      ],
      "appearsIn": []
    },
    "_createContentElement": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 389,
          "column": 4,
          "index": 11422
        },
        "end": {
          "line": 418,
          "column": 5,
          "index": 12307
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyEnabled": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 421,
          "column": 4,
          "index": 12332
        },
        "end": {
          "line": 437,
          "column": 5,
          "index": 12822
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "__textSize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @lint ignoreReferenceField(__textSize)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__textSize)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 443,
          "column": 4,
          "index": 12917
        },
        "end": {
          "line": 446,
          "column": 5,
          "index": 12970
        }
      },
      "appearsIn": []
    },
    "_getContentHint": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 449,
          "column": 4,
          "index": 12995
        },
        "end": {
          "line": 454,
          "column": 5,
          "index": 13132
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyFont": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 457,
          "column": 4,
          "index": 13157
        },
        "end": {
          "line": 520,
          "column": 5,
          "index": 15140
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyTextColor": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 523,
          "column": 4,
          "index": 15165
        },
        "end": {
          "line": 532,
          "column": 5,
          "index": 15432
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyMaxLength": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 535,
          "column": 4,
          "index": 15461
        },
        "end": {
          "line": 541,
          "column": 5,
          "index": 15668
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_string2RegExp": {
      "jsdoc": {
        "raw": [
          " property transform"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 544,
          "column": 4,
          "index": 15701
        },
        "end": {
          "line": 549,
          "column": 5,
          "index": 15840
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "tabFocus": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 552,
          "column": 4,
          "index": 15865
        },
        "end": {
          "line": 556,
          "column": 5,
          "index": 15936
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_getTextSize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the text size.",
          "     * @return {Map} The text size.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the text size.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The text size.",
            "type": "Map<any, any>",
            "description": "The text size."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 562,
          "column": 4,
          "index": 16025
        },
        "end": {
          "line": 564,
          "column": 5,
          "index": 16077
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "_onHtmlInput": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for native input events. Redirects the event",
          "     * to the widget. Also checks for the filter and max length.",
          "     *",
          "     * @param e {qx.event.type.Data} Input event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for native input events. Redirects the event\n to the widget. Also checks for the filter and max length.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Input event",
            "paramName": "e",
            "description": " Input event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 578,
          "column": 4,
          "index": 16476
        },
        "end": {
          "line": 616,
          "column": 5,
          "index": 17696
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onWebFontStatusChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Triggers text size recalculation after a web font was loaded",
          "     *",
          "     * @param ev {qx.event.type.Data} \"changeStatus\" event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Triggers text size recalculation after a web font was loaded</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} \"changeStatus\" event",
            "paramName": "ev",
            "description": " \"changeStatus\" event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 623,
          "column": 4,
          "index": 17853
        },
        "end": {
          "line": 629,
          "column": 5,
          "index": 18090
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "__fireChangeValueEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles the firing of the changeValue event including the local cache",
          "     * for sending the old value in the event.",
          "     *",
          "     * @param value {String} The new value.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles the firing of the changeValue event including the local cache\n for sending the old value in the event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} The new value.",
            "paramName": "value",
            "description": " The new value.",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 637,
          "column": 4,
          "index": 18288
        },
        "end": {
          "line": 646,
          "column": 5,
          "index": 18537
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the value of the textfield to the given value.",
          "     *",
          "     * @param value {String} The new value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the value of the textfield to the given value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} The new value",
            "paramName": "value",
            "description": " The new value",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 659,
          "column": 4,
          "index": 18870
        },
        "end": {
          "line": 698,
          "column": 5,
          "index": 20077
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "appearsIn": [
        "qx.ui.form.IStringForm",
        "qx.ui.form.IField"
      ]
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current value of the textfield.",
          "     *",
          "     * @return {String|null} The current value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current value of the textfield.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} The current value",
            "type": "String|null",
            "description": "The current value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 705,
          "column": 4,
          "index": 20205
        },
        "end": {
          "line": 709,
          "column": 5,
          "index": 20336
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "String|null"
      },
      "appearsIn": [
        "qx.ui.form.IStringForm",
        "qx.ui.form.IField"
      ]
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Resets the value to the default",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the value to the default</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 714,
          "column": 4,
          "index": 20398
        },
        "end": {
          "line": 716,
          "column": 5,
          "index": 20445
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.IStringForm",
        "qx.ui.form.IField"
      ]
    },
    "_onChangeContent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for change event of content element",
          "     *",
          "     * @param e {qx.event.type.Data} Incoming change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for change event of content element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Incoming change event",
            "paramName": "e",
            "description": " Incoming change event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 723,
          "column": 4,
          "index": 20592
        },
        "end": {
          "line": 726,
          "column": 5,
          "index": 20714
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "getTextSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current selection.",
          "     * This method only works if the widget is already created and",
          "     * added to the document.",
          "     *",
          "     * @return {String|null}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current selection.\n This method only works if the widget is already created and\n added to the document.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null}",
            "type": "String|null",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 741,
          "column": 4,
          "index": 21113
        },
        "end": {
          "line": 743,
          "column": 5,
          "index": 21197
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "String|null"
      },
      "appearsIn": []
    },
    "getTextSelectionLength": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current selection length.",
          "     * This method only works if the widget is already created and",
          "     * added to the document.",
          "     *",
          "     * @return {Integer|null}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current selection length.\n This method only works if the widget is already created and\n added to the document.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 752,
          "column": 4,
          "index": 21399
        },
        "end": {
          "line": 754,
          "column": 5,
          "index": 21495
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "getTextSelectionStart": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the start of the text selection",
          "     *",
          "     * @return {Integer|null} Start of selection or null if not available",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the start of the text selection</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null} Start of selection or null if not available",
            "type": "Integer|null",
            "description": "Start of selection or null if not available"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 761,
          "column": 4,
          "index": 21646
        },
        "end": {
          "line": 763,
          "column": 5,
          "index": 21740
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "getTextSelectionEnd": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the end of the text selection",
          "     *",
          "     * @return {Integer|null} End of selection or null if not available",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the end of the text selection</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null} End of selection or null if not available",
            "type": "Integer|null",
            "description": "End of selection or null if not available"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 770,
          "column": 4,
          "index": 21887
        },
        "end": {
          "line": 772,
          "column": 5,
          "index": 21977
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "setTextSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the selection to the given start and end (zero-based).",
          "     * If no end value is given the selection will extend to the",
          "     * end of the textfield's content.",
          "     * This method only works if the widget is already created and",
          "     * added to the document.",
          "     *",
          "     * @param start {Integer} start of the selection (zero-based)",
          "     * @param end {Integer} end of the selection",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the selection to the given start and end (zero-based).\n If no end value is given the selection will extend to the\n end of the textfield's content.\n This method only works if the widget is already created and\n added to the document.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} start of the selection (zero-based)",
            "paramName": "start",
            "description": " start of the selection (zero-based)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "end {Integer} end of the selection",
            "paramName": "end",
            "description": " end of the selection",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 784,
          "column": 4,
          "index": 22389
        },
        "end": {
          "line": 786,
          "column": 5,
          "index": 22486
        }
      },
      "type": "function",
      "params": [
        {
          "name": "start",
          "type": "Integer"
        },
        {
          "name": "end",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "clearTextSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clears the current selection.",
          "     * This method only works if the widget is already created and",
          "     * added to the document.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the current selection.\n This method only works if the widget is already created and\n added to the document.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 794,
          "column": 4,
          "index": 22650
        },
        "end": {
          "line": 796,
          "column": 5,
          "index": 22731
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "selectAllText": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Selects the whole content",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Selects the whole content</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 802,
          "column": 4,
          "index": 22794
        },
        "end": {
          "line": 804,
          "column": 5,
          "index": 22849
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "setLayoutParent": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 813,
          "column": 4,
          "index": 23075
        },
        "end": {
          "line": 825,
          "column": 5,
          "index": 23466
        }
      },
      "type": "function",
      "params": [
        {
          "name": "parent"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_showPlaceholder": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper to show the placeholder text in the field. It checks for all",
          "     * states and possible conditions and shows the placeholder only if allowed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to show the placeholder text in the field. It checks for all\n states and possible conditions and shows the placeholder only if allowed.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 831,
          "column": 4,
          "index": 23645
        },
        "end": {
          "line": 847,
          "column": 5,
          "index": 24162
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onPointerDownPlaceholder": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the fake placeholder",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the fake placeholder</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 852,
          "column": 4,
          "index": 24220
        },
        "end": {
          "line": 859,
          "column": 5,
          "index": 24367
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_removePlaceholder": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper to remove the placeholder. Deletes the placeholder text from the",
          "     * field and removes the state.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to remove the placeholder. Deletes the placeholder text from the\n field and removes the state.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 865,
          "column": 4,
          "index": 24505
        },
        "end": {
          "line": 872,
          "column": 5,
          "index": 24761
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_syncPlaceholder": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates the placeholder text with the DOM",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the placeholder text with the DOM</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 877,
          "column": 4,
          "index": 24833
        },
        "end": {
          "line": 881,
          "column": 5,
          "index": 25016
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_getPlaceholderElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the placeholder label and creates it if necessary.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the placeholder label and creates it if necessary.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 886,
          "column": 4,
          "index": 25105
        },
        "end": {
          "line": 907,
          "column": 5,
          "index": 25775
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onChangeLocale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Locale change event handler",
          "     *",
          "     * @signature function(e)",
          "     * @param e {Event} the change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locale change event handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event",
            "paramName": "e",
            "description": " the change event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 915,
          "column": 4,
          "index": 25911
        },
        "end": {
          "line": 924,
          "column": 6,
          "index": 26174
        }
      },
      "appearsIn": []
    },
    "_onChangeTheme": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 927,
          "column": 4,
          "index": 26199
        },
        "end": {
          "line": 939,
          "column": 5,
          "index": 26722
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_validateInput": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Validates the the input value.",
          "     *",
          "     * @param value {Object} The value to check",
          "     * @returns The checked value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates the the input value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The value to check",
            "paramName": "value",
            "description": " The value to check",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "The checked value"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 947,
          "column": 4,
          "index": 26872
        },
        "end": {
          "line": 969,
          "column": 5,
          "index": 27509
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {},
      "appearsIn": []
    },
    "_applyPlaceholder": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 978,
          "column": 4,
          "index": 27743
        },
        "end": {
          "line": 1015,
          "column": 5,
          "index": 29299
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyTextAlign": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1018,
          "column": 4,
          "index": 29328
        },
        "end": {
          "line": 1020,
          "column": 5,
          "index": 29424
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyReadOnly": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1023,
          "column": 4,
          "index": 29453
        },
        "end": {
          "line": 1035,
          "column": 5,
          "index": 29764
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "setEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the enabled state of the widget.",
          "     *",
          "     * @param enabled {Boolean} The enabled state.",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the enabled state of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "enabled {Boolean} The enabled state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1762
        },
        "end": {
          "line": 65,
          "column": 5,
          "index": 1825
        }
      },
      "type": "function",
      "params": [
        {
          "name": "enabled"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the current set enabled state.",
          "     *",
          "     * @return {Boolean} If the widget is enabled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the current set enabled state.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the widget is enabled."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 1951
        },
        "end": {
          "line": 72,
          "column": 19,
          "index": 1966
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "setRequired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the required state of a widget.",
          "     *",
          "     * @param required {Boolean} A flag signaling if the widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the required state of a widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "required {Boolean} A flag signaling if the widget is required."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2316
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2381
        }
      },
      "type": "function",
      "params": [
        {
          "name": "required"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getRequired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the current required state of the widget.",
          "     *",
          "     * @return {Boolean} True, if the widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the current required state of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} True, if the widget is required."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2525
        },
        "end": {
          "line": 94,
          "column": 20,
          "index": 2541
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "setValid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the valid state of the widget.",
          "     *",
          "     * @param valid {Boolean} The valid state of the widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the valid state of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "valid {Boolean} The valid state of the widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 2871
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 2930
        }
      },
      "type": "function",
      "params": [
        {
          "name": "valid"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getValid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the valid state of the widget.",
          "     *",
          "     * @return {Boolean} If the state of the widget is valid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the valid state of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the state of the widget is valid."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3068
        },
        "end": {
          "line": 116,
          "column": 17,
          "index": 3081
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "setInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the invalid message of the widget.",
          "     *",
          "     * @param message {String} The invalid message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the invalid message of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message {String} The invalid message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3416
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 3486
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the invalid message of the widget.",
          "     *",
          "     * @return {String} The current set message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the invalid message of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The current set message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3615
        },
        "end": {
          "line": 138,
          "column": 26,
          "index": 3637
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "setRequiredInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the invalid message if required of the widget.",
          "     *",
          "     * @param message {String} The invalid message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the invalid message if required of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "message {String} The invalid message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 3993
        },
        "end": {
          "line": 153,
          "column": 5,
          "index": 4071
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message"
        }
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "getRequiredInvalidMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the invalid message if required of the widget.",
          "     *",
          "     * @return {String} The current set message.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the invalid message if required of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The current set message."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 4212
        },
        "end": {
          "line": 160,
          "column": 34,
          "index": 4242
        }
      },
      "type": "function",
      "params": [],
      "abstract": true,
      "fromInterface": "qx.ui.form.IForm",
      "appearsIn": [
        "qx.ui.form.IForm"
      ]
    },
    "_applyValid": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1739
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 1840
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    },
    "__onChangeLocale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Locale change event handler",
          "     *",
          "     * @signature function(e)",
          "     * @param e {Event} the change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locale change event handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 1976
        },
        "end": {
          "line": 102,
          "column": 6,
          "index": 2570
        }
      },
      "mixin": "qx.ui.form.MForm",
      "appearsIn": [
        "qx.ui.form.MForm"
      ]
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 1060,
        "column": 2,
        "index": 30369
      },
      "end": {
        "line": 1090,
        "column": 3,
        "index": 31136
      }
    }
  }
}