{
  "version": 0.3,
  "lastModified": 1735383688313,
  "lastModifiedIso": "2024-12-28T11:01:28.313Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/SelectBox.js",
  "type": "class",
  "location": {
    "start": {
      "line": 45,
      "column": 0,
      "index": 1449
    },
    "end": {
      "line": 463,
      "column": 3,
      "index": 13371
    }
  },
  "className": "qx.ui.form.SelectBox",
  "jsdoc": {
    "raw": [
      "*",
      " * A form widget which allows a single selection. Looks somewhat like",
      " * a normal button, but opens a list of items to select when tapping on it.",
      " *",
      " * Keep in mind that the SelectBox widget has always a selected item (due to the",
      " * single selection mode). Right after adding the first item a <code>changeSelection</code>",
      " * event is fired.",
      " *",
      " * <pre class='javascript'>",
      " * var selectBox = new qx.ui.form.SelectBox();",
      " *",
      " * selectBox.addListener(\"changeSelection\", function(e) {",
      " *   // ...",
      " * });",
      " *",
      " * // now the 'changeSelection' event is fired",
      " * selectBox.add(new qx.ui.form.ListItem(\"Item 1\"));",
      " * </pre>",
      " *",
      " * @childControl spacer {qx.ui.core.Spacer} flexible spacer widget",
      " * @childControl atom {qx.ui.basic.Atom} shows the text and icon of the content",
      " * @childControl arrow {qx.ui.basic.Image} shows the arrow to open the popup",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A form widget which allows a single selection. Looks somewhat like\n a normal button, but opens a list of items to select when tapping on it.\n Keep in mind that the SelectBox widget has always a selected item (due to the\n single selection mode). Right after adding the first item a <code>changeSelection</code>\n event is fired.\n </p>\n<pre class='javascript'>\n var selectBox = new qx.ui.form.SelectBox();\n selectBox.addListener(\"changeSelection\", function(e) {\n\n });\n\n selectBox.add(new qx.ui.form.ListItem(\"Item 1\"));\n </pre>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "spacer {qx.ui.core.Spacer} flexible spacer widget"
      },
      {
        "name": "@childControl",
        "body": "atom {qx.ui.basic.Atom} shows the text and icon of the content"
      },
      {
        "name": "@childControl",
        "body": "arrow {qx.ui.basic.Image} shows the arrow to open the popup"
      }
    ]
  },
  "superClass": "qx.ui.form.AbstractSelectBox",
  "interfaces": [
    "qx.ui.core.ISingleSelection",
    "qx.ui.form.IModelSelection",
    "qx.ui.form.IField"
  ],
  "mixins": [
    "qx.ui.core.MSingleSelectionHandling",
    "qx.ui.form.MModelSelection"
  ],
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 61,
        "column": 2,
        "index": 1908
      },
      "end": {
        "line": 75,
        "column": 3,
        "index": 2388
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2617
        },
        "end": {
          "line": 88,
          "column": 5,
          "index": 2680
        }
      },
      "json": {
        "refine": true,
        "init": "selectbox"
      },
      "jsdoc": {
        "raw": [
          "*@override"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "rich": {
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2687
        },
        "end": {
          "line": 94,
          "column": 5,
          "index": 2769
        }
      },
      "json": {
        "init": false,
        "check": "Boolean",
        "apply": "_applyRich"
      },
      "jsdoc": null,
      "appearsIn": []
    }
  },
  "members": {
    "__preSelectedItem": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.basic.Atom} instance "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.basic.Atom} instance"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 3075
        },
        "end": {
          "line": 105,
          "column": 27,
          "index": 3098
        }
      },
      "appearsIn": []
    },
    "_applyRich": {
      "jsdoc": {
        "raw": [
          "",
          "    ---------------------------------------------------------------------------",
          "      WIDGET API",
          "    ---------------------------------------------------------------------------",
          "    "
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 3297
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3383
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "oldValue"
        }
      ],
      "appearsIn": []
    },
    "_defaultFormat": {
      "jsdoc": {
        "raw": [
          "*@override"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3409
        },
        "end": {
          "line": 126,
          "column": 5,
          "index": 3619
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item"
        }
      ],
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          "*@override"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3645
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 4361
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox",
        "qx.ui.core.Widget"
      ]
    },
    "_createQxObjectImpl": {
      "jsdoc": {
        "raw": [
          "*@overload "
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4388
        },
        "end": {
          "line": 170,
          "column": 5,
          "index": 4748
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        }
      ],
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MObjectId"
      ]
    },
    "_forwardStates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @lint ignoreReferenceField(_forwardStates)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 4840
        },
        "end": {
          "line": 178,
          "column": 5,
          "index": 4883
        }
      },
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_getItems": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the list items for the selection.",
          "     *",
          "     * @return {qx.ui.basic.Atom[]} List items to select.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list items for the selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.basic.Atom[]} List items to select.",
            "type": "qx.ui.basic.Atom[]",
            "description": "List items to select."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 191,
          "column": 4,
          "index": 5234
        },
        "end": {
          "line": 193,
          "column": 5,
          "index": 5309
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.basic.Atom[]"
      },
      "appearsIn": []
    },
    "_isAllowEmptySelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns if the selection could be empty or not.",
          "     *",
          "     * @return {Boolean} <code>true</code> If selection could be empty,",
          "     *    <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns if the selection could be empty or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> If selection could be empty,\n    <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>true</code> If selection could be empty,\n    <code>false</code> otherwise."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 201,
          "column": 4,
          "index": 5506
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 5609
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__onChangeSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for <code>changeSelection</code>.",
          "     *",
          "     * @param e {qx.event.type.Data} Data event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for <code>changeSelection</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 5743
        },
        "end": {
          "line": 234,
          "column": 5,
          "index": 6439
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "__updateIcon": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the icon inside the list to match the selected ListItem.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the icon inside the list to match the selected ListItem.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 239,
          "column": 4,
          "index": 6531
        },
        "end": {
          "line": 244,
          "column": 5,
          "index": 6782
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__updateLabel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the label inside the list to match the selected ListItem.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the label inside the list to match the selected ListItem.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 249,
          "column": 4,
          "index": 6875
        },
        "end": {
          "line": 263,
          "column": 5,
          "index": 7376
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onPointerOver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"pointerover\" event",
          "     * <ul>",
          "     * <li>Adds state \"hovered\"</li>",
          "     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>",
          "     * </ul>",
          "     *",
          "     * @param e {qx.event.type.Pointer} Pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"pointerover\" event\n </p>\n<ul>\n <li>Adds state \"hovered\"</li>\n <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 7857
        },
        "end": {
          "line": 291,
          "column": 5,
          "index": 8118
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onPointerOut": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for \"pointerout\" event",
          "     * <ul>",
          "     * <li>Removes \"hovered\" state</li>",
          "     * <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>",
          "     * </ul>",
          "     *",
          "     * @param e {qx.event.type.Pointer} Pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for \"pointerout\" event\n </p>\n<ul>\n <li>Removes \"hovered\" state</li>\n <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>\n </ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 8402
        },
        "end": {
          "line": 313,
          "column": 5,
          "index": 8663
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onTap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Toggles the popup's visibility.",
          "     *",
          "     * @param e {qx.event.type.Pointer} Pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Toggles the popup's visibility.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 320,
          "column": 4,
          "index": 8786
        },
        "end": {
          "line": 322,
          "column": 5,
          "index": 8824
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onKeyPress": {
      "jsdoc": {
        "raw": [
          "*@override"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 325,
          "column": 4,
          "index": 8850
        },
        "end": {
          "line": 342,
          "column": 5,
          "index": 9393
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "_onKeyInput": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Forwards key event to list widget.",
          "     *",
          "     * @param e {qx.event.type.KeyInput} Key event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Forwards key event to list widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeyInput} Key event",
            "paramName": "e",
            "description": " Key event",
            "type": "qx.event.type.KeyInput"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 349,
          "column": 4,
          "index": 9516
        },
        "end": {
          "line": 357,
          "column": 5,
          "index": 9775
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.KeyInput"
        }
      ],
      "appearsIn": []
    },
    "_onListPointerDown": {
      "jsdoc": {
        "raw": [
          "*@override"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 360,
          "column": 4,
          "index": 9801
        },
        "end": {
          "line": 366,
          "column": 5,
          "index": 10045
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "_onListChangeSelection": {
      "jsdoc": {
        "raw": [
          "*@override"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 369,
          "column": 4,
          "index": 10071
        },
        "end": {
          "line": 415,
          "column": 5,
          "index": 11680
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "_onPopupChangeVisibility": {
      "jsdoc": {
        "raw": [
          "*@override"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 418,
          "column": 4,
          "index": 11706
        },
        "end": {
          "line": 451,
          "column": 5,
          "index": 13122
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "overriddenFrom": "qx.ui.form.AbstractSelectBox",
      "appearsIn": [
        "qx.ui.form.AbstractSelectBox"
      ]
    },
    "__manager": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.core.SingleSelectionManager} the single selection manager "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.core.SingleSelectionManager} the single selection manager"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1691
        },
        "end": {
          "line": 56,
          "column": 19,
          "index": 1706
        }
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * setValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @param item {null|qx.ui.core.Widget} Item to set as selected value.",
          "     * @returns {null|TypeError} The status of this operation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {null|qx.ui.core.Widget} Item to set as selected value.",
            "paramName": "item",
            "description": " Item to set as selected value.",
            "type": [
              "null",
              "qx.ui.core.Widget"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|TypeError} The status of this operation.",
            "type": "null|TypeError",
            "description": "The status of this operation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 2142
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2496
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": [
            "null",
            "qx.ui.core.Widget"
          ]
        }
      ],
      "returnType": {
        "type": "null|TypeError"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * getValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @returns {null|qx.ui.core.Widget} The currently selected widget or null if there is none.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|qx.ui.core.Widget} The currently selected widget or null if there is none.",
            "type": "null|qx.ui.core.Widget",
            "description": "The currently selected widget or null if there is none."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2699
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2773
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "null|qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * resetValue implements part of the {@link qx.ui.form.IField} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>resetValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2874
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2937
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "getSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array of currently selected items.",
          "     *",
          "     * Note: The result is only a set of selected items, so the order can",
          "     * differ from the sequence in which the items were added.",
          "     *",
          "     * @return {qx.ui.core.Widget[]} List of items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of currently selected items.\n Note: The result is only a set of selected items, so the order can\n differ from the sequence in which the items were added.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} List of items.",
            "type": "qx.ui.core.Widget[]",
            "description": "List of items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3216
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3386
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "setSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces current selection with the given items.",
          "     *",
          "     * @param items {qx.ui.core.Widget[]} Items to select.",
          "     * @throws {Error} if one of the items is not a child element and if",
          "     *    items contains more than one elements.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces current selection with the given items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "items {qx.ui.core.Widget[]} Items to select.",
            "paramName": "items",
            "description": " Items to select.",
            "type": "qx.ui.core.Widget[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the items is not a child element and if\n    items contains more than one elements.",
            "type": "Error",
            "description": " if one of the items is not a child element and if\n    items contains more than one elements."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3653
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 4077
        }
      },
      "type": "function",
      "params": [
        {
          "name": "items",
          "type": "qx.ui.core.Widget[]"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "resetSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clears the whole selection at once.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the whole selection at once.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 4143
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4210
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "isSelected": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the given item is currently selected.",
          "     *",
          "     * @param item {qx.ui.core.Widget} Any valid selectable item.",
          "     * @return {Boolean} Whether the item is selected.",
          "     * @throws {Error} if one of the items is not a child element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the given item is currently selected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Any valid selectable item.",
            "paramName": "item",
            "description": " Any valid selectable item.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item is selected.",
            "type": "boolean",
            "description": "Whether the item is selected."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the items is not a child element.",
            "type": "Error",
            "description": " if one of the items is not a child element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4489
        },
        "end": {
          "line": 161,
          "column": 5,
          "index": 4564
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "isSelectionEmpty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the selection is empty.",
          "     *",
          "     * @return {Boolean} Whether the selection is empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the selection is empty.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the selection is empty.",
            "type": "boolean",
            "description": "Whether the selection is empty."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 168,
          "column": 4,
          "index": 4690
        },
        "end": {
          "line": 170,
          "column": 5,
          "index": 4769
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "getSelectables": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all elements which are selectable.",
          "     *",
          "     * @param all {Boolean} true for all selectables, false for the",
          "     *   selectables the user can interactively select",
          "     * @return {qx.ui.core.Widget[]} The contained items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all elements which are selectable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "all {Boolean} true for all selectables, false for the\n   selectables the user can interactively select",
            "paramName": "all",
            "description": " true for all selectables, false for the\n   selectables the user can interactively select",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The contained items.",
            "type": "qx.ui.core.Widget[]",
            "description": "The contained items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5030
        },
        "end": {
          "line": 181,
          "column": 5,
          "index": 5111
        }
      },
      "type": "function",
      "params": [
        {
          "name": "all",
          "type": "boolean"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "_onChangeSelected": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for <code>changeSelected</code> event on single",
          "     * selection manager.",
          "     *",
          "     * @param e {qx.event.type.Data} Data event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for <code>changeSelected</code> event on single\n selection manager.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5481
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 5843
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "__getManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the selection manager if it is already exists, otherwise creates",
          "     * the manager.",
          "     *",
          "     * @return {qx.ui.core.SingleSelectionManager} Single selection manager.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the selection manager if it is already exists, otherwise creates\n the manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.SingleSelectionManager} Single selection manager.",
            "type": "qx.ui.core.SingleSelectionManager",
            "description": "Single selection manager."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 211,
          "column": 4,
          "index": 6049
        },
        "end": {
          "line": 237,
          "column": 5,
          "index": 6736
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.SingleSelectionManager"
      },
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling"
    },
    "__modelSelection": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1376
        },
        "end": {
          "line": 48,
          "column": 26,
          "index": 1398
        }
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__inSelectionChange": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1404
        },
        "end": {
          "line": 49,
          "column": 30,
          "index": 1430
        }
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__onModelSelectionChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the selection change of the including class e.g. SelectBox,",
          "     * List, ...",
          "     * It sets the new modelSelection via {@link #setModelSelection}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the selection change of the including class e.g. SelectBox,\n List, …\n It sets the new modelSelection via {@link #setModelSelection}.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1619
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2327
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__onModelSelectionArrayChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener for the change of the internal model selection data array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener for the change of the internal model selection data array.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2425
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3468
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "getModelSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns always an array of the models of the selected items. If no",
          "     * item is selected or no model is given, the array will be empty.",
          "     *",
          "     * *CAREFUL!* The model selection can only work if every item item in the",
          "     * selection providing widget has a model property!",
          "     *",
          "     * @return {qx.data.Array} An array of the models of the selected items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns always an array of the models of the selected items. If no\n item is selected or no model is given, the array will be empty.\n<em>CAREFUL!</em> The model selection can only work if every item item in the\n selection providing widget has a model property!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} An array of the models of the selected items.",
            "type": "qx.data.Array",
            "description": "An array of the models of the selected items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3861
        },
        "end": {
          "line": 128,
          "column": 5,
          "index": 3924
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.data.Array"
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection",
        "qx.ui.form.IModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "setModelSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes the given models in the array and searches for the corresponding",
          "     * selectables. If an selectable does have that model attached, it will be",
          "     * selected.",
          "     *",
          "     * *Attention:* This method can have a time complexity of O(n^2)!",
          "     *",
          "     * *CAREFUL!* The model selection can only work if every item item in the",
          "     * selection providing widget has a model property!",
          "     *",
          "     * @param modelSelection {Array} An array of models, which should be",
          "     *   selected.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes the given models in the array and searches for the corresponding\n selectables. If an selectable does have that model attached, it will be\n selected.\n<em>Attention:</em> This method can have a time complexity of O(n^2)!\n<em>CAREFUL!</em> The model selection can only work if every item item in the\n selection providing widget has a model property!</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "modelSelection {Array} An array of models, which should be\n   selected.",
            "paramName": "modelSelection",
            "description": " An array of models, which should be\n   selected.",
            "type": "Array<any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 4438
        },
        "end": {
          "line": 164,
          "column": 5,
          "index": 5064
        }
      },
      "type": "function",
      "params": [
        {
          "name": "modelSelection",
          "type": "Array<any>"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MModelSelection",
        "qx.ui.form.IModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 460,
        "column": 2,
        "index": 13316
      },
      "end": {
        "line": 462,
        "column": 3,
        "index": 13367
      }
    }
  },
  "statics": {}
}