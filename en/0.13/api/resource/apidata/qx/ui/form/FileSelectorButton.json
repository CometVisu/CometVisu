{
  "version": 0.3,
  "lastModified": 1722151625323,
  "lastModifiedIso": "2024-07-28T07:27:05.323Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/FileSelectorButton.js",
  "type": "class",
  "location": {
    "start": {
      "line": 63,
      "column": 0,
      "index": 1877
    },
    "end": {
      "line": 178,
      "column": 3,
      "index": 5135
    }
  },
  "className": "qx.ui.form.FileSelectorButton",
  "jsdoc": {
    "raw": [
      "*",
      " * The FileSelectorButton opens a window and lets the user pick one or several",
      " * files from the local filesystem. A FileList is returned which allows access",
      " * to the content of the selected files from javascript. The file(s) can now be",
      " *  processed in javascript, or it/they can be uploaded to a server.",
      " *",
      " * *Example*",
      " *",
      " * Post the content of the file to the server.",
      " *",
      " * ```javascript",
      " * let button = new qx.ui.form.FileSelectorButton(\"Select File\");",
      " * button.addListener('changeFileSelection',function(e){",
      " * let fileList = e.getData();",
      " *   let form = new FormData();",
      " *   form.append('file',fileList[0]);",
      " *   let req = new qx.io.request.Xhr(\"upload\",'POST').set({",
      " *     requestData: form",
      " *   });",
      " *   req.addListener('success',(e) => {",
      " *     let response = req.getResponse();",
      " *   });",
      " * });",
      " * ```",
      " *",
      " * Process the file directly in javascript using the FileReader API.",
      " *",
      " * ```javascript",
      " * let button = new qx.ui.form.FileSelectorButton(\"Select File\");",
      " * button.addListener('changeFileSelection',function(e){",
      " *   let fileList = e.getData();",
      " *   const reader = new FileReader();",
      " *   reader.addEventListener('load', () => {",
      " *     let response = reader.result;",
      " *     console.log(\"The first 4 chrs are: \" + response);",
      " *   });",
      " *   const file = fileList[0];",
      " *   reader.readAsText(file.slice(0,4));",
      " * });",
      " * ```",
      " *",
      " * [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The FileSelectorButton opens a window and lets the user pick one or several\n files from the local filesystem. A FileList is returned which allows access\n to the content of the selected files from javascript. The file(s) can now be\n  processed in javascript, or it/they can be uploaded to a server.\n<em>Example</em>\n Post the content of the file to the server.\n <code></code><code>javascript\n let button = new qx.ui.form.FileSelectorButton(\"Select File\");\n button.addListener('changeFileSelection',function(e){\n let fileList = e.getData();\n   let form = new FormData();\n   form.append('file',fileList[0]);\n   let req = new qx.io.request.Xhr(\"upload\",'POST').set({\n     requestData: form\n   });\n   req.addListener('success',(e) =&gt; {\n     let response = req.getResponse();\n   });\n });\n </code><code></code>\n Process the file directly in javascript using the FileReader API.\n <code></code><code>javascript\n let button = new qx.ui.form.FileSelectorButton(\"Select File\");\n button.addListener('changeFileSelection',function(e){\n   let fileList = e.getData();\n   const reader = new FileReader();\n   reader.addEventListener('load', () =&gt; {\n     let response = reader.result;\n     console.log(\"The first 4 chrs are: \" + response);\n   });\n   const file = fileList[0];\n   reader.readAsText(file.slice(0,4));\n });\n </code><code></code>\n <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications\">MDN Documentation</a></p>"
      }
    ]
  },
  "superClass": "qx.ui.form.Button",
  "statics": {
    "_fileInputElementIdCounter": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1975
        },
        "end": {
          "line": 67,
          "column": 33,
          "index": 2004
        }
      },
      "appearsIn": []
    }
  },
  "events": {
    "changeFileSelection": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * The event is fired when the file selection changes.",
          "     *",
          "     * The method {@link qx.event.type.Data#getData} returns the",
          "     * current [fileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The event is fired when the file selection changes.\n The method {@link qx.event.type.Data#getData} returns the\n current <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileList\">fileList</a></p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2259
        },
        "end": {
          "line": 77,
          "column": 45,
          "index": 2300
        }
      }
    }
  },
  "properties": {
    "accept": {
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2708
        },
        "end": {
          "line": 94,
          "column": 5,
          "index": 2799
        }
      },
      "json": {
        "nullable": true,
        "check": "String",
        "apply": "_applyAttribute"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * What type of files should be offered in the fileselection dialog.",
          "     * Use a comma separated list of [Unique file type specifiers](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers). If you dont set anything, all files",
          "     * are allowed.",
          "     *",
          "     * *Example*",
          "     *",
          "     * `.doc,.docx,application/msword`",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>What type of files should be offered in the fileselection dialog.\n Use a comma separated list of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers\">Unique file type specifiers</a>. If you dont set anything, all files\n are allowed.\n<em>Example</em>\n <code>.doc,.docx,application/msword</code></p>"
          }
        ]
      },
      "appearsIn": []
    },
    "capture": {
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 3084
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 3191
        }
      },
      "json": {
        "nullable": true,
        "check": [
          "user",
          "environment"
        ],
        "apply": "_applyAttribute"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Specify that the camera should be used for getting the \"file\". The",
          "     * value defines which camera should be used for capturing images.",
          "     * `user` indicates the user-facing camera.",
          "     * `environment` indicates the camera facing away from the user.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Specify that the camera should be used for getting the \"file\". The\n value defines which camera should be used for capturing images.\n <code>user</code> indicates the user-facing camera.\n <code>environment</code> indicates the camera facing away from the user.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "multiple": {
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 3289
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3383
        }
      },
      "json": {
        "nullable": true,
        "check": "Boolean",
        "apply": "_applyAttribute"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Set to \"true\" if you want to allow the selection of multiple files.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set to \"true\" if you want to allow the selection of multiple files.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "directoriesOnly": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3499
        },
        "end": {
          "line": 125,
          "column": 5,
          "index": 3600
        }
      },
      "json": {
        "nullable": true,
        "check": "Boolean",
        "apply": "_applyAttribute"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * If present, indicates that only directories should be available for",
          "     * selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If present, indicates that only directories should be available for\n selection.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__inputObject": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3624
        },
        "end": {
          "line": 129,
          "column": 23,
          "index": 3643
        }
      },
      "appearsIn": []
    },
    "_applyAttribute": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3650
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 4073
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        },
        {
          "name": "attr"
        }
      ],
      "appearsIn": []
    },
    "setEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @param {Boolean} value",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{Boolean} value",
            "paramName": "value",
            "description": "",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4151
        },
        "end": {
          "line": 149,
          "column": 5,
          "index": 4251
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_createContentElement": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4258
        },
        "end": {
          "line": 176,
          "column": 5,
          "index": 5127
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    }
  }
}