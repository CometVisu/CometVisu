{
  "version": 0.3,
  "lastModified": 1735383688249,
  "lastModifiedIso": "2024-12-28T11:01:28.249Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/form/RadioButtonGroup.js",
  "type": "class",
  "location": {
    "start": {
      "line": 31,
      "column": 0,
      "index": 1051
    },
    "end": {
      "line": 331,
      "column": 3,
      "index": 8569
    }
  },
  "className": "qx.ui.form.RadioButtonGroup",
  "jsdoc": {
    "raw": [
      "*",
      " * The radio container handles a collection of items from which only one item",
      " * can be selected. Selection another item will deselect the previously selected",
      " * item. For that, it uses the {@link qx.ui.form.RadioGroup} object.",
      " *",
      " * This class is used to create radio groups of {@link qx.ui.form.RadioButton}",
      " * instances.",
      " *",
      " * This widget takes care of the layout of the added items. If you want to",
      " * take full control of the layout and just use the selection behavior,",
      " * take a look at the {@link qx.ui.form.RadioGroup} object for a loose coupling.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The radio container handles a collection of items from which only one item\n can be selected. Selection another item will deselect the previously selected\n item. For that, it uses the {@link qx.ui.form.RadioGroup} object.\n This class is used to create radio groups of {@link qx.ui.form.RadioButton}\n instances.\n This widget takes care of the layout of the added items. If you want to\n take full control of the layout and just use the selection behavior,\n take a look at the {@link qx.ui.form.RadioGroup} object for a loose coupling.</p>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.MLayoutHandling",
    "qx.ui.form.MModelSelection"
  ],
  "interfaces": [
    "qx.ui.form.IForm",
    "qx.ui.form.IField",
    "qx.ui.core.ISingleSelection",
    "qx.ui.form.IModelSelection"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "layout"
      }
    ],
    "location": {
      "start": {
        "line": 45,
        "column": 2,
        "index": 1451
      },
      "end": {
        "line": 67,
        "column": 3,
        "index": 1976
      }
    }
  },
  "properties": {
    "valid": {
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2113
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2224
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyValid",
        "event": "changeValid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if the group at all is valid. All children will have the",
          "     * same state.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if the group at all is valid. All children will have the\n same state.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "required": {
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2295
        },
        "end": {
          "line": 88,
          "column": 5,
          "index": 2385
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeRequired"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if the group is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if the group is required.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2461
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2596
        }
      },
      "json": {
        "check": "String",
        "init": "",
        "event": "changeInvalidMessage",
        "apply": "_applyInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which is shown in an invalid tooltip.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which is shown in an invalid tooltip.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 2719
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 2831
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which is shown in an invalid tooltip if the {@link #required} is",
          "     * set to true.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which is shown in an invalid tooltip if the {@link #required} is\n set to true.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "events": {
    "changeValue": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "* Fires after the value was modified "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires after the value was modified</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 2900
        },
        "end": {
          "line": 113,
          "column": 37,
          "index": 2933
        }
      }
    },
    "changeSelection": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires after the selection was modified",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires after the selection was modified</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3002
        },
        "end": {
          "line": 118,
          "column": 41,
          "index": 3039
        }
      }
    }
  },
  "members": {
    "__radioGroup": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3063
        },
        "end": {
          "line": 122,
          "column": 22,
          "index": 3081
        }
      },
      "appearsIn": []
    },
    "_applyInvalidMessage": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 3305
        },
        "end": {
          "line": 135,
          "column": 5,
          "index": 3491
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyValid": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3520
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 3688
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "getRadioGroup": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The internally used radio group instance will be returned.",
          "     *",
          "     * @return {qx.ui.form.RadioGroup} Returns the used RadioGroup instance.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The internally used radio group instance will be returned.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.form.RadioGroup} Returns the used RadioGroup instance.",
            "type": "qx.ui.form.RadioGroup",
            "description": "Returns the used RadioGroup instance."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4051
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4106
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.form.RadioGroup"
      },
      "appearsIn": []
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array.",
            "type": "qx.ui.core.LayoutItem[]",
            "description": "The children array."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 4230
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 4285
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.LayoutItem[]"
      },
      "appearsIn": []
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to add.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 4698
        },
        "end": {
          "line": 182,
          "column": 5,
          "index": 4794
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child widget.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to remove",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 189,
          "column": 4,
          "index": 4927
        },
        "end": {
          "line": 192,
          "column": 5,
          "index": 5014
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "appearsIn": []
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     *",
          "     * @return {Array} An array of {@link qx.ui.core.LayoutItem}'s.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of {@link qx.ui.core.LayoutItem}'s.",
            "type": "Array<any>",
            "description": "An array of {@link qx.ui.core.LayoutItem}'s."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 199,
          "column": 4,
          "index": 5140
        },
        "end": {
          "line": 207,
          "column": 5,
          "index": 5409
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "getSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array of currently selected items.",
          "     *",
          "     * Note: The result is only a set of selected items, so the order can",
          "     * differ from the sequence in which the items were added.",
          "     *",
          "     * @return {qx.ui.core.Widget[]} List of items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of currently selected items.\n Note: The result is only a set of selected items, so the order can\n differ from the sequence in which the items were added.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} List of items.",
            "type": "qx.ui.core.Widget[]",
            "description": "List of items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 223,
          "column": 4,
          "index": 5879
        },
        "end": {
          "line": 225,
          "column": 5,
          "index": 5948
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": [
        "qx.ui.core.ISingleSelection"
      ]
    },
    "setSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces current selection with the given items.",
          "     *",
          "     * @param items {qx.ui.core.Widget[]} Items to select.",
          "     * @throws {Error} if the item is not a child element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces current selection with the given items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "items {qx.ui.core.Widget[]} Items to select.",
            "paramName": "items",
            "description": " Items to select.",
            "type": "qx.ui.core.Widget[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the item is not a child element.",
            "type": "Error",
            "description": " if the item is not a child element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 233,
          "column": 4,
          "index": 6152
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 6224
        }
      },
      "type": "function",
      "params": [
        {
          "name": "items",
          "type": "qx.ui.core.Widget[]"
        }
      ],
      "appearsIn": [
        "qx.ui.core.ISingleSelection"
      ]
    },
    "resetSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clears the whole selection at once.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the whole selection at once.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 240,
          "column": 4,
          "index": 6290
        },
        "end": {
          "line": 242,
          "column": 5,
          "index": 6356
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.ISingleSelection"
      ]
    },
    "isSelected": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the given item is currently selected.",
          "     *",
          "     * @param item {qx.ui.core.Widget} Any valid selectable item",
          "     * @return {Boolean} Whether the item is selected.",
          "     * @throws {Error} if the item is not a child element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the given item is currently selected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Any valid selectable item",
            "paramName": "item",
            "description": " Any valid selectable item",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item is selected.",
            "type": "boolean",
            "description": "Whether the item is selected."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the item is not a child element.",
            "type": "Error",
            "description": " if the item is not a child element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 251,
          "column": 4,
          "index": 6626
        },
        "end": {
          "line": 253,
          "column": 5,
          "index": 6699
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.ISingleSelection"
      ]
    },
    "isSelectionEmpty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the selection is empty.",
          "     *",
          "     * @return {Boolean} Whether the selection is empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the selection is empty.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the selection is empty.",
            "type": "boolean",
            "description": "Whether the selection is empty."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 260,
          "column": 4,
          "index": 6825
        },
        "end": {
          "line": 262,
          "column": 5,
          "index": 6902
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.ISingleSelection"
      ]
    },
    "getSelectables": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all elements which are selectable.",
          "     *",
          "     * @param all {Boolean} true for all selectables, false for the",
          "     *   selectables the user can interactively select",
          "     * @return {qx.ui.core.Widget[]} The contained items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all elements which are selectable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "all {Boolean} true for all selectables, false for the\n   selectables the user can interactively select",
            "paramName": "all",
            "description": " true for all selectables, false for the\n   selectables the user can interactively select",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The contained items.",
            "type": "qx.ui.core.Widget[]",
            "description": "The contained items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 7163
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 7242
        }
      },
      "type": "function",
      "params": [
        {
          "name": "all",
          "type": "boolean"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": [
        "qx.ui.core.ISingleSelection"
      ]
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Select given value.",
          "     *",
          "     * @param item {null|var} Item to set as selected value.",
          "     * @return {null|Error} The status of this operation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Select given value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {null|var} Item to set as selected value.",
            "paramName": "item",
            "description": " Item to set as selected value.",
            "type": [
              "null",
              "var"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|Error} The status of this operation.",
            "type": "null|Error",
            "description": "The status of this operation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 7418
        },
        "end": {
          "line": 291,
          "column": 5,
          "index": 7697
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": [
            "null",
            "var"
          ]
        }
      ],
      "returnType": {
        "type": "null|Error"
      },
      "appearsIn": [
        "qx.ui.form.IField"
      ]
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @return {null|var} Returns the selected value.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|var} Returns the selected value.",
            "type": "null|var",
            "description": "Returns the selected value."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 296,
          "column": 4,
          "index": 7774
        },
        "end": {
          "line": 298,
          "column": 5,
          "index": 7835
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "null|var"
      },
      "appearsIn": [
        "qx.ui.form.IField"
      ]
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reset radio item selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reset radio item selection.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 303,
          "column": 4,
          "index": 7893
        },
        "end": {
          "line": 305,
          "column": 5,
          "index": 7951
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.IField"
      ]
    },
    "_onChangeSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Called on {@link qx.ui.form.RadioGroup} selection change event.",
          "     *",
          "     * @param event {qx.event.type.Data} Event containing the {@link qx.ui.form.RadioGroup} selection data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called on {@link qx.ui.form.RadioGroup} selection change event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Data} Event containing the {@link qx.ui.form.RadioGroup} selection data.",
            "paramName": "event",
            "description": " Event containing the {@link qx.ui.form.RadioGroup} selection data.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 312,
          "column": 4,
          "index": 8160
        },
        "end": {
          "line": 319,
          "column": 5,
          "index": 8385
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "setLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set a layout manager for the widget. A a layout manager can only be connected",
          "     * with one widget. Reset the connection with a previous widget first, if you",
          "     * like to use it in another widget instead.",
          "     *",
          "     * @param layout {qx.ui.layout.Abstract} The new layout or",
          "     *     <code>null</code> to reset the layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a layout manager for the widget. A a layout manager can only be connected\n with one widget. Reset the connection with a previous widget first, if you\n like to use it in another widget instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "layout {qx.ui.layout.Abstract} The new layout or\n     <code>null</code> to reset the layout.",
            "paramName": "layout",
            "description": " The new layout or\n     <code>null</code> to reset the layout.",
            "type": "qx.ui.layout.Abstract"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1490
        },
        "end": {
          "line": 46,
          "column": 5,
          "index": 1546
        }
      },
      "type": "function",
      "params": [
        {
          "name": "layout",
          "type": "qx.ui.layout.Abstract"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MLayoutHandling"
      ],
      "mixin": "qx.ui.core.MLayoutHandling"
    },
    "getLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the widget's layout manager.",
          "     *",
          "     * @return {qx.ui.layout.Abstract} The widget's layout manager",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget's layout manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Abstract} The widget's layout manager",
            "type": "qx.ui.layout.Abstract",
            "description": "The widget's layout manager"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1683
        },
        "end": {
          "line": 55,
          "column": 5,
          "index": 1734
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.layout.Abstract"
      },
      "appearsIn": [
        "qx.ui.core.MLayoutHandling"
      ],
      "mixin": "qx.ui.core.MLayoutHandling"
    },
    "__modelSelection": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1376
        },
        "end": {
          "line": 48,
          "column": 26,
          "index": 1398
        }
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__inSelectionChange": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1404
        },
        "end": {
          "line": 49,
          "column": 30,
          "index": 1430
        }
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__onModelSelectionChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the selection change of the including class e.g. SelectBox,",
          "     * List, ...",
          "     * It sets the new modelSelection via {@link #setModelSelection}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the selection change of the including class e.g. SelectBox,\n List, …\n It sets the new modelSelection via {@link #setModelSelection}.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1619
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2327
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "__onModelSelectionArrayChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener for the change of the internal model selection data array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener for the change of the internal model selection data array.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2425
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3468
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.MModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "getModelSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns always an array of the models of the selected items. If no",
          "     * item is selected or no model is given, the array will be empty.",
          "     *",
          "     * *CAREFUL!* The model selection can only work if every item item in the",
          "     * selection providing widget has a model property!",
          "     *",
          "     * @return {qx.data.Array} An array of the models of the selected items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns always an array of the models of the selected items. If no\n item is selected or no model is given, the array will be empty.\n<em>CAREFUL!</em> The model selection can only work if every item item in the\n selection providing widget has a model property!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} An array of the models of the selected items.",
            "type": "qx.data.Array",
            "description": "An array of the models of the selected items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3861
        },
        "end": {
          "line": 128,
          "column": 5,
          "index": 3924
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.data.Array"
      },
      "appearsIn": [
        "qx.ui.form.MModelSelection",
        "qx.ui.form.IModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    },
    "setModelSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes the given models in the array and searches for the corresponding",
          "     * selectables. If an selectable does have that model attached, it will be",
          "     * selected.",
          "     *",
          "     * *Attention:* This method can have a time complexity of O(n^2)!",
          "     *",
          "     * *CAREFUL!* The model selection can only work if every item item in the",
          "     * selection providing widget has a model property!",
          "     *",
          "     * @param modelSelection {Array} An array of models, which should be",
          "     *   selected.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes the given models in the array and searches for the corresponding\n selectables. If an selectable does have that model attached, it will be\n selected.\n<em>Attention:</em> This method can have a time complexity of O(n^2)!\n<em>CAREFUL!</em> The model selection can only work if every item item in the\n selection providing widget has a model property!</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "modelSelection {Array} An array of models, which should be\n   selected.",
            "paramName": "modelSelection",
            "description": " An array of models, which should be\n   selected.",
            "type": "Array<any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 4438
        },
        "end": {
          "line": 164,
          "column": 5,
          "index": 5064
        }
      },
      "type": "function",
      "params": [
        {
          "name": "modelSelection",
          "type": "Array<any>"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MModelSelection",
        "qx.ui.form.IModelSelection"
      ],
      "mixin": "qx.ui.form.MModelSelection"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 322,
        "column": 2,
        "index": 8394
      },
      "end": {
        "line": 330,
        "column": 3,
        "index": 8565
      }
    }
  },
  "statics": {
    "remap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mapping of protected methods to public.",
          "     * This omits an additional function call when using these methods. Call",
          "     * this methods in the defer block of the including class.",
          "     *",
          "     * @param members {Map} The including classes members map",
          "     * @deprecated {7.0} this is not necessary in modern compilers and leads to unexpected behaviour",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of protected methods to public.\n This omits an additional function call when using these methods. Call\n this methods in the defer block of the including class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "members {Map} The including classes members map",
            "paramName": "members",
            "description": " The including classes members map",
            "type": "Map<any, any>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{7.0} this is not necessary in modern compilers and leads to unexpected behaviour"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 2315
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2593
        }
      },
      "type": "function",
      "params": [
        {
          "name": "members",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MLayoutHandling"
      ],
      "mixin": "qx.ui.core.MLayoutHandling"
    }
  }
}