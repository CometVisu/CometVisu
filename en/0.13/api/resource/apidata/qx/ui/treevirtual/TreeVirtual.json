{
  "version": 0.3,
  "lastModified": 1726088853341,
  "lastModifiedIso": "2024-09-11T21:07:33.341Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/treevirtual/TreeVirtual.js",
  "type": "class",
  "location": {
    "start": {
      "line": 29,
      "column": 0,
      "index": 680
    },
    "end": {
      "line": 848,
      "column": 3,
      "index": 26156
    }
  },
  "className": "qx.ui.treevirtual.TreeVirtual",
  "jsdoc": {
    "raw": [
      "*",
      " * A \"virtual\" tree",
      " * <p>",
      " *   A number of convenience methods are available in the following mixins:",
      " *   <ul>",
      " *     <li>{@link qx.ui.treevirtual.MNode}</li>",
      " *     <li>{@link qx.ui.treevirtual.MFamily}</li>",
      " *   </ul>",
      " * </p>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A \"virtual\" tree\n </p>\n<p>\n   A number of convenience methods are available in the following mixins:\n   <ul>\n     <li>{@link qx.ui.treevirtual.MNode}</li>\n     <li>{@link qx.ui.treevirtual.MFamily}</li>\n   </ul>\n </p>"
      }
    ]
  },
  "superClass": "qx.ui.table.Table",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "headings"
      },
      {
        "name": "custom"
      }
    ],
    "location": {
      "start": {
        "line": 107,
        "column": 2,
        "index": 3648
      },
      "end": {
        "line": 223,
        "column": 3,
        "index": 7282
      }
    }
  },
  "events": {
    "treeOpenWithContent": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when a tree branch which already has content is opened.",
          "     *",
          "     * Event data: the node object from the data model (of the node",
          "     * being opened) as described in",
          "     * {@link qx.ui.treevirtual.SimpleTreeDataModel}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a tree branch which already has content is opened.\n Event data: the node object from the data model (of the node\n being opened) as described in\n {@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 239,
          "column": 4,
          "index": 7734
        },
        "end": {
          "line": 239,
          "column": 45,
          "index": 7775
        }
      }
    },
    "treeOpenWhileEmpty": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when an empty tree branch is opened.",
          "     *",
          "     * Event data: the node object from the data model (of the node",
          "     * being opened) as described in",
          "     * {@link qx.ui.treevirtual.SimpleTreeDataModel}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when an empty tree branch is opened.\n Event data: the node object from the data model (of the node\n being opened) as described in\n {@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 248,
          "column": 4,
          "index": 8013
        },
        "end": {
          "line": 248,
          "column": 44,
          "index": 8053
        }
      }
    },
    "treeClose": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when a tree branch is closed.",
          "     *",
          "     * Event data: the node object from the data model (of the node",
          "     * being closed) as described in",
          "     * {@link qx.ui.treevirtual.SimpleTreeDataModel}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a tree branch is closed.\n Event data: the node object from the data model (of the node\n being closed) as described in\n {@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 257,
          "column": 4,
          "index": 8284
        },
        "end": {
          "line": 257,
          "column": 35,
          "index": 8315
        }
      }
    },
    "changeSelection": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when the selected rows change.",
          "     *",
          "     * Event data: An array of node objects (the selected rows' nodes)",
          "     * from the data model.  Each node object is described in",
          "     * {@link qx.ui.treevirtual.SimpleTreeDataModel}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the selected rows change.\n Event data: An array of node objects (the selected rows' nodes)\n from the data model.  Each node object is described in\n {@link qx.ui.treevirtual.SimpleTreeDataModel}</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 266,
          "column": 4,
          "index": 8575
        },
        "end": {
          "line": 266,
          "column": 41,
          "index": 8612
        }
      }
    }
  },
  "statics": {
    "SelectionMode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Selection Modes {int}",
          "     *",
          "     *   NONE",
          "     *     Nothing can ever be selected.",
          "     *",
          "     *   SINGLE",
          "     *     Allow only one selected item.",
          "     *",
          "     *   SINGLE_INTERVAL",
          "     *     Allow one contiguous interval of selected items.",
          "     *",
          "     *   MULTIPLE_INTERVAL",
          "     *     Allow any set of selected items, whether contiguous or not.",
          "     *",
          "     *   MULTIPLE_INTERVAL_TOGGLE",
          "     *     Like MULTIPLE_INTERVAL, but clicking on an item toggles its selection state.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Selection Modes {int}\n   NONE\n     Nothing can ever be selected.\n   SINGLE\n     Allow only one selected item.\n   SINGLE<em>INTERVAL\n     Allow one contiguous interval of selected items.\n   MULTIPLE</em>INTERVAL\n     Allow any set of selected items, whether contiguous or not.\n   MULTIPLE<em>INTERVAL</em>TOGGLE\n     Like MULTIPLE_INTERVAL, but clicking on an item toggles its selection state.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 294,
          "column": 4,
          "index": 9317
        },
        "end": {
          "line": 302,
          "column": 5,
          "index": 9724
        }
      },
      "appearsIn": []
    }
  },
  "properties": {
    "openCloseClickSelectsRow": {
      "location": {
        "start": {
          "line": 316,
          "column": 4,
          "index": 10049
        },
        "end": {
          "line": 319,
          "column": 5,
          "index": 10124
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether a click on the open/close button should also cause selection of",
          "     * the row.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a click on the open/close button should also cause selection of\n the row.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "appearance": {
      "location": {
        "start": {
          "line": 321,
          "column": 4,
          "index": 10131
        },
        "end": {
          "line": 324,
          "column": 5,
          "index": 10196
        }
      },
      "json": {
        "refine": true,
        "init": "treevirtual"
      },
      "jsdoc": null,
      "appearsIn": [
        "qx.ui.table.Table",
        "qx.ui.core.Widget"
      ]
    },
    "allowNodeEdit": {
      "location": {
        "start": {
          "line": 326,
          "column": 4,
          "index": 10203
        },
        "end": {
          "line": 329,
          "column": 5,
          "index": 10267
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": null,
      "appearsIn": []
    }
  },
  "members": {
    "getDataModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the data model for this tree.",
          "     *",
          "     * @return {qx.ui.table.ITableModel} The data model.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the data model for this tree.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.ITableModel} The data model.",
            "type": "qx.ui.table.ITableModel",
            "description": "The data model."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 344,
          "column": 4,
          "index": 10599
        },
        "end": {
          "line": 346,
          "column": 5,
          "index": 10656
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.table.ITableModel"
      },
      "appearsIn": []
    },
    "setUseTreeLines": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set whether lines linking tree children shall be drawn on the tree.",
          "     * Note that not all themes support tree lines.  As of the time of this",
          "     * writing, the Classic theme supports tree lines (and uses +/- icons",
          "     * which lend themselves to tree lines), while the Modern theme, which",
          "     * uses right-facing and downward-facing arrows instead of +/-, does not.",
          "     *",
          "     * @param b {Boolean}",
          "     *   <i>true</i> if tree lines should be shown; <i>false</i> otherwise.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether lines linking tree children shall be drawn on the tree.\n Note that not all themes support tree lines.  As of the time of this\n writing, the Classic theme supports tree lines (and uses +/- icons\n which lend themselves to tree lines), while the Modern theme, which\n uses right-facing and downward-facing arrows instead of +/-, does not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "b {Boolean}\n   <i>true</i> if tree lines should be shown; <i>false</i> otherwise.",
            "paramName": "b",
            "description": "\n   <i>true</i> if tree lines should be shown; <i>false</i> otherwise.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 359,
          "column": 4,
          "index": 11173
        },
        "end": {
          "line": 376,
          "column": 5,
          "index": 11718
        }
      },
      "type": "function",
      "params": [
        {
          "name": "b",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "getUseTreeLines": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get whether lines linking tree children shall be drawn on the tree.",
          "     *",
          "     * @return {Boolean}",
          "     *   <i>true</i> if tree lines are in use;",
          "     *   <i>false</i> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get whether lines linking tree children shall be drawn on the tree.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}\n   <i>true</i> if tree lines are in use;\n   <i>false</i> otherwise.",
            "type": "boolean",
            "description": "   <i>true</i> if tree lines are in use;\n   <i>false</i> otherwise."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 385,
          "column": 4,
          "index": 11928
        },
        "end": {
          "line": 389,
          "column": 5,
          "index": 12119
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "setAlwaysShowOpenCloseSymbol": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set whether the open/close button should be displayed on a branch,",
          "     * even if the branch has no children.",
          "     *",
          "     * @param b {Boolean}",
          "     *   <i>true</i> if the open/close button should be shown;",
          "     *   <i>false</i> otherwise.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the open/close button should be displayed on a branch,\n even if the branch has no children.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "b {Boolean}\n   <i>true</i> if the open/close button should be shown;\n   <i>false</i> otherwise.",
            "paramName": "b",
            "description": "\n   <i>true</i> if the open/close button should be shown;\n   <i>false</i> otherwise.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 400,
          "column": 4,
          "index": 12395
        },
        "end": {
          "line": 417,
          "column": 5,
          "index": 12966
        }
      },
      "type": "function",
      "params": [
        {
          "name": "b",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "setExcludeFirstLevelTreeLines": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set whether drawing of first-level tree-node lines are disabled even",
          "     * if drawing of tree lines is enabled.",
          "     *",
          "     * @param b {Boolean}",
          "     *   <i>true</i> if first-level tree lines should be disabled;",
          "     *   <i>false</i> for normal operation.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether drawing of first-level tree-node lines are disabled even\n if drawing of tree lines is enabled.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "b {Boolean}\n   <i>true</i> if first-level tree lines should be disabled;\n   <i>false</i> for normal operation.",
            "paramName": "b",
            "description": "\n   <i>true</i> if first-level tree lines should be disabled;\n   <i>false</i> for normal operation.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 428,
          "column": 4,
          "index": 13260
        },
        "end": {
          "line": 445,
          "column": 5,
          "index": 13833
        }
      },
      "type": "function",
      "params": [
        {
          "name": "b",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "getExcludeFirstLevelTreeLines": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get whether drawing of first-level tree lines should be disabled even",
          "     * if drawing of tree lines is enabled.",
          "     * (See also {@link #getUseTreeLines})",
          "     *",
          "     * @return {Boolean}",
          "     *   <i>true</i> if tree lines are in use;",
          "     *   <i>false</i> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get whether drawing of first-level tree lines should be disabled even\n if drawing of tree lines is enabled.\n (See also {@link #getUseTreeLines})</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}\n   <i>true</i> if tree lines are in use;\n   <i>false</i> otherwise.",
            "type": "boolean",
            "description": "   <i>true</i> if tree lines are in use;\n   <i>false</i> otherwise."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 456,
          "column": 4,
          "index": 14132
        },
        "end": {
          "line": 460,
          "column": 5,
          "index": 14351
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getAlwaysShowOpenCloseSymbol": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set whether the open/close button should be displayed on a branch,",
          "     * even if the branch has no children.",
          "     *",
          "     * @return {Boolean}",
          "     *   <i>true</i> if tree lines are in use;",
          "     *   <i>false</i> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the open/close button should be displayed on a branch,\n even if the branch has no children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}\n   <i>true</i> if tree lines are in use;\n   <i>false</i> otherwise.",
            "type": "boolean",
            "description": "   <i>true</i> if tree lines are in use;\n   <i>false</i> otherwise."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 470,
          "column": 4,
          "index": 14603
        },
        "end": {
          "line": 474,
          "column": 5,
          "index": 14820
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getOpenCloseButtonPosition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the position of the open/close button for a node",
          "     *",
          "     * @return {Object} The position of the open/close button within the tree row",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the position of the open/close button for a node</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The position of the open/close button within the tree row",
            "type": "Record<any, any>",
            "description": "The position of the open/close button within the tree row"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 481,
          "column": 4,
          "index": 14996
        },
        "end": {
          "line": 500,
          "column": 5,
          "index": 15723
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "setSelectionMode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the selection mode.",
          "     *",
          "     * @param mode {Integer}",
          "     *   The selection mode to be used.  It may be any of:",
          "     *     <pre>",
          "     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE:",
          "     *          Nothing can ever be selected.",
          "     *",
          "     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE",
          "     *          Allow only one selected item.",
          "     *",
          "     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE_INTERVAL",
          "     *          Allow one contiguous interval of selected items.",
          "     *",
          "     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.MULTIPLE_INTERVAL",
          "     *          Allow any selected items, whether contiguous or not.",
          "     *     </pre>",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the selection mode.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {Integer}\n   The selection mode to be used.  It may be any of:\n     <pre>\n       qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE:\n          Nothing can ever be selected.\n       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE\n          Allow only one selected item.\n       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE_INTERVAL\n          Allow one contiguous interval of selected items.\n       qx.ui.treevirtual.TreeVirtual.SelectionMode.MULTIPLE_INTERVAL\n          Allow any selected items, whether contiguous or not.\n     </pre>",
            "paramName": "mode",
            "description": "\n   The selection mode to be used.  It may be any of:\n     <pre>\n       qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE:\n          Nothing can ever be selected.\n       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE\n          Allow only one selected item.\n       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE_INTERVAL\n          Allow one contiguous interval of selected items.\n       qx.ui.treevirtual.TreeVirtual.SelectionMode.MULTIPLE_INTERVAL\n          Allow any selected items, whether contiguous or not.\n     </pre>",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 522,
          "column": 4,
          "index": 16436
        },
        "end": {
          "line": 524,
          "column": 5,
          "index": 16521
        }
      },
      "type": "function",
      "params": [
        {
          "name": "mode",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "getSelectionMode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the selection mode currently in use.",
          "     *",
          "     * @return {Integer}",
          "     *   One of the values documented in {@link #setSelectionMode}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the selection mode currently in use.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer}\n   One of the values documented in {@link #setSelectionMode}",
            "type": "Integer",
            "description": "   One of the values documented in {@link #setSelectionMode}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 532,
          "column": 4,
          "index": 16691
        },
        "end": {
          "line": 534,
          "column": 5,
          "index": 16775
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getHierarchy": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Obtain the entire hierarchy of labels from the root down to the",
          "     * specified node.",
          "     *",
          "     * @param nodeReference {Object | Integer}",
          "     *   The node for which the hierarchy is desired.  The node can be",
          "     *   represented either by the node object, or the node id (as would have",
          "     *   been returned by addBranch(), addLeaf(), etc.)",
          "     *",
          "     * @return {Array}",
          "     *   The returned array contains one string for each label in the",
          "     *   hierarchy of the node specified by the parameter.  Element 0 of the",
          "     *   array contains the label of the root node, element 1 contains the",
          "     *   label of the node immediately below root in the specified node's",
          "     *   hierarchy, etc., down to the last element in the array contain the",
          "     *   label of the node referenced by the parameter.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Obtain the entire hierarchy of labels from the root down to the\n specified node.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "nodeReference {Object | Integer}\n   The node for which the hierarchy is desired.  The node can be\n   represented either by the node object, or the node id (as would have\n   been returned by addBranch(), addLeaf(), etc.)",
            "paramName": "nodeReference",
            "description": "\n   The node for which the hierarchy is desired.  The node can be\n   represented either by the node object, or the node id (as would have\n   been returned by addBranch(), addLeaf(), etc.)",
            "type": [
              "Object",
              "Integer"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}\n   The returned array contains one string for each label in the\n   hierarchy of the node specified by the parameter.  Element 0 of the\n   array contains the label of the root node, element 1 contains the\n   label of the node immediately below root in the specified node's\n   hierarchy, etc., down to the last element in the array contain the\n   label of the node referenced by the parameter.",
            "type": "Array<any>",
            "description": "   The returned array contains one string for each label in the\n   hierarchy of the node specified by the parameter.  Element 0 of the\n   array contains the label of the root node, element 1 contains the\n   label of the node immediately below root in the specified node's\n   hierarchy, etc., down to the last element in the array contain the\n   label of the node referenced by the parameter."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 553,
          "column": 4,
          "index": 17609
        },
        "end": {
          "line": 587,
          "column": 5,
          "index": 18502
        }
      },
      "type": "function",
      "params": [
        {
          "name": "nodeReference",
          "type": [
            "Object",
            "Integer"
          ]
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "getSelectedNodes": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the nodes that are currently selected.",
          "     *",
          "     * @return {Array}",
          "     *   An array containing the nodes that are currently selected.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the nodes that are currently selected.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}\n   An array containing the nodes that are currently selected.",
            "type": "Array<any>",
            "description": "   An array containing the nodes that are currently selected."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 595,
          "column": 4,
          "index": 18676
        },
        "end": {
          "line": 597,
          "column": 5,
          "index": 18755
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "_onKeyDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called when a key was pressed.",
          "     *",
          "     * We handle the Enter key to toggle opened/closed tree state.  All",
          "     * other keydown events are passed to our superclass.",
          "     *",
          "     * @param evt {Map}",
          "     *   The event.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when a key was pressed.\n We handle the Enter key to toggle opened/closed tree state.  All\n other keydown events are passed to our superclass.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map}\n   The event.",
            "paramName": "evt",
            "description": "\n   The event.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 609,
          "column": 4,
          "index": 19026
        },
        "end": {
          "line": 767,
          "column": 5,
          "index": 23859
        }
      },
      "type": "function",
      "params": [
        {
          "name": "evt",
          "type": "Map<any, any>"
        }
      ],
      "overriddenFrom": "qx.ui.table.Table",
      "appearsIn": [
        "qx.ui.table.Table"
      ]
    },
    "_onSelectionChanged": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called when the selection has changed.",
          "     *",
          "     * @param evt {Map}",
          "     *   The event.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the selection has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {Map}\n   The event.",
            "paramName": "evt",
            "description": "\n   The event.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 776,
          "column": 4,
          "index": 24001
        },
        "end": {
          "line": 793,
          "column": 5,
          "index": 24543
        }
      },
      "type": "function",
      "params": [
        {
          "name": "evt",
          "type": "Map<any, any>"
        }
      ],
      "overriddenFrom": "qx.ui.table.Table",
      "appearsIn": [
        "qx.ui.table.Table"
      ]
    },
    "_calculateSelectedNodes": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calculate and return the set of nodes which are currently selected by",
          "     * the user, on the screen.  In the process of calculating which nodes",
          "     * are selected, the nodes corresponding to the selected rows on the",
          "     * screen are marked as selected by setting their <i>bSelected</i>",
          "     * property to true, and all previously-selected nodes have their",
          "     * <i>bSelected</i> property reset to false.",
          "     *",
          "     * @return {Array}",
          "     *   An array of nodes matching the set of rows which are selected on the",
          "     *   screen.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculate and return the set of nodes which are currently selected by\n the user, on the screen.  In the process of calculating which nodes\n are selected, the nodes corresponding to the selected rows on the\n screen are marked as selected by setting their <i>bSelected</i>\n property to true, and all previously-selected nodes have their\n <i>bSelected</i> property reset to false.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}\n   An array of nodes matching the set of rows which are selected on the\n   screen.",
            "type": "Array<any>",
            "description": "   An array of nodes matching the set of rows which are selected on the\n   screen."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 807,
          "column": 4,
          "index": 25106
        },
        "end": {
          "line": 827,
          "column": 5,
          "index": 25710
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "setOverflow": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the overflow mode.",
          "     *",
          "     * @param s {String}",
          "     *   Overflow mode.  The only allowable mode is \"hidden\".",
          "     *",
          "     *",
          "     * @throws {Error}",
          "     *   Error if tree overflow mode is other than \"hidden\"",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the overflow mode.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "s {String}\n   Overflow mode.  The only allowable mode is \"hidden\".",
            "paramName": "s",
            "description": "\n   Overflow mode.  The only allowable mode is \"hidden\".",
            "type": "string"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error}\n   Error if tree overflow mode is other than \"hidden\"",
            "type": "Error",
            "description": "\n   Error if tree overflow mode is other than \"hidden\""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 839,
          "column": 4,
          "index": 25954
        },
        "end": {
          "line": 846,
          "column": 5,
          "index": 26148
        }
      },
      "type": "function",
      "params": [
        {
          "name": "s",
          "type": "string"
        }
      ],
      "appearsIn": []
    }
  }
}