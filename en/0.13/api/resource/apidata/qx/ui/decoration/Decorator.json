{
  "version": 0.3,
  "lastModified": 1722153599623,
  "lastModifiedIso": "2024-07-28T07:59:59.623Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/decoration/Decorator.js",
  "type": "class",
  "location": {
    "start": {
      "line": 32,
      "column": 0,
      "index": 783
    },
    "end": {
      "line": 205,
      "column": 3,
      "index": 6226
    }
  },
  "className": "qx.ui.decoration.Decorator",
  "jsdoc": {
    "raw": [
      "*",
      " * Decorator including all decoration possibilities from mixins:",
      " *",
      " * <ul>",
      " * <li>Background color</li>",
      " * <li>Background image</li>",
      " * <li>Background gradient</li>",
      " * <li>Single and double borders</li>",
      " * <li>Border radius</li>",
      " * <li>Box shadow</li>",
      " * </ul>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Decorator including all decoration possibilities from mixins:\n </p>\n<ul>\n <li>Background color</li>\n <li>Background image</li>\n <li>Background gradient</li>\n <li>Single and double borders</li>\n <li>Border radius</li>\n <li>Box shadow</li>\n </ul>"
      }
    ]
  },
  "superClass": "qx.ui.decoration.Abstract",
  "interfaces": [
    "qx.ui.decoration.IDecorator"
  ],
  "mixins": [
    "qx.ui.decoration.MBackgroundColor",
    "qx.ui.decoration.MBorderRadius",
    "qx.ui.decoration.MBoxShadow",
    "qx.ui.decoration.MDoubleBorder",
    "qx.ui.decoration.MLinearBackgroundGradient",
    "qx.ui.decoration.MBorderImage",
    "qx.ui.decoration.MTransition"
  ],
  "members": {
    "__initialized": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1210
        },
        "end": {
          "line": 48,
          "column": 24,
          "index": 1230
        }
      },
      "appearsIn": []
    },
    "getPadding": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the configured padding minus the border width.",
          "     * @return {Map} Map of top, right, bottom and left padding values",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the configured padding minus the border width.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of top, right, bottom and left padding values",
            "type": "Map<any, any>",
            "description": "Map of top, right, bottom and left padding values"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1386
        },
        "end": {
          "line": 73,
          "column": 5,
          "index": 2196
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "overriddenFrom": "qx.ui.decoration.Abstract",
      "appearsIn": [
        "qx.ui.decoration.Abstract",
        "qx.ui.decoration.IDecorator",
        "qx.ui.decoration.IDecorator"
      ]
    },
    "getStyles": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the styles of the decorator as a map with property names written",
          "     * in javascript style (e.g. <code>fontWeight</code> instead of <code>font-weight</code>).",
          "     *",
          "     * @param css {Boolean?} <code>true</code> if hyphenated CSS names should be returned.",
          "     * @return {Map} style information",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the styles of the decorator as a map with property names written\n in javascript style (e.g. <code>fontWeight</code> instead of <code>font-weight</code>).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "css {Boolean?} <code>true</code> if hyphenated CSS names should be returned.",
            "paramName": "css",
            "description": " <code>true</code> if hyphenated CSS names should be returned.",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} style information",
            "type": "Map<any, any>",
            "description": "style information"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2531
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 2828
        }
      },
      "type": "function",
      "params": [
        {
          "name": "css",
          "type": "Boolean",
          "optional": true
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "overriddenFrom": "qx.ui.decoration.Abstract",
      "appearsIn": [
        "qx.ui.decoration.Abstract",
        "qx.ui.decoration.IDecorator",
        "qx.ui.decoration.IDecorator"
      ]
    },
    "_getStyles": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Collects all the style information from the decorators.",
          "     *",
          "     * @return {Map} style information",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Collects all the style information from the decorators.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} style information",
            "type": "Map<any, any>",
            "description": "style information"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 2960
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3366
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "_getDefaultInsets": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3391
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 4469
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.decoration.Abstract",
      "appearsIn": [
        "qx.ui.decoration.Abstract"
      ]
    },
    "_isInitialized": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 4494
        },
        "end": {
          "line": 157,
          "column": 5,
          "index": 4551
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.decoration.Abstract",
      "appearsIn": [
        "qx.ui.decoration.Abstract"
      ]
    },
    "_getExtendedPropertyValueArrays": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Ensures that every propertyValue specified in propertyNames is an array.",
          "     * The value arrays are extended and repeated to match in length.",
          "     * @param propertyNames {Array} Array containing the propertyNames.",
          "     * @return {Array} Array containing the extended value arrays.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Ensures that every propertyValue specified in propertyNames is an array.\n The value arrays are extended and repeated to match in length.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "propertyNames {Array} Array containing the propertyNames.",
            "paramName": "propertyNames",
            "description": " Array containing the propertyNames.",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Array containing the extended value arrays.",
            "type": "Array<any>",
            "description": "Array containing the extended value arrays."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 4863
        },
        "end": {
          "line": 191,
          "column": 5,
          "index": 5766
        }
      },
      "type": "function",
      "params": [
        {
          "name": "propertyNames",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__extendArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Extends an array up to the given length by repeating the elements already present.",
          "     * @param array {Array} Incoming array. Has to contain at least one element.",
          "     * @param to {Integer} Desired length. Must be greater than or equal to the the length of arr.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Extends an array up to the given length by repeating the elements already present.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array} Incoming array. Has to contain at least one element.",
            "paramName": "array",
            "description": " Incoming array. Has to contain at least one element.",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "to {Integer} Desired length. Must be greater than or equal to the the length of arr.",
            "paramName": "to",
            "description": " Desired length. Must be greater than or equal to the the length of arr.",
            "type": "Integer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 6059
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 6218
        }
      },
      "type": "function",
      "params": [
        {
          "name": "array",
          "type": "Array<any>"
        },
        {
          "name": "to",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "_styleBackgroundColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds the background-color styles to the given map",
          "     * @param styles {Map} CSS style map",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the background-color styles to the given map</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "styles {Map} CSS style map"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 984
        },
        "end": {
          "line": 47,
          "column": 5,
          "index": 1286
        }
      },
      "type": "function",
      "params": [
        {
          "name": "styles"
        }
      ],
      "mixin": "qx.ui.decoration.MBackgroundColor",
      "appearsIn": [
        "qx.ui.decoration.MBackgroundColor"
      ]
    },
    "_applyBackgroundColor": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1315
        },
        "end": {
          "line": 58,
          "column": 5,
          "index": 1576
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MBackgroundColor",
      "appearsIn": [
        "qx.ui.decoration.MBackgroundColor"
      ]
    },
    "_styleBorderRadius": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes a styles map and adds the border radius styles in place to the",
          "     * given map. This is the needed behavior for",
          "     * {@link qx.ui.decoration.Decorator}.",
          "     *",
          "     * @param styles {Map} A map to add the styles.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes a styles map and adds the border radius styles in place to the\n given map. This is the needed behavior for\n {@link qx.ui.decoration.Decorator}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "styles {Map} A map to add the styles."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 1917
        },
        "end": {
          "line": 128,
          "column": 5,
          "index": 3750
        }
      },
      "type": "function",
      "params": [
        {
          "name": "styles"
        }
      ],
      "mixin": "qx.ui.decoration.MBorderRadius",
      "appearsIn": [
        "qx.ui.decoration.MBorderRadius"
      ]
    },
    "_applyBorderRadius": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3779
        },
        "end": {
          "line": 139,
          "column": 5,
          "index": 4037
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MBorderRadius",
      "appearsIn": [
        "qx.ui.decoration.MBorderRadius"
      ]
    },
    "_styleBoxShadow": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes a styles map and adds the box shadow styles in place to the",
          "     * given map. This is the needed behavior for",
          "     * {@link qx.ui.decoration.Decorator}.",
          "     *",
          "     * @param styles {Map} A map to add the styles.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes a styles map and adds the box shadow styles in place to the\n given map. This is the needed behavior for\n {@link qx.ui.decoration.Decorator}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "styles {Map} A map to add the styles."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 2818
        },
        "end": {
          "line": 170,
          "column": 5,
          "index": 4528
        }
      },
      "type": "function",
      "params": [
        {
          "name": "styles"
        }
      ],
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "_applyBoxShadow": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 4557
        },
        "end": {
          "line": 181,
          "column": 5,
          "index": 4812
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "__styleDoubleBorder": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes a styles map and adds the outer border styles in place",
          "     * to the given map. This is the needed behavior for",
          "     * {@link qx.ui.decoration.Decorator}.",
          "     *",
          "     * @param styles {Map} A map to add the styles.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes a styles map and adds the outer border styles in place\n to the given map. This is the needed behavior for\n {@link qx.ui.decoration.Decorator}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "styles {Map} A map to add the styles."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 3673
        },
        "end": {
          "line": 318,
          "column": 5,
          "index": 8886
        }
      },
      "type": "function",
      "params": [
        {
          "name": "styles"
        }
      ],
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "__processInnerOpacity": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts the inner border's colors to rgba.",
          "     *",
          "     * @param innerColor {Map} map of top, right, bottom and left colors",
          "     * @param innerOpacity {Number} alpha value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts the inner border's colors to rgba.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "innerColor {Map} map of top, right, bottom and left colors"
          },
          {
            "name": "@param",
            "body": "innerOpacity {Number} alpha value"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 326,
          "column": 4,
          "index": 9088
        },
        "end": {
          "line": 342,
          "column": 5,
          "index": 9653
        }
      },
      "type": "function",
      "params": [
        {
          "name": "innerColor"
        },
        {
          "name": "innerOpacity"
        }
      ],
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "_applyDoubleBorder": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 344,
          "column": 4,
          "index": 9660
        },
        "end": {
          "line": 352,
          "column": 5,
          "index": 9918
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "__getDefaultInsetsForDoubleBorder": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Implementation of the interface for the double border.",
          "     *",
          "     * @return {Map} A map containing the default insets.",
          "     *   (top, right, bottom, left)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation of the interface for the double border.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "top, right, bottom, left"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 360,
          "column": 4,
          "index": 10104
        },
        "end": {
          "line": 367,
          "column": 5,
          "index": 10424
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "_styleLinearBackgroundGradient": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes a styles map and adds the linear background styles in place to the",
          "     * given map. This is the needed behavior for",
          "     * {@link qx.ui.decoration.Decorator}.",
          "     *",
          "     * @param styles {Map} A map to add the styles.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes a styles map and adds the linear background styles in place to the\n given map. This is the needed behavior for\n {@link qx.ui.decoration.Decorator}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "styles {Map} A map to add the styles."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4112
        },
        "end": {
          "line": 208,
          "column": 5,
          "index": 6516
        }
      },
      "type": "function",
      "params": [
        {
          "name": "styles"
        }
      ],
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "__styleLinearBackgroundGradientForLegacyWebkit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Compute CSS rules to style the background with gradients.",
          "     * This can be called multiple times and SHOULD layer the gradients on top of each other and on top of existing backgrounds.",
          "     * Legacy implementation for old WebKit browsers (Chrome < 10).",
          "     *",
          "     * @param startColor {Color} The color to start the gradient with",
          "     * @param endColor {Color} The color to end the gradient with",
          "     * @param unit {Color} The unit in which startColorPosition and endColorPosition are measured",
          "     * @param orientation {String} Either 'horizontal' or 'vertical'",
          "     * @param startColorPosition {Number} The position of the gradient’s starting point, measured in `unit` units along the `orientation` axis from top or left",
          "     * @param endColorPosition {Number} The position of the gradient’s ending point, measured in `unit` units along the `orientation` axis from top or left",
          "     * @param styles {Map} The complete styles currently poised to be applied by decorators. Should not be written to in this method (use `backgroundStyle` for that)",
          "     * @param backgroundStyle {Map} This method should push new background styles onto this array.",
          "     *",
          "     * @return {Boolean} Whether this implementation supports multiple gradients atop each other (true).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compute CSS rules to style the background with gradients.\n This can be called multiple times and SHOULD layer the gradients on top of each other and on top of existing backgrounds.\n Legacy implementation for old WebKit browsers (Chrome &lt; 10).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startColor {Color} The color to start the gradient with"
          },
          {
            "name": "@param",
            "body": "endColor {Color} The color to end the gradient with"
          },
          {
            "name": "@param",
            "body": "unit {Color} The unit in which startColorPosition and endColorPosition are measured"
          },
          {
            "name": "@param",
            "body": "orientation {String} Either 'horizontal' or 'vertical'"
          },
          {
            "name": "@param",
            "body": "startColorPosition {Number} The position of the gradient’s starting point, measured in <code>unit</code> units along the <code>orientation</code> axis from top or left"
          },
          {
            "name": "@param",
            "body": "endColorPosition {Number} The position of the gradient’s ending point, measured in <code>unit</code> units along the <code>orientation</code> axis from top or left"
          },
          {
            "name": "@param",
            "body": "styles {Map} The complete styles currently poised to be applied by decorators. Should not be written to in this method (use <code>backgroundStyle</code> for that)"
          },
          {
            "name": "@param",
            "body": "backgroundStyle {Map} This method should push new background styles onto this array."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether this implementation supports multiple gradients atop each other (true)."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 226,
          "column": 4,
          "index": 7804
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 8634
        }
      },
      "type": "function",
      "params": [
        {
          "name": "startColor"
        },
        {
          "name": "endColor"
        },
        {
          "name": "unit"
        },
        {
          "name": "orientation"
        },
        {
          "name": "startColorPosition"
        },
        {
          "name": "endColorPosition"
        },
        {
          "name": "styles"
        },
        {
          "name": "backgroundStyle"
        }
      ],
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "__styleLinearBackgroundGradientWithCanvas": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Compute CSS rules to style the background with gradients.",
          "     * This can be called multiple times and SHOULD layer the gradients on top of each other and on top of existing backgrounds.",
          "     * IE9 canvas solution.",
          "     *",
          "     * @param startColor {Color} The color to start the gradient with",
          "     * @param endColor {Color} The color to end the gradient with",
          "     * @param unit {Color} The unit in which startColorPosition and endColorPosition are measured",
          "     * @param orientation {String} Either 'horizontal' or 'vertical'",
          "     * @param startColorPosition {Number} The position of the gradient’s starting point, measured in `unit` units along the `orientation` axis from top or left",
          "     * @param endColorPosition {Number} The position of the gradient’s ending point, measured in `unit` units along the `orientation` axis from top or left",
          "     * @param styles {Map} The complete styles currently poised to be applied by decorators. Should not be written to in this method (use `backgroundStyle` for that)",
          "     * @param backgroundStyle {Map} This method should push new background styles onto this array.",
          "     *",
          "     * @return {Boolean} Whether this implementation supports multiple gradients atop each other (true).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compute CSS rules to style the background with gradients.\n This can be called multiple times and SHOULD layer the gradients on top of each other and on top of existing backgrounds.\n IE9 canvas solution.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startColor {Color} The color to start the gradient with"
          },
          {
            "name": "@param",
            "body": "endColor {Color} The color to end the gradient with"
          },
          {
            "name": "@param",
            "body": "unit {Color} The unit in which startColorPosition and endColorPosition are measured"
          },
          {
            "name": "@param",
            "body": "orientation {String} Either 'horizontal' or 'vertical'"
          },
          {
            "name": "@param",
            "body": "startColorPosition {Number} The position of the gradient’s starting point, measured in <code>unit</code> units along the <code>orientation</code> axis from top or left"
          },
          {
            "name": "@param",
            "body": "endColorPosition {Number} The position of the gradient’s ending point, measured in <code>unit</code> units along the <code>orientation</code> axis from top or left"
          },
          {
            "name": "@param",
            "body": "styles {Map} The complete styles currently poised to be applied by decorators. Should not be written to in this method (use <code>backgroundStyle</code> for that)"
          },
          {
            "name": "@param",
            "body": "backgroundStyle {Map} This method should push new background styles onto this array."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether this implementation supports multiple gradients atop each other (true)."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 272,
          "column": 4,
          "index": 9882
        },
        "end": {
          "line": 355,
          "column": 5,
          "index": 12340
        }
      },
      "type": "function",
      "params": [
        {
          "name": "startColor"
        },
        {
          "name": "endColor"
        },
        {
          "name": "unit"
        },
        {
          "name": "orientation"
        },
        {
          "name": "startColorPosition"
        },
        {
          "name": "endColorPosition"
        },
        {
          "name": "styles"
        },
        {
          "name": "backgroundStyle"
        }
      ],
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "__styleLinearBackgroundGradientWithMSFilter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Compute CSS rules to style the background with gradients.",
          "     * This can be called multiple times and SHOULD layer the gradients on top of each other and on top of existing backgrounds.",
          "     * Old IE filter fallback.",
          "     *",
          "     * @param startColor {Color} The color to start the gradient with",
          "     * @param endColor {Color} The color to end the gradient with",
          "     * @param unit {Color} The unit in which startColorPosition and endColorPosition are measured",
          "     * @param orientation {String} Either 'horizontal' or 'vertical'",
          "     * @param startColorPosition {Number} The position of the gradient’s starting point, measured in `unit` units along the `orientation` axis from top or left",
          "     * @param endColorPosition {Number} The position of the gradient’s ending point, measured in `unit` units along the `orientation` axis from top or left",
          "     * @param styles {Map} The complete styles currently poised to be applied by decorators. Should not be written to in this method (use `backgroundStyle` for that). Note: this particular implementation will do that because it needs to change the `filter` property.",
          "     * @param backgroundStyle {Map} This method should push new background styles onto this array.",
          "     *",
          "     * @return {Boolean} Whether this implementation supports multiple gradients atop each other (false).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compute CSS rules to style the background with gradients.\n This can be called multiple times and SHOULD layer the gradients on top of each other and on top of existing backgrounds.\n Old IE filter fallback.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startColor {Color} The color to start the gradient with"
          },
          {
            "name": "@param",
            "body": "endColor {Color} The color to end the gradient with"
          },
          {
            "name": "@param",
            "body": "unit {Color} The unit in which startColorPosition and endColorPosition are measured"
          },
          {
            "name": "@param",
            "body": "orientation {String} Either 'horizontal' or 'vertical'"
          },
          {
            "name": "@param",
            "body": "startColorPosition {Number} The position of the gradient’s starting point, measured in <code>unit</code> units along the <code>orientation</code> axis from top or left"
          },
          {
            "name": "@param",
            "body": "endColorPosition {Number} The position of the gradient’s ending point, measured in <code>unit</code> units along the <code>orientation</code> axis from top or left"
          },
          {
            "name": "@param",
            "body": "styles {Map} The complete styles currently poised to be applied by decorators. Should not be written to in this method (use <code>backgroundStyle</code> for that). Note: this particular implementation will do that because it needs to change the <code>filter</code> property."
          },
          {
            "name": "@param",
            "body": "backgroundStyle {Map} This method should push new background styles onto this array."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether this implementation supports multiple gradients atop each other (false)."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 373,
          "column": 4,
          "index": 13693
        },
        "end": {
          "line": 427,
          "column": 5,
          "index": 15385
        }
      },
      "type": "function",
      "params": [
        {
          "name": "startColor"
        },
        {
          "name": "endColor"
        },
        {
          "name": "unit"
        },
        {
          "name": "orientation"
        },
        {
          "name": "startColorPosition"
        },
        {
          "name": "endColorPosition"
        },
        {
          "name": "styles"
        },
        {
          "name": "backgroundStyle"
        }
      ],
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "__styleLinearBackgroundGradientAccordingToSpec": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Compute CSS rules to style the background with gradients.",
          "     * This can be called multiple times and SHOULD layer the gradients on top of each other and on top of existing backgrounds.",
          "     * Default implementation (uses spec-compliant syntax).",
          "     *",
          "     * @param startColor {Color} The color to start the gradient with",
          "     * @param endColor {Color} The color to end the gradient with",
          "     * @param unit {Color} The unit in which startColorPosition and endColorPosition are measured",
          "     * @param orientation {String} Either 'horizontal' or 'vertical'",
          "     * @param startColorPosition {Number} The position of the gradient’s starting point, measured in `unit` units along the `orientation` axis from top or left",
          "     * @param endColorPosition {Number} The position of the gradient’s ending point, measured in `unit` units along the `orientation` axis from top or left",
          "     * @param styles {Map} The complete styles currently poised to be applied by decorators. Should not be written to in this method (use `backgroundStyle` for that)",
          "     * @param backgroundStyle {Map} This method should push new background styles onto this array.",
          "     *",
          "     * @return {Boolean} Whether this implementation supports multiple gradients atop each other (true).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compute CSS rules to style the background with gradients.\n This can be called multiple times and SHOULD layer the gradients on top of each other and on top of existing backgrounds.\n Default implementation (uses spec-compliant syntax).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startColor {Color} The color to start the gradient with"
          },
          {
            "name": "@param",
            "body": "endColor {Color} The color to end the gradient with"
          },
          {
            "name": "@param",
            "body": "unit {Color} The unit in which startColorPosition and endColorPosition are measured"
          },
          {
            "name": "@param",
            "body": "orientation {String} Either 'horizontal' or 'vertical'"
          },
          {
            "name": "@param",
            "body": "startColorPosition {Number} The position of the gradient’s starting point, measured in <code>unit</code> units along the <code>orientation</code> axis from top or left"
          },
          {
            "name": "@param",
            "body": "endColorPosition {Number} The position of the gradient’s ending point, measured in <code>unit</code> units along the <code>orientation</code> axis from top or left"
          },
          {
            "name": "@param",
            "body": "styles {Map} The complete styles currently poised to be applied by decorators. Should not be written to in this method (use <code>backgroundStyle</code> for that)"
          },
          {
            "name": "@param",
            "body": "backgroundStyle {Map} This method should push new background styles onto this array."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether this implementation supports multiple gradients atop each other (true)."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 445,
          "column": 4,
          "index": 16665
        },
        "end": {
          "line": 473,
          "column": 5,
          "index": 17569
        }
      },
      "type": "function",
      "params": [
        {
          "name": "startColor"
        },
        {
          "name": "endColor"
        },
        {
          "name": "unit"
        },
        {
          "name": "orientation"
        },
        {
          "name": "startColorPosition"
        },
        {
          "name": "endColorPosition"
        },
        {
          "name": "styles"
        },
        {
          "name": "backgroundStyle"
        }
      ],
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "__getColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper to get a resolved color from a name",
          "     * @param color {String} The color name",
          "     * @return {Map} The resolved color",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to get a resolved color from a name</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "color {String} The color name"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The resolved color"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 480,
          "column": 4,
          "index": 17726
        },
        "end": {
          "line": 484,
          "column": 5,
          "index": 17879
        }
      },
      "type": "function",
      "params": [
        {
          "name": "color"
        }
      ],
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "_applyLinearBackgroundGradient": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 487,
          "column": 4,
          "index": 17908
        },
        "end": {
          "line": 495,
          "column": 5,
          "index": 18178
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "_styleBorderImage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds the border-image styles to the given map",
          "     * @param styles {Map} CSS style map",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the border-image styles to the given map</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "styles {Map} CSS style map"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 4715
        },
        "end": {
          "line": 206,
          "column": 5,
          "index": 6026
        }
      },
      "type": "function",
      "params": [
        {
          "name": "styles"
        }
      ],
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "_getDefaultInsetsForBorderImage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Computes the inset values based on the border image slices (defined in the",
          "     * decoration theme or computed from the fallback image sizes).",
          "     *",
          "     * @return {Map} Map with the top, right, bottom and left insets",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the inset values based on the border image slices (defined in the\n decoration theme or computed from the fallback image sizes).</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map with the top, right, bottom and left insets"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 214,
          "column": 4,
          "index": 6275
        },
        "end": {
          "line": 236,
          "column": 5,
          "index": 6888
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "_applyBorderImage": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 238,
          "column": 4,
          "index": 6895
        },
        "end": {
          "line": 246,
          "column": 5,
          "index": 7152
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "__getSlices": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Gets the slice sizes from the fallback border images.",
          "     *",
          "     * @param baseImage {String} Resource Id of the base border image",
          "     * @return {Integer[]} Array with the top, right, bottom and left slice widths",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the slice sizes from the fallback border images.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "baseImage {String} Resource Id of the base border image"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer[]} Array with the top, right, bottom and left slice widths"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 254,
          "column": 4,
          "index": 7396
        },
        "end": {
          "line": 278,
          "column": 5,
          "index": 8223
        }
      },
      "type": "function",
      "params": [
        {
          "name": "baseImage"
        }
      ],
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "_styleTransition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes a styles map and adds the box shadow styles in place to the",
          "     * given map. This is the needed behavior for",
          "     * {@link qx.ui.decoration.Decorator}.",
          "     *",
          "     * @param styles {Map} A map to add the styles.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes a styles map and adds the box shadow styles in place to the\n given map. This is the needed behavior for\n {@link qx.ui.decoration.Decorator}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "styles {Map} A map to add the styles."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 1975
        },
        "end": {
          "line": 125,
          "column": 5,
          "index": 3352
        }
      },
      "type": "function",
      "params": [
        {
          "name": "styles"
        }
      ],
      "mixin": "qx.ui.decoration.MTransition",
      "appearsIn": [
        "qx.ui.decoration.MTransition"
      ]
    },
    "_applyTransition": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3381
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 3637
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.decoration.MTransition",
      "appearsIn": [
        "qx.ui.decoration.MTransition"
      ]
    }
  },
  "statics": {},
  "properties": {
    "backgroundColor": {
      "location": {
        "start": {
          "line": 25,
          "column": 4,
          "index": 741
        },
        "end": {
          "line": 29,
          "column": 5,
          "index": 846
        }
      },
      "json": {
        "check": "Color",
        "nullable": true,
        "apply": "_applyBackgroundColor"
      },
      "jsdoc": {
        "raw": [
          "* Color of the background "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Color of the background</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBackgroundColor",
      "appearsIn": [
        "qx.ui.decoration.MBackgroundColor"
      ]
    },
    "radiusTopLeft": {
      "location": {
        "start": {
          "line": 33,
          "column": 4,
          "index": 860
        },
        "end": {
          "line": 37,
          "column": 5,
          "index": 962
        }
      },
      "json": {
        "nullable": true,
        "check": "Integer",
        "apply": "_applyBorderRadius"
      },
      "jsdoc": {
        "raw": [
          "* top left corner radius "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>top left corner radius</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderRadius",
      "appearsIn": [
        "qx.ui.decoration.MBorderRadius"
      ]
    },
    "radiusTopRight": {
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1004
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1107
        }
      },
      "json": {
        "nullable": true,
        "check": "Integer",
        "apply": "_applyBorderRadius"
      },
      "jsdoc": {
        "raw": [
          "* top right corner radius "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>top right corner radius</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderRadius",
      "appearsIn": [
        "qx.ui.decoration.MBorderRadius"
      ]
    },
    "radiusBottomLeft": {
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1151
        },
        "end": {
          "line": 51,
          "column": 5,
          "index": 1256
        }
      },
      "json": {
        "nullable": true,
        "check": "Integer",
        "apply": "_applyBorderRadius"
      },
      "jsdoc": {
        "raw": [
          "* bottom left corner radius "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>bottom left corner radius</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderRadius",
      "appearsIn": [
        "qx.ui.decoration.MBorderRadius"
      ]
    },
    "radiusBottomRight": {
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1301
        },
        "end": {
          "line": 58,
          "column": 5,
          "index": 1407
        }
      },
      "json": {
        "nullable": true,
        "check": "Integer",
        "apply": "_applyBorderRadius"
      },
      "jsdoc": {
        "raw": [
          "* bottom right corner radius "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>bottom right corner radius</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderRadius",
      "appearsIn": [
        "qx.ui.decoration.MBorderRadius"
      ]
    },
    "radius": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1478
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 1649
        }
      },
      "json": {
        "group": [
          "radiusTopLeft",
          "radiusTopRight",
          "radiusBottomRight",
          "radiusBottomLeft"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "* Property group to set the corner radius of all sides "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property group to set the corner radius of all sides</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderRadius",
      "appearsIn": [
        "qx.ui.decoration.MBorderRadius"
      ]
    },
    "shadowHorizontalLength": {
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1670
        },
        "end": {
          "line": 63,
          "column": 5,
          "index": 1754
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyBoxShadow"
      },
      "jsdoc": {
        "raw": [
          "* Horizontal length of the shadow. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Horizontal length of the shadow.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "shadowVerticalLength": {
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 1803
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 1885
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyBoxShadow"
      },
      "jsdoc": {
        "raw": [
          "* Vertical length of the shadow. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Vertical length of the shadow.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "shadowBlurRadius": {
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 1934
        },
        "end": {
          "line": 75,
          "column": 5,
          "index": 2012
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyBoxShadow"
      },
      "jsdoc": {
        "raw": [
          "* The blur radius of the shadow. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The blur radius of the shadow.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "shadowSpreadRadius": {
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2063
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2143
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyBoxShadow"
      },
      "jsdoc": {
        "raw": [
          "* The spread radius of the shadow. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The spread radius of the shadow.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "shadowColor": {
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2186
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2259
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyBoxShadow"
      },
      "jsdoc": {
        "raw": [
          "* The color of the shadow. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The color of the shadow.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "inset": {
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2320
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2384
        }
      },
      "json": {
        "init": false,
        "apply": "_applyBoxShadow"
      },
      "jsdoc": {
        "raw": [
          "* Inset shadows are drawn inside the border. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Inset shadows are drawn inside the border.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "shadowLength": {
      "location": {
        "start": {
          "line": 96,
          "column": 4,
          "index": 2443
        },
        "end": {
          "line": 99,
          "column": 5,
          "index": 2553
        }
      },
      "json": {
        "group": [
          "shadowHorizontalLength",
          "shadowVerticalLength"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "* Property group to set the shadow length. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property group to set the shadow length.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBoxShadow",
      "appearsIn": [
        "qx.ui.decoration.MBoxShadow"
      ]
    },
    "innerWidthTop": {
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1458
        },
        "end": {
          "line": 50,
          "column": 5,
          "index": 1552
        }
      },
      "json": {
        "check": "Number",
        "init": 0,
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "* top width of border "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>top width of border</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerWidthRight": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1592
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 1688
        }
      },
      "json": {
        "check": "Number",
        "init": 0,
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "* right width of border "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>right width of border</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerWidthBottom": {
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1729
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 1826
        }
      },
      "json": {
        "check": "Number",
        "init": 0,
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "* bottom width of border "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>bottom width of border</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerWidthLeft": {
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1865
        },
        "end": {
          "line": 71,
          "column": 5,
          "index": 1960
        }
      },
      "json": {
        "check": "Number",
        "init": 0,
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "* left width of border "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>left width of border</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerWidth": {
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2036
        },
        "end": {
          "line": 83,
          "column": 5,
          "index": 2209
        }
      },
      "json": {
        "group": [
          "innerWidthTop",
          "innerWidthRight",
          "innerWidthBottom",
          "innerWidthLeft"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "* Property group to set the inner border width of all sides "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property group to set the inner border width of all sides</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerColorTop": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2456
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 2556
        }
      },
      "json": {
        "nullable": true,
        "check": "Color",
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "* top inner color of border "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>top inner color of border</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerColorRight": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2602
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 2704
        }
      },
      "json": {
        "nullable": true,
        "check": "Color",
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "* right inner color of border "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>right inner color of border</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerColorBottom": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 2751
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 2854
        }
      },
      "json": {
        "nullable": true,
        "check": "Color",
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "* bottom inner color of border "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>bottom inner color of border</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerColorLeft": {
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 2899
        },
        "end": {
          "line": 117,
          "column": 5,
          "index": 3000
        }
      },
      "json": {
        "nullable": true,
        "check": "Color",
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "* left inner color of border "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>left inner color of border</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerColor": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3077
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 3250
        }
      },
      "json": {
        "group": [
          "innerColorTop",
          "innerColorRight",
          "innerColorBottom",
          "innerColorLeft"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Property group for the inner color properties.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property group for the inner color properties.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "innerOpacity": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3313
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 3406
        }
      },
      "json": {
        "check": "Number",
        "init": 1,
        "apply": "_applyDoubleBorder"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The opacity of the inner border.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The opacity of the inner border.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MDoubleBorder",
      "appearsIn": [
        "qx.ui.decoration.MDoubleBorder"
      ]
    },
    "startColor": {
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 2577
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 2664
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyLinearBackgroundGradient"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Start color of the background gradient.",
          "     * Note that alpha transparency (rgba) is not supported in IE 8.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start color of the background gradient.\n Note that alpha transparency (rgba) is not supported in IE 8.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "endColor": {
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2801
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2886
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyLinearBackgroundGradient"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * End color of the background gradient.",
          "     * Note that alpha transparency (rgba) is not supported in IE 8.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>End color of the background gradient.\n Note that alpha transparency (rgba) is not supported in IE 8.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "orientation": {
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2937
        },
        "end": {
          "line": 91,
          "column": 5,
          "index": 3027
        }
      },
      "json": {
        "init": "vertical",
        "apply": "_applyLinearBackgroundGradient"
      },
      "jsdoc": {
        "raw": [
          "* The orientation of the gradient. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The orientation of the gradient.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "startColorPosition": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 3091
        },
        "end": {
          "line": 97,
          "column": 5,
          "index": 3179
        }
      },
      "json": {
        "init": 0,
        "apply": "_applyLinearBackgroundGradient"
      },
      "jsdoc": {
        "raw": [
          "* Position in percent where to start the color. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Position in percent where to start the color.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "endColorPosition": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 3243
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 3331
        }
      },
      "json": {
        "init": 100,
        "apply": "_applyLinearBackgroundGradient"
      },
      "jsdoc": {
        "raw": [
          "* Position in percent where to start the color. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Position in percent where to start the color.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "colorPositionUnit": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 3395
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 3484
        }
      },
      "json": {
        "init": "%",
        "apply": "_applyLinearBackgroundGradient"
      },
      "jsdoc": {
        "raw": [
          "* Defines if the given positions are in % or px."
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Defines if the given positions are in % or px.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "gradientStart": {
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3570
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3667
        }
      },
      "json": {
        "group": [
          "startColor",
          "startColorPosition"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "* Property group to set the start color including its start position. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property group to set the start color including its start position.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "gradientEnd": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3749
        },
        "end": {
          "line": 121,
          "column": 5,
          "index": 3840
        }
      },
      "json": {
        "group": [
          "endColor",
          "endColorPosition"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "* Property group to set the end color including its end position. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property group to set the end color including its end position.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MLinearBackgroundGradient",
      "appearsIn": [
        "qx.ui.decoration.MLinearBackgroundGradient"
      ]
    },
    "borderImage": {
      "location": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 695
        },
        "end": {
          "line": 32,
          "column": 5,
          "index": 793
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "apply": "_applyBorderImage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Base image URL.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Base image URL.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "sliceTop": {
      "location": {
        "start": {
          "line": 39,
          "column": 4,
          "index": 985
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1099
        }
      },
      "json": {
        "check": "Integer",
        "nullable": true,
        "apply": "_applyBorderImage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The top slice line of the base image. The slice properties divide the",
          "     * image into nine regions, which define the corner, edge and the center",
          "     * images.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The top slice line of the base image. The slice properties divide the\n image into nine regions, which define the corner, edge and the center\n images.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "sliceRight": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1293
        },
        "end": {
          "line": 56,
          "column": 5,
          "index": 1409
        }
      },
      "json": {
        "check": "Integer",
        "nullable": true,
        "apply": "_applyBorderImage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The right slice line of the base image. The slice properties divide the",
          "     * image into nine regions, which define the corner, edge and the center",
          "     * images.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The right slice line of the base image. The slice properties divide the\n image into nine regions, which define the corner, edge and the center\n images.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "sliceBottom": {
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1604
        },
        "end": {
          "line": 68,
          "column": 5,
          "index": 1721
        }
      },
      "json": {
        "check": "Integer",
        "nullable": true,
        "apply": "_applyBorderImage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The bottom slice line of the base image. The slice properties divide the",
          "     * image into nine regions, which define the corner, edge and the center",
          "     * images.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The bottom slice line of the base image. The slice properties divide the\n image into nine regions, which define the corner, edge and the center\n images.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "sliceLeft": {
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 1914
        },
        "end": {
          "line": 80,
          "column": 5,
          "index": 2029
        }
      },
      "json": {
        "check": "Integer",
        "nullable": true,
        "apply": "_applyBorderImage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The left slice line of the base image. The slice properties divide the",
          "     * image into nine regions, which define the corner, edge and the center",
          "     * images.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The left slice line of the base image. The slice properties divide the\n image into nine regions, which define the corner, edge and the center\n images.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "slice": {
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2176
        },
        "end": {
          "line": 89,
          "column": 5,
          "index": 2283
        }
      },
      "json": {
        "group": [
          "sliceTop",
          "sliceRight",
          "sliceBottom",
          "sliceLeft"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The slice properties divide the image into nine regions, which define the",
          "     * corner, edge and the center images.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The slice properties divide the image into nine regions, which define the\n corner, edge and the center images.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "repeatX": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 2907
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 3024
        }
      },
      "json": {
        "check": [
          "stretch",
          "repeat",
          "round"
        ],
        "init": "stretch",
        "apply": "_applyBorderImage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * This property specifies how the images for the sides and the middle part",
          "     * of the border image are scaled and tiled horizontally.",
          "     *",
          "     * Values have the following meanings:",
          "     * <ul>",
          "     *   <li><strong>stretch</strong>: The image is stretched to fill the area.</li>",
          "     *   <li><strong>repeat</strong>: The image is tiled (repeated) to fill the area.</li>",
          "     *   <li><strong>round</strong>: The image is tiled (repeated) to fill the area. If it does not",
          "     *    fill the area with a whole number of tiles, the image is rescaled so",
          "     *    that it does.</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This property specifies how the images for the sides and the middle part\n of the border image are scaled and tiled horizontally.\n Values have the following meanings:\n </p>\n<ul>\n   <li><strong>stretch</strong>: The image is stretched to fill the area.</li>\n   <li><strong>repeat</strong>: The image is tiled (repeated) to fill the area.</li>\n   <li><strong>round</strong>: The image is tiled (repeated) to fill the area. If it does not\n    fill the area with a whole number of tiles, the image is rescaled so\n    that it does.</li>\n </ul>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "repeatY": {
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3646
        },
        "end": {
          "line": 127,
          "column": 5,
          "index": 3763
        }
      },
      "json": {
        "check": [
          "stretch",
          "repeat",
          "round"
        ],
        "init": "stretch",
        "apply": "_applyBorderImage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * This property specifies how the images for the sides and the middle part",
          "     * of the border image are scaled and tiled vertically.",
          "     *",
          "     * Values have the following meanings:",
          "     * <ul>",
          "     *   <li><strong>stretch</strong>: The image is stretched to fill the area.</li>",
          "     *   <li><strong>repeat</strong>: The image is tiled (repeated) to fill the area.</li>",
          "     *   <li><strong>round</strong>: The image is tiled (repeated) to fill the area. If it does not",
          "     *    fill the area with a whole number of tiles, the image is rescaled so",
          "     *    that it does.</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This property specifies how the images for the sides and the middle part\n of the border image are scaled and tiled vertically.\n Values have the following meanings:\n </p>\n<ul>\n   <li><strong>stretch</strong>: The image is stretched to fill the area.</li>\n   <li><strong>repeat</strong>: The image is tiled (repeated) to fill the area.</li>\n   <li><strong>round</strong>: The image is tiled (repeated) to fill the area. If it does not\n    fill the area with a whole number of tiles, the image is rescaled so\n    that it does.</li>\n </ul>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "repeat": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 3915
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 3991
        }
      },
      "json": {
        "group": [
          "repeatX",
          "repeatY"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * This property specifies how the images for the sides and the middle part",
          "     * of the border image are scaled and tiled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This property specifies how the images for the sides and the middle part\n of the border image are scaled and tiled.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "fill": {
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 4126
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 4214
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyBorderImage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * If set to <code>false</code>, the center image will be omitted and only",
          "     * the border will be drawn.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If set to <code>false</code>, the center image will be omitted and only\n the border will be drawn.</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "borderImageMode": {
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4489
        },
        "end": {
          "line": 159,
          "column": 5,
          "index": 4581
        }
      },
      "json": {
        "check": [
          "horizontal",
          "vertical",
          "grid"
        ],
        "init": "grid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Configures the border image mode. Supported values:",
          "     * <ul>",
          "     *   <li>horizontal: left and right border images</li>",
          "     *   <li>vertical: top and bottom border images</li>",
          "     *   <li>grid: border images for all edges</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Configures the border image mode. Supported values:\n </p>\n<ul>\n   <li>horizontal: left and right border images</li>\n   <li>vertical: top and bottom border images</li>\n   <li>grid: border images for all edges</li>\n </ul>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MBorderImage",
      "appearsIn": [
        "qx.ui.decoration.MBorderImage"
      ]
    },
    "transitionProperty": {
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1275
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1356
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyTransition"
      },
      "jsdoc": {
        "raw": [
          "* transition property "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>transition property</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MTransition",
      "appearsIn": [
        "qx.ui.decoration.MTransition"
      ]
    },
    "transitionDuration": {
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1394
        },
        "end": {
          "line": 58,
          "column": 5,
          "index": 1475
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyTransition"
      },
      "jsdoc": {
        "raw": [
          "* transition duration "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>transition duration</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MTransition",
      "appearsIn": [
        "qx.ui.decoration.MTransition"
      ]
    },
    "transitionTimingFunction": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1510
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 1597
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyTransition"
      },
      "jsdoc": {
        "raw": [
          "* transition delay "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>transition delay</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MTransition",
      "appearsIn": [
        "qx.ui.decoration.MTransition"
      ]
    },
    "transitionDelay": {
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1632
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 1710
        }
      },
      "json": {
        "nullable": true,
        "apply": "_applyTransition"
      },
      "jsdoc": {
        "raw": [
          "* transition delay "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>transition delay</p>"
          }
        ]
      },
      "mixin": "qx.ui.decoration.MTransition",
      "appearsIn": [
        "qx.ui.decoration.MTransition"
      ]
    }
  }
}