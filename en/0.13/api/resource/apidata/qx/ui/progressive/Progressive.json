{
  "version": 0.3,
  "lastModified": 1717235172034,
  "lastModifiedIso": "2024-06-01T09:46:12.034Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/Progressive.js",
  "type": "class",
  "location": {
    "start": {
      "line": 36,
      "column": 0,
      "index": 1309
    },
    "end": {
      "line": 439,
      "column": 3,
      "index": 12799
    }
  },
  "className": "qx.ui.progressive.Progressive",
  "jsdoc": {
    "raw": [
      "*",
      " * <i>Progressive</i>.",
      " *",
      " * Follow progressive instructions provided by a data model.  A variable",
      " * number of instructions are executed at one time, after which control is",
      " * returned briefly to the browser.  This allows browser rendering between",
      " * batches of instructions, improving the visual experience.",
      " *",
      " * <i>Progressive</i> may be used for various purposes.  Two predefined",
      " * purposes for which \"renderers\" are provided, are a progressively-rendered",
      " * table which allows variable row height, and a program load/initialization",
      " * renderer with progress bar.  (Note that the term \"renderer\" is interpreted",
      " * quite broadly.  A renderer needn't actually render; rather it is just some",
      " * set of activities that takes place at one time, e.g a row of table data or",
      " * a single widget added to the document or a sending a request to a server,",
      " * etc.)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p><i>Progressive</i>.\n Follow progressive instructions provided by a data model.  A variable\n number of instructions are executed at one time, after which control is\n returned briefly to the browser.  This allows browser rendering between\n batches of instructions, improving the visual experience.\n <i>Progressive</i> may be used for various purposes.  Two predefined\n purposes for which \"renderers\" are provided, are a progressively-rendered\n table which allows variable row height, and a program load/initialization\n renderer with progress bar.  (Note that the term \"renderer\" is interpreted\n quite broadly.  A renderer needn't actually render; rather it is just some\n set of activities that takes place at one time, e.g a row of table data or\n a single widget added to the document or a sending a request to a server,\n etc.)</p>"
      }
    ]
  },
  "superClass": "qx.ui.container.Composite",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "structure"
      }
    ],
    "location": {
      "start": {
        "line": 43,
        "column": 2,
        "index": 1519
      },
      "end": {
        "line": 73,
        "column": 3,
        "index": 2390
      }
    }
  },
  "events": {
    "renderStart": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event fired when rendering begins.",
          "     *",
          "     * The event data is an object with the following members:",
          "     * <dl>",
          "     *   <dt>state</dt>",
          "     *   <dd>",
          "     *     The state object.",
          "     *   </dd>",
          "     *",
          "     *   <dt>initial</dt>",
          "     *     The number of elements that are available to be rendered",
          "     *   <dd>",
          "     *   </dd>",
          "     * </dl>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired when rendering begins.\n The event data is an object with the following members:\n </p>\n<dl>\n   <dt>state</dt>\n   <dd>\n     The state object.\n   </dd>\n   <dt>initial</dt>\n     The number of elements that are available to be rendered\n   <dd>\n   </dd>\n </dl>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2774
        },
        "end": {
          "line": 92,
          "column": 37,
          "index": 2807
        }
      }
    },
    "renderEnd": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event fired when rendering ends.  The data is the state object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired when rendering ends.  The data is the state object.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2901
        },
        "end": {
          "line": 97,
          "column": 35,
          "index": 2932
        }
      }
    },
    "progress": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * This event is fired after each batch of elements is rendered, and",
          "     * control is about to be yielded to the browser.  This is an appropriate",
          "     * event to listen for, to implement a progress bar.",
          "     *",
          "     * The event data is an object with the following members:",
          "     * <dl>",
          "     *   <dt>initial</dt>",
          "     *   <dd>",
          "     *     The number of elements that were available at the start of this",
          "     *     rendering request.",
          "     *   </dd>",
          "     *",
          "     *   <dt>remaining</dt>",
          "     *   <dd>",
          "     *     The number of elements still remaining to be rendered.",
          "     *   </dd>",
          "     * </dl>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired after each batch of elements is rendered, and\n control is about to be yielded to the browser.  This is an appropriate\n event to listen for, to implement a progress bar.\n The event data is an object with the following members:\n </p>\n<dl>\n   <dt>initial</dt>\n   <dd>\n     The number of elements that were available at the start of this\n     rendering request.\n   </dd>\n   <dt>remaining</dt>\n   <dd>\n     The number of elements still remaining to be rendered.\n   </dd>\n </dl>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3548
        },
        "end": {
          "line": 118,
          "column": 34,
          "index": 3578
        }
      }
    },
    "progressDetail": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * This event is fired after each element is rendered.",
          "     *",
          "     * The event data is an object with the following members:",
          "     * <dl>",
          "     *   <dt>initial</dt>",
          "     *   <dd>",
          "     *     The number of elements that were available at the start of this",
          "     *     rendering request.",
          "     *   </dd>",
          "     *",
          "     *   <dt>remaining</dt>",
          "     *   <dd>",
          "     *     The number of elements still remaining to be rendered.",
          "     *   </dd>",
          "     *",
          "     *   <dt>element</dt>",
          "     *   <dd>",
          "     *     The object, returned by the data model's getNextElement() method,",
          "     *     that was just rendered.",
          "     *   </dd>",
          "     * </dl>",
          "     *",
          "     * Note: Unless batchSize is set to 1 or we happen to be at the end of a",
          "     *       batch, widgets will not be rendered at this time.  Use this event",
          "     *       for programmatically processing rendered elements, but not for",
          "     *       such things as progress bars.  Instead, where only user-visible",
          "     *       changes such as progress bars are being updated, use the",
          "     *       \"progress\" event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired after each element is rendered.\n The event data is an object with the following members:\n </p>\n<dl>\n   <dt>initial</dt>\n   <dd>\n     The number of elements that were available at the start of this\n     rendering request.\n   </dd>\n   <dt>remaining</dt>\n   <dd>\n     The number of elements still remaining to be rendered.\n   </dd>\n   <dt>element</dt>\n   <dd>\n     The object, returned by the data model's getNextElement() method,\n     that was just rendered.\n   </dd>\n </dl>\n<p>Note: Unless batchSize is set to 1 or we happen to be at the end of a\n       batch, widgets will not be rendered at this time.  Use this event\n       for programmatically processing rendered elements, but not for\n       such things as progress bars.  Instead, where only user-visible\n       changes such as progress bars are being updated, use the\n       \"progress\" event.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4636
        },
        "end": {
          "line": 150,
          "column": 40,
          "index": 4672
        }
      }
    }
  },
  "properties": {
    "dataModel": {
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 4726
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4824
        }
      },
      "json": {
        "check": "qx.ui.progressive.model.Abstract",
        "apply": "_applyDataModel"
      },
      "jsdoc": {
        "raw": [
          "* The data model. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The data model.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "batchSize": {
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5147
        },
        "end": {
          "line": 169,
          "column": 5,
          "index": 5204
        }
      },
      "json": {
        "check": "Integer",
        "init": 20
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Number of elements to render at one time.  After this number of",
          "     * elements has been rendered, control will be yielded to the browser",
          "     * allowing the elements to actually be displayed.  A short-interval timer",
          "     * will be set, to regain control to render the next batch of elements.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Number of elements to render at one time.  After this number of\n elements has been rendered, control will be yielded to the browser\n allowing the elements to actually be displayed.  A short-interval timer\n will be set, to regain control to render the next batch of elements.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "flushWidgetQueueAfterBatch": {
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 5442
        },
        "end": {
          "line": 179,
          "column": 5,
          "index": 5519
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flush the widget queue after each batch is rendered.  This is",
          "     * particularly relevant for such things as progressive loading, where",
          "     * the whole purpose is to be able to see the loading progressing.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flush the widget queue after each batch is rendered.  This is\n particularly relevant for such things as progressive loading, where\n the whole purpose is to be able to see the loading progressing.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "interElementTimeout": {
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 5707
        },
        "end": {
          "line": 189,
          "column": 5,
          "index": 5773
        }
      },
      "json": {
        "check": "Integer",
        "init": 0
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Delay between rendering elements. Zero is normally adequate, but",
          "     * there are times that the user wants more time between rendering",
          "     * some elements.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Delay between rendering elements. Zero is normally adequate, but\n there are times that the user wants more time between rendering\n some elements.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__renderer": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 193,
          "column": 4,
          "index": 5797
        },
        "end": {
          "line": 193,
          "column": 20,
          "index": 5813
        }
      },
      "appearsIn": []
    },
    "__bRendering": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 5819
        },
        "end": {
          "line": 194,
          "column": 22,
          "index": 5837
        }
      },
      "appearsIn": []
    },
    "__t1": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5843
        },
        "end": {
          "line": 195,
          "column": 14,
          "index": 5853
        }
      },
      "appearsIn": []
    },
    "__initialNumElements": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5859
        },
        "end": {
          "line": 196,
          "column": 30,
          "index": 5885
        }
      },
      "appearsIn": []
    },
    "__bInitialRenderComplete": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 197,
          "column": 4,
          "index": 5891
        },
        "end": {
          "line": 197,
          "column": 34,
          "index": 5921
        }
      },
      "appearsIn": []
    },
    "__structure": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 5927
        },
        "end": {
          "line": 198,
          "column": 21,
          "index": 5944
        }
      },
      "appearsIn": []
    },
    "getStructure": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the structure object",
          "     *",
          "     * @return {qx.ui.progressive.structure.Abstract} The structure object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the structure object</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.progressive.structure.Abstract} The structure object",
            "type": "qx.ui.progressive.structure.Abstract",
            "description": "The structure object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 6084
        },
        "end": {
          "line": 207,
          "column": 5,
          "index": 6137
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.progressive.structure.Abstract"
      },
      "appearsIn": []
    },
    "addRenderer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a renderer that can be referenced by the data model.",
          "     *",
          "     * @param name {String}",
          "     *   Name referenced in the data model when this renderer is to be used.",
          "     *",
          "     * @param renderer {qx.ui.progressive.renderer.Abstract}",
          "     *   Renderer object used if the data model references the specified name.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a renderer that can be referenced by the data model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String}\n   Name referenced in the data model when this renderer is to be used.",
            "paramName": "name",
            "description": "\n   Name referenced in the data model when this renderer is to be used.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "renderer {qx.ui.progressive.renderer.Abstract}\n   Renderer object used if the data model references the specified name.",
            "paramName": "renderer",
            "description": "\n   Renderer object used if the data model references the specified name.",
            "type": "qx.ui.progressive.renderer.Abstract"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 219,
          "column": 4,
          "index": 6490
        },
        "end": {
          "line": 222,
          "column": 5,
          "index": 6598
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "renderer",
          "type": "qx.ui.progressive.renderer.Abstract"
        }
      ],
      "appearsIn": []
    },
    "removeRenderer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove a previously added renderer.",
          "     *",
          "     * @param name {String}",
          "     *   Remove the renderer which was assigned this name.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove a previously added renderer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String}\n   Remove the renderer which was assigned this name.",
            "paramName": "name",
            "description": "\n   Remove the renderer which was assigned this name.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 231,
          "column": 4,
          "index": 6765
        },
        "end": {
          "line": 237,
          "column": 5,
          "index": 6937
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "render": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Render the elements available from the data model.  Elements are",
          "     * rendered in batches of size {@link #batchSize}.  After each batch of",
          "     * elements are rendered, control is returned temporarily to the",
          "     * browser, so that actual screen updates can take place.  A timer is",
          "     * used to regain control a short while later, in order to render the",
          "     * next batch of element.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Render the elements available from the data model.  Elements are\n rendered in batches of size {@link #batchSize}.  After each batch of\n elements are rendered, control is returned temporarily to the\n browser, so that actual screen updates can take place.  A timer is\n used to regain control a short while later, in order to render the\n next batch of element.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 248,
          "column": 4,
          "index": 7362
        },
        "end": {
          "line": 304,
          "column": 5,
          "index": 9231
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_applyDataModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Called when the dataModel property is changed.",
          "     *",
          "     * @param value {qx.ui.progressive.model.Abstract}",
          "     *   The new data model.",
          "     *",
          "     * @param old {qx.ui.progressive.model.Abstract}",
          "     *   The old data model.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when the dataModel property is changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.progressive.model.Abstract}\n   The new data model.",
            "paramName": "value",
            "description": "\n   The new data model.",
            "type": "qx.ui.progressive.model.Abstract"
          },
          {
            "name": "@param",
            "body": "old {qx.ui.progressive.model.Abstract}\n   The old data model.",
            "paramName": "old",
            "description": "\n   The old data model.",
            "type": "qx.ui.progressive.model.Abstract"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 316,
          "column": 4,
          "index": 9495
        },
        "end": {
          "line": 327,
          "column": 5,
          "index": 9875
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "qx.ui.progressive.model.Abstract"
        },
        {
          "name": "old",
          "type": "qx.ui.progressive.model.Abstract"
        }
      ],
      "appearsIn": []
    },
    "__renderElementBatch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Render a batch of elements.  The batch size is determined by the",
          "     * Progressive's batch size at the time that rendering began.  That batch",
          "     * size was copied into the {@link qx.ui.progressive.State} object and is",
          "     * used herein.",
          "     *",
          "     * @param state {qx.ui.progressive.State}",
          "     *   The current state of rendering.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Render a batch of elements.  The batch size is determined by the\n Progressive's batch size at the time that rendering began.  That batch\n size was copied into the {@link qx.ui.progressive.State} object and is\n used herein.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {qx.ui.progressive.State}\n   The current state of rendering.",
            "paramName": "state",
            "description": "\n   The current state of rendering.",
            "type": "qx.ui.progressive.State"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 339,
          "column": 4,
          "index": 10247
        },
        "end": {
          "line": 398,
          "column": 5,
          "index": 11930
        }
      },
      "type": "function",
      "params": [
        {
          "name": "state",
          "type": "qx.ui.progressive.State"
        }
      ],
      "appearsIn": []
    },
    "__createStateRendererData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create the map of empty objects for use by the renderers.",
          "     * @return {Map} renderer data map",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create the map of empty objects for use by the renderers.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} renderer data map",
            "type": "Map<any, any>",
            "description": "renderer data map"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 404,
          "column": 4,
          "index": 12057
        },
        "end": {
          "line": 412,
          "column": 5,
          "index": 12233
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "__dataAvailable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event callback for the \"dataAvailable\" event.",
          "     *",
          "     * @param e {qx.event.type.Data}",
          "     *   A \"dataAvailable\" event's data contains the initial number of elements",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event callback for the \"dataAvailable\" event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data}\n   A \"dataAvailable\" event's data contains the initial number of elements",
            "paramName": "e",
            "description": "\n   A \"dataAvailable\" event's data contains the initial number of elements",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 421,
          "column": 4,
          "index": 12440
        },
        "end": {
          "line": 424,
          "column": 5,
          "index": 12534
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 429,
        "column": 2,
        "index": 12555
      },
      "end": {
        "line": 438,
        "column": 3,
        "index": 12795
      }
    }
  },
  "statics": {}
}