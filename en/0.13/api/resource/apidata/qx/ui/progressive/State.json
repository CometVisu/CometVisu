{
  "version": 0.3,
  "lastModified": 1735383688405,
  "lastModifiedIso": "2024-12-28T11:01:28.405Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/State.js",
  "type": "class",
  "location": {
    "start": {
      "line": 22,
      "column": 0,
      "index": 488
    },
    "end": {
      "line": 112,
      "column": 3,
      "index": 3426
    }
  },
  "className": "qx.ui.progressive.State",
  "jsdoc": {
    "raw": [
      "*",
      " * State of rendering by Progressive.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>State of rendering by Progressive.</p>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "initialState"
      }
    ],
    "location": {
      "start": {
        "line": 43,
        "column": 2,
        "index": 1083
      },
      "end": {
        "line": 52,
        "column": 3,
        "index": 1398
      }
    }
  },
  "properties": {
    "progressive": {
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1584
        },
        "end": {
          "line": 59,
          "column": 35,
          "index": 1615
        }
      },
      "json": {
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The {@link qx.ui.progressive.Progressive} with which this {@link",
          "     * State} is associated. This property should be treated as read-only.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The {@link qx.ui.progressive.Progressive} with which this {@link\n State} is associated. This property should be treated as read-only.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "model": {
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1725
        },
        "end": {
          "line": 65,
          "column": 29,
          "index": 1750
        }
      },
      "json": {
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The data model being used. This property should be treated as",
          "     * read-only.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The data model being used. This property should be treated as\n read-only.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "pane": {
      "location": {
        "start": {
          "line": 71,
          "column": 4,
          "index": 1891
        },
        "end": {
          "line": 71,
          "column": 28,
          "index": 1915
        }
      },
      "json": {
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The widget in which the element data should be rendered.  This property",
          "     * should be treated as read-only.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The widget in which the element data should be rendered.  This property\n should be treated as read-only.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "batchSize": {
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2073
        },
        "end": {
          "line": 77,
          "column": 17,
          "index": 2086
        }
      },
      "json": {},
      "jsdoc": {
        "raw": [
          "*",
          "     * How many elements are rendered at a time, before yielding to the",
          "     * browser.  This property should be treated as read-only.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>How many elements are rendered at a time, before yielding to the\n browser.  This property should be treated as read-only.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "rendererData": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2814
        },
        "end": {
          "line": 92,
          "column": 20,
          "index": 2830
        }
      },
      "json": {},
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a place for renderers' private data.  If multiple renderers are",
          "     * being used, each renderer should place its own private data in the the",
          "     * state object area reserved for that renderer's use:",
          "     * state.getRendererData()[element.renderer].  This property should be",
          "     * accessed only by renderers, and all elements of the array other than a",
          "     * renderer's own element should be treated as read-only.",
          "     *",
          "     * IMPORTANT NOTE:  It is the renderer's responsibility to clean up its",
          "     *                  own mess.  If the renderer places data here, it should",
          "     *                  also add an event listener for \"renderEnd\" so that it",
          "     *                  can clean up.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a place for renderers' private data.  If multiple renderers are\n being used, each renderer should place its own private data in the the\n state object area reserved for that renderer's use:\n state.getRendererData()[element.renderer].  This property should be\n accessed only by renderers, and all elements of the array other than a\n renderer's own element should be treated as read-only.\n IMPORTANT NOTE:  It is the renderer's responsibility to clean up its\n                  own mess.  If the renderer places data here, it should\n                  also add an event listener for \"renderEnd\" so that it\n                  can clean up.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "userData": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 3263
        },
        "end": {
          "line": 103,
          "column": 16,
          "index": 3275
        }
      },
      "json": {},
      "jsdoc": {
        "raw": [
          "*",
          "     * User data.  This is useful, for example, by communication between",
          "     * the renderStart event listener and the renderers.",
          "     *",
          "     * IMPORTANT NOTE:  It is the user's responsibility to clean up his",
          "     *                  own mess.  If you place data here, you should",
          "     *                  also add an event listener for \"renderEnd\" to",
          "     *                  dispose any objects you placed here.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>User data.  This is useful, for example, by communication between\n the renderStart event listener and the renderers.\n IMPORTANT NOTE:  It is the user's responsibility to clean up his\n                  own mess.  If you place data here, you should\n                  also add an event listener for \"renderEnd\" to\n                  dispose any objects you placed here.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 106,
        "column": 2,
        "index": 3284
      },
      "end": {
        "line": 111,
        "column": 3,
        "index": 3422
      }
    }
  },
  "members": {},
  "statics": {}
}