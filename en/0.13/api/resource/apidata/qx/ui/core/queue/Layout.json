{
  "version": 0.3,
  "lastModified": 1726088852241,
  "lastModifiedIso": "2024-09-11T21:07:32.241Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/core/queue/Layout.js",
  "type": "class",
  "location": {
    "start": {
      "line": 25,
      "column": 0,
      "index": 707
    },
    "end": {
      "line": 255,
      "column": 3,
      "index": 7565
    }
  },
  "className": "qx.ui.core.queue.Layout",
  "jsdoc": {
    "raw": [
      "*",
      " * The layout queue manages all widgets, which need a recalculation of their",
      " * layout. The {@link #flush} method computes the layout of all queued widgets",
      " * and their dependent widgets.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The layout queue manages all widgets, which need a recalculation of their\n layout. The {@link #flush} method computes the layout of all queued widgets\n and their dependent widgets.</p>"
      }
    ]
  },
  "statics": {
    "__queue": {
      "jsdoc": {
        "raw": [
          "* @type {Map} This contains all the queued widgets for the next flush. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} This contains all the queued widgets for the next flush."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 849
        },
        "end": {
          "line": 28,
          "column": 15,
          "index": 860
        }
      },
      "appearsIn": []
    },
    "__nesting": {
      "jsdoc": {
        "raw": [
          "* Nesting level cache *"
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Nesting level cache *</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 31,
          "column": 4,
          "index": 899
        },
        "end": {
          "line": 31,
          "column": 17,
          "index": 912
        }
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clears the widget from the internal queue. Normally only used",
          "     * during interims disposes of one or a few widgets.",
          "     *",
          "     * @param widget {qx.ui.core.Widget} The widget to clear",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the widget from the internal queue. Normally only used\n during interims disposes of one or a few widgets.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to clear",
            "paramName": "widget",
            "description": " The widget to clear",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 39,
          "column": 4,
          "index": 1129
        },
        "end": {
          "line": 41,
          "column": 5,
          "index": 1199
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": []
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mark a widget's layout as invalid and add its layout root to",
          "     * the queue.",
          "     *",
          "     * Should only be used by {@link qx.ui.core.Widget}.",
          "     *",
          "     * @param widget {qx.ui.core.Widget} Widget to add.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark a widget's layout as invalid and add its layout root to\n the queue.\n Should only be used by {@link qx.ui.core.Widget}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to add.",
            "paramName": "widget",
            "description": " Widget to add.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1435
        },
        "end": {
          "line": 54,
          "column": 5,
          "index": 1560
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": []
    },
    "isScheduled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Check whether the queue has scheduled changes for a widget.",
          "     * Note that the layout parent can have changes scheduled that",
          "     * affect the children widgets.",
          "     *",
          "     * @param widget {qx.ui.core.Widget} Widget to check.",
          "     * @return {Boolean} Whether the widget given has layout changes queued.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the queue has scheduled changes for a widget.\n Note that the layout parent can have changes scheduled that\n affect the children widgets.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to check.",
            "paramName": "widget",
            "description": " Widget to check.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the widget given has layout changes queued.",
            "type": "boolean",
            "description": "Whether the widget given has layout changes queued."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1895
        },
        "end": {
          "line": 66,
          "column": 5,
          "index": 1972
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "flush": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Update the layout of all widgets, which layout is marked as invalid.",
          "     *",
          "     * This is used exclusively by the {@link qx.ui.core.queue.Manager}.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Update the layout of all widgets, which layout is marked as invalid.\n This is used exclusively by the {@link qx.ui.core.queue.Manager}.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2158
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 3361
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getNestingLevel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the widget's nesting level. Top level widgets have a nesting level",
          "     * of <code>0</code>.",
          "     *",
          "     * @param widget {qx.ui.core.Widget} The widget to query.",
          "     * @return {Integer} The nesting level",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget's nesting level. Top level widgets have a nesting level\n of <code>0</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to query.",
            "paramName": "widget",
            "description": " The widget to query.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The nesting level",
            "type": "Integer",
            "description": "The nesting level"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3600
        },
        "end": {
          "line": 145,
          "column": 5,
          "index": 4261
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "__getLevelGroupedWidgets": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Group widget by their nesting level.",
          "     *",
          "     * @return {Map[]} A sparse array. Each entry of the array contains a widget",
          "     *     map with all widgets of the same level as the array index.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Group widget by their nesting level.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} A sparse array. Each entry of the array contains a widget\n     map with all widgets of the same level as the array index.",
            "type": "Map[]",
            "description": "A sparse array. Each entry of the array contains a widget\n     map with all widgets of the same level as the array index."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4486
        },
        "end": {
          "line": 184,
          "column": 5,
          "index": 5199
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map[]"
      },
      "appearsIn": []
    },
    "__getSortedQueue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Compute all layout roots of the given widgets. Layout roots are either",
          "     * root widgets or widgets, which preferred size has not changed by the",
          "     * layout changes of its children.",
          "     *",
          "     * This function returns the roots ordered by their nesting factors. The",
          "     * layout with the largest nesting level comes first.",
          "     *",
          "     * @return {qx.ui.core.Widget[]} Ordered list or layout roots.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compute all layout roots of the given widgets. Layout roots are either\n root widgets or widgets, which preferred size has not changed by the\n layout changes of its children.\n This function returns the roots ordered by their nesting factors. The\n layout with the largest nesting level comes first.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} Ordered list or layout roots.",
            "type": "qx.ui.core.Widget[]",
            "description": "Ordered list or layout roots."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5631
        },
        "end": {
          "line": 253,
          "column": 5,
          "index": 7557
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}