{
  "version": 0.3,
  "lastModified": 1722153598643,
  "lastModifiedIso": "2024-07-28T07:59:58.643Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/core/scroll/AbstractScrollArea.js",
  "type": "class",
  "location": {
    "start": {
      "line": 29,
      "column": 0,
      "index": 1050
    },
    "end": {
      "line": 614,
      "column": 3,
      "index": 17966
    }
  },
  "className": "qx.ui.core.scroll.AbstractScrollArea",
  "jsdoc": {
    "raw": [
      "*",
      " * The ScrollArea provides a container widget with on demand scroll bars",
      " * if the content size exceeds the size of the container.",
      " *",
      " * @childControl pane {qx.ui.core.scroll.ScrollPane} pane which holds the content to scroll",
      " * @childControl scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} horizontal scrollbar",
      " * @childControl scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} vertical scrollbar",
      " * @childControl corner {qx.ui.core.Widget} corner where no scrollbar is shown",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The ScrollArea provides a container widget with on demand scroll bars\n if the content size exceeds the size of the container.</p>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "pane {qx.ui.core.scroll.ScrollPane} pane which holds the content to scroll"
      },
      {
        "name": "@childControl",
        "body": "scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} horizontal scrollbar"
      },
      {
        "name": "@childControl",
        "body": "scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} vertical scrollbar"
      },
      {
        "name": "@childControl",
        "body": "corner {qx.ui.core.Widget} corner where no scrollbar is shown"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.scroll.MScrollBarFactory",
    "qx.ui.core.scroll.MRoll",
    "qx.ui.core.MDragDropScrolling"
  ],
  "isSingleton": false,
  "abstract": true,
  "statics": {
    "DEFAULT_SCROLLBAR_WIDTH": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The default width which is used for the width of the scroll bar if",
          "     * overlaid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default width which is used for the width of the scroll bar if\n overlaid.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1589
        },
        "end": {
          "line": 50,
          "column": 31,
          "index": 1616
        }
      },
      "appearsIn": []
    }
  },
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 59,
        "column": 2,
        "index": 1813
      },
      "end": {
        "line": 82,
        "column": 3,
        "index": 2600
      }
    }
  },
  "events": {
    "scrollAnimationXEnd": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired as soon as the scroll animation in X direction ends. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired as soon as the scroll animation in X direction ends.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2689
        },
        "end": {
          "line": 86,
          "column": 46,
          "index": 2731
        }
      }
    },
    "scrollAnimationYEnd": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired as soon as the scroll animation in Y direction ends. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired as soon as the scroll animation in Y direction ends.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 89,
          "column": 4,
          "index": 2808
        },
        "end": {
          "line": 89,
          "column": 46,
          "index": 2850
        }
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 3082
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 3146
        }
      },
      "json": {
        "refine": true,
        "init": "scrollarea"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "width": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 3171
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 3219
        }
      },
      "json": {
        "refine": true,
        "init": 0
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "height": {
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3244
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3293
        }
      },
      "json": {
        "refine": true,
        "init": 0
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "scrollbarX": {
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3573
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3705
        }
      },
      "json": {
        "check": [
          "auto",
          "on",
          "off"
        ],
        "init": "auto",
        "themeable": true,
        "apply": "_computeScrollbars"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The policy, when the horizontal scrollbar should be shown.",
          "     * <ul>",
          "     *   <li><b>auto</b>: Show scrollbar on demand</li>",
          "     *   <li><b>on</b>: Always show the scrollbar</li>",
          "     *   <li><b>off</b>: Never show the scrollbar</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The policy, when the horizontal scrollbar should be shown.\n </p>\n<ul>\n   <li><b>auto</b>: Show scrollbar on demand</li>\n   <li><b>on</b>: Always show the scrollbar</li>\n   <li><b>off</b>: Never show the scrollbar</li>\n </ul>"
          }
        ]
      },
      "appearsIn": []
    },
    "scrollbarY": {
      "location": {
        "start": {
          "line": 140,
          "column": 4,
          "index": 3985
        },
        "end": {
          "line": 145,
          "column": 5,
          "index": 4117
        }
      },
      "json": {
        "check": [
          "auto",
          "on",
          "off"
        ],
        "init": "auto",
        "themeable": true,
        "apply": "_computeScrollbars"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The policy, when the horizontal scrollbar should be shown.",
          "     * <ul>",
          "     *   <li><b>auto</b>: Show scrollbar on demand</li>",
          "     *   <li><b>on</b>: Always show the scrollbar</li>",
          "     *   <li><b>off</b>: Never show the scrollbar</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The policy, when the horizontal scrollbar should be shown.\n </p>\n<ul>\n   <li><b>auto</b>: Show scrollbar on demand</li>\n   <li><b>on</b>: Always show the scrollbar</li>\n   <li><b>off</b>: Never show the scrollbar</li>\n </ul>"
          }
        ]
      },
      "appearsIn": []
    },
    "scrollbar": {
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4204
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 4264
        }
      },
      "json": {
        "group": [
          "scrollbarX",
          "scrollbarY"
        ]
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Group property, to set the overflow of both scroll bars.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Group property, to set the overflow of both scroll bars.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "scrollByDrag": {
      "location": {
        "start": {
          "line": 31,
          "column": 4,
          "index": 984
        },
        "end": {
          "line": 34,
          "column": 5,
          "index": 1047
        }
      },
      "json": {
        "init": false,
        "check": "Boolean"
      },
      "jsdoc": null,
      "mixin": "qx.ui.core.scroll.MRoll",
      "appearsIn": [
        "qx.ui.core.scroll.MRoll"
      ]
    },
    "dragScrollThresholdX": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1417
        },
        "end": {
          "line": 54,
          "column": 5,
          "index": 1485
        }
      },
      "json": {
        "check": "Integer",
        "init": 30
      },
      "jsdoc": {
        "raw": [
          "* The threshold for the x-axis (in pixel) to activate scrolling at the edges. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The threshold for the x-axis (in pixel) to activate scrolling at the edges.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "dragScrollThresholdY": {
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1579
        },
        "end": {
          "line": 60,
          "column": 5,
          "index": 1647
        }
      },
      "json": {
        "check": "Integer",
        "init": 30
      },
      "jsdoc": {
        "raw": [
          "* The threshold for the y-axis (in pixel) to activate scrolling at the edges. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The threshold for the y-axis (in pixel) to activate scrolling at the edges.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "dragScrollSlowDownFactor": {
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1708
        },
        "end": {
          "line": 66,
          "column": 5,
          "index": 1779
        }
      },
      "json": {
        "check": "Float",
        "init": 0.1
      },
      "jsdoc": {
        "raw": [
          "* The factor for slowing down the scrolling. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The factor for slowing down the scrolling.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    }
  },
  "members": {
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 4693
        },
        "end": {
          "line": 257,
          "column": 5,
          "index": 7415
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "getPaneSize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the dimensions of the pane.",
          "     *",
          "     * @return {Map|null} The pane dimension in pixel. Contains",
          "     *    the keys <code>width</code> and <code>height</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dimensions of the pane.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} The pane dimension in pixel. Contains\n    the keys <code>width</code> and <code>height</code>.",
            "type": "Map|null",
            "description": "The pane dimension in pixel. Contains\n    the keys <code>width</code> and <code>height</code>."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 7806
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 7885
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map|null"
      },
      "appearsIn": []
    },
    "getItemTop": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the top offset of the given item in relation to the",
          "     * inner height of this widget.",
          "     *",
          "     * @param item {qx.ui.core.Widget} Item to query",
          "     * @return {Integer} Top offset",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the top offset of the given item in relation to the\n inner height of this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Item to query",
            "paramName": "item",
            "description": " Item to query",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Top offset",
            "type": "Integer",
            "description": "Top offset"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 288,
          "column": 4,
          "index": 8310
        },
        "end": {
          "line": 290,
          "column": 5,
          "index": 8394
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getItemBottom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the top offset of the end of the given item in relation to the",
          "     * inner height of this widget.",
          "     *",
          "     * @param item {qx.ui.core.Widget} Item to query",
          "     * @return {Integer} Top offset",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the top offset of the end of the given item in relation to the\n inner height of this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Item to query",
            "paramName": "item",
            "description": " Item to query",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Top offset",
            "type": "Integer",
            "description": "Top offset"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 299,
          "column": 4,
          "index": 8627
        },
        "end": {
          "line": 301,
          "column": 5,
          "index": 8717
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getItemLeft": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the left offset of the given item in relation to the",
          "     * inner width of this widget.",
          "     *",
          "     * @param item {qx.ui.core.Widget} Item to query",
          "     * @return {Integer} Top offset",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the left offset of the given item in relation to the\n inner width of this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Item to query",
            "paramName": "item",
            "description": " Item to query",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Top offset",
            "type": "Integer",
            "description": "Top offset"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 310,
          "column": 4,
          "index": 8939
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 9025
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getItemRight": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the left offset of the end of the given item in relation to the",
          "     * inner width of this widget.",
          "     *",
          "     * @param item {qx.ui.core.Widget} Item to query",
          "     * @return {Integer} Right offset",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the left offset of the end of the given item in relation to the\n inner width of this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Item to query",
            "paramName": "item",
            "description": " Item to query",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Right offset",
            "type": "Integer",
            "description": "Right offset"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 321,
          "column": 4,
          "index": 9260
        },
        "end": {
          "line": 323,
          "column": 5,
          "index": 9348
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "scrollToX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the element's content to the given left coordinate",
          "     *",
          "     * @param value {Integer} The vertical position to scroll to.",
          "     * @param duration {Number?} The time in milliseconds the scroll to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element's content to the given left coordinate</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The vertical position to scroll to.",
            "paramName": "value",
            "description": " The vertical position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 337,
          "column": 4,
          "index": 9791
        },
        "end": {
          "line": 342,
          "column": 5,
          "index": 9976
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Integer"
        },
        {
          "name": "duration",
          "type": "Number",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "scrollByX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the element's content by the given left offset",
          "     *",
          "     * @param value {Integer} The vertical position to scroll to.",
          "     * @param duration {Number?} The time in milliseconds the scroll to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element's content by the given left offset</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The vertical position to scroll to.",
            "paramName": "value",
            "description": " The vertical position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 350,
          "column": 4,
          "index": 10219
        },
        "end": {
          "line": 355,
          "column": 5,
          "index": 10404
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Integer"
        },
        {
          "name": "duration",
          "type": "Number",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "getScrollX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the scroll left position of the content",
          "     *",
          "     * @return {Integer} Horizontal scroll position",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the scroll left position of the content</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Horizontal scroll position",
            "type": "Integer",
            "description": "Horizontal scroll position"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 362,
          "column": 4,
          "index": 10541
        },
        "end": {
          "line": 365,
          "column": 5,
          "index": 10680
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "scrollToY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the element's content to the given top coordinate",
          "     *",
          "     * @param value {Integer} The horizontal position to scroll to.",
          "     * @param duration {Number?} The time in milliseconds the scroll to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element's content to the given top coordinate</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The horizontal position to scroll to.",
            "paramName": "value",
            "description": " The horizontal position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 373,
          "column": 4,
          "index": 10928
        },
        "end": {
          "line": 378,
          "column": 5,
          "index": 11113
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Integer"
        },
        {
          "name": "duration",
          "type": "Number",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "scrollByY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the element's content by the given top offset",
          "     *",
          "     * @param value {Integer} The horizontal position to scroll to.",
          "     * @param duration {Number?} The time in milliseconds the scroll to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element's content by the given top offset</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The horizontal position to scroll to.",
            "paramName": "value",
            "description": " The horizontal position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 386,
          "column": 4,
          "index": 11357
        },
        "end": {
          "line": 391,
          "column": 5,
          "index": 11542
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Integer"
        },
        {
          "name": "duration",
          "type": "Number",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "getScrollY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the scroll top position of the content",
          "     *",
          "     * @return {Integer} Vertical scroll position",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the scroll top position of the content</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Vertical scroll position",
            "type": "Integer",
            "description": "Vertical scroll position"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 398,
          "column": 4,
          "index": 11676
        },
        "end": {
          "line": 401,
          "column": 5,
          "index": 11815
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "stopScrollAnimationX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * In case a scroll animation is currently running in X direction,",
          "     * it will be stopped. If not, the method does nothing.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>In case a scroll animation is currently running in X direction,\n it will be stopped. If not, the method does nothing.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 407,
          "column": 4,
          "index": 11969
        },
        "end": {
          "line": 412,
          "column": 5,
          "index": 12136
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "stopScrollAnimationY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * In case a scroll animation is currently running in X direction,",
          "     * it will be stopped. If not, the method does nothing.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>In case a scroll animation is currently running in X direction,\n it will be stopped. If not, the method does nothing.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 418,
          "column": 4,
          "index": 12290
        },
        "end": {
          "line": 423,
          "column": 5,
          "index": 12457
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onScrollAnimationEnd": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the scroll animation end event for both scroll bars.",
          "     *",
          "     * @param direction {String} Either \"X\" or \"Y\".",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the scroll animation end event for both scroll bars.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "direction {String} Either \"X\" or \"Y\".",
            "paramName": "direction",
            "description": " Either \"X\" or \"Y\".",
            "type": "string"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 435,
          "column": 4,
          "index": 12813
        },
        "end": {
          "line": 437,
          "column": 5,
          "index": 12914
        }
      },
      "type": "function",
      "params": [
        {
          "name": "direction",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "_onScrollBarX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the scroll event of the horizontal scrollbar",
          "     *",
          "     * @param e {qx.event.type.Data} The scroll event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the scroll event of the horizontal scrollbar</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The scroll event object",
            "paramName": "e",
            "description": " The scroll event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 444,
          "column": 4,
          "index": 13075
        },
        "end": {
          "line": 446,
          "column": 5,
          "index": 13158
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onScrollBarY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the scroll event of the vertical scrollbar",
          "     *",
          "     * @param e {qx.event.type.Data} The scroll event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the scroll event of the vertical scrollbar</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The scroll event object",
            "paramName": "e",
            "description": " The scroll event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 453,
          "column": 4,
          "index": 13317
        },
        "end": {
          "line": 455,
          "column": 5,
          "index": 13400
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onScrollPaneX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the horizontal scroll event of the pane",
          "     *",
          "     * @param e {qx.event.type.Data} The scroll event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the horizontal scroll event of the pane</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The scroll event object",
            "paramName": "e",
            "description": " The scroll event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 462,
          "column": 4,
          "index": 13556
        },
        "end": {
          "line": 467,
          "column": 5,
          "index": 13718
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onScrollPaneY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the vertical scroll event of the pane",
          "     *",
          "     * @param e {qx.event.type.Data} The scroll event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the vertical scroll event of the pane</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The scroll event object",
            "paramName": "e",
            "description": " The scroll event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 474,
          "column": 4,
          "index": 13872
        },
        "end": {
          "line": 479,
          "column": 5,
          "index": 14034
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onChangeScrollbarXVisibility": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for visibility changes of horizontal scrollbar.",
          "     *",
          "     * @param e {qx.event.type.Event} Property change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for visibility changes of horizontal scrollbar.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Property change event",
            "paramName": "e",
            "description": " Property change event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 486,
          "column": 4,
          "index": 14193
        },
        "end": {
          "line": 497,
          "column": 5,
          "index": 14525
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "_onChangeScrollbarYVisibility": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for visibility changes of horizontal scrollbar.",
          "     *",
          "     * @param e {qx.event.type.Event} Property change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for visibility changes of horizontal scrollbar.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Property change event",
            "paramName": "e",
            "description": " Property change event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 504,
          "column": 4,
          "index": 14684
        },
        "end": {
          "line": 515,
          "column": 5,
          "index": 15016
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "_computeScrollbars": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Computes the visibility state for scrollbars.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the visibility state for scrollbars.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 527,
          "column": 4,
          "index": 15295
        },
        "end": {
          "line": 612,
          "column": 5,
          "index": 17958
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_createScrollBar": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates a new scrollbar. This can either be a styled qooxdoo scrollbar",
          "     * or a native browser scrollbar.",
          "     *",
          "     * @param orientation {String?\"horizontal\"} The initial scroll bar orientation",
          "     * @return {qx.ui.core.scroll.IScrollBar} The scrollbar instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new scrollbar. This can either be a styled qooxdoo scrollbar\n or a native browser scrollbar.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "orientation {String?\"horizontal\"} The initial scroll bar orientation"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.scroll.IScrollBar} The scrollbar instance"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 34,
          "column": 4,
          "index": 1020
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1268
        }
      },
      "type": "function",
      "params": [
        {
          "name": "orientation"
        }
      ],
      "mixin": "qx.ui.core.scroll.MScrollBarFactory",
      "appearsIn": [
        "qx.ui.core.scroll.MScrollBarFactory"
      ]
    },
    "_cancelRoll": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 1071
        },
        "end": {
          "line": 38,
          "column": 21,
          "index": 1088
        }
      },
      "mixin": "qx.ui.core.scroll.MRoll",
      "appearsIn": [
        "qx.ui.core.scroll.MRoll"
      ]
    },
    "_addRollHandling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Responsible for adding the event listener needed for scroll handling.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for adding the event listener needed for scroll handling.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 43,
          "column": 4,
          "index": 1188
        },
        "end": {
          "line": 46,
          "column": 5,
          "index": 1339
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.scroll.MRoll",
      "appearsIn": [
        "qx.ui.core.scroll.MRoll"
      ]
    },
    "_removeRollHandling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Responsible for removing the event listener needed for scroll handling.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for removing the event listener needed for scroll handling.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1441
        },
        "end": {
          "line": 54,
          "column": 5,
          "index": 1601
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.scroll.MRoll",
      "appearsIn": [
        "qx.ui.core.scroll.MRoll"
      ]
    },
    "_onPointerDownForRoll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the pointerdown event which simply stops the momentum scrolling.",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointerdown event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the pointerdown event which simply stops the momentum scrolling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerdown event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1773
        },
        "end": {
          "line": 63,
          "column": 5,
          "index": 1848
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "mixin": "qx.ui.core.scroll.MRoll",
      "appearsIn": [
        "qx.ui.core.scroll.MRoll"
      ]
    },
    "_onRoll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Roll event handler",
          "     *",
          "     * @param e {qx.event.type.Roll} Roll event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Roll event handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} Roll event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 1952
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 3886
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "mixin": "qx.ui.core.scroll.MRoll",
      "appearsIn": [
        "qx.ui.core.scroll.MRoll"
      ]
    },
    "__dragScrollTimer": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 1987
        },
        "end": {
          "line": 76,
          "column": 27,
          "index": 2010
        }
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "__xDirs": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2016
        },
        "end": {
          "line": 77,
          "column": 17,
          "index": 2029
        }
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "__yDirs": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2035
        },
        "end": {
          "line": 78,
          "column": 17,
          "index": 2048
        }
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_findScrollableParent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Finds the first scrollable parent (in the parent chain).",
          "     *",
          "     * @param widget {qx.ui.core.LayoutItem} The widget to start from.",
          "     * @return {qx.ui.core.Widget} A scrollable widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the first scrollable parent (in the parent chain).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.LayoutItem} The widget to start from.",
            "paramName": "widget",
            "description": " The widget to start from.",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} A scrollable widget.",
            "type": "qx.ui.core.Widget",
            "description": "A scrollable widget."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2269
        },
        "end": {
          "line": 99,
          "column": 5,
          "index": 2559
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_isScrollable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget is scrollable.",
          "     *",
          "     * @param widget {qx.ui.core.Widget} The widget to check.",
          "     * @return {Boolean} Whether the widget is scrollable.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is scrollable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to check.",
            "paramName": "widget",
            "description": " The widget to check.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the widget is scrollable.",
            "type": "boolean",
            "description": "Whether the widget is scrollable."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 2751
        },
        "end": {
          "line": 112,
          "column": 5,
          "index": 2893
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_getBounds": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Gets the bounds of the given scrollable.",
          "     *",
          "     * @param scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
          "     * @return {Map} A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80}).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the bounds of the given scrollable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80}).",
            "type": "Map<any, any>",
            "description": "A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80})."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3164
        },
        "end": {
          "line": 129,
          "column": 5,
          "index": 3475
        }
      },
      "type": "function",
      "params": [
        {
          "name": "scrollable",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_getEdgeType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Gets the edge type or null if the pointer isn't within one of the thresholds.",
          "     *",
          "     * @param diff {Map} Difference map with all for edgeTypes.",
          "     * @param thresholdX {Number} x-axis threshold.",
          "     * @param thresholdY {Number} y-axis threshold.",
          "     * @return {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the edge type or null if the pointer isn't within one of the thresholds.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "diff {Map} Difference map with all for edgeTypes.",
            "paramName": "diff",
            "description": " Difference map with all for edgeTypes.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "thresholdX {Number} x-axis threshold.",
            "paramName": "thresholdX",
            "description": " x-axis threshold.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "thresholdY {Number} y-axis threshold.",
            "paramName": "thresholdY",
            "description": " y-axis threshold.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "string",
            "description": "One of the four edgeTypes ('left', 'right', 'top', 'bottom')."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 3844
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4283
        }
      },
      "type": "function",
      "params": [
        {
          "name": "diff",
          "type": "Map<any, any>"
        },
        {
          "name": "thresholdX",
          "type": "number"
        },
        {
          "name": "thresholdY",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_getAxis": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Gets the axis ('x' or 'y') by the edge type.",
          "     *",
          "     * @param edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
          "     * @throws {Error} If edgeType is not one of the distinct four ones.",
          "     * @return {String} Returns 'y' or 'x'.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the axis ('x' or 'y') by the edge type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "paramName": "edgeType",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "string"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If edgeType is not one of the distinct four ones.",
            "type": "Error",
            "description": " If edgeType is not one of the distinct four ones."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Returns 'y' or 'x'.",
            "type": "string",
            "description": "Returns 'y' or 'x'."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 4576
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 4934
        }
      },
      "type": "function",
      "params": [
        {
          "name": "edgeType",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_getThresholdByEdgeType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Gets the threshold amount by edge type.",
          "     *",
          "     * @param edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
          "     * @return {Number} The threshold of the x or y axis.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the threshold amount by edge type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "paramName": "edgeType",
            "description": " One of the four edgeTypes ('left', 'right', 'top', 'bottom').",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The threshold of the x or y axis.",
            "type": "number",
            "description": "The threshold of the x or y axis."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 5163
        },
        "end": {
          "line": 186,
          "column": 5,
          "index": 5415
        }
      },
      "type": "function",
      "params": [
        {
          "name": "edgeType",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_isScrollbarVisible": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the scrollbar is visible.",
          "     *",
          "     * @param scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
          "     * @param axis {String} Can be 'y' or 'x'.",
          "     * @return {Boolean} Whether the scrollbar is visible.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the scrollbar is visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the scrollbar is visible.",
            "type": "boolean",
            "description": "Whether the scrollbar is visible."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5684
        },
        "end": {
          "line": 201,
          "column": 5,
          "index": 5906
        }
      },
      "type": "function",
      "params": [
        {
          "name": "scrollable",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "axis",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_isScrollbarExceedingMaxPos": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the scrollbar is exceeding it's maximum position.",
          "     *",
          "     * @param scrollbar {qx.ui.core.scroll.IScrollBar} Scrollbar to check.",
          "     * @param axis {String} Can be 'y' or 'x'.",
          "     * @param amount {Number} Amount to scroll which may be negative.",
          "     * @return {Boolean} Whether the amount will exceed the scrollbar max position.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the scrollbar is exceeding it's maximum position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollbar {qx.ui.core.scroll.IScrollBar} Scrollbar to check.",
            "paramName": "scrollbar",
            "description": " Scrollbar to check.",
            "type": "qx.ui.core.scroll.IScrollBar"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "amount {Number} Amount to scroll which may be negative.",
            "paramName": "amount",
            "description": " Amount to scroll which may be negative.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the amount will exceed the scrollbar max position.",
            "type": "boolean",
            "description": "Whether the amount will exceed the scrollbar max position."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 211,
          "column": 4,
          "index": 6277
        },
        "end": {
          "line": 218,
          "column": 5,
          "index": 6521
        }
      },
      "type": "function",
      "params": [
        {
          "name": "scrollbar",
          "type": "qx.ui.core.scroll.IScrollBar"
        },
        {
          "name": "axis",
          "type": "string"
        },
        {
          "name": "amount",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_calculateThresholdExceedance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calculates the threshold exceedance (which may be negative).",
          "     *",
          "     * @param diff {Number} Difference value of one edgeType.",
          "     * @param threshold {Number} x-axis or y-axis threshold.",
          "     * @return {Number} Threshold exceedance amount (positive or negative).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the threshold exceedance (which may be negative).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "diff {Number} Difference value of one edgeType.",
            "paramName": "diff",
            "description": " Difference value of one edgeType.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "threshold {Number} x-axis or y-axis threshold.",
            "paramName": "threshold",
            "description": " x-axis or y-axis threshold.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Threshold exceedance amount (positive or negative).",
            "type": "number",
            "description": "Threshold exceedance amount (positive or negative)."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 227,
          "column": 4,
          "index": 6818
        },
        "end": {
          "line": 230,
          "column": 5,
          "index": 6965
        }
      },
      "type": "function",
      "params": [
        {
          "name": "diff",
          "type": "number"
        },
        {
          "name": "threshold",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_calculateScrollAmount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calculates the scroll amount (which may be negative).",
          "     * The amount is influenced by the scrollbar size (bigger = faster)",
          "     * the exceedanceAmount (bigger = faster) and the slowDownFactor.",
          "     *",
          "     * @param scrollbarSize {Number} Size of the scrollbar.",
          "     * @param exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
          "     * @return {Number} Scroll amount (positive or negative).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the scroll amount (which may be negative).\n The amount is influenced by the scrollbar size (bigger = faster)\n the exceedanceAmount (bigger = faster) and the slowDownFactor.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollbarSize {Number} Size of the scrollbar.",
            "paramName": "scrollbarSize",
            "description": " Size of the scrollbar.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
            "paramName": "exceedanceAmount",
            "description": " Threshold exceedance amount (positive or negative).",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Scroll amount (positive or negative).",
            "type": "number",
            "description": "Scroll amount (positive or negative)."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 241,
          "column": 4,
          "index": 7412
        },
        "end": {
          "line": 247,
          "column": 5,
          "index": 7615
        }
      },
      "type": "function",
      "params": [
        {
          "name": "scrollbarSize",
          "type": "number"
        },
        {
          "name": "exceedanceAmount",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "_scrollBy": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the given scrollable on the given axis for the given amount.",
          "     *",
          "     * @param scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
          "     * @param axis {String} Can be 'y' or 'x'.",
          "     * @param exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the given scrollable on the given axis for the given amount.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.",
            "paramName": "scrollable",
            "description": " Scrollable which has scrollbar child controls.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "axis {String} Can be 'y' or 'x'.",
            "paramName": "axis",
            "description": " Can be 'y' or 'x'.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "exceedanceAmount {Number} Threshold exceedance amount (positive or negative).",
            "paramName": "exceedanceAmount",
            "description": " Threshold exceedance amount (positive or negative).",
            "type": "number"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 7952
        },
        "end": {
          "line": 270,
          "column": 5,
          "index": 8474
        }
      },
      "type": "function",
      "params": [
        {
          "name": "scrollable",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "axis",
          "type": "string"
        },
        {
          "name": "exceedanceAmount",
          "type": "number"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "__onDrag": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the drag event.",
          "     *",
          "     * @param e {qx.event.type.Drag} The drag event instance.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the drag event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} The drag event instance.",
            "paramName": "e",
            "description": " The drag event instance.",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 283,
          "column": 4,
          "index": 8801
        },
        "end": {
          "line": 356,
          "column": 5,
          "index": 10921
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Drag"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    },
    "__onDragend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the dragend event.",
          "     *",
          "     * @param e {qx.event.type.Drag} The drag event instance.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the dragend event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Drag} The drag event instance.",
            "paramName": "e",
            "description": " The drag event instance.",
            "type": "qx.event.type.Drag"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 363,
          "column": 4,
          "index": 11057
        },
        "end": {
          "line": 367,
          "column": 5,
          "index": 11162
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Drag"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MDragDropScrolling"
      ],
      "mixin": "qx.ui.core.MDragDropScrolling"
    }
  }
}