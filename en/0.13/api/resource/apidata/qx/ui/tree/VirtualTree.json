{
  "version": 0.3,
  "lastModified": 1722151627491,
  "lastModifiedIso": "2024-07-28T07:27:07.491Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/tree/VirtualTree.js",
  "type": "class",
  "location": {
    "start": {
      "line": 133,
      "column": 0,
      "index": 3496
    },
    "end": {
      "line": 1186,
      "column": 3,
      "index": 31972
    }
  },
  "className": "qx.ui.tree.VirtualTree",
  "jsdoc": {
    "raw": [
      "",
      " * Virtual tree implementation.",
      " *",
      " * The virtual tree can be used to render node and leafs. Nodes and leafs are",
      " * both items for a tree. The difference between a node and a leaf is that a",
      " * node has child items, but a leaf not.",
      " *",
      " * With the {@link qx.ui.tree.core.IVirtualTreeDelegate} interface it is possible",
      " * to configure the tree's behavior (item renderer configuration, etc.).",
      " *",
      " * Here's an example of how to use the widget, including using a model",
      " * property to open/close branches. See the two timers at the end. The first",
      " * one opens all branches after two seconds; the second cleans up the tree",
      " * after five seconds.",
      " *",
      " * <pre class=\"javascript\">",
      " *   var nodes =",
      " *   [",
      " *     {",
      " *       name : \"Root\",",
      " *       open : false,",
      " *       children :",
      " *       [",
      " *         {",
      " *           name : \"Branch 1\",",
      " *           open : false,",
      " *           children :",
      " *           [",
      " *             {",
      " *               name : \"Leaf 1.1\"",
      " *             },",
      " *             {",
      " *               name : \"Leaf 1.2\"",
      " *             },",
      " *             {",
      " *               name : \"Branch 1.3\",",
      " *               open : false,",
      " *               children :",
      " *               [",
      " *                 {",
      " *                   name : \"Branch 1.3.1\",",
      " *                   open : false,",
      " *                   children :",
      " *                   [",
      " *                     {",
      " *                       name : \"Leaf 1.3.1.1\"",
      " *                     }",
      " *                   ]",
      " *                 }",
      " *               ]",
      " *             }",
      " *           ]",
      " *         }",
      " *       ]",
      " *     }",
      " *   ];",
      " *",
      " *   // convert the raw nodes to qooxdoo objects",
      " *   nodes = qx.data.marshal.Json.createModel(nodes, true);",
      " *",
      " *   // create the tree and synchronize the model property 'open'",
      " *   // to nodes being open",
      " *   var tree =",
      " *     new qx.ui.tree.VirtualTree(",
      " *       nodes.getItem(0), \"name\", \"children\", \"open\").set({",
      " *         width : 200,",
      " *         height : 400",
      " *       });",
      " *",
      " *   //log selection changes",
      " *   tree.getSelection().addListener(\"change\", function(e) {",
      " *     this.debug(\"Selection: \" + tree.getSelection().getItem(0).getName());",
      " *   }, this);",
      " *",
      " *   tree.set(",
      " *     {",
      " *       width : 200,",
      " *       height : 400,",
      " *       showTopLevelOpenCloseIcons : true",
      " *     });",
      " *",
      " *   var doc = this.getRoot();",
      " *   doc.add(tree,",
      " *   {",
      " *     left : 100,",
      " *     top  : 50",
      " *   });",
      " *",
      " *   // After two seconds, open up all branches by setting their open",
      " *   // property to true.",
      " *   qx.event.Timer.once(",
      " *     function()",
      " *     {",
      " *       ;(function allOpen(root)",
      " *         {",
      " *           if (root.setOpen)     root.setOpen(true);",
      " *           if (root.getChildren) root.getChildren().forEach(allOpen);",
      " *         })(nodes.getItem(0));",
      " *     },",
      " *     this,",
      " *     2000);",
      " *",
      " *   // After five seconds, remove and dispose the tree.",
      " *   qx.event.Timer.once(",
      " *     function()",
      " *     {",
      " *       doc.remove(tree);",
      " *       tree.dispose();",
      " *       console.warn(\"All cleaned up.\");",
      " *     },",
      " *     this,",
      " *     5000);",
      " * </pre>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Virtual tree implementation.\n The virtual tree can be used to render node and leafs. Nodes and leafs are\n both items for a tree. The difference between a node and a leaf is that a\n node has child items, but a leaf not.\n With the {@link qx.ui.tree.core.IVirtualTreeDelegate} interface it is possible\n to configure the tree's behavior (item renderer configuration, etc.).\n Here's an example of how to use the widget, including using a model\n property to open/close branches. See the two timers at the end. The first\n one opens all branches after two seconds; the second cleans up the tree\n after five seconds.\n </p>\n<pre class=\"javascript\">\n   var nodes =\n   [\n     {\n       name : \"Root\",\n       open : false,\n       children :\n       [\n         {\n           name : \"Branch 1\",\n           open : false,\n           children :\n           [\n             {\n               name : \"Leaf 1.1\"\n             },\n             {\n               name : \"Leaf 1.2\"\n             },\n             {\n               name : \"Branch 1.3\",\n               open : false,\n               children :\n               [\n                 {\n                   name : \"Branch 1.3.1\",\n                   open : false,\n                   children :\n                   [\n                     {\n                       name : \"Leaf 1.3.1.1\"\n                     }\n                   ]\n                 }\n               ]\n             }\n           ]\n         }\n       ]\n     }\n   ];\n\n   nodes = qx.data.marshal.Json.createModel(nodes, true);\n\n\n   var tree =\n     new qx.ui.tree.VirtualTree(\n       nodes.getItem(0), \"name\", \"children\", \"open\").set({\n         width : 200,\n         height : 400\n       });\n\n   tree.getSelection().addListener(\"change\", function(e) {\n     this.debug(\"Selection: \" + tree.getSelection().getItem(0).getName());\n   }, this);\n   tree.set(\n     {\n       width : 200,\n       height : 400,\n       showTopLevelOpenCloseIcons : true\n     });\n   var doc = this.getRoot();\n   doc.add(tree,\n   {\n     left : 100,\n     top  : 50\n   });\n\n\n   qx.event.Timer.once(\n     function()\n     {\n       ;(function allOpen(root)\n         {\n           if (root.setOpen)     root.setOpen(true);\n           if (root.getChildren) root.getChildren().forEach(allOpen);\n         })(nodes.getItem(0));\n     },\n     this,\n     2000);\n\n   qx.event.Timer.once(\n     function()\n     {\n       doc.remove(tree);\n       tree.dispose();\n       console.warn(\"All cleaned up.\");\n     },\n     this,\n     5000);\n </pre>"
      }
    ]
  },
  "superClass": "qx.ui.virtual.core.Scroller",
  "interfaces": [
    "qx.ui.tree.core.IVirtualTree",
    "qx.data.controller.ISelection"
  ],
  "mixins": [
    "qx.ui.virtual.selection.MModel",
    "qx.ui.core.MContentPadding"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "rootModel"
      },
      {
        "name": "labelPath"
      },
      {
        "name": "childProperty"
      },
      {
        "name": "openProperty"
      }
    ],
    "location": {
      "start": {
        "line": 150,
        "column": 2,
        "index": 4368
      },
      "end": {
        "line": 176,
        "column": 3,
        "index": 4998
      }
    }
  },
  "events": {
    "open": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when a node is opened.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a node is opened.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 5069
        },
        "end": {
          "line": 182,
          "column": 30,
          "index": 5095
        }
      }
    },
    "close": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when a node is closed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a node is closed.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 5154
        },
        "end": {
          "line": 187,
          "column": 31,
          "index": 5181
        }
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 5226
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 5292
        }
      },
      "json": {
        "refine": true,
        "init": "virtual-tree"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.scroll.AbstractScrollArea",
        "qx.ui.core.Widget"
      ]
    },
    "focusable": {
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 5317
        },
        "end": {
          "line": 201,
          "column": 5,
          "index": 5372
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "width": {
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 5397
        },
        "end": {
          "line": 207,
          "column": 5,
          "index": 5447
        }
      },
      "json": {
        "refine": true,
        "init": 100
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.scroll.AbstractScrollArea",
        "qx.ui.core.LayoutItem"
      ]
    },
    "height": {
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 5472
        },
        "end": {
          "line": 213,
          "column": 5,
          "index": 5523
        }
      },
      "json": {
        "refine": true,
        "init": 200
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.scroll.AbstractScrollArea",
        "qx.ui.core.LayoutItem"
      ]
    },
    "itemHeight": {
      "location": {
        "start": {
          "line": 216,
          "column": 4,
          "index": 5562
        },
        "end": {
          "line": 221,
          "column": 5,
          "index": 5675
        }
      },
      "json": {
        "check": "Integer",
        "init": 25,
        "apply": "_applyRowHeight",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Default item height. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Default item height.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "openMode": {
      "location": {
        "start": {
          "line": 227,
          "column": 4,
          "index": 5784
        },
        "end": {
          "line": 233,
          "column": 5,
          "index": 5947
        }
      },
      "json": {
        "check": [
          "tap",
          "dbltap",
          "none"
        ],
        "init": "dbltap",
        "apply": "_applyOpenMode",
        "event": "changeOpenMode",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Control whether tap or double tap should open or close the tapped",
          "     * item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Control whether tap or double tap should open or close the tapped\n item.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "hideRoot": {
      "location": {
        "start": {
          "line": 239,
          "column": 4,
          "index": 6083
        },
        "end": {
          "line": 243,
          "column": 5,
          "index": 6173
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyHideRoot"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Hides *only* the root node, not the node's children when the property is",
          "     * set to <code>true</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hides <em>only</em> the root node, not the node's children when the property is\n set to <code>true</code>.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "showTopLevelOpenCloseIcons": {
      "location": {
        "start": {
          "line": 250,
          "column": 4,
          "index": 6398
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 6524
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyShowTopLevelOpenCloseIcons"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether top level items should have an open/close button. The top level",
          "     * item item is normally the root item, but when the root is hidden, the",
          "     * root children are the top level items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether top level items should have an open/close button. The top level\n item item is normally the root item, but when the root is hidden, the\n root children are the top level items.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "showLeafs": {
      "location": {
        "start": {
          "line": 260,
          "column": 4,
          "index": 6680
        },
        "end": {
          "line": 264,
          "column": 5,
          "index": 6771
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyShowLeafs"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Configures the tree to show also the leafs. When the property is set to",
          "     * <code>false</code> *only* the nodes are shown.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Configures the tree to show also the leafs. When the property is set to\n <code>false</code> <em>only</em> the nodes are shown.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "childProperty": {
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 6986
        },
        "end": {
          "line": 275,
          "column": 5,
          "index": 7088
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyChildProperty",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The name of the property, where the children are stored in the model.",
          "     * Instead of the {@link #labelPath} must the child property a direct",
          "     * property form the model instance.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the property, where the children are stored in the model.\n Instead of the {@link #labelPath} must the child property a direct\n property form the model instance.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "labelPath": {
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 7226
        },
        "end": {
          "line": 285,
          "column": 5,
          "index": 7320
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyLabelPath",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The name of the property, where the value for the tree folders label",
          "     * is stored in the model classes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the property, where the value for the tree folders label\n is stored in the model classes.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "iconPath": {
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 7443
        },
        "end": {
          "line": 295,
          "column": 5,
          "index": 7535
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyIconPath",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The path to the property which holds the information that should be",
          "     * shown as an icon.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The path to the property which holds the information that should be\n shown as an icon.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "labelOptions": {
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 7712
        },
        "end": {
          "line": 304,
          "column": 5,
          "index": 7789
        }
      },
      "json": {
        "apply": "_applyLabelOptions",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * A map containing the options for the label binding. The possible keys",
          "     * can be found in the {@link qx.data.SingleValueBinding} documentation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the label binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "iconOptions": {
      "location": {
        "start": {
          "line": 310,
          "column": 4,
          "index": 7965
        },
        "end": {
          "line": 313,
          "column": 5,
          "index": 8040
        }
      },
      "json": {
        "apply": "_applyIconOptions",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * A map containing the options for the icon binding. The possible keys",
          "     * can be found in the {@link qx.data.SingleValueBinding} documentation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the icon binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "model": {
      "location": {
        "start": {
          "line": 319,
          "column": 4,
          "index": 8163
        },
        "end": {
          "line": 325,
          "column": 5,
          "index": 8311
        }
      },
      "json": {
        "check": "qx.core.Object",
        "apply": "_applyModel",
        "event": "changeModel",
        "nullable": true,
        "deferredInit": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The model containing the data (nodes and/or leafs) which should be shown",
          "     * in the tree.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The model containing the data (nodes and/or leafs) which should be shown\n in the tree.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "delegate": {
      "location": {
        "start": {
          "line": 331,
          "column": 4,
          "index": 8475
        },
        "end": {
          "line": 336,
          "column": 5,
          "index": 8593
        }
      },
      "json": {
        "event": "changeDelegate",
        "apply": "_applyDelegate",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Delegation object, which can have one or more functions defined by the",
          "     * {@link qx.ui.tree.core.IVirtualTreeDelegate} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Delegation object, which can have one or more functions defined by the\n {@link qx.ui.tree.core.IVirtualTreeDelegate} interface.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "selectionMode": {
      "location": {
        "start": {
          "line": 71,
          "column": 4,
          "index": 1886
        },
        "end": {
          "line": 75,
          "column": 5,
          "index": 2018
        }
      },
      "json": {
        "check": [
          "single",
          "multi",
          "additive",
          "one"
        ],
        "init": "single",
        "apply": "_applySelectionMode"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The selection mode to use.",
          "     *",
          "     * For further details please have a look at:",
          "     * {@link qx.ui.core.selection.Abstract#mode}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The selection mode to use.\n For further details please have a look at:\n {@link qx.ui.core.selection.Abstract#mode}</p>"
          }
        ]
      },
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "dragSelection": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2249
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2349
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyDragSelection"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Enable drag selection (multi selection of items through",
          "     * dragging the pointer in pressed states).",
          "     *",
          "     * Only possible for the selection modes <code>multi</code> and <code>additive</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enable drag selection (multi selection of items through\n dragging the pointer in pressed states).\n Only possible for the selection modes <code>multi</code> and <code>additive</code></p>"
          }
        ]
      },
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "quickSelection": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2540
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2642
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyQuickSelection"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Enable quick selection mode, where no tap is needed to change the selection.",
          "     *",
          "     * Only possible for the modes <code>single</code> and <code>one</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enable quick selection mode, where no tap is needed to change the selection.\n Only possible for the modes <code>single</code> and <code>one</code>.</p>"
          }
        ]
      },
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "contentPaddingTop": {
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1146
        },
        "end": {
          "line": 42,
          "column": 5,
          "index": 1270
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyContentPadding",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Top padding of the content pane "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Top padding of the content pane</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "contentPaddingRight": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1322
        },
        "end": {
          "line": 50,
          "column": 5,
          "index": 1448
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyContentPadding",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Right padding of the content pane "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Right padding of the content pane</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "contentPaddingBottom": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1501
        },
        "end": {
          "line": 58,
          "column": 5,
          "index": 1628
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyContentPadding",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Bottom padding of the content pane "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Bottom padding of the content pane</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "contentPaddingLeft": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1679
        },
        "end": {
          "line": 66,
          "column": 5,
          "index": 1804
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyContentPadding",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Left padding of the content pane "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Left padding of the content pane</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "contentPadding": {
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2270
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2486
        }
      },
      "json": {
        "group": [
          "contentPaddingTop",
          "contentPaddingRight",
          "contentPaddingBottom",
          "contentPaddingLeft"
        ],
        "mode": "shorthand",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The 'contentPadding' property is a shorthand property for setting 'contentPaddingTop',",
          "     * 'contentPaddingRight', 'contentPaddingBottom' and 'contentPaddingLeft'",
          "     * at the same time.",
          "     *",
          "     * If four values are specified they apply to top, right, bottom and left respectively.",
          "     * If there is only one value, it applies to all sides, if there are two or three,",
          "     * the missing values are taken from the opposite side.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The 'contentPadding' property is a shorthand property for setting 'contentPaddingTop',\n 'contentPaddingRight', 'contentPaddingBottom' and 'contentPaddingLeft'\n at the same time.\n If four values are specified they apply to top, right, bottom and left respectively.\n If there is only one value, it applies to all sides, if there are two or three,\n the missing values are taken from the opposite side.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    }
  },
  "members": {
    "_provider": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.tree.provider.WidgetProvider} Provider for widget rendering. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.tree.provider.WidgetProvider} Provider for widget rendering."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 341,
          "column": 4,
          "index": 8702
        },
        "end": {
          "line": 341,
          "column": 19,
          "index": 8717
        }
      },
      "appearsIn": []
    },
    "_layer": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.virtual.layer.Abstract} Layer which contains the items. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.virtual.layer.Abstract} Layer which contains the items."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 344,
          "column": 4,
          "index": 8804
        },
        "end": {
          "line": 344,
          "column": 16,
          "index": 8816
        }
      },
      "appearsIn": []
    },
    "__lookupTable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {qx.data.Array} The internal lookup table data structure to get the model item",
          "     * from a row.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.data.Array} The internal lookup table data structure to get the model item\n from a row."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 350,
          "column": 4,
          "index": 8950
        },
        "end": {
          "line": 350,
          "column": 23,
          "index": 8969
        }
      },
      "appearsIn": []
    },
    "__openNodes": {
      "jsdoc": {
        "raw": [
          "* @type {Array} HashMap which contains all open nodes. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} HashMap which contains all open nodes."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 353,
          "column": 4,
          "index": 9040
        },
        "end": {
          "line": 353,
          "column": 21,
          "index": 9057
        }
      },
      "appearsIn": []
    },
    "__nestingLevel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Array} The internal data structure to get the nesting level from a",
          "     * row.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} The internal data structure to get the nesting level from a\n row."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 359,
          "column": 4,
          "index": 9173
        },
        "end": {
          "line": 359,
          "column": 24,
          "index": 9193
        }
      },
      "appearsIn": []
    },
    "__deferredCall": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {qx.util.DeferredCall} Adds this instance to the widget queue on a",
          "     * deferred call.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.util.DeferredCall} Adds this instance to the widget queue on a\n deferred call."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 365,
          "column": 4,
          "index": 9318
        },
        "end": {
          "line": 365,
          "column": 24,
          "index": 9338
        }
      },
      "appearsIn": []
    },
    "_itemWidth": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} Holds the max item width from a rendered widget. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Holds the max item width from a rendered widget."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 368,
          "column": 4,
          "index": 9421
        },
        "end": {
          "line": 368,
          "column": 17,
          "index": 9434
        }
      },
      "appearsIn": []
    },
    "__parentChain": {
      "jsdoc": {
        "raw": [
          "* @type {Array} internal parent chain form the last selected node "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} internal parent chain form the last selected node"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 371,
          "column": 4,
          "index": 9516
        },
        "end": {
          "line": 371,
          "column": 23,
          "index": 9535
        }
      },
      "appearsIn": []
    },
    "__openProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {String|null} the name of the model property which represents the",
          "     *   open state of a branch.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String|null} the name of the model property which represents the\n   open state of a branch."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 377,
          "column": 4,
          "index": 9670
        },
        "end": {
          "line": 377,
          "column": 24,
          "index": 9690
        }
      },
      "appearsIn": []
    },
    "syncWidget": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 386,
          "column": 4,
          "index": 9907
        },
        "end": {
          "line": 403,
          "column": 5,
          "index": 10501
        }
      },
      "type": "function",
      "params": [
        {
          "name": "jobs"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "openNode": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 10540
        },
        "end": {
          "line": 409,
          "column": 5,
          "index": 10622
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        }
      ],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "openNodeWithoutScrolling": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 412,
          "column": 4,
          "index": 10661
        },
        "end": {
          "line": 421,
          "column": 5,
          "index": 10963
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        }
      ],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "refresh": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Trigger a rebuild from the internal data structure.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Trigger a rebuild from the internal data structure.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 426,
          "column": 4,
          "index": 11045
        },
        "end": {
          "line": 428,
          "column": 5,
          "index": 11093
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "openNodeAndParents": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Opens the passed node and all his parents. *Note!* The algorithm",
          "     * implements a depth-first search with a complexity: <code>O(n)</code> and",
          "     * <code>n</code> are all model items.",
          "     *",
          "     * @param node {qx.core.Object} Node to open.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Opens the passed node and all his parents. <em>Note!</em> The algorithm\n implements a depth-first search with a complexity: <code>O(n)</code> and\n <code>n</code> are all model items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to open.",
            "paramName": "node",
            "description": " Node to open.",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 437,
          "column": 4,
          "index": 11368
        },
        "end": {
          "line": 440,
          "column": 5,
          "index": 11490
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "closeNode": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 443,
          "column": 4,
          "index": 11529
        },
        "end": {
          "line": 449,
          "column": 5,
          "index": 11735
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        }
      ],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "closeNodeWithoutScrolling": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 452,
          "column": 4,
          "index": 11774
        },
        "end": {
          "line": 461,
          "column": 5,
          "index": 12078
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        }
      ],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "isNodeOpen": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 464,
          "column": 4,
          "index": 12117
        },
        "end": {
          "line": 466,
          "column": 5,
          "index": 12187
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        }
      ],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "openViaModelChanges": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Open and close branches via changes to a property in the model.",
          "     *",
          "     * @param openProperty {String|null}",
          "     *   The name of the open property, which determines the open state of a",
          "     *   branch in the tree. If null, turn off opening and closing branches",
          "     *   via changes to the model.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Open and close branches via changes to a property in the model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "openProperty {String|null}\n   The name of the open property, which determines the open state of a\n   branch in the tree. If null, turn off opening and closing branches\n   via changes to the model.",
            "paramName": "openProperty",
            "description": "\n   The name of the open property, which determines the open state of a\n   branch in the tree. If null, turn off opening and closing branches\n   via changes to the model.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 476,
          "column": 4,
          "index": 12517
        },
        "end": {
          "line": 496,
          "column": 5,
          "index": 13104
        }
      },
      "type": "function",
      "params": [
        {
          "name": "openProperty",
          "type": [
            "String",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "getOpenProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Getter for the open property",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Getter for the open property</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 501,
          "column": 4,
          "index": 13163
        },
        "end": {
          "line": 503,
          "column": 5,
          "index": 13222
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_init": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initializes the virtual tree.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes the virtual tree.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 514,
          "column": 4,
          "index": 13476
        },
        "end": {
          "line": 519,
          "column": 5,
          "index": 13625
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_initLayer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initializes the virtual tree layer.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes the virtual tree layer.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 524,
          "column": 4,
          "index": 13691
        },
        "end": {
          "line": 534,
          "column": 5,
          "index": 14173
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getLookupTable": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 537,
          "column": 4,
          "index": 14212
        },
        "end": {
          "line": 539,
          "column": 5,
          "index": 14269
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "_reverseLookup": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Performs a lookup from model index to row.",
          "     *",
          "     * @param index {Number} The index to look at.",
          "     * @return {Number} The row or <code>-1</code>",
          "     *  if the index is not a model index.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Performs a lookup from model index to row.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index to look at.",
            "paramName": "index",
            "description": " The index to look at.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The row or <code>-1</code>\n  if the index is not a model index.",
            "type": "number",
            "description": "The row or <code>-1</code>\n  if the index is not a model index."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 548,
          "column": 4,
          "index": 14494
        },
        "end": {
          "line": 550,
          "column": 5,
          "index": 14543
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "_getDataFromRow": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the model data for the given row.",
          "     *",
          "     * @param row {Integer} row to get data for.",
          "     * @return {var|null} the row's model data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the model data for the given row.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} row to get data for.",
            "paramName": "row",
            "description": " row to get data for.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var|null} the row's model data.",
            "type": "var|null",
            "description": "the row's model data."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 558,
          "column": 4,
          "index": 14719
        },
        "end": {
          "line": 560,
          "column": 5,
          "index": 14793
        }
      },
      "type": "function",
      "params": [
        {
          "name": "row",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "var|null"
      },
      "appearsIn": []
    },
    "_getSelectables": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the selectable model items.",
          "     *",
          "     * @return {qx.data.Array} The selectable items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the selectable model items.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} The selectable items.",
            "type": "qx.data.Array",
            "description": "The selectable items."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 567,
          "column": 4,
          "index": 14919
        },
        "end": {
          "line": 569,
          "column": 5,
          "index": 14977
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.data.Array"
      },
      "appearsIn": []
    },
    "getOpenNodes": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all open nodes.",
          "     *",
          "     * @internal",
          "     * @return {Array} All open nodes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all open nodes.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} All open nodes.",
            "type": "Array<any>",
            "description": "All open nodes."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 577,
          "column": 4,
          "index": 15094
        },
        "end": {
          "line": 579,
          "column": 5,
          "index": 15147
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "isNode": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 582,
          "column": 4,
          "index": 15186
        },
        "end": {
          "line": 584,
          "column": 5,
          "index": 15279
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item"
        }
      ],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "getLevel": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 587,
          "column": 4,
          "index": 15318
        },
        "end": {
          "line": 589,
          "column": 5,
          "index": 15378
        }
      },
      "type": "function",
      "params": [
        {
          "name": "row"
        }
      ],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          " Interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 592,
          "column": 4,
          "index": 15417
        },
        "end": {
          "line": 598,
          "column": 5,
          "index": 15573
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node"
        }
      ],
      "appearsIn": [
        "qx.ui.tree.core.IVirtualTree"
      ]
    },
    "_getContentPaddingTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the element, to which the content padding should be applied.",
          "     *",
          "     * @return {qx.ui.core.Widget} The content padding target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the element, to which the content padding should be applied.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The content padding target.",
            "type": "qx.ui.core.Widget",
            "description": "The content padding target."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 605,
          "column": 4,
          "index": 15742
        },
        "end": {
          "line": 607,
          "column": 5,
          "index": 15805
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": []
    },
    "_applyRowHeight": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 616,
          "column": 4,
          "index": 16038
        },
        "end": {
          "line": 618,
          "column": 5,
          "index": 16136
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyOpenMode": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 621,
          "column": 4,
          "index": 16165
        },
        "end": {
          "line": 636,
          "column": 5,
          "index": 16654
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyHideRoot": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 639,
          "column": 4,
          "index": 16683
        },
        "end": {
          "line": 641,
          "column": 5,
          "index": 16748
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyShowTopLevelOpenCloseIcons": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 644,
          "column": 4,
          "index": 16777
        },
        "end": {
          "line": 649,
          "column": 5,
          "index": 17006
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyShowLeafs": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 652,
          "column": 4,
          "index": 17035
        },
        "end": {
          "line": 657,
          "column": 5,
          "index": 17247
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyChildProperty": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 660,
          "column": 4,
          "index": 17276
        },
        "end": {
          "line": 662,
          "column": 5,
          "index": 17361
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyLabelPath": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 665,
          "column": 4,
          "index": 17390
        },
        "end": {
          "line": 667,
          "column": 5,
          "index": 17467
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyIconPath": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 670,
          "column": 4,
          "index": 17496
        },
        "end": {
          "line": 672,
          "column": 5,
          "index": 17571
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyLabelOptions": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 675,
          "column": 4,
          "index": 17600
        },
        "end": {
          "line": 677,
          "column": 5,
          "index": 17683
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyIconOptions": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 680,
          "column": 4,
          "index": 17712
        },
        "end": {
          "line": 682,
          "column": 5,
          "index": 17793
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyModel": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 685,
          "column": 4,
          "index": 17822
        },
        "end": {
          "line": 719,
          "column": 5,
          "index": 18924
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyDelegate": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 722,
          "column": 4,
          "index": 18953
        },
        "end": {
          "line": 725,
          "column": 5,
          "index": 19059
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_onChangeBubble": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the changeBubble event. The handler rebuild the lookup",
          "     * table when the child structure changed.",
          "     *",
          "     * @param event {qx.event.type.Data} The data event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the changeBubble event. The handler rebuild the lookup\n table when the child structure changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Data} The data event.",
            "paramName": "event",
            "description": " The data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 739,
          "column": 4,
          "index": 19469
        },
        "end": {
          "line": 768,
          "column": 5,
          "index": 20384
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onUpdated": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the update event.",
          "     *",
          "     * @param event {qx.event.type.Event} The event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the update event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event.",
            "paramName": "event",
            "description": " The event.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 775,
          "column": 4,
          "index": 20510
        },
        "end": {
          "line": 782,
          "column": 5,
          "index": 20754
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "_onOpen": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler to open/close tapped nodes.",
          "     *",
          "     * @param event {qx.ui.virtual.core.CellEvent} The cell tap event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler to open/close tapped nodes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.ui.virtual.core.CellEvent} The cell tap event.",
            "paramName": "event",
            "description": " The cell tap event.",
            "type": "qx.ui.virtual.core.CellEvent"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 789,
          "column": 4,
          "index": 20904
        },
        "end": {
          "line": 800,
          "column": 5,
          "index": 21175
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.ui.virtual.core.CellEvent"
        }
      ],
      "appearsIn": []
    },
    "_onKeyPress": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for key press events. Open and close the current selected",
          "     * item on key left and right press. Jump to parent on key left if already",
          "     * closed.",
          "     *",
          "     * @param e {qx.event.type.KeySequence} key event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for key press events. Open and close the current selected\n item on key left and right press. Jump to parent on key left if already\n closed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} key event.",
            "paramName": "e",
            "description": " key event.",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 809,
          "column": 4,
          "index": 21433
        },
        "end": {
          "line": 854,
          "column": 5,
          "index": 22694
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.KeySequence"
        }
      ],
      "appearsIn": []
    },
    "_beforeApplySelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.",
          "     * The hook method sets the first visible parent not as new selection when",
          "     * the current selection is empty and the selection mode is one selection.",
          "     *",
          "     * @param newSelection {Array} The newSelection which will be set to the selection manager.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\n The hook method sets the first visible parent not as new selection when\n the current selection is empty and the selection mode is one selection.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newSelection {Array} The newSelection which will be set to the selection manager.",
            "paramName": "newSelection",
            "description": " The newSelection which will be set to the selection manager.",
            "type": "Array<any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 869,
          "column": 4,
          "index": 23266
        },
        "end": {
          "line": 878,
          "column": 5,
          "index": 23581
        }
      },
      "type": "function",
      "params": [
        {
          "name": "newSelection",
          "type": "Array<any>"
        }
      ],
      "appearsIn": []
    },
    "_afterApplySelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.",
          "     * The hook method builds the parent chain form the current selected item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hook method which is called from the {@link qx.ui.virtual.selection.MModel}.\n The hook method builds the parent chain form the current selected item.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 884,
          "column": 4,
          "index": 23767
        },
        "end": {
          "line": 892,
          "column": 5,
          "index": 24028
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__applyModelChanges": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to apply model changes. Normally build the lookup table and",
          "     * apply the default selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to apply model changes. Normally build the lookup table and\n apply the default selection.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 904,
          "column": 4,
          "index": 24364
        },
        "end": {
          "line": 907,
          "column": 5,
          "index": 24461
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "buildLookupTable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to build the internal data structure.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to build the internal data structure.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 914,
          "column": 4,
          "index": 24567
        },
        "end": {
          "line": 955,
          "column": 5,
          "index": 25718
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__getVisibleChildrenFrom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to get all visible children form the passed parent node.",
          "     * The algorithm implements a depth-first search with a complexity:",
          "     * <code>O(n)</code> and <code>n</code> are all visible items.",
          "     *",
          "     * @param node {qx.core.Object} The start node to start search.",
          "     * @param nestedLevel {Integer} The nested level from the start node.",
          "     * @return {Array} All visible children form the parent.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to get all visible children form the passed parent node.\n The algorithm implements a depth-first search with a complexity:\n <code>O(n)</code> and <code>n</code> are all visible items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} The start node to start search.",
            "paramName": "node",
            "description": " The start node to start search.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "nestedLevel {Integer} The nested level from the start node.",
            "paramName": "nestedLevel",
            "description": " The nested level from the start node.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} All visible children form the parent.",
            "type": "Array<any>",
            "description": "All visible children form the parent."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 966,
          "column": 4,
          "index": 26168
        },
        "end": {
          "line": 1021,
          "column": 5,
          "index": 27553
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.core.Object"
        },
        {
          "name": "nestedLevel",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__openNode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to set the node to the open nodes data structure when it",
          "     * is not included.",
          "     *",
          "     * @param node {qx.core.Object} Node to set to open nodes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to set the node to the open nodes data structure when it\n is not included.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.core.Object} Node to set to open nodes.",
            "paramName": "node",
            "description": " Node to set to open nodes.",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1029,
          "column": 4,
          "index": 27748
        },
        "end": {
          "line": 1034,
          "column": 5,
          "index": 27905
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "__openNodeAndAllParents": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to set the target node and all his parents to the open",
          "     * nodes data structure. The algorithm implements a depth-first search with",
          "     * a complexity: <code>O(n)</code> and <code>n</code> are all model items.",
          "     *",
          "     * @param startNode {qx.core.Object} Start (root) node to search.",
          "     * @param targetNode {qx.core.Object} Target node to open (and his parents).",
          "     * @return {Boolean} <code>True</code> when the targetNode and his",
          "     *  parents could opened, <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to set the target node and all his parents to the open\n nodes data structure. The algorithm implements a depth-first search with\n a complexity: <code>O(n)</code> and <code>n</code> are all model items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startNode {qx.core.Object} Start (root) node to search.",
            "paramName": "startNode",
            "description": " Start (root) node to search.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetNode {qx.core.Object} Target node to open (and his parents).",
            "paramName": "targetNode",
            "description": " Target node to open (and his parents).",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>True</code> when the targetNode and his\n  parents could opened, <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>True</code> when the targetNode and his\n  parents could opened, <code>false</code> otherwise."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1046,
          "column": 4,
          "index": 28452
        },
        "end": {
          "line": 1072,
          "column": 5,
          "index": 29095
        }
      },
      "type": "function",
      "params": [
        {
          "name": "startNode",
          "type": "qx.core.Object"
        },
        {
          "name": "targetNode",
          "type": "qx.core.Object"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__updateRowCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to update the row count.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to update the row count.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1077,
          "column": 4,
          "index": 29164
        },
        "end": {
          "line": 1082,
          "column": 5,
          "index": 29325
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getParent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to get the parent node. Node! This only works with leaf and",
          "     * nodes which are in the internal lookup table.",
          "     *",
          "     * @param item {qx.core.Object} Node or leaf to get parent.",
          "     * @return {qx.core.Object|null} The parent note or <code>null</code> when",
          "     *   no parent found.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to get the parent node. Node! This only works with leaf and\n nodes which are in the internal lookup table.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.core.Object} Node or leaf to get parent.",
            "paramName": "item",
            "description": " Node or leaf to get parent.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object|null} The parent note or <code>null</code> when\n   no parent found.",
            "type": "qx.core.Object|null",
            "description": "The parent note or <code>null</code> when\n   no parent found."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1094,
          "column": 4,
          "index": 29682
        },
        "end": {
          "line": 1110,
          "column": 5,
          "index": 30078
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.core.Object"
        }
      ],
      "returnType": {
        "type": "qx.core.Object|null"
      },
      "appearsIn": []
    },
    "__buildParentChain": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Builds the parent chain form the passed item.",
          "     *",
          "     * @param item {var} Item to build parent chain.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Builds the parent chain form the passed item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} Item to build parent chain.",
            "paramName": "item",
            "description": " Item to build parent chain.",
            "type": "var"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1117,
          "column": 4,
          "index": 30214
        },
        "end": {
          "line": 1124,
          "column": 5,
          "index": 30442
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "__getVisibleParent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the first visible parent node from the last selected node.",
          "     *",
          "     * @return {var} The first visible node.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the first visible parent node from the last selected node.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The first visible node.",
            "type": "var",
            "description": "The first visible node."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1131,
          "column": 4,
          "index": 30590
        },
        "end": {
          "line": 1146,
          "column": 5,
          "index": 30983
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "_manager": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.virtual.selection.Row} selection manager "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.virtual.selection.Row} selection manager"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3412
        },
        "end": {
          "line": 118,
          "column": 18,
          "index": 3426
        }
      },
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "__ignoreChangeSelection": {
      "jsdoc": {
        "raw": [
          "* @type {Boolean} flag to ignore the selection change from {@link #selection} "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} flag to ignore the selection change from {@link #selection}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3520
        },
        "end": {
          "line": 121,
          "column": 34,
          "index": 3550
        }
      },
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "__ignoreManagerChangeSelection": {
      "jsdoc": {
        "raw": [
          "* @type {Boolean} flag to ignore the selection change from <code>_manager</code> "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} flag to ignore the selection change from <code>_manager</code>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3647
        },
        "end": {
          "line": 124,
          "column": 41,
          "index": 3684
        }
      },
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "__selection": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3691
        },
        "end": {
          "line": 126,
          "column": 21,
          "index": 3708
        }
      },
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * setValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @param selection {qx.data.IListData|null} List data to select as value.",
          "     * @return {null} The status of this operation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selection {qx.data.IListData|null} List data to select as value."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null} The status of this operation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 3945
        },
        "end": {
          "line": 142,
          "column": 5,
          "index": 4116
        }
      },
      "type": "function",
      "params": [
        {
          "name": "selection"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * getValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @return {qx.data.IListData} The current selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.IListData} The current selection."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 149,
          "column": 4,
          "index": 4280
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4332
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * resetValue implements part of the {@link qx.ui.form.IField} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>resetValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4433
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4482
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_initSelectionManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initialize the selection manager with his delegate.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the selection manager with his delegate.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 4564
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 5377
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "setAutoScrollIntoView": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Determines, if automatically scrolling of selected item is active.",
          "     * Set <code>false</code> to suspend auto scrolling.",
          "     *",
          "     * @param value {Boolean} Set <code>false</code> to suspend auto scrolling.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determines, if automatically scrolling of selected item is active.\n Set <code>false</code> to suspend auto scrolling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Set <code>false</code> to suspend auto scrolling."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 203,
          "column": 4,
          "index": 5618
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 5703
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "getAutoScrollIntoView": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns true, if automatically scrolling of selected item is active.",
          "     *",
          "     * @return {Boolean} Returns <code>false</code> if auto scrolling is suspended.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true, if automatically scrolling of selected item is active.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>false</code> if auto scrolling is suspended."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 212,
          "column": 4,
          "index": 5893
        },
        "end": {
          "line": 214,
          "column": 5,
          "index": 5972
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_updateSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Method to update the selection, this method can be used when the model has",
          "     * changes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method to update the selection, this method can be used when the model has\n changes.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 220,
          "column": 4,
          "index": 6093
        },
        "end": {
          "line": 226,
          "column": 5,
          "index": 6212
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "setSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Setter for selection property; takes the selection on, and does not change the",
          "     * array instance in `this.selection`",
          "     *",
          "     * @param value {qx.data.Array} the new selection",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Setter for selection property; takes the selection on, and does not change the\n array instance in <code>this.selection</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array} the new selection"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 240,
          "column": 4,
          "index": 6620
        },
        "end": {
          "line": 246,
          "column": 5,
          "index": 6768
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel",
        "qx.data.controller.ISelection"
      ]
    },
    "getSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Getter for selection property",
          "     *",
          "     * @return {qx.data.Array}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Getter for selection property</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 6866
        },
        "end": {
          "line": 255,
          "column": 5,
          "index": 6919
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel",
        "qx.ui.tree.core.IVirtualTree",
        "qx.data.controller.ISelection"
      ]
    },
    "resetSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reset for selection property",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reset for selection property</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 260,
          "column": 4,
          "index": 6978
        },
        "end": {
          "line": 262,
          "column": 5,
          "index": 7038
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel",
        "qx.data.controller.ISelection"
      ]
    },
    "initSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Init for selection property; takes the selection on, and does not change the",
          "     * array instance in `this.selection`",
          "     *",
          "     * @param value {qx.data.Array} the new selection",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Init for selection property; takes the selection on, and does not change the\n array instance in <code>this.selection</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array} the new selection"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 270,
          "column": 4,
          "index": 7248
        },
        "end": {
          "line": 278,
          "column": 5,
          "index": 7486
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_applySelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply method for selection property",
          "     *",
          "     * @param value {qx.data.Array} new value",
          "     * @param old {qx.data.Array} old value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for selection property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array} new value"
          },
          {
            "name": "@param",
            "body": "old {qx.data.Array} old value"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 286,
          "column": 4,
          "index": 7649
        },
        "end": {
          "line": 288,
          "column": 5,
          "index": 7717
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_applySelectionMode": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 7744
        },
        "end": {
          "line": 293,
          "column": 5,
          "index": 7819
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_applyDragSelection": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 296,
          "column": 4,
          "index": 7846
        },
        "end": {
          "line": 298,
          "column": 5,
          "index": 7921
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_applyQuickSelection": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 7948
        },
        "end": {
          "line": 303,
          "column": 5,
          "index": 8025
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_onChangeSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the internal selection change {@link #selection}.",
          "     *",
          "     * @param e {qx.event.type.Data} the change event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the internal selection change {@link #selection}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} the change event."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 316,
          "column": 4,
          "index": 8385
        },
        "end": {
          "line": 365,
          "column": 5,
          "index": 9699
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_onManagerChangeSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the selection change from the <code>_manager</code>.",
          "     *",
          "     * @param e {qx.event.type.Data} the change event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the selection change from the <code>_manager</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} the change event."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 372,
          "column": 4,
          "index": 9862
        },
        "end": {
          "line": 384,
          "column": 5,
          "index": 10184
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "__synchronizeSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Synchronized the selection form the manager with the local one.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Synchronized the selection form the manager with the local one.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 389,
          "column": 4,
          "index": 10278
        },
        "end": {
          "line": 406,
          "column": 5,
          "index": 10712
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "__replaceSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replace the current selection with the passed selection Array.",
          "     *",
          "     * @param newSelection {qx.data.Array} The new selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replace the current selection with the passed selection Array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newSelection {qx.data.Array} The new selection."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 413,
          "column": 4,
          "index": 10874
        },
        "end": {
          "line": 424,
          "column": 5,
          "index": 11291
        }
      },
      "type": "function",
      "params": [
        {
          "name": "newSelection"
        }
      ],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "__isSelectionEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks whether the local and the manager selection are equal.",
          "     *",
          "     * @return {Boolean} <code>true</code> if the selections are equal,",
          "     *   <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks whether the local and the manager selection are equal.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the selections are equal,\n   <code>false</code> otherwise."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 432,
          "column": 4,
          "index": 11501
        },
        "end": {
          "line": 455,
          "column": 5,
          "index": 12140
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "_applyDefaultSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper Method to select default item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper Method to select default item.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 460,
          "column": 4,
          "index": 12208
        },
        "end": {
          "line": 464,
          "column": 5,
          "index": 12331
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.virtual.selection.MModel",
      "appearsIn": [
        "qx.ui.virtual.selection.MModel"
      ]
    },
    "__contentPaddingSetter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Maps property names of content padding to the setter of the padding",
          "     *",
          "     * @lint ignoreReferenceField(__contentPaddingSetter)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maps property names of content padding to the setter of the padding"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__contentPaddingSetter)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 2915
        },
        "end": {
          "line": 107,
          "column": 5,
          "index": 3125
        }
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "__contentPaddingThemedSetter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Maps property names of content padding to the themed setter of the padding",
          "     *",
          "     * @lint ignoreReferenceField(__contentPaddingThemedSetter)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maps property names of content padding to the themed setter of the padding"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__contentPaddingThemedSetter)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3313
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 3553
        }
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "__contentPaddingResetter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Maps property names of content padding to the resetter of the padding",
          "     *",
          "     * @lint ignoreReferenceField(__contentPaddingResetter)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maps property names of content padding to the resetter of the padding"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__contentPaddingResetter)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3732
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 3952
        }
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "_applyContentPadding": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 3981
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4585
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        },
        {
          "name": "name"
        },
        {
          "name": "variant"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 1149,
        "column": 2,
        "index": 30992
      },
      "end": {
        "line": 1185,
        "column": 3,
        "index": 31968
      }
    }
  },
  "statics": {}
}