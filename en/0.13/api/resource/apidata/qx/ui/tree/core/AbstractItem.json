{
  "version": 0.3,
  "lastModified": 1717235168770,
  "lastModifiedIso": "2024-06-01T09:46:08.770Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/tree/core/AbstractItem.js",
  "type": "class",
  "location": {
    "start": {
      "line": 31,
      "column": 0,
      "index": 994
    },
    "end": {
      "line": 458,
      "column": 3,
      "index": 11262
    }
  },
  "className": "qx.ui.tree.core.AbstractItem",
  "jsdoc": {
    "raw": [
      "*",
      " * The AbstractItem serves as a common superclass for the {@link",
      " * qx.ui.tree.core.AbstractTreeItem} and {@link qx.ui.tree.VirtualTreeItem} classes.",
      " *",
      " * @childControl label {qx.ui.basic.Label} label of the tree item",
      " * @childControl icon {qx.ui.basic.Image} icon of the tree item",
      " * @childControl open {qx.ui.tree.core.FolderOpenButton} button to open/close a subtree",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The AbstractItem serves as a common superclass for the {@link\n qx.ui.tree.core.AbstractTreeItem} and {@link qx.ui.tree.VirtualTreeItem} classes.</p>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "label {qx.ui.basic.Label} label of the tree item"
      },
      {
        "name": "@childControl",
        "body": "icon {qx.ui.basic.Image} icon of the tree item"
      },
      {
        "name": "@childControl",
        "body": "open {qx.ui.tree.core.FolderOpenButton} button to open/close a subtree"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "isSingleton": false,
  "abstract": true,
  "mixins": [
    "qx.ui.form.MModelProperty"
  ],
  "interfaces": [
    "qx.ui.form.IModel"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "label"
      }
    ],
    "location": {
      "start": {
        "line": 40,
        "column": 2,
        "index": 1243
      },
      "end": {
        "line": 51,
        "column": 3,
        "index": 1431
      }
    }
  },
  "properties": {
    "open": {
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1510
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1619
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeOpen",
        "apply": "_applyOpen"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the tree item is opened.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the tree item is opened.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "openSymbolMode": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 1779
        },
        "end": {
          "line": 73,
          "column": 5,
          "index": 1937
        }
      },
      "json": {
        "check": [
          "always",
          "never",
          "auto"
        ],
        "init": "auto",
        "event": "changeOpenSymbolMode",
        "apply": "_applyOpenSymbolMode"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Controls, when to show the open symbol. If the mode is \"auto\" , the open",
          "     * symbol is shown only if the item has child items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Controls, when to show the open symbol. If the mode is \"auto\" , the open\n symbol is shown only if the item has child items.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "indent": {
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2027
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2162
        }
      },
      "json": {
        "check": "Integer",
        "init": 19,
        "apply": "_applyIndent",
        "event": "changeIndent",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The number of pixel to indent the tree item for each level.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The number of pixel to indent the tree item for each level.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "icon": {
      "location": {
        "start": {
          "line": 89,
          "column": 4,
          "index": 2269
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 2403
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyIcon",
        "event": "changeIcon",
        "nullable": true,
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * URI of \"closed\" icon. Can be any URI String supported by qx.ui.basic.Image.",
          "     *"
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>URI of \"closed\" icon. Can be any URI String supported by qx.ui.basic.Image.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "iconOpened": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2510
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 2662
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyIconOpened",
        "event": "changeIconOpened",
        "nullable": true,
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * URI of \"opened\" icon. Can be any URI String supported by qx.ui.basic.Image.",
          "     *"
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>URI of \"opened\" icon. Can be any URI String supported by qx.ui.basic.Image.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "label": {
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 2715
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 2823
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyLabel",
        "event": "changeLabel",
        "init": ""
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The label/caption/text",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The label/caption/text</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "model": {
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1367
        },
        "end": {
          "line": 45,
          "column": 5,
          "index": 1483
        }
      },
      "json": {
        "nullable": true,
        "event": "changeModel",
        "apply": "_applyModel",
        "dereference": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Model property for storing additional information for the including",
          "     * object. It can act as value property on form items for example.",
          "     *",
          "     * Be careful using that property as this is used for the",
          "     * {@link qx.ui.form.MModelSelection} it has some restrictions:",
          "     *",
          "     * * Don't use equal models in one widget using the",
          "     *     {@link qx.ui.form.MModelSelection}.",
          "     *",
          "     * * Avoid setting only some model properties if the widgets are added to",
          "     *     a {@link qx.ui.form.MModelSelection} widget.",
          "     *",
          "     * Both restrictions result of the fact, that the set models are deputies",
          "     * for their widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Model property for storing additional information for the including\n object. It can act as value property on form items for example.\n Be careful using that property as this is used for the\n {@link qx.ui.form.MModelSelection} it has some restrictions:</p>\n<ul>\n<li>Don't use equal models in one widget using the\n {@link qx.ui.form.MModelSelection}.</li>\n<li>Avoid setting only some model properties if the widgets are added to\n a {@link qx.ui.form.MModelSelection} widget.\nBoth restrictions result of the fact, that the set models are deputies\nfor their widget.</li>\n</ul>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MModelProperty"
      ],
      "mixin": "qx.ui.form.MModelProperty"
    }
  },
  "members": {
    "__labelAdded": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 2847
        },
        "end": {
          "line": 120,
          "column": 22,
          "index": 2865
        }
      },
      "appearsIn": []
    },
    "__iconAdded": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 2871
        },
        "end": {
          "line": 121,
          "column": 21,
          "index": 2888
        }
      },
      "appearsIn": []
    },
    "__spacer": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 2894
        },
        "end": {
          "line": 122,
          "column": 18,
          "index": 2908
        }
      },
      "appearsIn": []
    },
    "_addWidgets": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method configures the tree item by adding its sub widgets like",
          "     * label, icon, open symbol, ...",
          "     *",
          "     * This method must be overridden by sub classes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method configures the tree item by adding its sub widgets like\n label, icon, open symbol, …\n This method must be overridden by sub classes.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 3104
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 3173
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 3198
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 4029
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "addWidget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a sub widget to the tree item's horizontal box layout.",
          "     *",
          "     * @param widget {qx.ui.core.Widget} The widget to add",
          "     * @param options {Map?null} The (optional) layout options to use for the widget",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a sub widget to the tree item's horizontal box layout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to add",
            "paramName": "widget",
            "description": " The widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "options {Map?null} The (optional) layout options to use for the widget",
            "paramName": "options",
            "description": " The (optional) layout options to use for the widget",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 4475
        },
        "end": {
          "line": 184,
          "column": 5,
          "index": 4543
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "addSpacer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds the spacer used to render the indentation to the item's horizontal",
          "     * box layout. If the spacer has been added before, it is removed from its",
          "     * old position and added to the end of the layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the spacer used to render the indentation to the item's horizontal\n box layout. If the spacer has been added before, it is removed from its\n old position and added to the end of the layout.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 191,
          "column": 4,
          "index": 4780
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 4969
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "addOpenButton": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds the open button to the item's horizontal box layout. If the open",
          "     * button has been added before, it is removed from its old position and",
          "     * added to the end of the layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the open button to the item's horizontal box layout. If the open\n button has been added before, it is removed from its old position and\n added to the end of the layout.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 206,
          "column": 4,
          "index": 5185
        },
        "end": {
          "line": 208,
          "column": 5,
          "index": 5255
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onChangeOpen": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler, which listens to open state changes of the open button",
          "     *",
          "     * @param e {qx.event.type.Data} The event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler, which listens to open state changes of the open button</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The event object",
            "paramName": "e",
            "description": " The event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 5416
        },
        "end": {
          "line": 219,
          "column": 5,
          "index": 5514
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "addIcon": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds the icon widget to the item's horizontal box layout. If the icon",
          "     * widget has been added before, it is removed from its old position and",
          "     * added to the end of the layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the icon widget to the item's horizontal box layout. If the icon\n widget has been added before, it is removed from its old position and\n added to the end of the layout.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 226,
          "column": 4,
          "index": 5730
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 5916
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "addLabel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds the label to the item's horizontal box layout. If the label",
          "     * has been added before, it is removed from its old position and",
          "     * added to the end of the layout.",
          "     *",
          "     * @param text {String?0} The label's contents",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the label to the item's horizontal box layout. If the label\n has been added before, it is removed from its old position and\n added to the end of the layout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "text {String?0} The label's contents",
            "paramName": "text",
            "description": " The label's contents",
            "optional": true,
            "defaultValue": "0",
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 244,
          "column": 4,
          "index": 6178
        },
        "end": {
          "line": 259,
          "column": 5,
          "index": 6487
        }
      },
      "type": "function",
      "params": [
        {
          "name": "text",
          "type": "String",
          "optional": true,
          "defaultValue": "0"
        }
      ],
      "appearsIn": []
    },
    "_applyIcon": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 268,
          "column": 4,
          "index": 6712
        },
        "end": {
          "line": 276,
          "column": 5,
          "index": 7001
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyIconOpened": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 279,
          "column": 4,
          "index": 7030
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 7503
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyLabel": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 297,
          "column": 4,
          "index": 7532
        },
        "end": {
          "line": 302,
          "column": 5,
          "index": 7676
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyOpen": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 305,
          "column": 4,
          "index": 7705
        },
        "end": {
          "line": 332,
          "column": 5,
          "index": 8347
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "__getUserValueIcon": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get user-defined value of \"icon\" property",
          "     *",
          "     * @return {var} The user value of the property \"icon\"",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get user-defined value of \"icon\" property</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The user value of the property \"icon\"",
            "type": "var",
            "description": "The user value of the property \"icon\""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 339,
          "column": 4,
          "index": 8485
        },
        "end": {
          "line": 341,
          "column": 5,
          "index": 8575
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__getUserValueIconOpened": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get user-defined value of \"iconOpened\" property",
          "     *",
          "     * @return {var} The user value of the property \"iconOpened\"",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get user-defined value of \"iconOpened\" property</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The user value of the property \"iconOpened\"",
            "type": "var",
            "description": "The user value of the property \"iconOpened\""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 348,
          "column": 4,
          "index": 8725
        },
        "end": {
          "line": 350,
          "column": 5,
          "index": 8827
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__setIconSource": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set source of icon child control",
          "     *",
          "     * @param url {String} The URL of the icon",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set source of icon child control</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "url {String} The URL of the icon",
            "paramName": "url",
            "description": " The URL of the icon",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 357,
          "column": 4,
          "index": 8944
        },
        "end": {
          "line": 362,
          "column": 5,
          "index": 9080
        }
      },
      "type": "function",
      "params": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "isOpenable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the tree item can be opened.",
          "     *",
          "     * @return {Boolean} Whether the tree item can be opened.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the tree item can be opened.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the tree item can be opened.",
            "type": "boolean",
            "description": "Whether the tree item can be opened."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 375,
          "column": 4,
          "index": 9413
        },
        "end": {
          "line": 380,
          "column": 5,
          "index": 9581
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_shouldShowOpenSymbol": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the open symbol should be shown",
          "     *",
          "     * @return {Boolean} Whether the open symbol should be shown.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the open symbol should be shown</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the open symbol should be shown.",
            "type": "boolean",
            "description": "Whether the open symbol should be shown."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 387,
          "column": 4,
          "index": 9724
        },
        "end": {
          "line": 389,
          "column": 5,
          "index": 9803
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_applyOpenSymbolMode": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 392,
          "column": 4,
          "index": 9832
        },
        "end": {
          "line": 394,
          "column": 5,
          "index": 9900
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_updateIndent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Update the indentation of the tree item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Update the indentation of the tree item.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 399,
          "column": 4,
          "index": 9971
        },
        "end": {
          "line": 423,
          "column": 5,
          "index": 10528
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_applyIndent": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 426,
          "column": 4,
          "index": 10557
        },
        "end": {
          "line": 428,
          "column": 5,
          "index": 10617
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "getLevel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Computes the item's nesting level. If the item is not part of a tree",
          "     * this function will return <code>null</code>.",
          "     *",
          "     * @return {Integer|null} The item's nesting level or <code>null</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the item's nesting level. If the item is not part of a tree\n this function will return <code>null</code>.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null} The item's nesting level or <code>null</code>.",
            "type": "Integer|null",
            "description": "The item's nesting level or <code>null</code>."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 436,
          "column": 4,
          "index": 10852
        },
        "end": {
          "line": 438,
          "column": 5,
          "index": 10918
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "syncWidget": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 441,
          "column": 4,
          "index": 10943
        },
        "end": {
          "line": 443,
          "column": 5,
          "index": 10995
        }
      },
      "type": "function",
      "params": [
        {
          "name": "jobs"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the item has any children",
          "     *",
          "     * @return {Boolean} Whether the item has any children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the item has any children</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item has any children.",
            "type": "boolean",
            "description": "Whether the item has any children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 450,
          "column": 4,
          "index": 11126
        },
        "end": {
          "line": 452,
          "column": 5,
          "index": 11195
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "setModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the representative data for the item.",
          "     *",
          "     * @param value {var} The data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the representative data for the item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The data.",
            "paramName": "value",
            "description": " The data.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1242
        },
        "end": {
          "line": 47,
          "column": 22,
          "index": 1260
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.ui.form.IModel"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IModel"
    },
    "getModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the representative data for the item",
          "     *",
          "     * @return {var} The data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the representative data for the item</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The data.",
            "type": "var",
            "description": "The data."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1373
        },
        "end": {
          "line": 54,
          "column": 17,
          "index": 1386
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "qx.ui.form.IModel"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IModel"
    },
    "resetModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the representative data to null.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the representative data to null.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1454
        },
        "end": {
          "line": 59,
          "column": 19,
          "index": 1469
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.form.IModel"
      ],
      "abstract": true,
      "fromInterface": "qx.ui.form.IModel"
    },
    "_applyModel": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1527
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1588
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MModelProperty"
      ],
      "mixin": "qx.ui.form.MModelProperty"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 455,
        "column": 2,
        "index": 11204
      },
      "end": {
        "line": 457,
        "column": 3,
        "index": 11258
      }
    }
  },
  "statics": {}
}