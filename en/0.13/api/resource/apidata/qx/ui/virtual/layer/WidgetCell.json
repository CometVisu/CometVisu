{
  "version": 0.3,
  "lastModified": 1731947917251,
  "lastModifiedIso": "2024-11-18T16:38:37.251Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/WidgetCell.js",
  "type": "class",
  "location": {
    "start": {
      "line": 24,
      "column": 0,
      "index": 665
    },
    "end": {
      "line": 328,
      "column": 3,
      "index": 9159
    }
  },
  "className": "qx.ui.virtual.layer.WidgetCell",
  "jsdoc": {
    "raw": [
      "*",
      " * The WidgetCell layer renders each cell with a qooxdoo widget. The concrete",
      " * widget instance for each cell is provided by a cell provider.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The WidgetCell layer renders each cell with a qooxdoo widget. The concrete\n widget instance for each cell is provided by a cell provider.</p>"
      }
    ]
  },
  "superClass": "qx.ui.virtual.layer.Abstract",
  "mixins": [
    "qx.ui.core.MChildrenHandling"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "widgetCellProvider"
      }
    ],
    "location": {
      "start": {
        "line": 33,
        "column": 2,
        "index": 951
      },
      "end": {
        "line": 46,
        "column": 3,
        "index": 1263
      }
    }
  },
  "properties": {
    "anonymous": {
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1495
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 1551
        }
      },
      "json": {
        "refine": true,
        "init": false
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.virtual.layer.Abstract",
        "qx.ui.core.Widget"
      ]
    }
  },
  "events": {
    "updated": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Is fired when the {@link #_fullUpdate} or the",
          "     * {@link #_updateLayerWindow} is finished.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Is fired when the {@link #<em>fullUpdate} or the\n {@link #</em>updateLayerWindow} is finished.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1691
        },
        "end": {
          "line": 67,
          "column": 34,
          "index": 1721
        }
      }
    }
  },
  "members": {
    "__spacerPool": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1929
        },
        "end": {
          "line": 77,
          "column": 22,
          "index": 1947
        }
      },
      "appearsIn": []
    },
    "getRenderedCellWidget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the widget used to render the given cell. May return null if the",
          "     * cell isn’t rendered currently rendered.",
          "     *",
          "     * @param row {Integer} The cell's row index",
          "     * @param column {Integer} The cell's column index",
          "     * @return {qx.ui.core.LayoutItem|null} the widget used to render the given",
          "     *    cell or <code>null</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget used to render the given cell. May return null if the\n cell isn’t rendered currently rendered.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The cell's row index",
            "paramName": "row",
            "description": " The cell's row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "column {Integer} The cell's column index",
            "paramName": "column",
            "description": " The cell's column index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem|null} the widget used to render the given\n    cell or <code>null</code>",
            "type": "qx.ui.core.LayoutItem|null",
            "description": "the widget used to render the given\n    cell or <code>null</code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2324
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 3080
        }
      },
      "type": "function",
      "params": [
        {
          "name": "row",
          "type": "Integer"
        },
        {
          "name": "column",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.LayoutItem|null"
      },
      "appearsIn": []
    },
    "_getSpacer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the spacer widget, for empty cells",
          "     *",
          "     * @return {qx.ui.core.Spacer} The spacer widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the spacer widget, for empty cells</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Spacer} The spacer widget.",
            "type": "qx.ui.core.Spacer",
            "description": "The spacer widget."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3210
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3411
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Spacer"
      },
      "appearsIn": []
    },
    "_activateNotEmptyChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Activates one of the still not empty items.",
          "     * @param elementToPool {qx.ui.core.Widget} The widget which gets pooled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Activates one of the still not empty items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elementToPool {qx.ui.core.Widget} The widget which gets pooled.",
            "paramName": "elementToPool",
            "description": " The widget which gets pooled.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3563
        },
        "end": {
          "line": 153,
          "column": 5,
          "index": 4191
        }
      },
      "type": "function",
      "params": [
        {
          "name": "elementToPool",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": []
    },
    "_fullUpdate": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4216
        },
        "end": {
          "line": 204,
          "column": 5,
          "index": 5563
        }
      },
      "type": "function",
      "params": [
        {
          "name": "firstRow"
        },
        {
          "name": "firstColumn"
        },
        {
          "name": "rowSizes"
        },
        {
          "name": "columnSizes"
        }
      ],
      "overriddenFrom": "qx.ui.virtual.layer.Abstract",
      "appearsIn": [
        "qx.ui.virtual.layer.Abstract"
      ]
    },
    "_updateLayerWindow": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 206,
          "column": 4,
          "index": 5570
        },
        "end": {
          "line": 317,
          "column": 5,
          "index": 8955
        }
      },
      "type": "function",
      "params": [
        {
          "name": "firstRow"
        },
        {
          "name": "firstColumn"
        },
        {
          "name": "rowSizes"
        },
        {
          "name": "columnSizes"
        }
      ],
      "overriddenFrom": "qx.ui.virtual.layer.Abstract",
      "appearsIn": [
        "qx.ui.virtual.layer.Abstract"
      ]
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)",
            "type": "qx.ui.core.LayoutItem[]",
            "description": "The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1328
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1383
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.LayoutItem[]"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "boolean",
            "description": "Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1539
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1594
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given widget if it is",
          "     * a child widget. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.Widget} the widget to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given widget is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout.",
            "type": "Integer",
            "description": "The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2233
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to add.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2711
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2771
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child widget at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param index {Integer} Index, at which the widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 3347
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 3425
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget before another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " Widget before the new widget will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 4029
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 4117
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "before",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget after another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted",
            "paramName": "after",
            "description": " Widget, after which the new widget will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4724
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 4808
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "after",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child widget.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to remove",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 4941
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4989
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the widget at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the widget to remove.",
          "     * @return {qx.ui.core.LayoutItem} The child removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The child removed.",
            "type": "qx.ui.core.LayoutItem",
            "description": "The child removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 5486
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 5545
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.LayoutItem"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     *",
          "     * @return {Array} An array of the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of the removed children.",
            "type": "Array<any>",
            "description": "An array of the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 5660
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5711
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 320,
        "column": 2,
        "index": 8964
      },
      "end": {
        "line": 327,
        "column": 3,
        "index": 9155
      }
    }
  },
  "statics": {
    "remap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mapping of protected methods to public.",
          "     * This omits an additional function call when using these methods. Call",
          "     * this methods in the defer block of the including class.",
          "     *",
          "     * @param members {Map} The including classes members map",
          "     * @deprecated {7.0} this is not necessary in modern compilers and leads to unexpected behaviour",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of protected methods to public.\n This omits an additional function call when using these methods. Call\n this methods in the defer block of the including class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "members {Map} The including classes members map",
            "paramName": "members",
            "description": " The including classes members map",
            "type": "Map<any, any>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{7.0} this is not necessary in modern compilers and leads to unexpected behaviour"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 6292
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 6916
        }
      },
      "type": "function",
      "params": [
        {
          "name": "members",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    }
  }
}