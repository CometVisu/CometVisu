{
  "className": "qx.ui.virtual.selection.Abstract",
  "packageName": "qx.ui.virtual.selection",
  "name": "Abstract",
  "superClass": "qx.ui.core.selection.Abstract",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0,
        "index": 656
      },
      "end": {
        "line": 218,
        "column": 3,
        "index": 6639
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Abstract base class for selection manager, which manage selectable items\n rendered in a virtual {@link qx.ui.virtual.core.Pane}.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 40,
        "column": 2,
        "index": 1280
      },
      "end": {
        "line": 49,
        "column": 3,
        "index": 1515
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "pane {qx.ui.virtual.core.Pane} The virtual pane on which the\n    selectable item are rendered",
          "paramName": "pane",
          "description": " The virtual pane on which the\n    selectable item are rendered",
          "type": "qx.ui.virtual.core.Pane"
        },
        {
          "name": "@param",
          "body": "selectionDelegate {qx.ui.virtual.selection.ISelectionDelegate?null} An optional delegate,\n    which can be used to customize the behavior of the selection manager\n    without sub classing it.",
          "paramName": "selectionDelegate",
          "description": " An optional delegate,\n    which can be used to customize the behavior of the selection manager\n    without sub classing it.",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.ui.virtual.selection.ISelectionDelegate"
        }
      ]
    }
  },
  "members": {
    "_autoScrollIntoView": {
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1802
        },
        "end": {
          "line": 59,
          "column": 29,
          "index": 1827
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "protected"
    },
    "_isSelectable": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2050
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 2186
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "appearsIn": [
        "qx.ui.core.selection.Abstract"
      ]
    },
    "_styleSelectable": {
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2211
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2369
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "appearsIn": [
        "qx.ui.core.selection.Abstract"
      ]
    },
    "attachPointerEvents": {
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2630
        },
        "end": {
          "line": 97,
          "column": 5,
          "index": 3079
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach pointer events to the managed pane.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "detatchPointerEvents": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3238
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 3302
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detach pointer events from the managed pane.</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} misspelled, please use detachPointerEvents instead!"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "detachPointerEvents": {
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 3377
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3841
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detach pointer events from the managed pane.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "attachKeyEvents": {
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 4206
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 4302
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach key events to manipulate the selection using the keyboard. The\n event target doesn't need to be the pane itself. It can be an widget,\n which received key events. Usually the key event target is the\n {@link qx.ui.virtual.core.Scroller}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {qx.core.Object} the key event target.",
            "paramName": "target",
            "description": " the key event target.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "detachKeyEvents": {
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 4418
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 4517
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detach key events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {qx.core.Object} the key event target.",
            "paramName": "target",
            "description": " the key event target.",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "attachListEvents": {
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4932
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 5090
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach list events. The selection mode <code>one</code> need to know,\n when selectable items are added or removed. If this mode is used the\n <code>list</code> parameter must fire <code>addItem</code> and\n <code>removeItem</code> events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "list {qx.core.Object} the event target for <code>addItem</code> and\n    <code>removeItem</code> events",
            "paramName": "list",
            "description": " the event target for <code>addItem</code> and\n    <code>removeItem</code> events",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "detachListEvents": {
      "location": {
        "start": {
          "line": 162,
          "column": 4,
          "index": 5270
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5434
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detach list events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "list {qx.core.Object} the event target for <code>addItem</code> and\n    <code>removeItem</code> events",
            "paramName": "list",
            "description": " the event target for <code>addItem</code> and\n    <code>removeItem</code> events",
            "type": "qx.core.Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_capture": {
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 5667
        },
        "end": {
          "line": 176,
          "column": 5,
          "index": 5713
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "appearsIn": [
        "qx.ui.core.selection.Abstract"
      ]
    },
    "_releaseCapture": {
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5738
        },
        "end": {
          "line": 181,
          "column": 5,
          "index": 5798
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "appearsIn": [
        "qx.ui.core.selection.Abstract"
      ]
    },
    "_getScroll": {
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 5823
        },
        "end": {
          "line": 189,
          "column": 5,
          "index": 5943
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "appearsIn": [
        "qx.ui.core.selection.Abstract"
      ]
    },
    "_scrollBy": {
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 5968
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 6119
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "appearsIn": [
        "qx.ui.core.selection.Abstract"
      ]
    },
    "_getLocation": {
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 6144
        },
        "end": {
          "line": 201,
          "column": 5,
          "index": 6293
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "appearsIn": [
        "qx.ui.core.selection.Abstract"
      ]
    },
    "_getDimension": {
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 6318
        },
        "end": {
          "line": 206,
          "column": 5,
          "index": 6381
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "appearsIn": [
        "qx.ui.core.selection.Abstract"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getMode": {
      "type": "function",
      "name": "getMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>mode</code>.\n\nFor further details take a look at the property definition: {@link #mode}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for mode"
          }
        ]
      }
    },
    "setMode": {
      "type": "function",
      "name": "setMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>mode</code>.\n\nFor further details take a look at the property definition: {@link #mode}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for mode"
          }
        ]
      }
    },
    "resetMode": {
      "type": "function",
      "name": "resetMode",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>mode</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #mode}."
          }
        ]
      }
    },
    "getDrag": {
      "type": "function",
      "name": "getDrag",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>drag</code>.\n\nFor further details take a look at the property definition: {@link #drag}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for drag"
          }
        ]
      }
    },
    "isDrag": {
      "type": "function",
      "name": "isDrag",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>drag</code>.\n\nFor further details take a look at the property definition: {@link #drag}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for drag"
          }
        ]
      }
    },
    "setDrag": {
      "type": "function",
      "name": "setDrag",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>drag</code>.\n\nFor further details take a look at the property definition: {@link #drag}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for drag"
          }
        ]
      }
    },
    "resetDrag": {
      "type": "function",
      "name": "resetDrag",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>drag</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #drag}."
          }
        ]
      }
    },
    "getQuick": {
      "type": "function",
      "name": "getQuick",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>quick</code>.\n\nFor further details take a look at the property definition: {@link #quick}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for quick"
          }
        ]
      }
    },
    "isQuick": {
      "type": "function",
      "name": "isQuick",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>quick</code>.\n\nFor further details take a look at the property definition: {@link #quick}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for quick"
          }
        ]
      }
    },
    "setQuick": {
      "type": "function",
      "name": "setQuick",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>quick</code>.\n\nFor further details take a look at the property definition: {@link #quick}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for quick"
          }
        ]
      }
    },
    "resetQuick": {
      "type": "function",
      "name": "resetQuick",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>quick</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #quick}."
          }
        ]
      }
    },
    "getReadOnly": {
      "type": "function",
      "name": "getReadOnly",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>readOnly</code>.\n\nFor further details take a look at the property definition: {@link #readOnly}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for readOnly"
          }
        ]
      }
    },
    "isReadOnly": {
      "type": "function",
      "name": "isReadOnly",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>readOnly</code>.\n\nFor further details take a look at the property definition: {@link #readOnly}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for readOnly"
          }
        ]
      }
    },
    "setReadOnly": {
      "type": "function",
      "name": "setReadOnly",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>readOnly</code>.\n\nFor further details take a look at the property definition: {@link #readOnly}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for readOnly"
          }
        ]
      }
    },
    "resetReadOnly": {
      "type": "function",
      "name": "resetReadOnly",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.selection.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>readOnly</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #readOnly}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 215,
        "column": 2,
        "index": 6579
      },
      "end": {
        "line": 217,
        "column": 3,
        "index": 6635
      }
    },
    "jsdoc": {}
  },
  "events": {},
  "descendants": [
    "qx.ui.virtual.selection.CellRectangle",
    "qx.ui.virtual.selection.Row"
  ]
}