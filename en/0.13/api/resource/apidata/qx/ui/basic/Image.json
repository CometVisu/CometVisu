{
  "version": 0.3,
  "lastModified": 1731947916123,
  "lastModifiedIso": "2024-11-18T16:38:36.123Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/basic/Image.js",
  "type": "class",
  "location": {
    "start": {
      "line": 47,
      "column": 0,
      "index": 1299
    },
    "end": {
      "line": 1143,
      "column": 3,
      "index": 32848
    }
  },
  "className": "qx.ui.basic.Image",
  "jsdoc": {
    "raw": [
      "*",
      " * The image class displays an image file",
      " *",
      " * This class supports image clipping, which means that multiple images can be combined",
      " * into one large image and only the relevant part is shown.",
      " *",
      " * *Example*",
      " *",
      " * Here is a little example of how to use the widget.",
      " *",
      " * <pre class='javascript'>",
      " *   var image = new qx.ui.basic.Image(\"icon/32/actions/format-justify-left.png\");",
      " *",
      " *   this.getRoot().add(image);",
      " * </pre>",
      " *",
      " * This example create a widget to display the image",
      " * <code>icon/32/actions/format-justify-left.png</code>.",
      " *",
      " * *External Documentation*",
      " *",
      " * <a href='http://qooxdoo.org/docs/#desktop/widget/image.md' target='_blank'>",
      " * Documentation of this widget in the qooxdoo manual.</a>",
      " *",
      " * NOTE: Instances of this class must be disposed of after use",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The image class displays an image file\n This class supports image clipping, which means that multiple images can be combined\n into one large image and only the relevant part is shown.\n<em>Example</em>\n Here is a little example of how to use the widget.\n </p>\n<pre class='javascript'>\n   var image = new qx.ui.basic.Image(\"icon/32/actions/format-justify-left.png\");\n   this.getRoot().add(image);\n </pre>\n<p>This example create a widget to display the image\n <code>icon/32/actions/format-justify-left.png</code>.\n<em>External Documentation</em>\n <a href='http://qooxdoo.org/docs/#desktop/widget/image.md' target='_blank'>\n Documentation of this widget in the qooxdoo manual.</a>\n NOTE: Instances of this class must be disposed of after use</p>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "source"
      }
    ],
    "location": {
      "start": {
        "line": 59,
        "column": 2,
        "index": 1636
      },
      "end": {
        "line": 67,
        "column": 3,
        "index": 1761
      }
    }
  },
  "properties": {
    "source": {
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2061
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2219
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeSource",
        "apply": "_applySource",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* The URL of the image. Setting it will possibly abort loading of current image. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The URL of the image. Setting it will possibly abort loading of current image.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "scale": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2419
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2554
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeScale",
        "themeable": true,
        "apply": "_applyScale"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the image should be scaled to the given dimensions",
          "     *",
          "     * This is disabled by default because it prevents the usage",
          "     * of image clipping when enabled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the image should be scaled to the given dimensions\n This is disabled by default because it prevents the usage\n of image clipping when enabled.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "forceRatio": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 2686
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 2810
        }
      },
      "json": {
        "init": "auto",
        "check": [
          "disabled",
          "height",
          "width",
          "auto"
        ],
        "apply": "_applyDimension"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether to preserve the image ratio (ie prevent distortion), and which dimension",
          "     * to prioritise",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to preserve the image ratio (ie prevent distortion), and which dimension\n to prioritise</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "allowScaleUp": {
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 2878
        },
        "end": {
          "line": 117,
          "column": 5,
          "index": 2973
        }
      },
      "json": {
        "init": false,
        "check": "Boolean",
        "apply": "_applyDimension"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether to allow scaling the image up",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to allow scaling the image up</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "appearance": {
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 2998
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 3057
        }
      },
      "json": {
        "refine": true,
        "init": "image"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "allowShrinkX": {
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3082
        },
        "end": {
          "line": 129,
          "column": 5,
          "index": 3141
        }
      },
      "json": {
        "refine": true,
        "init": false
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "allowShrinkY": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3166
        },
        "end": {
          "line": 135,
          "column": 5,
          "index": 3225
        }
      },
      "json": {
        "refine": true,
        "init": false
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "allowGrowX": {
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3250
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 3307
        }
      },
      "json": {
        "refine": true,
        "init": false
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "allowGrowY": {
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 3332
        },
        "end": {
          "line": 147,
          "column": 5,
          "index": 3389
        }
      },
      "json": {
        "refine": true,
        "init": false
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    }
  },
  "events": {
    "loadingFailed": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired if the image source can not be loaded. This event can only be",
          "     * fired for the first loading of an unmanaged resource (external image).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the image source can not be loaded. This event can only be\n fired for the first loading of an unmanaged resource (external image).</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 3764
        },
        "end": {
          "line": 161,
          "column": 40,
          "index": 3800
        }
      }
    },
    "loaded": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired if the image has been loaded. This is even true for managed",
          "     * resources (images known by generator).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the image has been loaded. This is even true for managed\n resources (images known by generator).</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 3942
        },
        "end": {
          "line": 167,
          "column": 33,
          "index": 3971
        }
      }
    },
    "aborted": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired when the pending request has been aborted. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the pending request has been aborted.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 4038
        },
        "end": {
          "line": 170,
          "column": 34,
          "index": 4068
        }
      }
    }
  },
  "statics": {
    "PLACEHOLDER_IMAGE": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 4092
        },
        "end": {
          "line": 175,
          "column": 86,
          "index": 4197
        }
      },
      "appearsIn": []
    }
  },
  "members": {
    "__width": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 4405
        },
        "end": {
          "line": 185,
          "column": 17,
          "index": 4418
        }
      },
      "appearsIn": []
    },
    "__height": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 4424
        },
        "end": {
          "line": 186,
          "column": 18,
          "index": 4438
        }
      },
      "appearsIn": []
    },
    "__mode": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 4444
        },
        "end": {
          "line": 187,
          "column": 16,
          "index": 4456
        }
      },
      "appearsIn": []
    },
    "__contentElements": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 4462
        },
        "end": {
          "line": 188,
          "column": 27,
          "index": 4485
        }
      },
      "appearsIn": []
    },
    "__currentContentElement": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 189,
          "column": 4,
          "index": 4491
        },
        "end": {
          "line": 189,
          "column": 33,
          "index": 4520
        }
      },
      "appearsIn": []
    },
    "__wrapper": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 190,
          "column": 4,
          "index": 4526
        },
        "end": {
          "line": 190,
          "column": 19,
          "index": 4541
        }
      },
      "appearsIn": []
    },
    "__requestId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 191,
          "column": 4,
          "index": 4547
        },
        "end": {
          "line": 191,
          "column": 18,
          "index": 4561
        }
      },
      "appearsIn": []
    },
    "_onChangeTheme": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 4586
        },
        "end": {
          "line": 198,
          "column": 5,
          "index": 4742
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "getContentElement": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 207,
          "column": 4,
          "index": 4959
        },
        "end": {
          "line": 209,
          "column": 5,
          "index": 5035
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_createContentElement": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 212,
          "column": 4,
          "index": 5060
        },
        "end": {
          "line": 214,
          "column": 5,
          "index": 5140
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_getContentHint": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 217,
          "column": 4,
          "index": 5165
        },
        "end": {
          "line": 222,
          "column": 5,
          "index": 5283
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyDecorator": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 225,
          "column": 4,
          "index": 5308
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 5631
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyTextColor": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 238,
          "column": 4,
          "index": 5656
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 6054
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyPadding": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 257,
          "column": 4,
          "index": 6079
        },
        "end": {
          "line": 278,
          "column": 5,
          "index": 6806
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        },
        {
          "name": "name"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "renderLayout": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 6813
        },
        "end": {
          "line": 298,
          "column": 5,
          "index": 7379
        }
      },
      "type": "function",
      "params": [
        {
          "name": "left"
        },
        {
          "name": "top"
        },
        {
          "name": "width"
        },
        {
          "name": "height"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_applyEnabled": {
      "jsdoc": {
        "raw": [
          " property apply, overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 7611
        },
        "end": {
          "line": 313,
          "column": 5,
          "index": 7751
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applySource": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 316,
          "column": 4,
          "index": 7780
        },
        "end": {
          "line": 325,
          "column": 5,
          "index": 8000
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyScale": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 328,
          "column": 4,
          "index": 8029
        },
        "end": {
          "line": 330,
          "column": 5,
          "index": 8082
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "__setMode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remembers the mode to keep track which contentElement is currently in use.",
          "     * @param mode {String} internal mode (alphaScaled|scaled|nonScaled)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remembers the mode to keep track which contentElement is currently in use.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String} internal mode (alphaScaled|scaled|nonScaled)",
            "paramName": "mode",
            "description": " internal mode (alphaScaled|scaled|nonScaled)",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 336,
          "column": 4,
          "index": 8260
        },
        "end": {
          "line": 338,
          "column": 5,
          "index": 8309
        }
      },
      "type": "function",
      "params": [
        {
          "name": "mode",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__getMode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current mode if set. Otherwise checks the current source and",
          "     * the current scaling to determine the current mode.",
          "     *",
          "     * @return {String} current internal mode",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current mode if set. Otherwise checks the current source and\n the current scaling to determine the current mode.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} current internal mode",
            "type": "string",
            "description": "current internal mode"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 346,
          "column": 4,
          "index": 8523
        },
        "end": {
          "line": 373,
          "column": 5,
          "index": 9180
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "__createSuitableContentElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates a contentElement suitable for the current mode",
          "     *",
          "     * @param mode {String} internal mode",
          "     * @return {qx.html.Image} suitable image content element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a contentElement suitable for the current mode</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String} internal mode",
            "paramName": "mode",
            "description": " internal mode",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Image} suitable image content element",
            "type": "qx.html.Image",
            "description": "suitable image content element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 381,
          "column": 4,
          "index": 9376
        },
        "end": {
          "line": 430,
          "column": 5,
          "index": 10605
        }
      },
      "type": "function",
      "params": [
        {
          "name": "mode",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.html.Image"
      },
      "appearsIn": []
    },
    "__getSuitableContentElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a contentElement suitable for the current mode",
          "     *",
          "     * @return {qx.html.Image} suitable image contentElement",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a contentElement suitable for the current mode</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Image} suitable image contentElement",
            "type": "qx.html.Image",
            "description": "suitable image contentElement"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 437,
          "column": 4,
          "index": 10758
        },
        "end": {
          "line": 456,
          "column": 5,
          "index": 11214
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Image"
      },
      "appearsIn": []
    },
    "_styleSource": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Applies the source to the clipped image instance or preload",
          "     * an image to detect sizes and apply it afterwards.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Applies the source to the clipped image instance or preload\n an image to detect sizes and apply it afterwards.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 463,
          "column": 4,
          "index": 11368
        },
        "end": {
          "line": 529,
          "column": 5,
          "index": 13631
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__fireLoadEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper function, which fires <code>loaded</code> event asynchronously.",
          "     * It emulates native <code>loaded</code> event of an image object. This",
          "     * helper will be called, if you try to load a managed image or an",
          "     * previously loaded unmanaged image.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper function, which fires <code>loaded</code> event asynchronously.\n It emulates native <code>loaded</code> event of an image object. This\n helper will be called, if you try to load a managed image or an\n previously loaded unmanaged image.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 537,
          "column": 4,
          "index": 13922
        },
        "end": {
          "line": 549,
          "column": 5,
          "index": 14308
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__getContentElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the content element.",
          "     * @return {qx.html.Image} content element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the content element.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Image} content element",
            "type": "qx.html.Image",
            "description": "content element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 555,
          "column": 4,
          "index": 14414
        },
        "end": {
          "line": 562,
          "column": 5,
          "index": 14599
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Image"
      },
      "appearsIn": []
    },
    "__checkForContentElementSwitch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if the current content element is capable to display the image",
          "     * with the current settings (scaling, alpha PNG)",
          "     *",
          "     * @param source {String} source of the image",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the current content element is capable to display the image\n with the current settings (scaling, alpha PNG)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {String} source of the image",
            "paramName": "source",
            "description": " source of the image",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 570,
          "column": 4,
          "index": 14810
        },
        "end": {
          "line": 615,
          "column": 6,
          "index": 16331
        }
      },
      "appearsIn": []
    },
    "__checkForContentElementReplacement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks the current child and replaces it if necessary",
          "     *",
          "     * @param elementToAdd {qx.html.Image} content element to add",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks the current child and replaces it if necessary</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elementToAdd {qx.html.Image} content element to add",
            "paramName": "elementToAdd",
            "description": " content element to add",
            "type": "qx.html.Image"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 622,
          "column": 4,
          "index": 16488
        },
        "end": {
          "line": 724,
          "column": 5,
          "index": 20118
        }
      },
      "type": "function",
      "params": [
        {
          "name": "elementToAdd",
          "type": "qx.html.Image"
        }
      ],
      "appearsIn": []
    },
    "__setManagedImage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Use the ResourceManager to set a managed image",
          "     *",
          "     * @param el {Element} image DOM element",
          "     * @param source {String} source path",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Use the ResourceManager to set a managed image</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "source {String} source path",
            "paramName": "source",
            "description": " source path",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 732,
          "column": 4,
          "index": 20289
        },
        "end": {
          "line": 787,
          "column": 5,
          "index": 22145
        }
      },
      "type": "function",
      "params": [
        {
          "name": "el",
          "type": "Element"
        },
        {
          "name": "source",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__setFontSize": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 789,
          "column": 4,
          "index": 22152
        },
        "end": {
          "line": 802,
          "column": 5,
          "index": 22610
        }
      },
      "type": "function",
      "params": [
        {
          "name": "el"
        },
        {
          "name": "width"
        },
        {
          "name": "height"
        }
      ],
      "appearsIn": []
    },
    "_applyDimension": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 804,
          "column": 4,
          "index": 22617
        },
        "end": {
          "line": 820,
          "column": 5,
          "index": 23132
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.LayoutItem",
      "appearsIn": [
        "qx.ui.core.LayoutItem"
      ]
    },
    "__setUnmanagedImage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Use the infos of the ImageLoader to set an unmanaged image",
          "     *",
          "     * @param el {Element} image DOM element",
          "     * @param source {String} source path",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Use the infos of the ImageLoader to set an unmanaged image</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "source {String} source path",
            "paramName": "source",
            "description": " source path",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 828,
          "column": 4,
          "index": 23315
        },
        "end": {
          "line": 838,
          "column": 5,
          "index": 23660
        }
      },
      "type": "function",
      "params": [
        {
          "name": "el",
          "type": "Element"
        },
        {
          "name": "source",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__loadUnmanagedImage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Use the ImageLoader to load an unmanaged image",
          "     *",
          "     * @param el {Element} image DOM element",
          "     * @param source {String} source path",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Use the ImageLoader to load an unmanaged image</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "source {String} source path",
            "paramName": "source",
            "description": " source path",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 846,
          "column": 4,
          "index": 23831
        },
        "end": {
          "line": 876,
          "column": 5,
          "index": 24761
        }
      },
      "type": "function",
      "params": [
        {
          "name": "el",
          "type": "Element"
        },
        {
          "name": "source",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__resetSource": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reset source displayed by the DOM element.",
          "     *",
          "     * @param el {Element} image DOM element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reset source displayed by the DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 883,
          "column": 4,
          "index": 24886
        },
        "end": {
          "line": 891,
          "column": 5,
          "index": 25068
        }
      },
      "type": "function",
      "params": [
        {
          "name": "el",
          "type": "Element"
        }
      ],
      "appearsIn": []
    },
    "__getFont": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 893,
          "column": 4,
          "index": 25075
        },
        "end": {
          "line": 904,
          "column": 5,
          "index": 25374
        }
      },
      "type": "function",
      "params": [
        {
          "name": "source"
        }
      ],
      "appearsIn": []
    },
    "__setSource": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Combines the decorator's image styles with our own image to make sure",
          "     * gradient and backgroundImage decorators work on Images.",
          "     *",
          "     * @param el {Element} image DOM element",
          "     * @param source {String} source path",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Combines the decorator's image styles with our own image to make sure\n gradient and backgroundImage decorators work on Images.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} image DOM element",
            "paramName": "el",
            "description": " image DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "source {String} source path",
            "paramName": "source",
            "description": " source path",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 913,
          "column": 4,
          "index": 25631
        },
        "end": {
          "line": 992,
          "column": 5,
          "index": 28518
        }
      },
      "type": "function",
      "params": [
        {
          "name": "el",
          "type": "Element"
        },
        {
          "name": "source",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__loaderCallback": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler fired after the preloader has finished loading the icon",
          "     *",
          "     * @param source {String} Image source which was loaded",
          "     * @param imageInfo {Map} Dimensions of the loaded image",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler fired after the preloader has finished loading the icon</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {String} Image source which was loaded",
            "paramName": "source",
            "description": " Image source which was loaded",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "imageInfo {Map} Dimensions of the loaded image",
            "paramName": "imageInfo",
            "description": " Dimensions of the loaded image",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1000,
          "column": 4,
          "index": 28746
        },
        "end": {
          "line": 1027,
          "column": 5,
          "index": 29560
        }
      },
      "type": "function",
      "params": [
        {
          "name": "source",
          "type": "string"
        },
        {
          "name": "imageInfo",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "__updateContentHint": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates the content hint when the image size has been changed",
          "     *",
          "     * @param width {Integer} width of the image",
          "     * @param height {Integer} height of the image",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the content hint when the image size has been changed</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} width of the image",
            "paramName": "width",
            "description": " width of the image",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} height of the image",
            "paramName": "height",
            "description": " height of the image",
            "type": "Integer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1035,
          "column": 4,
          "index": 29759
        },
        "end": {
          "line": 1045,
          "column": 5,
          "index": 30038
        }
      },
      "type": "function",
      "params": [
        {
          "name": "width",
          "type": "Integer"
        },
        {
          "name": "height",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "_recalc": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Recalculates the size of the image, according to scaling parameters",
          "     * @param maxWidth {Integer?} maximum width restriction",
          "     * @param maxHeight {Integer?} minimum height restriction",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Recalculates the size of the image, according to scaling parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "maxWidth {Integer?} maximum width restriction",
            "paramName": "maxWidth",
            "description": " maximum width restriction",
            "optional": true,
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxHeight {Integer?} minimum height restriction",
            "paramName": "maxHeight",
            "description": " minimum height restriction",
            "optional": true,
            "type": "Integer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1052,
          "column": 4,
          "index": 30258
        },
        "end": {
          "line": 1120,
          "column": 5,
          "index": 32306
        }
      },
      "type": "function",
      "params": [
        {
          "name": "originalWidth"
        },
        {
          "name": "originalHeight"
        }
      ],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 1129,
        "column": 2,
        "index": 32502
      },
      "end": {
        "line": 1142,
        "column": 3,
        "index": 32844
      }
    }
  }
}