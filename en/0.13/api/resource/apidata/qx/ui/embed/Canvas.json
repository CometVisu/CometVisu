{
  "version": 0.3,
  "lastModified": 1729101020412,
  "lastModifiedIso": "2024-10-16T17:50:20.412Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/embed/Canvas.js",
  "type": "class",
  "location": {
    "start": {
      "line": 69,
      "column": 0,
      "index": 2391
    },
    "end": {
      "line": 245,
      "column": 3,
      "index": 7267
    }
  },
  "className": "qx.ui.embed.Canvas",
  "jsdoc": {
    "raw": [
      "*",
      " * The Canvas widget embeds the HMTL canvas element",
      " * [<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#the-canvas\">W3C-HTML5</a>]",
      " *",
      " * Note: This widget does not work in Internet Explorer < 9!",
      " * Check for browser support with qx.core.Environment.get(\"html.canvas\").",
      " *",
      " * To paint something on the canvas and keep the content updated on resizes you",
      " * either have to override the {@link #_draw} method or redraw the content on",
      " * the {@link #redraw} event. The drawing context can be obtained by {@link #getContext2d}.",
      " *",
      " * Note that this widget operates on two different coordinate systems. The canvas",
      " * has its own coordinate system for drawing operations. This canvas coordinate",
      " * system is scaled to fit actual size of the DOM element. Each time the size of",
      " * the canvas dimensions is changed a redraw is required. In this case the",
      " * protected method {@link #_draw} is called and the event {@link #redraw}",
      " * is fired. You can synchronize the internal canvas dimension with the",
      " * CSS dimension of the canvas element by setting {@link #syncDimension} to",
      " * <code>true</code>.",
      " *",
      " * *Example*",
      " *",
      " * Here is a little example of how to use the canvas widget.",
      " *",
      " * <pre class='javascript'>",
      " * var canvas = new qx.ui.embed.Canvas().set({",
      " *   canvasWidth: 200,",
      " *   canvasHeight: 200,",
      " *   syncDimension: true",
      " * });",
      " * canvas.addListener(\"redraw\", function(e)",
      " * {",
      " *   var data = e.getData();",
      " *   var width = data.width;",
      " *   var height = data.height;",
      " *   var ctx = data.context;",
      " *",
      " *   ctx.fillStyle = \"rgb(200,0,0)\";",
      " *   ctx.fillRect (20, 20, width-5, height-5);",
      " *",
      " *   ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";",
      " *   ctx.fillRect (70, 70, 105, 100);",
      " * }, this);",
      " * </pre>",
      " *",
      " * *External Documentation*",
      " *",
      " * <a href='http://qooxdoo.org/docs/#desktop/widget/canvas.md' target='_blank'>",
      " * Documentation of this widget in the qooxdoo manual.</a>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The Canvas widget embeds the HMTL canvas element\n [<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#the-canvas\">W3C-HTML5</a>]\n Note: This widget does not work in Internet Explorer &lt; 9!\n Check for browser support with qx.core.Environment.get(\"html.canvas\").\n To paint something on the canvas and keep the content updated on resizes you\n either have to override the {@link #<em>draw} method or redraw the content on\n the {@link #redraw} event. The drawing context can be obtained by {@link #getContext2d}.\n Note that this widget operates on two different coordinate systems. The canvas\n has its own coordinate system for drawing operations. This canvas coordinate\n system is scaled to fit actual size of the DOM element. Each time the size of\n the canvas dimensions is changed a redraw is required. In this case the\n protected method {@link #</em>draw} is called and the event {@link #redraw}\n is fired. You can synchronize the internal canvas dimension with the\n CSS dimension of the canvas element by setting {@link #syncDimension} to\n <code>true</code>.\n<em>Example</em>\n Here is a little example of how to use the canvas widget.\n </p>\n<pre class='javascript'>\n var canvas = new qx.ui.embed.Canvas().set({\n   canvasWidth: 200,\n   canvasHeight: 200,\n   syncDimension: true\n });\n canvas.addListener(\"redraw\", function(e)\n {\n   var data = e.getData();\n   var width = data.width;\n   var height = data.height;\n   var ctx = data.context;\n   ctx.fillStyle = \"rgb(200,0,0)\";\n   ctx.fillRect (20, 20, width-5, height-5);\n   ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\n   ctx.fillRect (70, 70, 105, 100);\n }, this);\n </pre>\n<p><em>External Documentation</em>\n <a href='http://qooxdoo.org/docs/#desktop/widget/canvas.md' target='_blank'>\n Documentation of this widget in the qooxdoo manual.</a></p>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "canvasWidth"
      },
      {
        "name": "canvasHeight"
      }
    ],
    "location": {
      "start": {
        "line": 82,
        "column": 2,
        "index": 2824
      },
      "end": {
        "line": 95,
        "column": 3,
        "index": 3178
      }
    }
  },
  "events": {
    "redraw": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * The redraw event is fired each time the canvas dimension change and the",
          "     * canvas needs to be updated. The data field contains a map containing the",
          "     * <code>width</code> and <code>height</code> of the canvas and the",
          "     * rendering <code>context</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The redraw event is fired each time the canvas dimension change and the\n canvas needs to be updated. The data field contains a map containing the\n <code>width</code> and <code>height</code> of the canvas and the\n rendering <code>context</code>.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3670
        },
        "end": {
          "line": 110,
          "column": 32,
          "index": 3698
        }
      }
    }
  },
  "properties": {
    "syncDimension": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3985
        },
        "end": {
          "line": 124,
          "column": 5,
          "index": 4049
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "* Whether canvas and widget coordinates should be synchronized "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether canvas and widget coordinates should be synchronized</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "canvasWidth": {
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 4111
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 4205
        }
      },
      "json": {
        "check": "Integer",
        "init": 300,
        "apply": "_applyCanvasWidth"
      },
      "jsdoc": {
        "raw": [
          "* The internal with of the canvas coordinates "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The internal with of the canvas coordinates</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "canvasHeight": {
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4269
        },
        "end": {
          "line": 138,
          "column": 5,
          "index": 4365
        }
      },
      "json": {
        "check": "Integer",
        "init": 150,
        "apply": "_applyCanvasHeight"
      },
      "jsdoc": {
        "raw": [
          "* The internal height of the canvas coordinates "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The internal height of the canvas coordinates</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__deferredDraw": {
      "jsdoc": {
        "raw": [
          "* @type {qx.util.DeferredCall} "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.util.DeferredCall}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 149,
          "column": 4,
          "index": 4613
        },
        "end": {
          "line": 149,
          "column": 24,
          "index": 4633
        }
      },
      "appearsIn": []
    },
    "_createContentElement": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 158,
          "column": 4,
          "index": 4850
        },
        "end": {
          "line": 160,
          "column": 5,
          "index": 4916
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "__redraw": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This methods triggers the redraw of the canvas' content",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This methods triggers the redraw of the canvas' content</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 5002
        },
        "end": {
          "line": 179,
          "column": 5,
          "index": 5398
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_applyCanvasWidth": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 5427
        },
        "end": {
          "line": 185,
          "column": 5,
          "index": 5550
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyCanvasHeight": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 5579
        },
        "end": {
          "line": 191,
          "column": 5,
          "index": 5704
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "update": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Redraw the canvas",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Redraw the canvas</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5752
        },
        "end": {
          "line": 198,
          "column": 5,
          "index": 5806
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onResize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Widget resize event handler. Updates the canvas dimension if needed.",
          "     *",
          "     * @param e {qx.event.type.Data} The resize event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget resize event handler. Updates the canvas dimension if needed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The resize event object",
            "paramName": "e",
            "description": " The resize event object",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 5973
        },
        "end": {
          "line": 212,
          "column": 5,
          "index": 6153
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "getContext2d": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the native canvas 2D rendering context",
          "     * [<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasrenderingcontext2d\">W3C-HTML5</a>].",
          "     * All drawing operations are performed on this context.",
          "     *",
          "     * @return {CanvasRenderingContext2D} The 2D rendering context.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the native canvas 2D rendering context\n [<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasrenderingcontext2d\">W3C-HTML5</a>].\n All drawing operations are performed on this context.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{CanvasRenderingContext2D} The 2D rendering context.",
            "type": "CanvasRenderingContext2D",
            "description": "The 2D rendering context."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 221,
          "column": 4,
          "index": 6505
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 6581
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "CanvasRenderingContext2D"
      },
      "appearsIn": []
    },
    "_draw": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Template method, which can be used by derived classes to redraw the",
          "     * content. It is called each time the canvas dimension change and the",
          "     * canvas needs to be updated.",
          "     *",
          "     * @param width {Integer} New canvas width",
          "     * @param height {Integer} New canvas height",
          "     * @param context {CanvasRenderingContext2D} The rendering context to draw to",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Template method, which can be used by derived classes to redraw the\n content. It is called each time the canvas dimension change and the\n canvas needs to be updated.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} New canvas width",
            "paramName": "width",
            "description": " New canvas width",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} New canvas height",
            "paramName": "height",
            "description": " New canvas height",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "context {CanvasRenderingContext2D} The rendering context to draw to",
            "paramName": "context",
            "description": " The rendering context to draw to",
            "type": "CanvasRenderingContext2D"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 234,
          "column": 4,
          "index": 6974
        },
        "end": {
          "line": 234,
          "column": 36,
          "index": 7006
        }
      },
      "type": "function",
      "params": [
        {
          "name": "width",
          "type": "Integer"
        },
        {
          "name": "height",
          "type": "Integer"
        },
        {
          "name": "context",
          "type": "CanvasRenderingContext2D"
        }
      ],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 242,
        "column": 2,
        "index": 7203
      },
      "end": {
        "line": 244,
        "column": 3,
        "index": 7263
      }
    }
  },
  "statics": {}
}