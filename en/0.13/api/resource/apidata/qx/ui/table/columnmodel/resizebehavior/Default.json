{
  "version": 0.3,
  "lastModified": 1735341601183,
  "lastModifiedIso": "2024-12-27T23:20:01.183Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/resizebehavior/Default.js",
  "type": "class",
  "location": {
    "start": {
      "line": 52,
      "column": 0,
      "index": 1715
    },
    "end": {
      "line": 524,
      "column": 3,
      "index": 16233
    }
  },
  "className": "qx.ui.table.columnmodel.resizebehavior.Default",
  "jsdoc": {
    "raw": [
      "*",
      " * The default resize behavior.  Until a resize model is loaded, the default",
      " * behavior is to:",
      " * <ol>",
      " *   <li>",
      " *     Upon the table initially appearing, and upon any window resize, divide",
      " *     the table space equally between the visible columns.",
      " *   </li>",
      " *   <li>",
      " *     When a column is increased in width, all columns to its right are",
      " *     pushed to the right with no change to their widths.  This may push some",
      " *     columns off the right edge of the table, causing a horizontal scroll",
      " *     bar to appear.",
      " *   </li>",
      " *   <li>",
      " *     When a column is decreased in width, if the total width of all columns",
      " *     is <i>greater than</i> the table width, no additional column width",
      " *     change is made.",
      " *   </li>",
      " *   <li>",
      " *     When a column is decreased in width, if the total width of all columns",
      " *     is <i>less than</i> the table width, the visible column",
      " *     immediately to the right of the column which decreased in width has its",
      " *     width increased to fill the remaining space.",
      " *   </li>",
      " * </ol>",
      " *",
      " * A resize model may be loaded to provide more guidance on how to adjust",
      " * column width upon each of the events: initial appear, window resize, and",
      " * column resize. *** TO BE FILLED IN ***",
      " *",
      " * @require(qx.ui.core.ColumnData)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The default resize behavior.  Until a resize model is loaded, the default\n behavior is to:\n </p>\n<ol>\n   <li>\n     Upon the table initially appearing, and upon any window resize, divide\n     the table space equally between the visible columns.\n   </li>\n   <li>\n     When a column is increased in width, all columns to its right are\n     pushed to the right with no change to their widths.  This may push some\n     columns off the right edge of the table, causing a horizontal scroll\n     bar to appear.\n   </li>\n   <li>\n     When a column is decreased in width, if the total width of all columns\n     is <i>greater than</i> the table width, no additional column width\n     change is made.\n   </li>\n   <li>\n     When a column is decreased in width, if the total width of all columns\n     is <i>less than</i> the table width, the visible column\n     immediately to the right of the column which decreased in width has its\n     width increased to fill the remaining space.\n   </li>\n </ol>\n<p>A resize model may be loaded to provide more guidance on how to adjust\n column width upon each of the events: initial appear, window resize, and\n column resize. *** TO BE FILLED IN ***</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.ui.core.ColumnData"
      }
    ]
  },
  "superClass": "qx.ui.table.columnmodel.resizebehavior.Abstract",
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 55,
        "column": 2,
        "index": 1845
      },
      "end": {
        "line": 74,
        "column": 3,
        "index": 2599
      }
    }
  },
  "properties": {
    "newResizeBehaviorColumnData": {
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2896
        },
        "end": {
          "line": 91,
          "column": 5,
          "index": 3027
        }
      },
      "json": {
        "check": "Function",
        "init": "[[ ObjectMethod Function ]]"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * A function to instantiate a resize behavior column data object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A function to instantiate a resize behavior column data object.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "initializeWidthsOnEveryAppear": {
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 3426
        },
        "end": {
          "line": 104,
          "column": 5,
          "index": 3506
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether to reinitialize default widths on each appear event.",
          "     * Typically, one would want to initialize the default widths only upon",
          "     * the first appearance of the table, but the original behavior was to",
          "     * reinitialize it even if the table is hidden and then reshown",
          "     * (e.g. it's in a pageview and the page is switched and then switched",
          "     * back).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to reinitialize default widths on each appear event.\n Typically, one would want to initialize the default widths only upon\n the first appearance of the table, but the original behavior was to\n reinitialize it even if the table is hidden and then reshown\n (e.g. it's in a pageview and the page is switched and then switched\n back).</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "tableColumnModel": {
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3782
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3853
        }
      },
      "json": {
        "check": "qx.ui.table.columnmodel.Resize"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The table column model in use.  Of particular interest is the method",
          "     * <i>getTable</i> which is a reference to the table widget.  This allows",
          "     * access to any other features of the table, for use in calculating widths",
          "     * of columns.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The table column model in use.  Of particular interest is the method\n <i>getTable</i> which is a reference to the table widget.  This allows\n access to any other features of the table, for use in calculating widths\n of columns.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__layout": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 4061
        },
        "end": {
          "line": 124,
          "column": 18,
          "index": 4075
        }
      },
      "appearsIn": []
    },
    "__layoutChildren": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 4081
        },
        "end": {
          "line": 125,
          "column": 26,
          "index": 4103
        }
      },
      "appearsIn": []
    },
    "__resizeColumnData": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 4109
        },
        "end": {
          "line": 126,
          "column": 28,
          "index": 4133
        }
      },
      "appearsIn": []
    },
    "__deferredComputeColumnsFlexWidth": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 4139
        },
        "end": {
          "line": 127,
          "column": 43,
          "index": 4178
        }
      },
      "appearsIn": []
    },
    "__widthsInitialized": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether we have initialized widths on the first appear yet",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether we have initialized widths on the first appear yet</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4267
        },
        "end": {
          "line": 132,
          "column": 30,
          "index": 4293
        }
      },
      "appearsIn": []
    },
    "setWidth": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the width of a column.",
          "     *",
          "     * @param col {Integer} The column whose width is to be set",
          "     *",
          "     * @param width {Integer|String}",
          "     *   The width of the specified column.  The width may be specified as",
          "     *   integer number of pixels (e.g. 100), a string representing percentage",
          "     *   of the inner width of the Table (e.g. \"25%\"), or a string",
          "     *   representing a flex width (e.g. \"1*\").",
          "     *",
          "     * @param flex {Integer?0} Optional flex value of the column",
          "     *",
          "     * @throws {Error}",
          "     *   Error is thrown if the provided column number is out of the range.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} The column whose width is to be set",
            "paramName": "col",
            "description": " The column whose width is to be set",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer|String}\n   The width of the specified column.  The width may be specified as\n   integer number of pixels (e.g. 100), a string representing percentage\n   of the inner width of the Table (e.g. \"25%\"), or a string\n   representing a flex width (e.g. \"1*\").",
            "paramName": "width",
            "description": "\n   The width of the specified column.  The width may be specified as\n   integer number of pixels (e.g. 100), a string representing percentage\n   of the inner width of the Table (e.g. \"25%\"), or a string\n   representing a flex width (e.g. \"1*\").",
            "type": [
              "Integer",
              "String"
            ]
          },
          {
            "name": "@param",
            "body": "flex {Integer?0} Optional flex value of the column",
            "paramName": "flex",
            "description": " Optional flex value of the column",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error}\n   Error is thrown if the provided column number is out of the range.",
            "type": "Error",
            "description": "\n   Error is thrown if the provided column number is out of the range."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4912
        },
        "end": {
          "line": 159,
          "column": 5,
          "index": 5252
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "width",
          "type": [
            "Integer",
            "String"
          ]
        },
        {
          "name": "flex",
          "type": "Integer",
          "optional": true,
          "defaultValue": "0"
        }
      ],
      "appearsIn": []
    },
    "setMinWidth": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the minimum width of a column.",
          "     *",
          "     * @param col {Integer}",
          "     *   The column whose minimum width is to be set",
          "     *",
          "     * @param width {Integer}",
          "     *   The minimum width of the specified column.",
          "     *",
          "     *",
          "     * @throws {Error}",
          "     *   Error is thrown if the provided column number is out of the range.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the minimum width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer}\n   The column whose minimum width is to be set",
            "paramName": "col",
            "description": "\n   The column whose minimum width is to be set",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer}\n   The minimum width of the specified column.",
            "paramName": "width",
            "description": "\n   The minimum width of the specified column.",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error}\n   Error is thrown if the provided column number is out of the range.",
            "type": "Error",
            "description": "\n   Error is thrown if the provided column number is out of the range."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 5607
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 5935
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "width",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "setMaxWidth": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the maximum width of a column.",
          "     *",
          "     * @param col {Integer}",
          "     *   The column whose maximum width is to be set",
          "     *",
          "     * @param width {Integer}",
          "     *   The maximum width of the specified column.",
          "     *",
          "     *",
          "     * @throws {Error}",
          "     *   Error is thrown if the provided column number is out of the range.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the maximum width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer}\n   The column whose maximum width is to be set",
            "paramName": "col",
            "description": "\n   The column whose maximum width is to be set",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer}\n   The maximum width of the specified column.",
            "paramName": "width",
            "description": "\n   The maximum width of the specified column.",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error}\n   Error is thrown if the provided column number is out of the range.",
            "type": "Error",
            "description": "\n   Error is thrown if the provided column number is out of the range."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 6290
        },
        "end": {
          "line": 207,
          "column": 5,
          "index": 6618
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "width",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "set": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set any or all of the width, minimum width, and maximum width of a",
          "     * column in a single call.",
          "     *",
          "     * @param col {Integer}",
          "     *   The column whose attributes are to be changed",
          "     *",
          "     * @param map {Map}",
          "     *   A map containing any or all of the property names \"width\", \"minWidth\",",
          "     *   and \"maxWidth\".  The property values are as described for",
          "     *   {@link #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}",
          "     *   respectively.",
          "     *",
          "     *",
          "     * @throws {Error}",
          "     *   Error is thrown if the provided column number is out of the range.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set any or all of the width, minimum width, and maximum width of a\n column in a single call.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer}\n   The column whose attributes are to be changed",
            "paramName": "col",
            "description": "\n   The column whose attributes are to be changed",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "map {Map}\n   A map containing any or all of the property names \"width\", \"minWidth\",\n   and \"maxWidth\".  The property values are as described for\n   {@link #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n   respectively.",
            "paramName": "map",
            "description": "\n   A map containing any or all of the property names \"width\", \"minWidth\",\n   and \"maxWidth\".  The property values are as described for\n   {@link #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n   respectively.",
            "type": "Map<any, any>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error}\n   Error is thrown if the provided column number is out of the range.",
            "type": "Error",
            "description": "\n   Error is thrown if the provided column number is out of the range."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 226,
          "column": 4,
          "index": 7225
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 7668
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "map",
          "type": "Map<any, any>"
        }
      ],
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MProperty"
      ]
    },
    "onAppear": {
      "jsdoc": {
        "raw": [
          " overloaded"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 248,
          "column": 4,
          "index": 7693
        },
        "end": {
          "line": 262,
          "column": 5,
          "index": 8186
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event"
        },
        {
          "name": "forceRefresh"
        }
      ],
      "overriddenFrom": "qx.ui.table.columnmodel.resizebehavior.Abstract",
      "appearsIn": [
        "qx.ui.table.columnmodel.resizebehavior.Abstract"
      ]
    },
    "onTableWidthChanged": {
      "jsdoc": {
        "raw": [
          " overloaded"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 8211
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 8284
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event"
        }
      ],
      "overriddenFrom": "qx.ui.table.columnmodel.resizebehavior.Abstract",
      "appearsIn": [
        "qx.ui.table.columnmodel.resizebehavior.Abstract"
      ]
    },
    "onVerticalScrollBarChanged": {
      "jsdoc": {
        "raw": [
          " overloaded"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 270,
          "column": 4,
          "index": 8309
        },
        "end": {
          "line": 272,
          "column": 5,
          "index": 8389
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event"
        }
      ],
      "overriddenFrom": "qx.ui.table.columnmodel.resizebehavior.Abstract",
      "appearsIn": [
        "qx.ui.table.columnmodel.resizebehavior.Abstract"
      ]
    },
    "onColumnWidthChanged": {
      "jsdoc": {
        "raw": [
          " overloaded"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 275,
          "column": 4,
          "index": 8414
        },
        "end": {
          "line": 278,
          "column": 5,
          "index": 8538
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event"
        }
      ],
      "overriddenFrom": "qx.ui.table.columnmodel.resizebehavior.Abstract",
      "appearsIn": [
        "qx.ui.table.columnmodel.resizebehavior.Abstract"
      ]
    },
    "onVisibilityChanged": {
      "jsdoc": {
        "raw": [
          " overloaded"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 8563
        },
        "end": {
          "line": 293,
          "column": 5,
          "index": 8920
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event"
        }
      ],
      "overriddenFrom": "qx.ui.table.columnmodel.resizebehavior.Abstract",
      "appearsIn": [
        "qx.ui.table.columnmodel.resizebehavior.Abstract"
      ]
    },
    "_setNumColumns": {
      "jsdoc": {
        "raw": [
          " overloaded"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 296,
          "column": 4,
          "index": 8945
        },
        "end": {
          "line": 311,
          "column": 5,
          "index": 9518
        }
      },
      "type": "function",
      "params": [
        {
          "name": "numColumns"
        }
      ],
      "overriddenFrom": "qx.ui.table.columnmodel.resizebehavior.Abstract",
      "appearsIn": [
        "qx.ui.table.columnmodel.resizebehavior.Abstract"
      ]
    },
    "getLayoutChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method is required by the box layout. If returns an array of items",
          "     * to relayout.",
          "     *",
          "     * @return {qx.ui.core.ColumnData[]} The list of column data object to layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is required by the box layout. If returns an array of items\n to relayout.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.ColumnData[]} The list of column data object to layout.",
            "type": "qx.ui.core.ColumnData[]",
            "description": "The list of column data object to layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 319,
          "column": 4,
          "index": 9730
        },
        "end": {
          "line": 321,
          "column": 5,
          "index": 9793
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.ColumnData[]"
      },
      "appearsIn": []
    },
    "_computeColumnsFlexWidth": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Computes the width of all flexible children.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the width of all flexible children.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 327,
          "column": 4,
          "index": 9875
        },
        "end": {
          "line": 366,
          "column": 5,
          "index": 11059
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__clearLayoutCaches": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clear all layout caches of the column datas.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clear all layout caches of the column datas.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 371,
          "column": 4,
          "index": 11134
        },
        "end": {
          "line": 377,
          "column": 5,
          "index": 11364
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_extendNextColumn": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Extend the visible column to right of the column which just changed",
          "     * width, to fill any available space within the inner width of the table.",
          "     * This means that if the sum of the widths of all columns exceeds the",
          "     * inner width of the table, no change is made.  If, on the other hand,",
          "     * the sum of the widths of all columns is less than the inner width of",
          "     * the table, the visible column to the right of the column which just",
          "     * changed width is extended to take up the width available within the",
          "     * inner width of the table.",
          "     *",
          "     *",
          "     * @param event {qx.event.type.Data}",
          "     *   The event object.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Extend the visible column to right of the column which just changed\n width, to fill any available space within the inner width of the table.\n This means that if the sum of the widths of all columns exceeds the\n inner width of the table, no change is made.  If, on the other hand,\n the sum of the widths of all columns is less than the inner width of\n the table, the visible column to the right of the column which just\n changed width is extended to take up the width available within the\n inner width of the table.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Data}\n   The event object.",
            "paramName": "event",
            "description": "\n   The event object.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 394,
          "column": 4,
          "index": 12040
        },
        "end": {
          "line": 442,
          "column": 5,
          "index": 13642
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_extendLastColumn": {
      "jsdoc": {
        "raw": [
          "*",
          "     * If a column was just made invisible, extend the last column to fill any",
          "     * available space within the inner width of the table.  This means that",
          "     * if the sum of the widths of all columns exceeds the inner width of the",
          "     * table, no change is made.  If, on the other hand, the sum of the widths",
          "     * of all columns is less than the inner width of the table, the last",
          "     * column is extended to take up the width available within the inner",
          "     * width of the table.",
          "     *",
          "     *",
          "     * @param event {qx.event.type.Data}",
          "     *   The event object.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If a column was just made invisible, extend the last column to fill any\n available space within the inner width of the table.  This means that\n if the sum of the widths of all columns exceeds the inner width of the\n table, no change is made.  If, on the other hand, the sum of the widths\n of all columns is less than the inner width of the table, the last\n column is extended to take up the width available within the inner\n width of the table.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {qx.event.type.Data}\n   The event object.",
            "paramName": "event",
            "description": "\n   The event object.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 458,
          "column": 4,
          "index": 14242
        },
        "end": {
          "line": 502,
          "column": 5,
          "index": 15631
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_getResizeColumnData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array of the resizing information of a column.",
          "     *",
          "     * @return {qx.ui.core.ColumnData[]} array of the resizing information of a column.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of the resizing information of a column.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.ColumnData[]} array of the resizing information of a column.",
            "type": "qx.ui.core.ColumnData[]",
            "description": "array of the resizing information of a column."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 509,
          "column": 4,
          "index": 15814
        },
        "end": {
          "line": 511,
          "column": 5,
          "index": 15882
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.ColumnData[]"
      },
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 520,
        "column": 2,
        "index": 16078
      },
      "end": {
        "line": 523,
        "column": 3,
        "index": 16229
      }
    }
  },
  "statics": {}
}