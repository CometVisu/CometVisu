{
  "className": "qx.ui.table.pane.Scroller",
  "packageName": "qx.ui.table.pane",
  "name": "Scroller",
  "superClass": "qx.ui.core.Widget",
  "interfaces": [],
  "mixins": [
    "qx.ui.core.scroll.MScrollBarFactory"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0,
        "index": 1434
      },
      "end": {
        "line": 2371,
        "column": 3,
        "index": 70470
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Shows a whole meta column. This includes a {@link Header},\n a {@link Pane} and the needed scroll bars. This class handles the\n virtual scrolling and does all the pointer event handling.</p>"
        }
      ],
      "@childControl": [
        {
          "name": "@childControl",
          "body": "header {qx.ui.table.pane.Header} header pane",
          "controlName": "header",
          "description": "header pane",
          "type": "qx.ui.table.pane.Header"
        },
        {
          "name": "@childControl",
          "body": "pane {qx.ui.table.pane.Pane} table pane to show the data",
          "controlName": "pane",
          "description": "table pane to show the data",
          "type": "qx.ui.table.pane.Pane"
        },
        {
          "name": "@childControl",
          "body": "focus-indicator {qx.ui.table.pane.FocusIndicator} shows the current focused cell",
          "controlName": "focus-indicator",
          "description": "shows the current focused cell",
          "type": "qx.ui.table.pane.FocusIndicator"
        },
        {
          "name": "@childControl",
          "body": "resize-line {qx.ui.core.Widget} resize line widget",
          "controlName": "resize-line",
          "description": "resize line widget",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "@childControl",
          "body": "scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n               horizontal scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)",
          "controlName": "scrollbar-x",
          "description": "horizontal scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)",
          "type": "qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar"
        },
        {
          "name": "@childControl",
          "body": "scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar}\n               vertical scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)",
          "controlName": "scrollbar-y",
          "description": "vertical scrollbar widget (depends on the \"qx.nativeScrollBars\" setting which implementation is used)",
          "type": "qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 47,
        "column": 2,
        "index": 1836
      },
      "end": {
        "line": 139,
        "column": 3,
        "index": 5230
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "table {qx.ui.table.Table} the table the scroller belongs to.",
          "paramName": "table",
          "description": " the table the scroller belongs to.",
          "type": "qx.ui.table.Table"
        }
      ]
    }
  },
  "statics": {
    "MIN_COLUMN_WIDTH": {
      "location": {
        "start": {
          "line": 149,
          "column": 4,
          "index": 5505
        },
        "end": {
          "line": 149,
          "column": 24,
          "index": 5525
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{int} The minimum width a column could get in pixels."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "RESIZE_REGION_RADIUS": {
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 5598
        },
        "end": {
          "line": 152,
          "column": 27,
          "index": 5621
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{int} The radius of the resize region in pixels."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TAP_TOLERANCE": {
      "location": {
        "start": {
          "line": 158,
          "column": 4,
          "index": 5770
        },
        "end": {
          "line": 158,
          "column": 20,
          "index": 5786
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>(int) The number of pixels the pointer may move between pointer down and pointer up\n in order to count as a tap.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "HORIZONTAL_SCROLLBAR": {
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5959
        },
        "end": {
          "line": 166,
          "column": 27,
          "index": 5982
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>(int) The mask for the horizontal scroll bar.\n May be combined with {@link #VERTICAL_SCROLLBAR}.</p>"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#getNeededScrollBars"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "VERTICAL_SCROLLBAR": {
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 6155
        },
        "end": {
          "line": 174,
          "column": 25,
          "index": 6176
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>(int) The mask for the vertical scroll bar.\n May be combined with {@link #HORIZONTAL_SCROLLBAR}.</p>"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#getNeededScrollBars"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "events": {
    "changeScrollY": {
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 6441
        },
        "end": {
          "line": 185,
          "column": 39,
          "index": 6476
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched if the pane is scrolled horizontally</p>"
          }
        ]
      },
      "name": "changeScrollY",
      "type": "qx.event.type.Data"
    },
    "changeScrollX": {
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 6540
        },
        "end": {
          "line": 188,
          "column": 39,
          "index": 6575
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched if the pane is scrolled vertically</p>"
          }
        ]
      },
      "name": "changeScrollX",
      "type": "qx.event.type.Data"
    },
    "cellTap": {
      "location": {
        "start": {
          "line": 191,
          "column": 4,
          "index": 6630
        },
        "end": {
          "line": 191,
          "column": 41,
          "index": 6667
        }
      },
      "jsdoc": {},
      "name": "cellTap",
      "type": "qx.ui.table.pane.CellEvent"
    },
    "cellDbltap": {
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 6727
        },
        "end": {
          "line": 194,
          "column": 44,
          "index": 6767
        }
      },
      "jsdoc": {},
      "name": "cellDbltap",
      "type": "qx.ui.table.pane.CellEvent"
    },
    "cellContextmenu": {
      "location": {
        "start": {
          "line": 197,
          "column": 4,
          "index": 6830
        },
        "end": {
          "line": 197,
          "column": 49,
          "index": 6875
        }
      },
      "jsdoc": {},
      "name": "cellContextmenu",
      "type": "qx.ui.table.pane.CellEvent"
    },
    "beforeSort": {
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 6938
        },
        "end": {
          "line": 200,
          "column": 36,
          "index": 6970
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatched when a sortable header was tapped</p>"
          }
        ]
      },
      "name": "beforeSort",
      "type": "qx.event.type.Data"
    }
  },
  "properties": {
    "horizontalScrollBarVisible": {
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 7425
        },
        "end": {
          "line": 221,
          "column": 5,
          "index": 7622
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to show the horizontal scroll bar. This is a tri-state\n value. <code>true</code> means show the scroll bar; <code>false</code> means exclude it; null\n means hide it so it retains its space but doesn't show a scroll bar.</p>"
          }
        ]
      },
      "name": "horizontalScrollBarVisible",
      "propertyType": "new",
      "event": "changeHorizontalScrollBarVisible",
      "apply": "_applyHorizontalScrollBarVisible",
      "nullable": true,
      "init": false,
      "allowNull": true,
      "check": "Boolean",
      "defaultValue": false
    },
    "verticalScrollBarVisible": {
      "location": {
        "start": {
          "line": 224,
          "column": 4,
          "index": 7680
        },
        "end": {
          "line": 229,
          "column": 5,
          "index": 7849
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to show the vertical scroll bar</p>"
          }
        ]
      },
      "name": "verticalScrollBarVisible",
      "propertyType": "new",
      "event": "changeVerticalScrollBarVisible",
      "apply": "_applyVerticalScrollBarVisible",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "tablePaneModel": {
      "location": {
        "start": {
          "line": 232,
          "column": 4,
          "index": 7889
        },
        "end": {
          "line": 236,
          "column": 5,
          "index": 8024
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The table pane model.</p>"
          }
        ]
      },
      "name": "tablePaneModel",
      "propertyType": "new",
      "event": "changeTablePaneModel",
      "apply": "_applyTablePaneModel",
      "check": "qx.ui.table.pane.Model"
    },
    "liveResize": {
      "location": {
        "start": {
          "line": 242,
          "column": 4,
          "index": 8215
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 8276
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether column resize should be live. If false, during resize only a line is\n shown and the real resize happens when the user releases the pointer button.</p>"
          }
        ]
      },
      "name": "liveResize",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "focusCellOnPointerMove": {
      "location": {
        "start": {
          "line": 251,
          "column": 4,
          "index": 8433
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 8506
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the focus should moved when the pointer is moved over a cell. If false\n the focus is only moved on pointer taps.</p>"
          }
        ]
      },
      "name": "focusCellOnPointerMove",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "selectBeforeFocus": {
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 8869
        },
        "end": {
          "line": 266,
          "column": 5,
          "index": 8937
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to handle selections via the selection manager before setting the\n focus.  The traditional behavior is to handle selections after setting the\n focus, but setting the focus means redrawing portions of the table, and\n some subclasses may want to modify the data to be displayed based on the\n selection.</p>"
          }
        ]
      },
      "name": "selectBeforeFocus",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "showCellFocusIndicator": {
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 9016
        },
        "end": {
          "line": 275,
          "column": 5,
          "index": 9133
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the cell focus indicator should be shown</p>"
          }
        ]
      },
      "name": "showCellFocusIndicator",
      "propertyType": "new",
      "apply": "_applyShowCellFocusIndicator",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "contextMenuFromDataCellsOnly": {
      "location": {
        "start": {
          "line": 286,
          "column": 4,
          "index": 9642
        },
        "end": {
          "line": 289,
          "column": 5,
          "index": 9720
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>By default, the \"cellContextmenu\" event is fired only when a data cell\n is right-clicked. It is not fired when a right-click occurs in the\n empty area of the table below the last data row. By turning on this\n property, \"cellContextMenu\" events will also be generated when a\n right-click occurs in that empty area. In such a case, row identifier\n in the event data will be null, so event handlers can check (row ===\n null) to handle this case.</p>"
          }
        ]
      },
      "name": "contextMenuFromDataCellsOnly",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "resetSelectionOnHeaderTap": {
      "location": {
        "start": {
          "line": 298,
          "column": 4,
          "index": 10108
        },
        "end": {
          "line": 301,
          "column": 5,
          "index": 10183
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to reset the selection when a header cell is tapped. Since\n most data models do not have provisions to retain a selection after\n sorting, the default is to reset the selection in this case. Some data\n models, however, do have the capability to retain the selection, so\n when using those, this property should be set to false.</p>"
          }
        ]
      },
      "name": "resetSelectionOnHeaderTap",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "resetSelectionOnTapBelowRows": {
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 10351
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 10430
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to reset the selection when the unpopulated table area is tapped.\n The default is false which keeps the behaviour as before</p>"
          }
        ]
      },
      "name": "resetSelectionOnTapBelowRows",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "scrollTimeout": {
      "location": {
        "start": {
          "line": 316,
          "column": 4,
          "index": 10563
        },
        "end": {
          "line": 320,
          "column": 5,
          "index": 10661
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Interval time (in milliseconds) for the table update timer.\n Setting this to 0 clears the timer.</p>"
          }
        ]
      },
      "name": "scrollTimeout",
      "propertyType": "new",
      "apply": "_applyScrollTimeout",
      "init": 100,
      "check": "Integer",
      "defaultValue": 100
    },
    "appearance": {
      "location": {
        "start": {
          "line": 322,
          "column": 4,
          "index": 10668
        },
        "end": {
          "line": 325,
          "column": 5,
          "index": 10736
        }
      },
      "name": "appearance",
      "propertyType": "new",
      "refine": true,
      "init": "table-scroller",
      "defaultValue": "table-scroller",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": {
        "qx.ui.core.Widget": "class"
      }
    },
    "minCellEditHeight": {
      "location": {
        "start": {
          "line": 330,
          "column": 4,
          "index": 10841
        },
        "end": {
          "line": 334,
          "column": 5,
          "index": 10930
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If set then defines the minimum height of the focus indicator when editing</p>"
          }
        ]
      },
      "name": "minCellEditHeight",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Integer"
    }
  },
  "members": {
    "__lastRowCount": {
      "location": {
        "start": {
          "line": 344,
          "column": 4,
          "index": 11138
        },
        "end": {
          "line": 344,
          "column": 24,
          "index": 11158
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__table": {
      "location": {
        "start": {
          "line": 345,
          "column": 4,
          "index": 11164
        },
        "end": {
          "line": 345,
          "column": 17,
          "index": 11177
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__updateInterval": {
      "location": {
        "start": {
          "line": 347,
          "column": 4,
          "index": 11184
        },
        "end": {
          "line": 347,
          "column": 26,
          "index": 11206
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__updateContentPlanned": {
      "location": {
        "start": {
          "line": 348,
          "column": 4,
          "index": 11212
        },
        "end": {
          "line": 348,
          "column": 32,
          "index": 11240
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onintervalWrapper": {
      "location": {
        "start": {
          "line": 349,
          "column": 4,
          "index": 11246
        },
        "end": {
          "line": 349,
          "column": 29,
          "index": 11271
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_moveColumn": {
      "location": {
        "start": {
          "line": 351,
          "column": 4,
          "index": 11278
        },
        "end": {
          "line": 351,
          "column": 21,
          "index": 11295
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "__lastMoveColPos": {
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 11301
        },
        "end": {
          "line": 352,
          "column": 26,
          "index": 11323
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_lastMoveTargetX": {
      "location": {
        "start": {
          "line": 353,
          "column": 4,
          "index": 11329
        },
        "end": {
          "line": 353,
          "column": 26,
          "index": 11351
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_lastMoveTargetScroller": {
      "location": {
        "start": {
          "line": 354,
          "column": 4,
          "index": 11357
        },
        "end": {
          "line": 354,
          "column": 33,
          "index": 11386
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "__lastMovePointerPageX": {
      "location": {
        "start": {
          "line": 355,
          "column": 4,
          "index": 11392
        },
        "end": {
          "line": 355,
          "column": 32,
          "index": 11420
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__resizeColumn": {
      "location": {
        "start": {
          "line": 357,
          "column": 4,
          "index": 11427
        },
        "end": {
          "line": 357,
          "column": 24,
          "index": 11447
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastResizePointerPageX": {
      "location": {
        "start": {
          "line": 358,
          "column": 4,
          "index": 11453
        },
        "end": {
          "line": 358,
          "column": 34,
          "index": 11483
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastResizeWidth": {
      "location": {
        "start": {
          "line": 359,
          "column": 4,
          "index": 11489
        },
        "end": {
          "line": 359,
          "column": 27,
          "index": 11512
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastPointerDownCell": {
      "location": {
        "start": {
          "line": 361,
          "column": 4,
          "index": 11519
        },
        "end": {
          "line": 361,
          "column": 31,
          "index": 11546
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__firedTapEvent": {
      "location": {
        "start": {
          "line": 362,
          "column": 4,
          "index": 11552
        },
        "end": {
          "line": 362,
          "column": 26,
          "index": 11574
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__ignoreTap": {
      "location": {
        "start": {
          "line": 363,
          "column": 4,
          "index": 11580
        },
        "end": {
          "line": 363,
          "column": 21,
          "index": 11597
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastPointerPageX": {
      "location": {
        "start": {
          "line": 364,
          "column": 4,
          "index": 11603
        },
        "end": {
          "line": 364,
          "column": 28,
          "index": 11627
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastPointerPageY": {
      "location": {
        "start": {
          "line": 365,
          "column": 4,
          "index": 11633
        },
        "end": {
          "line": 365,
          "column": 28,
          "index": 11657
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusedCol": {
      "location": {
        "start": {
          "line": 367,
          "column": 4,
          "index": 11664
        },
        "end": {
          "line": 367,
          "column": 22,
          "index": 11682
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusedRow": {
      "location": {
        "start": {
          "line": 368,
          "column": 4,
          "index": 11688
        },
        "end": {
          "line": 368,
          "column": 22,
          "index": 11706
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_cellEditor": {
      "location": {
        "start": {
          "line": 370,
          "column": 4,
          "index": 11713
        },
        "end": {
          "line": 370,
          "column": 21,
          "index": 11730
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "__cellEditorFactory": {
      "location": {
        "start": {
          "line": 371,
          "column": 4,
          "index": 11736
        },
        "end": {
          "line": 371,
          "column": 29,
          "index": 11761
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__topRightWidget": {
      "location": {
        "start": {
          "line": 373,
          "column": 4,
          "index": 11768
        },
        "end": {
          "line": 373,
          "column": 26,
          "index": 11790
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__horScrollBar": {
      "location": {
        "start": {
          "line": 374,
          "column": 4,
          "index": 11796
        },
        "end": {
          "line": 374,
          "column": 24,
          "index": 11816
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__verScrollBar": {
      "location": {
        "start": {
          "line": 375,
          "column": 4,
          "index": 11822
        },
        "end": {
          "line": 375,
          "column": 24,
          "index": 11842
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__header": {
      "location": {
        "start": {
          "line": 376,
          "column": 4,
          "index": 11848
        },
        "end": {
          "line": 376,
          "column": 18,
          "index": 11862
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_headerClipper": {
      "location": {
        "start": {
          "line": 377,
          "column": 4,
          "index": 11868
        },
        "end": {
          "line": 377,
          "column": 24,
          "index": 11888
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "__tablePane": {
      "location": {
        "start": {
          "line": 378,
          "column": 4,
          "index": 11894
        },
        "end": {
          "line": 378,
          "column": 21,
          "index": 11911
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_paneClipper": {
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 11917
        },
        "end": {
          "line": 379,
          "column": 22,
          "index": 11935
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "__clipperContainer": {
      "location": {
        "start": {
          "line": 380,
          "column": 4,
          "index": 11941
        },
        "end": {
          "line": 380,
          "column": 28,
          "index": 11965
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusIndicator": {
      "location": {
        "start": {
          "line": 381,
          "column": 4,
          "index": 11971
        },
        "end": {
          "line": 381,
          "column": 26,
          "index": 11993
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__top": {
      "location": {
        "start": {
          "line": 382,
          "column": 4,
          "index": 11999
        },
        "end": {
          "line": 382,
          "column": 15,
          "index": 12010
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__timer": {
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 12017
        },
        "end": {
          "line": 384,
          "column": 17,
          "index": 12030
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__focusIndicatorPointerDownListener": {
      "location": {
        "start": {
          "line": 386,
          "column": 4,
          "index": 12037
        },
        "end": {
          "line": 386,
          "column": 45,
          "index": 12078
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getPaneInsetRight": {
      "location": {
        "start": {
          "line": 394,
          "column": 4,
          "index": 12303
        },
        "end": {
          "line": 411,
          "column": 5,
          "index": 12895
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The right inset of the pane. The right inset is the maximum of the\n top right widget width and the scrollbar width (if visible).</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The right inset of the pane",
            "type": "Integer",
            "description": " The right inset of the pane"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setPaneWidth": {
      "location": {
        "start": {
          "line": 418,
          "column": 4,
          "index": 13000
        },
        "end": {
          "line": 423,
          "column": 5,
          "index": 13153
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the pane's width</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} The pane's width",
            "paramName": "width",
            "description": " The pane's width",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_createChildControlImpl": {
      "location": {
        "start": {
          "line": 426,
          "column": 4,
          "index": 13178
        },
        "end": {
          "line": 499,
          "column": 5,
          "index": 15313
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyHorizontalScrollBarVisible": {
      "location": {
        "start": {
          "line": 502,
          "column": 4,
          "index": 15345
        },
        "end": {
          "line": 508,
          "column": 5,
          "index": 15576
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "horizontalScrollBarVisible"
      ]
    },
    "_applyVerticalScrollBarVisible": {
      "location": {
        "start": {
          "line": 511,
          "column": 4,
          "index": 15608
        },
        "end": {
          "line": 513,
          "column": 5,
          "index": 15731
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "verticalScrollBarVisible"
      ]
    },
    "_applyTablePaneModel": {
      "location": {
        "start": {
          "line": 516,
          "column": 4,
          "index": 15763
        },
        "end": {
          "line": 522,
          "column": 5,
          "index": 15986
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "tablePaneModel"
      ]
    },
    "_applyShowCellFocusIndicator": {
      "location": {
        "start": {
          "line": 525,
          "column": 4,
          "index": 16018
        },
        "end": {
          "line": 534,
          "column": 5,
          "index": 16323
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "showCellFocusIndicator"
      ]
    },
    "getScrollY": {
      "location": {
        "start": {
          "line": 541,
          "column": 4,
          "index": 16467
        },
        "end": {
          "line": 543,
          "column": 5,
          "index": 16535
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the current position of the vertical scroll bar.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The current scroll position.",
            "type": "Integer",
            "description": " The current scroll position."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setScrollY": {
      "location": {
        "start": {
          "line": 552,
          "column": 4,
          "index": 16794
        },
        "end": {
          "line": 557,
          "column": 5,
          "index": 16941
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the current position of the vertical scroll bar.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollY {Integer} The new scroll position.",
            "paramName": "scrollY",
            "description": " The new scroll position.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "renderSync {Boolean?false} Whether the table update should be\n     performed synchronously.",
            "paramName": "renderSync",
            "description": " Whether the table update should be\n     performed synchronously.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScrollX": {
      "location": {
        "start": {
          "line": 564,
          "column": 4,
          "index": 17085
        },
        "end": {
          "line": 566,
          "column": 5,
          "index": 17153
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the current position of the vertical scroll bar.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The current scroll position.",
            "type": "Integer",
            "description": " The current scroll position."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setScrollX": {
      "location": {
        "start": {
          "line": 573,
          "column": 4,
          "index": 17300
        },
        "end": {
          "line": 575,
          "column": 5,
          "index": 17372
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the current position of the vertical scroll bar.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollX {Integer} The new scroll position.",
            "paramName": "scrollX",
            "description": " The new scroll position.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTable": {
      "location": {
        "start": {
          "line": 582,
          "column": 4,
          "index": 17499
        },
        "end": {
          "line": 584,
          "column": 5,
          "index": 17544
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the table this scroller belongs to.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.Table} the table.",
            "type": "qx.ui.table.Table",
            "description": " the table."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_createPaneClipper": {
      "location": {
        "start": {
          "line": 591,
          "column": 4,
          "index": 17686
        },
        "end": {
          "line": 593,
          "column": 5,
          "index": 17759
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and returns an instance of pane clipper.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Clipper} pane clipper.",
            "type": "qx.ui.table.pane.Clipper",
            "description": " pane clipper."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createHeaderClipper": {
      "location": {
        "start": {
          "line": 600,
          "column": 4,
          "index": 17903
        },
        "end": {
          "line": 602,
          "column": 5,
          "index": 17978
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and returns an instance of header clipper.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Clipper} pane clipper.",
            "type": "qx.ui.table.pane.Clipper",
            "description": " pane clipper."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "onColVisibilityChanged": {
      "location": {
        "start": {
          "line": 607,
          "column": 4,
          "index": 18075
        },
        "end": {
          "line": 610,
          "column": 5,
          "index": 18183
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the visibility of a column has changed.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnWidth": {
      "location": {
        "start": {
          "line": 618,
          "column": 4,
          "index": 18352
        },
        "end": {
          "line": 630,
          "column": 5,
          "index": 18722
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column width.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the column to change the width for.",
            "paramName": "col",
            "description": " the column to change the width for.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} the new width.",
            "paramName": "width",
            "description": " the new width.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onColOrderChanged": {
      "location": {
        "start": {
          "line": 636,
          "column": 4,
          "index": 18816
        },
        "end": {
          "line": 641,
          "column": 5,
          "index": 18969
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the column order has changed.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onTableModelDataChanged": {
      "location": {
        "start": {
          "line": 651,
          "column": 4,
          "index": 19394
        },
        "end": {
          "line": 674,
          "column": 5,
          "index": 20106
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the table model has changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "firstRow {Integer} The index of the first row that has changed.",
            "paramName": "firstRow",
            "description": " The index of the first row that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastRow {Integer} The index of the last row that has changed.",
            "paramName": "lastRow",
            "description": " The index of the last row that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "firstColumn {Integer} The model index of the first column that has changed.",
            "paramName": "firstColumn",
            "description": " The model index of the first column that has changed.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastColumn {Integer} The model index of the last column that has changed.",
            "paramName": "lastColumn",
            "description": " The model index of the last column that has changed.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onSelectionChanged": {
      "location": {
        "start": {
          "line": 679,
          "column": 4,
          "index": 20190
        },
        "end": {
          "line": 681,
          "column": 5,
          "index": 20263
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the selection has changed.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onFocusChanged": {
      "location": {
        "start": {
          "line": 686,
          "column": 4,
          "index": 20356
        },
        "end": {
          "line": 688,
          "column": 5,
          "index": 20421
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the table gets or looses the focus.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onTableModelMetaDataChanged": {
      "location": {
        "start": {
          "line": 694,
          "column": 4,
          "index": 20524
        },
        "end": {
          "line": 697,
          "column": 5,
          "index": 20666
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the table model meta data has changed.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onPaneModelChanged": {
      "location": {
        "start": {
          "line": 702,
          "column": 4,
          "index": 20751
        },
        "end": {
          "line": 705,
          "column": 5,
          "index": 20867
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the pane model has changed.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onResizePane": {
      "location": {
        "start": {
          "line": 710,
          "column": 4,
          "index": 20948
        },
        "end": {
          "line": 718,
          "column": 5,
          "index": 21218
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for the pane clipper's resize event</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "updateHorScrollBarMaximum": {
      "location": {
        "start": {
          "line": 724,
          "column": 4,
          "index": 21376
        },
        "end": {
          "line": 747,
          "column": 5,
          "index": 22100
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the maximum of the horizontal scroll bar, so it corresponds to the\n total width of the columns in the table pane.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateVerScrollBarMaximum": {
      "location": {
        "start": {
          "line": 753,
          "column": 4,
          "index": 22239
        },
        "end": {
          "line": 784,
          "column": 5,
          "index": 23198
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the maximum of the vertical scroll bar, so it corresponds to the\n number of rows in the table.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onKeepFirstVisibleRowCompleteChanged": {
      "location": {
        "start": {
          "line": 790,
          "column": 4,
          "index": 23320
        },
        "end": {
          "line": 793,
          "column": 5,
          "index": 23435
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the table property \"keepFirstVisibleRowComplete\"\n changed.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onAppear": {
      "location": {
        "start": {
          "line": 798,
          "column": 4,
          "index": 23511
        },
        "end": {
          "line": 801,
          "column": 5,
          "index": 23646
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the scroller's appear event</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDisappear": {
      "location": {
        "start": {
          "line": 806,
          "column": 4,
          "index": 23714
        },
        "end": {
          "line": 809,
          "column": 5,
          "index": 23823
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the disappear event</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onScrollX": {
      "location": {
        "start": {
          "line": 816,
          "column": 4,
          "index": 23953
        },
        "end": {
          "line": 822,
          "column": 5,
          "index": 24178
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the horizontal scroll bar moved.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__inOnScrollY": {
      "location": {
        "start": {
          "line": 829,
          "column": 4,
          "index": 24306
        },
        "end": {
          "line": 829,
          "column": 24,
          "index": 24326
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the vertical scroll bar moved.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_onScrollY": {
      "location": {
        "start": {
          "line": 830,
          "column": 4,
          "index": 24332
        },
        "end": {
          "line": 854,
          "column": 5,
          "index": 25121
        }
      },
      "type": "function",
      "access": "protected"
    },
    "_onRoll": {
      "location": {
        "start": {
          "line": 861,
          "column": 4,
          "index": 25265
        },
        "end": {
          "line": 908,
          "column": 5,
          "index": 26612
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user moved the mouse wheel.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "qx.event.type.Roll"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__isAtEdge": {
      "location": {
        "start": {
          "line": 916,
          "column": 4,
          "index": 26881
        },
        "end": {
          "line": 922,
          "column": 5,
          "index": 27085
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the table has been scrolled.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "scrollBar {qx.ui.core.scroll.IScrollBar} The scrollbar to check",
            "paramName": "scrollBar",
            "description": " The scrollbar to check",
            "type": "qx.ui.core.scroll.IScrollBar"
          },
          {
            "name": "@param",
            "body": "delta {Number} The scroll delta.",
            "paramName": "delta",
            "description": " The scroll delta.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the scrolling is a the edge",
            "type": "Boolean",
            "description": " <code>true</code>, if the scrolling is a the edge"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__handleResizeColumn": {
      "location": {
        "start": {
          "line": 929,
          "column": 4,
          "index": 27212
        },
        "end": {
          "line": 955,
          "column": 5,
          "index": 28097
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Common column resize logic.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the current pointer x position.",
            "paramName": "pageX",
            "description": " the current pointer x position.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__handleMoveColumn": {
      "location": {
        "start": {
          "line": 963,
          "column": 4,
          "index": 28229
        },
        "end": {
          "line": 999,
          "column": 5,
          "index": 29543
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Common column move logic.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the current pointer x position.",
            "paramName": "pageX",
            "description": " the current pointer x position.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_onPointermoveHeader": {
      "location": {
        "start": {
          "line": 1006,
          "column": 4,
          "index": 29684
        },
        "end": {
          "line": 1051,
          "column": 5,
          "index": 31205
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user moved the pointer over the header.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointermovePane": {
      "location": {
        "start": {
          "line": 1058,
          "column": 4,
          "index": 31344
        },
        "end": {
          "line": 1093,
          "column": 5,
          "index": 32532
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user moved the pointer over the pane.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerdownHeader": {
      "location": {
        "start": {
          "line": 1100,
          "column": 4,
          "index": 32680
        },
        "end": {
          "line": 1121,
          "column": 5,
          "index": 33308
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user pressed a pointer button over the header.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_startResizeHeader": {
      "location": {
        "start": {
          "line": 1129,
          "column": 4,
          "index": 33498
        },
        "end": {
          "line": 1137,
          "column": 5,
          "index": 33870
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start a resize session of the header.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "resizeCol {Integer} the column index",
            "paramName": "resizeCol",
            "description": " the column index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "pageX {Integer} x coordinate of the pointer event",
            "paramName": "pageX",
            "description": " x coordinate of the pointer event",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_startMoveHeader": {
      "location": {
        "start": {
          "line": 1145,
          "column": 4,
          "index": 34056
        },
        "end": {
          "line": 1151,
          "column": 5,
          "index": 34320
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start a move session of the header.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "moveCol {Integer} the column index",
            "paramName": "moveCol",
            "description": " the column index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "pageX {Integer} x coordinate of the pointer event",
            "paramName": "pageX",
            "description": " x coordinate of the pointer event",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerdownPane": {
      "location": {
        "start": {
          "line": 1158,
          "column": 4,
          "index": 34466
        },
        "end": {
          "line": 1209,
          "column": 5,
          "index": 36283
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user pressed a pointer button over the pane.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerupFocusIndicator": {
      "location": {
        "start": {
          "line": 1216,
          "column": 4,
          "index": 36434
        },
        "end": {
          "line": 1243,
          "column": 5,
          "index": 37260
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the focus indicator's pointerup event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointer event",
            "paramName": "e",
            "description": " The pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onChangeCaptureHeader": {
      "location": {
        "start": {
          "line": 1252,
          "column": 4,
          "index": 37552
        },
        "end": {
          "line": 1260,
          "column": 5,
          "index": 37747
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the event capturing of the header changed.\n Stops/finishes an active header resize/move session if it lost capturing\n during the session to stay in a stable state.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The data event",
            "paramName": "e",
            "description": " The data event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_stopResizeHeader": {
      "location": {
        "start": {
          "line": 1266,
          "column": 4,
          "index": 37821
        },
        "end": {
          "line": 1284,
          "column": 5,
          "index": 38331
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop a resize session of the header.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_stopMoveHeader": {
      "location": {
        "start": {
          "line": 1290,
          "column": 4,
          "index": 38403
        },
        "end": {
          "line": 1333,
          "column": 5,
          "index": 40007
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop a move session of the header.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerupHeader": {
      "location": {
        "start": {
          "line": 1340,
          "column": 4,
          "index": 40156
        },
        "end": {
          "line": 1355,
          "column": 5,
          "index": 40508
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user released a pointer button over the header.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTapHeader": {
      "location": {
        "start": {
          "line": 1362,
          "column": 4,
          "index": 40655
        },
        "end": {
          "line": 1410,
          "column": 5,
          "index": 41901
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user tapped a pointer button over the header.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTapPane": {
      "location": {
        "start": {
          "line": 1417,
          "column": 4,
          "index": 42046
        },
        "end": {
          "line": 1467,
          "column": 5,
          "index": 43460
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user tapped a pointer button over the pane.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onContextMenu": {
      "location": {
        "start": {
          "line": 1474,
          "column": 4,
          "index": 43612
        },
        "end": {
          "line": 1522,
          "column": 5,
          "index": 45307
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when a context menu is invoked in a cell.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onContextMenuOpen": {
      "location": {
        "start": {
          "line": 1525,
          "column": 4,
          "index": 45332
        },
        "end": {
          "line": 1531,
          "column": 5,
          "index": 45727
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_onDbltapPane": {
      "location": {
        "start": {
          "line": 1538,
          "column": 4,
          "index": 45879
        },
        "end": {
          "line": 1557,
          "column": 5,
          "index": 46397
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the user double tapped a pointer button over the pane.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerout": {
      "location": {
        "start": {
          "line": 1564,
          "column": 4,
          "index": 46517
        },
        "end": {
          "line": 1585,
          "column": 5,
          "index": 47171
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the pointer moved out.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_showResizeLine": {
      "location": {
        "start": {
          "line": 1593,
          "column": 4,
          "index": 47357
        },
        "end": {
          "line": 1604,
          "column": 5,
          "index": 47669
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shows the resize line.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x {Integer} the position where to show the line (in pixels, relative to\n      the left side of the pane).",
            "paramName": "x",
            "description": " the position where to show the line (in pixels, relative to\n      the left side of the pane).",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_hideResizeLine": {
      "location": {
        "start": {
          "line": 1609,
          "column": 4,
          "index": 47722
        },
        "end": {
          "line": 1611,
          "column": 5,
          "index": 47795
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hides the resize line.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "showColumnMoveFeedback": {
      "location": {
        "start": {
          "line": 1619,
          "column": 4,
          "index": 48061
        },
        "end": {
          "line": 1658,
          "column": 5,
          "index": 49256
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shows the feedback shown while a column is moved by the user.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the x position of the pointer in the page (in pixels).",
            "paramName": "pageX",
            "description": " the x position of the pointer in the page (in pixels).",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the visible x position of the column in the whole table.",
            "type": "Integer",
            "description": " the visible x position of the column in the whole table."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hideColumnMoveFeedback": {
      "location": {
        "start": {
          "line": 1663,
          "column": 4,
          "index": 49348
        },
        "end": {
          "line": 1665,
          "column": 5,
          "index": 49410
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hides the feedback shown while a column is moved by the user.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_focusCellAtPagePos": {
      "location": {
        "start": {
          "line": 1675,
          "column": 4,
          "index": 49758
        },
        "end": {
          "line": 1683,
          "column": 5,
          "index": 50057
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the focus to the cell that's located at the page position\n <code>pageX</code>/<code>pageY</code>. If there is no cell at that position,\n nothing happens.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the x position in the page (in pixels).",
            "paramName": "pageX",
            "description": " the x position in the page (in pixels).",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "pageY {Integer} the y position in the page (in pixels).",
            "paramName": "pageY",
            "description": " the y position in the page (in pixels).",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setFocusedCell": {
      "location": {
        "start": {
          "line": 1691,
          "column": 4,
          "index": 50272
        },
        "end": {
          "line": 1700,
          "column": 5,
          "index": 50529
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the currently focused cell.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the focused cell's column.",
            "paramName": "col",
            "description": " the model index of the focused cell's column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "row {Integer} the model index of the focused cell's row.",
            "paramName": "row",
            "description": " the model index of the focused cell's row.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusedColumn": {
      "location": {
        "start": {
          "line": 1707,
          "column": 4,
          "index": 50683
        },
        "end": {
          "line": 1709,
          "column": 5,
          "index": 50741
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the column of currently focused cell.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the focused cell's column.",
            "type": "Integer",
            "description": " the model index of the focused cell's column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFocusedRow": {
      "location": {
        "start": {
          "line": 1716,
          "column": 4,
          "index": 50892
        },
        "end": {
          "line": 1718,
          "column": 5,
          "index": 50947
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the row of currently focused cell.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the focused cell's column.",
            "type": "Integer",
            "description": " the model index of the focused cell's column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollCellVisible": {
      "location": {
        "start": {
          "line": 1726,
          "column": 4,
          "index": 51163
        },
        "end": {
          "line": 1767,
          "column": 5,
          "index": 52426
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls a cell visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column the cell belongs to.",
            "paramName": "col",
            "description": " the model index of the column the cell belongs to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "row {Integer} the model index of the row the cell belongs to.",
            "paramName": "row",
            "description": " the model index of the row the cell belongs to.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isEditing": {
      "location": {
        "start": {
          "line": 1774,
          "column": 4,
          "index": 52566
        },
        "end": {
          "line": 1776,
          "column": 5,
          "index": 52624
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether currently a cell is editing.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} whether currently a cell is editing.",
            "type": "var",
            "description": " whether currently a cell is editing."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "startEditing": {
      "location": {
        "start": {
          "line": 1785,
          "column": 4,
          "index": 52925
        },
        "end": {
          "line": 1880,
          "column": 5,
          "index": 56250
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Starts editing the currently focused cell. Does nothing if already\n editing, if the column is not editable, or if the cell editor for the\n column ascertains that the particular cell is not editable.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether editing was started",
            "type": "Boolean",
            "description": " whether editing was started"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopEditing": {
      "location": {
        "start": {
          "line": 1885,
          "column": 4,
          "index": 56338
        },
        "end": {
          "line": 1893,
          "column": 5,
          "index": 56592
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops editing and writes the editor's value to the model.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "flushEditor": {
      "location": {
        "start": {
          "line": 1901,
          "column": 4,
          "index": 56788
        },
        "end": {
          "line": 1928,
          "column": 5,
          "index": 57534
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Writes the editor's value to the model</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cancel {Boolean ? false} Whether to also cancel\n      editing before firing the 'dateEdited' event.",
            "paramName": "cancel",
            "description": " Whether to also cancel\n      editing before firing the 'dateEdited' event.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cancelEditing": {
      "location": {
        "start": {
          "line": 1933,
          "column": 4,
          "index": 57627
        },
        "end": {
          "line": 1952,
          "column": 5,
          "index": 58289
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops editing without writing the editor's value to the model.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onCellEditorModalWindowClose": {
      "location": {
        "start": {
          "line": 1959,
          "column": 4,
          "index": 58430
        },
        "end": {
          "line": 1961,
          "column": 5,
          "index": 58496
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the modal window of the cell editor closes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Map} the event.",
            "paramName": "e",
            "description": " the event.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getColumnForPageX": {
      "location": {
        "start": {
          "line": 1970,
          "column": 4,
          "index": 58804
        },
        "end": {
          "line": 1987,
          "column": 5,
          "index": 59321
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the model index of the column the pointer is over or null if the pointer\n is not over a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the x position of the pointer in the page (in pixels).",
            "paramName": "pageX",
            "description": " the x position of the pointer in the page (in pixels).",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the column the pointer is over.",
            "type": "Integer",
            "description": " the model index of the column the pointer is over."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getResizeColumnForPageX": {
      "location": {
        "start": {
          "line": 1996,
          "column": 4,
          "index": 59645
        },
        "end": {
          "line": 2019,
          "column": 5,
          "index": 60450
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the model index of the column that should be resized when dragging\n starts here. Returns -1 if the pointer is in no resize region of any column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the x position of the pointer in the page (in pixels).",
            "paramName": "pageX",
            "description": " the x position of the pointer in the page (in pixels).",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the column index.",
            "type": "Integer",
            "description": " the column index."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getRowForPagePos": {
      "location": {
        "start": {
          "line": 2030,
          "column": 4,
          "index": 60880
        },
        "end": {
          "line": 2070,
          "column": 5,
          "index": 62094
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the model index of the row the pointer is currently over. Returns -1 if\n the pointer is over the header. Returns null if the pointer is not over any\n column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pageX {Integer} the pointer x position in the page.",
            "paramName": "pageX",
            "description": " the pointer x position in the page.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "pageY {Integer} the pointer y position in the page.",
            "paramName": "pageY",
            "description": " the pointer y position in the page.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the row the pointer is currently over.",
            "type": "Integer",
            "description": " the model index of the row the pointer is currently over."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setTopRightWidget": {
      "location": {
        "start": {
          "line": 2080,
          "column": 4,
          "index": 62391
        },
        "end": {
          "line": 2092,
          "column": 5,
          "index": 62655
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the widget that should be shown in the top right corner.\n The widget will not be disposed, when this table scroller is disposed. So the\n caller has to dispose it.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to set. May be null.",
            "paramName": "widget",
            "description": " The widget to set. May be null.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTopRightWidget": {
      "location": {
        "start": {
          "line": 2099,
          "column": 4,
          "index": 62774
        },
        "end": {
          "line": 2101,
          "column": 5,
          "index": 62837
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the top right widget</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The top right widget.",
            "type": "qx.ui.core.Widget",
            "description": " The top right widget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getHeader": {
      "location": {
        "start": {
          "line": 2108,
          "column": 4,
          "index": 62947
        },
        "end": {
          "line": 2110,
          "column": 5,
          "index": 62994
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the header.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Header} the header.",
            "type": "qx.ui.table.pane.Header",
            "description": " the header."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTablePane": {
      "location": {
        "start": {
          "line": 2117,
          "column": 4,
          "index": 63110
        },
        "end": {
          "line": 2119,
          "column": 5,
          "index": 63163
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the table pane.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Pane} the table pane.",
            "type": "qx.ui.table.pane.Pane",
            "description": " the table pane."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getVerticalScrollBarWidth": {
      "location": {
        "start": {
          "line": 2128,
          "column": 4,
          "index": 63424
        },
        "end": {
          "line": 2131,
          "column": 5,
          "index": 63579
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the rendered width of the vertical scroll bar. The return value is\n <code>0</code> if the scroll bar is invisible or not yet rendered.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The width of the vertical scroll bar",
            "type": "Integer",
            "description": " The width of the vertical scroll bar"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getNeededScrollBars": {
      "location": {
        "start": {
          "line": 2144,
          "column": 4,
          "index": 64056
        },
        "end": {
          "line": 2203,
          "column": 5,
          "index": 65961
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns which scrollbars are needed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "forceHorizontal {Boolean ? false} Whether to show the horizontal\n      scrollbar always.",
            "paramName": "forceHorizontal",
            "description": " Whether to show the horizontal\n      scrollbar always.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "preventVertical {Boolean ? false} Whether to show the vertical scrollbar\n      never.",
            "paramName": "preventVertical",
            "description": " Whether to show the vertical scrollbar\n      never.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} which scrollbars are needed. This may be any combination of\n      {@link #HORIZONTAL_SCROLLBAR} or {@link #VERTICAL_SCROLLBAR}\n      (combined by OR).",
            "type": "Integer",
            "description": " which scrollbars are needed. This may be any combination of\n      {@link #HORIZONTAL_SCROLLBAR} or {@link #VERTICAL_SCROLLBAR}\n      (combined by OR)."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPaneClipper": {
      "location": {
        "start": {
          "line": 2212,
          "column": 4,
          "index": 66204
        },
        "end": {
          "line": 2214,
          "column": 5,
          "index": 66260
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the pane clipper. It is sometimes required for special activities\n such as tracking events for drag&amp;drop.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Clipper}\n   The pane clipper for this scroller.",
            "type": "qx.ui.table.pane.Clipper",
            "description": "\n   The pane clipper for this scroller."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScrollAreaContainer": {
      "location": {
        "start": {
          "line": 2224,
          "column": 4,
          "index": 66575
        },
        "end": {
          "line": 2226,
          "column": 5,
          "index": 66643
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the scroll area container widget (which enables more precise\n operations e.g. bounds retrieval for drag session scrolling).</p>"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "qx.ui.core.MDragDropScrolling#_getBounds"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.pane.Clipper}\n   The pane clipper for this scroller.",
            "type": "qx.ui.table.pane.Clipper",
            "description": "\n   The pane clipper for this scroller."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyScrollTimeout": {
      "location": {
        "start": {
          "line": 2229,
          "column": 4,
          "index": 66679
        },
        "end": {
          "line": 2231,
          "column": 5,
          "index": 66752
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "scrollTimeout"
      ]
    },
    "_startInterval": {
      "location": {
        "start": {
          "line": 2238,
          "column": 4,
          "index": 66895
        },
        "end": {
          "line": 2241,
          "column": 5,
          "index": 66995
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Starts the current running interval</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "timeout {Integer} The timeout between two table updates",
            "paramName": "timeout",
            "description": " The timeout between two table updates",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_stopInterval": {
      "location": {
        "start": {
          "line": 2246,
          "column": 4,
          "index": 67060
        },
        "end": {
          "line": 2248,
          "column": 5,
          "index": 67110
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>stops the current running interval</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_postponedUpdateContent": {
      "location": {
        "start": {
          "line": 2255,
          "column": 4,
          "index": 67215
        },
        "end": {
          "line": 2258,
          "column": 5,
          "index": 67321
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does a postponed update of the content.</p>"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#_updateContent"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_oninterval": {
      "location": {
        "start": {
          "line": 2267,
          "column": 4,
          "index": 67552
        },
        "end": {
          "line": 2272,
          "column": 6,
          "index": 67781
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Timer event handler. Periodically checks whether a table update is\n required. The update interval is controlled by the {@link #scrollTimeout}\n property.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_updateContent": {
      "location": {
        "start": {
          "line": 2278,
          "column": 4,
          "index": 67913
        },
        "end": {
          "line": 2320,
          "column": 5,
          "index": 69286
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the content. Sets the right section the table pane should show and\n does the scrolling.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_updateFocusIndicator": {
      "location": {
        "start": {
          "line": 2327,
          "column": 4,
          "index": 69452
        },
        "end": {
          "line": 2339,
          "column": 5,
          "index": 69703
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the location and the visibility of the focus indicator.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "editing {Boolean ? false} True if editing the cell",
            "paramName": "editing",
            "description": " True if editing the cell",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createScrollBar": {
      "type": "function",
      "name": "_createScrollBar",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.ui.core.scroll.MScrollBarFactory",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new scrollbar. This can either be a styled qooxdoo scrollbar\n or a native browser scrollbar.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "orientation {String?\"horizontal\"} The initial scroll bar orientation",
            "paramName": "orientation",
            "description": " The initial scroll bar orientation",
            "optional": true,
            "defaultValue": "\"horizontal\"",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.scroll.IScrollBar} The scrollbar instance",
            "type": "qx.ui.core.scroll.IScrollBar",
            "description": " The scrollbar instance"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getMinWidth": {
      "type": "function",
      "name": "getMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>minWidth</code>.\n\nFor further details take a look at the property definition: {@link #minWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for minWidth"
          }
        ]
      }
    },
    "setMinWidth": {
      "type": "function",
      "name": "setMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>minWidth</code>.\n\nFor further details take a look at the property definition: {@link #minWidth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for minWidth"
          }
        ]
      }
    },
    "resetMinWidth": {
      "type": "function",
      "name": "resetMinWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>minWidth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #minWidth}."
          }
        ]
      }
    },
    "getWidth": {
      "type": "function",
      "name": "getWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>width</code>.\n\nFor further details take a look at the property definition: {@link #width}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for width"
          }
        ]
      }
    },
    "setWidth": {
      "type": "function",
      "name": "setWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>width</code>.\n\nFor further details take a look at the property definition: {@link #width}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for width"
          }
        ]
      }
    },
    "resetWidth": {
      "type": "function",
      "name": "resetWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>width</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #width}."
          }
        ]
      }
    },
    "getMaxWidth": {
      "type": "function",
      "name": "getMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxWidth</code>.\n\nFor further details take a look at the property definition: {@link #maxWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for maxWidth"
          }
        ]
      }
    },
    "setMaxWidth": {
      "type": "function",
      "name": "setMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxWidth</code>.\n\nFor further details take a look at the property definition: {@link #maxWidth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for maxWidth"
          }
        ]
      }
    },
    "resetMaxWidth": {
      "type": "function",
      "name": "resetMaxWidth",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>maxWidth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #maxWidth}."
          }
        ]
      }
    },
    "getMinHeight": {
      "type": "function",
      "name": "getMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>minHeight</code>.\n\nFor further details take a look at the property definition: {@link #minHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for minHeight"
          }
        ]
      }
    },
    "setMinHeight": {
      "type": "function",
      "name": "setMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>minHeight</code>.\n\nFor further details take a look at the property definition: {@link #minHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for minHeight"
          }
        ]
      }
    },
    "resetMinHeight": {
      "type": "function",
      "name": "resetMinHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>minHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #minHeight}."
          }
        ]
      }
    },
    "getHeight": {
      "type": "function",
      "name": "getHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>height</code>.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for height"
          }
        ]
      }
    },
    "setHeight": {
      "type": "function",
      "name": "setHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>height</code>.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for height"
          }
        ]
      }
    },
    "resetHeight": {
      "type": "function",
      "name": "resetHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>height</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #height}."
          }
        ]
      }
    },
    "getMaxHeight": {
      "type": "function",
      "name": "getMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxHeight</code>.\n\nFor further details take a look at the property definition: {@link #maxHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for maxHeight"
          }
        ]
      }
    },
    "setMaxHeight": {
      "type": "function",
      "name": "setMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxHeight</code>.\n\nFor further details take a look at the property definition: {@link #maxHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for maxHeight"
          }
        ]
      }
    },
    "resetMaxHeight": {
      "type": "function",
      "name": "resetMaxHeight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>maxHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #maxHeight}."
          }
        ]
      }
    },
    "getAllowGrowX": {
      "type": "function",
      "name": "getAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowX"
          }
        ]
      }
    },
    "isAllowGrowX": {
      "type": "function",
      "name": "isAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowX"
          }
        ]
      }
    },
    "setAllowGrowX": {
      "type": "function",
      "name": "setAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowGrowX</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowGrowX"
          }
        ]
      }
    },
    "resetAllowGrowX": {
      "type": "function",
      "name": "resetAllowGrowX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowGrowX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowGrowX}."
          }
        ]
      }
    },
    "getAllowShrinkX": {
      "type": "function",
      "name": "getAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkX"
          }
        ]
      }
    },
    "isAllowShrinkX": {
      "type": "function",
      "name": "isAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkX"
          }
        ]
      }
    },
    "setAllowShrinkX": {
      "type": "function",
      "name": "setAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowShrinkX</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowShrinkX"
          }
        ]
      }
    },
    "resetAllowShrinkX": {
      "type": "function",
      "name": "resetAllowShrinkX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowShrinkX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowShrinkX}."
          }
        ]
      }
    },
    "getAllowGrowY": {
      "type": "function",
      "name": "getAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowY"
          }
        ]
      }
    },
    "isAllowGrowY": {
      "type": "function",
      "name": "isAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowY"
          }
        ]
      }
    },
    "setAllowGrowY": {
      "type": "function",
      "name": "setAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowGrowY</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowGrowY"
          }
        ]
      }
    },
    "resetAllowGrowY": {
      "type": "function",
      "name": "resetAllowGrowY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowGrowY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowGrowY}."
          }
        ]
      }
    },
    "getAllowShrinkY": {
      "type": "function",
      "name": "getAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkY"
          }
        ]
      }
    },
    "isAllowShrinkY": {
      "type": "function",
      "name": "isAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowShrinkY"
          }
        ]
      }
    },
    "setAllowShrinkY": {
      "type": "function",
      "name": "setAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowShrinkY</code>.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowShrinkY"
          }
        ]
      }
    },
    "resetAllowShrinkY": {
      "type": "function",
      "name": "resetAllowShrinkY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowShrinkY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowShrinkY}."
          }
        ]
      }
    },
    "setAllowStretchX": {
      "type": "function",
      "name": "setAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowStretchX</code>.\n\nFor further details take a look at the property definition: {@link #allowStretchX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for allowStretchX"
          }
        ]
      }
    },
    "resetAllowStretchX": {
      "type": "function",
      "name": "resetAllowStretchX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowStretchX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowStretchX}."
          }
        ]
      }
    },
    "setAllowStretchY": {
      "type": "function",
      "name": "setAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowStretchY</code>.\n\nFor further details take a look at the property definition: {@link #allowStretchY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for allowStretchY"
          }
        ]
      }
    },
    "resetAllowStretchY": {
      "type": "function",
      "name": "resetAllowStretchY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowStretchY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowStretchY}."
          }
        ]
      }
    },
    "getMarginTop": {
      "type": "function",
      "name": "getMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginTop</code>.\n\nFor further details take a look at the property definition: {@link #marginTop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginTop"
          }
        ]
      }
    },
    "setMarginTop": {
      "type": "function",
      "name": "setMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginTop</code>.\n\nFor further details take a look at the property definition: {@link #marginTop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginTop"
          }
        ]
      }
    },
    "resetMarginTop": {
      "type": "function",
      "name": "resetMarginTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>marginTop</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #marginTop}."
          }
        ]
      }
    },
    "getMarginRight": {
      "type": "function",
      "name": "getMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginRight</code>.\n\nFor further details take a look at the property definition: {@link #marginRight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginRight"
          }
        ]
      }
    },
    "setMarginRight": {
      "type": "function",
      "name": "setMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginRight</code>.\n\nFor further details take a look at the property definition: {@link #marginRight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginRight"
          }
        ]
      }
    },
    "resetMarginRight": {
      "type": "function",
      "name": "resetMarginRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>marginRight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #marginRight}."
          }
        ]
      }
    },
    "getMarginBottom": {
      "type": "function",
      "name": "getMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginBottom</code>.\n\nFor further details take a look at the property definition: {@link #marginBottom}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginBottom"
          }
        ]
      }
    },
    "setMarginBottom": {
      "type": "function",
      "name": "setMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginBottom</code>.\n\nFor further details take a look at the property definition: {@link #marginBottom}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginBottom"
          }
        ]
      }
    },
    "resetMarginBottom": {
      "type": "function",
      "name": "resetMarginBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>marginBottom</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #marginBottom}."
          }
        ]
      }
    },
    "getMarginLeft": {
      "type": "function",
      "name": "getMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>marginLeft</code>.\n\nFor further details take a look at the property definition: {@link #marginLeft}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for marginLeft"
          }
        ]
      }
    },
    "setMarginLeft": {
      "type": "function",
      "name": "setMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>marginLeft</code>.\n\nFor further details take a look at the property definition: {@link #marginLeft}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for marginLeft"
          }
        ]
      }
    },
    "resetMarginLeft": {
      "type": "function",
      "name": "resetMarginLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>marginLeft</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #marginLeft}."
          }
        ]
      }
    },
    "setMargin": {
      "type": "function",
      "name": "setMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>margin</code>.\n\nFor further details take a look at the property definition: {@link #margin}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for margin"
          }
        ]
      }
    },
    "resetMargin": {
      "type": "function",
      "name": "resetMargin",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>margin</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #margin}."
          }
        ]
      }
    },
    "getAlignX": {
      "type": "function",
      "name": "getAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alignX</code>.\n\nFor further details take a look at the property definition: {@link #alignX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for alignX"
          }
        ]
      }
    },
    "setAlignX": {
      "type": "function",
      "name": "setAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>alignX</code>.\n\nFor further details take a look at the property definition: {@link #alignX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for alignX"
          }
        ]
      }
    },
    "resetAlignX": {
      "type": "function",
      "name": "resetAlignX",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>alignX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #alignX}."
          }
        ]
      }
    },
    "getAlignY": {
      "type": "function",
      "name": "getAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>alignY</code>.\n\nFor further details take a look at the property definition: {@link #alignY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for alignY"
          }
        ]
      }
    },
    "setAlignY": {
      "type": "function",
      "name": "setAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>alignY</code>.\n\nFor further details take a look at the property definition: {@link #alignY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for alignY"
          }
        ]
      }
    },
    "resetAlignY": {
      "type": "function",
      "name": "resetAlignY",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>alignY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #alignY}."
          }
        ]
      }
    },
    "getPaddingTop": {
      "type": "function",
      "name": "getPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingTop</code>.\n\nFor further details take a look at the property definition: {@link #paddingTop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingTop"
          }
        ]
      }
    },
    "setPaddingTop": {
      "type": "function",
      "name": "setPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingTop</code>.\n\nFor further details take a look at the property definition: {@link #paddingTop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingTop"
          }
        ]
      }
    },
    "resetPaddingTop": {
      "type": "function",
      "name": "resetPaddingTop",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paddingTop</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paddingTop}."
          }
        ]
      }
    },
    "getPaddingRight": {
      "type": "function",
      "name": "getPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingRight</code>.\n\nFor further details take a look at the property definition: {@link #paddingRight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingRight"
          }
        ]
      }
    },
    "setPaddingRight": {
      "type": "function",
      "name": "setPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingRight</code>.\n\nFor further details take a look at the property definition: {@link #paddingRight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingRight"
          }
        ]
      }
    },
    "resetPaddingRight": {
      "type": "function",
      "name": "resetPaddingRight",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paddingRight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paddingRight}."
          }
        ]
      }
    },
    "getPaddingBottom": {
      "type": "function",
      "name": "getPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingBottom</code>.\n\nFor further details take a look at the property definition: {@link #paddingBottom}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingBottom"
          }
        ]
      }
    },
    "setPaddingBottom": {
      "type": "function",
      "name": "setPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingBottom</code>.\n\nFor further details take a look at the property definition: {@link #paddingBottom}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingBottom"
          }
        ]
      }
    },
    "resetPaddingBottom": {
      "type": "function",
      "name": "resetPaddingBottom",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paddingBottom</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paddingBottom}."
          }
        ]
      }
    },
    "getPaddingLeft": {
      "type": "function",
      "name": "getPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>paddingLeft</code>.\n\nFor further details take a look at the property definition: {@link #paddingLeft}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for paddingLeft"
          }
        ]
      }
    },
    "setPaddingLeft": {
      "type": "function",
      "name": "setPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>paddingLeft</code>.\n\nFor further details take a look at the property definition: {@link #paddingLeft}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for paddingLeft"
          }
        ]
      }
    },
    "resetPaddingLeft": {
      "type": "function",
      "name": "resetPaddingLeft",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>paddingLeft</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #paddingLeft}."
          }
        ]
      }
    },
    "setPadding": {
      "type": "function",
      "name": "setPadding",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>padding</code>.\n\nFor further details take a look at the property definition: {@link #padding}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for padding"
          }
        ]
      }
    },
    "resetPadding": {
      "type": "function",
      "name": "resetPadding",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>padding</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #padding}."
          }
        ]
      }
    },
    "getZIndex": {
      "type": "function",
      "name": "getZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>zIndex</code>.\n\nFor further details take a look at the property definition: {@link #zIndex}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for zIndex"
          }
        ]
      }
    },
    "setZIndex": {
      "type": "function",
      "name": "setZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>zIndex</code>.\n\nFor further details take a look at the property definition: {@link #zIndex}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for zIndex"
          }
        ]
      }
    },
    "resetZIndex": {
      "type": "function",
      "name": "resetZIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>zIndex</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #zIndex}."
          }
        ]
      }
    },
    "getDecorator": {
      "type": "function",
      "name": "getDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>decorator</code>.\n\nFor further details take a look at the property definition: {@link #decorator}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Decorator",
            "desc": "Returns the value for decorator"
          }
        ]
      }
    },
    "setDecorator": {
      "type": "function",
      "name": "setDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>decorator</code>.\n\nFor further details take a look at the property definition: {@link #decorator}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Decorator",
            "paramName": "value",
            "desc": "Value for decorator"
          }
        ]
      }
    },
    "resetDecorator": {
      "type": "function",
      "name": "resetDecorator",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>decorator</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #decorator}."
          }
        ]
      }
    },
    "getBackgroundColor": {
      "type": "function",
      "name": "getBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>backgroundColor</code>.\n\nFor further details take a look at the property definition: {@link #backgroundColor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for backgroundColor"
          }
        ]
      }
    },
    "setBackgroundColor": {
      "type": "function",
      "name": "setBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>backgroundColor</code>.\n\nFor further details take a look at the property definition: {@link #backgroundColor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for backgroundColor"
          }
        ]
      }
    },
    "resetBackgroundColor": {
      "type": "function",
      "name": "resetBackgroundColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>backgroundColor</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #backgroundColor}."
          }
        ]
      }
    },
    "getTextColor": {
      "type": "function",
      "name": "getTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>textColor</code>.\n\nFor further details take a look at the property definition: {@link #textColor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Color",
            "desc": "Returns the value for textColor"
          }
        ]
      }
    },
    "setTextColor": {
      "type": "function",
      "name": "setTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>textColor</code>.\n\nFor further details take a look at the property definition: {@link #textColor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Color",
            "paramName": "value",
            "desc": "Value for textColor"
          }
        ]
      }
    },
    "resetTextColor": {
      "type": "function",
      "name": "resetTextColor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>textColor</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #textColor}."
          }
        ]
      }
    },
    "getFont": {
      "type": "function",
      "name": "getFont",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>font</code>.\n\nFor further details take a look at the property definition: {@link #font}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Font",
            "desc": "Returns the value for font"
          }
        ]
      }
    },
    "setFont": {
      "type": "function",
      "name": "setFont",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>font</code>.\n\nFor further details take a look at the property definition: {@link #font}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Font",
            "paramName": "value",
            "desc": "Value for font"
          }
        ]
      }
    },
    "resetFont": {
      "type": "function",
      "name": "resetFont",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>font</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #font}."
          }
        ]
      }
    },
    "getOpacity": {
      "type": "function",
      "name": "getOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>opacity</code>.\n\nFor further details take a look at the property definition: {@link #opacity}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for opacity"
          }
        ]
      }
    },
    "setOpacity": {
      "type": "function",
      "name": "setOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>opacity</code>.\n\nFor further details take a look at the property definition: {@link #opacity}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for opacity"
          }
        ]
      }
    },
    "resetOpacity": {
      "type": "function",
      "name": "resetOpacity",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>opacity</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #opacity}."
          }
        ]
      }
    },
    "getCursor": {
      "type": "function",
      "name": "getCursor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>cursor</code>.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for cursor"
          }
        ]
      }
    },
    "setCursor": {
      "type": "function",
      "name": "setCursor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>cursor</code>.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for cursor"
          }
        ]
      }
    },
    "resetCursor": {
      "type": "function",
      "name": "resetCursor",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>cursor</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ]
      }
    },
    "getToolTip": {
      "type": "function",
      "name": "getToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTip</code>.\n\nFor further details take a look at the property definition: {@link #toolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.tooltip.ToolTip",
            "desc": "Returns the value for toolTip"
          }
        ]
      }
    },
    "setToolTip": {
      "type": "function",
      "name": "setToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTip</code>.\n\nFor further details take a look at the property definition: {@link #toolTip}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.tooltip.ToolTip",
            "paramName": "value",
            "desc": "Value for toolTip"
          }
        ]
      }
    },
    "resetToolTip": {
      "type": "function",
      "name": "resetToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>toolTip</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #toolTip}."
          }
        ]
      }
    },
    "getToolTipText": {
      "type": "function",
      "name": "getToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTipText</code>.\n\nFor further details take a look at the property definition: {@link #toolTipText}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for toolTipText"
          }
        ]
      }
    },
    "setToolTipText": {
      "type": "function",
      "name": "setToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTipText</code>.\n\nFor further details take a look at the property definition: {@link #toolTipText}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for toolTipText"
          }
        ]
      }
    },
    "resetToolTipText": {
      "type": "function",
      "name": "resetToolTipText",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>toolTipText</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #toolTipText}."
          }
        ]
      }
    },
    "getToolTipIcon": {
      "type": "function",
      "name": "getToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>toolTipIcon</code>.\n\nFor further details take a look at the property definition: {@link #toolTipIcon}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for toolTipIcon"
          }
        ]
      }
    },
    "setToolTipIcon": {
      "type": "function",
      "name": "setToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>toolTipIcon</code>.\n\nFor further details take a look at the property definition: {@link #toolTipIcon}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for toolTipIcon"
          }
        ]
      }
    },
    "resetToolTipIcon": {
      "type": "function",
      "name": "resetToolTipIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>toolTipIcon</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #toolTipIcon}."
          }
        ]
      }
    },
    "getBlockToolTip": {
      "type": "function",
      "name": "getBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for blockToolTip"
          }
        ]
      }
    },
    "isBlockToolTip": {
      "type": "function",
      "name": "isBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for blockToolTip"
          }
        ]
      }
    },
    "setBlockToolTip": {
      "type": "function",
      "name": "setBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>blockToolTip</code>.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for blockToolTip"
          }
        ]
      }
    },
    "resetBlockToolTip": {
      "type": "function",
      "name": "resetBlockToolTip",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>blockToolTip</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #blockToolTip}."
          }
        ]
      }
    },
    "getShowToolTipWhenDisabled": {
      "type": "function",
      "name": "getShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "isShowToolTipWhenDisabled": {
      "type": "function",
      "name": "isShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "setShowToolTipWhenDisabled": {
      "type": "function",
      "name": "setShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>showToolTipWhenDisabled</code>.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for showToolTipWhenDisabled"
          }
        ]
      }
    },
    "resetShowToolTipWhenDisabled": {
      "type": "function",
      "name": "resetShowToolTipWhenDisabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>showToolTipWhenDisabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #showToolTipWhenDisabled}."
          }
        ]
      }
    },
    "getVisibility": {
      "type": "function",
      "name": "getVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for visibility"
          }
        ]
      }
    },
    "setVisibility": {
      "type": "function",
      "name": "setVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for visibility"
          }
        ]
      }
    },
    "resetVisibility": {
      "type": "function",
      "name": "resetVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>visibility</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>enabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ]
      }
    },
    "getAnonymous": {
      "type": "function",
      "name": "getAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "isAnonymous": {
      "type": "function",
      "name": "isAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "setAnonymous": {
      "type": "function",
      "name": "setAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for anonymous"
          }
        ]
      }
    },
    "resetAnonymous": {
      "type": "function",
      "name": "resetAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>anonymous</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ]
      }
    },
    "getTabIndex": {
      "type": "function",
      "name": "getTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>tabIndex</code>.\n\nFor further details take a look at the property definition: {@link #tabIndex}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for tabIndex"
          }
        ]
      }
    },
    "setTabIndex": {
      "type": "function",
      "name": "setTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>tabIndex</code>.\n\nFor further details take a look at the property definition: {@link #tabIndex}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for tabIndex"
          }
        ]
      }
    },
    "resetTabIndex": {
      "type": "function",
      "name": "resetTabIndex",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>tabIndex</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #tabIndex}."
          }
        ]
      }
    },
    "getFocusable": {
      "type": "function",
      "name": "getFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusable"
          }
        ]
      }
    },
    "isFocusable": {
      "type": "function",
      "name": "isFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusable"
          }
        ]
      }
    },
    "setFocusable": {
      "type": "function",
      "name": "setFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>focusable</code>.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for focusable"
          }
        ]
      }
    },
    "resetFocusable": {
      "type": "function",
      "name": "resetFocusable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>focusable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #focusable}."
          }
        ]
      }
    },
    "getKeepFocus": {
      "type": "function",
      "name": "getKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepFocus"
          }
        ]
      }
    },
    "isKeepFocus": {
      "type": "function",
      "name": "isKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepFocus"
          }
        ]
      }
    },
    "setKeepFocus": {
      "type": "function",
      "name": "setKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>keepFocus</code>.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for keepFocus"
          }
        ]
      }
    },
    "resetKeepFocus": {
      "type": "function",
      "name": "resetKeepFocus",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>keepFocus</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #keepFocus}."
          }
        ]
      }
    },
    "getKeepActive": {
      "type": "function",
      "name": "getKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepActive"
          }
        ]
      }
    },
    "isKeepActive": {
      "type": "function",
      "name": "isKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for keepActive"
          }
        ]
      }
    },
    "setKeepActive": {
      "type": "function",
      "name": "setKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>keepActive</code>.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for keepActive"
          }
        ]
      }
    },
    "resetKeepActive": {
      "type": "function",
      "name": "resetKeepActive",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>keepActive</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #keepActive}."
          }
        ]
      }
    },
    "getDraggable": {
      "type": "function",
      "name": "getDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for draggable"
          }
        ]
      }
    },
    "isDraggable": {
      "type": "function",
      "name": "isDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for draggable"
          }
        ]
      }
    },
    "setDraggable": {
      "type": "function",
      "name": "setDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>draggable</code>.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for draggable"
          }
        ]
      }
    },
    "resetDraggable": {
      "type": "function",
      "name": "resetDraggable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>draggable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #draggable}."
          }
        ]
      }
    },
    "getDroppable": {
      "type": "function",
      "name": "getDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for droppable"
          }
        ]
      }
    },
    "isDroppable": {
      "type": "function",
      "name": "isDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for droppable"
          }
        ]
      }
    },
    "setDroppable": {
      "type": "function",
      "name": "setDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>droppable</code>.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for droppable"
          }
        ]
      }
    },
    "resetDroppable": {
      "type": "function",
      "name": "resetDroppable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>droppable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #droppable}."
          }
        ]
      }
    },
    "getSelectable": {
      "type": "function",
      "name": "getSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for selectable"
          }
        ]
      }
    },
    "isSelectable": {
      "type": "function",
      "name": "isSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for selectable"
          }
        ]
      }
    },
    "setSelectable": {
      "type": "function",
      "name": "setSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selectable</code>.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for selectable"
          }
        ]
      }
    },
    "resetSelectable": {
      "type": "function",
      "name": "resetSelectable",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>selectable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #selectable}."
          }
        ]
      }
    },
    "getContextMenu": {
      "type": "function",
      "name": "getContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>contextMenu</code>.\n\nFor further details take a look at the property definition: {@link #contextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.menu.Menu",
            "desc": "Returns the value for contextMenu"
          }
        ]
      }
    },
    "setContextMenu": {
      "type": "function",
      "name": "setContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>contextMenu</code>.\n\nFor further details take a look at the property definition: {@link #contextMenu}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.menu.Menu",
            "paramName": "value",
            "desc": "Value for contextMenu"
          }
        ]
      }
    },
    "resetContextMenu": {
      "type": "function",
      "name": "resetContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>contextMenu</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #contextMenu}."
          }
        ]
      }
    },
    "getNativeContextMenu": {
      "type": "function",
      "name": "getNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for nativeContextMenu"
          }
        ]
      }
    },
    "isNativeContextMenu": {
      "type": "function",
      "name": "isNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for nativeContextMenu"
          }
        ]
      }
    },
    "setNativeContextMenu": {
      "type": "function",
      "name": "setNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nativeContextMenu</code>.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for nativeContextMenu"
          }
        ]
      }
    },
    "resetNativeContextMenu": {
      "type": "function",
      "name": "resetNativeContextMenu",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nativeContextMenu</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nativeContextMenu}."
          }
        ]
      }
    },
    "getAppearance": {
      "type": "function",
      "name": "getAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>appearance</code>.\n\nFor further details take a look at the property definition: {@link #appearance}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for appearance"
          }
        ]
      }
    },
    "setAppearance": {
      "type": "function",
      "name": "setAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>appearance</code>.\n\nFor further details take a look at the property definition: {@link #appearance}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for appearance"
          }
        ]
      }
    },
    "resetAppearance": {
      "type": "function",
      "name": "resetAppearance",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.core.Widget",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>appearance</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #appearance}."
          }
        ]
      }
    },
    "getHorizontalScrollBarVisible": {
      "type": "function",
      "name": "getHorizontalScrollBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>horizontalScrollBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #horizontalScrollBarVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for horizontalScrollBarVisible"
          }
        ]
      }
    },
    "isHorizontalScrollBarVisible": {
      "type": "function",
      "name": "isHorizontalScrollBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>horizontalScrollBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #horizontalScrollBarVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for horizontalScrollBarVisible"
          }
        ]
      }
    },
    "setHorizontalScrollBarVisible": {
      "type": "function",
      "name": "setHorizontalScrollBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>horizontalScrollBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #horizontalScrollBarVisible}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for horizontalScrollBarVisible"
          }
        ]
      }
    },
    "resetHorizontalScrollBarVisible": {
      "type": "function",
      "name": "resetHorizontalScrollBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>horizontalScrollBarVisible</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #horizontalScrollBarVisible}."
          }
        ]
      }
    },
    "getVerticalScrollBarVisible": {
      "type": "function",
      "name": "getVerticalScrollBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>verticalScrollBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #verticalScrollBarVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for verticalScrollBarVisible"
          }
        ]
      }
    },
    "isVerticalScrollBarVisible": {
      "type": "function",
      "name": "isVerticalScrollBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>verticalScrollBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #verticalScrollBarVisible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for verticalScrollBarVisible"
          }
        ]
      }
    },
    "setVerticalScrollBarVisible": {
      "type": "function",
      "name": "setVerticalScrollBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>verticalScrollBarVisible</code>.\n\nFor further details take a look at the property definition: {@link #verticalScrollBarVisible}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for verticalScrollBarVisible"
          }
        ]
      }
    },
    "resetVerticalScrollBarVisible": {
      "type": "function",
      "name": "resetVerticalScrollBarVisible",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>verticalScrollBarVisible</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #verticalScrollBarVisible}."
          }
        ]
      }
    },
    "getTablePaneModel": {
      "type": "function",
      "name": "getTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>tablePaneModel</code>.\n\nFor further details take a look at the property definition: {@link #tablePaneModel}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.table.pane.Model",
            "desc": "Returns the value for tablePaneModel"
          }
        ]
      }
    },
    "setTablePaneModel": {
      "type": "function",
      "name": "setTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>tablePaneModel</code>.\n\nFor further details take a look at the property definition: {@link #tablePaneModel}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.table.pane.Model",
            "paramName": "value",
            "desc": "Value for tablePaneModel"
          }
        ]
      }
    },
    "resetTablePaneModel": {
      "type": "function",
      "name": "resetTablePaneModel",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>tablePaneModel</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #tablePaneModel}."
          }
        ]
      }
    },
    "getLiveResize": {
      "type": "function",
      "name": "getLiveResize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>liveResize</code>.\n\nFor further details take a look at the property definition: {@link #liveResize}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for liveResize"
          }
        ]
      }
    },
    "isLiveResize": {
      "type": "function",
      "name": "isLiveResize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>liveResize</code>.\n\nFor further details take a look at the property definition: {@link #liveResize}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for liveResize"
          }
        ]
      }
    },
    "setLiveResize": {
      "type": "function",
      "name": "setLiveResize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>liveResize</code>.\n\nFor further details take a look at the property definition: {@link #liveResize}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for liveResize"
          }
        ]
      }
    },
    "resetLiveResize": {
      "type": "function",
      "name": "resetLiveResize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>liveResize</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #liveResize}."
          }
        ]
      }
    },
    "getFocusCellOnPointerMove": {
      "type": "function",
      "name": "getFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusCellOnPointerMove</code>.\n\nFor further details take a look at the property definition: {@link #focusCellOnPointerMove}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusCellOnPointerMove"
          }
        ]
      }
    },
    "isFocusCellOnPointerMove": {
      "type": "function",
      "name": "isFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focusCellOnPointerMove</code>.\n\nFor further details take a look at the property definition: {@link #focusCellOnPointerMove}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for focusCellOnPointerMove"
          }
        ]
      }
    },
    "setFocusCellOnPointerMove": {
      "type": "function",
      "name": "setFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>focusCellOnPointerMove</code>.\n\nFor further details take a look at the property definition: {@link #focusCellOnPointerMove}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for focusCellOnPointerMove"
          }
        ]
      }
    },
    "resetFocusCellOnPointerMove": {
      "type": "function",
      "name": "resetFocusCellOnPointerMove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>focusCellOnPointerMove</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #focusCellOnPointerMove}."
          }
        ]
      }
    },
    "getSelectBeforeFocus": {
      "type": "function",
      "name": "getSelectBeforeFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectBeforeFocus</code>.\n\nFor further details take a look at the property definition: {@link #selectBeforeFocus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for selectBeforeFocus"
          }
        ]
      }
    },
    "isSelectBeforeFocus": {
      "type": "function",
      "name": "isSelectBeforeFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectBeforeFocus</code>.\n\nFor further details take a look at the property definition: {@link #selectBeforeFocus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for selectBeforeFocus"
          }
        ]
      }
    },
    "setSelectBeforeFocus": {
      "type": "function",
      "name": "setSelectBeforeFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selectBeforeFocus</code>.\n\nFor further details take a look at the property definition: {@link #selectBeforeFocus}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for selectBeforeFocus"
          }
        ]
      }
    },
    "resetSelectBeforeFocus": {
      "type": "function",
      "name": "resetSelectBeforeFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>selectBeforeFocus</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #selectBeforeFocus}."
          }
        ]
      }
    },
    "getShowCellFocusIndicator": {
      "type": "function",
      "name": "getShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showCellFocusIndicator</code>.\n\nFor further details take a look at the property definition: {@link #showCellFocusIndicator}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showCellFocusIndicator"
          }
        ]
      }
    },
    "isShowCellFocusIndicator": {
      "type": "function",
      "name": "isShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>showCellFocusIndicator</code>.\n\nFor further details take a look at the property definition: {@link #showCellFocusIndicator}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for showCellFocusIndicator"
          }
        ]
      }
    },
    "setShowCellFocusIndicator": {
      "type": "function",
      "name": "setShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>showCellFocusIndicator</code>.\n\nFor further details take a look at the property definition: {@link #showCellFocusIndicator}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for showCellFocusIndicator"
          }
        ]
      }
    },
    "resetShowCellFocusIndicator": {
      "type": "function",
      "name": "resetShowCellFocusIndicator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>showCellFocusIndicator</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #showCellFocusIndicator}."
          }
        ]
      }
    },
    "getContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "getContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>contextMenuFromDataCellsOnly</code>.\n\nFor further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for contextMenuFromDataCellsOnly"
          }
        ]
      }
    },
    "isContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "isContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>contextMenuFromDataCellsOnly</code>.\n\nFor further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for contextMenuFromDataCellsOnly"
          }
        ]
      }
    },
    "setContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "setContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>contextMenuFromDataCellsOnly</code>.\n\nFor further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for contextMenuFromDataCellsOnly"
          }
        ]
      }
    },
    "resetContextMenuFromDataCellsOnly": {
      "type": "function",
      "name": "resetContextMenuFromDataCellsOnly",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>contextMenuFromDataCellsOnly</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #contextMenuFromDataCellsOnly}."
          }
        ]
      }
    },
    "getResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "getResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>resetSelectionOnHeaderTap</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for resetSelectionOnHeaderTap"
          }
        ]
      }
    },
    "isResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "isResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>resetSelectionOnHeaderTap</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for resetSelectionOnHeaderTap"
          }
        ]
      }
    },
    "setResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "setResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>resetSelectionOnHeaderTap</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for resetSelectionOnHeaderTap"
          }
        ]
      }
    },
    "resetResetSelectionOnHeaderTap": {
      "type": "function",
      "name": "resetResetSelectionOnHeaderTap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>resetSelectionOnHeaderTap</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnHeaderTap}."
          }
        ]
      }
    },
    "getResetSelectionOnTapBelowRows": {
      "type": "function",
      "name": "getResetSelectionOnTapBelowRows",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>resetSelectionOnTapBelowRows</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnTapBelowRows}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for resetSelectionOnTapBelowRows"
          }
        ]
      }
    },
    "isResetSelectionOnTapBelowRows": {
      "type": "function",
      "name": "isResetSelectionOnTapBelowRows",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>resetSelectionOnTapBelowRows</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnTapBelowRows}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for resetSelectionOnTapBelowRows"
          }
        ]
      }
    },
    "setResetSelectionOnTapBelowRows": {
      "type": "function",
      "name": "setResetSelectionOnTapBelowRows",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>resetSelectionOnTapBelowRows</code>.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnTapBelowRows}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for resetSelectionOnTapBelowRows"
          }
        ]
      }
    },
    "resetResetSelectionOnTapBelowRows": {
      "type": "function",
      "name": "resetResetSelectionOnTapBelowRows",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>resetSelectionOnTapBelowRows</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #resetSelectionOnTapBelowRows}."
          }
        ]
      }
    },
    "getScrollTimeout": {
      "type": "function",
      "name": "getScrollTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scrollTimeout</code>.\n\nFor further details take a look at the property definition: {@link #scrollTimeout}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for scrollTimeout"
          }
        ]
      }
    },
    "setScrollTimeout": {
      "type": "function",
      "name": "setScrollTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>scrollTimeout</code>.\n\nFor further details take a look at the property definition: {@link #scrollTimeout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for scrollTimeout"
          }
        ]
      }
    },
    "resetScrollTimeout": {
      "type": "function",
      "name": "resetScrollTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>scrollTimeout</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #scrollTimeout}."
          }
        ]
      }
    },
    "getMinCellEditHeight": {
      "type": "function",
      "name": "getMinCellEditHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>minCellEditHeight</code>.\n\nFor further details take a look at the property definition: {@link #minCellEditHeight}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for minCellEditHeight"
          }
        ]
      }
    },
    "setMinCellEditHeight": {
      "type": "function",
      "name": "setMinCellEditHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>minCellEditHeight</code>.\n\nFor further details take a look at the property definition: {@link #minCellEditHeight}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for minCellEditHeight"
          }
        ]
      }
    },
    "resetMinCellEditHeight": {
      "type": "function",
      "name": "resetMinCellEditHeight",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>minCellEditHeight</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #minCellEditHeight}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 2348,
        "column": 2,
        "index": 69899
      },
      "end": {
        "line": 2370,
        "column": 3,
        "index": 70466
      }
    },
    "jsdoc": {}
  },
  "descendants": [
    "qx.ui.treevirtual.pane.Scroller"
  ]
}