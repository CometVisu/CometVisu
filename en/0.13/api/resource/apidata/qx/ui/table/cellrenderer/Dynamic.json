{
  "version": 0.3,
  "lastModified": 1726088851141,
  "lastModifiedIso": "2024-09-11T21:07:31.141Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/table/cellrenderer/Dynamic.js",
  "type": "class",
  "location": {
    "start": {
      "line": 27,
      "column": 0,
      "index": 810
    },
    "end": {
      "line": 107,
      "column": 3,
      "index": 3488
    }
  },
  "className": "qx.ui.table.cellrenderer.Dynamic",
  "jsdoc": {
    "raw": [
      "*",
      " * A cell renderer factory which can dynamically exchange the cell renderer",
      " * based on information retrieved at runtime. This is useful when different",
      " * rows in a column should have different cell renderer based on cell content",
      " * or row metadata. A typical example would be a spreadsheet that has different",
      " * kind of data in one column.",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A cell renderer factory which can dynamically exchange the cell renderer\n based on information retrieved at runtime. This is useful when different\n rows in a column should have different cell renderer based on cell content\n or row metadata. A typical example would be a spreadsheet that has different\n kind of data in one column.</p>"
      }
    ]
  },
  "superClass": "qx.ui.table.cellrenderer.Default",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "cellRendererFactoryFunction"
      }
    ],
    "location": {
      "start": {
        "line": 40,
        "column": 2,
        "index": 1248
      },
      "end": {
        "line": 45,
        "column": 3,
        "index": 1422
      }
    }
  },
  "properties": {
    "cellRendererFactoryFunction": {
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 2301
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 2401
        }
      },
      "json": {
        "check": "Function",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Function that returns a cellRenderer instance which will be",
          "     * used for the row that is currently being edited. The function is",
          "     * defined like this:",
          "     *",
          "     * <pre class=\"javascript\">",
          "     * myTable.getTableColumnModel().setCellRenderer(function(cellInfo){",
          "     *   // based on the cellInfo map or other information, return the",
          "     *   // appropriate cell renderer",
          "     *   if (cellInfo.row == 5)",
          "     *     return new qx.ui.table.cellrenderer.Boolean;",
          "     *   else",
          "     *     return new qx.ui.table.cellrenderer.Default;",
          "     * });",
          "     * </pre>",
          "     *",
          "     * the function MUST return at least a qx.ui.table.cellrenderer.Default",
          "     *"
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Function that returns a cellRenderer instance which will be\n used for the row that is currently being edited. The function is\n defined like this:\n </p>\n<pre class=\"javascript\">\n myTable.getTableColumnModel().setCellRenderer(function(cellInfo){\n\n\n   if (cellInfo.row == 5)\n     return new qx.ui.table.cellrenderer.Boolean;\n   else\n     return new qx.ui.table.cellrenderer.Default;\n });\n </pre>\n<p>the function MUST return at least a qx.ui.table.cellrenderer.Default</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "createDataCellHtml": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Overridden; called whenever the cell updates. The cell will call the",
          "     * function stored in the cellRendererFactoryFunction to retrieve the",
          "     * cell renderer which should be used for this particular cell",
          "     *",
          "     * @param cellInfo {Map} A map containing the information about the cell to",
          "     *     create.",
          "     * @param htmlArr {String[]} Target string container. The HTML of the data",
          "     *     cell should be appended to this array.",
          "     * @return {String} Data cell HTML",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Overridden; called whenever the cell updates. The cell will call the\n function stored in the cellRendererFactoryFunction to retrieve the\n cell renderer which should be used for this particular cell</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cellInfo {Map} A map containing the information about the cell to\n     create.",
            "paramName": "cellInfo",
            "description": " A map containing the information about the cell to\n     create.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "htmlArr {String[]} Target string container. The HTML of the data\n     cell should be appended to this array.",
            "paramName": "htmlArr",
            "description": " Target string container. The HTML of the data\n     cell should be appended to this array.",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Data cell HTML",
            "type": "string",
            "description": "Data cell HTML"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 3116
        },
        "end": {
          "line": 105,
          "column": 5,
          "index": 3480
        }
      },
      "type": "function",
      "params": [
        {
          "name": "cellInfo",
          "type": "Map<any, any>"
        },
        {
          "name": "htmlArr",
          "type": "String[]"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "overriddenFrom": "qx.ui.table.cellrenderer.Abstract",
      "appearsIn": [
        "qx.ui.table.cellrenderer.Abstract",
        "qx.ui.table.ICellRenderer"
      ]
    }
  },
  "statics": {}
}