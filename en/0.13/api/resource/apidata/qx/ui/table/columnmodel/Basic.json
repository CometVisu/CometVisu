{
  "version": 0.3,
  "lastModified": 1717235169306,
  "lastModifiedIso": "2024-06-01T09:46:09.306Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/Basic.js",
  "type": "class",
  "location": {
    "start": {
      "line": 25,
      "column": 0,
      "index": 612
    },
    "end": {
      "line": 786,
      "column": 3,
      "index": 24672
    }
  },
  "className": "qx.ui.table.columnmodel.Basic",
  "jsdoc": {
    "raw": [
      "*",
      " * A model that contains all meta data about columns, such as width, renderer,",
      " * visibility and order.",
      " *",
      " * @see qx.ui.table.ITableModel",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A model that contains all meta data about columns, such as width, renderer,\n visibility and order.</p>"
      }
    ],
    "@see": [
      {
        "name": "@see",
        "body": "qx.ui.table.ITableModel"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 28,
        "column": 2,
        "index": 692
      },
      "end": {
        "line": 33,
        "column": 3,
        "index": 791
      }
    }
  },
  "events": {
    "widthChanged": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when the width of a column has changed. The data property of the event is",
          "     * a map having the following attributes:",
          "     * <ul>",
          "     *   <li>col: The model index of the column the width of which has changed.</li>",
          "     *   <li>newWidth: The new width of the column in pixels.</li>",
          "     *   <li>oldWidth: The old width of the column in pixels.</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the width of a column has changed. The data property of the event is\n a map having the following attributes:\n </p>\n<ul>\n   <li>col: The model index of the column the width of which has changed.</li>\n   <li>newWidth: The new width of the column in pixels.</li>\n   <li>oldWidth: The old width of the column in pixels.</li>\n </ul>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1386
        },
        "end": {
          "line": 51,
          "column": 38,
          "index": 1420
        }
      }
    },
    "visibilityChangedPre": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when the visibility of a column has changed. This event is equal to",
          "     * \"visibilityChanged\", but is fired right before.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the visibility of a column has changed. This event is equal to\n \"visibilityChanged\", but is fired right before.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1579
        },
        "end": {
          "line": 57,
          "column": 46,
          "index": 1621
        }
      }
    },
    "visibilityChanged": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when the visibility of a column has changed. The data property of the",
          "     * event is a map having the following attributes:",
          "     * <ul>",
          "     *   <li>col: The model index of the column the visibility of which has changed.</li>",
          "     *   <li>visible: Whether the column is now visible.</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the visibility of a column has changed. The data property of the\n event is a map having the following attributes:\n </p>\n<ul>\n   <li>col: The model index of the column the visibility of which has changed.</li>\n   <li>visible: Whether the column is now visible.</li>\n </ul>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1959
        },
        "end": {
          "line": 67,
          "column": 43,
          "index": 1998
        }
      }
    },
    "orderChanged": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when the column order has changed. The data property of the",
          "     * event is a map having the following attributes:",
          "     * <ul>",
          "     *   <li>col: The model index of the column that was moved.</li>",
          "     *   <li>fromOverXPos: The old overall x position of the column.</li>",
          "     *   <li>toOverXPos: The new overall x position of the column.</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the column order has changed. The data property of the\n event is a map having the following attributes:\n </p>\n<ul>\n   <li>col: The model index of the column that was moved.</li>\n   <li>fromOverXPos: The old overall x position of the column.</li>\n   <li>toOverXPos: The new overall x position of the column.</li>\n </ul>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2389
        },
        "end": {
          "line": 78,
          "column": 38,
          "index": 2423
        }
      }
    },
    "headerCellRendererChanged": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when the cell renderer of a column has changed.",
          "     * The data property of the event is a map having the following attributes:",
          "     * <ul>",
          "     *   <li>col: The model index of the column that was moved.</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the cell renderer of a column has changed.\n The data property of the event is a map having the following attributes:\n </p>\n<ul>\n   <li>col: The model index of the column that was moved.</li>\n </ul>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2681
        },
        "end": {
          "line": 87,
          "column": 51,
          "index": 2728
        }
      }
    }
  },
  "statics": {
    "DEFAULT_WIDTH": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} the default width of a column in pixels. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} the default width of a column in pixels."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 3004
        },
        "end": {
          "line": 98,
          "column": 22,
          "index": 3022
        }
      },
      "appearsIn": []
    },
    "DEFAULT_HEADER_RENDERER": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.table.headerrenderer.Default} the default header cell renderer. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.table.headerrenderer.Default} the default header cell renderer."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 3117
        },
        "end": {
          "line": 101,
          "column": 63,
          "index": 3176
        }
      },
      "appearsIn": []
    },
    "DEFAULT_DATA_RENDERER": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.table.cellrenderer.Default} the default data cell renderer. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.table.cellrenderer.Default} the default data cell renderer."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3267
        },
        "end": {
          "line": 104,
          "column": 59,
          "index": 3322
        }
      },
      "appearsIn": []
    },
    "DEFAULT_EDITOR_FACTORY": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.table.celleditor.TextField} the default editor factory. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.table.celleditor.TextField} the default editor factory."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 3409
        },
        "end": {
          "line": 107,
          "column": 60,
          "index": 3465
        }
      },
      "appearsIn": []
    }
  },
  "members": {
    "__internalChange": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3673
        },
        "end": {
          "line": 117,
          "column": 26,
          "index": 3695
        }
      },
      "appearsIn": []
    },
    "__colToXPosMap": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3701
        },
        "end": {
          "line": 118,
          "column": 24,
          "index": 3721
        }
      },
      "appearsIn": []
    },
    "__visibleColumnArr": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 3727
        },
        "end": {
          "line": 119,
          "column": 28,
          "index": 3751
        }
      },
      "appearsIn": []
    },
    "__overallColumnArr": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3757
        },
        "end": {
          "line": 120,
          "column": 28,
          "index": 3781
        }
      },
      "appearsIn": []
    },
    "__columnDataArr": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3787
        },
        "end": {
          "line": 121,
          "column": 25,
          "index": 3808
        }
      },
      "appearsIn": []
    },
    "__headerRenderer": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3815
        },
        "end": {
          "line": 123,
          "column": 26,
          "index": 3837
        }
      },
      "appearsIn": []
    },
    "__dataRenderer": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3843
        },
        "end": {
          "line": 124,
          "column": 24,
          "index": 3863
        }
      },
      "appearsIn": []
    },
    "__editorFactory": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3869
        },
        "end": {
          "line": 125,
          "column": 25,
          "index": 3890
        }
      },
      "appearsIn": []
    },
    "init": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initializes the column model.",
          "     *",
          "     * @param colCount {Integer}",
          "     *   The number of columns the model should have.",
          "     *",
          "     * @param table {qx.ui.table.Table}",
          "     *   The table to which this column model is attached.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes the column model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "colCount {Integer}\n   The number of columns the model should have.",
            "paramName": "colCount",
            "description": "\n   The number of columns the model should have.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "table {qx.ui.table.Table}\n   The table to which this column model is attached.",
            "paramName": "table",
            "description": "\n   The table to which this column model is attached.",
            "type": "qx.ui.table.Table"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 4150
        },
        "end": {
          "line": 206,
          "column": 5,
          "index": 6630
        }
      },
      "type": "function",
      "params": [
        {
          "name": "colCount",
          "type": "Integer"
        },
        {
          "name": "table",
          "type": "qx.ui.table.Table"
        }
      ],
      "appearsIn": []
    },
    "getVisibleColumns": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the array of visible columns",
          "     *",
          "     * @return {Array} List of all visible columns",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the array of visible columns</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of all visible columns",
            "type": "Array<any>",
            "description": "List of all visible columns"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 213,
          "column": 4,
          "index": 6754
        },
        "end": {
          "line": 215,
          "column": 5,
          "index": 6858
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "setColumnWidth": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the width of a column.",
          "     *",
          "     * @param col {Integer}",
          "     *   The model index of the column.",
          "     *",
          "     * @param width {Integer}",
          "     *   The new width the column should get in pixels.",
          "     *",
          "     * @param isPointerAction {Boolean}",
          "     *   <i>true</i> if the column width is being changed as a result of a",
          "     *   pointer drag in the header; false or undefined otherwise.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer}\n   The model index of the column.",
            "paramName": "col",
            "description": "\n   The model index of the column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer}\n   The new width the column should get in pixels.",
            "paramName": "width",
            "description": "\n   The new width the column should get in pixels.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "isPointerAction {Boolean}\n   <i>true</i> if the column width is being changed as a result of a\n   pointer drag in the header; false or undefined otherwise.",
            "paramName": "isPointerAction",
            "description": "\n   <i>true</i> if the column width is being changed as a result of a\n   pointer drag in the header; false or undefined otherwise.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 231,
          "column": 4,
          "index": 7280
        },
        "end": {
          "line": 255,
          "column": 5,
          "index": 7994
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "width",
          "type": "Integer"
        },
        {
          "name": "isPointerAction",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "getColumnWidth": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the width of a column.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @return {Integer} the width of the column in pixels.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the width of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the width of the column in pixels.",
            "type": "Integer",
            "description": "the width of the column in pixels."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 8181
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 8497
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "setHeaderCellRenderer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the header renderer of a column. Use setHeaderCellRenderers",
          "     * instead of this method if you want to set the header renderer of many",
          "     * columns.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @param renderer {qx.ui.table.IHeaderRenderer} the new header renderer the column",
          "     *      should get.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the header renderer of a column. Use setHeaderCellRenderers\n instead of this method if you want to set the header renderer of many\n columns.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "renderer {qx.ui.table.IHeaderRenderer} the new header renderer the column\n      should get.",
            "paramName": "renderer",
            "description": " the new header renderer the column\n      should get.",
            "type": "qx.ui.table.IHeaderRenderer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 8863
        },
        "end": {
          "line": 308,
          "column": 5,
          "index": 9623
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "renderer",
          "type": "qx.ui.table.IHeaderRenderer"
        }
      ],
      "appearsIn": []
    },
    "setHeaderCellRenderers": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the header renderer of one or more columns. Use this method, in",
          "     * favor of setHeaderCellRenderer, if you want to set the header renderer",
          "     * of many columns. This method fires the \"headerCellRendererChanged\"",
          "     * event only once, after setting all renderers, whereas",
          "     * setHeaderCellRenderer fires it for each changed renderer which can be",
          "     * slow with many columns.",
          "     *",
          "     * @param renderers {Map}",
          "     *   Map, where the keys are column numbers and values are the renderers,",
          "     *   implementing qx.ui.table.IHeaderRenderer, of the the new header",
          "     *   renderers for that column",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the header renderer of one or more columns. Use this method, in\n favor of setHeaderCellRenderer, if you want to set the header renderer\n of many columns. This method fires the \"headerCellRendererChanged\"\n event only once, after setting all renderers, whereas\n setHeaderCellRenderer fires it for each changed renderer which can be\n slow with many columns.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "renderers {Map}\n   Map, where the keys are column numbers and values are the renderers,\n   implementing qx.ui.table.IHeaderRenderer, of the the new header\n   renderers for that column",
            "paramName": "renderers",
            "description": "\n   Map, where the keys are column numbers and values are the renderers,\n   implementing qx.ui.table.IHeaderRenderer, of the the new header\n   renderers for that column",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 323,
          "column": 4,
          "index": 10266
        },
        "end": {
          "line": 344,
          "column": 5,
          "index": 11019
        }
      },
      "type": "function",
      "params": [
        {
          "name": "renderers",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "getHeaderCellRenderer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the header renderer of a column.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @return {qx.ui.table.IHeaderRenderer} the header renderer of the column.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the header renderer of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.IHeaderRenderer} the header renderer of the column.",
            "type": "qx.ui.table.IHeaderRenderer",
            "description": "the header renderer of the column."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 11236
        },
        "end": {
          "line": 362,
          "column": 5,
          "index": 11568
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.table.IHeaderRenderer"
      },
      "appearsIn": []
    },
    "setDataCellRenderer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the data renderer of a column.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @param renderer {qx.ui.table.ICellRenderer} the new data renderer",
          "     *   the column should get.",
          "     * @return {qx.ui.table.ICellRenderer?null} If an old renderer was set and",
          "     *   it was not the default renderer, the old renderer is returned for",
          "     *   pooling or disposing.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the data renderer of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "renderer {qx.ui.table.ICellRenderer} the new data renderer\n   the column should get.",
            "paramName": "renderer",
            "description": " the new data renderer\n   the column should get.",
            "type": "qx.ui.table.ICellRenderer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.ICellRenderer?null} If an old renderer was set and\n   it was not the default renderer, the old renderer is returned for\n   pooling or disposing.",
            "type": "qx.ui.table.ICellRenderer?null",
            "description": "If an old renderer was set and\n   it was not the default renderer, the old renderer is returned for\n   pooling or disposing."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 374,
          "column": 4,
          "index": 11990
        },
        "end": {
          "line": 396,
          "column": 5,
          "index": 12641
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "renderer",
          "type": "qx.ui.table.ICellRenderer"
        }
      ],
      "returnType": {
        "type": "qx.ui.table.ICellRenderer?null"
      },
      "appearsIn": []
    },
    "getDataCellRenderer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the data renderer of a column.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @return {qx.ui.table.ICellRenderer} the data renderer of the column.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the data renderer of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.ICellRenderer} the data renderer of the column.",
            "type": "qx.ui.table.ICellRenderer",
            "description": "the data renderer of the column."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 404,
          "column": 4,
          "index": 12852
        },
        "end": {
          "line": 414,
          "column": 5,
          "index": 13180
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.table.ICellRenderer"
      },
      "appearsIn": []
    },
    "setCellEditorFactory": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the cell editor factory of a column.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @param factory {qx.ui.table.ICellEditorFactory} the new cell editor factory the column should get.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the cell editor factory of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "factory {qx.ui.table.ICellEditorFactory} the new cell editor factory the column should get.",
            "paramName": "factory",
            "description": " the new cell editor factory the column should get.",
            "type": "qx.ui.table.ICellEditorFactory"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 422,
          "column": 4,
          "index": 13424
        },
        "end": {
          "line": 446,
          "column": 5,
          "index": 14121
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "factory",
          "type": "qx.ui.table.ICellEditorFactory"
        }
      ],
      "appearsIn": []
    },
    "getCellEditorFactory": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the cell editor factory of a column.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @return {qx.ui.table.ICellEditorFactory} the cell editor factory of the column.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the cell editor factory of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.table.ICellEditorFactory} the cell editor factory of the column.",
            "type": "qx.ui.table.ICellEditorFactory",
            "description": "the cell editor factory of the column."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 454,
          "column": 4,
          "index": 14349
        },
        "end": {
          "line": 464,
          "column": 5,
          "index": 14679
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.table.ICellEditorFactory"
      },
      "appearsIn": []
    },
    "_getColToXPosMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the map that translates model indexes to x positions.",
          "     *",
          "     * The returned map contains for a model index (int) a map having two",
          "     * properties: overX (the overall x position of the column, int) and",
          "     * visX (the visible x position of the column, int). visX is missing for",
          "     * hidden columns.",
          "     *",
          "     * @return {Map} the \"column to x position\" map.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the map that translates model indexes to x positions.\n The returned map contains for a model index (int) a map having two\n properties: overX (the overall x position of the column, int) and\n visX (the visible x position of the column, int). visX is missing for\n hidden columns.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} the \"column to x position\" map.",
            "type": "Map<any, any>",
            "description": "the \"column to x position\" map."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 476,
          "column": 4,
          "index": 15085
        },
        "end": {
          "line": 492,
          "column": 5,
          "index": 15612
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "getVisibleColumnCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the number of visible columns.",
          "     *",
          "     * @return {Integer} the number of visible columns.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the number of visible columns.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the number of visible columns.",
            "type": "Integer",
            "description": "the number of visible columns."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 499,
          "column": 4,
          "index": 15744
        },
        "end": {
          "line": 503,
          "column": 5,
          "index": 15874
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getVisibleColumnAtX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the model index of a column at a certain visible x position.",
          "     *",
          "     * @param visXPos {Integer} the visible x position of the column.",
          "     * @return {Integer} the model index of the column.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the model index of a column at a certain visible x position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "visXPos {Integer} the visible x position of the column.",
            "paramName": "visXPos",
            "description": " the visible x position of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the column.",
            "type": "Integer",
            "description": "the model index of the column."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 511,
          "column": 4,
          "index": 16106
        },
        "end": {
          "line": 517,
          "column": 5,
          "index": 16315
        }
      },
      "type": "function",
      "params": [
        {
          "name": "visXPos",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getVisibleX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the visible x position of a column.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @return {Integer} the visible x position of the column.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the visible x position of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the visible x position of the column.",
            "type": "Integer",
            "description": "the visible x position of the column."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 525,
          "column": 4,
          "index": 16518
        },
        "end": {
          "line": 531,
          "column": 5,
          "index": 16708
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getOverallColumnCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the overall number of columns (including hidden columns).",
          "     *",
          "     * @return {Integer} the overall number of columns.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the overall number of columns (including hidden columns).</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the overall number of columns.",
            "type": "Integer",
            "description": "the overall number of columns."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 538,
          "column": 4,
          "index": 16867
        },
        "end": {
          "line": 540,
          "column": 5,
          "index": 16943
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getOverallColumnAtX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the model index of a column at a certain overall x position.",
          "     *",
          "     * @param overXPos {Integer} the overall x position of the column.",
          "     * @return {Integer} the model index of the column.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the model index of a column at a certain overall x position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "overXPos {Integer} the overall x position of the column.",
            "paramName": "overXPos",
            "description": " the overall x position of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the model index of the column.",
            "type": "Integer",
            "description": "the model index of the column."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 548,
          "column": 4,
          "index": 17176
        },
        "end": {
          "line": 554,
          "column": 5,
          "index": 17389
        }
      },
      "type": "function",
      "params": [
        {
          "name": "overXPos",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getOverallX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the overall x position of a column.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @return {Integer} the overall x position of the column.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the overall x position of a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the overall x position of the column.",
            "type": "Integer",
            "description": "the overall x position of the column."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 562,
          "column": 4,
          "index": 17592
        },
        "end": {
          "line": 568,
          "column": 5,
          "index": 17783
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "isColumnVisible": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns whether a certain column is visible.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @return {Boolean} whether the column is visible.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether a certain column is visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the column is visible.",
            "type": "boolean",
            "description": "whether the column is visible."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 576,
          "column": 4,
          "index": 17980
        },
        "end": {
          "line": 582,
          "column": 5,
          "index": 18182
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "setColumnVisible": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets whether a certain column is visible.",
          "     *",
          "     * @param col {Integer} the model index of the column.",
          "     * @param visible {Boolean} whether the column should be visible.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets whether a certain column is visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "col {Integer} the model index of the column.",
            "paramName": "col",
            "description": " the model index of the column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "visible {Boolean} whether the column should be visible.",
            "paramName": "visible",
            "description": " whether the column should be visible.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 590,
          "column": 4,
          "index": 18390
        },
        "end": {
          "line": 650,
          "column": 5,
          "index": 20227
        }
      },
      "type": "function",
      "params": [
        {
          "name": "col",
          "type": "Integer"
        },
        {
          "name": "visible",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "moveColumn": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Moves a column.",
          "     *",
          "     * @param fromOverXPos {Integer} the overall x position of the column to move.",
          "     * @param toOverXPos {Integer} the overall x position of where the column should be",
          "     *      moved to.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Moves a column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromOverXPos {Integer} the overall x position of the column to move.",
            "paramName": "fromOverXPos",
            "description": " the overall x position of the column to move.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "toOverXPos {Integer} the overall x position of where the column should be\n      moved to.",
            "paramName": "toOverXPos",
            "description": " the overall x position of where the column should be\n      moved to.",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 659,
          "column": 4,
          "index": 20473
        },
        "end": {
          "line": 693,
          "column": 5,
          "index": 21429
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fromOverXPos",
          "type": "Integer"
        },
        {
          "name": "toOverXPos",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "setColumnsOrder": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reorders all columns to new overall positions. Will fire one \"orderChanged\" event",
          "     * without data afterwards",
          "     *",
          "     * @param newPositions {Integer[]} Array mapping the index of a column in table model to its wanted overall",
          "     *                            position on screen (both zero based). If the table models holds",
          "     *                            col0, col1, col2 and col3 and you give [1,3,2,0], the new column order",
          "     *                            will be col1, col3, col2, col0",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reorders all columns to new overall positions. Will fire one \"orderChanged\" event\n without data afterwards</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newPositions {Integer[]} Array mapping the index of a column in table model to its wanted overall\n                            position on screen (both zero based). If the table models holds\n                            col0, col1, col2 and col3 and you give [1,3,2,0], the new column order\n                            will be col1, col3, col2, col0",
            "paramName": "newPositions",
            "description": " Array mapping the index of a column in table model to its wanted overall\n                            position on screen (both zero based). If the table models holds\n                            col0, col1, col2 and col3 and you give [1,3,2,0], the new column order\n                            will be col1, col3, col2, col0",
            "type": "Integer[]"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 704,
          "column": 4,
          "index": 21959
        },
        "end": {
          "line": 758,
          "column": 5,
          "index": 23983
        }
      },
      "type": "function",
      "params": [
        {
          "name": "newPositions",
          "type": "Integer[]"
        }
      ],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 767,
        "column": 2,
        "index": 24179
      },
      "end": {
        "line": 785,
        "column": 3,
        "index": 24668
      }
    }
  },
  "properties": {}
}