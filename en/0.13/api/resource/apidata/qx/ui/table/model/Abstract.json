{
  "version": 0.3,
  "lastModified": 1722151623651,
  "lastModifiedIso": "2024-07-28T07:27:03.651Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Abstract.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 588
    },
    "end": {
      "line": 334,
      "column": 3,
      "index": 9558
    }
  },
  "className": "qx.ui.table.model.Abstract",
  "jsdoc": {
    "raw": [
      "*",
      " * An abstract table model that performs the column handling, so subclasses only",
      " * need to care for row handling.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>An abstract table model that performs the column handling, so subclasses only\n need to care for row handling.</p>"
      }
    ]
  },
  "isSingleton": false,
  "abstract": true,
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.ui.table.ITableModel"
  ],
  "events": {
    "dataChanged": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when the table data changed (the stuff shown in the table body).",
          "     * The data property of the event will be a map having the following",
          "     * attributes:",
          "     * <ul>",
          "     *   <li>firstRow: The index of the first row that has changed.</li>",
          "     *   <li>lastRow: The index of the last row that has changed.</li>",
          "     *   <li>firstColumn: The model index of the first column that has changed.</li>",
          "     *   <li>lastColumn: The model index of the last column that has changed.</li>",
          "     * </ul>",
          "     *",
          "     * Additionally, if the data changed as a result of rows being removed",
          "     * from the data model, then these additional attributes will be in the",
          "     * data:",
          "     * <ul>",
          "     *   <li>removeStart: The model index of the first row that was removed.</li>",
          "     *   <li>removeCount: The number of rows that were removed.</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the table data changed (the stuff shown in the table body).\n The data property of the event will be a map having the following\n attributes:\n </p>\n<ul>\n   <li>firstRow: The index of the first row that has changed.</li>\n   <li>lastRow: The index of the last row that has changed.</li>\n   <li>firstColumn: The model index of the first column that has changed.</li>\n   <li>lastColumn: The model index of the last column that has changed.</li>\n </ul>\n<p>Additionally, if the data changed as a result of rows being removed\n from the data model, then these additional attributes will be in the\n data:\n </p>\n<ul>\n   <li>removeStart: The model index of the first row that was removed.</li>\n   <li>removeCount: The number of rows that were removed.</li>\n </ul>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1607
        },
        "end": {
          "line": 48,
          "column": 37,
          "index": 1640
        }
      }
    },
    "metaDataChanged": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when the meta data changed (the stuff shown in the table header).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the meta data changed (the stuff shown in the table header).</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1742
        },
        "end": {
          "line": 53,
          "column": 42,
          "index": 1780
        }
      }
    },
    "sorted": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired after the table is sorted (but before the metaDataChanged event)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the table is sorted (but before the metaDataChanged event)</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1881
        },
        "end": {
          "line": 58,
          "column": 32,
          "index": 1909
        }
      }
    }
  },
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 61,
        "column": 2,
        "index": 1918
      },
      "end": {
        "line": 67,
        "column": 3,
        "index": 2041
      }
    }
  },
  "statics": {
    "THROW_ON_MODEL_CHANGE_DURING_EDIT": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Member to control if a table should throw an error when you try to change the",
          "     * data model data whilst there is an incomplete edit. It could possibly break",
          "     * current implementations so only introduce the change from QX v8.",
          "     * Ref: https://github.com/qooxdoo/qooxdoo/pull/10377#discussion_r818697343",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Member to control if a table should throw an error when you try to change the\n data model data whilst there is an incomplete edit. It could possibly break\n current implementations so only introduce the change from QX v8.\n Ref: https://github.com/qooxdoo/qooxdoo/pull/10377#discussion_r818697343</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2397
        },
        "end": {
          "line": 77,
          "column": 62,
          "index": 2494
        }
      },
      "appearsIn": []
    }
  },
  "members": {
    "__columnIdArr": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2518
        },
        "end": {
          "line": 81,
          "column": 23,
          "index": 2537
        }
      },
      "appearsIn": []
    },
    "__columnNameArr": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2543
        },
        "end": {
          "line": 82,
          "column": 25,
          "index": 2564
        }
      },
      "appearsIn": []
    },
    "__columnIndexMap": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2570
        },
        "end": {
          "line": 83,
          "column": 26,
          "index": 2592
        }
      },
      "appearsIn": []
    },
    "__internalChange": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2598
        },
        "end": {
          "line": 84,
          "column": 26,
          "index": 2620
        }
      },
      "appearsIn": []
    },
    "__table": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2626
        },
        "end": {
          "line": 85,
          "column": 17,
          "index": 2639
        }
      },
      "appearsIn": []
    },
    "init": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initialize the table model <--> table interaction. The table model is",
          "     * passed to the table constructor, but the table model doesn't otherwise",
          "     * know anything about the table nor can it operate on table",
          "     * properties. This function provides the capability for the table model",
          "     * to specify characteristics of the table. It is called when the table",
          "     * model is applied to the table.",
          "     *",
          "     * @param table {qx.ui.table.Table}",
          "     *   The table to which this model is attached",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the table model <--> table interaction. The table model is\n passed to the table constructor, but the table model doesn't otherwise\n know anything about the table nor can it operate on table\n properties. This function provides the capability for the table model\n to specify characteristics of the table. It is called when the table\n model is applied to the table.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "table {qx.ui.table.Table}\n   The table to which this model is attached",
            "paramName": "table",
            "description": "\n   The table to which this model is attached",
            "type": "qx.ui.table.Table"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 3171
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 3263
        }
      },
      "type": "function",
      "params": [
        {
          "name": "table",
          "type": "qx.ui.table.Table"
        }
      ],
      "appearsIn": []
    },
    "getTable": {
      "jsdoc": {
        "raw": [
          "*",
          "     *",
          "     *",
          "     * @returns table {qx.ui.table.Table}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "table {qx.ui.table.Table}",
            "type": "qx.ui.table.Table",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 3342
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 3387
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.table.Table"
      },
      "appearsIn": []
    },
    "getRowCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Abstract method",
          "     * @throws {Error} An error if this method is called.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abstract method</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} An error if this method is called.",
            "type": "Error",
            "description": " An error if this method is called."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3491
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3562
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getRowData": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3569
        },
        "end": {
          "line": 122,
          "column": 5,
          "index": 3616
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rowIndex"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "isColumnEditable": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3623
        },
        "end": {
          "line": 126,
          "column": 5,
          "index": 3680
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnIndex"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "isColumnSortable": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3687
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3744
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnIndex"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "sortByColumn": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3751
        },
        "end": {
          "line": 132,
          "column": 43,
          "index": 3790
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnIndex"
        },
        {
          "name": "ascending"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getSortColumnIndex": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 3797
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 3842
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "isSortAscending": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3849
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 3893
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "prefetchRows": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 3900
        },
        "end": {
          "line": 142,
          "column": 48,
          "index": 3944
        }
      },
      "type": "function",
      "params": [
        {
          "name": "firstRowIndex"
        },
        {
          "name": "lastRowIndex"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Abstract method",
          "     *",
          "     * @param columnIndex {Integer} the index of the column",
          "     * @param rowIndex {Integer} the index of the row",
          "     *",
          "     * @throws {Error} An error if this method is called.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abstract method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the index of the column",
            "paramName": "columnIndex",
            "description": " the index of the column",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} the index of the row",
            "paramName": "rowIndex",
            "description": " the index of the row",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} An error if this method is called.",
            "type": "Error",
            "description": " An error if this method is called."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 4176
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 4262
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnIndex",
          "type": "Integer"
        },
        {
          "name": "rowIndex",
          "type": "Integer"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getValueById": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4269
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4382
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnId"
        },
        {
          "name": "rowIndex"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Abstract method",
          "     *",
          "     * @param columnIndex {Integer} index of the column",
          "     * @param rowIndex {Integer} index of the row",
          "     * @param value {var} Value to be set",
          "     *",
          "     * @throws {Error} An error if this method is called.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abstract method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} index of the column",
            "paramName": "columnIndex",
            "description": " index of the column",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} index of the row",
            "paramName": "rowIndex",
            "description": " index of the row",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value {var} Value to be set",
            "paramName": "value",
            "description": " Value to be set",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} An error if this method is called.",
            "type": "Error",
            "description": " An error if this method is called."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 4648
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 4741
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnIndex",
          "type": "Integer"
        },
        {
          "name": "rowIndex",
          "type": "Integer"
        },
        {
          "name": "value",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "setValueById": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 4748
        },
        "end": {
          "line": 175,
          "column": 5,
          "index": 4868
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnId"
        },
        {
          "name": "rowIndex"
        },
        {
          "name": "value"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getColumnCount": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 4893
        },
        "end": {
          "line": 180,
          "column": 5,
          "index": 4957
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getColumnIndexById": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 4982
        },
        "end": {
          "line": 185,
          "column": 5,
          "index": 5064
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnId"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getColumnId": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 5089
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5167
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnIndex"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getColumnName": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 193,
          "column": 4,
          "index": 5192
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 5274
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnIndex"
        }
      ],
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "setColumnIds": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the column IDs. These IDs may be used internally to identify a",
          "     * column.",
          "     *",
          "     * Note: This will clear previously set column names.",
          "     *",
          "     *",
          "     * @param columnIdArr {String[]} the IDs of the columns.",
          "     * @see #setColumns",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column IDs. These IDs may be used internally to identify a\n column.\n Note: This will clear previously set column names.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIdArr {String[]} the IDs of the columns.",
            "paramName": "columnIdArr",
            "description": " the IDs of the columns.",
            "type": "String[]"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setColumns"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 207,
          "column": 4,
          "index": 5551
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 5983
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnIdArr",
          "type": "String[]"
        }
      ],
      "appearsIn": []
    },
    "setColumnNamesByIndex": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the column names. These names will be shown to the user.",
          "     *",
          "     * Note: The column IDs have to be defined before.",
          "     *",
          "     *",
          "     * @param columnNameArr {String[]} the names of the columns.",
          "     * @throws {Error} If the amount of given columns is different from the table.",
          "     * @see #setColumnIds",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column names. These names will be shown to the user.\n Note: The column IDs have to be defined before.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnNameArr {String[]} the names of the columns.",
            "paramName": "columnNameArr",
            "description": " the names of the columns.",
            "type": "String[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the amount of given columns is different from the table.",
            "type": "Error",
            "description": " If the amount of given columns is different from the table."
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setColumnIds"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 6325
        },
        "end": {
          "line": 249,
          "column": 5,
          "index": 6762
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnNameArr",
          "type": "String[]"
        }
      ],
      "appearsIn": []
    },
    "setColumnNamesById": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the column names. These names will be shown to the user.",
          "     *",
          "     * Note: The column IDs have to be defined before.",
          "     *",
          "     *",
          "     * @param columnNameMap {Map} a map containing the column IDs as keys and the",
          "     *          column name as values.",
          "     * @see #setColumnIds",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column names. These names will be shown to the user.\n Note: The column IDs have to be defined before.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnNameMap {Map} a map containing the column IDs as keys and the\n          column name as values.",
            "paramName": "columnNameMap",
            "description": " a map containing the column IDs as keys and the\n          column name as values.",
            "type": "Map<any, any>"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setColumnIds"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 7077
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 7326
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnNameMap",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "setColumns": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the column names (and optionally IDs)",
          "     *",
          "     * Note: You can not change the _number_ of columns this way.  The number",
          "     *       of columns is highly intertwined in the entire table operation,",
          "     *       and dynamically changing it would require as much work as just",
          "     *       recreating your table.  If you must change the number of columns",
          "     *       in a table then you should remove the table and add a new one.",
          "     *",
          "     * @param columnNameArr {String[]}",
          "     *   The column names. These names will be shown to the user.",
          "     *",
          "     * @param columnIdArr {String[] ? null}",
          "     *   The column IDs. These IDs may be used internally to identify a",
          "     *   column. If null, the column names are used as IDs unless ID values",
          "     *   have already been set. If ID values have already been set, they will",
          "     *   continue to be used if no ID values are explicitly provided here.",
          "     *",
          "     * @throws {Error} If the amount of given columns is different from the table.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column names (and optionally IDs)\n Note: You can not change the <em>number</em> of columns this way.  The number\n       of columns is highly intertwined in the entire table operation,\n       and dynamically changing it would require as much work as just\n       recreating your table.  If you must change the number of columns\n       in a table then you should remove the table and add a new one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnNameArr {String[]}\n   The column names. These names will be shown to the user.",
            "paramName": "columnNameArr",
            "description": "\n   The column names. These names will be shown to the user.",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "columnIdArr {String[] ? null}\n   The column IDs. These IDs may be used internally to identify a\n   column. If null, the column names are used as IDs unless ID values\n   have already been set. If ID values have already been set, they will\n   continue to be used if no ID values are explicitly provided here.",
            "paramName": "columnIdArr",
            "description": "\n   The column IDs. These IDs may be used internally to identify a\n   column. If null, the column names are used as IDs unless ID values\n   have already been set. If ID values have already been set, they will\n   continue to be used if no ID values are explicitly provided here.",
            "optional": true,
            "defaultValue": "null",
            "type": "String[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the amount of given columns is different from the table.",
            "type": "Error",
            "description": " If the amount of given columns is different from the table."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 8352
        },
        "end": {
          "line": 317,
          "column": 5,
          "index": 9116
        }
      },
      "type": "function",
      "params": [
        {
          "name": "columnNameArr",
          "type": "String[]"
        },
        {
          "name": "columnIdArr",
          "type": "String[]",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "_checkEditing": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 319,
          "column": 4,
          "index": 9123
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 9451
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 331,
        "column": 2,
        "index": 9460
      },
      "end": {
        "line": 333,
        "column": 3,
        "index": 9554
      }
    }
  },
  "properties": {}
}