{
  "className": "qx.ui.layout.Atom",
  "packageName": "qx.ui.layout",
  "name": "Atom",
  "superClass": "qx.ui.layout.Abstract",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 45,
        "column": 0,
        "index": 1222
      },
      "end": {
        "line": 351,
        "column": 3,
        "index": 9569
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>A atom layout. Used to place an image and label in relation\n to each other. Useful to create buttons, list items, etc.\n<em>Features</em></p>\n<ul>\n<li>Gap between icon and text (using {@link #gap})</li>\n<li>Vertical and horizontal mode (using {@link #iconPosition})</li>\n<li>Sorting options to place first child on top/left or bottom/right (using {@link #iconPosition})</li>\n<li>Automatically middles/centers content to the available space</li>\n<li>Auto-sizing</li>\n<li>Supports more than two children (will be processed the same way like the previous ones)\n<em>Item Properties</em>\nNone\n<em>Notes</em></li>\n<li>Does not support margins and alignment of {@link qx.ui.core.LayoutItem}.\n<em>Alternative Names</em>\nNone</li>\n</ul>"
        }
      ]
    }
  },
  "type": "class",
  "properties": {
    "gap": {
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1551
        },
        "end": {
          "line": 60,
          "column": 5,
          "index": 1636
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The gap between the icon and the text</p>"
          }
        ]
      },
      "name": "gap",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": 4,
      "check": "Integer",
      "defaultValue": 4
    },
    "iconPosition": {
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1703
        },
        "end": {
          "line": 77,
          "column": 5,
          "index": 1956
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The position of the icon in relation to the text</p>"
          }
        ]
      },
      "name": "iconPosition",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": "left",
      "possibleValues": [
        "left",
        "top",
        "right",
        "bottom",
        "top-left",
        "bottom-left",
        "top-right",
        "bottom-right"
      ],
      "defaultValue": "left"
    },
    "center": {
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2528
        },
        "end": {
          "line": 92,
          "column": 5,
          "index": 2620
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the content should be rendered centrally when to much space\n is available. Enabling this property centers in both axis. The behavior\n when disabled of the centering depends on the {@link #iconPosition} property.\n If the icon position is <code>left</code> or <code>right</code>, the X axis\n is not centered, only the Y axis. If the icon position is <code>top</code>\n or <code>bottom</code>, the Y axis is not centered. In case of e.g. an\n icon position of <code>top-left</code> no axis is centered.</p>"
          }
        ]
      },
      "name": "center",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "verifyLayoutProperty": {
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3044
        },
        "end": {
          "line": 118,
          "column": 6,
          "index": 3299
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "public"
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3324
        },
        "end": {
          "line": 263,
          "column": 5,
          "index": 7325
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 266,
          "column": 4,
          "index": 7350
        },
        "end": {
          "line": 349,
          "column": 5,
          "index": 9561
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getGap": {
      "type": "function",
      "name": "getGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>gap</code>.\n\nFor further details take a look at the property definition: {@link #gap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for gap"
          }
        ]
      }
    },
    "setGap": {
      "type": "function",
      "name": "setGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>gap</code>.\n\nFor further details take a look at the property definition: {@link #gap}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for gap"
          }
        ]
      }
    },
    "resetGap": {
      "type": "function",
      "name": "resetGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>gap</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #gap}."
          }
        ]
      }
    },
    "getIconPosition": {
      "type": "function",
      "name": "getIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>iconPosition</code>.\n\nFor further details take a look at the property definition: {@link #iconPosition}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for iconPosition"
          }
        ]
      }
    },
    "setIconPosition": {
      "type": "function",
      "name": "setIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>iconPosition</code>.\n\nFor further details take a look at the property definition: {@link #iconPosition}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for iconPosition"
          }
        ]
      }
    },
    "resetIconPosition": {
      "type": "function",
      "name": "resetIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>iconPosition</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #iconPosition}."
          }
        ]
      }
    },
    "getCenter": {
      "type": "function",
      "name": "getCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>center</code>.\n\nFor further details take a look at the property definition: {@link #center}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for center"
          }
        ]
      }
    },
    "isCenter": {
      "type": "function",
      "name": "isCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>center</code>.\n\nFor further details take a look at the property definition: {@link #center}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for center"
          }
        ]
      }
    },
    "setCenter": {
      "type": "function",
      "name": "setCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>center</code>.\n\nFor further details take a look at the property definition: {@link #center}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for center"
          }
        ]
      }
    },
    "resetCenter": {
      "type": "function",
      "name": "resetCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>center</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #center}."
          }
        ]
      }
    }
  },
  "descendants": []
}