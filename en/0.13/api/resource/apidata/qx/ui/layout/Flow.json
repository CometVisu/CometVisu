{
  "version": 0.3,
  "lastModified": 1726088851313,
  "lastModifiedIso": "2024-09-11T21:07:31.313Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Flow.js",
  "type": "class",
  "location": {
    "start": {
      "line": 99,
      "column": 0,
      "index": 3641
    },
    "end": {
      "line": 369,
      "column": 3,
      "index": 11564
    }
  },
  "className": "qx.ui.layout.Flow",
  "jsdoc": {
    "raw": [
      "*",
      " * A basic layout, which supports positioning of child widgets in a 'flowing'",
      " * manner, starting at the container's top/left position, placing children left to right",
      " * (like a HBox) until the there's no remaining room for the next child. When",
      " * out of room on the current line of elements, a new line is started, cleared",
      " * below the tallest child of the preceding line -- a bit like using 'float'",
      " * in CSS, except that a new line wraps all the way back to the left.",
      " *",
      " * *Features*",
      " *",
      " * <ul>",
      " * <li> Reversing children order </li>",
      " * <li> Manual line breaks </li>",
      " * <li> Horizontal alignment of lines </li>",
      " * <li> Vertical alignment of individual widgets within a line </li>",
      " * <li> Margins with horizontal margin collapsing </li>",
      " * <li> Horizontal and vertical spacing </li>",
      " * <li> Height for width calculations </li>",
      " * <li> Auto-sizing </li>",
      " * </ul>",
      " *",
      " * *Item Properties*",
      " *",
      " * <ul>",
      " * <li><strong>lineBreak</strong> <em>(Boolean)</em>: If set to <code>true</code>",
      " *   a forced line break will happen after this child widget.",
      " * </li>",
      " * <li><strong>stretch</strong> <em>(Boolean)</em>: If set to <code>true</code>",
      " *   the widget will be stretched to the remaining line width. This requires",
      " *   lineBreak to be true.",
      " * </li>",
      "",
      " * </ul>",
      " *",
      " * *Example*",
      " *",
      " * Here is a little example of how to use the Flow layout.",
      " *",
      " * <pre class=\"javascript\">",
      " *  var flowlayout = new qx.ui.layout.Flow();",
      " *",
      " *  flowlayout.setAlignX( \"center\" );  // Align children to the X axis of the container (left|center|right)",
      " *",
      " *  var container = new qx.ui.container.Composite(flowlayout);",
      " *  this.getRoot().add(container, {edge: 0});",
      " *",
      " *  var button1 = new qx.ui.form.Button(\"1. First Button\", \"flowlayout/test.png\");",
      " *  container.add(button1);",
      " *",
      " *  var button2 = new qx.ui.form.Button(\"2. Second longer Button...\", \"flowlayout/test.png\");",
      " *  // Have this child create a break in the current Line (next child will always start a new Line)",
      " *  container.add(button2, {lineBreak: true});",
      " *",
      " *  var button3 = new qx.ui.form.Button(\"3rd really, really, really long Button\", \"flowlayout/test.png\");",
      " *  button3.setHeight(100);  // tall button",
      " *  container.add(button3);",
      " *",
      " *  var button4 = new qx.ui.form.Button(\"Number 4\", \"flowlayout/test.png\");",
      " *  button4.setAlignY(\"bottom\");",
      " *  container.add(button4);",
      " *",
      " *  var button5 = new qx.ui.form.Button(\"20px Margins around the great big 5th button!\");",
      " *  button5.setHeight(100);  // tall button",
      " *  button5.setMargin(20);",
      " *  container.add(button5, {lineBreak: true});    // Line break after this button.",
      " *",
      " *  var button6 = new qx.ui.form.Button(\"Number 6\", \"flowlayout/test.png\");",
      " *  button6.setAlignY(\"middle\");  // Align this child to the vertical center of this line.",
      " *  container.add(button6);",
      " *",
      " *  var button7 = new qx.ui.form.Button(\"7th a wide, short button\", \"flowlayout/test.png\");",
      " *  button7.setMaxHeight(20);  // short button",
      " *  container.add(button7);",
      " * </pre>",
      " *",
      " * *External Documentation*",
      " *",
      " * <a href='https://qooxdoo.org/documentation/#/desktop/layout/flow.md'>",
      " * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A basic layout, which supports positioning of child widgets in a 'flowing'\n manner, starting at the container's top/left position, placing children left to right\n (like a HBox) until the there's no remaining room for the next child. When\n out of room on the current line of elements, a new line is started, cleared\n below the tallest child of the preceding line -- a bit like using 'float'\n in CSS, except that a new line wraps all the way back to the left.\n<em>Features</em>\n </p>\n<ul>\n <li> Reversing children order </li>\n <li> Manual line breaks </li>\n <li> Horizontal alignment of lines </li>\n <li> Vertical alignment of individual widgets within a line </li>\n <li> Margins with horizontal margin collapsing </li>\n <li> Horizontal and vertical spacing </li>\n <li> Height for width calculations </li>\n <li> Auto-sizing </li>\n </ul>\n<p><em>Item Properties</em>\n </p>\n<ul>\n <li><strong>lineBreak</strong> <em>(Boolean)</em>: If set to <code>true</code>\n   a forced line break will happen after this child widget.\n </li>\n <li><strong>stretch</strong> <em>(Boolean)</em>: If set to <code>true</code>\n   the widget will be stretched to the remaining line width. This requires\n   lineBreak to be true.\n </li>\n </ul>\n<p><em>Example</em>\n Here is a little example of how to use the Flow layout.\n </p>\n<pre class=\"javascript\">\n  var flowlayout = new qx.ui.layout.Flow();\n  flowlayout.setAlignX( \"center\" );\n  var container = new qx.ui.container.Composite(flowlayout);\n  this.getRoot().add(container, {edge: 0});\n  var button1 = new qx.ui.form.Button(\"1. First Button\", \"flowlayout/test.png\");\n  container.add(button1);\n  var button2 = new qx.ui.form.Button(\"2. Second longer Button...\", \"flowlayout/test.png\");\n\n  container.add(button2, {lineBreak: true});\n  var button3 = new qx.ui.form.Button(\"3rd really, really, really long Button\", \"flowlayout/test.png\");\n  button3.setHeight(100);\n  container.add(button3);\n  var button4 = new qx.ui.form.Button(\"Number 4\", \"flowlayout/test.png\");\n  button4.setAlignY(\"bottom\");\n  container.add(button4);\n  var button5 = new qx.ui.form.Button(\"20px Margins around the great big 5th button!\");\n  button5.setHeight(100);\n  button5.setMargin(20);\n  container.add(button5, {lineBreak: true});\n  var button6 = new qx.ui.form.Button(\"Number 6\", \"flowlayout/test.png\");\n  button6.setAlignY(\"middle\");\n  container.add(button6);\n  var button7 = new qx.ui.form.Button(\"7th a wide, short button\", \"flowlayout/test.png\");\n  button7.setMaxHeight(20);\n  container.add(button7);\n </pre>\n<p><em>External Documentation</em>\n <a href='https://qooxdoo.org/documentation/#/desktop/layout/flow.md'>\n Extended documentation</a> and links to demos of this layout in the qooxdoo manual.</p>"
      }
    ]
  },
  "superClass": "qx.ui.layout.Abstract",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "spacingX"
      },
      {
        "name": "spacingY"
      },
      {
        "name": "alignX"
      }
    ],
    "location": {
      "start": {
        "line": 114,
        "column": 2,
        "index": 4194
      },
      "end": {
        "line": 128,
        "column": 3,
        "index": 4427
      }
    }
  },
  "properties": {
    "alignX": {
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 4835
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 4946
        }
      },
      "json": {
        "check": [
          "left",
          "center",
          "right"
        ],
        "init": "left",
        "apply": "_applyLayoutChange"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Horizontal alignment of the whole children block. The horizontal",
          "     * alignment of the child is completely ignored in HBoxes (",
          "     * {@link qx.ui.core.LayoutItem#alignX}).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Horizontal alignment of the whole children block. The horizontal\n alignment of the child is completely ignored in HBoxes (\n {@link qx.ui.core.LayoutItem#alignX}).</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "alignY": {
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 5081
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 5191
        }
      },
      "json": {
        "check": [
          "top",
          "middle",
          "bottom"
        ],
        "init": "top",
        "apply": "_applyLayoutChange"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Vertical alignment of each child. Can be overridden through",
          "     * {@link qx.ui.core.LayoutItem#alignY}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Vertical alignment of each child. Can be overridden through\n {@link qx.ui.core.LayoutItem#alignY}.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "spacingX": {
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 5249
        },
        "end": {
          "line": 163,
          "column": 5,
          "index": 5339
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyLayoutChange"
      },
      "jsdoc": {
        "raw": [
          "* Horizontal spacing between two children "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Horizontal spacing between two children</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "spacingY": {
      "location": {
        "start": {
          "line": 168,
          "column": 4,
          "index": 5409
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 5499
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyLayoutChange"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The vertical spacing between the lines.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The vertical spacing between the lines.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "reversed": {
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 5588
        },
        "end": {
          "line": 179,
          "column": 5,
          "index": 5682
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyLayoutChange"
      },
      "jsdoc": {
        "raw": [
          "* Whether the actual children list should be laid out in reversed order. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the actual children list should be laid out in reversed order.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "verifyLayoutProperty": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 6106
        },
        "end": {
          "line": 207,
          "column": 6,
          "index": 6450
        }
      },
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "connectToWidget": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 6475
        },
        "end": {
          "line": 221,
          "column": 5,
          "index": 6967
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget"
        }
      ],
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "renderLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The FlowLayout tries to add as many Children as possible to the current 'Line'",
          "     * and when it sees that the next Child won't fit, it starts on a new Line, continuing",
          "     * until all the Children have been added.",
          "     * To enable alignX \"left\", \"center\", \"right\" renderLayout has to calculate the positions",
          "     * of all a Line's children before it draws them.",
          "     *",
          "     * @param availWidth {Integer} Final width available for the content (in pixel)",
          "     * @param availHeight {Integer} Final height available for the content (in pixel)",
          "     * @param padding {Map} Map containing the padding values. Keys:",
          "     * <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The FlowLayout tries to add as many Children as possible to the current 'Line'\n and when it sees that the next Child won't fit, it starts on a new Line, continuing\n until all the Children have been added.\n To enable alignX \"left\", \"center\", \"right\" renderLayout has to calculate the positions\n of all a Line's children before it draws them.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "availWidth {Integer} Final width available for the content (in pixel)",
            "paramName": "availWidth",
            "description": " Final width available for the content (in pixel)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "availHeight {Integer} Final height available for the content (in pixel)",
            "paramName": "availHeight",
            "description": " Final height available for the content (in pixel)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "padding {Map} Map containing the padding values. Keys:\n <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "paramName": "padding",
            "description": " Map containing the padding values. Keys:\n <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 7692
        },
        "end": {
          "line": 253,
          "column": 5,
          "index": 8267
        }
      },
      "type": "function",
      "params": [
        {
          "name": "availWidth",
          "type": "Integer"
        },
        {
          "name": "availHeight",
          "type": "Integer"
        },
        {
          "name": "padding",
          "type": "Map<any, any>"
        }
      ],
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "__renderLine": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Render a line in the flow layout",
          "     *",
          "     * @param line {Map} A line configuration as returned by",
          "     *    {@link LineSizeIterator#computeNextLine}.",
          "     * @param lineTop {Integer} The line's top position",
          "     * @param availWidth {Integer} The available line width",
          "     * @param padding {Map} Map containing the padding values. Keys:",
          "     * <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Render a line in the flow layout</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "line {Map} A line configuration as returned by\n    {@link LineSizeIterator#computeNextLine}.",
            "paramName": "line",
            "description": " A line configuration as returned by\n    {@link LineSizeIterator#computeNextLine}.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "lineTop {Integer} The line's top position",
            "paramName": "lineTop",
            "description": " The line's top position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "availWidth {Integer} The available line width",
            "paramName": "availWidth",
            "description": " The available line width",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "padding {Map} Map containing the padding values. Keys:\n <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "paramName": "padding",
            "description": " Map containing the padding values. Keys:\n <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 8719
        },
        "end": {
          "line": 304,
          "column": 5,
          "index": 9913
        }
      },
      "type": "function",
      "params": [
        {
          "name": "line",
          "type": "Map<any, any>"
        },
        {
          "name": "lineTop",
          "type": "Integer"
        },
        {
          "name": "availWidth",
          "type": "Integer"
        },
        {
          "name": "padding",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "_computeSizeHint": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 9938
        },
        "end": {
          "line": 309,
          "column": 5,
          "index": 10007
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "hasHeightForWidth": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 312,
          "column": 4,
          "index": 10032
        },
        "end": {
          "line": 314,
          "column": 5,
          "index": 10078
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "getHeightForWidth": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 317,
          "column": 4,
          "index": 10103
        },
        "end": {
          "line": 319,
          "column": 5,
          "index": 10182
        }
      },
      "type": "function",
      "params": [
        {
          "name": "width"
        }
      ],
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "getLastLineChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the list of children fitting in the last row of the given width.",
          "     * @param width {Number} The width to use for the calculation.",
          "     * @return {Array} List of children in the first row.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list of children fitting in the last row of the given width.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Number} The width to use for the calculation.",
            "paramName": "width",
            "description": " The width to use for the calculation.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of children in the first row.",
            "type": "Array<any>",
            "description": "List of children in the first row."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 326,
          "column": 4,
          "index": 10410
        },
        "end": {
          "line": 338,
          "column": 5,
          "index": 10748
        }
      },
      "type": "function",
      "params": [
        {
          "name": "width",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__computeSize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Compute the preferred size optionally constrained by the available width",
          "     *",
          "     * @param availWidth {Integer} The available width",
          "     * @return {Map} Map containing the preferred height and width of the layout",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compute the preferred size optionally constrained by the available width</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "availWidth {Integer} The available width",
            "paramName": "availWidth",
            "description": " The available width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map containing the preferred height and width of the layout",
            "type": "Map<any, any>",
            "description": "Map containing the preferred height and width of the layout"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 346,
          "column": 4,
          "index": 10994
        },
        "end": {
          "line": 367,
          "column": 5,
          "index": 11556
        }
      },
      "type": "function",
      "params": [
        {
          "name": "availWidth",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    }
  },
  "statics": {}
}