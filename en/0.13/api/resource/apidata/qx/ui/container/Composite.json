{
  "version": 0.3,
  "lastModified": 1726088850601,
  "lastModifiedIso": "2024-09-11T21:07:30.601Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/container/Composite.js",
  "type": "class",
  "location": {
    "start": {
      "line": 53,
      "column": 0,
      "index": 1583
    },
    "end": {
      "line": 116,
      "column": 3,
      "index": 3310
    }
  },
  "className": "qx.ui.container.Composite",
  "jsdoc": {
    "raw": [
      "*",
      " * The Composite is a generic container widget.",
      " *",
      " * It exposes all methods to set layouts and to manage child widgets",
      " * as public methods. You must configure this widget with a layout manager to",
      " * define the way the widget's children are positioned.",
      " *",
      " * *Example*",
      " *",
      " * Here is a little example of how to use the widget.",
      " *",
      " * <pre class='javascript'>",
      " *   // create the composite",
      " *   var composite = new qx.ui.container.Composite()",
      " *",
      " *   // configure it with a horizontal box layout with a spacing of '5'",
      " *   composite.setLayout(new qx.ui.layout.HBox(5));",
      " *",
      " *   // add some children",
      " *   composite.add(new qx.ui.basic.Label(\"Name: \"));",
      " *   composite.add(new qx.ui.form.TextField());",
      " *",
      " *   this.getRoot().add(composite);",
      " * </pre>",
      " *",
      " * This example horizontally groups a label and text field by using a",
      " * Composite configured with a horizontal box layout as a container.",
      " *",
      " * *External Documentation*",
      " *",
      " * <a href='http://qooxdoo.org/docs/#desktop/widget/composite.md' target='_blank'>",
      " * Documentation of this widget in the qooxdoo manual.</a>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The Composite is a generic container widget.\n It exposes all methods to set layouts and to manage child widgets\n as public methods. You must configure this widget with a layout manager to\n define the way the widget's children are positioned.\n<em>Example</em>\n Here is a little example of how to use the widget.\n </p>\n<pre class='javascript'>\n\n   var composite = new qx.ui.container.Composite()\n\n   composite.setLayout(new qx.ui.layout.HBox(5));\n\n   composite.add(new qx.ui.basic.Label(\"Name: \"));\n   composite.add(new qx.ui.form.TextField());\n   this.getRoot().add(composite);\n </pre>\n<p>This example horizontally groups a label and text field by using a\n Composite configured with a horizontal box layout as a container.\n<em>External Documentation</em>\n <a href='http://qooxdoo.org/docs/#desktop/widget/composite.md' target='_blank'>\n Documentation of this widget in the qooxdoo manual.</a></p>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.MChildrenHandling",
    "qx.ui.core.MLayoutHandling"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "layout"
      }
    ],
    "location": {
      "start": {
        "line": 67,
        "column": 2,
        "index": 2040
      },
      "end": {
        "line": 73,
        "column": 3,
        "index": 2140
      }
    }
  },
  "events": {
    "addChildWidget": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * This event is fired after a child widget was added to this widget. The",
          "     * {@link qx.event.type.Data#getData} method of the event returns the",
          "     * added child.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired after a child widget was added to this widget. The\n {@link qx.event.type.Data#getData} method of the event returns the\n added child.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2530
        },
        "end": {
          "line": 87,
          "column": 40,
          "index": 2566
        }
      }
    },
    "removeChildWidget": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * This event is fired after a child widget has been removed from this widget.",
          "     * The {@link qx.event.type.Data#getData} method of the event returns the",
          "     * removed child.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired after a child widget has been removed from this widget.\n The {@link qx.event.type.Data#getData} method of the event returns the\n removed child.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2772
        },
        "end": {
          "line": 94,
          "column": 43,
          "index": 2811
        }
      }
    }
  },
  "members": {
    "_afterAddChild": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 3037
        },
        "end": {
          "line": 107,
          "column": 5,
          "index": 3146
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_afterRemoveChild": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3171
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3302
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1328
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1383
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1539
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1594
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given widget if it is",
          "     * a child widget. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.Widget} the widget to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given widget is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2233
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to add.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to add."
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2711
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2771
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child widget at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param index {Integer} Index, at which the widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 3347
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 3425
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "index"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget before another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted."
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 4029
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 4117
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "before"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget after another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4724
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 4808
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "after"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child widget.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to remove",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to remove"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 4941
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4989
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the widget at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the widget to remove.",
          "     * @return {qx.ui.core.LayoutItem} The child removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The child removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 5486
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 5545
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     *",
          "     * @return {Array} An array of the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 5660
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5711
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "setLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set a layout manager for the widget. A a layout manager can only be connected",
          "     * with one widget. Reset the connection with a previous widget first, if you",
          "     * like to use it in another widget instead.",
          "     *",
          "     * @param layout {qx.ui.layout.Abstract} The new layout or",
          "     *     <code>null</code> to reset the layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a layout manager for the widget. A a layout manager can only be connected\n with one widget. Reset the connection with a previous widget first, if you\n like to use it in another widget instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "layout {qx.ui.layout.Abstract} The new layout or\n     <code>null</code> to reset the layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1490
        },
        "end": {
          "line": 46,
          "column": 5,
          "index": 1546
        }
      },
      "type": "function",
      "params": [
        {
          "name": "layout"
        }
      ],
      "mixin": "qx.ui.core.MLayoutHandling",
      "appearsIn": [
        "qx.ui.core.MLayoutHandling"
      ]
    },
    "getLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the widget's layout manager.",
          "     *",
          "     * @return {qx.ui.layout.Abstract} The widget's layout manager",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget's layout manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Abstract} The widget's layout manager"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1683
        },
        "end": {
          "line": 55,
          "column": 5,
          "index": 1734
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MLayoutHandling",
      "appearsIn": [
        "qx.ui.core.MLayoutHandling"
      ]
    }
  },
  "statics": {
    "remap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mapping of protected methods to public.",
          "     * This omits an additional function call when using these methods. Call",
          "     * this methods in the defer block of the including class.",
          "     *",
          "     * @param members {Map} The including classes members map",
          "     * @deprecated {7.0} this is not necessary in modern compilers and leads to unexpected behaviour",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of protected methods to public.\n This omits an additional function call when using these methods. Call\n this methods in the defer block of the including class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "members {Map} The including classes members map"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{7.0} this is not necessary in modern compilers and leads to unexpected behaviour"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 2315
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2593
        }
      },
      "type": "function",
      "params": [
        {
          "name": "members"
        }
      ],
      "mixin": "qx.ui.core.MLayoutHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling",
        "qx.ui.core.MLayoutHandling"
      ]
    }
  },
  "properties": {}
}