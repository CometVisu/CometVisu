{
  "version": 0.3,
  "lastModified": 1722153601655,
  "lastModifiedIso": "2024-07-28T08:00:01.655Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/container/Stack.js",
  "type": "class",
  "location": {
    "start": {
      "line": 62,
      "column": 0,
      "index": 1711
    },
    "end": {
      "line": 247,
      "column": 3,
      "index": 6168
    }
  },
  "className": "qx.ui.container.Stack",
  "jsdoc": {
    "raw": [
      "*",
      " * The stack container puts its child widgets on top of each other and only the",
      " * topmost widget is visible.",
      " *",
      " * This is used e.g. in the tab view widget. Which widget is visible can be",
      " * controlled by using the {@link #getSelection} method.",
      " *",
      " * *Example*",
      " *",
      " * Here is a little example of how to use the widget.",
      " *",
      " * <pre class='javascript'>",
      " *   // create stack container",
      " *   var stack = new qx.ui.container.Stack();",
      " *",
      " *   // add some children",
      " *   stack.add(new qx.ui.core.Widget().set({",
      " *    backgroundColor: \"red\"",
      " *   }));",
      " *   stack.add(new qx.ui.core.Widget().set({",
      " *    backgroundColor: \"green\"",
      " *   }));",
      " *   stack.add(new qx.ui.core.Widget().set({",
      " *    backgroundColor: \"blue\"",
      " *   }));",
      " *",
      " *   // select green widget",
      " *   stack.setSelection([stack.getChildren()[1]]);",
      " *",
      " *   this.getRoot().add(stack);",
      " * </pre>",
      " *",
      " * This example creates an stack with three children. Only the selected \"green\"",
      " * widget is visible.",
      " *",
      " * *External Documentation*",
      " *",
      " * <a href='http://qooxdoo.org/docs/#desktop/widget/stack.md' target='_blank'>",
      " * Documentation of this widget in the qooxdoo manual.</a>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The stack container puts its child widgets on top of each other and only the\n topmost widget is visible.\n This is used e.g. in the tab view widget. Which widget is visible can be\n controlled by using the {@link #getSelection} method.\n<em>Example</em>\n Here is a little example of how to use the widget.\n </p>\n<pre class='javascript'>\n\n   var stack = new qx.ui.container.Stack();\n\n   stack.add(new qx.ui.core.Widget().set({\n    backgroundColor: \"red\"\n   }));\n   stack.add(new qx.ui.core.Widget().set({\n    backgroundColor: \"green\"\n   }));\n   stack.add(new qx.ui.core.Widget().set({\n    backgroundColor: \"blue\"\n   }));\n\n   stack.setSelection([stack.getChildren()[1]]);\n   this.getRoot().add(stack);\n </pre>\n<p>This example creates an stack with three children. Only the selected \"green\"\n widget is visible.\n<em>External Documentation</em>\n <a href='http://qooxdoo.org/docs/#desktop/widget/stack.md' target='_blank'>\n Documentation of this widget in the qooxdoo manual.</a></p>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "interfaces": [
    "qx.ui.form.IField",
    "qx.ui.core.ISingleSelection"
  ],
  "mixins": [
    "qx.ui.core.MSingleSelectionHandling",
    "qx.ui.core.MChildrenHandling"
  ],
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 74,
        "column": 2,
        "index": 2118
      },
      "end": {
        "line": 80,
        "column": 3,
        "index": 2269
      }
    }
  },
  "properties": {
    "dynamic": {
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2640
        },
        "end": {
          "line": 97,
          "column": 5,
          "index": 2728
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyDynamic"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the size of the widget depends on the selected child. When",
          "     * disabled (default) the size is configured to the largest child.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the size of the widget depends on the selected child. When\n disabled (default) the size is configured to the largest child.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "_applyDynamic": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 2958
        },
        "end": {
          "line": 124,
          "column": 5,
          "index": 3350
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "_getItems": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the widget for the selection.",
          "     * @return {qx.ui.core.Widget[]} Widgets to select.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget for the selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} Widgets to select.",
            "type": "qx.ui.core.Widget[]",
            "description": "Widgets to select."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3688
        },
        "end": {
          "line": 138,
          "column": 5,
          "index": 3740
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": []
    },
    "_isAllowEmptySelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns if the selection could be empty or not.",
          "     *",
          "     * @return {Boolean} <code>true</code> If selection could be empty,",
          "     *    <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns if the selection could be empty or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> If selection could be empty,\n    <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>true</code> If selection could be empty,\n    <code>false</code> otherwise."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 3937
        },
        "end": {
          "line": 148,
          "column": 5,
          "index": 3988
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_isItemSelectable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns whether the given item is selectable.",
          "     *",
          "     * @param item {qx.ui.core.Widget} The item to be checked",
          "     * @return {Boolean} Whether the given item is selectable",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the given item is selectable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} The item to be checked",
            "paramName": "item",
            "description": " The item to be checked",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the given item is selectable",
            "type": "boolean",
            "description": "Whether the given item is selectable"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4195
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4245
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__onChangeSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for <code>changeSelection</code>.",
          "     *",
          "     * Shows the new selected widget and hide the old one.",
          "     *",
          "     * @param e {qx.event.type.Data} Data event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for <code>changeSelection</code>.\n Shows the new selected widget and hide the old one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event.",
            "paramName": "e",
            "description": " Data event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 4445
        },
        "end": {
          "line": 182,
          "column": 5,
          "index": 4726
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_afterAddChild": {
      "jsdoc": {
        "raw": [
          "overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 4750
        },
        "end": {
          "line": 197,
          "column": 5,
          "index": 5041
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_afterRemoveChild": {
      "jsdoc": {
        "raw": [
          "overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5065
        },
        "end": {
          "line": 210,
          "column": 5,
          "index": 5315
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "previous": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Go to the previous child in the children list.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Go to the previous child in the children list.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 221,
          "column": 4,
          "index": 5584
        },
        "end": {
          "line": 232,
          "column": 5,
          "index": 5861
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "next": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Go to the next child in the children list.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Go to the next child in the children list.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 237,
          "column": 4,
          "index": 5934
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 6160
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__manager": {
      "jsdoc": {
        "raw": [
          "* @type {qx.ui.core.SingleSelectionManager} the single selection manager "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.core.SingleSelectionManager} the single selection manager"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1691
        },
        "end": {
          "line": 56,
          "column": 19,
          "index": 1706
        }
      },
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ]
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * setValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @param item {null|qx.ui.core.Widget} Item to set as selected value.",
          "     * @returns {null|TypeError} The status of this operation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {null|qx.ui.core.Widget} Item to set as selected value."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|TypeError} The status of this operation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 2142
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2496
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item"
        }
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ]
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * getValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @returns {null|qx.ui.core.Widget} The currently selected widget or null if there is none.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null|qx.ui.core.Widget} The currently selected widget or null if there is none."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2699
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2773
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ]
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * resetValue implements part of the {@link qx.ui.form.IField} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>resetValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2874
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2937
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.form.IField"
      ]
    },
    "getSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array of currently selected items.",
          "     *",
          "     * Note: The result is only a set of selected items, so the order can",
          "     * differ from the sequence in which the items were added.",
          "     *",
          "     * @return {qx.ui.core.Widget[]} List of items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of currently selected items.\n Note: The result is only a set of selected items, so the order can\n differ from the sequence in which the items were added.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} List of items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3216
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3386
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ]
    },
    "setSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces current selection with the given items.",
          "     *",
          "     * @param items {qx.ui.core.Widget[]} Items to select.",
          "     * @throws {Error} if one of the items is not a child element and if",
          "     *    items contains more than one elements.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces current selection with the given items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "items {qx.ui.core.Widget[]} Items to select."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the items is not a child element and if\n    items contains more than one elements."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3653
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 4077
        }
      },
      "type": "function",
      "params": [
        {
          "name": "items"
        }
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ]
    },
    "resetSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clears the whole selection at once.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the whole selection at once.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 4143
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4210
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ]
    },
    "isSelected": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the given item is currently selected.",
          "     *",
          "     * @param item {qx.ui.core.Widget} Any valid selectable item.",
          "     * @return {Boolean} Whether the item is selected.",
          "     * @throws {Error} if one of the items is not a child element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the given item is currently selected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} Any valid selectable item."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the item is selected."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the items is not a child element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4489
        },
        "end": {
          "line": 161,
          "column": 5,
          "index": 4564
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item"
        }
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ]
    },
    "isSelectionEmpty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the selection is empty.",
          "     *",
          "     * @return {Boolean} Whether the selection is empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the selection is empty.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the selection is empty."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 168,
          "column": 4,
          "index": 4690
        },
        "end": {
          "line": 170,
          "column": 5,
          "index": 4769
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ]
    },
    "getSelectables": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all elements which are selectable.",
          "     *",
          "     * @param all {Boolean} true for all selectables, false for the",
          "     *   selectables the user can interactively select",
          "     * @return {qx.ui.core.Widget[]} The contained items.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all elements which are selectable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "all {Boolean} true for all selectables, false for the\n   selectables the user can interactively select"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The contained items."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5030
        },
        "end": {
          "line": 181,
          "column": 5,
          "index": 5111
        }
      },
      "type": "function",
      "params": [
        {
          "name": "all"
        }
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling",
        "qx.ui.core.ISingleSelection"
      ]
    },
    "_onChangeSelected": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for <code>changeSelected</code> event on single",
          "     * selection manager.",
          "     *",
          "     * @param e {qx.event.type.Data} Data event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for <code>changeSelected</code> event on single\n selection manager.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Data event."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5481
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 5843
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ]
    },
    "__getManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the selection manager if it is already exists, otherwise creates",
          "     * the manager.",
          "     *",
          "     * @return {qx.ui.core.SingleSelectionManager} Single selection manager.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the selection manager if it is already exists, otherwise creates\n the manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.SingleSelectionManager} Single selection manager."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 211,
          "column": 4,
          "index": 6049
        },
        "end": {
          "line": 237,
          "column": 5,
          "index": 6736
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MSingleSelectionHandling",
      "appearsIn": [
        "qx.ui.core.MSingleSelectionHandling"
      ]
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1328
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1383
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1539
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1594
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given widget if it is",
          "     * a child widget. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.Widget} the widget to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given widget is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2233
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to add.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to add."
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2711
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2771
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child widget at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param index {Integer} Index, at which the widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 3347
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 3425
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "index"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget before another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted."
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 4029
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 4117
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "before"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget after another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4724
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 4808
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "after"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child widget.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to remove",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to remove"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 4941
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4989
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the widget at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the widget to remove.",
          "     * @return {qx.ui.core.LayoutItem} The child removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The child removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 5486
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 5545
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     *",
          "     * @return {Array} An array of the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 5660
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5711
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    }
  },
  "statics": {
    "remap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mapping of protected methods to public.",
          "     * This omits an additional function call when using these methods. Call",
          "     * this methods in the defer block of the including class.",
          "     *",
          "     * @param members {Map} The including classes members map",
          "     * @deprecated {7.0} this is not necessary in modern compilers and leads to unexpected behaviour",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of protected methods to public.\n This omits an additional function call when using these methods. Call\n this methods in the defer block of the including class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "members {Map} The including classes members map"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{7.0} this is not necessary in modern compilers and leads to unexpected behaviour"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 6292
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 6916
        }
      },
      "type": "function",
      "params": [
        {
          "name": "members"
        }
      ],
      "mixin": "qx.ui.core.MChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ]
    }
  }
}