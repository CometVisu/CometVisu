{
  "version": 0.3,
  "lastModified": 1735341602599,
  "lastModifiedIso": "2024-12-27T23:20:02.599Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/container/SlideBar.js",
  "type": "class",
  "location": {
    "start": {
      "line": 63,
      "column": 0,
      "index": 1939
    },
    "end": {
      "line": 469,
      "column": 3,
      "index": 12913
    }
  },
  "className": "qx.ui.container.SlideBar",
  "jsdoc": {
    "raw": [
      "*",
      " * Container, which provides scrolling in one dimension (vertical or horizontal).",
      " *",
      " * @childControl button-forward {qx.ui.form.RepeatButton} button to step forward",
      " * @childControl button-backward {qx.ui.form.RepeatButton} button to step backward",
      " * @childControl content {qx.ui.container.Composite} container to hold the content",
      " * @childControl scrollpane {qx.ui.core.scroll.ScrollPane} the scroll pane holds the content to enable scrolling",
      " *",
      " * *Example*",
      " *",
      " * Here is a little example of how to use the widget.",
      " *",
      " * <pre class='javascript'>",
      " *   // create slide bar container",
      " *   slideBar = new qx.ui.container.SlideBar().set({",
      " *     width: 300",
      " *   });",
      " *",
      " *   // set layout",
      " *   slideBar.setLayout(new qx.ui.layout.HBox());",
      " *",
      " *   // add some widgets",
      " *   for (var i=0; i<10; i++)",
      " *   {",
      " *     slideBar.add((new qx.ui.core.Widget()).set({",
      " *       backgroundColor : (i % 2 == 0) ? \"red\" : \"blue\",",
      " *       width : 60",
      " *     }));",
      " *   }",
      " *",
      " *   this.getRoot().add(slideBar);",
      " * </pre>",
      " *",
      " * This example creates a SlideBar and add some widgets with alternating",
      " * background colors. Since the content is larger than the container, two",
      " * scroll buttons at the left and the right edge are shown.",
      " *",
      " * *External Documentation*",
      " *",
      " * <a href='http://qooxdoo.org/docs/#desktop/widget/slidebar.md' target='_blank'>",
      " * Documentation of this widget in the qooxdoo manual.</a>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Container, which provides scrolling in one dimension (vertical or horizontal).</p>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "button-forward {qx.ui.form.RepeatButton} button to step forward"
      },
      {
        "name": "@childControl",
        "body": "button-backward {qx.ui.form.RepeatButton} button to step backward"
      },
      {
        "name": "@childControl",
        "body": "content {qx.ui.container.Composite} container to hold the content"
      },
      {
        "name": "@childControl",
        "body": "scrollpane {qx.ui.core.scroll.ScrollPane} the scroll pane holds the content to enable scrolling\n*Example*\n Here is a little example of how to use the widget.\n <pre class='javascript'>\n\n   slideBar = new qx.ui.container.SlideBar().set({\n     width: 300\n   });\n\n   slideBar.setLayout(new qx.ui.layout.HBox());\n\n   for (var i=0; i<10; i++)\n   {\n     slideBar.add((new qx.ui.core.Widget()).set({\n       backgroundColor : (i % 2 == 0) ? \"red\" : \"blue\",\n       width : 60\n     }));\n   }\n   this.getRoot().add(slideBar);\n </pre>\n This example creates a SlideBar and add some widgets with alternating\n background colors. Since the content is larger than the container, two\n scroll buttons at the left and the right edge are shown.\n*External Documentation*\n <a href='http://qooxdoo.org/docs/#desktop/widget/slidebar.md' target='_blank'>\n Documentation of this widget in the qooxdoo manual.</a>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.MRemoteChildrenHandling",
    "qx.ui.core.MRemoteLayoutHandling"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "orientation"
      }
    ],
    "location": {
      "start": {
        "line": 80,
        "column": 2,
        "index": 2385
      },
      "end": {
        "line": 93,
        "column": 3,
        "index": 2696
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2924
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 2986
        }
      },
      "json": {
        "refine": true,
        "init": "slidebar"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "orientation": {
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3027
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 3147
        }
      },
      "json": {
        "check": [
          "horizontal",
          "vertical"
        ],
        "init": "horizontal",
        "apply": "_applyOrientation"
      },
      "jsdoc": {
        "raw": [
          "* Orientation of the bar "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Orientation of the bar</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "scrollStep": {
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3223
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3304
        }
      },
      "json": {
        "check": "Integer",
        "init": 15,
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* The number of pixels to scroll if the buttons are pressed "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The number of pixels to scroll if the buttons are pressed</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "events": {
    "scrollAnimationEnd": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired on scroll animation end invoked by 'scroll*' methods. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on scroll animation end invoked by 'scroll*' methods.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3581
        },
        "end": {
          "line": 131,
          "column": 45,
          "index": 3622
        }
      }
    }
  },
  "members": {
    "getChildrenContainer": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 4093
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4169
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4194
        },
        "end": {
          "line": 192,
          "column": 5,
          "index": 5419
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_forwardStates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @lint ignoreReferenceField(_forwardStates)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 5510
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 5618
        }
      },
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "scrollBy": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the element's content by the given amount.",
          "     *",
          "     * @param offset {Integer?0} Amount to scroll",
          "     * @param duration {Number?} The time in milliseconds the scroll to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element's content by the given amount.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "offset {Integer?0} Amount to scroll",
            "paramName": "offset",
            "description": " Amount to scroll",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 217,
          "column": 4,
          "index": 6040
        },
        "end": {
          "line": 224,
          "column": 5,
          "index": 6286
        }
      },
      "type": "function",
      "params": [
        {
          "name": "offset",
          "type": "Integer",
          "optional": true,
          "defaultValue": "0"
        },
        {
          "name": "duration",
          "type": "Number",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "scrollTo": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the element's content to the given coordinate",
          "     *",
          "     * @param value {Integer} The position to scroll to.",
          "     * @param duration {Number?} The time in milliseconds the scroll to should take.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element's content to the given coordinate</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} The position to scroll to.",
            "paramName": "value",
            "description": " The position to scroll to.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "duration {Number?} The time in milliseconds the scroll to should take.",
            "paramName": "duration",
            "description": " The time in milliseconds the scroll to should take.",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 232,
          "column": 4,
          "index": 6519
        },
        "end": {
          "line": 239,
          "column": 5,
          "index": 6762
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Integer"
        },
        {
          "name": "duration",
          "type": "Number",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "_applyEnabled": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 247,
          "column": 4,
          "index": 6991
        },
        "end": {
          "line": 250,
          "column": 5,
          "index": 7110
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        },
        {
          "name": "name"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyOrientation": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 7139
        },
        "end": {
          "line": 290,
          "column": 5,
          "index": 8469
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_onRoll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls pane on roll events",
          "     *",
          "     * @param e {qx.event.type.Roll} the roll event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls pane on roll events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} the roll event",
            "paramName": "e",
            "description": " the roll event",
            "type": "qx.event.type.Roll"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 303,
          "column": 4,
          "index": 8783
        },
        "end": {
          "line": 356,
          "column": 5,
          "index": 10114
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Roll"
        }
      ],
      "appearsIn": []
    },
    "_onScroll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Update arrow enabled state after scrolling",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Update arrow enabled state after scrolling</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 361,
          "column": 4,
          "index": 10187
        },
        "end": {
          "line": 363,
          "column": 5,
          "index": 10241
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onScrollAnimationEnd": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler to fire the 'scrollAnimationEnd' event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler to fire the 'scrollAnimationEnd' event.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 368,
          "column": 4,
          "index": 10319
        },
        "end": {
          "line": 370,
          "column": 5,
          "index": 10394
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onResize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener for resize event. This event is fired after the",
          "     * first flush of the element which leads to another queuing",
          "     * when the changes modify the visibility of the scroll buttons.",
          "     *",
          "     * @param e {Event} Event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener for resize event. This event is fired after the\n first flush of the element which leads to another queuing\n when the changes modify the visibility of the scroll buttons.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Event object",
            "paramName": "e",
            "description": " Event object",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 10659
        },
        "end": {
          "line": 399,
          "column": 5,
          "index": 11194
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "_onExecuteBackward": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scroll handler for left scrolling",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scroll handler for left scrolling</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 405,
          "column": 4,
          "index": 11265
        },
        "end": {
          "line": 407,
          "column": 5,
          "index": 11337
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onExecuteForward": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scroll handler for right scrolling",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scroll handler for right scrolling</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 413,
          "column": 4,
          "index": 11409
        },
        "end": {
          "line": 415,
          "column": 5,
          "index": 11479
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_updateArrowsEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Update arrow enabled state",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Update arrow enabled state</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 426,
          "column": 4,
          "index": 11727
        },
        "end": {
          "line": 447,
          "column": 5,
          "index": 12478
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_showArrows": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Show the arrows (Called from resize event)",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Show the arrows (Called from resize event)</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 453,
          "column": 4,
          "index": 12558
        },
        "end": {
          "line": 456,
          "column": 5,
          "index": 12676
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_hideArrows": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Hide the arrows (Called from resize event)",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hide the arrows (Called from resize event)</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 462,
          "column": 4,
          "index": 12756
        },
        "end": {
          "line": 467,
          "column": 5,
          "index": 12905
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__forward": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Forward the call with the given function name to the children container",
          "     *",
          "     * @param functionName {String} name of the method to forward",
          "     * @param a1 {var?} first argument of the method to call",
          "     * @param a2 {var?} second argument of the method to call",
          "     * @param a3 {var?} third argument of the method to call",
          "     * @return {var} The return value of the forward method",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Forward the call with the given function name to the children container</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "functionName {String} name of the method to forward"
          },
          {
            "name": "@param",
            "body": "a1 {var?} first argument of the method to call"
          },
          {
            "name": "@param",
            "body": "a2 {var?} second argument of the method to call"
          },
          {
            "name": "@param",
            "body": "a3 {var?} third argument of the method to call"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The return value of the forward method"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1555
        },
        "end": {
          "line": 51,
          "column": 5,
          "index": 1782
        }
      },
      "type": "function",
      "params": [
        {
          "name": "functionName"
        },
        {
          "name": "a1"
        },
        {
          "name": "a2"
        },
        {
          "name": "a3"
        }
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1979
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 2044
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2200
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2265
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to add.",
          "     * @param options {Map?null} Optional layout data for item.",
          "     * @return {qx.ui.core.Widget} This object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to add."
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} This object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2752
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2831
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child item.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to remove",
          "     * @return {qx.ui.core.Widget} This object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to remove"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} This object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 3030
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3097
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     * @return {Array} An array containing the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 3213
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 3274
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given item if it is",
          "     * a child item. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given item is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given item if it is\n a child item. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to query for"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given item is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3909
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3978
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param index {Integer} Index, at which the item will be inserted",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the item will be inserted"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4541
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 4631
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "index"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add an item before another already inserted item",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param before {qx.ui.core.LayoutItem} item before the new item will be inserted.",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an item before another already inserted item\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} item before the new item will be inserted."
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 5224
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 5324
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "before"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add an item after another already inserted item",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param after {qx.ui.core.LayoutItem} item, after which the new item will be inserted",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an item after another already inserted item\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} item, after which the new item will be inserted"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5920
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 6016
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "after"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the item at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the item to remove.",
          "     * @return {qx.ui.core.LayoutItem} The removed item",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the item at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to remove."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 6507
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 6578
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index"
        }
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ]
    },
    "setLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set a layout manager for the widget. A a layout manager can only be connected",
          "     * with one widget. Reset the connection with a previous widget first, if you",
          "     * like to use it in another widget instead.",
          "     *",
          "     * @param layout {qx.ui.layout.Abstract} The new layout or",
          "     *     <code>null</code> to reset the layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a layout manager for the widget. A a layout manager can only be connected\n with one widget. Reset the connection with a previous widget first, if you\n like to use it in another widget instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "layout {qx.ui.layout.Abstract} The new layout or\n     <code>null</code> to reset the layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1507
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1713
        }
      },
      "type": "function",
      "params": [
        {
          "name": "layout"
        }
      ],
      "mixin": "qx.ui.core.MRemoteLayoutHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteLayoutHandling"
      ]
    },
    "getLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the widget's layout manager.",
          "     *",
          "     * @return {qx.ui.layout.Abstract} The widget's layout manager",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget's layout manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Abstract} The widget's layout manager"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1850
        },
        "end": {
          "line": 65,
          "column": 5,
          "index": 2035
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.core.MRemoteLayoutHandling",
      "appearsIn": [
        "qx.ui.core.MRemoteLayoutHandling"
      ]
    }
  },
  "statics": {}
}