{
  "version": 0.3,
  "lastModified": 1735341602711,
  "lastModifiedIso": "2024-12-27T23:20:02.711Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/toolbar/ToolBar.js",
  "type": "class",
  "location": {
    "start": {
      "line": 34,
      "column": 0,
      "index": 1141
    },
    "end": {
      "line": 623,
      "column": 3,
      "index": 19680
    }
  },
  "className": "qx.ui.toolbar.ToolBar",
  "jsdoc": {
    "raw": [
      "*",
      " * The Toolbar class is the main part of the toolbar widget.",
      " *",
      " * It can handle added {@link Button}s, {@link CheckBox}es, {@link RadioButton}s",
      " * and {@link Separator}s in its {@link #add} method. The {@link #addSpacer} method",
      " * adds a spacer at the current toolbar position. This means that the widgets",
      " * added after the method call of {@link #addSpacer} are aligned to the right of",
      " * the toolbar.",
      " *",
      " * For more details on the documentation of the toolbar widget, take a look at the",
      " * documentation of the {@link qx.ui.toolbar}-Package.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The Toolbar class is the main part of the toolbar widget.\n It can handle added {@link Button}s, {@link CheckBox}es, {@link RadioButton}s\n and {@link Separator}s in its {@link #add} method. The {@link #addSpacer} method\n adds a spacer at the current toolbar position. This means that the widgets\n added after the method call of {@link #addSpacer} are aligned to the right of\n the toolbar.\n For more details on the documentation of the toolbar widget, take a look at the\n documentation of the {@link qx.ui.toolbar}-Package.</p>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.MChildrenHandling"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "layout"
      }
    ],
    "location": {
      "start": {
        "line": 48,
        "column": 2,
        "index": 1565
      },
      "end": {
        "line": 60,
        "column": 3,
        "index": 1867
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 2113
        },
        "end": {
          "line": 73,
          "column": 5,
          "index": 2174
        }
      },
      "json": {
        "refine": true,
        "init": "toolbar"
      },
      "jsdoc": {
        "raw": [
          "* Appearance of the widget "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Appearance of the widget</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "openMenu": {
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2259
        },
        "end": {
          "line": 80,
          "column": 5,
          "index": 2360
        }
      },
      "json": {
        "check": "qx.ui.menu.Menu",
        "event": "changeOpenMenu",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Holds the currently open menu (when the toolbar is used for menus) "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Holds the currently open menu (when the toolbar is used for menus)</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "show": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2431
        },
        "end": {
          "line": 89,
          "column": 5,
          "index": 2582
        }
      },
      "json": {
        "init": "both",
        "check": [
          "both",
          "label",
          "icon"
        ],
        "inheritable": true,
        "apply": "_applyShow",
        "event": "changeShow"
      },
      "jsdoc": {
        "raw": [
          "* Whether icons, labels, both or none should be shown. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether icons, labels, both or none should be shown.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "spacing": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2647
        },
        "end": {
          "line": 97,
          "column": 5,
          "index": 2761
        }
      },
      "json": {
        "nullable": true,
        "check": "Integer",
        "themeable": true,
        "apply": "_applySpacing"
      },
      "jsdoc": {
        "raw": [
          "* The spacing between every child of the toolbar "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The spacing between every child of the toolbar</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "overflowIndicator": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 2951
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 3072
        }
      },
      "json": {
        "check": "qx.ui.core.Widget",
        "nullable": true,
        "apply": "_applyOverflowIndicator"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Widget which will be shown if at least one toolbar item is hidden.",
          "     * Keep in mind to add this widget to the toolbar before you set it as",
          "     * indicator!",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget which will be shown if at least one toolbar item is hidden.\n Keep in mind to add this widget to the toolbar before you set it as\n indicator!</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "overflowHandling": {
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 3154
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3260
        }
      },
      "json": {
        "init": false,
        "check": "Boolean",
        "apply": "_applyOverflowHandling"
      },
      "jsdoc": {
        "raw": [
          "* Enables the overflow handling which automatically removes items."
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enables the overflow handling which automatically removes items.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "events": {
    "hideItem": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "* Fired if an item will be hidden by the {@link #overflowHandling}."
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if an item will be hidden by the {@link #overflowHandling}.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3542
        },
        "end": {
          "line": 126,
          "column": 34,
          "index": 3572
        }
      }
    },
    "showItem": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "* Fired if an item will be shown by the {@link #overflowHandling}."
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if an item will be shown by the {@link #overflowHandling}.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3654
        },
        "end": {
          "line": 129,
          "column": 34,
          "index": 3684
        }
      }
    }
  },
  "members": {
    "__removedItems": {
      "jsdoc": {
        "raw": [
          "",
          "    ---------------------------------------------------------------------------",
          "      OVERFLOW HANDLING",
          "    ---------------------------------------------------------------------------",
          "    "
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 145,
          "column": 4,
          "index": 4091
        },
        "end": {
          "line": 145,
          "column": 24,
          "index": 4111
        }
      },
      "appearsIn": []
    },
    "__removePriority": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4117
        },
        "end": {
          "line": 146,
          "column": 26,
          "index": 4139
        }
      },
      "appearsIn": []
    },
    "_computeSizeHint": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 149,
          "column": 4,
          "index": 4164
        },
        "end": {
          "line": 163,
          "column": 5,
          "index": 4724
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_onResize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Resize event handler.",
          "     *",
          "     * @param e {qx.event.type.Data} The resize event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resize event handler.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The resize event.",
            "paramName": "e",
            "description": " The resize event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 4838
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 4910
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_recalculateOverflow": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Responsible for calculation the overflow based on the available width.",
          "     *",
          "     * @param width {Integer?null} The available width.",
          "     * @param requiredWidth {Integer?null} The required width for the widget",
          "     *   if available.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for calculation the overflow based on the available width.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer?null} The available width.",
            "paramName": "width",
            "description": " The available width.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "requiredWidth {Integer?null} The required width for the widget\n   if available.",
            "paramName": "requiredWidth",
            "description": " The required width for the widget\n   if available.",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 5174
        },
        "end": {
          "line": 286,
          "column": 5,
          "index": 9402
        }
      },
      "type": "function",
      "params": [
        {
          "name": "width",
          "type": "Integer",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "requiredWidth",
          "type": "Integer",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "__showChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper to show a toolbar item.",
          "     *",
          "     * @param child {qx.ui.core.Widget} The widget to show.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to show a toolbar item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The widget to show.",
            "paramName": "child",
            "description": " The widget to show.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 293,
          "column": 4,
          "index": 9530
        },
        "end": {
          "line": 297,
          "column": 5,
          "index": 9674
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": []
    },
    "__hideChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper to exclude a toolbar item.",
          "     *",
          "     * @param child {qx.ui.core.Widget} The widget to exclude.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to exclude a toolbar item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The widget to exclude.",
            "paramName": "child",
            "description": " The widget to exclude.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 304,
          "column": 4,
          "index": 9808
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 10050
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": []
    },
    "_getNextToHide": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Responsible for returning the next item to remove. In It checks the",
          "     * priorities added by {@link #setRemovePriority}. If all priorized widgets",
          "     * already excluded, it takes the widget added at last.",
          "     *",
          "     * @return {qx.ui.core.Widget|null} The widget which should be removed next.",
          "     *   If null is returned, no widget is available to remove.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for returning the next item to remove. In It checks the\n priorities added by {@link #setRemovePriority}. If all priorized widgets\n already excluded, it takes the widget added at last.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget|null} The widget which should be removed next.\n   If null is returned, no widget is available to remove.",
            "type": "qx.ui.core.Widget|null",
            "description": "The widget which should be removed next.\n   If null is returned, no widget is available to remove."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 322,
          "column": 4,
          "index": 10440
        },
        "end": {
          "line": 345,
          "column": 5,
          "index": 11295
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget|null"
      },
      "appearsIn": []
    },
    "setRemovePriority": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The removal of the toolbar items is priority based. You can change these",
          "     * priorities with this method. The higher a priority, the earlier it will",
          "     * be excluded. Remember to use every priority only once! If you want",
          "     * override an already set priority, use the override parameter.",
          "     * Keep in mind to only use already added items.",
          "     *",
          "     * @param item {qx.ui.core.Widget} The item to give the priority.",
          "     * @param priority {Integer} The priority, higher means removed earlier.",
          "     * @param override {Boolean} true, if the priority should be overridden.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The removal of the toolbar items is priority based. You can change these\n priorities with this method. The higher a priority, the earlier it will\n be excluded. Remember to use every priority only once! If you want\n override an already set priority, use the override parameter.\n Keep in mind to only use already added items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} The item to give the priority.",
            "paramName": "item",
            "description": " The item to give the priority.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "priority {Integer} The priority, higher means removed earlier.",
            "paramName": "priority",
            "description": " The priority, higher means removed earlier.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "override {Boolean} true, if the priority should be overridden.",
            "paramName": "override",
            "description": " true, if the priority should be overridden.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 358,
          "column": 4,
          "index": 11904
        },
        "end": {
          "line": 364,
          "column": 5,
          "index": 12183
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "priority",
          "type": "Integer"
        },
        {
          "name": "override",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "_applyOverflowHandling": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 367,
          "column": 4,
          "index": 12212
        },
        "end": {
          "line": 403,
          "column": 5,
          "index": 13391
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyOverflowIndicator": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 13420
        },
        "end": {
          "line": 419,
          "column": 5,
          "index": 13777
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "__allowMenuOpenHover": {
      "jsdoc": {
        "raw": [
          "",
          "    ---------------------------------------------------------------------------",
          "      MENU OPEN",
          "    ---------------------------------------------------------------------------",
          "    "
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 13975
        },
        "end": {
          "line": 427,
          "column": 31,
          "index": 14002
        }
      },
      "appearsIn": []
    },
    "_setAllowMenuOpenHover": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Indicate if a menu could be opened on hover or not.",
          "     *",
          "     * @internal",
          "     * @param value {Boolean} <code>true</code> if a menu could be opened,",
          "     *    <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Indicate if a menu could be opened on hover or not.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} <code>true</code> if a menu could be opened,\n    <code>false</code> otherwise.",
            "paramName": "value",
            "description": " <code>true</code> if a menu could be opened,\n    <code>false</code> otherwise.",
            "type": "boolean"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 436,
          "column": 4,
          "index": 14223
        },
        "end": {
          "line": 438,
          "column": 5,
          "index": 14301
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "_isAllowMenuOpenHover": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return if a menu could be opened on hover or not.",
          "     *",
          "     * @internal",
          "     * @return {Boolean} <code>true</code> if a menu could be opened,",
          "     *    <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return if a menu could be opened on hover or not.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if a menu could be opened,\n    <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>true</code> if a menu could be opened,\n    <code>false</code> otherwise."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 447,
          "column": 4,
          "index": 14515
        },
        "end": {
          "line": 449,
          "column": 5,
          "index": 14586
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_applySpacing": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 458,
          "column": 4,
          "index": 14820
        },
        "end": {
          "line": 461,
          "column": 5,
          "index": 14963
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyShow": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 464,
          "column": 4,
          "index": 14992
        },
        "end": {
          "line": 471,
          "column": 5,
          "index": 15200
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "_add": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 479,
          "column": 4,
          "index": 15420
        },
        "end": {
          "line": 491,
          "column": 5,
          "index": 15893
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "options"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_addAt": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 494,
          "column": 4,
          "index": 15918
        },
        "end": {
          "line": 506,
          "column": 5,
          "index": 16409
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "index"
        },
        {
          "name": "options"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_addBefore": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 509,
          "column": 4,
          "index": 16434
        },
        "end": {
          "line": 521,
          "column": 5,
          "index": 16935
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "before"
        },
        {
          "name": "options"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_addAfter": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 524,
          "column": 4,
          "index": 16960
        },
        "end": {
          "line": 536,
          "column": 5,
          "index": 17457
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        },
        {
          "name": "after"
        },
        {
          "name": "options"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_remove": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 539,
          "column": 4,
          "index": 17482
        },
        "end": {
          "line": 546,
          "column": 5,
          "index": 17704
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_removeAt": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 549,
          "column": 4,
          "index": 17729
        },
        "end": {
          "line": 558,
          "column": 5,
          "index": 18021
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_removeAll": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 561,
          "column": 4,
          "index": 18046
        },
        "end": {
          "line": 565,
          "column": 5,
          "index": 18172
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "addSpacer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a spacer to the toolbar. The spacer has a flex",
          "     * value of one and will stretch to the available space.",
          "     *",
          "     * @return {qx.ui.core.Spacer} The newly added spacer object. A reference",
          "     *   to the spacer is needed to remove this spacer from the layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a spacer to the toolbar. The spacer has a flex\n value of one and will stretch to the available space.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Spacer} The newly added spacer object. A reference\n   to the spacer is needed to remove this spacer from the layout.",
            "type": "qx.ui.core.Spacer",
            "description": "The newly added spacer object. A reference\n   to the spacer is needed to remove this spacer from the layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 580,
          "column": 4,
          "index": 18662
        },
        "end": {
          "line": 584,
          "column": 5,
          "index": 18784
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Spacer"
      },
      "appearsIn": []
    },
    "addSeparator": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a separator to the toolbar.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a separator to the toolbar.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 589,
          "column": 4,
          "index": 18847
        },
        "end": {
          "line": 591,
          "column": 5,
          "index": 18916
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getMenuButtons": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all nested buttons which contains a menu to show. This is mainly",
          "     * used for keyboard support.",
          "     *",
          "     * @return {Array} List of all menu buttons",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all nested buttons which contains a menu to show. This is mainly\n used for keyboard support.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of all menu buttons",
            "type": "Array<any>",
            "description": "List of all menu buttons"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 599,
          "column": 4,
          "index": 19108
        },
        "end": {
          "line": 615,
          "column": 5,
          "index": 19548
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)",
            "type": "qx.ui.core.LayoutItem[]",
            "description": "The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1328
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1383
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.LayoutItem[]"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "boolean",
            "description": "Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1539
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1594
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given widget if it is",
          "     * a child widget. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.Widget} the widget to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given widget is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout.",
            "type": "Integer",
            "description": "The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2233
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to add.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2711
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2771
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child widget at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param index {Integer} Index, at which the widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 3347
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 3425
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget before another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " Widget before the new widget will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 4029
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 4117
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "before",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget after another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted",
            "paramName": "after",
            "description": " Widget, after which the new widget will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4724
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 4808
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "after",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child widget.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to remove",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 4941
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4989
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the widget at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the widget to remove.",
          "     * @return {qx.ui.core.LayoutItem} The child removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The child removed.",
            "type": "qx.ui.core.LayoutItem",
            "description": "The child removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 5486
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 5545
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.LayoutItem"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     *",
          "     * @return {Array} An array of the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of the removed children.",
            "type": "Array<any>",
            "description": "An array of the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 5660
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5711
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 618,
        "column": 2,
        "index": 19557
      },
      "end": {
        "line": 622,
        "column": 3,
        "index": 19676
      }
    }
  },
  "statics": {
    "remap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mapping of protected methods to public.",
          "     * This omits an additional function call when using these methods. Call",
          "     * this methods in the defer block of the including class.",
          "     *",
          "     * @param members {Map} The including classes members map",
          "     * @deprecated {7.0} this is not necessary in modern compilers and leads to unexpected behaviour",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of protected methods to public.\n This omits an additional function call when using these methods. Call\n this methods in the defer block of the including class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "members {Map} The including classes members map",
            "paramName": "members",
            "description": " The including classes members map",
            "type": "Map<any, any>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{7.0} this is not necessary in modern compilers and leads to unexpected behaviour"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 6292
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 6916
        }
      },
      "type": "function",
      "params": [
        {
          "name": "members",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    }
  }
}