{
  "version": 0.3,
  "lastModified": 1722151626675,
  "lastModifiedIso": "2024-07-28T07:27:06.675Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/toolbar/Part.js",
  "type": "class",
  "location": {
    "start": {
      "line": 31,
      "column": 0,
      "index": 1029
    },
    "end": {
      "line": 201,
      "column": 3,
      "index": 5739
    }
  },
  "className": "qx.ui.toolbar.Part",
  "jsdoc": {
    "raw": [
      "*",
      " * A part is a container for multiple toolbar buttons. Each part comes",
      " * with a handle which may be used in later versions to drag the part",
      " * around and move it to another position. Currently mainly used",
      " * for structuring large toolbars beyond the capabilities of the",
      " * {@link Separator}.",
      " *",
      " * @childControl handle {qx.ui.basic.Image} prat handle to visualize the separation",
      " * @childControl container {qx.ui.toolbar.PartContainer} holds the content of the toolbar part",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A part is a container for multiple toolbar buttons. Each part comes\n with a handle which may be used in later versions to drag the part\n around and move it to another position. Currently mainly used\n for structuring large toolbars beyond the capabilities of the\n {@link Separator}.</p>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "handle {qx.ui.basic.Image} prat handle to visualize the separation"
      },
      {
        "name": "@childControl",
        "body": "container {qx.ui.toolbar.PartContainer} holds the content of the toolbar part"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.MRemoteChildrenHandling"
  ],
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 41,
        "column": 2,
        "index": 1338
      },
      "end": {
        "line": 49,
        "column": 3,
        "index": 1522
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1732
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 1798
        }
      },
      "json": {
        "refine": true,
        "init": "toolbar/part"
      },
      "jsdoc": null,
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "show": {
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1869
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 1993
        }
      },
      "json": {
        "init": "both",
        "check": [
          "both",
          "label",
          "icon"
        ],
        "inheritable": true,
        "event": "changeShow"
      },
      "jsdoc": {
        "raw": [
          "* Whether icons, labels, both or none should be shown. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether icons, labels, both or none should be shown.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "spacing": {
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 2058
        },
        "end": {
          "line": 77,
          "column": 5,
          "index": 2172
        }
      },
      "json": {
        "nullable": true,
        "check": "Integer",
        "themeable": true,
        "apply": "_applySpacing"
      },
      "jsdoc": {
        "raw": [
          "* The spacing between every child of the toolbar "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The spacing between every child of the toolbar</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2590
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 3212
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "getChildrenContainer": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 3237
        },
        "end": {
          "line": 121,
          "column": 5,
          "index": 3315
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applySpacing": {
      "jsdoc": {
        "raw": [
          "",
          "    ---------------------------------------------------------------------------",
          "      PROPERTY APPLY ROUTINES",
          "    ---------------------------------------------------------------------------",
          "    "
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3527
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 3698
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "__onSyncAppearance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper which applies the left, right and middle states.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper which applies the left, right and middle states.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 3974
        },
        "end": {
          "line": 170,
          "column": 5,
          "index": 5083
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "addSeparator": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a separator to the toolbar part.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a separator to the toolbar part.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 5151
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 5220
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getMenuButtons": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all nested buttons which contains a menu to show. This is mainly",
          "     * used for keyboard support.",
          "     *",
          "     * @return {Array} List of all menu buttons",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all nested buttons which contains a menu to show. This is mainly\n used for keyboard support.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of all menu buttons",
            "type": "Array<any>",
            "description": "List of all menu buttons"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 5412
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 5731
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__forward": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Forward the call with the given function name to the children container",
          "     *",
          "     * @param functionName {String} name of the method to forward",
          "     * @param a1 {var?} first argument of the method to call",
          "     * @param a2 {var?} second argument of the method to call",
          "     * @param a3 {var?} third argument of the method to call",
          "     * @return {var} The return value of the forward method",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Forward the call with the given function name to the children container</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "functionName {String} name of the method to forward",
            "paramName": "functionName",
            "description": " name of the method to forward",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "a1 {var?} first argument of the method to call",
            "paramName": "a1",
            "description": " first argument of the method to call",
            "optional": true,
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a2 {var?} second argument of the method to call",
            "paramName": "a2",
            "description": " second argument of the method to call",
            "optional": true,
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a3 {var?} third argument of the method to call",
            "paramName": "a3",
            "description": " third argument of the method to call",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The return value of the forward method",
            "type": "var",
            "description": "The return value of the forward method"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1555
        },
        "end": {
          "line": 51,
          "column": 5,
          "index": 1782
        }
      },
      "type": "function",
      "params": [
        {
          "name": "functionName",
          "type": "string"
        },
        {
          "name": "a1",
          "type": "var",
          "optional": true
        },
        {
          "name": "a2",
          "type": "var",
          "optional": true
        },
        {
          "name": "a3",
          "type": "var",
          "optional": true
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)",
            "type": "qx.ui.core.LayoutItem[]",
            "description": "The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1979
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 2044
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.LayoutItem[]"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "boolean",
            "description": "Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2200
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2265
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to add.",
          "     * @param options {Map?null} Optional layout data for item.",
          "     * @return {qx.ui.core.Widget} This object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to add.",
            "paramName": "child",
            "description": " the item to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "description": "This object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2752
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2831
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child item.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to remove",
          "     * @return {qx.ui.core.Widget} This object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to remove",
            "paramName": "child",
            "description": " the item to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "description": "This object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 3030
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3097
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     * @return {Array} An array containing the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children.",
            "type": "Array<any>",
            "description": "An array containing the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 3213
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 3274
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given item if it is",
          "     * a child item. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given item is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given item if it is\n a child item. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to query for",
            "paramName": "child",
            "description": " the item to query for",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given item is no child of this layout.",
            "type": "Integer",
            "description": "The index position or <code>-1</code> when\n   the given item is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3909
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3978
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param index {Integer} Index, at which the item will be inserted",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the item will be inserted",
            "paramName": "index",
            "description": " Index, at which the item will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4541
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 4631
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add an item before another already inserted item",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param before {qx.ui.core.LayoutItem} item before the new item will be inserted.",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an item before another already inserted item\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} item before the new item will be inserted.",
            "paramName": "before",
            "description": " item before the new item will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 5224
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 5324
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "before",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add an item after another already inserted item",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param after {qx.ui.core.LayoutItem} item, after which the new item will be inserted",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an item after another already inserted item\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} item, after which the new item will be inserted",
            "paramName": "after",
            "description": " item, after which the new item will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5920
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 6016
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "after",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the item at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the item to remove.",
          "     * @return {qx.ui.core.LayoutItem} The removed item",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the item at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to remove.",
            "paramName": "index",
            "description": " Index of the item to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item",
            "type": "qx.ui.core.LayoutItem",
            "description": "The removed item"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 6507
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 6578
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.LayoutItem"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    }
  },
  "statics": {}
}