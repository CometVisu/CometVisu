{
  "version": 0.3,
  "lastModified": 1735383688601,
  "lastModifiedIso": "2024-12-28T11:01:28.601Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/window/Window.js",
  "type": "class",
  "location": {
    "start": {
      "line": 38,
      "column": 0,
      "index": 1534
    },
    "end": {
      "line": 1111,
      "column": 3,
      "index": 30599
    }
  },
  "className": "qx.ui.window.Window",
  "jsdoc": {
    "raw": [
      "*",
      " * A window widget",
      " *",
      " * More information can be found in the package description {@link qx.ui.window}.",
      " *",
      " * @childControl statusbar {qx.ui.container.Composite} statusbar container which shows the statusbar text",
      " * @childControl statusbar-text {qx.ui.basic.Label} text of the statusbar",
      " * @childControl pane {qx.ui.container.Composite} window pane which holds the content",
      " * @childControl captionbar {qx.ui.container.Composite} Container for all widgets inside the captionbar",
      " * @childControl icon {qx.ui.basic.Image} icon at the left of the captionbar",
      " * @childControl title {qx.ui.basic.Label} caption of the window",
      " * @childControl minimize-button {qx.ui.form.Button} button to minimize the window",
      " * @childControl restore-button {qx.ui.form.Button} button to restore the window",
      " * @childControl maximize-button {qx.ui.form.Button} button to maximize the window",
      " * @childControl close-button {qx.ui.form.Button} button to close the window",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A window widget\n More information can be found in the package description {@link qx.ui.window}.</p>"
      }
    ],
    "@childControl": [
      {
        "name": "@childControl",
        "body": "statusbar {qx.ui.container.Composite} statusbar container which shows the statusbar text"
      },
      {
        "name": "@childControl",
        "body": "statusbar-text {qx.ui.basic.Label} text of the statusbar"
      },
      {
        "name": "@childControl",
        "body": "pane {qx.ui.container.Composite} window pane which holds the content"
      },
      {
        "name": "@childControl",
        "body": "captionbar {qx.ui.container.Composite} Container for all widgets inside the captionbar"
      },
      {
        "name": "@childControl",
        "body": "icon {qx.ui.basic.Image} icon at the left of the captionbar"
      },
      {
        "name": "@childControl",
        "body": "title {qx.ui.basic.Label} caption of the window"
      },
      {
        "name": "@childControl",
        "body": "minimize-button {qx.ui.form.Button} button to minimize the window"
      },
      {
        "name": "@childControl",
        "body": "restore-button {qx.ui.form.Button} button to restore the window"
      },
      {
        "name": "@childControl",
        "body": "maximize-button {qx.ui.form.Button} button to maximize the window"
      },
      {
        "name": "@childControl",
        "body": "close-button {qx.ui.form.Button} button to close the window"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.MRemoteChildrenHandling",
    "qx.ui.core.MRemoteLayoutHandling",
    "qx.ui.core.MResizable",
    "qx.ui.core.MMovable",
    "qx.ui.core.MContentPadding"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "caption"
      },
      {
        "name": "icon"
      }
    ],
    "location": {
      "start": {
        "line": 59,
        "column": 2,
        "index": 2093
      },
      "end": {
        "line": 105,
        "column": 3,
        "index": 3373
      }
    }
  },
  "statics": {
    "DEFAULT_MANAGER_CLASS": {
      "jsdoc": {
        "raw": [
          "* @type {Class} The default window manager class. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Class} The default window manager class."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 115,
          "column": 4,
          "index": 3636
        },
        "end": {
          "line": 115,
          "column": 47,
          "index": 3679
        }
      },
      "appearsIn": []
    }
  },
  "events": {
    "beforeClose": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired before the window is closed.",
          "     *",
          "     * The close action can be prevented by calling",
          "     * {@link qx.event.type.Event#preventDefault} on the event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired before the window is closed.\n The close action can be prevented by calling\n {@link qx.event.type.Event#preventDefault} on the event object</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 4072
        },
        "end": {
          "line": 131,
          "column": 38,
          "index": 4106
        }
      }
    },
    "close": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired if the window is closed "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the window is closed</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4154
        },
        "end": {
          "line": 134,
          "column": 32,
          "index": 4182
        }
      }
    },
    "beforeMinimize": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired before the window is minimize.",
          "     *",
          "     * The minimize action can be prevented by calling",
          "     * {@link qx.event.type.Event#preventDefault} on the event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired before the window is minimize.\n The minimize action can be prevented by calling\n {@link qx.event.type.Event#preventDefault} on the event object</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 4381
        },
        "end": {
          "line": 142,
          "column": 41,
          "index": 4418
        }
      }
    },
    "minimize": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired if the window is minimized "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the window is minimized</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 145,
          "column": 4,
          "index": 4469
        },
        "end": {
          "line": 145,
          "column": 35,
          "index": 4500
        }
      }
    },
    "beforeMaximize": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired before the window is maximize.",
          "     *",
          "     * The maximize action can be prevented by calling",
          "     * {@link qx.event.type.Event#preventDefault} on the event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired before the window is maximize.\n The maximize action can be prevented by calling\n {@link qx.event.type.Event#preventDefault} on the event object</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4699
        },
        "end": {
          "line": 153,
          "column": 41,
          "index": 4736
        }
      }
    },
    "maximize": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired if the window is maximized "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the window is maximized</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4787
        },
        "end": {
          "line": 156,
          "column": 35,
          "index": 4818
        }
      }
    },
    "beforeRestore": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired before the window is restored from a minimized or maximized state.",
          "     *",
          "     * The restored action can be prevented by calling",
          "     * {@link qx.event.type.Event#preventDefault} on the event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired before the window is restored from a minimized or maximized state.\n The restored action can be prevented by calling\n {@link qx.event.type.Event#preventDefault} on the event object</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 5053
        },
        "end": {
          "line": 164,
          "column": 40,
          "index": 5089
        }
      }
    },
    "restore": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Fired if the window is restored from a minimized or maximized state "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the window is restored from a minimized or maximized state</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 5175
        },
        "end": {
          "line": 167,
          "column": 34,
          "index": 5205
        }
      }
    }
  },
  "properties": {
    "appearance": {
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 5635
        },
        "end": {
          "line": 187,
          "column": 5,
          "index": 5695
        }
      },
      "json": {
        "refine": true,
        "init": "window"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "visibility": {
      "location": {
        "start": {
          "line": 190,
          "column": 4,
          "index": 5720
        },
        "end": {
          "line": 193,
          "column": 5,
          "index": 5782
        }
      },
      "json": {
        "refine": true,
        "init": "excluded"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "focusable": {
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5807
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 5862
        }
      },
      "json": {
        "refine": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "active": {
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 6020
        },
        "end": {
          "line": 210,
          "column": 5,
          "index": 6135
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyActive",
        "event": "changeActive"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * If the window is active, only one window in a single qx.ui.window.Manager could",
          "     *  have set this to true at the same time.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If the window is active, only one window in a single qx.ui.window.Manager could\n  have set this to true at the same time.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "alwaysOnTop": {
      "location": {
        "start": {
          "line": 219,
          "column": 4,
          "index": 6383
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 6479
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeAlwaysOnTop"
      },
      "jsdoc": {
        "raw": [
          "* Should the window be always on top "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the window be always on top</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "modal": {
      "location": {
        "start": {
          "line": 226,
          "column": 4,
          "index": 6570
        },
        "end": {
          "line": 231,
          "column": 5,
          "index": 6682
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeModal",
        "apply": "_applyModal"
      },
      "jsdoc": {
        "raw": [
          "* Should the window be modal (this disables minimize and maximize buttons) "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the window be modal (this disables minimize and maximize buttons)</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "caption": {
      "location": {
        "start": {
          "line": 234,
          "column": 4,
          "index": 6724
        },
        "end": {
          "line": 238,
          "column": 5,
          "index": 6830
        }
      },
      "json": {
        "apply": "_applyCaptionBarChange",
        "event": "changeCaption",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* The text of the caption "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The text of the caption</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "icon": {
      "location": {
        "start": {
          "line": 241,
          "column": 4,
          "index": 6872
        },
        "end": {
          "line": 247,
          "column": 5,
          "index": 7018
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "apply": "_applyCaptionBarChange",
        "event": "changeIcon",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* The icon of the caption "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The icon of the caption</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "status": {
      "location": {
        "start": {
          "line": 250,
          "column": 4,
          "index": 7062
        },
        "end": {
          "line": 255,
          "column": 5,
          "index": 7179
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "apply": "_applyStatus",
        "event": "changeStatus"
      },
      "jsdoc": {
        "raw": [
          "* The text of the statusbar "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The text of the statusbar</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "showClose": {
      "location": {
        "start": {
          "line": 264,
          "column": 4,
          "index": 7436
        },
        "end": {
          "line": 269,
          "column": 5,
          "index": 7557
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyCaptionBarChange",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Should the close button be shown "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the close button be shown</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "showMaximize": {
      "location": {
        "start": {
          "line": 272,
          "column": 4,
          "index": 7611
        },
        "end": {
          "line": 277,
          "column": 5,
          "index": 7735
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyCaptionBarChange",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Should the maximize button be shown "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the maximize button be shown</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "showMinimize": {
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 7789
        },
        "end": {
          "line": 285,
          "column": 5,
          "index": 7913
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyCaptionBarChange",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Should the minimize button be shown "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the minimize button be shown</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "allowClose": {
      "location": {
        "start": {
          "line": 294,
          "column": 4,
          "index": 8193
        },
        "end": {
          "line": 298,
          "column": 5,
          "index": 8292
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyCaptionBarChange"
      },
      "jsdoc": {
        "raw": [
          "* Should the user have the ability to close the window "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the user have the ability to close the window</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "allowMaximize": {
      "location": {
        "start": {
          "line": 301,
          "column": 4,
          "index": 8366
        },
        "end": {
          "line": 305,
          "column": 5,
          "index": 8468
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyCaptionBarChange"
      },
      "jsdoc": {
        "raw": [
          "* Should the user have the ability to maximize the window "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the user have the ability to maximize the window</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "allowMinimize": {
      "location": {
        "start": {
          "line": 308,
          "column": 4,
          "index": 8542
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 8644
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyCaptionBarChange"
      },
      "jsdoc": {
        "raw": [
          "* Should the user have the ability to minimize the window "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the user have the ability to minimize the window</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "showStatusbar": {
      "location": {
        "start": {
          "line": 321,
          "column": 4,
          "index": 8890
        },
        "end": {
          "line": 325,
          "column": 5,
          "index": 8990
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "apply": "_applyShowStatusbar"
      },
      "jsdoc": {
        "raw": [
          "* Should the statusbar be shown "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the statusbar be shown</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "centerOnAppear": {
      "location": {
        "start": {
          "line": 334,
          "column": 4,
          "index": 9286
        },
        "end": {
          "line": 338,
          "column": 5,
          "index": 9388
        }
      },
      "json": {
        "init": false,
        "check": "Boolean",
        "apply": "_applyCenterOnAppear"
      },
      "jsdoc": {
        "raw": [
          "* Whether this window should be automatically centered when it appears "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether this window should be automatically centered when it appears</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "centerOnContainerResize": {
      "location": {
        "start": {
          "line": 344,
          "column": 4,
          "index": 9509
        },
        "end": {
          "line": 348,
          "column": 5,
          "index": 9629
        }
      },
      "json": {
        "init": false,
        "check": "Boolean",
        "apply": "_applyCenterOnContainerResize"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether this window should be automatically centered when its container",
          "     * is resized.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether this window should be automatically centered when its container\n is resized.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "autoDestroy": {
      "location": {
        "start": {
          "line": 369,
          "column": 4,
          "index": 10368
        },
        "end": {
          "line": 372,
          "column": 5,
          "index": 10430
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Should the window be automatically destroyed when it is closed.",
          "     *",
          "     * When false, closing the window behaves like hiding the window.",
          "     *",
          "     * When true, the window is removed from its container (the root), all",
          "     * listeners are removed, the window's widgets are removed, and the window",
          "     * is destroyed.",
          "     *",
          "     * NOTE: If any widgets that were added to this window require special",
          "     * clean-up, you should listen on the 'close' event and remove and clean",
          "     * up those widgets there.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Should the window be automatically destroyed when it is closed.\n When false, closing the window behaves like hiding the window.\n When true, the window is removed from its container (the root), all\n listeners are removed, the window's widgets are removed, and the window\n is destroyed.\n NOTE: If any widgets that were added to this window require special\n clean-up, you should listen on the 'close' event and remove and clean\n up those widgets there.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "resizableTop": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1925
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 1987
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "* Whether the top edge is resizable "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the top edge is resizable</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "resizableRight": {
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 2041
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2105
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "* Whether the right edge is resizable "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the right edge is resizable</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "resizableBottom": {
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 2160
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 2225
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "* Whether the bottom edge is resizable "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the bottom edge is resizable</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "resizableLeft": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2278
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2341
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "* Whether the left edge is resizable "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the left edge is resizable</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "resizable": {
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2442
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 2610
        }
      },
      "json": {
        "group": [
          "resizableTop",
          "resizableRight",
          "resizableBottom",
          "resizableLeft"
        ],
        "mode": "shorthand"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Property group to configure the resize behaviour for all edges at once",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property group to configure the resize behaviour for all edges at once</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "resizeSensitivity": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2663
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 2727
        }
      },
      "json": {
        "check": "Integer",
        "init": 5
      },
      "jsdoc": {
        "raw": [
          "* The tolerance to activate resizing "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The tolerance to activate resizing</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "useResizeFrame": {
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 2815
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 2879
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "* Whether a frame replacement should be used during the resize sequence "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a frame replacement should be used during the resize sequence</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "movable": {
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1068
        },
        "end": {
          "line": 39,
          "column": 5,
          "index": 1125
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "* Whether the widget is movable "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is movable</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "useMoveFrame": {
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1219
        },
        "end": {
          "line": 45,
          "column": 5,
          "index": 1282
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "* Whether to use a frame instead of the original widget during move sequences "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to use a frame instead of the original widget during move sequences</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "contentPaddingTop": {
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1146
        },
        "end": {
          "line": 42,
          "column": 5,
          "index": 1270
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyContentPadding",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Top padding of the content pane "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Top padding of the content pane</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "contentPaddingRight": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1322
        },
        "end": {
          "line": 50,
          "column": 5,
          "index": 1448
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyContentPadding",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Right padding of the content pane "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Right padding of the content pane</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "contentPaddingBottom": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1501
        },
        "end": {
          "line": 58,
          "column": 5,
          "index": 1628
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyContentPadding",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Bottom padding of the content pane "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Bottom padding of the content pane</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "contentPaddingLeft": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1679
        },
        "end": {
          "line": 66,
          "column": 5,
          "index": 1804
        }
      },
      "json": {
        "check": "Integer",
        "init": 0,
        "apply": "_applyContentPadding",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "* Left padding of the content pane "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Left padding of the content pane</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "contentPadding": {
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2270
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2486
        }
      },
      "json": {
        "group": [
          "contentPaddingTop",
          "contentPaddingRight",
          "contentPaddingBottom",
          "contentPaddingLeft"
        ],
        "mode": "shorthand",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The 'contentPadding' property is a shorthand property for setting 'contentPaddingTop',",
          "     * 'contentPaddingRight', 'contentPaddingBottom' and 'contentPaddingLeft'",
          "     * at the same time.",
          "     *",
          "     * If four values are specified they apply to top, right, bottom and left respectively.",
          "     * If there is only one value, it applies to all sides, if there are two or three,",
          "     * the missing values are taken from the opposite side.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The 'contentPadding' property is a shorthand property for setting 'contentPaddingTop',\n 'contentPaddingRight', 'contentPaddingBottom' and 'contentPaddingLeft'\n at the same time.\n If four values are specified they apply to top, right, bottom and left respectively.\n If there is only one value, it applies to all sides, if there are two or three,\n the missing values are taken from the opposite side.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    }
  },
  "members": {
    "__restoredTop": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} Original top value before maximation had occurred "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Original top value before maximation had occurred"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 10769
        },
        "end": {
          "line": 384,
          "column": 23,
          "index": 10788
        }
      },
      "appearsIn": []
    },
    "__restoredLeft": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} Original left value before maximation had occurred "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Original left value before maximation had occurred"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 387,
          "column": 4,
          "index": 10873
        },
        "end": {
          "line": 387,
          "column": 24,
          "index": 10893
        }
      },
      "appearsIn": []
    },
    "__centeringAppearId": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} Listener ID for centering on appear "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Listener ID for centering on appear"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 390,
          "column": 4,
          "index": 10963
        },
        "end": {
          "line": 390,
          "column": 29,
          "index": 10988
        }
      },
      "appearsIn": []
    },
    "__centeringResizeId": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} Listener ID for centering on resize "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Listener ID for centering on resize"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 393,
          "column": 4,
          "index": 11058
        },
        "end": {
          "line": 393,
          "column": 29,
          "index": 11083
        }
      },
      "appearsIn": []
    },
    "getChildrenContainer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The children container needed by the {@link qx.ui.core.MRemoteChildrenHandling}",
          "     * mixin",
          "     *",
          "     * @return {qx.ui.container.Composite} pane sub widget",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The children container needed by the {@link qx.ui.core.MRemoteChildrenHandling}\n mixin</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.container.Composite} pane sub widget",
            "type": "qx.ui.container.Composite",
            "description": "pane sub widget"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 407,
          "column": 4,
          "index": 11464
        },
        "end": {
          "line": 409,
          "column": 5,
          "index": 11537
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.container.Composite"
      },
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_forwardStates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @lint ignoreReferenceField(_forwardStates)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_forwardStates)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 415,
          "column": 4,
          "index": 11628
        },
        "end": {
          "line": 420,
          "column": 5,
          "index": 11739
        }
      },
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "setLayoutParent": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 423,
          "column": 4,
          "index": 11764
        },
        "end": {
          "line": 455,
          "column": 5,
          "index": 12771
        }
      },
      "type": "function",
      "params": [
        {
          "name": "parent"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget",
        "qx.ui.core.LayoutItem"
      ]
    },
    "_createChildControlImpl": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 458,
          "column": 4,
          "index": 12796
        },
        "end": {
          "line": 561,
          "column": 5,
          "index": 15712
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        },
        {
          "name": "hash"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_updateCaptionBar": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates the status and the visibility of each element of the captionbar.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the status and the visibility of each element of the captionbar.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 572,
          "column": 4,
          "index": 16017
        },
        "end": {
          "line": 624,
          "column": 5,
          "index": 17658
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "close": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Close the current window instance.",
          "     *",
          "     * Simply calls the {@link qx.ui.core.Widget#hide} method if the",
          "     * {@link qx.ui.win.Window#autoDestroy} property is false; otherwise",
          "     * removes and destroys the window.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Close the current window instance.\n Simply calls the {@link qx.ui.core.Widget#hide} method if the\n {@link qx.ui.win.Window#autoDestroy} property is false; otherwise\n removes and destroys the window.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 639,
          "column": 4,
          "index": 18102
        },
        "end": {
          "line": 662,
          "column": 5,
          "index": 18766
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "open": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Open the window.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Open the window.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 667,
          "column": 4,
          "index": 18813
        },
        "end": {
          "line": 671,
          "column": 5,
          "index": 18894
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "center": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Centers the window to the parent.",
          "     *",
          "     * This call works with the size of the parent widget and the size of",
          "     * the window as calculated in the last layout flush. It is best to call",
          "     * this method just after rendering the window in the \"resize\" event:",
          "     * <pre class='javascript'>",
          "     *   win.addListenerOnce(\"resize\", this.center, this);",
          "     * </pre>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Centers the window to the parent.\n This call works with the size of the parent widget and the size of\n the window as calculated in the last layout flush. It is best to call\n this method just after rendering the window in the \"resize\" event:\n </p>\n<pre class='javascript'>\n   win.addListenerOnce(\"resize\", this.center, this);\n </pre>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 683,
          "column": 4,
          "index": 19295
        },
        "end": {
          "line": 706,
          "column": 5,
          "index": 19859
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "maximize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Maximize the window.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Maximize the window.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 711,
          "column": 4,
          "index": 19910
        },
        "end": {
          "line": 753,
          "column": 5,
          "index": 21085
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "minimize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Minimized the window.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Minimized the window.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 758,
          "column": 4,
          "index": 21137
        },
        "end": {
          "line": 778,
          "column": 5,
          "index": 21694
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "restore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Restore the window to <code>\"normal\"</code>, if it is",
          "     * <code>\"maximized\"</code> or <code>\"minimized\"</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restore the window to <code>\"normal\"</code>, if it is\n <code>\"maximized\"</code> or <code>\"minimized\"</code>.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 784,
          "column": 4,
          "index": 21839
        },
        "end": {
          "line": 818,
          "column": 5,
          "index": 22559
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "moveTo": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the window's position relative to its parent",
          "     *",
          "     * @param left {Integer} The left position",
          "     * @param top {Integer} The top position",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the window's position relative to its parent</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "left {Integer} The left position",
            "paramName": "left",
            "description": " The left position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "top {Integer} The top position",
            "paramName": "top",
            "description": " The top position",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 826,
          "column": 4,
          "index": 22737
        },
        "end": {
          "line": 835,
          "column": 5,
          "index": 22899
        }
      },
      "type": "function",
      "params": [
        {
          "name": "left",
          "type": "Integer"
        },
        {
          "name": "top",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "isMaximized": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return <code>true</code> if the window is in maximized state,",
          "     * but note that the window in maximized state could also be invisible, this",
          "     * is equivalent to minimized. So use the {@link qx.ui.window.Window#getMode}",
          "     * to get the window mode.",
          "     *",
          "     * @return {Boolean} <code>true</code> if the window is maximized,",
          "     *   <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return <code>true</code> if the window is in maximized state,\n but note that the window in maximized state could also be invisible, this\n is equivalent to minimized. So use the {@link qx.ui.window.Window#getMode}\n to get the window mode.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the window is maximized,\n   <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>true</code> if the window is maximized,\n   <code>false</code> otherwise."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 846,
          "column": 4,
          "index": 23302
        },
        "end": {
          "line": 848,
          "column": 5,
          "index": 23364
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getMode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the window mode as <code>String</code>:",
          "     * <code>\"maximized\"</code>, <code>\"normal\"</code> or <code>\"minimized\"</code>.",
          "     *",
          "     * @return {String} The window mode as <code>String</code> value.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the window mode as <code>String</code>:\n <code>\"maximized\"</code>, <code>\"normal\"</code> or <code>\"minimized\"</code>.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The window mode as <code>String</code> value.",
            "type": "string",
            "description": "The window mode as <code>String</code> value."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 856,
          "column": 4,
          "index": 23602
        },
        "end": {
          "line": 866,
          "column": 5,
          "index": 23819
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "_applyActive": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 875,
          "column": 4,
          "index": 24053
        },
        "end": {
          "line": 881,
          "column": 5,
          "index": 24196
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyModal": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 884,
          "column": 4,
          "index": 24225
        },
        "end": {
          "line": 893,
          "column": 5,
          "index": 24452
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_getContentPaddingTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the element, to which the content padding should be applied.",
          "     *",
          "     * @return {qx.ui.core.Widget} The content padding target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the element, to which the content padding should be applied.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The content padding target.",
            "type": "qx.ui.core.Widget",
            "description": "The content padding target."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 900,
          "column": 4,
          "index": 24621
        },
        "end": {
          "line": 902,
          "column": 5,
          "index": 24698
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": []
    },
    "_applyShowStatusbar": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 905,
          "column": 4,
          "index": 24727
        },
        "end": {
          "line": 921,
          "column": 5,
          "index": 25224
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyCaptionBarChange": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 924,
          "column": 4,
          "index": 25253
        },
        "end": {
          "line": 926,
          "column": 5,
          "index": 25327
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyStatus": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 929,
          "column": 4,
          "index": 25356
        },
        "end": {
          "line": 934,
          "column": 5,
          "index": 25510
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyFocusable": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 937,
          "column": 4,
          "index": 25535
        },
        "end": {
          "line": 943,
          "column": 5,
          "index": 25796
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "overriddenFrom": "qx.ui.core.Widget",
      "appearsIn": [
        "qx.ui.core.Widget"
      ]
    },
    "_applyCenterOnAppear": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 945,
          "column": 4,
          "index": 25803
        },
        "end": {
          "line": 960,
          "column": 5,
          "index": 26260
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_applyCenterOnContainerResize": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 962,
          "column": 4,
          "index": 26267
        },
        "end": {
          "line": 981,
          "column": 5,
          "index": 26823
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_onWindowEventStop": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stops every event",
          "     *",
          "     * @param e {qx.event.type.Event} any event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops every event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} any event",
            "paramName": "e",
            "description": " any event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 994,
          "column": 4,
          "index": 27128
        },
        "end": {
          "line": 996,
          "column": 5,
          "index": 27184
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "_onWindowPointerDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Focuses the window instance.",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer down event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Focuses the window instance.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer down event",
            "paramName": "e",
            "description": " pointer down event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1003,
          "column": 4,
          "index": 27309
        },
        "end": {
          "line": 1005,
          "column": 5,
          "index": 27368
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onWindowFocusOut": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listens to the \"focusout\" event to deactivate the window (if the",
          "     * currently focused widget is not a child of the window)",
          "     *",
          "     * @param e {qx.event.type.Focus} focus event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listens to the \"focusout\" event to deactivate the window (if the\n currently focused widget is not a child of the window)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Focus} focus event",
            "paramName": "e",
            "description": " focus event",
            "type": "qx.event.type.Focus"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1013,
          "column": 4,
          "index": 27582
        },
        "end": {
          "line": 1024,
          "column": 5,
          "index": 27930
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Focus"
        }
      ],
      "appearsIn": []
    },
    "_onCaptionPointerDblTap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Maximizes the window or restores it if it is already",
          "     * maximized.",
          "     *",
          "     * @param e {qx.event.type.Pointer} double tap event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Maximizes the window or restores it if it is already\n maximized.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} double tap event",
            "paramName": "e",
            "description": " double tap event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1032,
          "column": 4,
          "index": 28095
        },
        "end": {
          "line": 1040,
          "column": 5,
          "index": 28380
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onMinimizeButtonTap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Minimizes the window, removes all states from the minimize button and",
          "     * stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer tap event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Minimizes the window, removes all states from the minimize button and\n stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer tap event",
            "paramName": "e",
            "description": " pointer tap event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1054,
          "column": 4,
          "index": 28861
        },
        "end": {
          "line": 1057,
          "column": 5,
          "index": 28970
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onRestoreButtonTap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Restores the window, removes all states from the restore button and",
          "     * stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restores the window, removes all states from the restore button and\n stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer pointer event",
            "paramName": "e",
            "description": " pointer pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1065,
          "column": 4,
          "index": 29242
        },
        "end": {
          "line": 1068,
          "column": 5,
          "index": 29348
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onMaximizeButtonTap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Maximizes the window, removes all states from the maximize button and",
          "     * stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Maximizes the window, removes all states from the maximize button and\n stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer pointer event",
            "paramName": "e",
            "description": " pointer pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1076,
          "column": 4,
          "index": 29622
        },
        "end": {
          "line": 1079,
          "column": 5,
          "index": 29731
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "_onCloseButtonTap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Closes the window, removes all states from the close button and",
          "     * stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Closes the window, removes all states from the close button and\n stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer pointer event",
            "paramName": "e",
            "description": " pointer pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1087,
          "column": 4,
          "index": 29999
        },
        "end": {
          "line": 1090,
          "column": 5,
          "index": 30099
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": []
    },
    "__forward": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Forward the call with the given function name to the children container",
          "     *",
          "     * @param functionName {String} name of the method to forward",
          "     * @param a1 {var?} first argument of the method to call",
          "     * @param a2 {var?} second argument of the method to call",
          "     * @param a3 {var?} third argument of the method to call",
          "     * @return {var} The return value of the forward method",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Forward the call with the given function name to the children container</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "functionName {String} name of the method to forward",
            "paramName": "functionName",
            "description": " name of the method to forward",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "a1 {var?} first argument of the method to call",
            "paramName": "a1",
            "description": " first argument of the method to call",
            "optional": true,
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a2 {var?} second argument of the method to call",
            "paramName": "a2",
            "description": " second argument of the method to call",
            "optional": true,
            "type": "var"
          },
          {
            "name": "@param",
            "body": "a3 {var?} third argument of the method to call",
            "paramName": "a3",
            "description": " third argument of the method to call",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The return value of the forward method",
            "type": "var",
            "description": "The return value of the forward method"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1555
        },
        "end": {
          "line": 51,
          "column": 5,
          "index": 1782
        }
      },
      "type": "function",
      "params": [
        {
          "name": "functionName",
          "type": "string"
        },
        {
          "name": "a1",
          "type": "var",
          "optional": true
        },
        {
          "name": "a2",
          "type": "var",
          "optional": true
        },
        {
          "name": "a3",
          "type": "var",
          "optional": true
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)",
            "type": "qx.ui.core.LayoutItem[]",
            "description": "The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1979
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 2044
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.LayoutItem[]"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "boolean",
            "description": "Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2200
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2265
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to add.",
          "     * @param options {Map?null} Optional layout data for item.",
          "     * @return {qx.ui.core.Widget} This object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to add.",
            "paramName": "child",
            "description": " the item to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "description": "This object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2752
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2831
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child item.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to remove",
          "     * @return {qx.ui.core.Widget} This object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to remove",
            "paramName": "child",
            "description": " the item to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} This object (for chaining support)",
            "type": "qx.ui.core.Widget",
            "description": "This object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 3030
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3097
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     * @return {Array} An array containing the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the removed children.",
            "type": "Array<any>",
            "description": "An array containing the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 3213
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 3274
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given item if it is",
          "     * a child item. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the item to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given item is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given item if it is\n a child item. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the item to query for",
            "paramName": "child",
            "description": " the item to query for",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given item is no child of this layout.",
            "type": "Integer",
            "description": "The index position or <code>-1</code> when\n   the given item is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3909
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3978
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param index {Integer} Index, at which the item will be inserted",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the item will be inserted",
            "paramName": "index",
            "description": " Index, at which the item will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4541
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 4631
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add an item before another already inserted item",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param before {qx.ui.core.LayoutItem} item before the new item will be inserted.",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an item before another already inserted item\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} item before the new item will be inserted.",
            "paramName": "before",
            "description": " item before the new item will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 5224
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 5324
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "before",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add an item after another already inserted item",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} item to add",
          "     * @param after {qx.ui.core.LayoutItem} item, after which the new item will be inserted",
          "     * @param options {Map?null} Optional layout data for item.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an item after another already inserted item\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} item to add",
            "paramName": "child",
            "description": " item to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} item, after which the new item will be inserted",
            "paramName": "after",
            "description": " item, after which the new item will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for item.",
            "paramName": "options",
            "description": " Optional layout data for item.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5920
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 6016
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "after",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the item at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the item to remove.",
          "     * @return {qx.ui.core.LayoutItem} The removed item",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the item at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to remove.",
            "paramName": "index",
            "description": " Index of the item to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The removed item",
            "type": "qx.ui.core.LayoutItem",
            "description": "The removed item"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 6507
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 6578
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.LayoutItem"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteChildrenHandling"
      ],
      "mixin": "qx.ui.core.MRemoteChildrenHandling"
    },
    "setLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set a layout manager for the widget. A a layout manager can only be connected",
          "     * with one widget. Reset the connection with a previous widget first, if you",
          "     * like to use it in another widget instead.",
          "     *",
          "     * @param layout {qx.ui.layout.Abstract} The new layout or",
          "     *     <code>null</code> to reset the layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a layout manager for the widget. A a layout manager can only be connected\n with one widget. Reset the connection with a previous widget first, if you\n like to use it in another widget instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "layout {qx.ui.layout.Abstract} The new layout or\n     <code>null</code> to reset the layout.",
            "paramName": "layout",
            "description": " The new layout or\n     <code>null</code> to reset the layout.",
            "type": "qx.ui.layout.Abstract"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1507
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1713
        }
      },
      "type": "function",
      "params": [
        {
          "name": "layout",
          "type": "qx.ui.layout.Abstract"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MRemoteLayoutHandling"
      ],
      "mixin": "qx.ui.core.MRemoteLayoutHandling"
    },
    "getLayout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the widget's layout manager.",
          "     *",
          "     * @return {qx.ui.layout.Abstract} The widget's layout manager",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget's layout manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Abstract} The widget's layout manager",
            "type": "qx.ui.layout.Abstract",
            "description": "The widget's layout manager"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1850
        },
        "end": {
          "line": 65,
          "column": 5,
          "index": 2035
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.layout.Abstract"
      },
      "appearsIn": [
        "qx.ui.core.MRemoteLayoutHandling"
      ],
      "mixin": "qx.ui.core.MRemoteLayoutHandling"
    },
    "__dragDropHandler": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3140
        },
        "end": {
          "line": 118,
          "column": 27,
          "index": 3163
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__resizeFrame": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 3169
        },
        "end": {
          "line": 119,
          "column": 23,
          "index": 3188
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__resizeActive": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3194
        },
        "end": {
          "line": 120,
          "column": 24,
          "index": 3214
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__resizeLeft": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3220
        },
        "end": {
          "line": 121,
          "column": 22,
          "index": 3238
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__resizeTop": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3244
        },
        "end": {
          "line": 122,
          "column": 21,
          "index": 3261
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__resizeStart": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3267
        },
        "end": {
          "line": 123,
          "column": 23,
          "index": 3286
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__resizeRange": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3292
        },
        "end": {
          "line": 124,
          "column": 23,
          "index": 3311
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "RESIZE_TOP": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3318
        },
        "end": {
          "line": 126,
          "column": 17,
          "index": 3331
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "RESIZE_BOTTOM": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3337
        },
        "end": {
          "line": 127,
          "column": 20,
          "index": 3353
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "RESIZE_LEFT": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3359
        },
        "end": {
          "line": 128,
          "column": 18,
          "index": 3373
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "RESIZE_RIGHT": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3379
        },
        "end": {
          "line": 129,
          "column": 19,
          "index": 3394
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "_getResizeFrame": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the widget, which draws the resize/move frame. The resize frame is",
          "     * shared by all widgets and is added to the root widget.",
          "     *",
          "     * @return {qx.ui.core.Widget} The resize frame",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget, which draws the resize/move frame. The resize frame is\n shared by all widgets and is added to the root widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The resize frame",
            "type": "qx.ui.core.Widget",
            "description": "The resize frame"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 3811
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 4116
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__showResizeFrame": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates, shows and syncs the frame with the widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates, shows and syncs the frame with the widget.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4198
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 4541
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__computeResizeResult": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Computes the new boundaries at each interval",
          "     * of the resize sequence.",
          "     *",
          "     * @param e {qx.event.type.Pointer} Last pointer event",
          "     * @return {Map} A map with the computed boundaries",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the new boundaries at each interval\n of the resize sequence.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Last pointer event",
            "paramName": "e",
            "description": " Last pointer event",
            "type": "qx.event.type.Pointer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the computed boundaries",
            "type": "Map<any, any>",
            "description": "A map with the computed boundaries"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 4965
        },
        "end": {
          "line": 258,
          "column": 5,
          "index": 6888
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__resizeCursors": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Maps internal states to cursor symbols to use",
          "     *",
          "     * @lint ignoreReferenceField(__resizeCursors)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maps internal states to cursor symbols to use"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__resizeCursors)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 7034
        },
        "end": {
          "line": 275,
          "column": 5,
          "index": 7231
        }
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__computeResizeMode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates the internally stored resize mode",
          "     *",
          "     * @param e {qx.event.type.Pointer} Last pointer event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the internally stored resize mode</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Last pointer event",
            "paramName": "e",
            "description": " Last pointer event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 282,
          "column": 4,
          "index": 7369
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 8120
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__computeResizeActive": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for computing the proper resize action based on the",
          "     * given parameters.",
          "     *",
          "     * @param location {Map} The current location of the widget.",
          "     * @param pointerLeft {Integer} The left position of the pointer.",
          "     * @param pointerTop {Integer} The top position of the pointer.",
          "     * @param pointerTolerance {Integer} The desired distance to the edge.",
          "     * @return {Integer} The resize active number.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for computing the proper resize action based on the\n given parameters.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "location {Map} The current location of the widget.",
            "paramName": "location",
            "description": " The current location of the widget.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "pointerLeft {Integer} The left position of the pointer.",
            "paramName": "pointerLeft",
            "description": " The left position of the pointer.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "pointerTop {Integer} The top position of the pointer.",
            "paramName": "pointerTop",
            "description": " The top position of the pointer.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "pointerTolerance {Integer} The desired distance to the edge.",
            "paramName": "pointerTolerance",
            "description": " The desired distance to the edge.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The resize active number.",
            "type": "Integer",
            "description": "The resize active number."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 322,
          "column": 4,
          "index": 8579
        },
        "end": {
          "line": 363,
          "column": 5,
          "index": 9932
        }
      },
      "type": "function",
      "params": [
        {
          "name": "location",
          "type": "Map<any, any>"
        },
        {
          "name": "pointerLeft",
          "type": "Integer"
        },
        {
          "name": "pointerTop",
          "type": "Integer"
        },
        {
          "name": "pointerTolerance",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__onResizePointerDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the pointer down event",
          "     *",
          "     * @param e {qx.event.type.Pointer} The pointer event instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the pointer down event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointer event instance",
            "paramName": "e",
            "description": " The pointer event instance",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 376,
          "column": 4,
          "index": 10280
        },
        "end": {
          "line": 427,
          "column": 5,
          "index": 11618
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__onResizePointerUp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the pointer up event",
          "     *",
          "     * @param e {qx.event.type.Pointer} The pointer event instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the pointer up event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointer event instance",
            "paramName": "e",
            "description": " The pointer event instance",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 434,
          "column": 4,
          "index": 11761
        },
        "end": {
          "line": 478,
          "column": 5,
          "index": 12793
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__onResizeLoseCapture": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for <code>losecapture</code> event.",
          "     *",
          "     * @param e {qx.event.type.Event} Lose capture event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for <code>losecapture</code> event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Lose capture event",
            "paramName": "e",
            "description": " Lose capture event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 485,
          "column": 4,
          "index": 12938
        },
        "end": {
          "line": 502,
          "column": 5,
          "index": 13343
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__onResizePointerMove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the pointer move event",
          "     *",
          "     * @param e {qx.event.type.Pointer} The pointer event instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the pointer move event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointer event instance",
            "paramName": "e",
            "description": " The pointer event instance",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 509,
          "column": 4,
          "index": 13488
        },
        "end": {
          "line": 561,
          "column": 5,
          "index": 14988
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__onResizePointerOut": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the pointer out event",
          "     *",
          "     * @param e {qx.event.type.Pointer} The pointer event instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the pointer out event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointer event instance",
            "paramName": "e",
            "description": " The pointer event instance",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 568,
          "column": 4,
          "index": 15132
        },
        "end": {
          "line": 579,
          "column": 5,
          "index": 15527
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MResizable"
      ],
      "mixin": "qx.ui.core.MResizable"
    },
    "__moveHandle": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1490
        },
        "end": {
          "line": 55,
          "column": 22,
          "index": 1508
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__moveFrame": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1514
        },
        "end": {
          "line": 56,
          "column": 21,
          "index": 1531
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__dragRange": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1537
        },
        "end": {
          "line": 57,
          "column": 21,
          "index": 1554
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__dragLeft": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1560
        },
        "end": {
          "line": 58,
          "column": 20,
          "index": 1576
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__dragTop": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1582
        },
        "end": {
          "line": 59,
          "column": 19,
          "index": 1597
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__parentLeft": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1603
        },
        "end": {
          "line": 60,
          "column": 22,
          "index": 1621
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__parentTop": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1627
        },
        "end": {
          "line": 61,
          "column": 21,
          "index": 1644
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__blockerAdded": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1651
        },
        "end": {
          "line": 63,
          "column": 25,
          "index": 1672
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__oldBlockerColor": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1678
        },
        "end": {
          "line": 64,
          "column": 27,
          "index": 1701
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__oldBlockerOpacity": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1707
        },
        "end": {
          "line": 65,
          "column": 26,
          "index": 1729
        }
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "_activateMoveHandle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Configures the given widget as a move handle",
          "     *",
          "     * @param widget {qx.ui.core.Widget} Widget to activate as move handle",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Configures the given widget as a move handle</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to activate as move handle",
            "paramName": "widget",
            "description": " Widget to activate as move handle",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2081
        },
        "end": {
          "line": 88,
          "column": 5,
          "index": 2543
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__getMoveFrame": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the widget, which draws the resize/move frame.",
          "     *",
          "     * @return {qx.ui.core.Widget} The resize frame",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget, which draws the resize/move frame.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The resize frame",
            "type": "qx.ui.core.Widget",
            "description": "The resize frame"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2683
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 2981
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__showMoveFrame": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates, shows and syncs the frame with the widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates, shows and syncs the frame with the widget.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 3063
        },
        "end": {
          "line": 124,
          "column": 5,
          "index": 3405
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__computeMoveCoordinates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Computes the new drag coordinates",
          "     *",
          "     * @param e {qx.event.type.Pointer} Pointer event",
          "     * @return {Map} A map with the computed drag coordinates",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the new drag coordinates</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Pointer event",
            "paramName": "e",
            "description": " Pointer event",
            "type": "qx.event.type.Pointer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the computed drag coordinates",
            "type": "Map<any, any>",
            "description": "A map with the computed drag coordinates"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3786
        },
        "end": {
          "line": 160,
          "column": 5,
          "index": 4450
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "_onMoveRoll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Roll handler which prevents the scrolling via tap & move on parent widgets",
          "     * during the move of the widget.",
          "     * @param e {qx.event.type.Roll} The roll event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Roll handler which prevents the scrolling via tap &amp; move on parent widgets\n during the move of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} The roll event",
            "paramName": "e",
            "description": " The roll event",
            "type": "qx.event.type.Roll"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 4846
        },
        "end": {
          "line": 175,
          "column": 5,
          "index": 4884
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Roll"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "_onMovePointerDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Enables the capturing of the caption bar and prepares the drag session and the",
          "     * appearance (translucent, frame or opaque) for the moving of the window.",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer down event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Enables the capturing of the caption bar and prepares the drag session and the\n appearance (translucent, frame or opaque) for the moving of the window.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer down event",
            "paramName": "e",
            "description": " pointer down event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 5138
        },
        "end": {
          "line": 237,
          "column": 5,
          "index": 6763
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "_onMovePointerMove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Does the moving of the window by rendering the position",
          "     * of the window (or frame) at runtime using direct dom methods.",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer move event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does the moving of the window by rendering the position\n of the window (or frame) at runtime using direct dom methods.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer move event",
            "paramName": "e",
            "description": " pointer move event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 245,
          "column": 4,
          "index": 6984
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 7610
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "_onMovePointerUp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disables the capturing of the caption bar and moves the window",
          "     * to the last position of the drag session. Also restores the appearance",
          "     * of the window.",
          "     *",
          "     * @param e {qx.event.type.Pointer} pointer up event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disables the capturing of the caption bar and moves the window\n to the last position of the drag session. Also restores the appearance\n of the window.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointer up event",
            "paramName": "e",
            "description": " pointer up event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 276,
          "column": 4,
          "index": 7867
        },
        "end": {
          "line": 321,
          "column": 5,
          "index": 9184
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Pointer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__onMoveLoseCapture": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for <code>losecapture</code> event.",
          "     *",
          "     * @param e {qx.event.type.Event} Lose capture event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for <code>losecapture</code> event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Lose capture event",
            "paramName": "e",
            "description": " Lose capture event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 328,
          "column": 4,
          "index": 9329
        },
        "end": {
          "line": 341,
          "column": 5,
          "index": 9627
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MMovable"
      ],
      "mixin": "qx.ui.core.MMovable"
    },
    "__contentPaddingSetter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Maps property names of content padding to the setter of the padding",
          "     *",
          "     * @lint ignoreReferenceField(__contentPaddingSetter)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maps property names of content padding to the setter of the padding"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__contentPaddingSetter)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 2915
        },
        "end": {
          "line": 107,
          "column": 5,
          "index": 3125
        }
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "__contentPaddingThemedSetter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Maps property names of content padding to the themed setter of the padding",
          "     *",
          "     * @lint ignoreReferenceField(__contentPaddingThemedSetter)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maps property names of content padding to the themed setter of the padding"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__contentPaddingThemedSetter)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3313
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 3553
        }
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "__contentPaddingResetter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Maps property names of content padding to the resetter of the padding",
          "     *",
          "     * @lint ignoreReferenceField(__contentPaddingResetter)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maps property names of content padding to the resetter of the padding"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__contentPaddingResetter)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3732
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 3952
        }
      },
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    },
    "_applyContentPadding": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 3981
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4585
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        },
        {
          "name": "name"
        },
        {
          "name": "variant"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MContentPadding"
      ],
      "mixin": "qx.ui.core.MContentPadding"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 1093,
        "column": 2,
        "index": 30108
      },
      "end": {
        "line": 1110,
        "column": 3,
        "index": 30595
      }
    }
  }
}