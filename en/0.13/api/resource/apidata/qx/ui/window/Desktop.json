{
  "version": 0.3,
  "lastModified": 1735222258290,
  "lastModifiedIso": "2024-12-26T14:10:58.290Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/window/Desktop.js",
  "type": "class",
  "location": {
    "start": {
      "line": 24,
      "column": 0,
      "index": 663
    },
    "end": {
      "line": 53,
      "column": 3,
      "index": 1417
    }
  },
  "className": "qx.ui.window.Desktop",
  "jsdoc": {
    "raw": [
      "*",
      " * The desktop is a widget, which can act as container for windows. It can be",
      " * used to define a clipping region for internal windows e.g. to create",
      " * an MDI like application.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The desktop is a widget, which can act as container for windows. It can be\n used to define a clipping region for internal windows e.g. to create\n an MDI like application.</p>"
      }
    ]
  },
  "superClass": "qx.ui.core.Widget",
  "mixins": [
    "qx.ui.core.MChildrenHandling",
    "qx.ui.window.MDesktop",
    "qx.ui.core.MBlocker"
  ],
  "interfaces": [
    "qx.ui.window.IDesktop"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "windowManager"
      }
    ],
    "location": {
      "start": {
        "line": 39,
        "column": 2,
        "index": 1088
      },
      "end": {
        "line": 52,
        "column": 3,
        "index": 1413
      }
    }
  },
  "members": {
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem[]} The children array (Arrays are\n   reference types, please do not modify them in-place)",
            "type": "qx.ui.core.LayoutItem[]",
            "description": "The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1328
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1383
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.LayoutItem[]"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "boolean",
            "description": "Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1539
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1594
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given widget if it is",
          "     * a child widget. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.Widget} the widget to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given widget is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout.",
            "type": "Integer",
            "description": "The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2233
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * The supported keys of the layout options map depend on the layout manager",
          "     * used to position the widget. The options are documented in the class",
          "     * documentation of each layout manager {@link qx.ui.layout}.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to add.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.\n The supported keys of the layout options map depend on the layout manager\n used to position the widget. The options are documented in the class\n documentation of each layout manager {@link qx.ui.layout}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2711
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2771
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child widget at the specified index",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param index {Integer} Index, at which the widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 3347
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 3425
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget before another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted.",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.LayoutItem} Widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " Widget before the new widget will be inserted.",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 4029
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 4117
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "before",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget after another already inserted widget",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} Widget to add",
          "     * @param after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.LayoutItem} Widget, after which the new widget will be inserted",
            "paramName": "after",
            "description": " Widget, after which the new widget will be inserted",
            "type": "qx.ui.core.LayoutItem"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4724
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 4808
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "after",
          "type": "qx.ui.core.LayoutItem"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child widget.",
          "     *",
          "     * @param child {qx.ui.core.LayoutItem} the widget to remove",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.LayoutItem} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.LayoutItem"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 4941
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4989
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.LayoutItem"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the widget at the specified index.",
          "     *",
          "     * This method works on the widget's children list. Some layout managers",
          "     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional",
          "     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})",
          "     * ignore the children order for the layout process.",
          "     *",
          "     * @param index {Integer} Index of the widget to remove.",
          "     * @return {qx.ui.core.LayoutItem} The child removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.\n This method works on the widget's children list. Some layout managers\n (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n ignore the children order for the layout process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.LayoutItem} The child removed.",
            "type": "qx.ui.core.LayoutItem",
            "description": "The child removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 5486
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 5545
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.LayoutItem"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     *",
          "     * @return {Array} An array of the removed children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of the removed children.",
            "type": "Array<any>",
            "description": "An array of the removed children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 5660
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5711
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    },
    "__windows": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1516
        },
        "end": {
          "line": 64,
          "column": 19,
          "index": 1531
        }
      },
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "__manager": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1537
        },
        "end": {
          "line": 65,
          "column": 19,
          "index": 1552
        }
      },
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "getWindowManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the desktop's window manager. Each desktop must have a window manager.",
          "     * If none is configured the default window manager {@link qx.ui.window.Window#DEFAULT_MANAGER_CLASS}",
          "     * is used.",
          "     *",
          "     * @return {qx.ui.window.IWindowManager} The desktop's window manager",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the desktop's window manager. Each desktop must have a window manager.\n If none is configured the default window manager {@link qx.ui.window.Window#DEFAULT<em>MANAGER</em>CLASS}\n is used.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.window.IWindowManager} The desktop's window manager"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 1860
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2032
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "supportsMaximize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the configured layout supports a maximized window",
          "     * e.g. is a Canvas.",
          "     *",
          "     * @return {Boolean} Whether the layout supports maximized windows",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the configured layout supports a maximized window\n e.g. is a Canvas.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the layout supports maximized windows"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2223
        },
        "end": {
          "line": 89,
          "column": 5,
          "index": 2268
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop",
        "qx.ui.window.IDesktop"
      ]
    },
    "setWindowManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the desktop's window manager",
          "     *",
          "     * @param manager {qx.ui.window.IWindowManager} The window manager",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the desktop's window manager</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "manager {qx.ui.window.IWindowManager} The window manager"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 96,
          "column": 4,
          "index": 2410
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 2585
        }
      },
      "type": "function",
      "params": [
        {
          "name": "manager"
        }
      ],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop",
        "qx.ui.window.IDesktop"
      ]
    },
    "_onChangeActive": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called if one of the managed windows changes its active",
          "     * state.",
          "     *",
          "     * @param e {qx.event.type.Event} the event object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called if one of the managed windows changes its active\n state.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} the event object."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 2763
        },
        "end": {
          "line": 117,
          "column": 5,
          "index": 2963
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "_applyActiveWindow": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 2992
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 3137
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "_onChangeModal": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called if one of the managed windows changes its modality",
          "     *",
          "     * @param e {qx.event.type.Event} the event object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called if one of the managed windows changes its modality</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} the event object."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 3303
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 3373
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e"
        }
      ],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "_onChangeVisibility": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called if one of the managed windows changes its visibility",
          "     * state.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called if one of the managed windows changes its visibility\n state.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3492
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 3566
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "_afterAddChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Overrides the method {@link qx.ui.core.Widget#_afterAddChild}",
          "     *",
          "     * @param win {qx.ui.core.Widget} added widget",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Overrides the method {@link qx.ui.core.Widget#_afterAddChild}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {qx.ui.core.Widget} added widget"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 147,
          "column": 4,
          "index": 3716
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 3898
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win"
        }
      ],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop",
        "qx.ui.core.Widget"
      ]
    },
    "_addWindow": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles the case, when a window is added to the desktop.",
          "     *",
          "     * @param win {qx.ui.window.Window} Window, which has been added",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles the case, when a window is added to the desktop.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {qx.ui.window.Window} Window, which has been added"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4061
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 4557
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win"
        }
      ],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "_afterRemoveChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Overrides the method {@link qx.ui.core.Widget#_afterRemoveChild}",
          "     *",
          "     * @param win {qx.ui.core.Widget} removed widget",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Overrides the method {@link qx.ui.core.Widget#_afterRemoveChild}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {qx.ui.core.Widget} removed widget"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 4712
        },
        "end": {
          "line": 191,
          "column": 5,
          "index": 4900
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win"
        }
      ],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop",
        "qx.ui.core.Widget"
      ]
    },
    "_removeWindow": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handles the case, when a window is removed from the desktop.",
          "     *",
          "     * @param win {qx.ui.window.Window} Window, which has been removed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handles the case, when a window is removed from the desktop.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {qx.ui.window.Window} Window, which has been removed"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 5069
        },
        "end": {
          "line": 210,
          "column": 5,
          "index": 5524
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win"
        }
      ],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "getWindows": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get a list of all windows added to the desktop (including hidden windows)",
          "     *",
          "     * @return {qx.ui.window.Window[]} Array of managed windows",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a list of all windows added to the desktop (including hidden windows)</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.window.Window[]} Array of managed windows"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 217,
          "column": 4,
          "index": 5699
        },
        "end": {
          "line": 222,
          "column": 5,
          "index": 5814
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop",
        "qx.ui.window.IDesktop"
      ]
    },
    "__blocker": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1330
        },
        "end": {
          "line": 54,
          "column": 19,
          "index": 1345
        }
      },
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "_createBlocker": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Template method for creating the blocker item.",
          "     * @return {qx.ui.core.Blocker} The blocker to use.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Template method for creating the blocker item.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Blocker} The blocker to use.",
            "type": "qx.ui.core.Blocker",
            "description": "The blocker to use."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1478
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1545
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Blocker"
      },
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "_applyBlockerColor": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1574
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 1653
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "_applyBlockerOpacity": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 1682
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 1765
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "block": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Block all events from this widget by placing a transparent overlay widget,",
          "     * which receives all events, exactly over the widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Block all events from this widget by placing a transparent overlay widget,\n which receives all events, exactly over the widget.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 1929
        },
        "end": {
          "line": 80,
          "column": 5,
          "index": 1977
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "isBlocked": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns whether the widget is blocked.",
          "     *",
          "     * @return {Boolean} Whether the widget is blocked.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the widget is blocked.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the widget is blocked.",
            "type": "boolean",
            "description": "Whether the widget is blocked."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2109
        },
        "end": {
          "line": 89,
          "column": 5,
          "index": 2187
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.core.MBlocker",
        "qx.ui.window.IDesktop"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "unblock": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Unblock the widget blocked by {@link #block}, but it takes care of",
          "     * the amount of {@link #block} calls. The blocker is only removed if",
          "     * the number of {@link #unblock} calls is identical to {@link #block} calls.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Unblock the widget blocked by {@link #block}, but it takes care of\n the amount of {@link #block} calls. The blocker is only removed if\n the number of {@link #unblock} calls is identical to {@link #block} calls.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 96,
          "column": 4,
          "index": 2440
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2527
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MBlocker",
        "qx.ui.window.IDesktop"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "forceUnblock": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Unblock the widget blocked by {@link #block}, but it doesn't take care of",
          "     * the amount of {@link #block} calls. The blocker is directly removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Unblock the widget blocked by {@link #block}, but it doesn't take care of\n the amount of {@link #block} calls. The blocker is directly removed.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 2707
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 2804
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "blockContent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Block direct child widgets with a zIndex below <code>zIndex</code>",
          "     *",
          "     * @param zIndex {Integer} All child widgets with a zIndex below this value",
          "     *     will be blocked",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Block direct child widgets with a zIndex below <code>zIndex</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "zIndex {Integer} All child widgets with a zIndex below this value\n     will be blocked",
            "paramName": "zIndex",
            "description": " All child widgets with a zIndex below this value\n     will be blocked",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3015
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3089
        }
      },
      "type": "function",
      "params": [
        {
          "name": "zIndex",
          "type": "Integer"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MBlocker",
        "qx.ui.window.IDesktop"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "getBlocker": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the blocker",
          "     *",
          "     * @return {qx.ui.core.Blocker} The blocker",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the blocker</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Blocker} The blocker",
            "type": "qx.ui.core.Blocker",
            "description": "The blocker"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3190
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 3324
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Blocker"
      },
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    }
  },
  "statics": {
    "remap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mapping of protected methods to public.",
          "     * This omits an additional function call when using these methods. Call",
          "     * this methods in the defer block of the including class.",
          "     *",
          "     * @param members {Map} The including classes members map",
          "     * @deprecated {7.0} this is not necessary in modern compilers and leads to unexpected behaviour",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of protected methods to public.\n This omits an additional function call when using these methods. Call\n this methods in the defer block of the including class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "members {Map} The including classes members map",
            "paramName": "members",
            "description": " The including classes members map",
            "type": "Map<any, any>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{7.0} this is not necessary in modern compilers and leads to unexpected behaviour"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 6292
        },
        "end": {
          "line": 199,
          "column": 5,
          "index": 6916
        }
      },
      "type": "function",
      "params": [
        {
          "name": "members",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": [
        "qx.ui.core.MChildrenHandling"
      ],
      "mixin": "qx.ui.core.MChildrenHandling"
    }
  },
  "properties": {
    "activeWindow": {
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 934
        },
        "end": {
          "line": 42,
          "column": 5,
          "index": 1100
        }
      },
      "json": {
        "check": "qx.ui.window.Window",
        "apply": "_applyActiveWindow",
        "event": "changeActiveWindow",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The currently active window",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The currently active window</p>"
          }
        ]
      },
      "mixin": "qx.ui.window.MDesktop",
      "appearsIn": [
        "qx.ui.window.MDesktop"
      ]
    },
    "blockerColor": {
      "location": {
        "start": {
          "line": 34,
          "column": 4,
          "index": 993
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1133
        }
      },
      "json": {
        "check": "Color",
        "nullable": true,
        "apply": "_applyBlockerColor",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Color of the blocker",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Color of the blocker</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    },
    "blockerOpacity": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1186
        },
        "end": {
          "line": 50,
          "column": 5,
          "index": 1306
        }
      },
      "json": {
        "check": "Number",
        "init": 1,
        "apply": "_applyBlockerOpacity",
        "themeable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Opacity of the blocker",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Opacity of the blocker</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.core.MBlocker"
      ],
      "mixin": "qx.ui.core.MBlocker"
    }
  }
}