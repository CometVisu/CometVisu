{
  "version": 0.3,
  "lastModified": 1731947916435,
  "lastModifiedIso": "2024-11-18T16:38:36.435Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/core/MChildrenHandling.js",
  "type": "mixin",
  "location": {
    "start": {
      "line": 27,
      "column": 0,
      "index": 846
    },
    "end": {
      "line": 164,
      "column": 3,
      "index": 4811
    }
  },
  "className": "qx.ui.mobile.core.MChildrenHandling",
  "jsdoc": {
    "raw": [
      "*",
      " * This mixin exposes all basic methods to manage widget children as public methods.",
      " * It can only be included into instances of {@link Widget}.",
      " *",
      " * To optimize the method calls the including widget should call the method",
      " * {@link #remap} in its defer function. This will map the protected",
      " * methods to the public ones and save one method call for each function.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This mixin exposes all basic methods to manage widget children as public methods.\n It can only be included into instances of {@link Widget}.\n To optimize the method calls the including widget should call the method\n {@link #remap} in its defer function. This will map the protected\n methods to the public ones and save one method call for each function.</p>"
      }
    ]
  },
  "members": {
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the children list",
          "     *",
          "     * @return {qx.ui.core.Widget[]} The children array (Arrays are",
          "     *   reference types, please do not modify them in-place)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children list</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The children array (Arrays are\n   reference types, please do not modify them in-place)",
            "type": "qx.ui.core.Widget[]",
            "description": "The children array (Arrays are\n   reference types, please do not modify them in-place)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 41,
          "column": 4,
          "index": 1290
        },
        "end": {
          "line": 43,
          "column": 5,
          "index": 1345
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget[]"
      },
      "appearsIn": []
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the widget contains children.",
          "     *",
          "     * @return {Boolean} Returns <code>true</code> when the widget has children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget contains children.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget has children.",
            "type": "boolean",
            "description": "Returns <code>true</code> when the widget has children."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1501
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1556
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index position of the given widget if it is",
          "     * a child widget. Otherwise it returns <code>-1</code>.",
          "     *",
          "     * @param child {qx.ui.core.Widget} the widget to query for",
          "     * @return {Integer} The index position or <code>-1</code> when",
          "     *   the given widget is no child of this layout.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout.",
            "type": "Integer",
            "description": "The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1896
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 1953
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new child widget.",
          "     *",
          "     * @param child {qx.ui.core.Widget} the widget to add.",
          "     * @param layoutProperties {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget.",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 2149
        },
        "end": {
          "line": 74,
          "column": 5,
          "index": 2227
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "layoutProperties",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a child widget at the specified index",
          "     *",
          "     * @param child {qx.ui.core.Widget} widget to add",
          "     * @param index {Integer} Index, at which the widget will be inserted",
          "     * @param options {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2500
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2578
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "addBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget before another already inserted widget",
          "     *",
          "     * @param child {qx.ui.core.Widget} Widget to add",
          "     * @param before {qx.ui.core.Widget} Widget before the new widget will be inserted.",
          "     * @param layoutProperties {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "before {qx.ui.core.Widget} Widget before the new widget will be inserted.",
            "paramName": "before",
            "description": " Widget before the new widget will be inserted.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget.",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2884
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 2990
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "before",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "layoutProperties",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "addAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a widget after another already inserted widget",
          "     *",
          "     * @param child {qx.ui.core.Widget} Widget to add",
          "     * @param after {qx.ui.core.Widget} Widget, after which the new widget will be inserted",
          "     * @param layoutProperties {Map?null} Optional layout data for widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} Widget to add",
            "paramName": "child",
            "description": " Widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "after {qx.ui.core.Widget} Widget, after which the new widget will be inserted",
            "paramName": "after",
            "description": " Widget, after which the new widget will be inserted",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget.",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 3299
        },
        "end": {
          "line": 107,
          "column": 5,
          "index": 3401
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "after",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "layoutProperties",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the given child widget.",
          "     *",
          "     * @param child {qx.ui.core.Widget} the widget to remove",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to remove",
            "paramName": "child",
            "description": " the widget to remove",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3530
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 3578
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": []
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove the widget at the specified index.",
          "     *",
          "     * @param index {Integer} Index of the widget to remove.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3718
        },
        "end": {
          "line": 125,
          "column": 5,
          "index": 3770
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 3821
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 3865
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "statics": {
    "remap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mapping of protected methods to public.",
          "     * This omits an additional function call when using these methods. Call",
          "     * this methods in the defer block of the including class.",
          "     *",
          "     * @param members {Map} The including classes members map",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of protected methods to public.\n This omits an additional function call when using these methods. Call\n this methods in the defer block of the including class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "members {Map} The including classes members map",
            "paramName": "members",
            "description": " The including classes members map",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 149,
          "column": 4,
          "index": 4345
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 4803
        }
      },
      "type": "function",
      "params": [
        {
          "name": "members",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    }
  },
  "properties": {}
}