{
  "version": 0.3,
  "lastModified": 1726088853453,
  "lastModifiedIso": "2024-09-11T21:07:33.453Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/layout/VBox.js",
  "type": "class",
  "location": {
    "start": {
      "line": 51,
      "column": 0,
      "index": 1497
    },
    "end": {
      "line": 66,
      "column": 3,
      "index": 1868
    }
  },
  "className": "qx.ui.mobile.layout.VBox",
  "jsdoc": {
    "raw": [
      "*",
      " * A vertical box layout.",
      " *",
      " * The vertical box layout lays out widgets in a vertical row, from top",
      " * to bottom.",
      " *",
      " * *Item Properties*",
      " *",
      " * <ul>",
      " * <li><strong>flex</strong> <em>(Integer)</em>: The flex property determines how the container",
      " *   distributes remaining empty space among its children. If items are made",
      " *   flexible, they can grow or shrink accordingly. Their relative flex values",
      " *   determine how the items are being resized, i.e. the larger the flex ratio",
      " *   of two items, the larger the resizing of the first item compared to the",
      " *   second.",
      " * </li>",
      " * </ul>",
      " *",
      " * *Example*",
      " *",
      " * Here is a little example of how to use the VBox layout.",
      " *",
      " * <pre class=\"javascript\">",
      " * var layout = new qx.ui.mobile.layout.VBox().set({alignY:\"middle\"});",
      " *",
      " * var container = new qx.ui.mobile.container.Composite(layout);",
      " *",
      " * container.add(new qx.ui.mobile.basic.Label(\"1\"));",
      " * container.add(new qx.ui.mobile.basic.Label(\"2\"), {flex:1});",
      " * container.add(new qx.ui.mobile.basic.Label(\"3\"));",
      " * </pre>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A vertical box layout.\n The vertical box layout lays out widgets in a vertical row, from top\n to bottom.\n<em>Item Properties</em>\n </p>\n<ul>\n <li><strong>flex</strong> <em>(Integer)</em>: The flex property determines how the container\n   distributes remaining empty space among its children. If items are made\n   flexible, they can grow or shrink accordingly. Their relative flex values\n   determine how the items are being resized, i.e. the larger the flex ratio\n   of two items, the larger the resizing of the first item compared to the\n   second.\n </li>\n </ul>\n<p><em>Example</em>\n Here is a little example of how to use the VBox layout.\n </p>\n<pre class=\"javascript\">\n var layout = new qx.ui.mobile.layout.VBox().set({alignY:\"middle\"});\n var container = new qx.ui.mobile.container.Composite(layout);\n container.add(new qx.ui.mobile.basic.Label(\"1\"));\n container.add(new qx.ui.mobile.basic.Label(\"2\"), {flex:1});\n container.add(new qx.ui.mobile.basic.Label(\"3\"));\n </pre>"
      }
    ]
  },
  "superClass": "qx.ui.mobile.layout.AbstractBox",
  "members": {
    "_getCssClasses": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1810
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 1860
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.mobile.layout.Abstract",
      "appearsIn": [
        "qx.ui.mobile.layout.Abstract"
      ]
    }
  },
  "statics": {},
  "properties": {}
}