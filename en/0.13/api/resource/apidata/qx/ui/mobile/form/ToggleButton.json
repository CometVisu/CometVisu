{
  "version": 0.3,
  "lastModified": 1722151627267,
  "lastModifiedIso": "2024-07-28T07:27:07.267Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/ToggleButton.js",
  "type": "class",
  "location": {
    "start": {
      "line": 41,
      "column": 0,
      "index": 1070
    },
    "end": {
      "line": 199,
      "column": 3,
      "index": 5341
    }
  },
  "className": "qx.ui.mobile.form.ToggleButton",
  "jsdoc": {
    "raw": [
      "*",
      " * A toggle Button widget",
      " *",
      " * If the user tap the button, the button toggles between the <code>ON</code>",
      " * and <code>OFF</code> state.",
      " *",
      " * Here is a little example of how to use the widget.",
      " *",
      " * <pre class='javascript'>",
      " *   var button = new qx.ui.mobile.form.ToggleButton(false,\"YES\",\"NO\");",
      " *",
      " *   button.addListener(\"changeValue\", function(e) {",
      " *     alert(e.getData());",
      " *   }, this);",
      " *",
      " *   this.getRoot.add(button);",
      " * </pre>",
      " *",
      " * This example creates a toggle button and attaches an",
      " * event listener to the {@link #changeValue} event.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A toggle Button widget\n If the user tap the button, the button toggles between the <code>ON</code>\n and <code>OFF</code> state.\n Here is a little example of how to use the widget.\n </p>\n<pre class='javascript'>\n   var button = new qx.ui.mobile.form.ToggleButton(false,\"YES\",\"NO\");\n   button.addListener(\"changeValue\", function(e) {\n     alert(e.getData());\n   }, this);\n   this.getRoot.add(button);\n </pre>\n<p>This example creates a toggle button and attaches an\n event listener to the {@link #changeValue} event.</p>"
      }
    ]
  },
  "superClass": "qx.ui.mobile.core.Widget",
  "mixins": [
    "qx.ui.mobile.form.MValue",
    "qx.ui.form.MForm",
    "qx.ui.form.MModelProperty",
    "qx.ui.mobile.form.MState"
  ],
  "interfaces": [
    "qx.ui.form.IField",
    "qx.ui.form.IForm",
    "qx.ui.form.IModel"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "value"
      },
      {
        "name": "labelChecked"
      },
      {
        "name": "labelUnchecked"
      }
    ],
    "location": {
      "start": {
        "line": 57,
        "column": 2,
        "index": 1633
      },
      "end": {
        "line": 79,
        "column": 3,
        "index": 2230
      }
    }
  },
  "properties": {
    "defaultCssClass": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2271
        },
        "end": {
          "line": 86,
          "column": 5,
          "index": 2342
        }
      },
      "json": {
        "refine": true,
        "init": "togglebutton"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.mobile.core.Widget"
      ]
    },
    "liveUpdate": {
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2809
        },
        "end": {
          "line": 104,
          "column": 5,
          "index": 2870
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the {@link #changeValue} event should be fired on every key",
          "     * input. If set to true, the changeValue event is equal to the",
          "     * {@link #input} event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the {@link #changeValue} event should be fired on every key\n input. If set to true, the changeValue event is equal to the\n {@link #input} event.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "valid": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 956
        },
        "end": {
          "line": 43,
          "column": 5,
          "index": 1067
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyValid",
        "event": "changeValid"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is valid. If a widget is invalid, an invalid",
          "     * state will be set.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is valid. If a widget is invalid, an invalid\n state will be set.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "required": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1137
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1227
        }
      },
      "json": {
        "check": "Boolean",
        "init": false,
        "event": "changeRequired"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag signaling if a widget is required.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag signaling if a widget is required.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1325
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1447
        }
      },
      "json": {
        "nullable": true,
        "check": "String",
        "event": "changeInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an tooltip if the widget is invalid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an tooltip if the widget is invalid.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "requiredInvalidMessage": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 1575
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 1695
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "event": "changeRequiredInvalidMessage"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Message which will be shown in an invalid tooltip if the {@link #required} is",
          "     * set to true.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Message which will be shown in an invalid tooltip if the {@link #required} is\n set to true.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "model": {
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1367
        },
        "end": {
          "line": 45,
          "column": 5,
          "index": 1483
        }
      },
      "json": {
        "nullable": true,
        "event": "changeModel",
        "apply": "_applyModel",
        "dereference": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Model property for storing additional information for the including",
          "     * object. It can act as value property on form items for example.",
          "     *",
          "     * Be careful using that property as this is used for the",
          "     * {@link qx.ui.form.MModelSelection} it has some restrictions:",
          "     *",
          "     * * Don't use equal models in one widget using the",
          "     *     {@link qx.ui.form.MModelSelection}.",
          "     *",
          "     * * Avoid setting only some model properties if the widgets are added to",
          "     *     a {@link qx.ui.form.MModelSelection} widget.",
          "     *",
          "     * Both restrictions result of the fact, that the set models are deputies",
          "     * for their widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Model property for storing additional information for the including\n object. It can act as value property on form items for example.\n Be careful using that property as this is used for the\n {@link qx.ui.form.MModelSelection} it has some restrictions:</p>\n<ul>\n<li>Don't use equal models in one widget using the\n {@link qx.ui.form.MModelSelection}.</li>\n<li>Avoid setting only some model properties if the widgets are added to\n a {@link qx.ui.form.MModelSelection} widget.\nBoth restrictions result of the fact, that the set models are deputies\nfor their widget.</li>\n</ul>"
          }
        ]
      },
      "appearsIn": [
        "qx.ui.form.MModelProperty"
      ],
      "mixin": "qx.ui.form.MModelProperty"
    }
  },
  "members": {
    "__switch": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2366
        },
        "end": {
          "line": 90,
          "column": 18,
          "index": 2380
        }
      },
      "appearsIn": []
    },
    "__value": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2386
        },
        "end": {
          "line": 91,
          "column": 18,
          "index": 2400
        }
      },
      "appearsIn": []
    },
    "__labelUnchecked": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2406
        },
        "end": {
          "line": 92,
          "column": 27,
          "index": 2429
        }
      },
      "appearsIn": []
    },
    "__labelChecked": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2435
        },
        "end": {
          "line": 93,
          "column": 24,
          "index": 2455
        }
      },
      "appearsIn": []
    },
    "__lastToggleTimestamp": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2461
        },
        "end": {
          "line": 94,
          "column": 28,
          "index": 2485
        }
      },
      "appearsIn": []
    },
    "_getChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the child control of the toggle button.",
          "     *",
          "     * @return {qx.ui.mobile.container.Composite} the child control.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the child control of the toggle button.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.mobile.container.Composite} the child control.",
            "type": "qx.ui.mobile.container.Composite",
            "description": "the child control."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2639
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 2686
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.mobile.container.Composite"
      },
      "appearsIn": []
    },
    "_createSwitch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates the switch control of the widget.",
          "     * @return {qx.ui.mobile.container.Composite} The switch control.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the switch control of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.mobile.container.Composite} The switch control.",
            "type": "qx.ui.mobile.container.Composite",
            "description": "The switch control."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 2828
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 3016
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.mobile.container.Composite"
      },
      "appearsIn": []
    },
    "_setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the value [true/false] of this toggle button.",
          "     * It is called by setValue method of qx.ui.mobile.form.MValue mixin",
          "     * @param value {Boolean} the new value of the toggle button",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the value [true/false] of this toggle button.\n It is called by setValue method of qx.ui.mobile.form.MValue mixin</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} the new value of the toggle button",
            "paramName": "value",
            "description": " the new value of the toggle button",
            "type": "boolean"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3235
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3523
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "_getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Gets the value [true/false] of this toggle button.",
          "     * It is called by getValue method of qx.ui.mobile.form.MValue mixin",
          "     * @return {Boolean} the value of the toggle button",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the value [true/false] of this toggle button.\n It is called by getValue method of qx.ui.mobile.form.MValue mixin</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} the value of the toggle button",
            "type": "boolean",
            "description": "the value of the toggle button"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 137,
          "column": 4,
          "index": 3733
        },
        "end": {
          "line": 139,
          "column": 5,
          "index": 3779
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "toggle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Toggles the value of the button.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Toggles the value of the button.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 3842
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 3897
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onTap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called when the tap event occurs.",
          "     * Toggles the button.",
          "     *",
          "     * @param evt {qx.event.type.Tap} The tap event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the tap event occurs.\n Toggles the button.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Tap} The tap event.",
            "paramName": "evt",
            "description": " The tap event.",
            "type": "qx.event.type.Tap"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 4063
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4155
        }
      },
      "type": "function",
      "params": [
        {
          "name": "evt",
          "type": "qx.event.type.Tap"
        }
      ],
      "appearsIn": []
    },
    "_onSwipe": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called when the swipe event occurs.",
          "     * Toggles the button, when.",
          "     *",
          "     * @param evt {qx.event.type.Swipe} The swipe event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the swipe event occurs.\n Toggles the button, when.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Swipe} The swipe event.",
            "paramName": "evt",
            "description": " The swipe event.",
            "type": "qx.event.type.Swipe"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 4333
        },
        "end": {
          "line": 179,
          "column": 5,
          "index": 4665
        }
      },
      "type": "function",
      "params": [
        {
          "name": "evt",
          "type": "qx.event.type.Swipe"
        }
      ],
      "appearsIn": []
    },
    "_checkLastPointerTime": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if last touch event (swipe,tap) is more than 500ms ago.",
          "     * Bugfix for several simulator/emulator, when tap is immediately followed by a swipe.",
          "     * @return {Boolean} <code>true</code> if the last event was more than 500ms ago",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if last touch event (swipe,tap) is more than 500ms ago.\n Bugfix for several simulator/emulator, when tap is immediately followed by a swipe.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the last event was more than 500ms ago",
            "type": "boolean",
            "description": "<code>true</code> if the last event was more than 500ms ago"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 4934
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5129
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__oldValue": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3078
        },
        "end": {
          "line": 114,
          "column": 20,
          "index": 3094
        }
      },
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "__inputTimeoutHandle": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 115,
          "column": 4,
          "index": 3100
        },
        "end": {
          "line": 115,
          "column": 30,
          "index": 3126
        }
      },
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "__hasFocus": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3132
        },
        "end": {
          "line": 116,
          "column": 20,
          "index": 3148
        }
      },
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "_convertValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts the incoming value.",
          "     *",
          "     * @param value {var} The value to convert",
          "     * @return {var} The converted value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts the incoming value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The value to convert",
            "paramName": "value",
            "description": " The value to convert",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The converted value",
            "type": "var",
            "description": "The converted value"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3302
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 3511
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "_onFocus": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for <code>focus</code> event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for <code>focus</code> event.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 137,
          "column": 4,
          "index": 3579
        },
        "end": {
          "line": 139,
          "column": 5,
          "index": 3627
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "_onBlur": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for <code>blur</code> event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for <code>blur</code> event.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 3694
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 3742
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "hasFocus": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns whether this widget has focus or not.",
          "     * @return {Boolean} <code>true</code> or <code>false</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether this widget has focus or not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> or <code>false</code>",
            "type": "boolean",
            "description": "<code>true</code> or <code>false</code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 3883
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 3931
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the value.",
          "     *",
          "     * @param value {var} The value to set",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The value to set",
            "paramName": "value",
            "description": " The value to set",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4027
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 4312
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.ui.mobile.form.MValue",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the set value.",
          "     *",
          "     * @return {var} The set value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the set value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The set value",
            "type": "var",
            "description": "The set value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 4407
        },
        "end": {
          "line": 182,
          "column": 5,
          "index": 4539
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "qx.ui.mobile.form.MValue",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Resets the value.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the value.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 4587
        },
        "end": {
          "line": 189,
          "column": 5,
          "index": 4634
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.ui.mobile.form.MValue",
        "qx.ui.form.IField"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "_onChangeContent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called when the {@link #changeValue} event occurs.",
          "     *",
          "     * @param evt {qx.event.type.Data} The event, containing the changed content.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the {@link #changeValue} event occurs.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Data} The event, containing the changed content.",
            "paramName": "evt",
            "description": " The event, containing the changed content.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 4819
        },
        "end": {
          "line": 198,
          "column": 5,
          "index": 4913
        }
      },
      "type": "function",
      "params": [
        {
          "name": "evt",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "_onInput": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called when the {@link #input} event occurs.",
          "     *",
          "     * @param evt {qx.event.type.Data} The event, containing the changed content.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the {@link #input} event occurs.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Data} The event, containing the changed content.",
            "paramName": "evt",
            "description": " The event, containing the changed content.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 5092
        },
        "end": {
          "line": 215,
          "column": 5,
          "index": 5383
        }
      },
      "type": "function",
      "params": [
        {
          "name": "evt",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "_getCaretPosition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the caret position of this widget.",
          "     * @return {Integer} the caret position.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the caret position of this widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the caret position.",
            "type": "Integer",
            "description": "the caret position."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 221,
          "column": 4,
          "index": 5501
        },
        "end": {
          "line": 228,
          "column": 5,
          "index": 5763
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "_setCaretPosition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the caret position on this widget.",
          "     * @param position {Integer} the caret position.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the caret position on this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "position {Integer} the caret position.",
            "paramName": "position",
            "description": " the caret position.",
            "type": "Integer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 234,
          "column": 4,
          "index": 5886
        },
        "end": {
          "line": 243,
          "column": 5,
          "index": 6193
        }
      },
      "type": "function",
      "params": [
        {
          "name": "position",
          "type": "Integer"
        }
      ],
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "__fireChangeValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires the {@link #changeValue} event.",
          "     *",
          "     * @param value {var} The current value to fire.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires the {@link #changeValue} event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The current value to fire.",
            "paramName": "value",
            "description": " The current value to fire.",
            "type": "var"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 250,
          "column": 4,
          "index": 6321
        },
        "end": {
          "line": 255,
          "column": 5,
          "index": 6482
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.ui.mobile.form.MValue"
      ],
      "mixin": "qx.ui.mobile.form.MValue"
    },
    "_applyValid": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 1739
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 1840
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "__onChangeLocale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Locale change event handler",
          "     *",
          "     * @signature function(e)",
          "     * @param e {Event} the change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locale change event handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} the change event",
            "paramName": "e",
            "description": " the change event",
            "type": "Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 1976
        },
        "end": {
          "line": 102,
          "column": 6,
          "index": 2570
        }
      },
      "appearsIn": [
        "qx.ui.form.MForm"
      ],
      "mixin": "qx.ui.form.MForm"
    },
    "_applyModel": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1527
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1588
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": [
        "qx.ui.form.MModelProperty"
      ],
      "mixin": "qx.ui.form.MModelProperty"
    },
    "__states": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The states of the element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The states of the element</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 17,
          "column": 4,
          "index": 446
        },
        "end": {
          "line": 17,
          "column": 18,
          "index": 460
        }
      },
      "appearsIn": [
        "qx.ui.mobile.form.MState"
      ],
      "mixin": "qx.ui.mobile.form.MState"
    },
    "addState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a state to the element",
          "     * @param state {String} the state to be added",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a state to the element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to be added",
            "paramName": "state",
            "description": " the state to be added",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 24,
          "column": 4,
          "index": 576
        },
        "end": {
          "line": 30,
          "column": 5,
          "index": 737
        }
      },
      "type": "function",
      "params": [
        {
          "name": "state",
          "type": "string"
        }
      ],
      "appearsIn": [
        "qx.ui.mobile.form.MState"
      ],
      "mixin": "qx.ui.mobile.form.MState"
    },
    "hasState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks whether the element has the state passed as argument",
          "     * @param state {String} the state to be checked",
          "     * @return {Boolean} true if the element has the state, false if it doesn't.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks whether the element has the state passed as argument</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to be checked",
            "paramName": "state",
            "description": " the state to be checked",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the element has the state, false if it doesn't.",
            "type": "boolean",
            "description": "true if the element has the state, false if it doesn't."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 968
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1052
        }
      },
      "type": "function",
      "params": [
        {
          "name": "state",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.ui.mobile.form.MState"
      ],
      "mixin": "qx.ui.mobile.form.MState"
    },
    "removeState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes a state from the element",
          "     * @param state {String} the state to be removed",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a state from the element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to be removed",
            "paramName": "state",
            "description": " the state to be removed",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1175
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1316
        }
      },
      "type": "function",
      "params": [
        {
          "name": "state",
          "type": "string"
        }
      ],
      "appearsIn": [
        "qx.ui.mobile.form.MState"
      ],
      "mixin": "qx.ui.mobile.form.MState"
    },
    "replaceState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces a state of the element with a new state.",
          "     * If the element doesn't have the state to be removed, then th new state will",
          "     * just be added.",
          "     * @param oldState {String} the state to be replaced",
          "     * @param newState {String} the state to get injected in the oldState's place",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces a state of the element with a new state.\n If the element doesn't have the state to be removed, then th new state will\n just be added.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "oldState {String} the state to be replaced",
            "paramName": "oldState",
            "description": " the state to be replaced",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "newState {String} the state to get injected in the oldState's place",
            "paramName": "newState",
            "description": " the state to get injected in the oldState's place",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1647
        },
        "end": {
          "line": 71,
          "column": 5,
          "index": 1935
        }
      },
      "type": "function",
      "params": [
        {
          "name": "oldState",
          "type": "string"
        },
        {
          "name": "newState",
          "type": "string"
        }
      ],
      "appearsIn": [
        "qx.ui.mobile.form.MState"
      ],
      "mixin": "qx.ui.mobile.form.MState"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 193,
        "column": 2,
        "index": 5138
      },
      "end": {
        "line": 198,
        "column": 3,
        "index": 5337
      }
    }
  },
  "statics": {}
}