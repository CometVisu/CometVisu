{
  "version": 0.3,
  "lastModified": 1735222259418,
  "lastModifiedIso": "2024-12-26T14:10:59.418Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/core/Root.js",
  "type": "class",
  "location": {
    "start": {
      "line": 22,
      "column": 0,
      "index": 521
    },
    "end": {
      "line": 311,
      "column": 3,
      "index": 8817
    }
  },
  "className": "qx.ui.mobile.core.Root",
  "jsdoc": {
    "raw": [
      "*",
      " * Root widget for the mobile application.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Root widget for the mobile application.</p>"
      }
    ]
  },
  "superClass": "qx.ui.mobile.container.Composite",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "root"
      },
      {
        "name": "layout"
      }
    ],
    "location": {
      "start": {
        "line": 35,
        "column": 2,
        "index": 1035
      },
      "end": {
        "line": 78,
        "column": 3,
        "index": 2382
      }
    }
  },
  "properties": {
    "defaultCssClass": {
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2610
        },
        "end": {
          "line": 91,
          "column": 5,
          "index": 2673
        }
      },
      "json": {
        "refine": true,
        "init": "root"
      },
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "appearsIn": [
        "qx.ui.mobile.core.Widget"
      ]
    },
    "showScrollbarY": {
      "location": {
        "start": {
          "line": 96,
          "column": 4,
          "index": 2756
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2857
        }
      },
      "json": {
        "check": "Boolean",
        "init": true,
        "apply": "_applyShowScrollbarY"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the native scrollbar should be shown or not.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the native scrollbar should be shown or not.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "events": {
    "changeAppScale": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event is fired when the app scale factor of the application has (or",
          "     * might have) changed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event is fired when the app scale factor of the application has (or\n might have) changed.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3182
        },
        "end": {
          "line": 114,
          "column": 41,
          "index": 3219
        }
      }
    }
  },
  "members": {
    "__root": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3427
        },
        "end": {
          "line": 124,
          "column": 16,
          "index": 3439
        }
      },
      "appearsIn": []
    },
    "_createContainerElement": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3464
        },
        "end": {
          "line": 129,
          "column": 5,
          "index": 3523
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.ui.mobile.core.Widget",
      "appearsIn": [
        "qx.ui.mobile.core.Widget"
      ]
    },
    "_applyShowScrollbarY": {
      "jsdoc": {
        "raw": [
          " property apply"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3552
        },
        "end": {
          "line": 134,
          "column": 5,
          "index": 3655
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "getAppScale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the application's total scale factor. It takes into account both",
          "     * the application's font scale (determined by {@link #getFontScale}) and",
          "     * the device pixel ratio. The latter could be modified at runtime by the",
          "     * browsers font scaling/zooming feature.",
          "     *",
          "     * @return {Number|null} the app scale factor. If a valid app scale could",
          "     * be determined, it is rounded to a two decimal number. If it could not be",
          "     * determined, <code>null</code> is returned.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the application's total scale factor. It takes into account both\n the application's font scale (determined by {@link #getFontScale}) and\n the device pixel ratio. The latter could be modified at runtime by the\n browsers font scaling/zooming feature.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number|null} the app scale factor. If a valid app scale could\n be determined, it is rounded to a two decimal number. If it could not be\n determined, <code>null</code> is returned.",
            "type": "Number|null",
            "description": "the app scale factor. If a valid app scale could\n be determined, it is rounded to a two decimal number. If it could not be\n determined, <code>null</code> is returned."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4175
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4499
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Number|null"
      },
      "appearsIn": []
    },
    "getFontScale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the application's font scale factor.",
          "     *",
          "     * @return {Number|null} the font scale factor. If a valid font scale could",
          "     * be determined, it is rounded to a three decimal number. For displaying",
          "     * the scale factor, you might want to round to two decimals",
          "     * (<code>.toFixed(2)</code>). If it could not be determined,",
          "     * <code>null</code> is returned.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the application's font scale factor.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number|null} the font scale factor. If a valid font scale could\n be determined, it is rounded to a three decimal number. For displaying\n the scale factor, you might want to round to two decimals\n (<code>.toFixed(2)</code>). If it could not be determined,\n <code>null</code> is returned.",
            "type": "Number|null",
            "description": "the font scale factor. If a valid font scale could\n be determined, it is rounded to a three decimal number. For displaying\n the scale factor, you might want to round to two decimals\n (<code>.toFixed(2)</code>). If it could not be determined,\n <code>null</code> is returned."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 4908
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 6011
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Number|null"
      },
      "appearsIn": []
    },
    "setFontScale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the application's font scale factor, i.e. relative to a default 100%",
          "     * font size.",
          "     *",
          "     * @param value {Number} the font scale factor.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the application's font scale factor, i.e. relative to a default 100%\n font size.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Number} the font scale factor.",
            "paramName": "value",
            "description": " the font scale factor.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 213,
          "column": 4,
          "index": 6192
        },
        "end": {
          "line": 233,
          "column": 5,
          "index": 6848
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "getWidth": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the rendered width.",
          "     * @return {Integer} the width of the container element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the rendered width.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the width of the container element.",
            "type": "Integer",
            "description": "the width of the container element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 239,
          "column": 4,
          "index": 6967
        },
        "end": {
          "line": 241,
          "column": 5,
          "index": 7046
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getHeight": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the rendered height.",
          "     * @return {Integer} the height of the container element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the rendered height.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the height of the container element.",
            "type": "Integer",
            "description": "the height of the container element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 247,
          "column": 4,
          "index": 7167
        },
        "end": {
          "line": 249,
          "column": 5,
          "index": 7248
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "_onOrientationChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler. Called when the orientation of the device is changed.",
          "     *",
          "     * @param evt {qx.event.type.Orientation} The handled orientation change event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the orientation of the device is changed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Orientation} The handled orientation change event",
            "paramName": "evt",
            "description": " The handled orientation change event",
            "type": "qx.event.type.Orientation"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 7437
        },
        "end": {
          "line": 292,
          "column": 5,
          "index": 8370
        }
      },
      "type": "function",
      "params": [
        {
          "name": "evt",
          "type": "qx.event.type.Orientation"
        }
      ],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 301,
        "column": 2,
        "index": 8566
      },
      "end": {
        "line": 310,
        "column": 3,
        "index": 8813
      }
    }
  },
  "statics": {}
}