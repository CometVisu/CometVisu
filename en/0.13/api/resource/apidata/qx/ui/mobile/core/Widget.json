{
  "className": "qx.ui.mobile.core.Widget",
  "packageName": "qx.ui.mobile.core",
  "name": "Widget",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [
    "qx.locale.MTranslation"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0,
        "index": 601
      },
      "end": {
        "line": 1549,
        "column": 3,
        "index": 43547
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This is the base class for all mobile widgets.</p>"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.ui.mobile.core.EventHandler"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.bom.Lifecycle"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 35,
        "column": 2,
        "index": 901
      },
      "end": {
        "line": 49,
        "column": 3,
        "index": 1190
      }
    },
    "jsdoc": {}
  },
  "events": {
    "mousemove": {
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1452
        },
        "end": {
          "line": 59,
          "column": 36,
          "index": 1484
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the mouse cursor moves over the widget.</p>"
          }
        ]
      },
      "name": "mousemove",
      "type": "qx.event.type.Mouse"
    },
    "mouseover": {
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1547
        },
        "end": {
          "line": 62,
          "column": 36,
          "index": 1579
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the mouse cursor enters the widget.</p>"
          }
        ]
      },
      "name": "mouseover",
      "type": "qx.event.type.Mouse"
    },
    "mouseout": {
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1638
        },
        "end": {
          "line": 65,
          "column": 35,
          "index": 1669
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the mouse cursor leaves widget.</p>"
          }
        ]
      },
      "name": "mouseout",
      "type": "qx.event.type.Mouse"
    },
    "mousedown": {
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 1726
        },
        "end": {
          "line": 68,
          "column": 36,
          "index": 1758
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mouse button is pressed on the widget.</p>"
          }
        ]
      },
      "name": "mousedown",
      "type": "qx.event.type.Mouse"
    },
    "mouseup": {
      "location": {
        "start": {
          "line": 71,
          "column": 4,
          "index": 1816
        },
        "end": {
          "line": 71,
          "column": 34,
          "index": 1846
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mouse button is released on the widget.</p>"
          }
        ]
      },
      "name": "mouseup",
      "type": "qx.event.type.Mouse"
    },
    "click": {
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 1974
        },
        "end": {
          "line": 75,
          "column": 32,
          "index": 2002
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget is clicked using left or middle button.\n        {@link qx.event.type.Mouse#getButton} for more details.</p>"
          }
        ]
      },
      "name": "click",
      "type": "qx.event.type.Mouse"
    },
    "dblclick": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2137
        },
        "end": {
          "line": 79,
          "column": 35,
          "index": 2168
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget is double clicked using left or middle button.\n        {@link qx.event.type.Mouse#getButton} for more details.</p>"
          }
        ]
      },
      "name": "dblclick",
      "type": "qx.event.type.Mouse"
    },
    "contextmenu": {
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2234
        },
        "end": {
          "line": 82,
          "column": 38,
          "index": 2268
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Widget is clicked using the right mouse button.</p>"
          }
        ]
      },
      "name": "contextmenu",
      "type": "qx.event.type.Mouse"
    },
    "beforeContextmenuOpen": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2327
        },
        "end": {
          "line": 85,
          "column": 48,
          "index": 2371
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired before the context menu is opened.</p>"
          }
        ]
      },
      "name": "beforeContextmenuOpen",
      "type": "qx.event.type.Mouse"
    },
    "mousewheel": {
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2439
        },
        "end": {
          "line": 88,
          "column": 42,
          "index": 2477
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if the mouse wheel is used over the widget.</p>"
          }
        ]
      },
      "name": "mousewheel",
      "type": "qx.event.type.MouseWheel"
    },
    "touchstart": {
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2538
        },
        "end": {
          "line": 91,
          "column": 37,
          "index": 2571
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a touch at the screen is started.</p>"
          }
        ]
      },
      "name": "touchstart",
      "type": "qx.event.type.Touch"
    },
    "touchend": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2631
        },
        "end": {
          "line": 94,
          "column": 35,
          "index": 2662
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a touch at the screen has ended.</p>"
          }
        ]
      },
      "name": "touchend",
      "type": "qx.event.type.Touch"
    },
    "touchmove": {
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2716
        },
        "end": {
          "line": 97,
          "column": 36,
          "index": 2748
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired during a touch at the screen.</p>"
          }
        ]
      },
      "name": "touchmove",
      "type": "qx.event.type.Touch"
    },
    "touchcancel": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2810
        },
        "end": {
          "line": 100,
          "column": 38,
          "index": 2844
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a touch at the screen is canceled.</p>"
          }
        ]
      },
      "name": "touchcancel",
      "type": "qx.event.type.Touch"
    },
    "tap": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2902
        },
        "end": {
          "line": 103,
          "column": 28,
          "index": 2926
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a finger taps on the screen.</p>"
          }
        ]
      },
      "name": "tap",
      "type": "qx.event.type.Tap"
    },
    "longtap": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 2985
        },
        "end": {
          "line": 106,
          "column": 32,
          "index": 3013
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a finger holds on the screen.</p>"
          }
        ]
      },
      "name": "longtap",
      "type": "qx.event.type.Tap"
    },
    "swipe": {
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3075
        },
        "end": {
          "line": 109,
          "column": 32,
          "index": 3103
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a finger swipes over the screen.</p>"
          }
        ]
      },
      "name": "swipe",
      "type": "qx.event.type.Touch"
    },
    "rotate": {
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3188
        },
        "end": {
          "line": 112,
          "column": 34,
          "index": 3218
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when two pointers performing a rotate gesture on the screen.</p>"
          }
        ]
      },
      "name": "rotate",
      "type": "qx.event.type.Rotate"
    },
    "pinch": {
      "location": {
        "start": {
          "line": 115,
          "column": 4,
          "index": 3309
        },
        "end": {
          "line": 115,
          "column": 32,
          "index": 3337
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when two pointers performing a pinch in/out gesture on the screen.</p>"
          }
        ]
      },
      "name": "pinch",
      "type": "qx.event.type.Pinch"
    },
    "track": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3440
        },
        "end": {
          "line": 118,
          "column": 32,
          "index": 3468
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when an active pointer moves on the screen (after pointerdown till pointerup).</p>"
          }
        ]
      },
      "name": "track",
      "type": "qx.event.type.Track"
    },
    "keyup": {
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3550
        },
        "end": {
          "line": 123,
          "column": 38,
          "index": 3584
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event if fired if a keyboard key is released.</p>"
          }
        ]
      },
      "name": "keyup",
      "type": "qx.event.type.KeySequence"
    },
    "keydown": {
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3753
        },
        "end": {
          "line": 129,
          "column": 40,
          "index": 3789
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event if fired if a keyboard key is pressed down. This event is\n only fired once if the user keeps the key pressed for a while.</p>"
          }
        ]
      },
      "name": "keydown",
      "type": "qx.event.type.KeySequence"
    },
    "keypress": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 4027
        },
        "end": {
          "line": 136,
          "column": 41,
          "index": 4064
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired any time a key is pressed. It will be repeated if\n the user keeps the key pressed. The pressed key can be determined using\n {@link qx.event.type.KeySequence#getKeyIdentifier}.</p>"
          }
        ]
      },
      "name": "keypress",
      "type": "qx.event.type.KeySequence"
    },
    "keyinput": {
      "location": {
        "start": {
          "line": 147,
          "column": 4,
          "index": 4511
        },
        "end": {
          "line": 147,
          "column": 38,
          "index": 4545
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired if the pressed key or keys result in a printable\n character. Since the character is not necessarily associated with a\n single physical key press, the event does not have a key identifier\n getter. This event gets repeated if the user keeps pressing the key(s).\n The unicode code of the pressed key can be read using\n {@link qx.event.type.KeyInput#getCharCode}.</p>"
          }
        ]
      },
      "name": "keyinput",
      "type": "qx.event.type.KeyInput"
    },
    "domupdated": {
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 4774
        },
        "end": {
          "line": 154,
          "column": 37,
          "index": 4807
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after a massive DOM manipulation, e.g. when DOM elements were\n added or styles were changed. Listen to this event, if you need to\n recalculate a layout or have to update your view.</p>"
          }
        ]
      },
      "name": "domupdated",
      "type": "qx.event.type.Event"
    },
    "appear": {
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4883
        },
        "end": {
          "line": 159,
          "column": 33,
          "index": 4912
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the widget appears on the screen.</p>"
          }
        ]
      },
      "name": "appear",
      "type": "qx.event.type.Event"
    },
    "disappear": {
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 4993
        },
        "end": {
          "line": 164,
          "column": 36,
          "index": 5025
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the widget disappears from the screen.</p>"
          }
        ]
      },
      "name": "disappear",
      "type": "qx.event.type.Event"
    },
    "focus": {
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 5104
        },
        "end": {
          "line": 169,
          "column": 32,
          "index": 5132
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The event is fired when the widget gets focused.</p>"
          }
        ]
      },
      "name": "focus",
      "type": "qx.event.type.Focus"
    },
    "blur": {
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 5211
        },
        "end": {
          "line": 174,
          "column": 31,
          "index": 5238
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The event is fired when the widget gets blurred.</p>"
          }
        ]
      },
      "name": "blur",
      "type": "qx.event.type.Focus"
    },
    "focusin": {
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5337
        },
        "end": {
          "line": 179,
          "column": 34,
          "index": 5367
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When the widget itself or any child of the widget receive the focus.</p>"
          }
        ]
      },
      "name": "focusin",
      "type": "qx.event.type.Focus"
    },
    "focusout": {
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 5463
        },
        "end": {
          "line": 184,
          "column": 35,
          "index": 5494
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When the widget itself or any child of the widget lost the focus.</p>"
          }
        ]
      },
      "name": "focusout",
      "type": "qx.event.type.Focus"
    },
    "activate": {
      "location": {
        "start": {
          "line": 189,
          "column": 4,
          "index": 5584
        },
        "end": {
          "line": 189,
          "column": 35,
          "index": 5615
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When the widget gets active (receives keyboard events etc.)</p>"
          }
        ]
      },
      "name": "activate",
      "type": "qx.event.type.Focus"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 5675
        },
        "end": {
          "line": 194,
          "column": 37,
          "index": 5708
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When the widget gets inactive</p>"
          }
        ]
      },
      "name": "deactivate",
      "type": "qx.event.type.Focus"
    },
    "roll": {
      "location": {
        "start": {
          "line": 199,
          "column": 4,
          "index": 5815
        },
        "end": {
          "line": 199,
          "column": 30,
          "index": 5841
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when an active pointer moves on the screen or the mouse wheel is used.</p>"
          }
        ]
      },
      "name": "roll",
      "type": "qx.event.type.Roll"
    }
  },
  "properties": {
    "defaultCssClass": {
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 6341
        },
        "end": {
          "line": 220,
          "column": 5,
          "index": 6465
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default CSS class used for this widget. The default CSS class\n should contain the common appearance of the widget.\n It is set to the container element of the widget. Use {@link #addCssClass}\n to enhance the default appearance of the widget.</p>"
          }
        ]
      },
      "name": "defaultCssClass",
      "propertyType": "new",
      "apply": "_applyDefaultCssClass",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "enabled": {
      "location": {
        "start": {
          "line": 225,
          "column": 4,
          "index": 6533
        },
        "end": {
          "line": 231,
          "column": 5,
          "index": 6673
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether this widget is enabled or not</p>"
          }
        ]
      },
      "name": "enabled",
      "propertyType": "new",
      "event": "changeEnabled",
      "apply": "_applyEnabled",
      "nullable": false,
      "init": true,
      "allowNull": false,
      "check": "Boolean",
      "defaultValue": true
    },
    "name": {
      "location": {
        "start": {
          "line": 237,
          "column": 4,
          "index": 6818
        },
        "end": {
          "line": 242,
          "column": 5,
          "index": 6925
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name attribute of the container element. Useful when you want to find\n an element by its name attribute.</p>"
          }
        ]
      },
      "name": "name",
      "propertyType": "new",
      "apply": "_applyAttribute",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "anonymous": {
      "location": {
        "start": {
          "line": 249,
          "column": 4,
          "index": 7138
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 7247
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget should be the target of an event. Set this property\n to <code>false</code> when the widget is a child of another widget and\n shouldn't react on events.</p>"
          }
        ]
      },
      "name": "anonymous",
      "propertyType": "new",
      "apply": "_applyStyle",
      "nullable": true,
      "allowNull": true,
      "check": "Boolean"
    },
    "id": {
      "location": {
        "start": {
          "line": 260,
          "column": 4,
          "index": 7376
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 7532
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The ID of the widget. When the ID is set to <code>null</code> an auto\n id will be generated.</p>"
          }
        ]
      },
      "name": "id",
      "propertyType": "new",
      "event": "changeId",
      "apply": "_applyId",
      "nullable": true,
      "transform": "_transformId",
      "allowNull": true,
      "check": "String"
    },
    "visibility": {
      "location": {
        "start": {
          "line": 278,
          "column": 4,
          "index": 7854
        },
        "end": {
          "line": 283,
          "column": 5,
          "index": 8009
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Controls the visibility. Valid values are:\n </p>\n<ul>\n   <li><b>visible</b>: Render the widget</li>\n   <li><b>hidden</b>: Hide the widget. The space will be still available.</li>\n   <li><b>excluded</b>: Hide the widget. The space will be released.</li>\n </ul>"
          }
        ]
      },
      "name": "visibility",
      "propertyType": "new",
      "event": "changeVisibility",
      "apply": "_applyVisibility",
      "init": "visible",
      "possibleValues": [
        "visible",
        "hidden",
        "excluded"
      ],
      "defaultValue": "visible"
    },
    "activatable": {
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 8238
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 8332
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget can be activated or not. When the widget is activated\n a css class <code>active</code> is automatically added to the widget, which\n can indicate the activation status.</p>"
          }
        ]
      },
      "name": "activatable",
      "propertyType": "new",
      "apply": "_applyAttribute",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "rotation": {
      "location": {
        "start": {
          "line": 299,
          "column": 4,
          "index": 8424
        },
        "end": {
          "line": 304,
          "column": 5,
          "index": 8530
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Rotates the widget. Negative and positive values are allowed.</p>"
          }
        ]
      },
      "name": "rotation",
      "propertyType": "new",
      "apply": "_transform",
      "nullable": true,
      "allowNull": true,
      "check": "Number"
    },
    "transformUnit": {
      "location": {
        "start": {
          "line": 310,
          "column": 4,
          "index": 8754
        },
        "end": {
          "line": 315,
          "column": 5,
          "index": 8872
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This property controls whether the transformation uses the length unit <code>px<code> or <code>rem</code>.\n This feature is important for creating a resolution independent transformation.</p>"
          }
        ]
      },
      "name": "transformUnit",
      "propertyType": "new",
      "apply": "_transform",
      "nullable": false,
      "init": "rem",
      "allowNull": false,
      "possibleValues": [
        "rem",
        "px"
      ],
      "defaultValue": "rem"
    },
    "scaleX": {
      "location": {
        "start": {
          "line": 320,
          "column": 4,
          "index": 8944
        },
        "end": {
          "line": 325,
          "column": 5,
          "index": 9048
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scales the widget in X direction (width).</p>"
          }
        ]
      },
      "name": "scaleX",
      "propertyType": "new",
      "apply": "_transform",
      "nullable": true,
      "allowNull": true,
      "check": "Number"
    },
    "scaleY": {
      "location": {
        "start": {
          "line": 330,
          "column": 4,
          "index": 9121
        },
        "end": {
          "line": 335,
          "column": 5,
          "index": 9225
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scales the widget in Y direction (height).</p>"
          }
        ]
      },
      "name": "scaleY",
      "propertyType": "new",
      "apply": "_transform",
      "nullable": true,
      "allowNull": true,
      "check": "Number"
    },
    "translateX": {
      "location": {
        "start": {
          "line": 340,
          "column": 4,
          "index": 9283
        },
        "end": {
          "line": 345,
          "column": 5,
          "index": 9388
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Moves the widget on X axis.</p>"
          }
        ]
      },
      "name": "translateX",
      "propertyType": "new",
      "apply": "_transform",
      "nullable": true,
      "init": 0,
      "allowNull": true,
      "check": "Number",
      "defaultValue": 0
    },
    "translateY": {
      "location": {
        "start": {
          "line": 350,
          "column": 4,
          "index": 9446
        },
        "end": {
          "line": 355,
          "column": 5,
          "index": 9551
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Moves the widget on Y axis.</p>"
          }
        ]
      },
      "name": "translateY",
      "propertyType": "new",
      "apply": "_transform",
      "nullable": true,
      "init": 0,
      "allowNull": true,
      "check": "Number",
      "defaultValue": 0
    },
    "translateZ": {
      "location": {
        "start": {
          "line": 360,
          "column": 4,
          "index": 9609
        },
        "end": {
          "line": 365,
          "column": 5,
          "index": 9714
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Moves the widget on Z axis.</p>"
          }
        ]
      },
      "name": "translateZ",
      "propertyType": "new",
      "apply": "_transform",
      "nullable": true,
      "init": 0,
      "allowNull": true,
      "check": "Number",
      "defaultValue": 0
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "statics": {
    "ID_PREFIX": {
      "location": {
        "start": {
          "line": 376,
          "column": 4,
          "index": 9971
        },
        "end": {
          "line": 376,
          "column": 23,
          "index": 9990
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} Prefix for the auto id"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__registry": {
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 10061
        },
        "end": {
          "line": 379,
          "column": 18,
          "index": 10075
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Internal data structure to store widgets"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__idCounter": {
      "location": {
        "start": {
          "line": 382,
          "column": 4,
          "index": 10147
        },
        "end": {
          "line": 382,
          "column": 18,
          "index": 10161
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Incremental counter of the current id"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__domUpdatedScheduleId": {
      "location": {
        "start": {
          "line": 385,
          "column": 4,
          "index": 10232
        },
        "end": {
          "line": 385,
          "column": 32,
          "index": 10260
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} ID of the timeout for the DOM update"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "onShutdown": {
      "location": {
        "start": {
          "line": 391,
          "column": 4,
          "index": 10366
        },
        "end": {
          "line": 394,
          "column": 5,
          "index": 10512
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler. Called when the application is in shutdown.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentId": {
      "location": {
        "start": {
          "line": 402,
          "column": 4,
          "index": 10647
        },
        "end": {
          "line": 404,
          "column": 5,
          "index": 10720
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current widget id of the registry.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The current id",
            "type": "Integer",
            "description": " The current id"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "registerWidget": {
      "location": {
        "start": {
          "line": 413,
          "column": 4,
          "index": 10906
        },
        "end": {
          "line": 423,
          "column": 5,
          "index": 11252
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers a widget with its id for internal widget handling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to register",
            "paramName": "widget",
            "description": " The widget to register",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unregisterWidget": {
      "location": {
        "start": {
          "line": 432,
          "column": 4,
          "index": 11416
        },
        "end": {
          "line": 434,
          "column": 5,
          "index": 11498
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Unregisters the widget with the given id.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id of the widget to unregister",
            "paramName": "id",
            "description": " The id of the widget to unregister",
            "type": "String"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getWidgetById": {
      "location": {
        "start": {
          "line": 442,
          "column": 4,
          "index": 11684
        },
        "end": {
          "line": 444,
          "column": 5,
          "index": 11763
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the widget with the given id.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id of the widget",
            "paramName": "id",
            "description": " The id of the widget",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The widget with the given id",
            "type": "qx.ui.core.Widget",
            "description": " The widget with the given id"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scheduleDomUpdated": {
      "location": {
        "start": {
          "line": 452,
          "column": 4,
          "index": 11997
        },
        "end": {
          "line": 459,
          "column": 5,
          "index": 12249
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Schedules the {@link #domUpdated} method. The method will be called after a timeout\n to prevent the triggered events to be fired too often, during massive DOM manipulations.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "domUpdated": {
      "location": {
        "start": {
          "line": 468,
          "column": 4,
          "index": 12571
        },
        "end": {
          "line": 474,
          "column": 6,
          "index": 12876
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires the DOM updated event directly. Triggers the {@link qx.event.handler.Appear#refresh} and\n {@link qx.ui.mobile.core.DomUpdatedHandler#refresh} methods. Do not use this\n method during massive DOM manipulations. Use {@link #scheduleDomUpdated} instead.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "addAttributeMapping": {
      "location": {
        "start": {
          "line": 498,
          "column": 4,
          "index": 13655
        },
        "end": {
          "line": 511,
          "column": 5,
          "index": 14124
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an attribute mapping entry. This entry is used by the {@link #_applyAttribute}\n method. Shortcut when the property name differs from the real\n attribute name. Use this method if you want to add an attribute entry to the mapping\n from the defer function of a different widget.\n e.g.:\n \"selectable\" :\n {\n   attribute : \"data-selectable\",\n   values :\n   {\n     \"true\" : null,\n     \"false\" : \"false\"\n   }\n }</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "property {String} The property name",
            "paramName": "property",
            "description": " The property name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "attribute {String} The real attribute name",
            "paramName": "attribute",
            "description": " The real attribute name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "values {Map} Values of the property to the real attribute value.\n      Use null, when you want not to set the attribute.",
            "paramName": "values",
            "description": " Values of the property to the real attribute value.\n      Use null, when you want not to set the attribute.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addStyleMapping": {
      "location": {
        "start": {
          "line": 535,
          "column": 4,
          "index": 14856
        },
        "end": {
          "line": 548,
          "column": 5,
          "index": 15289
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a style mapping entry. This entry is used by the {@link #_applyStyle}\n method. Shortcut when the property name differs from the real\n style name. Use this method if you want to add a style entry to the mapping\n from the defer function of a different widget.\n e.g.:\n \"anonymous\" :\n {\n  style : \"pointer-events\",\n  values :\n  {\n    \"true\" : \"none\",\n    \"false\" : null\n  }\n }</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "property {String} The property name",
            "paramName": "property",
            "description": " The property name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "style {String} The real style name",
            "paramName": "style",
            "description": " The real style name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "values {Map} Values of the property to the real style value.\n      Use null, when you want not to set the style.",
            "paramName": "values",
            "description": " Values of the property to the real style value.\n      Use null, when you want not to set the style.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "ATTRIBUTE_MAPPING": {
      "location": {
        "start": {
          "line": 555,
          "column": 4,
          "index": 15405
        },
        "end": {
          "line": 575,
          "column": 5,
          "index": 15774
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of attribute properties to their real attribute name.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "STYLE_MAPPING": {
      "location": {
        "start": {
          "line": 582,
          "column": 4,
          "index": 15882
        },
        "end": {
          "line": 590,
          "column": 5,
          "index": 16037
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mapping of style properties to their real style name.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__containerElement": {
      "location": {
        "start": {
          "line": 600,
          "column": 4,
          "index": 16245
        },
        "end": {
          "line": 600,
          "column": 28,
          "index": 16269
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__contentElement": {
      "location": {
        "start": {
          "line": 601,
          "column": 4,
          "index": 16275
        },
        "end": {
          "line": 601,
          "column": 26,
          "index": 16297
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__layoutParent": {
      "location": {
        "start": {
          "line": 603,
          "column": 4,
          "index": 16304
        },
        "end": {
          "line": 603,
          "column": 24,
          "index": 16324
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__children": {
      "location": {
        "start": {
          "line": 604,
          "column": 4,
          "index": 16330
        },
        "end": {
          "line": 604,
          "column": 20,
          "index": 16346
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__layoutManager": {
      "location": {
        "start": {
          "line": 605,
          "column": 4,
          "index": 16352
        },
        "end": {
          "line": 605,
          "column": 25,
          "index": 16373
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_getTagName": {
      "location": {
        "start": {
          "line": 618,
          "column": 4,
          "index": 16785
        },
        "end": {
          "line": 620,
          "column": 5,
          "index": 16826
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the tag name of the container element of this widget.\n Override this method if you want to create a custom widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The container element's tag name",
            "type": "String",
            "description": " The container element's tag name"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_createContainerElement": {
      "location": {
        "start": {
          "line": 628,
          "column": 4,
          "index": 17027
        },
        "end": {
          "line": 630,
          "column": 5,
          "index": 17116
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the container DOM element of the widget.\n Override this method if you want to create a custom widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the container element.",
            "type": "Element",
            "description": " the container element."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_domUpdated": {
      "location": {
        "start": {
          "line": 636,
          "column": 4,
          "index": 17305
        },
        "end": {
          "line": 638,
          "column": 5,
          "index": 17379
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Triggers the {@link #scheduleDomUpdated} method. This method needs to be called\n when the DOM has changed, e.g. an element was added / removed / styled.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_transformId": {
      "location": {
        "start": {
          "line": 653,
          "column": 4,
          "index": 17849
        },
        "end": {
          "line": 659,
          "column": 5,
          "index": 18032
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Transforms the value of the ID property. When the value is null, an auto\n generated ID is set. This makes sure that an ID is always set.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} The set id of the widget",
            "paramName": "value",
            "description": " The set id of the widget",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The transformed ID",
            "type": "String",
            "description": " The transformed ID"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyId": {
      "location": {
        "start": {
          "line": 662,
          "column": 4,
          "index": 18061
        },
        "end": {
          "line": 672,
          "column": 5,
          "index": 18417
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "id"
      ]
    },
    "_applyEnabled": {
      "location": {
        "start": {
          "line": 680,
          "column": 4,
          "index": 18613
        },
        "end": {
          "line": 688,
          "column": 5,
          "index": 18868
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the enable property to the new value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean}, the new value of the widget",
            "paramName": "value",
            "description": ", the new value of the widget",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "old {Boolean?}, the old value of the widget",
            "paramName": "old",
            "description": ", the old value of the widget",
            "optional": true,
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "enabled"
      ]
    },
    "_add": {
      "location": {
        "start": {
          "line": 702,
          "column": 4,
          "index": 19260
        },
        "end": {
          "line": 717,
          "column": 5,
          "index": 19728
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to add.",
            "paramName": "child",
            "description": " the widget to add.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget.",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addAt": {
      "location": {
        "start": {
          "line": 728,
          "column": 4,
          "index": 20122
        },
        "end": {
          "line": 741,
          "column": 5,
          "index": 20490
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a child widget at the specified index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "index {Integer} Index, at which the widget will be inserted. If no\n   widget exists at the given index, the new widget gets appended to the\n   current list of children.",
            "paramName": "index",
            "description": " Index, at which the widget will be inserted. If no\n   widget exists at the given index, the new widget gets appended to the\n   current list of children.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "options {Map?null} Optional layout data for widget.",
            "paramName": "options",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addBefore": {
      "location": {
        "start": {
          "line": 750,
          "column": 4,
          "index": 20802
        },
        "end": {
          "line": 779,
          "column": 5,
          "index": 21607
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget before another already inserted widget</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} widget to add",
            "paramName": "child",
            "description": " widget to add",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "beforeWidget {qx.ui.core.Widget} widget before the new widget will be inserted.",
            "paramName": "beforeWidget",
            "description": " widget before the new widget will be inserted.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget.",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addAfter": {
      "location": {
        "start": {
          "line": 788,
          "column": 4,
          "index": 21929
        },
        "end": {
          "line": 825,
          "column": 5,
          "index": 23021
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a widget after another already inserted widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The widget to add.",
            "paramName": "child",
            "description": " The widget to add.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "afterWidget {qx.ui.core.Widget} Widget, after which the new widget will be inserted.",
            "paramName": "afterWidget",
            "description": " Widget, after which the new widget will be inserted.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget.",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_remove": {
      "location": {
        "start": {
          "line": 832,
          "column": 4,
          "index": 23159
        },
        "end": {
          "line": 835,
          "column": 5,
          "index": 23242
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a given child from the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The widget to remove.",
            "paramName": "child",
            "description": " The widget to remove.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeAt": {
      "location": {
        "start": {
          "line": 842,
          "column": 4,
          "index": 23382
        },
        "end": {
          "line": 849,
          "column": 5,
          "index": 23571
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the widget at the specified index.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the widget to remove.",
            "paramName": "index",
            "description": " Index of the widget to remove.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeAll": {
      "location": {
        "start": {
          "line": 855,
          "column": 4,
          "index": 23703
        },
        "end": {
          "line": 862,
          "column": 5,
          "index": 23929
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all children from the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An Array including the removed children.",
            "type": "Array",
            "description": " An Array including the removed children."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_indexOf": {
      "location": {
        "start": {
          "line": 872,
          "column": 4,
          "index": 24269
        },
        "end": {
          "line": 879,
          "column": 5,
          "index": 24419
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index position of the given widget if it is\n a child widget. Otherwise it returns <code>-1</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} the widget to query for",
            "paramName": "child",
            "description": " the widget to query for",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The index position or <code>-1</code> when\n   the given widget is no child of this layout.",
            "type": "Integer",
            "description": " The index position or <code>-1</code> when\n   the given widget is no child of this layout."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setLayoutParent": {
      "location": {
        "start": {
          "line": 888,
          "column": 4,
          "index": 24587
        },
        "end": {
          "line": 899,
          "column": 5,
          "index": 24878
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal method. Sets the layout parent.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.ui.mobile.core.Widget} The parent widget",
            "paramName": "parent",
            "description": " The parent widget",
            "type": "qx.ui.mobile.core.Widget"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeChild": {
      "location": {
        "start": {
          "line": 908,
          "column": 4,
          "index": 25081
        },
        "end": {
          "line": 915,
          "column": 5,
          "index": 25347
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal method. Removes a given child widget and the corresponding DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The widget to remove",
            "paramName": "child",
            "description": " The widget to remove",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getLayoutParent": {
      "location": {
        "start": {
          "line": 922,
          "column": 4,
          "index": 25486
        },
        "end": {
          "line": 924,
          "column": 5,
          "index": 25545
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the parent widget of this widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The parent of the widget",
            "type": "qx.ui.core.Widget",
            "description": " The parent of the widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getChildren": {
      "location": {
        "start": {
          "line": 931,
          "column": 4,
          "index": 25682
        },
        "end": {
          "line": 933,
          "column": 5,
          "index": 25734
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the children of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} The children of the widget",
            "type": "qx.ui.core.Widget[]",
            "description": " The children of the widget"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_hasChildren": {
      "location": {
        "start": {
          "line": 940,
          "column": 4,
          "index": 25874
        },
        "end": {
          "line": 942,
          "column": 5,
          "index": 25956
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget has child widgets.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the widget has children or not.",
            "type": "Boolean",
            "description": " Whether the widget has children or not."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setLayout": {
      "location": {
        "start": {
          "line": 958,
          "column": 4,
          "index": 26521
        },
        "end": {
          "line": 978,
          "column": 5,
          "index": 27114
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a layout manager for the widget. A layout manager can only be connected\n with one widget. Reset the connection with a previous widget first, if you\n like to use it in another widget instead.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "layout {qx.ui.mobile.layout.Abstract} The new layout or\n     <code>null</code> to reset the layout.",
            "paramName": "layout",
            "description": " The new layout or\n     <code>null</code> to reset the layout.",
            "type": "qx.ui.mobile.layout.Abstract"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_initializeChildLayout": {
      "location": {
        "start": {
          "line": 986,
          "column": 4,
          "index": 27332
        },
        "end": {
          "line": 993,
          "column": 5,
          "index": 27583
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes the layout of the given child widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.ui.core.Widget} The child widget",
            "paramName": "child",
            "description": " The child widget",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "layoutProperties {Map?null} Optional layout data for widget",
            "paramName": "layoutProperties",
            "description": " Optional layout data for widget",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getLayout": {
      "location": {
        "start": {
          "line": 1000,
          "column": 4,
          "index": 27748
        },
        "end": {
          "line": 1002,
          "column": 5,
          "index": 27803
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the set layout manager for the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.mobile.layout.Abstract} the layout manager of the widget.",
            "type": "qx.ui.mobile.layout.Abstract",
            "description": " the layout manager of the widget."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setLayoutProperties": {
      "location": {
        "start": {
          "line": 1009,
          "column": 4,
          "index": 27937
        },
        "end": {
          "line": 1015,
          "column": 5,
          "index": 28141
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stores the given layout properties.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {Map} Incoming layout property data",
            "paramName": "properties",
            "description": " Incoming layout property data",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateLayoutProperties": {
      "location": {
        "start": {
          "line": 1025,
          "column": 4,
          "index": 28394
        },
        "end": {
          "line": 1031,
          "column": 5,
          "index": 28592
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the layout properties of a given widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.mobile.core.Widget} The widget that should be updated",
            "paramName": "widget",
            "description": " The widget that should be updated",
            "type": "qx.ui.mobile.core.Widget"
          },
          {
            "name": "@param",
            "body": "properties {Map} Incoming layout property data",
            "paramName": "properties",
            "description": " Incoming layout property data",
            "type": "Map"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateLayout": {
      "location": {
        "start": {
          "line": 1042,
          "column": 4,
          "index": 28930
        },
        "end": {
          "line": 1048,
          "column": 5,
          "index": 29127
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the layout with the given arguments.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.mobile.core.Widget} The target widget",
            "paramName": "widget",
            "description": " The target widget",
            "type": "qx.ui.mobile.core.Widget"
          },
          {
            "name": "@param",
            "body": "action {String} The causing action that triggered the layout update.",
            "paramName": "action",
            "description": " The causing action that triggered the layout update.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "properties {Map} The animation properties to set. Key / value pairs.",
            "paramName": "properties",
            "description": " The animation properties to set. Key / value pairs.",
            "type": "Map"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_setHtml": {
      "location": {
        "start": {
          "line": 1062,
          "column": 4,
          "index": 29526
        },
        "end": {
          "line": 1065,
          "column": 5,
          "index": 29631
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the innerHTML of the content element and calls the {@link #_domUpdated}\n method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String?\"\"} The html to set in the content element.",
            "paramName": "value",
            "description": " The html to set in the content element.",
            "optional": true,
            "defaultValue": "\"\"",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_transform": {
      "location": {
        "start": {
          "line": 1070,
          "column": 4,
          "index": 29713
        },
        "end": {
          "line": 1125,
          "column": 5,
          "index": 31336
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Transforms this widget (rotate, scale, translate3d)</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "rotation",
        "transformUnit",
        "scaleX",
        "scaleY",
        "translateX",
        "translateY",
        "translateZ"
      ]
    },
    "_applyAttribute": {
      "location": {
        "start": {
          "line": 1144,
          "column": 4,
          "index": 31980
        },
        "end": {
          "line": 1146,
          "column": 5,
          "index": 32070
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shortcut for each property that should change a certain attribute of the\n container element.\n Use the {@link #addAttributeMapping} method to add a property to attribute\n mapping when the attribute name or value differs from the property name or\n value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The set value",
            "paramName": "value",
            "description": " The set value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value",
            "paramName": "old",
            "description": " The old value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "attribute {String} The property name",
            "paramName": "attribute",
            "description": " The property name",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "name",
        "activatable"
      ]
    },
    "_setAttribute": {
      "location": {
        "start": {
          "line": 1155,
          "column": 4,
          "index": 32373
        },
        "end": {
          "line": 1173,
          "column": 5,
          "index": 32977
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets an attribute with the given value of the container element. The\n <code>null</code> value resets the attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "attribute {String} The attribute name.",
            "paramName": "attribute",
            "description": " The attribute name.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} The attribute value. <code>Null</code> will reset the attribute.",
            "paramName": "value",
            "description": " The attribute value. <code>Null</code> will reset the attribute.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getAttribute": {
      "location": {
        "start": {
          "line": 1181,
          "column": 4,
          "index": 33155
        },
        "end": {
          "line": 1184,
          "column": 5,
          "index": 33298
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the set value of the given attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "attribute {String} The attribute name",
            "paramName": "attribute",
            "description": " The attribute name",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The attribute's value",
            "type": "var",
            "description": " The attribute's value"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyStyle": {
      "location": {
        "start": {
          "line": 1199,
          "column": 4,
          "index": 33786
        },
        "end": {
          "line": 1201,
          "column": 5,
          "index": 33860
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shortcut for each property that should change a certain style of the container\n element.\n Use the {@link #addStyleMapping} method to add a property to style\n mapping when the style name or value differs from the property name or\n value.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "anonymous"
      ]
    },
    "_setStyle": {
      "location": {
        "start": {
          "line": 1210,
          "column": 4,
          "index": 34180
        },
        "end": {
          "line": 1224,
          "column": 5,
          "index": 34620
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the value of a certain style of the container element. The\n <code>null</code> value resets the attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "style {String} The style of which the value should be set",
            "paramName": "style",
            "description": " The style of which the value should be set",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} The value of the style. <code>Null</code> will reset the attribute.",
            "paramName": "value",
            "description": " The value of the style. <code>Null</code> will reset the attribute.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getStyle": {
      "location": {
        "start": {
          "line": 1232,
          "column": 4,
          "index": 34846
        },
        "end": {
          "line": 1235,
          "column": 5,
          "index": 34973
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the value of a certain style of the container element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "style {String} The style name of which the value should be returned",
            "paramName": "style",
            "description": " The style name of which the value should be returned",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the style",
            "type": "var",
            "description": " The value of the style"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyDefaultCssClass": {
      "location": {
        "start": {
          "line": 1244,
          "column": 4,
          "index": 35196
        },
        "end": {
          "line": 1251,
          "column": 5,
          "index": 35356
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "defaultCssClass"
      ]
    },
    "addCssClass": {
      "location": {
        "start": {
          "line": 1259,
          "column": 4,
          "index": 35575
        },
        "end": {
          "line": 1262,
          "column": 5,
          "index": 35700
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a CSS class to the container element of the widget. Use this method\n to enhance the default appearance of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cssClass {String} The CSS class to add",
            "paramName": "cssClass",
            "description": " The CSS class to add",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addCssClasses": {
      "location": {
        "start": {
          "line": 1270,
          "column": 4,
          "index": 35959
        },
        "end": {
          "line": 1275,
          "column": 5,
          "index": 36133
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an array of CSS classes to the container element of the widget. Use this method\n to enhance the default appearance of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cssClasses {String[]} The CSS classes to add, wrapped by an array.",
            "paramName": "cssClasses",
            "description": " The CSS classes to add, wrapped by an array.",
            "type": "String[]"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeCssClass": {
      "location": {
        "start": {
          "line": 1282,
          "column": 4,
          "index": 36288
        },
        "end": {
          "line": 1287,
          "column": 5,
          "index": 36471
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a CSS class from the container element of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cssClass {String} The CSS class to remove",
            "paramName": "cssClass",
            "description": " The CSS class to remove",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeCssClasses": {
      "location": {
        "start": {
          "line": 1294,
          "column": 4,
          "index": 36657
        },
        "end": {
          "line": 1303,
          "column": 5,
          "index": 36868
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an array of CSS classes from the container element of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cssClasses {String[]} The CSS classes to remove from widget.",
            "paramName": "cssClasses",
            "description": " The CSS classes to remove from widget.",
            "type": "String[]"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toggleCssClass": {
      "location": {
        "start": {
          "line": 1310,
          "column": 4,
          "index": 37056
        },
        "end": {
          "line": 1316,
          "column": 5,
          "index": 37226
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Toggles the given CSS. Adds or removes the CSS class from the container element of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cssClass {String} The CSS class to toggle",
            "paramName": "cssClass",
            "description": " The CSS class to toggle",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasCssClass": {
      "location": {
        "start": {
          "line": 1324,
          "column": 4,
          "index": 37429
        },
        "end": {
          "line": 1326,
          "column": 5,
          "index": 37535
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the widget has a certain CSS class set.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cssClass {String} The CSS class to check",
            "paramName": "cssClass",
            "description": " The CSS class to check",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the CSS class is set or not",
            "type": "Boolean",
            "description": " Whether the CSS class is set or not"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyVisibility": {
      "location": {
        "start": {
          "line": 1335,
          "column": 4,
          "index": 37765
        },
        "end": {
          "line": 1345,
          "column": 5,
          "index": 38119
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "visibility"
      ]
    },
    "__setVisibility": {
      "location": {
        "start": {
          "line": 1353,
          "column": 4,
          "index": 38357
        },
        "end": {
          "line": 1360,
          "column": 5,
          "index": 38561
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the visibility of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The causing action that triggered the layout update.",
            "paramName": "action",
            "description": " The causing action that triggered the layout update.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "properties {Map} The animation properties to set. Key / value pairs.",
            "paramName": "properties",
            "description": " The animation properties to set. Key / value pairs.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "show": {
      "location": {
        "start": {
          "line": 1368,
          "column": 4,
          "index": 38714
        },
        "end": {
          "line": 1370,
          "column": 5,
          "index": 38789
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Make this widget visible.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {Map} The animation properties to set. Key / value pairs.",
            "paramName": "properties",
            "description": " The animation properties to set. Key / value pairs.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hide": {
      "location": {
        "start": {
          "line": 1378,
          "column": 4,
          "index": 38934
        },
        "end": {
          "line": 1380,
          "column": 5,
          "index": 39008
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hide this widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {Map} The animation properties to set. Key / value pairs.",
            "paramName": "properties",
            "description": " The animation properties to set. Key / value pairs.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 1388,
          "column": 4,
          "index": 39195
        },
        "end": {
          "line": 1390,
          "column": 5,
          "index": 39274
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Hide this widget and exclude it from the underlying layout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {Map} The animation properties to set. Key / value pairs.",
            "paramName": "properties",
            "description": " The animation properties to set. Key / value pairs.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isVisible": {
      "location": {
        "start": {
          "line": 1399,
          "column": 4,
          "index": 39492
        },
        "end": {
          "line": 1401,
          "column": 5,
          "index": 39560
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is locally visible.\n Note: This method does not respect the hierarchy.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is visible",
            "type": "Boolean",
            "description": " Returns <code>true</code> when the widget is visible"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isHidden": {
      "location": {
        "start": {
          "line": 1410,
          "column": 4,
          "index": 39776
        },
        "end": {
          "line": 1412,
          "column": 5,
          "index": 39843
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is locally hidden.\n Note: This method does not respect the hierarchy.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is hidden",
            "type": "Boolean",
            "description": " Returns <code>true</code> when the widget is hidden"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isExcluded": {
      "location": {
        "start": {
          "line": 1421,
          "column": 4,
          "index": 40063
        },
        "end": {
          "line": 1423,
          "column": 5,
          "index": 40133
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the widget is locally excluded.\n Note: This method does not respect the hierarchy.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the widget is excluded",
            "type": "Boolean",
            "description": " Returns <code>true</code> when the widget is excluded"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isSeeable": {
      "location": {
        "start": {
          "line": 1432,
          "column": 4,
          "index": 40420
        },
        "end": {
          "line": 1434,
          "column": 5,
          "index": 40496
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if the widget and all its parents are visible.\n Warning: forces rendering of the browser. Do not use this method during\n animations or performance critical tasks.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>if the widget is seeable",
            "type": "Boolean",
            "description": " <code>true</code>if the widget is seeable"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_setContainerElement": {
      "location": {
        "start": {
          "line": 1447,
          "column": 4,
          "index": 40848
        },
        "end": {
          "line": 1449,
          "column": 5,
          "index": 40926
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the container DOM element of the widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The container DOM element of the widget",
            "paramName": "element",
            "description": " The container DOM element of the widget",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getContainerElement": {
      "location": {
        "start": {
          "line": 1458,
          "column": 4,
          "index": 41101
        },
        "end": {
          "line": 1460,
          "column": 5,
          "index": 41168
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the container DOM element of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the container DOM element of the widget",
            "type": "Element",
            "description": " the container DOM element of the widget"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getContentElement": {
      "location": {
        "start": {
          "line": 1469,
          "column": 4,
          "index": 41339
        },
        "end": {
          "line": 1474,
          "column": 5,
          "index": 41505
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the content DOM element of the widget.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the content DOM element of the widget",
            "type": "Element",
            "description": " the content DOM element of the widget"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getContentElement": {
      "location": {
        "start": {
          "line": 1487,
          "column": 4,
          "index": 41973
        },
        "end": {
          "line": 1489,
          "column": 5,
          "index": 42042
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the content DOM element of the widget.\n Override this method, to define another element as the content element.\n Note: Most times this element points to to the container element.\n When the widget has a more complex element structure,\n the function should return a reference of the element that should contain\n the content.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the content DOM element of the widget",
            "type": "Element",
            "description": " the content DOM element of the widget"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "destroy": {
      "location": {
        "start": {
          "line": 1500,
          "column": 4,
          "index": 42331
        },
        "end": {
          "line": 1510,
          "column": 5,
          "index": 42522
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes this widget from its parent and disposes it.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "tr": {
      "type": "function",
      "name": "tr",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message\n Mark the message for translation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trn": {
      "type": "function",
      "name": "trn",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a plural message\n Mark the messages for translation.\n Depending on the third argument the plural or the singular form is chosen.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "count {Integer} if greater than 1 the plural form otherwise the singular form is returned.",
            "paramName": "count",
            "description": " if greater than 1 the plural form otherwise the singular form is returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trc": {
      "type": "function",
      "name": "trc",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a message with translation hint\n Mark the messages for translation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "messageId {String} message id (may contain format strings)",
            "paramName": "messageId",
            "description": " message id (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "trnc": {
      "type": "function",
      "name": "trnc",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translate a plural message with translation hint\n Mark the messages for translation.\n Depending on the third argument the plural or the singular form is chosen.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hint {String} hint for the translator of the message. Will be included in the .po file.",
            "paramName": "hint",
            "description": " hint for the translator of the message. Will be included in the .po file.",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "singularMessageId {String} message id of the singular form (may contain format strings)",
            "paramName": "singularMessageId",
            "description": " message id of the singular form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "pluralMessageId {String} message id of the plural form (may contain format strings)",
            "paramName": "pluralMessageId",
            "description": " message id of the plural form (may contain format strings)",
            "type": "qx.locale.String"
          },
          {
            "name": "@param",
            "body": "count {Integer} if greater than 1 the plural form otherwise the singular form is returned.",
            "paramName": "count",
            "description": " if greater than 1 the plural form otherwise the singular form is returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {Object?} variable number of arguments applied to the format string",
            "paramName": "varargs",
            "description": " variable number of arguments applied to the format string",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String | LocalizedString} The translated message or localized string",
            "type": "String | LocalizedString",
            "description": " The translated message or localized string"
          }
        ]
      }
    },
    "marktr": {
      "type": "function",
      "name": "marktr",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.locale.MTranslation",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark the message for translation but return the original message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "messageId {String} the message ID",
            "paramName": "messageId",
            "description": " the message ID",
            "type": "qx.locale.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} messageId",
            "type": "qx.locale.String",
            "description": " messageId"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getDefaultCssClass": {
      "type": "function",
      "name": "getDefaultCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>defaultCssClass</code>.\n\nFor further details take a look at the property definition: {@link #defaultCssClass}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for defaultCssClass"
          }
        ]
      }
    },
    "setDefaultCssClass": {
      "type": "function",
      "name": "setDefaultCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>defaultCssClass</code>.\n\nFor further details take a look at the property definition: {@link #defaultCssClass}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for defaultCssClass"
          }
        ]
      }
    },
    "resetDefaultCssClass": {
      "type": "function",
      "name": "resetDefaultCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>defaultCssClass</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #defaultCssClass}."
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>enabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ]
      }
    },
    "getName": {
      "type": "function",
      "name": "getName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for name"
          }
        ]
      }
    },
    "setName": {
      "type": "function",
      "name": "setName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for name"
          }
        ]
      }
    },
    "resetName": {
      "type": "function",
      "name": "resetName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>name</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ]
      }
    },
    "getAnonymous": {
      "type": "function",
      "name": "getAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "isAnonymous": {
      "type": "function",
      "name": "isAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for anonymous"
          }
        ]
      }
    },
    "setAnonymous": {
      "type": "function",
      "name": "setAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>anonymous</code>.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for anonymous"
          }
        ]
      }
    },
    "resetAnonymous": {
      "type": "function",
      "name": "resetAnonymous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>anonymous</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #anonymous}."
          }
        ]
      }
    },
    "getId": {
      "type": "function",
      "name": "getId",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>id</code>.\n\nFor further details take a look at the property definition: {@link #id}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for id"
          }
        ]
      }
    },
    "setId": {
      "type": "function",
      "name": "setId",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>id</code>.\n\nFor further details take a look at the property definition: {@link #id}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for id"
          }
        ]
      }
    },
    "resetId": {
      "type": "function",
      "name": "resetId",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>id</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #id}."
          }
        ]
      }
    },
    "getVisibility": {
      "type": "function",
      "name": "getVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for visibility"
          }
        ]
      }
    },
    "setVisibility": {
      "type": "function",
      "name": "setVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>visibility</code>.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for visibility"
          }
        ]
      }
    },
    "resetVisibility": {
      "type": "function",
      "name": "resetVisibility",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>visibility</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #visibility}."
          }
        ]
      }
    },
    "getActivatable": {
      "type": "function",
      "name": "getActivatable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>activatable</code>.\n\nFor further details take a look at the property definition: {@link #activatable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for activatable"
          }
        ]
      }
    },
    "isActivatable": {
      "type": "function",
      "name": "isActivatable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>activatable</code>.\n\nFor further details take a look at the property definition: {@link #activatable}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for activatable"
          }
        ]
      }
    },
    "setActivatable": {
      "type": "function",
      "name": "setActivatable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>activatable</code>.\n\nFor further details take a look at the property definition: {@link #activatable}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for activatable"
          }
        ]
      }
    },
    "resetActivatable": {
      "type": "function",
      "name": "resetActivatable",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>activatable</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #activatable}."
          }
        ]
      }
    },
    "getRotation": {
      "type": "function",
      "name": "getRotation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>rotation</code>.\n\nFor further details take a look at the property definition: {@link #rotation}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for rotation"
          }
        ]
      }
    },
    "setRotation": {
      "type": "function",
      "name": "setRotation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>rotation</code>.\n\nFor further details take a look at the property definition: {@link #rotation}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for rotation"
          }
        ]
      }
    },
    "resetRotation": {
      "type": "function",
      "name": "resetRotation",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>rotation</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #rotation}."
          }
        ]
      }
    },
    "getTransformUnit": {
      "type": "function",
      "name": "getTransformUnit",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>transformUnit</code>.\n\nFor further details take a look at the property definition: {@link #transformUnit}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for transformUnit"
          }
        ]
      }
    },
    "setTransformUnit": {
      "type": "function",
      "name": "setTransformUnit",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>transformUnit</code>.\n\nFor further details take a look at the property definition: {@link #transformUnit}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for transformUnit"
          }
        ]
      }
    },
    "resetTransformUnit": {
      "type": "function",
      "name": "resetTransformUnit",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>transformUnit</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #transformUnit}."
          }
        ]
      }
    },
    "getScaleX": {
      "type": "function",
      "name": "getScaleX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scaleX</code>.\n\nFor further details take a look at the property definition: {@link #scaleX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for scaleX"
          }
        ]
      }
    },
    "setScaleX": {
      "type": "function",
      "name": "setScaleX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>scaleX</code>.\n\nFor further details take a look at the property definition: {@link #scaleX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for scaleX"
          }
        ]
      }
    },
    "resetScaleX": {
      "type": "function",
      "name": "resetScaleX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>scaleX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #scaleX}."
          }
        ]
      }
    },
    "getScaleY": {
      "type": "function",
      "name": "getScaleY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scaleY</code>.\n\nFor further details take a look at the property definition: {@link #scaleY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for scaleY"
          }
        ]
      }
    },
    "setScaleY": {
      "type": "function",
      "name": "setScaleY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>scaleY</code>.\n\nFor further details take a look at the property definition: {@link #scaleY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for scaleY"
          }
        ]
      }
    },
    "resetScaleY": {
      "type": "function",
      "name": "resetScaleY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>scaleY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #scaleY}."
          }
        ]
      }
    },
    "getTranslateX": {
      "type": "function",
      "name": "getTranslateX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>translateX</code>.\n\nFor further details take a look at the property definition: {@link #translateX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for translateX"
          }
        ]
      }
    },
    "setTranslateX": {
      "type": "function",
      "name": "setTranslateX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>translateX</code>.\n\nFor further details take a look at the property definition: {@link #translateX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for translateX"
          }
        ]
      }
    },
    "resetTranslateX": {
      "type": "function",
      "name": "resetTranslateX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>translateX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #translateX}."
          }
        ]
      }
    },
    "getTranslateY": {
      "type": "function",
      "name": "getTranslateY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>translateY</code>.\n\nFor further details take a look at the property definition: {@link #translateY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for translateY"
          }
        ]
      }
    },
    "setTranslateY": {
      "type": "function",
      "name": "setTranslateY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>translateY</code>.\n\nFor further details take a look at the property definition: {@link #translateY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for translateY"
          }
        ]
      }
    },
    "resetTranslateY": {
      "type": "function",
      "name": "resetTranslateY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>translateY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #translateY}."
          }
        ]
      }
    },
    "getTranslateZ": {
      "type": "function",
      "name": "getTranslateZ",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>translateZ</code>.\n\nFor further details take a look at the property definition: {@link #translateZ}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for translateZ"
          }
        ]
      }
    },
    "setTranslateZ": {
      "type": "function",
      "name": "setTranslateZ",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>translateZ</code>.\n\nFor further details take a look at the property definition: {@link #translateZ}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for translateZ"
          }
        ]
      }
    },
    "resetTranslateZ": {
      "type": "function",
      "name": "resetTranslateZ",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>translateZ</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #translateZ}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1519,
        "column": 2,
        "index": 42718
      },
      "end": {
        "line": 1538,
        "column": 3,
        "index": 43274
      }
    },
    "jsdoc": {}
  },
  "defer": {
    "location": {
      "start": {
        "line": 1546,
        "column": 2,
        "index": 43461
      },
      "end": {
        "line": 1548,
        "column": 3,
        "index": 43543
      }
    },
    "jsdoc": {}
  },
  "descendants": [
    "qx.ui.mobile.basic.Atom",
    "qx.ui.mobile.basic.Image",
    "qx.ui.mobile.basic.Label",
    "qx.ui.mobile.container.Collapsible",
    "qx.ui.mobile.container.Composite",
    "qx.ui.mobile.core.Blocker",
    "qx.ui.mobile.dialog.Popup",
    "qx.ui.mobile.embed.Canvas",
    "qx.ui.mobile.embed.Html",
    "qx.ui.mobile.form.Input",
    "qx.ui.mobile.form.Label",
    "qx.ui.mobile.form.SelectBox",
    "qx.ui.mobile.form.Slider",
    "qx.ui.mobile.form.TextArea",
    "qx.ui.mobile.form.ToggleButton",
    "qx.ui.mobile.form.renderer.AbstractRenderer",
    "qx.ui.mobile.list.List",
    "qx.ui.mobile.tabbar.TabBar",
    "qx.ui.mobile.toolbar.Separator"
  ]
}