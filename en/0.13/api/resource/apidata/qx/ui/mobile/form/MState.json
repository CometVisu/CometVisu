{
  "version": 0.3,
  "lastModified": 1735222259222,
  "lastModifiedIso": "2024-12-26T14:10:59.222Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/ui/mobile/form/MState.js",
  "type": "mixin",
  "location": {
    "start": {
      "line": 6,
      "column": 0,
      "index": 150
    },
    "end": {
      "line": 73,
      "column": 3,
      "index": 1943
    }
  },
  "className": "qx.ui.mobile.form.MState",
  "jsdoc": {
    "raw": [
      "*",
      " * The mixin contains all functionality to provide methods",
      " * for form elements to manipulate their state. [usually \"valid\" and \"invalid\"]",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The mixin contains all functionality to provide methods\n for form elements to manipulate their state. [usually \"valid\" and \"invalid\"]</p>"
      }
    ]
  },
  "members": {
    "__states": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The states of the element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The states of the element</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 17,
          "column": 4,
          "index": 446
        },
        "end": {
          "line": 17,
          "column": 18,
          "index": 460
        }
      },
      "appearsIn": []
    },
    "addState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a state to the element",
          "     * @param state {String} the state to be added",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a state to the element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to be added",
            "paramName": "state",
            "description": " the state to be added",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 24,
          "column": 4,
          "index": 576
        },
        "end": {
          "line": 30,
          "column": 5,
          "index": 737
        }
      },
      "type": "function",
      "params": [
        {
          "name": "state",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "hasState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks whether the element has the state passed as argument",
          "     * @param state {String} the state to be checked",
          "     * @return {Boolean} true if the element has the state, false if it doesn't.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks whether the element has the state passed as argument</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to be checked",
            "paramName": "state",
            "description": " the state to be checked",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the element has the state, false if it doesn't.",
            "type": "boolean",
            "description": "true if the element has the state, false if it doesn't."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 968
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1052
        }
      },
      "type": "function",
      "params": [
        {
          "name": "state",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "removeState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes a state from the element",
          "     * @param state {String} the state to be removed",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a state from the element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "state {String} the state to be removed",
            "paramName": "state",
            "description": " the state to be removed",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1175
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1316
        }
      },
      "type": "function",
      "params": [
        {
          "name": "state",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "replaceState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces a state of the element with a new state.",
          "     * If the element doesn't have the state to be removed, then th new state will",
          "     * just be added.",
          "     * @param oldState {String} the state to be replaced",
          "     * @param newState {String} the state to get injected in the oldState's place",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces a state of the element with a new state.\n If the element doesn't have the state to be removed, then th new state will\n just be added.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "oldState {String} the state to be replaced",
            "paramName": "oldState",
            "description": " the state to be replaced",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "newState {String} the state to get injected in the oldState's place",
            "paramName": "newState",
            "description": " the state to get injected in the oldState's place",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1647
        },
        "end": {
          "line": 71,
          "column": 5,
          "index": 1935
        }
      },
      "type": "function",
      "params": [
        {
          "name": "oldState",
          "type": "string"
        },
        {
          "name": "newState",
          "type": "string"
        }
      ],
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}