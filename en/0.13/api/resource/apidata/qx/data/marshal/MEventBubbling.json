{
  "version": 0.3,
  "lastModified": 1735341602223,
  "lastModifiedIso": "2024-12-27T23:20:02.223Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/data/marshal/MEventBubbling.js",
  "type": "mixin",
  "location": {
    "start": {
      "line": 24,
      "column": 0,
      "index": 692
    },
    "end": {
      "line": 179,
      "column": 3,
      "index": 6309
    }
  },
  "className": "qx.data.marshal.MEventBubbling",
  "jsdoc": {
    "raw": [
      "*",
      " * Mixin used for the bubbling events. If you want to use this in your own model",
      " * classes, be sure that every property will call the",
      " * {@link #_applyEventPropagation} function on every change.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Mixin used for the bubbling events. If you want to use this in your own model\n classes, be sure that every property will call the\n {@link #_applyEventPropagation} function on every change.</p>"
      }
    ]
  },
  "events": {
    "changeBubble": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * The change event which will be fired on every change in the model no",
          "     * matter what property changes. This event bubbles so the root model will",
          "     * fire a change event on every change of its children properties too.",
          "     *",
          "     * Note that properties are required to call",
          "     * {@link #_applyEventPropagation} on apply for changes to be tracked as",
          "     * desired. It is already taken care of that properties created with the",
          "     * {@link qx.data.marshal.Json} marshaler call this method.",
          "     *",
          "     * The data will contain a map with the following four keys",
          "     *   <li>value: The new value of the property</li>",
          "     *   <li>old: The old value of the property.</li>",
          "     *   <li>name: The name of the property changed including its parent",
          "     *     properties separated by dots.</li>",
          "     *   <li>item: The item which has the changed property.</li>",
          "     * Due to that, the <code>getOldData</code> method will always return null",
          "     * because the old data is contained in the map.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The change event which will be fired on every change in the model no\n matter what property changes. This event bubbles so the root model will\n fire a change event on every change of its children properties too.\n Note that properties are required to call\n {@link #_applyEventPropagation} on apply for changes to be tracked as\n desired. It is already taken care of that properties created with the\n {@link qx.data.marshal.Json} marshaler call this method.\n The data will contain a map with the following four keys\n   <li>value: The new value of the property</li>\n   <li>old: The old value of the property.</li>\n   <li>name: The name of the property changed including its parent\n     properties separated by dots.</li>\n   <li>item: The item which has the changed property.</li>\n Due to that, the <code>getOldData</code> method will always return null\n because the old data is contained in the map.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1776
        },
        "end": {
          "line": 45,
          "column": 38,
          "index": 1810
        }
      }
    }
  },
  "members": {
    "_applyEventPropagation": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply function for every property created with the",
          "     * {@link qx.data.marshal.Json} marshaler. It fires and",
          "     * {@link #changeBubble} event on every change. It also adds the chaining",
          "     * listener if possible which is necessary for the bubbling of the events.",
          "     *",
          "     * @param value {var} The new value of the property.",
          "     * @param old {var} The old value of the property.",
          "     * @param name {String} The name of the changed property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply function for every property created with the\n {@link qx.data.marshal.Json} marshaler. It fires and\n {@link #changeBubble} event on every change. It also adds the chaining\n listener if possible which is necessary for the bubbling of the events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "string"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 2306
        },
        "end": {
          "line": 68,
          "column": 5,
          "index": 2540
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "old",
          "type": "var"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "_registerEventChaining": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Registers for the given parameters the changeBubble listener, if",
          "     * possible. It also removes the old listener, if an old item with",
          "     * a changeBubble event is given.",
          "     *",
          "     * @param value {var} The new value of the property.",
          "     * @param old {var} The old value of the property.",
          "     * @param name {String} The name of the changed property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers for the given parameters the changeBubble listener, if\n possible. It also removes the old listener, if an old item with\n a changeBubble event is given.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "string"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2925
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 4130
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "old",
          "type": "var"
        },
        {
          "name": "name",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__changePropertyListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener responsible for formating the name and firing the change event",
          "     * for the changed property.",
          "     *",
          "     * @param name {String} The name of the former properties.",
          "     * @param e {qx.event.type.Data} The date event fired by the property",
          "     *   change.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener responsible for formating the name and firing the change event\n for the changed property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the former properties.",
            "paramName": "name",
            "description": " The name of the former properties.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The date event fired by the property\n   change.",
            "paramName": "e",
            "description": " The date event fired by the property\n   change.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 4426
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 6301
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}