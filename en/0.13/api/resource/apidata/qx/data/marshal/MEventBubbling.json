{
  "className": "qx.data.marshal.MEventBubbling",
  "packageName": "qx.data.marshal",
  "name": "MEventBubbling",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0,
        "index": 692
      },
      "end": {
        "line": 179,
        "column": 3,
        "index": 6309
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Mixin used for the bubbling events. If you want to use this in your own model\n classes, be sure that every property will call the\n {@link #_applyEventPropagation} function on every change.</p>"
        }
      ]
    }
  },
  "type": "mixin",
  "events": {
    "changeBubble": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1776
        },
        "end": {
          "line": 45,
          "column": 38,
          "index": 1810
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The change event which will be fired on every change in the model no\n matter what property changes. This event bubbles so the root model will\n fire a change event on every change of its children properties too.\n Note that properties are required to call\n {@link #_applyEventPropagation} on apply for changes to be tracked as\n desired. It is already taken care of that properties created with the\n {@link qx.data.marshal.Json} marshaler call this method.\n The data will contain a map with the following four keys\n   <li>value: The new value of the property</li>\n   <li>old: The old value of the property.</li>\n   <li>name: The name of the property changed including its parent\n     properties separated by dots.</li>\n   <li>item: The item which has the changed property.</li>\n Due to that, the <code>getOldData</code> method will always return null\n because the old data is contained in the map.</p>"
          }
        ]
      },
      "name": "changeBubble",
      "type": "qx.event.type.Data"
    }
  },
  "members": {
    "_applyEventPropagation": {
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 2306
        },
        "end": {
          "line": 68,
          "column": 5,
          "index": 2540
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply function for every property created with the\n {@link qx.data.marshal.Json} marshaler. It fires and\n {@link #changeBubble} event on every change. It also adds the chaining\n listener if possible which is necessary for the bubbling of the events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_registerEventChaining": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2925
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 4130
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers for the given parameters the changeBubble listener, if\n possible. It also removes the old listener, if an old item with\n a changeBubble event is given.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__changePropertyListener": {
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 4426
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 6301
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener responsible for formating the name and firing the change event\n for the changed property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the former properties.",
            "paramName": "name",
            "description": " The name of the former properties.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The date event fired by the property\n   change.",
            "paramName": "e",
            "description": " The date event fired by the property\n   change.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "descendants": []
}