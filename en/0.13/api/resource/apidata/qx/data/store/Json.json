{
  "version": 0.3,
  "lastModified": 1729101022324,
  "lastModifiedIso": "2024-10-16T17:50:22.324Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/data/store/Json.js",
  "type": "class",
  "location": {
    "start": {
      "line": 45,
      "column": 0,
      "index": 1449
    },
    "end": {
      "line": 330,
      "column": 3,
      "index": 8752
    }
  },
  "className": "qx.data.store.Json",
  "jsdoc": {
    "raw": [
      "*",
      " * The JSON data store is responsible for fetching data from an url. The type",
      " * of the data has to be json.",
      " *",
      " * The loaded data will be parsed and saved in qooxdoo objects. Every value",
      " * of the loaded data will be stored in a qooxdoo property. The model classes",
      " * for the data will be created automatically.",
      " *",
      " * For the fetching itself it uses the {@link qx.io.request.Xhr} class and",
      " * for parsing the loaded javascript objects into qooxdoo objects, the",
      " * {@link qx.data.marshal.Json} class will be used.",
      " *",
      " * Please note that if you",
      " *",
      " * * upgrade from qooxdoo 1.4 or lower",
      " * * choose not to force the old transport",
      " * * use a delegate with qx.data.store.IStoreDelegate#configureRequest",
      " *",
      " * you probably need to change the implementation of your delegate to configure",
      " * the {@link qx.io.request.Xhr} request.",
      " *",
      " * This class only needs to be disposed if you want to abort any current I/O",
      " * request",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The JSON data store is responsible for fetching data from an url. The type\n of the data has to be json.\n The loaded data will be parsed and saved in qooxdoo objects. Every value\n of the loaded data will be stored in a qooxdoo property. The model classes\n for the data will be created automatically.\n For the fetching itself it uses the {@link qx.io.request.Xhr} class and\n for parsing the loaded javascript objects into qooxdoo objects, the\n {@link qx.data.marshal.Json} class will be used.\n Please note that if you</p>\n<ul>\n<li>upgrade from qooxdoo 1.4 or lower</li>\n<li>choose not to force the old transport</li>\n<li>use a delegate with qx.data.store.IStoreDelegate#configureRequest\nyou probably need to change the implementation of your delegate to configure\nthe {@link qx.io.request.Xhr} request.\nThis class only needs to be disposed if you want to abort any current I/O\nrequest</li>\n</ul>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "url"
      },
      {
        "name": "delegate"
      }
    ],
    "location": {
      "start": {
        "line": 56,
        "column": 2,
        "index": 1924
      },
      "end": {
        "line": 66,
        "column": 3,
        "index": 2155
      }
    }
  },
  "events": {
    "loaded": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Data event fired after the model has been created. The data will be the",
          "     * created model.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data event fired after the model has been created. The data will be the\n created model.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 2291
        },
        "end": {
          "line": 73,
          "column": 32,
          "index": 2319
        }
      }
    },
    "parseError": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when a parse error (i.e. broken JSON) occurred",
          "     * during the load. The data contains a hash of the original",
          "     * response and the parser error (exception object).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a parse error (i.e. broken JSON) occurred\n during the load. The data contains a hash of the original\n response and the parser error (exception object).</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 80,
          "column": 4,
          "index": 2524
        },
        "end": {
          "line": 80,
          "column": 36,
          "index": 2556
        }
      }
    },
    "error": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when an error (aborted, timeout or failed) occurred",
          "     * during the load. The data contains the response of the request.",
          "     * If you want more details, use the {@link #changeState} event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when an error (aborted, timeout or failed) occurred\n during the load. The data contains the response of the request.\n If you want more details, use the {@link #changeState} event.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2784
        },
        "end": {
          "line": 87,
          "column": 31,
          "index": 2811
        }
      }
    }
  },
  "properties": {
    "model": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2909
        },
        "end": {
          "line": 97,
          "column": 5,
          "index": 2972
        }
      },
      "json": {
        "nullable": true,
        "event": "changeModel"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Property for holding the loaded model instance.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Property for holding the loaded model instance.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "state": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3178
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3426
        }
      },
      "json": {
        "check": [
          "configured",
          "queued",
          "sending",
          "receiving",
          "completed",
          "aborted",
          "timeout",
          "failed"
        ],
        "init": "configured",
        "event": "changeState"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The state of the request as an url. If you want to check if the request",
          "     * did it’s job, use, the {@link #changeState} event and check for one of the",
          "     * listed values.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The state of the request as an url. If you want to check if the request\n did it’s job, use, the {@link #changeState} event and check for one of the\n listed values.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "url": {
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3496
        },
        "end": {
          "line": 128,
          "column": 5,
          "index": 3604
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyUrl",
        "event": "changeUrl",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The url where the request should go to.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The url where the request should go to.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "_marshaler": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3628
        },
        "end": {
          "line": 132,
          "column": 20,
          "index": 3644
        }
      },
      "appearsIn": []
    },
    "_delegate": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 3650
        },
        "end": {
          "line": 133,
          "column": 19,
          "index": 3665
        }
      },
      "appearsIn": []
    },
    "__request": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 3672
        },
        "end": {
          "line": 135,
          "column": 19,
          "index": 3687
        }
      },
      "appearsIn": []
    },
    "_applyUrl": {
      "jsdoc": {
        "raw": [
          " apply function"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3716
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 4000
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "old"
        }
      ],
      "appearsIn": []
    },
    "_getRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get request",
          "     *",
          "     * @return {Object} The request.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get request</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The request.",
            "type": "Record<any, any>",
            "description": "The request."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4086
        },
        "end": {
          "line": 155,
          "column": 5,
          "index": 4136
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "_setRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set request.",
          "     *",
          "     * @param request {Object} The request.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set request.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "request {Object} The request.",
            "paramName": "request",
            "description": " The request.",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 162,
          "column": 4,
          "index": 4230
        },
        "end": {
          "line": 164,
          "column": 5,
          "index": 4290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "request",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "_createRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and sends a GET request with the given url.",
          "     *",
          "     * Listeners will be added to respond to the request’s \"success\",",
          "     * \"changePhase\" and \"fail\" event.",
          "     *",
          "     * @param url {String} The url for the request.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and sends a GET request with the given url.\n Listeners will be added to respond to the request’s \"success\",\n \"changePhase\" and \"fail\" event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "url {String} The url for the request.",
            "paramName": "url",
            "description": " The url for the request.",
            "type": "string"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 4547
        },
        "end": {
          "line": 208,
          "column": 5,
          "index": 5626
        }
      },
      "type": "function",
      "params": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "_onChangePhase": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler called when request phase changes.",
          "     *",
          "     * Sets the store’s state.",
          "     *",
          "     * @param ev {qx.event.type.Data} The request’s changePhase event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler called when request phase changes.\n Sets the store’s state.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} The request’s changePhase event.",
            "paramName": "ev",
            "description": " The request’s changePhase event.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 217,
          "column": 4,
          "index": 5815
        },
        "end": {
          "line": 236,
          "column": 5,
          "index": 6290
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onFail": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler called when not completing the request successfully.",
          "     *",
          "     * @param ev {qx.event.type.Event} The request’s fail event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler called when not completing the request successfully.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Event} The request’s fail event.",
            "paramName": "ev",
            "description": " The request’s fail event.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 6453
        },
        "end": {
          "line": 246,
          "column": 5,
          "index": 6544
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "_onParseError": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler called when not completing the request successfully because",
          "     * of parse errors.",
          "     *",
          "     * @param ev {qx.event.type.Data} Hash map containing the original 'request'",
          "     *                                and the original parser 'error' exception object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler called when not completing the request successfully because\n of parse errors.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Data} Hash map containing the original 'request'\n                                and the original parser 'error' exception object.",
            "paramName": "ev",
            "description": " Hash map containing the original 'request'\n                                and the original parser 'error' exception object.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 255,
          "column": 4,
          "index": 6842
        },
        "end": {
          "line": 257,
          "column": 5,
          "index": 6921
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_onSuccess": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the completion of the requests. It invokes the creation of",
          "     * the needed classes and instances for the fetched data using",
          "     * {@link qx.data.marshal.Json}.",
          "     *",
          "     * @param ev {qx.event.type.Event} The request’s success event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the completion of the requests. It invokes the creation of\n the needed classes and instances for the fetched data using\n {@link qx.data.marshal.Json}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Event} The request’s success event.",
            "paramName": "ev",
            "description": " The request’s success event.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 266,
          "column": 4,
          "index": 7201
        },
        "end": {
          "line": 301,
          "column": 5,
          "index": 8077
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "reload": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reloads the data with the url set in the {@link #url} property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reloads the data with the url set in the {@link #url} property.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 306,
          "column": 4,
          "index": 8171
        },
        "end": {
          "line": 311,
          "column": 5,
          "index": 8285
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 320,
        "column": 2,
        "index": 8483
      },
      "end": {
        "line": 329,
        "column": 3,
        "index": 8748
      }
    }
  },
  "statics": {}
}