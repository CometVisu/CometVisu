{
  "className": "qx.data.controller.CheckedList",
  "packageName": "qx.data.controller",
  "name": "CheckedList",
  "superClass": "qx.data.controller.List",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0,
        "index": 992
      },
      "end": {
        "line": 385,
        "column": 3,
        "index": 10848
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Extension of <code>qx.data.controller.List</code> which adds support for <code>qx.ui.form.CheckedList</code>\n and <code>qx.ui.form.CheckedSelectBox</code>.\n The principal is that the underlying <code>List</code> controller implementation has a model which\n is the complete array of items that can be selected, and that array is used to populate\n the UI widget (ie as normal).\n The <code>checked</code> psuedo property in this <code>CheckedList</code> controller relates to the checked\n property of the UI widget.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 40,
        "column": 2,
        "index": 1307
      },
      "end": {
        "line": 46,
        "column": 3,
        "index": 1473
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Constructor</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "model {qx.data.Array?null} the model array",
          "paramName": "model",
          "description": " the model array",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.data.Array"
        },
        {
          "name": "@param",
          "body": "widget {qx.ui.core.Widget?null} the widget target",
          "paramName": "widget",
          "description": " the widget target",
          "optional": true,
          "defaultValue": "null",
          "type": "qx.ui.core.Widget"
        },
        {
          "name": "@param",
          "body": "path {String} the path in the model for the caption",
          "paramName": "path",
          "description": " the path in the model for the caption",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "checked": {
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1499
        },
        "end": {
          "line": 55,
          "column": 5,
          "index": 1650
        }
      },
      "name": "checked",
      "propertyType": "new",
      "event": "changeChecked",
      "apply": "_applyChecked",
      "nullable": true,
      "allowNull": true,
      "check": "qx.data.Array"
    },
    "checkedLabelPath": {
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1929
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 2031
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The path to the property which holds the information that should be\n shown as a label for a tag for a checked item. This is only needed if\n used with a CheckedSelectBox, and only if live updates of the label\n are required.</p>"
          }
        ]
      },
      "name": "checkedLabelPath",
      "propertyType": "new",
      "apply": "__P_180_0",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "checkedIconPath": {
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2310
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2411
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The path to the property which holds the information that should be\n shown as an icon for a tag for a checked item. This is only needed if\n used with a CheckedSelectBox, and only if live updates of the label\n are required.</p>"
          }
        ]
      },
      "name": "checkedIconPath",
      "propertyType": "new",
      "apply": "__P_180_0",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "checkedLabelOptions": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2601
        },
        "end": {
          "line": 88,
          "column": 5,
          "index": 2682
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the checkedLabel binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "name": "checkedLabelOptions",
      "propertyType": "new",
      "apply": "__P_180_0",
      "nullable": true,
      "allowNull": true
    },
    "checkedIconOptions": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2872
        },
        "end": {
          "line": 97,
          "column": 5,
          "index": 2952
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the checked icon binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "name": "checkedIconOptions",
      "propertyType": "new",
      "apply": "__P_180_0",
      "nullable": true,
      "allowNull": true
    },
    "selection": {
      "type": "property",
      "name": "selection",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "event": "changeSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data array containing the selected model objects. This property can be\n manipulated directly which means that a push to the selection will also\n select the corresponding element in the target.</p>"
          }
        ]
      }
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "_applyChecked": {
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2980
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 3252
        }
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "checked"
      ]
    },
    "_createItem": {
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3297
        },
        "end": {
          "line": 131,
          "column": 5,
          "index": 3795
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.data.controller.List",
      "appearsIn": [
        "qx.data.controller.List"
      ]
    },
    "__onCheckedChange": {
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3935
        },
        "end": {
          "line": 144,
          "column": 5,
          "index": 4090
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for changes to the checked array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Data} the event",
            "paramName": "evt",
            "description": " the event",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "update": {
      "location": {
        "start": {
          "line": 149,
          "column": 4,
          "index": 4135
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 4205
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.controller.List",
      "appearsIn": [
        "qx.data.controller.List"
      ]
    },
    "_setFilter": {
      "location": {
        "start": {
          "line": 157,
          "column": 4,
          "index": 4250
        },
        "end": {
          "line": 161,
          "column": 5,
          "index": 4399
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.data.controller.List",
      "appearsIn": [
        "qx.data.controller.List"
      ]
    },
    "syncWidget": {
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 4444
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 4610
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.controller.List",
      "appearsIn": [
        "qx.data.controller.List"
      ]
    },
    "_applyModel": {
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 4655
        },
        "end": {
          "line": 186,
          "column": 5,
          "index": 4926
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.data.controller.List",
      "appearsIn": [
        "qx.data.controller.List"
      ]
    },
    "_applyTarget": {
      "location": {
        "start": {
          "line": 191,
          "column": 4,
          "index": 4971
        },
        "end": {
          "line": 230,
          "column": 5,
          "index": 6089
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.data.controller.List",
      "appearsIn": [
        "qx.data.controller.List"
      ]
    },
    "__onTargetCheckedChange": {
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 6192
        },
        "end": {
          "line": 251,
          "column": 5,
          "index": 6644
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for changes in the target widget's <code>checked</code> property</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onTargetAttachResultsTag": {
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 6753
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 6950
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for changes in the target widget's <code>attachResults</code> property</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__onTargetDetachResultsTag": {
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 7059
        },
        "end": {
          "line": 269,
          "column": 5,
          "index": 7251
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for changes in the target widget's <code>detachResults</code> property</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateTags": {
      "location": {
        "start": {
          "line": 274,
          "column": 4,
          "index": 7324
        },
        "end": {
          "line": 284,
          "column": 5,
          "index": 7651
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates all tags in the target widget</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__attachTag": {
      "location": {
        "start": {
          "line": 292,
          "column": 4,
          "index": 7987
        },
        "end": {
          "line": 312,
          "column": 5,
          "index": 8626
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attaches a single tag; used to bind to the tag so that live updates to the underlying model are reflected in tag names</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "tagWidget {qx.ui.core.Widget} the widget which is the tag",
            "paramName": "tagWidget",
            "description": " the widget which is the tag",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} the list item that lists the model item that this tag is for",
            "paramName": "item",
            "description": " the list item that lists the model item that this tag is for",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__detachTag": {
      "location": {
        "start": {
          "line": 320,
          "column": 4,
          "index": 8891
        },
        "end": {
          "line": 332,
          "column": 5,
          "index": 9375
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detaches a single tag, inverse of <code>__attachTag</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "tagWidget {qx.ui.core.Widget} the widget which is the tag",
            "paramName": "tagWidget",
            "description": " the widget which is the tag",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "item {qx.ui.core.Widget} the list item that lists the model item that this tag is for",
            "paramName": "item",
            "description": " the list item that lists the model item that this tag is for",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_updateChecked": {
      "location": {
        "start": {
          "line": 337,
          "column": 4,
          "index": 9485
        },
        "end": {
          "line": 383,
          "column": 5,
          "index": 10838
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the checked widget items to match the array of checked model items</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setSelection": {
      "type": "function",
      "name": "setSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selection</code>.\n\nFor further details take a look at the property definition: {@link #selection}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.data.Array",
            "paramName": "value",
            "desc": "Value for selection"
          }
        ]
      }
    },
    "getSelection": {
      "type": "function",
      "name": "getSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selection</code>.\n\nFor further details take a look at the property definition: {@link #selection}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.data.Array",
            "desc": "Returns the value for selection"
          }
        ]
      }
    },
    "resetSelection": {
      "type": "function",
      "name": "resetSelection",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>selection</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #selection}."
          }
        ]
      }
    },
    "setValue": {
      "type": "function",
      "name": "setValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selection {qx.data.IListData|null} List data to select as value.",
            "paramName": "selection",
            "description": " List data to select as value.",
            "type": [
              "qx.data.IListData",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null} The status of this operation.",
            "type": "null",
            "description": " The status of this operation."
          }
        ]
      }
    },
    "getValue": {
      "type": "function",
      "name": "getValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.IListData} The current selection.",
            "type": "qx.data.IListData",
            "description": " The current selection."
          }
        ]
      }
    },
    "resetValue": {
      "type": "function",
      "name": "resetValue",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>resetValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ]
      }
    },
    "_applySelection": {
      "type": "function",
      "name": "_applySelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method for setting a new selection array. Only the change listener\n will be removed from the old array and added to the new.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array} The new data array for the selection.",
            "paramName": "value",
            "description": " The new data array for the selection.",
            "type": "qx.data.Array"
          },
          {
            "name": "@param",
            "body": "old {qx.data.Array|null} The old data array for the selection.",
            "paramName": "old",
            "description": " The old data array for the selection.",
            "type": [
              "qx.data.Array",
              "null"
            ]
          }
        ]
      }
    },
    "__changeSelectionArray": {
      "type": "function",
      "name": "__changeSelectionArray",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the change of the data array holding the selection.\n If a change is in the selection array, the selection update will be\n invoked.</p>"
          }
        ]
      }
    },
    "_changeTargetSelection": {
      "type": "function",
      "name": "_changeTargetSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for a change in the target selection.\n If the selection in the target has changed, the selected model objects\n will be found and added to the selection array.</p>"
          }
        ]
      }
    },
    "_addChangeTargetListener": {
      "type": "function",
      "name": "_addChangeTargetListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method which should be called by the classes including this\n Mixin when the target changes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.core.Widget|null} The new target.",
            "paramName": "value",
            "description": " The new target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.ui.core.Widget|null} The old target.",
            "paramName": "old",
            "description": " The old target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          }
        ]
      }
    },
    "_updateSelection": {
      "type": "function",
      "name": "_updateSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method for updating the selection. It checks for the case of single or\n multi selection and after that checks if the selection in the selection\n array is the same as in the target widget.</p>"
          }
        ]
      }
    },
    "__targetSupportsMultiSelection": {
      "type": "function",
      "name": "__targetSupportsMultiSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports multi selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports multi selection.",
            "type": "Boolean",
            "description": " true, if the target supports multi selection."
          }
        ]
      }
    },
    "__targetSupportsSingleSelection": {
      "type": "function",
      "name": "__targetSupportsSingleSelection",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports single selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports single selection.",
            "type": "Boolean",
            "description": " true, if the target supports single selection."
          }
        ]
      }
    },
    "__selectItem": {
      "type": "function",
      "name": "__selectItem",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for selecting an item in the target. The item to select\n is defined by a given model item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.core.Object} A model element.",
            "paramName": "item",
            "description": " A model element.",
            "type": "qx.core.Object"
          }
        ]
      }
    },
    "__getSelectableForModel": {
      "type": "function",
      "name": "__getSelectableForModel",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list item storing the given model in its model property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "model {var} The representing model of a selectable.",
            "paramName": "model",
            "description": " The representing model of a selectable.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object|null} List item or <code>null</code> if none was found",
            "type": "Object|null",
            "description": " List item or <code>null</code> if none was found"
          }
        ]
      }
    },
    "_startSelectionModification": {
      "type": "function",
      "name": "_startSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method signaling that currently the selection of the target is\n in change. That will block the change of the internal selection.\n {@link #_endSelectionModification}</p>"
          }
        ]
      }
    },
    "_endSelectionModification": {
      "type": "function",
      "name": "_endSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method signaling that the internal changing of the targets\n selection is over.\n {@link #_startSelectionModification}</p>"
          }
        ]
      }
    },
    "_inSelectionModification": {
      "type": "function",
      "name": "_inSelectionModification",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method for checking the state of the selection modification.\n {@link #<em>startSelectionModification}\n {@link #</em>endSelectionModification}</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if selection modification is active",
            "type": "Boolean",
            "description": " <code>true</code> if selection modification is active"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getModel": {
      "type": "function",
      "name": "getModel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.data.IListData",
            "desc": "Returns the value for model"
          }
        ]
      }
    },
    "setModel": {
      "type": "function",
      "name": "setModel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>model</code>.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.data.IListData",
            "paramName": "value",
            "desc": "Value for model"
          }
        ]
      }
    },
    "resetModel": {
      "type": "function",
      "name": "resetModel",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>model</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #model}."
          }
        ]
      }
    },
    "getTarget": {
      "type": "function",
      "name": "getTarget",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>target</code>.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for target"
          }
        ]
      }
    },
    "setTarget": {
      "type": "function",
      "name": "setTarget",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>target</code>.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for target"
          }
        ]
      }
    },
    "resetTarget": {
      "type": "function",
      "name": "resetTarget",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>target</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #target}."
          }
        ]
      }
    },
    "getLabelPath": {
      "type": "function",
      "name": "getLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>labelPath</code>.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for labelPath"
          }
        ]
      }
    },
    "setLabelPath": {
      "type": "function",
      "name": "setLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>labelPath</code>.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for labelPath"
          }
        ]
      }
    },
    "resetLabelPath": {
      "type": "function",
      "name": "resetLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>labelPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #labelPath}."
          }
        ]
      }
    },
    "getIconPath": {
      "type": "function",
      "name": "getIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>iconPath</code>.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for iconPath"
          }
        ]
      }
    },
    "setIconPath": {
      "type": "function",
      "name": "setIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>iconPath</code>.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for iconPath"
          }
        ]
      }
    },
    "resetIconPath": {
      "type": "function",
      "name": "resetIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>iconPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #iconPath}."
          }
        ]
      }
    },
    "getLabelOptions": {
      "type": "function",
      "name": "getLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>labelOptions</code>.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for labelOptions"
          }
        ]
      }
    },
    "setLabelOptions": {
      "type": "function",
      "name": "setLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>labelOptions</code>.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for labelOptions"
          }
        ]
      }
    },
    "resetLabelOptions": {
      "type": "function",
      "name": "resetLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>labelOptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #labelOptions}."
          }
        ]
      }
    },
    "getIconOptions": {
      "type": "function",
      "name": "getIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>iconOptions</code>.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for iconOptions"
          }
        ]
      }
    },
    "setIconOptions": {
      "type": "function",
      "name": "setIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>iconOptions</code>.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for iconOptions"
          }
        ]
      }
    },
    "resetIconOptions": {
      "type": "function",
      "name": "resetIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>iconOptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #iconOptions}."
          }
        ]
      }
    },
    "getDelegate": {
      "type": "function",
      "name": "getDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>delegate</code>.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for delegate"
          }
        ]
      }
    },
    "setDelegate": {
      "type": "function",
      "name": "setDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>delegate</code>.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for delegate"
          }
        ]
      }
    },
    "resetDelegate": {
      "type": "function",
      "name": "resetDelegate",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>delegate</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #delegate}."
          }
        ]
      }
    },
    "getAllowNull": {
      "type": "function",
      "name": "getAllowNull",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowNull</code>.\n\nFor further details take a look at the property definition: {@link #allowNull}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowNull"
          }
        ]
      }
    },
    "isAllowNull": {
      "type": "function",
      "name": "isAllowNull",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowNull</code>.\n\nFor further details take a look at the property definition: {@link #allowNull}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowNull"
          }
        ]
      }
    },
    "setAllowNull": {
      "type": "function",
      "name": "setAllowNull",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowNull</code>.\n\nFor further details take a look at the property definition: {@link #allowNull}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowNull"
          }
        ]
      }
    },
    "resetAllowNull": {
      "type": "function",
      "name": "resetAllowNull",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowNull</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowNull}."
          }
        ]
      }
    },
    "getNullValueTitle": {
      "type": "function",
      "name": "getNullValueTitle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nullValueTitle</code>.\n\nFor further details take a look at the property definition: {@link #nullValueTitle}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for nullValueTitle"
          }
        ]
      }
    },
    "setNullValueTitle": {
      "type": "function",
      "name": "setNullValueTitle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nullValueTitle</code>.\n\nFor further details take a look at the property definition: {@link #nullValueTitle}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for nullValueTitle"
          }
        ]
      }
    },
    "resetNullValueTitle": {
      "type": "function",
      "name": "resetNullValueTitle",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nullValueTitle</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nullValueTitle}."
          }
        ]
      }
    },
    "getNullValueIcon": {
      "type": "function",
      "name": "getNullValueIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nullValueIcon</code>.\n\nFor further details take a look at the property definition: {@link #nullValueIcon}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for nullValueIcon"
          }
        ]
      }
    },
    "setNullValueIcon": {
      "type": "function",
      "name": "setNullValueIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nullValueIcon</code>.\n\nFor further details take a look at the property definition: {@link #nullValueIcon}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for nullValueIcon"
          }
        ]
      }
    },
    "resetNullValueIcon": {
      "type": "function",
      "name": "resetNullValueIcon",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nullValueIcon</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nullValueIcon}."
          }
        ]
      }
    },
    "getChecked": {
      "type": "function",
      "name": "getChecked",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>checked</code>.\n\nFor further details take a look at the property definition: {@link #checked}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.data.Array",
            "desc": "Returns the value for checked"
          }
        ]
      }
    },
    "setChecked": {
      "type": "function",
      "name": "setChecked",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>checked</code>.\n\nFor further details take a look at the property definition: {@link #checked}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.data.Array",
            "paramName": "value",
            "desc": "Value for checked"
          }
        ]
      }
    },
    "resetChecked": {
      "type": "function",
      "name": "resetChecked",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>checked</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #checked}."
          }
        ]
      }
    },
    "getCheckedLabelPath": {
      "type": "function",
      "name": "getCheckedLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>checkedLabelPath</code>.\n\nFor further details take a look at the property definition: {@link #checkedLabelPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for checkedLabelPath"
          }
        ]
      }
    },
    "setCheckedLabelPath": {
      "type": "function",
      "name": "setCheckedLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>checkedLabelPath</code>.\n\nFor further details take a look at the property definition: {@link #checkedLabelPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for checkedLabelPath"
          }
        ]
      }
    },
    "resetCheckedLabelPath": {
      "type": "function",
      "name": "resetCheckedLabelPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>checkedLabelPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #checkedLabelPath}."
          }
        ]
      }
    },
    "getCheckedIconPath": {
      "type": "function",
      "name": "getCheckedIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>checkedIconPath</code>.\n\nFor further details take a look at the property definition: {@link #checkedIconPath}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for checkedIconPath"
          }
        ]
      }
    },
    "setCheckedIconPath": {
      "type": "function",
      "name": "setCheckedIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>checkedIconPath</code>.\n\nFor further details take a look at the property definition: {@link #checkedIconPath}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for checkedIconPath"
          }
        ]
      }
    },
    "resetCheckedIconPath": {
      "type": "function",
      "name": "resetCheckedIconPath",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>checkedIconPath</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #checkedIconPath}."
          }
        ]
      }
    },
    "getCheckedLabelOptions": {
      "type": "function",
      "name": "getCheckedLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>checkedLabelOptions</code>.\n\nFor further details take a look at the property definition: {@link #checkedLabelOptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for checkedLabelOptions"
          }
        ]
      }
    },
    "setCheckedLabelOptions": {
      "type": "function",
      "name": "setCheckedLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>checkedLabelOptions</code>.\n\nFor further details take a look at the property definition: {@link #checkedLabelOptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for checkedLabelOptions"
          }
        ]
      }
    },
    "resetCheckedLabelOptions": {
      "type": "function",
      "name": "resetCheckedLabelOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>checkedLabelOptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #checkedLabelOptions}."
          }
        ]
      }
    },
    "getCheckedIconOptions": {
      "type": "function",
      "name": "getCheckedIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>checkedIconOptions</code>.\n\nFor further details take a look at the property definition: {@link #checkedIconOptions}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for checkedIconOptions"
          }
        ]
      }
    },
    "setCheckedIconOptions": {
      "type": "function",
      "name": "setCheckedIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>checkedIconOptions</code>.\n\nFor further details take a look at the property definition: {@link #checkedIconOptions}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for checkedIconOptions"
          }
        ]
      }
    },
    "resetCheckedIconOptions": {
      "type": "function",
      "name": "resetCheckedIconOptions",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>checkedIconOptions</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #checkedIconOptions}."
          }
        ]
      }
    }
  },
  "events": {
    "changeSelection": {
      "type": "event",
      "name": "changeSelection",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event is fired as soon as the content of the selection property changes, but\n this is not equal to the change of the selection of the widget. If the selection\n of the widget changes, the content of the array stored in the selection property\n changes. This means you have to listen to the change event of the selection array\n to get an event as soon as the user changes the selected item.\n </p>\n<pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>"
          }
        ]
      }
    },
    "changeValue": {
      "type": "event",
      "name": "changeValue",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.data.controller.MSelection",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires after the value was modified</p>"
          }
        ]
      }
    }
  },
  "descendants": []
}