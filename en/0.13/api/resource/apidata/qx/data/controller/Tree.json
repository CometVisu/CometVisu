{
  "version": 0.3,
  "lastModified": 1722151627307,
  "lastModifiedIso": "2024-07-28T07:27:07.307Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/data/controller/Tree.js",
  "type": "class",
  "location": {
    "start": {
      "line": 49,
      "column": 0,
      "index": 1527
    },
    "end": {
      "line": 961,
      "column": 3,
      "index": 30875
    }
  },
  "className": "qx.data.controller.Tree",
  "jsdoc": {
    "raw": [
      "*",
      " * <h2>Tree Controller</h2>",
      " *",
      " * *General idea*",
      " *",
      " * The tree controller is the controller made for the {@link qx.ui.tree.Tree}",
      " * widget in qooxdoo. Therefore, it is responsible for creating and adding the",
      " * tree folders to the tree given as target.",
      " *",
      " * *Features*",
      " *",
      " * * Synchronize the model and the target",
      " * * Label and icon are bindable",
      " * * Takes care of the selection",
      " * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}",
      " *",
      " * *Usage*",
      " *",
      " * As model, you can use every qooxdoo widget structure having one property,",
      " * which is a data array holding the children of the current node. There can",
      " * be as many additional as you like.",
      " * You need to specify a model, a target, a child path and a label path to",
      " * make the controller work.",
      " *",
      " * *Cross reference*",
      " *",
      " * * If you want to bind single values, use {@link qx.data.controller.Object}",
      " * * If you want to bind a list like widget, use {@link qx.data.controller.List}",
      " * * If you want to bin a form widget, use {@link qx.data.controller.Form}",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<h2>Tree Controller</h2>\n<p><em>General idea</em>\n The tree controller is the controller made for the {@link qx.ui.tree.Tree}\n widget in qooxdoo. Therefore, it is responsible for creating and adding the\n tree folders to the tree given as target.\n<em>Features</em></p>\n<ul>\n<li>Synchronize the model and the target</li>\n<li>Label and icon are bindable</li>\n<li>Takes care of the selection</li>\n<li>Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n<em>Usage</em>\nAs model, you can use every qooxdoo widget structure having one property,\nwhich is a data array holding the children of the current node. There can\nbe as many additional as you like.\nYou need to specify a model, a target, a child path and a label path to\nmake the controller work.\n<em>Cross reference</em></li>\n<li>If you want to bind single values, use {@link qx.data.controller.Object}</li>\n<li>If you want to bind a list like widget, use {@link qx.data.controller.List}</li>\n<li>If you want to bin a form widget, use {@link qx.data.controller.Form}</li>\n</ul>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "mixins": [
    "qx.data.controller.MSelection"
  ],
  "interfaces": [
    "qx.data.controller.ISelection"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "model"
      },
      {
        "name": "target"
      },
      {
        "name": "childPath"
      },
      {
        "name": "labelPath"
      }
    ],
    "location": {
      "start": {
        "line": 72,
        "column": 2,
        "index": 2375
      },
      "end": {
        "line": 94,
        "column": 3,
        "index": 2865
      }
    }
  },
  "properties": {
    "model": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3116
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 3263
        }
      },
      "json": {
        "check": "qx.core.Object",
        "apply": "_applyModel",
        "event": "changeModel",
        "nullable": true,
        "dereference": true
      },
      "jsdoc": {
        "raw": [
          "* The root element of the data. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The root element of the data.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "target": {
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 3311
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 3448
        }
      },
      "json": {
        "apply": "_applyTarget",
        "event": "changeTarget",
        "nullable": true,
        "dereference": true
      },
      "jsdoc": {
        "raw": [
          "* The tree to bind the data to. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The tree to bind the data to.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "childPath": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3536
        },
        "end": {
          "line": 126,
          "column": 5,
          "index": 3630
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyChildPath",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* The name of the property, where the children are stored in the model. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the property, where the children are stored in the model.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "labelPath": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3768
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 3862
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyLabelPath",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The name of the property, where the value for the tree folders label",
          "     * is stored in the model classes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the property, where the value for the tree folders label\n is stored in the model classes.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "iconPath": {
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 4000
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 4092
        }
      },
      "json": {
        "check": "String",
        "apply": "_applyIconPath",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The name of the property, where the source for the tree folders icon",
          "     * is stored in the model classes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the property, where the source for the tree folders icon\n is stored in the model classes.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "labelOptions": {
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 4269
        },
        "end": {
          "line": 155,
          "column": 5,
          "index": 4346
        }
      },
      "json": {
        "apply": "_applyLabelOptions",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * A map containing the options for the label binding. The possible keys",
          "     * can be found in the {@link qx.data.SingleValueBinding} documentation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the label binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "iconOptions": {
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4522
        },
        "end": {
          "line": 164,
          "column": 5,
          "index": 4597
        }
      },
      "json": {
        "apply": "_applyIconOptions",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * A map containing the options for the icon binding. The possible keys",
          "     * can be found in the {@link qx.data.SingleValueBinding} documentation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A map containing the options for the icon binding. The possible keys\n can be found in the {@link qx.data.SingleValueBinding} documentation.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "delegate": {
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 4744
        },
        "end": {
          "line": 174,
          "column": 5,
          "index": 4831
        }
      },
      "json": {
        "apply": "_applyDelegate",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Delegation object, which can have one ore more function defined by the",
          "     * {@link IControllerDelegate} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Delegation object, which can have one ore more function defined by the\n {@link IControllerDelegate} interface.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "selection": {
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1905
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 2034
        }
      },
      "json": {
        "check": "qx.data.Array",
        "event": "changeSelection",
        "apply": "_applySelection"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Data array containing the selected model objects. This property can be",
          "     * manipulated directly which means that a push to the selection will also",
          "     * select the corresponding element in the target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data array containing the selected model objects. This property can be\n manipulated directly which means that a push to the selection will also\n select the corresponding element in the target.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    }
  },
  "members": {
    "__childrenRef": {
      "jsdoc": {
        "raw": [
          " private members"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 5062
        },
        "end": {
          "line": 185,
          "column": 23,
          "index": 5081
        }
      },
      "appearsIn": []
    },
    "__bindings": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 5087
        },
        "end": {
          "line": 186,
          "column": 20,
          "index": 5103
        }
      },
      "appearsIn": []
    },
    "__boundProperties": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 5109
        },
        "end": {
          "line": 187,
          "column": 27,
          "index": 5132
        }
      },
      "appearsIn": []
    },
    "__oldChildrenPath": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 5138
        },
        "end": {
          "line": 188,
          "column": 27,
          "index": 5161
        }
      },
      "appearsIn": []
    },
    "_applyDelegate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * If a new delegate is set, it applies the stored configuration for the",
          "     * tree folder to the already created folders once.",
          "     *",
          "     * @param value {qx.core.Object|null} The new delegate.",
          "     * @param old {qx.core.Object|null} The old delegate.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If a new delegate is set, it applies the stored configuration for the\n tree folder to the already created folders once.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.core.Object|null} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.core.Object|null} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 202,
          "column": 4,
          "index": 5637
        },
        "end": {
          "line": 206,
          "column": 5,
          "index": 5789
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "qx.core.Object",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "qx.core.Object",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "_applyIconOptions": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method which will be called after the icon options had been",
          "     * changed. This method will invoke a renewing of all bindings.",
          "     *",
          "     * @param value {Map|null} The new options map.",
          "     * @param old {Map|null} The old options map.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the icon options had been\n changed. This method will invoke a renewing of all bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Map|null} The new options map.",
            "paramName": "value",
            "description": " The new options map.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {Map|null} The old options map.",
            "paramName": "old",
            "description": " The old options map.",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 6062
        },
        "end": {
          "line": 217,
          "column": 5,
          "index": 6129
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "Map",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "Map",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "_applyLabelOptions": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method which will be called after the label options had been",
          "     * changed. This method will invoke a renewing of all bindings.",
          "     *",
          "     * @param value {Map|null} The new options map.",
          "     * @param old {Map|null} The old options map.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the label options had been\n changed. This method will invoke a renewing of all bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Map|null} The new options map.",
            "paramName": "value",
            "description": " The new options map.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {Map|null} The old options map.",
            "paramName": "old",
            "description": " The old options map.",
            "type": [
              "Map",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 226,
          "column": 4,
          "index": 6403
        },
        "end": {
          "line": 228,
          "column": 5,
          "index": 6471
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "Map",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "Map",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "_applyTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method which will be called after the target had been",
          "     * changed. This method will clean up the old tree and will initially",
          "     * build up the new tree containing the data from the model.",
          "     *",
          "     * @param value {qx.ui.tree.Tree|null} The new tree.",
          "     * @param old {qx.ui.tree.Tree|null} The old tree.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the target had been\n changed. This method will clean up the old tree and will initially\n build up the new tree containing the data from the model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.tree.Tree|null} The new tree.",
            "paramName": "value",
            "description": " The new tree.",
            "type": [
              "qx.ui.tree.Tree",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.ui.tree.Tree|null} The old tree.",
            "paramName": "old",
            "description": " The old tree.",
            "type": [
              "qx.ui.tree.Tree",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 238,
          "column": 4,
          "index": 6819
        },
        "end": {
          "line": 252,
          "column": 5,
          "index": 7184
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "qx.ui.tree.Tree",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "qx.ui.tree.Tree",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "_applyModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method which will be called after the model had been",
          "     * changed. This method invoke a new building of the tree.",
          "     *",
          "     * @param value {qx.core.Object|null} The new tree.",
          "     * @param old {qx.core.Object|null} The old tree.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the model had been\n changed. This method invoke a new building of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.core.Object|null} The new tree.",
            "paramName": "value",
            "description": " The new tree.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.core.Object|null} The old tree.",
            "paramName": "old",
            "description": " The old tree.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 7453
        },
        "end": {
          "line": 263,
          "column": 5,
          "index": 7510
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "qx.core.Object",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "qx.core.Object",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "_applyChildPath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method which will be called after the child path had been",
          "     * changed. This method invoke a new building of the tree.",
          "     *",
          "     * @param value {String|null} The new path to the children property.",
          "     * @param old {String|null} The old path to the children property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the child path had been\n changed. This method invoke a new building of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String|null} The new path to the children property.",
            "paramName": "value",
            "description": " The new path to the children property.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {String|null} The old path to the children property.",
            "paramName": "old",
            "description": " The old path to the children property.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 272,
          "column": 4,
          "index": 7818
        },
        "end": {
          "line": 278,
          "column": 5,
          "index": 8055
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "String",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "_applyIconPath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method which will be called after the icon path had been",
          "     * changed. This method invoke a new building of the tree.",
          "     *",
          "     * @param value {String|null} The new path to the icon property.",
          "     * @param old {String|null} The old path or the icon property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the icon path had been\n changed. This method invoke a new building of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String|null} The new path to the icon property.",
            "paramName": "value",
            "description": " The new path to the icon property.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {String|null} The old path or the icon property.",
            "paramName": "old",
            "description": " The old path or the icon property.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 287,
          "column": 4,
          "index": 8354
        },
        "end": {
          "line": 289,
          "column": 5,
          "index": 8418
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "String",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "_applyLabelPath": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method which will be called after the label path had been",
          "     * changed. This method invoke a new building of the tree.",
          "     *",
          "     * @param value {String|null} The new path to the label property.",
          "     * @param old {String|null} The old path of the label property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called after the label path had been\n changed. This method invoke a new building of the tree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String|null} The new path to the label property.",
            "paramName": "value",
            "description": " The new path to the label property.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {String|null} The old path of the label property.",
            "paramName": "old",
            "description": " The old path of the label property.",
            "type": [
              "String",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 298,
          "column": 4,
          "index": 8720
        },
        "end": {
          "line": 300,
          "column": 5,
          "index": 8781
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "String",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "__changeModelChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler function handling the change of a length of a children array.",
          "     * This method invokes a rebuild of the corresponding subtree.",
          "     *",
          "     * @param ev {qx.event.type.Event} The changeLength event of a data array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler function handling the change of a length of a children array.\n This method invokes a rebuild of the corresponding subtree.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ev {qx.event.type.Event} The changeLength event of a data array.",
            "paramName": "ev",
            "description": " The changeLength event of a data array.",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 313,
          "column": 4,
          "index": 9229
        },
        "end": {
          "line": 324,
          "column": 5,
          "index": 9713
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ev",
          "type": "qx.event.type.Event"
        }
      ],
      "appearsIn": []
    },
    "__changeChildrenArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler function taking care of the changes of the children array itself.",
          "     *",
          "     * @param e {qx.event.type.Data} Change event for the children property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler function taking care of the changes of the children array itself.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} Change event for the children property.",
            "paramName": "e",
            "description": " Change event for the children property.",
            "type": "qx.event.type.Data"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 331,
          "column": 4,
          "index": 9901
        },
        "end": {
          "line": 384,
          "column": 5,
          "index": 11528
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Data"
        }
      ],
      "appearsIn": []
    },
    "_createItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates a TreeFolder and delegates the configure method if a delegate is",
          "     * set and the needed function (configureItem) is available.",
          "     *",
          "     * @return {qx.ui.tree.core.AbstractTreeItem} The created and configured TreeFolder.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a TreeFolder and delegates the configure method if a delegate is\n set and the needed function (configureItem) is available.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.tree.core.AbstractTreeItem} The created and configured TreeFolder.",
            "type": "qx.ui.tree.core.AbstractTreeItem",
            "description": "The created and configured TreeFolder."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 397,
          "column": 4,
          "index": 11987
        },
        "end": {
          "line": 411,
          "column": 5,
          "index": 12488
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.tree.core.AbstractTreeItem"
      },
      "appearsIn": []
    },
    "__buildTree": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper function to build up the tree corresponding to the data",
          "     * stored in the model. This function creates the root node and hands the",
          "     * recursive creation of all subtrees to the {#__updateTreeChildren}",
          "     * function.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper function to build up the tree corresponding to the data\n stored in the model. This function creates the root node and hands the\n recursive creation of all subtrees to the {#__updateTreeChildren}\n function.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 419,
          "column": 4,
          "index": 12758
        },
        "end": {
          "line": 450,
          "column": 5,
          "index": 13832
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__updateTreeChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Main method building up the tree folders corresponding to the given",
          "     * model node. The new created subtree will be added to the given tree node.",
          "     *",
          "     * @param rootNode {qx.ui.tree.TreeFolder} The tree folder to add the new",
          "     *   created subtree.",
          "     *",
          "     * @param modelNode {qx.core.Object} The model nodes which represent the",
          "     *   data in the current subtree.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Main method building up the tree folders corresponding to the given\n model node. The new created subtree will be added to the given tree node.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rootNode {qx.ui.tree.TreeFolder} The tree folder to add the new\n   created subtree.",
            "paramName": "rootNode",
            "description": " The tree folder to add the new\n   created subtree.",
            "type": "qx.ui.tree.TreeFolder"
          },
          {
            "name": "@param",
            "body": "modelNode {qx.core.Object} The model nodes which represent the\n   data in the current subtree.",
            "paramName": "modelNode",
            "description": " The model nodes which represent the\n   data in the current subtree.",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 462,
          "column": 4,
          "index": 14244
        },
        "end": {
          "line": 564,
          "column": 5,
          "index": 17700
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rootNode",
          "type": "qx.ui.tree.TreeFolder"
        },
        {
          "name": "modelNode",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "__emptyTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all folders and bindings for the current set target.",
          "     * @param tree {qx.ui.tree.Tree} The tree to empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all folders and bindings for the current set target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "tree {qx.ui.tree.Tree} The tree to empty.",
            "paramName": "tree",
            "description": " The tree to empty.",
            "type": "qx.ui.tree.Tree"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 570,
          "column": 4,
          "index": 17847
        },
        "end": {
          "line": 591,
          "column": 5,
          "index": 18444
        }
      },
      "type": "function",
      "params": [
        {
          "name": "tree",
          "type": "qx.ui.tree.Tree"
        }
      ],
      "appearsIn": []
    },
    "__removeAllFolders": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all child folders of the given tree node. Also removes all",
          "     * bindings for the removed folders.",
          "     *",
          "     * @param node {qx.ui.tree.core.AbstractTreeItem} The used tree folder.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all child folders of the given tree node. Also removes all\n bindings for the removed folders.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {qx.ui.tree.core.AbstractTreeItem} The used tree folder.",
            "paramName": "node",
            "description": " The used tree folder.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 599,
          "column": 4,
          "index": 18665
        },
        "end": {
          "line": 608,
          "column": 5,
          "index": 18997
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.ui.tree.core.AbstractTreeItem"
        }
      ],
      "appearsIn": []
    },
    "__removeFolder": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper method removing the given folder form the given root",
          "     * node. All set bindings will be removed and the old tree folder will be",
          "     * destroyed.",
          "     *",
          "     * @param treeFolder {qx.ui.tree.core.AbstractTreeItem} The folder to remove.",
          "     * @param rootNode {qx.ui.tree.core.AbstractTreeItem} The folder holding the",
          "     *   treeFolder.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method removing the given folder form the given root\n node. All set bindings will be removed and the old tree folder will be\n destroyed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "treeFolder {qx.ui.tree.core.AbstractTreeItem} The folder to remove.",
            "paramName": "treeFolder",
            "description": " The folder to remove.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "rootNode {qx.ui.tree.core.AbstractTreeItem} The folder holding the\n   treeFolder.",
            "paramName": "rootNode",
            "description": " The folder holding the\n   treeFolder.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 619,
          "column": 4,
          "index": 19383
        },
        "end": {
          "line": 651,
          "column": 5,
          "index": 20603
        }
      },
      "type": "function",
      "params": [
        {
          "name": "treeFolder",
          "type": "qx.ui.tree.core.AbstractTreeItem"
        },
        {
          "name": "rootNode",
          "type": "qx.ui.tree.core.AbstractTreeItem"
        }
      ],
      "appearsIn": []
    },
    "bindProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for binding a given property from the model to the target",
          "     * widget.",
          "     * This method should only be called in the",
          "     * {@link qx.data.controller.IControllerDelegate#bindItem} function",
          "     * implemented by the {@link #delegate} property.",
          "     *",
          "     * @param sourcePath {String | null} The path to the property in the model.",
          "     *   If you use an empty string, the whole model item will be bound.",
          "     * @param targetPath {String} The name of the property in the target",
          "     *   widget.",
          "     * @param options {Map | null} The options to use by",
          "     *  {@link qx.data.SingleValueBinding#bind} for the binding.",
          "     * @param targetWidget {qx.ui.tree.core.AbstractTreeItem} The target widget.",
          "     * @param modelNode {var} The model node which should be bound to the target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for binding a given property from the model to the target\n widget.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePath {String | null} The path to the property in the model.\n   If you use an empty string, the whole model item will be bound.",
            "paramName": "sourcePath",
            "description": " The path to the property in the model.\n   If you use an empty string, the whole model item will be bound.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "targetPath {String} The name of the property in the target\n   widget.",
            "paramName": "targetPath",
            "description": " The name of the property in the target\n   widget.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map | null} The options to use by\n  {@link qx.data.SingleValueBinding#bind} for the binding.",
            "paramName": "options",
            "description": " The options to use by\n  {@link qx.data.SingleValueBinding#bind} for the binding.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "targetWidget {qx.ui.tree.core.AbstractTreeItem} The target widget.",
            "paramName": "targetWidget",
            "description": " The target widget.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "modelNode {var} The model node which should be bound to the target.",
            "paramName": "modelNode",
            "description": " The model node which should be bound to the target.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 674,
          "column": 4,
          "index": 21624
        },
        "end": {
          "line": 703,
          "column": 5,
          "index": 22672
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sourcePath",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "targetPath",
          "type": "string"
        },
        {
          "name": "options",
          "type": [
            "Map",
            "null"
          ]
        },
        {
          "name": "targetWidget",
          "type": "qx.ui.tree.core.AbstractTreeItem"
        },
        {
          "name": "modelNode",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "bindPropertyReverse": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for binding a given property from the target widget to",
          "     * the model.",
          "     * This method should only be called in the",
          "     * {@link qx.data.controller.IControllerDelegate#bindItem} function",
          "     * implemented by the {@link #delegate} property.",
          "     *",
          "     * @param targetPath {String | null} The path to the property in the model.",
          "     * @param sourcePath {String} The name of the property in the target",
          "     *   widget.",
          "     * @param options {Map | null} The options to use by",
          "     *   {@link qx.data.SingleValueBinding#bind} for the binding.",
          "     * @param sourceWidget {qx.ui.tree.core.AbstractTreeItem} The source widget.",
          "     * @param modelNode {var} The model node which should be bound to the target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for binding a given property from the target widget to\n the model.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetPath {String | null} The path to the property in the model.",
            "paramName": "targetPath",
            "description": " The path to the property in the model.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "sourcePath {String} The name of the property in the target\n   widget.",
            "paramName": "sourcePath",
            "description": " The name of the property in the target\n   widget.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map | null} The options to use by\n   {@link qx.data.SingleValueBinding#bind} for the binding.",
            "paramName": "options",
            "description": " The options to use by\n   {@link qx.data.SingleValueBinding#bind} for the binding.",
            "type": [
              "Map",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "sourceWidget {qx.ui.tree.core.AbstractTreeItem} The source widget.",
            "paramName": "sourceWidget",
            "description": " The source widget.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "modelNode {var} The model node which should be bound to the target.",
            "paramName": "modelNode",
            "description": " The model node which should be bound to the target.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 720,
          "column": 4,
          "index": 23426
        },
        "end": {
          "line": 758,
          "column": 5,
          "index": 24580
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetPath",
          "type": [
            "String",
            "null"
          ]
        },
        {
          "name": "sourcePath",
          "type": "string"
        },
        {
          "name": "options",
          "type": [
            "Map",
            "null"
          ]
        },
        {
          "name": "sourceWidget",
          "type": "qx.ui.tree.core.AbstractTreeItem"
        },
        {
          "name": "modelNode",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "bindDefaultProperties": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for binding the default properties (label and icon) from",
          "     * the model to the target widget.",
          "     *",
          "     * This method should only be called in the",
          "     * {@link qx.data.controller.IControllerDelegate#bindItem} function",
          "     * implemented by the {@link #delegate} property.",
          "     *",
          "     * @param treeNode {qx.ui.tree.core.AbstractTreeItem} The tree node",
          "     *   corresponding to the model node.",
          "     * @param modelNode {qx.core.Object} The model node holding the data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for binding the default properties (label and icon) from\n the model to the target widget.\n This method should only be called in the\n {@link qx.data.controller.IControllerDelegate#bindItem} function\n implemented by the {@link #delegate} property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "treeNode {qx.ui.tree.core.AbstractTreeItem} The tree node\n   corresponding to the model node.",
            "paramName": "treeNode",
            "description": " The tree node\n   corresponding to the model node.",
            "type": "qx.ui.tree.core.AbstractTreeItem"
          },
          {
            "name": "@param",
            "body": "modelNode {qx.core.Object} The model node holding the data.",
            "paramName": "modelNode",
            "description": " The model node holding the data.",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 772,
          "column": 4,
          "index": 25096
        },
        "end": {
          "line": 792,
          "column": 5,
          "index": 25547
        }
      },
      "type": "function",
      "params": [
        {
          "name": "treeNode",
          "type": "qx.ui.tree.core.AbstractTreeItem"
        },
        {
          "name": "modelNode",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "__renewBindings": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method renewing all bindings with the currently saved options and",
          "     * paths.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method renewing all bindings with the currently saved options and\n paths.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 798,
          "column": 4,
          "index": 25664
        },
        "end": {
          "line": 816,
          "column": 5,
          "index": 26338
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__addBinding": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper method adding the right bindings from the given",
          "     * modelNode to the given treeNode.",
          "     *",
          "     * @param modelNode {qx.core.Object} The model node holding the data.",
          "     * @param treeNode {qx.ui.tree.TreeFolder} The corresponding tree folder",
          "     *   to the model node.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method adding the right bindings from the given\n modelNode to the given treeNode.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "modelNode {qx.core.Object} The model node holding the data.",
            "paramName": "modelNode",
            "description": " The model node holding the data.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "treeNode {qx.ui.tree.TreeFolder} The corresponding tree folder\n   to the model node.",
            "paramName": "treeNode",
            "description": " The corresponding tree folder\n   to the model node.",
            "type": "qx.ui.tree.TreeFolder"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 826,
          "column": 4,
          "index": 26658
        },
        "end": {
          "line": 836,
          "column": 5,
          "index": 27057
        }
      },
      "type": "function",
      "params": [
        {
          "name": "modelNode",
          "type": "qx.core.Object"
        },
        {
          "name": "treeNode",
          "type": "qx.ui.tree.TreeFolder"
        }
      ],
      "appearsIn": []
    },
    "__removeBinding": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper method for removing bindings for a given model node.",
          "     *",
          "     * @param modelNode {qx.core.Object} the model node for which the bindings",
          "     *   should be removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method for removing bindings for a given model node.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "modelNode {qx.core.Object} the model node for which the bindings\n   should be removed.",
            "paramName": "modelNode",
            "description": " the model node for which the bindings\n   should be removed.",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 844,
          "column": 4,
          "index": 27270
        },
        "end": {
          "line": 860,
          "column": 5,
          "index": 27912
        }
      },
      "type": "function",
      "params": [
        {
          "name": "modelNode",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "_setConfigureItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for applying the delegate It checks if a configureItem",
          "     * is set end invokes the initial process to apply the given function.",
          "     *",
          "     * @param value {Object} The new delegate.",
          "     * @param old {Object} The old delegate.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate It checks if a configureItem\n is set end invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 874,
          "column": 4,
          "index": 28382
        },
        "end": {
          "line": 886,
          "column": 5,
          "index": 28765
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Record<any, any>"
        },
        {
          "name": "old",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "_setCreateItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for applying the delegate. It checks if a createItem",
          "     * is set and invokes the initial process to apply the given function.",
          "     *",
          "     * @param value {Object} The new delegate.",
          "     * @param old {Object} The old delegate.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate. It checks if a createItem\n is set and invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 895,
          "column": 4,
          "index": 29036
        },
        "end": {
          "line": 921,
          "column": 5,
          "index": 29737
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Record<any, any>"
        },
        {
          "name": "old",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "_setBindItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for applying the delegate It checks if a bindItem",
          "     * is set end invokes the initial process to apply the given function.",
          "     *",
          "     * @param value {Object} The new delegate.",
          "     * @param old {Object} The old delegate.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for applying the delegate It checks if a bindItem\n is set end invokes the initial process to apply the given function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Object} The new delegate.",
            "paramName": "value",
            "description": " The new delegate.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "old {Object} The old delegate.",
            "paramName": "old",
            "description": " The old delegate.",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 930,
          "column": 4,
          "index": 30005
        },
        "end": {
          "line": 943,
          "column": 5,
          "index": 30384
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Record<any, any>"
        },
        {
          "name": "old",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "_modifingSelection": {
      "jsdoc": {
        "raw": [
          " set the semaphore-like variable for the selection change"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 3013
        },
        "end": {
          "line": 91,
          "column": 25,
          "index": 3034
        }
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "__selectionListenerId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 3040
        },
        "end": {
          "line": 92,
          "column": 31,
          "index": 3067
        }
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "__selectionArrayListenerId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 3073
        },
        "end": {
          "line": 93,
          "column": 36,
          "index": 3105
        }
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "__ownSelection": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 3111
        },
        "end": {
          "line": 94,
          "column": 24,
          "index": 3131
        }
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * setValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @param selection {qx.data.IListData|null} List data to select as value.",
          "     * @return {null} The status of this operation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>setValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "selection {qx.data.IListData|null} List data to select as value.",
            "paramName": "selection",
            "description": " List data to select as value.",
            "type": [
              "qx.data.IListData",
              "null"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null} The status of this operation.",
            "type": "null",
            "description": "The status of this operation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 3368
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 3539
        }
      },
      "type": "function",
      "params": [
        {
          "name": "selection",
          "type": [
            "qx.data.IListData",
            "null"
          ]
        }
      ],
      "returnType": {
        "type": "null"
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * getValue implements part of the {@link qx.ui.form.IField} interface.",
          "     *",
          "     * @return {qx.data.IListData} The current selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>getValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.IListData} The current selection.",
            "type": "qx.data.IListData",
            "description": "The current selection."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3703
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 3755
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.data.IListData"
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "resetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * resetValue implements part of the {@link qx.ui.form.IField} interface.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>resetValue implements part of the {@link qx.ui.form.IField} interface.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3856
        },
        "end": {
          "line": 126,
          "column": 5,
          "index": 3905
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "_applySelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method for setting a new selection array. Only the change listener",
          "     * will be removed from the old array and added to the new.",
          "     *",
          "     * @param value {qx.data.Array} The new data array for the selection.",
          "     * @param old {qx.data.Array|null} The old data array for the selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method for setting a new selection array. Only the change listener\n will be removed from the old array and added to the new.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.data.Array} The new data array for the selection.",
            "paramName": "value",
            "description": " The new data array for the selection.",
            "type": "qx.data.Array"
          },
          {
            "name": "@param",
            "body": "old {qx.data.Array|null} The old data array for the selection.",
            "paramName": "old",
            "description": " The old data array for the selection.",
            "type": [
              "qx.data.Array",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 140,
          "column": 4,
          "index": 4425
        },
        "end": {
          "line": 157,
          "column": 5,
          "index": 4997
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "qx.data.Array"
        },
        {
          "name": "old",
          "type": [
            "qx.data.Array",
            "null"
          ]
        }
      ],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "__changeSelectionArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for the change of the data array holding the selection.",
          "     * If a change is in the selection array, the selection update will be",
          "     * invoked.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for the change of the data array holding the selection.\n If a change is in the selection array, the selection update will be\n invoked.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 5383
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 5446
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "_changeTargetSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event handler for a change in the target selection.",
          "     * If the selection in the target has changed, the selected model objects",
          "     * will be found and added to the selection array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event handler for a change in the target selection.\n If the selection in the target has changed, the selected model objects\n will be found and added to the selection array.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 5661
        },
        "end": {
          "line": 219,
          "column": 5,
          "index": 6932
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "_addChangeTargetListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method which should be called by the classes including this",
          "     * Mixin when the target changes.",
          "     *",
          "     * @param value {qx.ui.core.Widget|null} The new target.",
          "     * @param old {qx.ui.core.Widget|null} The old target.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method which should be called by the classes including this\n Mixin when the target changes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.ui.core.Widget|null} The new target.",
            "paramName": "value",
            "description": " The new target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.ui.core.Widget|null} The old target.",
            "paramName": "old",
            "description": " The old target.",
            "type": [
              "qx.ui.core.Widget",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 233,
          "column": 4,
          "index": 7385
        },
        "end": {
          "line": 253,
          "column": 5,
          "index": 8029
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "qx.ui.core.Widget",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "qx.ui.core.Widget",
            "null"
          ]
        }
      ],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "_updateSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Method for updating the selection. It checks for the case of single or",
          "     * multi selection and after that checks if the selection in the selection",
          "     * array is the same as in the target widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method for updating the selection. It checks for the case of single or\n multi selection and after that checks if the selection in the selection\n array is the same as in the target widget.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 260,
          "column": 4,
          "index": 8259
        },
        "end": {
          "line": 321,
          "column": 5,
          "index": 10722
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "__targetSupportsMultiSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-method returning true, if the target supports multi selection.",
          "     * @return {Boolean} true, if the target supports multi selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports multi selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports multi selection.",
            "type": "boolean",
            "description": "true, if the target supports multi selection."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 327,
          "column": 4,
          "index": 10893
        },
        "end": {
          "line": 333,
          "column": 5,
          "index": 11095
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "__targetSupportsSingleSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-method returning true, if the target supports single selection.",
          "     * @return {Boolean} true, if the target supports single selection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-method returning true, if the target supports single selection.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the target supports single selection.",
            "type": "boolean",
            "description": "true, if the target supports single selection."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 339,
          "column": 4,
          "index": 11268
        },
        "end": {
          "line": 345,
          "column": 5,
          "index": 11472
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "__selectItem": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for selecting an item in the target. The item to select",
          "     * is defined by a given model item.",
          "     *",
          "     * @param item {qx.core.Object} A model element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for selecting an item in the target. The item to select\n is defined by a given model item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {qx.core.Object} A model element.",
            "paramName": "item",
            "description": " A model element.",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 353,
          "column": 4,
          "index": 11675
        },
        "end": {
          "line": 367,
          "column": 5,
          "index": 12232
        }
      },
      "type": "function",
      "params": [
        {
          "name": "item",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "__getSelectableForModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the list item storing the given model in its model property.",
          "     *",
          "     * @param model {var} The representing model of a selectable.",
          "     * @return {Object|null} List item or <code>null</code> if none was found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list item storing the given model in its model property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "model {var} The representing model of a selectable.",
            "paramName": "model",
            "description": " The representing model of a selectable.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object|null} List item or <code>null</code> if none was found",
            "type": "Object|null",
            "description": "List item or <code>null</code> if none was found"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 375,
          "column": 4,
          "index": 12482
        },
        "end": {
          "line": 387,
          "column": 5,
          "index": 12877
        }
      },
      "type": "function",
      "params": [
        {
          "name": "model",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Object|null"
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "_startSelectionModification": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-Method signaling that currently the selection of the target is",
          "     * in change. That will block the change of the internal selection.",
          "     * {@link #_endSelectionModification}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method signaling that currently the selection of the target is\n in change. That will block the change of the internal selection.\n {@link #_endSelectionModification}</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 394,
          "column": 4,
          "index": 13091
        },
        "end": {
          "line": 396,
          "column": 5,
          "index": 13161
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "_endSelectionModification": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-Method signaling that the internal changing of the targets",
          "     * selection is over.",
          "     * {@link #_startSelectionModification}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method signaling that the internal changing of the targets\n selection is over.\n {@link #_startSelectionModification}</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 403,
          "column": 4,
          "index": 13327
        },
        "end": {
          "line": 405,
          "column": 5,
          "index": 13432
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    },
    "_inSelectionModification": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-Method for checking the state of the selection modification.",
          "     * {@link #_startSelectionModification}",
          "     * {@link #_endSelectionModification}",
          "     * @return {Boolean} <code>true</code> if selection modification is active",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Method for checking the state of the selection modification.\n {@link #<em>startSelectionModification}\n {@link #</em>endSelectionModification}</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if selection modification is active",
            "type": "boolean",
            "description": "<code>true</code> if selection modification is active"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 413,
          "column": 4,
          "index": 13695
        },
        "end": {
          "line": 415,
          "column": 5,
          "index": 13771
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.data.controller.MSelection"
      ],
      "mixin": "qx.data.controller.MSelection"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 952,
        "column": 2,
        "index": 30584
      },
      "end": {
        "line": 960,
        "column": 3,
        "index": 30871
      }
    }
  },
  "statics": {}
}