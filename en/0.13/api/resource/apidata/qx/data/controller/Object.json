{
  "version": 0.3,
  "lastModified": 1722153601183,
  "lastModifiedIso": "2024-07-28T08:00:01.183Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/data/controller/Object.js",
  "type": "class",
  "location": {
    "start": {
      "line": 48,
      "column": 0,
      "index": 1618
    },
    "end": {
      "line": 389,
      "column": 3,
      "index": 11729
    }
  },
  "className": "qx.data.controller.Object",
  "jsdoc": {
    "raw": [
      "*",
      " * <h2>Object Controller</h2>",
      " *",
      " * *General idea*",
      " *",
      " * The idea of the object controller is to make the binding of one model object",
      " * containing one or more properties as easy as possible. Therefore the",
      " * controller can take a model as property. Every property in that model can be",
      " * bound to one or more target properties. The binding will be for",
      " * atomic types only like Numbers, Strings, ...",
      " *",
      " * *Features*",
      " *",
      " * * Manages the bindings between the model properties and the different targets",
      " * * No need for the user to take care of the binding ids",
      " * * Can create an bidirectional binding (read- / write-binding)",
      " * * Handles the change of the model which means adding the old targets",
      " *",
      " * *Usage*",
      " *",
      " * The controller only can work if a model is set. If the model property is",
      " * null, the controller is not working. But it can be null on any time.",
      " *",
      " * *Cross reference*",
      " *",
      " * * If you want to bind a list like widget, use {@link qx.data.controller.List}",
      " * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}",
      " * * If you want to bind a form widget, use {@link qx.data.controller.Form}",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<h2>Object Controller</h2>\n<p><em>General idea</em>\n The idea of the object controller is to make the binding of one model object\n containing one or more properties as easy as possible. Therefore the\n controller can take a model as property. Every property in that model can be\n bound to one or more target properties. The binding will be for\n atomic types only like Numbers, Strings, â€¦\n<em>Features</em></p>\n<ul>\n<li>Manages the bindings between the model properties and the different targets</li>\n<li>No need for the user to take care of the binding ids</li>\n<li>Can create an bidirectional binding (read- / write-binding)</li>\n<li>Handles the change of the model which means adding the old targets\n<em>Usage</em>\nThe controller only can work if a model is set. If the model property is\nnull, the controller is not working. But it can be null on any time.\n<em>Cross reference</em></li>\n<li>If you want to bind a list like widget, use {@link qx.data.controller.List}</li>\n<li>If you want to bind a tree widget, use {@link qx.data.controller.Tree}</li>\n<li>If you want to bind a form widget, use {@link qx.data.controller.Form}</li>\n</ul>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "model"
      }
    ],
    "location": {
      "start": {
        "line": 60,
        "column": 2,
        "index": 1968
      },
      "end": {
        "line": 71,
        "column": 3,
        "index": 2215
      }
    }
  },
  "properties": {
    "model": {
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2501
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2648
        }
      },
      "json": {
        "check": "qx.core.Object",
        "event": "changeModel",
        "apply": "_applyModel",
        "nullable": true,
        "dereference": true
      },
      "jsdoc": {
        "raw": [
          "* The model object which does have the properties for the binding. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The model object which does have the properties for the binding.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__targets": {
      "jsdoc": {
        "raw": [
          " private members"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2879
        },
        "end": {
          "line": 98,
          "column": 19,
          "index": 2894
        }
      },
      "appearsIn": []
    },
    "__bindings": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2900
        },
        "end": {
          "line": 99,
          "column": 20,
          "index": 2916
        }
      },
      "appearsIn": []
    },
    "_applyModel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply-method which will be called if a new model has been set.",
          "     * All bindings will be moved to the new model.",
          "     *",
          "     * @param value {qx.core.Object|null} The new model.",
          "     * @param old {qx.core.Object|null} The old model.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply-method which will be called if a new model has been set.\n All bindings will be moved to the new model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {qx.core.Object|null} The new model.",
            "paramName": "value",
            "description": " The new model.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "old {qx.core.Object|null} The old model.",
            "paramName": "old",
            "description": " The old model.",
            "type": [
              "qx.core.Object",
              "null"
            ]
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 3180
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 5178
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": [
            "qx.core.Object",
            "null"
          ]
        },
        {
          "name": "old",
          "type": [
            "qx.core.Object",
            "null"
          ]
        }
      ],
      "appearsIn": []
    },
    "addTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a new target to the controller. After adding the target, the given",
          "     * property of the model will be bound to the targets property.",
          "     *",
          "     * @param targetObject {qx.core.Object} The object on which the property",
          "     *   should be bound.",
          "     *",
          "     * @param targetProperty {String} The property to which the binding should",
          "     *   go.",
          "     *",
          "     * @param sourceProperty {String} The name of the property in the model.",
          "     *",
          "     * @param bidirectional {Boolean?false} Signals if the binding should also work",
          "     *   in the reverse direction, from the target to source.",
          "     *",
          "     * @param options {Map?null} The options Map used by the binding from source",
          "     *   to target. The possible options can be found in the",
          "     *   {@link qx.data.SingleValueBinding} class.",
          "     *",
          "     * @param reverseOptions {Map?null} The options used by the binding in the",
          "     *   reverse direction. The possible options can be found in the",
          "     *   {@link qx.data.SingleValueBinding} class.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a new target to the controller. After adding the target, the given\n property of the model will be bound to the targets property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object on which the property\n   should be bound.",
            "paramName": "targetObject",
            "description": " The object on which the property\n   should be bound.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property to which the binding should\n   go.",
            "paramName": "targetProperty",
            "description": " The property to which the binding should\n   go.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property in the model.",
            "paramName": "sourceProperty",
            "description": " The name of the property in the model.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "bidirectional {Boolean?false} Signals if the binding should also work\n   in the reverse direction, from the target to source.",
            "paramName": "bidirectional",
            "description": " Signals if the binding should also work\n   in the reverse direction, from the target to source.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "options {Map?null} The options Map used by the binding from source\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "options",
            "description": " The options Map used by the binding from source\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "reverseOptions {Map?null} The options used by the binding in the\n   reverse direction. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "reverseOptions",
            "description": " The options used by the binding in the\n   reverse direction. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 6200
        },
        "end": {
          "line": 219,
          "column": 5,
          "index": 6744
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetProperty",
          "type": "string"
        },
        {
          "name": "sourceProperty",
          "type": "string"
        },
        {
          "name": "bidirectional",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "reverseOptions",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "__addTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Does the work for {@link #addTarget} but without saving the target",
          "     * to the internal target registry.",
          "     *",
          "     * @param targetObject {qx.core.Object} The object on which the property",
          "     *   should be bound.",
          "     *",
          "     * @param targetProperty {String} The property to which the binding should",
          "     *   go.",
          "     *",
          "     * @param sourceProperty {String} The name of the property in the model.",
          "     *",
          "     * @param bidirectional {Boolean?false} Signals if the binding should also work",
          "     *   in the reverse direction, from the target to source.",
          "     *",
          "     * @param options {Map?null} The options Map used by the binding from source",
          "     *   to target. The possible options can be found in the",
          "     *   {@link qx.data.SingleValueBinding} class.",
          "     *",
          "     * @param reverseOptions {Map?null} The options used by the binding in the",
          "     *   reverse direction. The possible options can be found in the",
          "     *   {@link qx.data.SingleValueBinding} class.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does the work for {@link #addTarget} but without saving the target\n to the internal target registry.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object on which the property\n   should be bound.",
            "paramName": "targetObject",
            "description": " The object on which the property\n   should be bound.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property to which the binding should\n   go.",
            "paramName": "targetProperty",
            "description": " The property to which the binding should\n   go.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property in the model.",
            "paramName": "sourceProperty",
            "description": " The name of the property in the model.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "bidirectional {Boolean?false} Signals if the binding should also work\n   in the reverse direction, from the target to source.",
            "paramName": "bidirectional",
            "description": " Signals if the binding should also work\n   in the reverse direction, from the target to source.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "options {Map?null} The options Map used by the binding from source\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "options",
            "description": " The options Map used by the binding from source\n   to target. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "reverseOptions {Map?null} The options used by the binding in the\n   reverse direction. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "paramName": "reverseOptions",
            "description": " The options used by the binding in the\n   reverse direction. The possible options can be found in the\n   {@link qx.data.SingleValueBinding} class.",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 244,
          "column": 4,
          "index": 7733
        },
        "end": {
          "line": 289,
          "column": 5,
          "index": 8759
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetProperty",
          "type": "string"
        },
        {
          "name": "sourceProperty",
          "type": "string"
        },
        {
          "name": "bidirectional",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "reverseOptions",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "removeTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the target identified by the three properties.",
          "     *",
          "     * @param targetObject {qx.core.Object} The target object on which the",
          "     *   binding exist.",
          "     *",
          "     * @param targetProperty {String} The targets property name used by the",
          "     *   adding of the target.",
          "     *",
          "     * @param sourceProperty {String} The name of the property of the model.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the target identified by the three properties.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The target object on which the\n   binding exist.",
            "paramName": "targetObject",
            "description": " The target object on which the\n   binding exist.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The targets property name used by the\n   adding of the target.",
            "paramName": "targetProperty",
            "description": " The targets property name used by the\n   adding of the target.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property of the model.",
            "paramName": "sourceProperty",
            "description": " The name of the property of the model.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 9148
        },
        "end": {
          "line": 320,
          "column": 5,
          "index": 9690
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetProperty",
          "type": "string"
        },
        {
          "name": "sourceProperty",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__removeTargetFrom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Does the work for {@link #removeTarget} but without removing the target",
          "     * from the internal registry.",
          "     *",
          "     * @param targetObject {qx.core.Object} The target object on which the",
          "     *   binding exist.",
          "     *",
          "     * @param targetProperty {String} The targets property name used by the",
          "     *   adding of the target.",
          "     *",
          "     * @param sourceProperty {String} The name of the property of the model.",
          "     *",
          "     * @param sourceObject {String} The source object from which the binding",
          "     *   comes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Does the work for {@link #removeTarget} but without removing the target\n from the internal registry.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The target object on which the\n   binding exist.",
            "paramName": "targetObject",
            "description": " The target object on which the\n   binding exist.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The targets property name used by the\n   adding of the target.",
            "paramName": "targetProperty",
            "description": " The targets property name used by the\n   adding of the target.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property of the model.",
            "paramName": "sourceProperty",
            "description": " The name of the property of the model.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "sourceObject {String} The source object from which the binding\n   comes.",
            "paramName": "sourceObject",
            "description": " The source object from which the binding\n   comes.",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 337,
          "column": 4,
          "index": 10231
        },
        "end": {
          "line": 374,
          "column": 5,
          "index": 11353
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetProperty",
          "type": "string"
        },
        {
          "name": "sourceProperty",
          "type": "string"
        },
        {
          "name": "sourceObject",
          "type": "string"
        }
      ],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 383,
        "column": 2,
        "index": 11551
      },
      "end": {
        "line": 388,
        "column": 3,
        "index": 11725
      }
    }
  },
  "statics": {}
}