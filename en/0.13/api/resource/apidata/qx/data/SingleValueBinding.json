{
  "version": 0.3,
  "lastModified": 1735222259498,
  "lastModifiedIso": "2024-12-26T14:10:59.498Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/data/SingleValueBinding.js",
  "type": "class",
  "location": {
    "start": {
      "line": 22,
      "column": 0,
      "index": 569
    },
    "end": {
      "line": 1709,
      "column": 3,
      "index": 58339
    }
  },
  "className": "qx.data.SingleValueBinding",
  "jsdoc": {
    "raw": [
      "*",
      " * Single-value binding is a core component of the data binding package.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Single-value binding is a core component of the data binding package.</p>"
      }
    ]
  },
  "statics": {
    "__bindings": {
      "jsdoc": {
        "raw": [
          "* internal reference for all bindings indexed by source object "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>internal reference for all bindings indexed by source object</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 25,
          "column": 4,
          "index": 706
        },
        "end": {
          "line": 25,
          "column": 18,
          "index": 720
        }
      },
      "appearsIn": []
    },
    "__bindingsByTarget": {
      "jsdoc": {
        "raw": [
          "* internal reference for all bindings indexed by target object "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>internal reference for all bindings indexed by target object</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 799
        },
        "end": {
          "line": 28,
          "column": 26,
          "index": 821
        }
      },
      "appearsIn": []
    },
    "bind": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The function is responsible for binding a source objects property to",
          "     * a target objects property. Both properties have to have the usual qooxdoo",
          "     * getter and setter. The source property also needs to fire change-events",
          "     * on every change of its value.",
          "     * Please keep in mind, that this binding is unidirectional. If you need",
          "     * a binding in both directions, you have to use two of this bindings.",
          "     *",
          "     * It's also possible to bind some kind of a hierarchy as a source. This",
          "     * means that you can separate the source properties with a dot and bind",
          "     * by that the object referenced to this property chain.",
          "     * Example with an object 'a' which has object 'b' stored in its 'child'",
          "     * property. Object b has a string property named abc:",
          "     * <pre><code>",
          "     * qx.data.SingleValueBinding.bind(a, \"child.abc\", textfield, \"value\");",
          "     * </code></pre>",
          "     * In that case, if the property abc of b changes, the textfield will",
          "     * automatically contain the new value. Also if the child of a changes, the",
          "     * new value (abc of the new child) will be in the textfield.",
          "     *",
          "     * There is also a possibility of binding an array. Therefore the array",
          "     * {@link qx.data.IListData} is needed because this array has change events",
          "     * which the native does not. Imagine a qooxdoo object a which has a",
          "     * children property containing an array holding more of its own kind.",
          "     * Every object has a name property as a string.",
          "     * <pre>",
          "     * var svb = qx.data.SingleValueBinding;",
          "     * // bind the first child's name of 'a' to a textfield",
          "     * svb.bind(a, \"children[0].name\", textfield, \"value\");",
          "     * // bind the last child's name of 'a' to a textfield",
          "     * svb.bind(a, \"children[last].name\", textfield2, \"value\");",
          "     * // also deeper bindings are possible",
          "     * svb.bind(a, \"children[0].children[0].name\", textfield3, \"value\");",
          "     * </pre>",
          "     *",
          "     * As you can see in this example, the abc property of a's b will be bound",
          "     * to the textfield. If now the value of b changed or even the a will get a",
          "     * new b, the binding still shows the right value.",
          "     *",
          "     * @param sourceObject {qx.core.Object} The source of the binding.",
          "     * @param sourcePropertyChain {String} The property chain which represents",
          "     *   the source property.",
          "     * @param targetObject {qx.core.Object} The object which the source should",
          "     *   be bind to.",
          "     * @param targetPropertyChain {String} The property chain to the target",
          "     *   object.",
          "     * @param options {Map?null} A map containing the options.",
          "     *   <li>converter: A converter function which takes four parameters",
          "     *       and should return the converted value.",
          "     *       <ol>",
          "     *         <li>The data to convert</li>",
          "     *         <li>The corresponding model object, which is only set in case of the use of an controller.</li>",
          "     *         <li>The source object for the binding</li>",
          "     *         <li>The target object.</li>",
          "     *       </ol>",
          "     *       If no conversion has been done, the given value should be returned.",
          "     *       e.g. a number to boolean converter",
          "     *       <code>function(data, model, source, target) {return data > 100;}</code>",
          "     *   </li>",
          "     *   <li>onUpdate: A callback function can be given here. This method will be",
          "     *       called if the binding was updated successful. There will be",
          "     *       three parameter you do get in that method call.",
          "     *       <ol>",
          "     *         <li>The source object</li>",
          "     *         <li>The target object</li>",
          "     *         <li>The data</li>",
          "     *       </ol>",
          "     *       Here is a sample: <code>onUpdate : function(source, target, data) {...}</code>",
          "     *   </li>",
          "     *   <li>onSetFail: A callback function can be given here. This method will",
          "     *       be called if the set of the value fails.",
          "     *   </li>",
          "     *   <li>ignoreConverter: A string which will be matched using the current",
          "     *       property chain. If it matches, the converter will not be called.",
          "     *   </li>",
          "     *",
          "     * @return {var} Returns the internal id for that binding. This can be used",
          "     *   for referencing the binding or e.g. for removing. This is not an atomic",
          "     *   id so you can't you use it as a hash-map index.",
          "     *",
          "     * @throws {qx.core.AssertionError} If the event is no data event or",
          "     *   there is no property definition for object and property (source and",
          "     *   target).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The function is responsible for binding a source objects property to\n a target objects property. Both properties have to have the usual qooxdoo\n getter and setter. The source property also needs to fire change-events\n on every change of its value.\n Please keep in mind, that this binding is unidirectional. If you need\n a binding in both directions, you have to use two of this bindings.\n It's also possible to bind some kind of a hierarchy as a source. This\n means that you can separate the source properties with a dot and bind\n by that the object referenced to this property chain.\n Example with an object 'a' which has object 'b' stored in its 'child'\n property. Object b has a string property named abc:</p>\n <pre><code>\n qx.data.SingleValueBinding.bind(a, \"child.abc\", textfield, \"value\");\n </code></pre>\n<p>In that case, if the property abc of b changes, the textfield will\n automatically contain the new value. Also if the child of a changes, the\n new value (abc of the new child) will be in the textfield.\n There is also a possibility of binding an array. Therefore the array\n {@link qx.data.IListData} is needed because this array has change events\n which the native does not. Imagine a qooxdoo object a which has a\n children property containing an array holding more of its own kind.\n Every object has a name property as a string.\n </p>\n<pre>\n var svb = qx.data.SingleValueBinding;\n\n svb.bind(a, \"children[0].name\", textfield, \"value\");\n\n svb.bind(a, \"children[last].name\", textfield2, \"value\");\n\n svb.bind(a, \"children[0].children[0].name\", textfield3, \"value\");\n </pre>\n<p>As you can see in this example, the abc property of a's b will be bound\n to the textfield. If now the value of b changed or even the a will get a\n new b, the binding still shows the right value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source of the binding.",
            "paramName": "sourceObject",
            "description": " The source of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\n   the source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\n   the source property.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\n   be bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetPropertyChain {String} The property chain to the target\n   object.",
            "paramName": "targetPropertyChain",
            "description": " The property chain to the target\n   object.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map?null} A map containing the options.\n   <li>converter: A converter function which takes four parameters\n       and should return the converted value.\n       <ol>\n         <li>The data to convert</li>\n         <li>The corresponding model object, which is only set in case of the use of an controller.</li>\n         <li>The source object for the binding</li>\n         <li>The target object.</li>\n       </ol>\n       If no conversion has been done, the given value should be returned.\n       e.g. a number to boolean converter\n       <code>function(data, model, source, target) {return data > 100;}</code>\n   </li>\n   <li>onUpdate: A callback function can be given here. This method will be\n       called if the binding was updated successful. There will be\n       three parameter you do get in that method call.\n       <ol>\n         <li>The source object</li>\n         <li>The target object</li>\n         <li>The data</li>\n       </ol>\n       Here is a sample: <code>onUpdate : function(source, target, data) {...}</code>\n   </li>\n   <li>onSetFail: A callback function can be given here. This method will\n       be called if the set of the value fails.\n   </li>\n   <li>ignoreConverter: A string which will be matched using the current\n       property chain. If it matches, the converter will not be called.\n   </li>",
            "paramName": "options",
            "description": " A map containing the options.\n   <li>converter: A converter function which takes four parameters\n       and should return the converted value.\n       <ol>\n         <li>The data to convert</li>\n         <li>The corresponding model object, which is only set in case of the use of an controller.</li>\n         <li>The source object for the binding</li>\n         <li>The target object.</li>\n       </ol>\n       If no conversion has been done, the given value should be returned.\n       e.g. a number to boolean converter\n       <code>function(data, model, source, target) {return data > 100;}</code>\n   </li>\n   <li>onUpdate: A callback function can be given here. This method will be\n       called if the binding was updated successful. There will be\n       three parameter you do get in that method call.\n       <ol>\n         <li>The source object</li>\n         <li>The target object</li>\n         <li>The data</li>\n       </ol>\n       Here is a sample: <code>onUpdate : function(source, target, data) {...}</code>\n   </li>\n   <li>onSetFail: A callback function can be given here. This method will\n       be called if the set of the value fails.\n   </li>\n   <li>ignoreConverter: A string which will be matched using the current\n       property chain. If it matches, the converter will not be called.\n   </li>",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Returns the internal id for that binding. This can be used\n   for referencing the binding or e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index.",
            "type": "var",
            "description": "Returns the internal id for that binding. This can be used\n   for referencing the binding or e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\n   there is no property definition for object and property (source and\n   target).",
            "type": "qx.core.AssertionError",
            "description": " If the event is no data event or\n   there is no property definition for object and property (source and\n   target)."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 5268
        },
        "end": {
          "line": 372,
          "column": 5,
          "index": 13642
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        },
        {
          "name": "sourcePropertyChain",
          "type": "string"
        },
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetPropertyChain",
          "type": "string"
        },
        {
          "name": "options",
          "type": "Map",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__chainListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Event listener for the chaining of the properties.",
          "     *",
          "     * @param context {Map} The current context for the listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event listener for the chaining of the properties.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "context {Map} The current context for the listener.",
            "paramName": "context",
            "description": " The current context for the listener.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 13796
        },
        "end": {
          "line": 568,
          "column": 5,
          "index": 19975
        }
      },
      "type": "function",
      "params": [
        {
          "name": "context",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "__setUpTargetBinding": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for setting up the listening to the changes on the",
          "     * target side of the binding. Only works if the target property is a",
          "     * property chain",
          "     *",
          "     * @param sourceObject {qx.core.Object} The source of the binding.",
          "     * @param sourcePropertyChain {String} The property chain which represents",
          "     *   the source property.",
          "     * @param targetObject {qx.core.Object} The object which the source should",
          "     *   be bind to.",
          "     * @param targetPropertyChain {String} The property name of the target",
          "     *   object.",
          "     * @param options {Map} The options map perhaps containing the user defined",
          "     *   converter.",
          "     * @return {var} A map containing the listener ids and the targets.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for setting up the listening to the changes on the\n target side of the binding. Only works if the target property is a\n property chain</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source of the binding.",
            "paramName": "sourceObject",
            "description": " The source of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\n   the source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\n   the source property.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\n   be bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetPropertyChain {String} The property name of the target\n   object.",
            "paramName": "targetPropertyChain",
            "description": " The property name of the target\n   object.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map} The options map perhaps containing the user defined\n   converter.",
            "paramName": "options",
            "description": " The options map perhaps containing the user defined\n   converter.",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} A map containing the listener ids and the targets.",
            "type": "var",
            "description": "A map containing the listener ids and the targets."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 586,
          "column": 4,
          "index": 20719
        },
        "end": {
          "line": 717,
          "column": 5,
          "index": 24853
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        },
        {
          "name": "sourcePropertyChain",
          "type": "string"
        },
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetPropertyChain",
          "type": "string"
        },
        {
          "name": "options",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "updateTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper for updating the target. Gets the current set data from the source",
          "     * and set that on the target.",
          "     *",
          "     * @param sourceObject {qx.core.Object} The source of the binding.",
          "     * @param sourcePropertyChain {String} The property chain which represents",
          "     *   the source property.",
          "     * @param targetObject {qx.core.Object} The object which the source should",
          "     *   be bind to.",
          "     * @param targetPropertyChain {String} The property name of the target",
          "     *   object.",
          "     * @param options {Map} The options map perhaps containing the user defined",
          "     *   converter.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper for updating the target. Gets the current set data from the source\n and set that on the target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source of the binding.",
            "paramName": "sourceObject",
            "description": " The source of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\n   the source property.",
            "paramName": "sourcePropertyChain",
            "description": " The property chain which represents\n   the source property.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\n   be bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetPropertyChain {String} The property name of the target\n   object.",
            "paramName": "targetPropertyChain",
            "description": " The property name of the target\n   object.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map} The options map perhaps containing the user defined\n   converter.",
            "paramName": "options",
            "description": " The options map perhaps containing the user defined\n   converter.",
            "type": "Map<any, any>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 735,
          "column": 4,
          "index": 25495
        },
        "end": {
          "line": 754,
          "column": 5,
          "index": 25994
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        },
        {
          "name": "sourcePropertyChain",
          "type": "string"
        },
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetPropertyChain",
          "type": "string"
        },
        {
          "name": "options",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "resolvePropertyChain": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for getting the current set value at the property chain.",
          "     *",
          "     * @param o {qx.core.Object} The source of the binding.",
          "     * @param propertyChain {String} The property chain which represents",
          "     *   the source property.",
          "     * @return {var?undefined} Returns the set value if defined.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for getting the current set value at the property chain.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "o {qx.core.Object} The source of the binding.",
            "paramName": "o",
            "description": " The source of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "propertyChain {String} The property chain which represents\n   the source property.",
            "paramName": "propertyChain",
            "description": " The property chain which represents\n   the source property.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var?undefined} Returns the set value if defined.",
            "type": "var?undefined",
            "description": "Returns the set value if defined."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 764,
          "column": 4,
          "index": 26332
        },
        "end": {
          "line": 767,
          "column": 5,
          "index": 26520
        }
      },
      "type": "function",
      "params": [
        {
          "name": "o",
          "type": "qx.core.Object"
        },
        {
          "name": "propertyChain",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var?undefined"
      },
      "appearsIn": []
    },
    "__getEventNameForProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Tries to return a fitting event name to the given source object and",
          "     * property name. First, it assumes that the property name is a real property",
          "     * and therefore it checks the property definition for the event. The second",
          "     * possibility is to check if there is an event with the given name. The",
          "     * third and last possibility checked is if there is an event which is named",
          "     * change + propertyName. If this three possibilities fail, an error will be",
          "     * thrown.",
          "     *",
          "     * @param source {qx.core.Object} The source where the property is stored.",
          "     * @param propertyName {String} The name of the property.",
          "     * @return {String|null} The name of the corresponding event or null.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tries to return a fitting event name to the given source object and\n property name. First, it assumes that the property name is a real property\n and therefore it checks the property definition for the event. The second\n possibility is to check if there is an event with the given name. The\n third and last possibility checked is if there is an event which is named\n change + propertyName. If this three possibilities fail, an error will be\n thrown.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {qx.core.Object} The source where the property is stored.",
            "paramName": "source",
            "description": " The source where the property is stored.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "propertyName {String} The name of the property.",
            "paramName": "propertyName",
            "description": " The name of the property.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} The name of the corresponding event or null.",
            "type": "String|null",
            "description": "The name of the corresponding event or null."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 782,
          "column": 4,
          "index": 27257
        },
        "end": {
          "line": 803,
          "column": 5,
          "index": 28073
        }
      },
      "type": "function",
      "params": [
        {
          "name": "source",
          "type": "qx.core.Object"
        },
        {
          "name": "propertyName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "String|null"
      },
      "appearsIn": []
    },
    "__resetTargetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Resets the value of the given target after resolving the target property",
          "     * chain.",
          "     *",
          "     * @param targetObject {qx.core.Object} The object where the property chain",
          "     *   starts.",
          "     * @param targetPropertyChain {String} The names of the properties,",
          "     *   separated with a dot.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the value of the given target after resolving the target property\n chain.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object where the property chain\n   starts.",
            "paramName": "targetObject",
            "description": " The object where the property chain\n   starts.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetPropertyChain {String} The names of the properties,\n   separated with a dot.",
            "paramName": "targetPropertyChain",
            "description": " The names of the properties,\n   separated with a dot.",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 814,
          "column": 4,
          "index": 28397
        },
        "end": {
          "line": 846,
          "column": 5,
          "index": 29678
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetPropertyChain",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__setTargetValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the given value to the given target after resolving the",
          "     * target property chain.",
          "     *",
          "     * @param targetObject {qx.core.Object} The object where the property chain",
          "     *   starts.",
          "     * @param targetPropertyChain {String} The names of the properties,",
          "     *   separated with a dot.",
          "     * @param value {var} The value to set.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the given value to the given target after resolving the\n target property chain.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object where the property chain\n   starts.",
            "paramName": "targetObject",
            "description": " The object where the property chain\n   starts.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetPropertyChain {String} The names of the properties,\n   separated with a dot.",
            "paramName": "targetPropertyChain",
            "description": " The names of the properties,\n   separated with a dot.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} The value to set.",
            "paramName": "value",
            "description": " The value to set.",
            "type": "var"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 858,
          "column": 4,
          "index": 30050
        },
        "end": {
          "line": 886,
          "column": 5,
          "index": 31114
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetPropertyChain",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "__getArrayIndex": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the index from a property using bracket notation, e.g.",
          "     * \"[42]\" returns \"42\", \"[last]\" returns \"last\"",
          "     *",
          "     * @param propertyName {String} A property name",
          "     * @return {String|null} Array index or null if the property name does",
          "     * not use bracket notation",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index from a property using bracket notation, e.g.\n \"[42]\" returns \"42\", \"[last]\" returns \"last\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "propertyName {String} A property name",
            "paramName": "propertyName",
            "description": " A property name",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} Array index or null if the property name does\n not use bracket notation",
            "type": "String|null",
            "description": "Array index or null if the property name does\n not use bracket notation"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 896,
          "column": 4,
          "index": 31425
        },
        "end": {
          "line": 903,
          "column": 5,
          "index": 31637
        }
      },
      "type": "function",
      "params": [
        {
          "name": "propertyName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "String|null"
      },
      "appearsIn": []
    },
    "__getPropertyChainArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a property chain string into a list of properties and/or",
          "     * array indexes",
          "     * @param targetPropertyChain {String} property chain",
          "     * @return {String[]} Array of property names",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a property chain string into a list of properties and/or\n array indexes</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetPropertyChain {String} property chain",
            "paramName": "targetPropertyChain",
            "description": " property chain",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} Array of property names",
            "type": "String[]",
            "description": "Array of property names"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 911,
          "column": 4,
          "index": 31862
        },
        "end": {
          "line": 919,
          "column": 5,
          "index": 32151
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetPropertyChain",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "String[]"
      },
      "appearsIn": []
    },
    "__getTargetFromChain": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper-Function resolving the object on which the last property of the",
          "     * chain should be set.",
          "     *",
          "     * @param targetObject {qx.core.Object} The object where the property chain",
          "     *   starts.",
          "     * @param targetProperties {String[]} Array containing the names of the properties",
          "     * @param index {Number?} The array index of the last property to be considered.",
          "     * Default: The last item's index",
          "     * @return {qx.core.Object|null} The object on which the last property",
          "     *   should be set.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper-Function resolving the object on which the last property of the\n chain should be set.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object where the property chain\n   starts.",
            "paramName": "targetObject",
            "description": " The object where the property chain\n   starts.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperties {String[]} Array containing the names of the properties",
            "paramName": "targetProperties",
            "description": " Array containing the names of the properties",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "index {Number?} The array index of the last property to be considered.\n Default: The last item's index",
            "paramName": "index",
            "description": " The array index of the last property to be considered.\n Default: The last item's index",
            "optional": true,
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object|null} The object on which the last property\n   should be set.",
            "type": "qx.core.Object|null",
            "description": "The object on which the last property\n   should be set."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 933,
          "column": 4,
          "index": 32693
        },
        "end": {
          "line": 957,
          "column": 5,
          "index": 33457
        }
      },
      "type": "function",
      "params": [
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetProperties",
          "type": "String[]"
        },
        {
          "name": "index",
          "type": "Number",
          "optional": true
        }
      ],
      "returnType": {
        "type": "qx.core.Object|null"
      },
      "appearsIn": []
    },
    "__setInitialValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the given value to the target property. This method is used for",
          "     * initially set the value.",
          "     *",
          "     * @param value {var} The value to set.",
          "     * @param targetObject {qx.core.Object} The object which contains the target",
          "     *   property.",
          "     * @param targetPropertyChain {String} The name of the target property in the",
          "     *   target object.",
          "     * @param options {Map} The options map perhaps containing the user defined",
          "     *   converter.",
          "     * @param sourceObject {qx.core.Object} The source object of the binding (",
          "     *   used for the onUpdate callback).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the given value to the target property. This method is used for\n initially set the value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The value to set.",
            "paramName": "value",
            "description": " The value to set.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which contains the target\n   property.",
            "paramName": "targetObject",
            "description": " The object which contains the target\n   property.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetPropertyChain {String} The name of the target property in the\n   target object.",
            "paramName": "targetPropertyChain",
            "description": " The name of the target property in the\n   target object.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map} The options map perhaps containing the user defined\n   converter.",
            "paramName": "options",
            "description": " The options map perhaps containing the user defined\n   converter.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source object of the binding (\n   used for the onUpdate callback).",
            "paramName": "sourceObject",
            "description": " The source object of the binding (\n   used for the onUpdate callback).",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 973,
          "column": 4,
          "index": 34065
        },
        "end": {
          "line": 1026,
          "column": 5,
          "index": 35466
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetPropertyChain",
          "type": "string"
        },
        {
          "name": "options",
          "type": "Map<any, any>"
        },
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "__checkForArrayInPropertyChain": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks for an array element in the given property names and adapts the",
          "     * arrays to fit the algorithm.",
          "     *",
          "     * @param propertyNames {Array} The array containing the property names.",
          "     *   Attention, this method can change this parameter!!!",
          "     * @return {Array} An array containing the values of the array properties",
          "     *   corresponding to the property names.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks for an array element in the given property names and adapts the\n arrays to fit the algorithm.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "propertyNames {Array} The array containing the property names.\n   Attention, this method can change this parameter!!!",
            "paramName": "propertyNames",
            "description": " The array containing the property names.\n   Attention, this method can change this parameter!!!",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array containing the values of the array properties\n   corresponding to the property names.",
            "type": "Array<any>",
            "description": "An array containing the values of the array properties\n   corresponding to the property names."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1037,
          "column": 4,
          "index": 35872
        },
        "end": {
          "line": 1092,
          "column": 5,
          "index": 37997
        }
      },
      "type": "function",
      "params": [
        {
          "name": "propertyNames",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__bindEventToProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper method which is actually doing all bindings. That means",
          "     * that an event listener will be added to the source object which listens",
          "     * to the given event and invokes an set on the target property on the",
          "     * targetObject.",
          "     * This method does not store the binding in the internal reference store",
          "     * so it should NOT be used from outside this class. For an outside usage,",
          "     * use {@link #bind}.",
          "     *",
          "     * @param sourceObject {qx.core.Object} The source of the binding.",
          "     * @param sourceEvent {String} The event of the source object which could",
          "     *   be the change event in common but has to be an",
          "     *   {@link qx.event.type.Data} event.",
          "     * @param targetObject {qx.core.Object} The object which the source should",
          "     *   be bind to.",
          "     * @param targetProperty {String} The property name of the target object.",
          "     * @param options {Map} A map containing the options. See",
          "     *   {@link #bind} for more information.",
          "     * @param arrayIndex {String} The index of the given array if its an array",
          "     *   to bind.",
          "     *",
          "     * @return {var} Returns the internal id for that binding. This can be used",
          "     *   for referencing the binding or e.g. for removing. This is not an atomic",
          "     *   id so you can't you use it as a hash-map index. It's the id which will",
          "     *   be returned by the {@link qx.core.Object#addListener} method.",
          "     * @throws {qx.core.AssertionError} If the event is no data event or",
          "     *   there is no property definition for the target object and target",
          "     *   property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method which is actually doing all bindings. That means\n that an event listener will be added to the source object which listens\n to the given event and invokes an set on the target property on the\n targetObject.\n This method does not store the binding in the internal reference store\n so it should NOT be used from outside this class. For an outside usage,\n use {@link #bind}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source of the binding.",
            "paramName": "sourceObject",
            "description": " The source of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "sourceEvent {String} The event of the source object which could\n   be the change event in common but has to be an\n   {@link qx.event.type.Data} event.",
            "paramName": "sourceEvent",
            "description": " The event of the source object which could\n   be the change event in common but has to be an\n   {@link qx.event.type.Data} event.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to.",
            "paramName": "targetObject",
            "description": " The object which the source should\n   be bind to.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The property name of the target object.",
            "paramName": "targetProperty",
            "description": " The property name of the target object.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map} A map containing the options. See\n   {@link #bind} for more information.",
            "paramName": "options",
            "description": " A map containing the options. See\n   {@link #bind} for more information.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "arrayIndex {String} The index of the given array if its an array\n   to bind.",
            "paramName": "arrayIndex",
            "description": " The index of the given array if its an array\n   to bind.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Returns the internal id for that binding. This can be used\n   for referencing the binding or e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index. It's the id which will\n   be returned by the {@link qx.core.Object#addListener} method.",
            "type": "var",
            "description": "Returns the internal id for that binding. This can be used\n   for referencing the binding or e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index. It's the id which will\n   be returned by the {@link qx.core.Object#addListener} method."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\n   there is no property definition for the target object and target\n   property.",
            "type": "qx.core.AssertionError",
            "description": " If the event is no data event or\n   there is no property definition for the target object and target\n   property."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1123,
          "column": 4,
          "index": 39579
        },
        "end": {
          "line": 1267,
          "column": 5,
          "index": 43515
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        },
        {
          "name": "sourceEvent",
          "type": "string"
        },
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetProperty",
          "type": "string"
        },
        {
          "name": "options",
          "type": "Map<any, any>"
        },
        {
          "name": "arrayIndex",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__storeBinding": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method stores the given value as a binding in the internal structure",
          "     * of all bindings.",
          "     *",
          "     * @param id {var} The listener id of the id for a deeper binding.",
          "     * @param sourceObject {qx.core.Object} The source Object of the binding.",
          "     * @param sourceEvent {String} The name of the source event.",
          "     * @param targetObject {qx.core.Object} The target object.",
          "     * @param targetProperty {String} The name of the property on the target",
          "     *   object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method stores the given value as a binding in the internal structure\n of all bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {var} The listener id of the id for a deeper binding.",
            "paramName": "id",
            "description": " The listener id of the id for a deeper binding.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source Object of the binding.",
            "paramName": "sourceObject",
            "description": " The source Object of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "sourceEvent {String} The name of the source event.",
            "paramName": "sourceEvent",
            "description": " The name of the source event.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The target object.",
            "paramName": "targetObject",
            "description": " The target object.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetProperty {String} The name of the property on the target\n   object.",
            "paramName": "targetProperty",
            "description": " The name of the property on the target\n   object.",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1280,
          "column": 4,
          "index": 44021
        },
        "end": {
          "line": 1311,
          "column": 5,
          "index": 44777
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "var"
        },
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        },
        {
          "name": "sourceEvent",
          "type": "string"
        },
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetProperty",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__convertValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method takes the given value, checks if the user has given a",
          "     * converter and converts the value to its target type. If no converter is",
          "     * given by the user, the {@link #__defaultConversion} will try to convert",
          "     * the value.",
          "     *",
          "     * @param value {var} The value which possibly should be converted.",
          "     * @param targetObject {qx.core.Object} The target object.",
          "     * @param targetPropertyChain {String} The property name of the target object.",
          "     * @param options {Map} The options map which can includes the converter.",
          "     *   For a detailed information on the map, take a look at",
          "     *   {@link #bind}.",
          "     * @param sourceObject {qx.core.Object} The source object for the binding.",
          "     *",
          "     * @return {var} The converted value. If no conversion has been done, the",
          "     *   value property will be returned.",
          "     * @throws {qx.core.AssertionError} If there is no property definition",
          "     *   of the given target object and target property.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method takes the given value, checks if the user has given a\n converter and converts the value to its target type. If no converter is\n given by the user, the {@link #__defaultConversion} will try to convert\n the value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The value which possibly should be converted.",
            "paramName": "value",
            "description": " The value which possibly should be converted.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The target object.",
            "paramName": "targetObject",
            "description": " The target object.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "targetPropertyChain {String} The property name of the target object.",
            "paramName": "targetPropertyChain",
            "description": " The property name of the target object.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "options {Map} The options map which can includes the converter.\n   For a detailed information on the map, take a look at\n   {@link #bind}.",
            "paramName": "options",
            "description": " The options map which can includes the converter.\n   For a detailed information on the map, take a look at\n   {@link #bind}.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source object for the binding.",
            "paramName": "sourceObject",
            "description": " The source object for the binding.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The converted value. If no conversion has been done, the\n   value property will be returned.",
            "type": "var",
            "description": "The converted value. If no conversion has been done, the\n   value property will be returned."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If there is no property definition\n   of the given target object and target property.",
            "type": "qx.core.AssertionError",
            "description": " If there is no property definition\n   of the given target object and target property."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1332,
          "column": 4,
          "index": 45777
        },
        "end": {
          "line": 1369,
          "column": 5,
          "index": 46955
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "targetObject",
          "type": "qx.core.Object"
        },
        {
          "name": "targetPropertyChain",
          "type": "string"
        },
        {
          "name": "options",
          "type": "Map<any, any>"
        },
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__getEventForProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method which tries to figure out if the given property on the",
          "     * given object does have a change event and if returns the name of it.",
          "     *",
          "     * @param sourceObject {qx.core.Object} The object to check.",
          "     * @param sourceProperty {String} The name of the property.",
          "     *",
          "     * @return {String} The name of the change event.",
          "     * @throws {qx.core.AssertionError} If there is no property definition of",
          "     *   the given object property pair.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method which tries to figure out if the given property on the\n given object does have a change event and if returns the name of it.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The object to check.",
            "paramName": "sourceObject",
            "description": " The object to check.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "sourceProperty {String} The name of the property.",
            "paramName": "sourceProperty",
            "description": " The name of the property.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The name of the change event.",
            "type": "string",
            "description": "The name of the change event."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If there is no property definition of\n   the given object property pair.",
            "type": "qx.core.AssertionError",
            "description": " If there is no property definition of\n   the given object property pair."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1382,
          "column": 4,
          "index": 47446
        },
        "end": {
          "line": 1393,
          "column": 5,
          "index": 47774
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        },
        {
          "name": "sourceProperty",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "__defaultConversion": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Tries to convert the data to the type given in the targetCheck argument.",
          "     *",
          "     * @param data {var} The data to convert.",
          "     * @param targetCheck {String} The value of the check property. That usually",
          "     *   contains the target type.",
          "     * @return {Integer|String|Float} The converted data",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tries to convert the data to the type given in the targetCheck argument.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {var} The data to convert.",
            "paramName": "data",
            "description": " The data to convert.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "targetCheck {String} The value of the check property. That usually\n   contains the target type.",
            "paramName": "targetCheck",
            "description": " The value of the check property. That usually\n   contains the target type.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|String|Float} The converted data",
            "type": "Integer|String|Float",
            "description": "The converted data"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1403,
          "column": 4,
          "index": 48103
        },
        "end": {
          "line": 1431,
          "column": 5,
          "index": 48829
        }
      },
      "type": "function",
      "params": [
        {
          "name": "data",
          "type": "var"
        },
        {
          "name": "targetCheck",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Integer|String|Float"
      },
      "appearsIn": []
    },
    "removeBindingFromObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the binding with the given id from the given sourceObject. The",
          "     * id has to be the id returned by any of the bind functions.",
          "     *",
          "     * @param sourceObject {qx.core.Object} The source object of the binding.",
          "     * @param id {var} The id of the binding.",
          "     * @throws {Error} If the binding could not be found.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the binding with the given id from the given sourceObject. The\n id has to be the id returned by any of the bind functions.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourceObject {qx.core.Object} The source object of the binding.",
            "paramName": "sourceObject",
            "description": " The source object of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "id {var} The id of the binding.",
            "paramName": "id",
            "description": " The id of the binding.",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the binding could not be found.",
            "type": "Error",
            "description": " If the binding could not be found."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1441,
          "column": 4,
          "index": 49185
        },
        "end": {
          "line": 1515,
          "column": 5,
          "index": 51985
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sourceObject",
          "type": "qx.core.Object"
        },
        {
          "name": "id",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "removeAllBindingsForObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all bindings for the given object.",
          "     *",
          "     * @param object {qx.core.Object} The object of which the bindings should be",
          "     *   removed.",
          "     * @throws {qx.core.AssertionError} If the object is not in the internal",
          "     *   registry of the bindings.",
          "     * @throws {Error} If one of the bindings listed internally can not be",
          "     *   removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all bindings for the given object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {qx.core.Object} The object of which the bindings should be\n   removed.",
            "paramName": "object",
            "description": " The object of which the bindings should be\n   removed.",
            "type": "qx.core.Object"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the object is not in the internal\n   registry of the bindings.",
            "type": "qx.core.AssertionError",
            "description": " If the object is not in the internal\n   registry of the bindings."
          },
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\n   removed.",
            "type": "Error",
            "description": " If one of the bindings listed internally can not be\n   removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1527,
          "column": 4,
          "index": 52369
        },
        "end": {
          "line": 1549,
          "column": 5,
          "index": 53080
        }
      },
      "type": "function",
      "params": [
        {
          "name": "object",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "removeRelatedBindings": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all bindings between given objects.",
          "     *",
          "     * @param object {qx.core.Object} The object of which the bindings should be",
          "     *   removed.",
          "     * @param relatedObject {qx.core.Object} The object of which related",
          "     *   bindings should be removed.",
          "     * @throws {qx.core.AssertionError} If the object is not in the internal",
          "     *   registry of the bindings.",
          "     * @throws {Error} If one of the bindings listed internally can not be",
          "     *   removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all bindings between given objects.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {qx.core.Object} The object of which the bindings should be\n   removed.",
            "paramName": "object",
            "description": " The object of which the bindings should be\n   removed.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "relatedObject {qx.core.Object} The object of which related\n   bindings should be removed.",
            "paramName": "relatedObject",
            "description": " The object of which related\n   bindings should be removed.",
            "type": "qx.core.Object"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the object is not in the internal\n   registry of the bindings.",
            "type": "qx.core.AssertionError",
            "description": " If the object is not in the internal\n   registry of the bindings."
          },
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\n   removed.",
            "type": "Error",
            "description": " If one of the bindings listed internally can not be\n   removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1563,
          "column": 4,
          "index": 53575
        },
        "end": {
          "line": 1589,
          "column": 5,
          "index": 54470
        }
      },
      "type": "function",
      "params": [
        {
          "name": "object",
          "type": "qx.core.Object"
        },
        {
          "name": "relatedObject",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "getAllBindingsForObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array which lists all bindings.",
          "     *",
          "     * @param object {qx.core.Object} The object of which the bindings should",
          "     *   be returned.",
          "     *",
          "     * @return {Array} An array of binding informations. Every binding",
          "     *   information is an array itself containing id, sourceObject,",
          "     *   sourceEvent, targetObject and targetProperty in that order.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array which lists all bindings.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {qx.core.Object} The object of which the bindings should\n   be returned.",
            "paramName": "object",
            "description": " The object of which the bindings should\n   be returned.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of binding informations. Every binding\n   information is an array itself containing id, sourceObject,\n   sourceEvent, targetObject and targetProperty in that order.",
            "type": "Array<any>",
            "description": "An array of binding informations. Every binding\n   information is an array itself containing id, sourceObject,\n   sourceEvent, targetObject and targetProperty in that order."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1601,
          "column": 4,
          "index": 54866
        },
        "end": {
          "line": 1621,
          "column": 5,
          "index": 55474
        }
      },
      "type": "function",
      "params": [
        {
          "name": "object",
          "type": "qx.core.Object"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "removeAllBindings": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all binding in the whole application. After that not a single",
          "     * binding is left.",
          "     * @deprecated {6.0} dispose and destructors are deprecated because of automatic memory management; this",
          "     * will only work for objects explicitly registered with ObjectRegistry.register",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all binding in the whole application. After that not a single\n binding is left.</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} dispose and destructors are deprecated because of automatic memory management; this\n will only work for objects explicitly registered with ObjectRegistry.register"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1629,
          "column": 4,
          "index": 55792
        },
        "end": {
          "line": 1642,
          "column": 5,
          "index": 56246
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getAllBindings": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a map containing for every bound object an array of data binding",
          "     * information. The key of the map is the hash code of the bound objects.",
          "     * Every binding is represented by an array containing id, sourceObject,",
          "     * sourceEvent, targetObject and targetProperty.",
          "     *",
          "     * @return {Map} Map containing all bindings.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a map containing for every bound object an array of data binding\n information. The key of the map is the hash code of the bound objects.\n Every binding is represented by an array containing id, sourceObject,\n sourceEvent, targetObject and targetProperty.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map containing all bindings.",
            "type": "Map<any, any>",
            "description": "Map containing all bindings."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1652,
          "column": 4,
          "index": 56614
        },
        "end": {
          "line": 1654,
          "column": 5,
          "index": 56668
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "showBindingInLog": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Debug function which shows some valuable information about the given",
          "     * binding in console. For that it uses {@link qx.log.Logger}.",
          "     *",
          "     * @param object {qx.core.Object} the source of the binding.",
          "     * @param id {var} The id of the binding.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Debug function which shows some valuable information about the given\n binding in console. For that it uses {@link qx.log.Logger}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {qx.core.Object} the source of the binding.",
            "paramName": "object",
            "description": " the source of the binding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "id {var} The id of the binding.",
            "paramName": "id",
            "description": " The id of the binding.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1663,
          "column": 4,
          "index": 56952
        },
        "end": {
          "line": 1690,
          "column": 5,
          "index": 57712
        }
      },
      "type": "function",
      "params": [
        {
          "name": "object",
          "type": "qx.core.Object"
        },
        {
          "name": "id",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "showAllBindingsInLog": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Debug function which shows all bindings in the log console. To get only",
          "     * one binding in the console use {@link #showBindingInLog}",
          "     * @deprecated {6.0} qx.core.ObjectRegistry no longer stores most objects",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Debug function which shows all bindings in the log console. To get only\n one binding in the console use {@link #showBindingInLog}</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} qx.core.ObjectRegistry no longer stores most objects"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1697,
          "column": 4,
          "index": 57956
        },
        "end": {
          "line": 1707,
          "column": 5,
          "index": 58331
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}