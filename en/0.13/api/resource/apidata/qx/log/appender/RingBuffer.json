{
  "className": "qx.log.appender.RingBuffer",
  "packageName": "qx.log.appender",
  "name": "RingBuffer",
  "superClass": "qx.util.RingBuffer",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 32,
        "column": 0,
        "index": 1143
      },
      "end": {
        "line": 103,
        "column": 3,
        "index": 2987
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>An appender that writes all messages to a memory container. The messages\n can be retrieved later, f. i. when an error dialog pops up and the question\n arises what actions have caused the error.\n A mark feature also exists which can be used to remember a point in time.\n When retrieving log events, it is possible to get only those events\n after the marked time. This is useful if data from the buffer is extracted\n and f. i. sent to a logging system. Whenever this happens, a mark() call\n can be used so that the next extraction will only get new data.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 38,
        "column": 2,
        "index": 1318
      },
      "end": {
        "line": 40,
        "column": 3,
        "index": 1390
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "maxMessages {Integer?50} Maximum number of messages in the buffer",
          "paramName": "maxMessages",
          "description": " Maximum number of messages in the buffer",
          "optional": true,
          "defaultValue": "50",
          "type": "Integer"
        }
      ]
    }
  },
  "members": {
    "setMaxMessages": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1696
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1770
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the maximum number of messages to hold. If null the number of\n messages is not limited.\n Warning: Changing this property will clear the events logged so far.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "maxMessages {Integer} the maximum number of messages to hold",
            "paramName": "maxMessages",
            "description": " the maximum number of messages to hold",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getMaxMessages": {
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1906
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1965
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the maximum number of messages to hold</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the maximum number of messages",
            "type": "Integer",
            "description": " the maximum number of messages"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "process": {
      "location": {
        "start": {
          "line": 69,
          "column": 4,
          "index": 2078
        },
        "end": {
          "line": 71,
          "column": 5,
          "index": 2128
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Processes a single log entry</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "entry {Map} The entry to process",
            "paramName": "entry",
            "description": " The entry to process",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAllLogEvents": {
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2245
        },
        "end": {
          "line": 80,
          "column": 5,
          "index": 2305
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all stored log events</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} array of stored log events",
            "type": "Array",
            "description": " array of stored log events"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "retrieveLogEvents": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2779
        },
        "end": {
          "line": 94,
          "column": 5,
          "index": 2884
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns log events which have been logged previously.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "count {Integer} The number of events to retrieve. If there are\n    more events than the given count, the oldest ones will not be returned.",
            "paramName": "count",
            "description": " The number of events to retrieve. If there are\n    more events than the given count, the oldest ones will not be returned.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "startingFromMark {Boolean ? false} If true, only entries since the last call to mark()\n                                           will be returned",
            "paramName": "startingFromMark",
            "description": " If true, only entries since the last call to mark()\n                                           will be returned",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} array of stored log events",
            "type": "Array",
            "description": " array of stored log events"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearHistory": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2937
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 2979
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the log history</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}