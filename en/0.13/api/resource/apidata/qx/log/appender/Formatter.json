{
  "version": 0.3,
  "lastModified": 1729101021836,
  "lastModifiedIso": "2024-10-16T17:50:21.836Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/log/appender/Formatter.js",
  "type": "class",
  "location": {
    "start": {
      "line": 1,
      "column": 0,
      "index": 0
    },
    "end": {
      "line": 359,
      "column": 3,
      "index": 9479
    }
  },
  "className": "qx.log.appender.Formatter",
  "jsdoc": null,
  "superClass": "qx.core.Object",
  "properties": {
    "formatTimeAs": {
      "location": {
        "start": {
          "line": 6,
          "column": 4,
          "index": 202
        },
        "end": {
          "line": 9,
          "column": 5,
          "index": 281
        }
      },
      "json": {
        "init": "offset",
        "check": [
          "offset",
          "datetime"
        ]
      },
      "jsdoc": {
        "raw": [
          "* How to format time in an entry; offset since start (backwards compatible) or as actual date/time "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>How to format time in an entry; offset since start (backwards compatible) or as actual date/time</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "formatOffset": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Formats a numeric time offset to 6 characters.",
          "     *",
          "     * @param offset",
          "     *          {Integer} Current offset value",
          "     * @param length",
          "     *          {Integer?6} Refine the length",
          "     * @return {String} Padded string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formats a numeric time offset to 6 characters.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "offset\n          {Integer} Current offset value",
            "paramName": "offset",
            "description": " Current offset value",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "length\n          {Integer?6} Refine the length",
            "paramName": "length",
            "description": " Refine the length",
            "optional": true,
            "defaultValue": "6",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Padded string",
            "type": "string",
            "description": "Padded string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 22,
          "column": 4,
          "index": 555
        },
        "end": {
          "line": 32,
          "column": 5,
          "index": 784
        }
      },
      "type": "function",
      "params": [
        {
          "name": "offset",
          "type": "Integer"
        },
        {
          "name": "length",
          "type": "Integer",
          "optional": true,
          "defaultValue": "6"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "formatEntryTime": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Formats the time part of an entry",
          "     *",
          "     * @param entry {Map} the entry to output",
          "     * @return {String} formatted time, as an offset or date time depending on `formatTimeAs` property",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formats the time part of an entry</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "entry {Map} the entry to output",
            "paramName": "entry",
            "description": " the entry to output",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} formatted time, as an offset or date time depending on <code>formatTimeAs</code> property",
            "type": "string",
            "description": "formatted time, as an offset or date time depending on <code>formatTimeAs</code> property"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1004
        },
        "end": {
          "line": 49,
          "column": 5,
          "index": 1402
        }
      },
      "type": "function",
      "params": [
        {
          "name": "entry",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "normalizeEntryClass": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Normalises the entry into an object with clazz, object, hash.",
          "     *",
          "     * @param entry {Map} the entry to output",
          "     * @return {Map} result, containing:",
          "     *  clazz {Class?} the class of the object",
          "     *  object {Object?} the object",
          "     *  hash {String?} the hash code",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Normalises the entry into an object with clazz, object, hash.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "entry {Map} the entry to output",
            "paramName": "entry",
            "description": " the entry to output",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} result, containing:\n  clazz {Class?} the class of the object\n  object {Object?} the object\n  hash {String?} the hash code",
            "type": "Map<any, any>",
            "description": "result, containing:\n  clazz {Class?} the class of the object\n  object {Object?} the object\n  hash {String?} the hash code"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1708
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 2321
        }
      },
      "type": "function",
      "params": [
        {
          "name": "entry",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "formatEntryObjectAndClass": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Formats the object part of an entry",
          "     *",
          "     * @param entry {Map} the entry to output",
          "     * @return {String} formatted object, with class and hash code if possible",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formats the object part of an entry</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "entry {Map} the entry to output",
            "paramName": "entry",
            "description": " the entry to output",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} formatted object, with class and hash code if possible",
            "type": "string",
            "description": "formatted object, with class and hash code if possible"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2519
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 2843
        }
      },
      "type": "function",
      "params": [
        {
          "name": "entry",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "formatEntryItems": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Formats the items part of an entry",
          "     *",
          "     * @param entry {Map} the entry to output",
          "     * @return {String} formatted items",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formats the items part of an entry</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "entry {Map} the entry to output",
            "paramName": "entry",
            "description": " the entry to output",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} formatted items",
            "type": "string",
            "description": "formatted items"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3001
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 3735
        }
      },
      "type": "function",
      "params": [
        {
          "name": "entry",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "toText": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a single log entry to plain text",
          "     *",
          "     * @param entry {Map} The entry to process",
          "     * @return {String} the formatted log entry",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a single log entry to plain text</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "entry {Map} The entry to process",
            "paramName": "entry",
            "description": " The entry to process",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the formatted log entry",
            "type": "string",
            "description": "the formatted log entry"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 3909
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 4170
        }
      },
      "type": "function",
      "params": [
        {
          "name": "entry",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "toTextArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a single log entry to an array of plain text.",
          "     *",
          "     * This use of arrays is an outdated performance improvement, and as there is no",
          "     * specification of what is in each of the elements of the array, there is no value",
          "     * in preserving this.  This method is deprecated because it will be removed in 7.0",
          "     * and only toText will remain.  Note that toTextArray is not used anywhere in Qooxdoo.",
          "     *",
          "     * @param entry {Map} The entry to process",
          "     * @return {Array} Argument list ready message array.",
          "     * @deprecated {6.0} See toText instead",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a single log entry to an array of plain text.\n This use of arrays is an outdated performance improvement, and as there is no\n specification of what is in each of the elements of the array, there is no value\n in preserving this.  This method is deprecated because it will be removed in 7.0\n and only toText will remain.  Note that toTextArray is not used anywhere in Qooxdoo.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "entry {Map} The entry to process",
            "paramName": "entry",
            "description": " The entry to process",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Argument list ready message array.",
            "type": "Array<any>",
            "description": "Argument list ready message array."
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} See toText instead"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 4771
        },
        "end": {
          "line": 184,
          "column": 5,
          "index": 4998
        }
      },
      "type": "function",
      "params": [
        {
          "name": "entry",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "toHtml": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a single log entry to HTML",
          "     *",
          "     * @signature function(entry)",
          "     * @param entry {Map} The entry to process",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a single log entry to HTML</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(entry)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "entry {Map} The entry to process",
            "paramName": "entry",
            "description": " The entry to process",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 5152
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 7999
        }
      },
      "type": "function",
      "params": [
        {
          "name": "entry",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    }
  },
  "statics": {
    "__DATETIME_FORMAT": {
      "jsdoc": {
        "raw": [
          "* @type {qx.util.format.DateFormat} format for datetimes "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.util.format.DateFormat} format for datetimes"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 299,
          "column": 4,
          "index": 8089
        },
        "end": {
          "line": 299,
          "column": 27,
          "index": 8112
        }
      },
      "appearsIn": []
    },
    "__defaultFormatter": {
      "jsdoc": {
        "raw": [
          "* @type {qx.log.appender.Formatter} the default instance "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.log.appender.Formatter} the default instance"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 8185
        },
        "end": {
          "line": 302,
          "column": 28,
          "index": 8209
        }
      },
      "appearsIn": []
    },
    "getFormatter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the default formatter",
          "     *",
          "     * @return {qx.log.appender.Formatter}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the default formatter</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.log.appender.Formatter}",
            "type": "qx.log.appender.Formatter",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 309,
          "column": 4,
          "index": 8319
        },
        "end": {
          "line": 315,
          "column": 5,
          "index": 8565
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.log.appender.Formatter"
      },
      "appearsIn": []
    },
    "setFormatter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the default formatter",
          "     *",
          "     * @param instance {qx.log.appender.Formatter}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the default formatter</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "instance {qx.log.appender.Formatter}",
            "paramName": "instance",
            "type": "qx.log.appender.Formatter"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 322,
          "column": 4,
          "index": 8680
        },
        "end": {
          "line": 324,
          "column": 5,
          "index": 8773
        }
      },
      "type": "function",
      "params": [
        {
          "name": "instance",
          "type": "qx.log.appender.Formatter"
        }
      ],
      "appearsIn": []
    },
    "escapeHTML": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Escapes the HTML in the given value",
          "     *",
          "     * @param value",
          "     *          {String} value to escape",
          "     * @return {String} escaped value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Escapes the HTML in the given value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value\n          {String} value to escape",
            "paramName": "value",
            "description": " value to escape",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} escaped value",
            "type": "string",
            "description": "escaped value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 333,
          "column": 4,
          "index": 8945
        },
        "end": {
          "line": 338,
          "column": 5,
          "index": 9089
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "__escapeHTMLReplace": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal replacement helper for HTML escape.",
          "     *",
          "     * @param ch",
          "     *          {String} Single item to replace.",
          "     * @return {String} Replaced item",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal replacement helper for HTML escape.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ch\n          {String} Single item to replace.",
            "paramName": "ch",
            "description": " Single item to replace.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Replaced item",
            "type": "string",
            "description": "Replaced item"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 347,
          "column": 4,
          "index": 9275
        },
        "end": {
          "line": 357,
          "column": 5,
          "index": 9471
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ch",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    }
  }
}