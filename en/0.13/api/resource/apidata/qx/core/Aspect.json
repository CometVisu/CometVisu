{
  "version": 0.3,
  "lastModified": 1726088850021,
  "lastModifiedIso": "2024-09-11T21:07:30.021Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/core/Aspect.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 36,
      "column": 0,
      "index": 1014
    },
    "end": {
      "line": 125,
      "column": 3,
      "index": 3942
    }
  },
  "className": "qx.core.Aspect",
  "jsdoc": {
    "raw": [
      "*",
      " * Basis for Aspect Oriented features in qooxdoo.",
      " *",
      " * This class makes it possible to attach functions (aspects) before or",
      " * after each function call of any function defined in {@link qx.Class#define}.",
      " *",
      " * Classes, which define own aspects must add an explicit require to this class",
      " * in the header comment using the following code:",
      " *",
      " * <pre>",
      " * &#35;require(qx.core.Aspect)",
      " * &#35;ignore(auto-require)",
      " * </pre>",
      " *",
      " * One example for a qooxdoo aspect is profiling ({@link qx.dev.Profile}).",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Basis for Aspect Oriented features in qooxdoo.\n This class makes it possible to attach functions (aspects) before or\n after each function call of any function defined in {@link qx.Class#define}.\n Classes, which define own aspects must add an explicit require to this class\n in the header comment using the following code:\n </p>\n<pre>\n &#35;require(qx.core.Aspect)\n &#35;ignore(auto-require)\n </pre>\n<p>One example for a qooxdoo aspect is profiling ({@link qx.dev.Profile}).</p>"
      }
    ]
  },
  "statics": {
    "__registry": {
      "jsdoc": {
        "raw": [
          "* @type {Array} Registry for all known aspect wishes "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} Registry for all known aspect wishes"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 39,
          "column": 4,
          "index": 1133
        },
        "end": {
          "line": 39,
          "column": 18,
          "index": 1147
        }
      },
      "appearsIn": []
    },
    "wrap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This function is used by {@link qx.Class#define} to wrap all statics, members and",
          "     * constructors.",
          "     *",
          "     * @param fullName {String} Full name of the function including the class name.",
          "     * @param fcn {Function} function to wrap.",
          "     * @param type {String} Type of the wrapped function. One of \"member\", \"static\",",
          "     *          \"constructor\", \"destructor\" or \"property\".",
          "     *",
          "     * @return {Function} wrapped function",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function is used by {@link qx.Class#define} to wrap all statics, members and\n constructors.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fullName {String} Full name of the function including the class name.",
            "paramName": "fullName",
            "description": " Full name of the function including the class name.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "fcn {Function} function to wrap.",
            "paramName": "fcn",
            "description": " function to wrap.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "type {String} Type of the wrapped function. One of \"member\", \"static\",\n          \"constructor\", \"destructor\" or \"property\".",
            "paramName": "type",
            "description": " Type of the wrapped function. One of \"member\", \"static\",\n          \"constructor\", \"destructor\" or \"property\".",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} wrapped function",
            "type": "((...args: any[]) => any)",
            "description": "wrapped function"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1612
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 2705
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fullName",
          "type": "string"
        },
        {
          "name": "fcn",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "type",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "((...args: any[]) => any)"
      },
      "appearsIn": []
    },
    "addAdvice": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Register a function to be called just before or after each time",
          "     * one of the selected functions is called.",
          "     *",
          "     * @param fcn {Function} Function to be called just before or after any of the",
          "     *     selected functions is called. If position is \"before\" the functions",
          "     *     supports the same signature as {@link qx.dev.Profile#profileBefore}. If",
          "     *     position is \"after\" it supports the same signature as",
          "     *     {@link qx.dev.Profile#profileAfter}.",
          "     * @param position {String?\"after\"} One of \"before\" or \"after\". Whether the function",
          "     *     should be called before or after the wrapped function.",
          "     * @param type {String?null} Type of the wrapped function. One of \"member\",",
          "     *     \"static\", \"constructor\", \"destructor\", \"property\" or \"*\". <code>null</code>",
          "     *     is handled identical to \"*\".",
          "     * @param name {String|RegExp?null} Each function, with a full name matching",
          "     *     this pattern (using <code>fullName.match(name)</code>) will be",
          "     *     wrapped.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Register a function to be called just before or after each time\n one of the selected functions is called.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fcn {Function} Function to be called just before or after any of the\n     selected functions is called. If position is \"before\" the functions\n     supports the same signature as {@link qx.dev.Profile#profileBefore}. If\n     position is \"after\" it supports the same signature as\n     {@link qx.dev.Profile#profileAfter}.",
            "paramName": "fcn",
            "description": " Function to be called just before or after any of the\n     selected functions is called. If position is \"before\" the functions\n     supports the same signature as {@link qx.dev.Profile#profileBefore}. If\n     position is \"after\" it supports the same signature as\n     {@link qx.dev.Profile#profileAfter}.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "position {String?\"after\"} One of \"before\" or \"after\". Whether the function\n     should be called before or after the wrapped function.",
            "paramName": "position",
            "description": " One of \"before\" or \"after\". Whether the function\n     should be called before or after the wrapped function.",
            "optional": true,
            "defaultValue": "\"after\"",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "type {String?null} Type of the wrapped function. One of \"member\",\n     \"static\", \"constructor\", \"destructor\", \"property\" or \"*\". <code>null</code>\n     is handled identical to \"*\".",
            "paramName": "type",
            "description": " Type of the wrapped function. One of \"member\",\n     \"static\", \"constructor\", \"destructor\", \"property\" or \"*\". <code>null</code>\n     is handled identical to \"*\".",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "name {String|RegExp?null} Each function, with a full name matching\n     this pattern (using <code>fullName.match(name)</code>) will be\n     wrapped.",
            "paramName": "name",
            "description": " Each function, with a full name matching\n     this pattern (using <code>fullName.match(name)</code>) will be\n     wrapped.",
            "optional": true,
            "defaultValue": "null",
            "type": [
              "String",
              "RegExp"
            ]
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3749
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 3934
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fcn",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "position",
          "type": "String",
          "optional": true,
          "defaultValue": "\"after\""
        },
        {
          "name": "type",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "name",
          "type": [
            "String",
            "RegExp"
          ],
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}