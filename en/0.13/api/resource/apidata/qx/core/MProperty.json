{
  "version": 0.3,
  "lastModified": 1735222259210,
  "lastModifiedIso": "2024-12-26T14:10:59.210Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/core/MProperty.js",
  "type": "mixin",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 599
    },
    "end": {
      "line": 176,
      "column": 3,
      "index": 4991
    }
  },
  "className": "qx.core.MProperty",
  "jsdoc": {
    "raw": [
      "*",
      " * This mixin offers the basic property features which include generic",
      " * setter, getter and resetter.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This mixin offers the basic property features which include generic\n setter, getter and resetter.</p>"
      }
    ]
  },
  "members": {
    "set": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets either multiple properties at once by using a property list or",
          "     * sets one property and its value by the first and second argument.",
          "     * As a fallback, if no generated property setter could be found, a",
          "     * handwritten setter will be searched and invoked if available.",
          "     *",
          "     * @param data {Object | String} a map of property values. The key is the name of the property.",
          "     * @param value {var?} the value, only used when <code>data</code> is a string.",
          "     * @return {Object} Returns this instance if <code>data</code> is a map",
          "     *   or a non-generated setter is called; otherwise returns <code>value</code>.",
          "     * @throws {Error} if a property defined does not exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets either multiple properties at once by using a property list or\n sets one property and its value by the first and second argument.\n As a fallback, if no generated property setter could be found, a\n handwritten setter will be searched and invoked if available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {Object | String} a map of property values. The key is the name of the property.",
            "paramName": "data",
            "description": " a map of property values. The key is the name of the property.",
            "type": [
              "Object",
              "String"
            ]
          },
          {
            "name": "@param",
            "body": "value {var?} the value, only used when <code>data</code> is a string.",
            "paramName": "value",
            "description": " the value, only used when <code>data</code> is a string.",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Returns this instance if <code>data</code> is a map\n   or a non-generated setter is called; otherwise returns <code>value</code>.",
            "type": "Record<any, any>",
            "description": "Returns this instance if <code>data</code> is a map\n   or a non-generated setter is called; otherwise returns <code>value</code>."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1371
        },
        "end": {
          "line": 83,
          "column": 5,
          "index": 2543
        }
      },
      "type": "function",
      "params": [
        {
          "name": "data",
          "type": [
            "Object",
            "String"
          ]
        },
        {
          "name": "value",
          "type": "var",
          "optional": true
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "get": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the value of the given property. If no generated getter could be",
          "     * found, a fallback tries to access a handwritten getter.",
          "     *",
          "     * @param prop {String} Name of the property.",
          "     * @return {var} The value of the value",
          "     * @throws {Error} if a property defined does not exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the value of the given property. If no generated getter could be\n found, a fallback tries to access a handwritten getter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the value",
            "type": "var",
            "description": "The value of the value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2870
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 3348
        }
      },
      "type": "function",
      "params": [
        {
          "name": "prop",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "reset": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Resets the value of the given property. If no generated resetter could be",
          "     * found, a handwritten resetter will be invoked, if available.",
          "     *",
          "     * @param prop {String} Name of the property.",
          "     * @throws {Error} if a property defined does not exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the value of the given property. If no generated resetter could be\n found, a handwritten resetter will be invoked, if available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "string"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3637
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 4133
        }
      },
      "type": "function",
      "params": [
        {
          "name": "prop",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "isPropertyInitialized": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if the property is initialized, i.e. has a defined init value or",
          "     * has got a value by a setter method.",
          "     *",
          "     * @param prop {String} Name of the property",
          "     * @return {Boolean} If the property is initialized",
          "     * @throws {Error} If the property defined does not exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the property is initialized, i.e. has a defined init value or\n has got a value by a setter method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property",
            "paramName": "prop",
            "description": " Name of the property",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the property is initialized",
            "type": "boolean",
            "description": "If the property is initialized"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the property defined does not exist",
            "type": "Error",
            "description": " If the property defined does not exist"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4452
        },
        "end": {
          "line": 174,
          "column": 5,
          "index": 4983
        }
      },
      "type": "function",
      "params": [
        {
          "name": "prop",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}