{
  "version": 0.3,
  "lastModified": 1735341602187,
  "lastModifiedIso": "2024-12-27T23:20:02.187Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/core/MAssert.js",
  "type": "mixin",
  "location": {
    "start": {
      "line": 27,
      "column": 0,
      "index": 770
    },
    "end": {
      "line": 508,
      "column": 3,
      "index": 16413
    }
  },
  "className": "qx.core.MAssert",
  "jsdoc": {
    "raw": [
      "*",
      " * This mixin includes all assertions from {@link qx.core.Assert} to conveniently",
      " * call assertions. It is included into {@link qx.core.Object} if debugging code",
      " * is enabled. It is further included into all unit tests",
      " * {@link qx.dev.unit.TestCase}.",
      " *",
      " * @require(qx.core.Assert)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This mixin includes all assertions from {@link qx.core.Assert} to conveniently\n call assertions. It is included into {@link qx.core.Object} if debugging code\n is enabled. It is further included into all unit tests\n {@link qx.dev.unit.TestCase}.</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.core.Assert"
      }
    ]
  },
  "members": {
    "assert": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the condition evaluates to <code>true</code>.",
          "     *",
          "     * @param condition {var} Condition to check for. Must evaluate to",
          "     *    <code>true</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the condition evaluates to <code>true</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {var} Condition to check for. Must evaluate to\n    <code>true</code>.",
            "paramName": "condition",
            "description": " Condition to check for. Must evaluate to\n    <code>true</code>.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1084
        },
        "end": {
          "line": 38,
          "column": 5,
          "index": 1159
        }
      },
      "type": "function",
      "params": [
        {
          "name": "condition",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "fail": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Raise an {@link AssertionError}",
          "     *",
          "     * @param msg {String} Message to be shown if the assertion fails.",
          "     * @param compact {Boolean?false} Show less verbose message. Default: false.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Raise an {@link AssertionError}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "compact {Boolean?false} Show less verbose message. Default: false.",
            "paramName": "compact",
            "description": " Show less verbose message. Default: false.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1380
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1447
        }
      },
      "type": "function",
      "params": [
        {
          "name": "msg",
          "type": "string"
        },
        {
          "name": "compact",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "appearsIn": []
    },
    "assertTrue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>true</code> (Identity check).",
          "     *",
          "     * @param value {Boolean} Condition to check for. Must be identical to",
          "     *    <code>true</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>true</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>true</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>true</code>.",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1721
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 1796
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertFalse": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>false</code> (Identity check).",
          "     *",
          "     * @param value {Boolean} Condition to check for. Must be identical to",
          "     *    <code>false</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>false</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>false</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>false</code>.",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2072
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2149
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are equal. (Uses the equality operator",
          "     * <code>==</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are equal. (Uses the equality operator\n <code>==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 80,
          "column": 4,
          "index": 2429
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2528
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are not equal. (Uses the not equality operator",
          "     * <code>!=</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not equal. (Uses the not equality operator\n <code>!=</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2816
        },
        "end": {
          "line": 94,
          "column": 5,
          "index": 2921
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertEqualsFloat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both float values are equal. This might be needed because",
          "     * of the natural floating point inaccuracy of computers.",
          "     *",
          "     * @param expected {Float} Reference value",
          "     * @param found {Float} Found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are equal. This might be needed because\n of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3249
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 3358
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Float"
        },
        {
          "name": "found",
          "type": "Float"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotEqualsFloat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both float values are not equal. This might be needed",
          "     * because of the natural floating point inaccuracy of computers.",
          "     *",
          "     * @param expected {Float} Reference value",
          "     * @param found {Float} Found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are not equal. This might be needed\n because of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3690
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3805
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Float"
        },
        {
          "name": "found",
          "type": "Float"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertIdentical": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are identical. (Uses the identity operator",
          "     * <code>===</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are identical. (Uses the identity operator\n <code>===</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 4090
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 4195
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotIdentical": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are not identical. (Uses the not identity operator",
          "     * <code>!==</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not identical. (Uses the not identity operator\n <code>!==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 140,
          "column": 4,
          "index": 4488
        },
        "end": {
          "line": 142,
          "column": 5,
          "index": 4599
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotUndefined": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is not <code>undefined</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4802
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 4893
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertUndefined": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>undefined</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 5092
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 5177
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotNull": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is not <code>null</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 5375
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 5456
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNull": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>null</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 5650
        },
        "end": {
          "line": 182,
          "column": 5,
          "index": 5725
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertJsonEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the first two arguments are equal, when serialized into",
          "     * JSON.",
          "     *",
          "     * @param expected {var} The expected value",
          "     * @param found {var} The found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the first two arguments are equal, when serialized into\n JSON.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} The expected value",
            "paramName": "expected",
            "description": " The expected value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} The found value",
            "paramName": "found",
            "description": " The found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 6005
        },
        "end": {
          "line": 194,
          "column": 5,
          "index": 6112
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertMatch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the given string matches the regular expression",
          "     *",
          "     * @param str {String} String, which should match the regular expression",
          "     * @param re {RegExp} Regular expression to match",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the given string matches the regular expression</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String, which should match the regular expression",
            "paramName": "str",
            "description": " String, which should match the regular expression",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "re {RegExp} Regular expression to match",
            "paramName": "re",
            "description": " Regular expression to match",
            "type": "RegExp"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 203,
          "column": 4,
          "index": 6412
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 6493
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        },
        {
          "name": "re",
          "type": "RegExp"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertArgumentsCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the number of arguments is within the given range",
          "     *",
          "     * @param args {arguments} The <code>arguments<code> variable of a function",
          "     * @param minCount {Integer} Minimal number of arguments",
          "     * @param maxCount {Integer} Maximum number of arguments",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the number of arguments is within the given range</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} The <code>arguments<code> variable of a function",
            "paramName": "args",
            "description": " The <code>arguments<code> variable of a function",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "minCount {Integer} Minimal number of arguments",
            "paramName": "minCount",
            "description": " Minimal number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxCount {Integer} Maximum number of arguments",
            "paramName": "maxCount",
            "description": " Maximum number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 6866
        },
        "end": {
          "line": 217,
          "column": 5,
          "index": 6999
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "arguments"
        },
        {
          "name": "minCount",
          "type": "Integer"
        },
        {
          "name": "maxCount",
          "type": "Integer"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertEventFired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that an event is fired.",
          "     *",
          "     * @param obj {Object} The object on which the event should be fired.",
          "     * @param event {String} The event which should be fired.",
          "     * @param invokeFunc {Function} The function which will be invoked and which",
          "     *   fires the event.",
          "     * @param listener {Function?null} The function which will be invoked in the",
          "     *   listener. The function has one parameter called e which is the event.",
          "     * @param msg {String?\"\"} Message to be shows if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   fires the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   fires the event.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "listener {Function?null} The function which will be invoked in the\n   listener. The function has one parameter called e which is the event.",
            "paramName": "listener",
            "description": " The function which will be invoked in the\n   listener. The function has one parameter called e which is the event.",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?\"\"} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "defaultValue": "\"\"",
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 230,
          "column": 4,
          "index": 7544
        },
        "end": {
          "line": 232,
          "column": 5,
          "index": 7685
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "Record<any, any>"
        },
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "invokeFunc",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "listener",
          "type": "Function",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true,
          "defaultValue": "\"\""
        }
      ],
      "appearsIn": []
    },
    "assertEventNotFired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that an event is not fired.",
          "     *",
          "     * @param obj {Object} The object on which the event should be fired.",
          "     * @param event {String} The event which should be fired.",
          "     * @param invokeFunc {Function} The function which will be invoked and which",
          "     *   should not fire the event.",
          "     * @param msg {String?} Message to be shows if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is not fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   should not fire the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   should not fire the event.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 8082
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 8209
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "Record<any, any>"
        },
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "invokeFunc",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertException": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Asserts that the callback raises a matching exception.",
          "     *",
          "     * @param callback {Function} function to check",
          "     * @param exception {Error?Error} Expected constructor of the exception.",
          "     *   The assertion fails if the raised exception is not an instance of the",
          "     *   parameter.",
          "     * @param re {String|RegExp} The assertion fails if the error message does",
          "     *   not match this parameter",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Asserts that the callback raises a matching exception.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} function to check",
            "paramName": "callback",
            "description": " function to check",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "exception {Error?Error} Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "paramName": "exception",
            "description": " Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "optional": true,
            "defaultValue": "Error",
            "type": "Error"
          },
          {
            "name": "@param",
            "body": "re {String|RegExp} The assertion fails if the error message does\n   not match this parameter",
            "paramName": "re",
            "description": " The assertion fails if the error message does\n   not match this parameter",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 258,
          "column": 4,
          "index": 8714
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 8835
        }
      },
      "type": "function",
      "params": [
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "exception",
          "type": "Error",
          "optional": true,
          "defaultValue": "Error"
        },
        {
          "name": "re",
          "type": [
            "String",
            "RegExp"
          ]
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an item in the given array.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param array {Array} List of valid values",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an item in the given array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of valid values",
            "paramName": "array",
            "description": " List of valid values",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 269,
          "column": 4,
          "index": 9087
        },
        "end": {
          "line": 271,
          "column": 5,
          "index": 9182
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "array",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotInArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is NOT an item in the given array",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param array {Array} List of values",
          "     * @param msg {String?} Message to be shown if the assertion fails",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is NOT an item in the given array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of values",
            "paramName": "array",
            "description": " List of values",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 9430
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 9531
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "array",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertArrayEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both array have identical array items.",
          "     *",
          "     * @param expected {Array} The expected array",
          "     * @param found {Array} The found array",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both array have identical array items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Array} The expected array",
            "paramName": "expected",
            "description": " The expected array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "found {Array} The found array",
            "paramName": "found",
            "description": " The found array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 9785
        },
        "end": {
          "line": 293,
          "column": 5,
          "index": 9894
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Array<any>"
        },
        {
          "name": "found",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertKeyInMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a key in the given map.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param map {Map} Map, where the keys represent the valid values",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a key in the given map.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "map {Map} Map, where the keys represent the valid values",
            "paramName": "map",
            "description": " Map, where the keys represent the valid values",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 10164
        },
        "end": {
          "line": 304,
          "column": 5,
          "index": 10257
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "map",
          "type": "Map<any, any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertFunction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a function.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 312,
          "column": 4,
          "index": 10444
        },
        "end": {
          "line": 314,
          "column": 5,
          "index": 10527
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a string.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 322,
          "column": 4,
          "index": 10712
        },
        "end": {
          "line": 324,
          "column": 5,
          "index": 10791
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertBoolean": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a boolean.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a boolean.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 332,
          "column": 4,
          "index": 10977
        },
        "end": {
          "line": 334,
          "column": 5,
          "index": 11058
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNumber": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a number.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 342,
          "column": 4,
          "index": 11243
        },
        "end": {
          "line": 344,
          "column": 5,
          "index": 11322
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertPositiveNumber": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a number >= 0.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 11512
        },
        "end": {
          "line": 354,
          "column": 5,
          "index": 11607
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInteger": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an integer.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 362,
          "column": 4,
          "index": 11794
        },
        "end": {
          "line": 364,
          "column": 5,
          "index": 11875
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertPositiveInteger": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an integer >= 0.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 372,
          "column": 4,
          "index": 12067
        },
        "end": {
          "line": 374,
          "column": 5,
          "index": 12164
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInRange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is inside the given range.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param min {Number} lower bound",
          "     * @param max {Number} upper bound",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is inside the given range.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "min {Number} lower bound",
            "paramName": "min",
            "description": " lower bound",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "max {Number} upper bound",
            "paramName": "max",
            "description": " upper bound",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 12441
        },
        "end": {
          "line": 386,
          "column": 5,
          "index": 12542
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "min",
          "type": "number"
        },
        {
          "name": "max",
          "type": "number"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an object.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 394,
          "column": 4,
          "index": 12728
        },
        "end": {
          "line": 396,
          "column": 5,
          "index": 12807
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an array.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 404,
          "column": 4,
          "index": 12992
        },
        "end": {
          "line": 406,
          "column": 5,
          "index": 13069
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a map either created using <code>new Object</code>",
          "     * or by using the object literal notation <code>{ ... }</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a map either created using <code>new Object</code>\n or by using the object literal notation <code>{ ... }</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 415,
          "column": 4,
          "index": 13364
        },
        "end": {
          "line": 417,
          "column": 5,
          "index": 13437
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertRegExp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a regular expression.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a regular expression.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 425,
          "column": 4,
          "index": 13634
        },
        "end": {
          "line": 427,
          "column": 5,
          "index": 13713
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value has the given type using the <code>typeof</code>",
          "     * operator. Because the type is not always what it is supposed to be it is",
          "     * better to use more explicit checks like {@link #assertString} or",
          "     * {@link #assertArray}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param type {String} expected type of the value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value has the given type using the <code>typeof</code>\n operator. Because the type is not always what it is supposed to be it is\n better to use more explicit checks like {@link #assertString} or\n {@link #assertArray}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} expected type of the value",
            "paramName": "type",
            "description": " expected type of the value",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 439,
          "column": 4,
          "index": 14170
        },
        "end": {
          "line": 441,
          "column": 5,
          "index": 14257
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInstance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of the given class.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param clazz {Class} The value must be an instance of this class",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of the given class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "clazz {Class} The value must be an instance of this class",
            "paramName": "clazz",
            "description": " The value must be an instance of this class",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 450,
          "column": 4,
          "index": 14536
        },
        "end": {
          "line": 452,
          "column": 5,
          "index": 14633
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "clazz",
          "type": "Class"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInterface": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value implements the given interface.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param iface {Class} The value must implement this interface",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value implements the given interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "iface {Class} The value must implement this interface",
            "paramName": "iface",
            "description": " The value must implement this interface",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 461,
          "column": 4,
          "index": 14905
        },
        "end": {
          "line": 463,
          "column": 5,
          "index": 15004
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "iface",
          "type": "Class"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertCssColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value represents the given CSS color value. This method",
          "     * parses the color strings and compares the RGB values. It is able to",
          "     * parse values supported by {@link qx.util.ColorUtil#stringToRgb}.",
          "     *",
          "     *  @param expected {String} The expected color",
          "     *  @param value {String} The value to check",
          "     *  @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value represents the given CSS color value. This method\n parses the color strings and compares the RGB values. It is able to\n parse values supported by {@link qx.util.ColorUtil#stringToRgb}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {String} The expected color",
            "paramName": "expected",
            "description": " The expected color",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {String} The value to check",
            "paramName": "value",
            "description": " The value to check",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 474,
          "column": 4,
          "index": 15434
        },
        "end": {
          "line": 476,
          "column": 5,
          "index": 15537
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "string"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a DOM element.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 484,
          "column": 4,
          "index": 15727
        },
        "end": {
          "line": 486,
          "column": 5,
          "index": 15808
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertQxObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of {@link qx.core.Object}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.core.Object}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 494,
          "column": 4,
          "index": 16022
        },
        "end": {
          "line": 496,
          "column": 5,
          "index": 16105
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertQxWidget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of {@link qx.ui.core.Widget}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.ui.core.Widget}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 504,
          "column": 4,
          "index": 16322
        },
        "end": {
          "line": 506,
          "column": 5,
          "index": 16405
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}