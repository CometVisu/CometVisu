{
  "version": 0.3,
  "lastModified": 1722153601179,
  "lastModifiedIso": "2024-07-28T08:00:01.179Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/core/Object.js",
  "type": "class",
  "location": {
    "start": {
      "line": 34,
      "column": 0,
      "index": 944
    },
    "end": {
      "line": 510,
      "column": 3,
      "index": 14627
    }
  },
  "className": "qx.core.Object",
  "jsdoc": {
    "raw": [
      "*",
      " * The qooxdoo root class. All other classes are direct or indirect subclasses of this one.",
      " *",
      " * This class contains methods for:",
      " *",
      " * * object management (creation and destruction)",
      " * * interfaces for event system",
      " * * generic setter/getter support",
      " * * interfaces for logging console",
      " * * user friendly OO interfaces like {@link #self} or {@link #base}",
      " *",
      " * @require(qx.core.ObjectRegistry)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The qooxdoo root class. All other classes are direct or indirect subclasses of this one.\n This class contains methods for:</p>\n<ul>\n<li>object management (creation and destruction)</li>\n<li>interfaces for event system</li>\n<li>generic setter/getter support</li>\n<li>interfaces for logging console</li>\n<li>user friendly OO interfaces like {@link #self} or {@link #base}</li>\n</ul>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.core.ObjectRegistry"
      }
    ]
  },
  "superClass": "Object",
  "mixins": [
    "qx.data.MBinding",
    "qx.core.MLogging",
    "qx.core.MEvent",
    "qx.core.MProperty",
    "qx.core.MObjectId",
    "qx.core.MAssert"
  ],
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 54,
        "column": 2,
        "index": 1510
      },
      "end": {
        "line": 54,
        "column": 16,
        "index": 1524
      }
    }
  },
  "statics": {
    "$$type": {
      "jsdoc": {
        "raw": [
          "* Internal type "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal type</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1753
        },
        "end": {
          "line": 64,
          "column": 20,
          "index": 1769
        }
      },
      "appearsIn": []
    },
    "handleObjects": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1626
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2136
        }
      },
      "type": "function",
      "params": [
        {
          "name": "clazz"
        },
        {
          "name": "instance"
        },
        {
          "name": "id"
        }
      ],
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    }
  },
  "members": {
    "__Property": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 1977
        },
        "end": {
          "line": 76,
          "column": 12,
          "index": 2069
        }
      },
      "appearsIn": []
    },
    "toHashCode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return unique hash code of object",
          "     *",
          "     * @return {String} unique hash code of the object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return unique hash code of object</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} unique hash code of the object",
            "type": "string",
            "description": "unique hash code of the object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 89,
          "column": 4,
          "index": 2383
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 2776
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "toUuid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a UUID for this object",
          "     *",
          "     * @return {String} a UUID",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a UUID for this object</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} a UUID",
            "type": "string",
            "description": "a UUID"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 2875
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3003
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "setExplicitUuid": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets a UUID; normally set automatically, you would only set this manually",
          "     * if you have a very special reason to do so - for example, you are using UUIDs which are",
          "     * synchronized from a special source, eg remote server.",
          "     *",
          "     * This can only be called once, and only if it has not been automatically allocated.  If",
          "     * you really do need to call this, call it as soon after construction as possible to avoid",
          "     * an exception.",
          "     *",
          "     * @param uuid {String} an ID which is unique across the whole application",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets a UUID; normally set automatically, you would only set this manually\n if you have a very special reason to do so - for example, you are using UUIDs which are\n synchronized from a special source, eg remote server.\n This can only be called once, and only if it has not been automatically allocated.  If\n you really do need to call this, call it as soon after construction as possible to avoid\n an exception.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "uuid {String} an ID which is unique across the whole application",
            "paramName": "uuid",
            "description": " an ID which is unique across the whole application",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3567
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 3737
        }
      },
      "type": "function",
      "params": [
        {
          "name": "uuid",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "toString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a string representation of the qooxdoo object.",
          "     *",
          "     * @return {String} string representation of the object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a string representation of the qooxdoo object.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} string representation of the object",
            "type": "string",
            "description": "string representation of the object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 3889
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 3968
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "mixin": "qx.data.MBinding",
      "appearsIn": [
        "qx.data.MBinding",
        "qx.core.MLogging",
        "qx.core.MEvent",
        "qx.core.MProperty",
        "qx.core.MObjectId",
        "qx.core.MAssert"
      ]
    },
    "base": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Call the same method of the super class.",
          "     *",
          "     * Either the compiler translate all calls to this.base",
          "     * into mypkg.MyBaseClass.prototype.myMethod.call(this, 123);",
          "     * this method is still needed for use in compile.js or playground",
          "     * which are not precompiled",
          "     *",
          "     * @param args {IArguments} the arguments variable of the calling method",
          "     * @param varargs {var?} variable number of arguments passed to the overwritten function",
          "     * @return {var} the return value of the method of the base class.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Call the same method of the super class.\n Either the compiler translate all calls to this.base\n into mypkg.MyBaseClass.prototype.myMethod.call(this, 123);\n this method is still needed for use in compile.js or playground\n which are not precompiled</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {IArguments} the arguments variable of the calling method",
            "paramName": "args",
            "description": " the arguments variable of the calling method",
            "type": "IArguments"
          },
          {
            "name": "@param",
            "body": "varargs {var?} variable number of arguments passed to the overwritten function",
            "paramName": "varargs",
            "description": " variable number of arguments passed to the overwritten function",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the return value of the method of the base class.",
            "type": "var",
            "description": "the return value of the method of the base class."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 4524
        },
        "end": {
          "line": 175,
          "column": 5,
          "index": 5096
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "IArguments"
        },
        {
          "name": "varargs",
          "type": "var",
          "optional": true
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "self": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the static class (to access static members of this class)",
          "     *",
          "     * @param args {arguments} the arguments variable of the calling method",
          "     * @return {var} the return value of the method of the base class.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the static class (to access static members of this class)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} the arguments variable of the calling method",
            "paramName": "args",
            "description": " the arguments variable of the calling method",
            "type": "arguments"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the return value of the method of the base class.",
            "type": "var",
            "description": "the return value of the method of the base class."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 5346
        },
        "end": {
          "line": 185,
          "column": 5,
          "index": 5395
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "arguments"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "clone": {
      "jsdoc": {
        "raw": [
          "*",
          "     *",
          "     * Returns a clone of this object. Copies over all user configured",
          "     * property values. Do not configure a parent nor apply the appearance",
          "     * styles directly.",
          "     *",
          "     * @return {qx.core.Object} The clone",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a clone of this object. Copies over all user configured\n property values. Do not configure a parent nor apply the appearance\n styles directly.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object} The clone",
            "type": "qx.core.Object",
            "description": "The clone"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 201,
          "column": 4,
          "index": 5839
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 6488
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.core.Object"
      },
      "appearsIn": []
    },
    "__userData": {
      "jsdoc": {
        "raw": [
          "* @type {Map} stored user data "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} stored user data"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 232,
          "column": 4,
          "index": 6726
        },
        "end": {
          "line": 232,
          "column": 20,
          "index": 6742
        }
      },
      "appearsIn": []
    },
    "setUserData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Store user defined data inside the object.",
          "     *",
          "     * @param key {String} the key",
          "     * @param value {Object} the value of the user data",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Store user defined data inside the object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the key",
            "paramName": "key",
            "description": " the key",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {Object} the value of the user data",
            "paramName": "value",
            "description": " the value of the user data",
            "type": "Record<any, any>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 240,
          "column": 4,
          "index": 6913
        },
        "end": {
          "line": 246,
          "column": 5,
          "index": 7049
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "value",
          "type": "Record<any, any>"
        }
      ],
      "appearsIn": []
    },
    "getUserData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Load user defined data from the object",
          "     *",
          "     * @param key {String} the key",
          "     * @return {Object} the user data",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Load user defined data from the object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the key",
            "paramName": "key",
            "description": " the key",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the user data",
            "type": "Record<any, any>",
            "description": "the user data"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 254,
          "column": 4,
          "index": 7198
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 7367
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "resetUserData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clears all user defined data from the object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears all user defined data from the object.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 7443
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 7496
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "isDisposed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns true if the object is disposed.",
          "     *",
          "     * @return {Boolean} Whether the object has been disposed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true if the object is disposed.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has been disposed",
            "type": "boolean",
            "description": "Whether the object has been disposed"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 7825
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 7884
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isDisposing": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns true if the object is being disposed, ie this.dispose() has started but",
          "     * not finished",
          "     *",
          "     * @return {Boolean} Whether the object is being disposed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true if the object is being disposed, ie this.dispose() has started but\n not finished</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object is being disposed",
            "type": "boolean",
            "description": "Whether the object is being disposed"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 8083
        },
        "end": {
          "line": 292,
          "column": 5,
          "index": 8144
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "dispose": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Dispose this object",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose this object</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 298,
          "column": 4,
          "index": 8201
        },
        "end": {
          "line": 393,
          "column": 5,
          "index": 11094
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_disposeObjects": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disconnects and disposes given objects from instance.",
          "     * Only works with qx.core.Object based objects e.g. Widgets.",
          "     *",
          "     * @param varargs {arguments} Names of fields (which store objects) to dispose",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disconnects and disposes given objects from instance.\n Only works with qx.core.Object based objects e.g. Widgets.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {arguments} Names of fields (which store objects) to dispose",
            "paramName": "varargs",
            "description": " Names of fields (which store objects) to dispose",
            "type": "arguments"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 407,
          "column": 4,
          "index": 11534
        },
        "end": {
          "line": 409,
          "column": 5,
          "index": 11625
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "arguments"
        }
      ],
      "appearsIn": []
    },
    "_disposeSingletonObjects": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disconnects and disposes given singleton objects from instance.",
          "     * Only works with qx.core.Object based objects e.g. Widgets.",
          "     *",
          "     * @param varargs {arguments} Names of fields (which store objects) to dispose",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disconnects and disposes given singleton objects from instance.\n Only works with qx.core.Object based objects e.g. Widgets.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {arguments} Names of fields (which store objects) to dispose",
            "paramName": "varargs",
            "description": " Names of fields (which store objects) to dispose",
            "type": "arguments"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 417,
          "column": 4,
          "index": 11875
        },
        "end": {
          "line": 419,
          "column": 5,
          "index": 11981
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "arguments"
        }
      ],
      "appearsIn": []
    },
    "_disposeArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disposes all members of the given array and deletes",
          "     * the field which refers to the array afterwards.",
          "     *",
          "     * @param field {String} Name of the field which refers to the array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disposes all members of the given array and deletes\n the field which refers to the array afterwards.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "field {String} Name of the field which refers to the array",
            "paramName": "field",
            "description": " Name of the field which refers to the array",
            "type": "string"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 12198
        },
        "end": {
          "line": 429,
          "column": 5,
          "index": 12279
        }
      },
      "type": "function",
      "params": [
        {
          "name": "field",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "_disposeMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disposes all members of the given map and deletes",
          "     * the field which refers to the map afterwards.",
          "     *",
          "     * @param field {String} Name of the field which refers to the map",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disposes all members of the given map and deletes\n the field which refers to the map afterwards.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "field {String} Name of the field which refers to the map",
            "paramName": "field",
            "description": " Name of the field which refers to the map",
            "type": "string"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 437,
          "column": 4,
          "index": 12490
        },
        "end": {
          "line": 439,
          "column": 5,
          "index": 12567
        }
      },
      "type": "function",
      "params": [
        {
          "name": "field",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "bind": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The bind method delegates the call to the",
          "     * {@link qx.data.SingleValueBinding#bind} function. As source, the current",
          "     * object (this) will be used.",
          "     *",
          "     * @param sourcePropertyChain {String} The property chain which represents",
          "     *   the source property.",
          "     * @param targetObject {qx.core.Object} The object which the source should",
          "     *   be bind to.",
          "     * @param targetProperty {String?\"value\"} The property name of the target object,",
          "     *   defaults to \"value\".",
          "     * @param options {Map?null} A map containing the options. See",
          "     *   {@link qx.data.SingleValueBinding#bind} for more",
          "     *   information.",
          "     *",
          "     * @return {var} Returns the internal id for that binding. This can be used",
          "     *   for referencing the binding e.g. for removing. This is not an atomic",
          "     *   id so you can't you use it as a hash-map index.",
          "     *",
          "     * @throws {qx.core.AssertionError} If the event is no data event or",
          "     *   there is no property definition for object and property (source and",
          "     *   target).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The bind method delegates the call to the\n {@link qx.data.SingleValueBinding#bind} function. As source, the current\n object (this) will be used.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\n   the source property."
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to."
          },
          {
            "name": "@param",
            "body": "targetProperty {String?\"value\"} The property name of the target object,\n   defaults to \"value\"."
          },
          {
            "name": "@param",
            "body": "options {Map?null} A map containing the options. See\n   {@link qx.data.SingleValueBinding#bind} for more\n   information."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Returns the internal id for that binding. This can be used\n   for referencing the binding e.g. for removing. This is not an atomic\n   id so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\n   there is no property definition for object and property (source and\n   target)."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1780
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 2023
        }
      },
      "type": "function",
      "params": [
        {
          "name": "sourcePropertyChain"
        },
        {
          "name": "targetObject"
        },
        {
          "name": "targetProperty"
        },
        {
          "name": "options"
        }
      ],
      "mixin": "qx.data.MBinding",
      "appearsIn": [
        "qx.data.MBinding"
      ]
    },
    "bindAsync": {
      "jsdoc": {
        "raw": [
          "*",
          "     * The bind method delegates the call to the",
          "     * {@link qx.data.SingleValueBinding#bind} function. As source, the current",
          "     * object (this) will be used.",
          "     *",
          "     * @param sourcePropertyChain {String} The property chain which represents",
          "     *   the source property.",
          "     * @param targetObject {qx.core.Object} The object which the source should",
          "     *   be bind to.",
          "     * @param targetProperty {String?\"value\"} The property name of the target object,",
          "     *   defaults to \"value\".",
          "     * @param options {Map?} A map containing the options. See",
          "     *   {@link qx.data.SingleValueBinding#bind} for more",
          "     *   information.",
          "     *",
          "     * @return {qx.Promise} A promise which is resolved when the initial value",
          "     * \t has been set on the target.  Note that this does NOT resolve when subsequent",
          "     *   values are returned.  The promise value is the internal id for that binding.",
          "     *   The id can be used for referencing the binding e.g. for removing. This is not",
          "     *   an atomic id so you can't you use it as a hash-map index.",
          "     *",
          "     * @throws {qx.core.AssertionError} If the event is no data event or",
          "     *   there is no property definition for object and property (source and",
          "     *   target).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The bind method delegates the call to the\n {@link qx.data.SingleValueBinding#bind} function. As source, the current\n object (this) will be used.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sourcePropertyChain {String} The property chain which represents\n   the source property."
          },
          {
            "name": "@param",
            "body": "targetObject {qx.core.Object} The object which the source should\n   be bind to."
          },
          {
            "name": "@param",
            "body": "targetProperty {String?\"value\"} The property name of the target object,\n   defaults to \"value\"."
          },
          {
            "name": "@param",
            "body": "options {Map?} A map containing the options. See\n   {@link qx.data.SingleValueBinding#bind} for more\n   information."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} A promise which is resolved when the initial value\n \t has been set on the target.  Note that this does NOT resolve when subsequent\n   values are returned.  The promise value is the internal id for that binding.\n   The id can be used for referencing the binding e.g. for removing. This is not\n   an atomic id so you can't you use it as a hash-map index."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the event is no data event or\n   there is no property definition for object and property (source and\n   target)."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 3272
        },
        "end": {
          "line": 111,
          "column": 6,
          "index": 4050
        }
      },
      "mixin": "qx.data.MBinding",
      "appearsIn": [
        "qx.data.MBinding"
      ]
    },
    "removeBinding": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the binding with the given id from the current object. The",
          "     * id has to be the id returned by any of the bind functions.",
          "     *",
          "     * @param id {var} The id of the binding.",
          "     * @throws {Error} If the binding could not be found.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the binding with the given id from the current object. The\n id has to be the id returned by any of the bind functions.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {var} The id of the binding."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the binding could not be found."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 4324
        },
        "end": {
          "line": 122,
          "column": 5,
          "index": 4417
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id"
        }
      ],
      "mixin": "qx.data.MBinding",
      "appearsIn": [
        "qx.data.MBinding"
      ]
    },
    "removeRelatedBindings": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all bindings between the object and the related one.",
          "     *",
          "     * @param relatedObject {qx.core.Object} The object of which related",
          "     *   bindings should be removed.",
          "     * @throws {Error} If one of the bindings listed internally can not be",
          "     *   removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all bindings between the object and the related one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "relatedObject {qx.core.Object} The object of which related\n   bindings should be removed."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\n   removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4718
        },
        "end": {
          "line": 134,
          "column": 5,
          "index": 4839
        }
      },
      "type": "function",
      "params": [
        {
          "name": "relatedObject"
        }
      ],
      "mixin": "qx.data.MBinding",
      "appearsIn": [
        "qx.data.MBinding"
      ]
    },
    "removeAllBindings": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all bindings from the object.",
          "     *",
          "     * @throws {qx.core.AssertionError} If the object is not in the internal",
          "     *   registry of the bindings.",
          "     * @throws {Error} If one of the bindings listed internally can not be",
          "     *   removed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all bindings from the object.</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.core.AssertionError} If the object is not in the internal\n   registry of the bindings."
          },
          {
            "name": "@throws",
            "body": "{Error} If one of the bindings listed internally can not be\n   removed."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 5119
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 5213
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.data.MBinding",
      "appearsIn": [
        "qx.data.MBinding"
      ]
    },
    "getBindings": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array which lists all bindings for the object.",
          "     *",
          "     * @return {Array} An array of binding informations. Every binding",
          "     *   information is an array itself containing id, sourceObject, sourceEvent,",
          "     *   targetObject and targetProperty in that order.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array which lists all bindings for the object.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array of binding informations. Every binding\n   information is an array itself containing id, sourceObject, sourceEvent,\n   targetObject and targetProperty in that order."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 5517
        },
        "end": {
          "line": 157,
          "column": 5,
          "index": 5609
        }
      },
      "type": "function",
      "params": [],
      "mixin": "qx.data.MBinding",
      "appearsIn": [
        "qx.data.MBinding"
      ]
    },
    "__Logger": {
      "jsdoc": {
        "raw": [
          "* @type {Class} Pointer to the regular logger class "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Class} Pointer to the regular logger class"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 25,
          "column": 4,
          "index": 694
        },
        "end": {
          "line": 25,
          "column": 27,
          "index": 717
        }
      },
      "appearsIn": [
        "qx.core.MLogging"
      ],
      "mixin": "qx.core.MLogging"
    },
    "debug": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Logs a debug message.",
          "     *",
          "     * @param varargs {var} The item(s) to log. Any number of arguments is",
          "     * supported. If an argument is not a string, the object dump will be",
          "     * logged.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs a debug message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 34,
          "column": 4,
          "index": 940
        },
        "end": {
          "line": 36,
          "column": 5,
          "index": 1007
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.core.MLogging"
      ],
      "mixin": "qx.core.MLogging"
    },
    "info": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Logs an info message.",
          "     *",
          "     * @param varargs {var} The item(s) to log. Any number of arguments is",
          "     * supported. If an argument is not a string, the object dump will be",
          "     * logged.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an info message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1230
        },
        "end": {
          "line": 47,
          "column": 5,
          "index": 1295
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.core.MLogging"
      ],
      "mixin": "qx.core.MLogging"
    },
    "warn": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Logs a warning message.",
          "     *",
          "     * @param varargs {var} The item(s) to log. Any number of arguments is",
          "     * supported. If an argument is not a string, the object dump will be",
          "     * logged.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs a warning message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1520
        },
        "end": {
          "line": 58,
          "column": 5,
          "index": 1585
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.core.MLogging"
      ],
      "mixin": "qx.core.MLogging"
    },
    "error": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Logs an error message.",
          "     *",
          "     * @param varargs {var} The item(s) to log. Any number of arguments is",
          "     * supported. If an argument is not a string, the object dump will be",
          "     * logged.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an error message.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1809
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 1876
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.core.MLogging"
      ],
      "mixin": "qx.core.MLogging"
    },
    "trace": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Logs an error message with the current stack trace",
          "     *",
          "     * @param varargs {var} The item(s) to log. Any number of arguments is",
          "     * supported. If an argument is not a string, the object dump will be",
          "     * logged.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Logs an error message with the current stack trace</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "paramName": "varargs",
            "description": " The item(s) to log. Any number of arguments is\n supported. If an argument is not a string, the object dump will be\n logged.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2128
        },
        "end": {
          "line": 80,
          "column": 5,
          "index": 2195
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "var"
        }
      ],
      "appearsIn": [
        "qx.core.MLogging"
      ],
      "mixin": "qx.core.MLogging"
    },
    "__logMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper that calls the appropriate logger function with the current object",
          "     * and any number of items.",
          "     *",
          "     * @param level {String} The log level of the message",
          "     * @param varargs {arguments} Arguments list to be logged",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper that calls the appropriate logger function with the current object\n and any number of items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "level {String} The log level of the message",
            "paramName": "level",
            "description": " The log level of the message",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "varargs {arguments} Arguments list to be logged",
            "paramName": "varargs",
            "description": " Arguments list to be logged",
            "type": "arguments"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 89,
          "column": 4,
          "index": 2458
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2660
        }
      },
      "type": "function",
      "params": [
        {
          "name": "level",
          "type": "string"
        },
        {
          "name": "varargs",
          "type": "arguments"
        }
      ],
      "appearsIn": [
        "qx.core.MLogging"
      ],
      "mixin": "qx.core.MLogging"
    },
    "__Registration": {
      "jsdoc": {
        "raw": [
          "* @type {Class} Pointer to the regular event registration class "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Class} Pointer to the regular event registration class"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 29,
          "column": 4,
          "index": 838
        },
        "end": {
          "line": 29,
          "column": 41,
          "index": 875
        }
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "addListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add event listener to this object.",
          "     *",
          "     * @param type {String} name of the event type",
          "     * @param listener {Function} event callback function",
          "     * @param self {Object ? null} Reference to the 'this' variable inside",
          "     *         the event listener. When not given, the corresponding dispatcher",
          "     *         usually falls back to a default, which is the target",
          "     *         by convention. Note this is not a strict requirement, i.e.",
          "     *         custom dispatchers can follow a different strategy.",
          "     * @param capture {Boolean ? false} Whether to attach the event to the",
          "     *         capturing phase or the bubbling phase of the event. The default is",
          "     *         to attach the event handler to the bubbling phase.",
          "     * @return {String} An opaque id, which can be used to remove the event listener",
          "     *         using the {@link #removeListenerById} method.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add event listener to this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "string",
            "description": "An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1789
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 2042
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "self",
          "type": "Object",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "capture",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "addListenerOnce": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add event listener to this object, which is only called once. After the",
          "     * listener is called the event listener gets removed.",
          "     *",
          "     * @param type {String} name of the event type",
          "     * @param listener {Function} event callback function",
          "     * @param context {Object ? window} reference to the 'this' variable inside the callback",
          "     * @param capture {Boolean ? false} Whether to attach the event to the",
          "     *         capturing phase or the bubbling phase of the event. The default is",
          "     *         to attach the event handler to the bubbling phase.",
          "     * @return {String} An opaque id, which can be used to remove the event listener",
          "     *         using the {@link #removeListenerById} method.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add event listener to this object, which is only called once. After the\n listener is called the event listener gets removed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "context {Object ? window} reference to the 'this' variable inside the callback",
            "paramName": "context",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "string",
            "description": "An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2781
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 3537
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "context",
          "type": "Object",
          "optional": true,
          "defaultValue": "window"
        },
        {
          "name": "capture",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "removeListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove event listener from this object",
          "     *",
          "     * @param type {String} name of the event type",
          "     * @param listener {Function} event callback function",
          "     * @param self {Object ? null} reference to the 'this' variable inside the callback",
          "     * @param capture {Boolean} Whether to remove the event listener of",
          "     *   the bubbling or of the capturing phase.",
          "     * @return {Boolean} Whether the event was removed successfully (has existed)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove event listener from this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} event callback function",
            "paramName": "listener",
            "description": " event callback function",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} reference to the 'this' variable inside the callback",
            "paramName": "self",
            "description": " reference to the 'this' variable inside the callback",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to remove the event listener of\n   the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\n   the bubbling or of the capturing phase.",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "boolean",
            "description": "Whether the event was removed successfully (has existed)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 4013
        },
        "end": {
          "line": 125,
          "column": 5,
          "index": 4631
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "self",
          "type": "Object",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "capture",
          "type": "boolean"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "removeListenerById": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes an event listener from an event target by an id returned by",
          "     * {@link #addListener}",
          "     *",
          "     * @param id {String} The id returned by {@link #addListener}",
          "     * @return {Boolean} Whether the event was removed successfully (has existed)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an event listener from an event target by an id returned by\n {@link #addListener}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (has existed)",
            "type": "boolean",
            "description": "Whether the event was removed successfully (has existed)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4912
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 5066
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "hasListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Check if there are one or more listeners for an event type.",
          "     *",
          "     * @param type {String} name of the event type",
          "     * @param capture {Boolean ? false} Whether to check for listeners of",
          "     *         the bubbling or of the capturing phase.",
          "     * @return {Boolean} Whether the object has a listener of the given type.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if there are one or more listeners for an event type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has a listener of the given type.",
            "type": "boolean",
            "description": "Whether the object has a listener of the given type."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 5421
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 5522
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "capture",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "dispatchEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Dispatch an event on this object",
          "     *",
          "     * @param evt {qx.event.type.Event} event to dispatch",
          "     * @return {Boolean} Whether the event default was prevented or not.",
          "     *     Returns true, when the event was NOT prevented.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatch an event on this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {qx.event.type.Event} event to dispatch",
            "paramName": "evt",
            "description": " event to dispatch",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "boolean",
            "description": "Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 5782
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 5927
        }
      },
      "type": "function",
      "params": [
        {
          "name": "evt",
          "type": "qx.event.type.Event"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "__pendingEvents": {
      "jsdoc": {
        "raw": [
          "* @type{Object<String,qx.Promise>} list of pending events, indexed by hash code "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Object<String,qx.Promise>} list of pending events, indexed by hash code"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 6023
        },
        "end": {
          "line": 170,
          "column": 25,
          "index": 6044
        }
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "__promiseWaitForPendingEvents": {
      "jsdoc": {
        "raw": [
          "* @type{qx.Promise} promise that callers are waiting on, ready for when all events are finished "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.Promise} promise that callers are waiting on, ready for when all events are finished"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 6156
        },
        "end": {
          "line": 173,
          "column": 39,
          "index": 6191
        }
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "__trackPendingEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper method to track promises returned from event handlers",
          "     *",
          "     * @param {var} result the result from the event handler",
          "     * @returns {qx.Promise|var} the value to return",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method to track promises returned from event handlers</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{var} result the result from the event handler",
            "paramName": "result",
            "description": "the result from the event handler",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|var} the value to return",
            "type": "qx.Promise|var",
            "description": "the value to return"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 6412
        },
        "end": {
          "line": 219,
          "column": 5,
          "index": 7773
        }
      },
      "type": "function",
      "params": [
        {
          "name": "result",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "qx.Promise|var"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "waitForPendingEvents": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Waits for all pending events to be resolved",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Waits for all pending events to be resolved</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 224,
          "column": 4,
          "index": 7847
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 8214
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "fireEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and dispatches an event on this object.",
          "     *",
          "     * @param type {String} Event type to fire",
          "     * @param clazz {Class?qx.event.type.Event} The event class",
          "     * @param args {Array?null} Arguments, which will be passed to",
          "     *       the event's init method.",
          "     * @return {Boolean|qx.Promise} whether the event default was prevented or not.",
          "     *     Returns true, when the event was NOT prevented.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an event on this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|qx.Promise} whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean|qx.Promise",
            "description": "whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 247,
          "column": 4,
          "index": 8658
        },
        "end": {
          "line": 255,
          "column": 5,
          "index": 8869
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "clazz",
          "type": "Class",
          "optional": true,
          "defaultValue": "qx.event.type.Event"
        },
        {
          "name": "args",
          "type": "Array",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "Boolean|qx.Promise"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "fireEventAsync": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and dispatches an event on this object; equivalent to fireEvent, except that it",
          "     * always returns a promise",
          "     *",
          "     * @param type {String} Event type to fire",
          "     * @param clazz {Class?qx.event.type.Event} The event class",
          "     * @param args {Array?null} Arguments, which will be passed to",
          "     *       the event's init method.",
          "     * @return {qx.Promise} a promise aggregated from the event handlers;",
          "     *  if the default was prevented, the promise is rejected",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an event on this object; equivalent to fireEvent, except that it\n always returns a promise</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": "a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 268,
          "column": 4,
          "index": 9378
        },
        "end": {
          "line": 283,
          "column": 5,
          "index": 9813
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "clazz",
          "type": "Class",
          "optional": true,
          "defaultValue": "qx.event.type.Event"
        },
        {
          "name": "args",
          "type": "Array",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "fireNonBubblingEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create an event object and dispatch it on this object.",
          "     * The event dispatched with this method does never bubble! Use only if you",
          "     * are sure that bubbling is not required.",
          "     *",
          "     * @param type {String} Event type to fire",
          "     * @param clazz {Class?qx.event.type.Event} The event class",
          "     * @param args {Array?null} Arguments, which will be passed to",
          "     *       the event's init method.",
          "     * @return {Boolean} Whether the event default was prevented or not.",
          "     *     Returns true, when the event was NOT prevented.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an event object and dispatch it on this object.\n The event dispatched with this method does never bubble! Use only if you\n are sure that bubbling is not required.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "boolean",
            "description": "Whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 297,
          "column": 4,
          "index": 10380
        },
        "end": {
          "line": 305,
          "column": 5,
          "index": 10613
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "clazz",
          "type": "Class",
          "optional": true,
          "defaultValue": "qx.event.type.Event"
        },
        {
          "name": "args",
          "type": "Array",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "fireNonBubblingEventAsync": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create an event object and dispatch it on this object; equivalent to fireNonBubblingEvent,",
          "     * except that it always returns a promise.",
          "     *",
          "     * The event dispatched with this method does never bubble! Use only if you",
          "     * are sure that bubbling is not required.",
          "     *",
          "     * @param type {String} Event type to fire",
          "     * @param clazz {Class?qx.event.type.Event} The event class",
          "     * @param args {Array?null} Arguments, which will be passed to",
          "     *       the event's init method.",
          "     * @return {qx.Promise} a promise aggregated from the event handlers;",
          "     *  if the default was prevented, the promise is rejected",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create an event object and dispatch it on this object; equivalent to fireNonBubblingEvent,\n except that it always returns a promise.\n The event dispatched with this method does never bubble! Use only if you\n are sure that bubbling is not required.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "clazz {Class?qx.event.type.Event} The event class",
            "paramName": "clazz",
            "description": " The event class",
            "optional": true,
            "defaultValue": "qx.event.type.Event",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "args {Array?null} Arguments, which will be passed to\n       the event's init method.",
            "paramName": "args",
            "description": " Arguments, which will be passed to\n       the event's init method.",
            "optional": true,
            "defaultValue": "null",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": "a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 321,
          "column": 4,
          "index": 11275
        },
        "end": {
          "line": 336,
          "column": 5,
          "index": 11743
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "clazz",
          "type": "Class",
          "optional": true,
          "defaultValue": "qx.event.type.Event"
        },
        {
          "name": "args",
          "type": "Array",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "fireDataEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and dispatches an non-bubbling data event on this object.",
          "     *",
          "     * @param type {String} Event type to fire",
          "     * @param data {var} User defined data attached to the event object",
          "     * @param oldData {var?null} The event's old data (optional)",
          "     * @param cancelable {Boolean?false} Whether or not an event can have its default",
          "     *     action prevented. The default action can either be the browser's",
          "     *     default action of a native event (e.g. open the context menu on a",
          "     *     right click) or the default action of a qooxdoo class (e.g. close",
          "     *     the window widget). The default action can be prevented by calling",
          "     *     {@link qx.event.type.Event#preventDefault}",
          "     * @return {Boolean|qx.Promise} whether the event default was prevented or not.",
          "     *     Returns true, when the event was NOT prevented.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an non-bubbling data event on this object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {var} User defined data attached to the event object",
            "paramName": "data",
            "description": " User defined data attached to the event object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "oldData {var?null} The event's old data (optional)",
            "paramName": "oldData",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|qx.Promise} whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean|qx.Promise",
            "description": "whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 353,
          "column": 4,
          "index": 12621
        },
        "end": {
          "line": 368,
          "column": 5,
          "index": 13009
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "data",
          "type": "var"
        },
        {
          "name": "oldData",
          "type": "var",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "cancelable",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "Boolean|qx.Promise"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "fireDataEventAsync": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and dispatches an non-bubbling data event on this object; equivalent to",
          "     * fireEvent, except that it always returns a promise.",
          "     *",
          "     * @param type {String} Event type to fire",
          "     * @param data {var} User defined data attached to the event object",
          "     * @param oldData {var?null} The event's old data (optional)",
          "     * @param cancelable {Boolean?false} Whether or not an event can have its default",
          "     *     action prevented. The default action can either be the browser's",
          "     *     default action of a native event (e.g. open the context menu on a",
          "     *     right click) or the default action of a qooxdoo class (e.g. close",
          "     *     the window widget). The default action can be prevented by calling",
          "     *     {@link qx.event.type.Event#preventDefault}",
          "     * @return {qx.Promise} a promise aggregated from the event handlers;",
          "     *  if the default was prevented, the promise is rejected",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and dispatches an non-bubbling data event on this object; equivalent to\n fireEvent, except that it always returns a promise.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type to fire",
            "paramName": "type",
            "description": " Event type to fire",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {var} User defined data attached to the event object",
            "paramName": "data",
            "description": " User defined data attached to the event object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "oldData {var?null} The event's old data (optional)",
            "paramName": "oldData",
            "description": " The event's old data (optional)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected",
            "type": "qx.Promise",
            "description": "a promise aggregated from the event handlers;\n  if the default was prevented, the promise is rejected"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 386,
          "column": 4,
          "index": 13953
        },
        "end": {
          "line": 408,
          "column": 5,
          "index": 14569
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "data",
          "type": "var"
        },
        {
          "name": "oldData",
          "type": "var",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "cancelable",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": [
        "qx.core.MEvent"
      ],
      "mixin": "qx.core.MEvent"
    },
    "set": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets either multiple properties at once by using a property list or",
          "     * sets one property and its value by the first and second argument.",
          "     * As a fallback, if no generated property setter could be found, a",
          "     * handwritten setter will be searched and invoked if available.",
          "     *",
          "     * @param data {Object | String} a map of property values. The key is the name of the property.",
          "     * @param value {var?} the value, only used when <code>data</code> is a string.",
          "     * @return {Object} Returns this instance if <code>data</code> is a map",
          "     *   or a non-generated setter is called; otherwise returns <code>value</code>.",
          "     * @throws {Error} if a property defined does not exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets either multiple properties at once by using a property list or\n sets one property and its value by the first and second argument.\n As a fallback, if no generated property setter could be found, a\n handwritten setter will be searched and invoked if available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {Object | String} a map of property values. The key is the name of the property.",
            "paramName": "data",
            "description": " a map of property values. The key is the name of the property.",
            "type": [
              "Object",
              "String"
            ]
          },
          {
            "name": "@param",
            "body": "value {var?} the value, only used when <code>data</code> is a string.",
            "paramName": "value",
            "description": " the value, only used when <code>data</code> is a string.",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Returns this instance if <code>data</code> is a map\n   or a non-generated setter is called; otherwise returns <code>value</code>.",
            "type": "Record<any, any>",
            "description": "Returns this instance if <code>data</code> is a map\n   or a non-generated setter is called; otherwise returns <code>value</code>."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1371
        },
        "end": {
          "line": 83,
          "column": 5,
          "index": 2543
        }
      },
      "type": "function",
      "params": [
        {
          "name": "data",
          "type": [
            "Object",
            "String"
          ]
        },
        {
          "name": "value",
          "type": "var",
          "optional": true
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": [
        "qx.core.MProperty"
      ],
      "mixin": "qx.core.MProperty"
    },
    "get": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the value of the given property. If no generated getter could be",
          "     * found, a fallback tries to access a handwritten getter.",
          "     *",
          "     * @param prop {String} Name of the property.",
          "     * @return {var} The value of the value",
          "     * @throws {Error} if a property defined does not exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the value of the given property. If no generated getter could be\n found, a fallback tries to access a handwritten getter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the value",
            "type": "var",
            "description": "The value of the value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2870
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 3348
        }
      },
      "type": "function",
      "params": [
        {
          "name": "prop",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": [
        "qx.core.MProperty"
      ],
      "mixin": "qx.core.MProperty"
    },
    "reset": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Resets the value of the given property. If no generated resetter could be",
          "     * found, a handwritten resetter will be invoked, if available.",
          "     *",
          "     * @param prop {String} Name of the property.",
          "     * @throws {Error} if a property defined does not exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the value of the given property. If no generated resetter could be\n found, a handwritten resetter will be invoked, if available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "string"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if a property defined does not exist",
            "type": "Error",
            "description": " if a property defined does not exist"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3637
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 4133
        }
      },
      "type": "function",
      "params": [
        {
          "name": "prop",
          "type": "string"
        }
      ],
      "appearsIn": [
        "qx.core.MProperty"
      ],
      "mixin": "qx.core.MProperty"
    },
    "isPropertyInitialized": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if the property is initialized, i.e. has a defined init value or",
          "     * has got a value by a setter method.",
          "     *",
          "     * @param prop {String} Name of the property",
          "     * @return {Boolean} If the property is initialized",
          "     * @throws {Error} If the property defined does not exist",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the property is initialized, i.e. has a defined init value or\n has got a value by a setter method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property",
            "paramName": "prop",
            "description": " Name of the property",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the property is initialized",
            "type": "boolean",
            "description": "If the property is initialized"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the property defined does not exist",
            "type": "Error",
            "description": " If the property defined does not exist"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4452
        },
        "end": {
          "line": 174,
          "column": 5,
          "index": 4983
        }
      },
      "type": "function",
      "params": [
        {
          "name": "prop",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": [
        "qx.core.MProperty"
      ],
      "mixin": "qx.core.MProperty"
    },
    "__ownedQxObjects": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2160
        },
        "end": {
          "line": 86,
          "column": 26,
          "index": 2182
        }
      },
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "__changingQxOwner": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2188
        },
        "end": {
          "line": 87,
          "column": 28,
          "index": 2212
        }
      },
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "_applyQxOwner": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply owner",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply owner</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2254
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2442
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "oldValue"
        }
      ],
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "_applyQxObjectId": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply objectId",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply objectId</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2487
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 2749
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "oldValue"
        }
      ],
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "__onOwnedObjectIdChange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Called when a child's objectId changes",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called when a child's objectId changes</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 2818
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 2953
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj"
        },
        {
          "name": "newId"
        },
        {
          "name": "oldId"
        }
      ],
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "_cascadeQxObjectIdChanges": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Reflect changes to IDs or owners",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reflect changes to IDs or owners</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3016
        },
        "end": {
          "line": 139,
          "column": 5,
          "index": 3510
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "getQxObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the object with the specified ID",
          "     *",
          "     * @param id",
          "     *          {String} ID of the object",
          "     * @return {qx.core.Object?} the found object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the object with the specified ID</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id\n          {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the found object",
            "type": "qx.core.Object?",
            "description": "the found object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 3697
        },
        "end": {
          "line": 210,
          "column": 5,
          "index": 5278
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.core.Object?"
      },
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "_createQxObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates the object and adds it to a list; most classes are expected to",
          "     * override `_createQxObjectImpl` NOT this method.",
          "     *",
          "     * @param id {String} ID of the object",
          "     * @return {qx.core.Object?} the created object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the object and adds it to a list; most classes are expected to\n override <code>_createQxObjectImpl</code> NOT this method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the created object",
            "type": "qx.core.Object?",
            "description": "the created object"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 219,
          "column": 4,
          "index": 5536
        },
        "end": {
          "line": 225,
          "column": 5,
          "index": 5718
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.core.Object?"
      },
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "_createQxObjectImpl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates the object, intended to be overridden. Null is a valid return",
          "     * value and will be cached by `getQxObject`, however `undefined` is NOT a",
          "     * valid value and so will not be cached meaning that `_createQxObjectImpl`",
          "     * will be called multiple times until a valid value is returned.",
          "     *",
          "     * @param id {String} ID of the object",
          "     * @return {qx.core.Object?} the created object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates the object, intended to be overridden. Null is a valid return\n value and will be cached by <code>getQxObject</code>, however <code>undefined</code> is NOT a\n valid value and so will not be cached meaning that <code>_createQxObjectImpl</code>\n will be called multiple times until a valid value is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} ID of the object",
            "paramName": "id",
            "description": " ID of the object",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.core.Object?} the created object",
            "type": "qx.core.Object?",
            "description": "the created object"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 236,
          "column": 4,
          "index": 6149
        },
        "end": {
          "line": 238,
          "column": 5,
          "index": 6204
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.core.Object?"
      },
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "addOwnedQxObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds an object as owned by this object",
          "     *",
          "     * @param obj {qx.core.Object} the object to register",
          "     * @param id {String?} the id to set when registering the object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an object as owned by this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {qx.core.Object} the object to register",
            "paramName": "obj",
            "description": " the object to register",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "id {String?} the id to set when registering the object",
            "paramName": "id",
            "description": " the id to set when registering the object",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 246,
          "column": 4,
          "index": 6407
        },
        "end": {
          "line": 315,
          "column": 5,
          "index": 8291
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "qx.core.Object"
        },
        {
          "name": "id",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "removeOwnedQxObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Discards an object from the list of owned objects; note that this does",
          "     * not dispose of the object, simply forgets it if it exists.",
          "     *",
          "     * @param args {String|Object} the ID of the object to discard, or the object itself",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Discards an object from the list of owned objects; note that this does\n not dispose of the object, simply forgets it if it exists.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {String|Object} the ID of the object to discard, or the object itself",
            "paramName": "args",
            "description": " the ID of the object to discard, or the object itself",
            "type": [
              "String",
              "Object"
            ]
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 323,
          "column": 4,
          "index": 8554
        },
        "end": {
          "line": 377,
          "column": 5,
          "index": 10114
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": [
            "String",
            "Object"
          ]
        }
      ],
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "__removeOwnedQxObjectImpl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes an owned object",
          "     *",
          "     * @param obj {qx.core.Object} the object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an owned object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {qx.core.Object} the object",
            "paramName": "obj",
            "description": " the object",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 10221
        },
        "end": {
          "line": 390,
          "column": 5,
          "index": 10403
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "getOwnedQxObjects": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an array of objects that are owned by this object, or an empty",
          "     * array if none exists.",
          "     *",
          "     * @return {Array}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of objects that are owned by this object, or an empty\n array if none exists.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}",
            "type": "Array<any>",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 398,
          "column": 4,
          "index": 10563
        },
        "end": {
          "line": 400,
          "column": 5,
          "index": 10670
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "assert": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the condition evaluates to <code>true</code>.",
          "     *",
          "     * @param condition {var} Condition to check for. Must evaluate to",
          "     *    <code>true</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the condition evaluates to <code>true</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {var} Condition to check for. Must evaluate to\n    <code>true</code>.",
            "paramName": "condition",
            "description": " Condition to check for. Must evaluate to\n    <code>true</code>.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1084
        },
        "end": {
          "line": 38,
          "column": 5,
          "index": 1159
        }
      },
      "type": "function",
      "params": [
        {
          "name": "condition",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "fail": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Raise an {@link AssertionError}",
          "     *",
          "     * @param msg {String} Message to be shown if the assertion fails.",
          "     * @param compact {Boolean?false} Show less verbose message. Default: false.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Raise an {@link AssertionError}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "compact {Boolean?false} Show less verbose message. Default: false.",
            "paramName": "compact",
            "description": " Show less verbose message. Default: false.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1380
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1447
        }
      },
      "type": "function",
      "params": [
        {
          "name": "msg",
          "type": "string"
        },
        {
          "name": "compact",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertTrue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>true</code> (Identity check).",
          "     *",
          "     * @param value {Boolean} Condition to check for. Must be identical to",
          "     *    <code>true</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>true</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>true</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>true</code>.",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1721
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 1796
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertFalse": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>false</code> (Identity check).",
          "     *",
          "     * @param value {Boolean} Condition to check for. Must be identical to",
          "     *    <code>false</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>false</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>false</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>false</code>.",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 68,
          "column": 4,
          "index": 2072
        },
        "end": {
          "line": 70,
          "column": 5,
          "index": 2149
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are equal. (Uses the equality operator",
          "     * <code>==</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are equal. (Uses the equality operator\n <code>==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 80,
          "column": 4,
          "index": 2429
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2528
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertNotEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are not equal. (Uses the not equality operator",
          "     * <code>!=</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not equal. (Uses the not equality operator\n <code>!=</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 2816
        },
        "end": {
          "line": 94,
          "column": 5,
          "index": 2921
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertEqualsFloat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both float values are equal. This might be needed because",
          "     * of the natural floating point inaccuracy of computers.",
          "     *",
          "     * @param expected {Float} Reference value",
          "     * @param found {Float} Found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are equal. This might be needed because\n of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3249
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 3358
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Float"
        },
        {
          "name": "found",
          "type": "Float"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertNotEqualsFloat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both float values are not equal. This might be needed",
          "     * because of the natural floating point inaccuracy of computers.",
          "     *",
          "     * @param expected {Float} Reference value",
          "     * @param found {Float} Found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are not equal. This might be needed\n because of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3690
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3805
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Float"
        },
        {
          "name": "found",
          "type": "Float"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertIdentical": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are identical. (Uses the identity operator",
          "     * <code>===</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are identical. (Uses the identity operator\n <code>===</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 4090
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 4195
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertNotIdentical": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are not identical. (Uses the not identity operator",
          "     * <code>!==</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not identical. (Uses the not identity operator\n <code>!==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 140,
          "column": 4,
          "index": 4488
        },
        "end": {
          "line": 142,
          "column": 5,
          "index": 4599
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertNotUndefined": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is not <code>undefined</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4802
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 4893
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertUndefined": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>undefined</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 5092
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 5177
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertNotNull": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is not <code>null</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 5375
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 5456
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertNull": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>null</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 5650
        },
        "end": {
          "line": 182,
          "column": 5,
          "index": 5725
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertJsonEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the first two arguments are equal, when serialized into",
          "     * JSON.",
          "     *",
          "     * @param expected {var} The expected value",
          "     * @param found {var} The found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the first two arguments are equal, when serialized into\n JSON.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} The expected value",
            "paramName": "expected",
            "description": " The expected value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} The found value",
            "paramName": "found",
            "description": " The found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 6005
        },
        "end": {
          "line": 194,
          "column": 5,
          "index": 6112
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertMatch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the given string matches the regular expression",
          "     *",
          "     * @param str {String} String, which should match the regular expression",
          "     * @param re {RegExp} Regular expression to match",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the given string matches the regular expression</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String, which should match the regular expression",
            "paramName": "str",
            "description": " String, which should match the regular expression",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "re {RegExp} Regular expression to match",
            "paramName": "re",
            "description": " Regular expression to match",
            "type": "RegExp"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 203,
          "column": 4,
          "index": 6412
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 6493
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        },
        {
          "name": "re",
          "type": "RegExp"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertArgumentsCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the number of arguments is within the given range",
          "     *",
          "     * @param args {arguments} The <code>arguments<code> variable of a function",
          "     * @param minCount {Integer} Minimal number of arguments",
          "     * @param maxCount {Integer} Maximum number of arguments",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the number of arguments is within the given range</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} The <code>arguments<code> variable of a function",
            "paramName": "args",
            "description": " The <code>arguments<code> variable of a function",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "minCount {Integer} Minimal number of arguments",
            "paramName": "minCount",
            "description": " Minimal number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxCount {Integer} Maximum number of arguments",
            "paramName": "maxCount",
            "description": " Maximum number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 6866
        },
        "end": {
          "line": 217,
          "column": 5,
          "index": 6999
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "arguments"
        },
        {
          "name": "minCount",
          "type": "Integer"
        },
        {
          "name": "maxCount",
          "type": "Integer"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertEventFired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that an event is fired.",
          "     *",
          "     * @param obj {Object} The object on which the event should be fired.",
          "     * @param event {String} The event which should be fired.",
          "     * @param invokeFunc {Function} The function which will be invoked and which",
          "     *   fires the event.",
          "     * @param listener {Function?null} The function which will be invoked in the",
          "     *   listener. The function has one parameter called e which is the event.",
          "     * @param msg {String?\"\"} Message to be shows if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   fires the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   fires the event.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "listener {Function?null} The function which will be invoked in the\n   listener. The function has one parameter called e which is the event.",
            "paramName": "listener",
            "description": " The function which will be invoked in the\n   listener. The function has one parameter called e which is the event.",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?\"\"} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "defaultValue": "\"\"",
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 230,
          "column": 4,
          "index": 7544
        },
        "end": {
          "line": 232,
          "column": 5,
          "index": 7685
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "Record<any, any>"
        },
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "invokeFunc",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "listener",
          "type": "Function",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true,
          "defaultValue": "\"\""
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertEventNotFired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that an event is not fired.",
          "     *",
          "     * @param obj {Object} The object on which the event should be fired.",
          "     * @param event {String} The event which should be fired.",
          "     * @param invokeFunc {Function} The function which will be invoked and which",
          "     *   should not fire the event.",
          "     * @param msg {String?} Message to be shows if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is not fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   should not fire the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   should not fire the event.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 8082
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 8209
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "Record<any, any>"
        },
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "invokeFunc",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertException": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Asserts that the callback raises a matching exception.",
          "     *",
          "     * @param callback {Function} function to check",
          "     * @param exception {Error?Error} Expected constructor of the exception.",
          "     *   The assertion fails if the raised exception is not an instance of the",
          "     *   parameter.",
          "     * @param re {String|RegExp} The assertion fails if the error message does",
          "     *   not match this parameter",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Asserts that the callback raises a matching exception.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} function to check",
            "paramName": "callback",
            "description": " function to check",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "exception {Error?Error} Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "paramName": "exception",
            "description": " Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "optional": true,
            "defaultValue": "Error",
            "type": "Error"
          },
          {
            "name": "@param",
            "body": "re {String|RegExp} The assertion fails if the error message does\n   not match this parameter",
            "paramName": "re",
            "description": " The assertion fails if the error message does\n   not match this parameter",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 258,
          "column": 4,
          "index": 8714
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 8835
        }
      },
      "type": "function",
      "params": [
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "exception",
          "type": "Error",
          "optional": true,
          "defaultValue": "Error"
        },
        {
          "name": "re",
          "type": [
            "String",
            "RegExp"
          ]
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertInArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an item in the given array.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param array {Array} List of valid values",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an item in the given array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of valid values",
            "paramName": "array",
            "description": " List of valid values",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 269,
          "column": 4,
          "index": 9087
        },
        "end": {
          "line": 271,
          "column": 5,
          "index": 9182
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "array",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertNotInArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is NOT an item in the given array",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param array {Array} List of values",
          "     * @param msg {String?} Message to be shown if the assertion fails",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is NOT an item in the given array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of values",
            "paramName": "array",
            "description": " List of values",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 9430
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 9531
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "array",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertArrayEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both array have identical array items.",
          "     *",
          "     * @param expected {Array} The expected array",
          "     * @param found {Array} The found array",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both array have identical array items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Array} The expected array",
            "paramName": "expected",
            "description": " The expected array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "found {Array} The found array",
            "paramName": "found",
            "description": " The found array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 9785
        },
        "end": {
          "line": 293,
          "column": 5,
          "index": 9894
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Array<any>"
        },
        {
          "name": "found",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertKeyInMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a key in the given map.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param map {Map} Map, where the keys represent the valid values",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a key in the given map.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "map {Map} Map, where the keys represent the valid values",
            "paramName": "map",
            "description": " Map, where the keys represent the valid values",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 10164
        },
        "end": {
          "line": 304,
          "column": 5,
          "index": 10257
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "map",
          "type": "Map<any, any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertFunction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a function.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 312,
          "column": 4,
          "index": 10444
        },
        "end": {
          "line": 314,
          "column": 5,
          "index": 10527
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a string.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 322,
          "column": 4,
          "index": 10712
        },
        "end": {
          "line": 324,
          "column": 5,
          "index": 10791
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertBoolean": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a boolean.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a boolean.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 332,
          "column": 4,
          "index": 10977
        },
        "end": {
          "line": 334,
          "column": 5,
          "index": 11058
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertNumber": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a number.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 342,
          "column": 4,
          "index": 11243
        },
        "end": {
          "line": 344,
          "column": 5,
          "index": 11322
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertPositiveNumber": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a number >= 0.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 11512
        },
        "end": {
          "line": 354,
          "column": 5,
          "index": 11607
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertInteger": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an integer.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 362,
          "column": 4,
          "index": 11794
        },
        "end": {
          "line": 364,
          "column": 5,
          "index": 11875
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertPositiveInteger": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an integer >= 0.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 372,
          "column": 4,
          "index": 12067
        },
        "end": {
          "line": 374,
          "column": 5,
          "index": 12164
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertInRange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is inside the given range.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param min {Number} lower bound",
          "     * @param max {Number} upper bound",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is inside the given range.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "min {Number} lower bound",
            "paramName": "min",
            "description": " lower bound",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "max {Number} upper bound",
            "paramName": "max",
            "description": " upper bound",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 12441
        },
        "end": {
          "line": 386,
          "column": 5,
          "index": 12542
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "min",
          "type": "number"
        },
        {
          "name": "max",
          "type": "number"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an object.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 394,
          "column": 4,
          "index": 12728
        },
        "end": {
          "line": 396,
          "column": 5,
          "index": 12807
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an array.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 404,
          "column": 4,
          "index": 12992
        },
        "end": {
          "line": 406,
          "column": 5,
          "index": 13069
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a map either created using <code>new Object</code>",
          "     * or by using the object literal notation <code>{ ... }</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a map either created using <code>new Object</code>\n or by using the object literal notation <code>{ ... }</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 415,
          "column": 4,
          "index": 13364
        },
        "end": {
          "line": 417,
          "column": 5,
          "index": 13437
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertRegExp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a regular expression.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a regular expression.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 425,
          "column": 4,
          "index": 13634
        },
        "end": {
          "line": 427,
          "column": 5,
          "index": 13713
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value has the given type using the <code>typeof</code>",
          "     * operator. Because the type is not always what it is supposed to be it is",
          "     * better to use more explicit checks like {@link #assertString} or",
          "     * {@link #assertArray}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param type {String} expected type of the value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value has the given type using the <code>typeof</code>\n operator. Because the type is not always what it is supposed to be it is\n better to use more explicit checks like {@link #assertString} or\n {@link #assertArray}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} expected type of the value",
            "paramName": "type",
            "description": " expected type of the value",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 439,
          "column": 4,
          "index": 14170
        },
        "end": {
          "line": 441,
          "column": 5,
          "index": 14257
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertInstance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of the given class.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param clazz {Class} The value must be an instance of this class",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of the given class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "clazz {Class} The value must be an instance of this class",
            "paramName": "clazz",
            "description": " The value must be an instance of this class",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 450,
          "column": 4,
          "index": 14536
        },
        "end": {
          "line": 452,
          "column": 5,
          "index": 14633
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "clazz",
          "type": "Class"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertInterface": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value implements the given interface.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param iface {Class} The value must implement this interface",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value implements the given interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "iface {Class} The value must implement this interface",
            "paramName": "iface",
            "description": " The value must implement this interface",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 461,
          "column": 4,
          "index": 14905
        },
        "end": {
          "line": 463,
          "column": 5,
          "index": 15004
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "iface",
          "type": "Class"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertCssColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value represents the given CSS color value. This method",
          "     * parses the color strings and compares the RGB values. It is able to",
          "     * parse values supported by {@link qx.util.ColorUtil#stringToRgb}.",
          "     *",
          "     *  @param expected {String} The expected color",
          "     *  @param value {String} The value to check",
          "     *  @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value represents the given CSS color value. This method\n parses the color strings and compares the RGB values. It is able to\n parse values supported by {@link qx.util.ColorUtil#stringToRgb}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {String} The expected color",
            "paramName": "expected",
            "description": " The expected color",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {String} The value to check",
            "paramName": "value",
            "description": " The value to check",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 474,
          "column": 4,
          "index": 15434
        },
        "end": {
          "line": 476,
          "column": 5,
          "index": 15537
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "string"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a DOM element.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 484,
          "column": 4,
          "index": 15727
        },
        "end": {
          "line": 486,
          "column": 5,
          "index": 15808
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertQxObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of {@link qx.core.Object}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.core.Object}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 494,
          "column": 4,
          "index": 16022
        },
        "end": {
          "line": 496,
          "column": 5,
          "index": 16105
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    },
    "assertQxWidget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of {@link qx.ui.core.Widget}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.ui.core.Widget}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 504,
          "column": 4,
          "index": 16322
        },
        "end": {
          "line": 506,
          "column": 5,
          "index": 16405
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": [
        "qx.core.MAssert"
      ],
      "mixin": "qx.core.MAssert"
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 462,
        "column": 2,
        "index": 13233
      },
      "end": {
        "line": 509,
        "column": 3,
        "index": 14623
      }
    }
  },
  "properties": {
    "qxOwner": {
      "location": {
        "start": {
          "line": 35,
          "column": 4,
          "index": 1018
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1134
        }
      },
      "json": {
        "check": "qx.core.Object",
        "nullable": true,
        "apply": "_applyQxOwner"
      },
      "jsdoc": {
        "raw": [
          "* The owning object "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "location": {
        "start": {
          "line": 43,
          "column": 4,
          "index": 1184
        },
        "end": {
          "line": 52,
          "column": 5,
          "index": 1414
        }
      },
      "json": {
        "check": "[[ ObjectMethod Function ]]",
        "nullable": true,
        "apply": "_applyQxObjectId"
      },
      "jsdoc": {
        "raw": [
          "* {String} The ID of the object.  "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      },
      "appearsIn": [
        "qx.core.MObjectId"
      ],
      "mixin": "qx.core.MObjectId"
    }
  }
}