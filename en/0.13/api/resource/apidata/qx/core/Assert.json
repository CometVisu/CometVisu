{
  "version": 0.3,
  "lastModified": 1735383686569,
  "lastModifiedIso": "2024-12-28T11:01:26.569Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/core/Assert.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 30,
      "column": 0,
      "index": 761
    },
    "end": {
      "line": 1001,
      "column": 3,
      "index": 28619
    }
  },
  "className": "qx.core.Assert",
  "jsdoc": {
    "raw": [
      "*",
      " * A collection of assertions.",
      " *",
      " * These methods can be used to assert incoming parameters, return values, ...",
      " * If an assertion fails an {@link AssertionError} is thrown.",
      " *",
      " * Assertions are used in unit tests as well.",
      " *",
      " * @require(qx.lang.Type)",
      " * @ignore(qx.Class.*)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A collection of assertions.\n These methods can be used to assert incoming parameters, return values, â€¦\n If an assertion fails an {@link AssertionError} is thrown.\n Assertions are used in unit tests as well.</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.lang.Type"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "qx.Class.*"
      }
    ]
  },
  "statics": {
    "__logError": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 32,
          "column": 4,
          "index": 818
        },
        "end": {
          "line": 32,
          "column": 20,
          "index": 834
        }
      },
      "appearsIn": []
    },
    "__fail": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the condition evaluates to <code>true</code>. An",
          "     * {@link AssertionError} is thrown if otherwise.",
          "     *",
          "     * @param comment {String} Message to be shown if the assertion fails. This",
          "     *    message is provided by the user.",
          "     * @param msgvarargs {var} any number of parts of a message to show if assertion",
          "     *                         triggers. Each will be converted to a string and all",
          "     *                         parts will be concatenated. E. g. instead of",
          "     *                         \"Got invalid value \" + this.__toString(val) + \"!!!!!\"",
          "     *                         use",
          "     *                         \"Got invalid value \", val, \"!!!!!\"",
          "     *                         (much better performance)",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the condition evaluates to <code>true</code>. An\n {@link AssertionError} is thrown if otherwise.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "comment {String} Message to be shown if the assertion fails. This\n    message is provided by the user.",
            "paramName": "comment",
            "description": " Message to be shown if the assertion fails. This\n    message is provided by the user.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "much better performance"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1604
        },
        "end": {
          "line": 83,
          "column": 5,
          "index": 2654
        }
      },
      "type": "function",
      "params": [
        {
          "name": "comment",
          "type": "string"
        },
        {
          "name": "msgvarargs"
        }
      ],
      "appearsIn": []
    },
    "__toString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert an unknown value to a string to display in error messages",
          "     *",
          "     * @param value {var} any value",
          "     * @return {String} a string representation of the value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert an unknown value to a string to display in error messages</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} any value",
            "paramName": "value",
            "description": " any value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} a string representation of the value",
            "type": "string",
            "description": "a string representation of the value"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2854
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 3380
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "assert": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the condition evaluates to <code>true</code>.",
          "     *",
          "     * @param condition {var} Condition to check for. Must evaluate to",
          "     *    <code>true</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the condition evaluates to <code>true</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "condition {var} Condition to check for. Must evaluate to\n    <code>true</code>.",
            "paramName": "condition",
            "description": " Condition to check for. Must evaluate to\n    <code>true</code>.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3647
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 3758
        }
      },
      "type": "function",
      "params": [
        {
          "name": "condition",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "fail": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Raise an {@link AssertionError}.",
          "     *",
          "     * @param msg {String} Message to be shown if the assertion fails.",
          "     * @param compact {Boolean?false} Show less verbose message. Default: false.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Raise an {@link AssertionError}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msg {String} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "compact {Boolean?false} Show less verbose message. Default: false.",
            "paramName": "compact",
            "description": " Show less verbose message. Default: false.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3980
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 4104
        }
      },
      "type": "function",
      "params": [
        {
          "name": "msg",
          "type": "string"
        },
        {
          "name": "compact",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "appearsIn": []
    },
    "assertTrue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>true</code> (Identity check).",
          "     *",
          "     * @param value {Boolean} Condition to check for. Must be identical to",
          "     *    <code>true</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>true</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>true</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>true</code>.",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 4378
        },
        "end": {
          "line": 142,
          "column": 5,
          "index": 4504
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertFalse": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>false</code> (Identity check).",
          "     *",
          "     * @param value {Boolean} Condition to check for. Must be identical to",
          "     *    <code>false</code>.",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>false</code> (Identity check).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} Condition to check for. Must be identical to\n    <code>false</code>.",
            "paramName": "value",
            "description": " Condition to check for. Must be identical to\n    <code>false</code>.",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4780
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 4909
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are equal. (Uses the equality operator",
          "     * <code>==</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are equal. (Uses the equality operator\n <code>==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 5189
        },
        "end": {
          "line": 174,
          "column": 5,
          "index": 5414
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are not equal. (Uses the not equality operator",
          "     * <code>!=</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not equal. (Uses the not equality operator\n <code>!=</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 5702
        },
        "end": {
          "line": 194,
          "column": 5,
          "index": 5941
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertEqualsFloat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both float values are equal. This might be needed because",
          "     * of the natural floating point inaccuracy of computers.",
          "     *",
          "     * @param expected {Float} Reference value",
          "     * @param found {Float} Found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are equal. This might be needed because\n of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 6269
        },
        "end": {
          "line": 217,
          "column": 5,
          "index": 6595
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Float"
        },
        {
          "name": "found",
          "type": "Float"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotEqualsFloat": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both float values are not equal. This might be needed",
          "     * because of the natural floating point inaccuracy of computers.",
          "     *",
          "     * @param expected {Float} Reference value",
          "     * @param found {Float} Found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both float values are not equal. This might be needed\n because of the natural floating point inaccuracy of computers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Float} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "found {Float} Found value",
            "paramName": "found",
            "description": " Found value",
            "type": "Float"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 227,
          "column": 4,
          "index": 6927
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7261
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Float"
        },
        {
          "name": "found",
          "type": "Float"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertIdentical": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are identical. (Uses the identity operator",
          "     * <code>===</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are identical. (Uses the identity operator\n <code>===</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 250,
          "column": 4,
          "index": 7546
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 7787
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotIdentical": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both values are not identical. (Uses the not identity operator",
          "     * <code>!==</code>.)",
          "     *",
          "     * @param expected {var} Reference value",
          "     * @param found {var} found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both values are not identical. (Uses the not identity operator\n <code>!==</code>.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} Reference value",
            "paramName": "expected",
            "description": " Reference value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} found value",
            "paramName": "found",
            "description": " found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 270,
          "column": 4,
          "index": 8080
        },
        "end": {
          "line": 280,
          "column": 5,
          "index": 8327
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotUndefined": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is not <code>undefined</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 288,
          "column": 4,
          "index": 8530
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 8718
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertUndefined": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>undefined</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>undefined</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 8917
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 9120
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotNull": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is not <code>null</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is not <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 318,
          "column": 4,
          "index": 9318
        },
        "end": {
          "line": 321,
          "column": 5,
          "index": 9456
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNull": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is <code>null</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is <code>null</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 329,
          "column": 4,
          "index": 9650
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 9838
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertJsonEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the first two arguments are equal, when serialized into",
          "     * JSON.",
          "     *",
          "     * @param expected {var} The the expected value",
          "     * @param found {var} The found value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the first two arguments are equal, when serialized into\n JSON.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {var} The the expected value",
            "paramName": "expected",
            "description": " The the expected value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "found {var} The found value",
            "paramName": "found",
            "description": " The found value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 347,
          "column": 4,
          "index": 10122
        },
        "end": {
          "line": 353,
          "column": 5,
          "index": 10295
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "var"
        },
        {
          "name": "found",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertMatch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the given string matches the regular expression",
          "     *",
          "     * @param str {String} String, which should match the regular expression",
          "     * @param re {String|RegExp} Regular expression to match",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the given string matches the regular expression</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String, which should match the regular expression",
            "paramName": "str",
            "description": " String, which should match the regular expression",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "re {String|RegExp} Regular expression to match",
            "paramName": "re",
            "description": " Regular expression to match",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 362,
          "column": 4,
          "index": 10602
        },
        "end": {
          "line": 378,
          "column": 5,
          "index": 11047
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        },
        {
          "name": "re",
          "type": [
            "String",
            "RegExp"
          ]
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertArgumentsCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the number of arguments is within the given range",
          "     *",
          "     * @param args {arguments} The <code>arguments<code> variable of a function",
          "     * @param minCount {Integer} Minimal number of arguments",
          "     * @param maxCount {Integer} Maximum number of arguments",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the number of arguments is within the given range</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} The <code>arguments<code> variable of a function",
            "paramName": "args",
            "description": " The <code>arguments<code> variable of a function",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "minCount {Integer} Minimal number of arguments",
            "paramName": "minCount",
            "description": " Minimal number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxCount {Integer} Maximum number of arguments",
            "paramName": "maxCount",
            "description": " Maximum number of arguments",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 388,
          "column": 4,
          "index": 11420
        },
        "end": {
          "line": 401,
          "column": 5,
          "index": 11821
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "arguments"
        },
        {
          "name": "minCount",
          "type": "Integer"
        },
        {
          "name": "maxCount",
          "type": "Integer"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertEventFired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that an event is fired.",
          "     *",
          "     * @param obj {Object} The object on which the event should be fired.",
          "     * @param event {String} The event which should be fired.",
          "     * @param invokeFunc {Function} The function which will be invoked and which",
          "     *   fires the event.",
          "     * @param listenerFunc {Function?null} The function which will be invoked in the",
          "     *   listener. The function receives one parameter which is the event.",
          "     * @param msg {String?\"\"} Message to be shows if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   fires the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   fires the event.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "listenerFunc {Function?null} The function which will be invoked in the\n   listener. The function receives one parameter which is the event.",
            "paramName": "listenerFunc",
            "description": " The function which will be invoked in the\n   listener. The function receives one parameter which is the event.",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?\"\"} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "defaultValue": "\"\"",
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 414,
          "column": 4,
          "index": 12366
        },
        "end": {
          "line": 439,
          "column": 5,
          "index": 12976
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "Record<any, any>"
        },
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "invokeFunc",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "listenerFunc",
          "type": "Function",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true,
          "defaultValue": "\"\""
        }
      ],
      "appearsIn": []
    },
    "assertEventNotFired": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that an event is not fired.",
          "     *",
          "     * @param obj {Object} The object on which the event should be fired.",
          "     * @param event {String} The event which should be fired.",
          "     * @param invokeFunc {Function} The function which will be invoked and which",
          "     *   should not fire the event.",
          "     * @param msg {String?} Message to be shows if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that an event is not fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} The object on which the event should be fired.",
            "paramName": "obj",
            "description": " The object on which the event should be fired.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "event {String} The event which should be fired.",
            "paramName": "event",
            "description": " The event which should be fired.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "invokeFunc {Function} The function which will be invoked and which\n   should not fire the event.",
            "paramName": "invokeFunc",
            "description": " The function which will be invoked and which\n   should not fire the event.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shows if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shows if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 450,
          "column": 4,
          "index": 13373
        },
        "end": {
          "line": 462,
          "column": 5,
          "index": 13730
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "Record<any, any>"
        },
        {
          "name": "event",
          "type": "string"
        },
        {
          "name": "invokeFunc",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertException": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Asserts that the callback raises a matching exception.",
          "     *",
          "     * @param callback {Function} function to check",
          "     * @param exception {Error?Error} Expected constructor of the exception.",
          "     *   The assertion fails if the raised exception is not an instance of the",
          "     *   parameter.",
          "     * @param re {String|RegExp} The assertion fails if the error message does",
          "     *   not match this parameter",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Asserts that the callback raises a matching exception.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} function to check",
            "paramName": "callback",
            "description": " function to check",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "exception {Error?Error} Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "paramName": "exception",
            "description": " Expected constructor of the exception.\n   The assertion fails if the raised exception is not an instance of the\n   parameter.",
            "optional": true,
            "defaultValue": "Error",
            "type": "Error"
          },
          {
            "name": "@param",
            "body": "re {String|RegExp} The assertion fails if the error message does\n   not match this parameter",
            "paramName": "re",
            "description": " The assertion fails if the error message does\n   not match this parameter",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 475,
          "column": 4,
          "index": 14235
        },
        "end": {
          "line": 504,
          "column": 5,
          "index": 14915
        }
      },
      "type": "function",
      "params": [
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "exception",
          "type": "Error",
          "optional": true,
          "defaultValue": "Error"
        },
        {
          "name": "re",
          "type": [
            "String",
            "RegExp"
          ]
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an item in the given array.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param array {Array} List of valid values",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an item in the given array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of valid values",
            "paramName": "array",
            "description": " List of valid values",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 513,
          "column": 4,
          "index": 15167
        },
        "end": {
          "line": 523,
          "column": 5,
          "index": 15436
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "array",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNotInArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is NOT an item in the given array",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param array {Array} List of values",
          "     * @param msg {String?} Message to be shown if the assertion fails",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is NOT an item in the given array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "array {Array} List of values",
            "paramName": "array",
            "description": " List of values",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 532,
          "column": 4,
          "index": 15684
        },
        "end": {
          "line": 541,
          "column": 5,
          "index": 15977
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "array",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertArrayEquals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that both array have identical array items.",
          "     *",
          "     * @param expected {Array} The expected array",
          "     * @param found {Array} The found array",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that both array have identical array items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {Array} The expected array",
            "paramName": "expected",
            "description": " The expected array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "found {Array} The found array",
            "paramName": "found",
            "description": " The found array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 550,
          "column": 4,
          "index": 16231
        },
        "end": {
          "line": 571,
          "column": 5,
          "index": 16735
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "Array<any>"
        },
        {
          "name": "found",
          "type": "Array<any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertKeyInMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a key in the given map.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param map {Map} Map, where the keys represent the valid values",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a key in the given map.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "map {Map} Map, where the keys represent the valid values",
            "paramName": "map",
            "description": " Map, where the keys represent the valid values",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 580,
          "column": 4,
          "index": 17005
        },
        "end": {
          "line": 590,
          "column": 5,
          "index": 17249
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "map",
          "type": "Map<any, any>"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertFunction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a function.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 598,
          "column": 4,
          "index": 17436
        },
        "end": {
          "line": 606,
          "column": 5,
          "index": 17655
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertFunctionOrAsyncFunction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a function or an async function.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a function or an async function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 614,
          "column": 4,
          "index": 17863
        },
        "end": {
          "line": 622,
          "column": 5,
          "index": 18137
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a string.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 630,
          "column": 4,
          "index": 18322
        },
        "end": {
          "line": 638,
          "column": 5,
          "index": 18530
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertBoolean": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a boolean.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a boolean.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 646,
          "column": 4,
          "index": 18716
        },
        "end": {
          "line": 654,
          "column": 5,
          "index": 18927
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertNumber": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a number.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 662,
          "column": 4,
          "index": 19112
        },
        "end": {
          "line": 670,
          "column": 5,
          "index": 19341
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertPositiveNumber": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a number >= 0.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a number &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 678,
          "column": 4,
          "index": 19531
        },
        "end": {
          "line": 686,
          "column": 5,
          "index": 19787
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInteger": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an integer.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 694,
          "column": 4,
          "index": 19974
        },
        "end": {
          "line": 702,
          "column": 5,
          "index": 20225
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertPositiveInteger": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an integer >= 0.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an integer &gt;= 0.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 710,
          "column": 4,
          "index": 20417
        },
        "end": {
          "line": 724,
          "column": 5,
          "index": 20759
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInRange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is inside the given range.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param min {Number} lower bound",
          "     * @param max {Number} upper bound",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is inside the given range.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "min {Number} lower bound",
            "paramName": "min",
            "description": " lower bound",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "max {Number} upper bound",
            "paramName": "max",
            "description": " upper bound",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 734,
          "column": 4,
          "index": 21036
        },
        "end": {
          "line": 743,
          "column": 5,
          "index": 21313
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "min",
          "type": "number"
        },
        {
          "name": "max",
          "type": "number"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an object.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 751,
          "column": 4,
          "index": 21499
        },
        "end": {
          "line": 762,
          "column": 5,
          "index": 21810
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an array.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 770,
          "column": 4,
          "index": 21995
        },
        "end": {
          "line": 778,
          "column": 5,
          "index": 22201
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertMap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a map either created using <code>new Object</code>",
          "     * or by using the object literal notation <code>{ ... }</code>.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a map either created using <code>new Object</code>\n or by using the object literal notation <code>{ ... }</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 787,
          "column": 4,
          "index": 22496
        },
        "end": {
          "line": 795,
          "column": 5,
          "index": 22698
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertRegExp": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a regular expression.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a regular expression.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 803,
          "column": 4,
          "index": 22895
        },
        "end": {
          "line": 811,
          "column": 5,
          "index": 23115
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value has the given type using the <code>typeof</code>",
          "     * operator. Because the type is not always what it is supposed to be it is",
          "     * better to use more explicit checks like {@link #assertString} or",
          "     * {@link #assertArray}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param type {String} expected type of the value",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value has the given type using the <code>typeof</code>\n operator. Because the type is not always what it is supposed to be it is\n better to use more explicit checks like {@link #assertString} or\n {@link #assertArray}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} expected type of the value",
            "paramName": "type",
            "description": " expected type of the value",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 823,
          "column": 4,
          "index": 23572
        },
        "end": {
          "line": 835,
          "column": 5,
          "index": 23867
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInstance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of the given class.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param clazz {Class} The value must be an instance of this class",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of the given class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "clazz {Class} The value must be an instance of this class",
            "paramName": "clazz",
            "description": " The value must be an instance of this class",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 844,
          "column": 4,
          "index": 24146
        },
        "end": {
          "line": 856,
          "column": 5,
          "index": 24451
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "clazz",
          "type": "Class"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertInterface": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value implements the given interface.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param iface {Class} The value must implement this interface",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value implements the given interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "iface {Class} The value must implement this interface",
            "paramName": "iface",
            "description": " The value must implement this interface",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 865,
          "column": 4,
          "index": 24723
        },
        "end": {
          "line": 875,
          "column": 5,
          "index": 25008
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "iface",
          "type": "Class"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertCssColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value represents the given CSS color value. This method",
          "     * parses the color strings and compares the RGB values. It is able to",
          "     * parse values supported by {@link qx.util.ColorUtil#stringToRgb}.",
          "     *",
          "     *  @param expected {String} The expected color",
          "     *  @param value {String} The value to check",
          "     *  @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value represents the given CSS color value. This method\n parses the color strings and compares the RGB values. It is able to\n parse values supported by {@link qx.util.ColorUtil#stringToRgb}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "expected {String} The expected color",
            "paramName": "expected",
            "description": " The expected color",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {String} The value to check",
            "paramName": "value",
            "description": " The value to check",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 886,
          "column": 4,
          "index": 25438
        },
        "end": {
          "line": 927,
          "column": 5,
          "index": 26632
        }
      },
      "type": "function",
      "params": [
        {
          "name": "expected",
          "type": "string"
        },
        {
          "name": "value",
          "type": "string"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is a DOM element.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is a DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 935,
          "column": 4,
          "index": 26822
        },
        "end": {
          "line": 944,
          "column": 5,
          "index": 27079
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertQxObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of {@link qx.core.Object}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.core.Object}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 952,
          "column": 4,
          "index": 27293
        },
        "end": {
          "line": 960,
          "column": 5,
          "index": 27527
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "assertQxWidget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Assert that the value is an instance of {@link qx.ui.core.Widget}.",
          "     *",
          "     * @param value {var} Value to check",
          "     * @param msg {String?} Message to be shown if the assertion fails.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Assert that the value is an instance of {@link qx.ui.core.Widget}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check",
            "paramName": "value",
            "description": " Value to check",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "msg {String?} Message to be shown if the assertion fails.",
            "paramName": "msg",
            "description": " Message to be shown if the assertion fails.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 968,
          "column": 4,
          "index": 27744
        },
        "end": {
          "line": 976,
          "column": 5,
          "index": 27981
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "msg",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "__isQxInstance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for checking the instance of a qooxdoo object using the",
          "     * classname.",
          "     *",
          "     * @param object {var} The object to check.",
          "     * @param classname {String} The classname of the class as string.",
          "     * @return {Boolean} <code>true</code> if the object is an instance of the",
          "     * class",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for checking the instance of a qooxdoo object using the\n classname.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {var} The object to check.",
            "paramName": "object",
            "description": " The object to check.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "classname {String} The classname of the class as string.",
            "paramName": "classname",
            "description": " The classname of the class as string.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the object is an instance of the\n class",
            "type": "boolean",
            "description": "<code>true</code> if the object is an instance of the\n class"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 987,
          "column": 4,
          "index": 28319
        },
        "end": {
          "line": 999,
          "column": 5,
          "index": 28611
        }
      },
      "type": "function",
      "params": [
        {
          "name": "object",
          "type": "var"
        },
        {
          "name": "classname",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}