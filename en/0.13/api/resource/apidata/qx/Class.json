{
  "className": "qx.Class",
  "packageName": "qx",
  "name": "Class",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 77,
        "column": 0,
        "index": 2643
      },
      "end": {
        "line": 1867,
        "column": 3,
        "index": 57469
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This class is one of the most important parts of qooxdoo's\n object-oriented features.\n Its {@link #define} method is used to create qooxdoo classes.\n Each instance of a class defined by {@link #define} has\n the following keys attached to the constructor and the prototype:\n </p>\n<table>\n <tr><th><code>classname</code></th><td>The fully-qualified name of the class (e.g. <code>\"qx.ui.core.Widget\"</code>).</td></tr>\n <tr><th><code>basename</code></th><td>The namespace part of the class name (e.g. <code>\"qx.ui.core\"</code>).</td></tr>\n <tr><th><code>constructor</code></th><td>A reference to the constructor of the class.</td></tr>\n <tr><th><code>superclass</code></th><td>A reference to the constructor of the super class.</td></tr>\n </table>\n<p>Each method may access static members of the same class by using\n <code>this.self(arguments)</code> ({@link qx.core.Object#self}):\n </p>\n<pre class='javascript'>\n statics : { FOO : \"bar\" },\n members: {\n   baz: function(x) {\n     this.self(arguments).FOO;\n     ...\n   }\n }\n </pre>\n<p>Each overriding method may call the overridden method by using\n <code>this.base(arguments [, ...])</code> ({@link qx.core.Object#base}). This is also true for calling\n the constructor of the superclass.\n </p>\n<pre class='javascript'>\n members: {\n   foo: function(x) {\n     this.base(arguments, x);\n     ...\n   }\n }\n </pre>\n<p>By using <code>qx.Class</code> within an app, the native JS data types are\n conveniently polyfilled according to {@link qx.lang.normalize}.\n Annotations can be added to classes, constructors, destructors, and methods, properties, and statics -\n see <code>qx.Annotation</code> for examples and means access annotations at runtime.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.Interface"
        },
        {
          "name": "@require",
          "body": "qx.Mixin"
        },
        {
          "name": "@require",
          "body": "qx.lang.normalize.Array"
        },
        {
          "name": "@require",
          "body": "qx.lang.normalize.Date"
        },
        {
          "name": "@require",
          "body": "qx.lang.normalize.Error"
        },
        {
          "name": "@require",
          "body": "qx.lang.normalize.Function"
        },
        {
          "name": "@require",
          "body": "qx.lang.normalize.String"
        },
        {
          "name": "@require",
          "body": "qx.lang.normalize.Object"
        },
        {
          "name": "@require",
          "body": "qx.lang.normalize.Number"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__Property": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2809
        },
        "end": {
          "line": 85,
          "column": 12,
          "index": 2901
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A static reference to the property implementation in the case it\n should be included.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "define": {
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 6369
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 6554
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Define a new class using the qooxdoo class system. This sets up the\n namespace for the class and generates the class from the definition map.\n Example:\n </p>\n<pre class='javascript'>\n qx.Class.define(\"name\",\n {\n   extend : Object,\n   implement : [Interfaces],\n   include : [Mixins],\n   statics:\n   {\n     CONSTANT : 3.141,\n     publicMethod: function() {},\n     _protectedMethod: function() {},\n     __privateMethod: function() {}\n   },\n   properties:\n   {\n     \"tabIndex\": { check: \"Number\", init : -1 }\n   },\n   members:\n   {\n     publicField: \"foo\",\n     publicMethod: function() {},\n     _protectedField: \"bar\",\n     _protectedMethod: function() {},\n     __privateField: \"baz\",\n     __privateMethod: function() {}\n   }\n });\n </pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String?null} Name of the class. If <code>null</code>, the class\n   will not be added to any namespace which could be handy for testing.",
            "paramName": "name",
            "description": " Name of the class. If <code>null</code>, the class\n   will not be added to any namespace which could be handy for testing.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {Map ? null} Class definition structure. The configuration map has the following keys:\n     <table>\n       <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n       <tr><th>type</th><td>String</td><td>\n           Type of the class. Valid types are \"abstract\", \"static\" and \"singleton\".\n           If unset it defaults to a regular non-static class.\n       </td></tr>\n       <tr><th>extend</th><td>Class</td><td>The super class the current class inherits from.</td></tr>\n       <tr><th>implement</th><td>Interface | Interface[]</td><td>Single interface or array of interfaces the class implements.</td></tr>\n       <tr><th>include</th><td>Mixin | Mixin[]</td><td>Single mixin or array of mixins, which will be merged into the class.</td></tr>\n       <tr><th>construct</th><td>Function</td><td>The constructor of the class.</td></tr>\n       <tr><th>statics</th><td>Map</td><td>Map of static members of the class.</td></tr>\n       <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n           {@link qx.core.Property}.</td></tr>\n       <tr><th>members</th><td>Map</td><td>Map of instance members of the class.</td></tr>\n       <tr><th>environment</th><td>Map</td><td>Map of environment settings for this class. For a description of the format of a setting see\n           {@link qx.core.Environment}.</td></tr>\n       <tr><th>events</th><td>Map</td><td>\n           Map of events the class fires. The keys are the names of the events and the values are the\n           corresponding event type class names.\n       </td></tr>\n       <tr><th>defer</th><td>Function</td><td>Function that is called at the end of processing the class declaration. It allows access to the declared statics, members and properties.</td></tr>\n       <tr><th>destruct</th><td>Function</td><td>The destructor of the class.</td></tr>\n     </table>",
            "paramName": "config",
            "description": " Class definition structure. The configuration map has the following keys:\n     <table>\n       <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n       <tr><th>type</th><td>String</td><td>\n           Type of the class. Valid types are \"abstract\", \"static\" and \"singleton\".\n           If unset it defaults to a regular non-static class.\n       </td></tr>\n       <tr><th>extend</th><td>Class</td><td>The super class the current class inherits from.</td></tr>\n       <tr><th>implement</th><td>Interface | Interface[]</td><td>Single interface or array of interfaces the class implements.</td></tr>\n       <tr><th>include</th><td>Mixin | Mixin[]</td><td>Single mixin or array of mixins, which will be merged into the class.</td></tr>\n       <tr><th>construct</th><td>Function</td><td>The constructor of the class.</td></tr>\n       <tr><th>statics</th><td>Map</td><td>Map of static members of the class.</td></tr>\n       <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n           {@link qx.core.Property}.</td></tr>\n       <tr><th>members</th><td>Map</td><td>Map of instance members of the class.</td></tr>\n       <tr><th>environment</th><td>Map</td><td>Map of environment settings for this class. For a description of the format of a setting see\n           {@link qx.core.Environment}.</td></tr>\n       <tr><th>events</th><td>Map</td><td>\n           Map of events the class fires. The keys are the names of the events and the values are the\n           corresponding event type class names.\n       </td></tr>\n       <tr><th>defer</th><td>Function</td><td>Function that is called at the end of processing the class declaration. It allows access to the declared statics, members and properties.</td></tr>\n       <tr><th>destruct</th><td>Function</td><td>The destructor of the class.</td></tr>\n     </table>",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class} The defined class",
            "type": "qx.Class",
            "description": " The defined class"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__defineImpl": {
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 6834
        },
        "end": {
          "line": 306,
          "column": 5,
          "index": 10455
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation behind <code>define</code> - this exists just for the simplicity of wrapping an exception\n handler around the code</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} name @see <code>define()</code>",
            "paramName": "name",
            "description": "@see <code>define()</code>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "{*} config @see <code>define()</code>",
            "paramName": "config",
            "description": "@see <code>define()</code>",
            "type": "*"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "@see <code>define()</code>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "undefine": {
      "location": {
        "start": {
          "line": 313,
          "column": 4,
          "index": 10594
        },
        "end": {
          "line": 338,
          "column": 5,
          "index": 11569
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a class from qooxdoo defined by {@link #define}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the class",
            "paramName": "name",
            "description": " Name of the class",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isDefined": {
      "location": {
        "start": {
          "line": 347,
          "column": 4,
          "index": 11764
        },
        "end": {
          "line": 347,
          "column": 44,
          "index": 11804
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given class exists</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} class name to check",
            "paramName": "name",
            "description": " class name to check",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if class exists",
            "type": "Boolean",
            "description": " true if class exists"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getTotalNumber": {
      "location": {
        "start": {
          "line": 354,
          "column": 4,
          "index": 11931
        },
        "end": {
          "line": 356,
          "column": 5,
          "index": 12015
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determine the total number of classes</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the total number of classes",
            "type": "Number",
            "description": " the total number of classes"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getByName": {
      "location": {
        "start": {
          "line": 365,
          "column": 4,
          "index": 12193
        },
        "end": {
          "line": 365,
          "column": 37,
          "index": 12226
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Find a class by its name</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} class name to resolve",
            "paramName": "name",
            "description": " class name to resolve",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class} the class",
            "type": "qx.Class",
            "description": " the class"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "include": {
      "location": {
        "start": {
          "line": 375,
          "column": 4,
          "index": 12636
        },
        "end": {
          "line": 389,
          "column": 5,
          "index": 13008
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Include all features of the given mixin into the class. The mixin must\n not include any methods or properties that are already available in the\n class. This would only be possible using the {@link #patch} method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} An existing class which should be augmented by including a mixin.",
            "paramName": "clazz",
            "description": " An existing class which should be augmented by including a mixin.",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "mixin {Mixin} The mixin to be included.",
            "paramName": "mixin",
            "description": " The mixin to be included.",
            "type": "qx.Mixin"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "patch": {
      "location": {
        "start": {
          "line": 405,
          "column": 4,
          "index": 13694
        },
        "end": {
          "line": 420,
          "column": 5,
          "index": 14106
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Include all features of the given mixin into the class. The mixin may\n include features, which are already defined in the target class. Existing\n features of equal name will be overwritten.\n Please keep in mind that this functionality is not intended for regular\n use, but as a formalized way (and a last resort) in order to patch\n existing classes.\n <b>WARNING</b>: You may break working classes and features.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} An existing class which should be modified by including a mixin.",
            "paramName": "clazz",
            "description": " An existing class which should be modified by including a mixin.",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "mixin {Mixin} The mixin to be included.",
            "paramName": "mixin",
            "description": " The mixin to be included.",
            "type": "qx.Mixin"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class} the new class definition",
            "type": "qx.Class",
            "description": " the new class definition"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isClass": {
      "location": {
        "start": {
          "line": 428,
          "column": 4,
          "index": 14343
        },
        "end": {
          "line": 430,
          "column": 5,
          "index": 14434
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the object is a Class (and not an instance of a class)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object?} the object to inspect",
            "paramName": "obj",
            "description": " the object to inspect",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if it is a class, false if it is anything else",
            "type": "Boolean",
            "description": " true if it is a class, false if it is anything else"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isSubClassOf": {
      "location": {
        "start": {
          "line": 440,
          "column": 4,
          "index": 14748
        },
        "end": {
          "line": 454,
          "column": 5,
          "index": 15002
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a class is a direct or indirect sub class of another class,\n or both classes coincide.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} the class to check.",
            "paramName": "clazz",
            "description": " the class to check.",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "superClass {Class} the potential super class",
            "paramName": "superClass",
            "description": " the potential super class",
            "type": "qx.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether clazz is a sub class of superClass.",
            "type": "Boolean",
            "description": " whether clazz is a sub class of superClass."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPropertyDefinition": {
      "location": {
        "start": {
          "line": 465,
          "column": 4,
          "index": 15349
        },
        "end": {
          "line": 465,
          "column": 63,
          "index": 15408
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the definition of the given property. Returns null\n if the property does not exist.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz, name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the class to check for",
            "paramName": "name",
            "description": " name of the class to check for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} whether the object support the given event.",
            "type": "Map|null",
            "description": " whether the object support the given event."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getProperties": {
      "location": {
        "start": {
          "line": 473,
          "column": 4,
          "index": 15603
        },
        "end": {
          "line": 485,
          "column": 5,
          "index": 15848
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a list of all properties supported by the given class</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Class to query",
            "paramName": "clazz",
            "description": " Class to query",
            "type": "qx.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} List of all property names",
            "type": "String[]",
            "description": " List of all property names"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getByProperty": {
      "location": {
        "start": {
          "line": 496,
          "column": 4,
          "index": 16253
        },
        "end": {
          "line": 506,
          "column": 5,
          "index": 16468
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the class or one of its superclasses which contains the\n declaration for the given property in its class definition. Returns null\n if the property is not specified anywhere.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to look for the property",
            "paramName": "clazz",
            "description": " class to look for the property",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class|null} The class which includes the property",
            "type": "Class|null",
            "description": " The class which includes the property"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasProperty": {
      "location": {
        "start": {
          "line": 516,
          "column": 4,
          "index": 16761
        },
        "end": {
          "line": 516,
          "column": 43,
          "index": 16800
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a class has the given property</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz, name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property to check for",
            "paramName": "name",
            "description": " name of the property to check for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class includes the given property.",
            "type": "Boolean",
            "description": " whether the class includes the given property."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getEventType": {
      "location": {
        "start": {
          "line": 527,
          "column": 4,
          "index": 17118
        },
        "end": {
          "line": 527,
          "column": 45,
          "index": 17159
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the event type of the given event. Returns null if\n the event does not exist.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz, name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the event",
            "paramName": "name",
            "description": " name of the event",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} Event type of the given event.",
            "type": "String|null",
            "description": " Event type of the given event."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "supportsEvent": {
      "location": {
        "start": {
          "line": 537,
          "column": 4,
          "index": 17453
        },
        "end": {
          "line": 537,
          "column": 47,
          "index": 17496
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a class supports the given event type</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz, name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the event to check for",
            "paramName": "name",
            "description": " name of the event to check for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class supports the given event.",
            "type": "Boolean",
            "description": " whether the class supports the given event."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "hasOwnMixin": {
      "location": {
        "start": {
          "line": 546,
          "column": 4,
          "index": 17742
        },
        "end": {
          "line": 548,
          "column": 5,
          "index": 17848
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a class directly includes a mixin.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "mixin {Mixin} the mixin to check for",
            "paramName": "mixin",
            "description": " the mixin to check for",
            "type": "qx.Mixin"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class includes the mixin directly.",
            "type": "Boolean",
            "description": " whether the class includes the mixin directly."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getByMixin": {
      "location": {
        "start": {
          "line": 559,
          "column": 4,
          "index": 18229
        },
        "end": {
          "line": 577,
          "column": 5,
          "index": 18595
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the class or one of its superclasses which contains the\n declaration for the given mixin. Returns null if the mixin is not\n specified anywhere.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to look for the mixin",
            "paramName": "clazz",
            "description": " class to look for the mixin",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "mixin {Mixin} mixin to look for",
            "paramName": "mixin",
            "description": " mixin to look for",
            "type": "qx.Mixin"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class|null} The class which directly includes the given mixin",
            "type": "Class|null",
            "description": " The class which directly includes the given mixin"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getMixins": {
      "location": {
        "start": {
          "line": 586,
          "column": 4,
          "index": 18840
        },
        "end": {
          "line": 586,
          "column": 39,
          "index": 18875
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a list of all mixins available in a given class.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class which should be inspected",
            "paramName": "clazz",
            "description": " class which should be inspected",
            "type": "qx.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Mixin[]} array of mixins this class uses",
            "type": "Mixin[]",
            "description": " array of mixins this class uses"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "hasMixin": {
      "location": {
        "start": {
          "line": 595,
          "column": 4,
          "index": 19142
        },
        "end": {
          "line": 597,
          "column": 5,
          "index": 19218
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a given class or any of its superclasses includes a given mixin.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "mixin {Mixin} the mixin to check for",
            "paramName": "mixin",
            "description": " the mixin to check for",
            "type": "qx.Mixin"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class includes the mixin.",
            "type": "Boolean",
            "description": " whether the class includes the mixin."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasOwnInterface": {
      "location": {
        "start": {
          "line": 610,
          "column": 4,
          "index": 19668
        },
        "end": {
          "line": 612,
          "column": 5,
          "index": 19782
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a given class directly includes an interface.\n This function will only return \"true\" if the interface was defined\n in the class declaration ({@link qx.Class#define}) using the \"implement\"\n key.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class or instance to check",
            "paramName": "clazz",
            "description": " class or instance to check",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "iface {Interface} the interface to check for",
            "paramName": "iface",
            "description": " the interface to check for",
            "type": "qx.Interface"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class includes the mixin directly.",
            "type": "Boolean",
            "description": " whether the class includes the mixin directly."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getByInterface": {
      "location": {
        "start": {
          "line": 624,
          "column": 4,
          "index": 20230
        },
        "end": {
          "line": 624,
          "column": 49,
          "index": 20275
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the class or one of its super classes which contains the\n declaration of the given interface. Returns null if the interface is not\n specified anywhere.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz, iface)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to look for the interface",
            "paramName": "clazz",
            "description": " class to look for the interface",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "iface {Interface} interface to look for",
            "paramName": "iface",
            "description": " interface to look for",
            "type": "qx.Interface"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class|null} the class which directly implements the given interface",
            "type": "Class|null",
            "description": " the class which directly implements the given interface"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getInterfaces": {
      "location": {
        "start": {
          "line": 632,
          "column": 4,
          "index": 20508
        },
        "end": {
          "line": 644,
          "column": 5,
          "index": 20744
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a list of all interfaces a given class has to implement.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class which should be inspected",
            "paramName": "clazz",
            "description": " class which should be inspected",
            "type": "qx.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Interface[]} array of interfaces this class implements",
            "type": "Interface[]",
            "description": " array of interfaces this class implements"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasInterface": {
      "location": {
        "start": {
          "line": 659,
          "column": 4,
          "index": 21285
        },
        "end": {
          "line": 659,
          "column": 45,
          "index": 21326
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a given class or any of its super classes includes a given interface.\n This function will return \"true\" if the interface was defined\n in the class declaration ({@link qx.Class#define}) of the class\n or any of its super classes using the \"implement\"\n key.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz, iface)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "iface {Interface} the interface to check for",
            "paramName": "iface",
            "description": " the interface to check for",
            "type": "qx.Interface"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class includes the interface.",
            "type": "Boolean",
            "description": " whether the class includes the interface."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "implementsInterface": {
      "location": {
        "start": {
          "line": 672,
          "column": 4,
          "index": 21773
        },
        "end": {
          "line": 688,
          "column": 5,
          "index": 22114
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a given class complies to an interface.\n Checks whether all methods defined in the interface are\n implemented. The class does not need to implement\n the interface explicitly in the <code>extend</code> key.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {Object} class to check",
            "paramName": "obj",
            "description": " class to check",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "iface {Interface} the interface to check for",
            "paramName": "iface",
            "description": " the interface to check for",
            "type": "qx.Interface"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class conforms to the interface.",
            "type": "Boolean",
            "description": " whether the class conforms to the interface."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getInstance": {
      "location": {
        "start": {
          "line": 696,
          "column": 4,
          "index": 22250
        },
        "end": {
          "line": 713,
          "column": 5,
          "index": 22845
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to handle singletons</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The singleton instance",
            "type": "Object",
            "description": " The singleton instance"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSubclasses": {
      "location": {
        "start": {
          "line": 722,
          "column": 4,
          "index": 23112
        },
        "end": {
          "line": 737,
          "column": 5,
          "index": 23463
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Retreive all subclasses of a given class</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} the class which should be inspected",
            "paramName": "clazz",
            "description": " the class which should be inspected",
            "type": "qx.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} class name hash holding the references to the subclasses or null if the class does not exist.",
            "type": "Object",
            "description": " class name hash holding the references to the subclasses or null if the class does not exist."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "genericToString": {
      "location": {
        "start": {
          "line": 752,
          "column": 4,
          "index": 23857
        },
        "end": {
          "line": 754,
          "column": 5,
          "index": 23929
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method will be attached to all classes to return\n a nice identifier for them.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The class identifier",
            "type": "String",
            "description": " The class identifier"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$$registry": {
      "location": {
        "start": {
          "line": 757,
          "column": 4,
          "index": 23974
        },
        "end": {
          "line": 757,
          "column": 39,
          "index": 24009
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stores all defined classes</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__allowedKeys": {
      "location": {
        "start": {
          "line": 760,
          "column": 4,
          "index": 24083
        },
        "end": {
          "line": 780,
          "column": 6,
          "index": 24730
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} allowed keys in non-static class definition"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__staticAllowedKeys": {
      "location": {
        "start": {
          "line": 783,
          "column": 4,
          "index": 24800
        },
        "end": {
          "line": 793,
          "column": 6,
          "index": 25079
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} allowed keys in static class definition"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__validateConfig": {
      "location": {
        "start": {
          "line": 802,
          "column": 4,
          "index": 25326
        },
        "end": {
          "line": 1018,
          "column": 6,
          "index": 31601
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates an incoming configuration and checks for proper keys and values</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(name, config)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the class",
            "paramName": "name",
            "description": " The name of the class",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {Map} Configuration map",
            "paramName": "config",
            "description": " Configuration map",
            "type": "Map"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__validateAbstractInterfaces": {
      "location": {
        "start": {
          "line": 1026,
          "column": 4,
          "index": 31781
        },
        "end": {
          "line": 1045,
          "column": 6,
          "index": 32354
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates the interfaces required by abstract base classes</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} The configured class.",
            "paramName": "clazz",
            "description": " The configured class.",
            "type": "qx.Class"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__attachAnno": {
      "location": {
        "start": {
          "line": 1055,
          "column": 4,
          "index": 32616
        },
        "end": {
          "line": 1074,
          "column": 5,
          "index": 33166
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attaches an annotation to a class</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Map} Static methods or fields",
            "paramName": "clazz",
            "description": " Static methods or fields",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "group {String} Group name",
            "paramName": "group",
            "description": " Group name",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "key {String} Name of the annotated item",
            "paramName": "key",
            "description": " Name of the annotated item",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "anno {Object} Annotation object",
            "paramName": "anno",
            "description": " Annotation object",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__createClass": {
      "location": {
        "start": {
          "line": 1088,
          "column": 4,
          "index": 33730
        },
        "end": {
          "line": 1217,
          "column": 5,
          "index": 37456
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a class by type. Supports modern inheritance etc.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Full name of the class",
            "paramName": "name",
            "description": " Full name of the class",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "type {String} type of the class, i.e. \"static\", \"abstract\" or \"singleton\"",
            "paramName": "type",
            "description": " type of the class, i.e. \"static\", \"abstract\" or \"singleton\"",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "extend {Class} Superclass to inherit from",
            "paramName": "extend",
            "description": " Superclass to inherit from",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "statics {Map} Static methods or fields",
            "paramName": "statics",
            "description": " Static methods or fields",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "construct {Function} Constructor of the class",
            "paramName": "construct",
            "description": " Constructor of the class",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "destruct {Function} Destructor of the class",
            "paramName": "destruct",
            "description": " Destructor of the class",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "mixins {Mixin[]} array of mixins of the class",
            "paramName": "mixins",
            "description": " array of mixins of the class",
            "type": "Mixin[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class} The generated class",
            "type": "qx.Class",
            "description": " The generated class"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addEvents": {
      "location": {
        "start": {
          "line": 1232,
          "column": 4,
          "index": 37913
        },
        "end": {
          "line": 1282,
          "column": 5,
          "index": 39388
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach events to the class</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to add the events to",
            "paramName": "clazz",
            "description": " class to add the events to",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "events {Map} map of event names the class fires.",
            "paramName": "events",
            "description": " map of event names the class fires.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "patch {Boolean ? false} Enable redefinition of event type?",
            "paramName": "patch",
            "description": " Enable redefinition of event type?",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addProperties": {
      "location": {
        "start": {
          "line": 1292,
          "column": 4,
          "index": 39749
        },
        "end": {
          "line": 1367,
          "column": 5,
          "index": 42002
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach properties to classes</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to add the properties to",
            "paramName": "clazz",
            "description": " class to add the properties to",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "properties {Map} map of properties",
            "paramName": "properties",
            "description": " map of properties",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "patch {Boolean ? false} Overwrite property with the limitations of a property\n               which means you are able to refine but not to replace (esp. for new properties)",
            "paramName": "patch",
            "description": " Overwrite property with the limitations of a property\n               which means you are able to refine but not to replace (esp. for new properties)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__validateProperty": {
      "location": {
        "start": {
          "line": 1378,
          "column": 4,
          "index": 42329
        },
        "end": {
          "line": 1528,
          "column": 6,
          "index": 46680
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates the given property</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(clazz, name, config, patch)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to add property to",
            "paramName": "clazz",
            "description": " class to add property to",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {Map} configuration map",
            "paramName": "config",
            "description": " configuration map",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "patch {Boolean ? false} enable refine/patch?",
            "paramName": "patch",
            "description": " enable refine/patch?",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__addMembers": {
      "location": {
        "start": {
          "line": 1541,
          "column": 4,
          "index": 47169
        },
        "end": {
          "line": 1650,
          "column": 5,
          "index": 50822
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach members to a class</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} clazz to add members to",
            "paramName": "clazz",
            "description": " clazz to add members to",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "members {Map} The map of members to attach",
            "paramName": "members",
            "description": " The map of members to attach",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "patch {Boolean ? false} Enable patching of",
            "paramName": "patch",
            "description": " Enable patching of",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "base {Boolean ? true} Attach base flag to mark function as members\n     of this class",
            "paramName": "base",
            "description": " Attach base flag to mark function as members\n     of this class",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "wrap {Boolean ? false} Whether the member method should be wrapped.\n     this is needed to allow base calls in patched mixin members.",
            "paramName": "wrap",
            "description": " Whether the member method should be wrapped.\n     this is needed to allow base calls in patched mixin members.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addInterface": {
      "location": {
        "start": {
          "line": 1658,
          "column": 4,
          "index": 51000
        },
        "end": {
          "line": 1692,
          "column": 5,
          "index": 52156
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a single interface to a class</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to add interface to",
            "paramName": "clazz",
            "description": " class to add interface to",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "iface {Interface} the Interface to add",
            "paramName": "iface",
            "description": " the Interface to add",
            "type": "qx.Interface"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__addMixin": {
      "location": {
        "start": {
          "line": 1701,
          "column": 4,
          "index": 52486
        },
        "end": {
          "line": 1743,
          "column": 5,
          "index": 53713
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Include all features of the mixin into the given class, recursively.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} The class onto which the mixin should be attached.",
            "paramName": "clazz",
            "description": " The class onto which the mixin should be attached.",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "mixin {Mixin} Include all features of this mixin",
            "paramName": "mixin",
            "description": " Include all features of this mixin",
            "type": "qx.Mixin"
          },
          {
            "name": "@param",
            "body": "patch {Boolean} Overwrite existing fields, functions and properties",
            "paramName": "patch",
            "description": " Overwrite existing fields, functions and properties",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__createDefaultConstructor": {
      "location": {
        "start": {
          "line": 1757,
          "column": 4,
          "index": 54111
        },
        "end": {
          "line": 1763,
          "column": 5,
          "index": 54283
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the default constructor.\n This constructor just calls the constructor of the base class.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} The default constructor.",
            "type": "Function",
            "description": " The default constructor."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__wrapConstructor": {
      "location": {
        "start": {
          "line": 1774,
          "column": 4,
          "index": 54687
        },
        "end": {
          "line": 1845,
          "column": 5,
          "index": 56917
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Generate a wrapper of the original class constructor in order to enable\n some of the advanced OO features (e.g. abstract class, singleton, mixins)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "construct {Function} the original constructor",
            "paramName": "construct",
            "description": " the original constructor",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "name {String} name of the class",
            "paramName": "name",
            "description": " name of the class",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "type {String} the user specified class type",
            "paramName": "type",
            "description": " the user specified class type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} The wrapped constructor",
            "type": "Function",
            "description": " The wrapped constructor"
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 1848,
        "column": 2,
        "index": 56926
      },
      "end": {
        "line": 1866,
        "column": 3,
        "index": 57465
      }
    }
  },
  "descendants": []
}