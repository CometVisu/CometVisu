{
  "className": "qx.bom.AnimationFrame",
  "packageName": "qx.bom",
  "name": "AnimationFrame",
  "superClass": "qx.event.Emitter",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 56,
        "column": 0,
        "index": 1670
      },
      "end": {
        "line": 209,
        "column": 3,
        "index": 6632
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This is a cross browser wrapper for requestAnimationFrame. For further\n information about the feature, take a look at spec:\n http://www.w3.org/TR/animation-timing/\n This class offers two ways of using this feature. First, the plain\n API the spec describes.\n Here is a sample usage:\n </p>\n<pre class='javascript'>var start = Date.now();\n var cb = function(time) {\n   if (time >= start + duration) {\n\n   } else {\n     var timePassed = time - start;\n\n     qx.bom.AnimationFrame.request(cb, this);\n   }\n };\n qx.bom.AnimationFrame.request(cb, this);\n </pre>\n<p>Another way of using it is to use it as an instance emitting events.\n Here is a sample usage of that API:\n </p>\n<pre class='javascript'>var frame = new qx.bom.AnimationFrame();\n frame.on(\"end\", function() {\n\n }, this);\n frame.on(\"frame\", function(timePassed) {\n\n }, this);\n frame.startSequence(duration);\n </pre>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.lang.normalize.Date"
        }
      ]
    }
  },
  "type": "class",
  "events": {
    "end": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1820
        },
        "end": {
          "line": 61,
          "column": 18,
          "index": 1834
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired as soon as the animation has ended.</p>"
          }
        ]
      },
      "name": "end",
      "type": "undefined"
    },
    "frame": {
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1971
        },
        "end": {
          "line": 67,
          "column": 19,
          "index": 1986
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on every frame having the passed time as value\n (might be a float for higher precision).</p>"
          }
        ]
      },
      "name": "frame",
      "type": "Number"
    }
  },
  "members": {
    "__canceled": {
      "location": {
        "start": {
          "line": 71,
          "column": 4,
          "index": 2014
        },
        "end": {
          "line": 71,
          "column": 21,
          "index": 2031
        }
      },
      "type": "variable",
      "access": "private"
    },
    "startSequence": {
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2303
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 3027
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method used to start a series of animation frames. The series will end as\n soon as the given duration is over.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} The duration the sequence should take.",
            "paramName": "duration",
            "description": " The duration the sequence should take.",
            "type": "Number"
          }
        ],
        "@ignore": [
          {
            "name": "@ignore",
            "body": "performance.*"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cancelSequence": {
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3154
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3210
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cancels a started sequence of frames. It will do nothing if no\n sequence is running.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "statics": {
    "TIMEOUT": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3329
        },
        "end": {
          "line": 121,
          "column": 15,
          "index": 3340
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The default time in ms the timeout fallback implementation uses.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "calculateTiming": {
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 3976
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4920
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculation of the predefined timing functions. Approximation of the real\n bezier curves has been used for easier calculation. This is good and close\n enough for the predefined functions like <code>ease</code> or\n <code>linear</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {String} The defined timing function. One of the following values:\n   <code>\"ease-in\"</code>, <code>\"ease-out\"</code>, <code>\"linear\"</code>,\n   <code>\"ease-in-out\"</code>, <code>\"ease\"</code>.",
            "paramName": "func",
            "description": " The defined timing function. One of the following values:\n   <code>\"ease-in\"</code>, <code>\"ease-out\"</code>, <code>\"linear\"</code>,\n   <code>\"ease-in-out\"</code>, <code>\"ease\"</code>.",
            "type": "qx.bom.String"
          },
          {
            "name": "@param",
            "body": "x {Integer} The percent value of the function.",
            "paramName": "x",
            "description": " The percent value of the function.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The calculated value",
            "type": "Integer",
            "description": " The calculated value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "request": {
      "location": {
        "start": {
          "line": 171,
          "column": 4,
          "index": 5567
        },
        "end": {
          "line": 192,
          "column": 5,
          "index": 6237
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request for an animation frame. If the native <code>requestAnimationFrame</code>\n method is supported, it will be used. Otherwise, we use timeouts with a\n 30ms delay. The HighResolutionTime will be used if supported but the time given\n to the callback will still be a timestamp starting at 1 January 1970 00:00:00 UTC.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The callback function which will get the current\n   time as argument (which could be a float for higher precision).",
            "paramName": "callback",
            "description": " The callback function which will get the current\n   time as argument (which could be a float for higher precision).",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {var} The context of the callback.",
            "paramName": "context",
            "description": " The context of the callback.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The id of the request.",
            "type": "Number",
            "description": " The id of the request."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 198,
        "column": 2,
        "index": 6299
      },
      "end": {
        "line": 208,
        "column": 3,
        "index": 6627
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "performance.timing.*"
        }
      ]
    }
  },
  "descendants": []
}