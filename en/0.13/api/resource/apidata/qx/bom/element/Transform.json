{
  "className": "qx.bom.element.Transform",
  "packageName": "qx.bom.element",
  "name": "Transform",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0,
        "index": 759
      },
      "end": {
        "line": 353,
        "column": 3,
        "index": 11804
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This class is responsible for applying CSS3 transforms to plain DOM elements.\n The implementation is mostly a cross browser wrapper for applying the\n transforms.\n The API is keep to the spec as close as possible.\n http://www.w3.org/TR/css3-3d-transforms/</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__cssKeys": {
      "location": {
        "start": {
          "line": 30,
          "column": 4,
          "index": 871
        },
        "end": {
          "line": 30,
          "column": 55,
          "index": 922
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal storage of the CSS names</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "transform": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 2054
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 2276
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method to apply multiple transforms at once to the given element. It\n takes a map containing the transforms you want to apply plus the values\n e.g.<code>{scale: 2, rotate: \"5deg\"}</code>.\n The values can be either singular, which means a single value will\n be added to the CSS. If you give an array, the values will be split up\n and each array entry will be used for the X, Y or Z dimension in that\n order e.g. <code>{scale: [2, 0.5]}</code> will result in a element\n double the size in X direction and half the size in Y direction.\n The values can be either singular, which means a single value will\n be added to the CSS. If you give an array, the values will be join to\n a string.\n 3d suffixed properties will be taken for translate and scale if they are\n available and an array with three values is given.\n Make sure your browser supports all transformations you apply.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "transforms {Map} The map containing the transforms and value.",
            "paramName": "transforms",
            "description": " The map containing the transforms and value.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "translate": {
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 2581
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 2657
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Translates the given element by the given value. For further details, take\n a look at the {@link #transform} method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String|Array} The value to translate e.g. <code>\"10px\"</code>.",
            "paramName": "value",
            "description": " The value to translate e.g. <code>\"10px\"</code>.",
            "type": [
              "String",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scale": {
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2929
        },
        "end": {
          "line": 77,
          "column": 5,
          "index": 2997
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scales the given element by the given value. For further details, take\n a look at the {@link #transform} method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {Number|Array} The value to scale.",
            "paramName": "value",
            "description": " The value to scale.",
            "type": [
              "Number",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "rotate": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 3297
        },
        "end": {
          "line": 87,
          "column": 5,
          "index": 3367
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Rotates the given element by the given value. For further details, take\n a look at the {@link #transform} method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String|Array} The value to rotate e.g. <code>\"90deg\"</code>.",
            "paramName": "value",
            "description": " The value to rotate e.g. <code>\"90deg\"</code>.",
            "type": [
              "String",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "skew": {
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 3663
        },
        "end": {
          "line": 97,
          "column": 5,
          "index": 3729
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Skews the given element by the given value. For further details, take\n a look at the {@link #transform} method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String|Array} The value to skew e.g. <code>\"90deg\"</code>.",
            "paramName": "value",
            "description": " The value to skew e.g. <code>\"90deg\"</code>.",
            "type": [
              "String",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCss": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 4014
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 4280
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts the given map to a string which could be added to a css\n stylesheet.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "transforms {Map} The transforms map. For a detailed description,\n take a look at the {@link #transform} method.",
            "paramName": "transforms",
            "description": " The transforms map. For a detailed description,\n take a look at the {@link #transform} method.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The CSS value.",
            "type": "String",
            "description": " The CSS value."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setOrigin": {
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 4628
        },
        "end": {
          "line": 127,
          "column": 5,
          "index": 4752
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the transform-origin property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String} CSS position values like <code>50% 50%</code> or\n   <code>left top</code>.",
            "paramName": "value",
            "description": " CSS position values like <code>50% 50%</code> or\n   <code>left top</code>.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getOrigin": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 5062
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 5195
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the transform-origin property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The set property, e.g. <code>50% 50%</code>",
            "type": "String",
            "description": " The set property, e.g. <code>50% 50%</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setStyle": {
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 5514
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 5636
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the transform-style property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String} Either <code>flat</code> or <code>preserve-3d</code>.",
            "paramName": "value",
            "description": " Either <code>flat</code> or <code>preserve-3d</code>.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getStyle": {
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 5981
        },
        "end": {
          "line": 169,
          "column": 5,
          "index": 6112
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the transform-style property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The set property, either <code>flat</code> or\n   <code>preserve-3d</code>.",
            "type": "String",
            "description": " The set property, either <code>flat</code> or\n   <code>preserve-3d</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setPerspective": {
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 6453
        },
        "end": {
          "line": 183,
          "column": 5,
          "index": 6594
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the perspective property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {Number} The perspective layer. Numbers between 100\n   and 5000 give the best results.",
            "paramName": "value",
            "description": " The perspective layer. Numbers between 100\n   and 5000 give the best results.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPerspective": {
      "location": {
        "start": {
          "line": 192,
          "column": 4,
          "index": 6890
        },
        "end": {
          "line": 197,
          "column": 5,
          "index": 7033
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the perspective property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The set property, e.g. <code>500</code>",
            "type": "String",
            "description": " The set property, e.g. <code>500</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setPerspectiveOrigin": {
      "location": {
        "start": {
          "line": 207,
          "column": 4,
          "index": 7385
        },
        "end": {
          "line": 211,
          "column": 5,
          "index": 7532
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the perspective-origin property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String} CSS position values like <code>50% 50%</code> or\n   <code>left top</code>.",
            "paramName": "value",
            "description": " CSS position values like <code>50% 50%</code> or\n   <code>left top</code>.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPerspectiveOrigin": {
      "location": {
        "start": {
          "line": 220,
          "column": 4,
          "index": 7846
        },
        "end": {
          "line": 234,
          "column": 5,
          "index": 8323
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the perspective-origin property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The set property, e.g. <code>50% 50%</code>",
            "type": "String",
            "description": " The set property, e.g. <code>50% 50%</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setBackfaceVisibility": {
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 8650
        },
        "end": {
          "line": 249,
          "column": 5,
          "index": 8842
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the backface-visibility property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {Boolean} <code>true</code> if the backface should be visible.",
            "paramName": "value",
            "description": " <code>true</code> if the backface should be visible.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBackfaceVisibility": {
      "location": {
        "start": {
          "line": 258,
          "column": 4,
          "index": 9162
        },
        "end": {
          "line": 263,
          "column": 5,
          "index": 9335
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the backface-visibility property of the given element.\n Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the backface is visible.",
            "type": "Boolean",
            "description": " <code>true</code>, if the backface is visible."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTransformValue": {
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 9537
        },
        "end": {
          "line": 302,
          "column": 5,
          "index": 10465
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts the given transforms map to a valid CSS string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "transforms {Map} A map containing the transforms.",
            "paramName": "transforms",
            "description": " A map containing the transforms.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The CSS transforms.",
            "type": "String",
            "description": " The CSS transforms."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_compute3dProperty": {
      "location": {
        "start": {
          "line": 312,
          "column": 4,
          "index": 10757
        },
        "end": {
          "line": 325,
          "column": 5,
          "index": 11061
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper function to create 3d property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "property {String} Property of transform, e.g. translate",
            "paramName": "property",
            "description": " Property of transform, e.g. translate",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "params {Array} Array with three values, each one stands for an axis.",
            "paramName": "params",
            "description": " Array with three values, each one stands for an axis.",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Computed property and its value",
            "type": "String",
            "description": " Computed property and its value"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_computeAxisProperties": {
      "location": {
        "start": {
          "line": 335,
          "column": 4,
          "index": 11356
        },
        "end": {
          "line": 351,
          "column": 5,
          "index": 11796
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper function to create axis related properties.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "property {String} Property of transform, e.g. rotate",
            "paramName": "property",
            "description": " Property of transform, e.g. rotate",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "params {Array} Array with values, each one stands for an axis.",
            "paramName": "params",
            "description": " Array with values, each one stands for an axis.",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Computed property and its value",
            "type": "String",
            "description": " Computed property and its value"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    }
  },
  "descendants": []
}