{
  "version": 0.3,
  "lastModified": 1735383688449,
  "lastModifiedIso": "2024-12-28T11:01:28.449Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/bom/Template.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 81,
      "column": 0,
      "index": 2773
    },
    "end": {
      "line": 156,
      "column": 3,
      "index": 5921
    }
  },
  "className": "qx.bom.Template",
  "jsdoc": {
    "raw": [
      "*",
      " * The is a template class which can be used for HTML templating. In fact,",
      " * this is a wrapper for mustache.js which is a \"framework-agnostic way to",
      " * render logic-free views\".",
      " *",
      " * Here is a basic example how to use it:",
      " * Template:",
      " * <pre class=\"javascript\">",
      " * var template = \"Hi, my name is {{name}}!\";",
      " * var view = {name: \"qooxdoo\"};",
      " * qx.bom.Template.render(template, view);",
      " * // return \"Hi, my name is qooxdoo!\"",
      " * </pre>",
      " *",
      " * For further details, please visit the mustache.js documentation here:",
      " *   https://github.com/janl/mustache.js/blob/master/README.md",
      " *",
      " * @ignore(module)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The is a template class which can be used for HTML templating. In fact,\n this is a wrapper for mustache.js which is a \"framework-agnostic way to\n render logic-free views\".\n Here is a basic example how to use it:\n Template:\n </p>\n<pre class=\"javascript\">\n var template = \"Hi, my name is {{name}}!\";\n var view = {name: \"qooxdoo\"};\n qx.bom.Template.render(template, view);\n\n </pre>\n<p>For further details, please visit the mustache.js documentation here:\n   https://github.com/janl/mustache.js/blob/master/README.md</p>"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "module"
      }
    ]
  },
  "statics": {
    "version": {
      "jsdoc": {
        "raw": [
          "* Contains the mustache.js version. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Contains the mustache.js version.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2876
        },
        "end": {
          "line": 84,
          "column": 17,
          "index": 2889
        }
      },
      "appearsIn": []
    },
    "render": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Original and only template method of mustache.js. For further",
          "     * documentation, please visit https://github.com/janl/mustache.js",
          "     *",
          "     * @signature function(template, view, partials)",
          "     * @param template {String} The String containing the template.",
          "     * @param view {Object} The object holding the data to render.",
          "     * @param partials {Object} Object holding parts of a template.",
          "     * @return {String} The parsed template.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Original and only template method of mustache.js. For further\n documentation, please visit https://github.com/janl/mustache.js</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(template, view, partials)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "template {String} The String containing the template.",
            "paramName": "template",
            "description": " The String containing the template.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "view {Object} The object holding the data to render.",
            "paramName": "view",
            "description": " The object holding the data to render.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "partials {Object} Object holding parts of a template.",
            "paramName": "partials",
            "description": " Object holding parts of a template.",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The parsed template.",
            "type": "string",
            "description": "The parsed template."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 96,
          "column": 4,
          "index": 3360
        },
        "end": {
          "line": 96,
          "column": 16,
          "index": 3372
        }
      },
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "renderToNode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Combines {@link #render} and {@link #get}. Input is equal to {@link #render}",
          "     * and output is equal to {@link #get}. The advantage over {@link #get}",
          "     * is that you don't need a HTML template but can use a template",
          "     * string and still get a DOM element. Keep in mind that templates",
          "     * can only have one root element.",
          "     *",
          "     * @param template {String} The String containing the template.",
          "     * @param view {Object} The object holding the data to render.",
          "     * @param partials {Object} Object holding parts of a template.",
          "     * @return {Element} A DOM element holding the parsed template data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Combines {@link #render} and {@link #get}. Input is equal to {@link #render}\n and output is equal to {@link #get}. The advantage over {@link #get}\n is that you don't need a HTML template but can use a template\n string and still get a DOM element. Keep in mind that templates\n can only have one root element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "template {String} The String containing the template.",
            "paramName": "template",
            "description": " The String containing the template.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "view {Object} The object holding the data to render.",
            "paramName": "view",
            "description": " The object holding the data to render.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "partials {Object} Object holding parts of a template.",
            "paramName": "partials",
            "description": " Object holding parts of a template.",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} A DOM element holding the parsed template data.",
            "type": "qx.bom.Element",
            "description": "A DOM element holding the parsed template data."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 4017
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 4184
        }
      },
      "type": "function",
      "params": [
        {
          "name": "template",
          "type": "string"
        },
        {
          "name": "view",
          "type": "Record<any, any>"
        },
        {
          "name": "partials",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "qx.bom.Element"
      },
      "appearsIn": []
    },
    "get": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method which provides you with a direct access to templates",
          "     * stored as HTML in the DOM. The DOM node with the given ID will be used",
          "     * as a template, parsed and a new DOM node will be returned containing the",
          "     * parsed data. Keep in mind to have only one root DOM element in the the",
          "     * template.",
          "     * Additionally, you should not put the template into a regular, hidden",
          "     * DOM element because the template may not be valid HTML due to the containing",
          "     * mustache tags. We suggest to put it into a script tag with the type",
          "     * <code>text/template</code>.",
          "     *",
          "     * @param id {String} The id of the HTML template in the DOM.",
          "     * @param view {Object} The object holding the data to render.",
          "     * @param partials {Object} Object holding parts of a template.",
          "     * @return {Element} A DOM element holding the parsed template data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method which provides you with a direct access to templates\n stored as HTML in the DOM. The DOM node with the given ID will be used\n as a template, parsed and a new DOM node will be returned containing the\n parsed data. Keep in mind to have only one root DOM element in the the\n template.\n Additionally, you should not put the template into a regular, hidden\n DOM element because the template may not be valid HTML due to the containing\n mustache tags. We suggest to put it into a script tag with the type\n <code>text/template</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id of the HTML template in the DOM.",
            "paramName": "id",
            "description": " The id of the HTML template in the DOM.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "view {Object} The object holding the data to render.",
            "paramName": "view",
            "description": " The object holding the data to render.",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "partials {Object} Object holding parts of a template.",
            "paramName": "partials",
            "description": " Object holding parts of a template.",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} A DOM element holding the parsed template data.",
            "type": "qx.bom.Element",
            "description": "A DOM element holding the parsed template data."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 5085
        },
        "end": {
          "line": 135,
          "column": 5,
          "index": 5277
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "view",
          "type": "Record<any, any>"
        },
        {
          "name": "partials",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "qx.bom.Element"
      },
      "appearsIn": []
    },
    "_createNodeFromTemplate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Accepts a parsed template and returns a (potentially nested) node.",
          "     *",
          "     * @param template {String} The String containing the template.",
          "     * @return {Element} A DOM element holding the parsed template data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Accepts a parsed template and returns a (potentially nested) node.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "template {String} The String containing the template.",
            "paramName": "template",
            "description": " The String containing the template.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} A DOM element holding the parsed template data.",
            "type": "qx.bom.Element",
            "description": "A DOM element holding the parsed template data."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 5522
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 5913
        }
      },
      "type": "function",
      "params": [
        {
          "name": "template",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.bom.Element"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}