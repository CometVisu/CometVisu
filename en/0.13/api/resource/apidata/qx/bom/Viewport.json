{
  "version": 0.3,
  "lastModified": 1735341602795,
  "lastModifiedIso": "2024-12-27T23:20:02.795Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/bom/Viewport.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 84,
      "column": 0,
      "index": 3018
    },
    "end": {
      "line": 281,
      "column": 3,
      "index": 10172
    }
  },
  "className": "qx.bom.Viewport",
  "jsdoc": {
    "raw": [
      "*",
      " * Includes library functions to work with the client's viewport (window).",
      " * Orientation related functions are point to window.top as default.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Includes library functions to work with the client's viewport (window).\n Orientation related functions are point to window.top as default.</p>"
      }
    ]
  },
  "statics": {
    "getWidth": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current width of the viewport (excluding the vertical scrollbar",
          "     * if present).",
          "     *",
          "     * @param win {Window?window} The window to query",
          "     * @return {Integer} The width of the viewable area of the page (excluding scrollbars).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current width of the viewport (excluding the vertical scrollbar\n if present).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window?window} The window to query",
            "paramName": "win",
            "description": " The window to query",
            "optional": true,
            "defaultValue": "window",
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The width of the viewable area of the page (excluding scrollbars).",
            "type": "Integer",
            "description": "The width of the viewable area of the page (excluding scrollbars)."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 3348
        },
        "end": {
          "line": 99,
          "column": 5,
          "index": 3553
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "Window",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getHeight": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current height of the viewport (excluding the horizontal scrollbar",
          "     * if present).",
          "     *",
          "     * @param win {Window?window} The window to query",
          "     * @return {Integer} The Height of the viewable area of the page (excluding scrollbars).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current height of the viewport (excluding the horizontal scrollbar\n if present).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window?window} The window to query",
            "paramName": "win",
            "description": " The window to query",
            "optional": true,
            "defaultValue": "window",
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The Height of the viewable area of the page (excluding scrollbars).",
            "type": "Integer",
            "description": "The Height of the viewable area of the page (excluding scrollbars)."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 3836
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 4314
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "Window",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getScrollLeft": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the scroll position of the viewport",
          "     *",
          "     * All clients except IE < 9 support the non-standard property <code>pageXOffset</code>.",
          "     * As this is easier to evaluate we prefer this property over <code>scrollLeft</code>.",
          "     * Since the window could differ from the one the application is running in, we can't",
          "     * use a one-time environment check to decide which property to use.",
          "     *",
          "     * @param win {Window?window} The window to query",
          "     * @return {Integer} Scroll position in pixels from left edge, always a positive integer or zero",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the scroll position of the viewport\n All clients except IE &lt; 9 support the non-standard property <code>pageXOffset</code>.\n As this is easier to evaluate we prefer this property over <code>scrollLeft</code>.\n Since the window could differ from the one the application is running in, we can't\n use a one-time environment check to decide which property to use.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window?window} The window to query",
            "paramName": "win",
            "description": " The window to query",
            "optional": true,
            "defaultValue": "window",
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Scroll position in pixels from left edge, always a positive integer or zero",
            "type": "Integer",
            "description": "Scroll position in pixels from left edge, always a positive integer or zero"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 4904
        },
        "end": {
          "line": 149,
          "column": 5,
          "index": 5427
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "Window",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getScrollTop": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the scroll position of the viewport",
          "     *",
          "     * All clients except MSHTML support the non-standard property <code>pageYOffset</code>.",
          "     * As this is easier to evaluate we prefer this property over <code>scrollTop</code>.",
          "     * Since the window could differ from the one the application is running in, we can't",
          "     * use a one-time environment check to decide which property to use.",
          "     *",
          "     * @param win {Window?window} The window to query",
          "     * @return {Integer} Scroll position in pixels from top edge, always a positive integer or zero",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the scroll position of the viewport\n All clients except MSHTML support the non-standard property <code>pageYOffset</code>.\n As this is easier to evaluate we prefer this property over <code>scrollTop</code>.\n Since the window could differ from the one the application is running in, we can't\n use a one-time environment check to decide which property to use.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window?window} The window to query",
            "paramName": "win",
            "description": " The window to query",
            "optional": true,
            "defaultValue": "window",
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Scroll position in pixels from top edge, always a positive integer or zero",
            "type": "Integer",
            "description": "Scroll position in pixels from top edge, always a positive integer or zero"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 162,
          "column": 4,
          "index": 6015
        },
        "end": {
          "line": 175,
          "column": 5,
          "index": 6533
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "Window",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "__getOrientationNormalizer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns an orientation normalizer value that should be added to device orientation",
          "     * to normalize behaviour on different devices.",
          "     *",
          "     * @param win {Window} The window to query",
          "     * @return {Map} Orientation normalizing value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an orientation normalizer value that should be added to device orientation\n to normalize behaviour on different devices.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window} The window to query",
            "paramName": "win",
            "description": " The window to query",
            "type": "qx.bom.Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Orientation normalizing value",
            "type": "Map<any, any>",
            "description": "Orientation normalizing value"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 6803
        },
        "end": {
          "line": 215,
          "column": 5,
          "index": 7726
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "qx.bom.Window"
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "__orientationNormalizer": {
      "jsdoc": {
        "raw": [
          " Cache orientation normalizer map on start"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 218,
          "column": 4,
          "index": 7782
        },
        "end": {
          "line": 218,
          "column": 33,
          "index": 7811
        }
      },
      "appearsIn": []
    },
    "getOrientation": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current orientation of the viewport in degree.",
          "     *",
          "     * All possible values and their meaning:",
          "     *",
          "     * * <code>-90</code>: \"Landscape\"",
          "     * * <code>0</code>: \"Portrait\"",
          "     * * <code>90</code>: \"Landscape\"",
          "     * * <code>180</code>: \"Portrait\"",
          "     *",
          "     * @param win {Window?window.top} The window to query. (Default = top window)",
          "     * @return {Integer} The current orientation in degree",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current orientation of the viewport in degree.\n All possible values and their meaning:</p>\n<ul>\n<li><code>-90</code>: \"Landscape\"</li>\n<li><code>0</code>: \"Portrait\"</li>\n<li><code>90</code>: \"Landscape\"</li>\n<li><code>180</code>: \"Portrait\"</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window?window.top} The window to query. (Default = top window)",
            "paramName": "win",
            "description": " The window to query. (Default = top window)",
            "optional": true,
            "defaultValue": "window.top",
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The current orientation in degree",
            "type": "Integer",
            "description": "The current orientation in degree"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 233,
          "column": 4,
          "index": 8259
        },
        "end": {
          "line": 255,
          "column": 5,
          "index": 9364
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "Window",
          "optional": true,
          "defaultValue": "window.top"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "isLandscape": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the viewport orientation is currently in landscape mode.",
          "     *",
          "     * @param win {Window?window} The window to query",
          "     * @return {Boolean} <code>true</code> when the viewport orientation",
          "     *     is currently in landscape mode.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the viewport orientation is currently in landscape mode.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window?window} The window to query",
            "paramName": "win",
            "description": " The window to query",
            "optional": true,
            "defaultValue": "window",
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the viewport orientation\n     is currently in landscape mode.",
            "type": "boolean",
            "description": "<code>true</code> when the viewport orientation\n     is currently in landscape mode."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 264,
          "column": 4,
          "index": 9636
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 9766
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "Window",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isPortrait": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the viewport orientation is currently in portrait mode.",
          "     *",
          "     * @param win {Window?window} The window to query",
          "     * @return {Boolean} <code>true</code> when the viewport orientation",
          "     *     is currently in portrait mode.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the viewport orientation is currently in portrait mode.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window?window} The window to query",
            "paramName": "win",
            "description": " The window to query",
            "optional": true,
            "defaultValue": "window",
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the viewport orientation\n     is currently in portrait mode.",
            "type": "boolean",
            "description": "<code>true</code> when the viewport orientation\n     is currently in portrait mode."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 276,
          "column": 4,
          "index": 10036
        },
        "end": {
          "line": 279,
          "column": 5,
          "index": 10164
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "Window",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}