{
  "version": 0.3,
  "lastModified": 1722151626819,
  "lastModifiedIso": "2024-07-28T07:27:06.819Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/bom/rest/Resource.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 58,
      "column": 0,
      "index": 2528
    },
    "end": {
      "line": 1098,
      "column": 3,
      "index": 33701
    }
  },
  "className": "qx.bom.rest.Resource",
  "jsdoc": {
    "raw": [
      "*",
      " * Client-side wrapper of a REST resource.",
      " *",
      " * Each instance represents a resource in terms of REST. A number of actions",
      " * (usually HTTP methods) unique to the resource can be defined and invoked.",
      " * A resource with its actions is configured declaratively by passing a resource",
      " * description to the constructor, or programmatically using {@link #map}.",
      " *",
      " * Each action is associated to a route. A route is a combination of method,",
      " * URL pattern and optional parameter constraints.",
      " *",
      " * An action is invoked by calling a method with the same name. When a URL",
      " * pattern of a route contains positional parameters, those parameters must be",
      " * passed when invoking the associated action. Also, constraints defined in the",
      " * route must be satisfied.",
      " *",
      " * When an action is invoked, a request is configured according to the associated",
      " * route, is passed the URL parameters, request body data, and finally send.",
      " * What kind of request is send can be configured by overwriting {@link #_getRequest}.",
      " *",
      " * No constraints on the action's name or the scope of the URLs are imposed. However,",
      " * if you want to follow RESTful design patterns it is recommended to name actions",
      " * the same as the HTTP action.",
      " *",
      " * Strictly speaking, the <code>photos</code> instance represents two distinct resources",
      " * and could therefore just as well mapped to two distinct resources (for instance,",
      " * named photos and photosTagged). What style to choose depends on the kind of data",
      " * returned. For instance, it seems sensible to stick with one resource if the filter",
      " * only limits the result set (i.e. the individual results have the same properties).",
      " *",
      " * In order to respond to successful (or erroneous) invocations of actions,",
      " * either listen to the generic \"success\" or \"error\" event and get the action",
      " * from the event data, or listen to action specific events defined at runtime.",
      " * Action specific events follow the pattern \"&lt;action&gt;Success\" and",
      " * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".",
      " *",
      " * @group (IO)",
      " * @ignore(qx.core.Object.*)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Client-side wrapper of a REST resource.\n Each instance represents a resource in terms of REST. A number of actions\n (usually HTTP methods) unique to the resource can be defined and invoked.\n A resource with its actions is configured declaratively by passing a resource\n description to the constructor, or programmatically using {@link #map}.\n Each action is associated to a route. A route is a combination of method,\n URL pattern and optional parameter constraints.\n An action is invoked by calling a method with the same name. When a URL\n pattern of a route contains positional parameters, those parameters must be\n passed when invoking the associated action. Also, constraints defined in the\n route must be satisfied.\n When an action is invoked, a request is configured according to the associated\n route, is passed the URL parameters, request body data, and finally send.\n What kind of request is send can be configured by overwriting {@link #_getRequest}.\n No constraints on the action's name or the scope of the URLs are imposed. However,\n if you want to follow RESTful design patterns it is recommended to name actions\n the same as the HTTP action.\n Strictly speaking, the <code>photos</code> instance represents two distinct resources\n and could therefore just as well mapped to two distinct resources (for instance,\n named photos and photosTagged). What style to choose depends on the kind of data\n returned. For instance, it seems sensible to stick with one resource if the filter\n only limits the result set (i.e. the individual results have the same properties).\n In order to respond to successful (or erroneous) invocations of actions,\n either listen to the generic \"success\" or \"error\" event and get the action\n from the event data, or listen to action specific events defined at runtime.\n Action specific events follow the pattern \"&lt;action&gt;Success\" and\n \"&lt;action&gt;Error\", e.g. \"indexSuccess\".</p>"
      }
    ],
    "@group": [
      {
        "name": "@group",
        "body": "IO"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "qx.core.Object.*"
      }
    ]
  },
  "superClass": "qx.event.Emitter",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "description"
      }
    ],
    "location": {
      "start": {
        "line": 71,
        "column": 2,
        "index": 2977
      },
      "end": {
        "line": 88,
        "column": 3,
        "index": 3403
      }
    }
  },
  "events": {
    "success": {
      "type": "qx.bom.rest.Resource",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when any request was successful.",
          "     *",
          "     * The action the successful request is associated to, as well as the",
          "     * request itself, can be retrieved from the event’s properties.",
          "     * Additionally, an action specific event is fired that follows the pattern",
          "     * \"<action>Success\", e.g. \"indexSuccess\".",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when any request was successful.\n The action the successful request is associated to, as well as the\n request itself, can be retrieved from the event’s properties.\n Additionally, an action specific event is fired that follows the pattern\n \"<action>Success\", e.g. \"indexSuccess\".</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 3761
        },
        "end": {
          "line": 99,
          "column": 35,
          "index": 3792
        }
      }
    },
    "actionSuccess": {
      "type": "qx.bom.rest.Resource",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when request associated to action given in prefix was successful.",
          "     *",
          "     * For example, \"indexSuccess\" is fired when <code>index()</code> was",
          "     * successful.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request associated to action given in prefix was successful.\n For example, \"indexSuccess\" is fired when <code>index()</code> was\n successful.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 3994
        },
        "end": {
          "line": 107,
          "column": 41,
          "index": 4031
        }
      }
    },
    "error": {
      "type": "qx.bom.rest.Resource",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when any request fails.",
          "     *",
          "     * The action the failed request is associated to, as well as the",
          "     * request itself, can be retrieved from the event’s properties.",
          "     * Additionally, an action specific event is fired that follows the pattern",
          "     * \"<action>Error\", e.g. \"indexError\".",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when any request fails.\n The action the failed request is associated to, as well as the\n request itself, can be retrieved from the event’s properties.\n Additionally, an action specific event is fired that follows the pattern\n \"<action>Error\", e.g. \"indexError\".</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 4360
        },
        "end": {
          "line": 117,
          "column": 33,
          "index": 4389
        }
      }
    },
    "actionError": {
      "type": "qx.bom.rest.Resource",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when any request associated to action given in prefix fails.",
          "     *",
          "     * For example, \"indexError\" is fired when <code>index()</code> failed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when any request associated to action given in prefix fails.\n For example, \"indexError\" is fired when <code>index()</code> failed.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 4569
        },
        "end": {
          "line": 124,
          "column": 39,
          "index": 4604
        }
      }
    },
    "sent": {
      "type": "qx.bom.rest.Resource",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when a request is sent to the given endpoint.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a request is sent to the given endpoint.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 4686
        },
        "end": {
          "line": 129,
          "column": 32,
          "index": 4714
        }
      }
    },
    "actionSent": {
      "type": "qx.bom.rest.Resource",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when any request associated to action is sent to the given endpoint.",
          "     *",
          "     * For example, \"indexSent\" is fired when <code>index()</code> was",
          "     * called.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when any request associated to action is sent to the given endpoint.\n For example, \"indexSent\" is fired when <code>index()</code> was\n called.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 137,
          "column": 4,
          "index": 4912
        },
        "end": {
          "line": 137,
          "column": 38,
          "index": 4946
        }
      }
    },
    "started": {
      "type": "qx.bom.rest.Resource",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when a request is started to the given endpoint. This moment is right after the request",
          "     * was opened and send.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when a request is started to the given endpoint. This moment is right after the request\n was opened and send.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 5098
        },
        "end": {
          "line": 143,
          "column": 35,
          "index": 5129
        }
      }
    },
    "actionStarted": {
      "type": "qx.bom.rest.Resource",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when any request associated to action is started to the given endpoint. This moment is",
          "     * right after the request was opened and send.",
          "     *",
          "     * For example, \"indexStarted\" is fired when <code>index()</code> was called.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when any request associated to action is started to the given endpoint. This moment is\n right after the request was opened and send.\n For example, \"indexStarted\" is fired when <code>index()</code> was called.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 5393
        },
        "end": {
          "line": 151,
          "column": 41,
          "index": 5430
        }
      }
    }
  },
  "statics": {
    "POLL_THROTTLE_LIMIT": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Number of milliseconds below a long-poll request is considered immediate and",
          "     * subject to throttling checks.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Number of milliseconds below a long-poll request is considered immediate and\n subject to throttling checks.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 5591
        },
        "end": {
          "line": 159,
          "column": 28,
          "index": 5615
        }
      },
      "appearsIn": []
    },
    "POLL_THROTTLE_COUNT": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Number of immediate long-poll responses accepted before throttling takes place.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Number of immediate long-poll responses accepted before throttling takes place.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 5725
        },
        "end": {
          "line": 164,
          "column": 27,
          "index": 5748
        }
      },
      "appearsIn": []
    },
    "REQUIRED": {
      "jsdoc": {
        "raw": [
          "*",
          "     * A symbol used in checks to declare required parameter.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A symbol used in checks to declare required parameter.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 5833
        },
        "end": {
          "line": 169,
          "column": 18,
          "index": 5847
        }
      },
      "appearsIn": []
    },
    "placeholdersFromUrl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get placeholders from URL.",
          "     *",
          "     * @param url {String} The URL to parse for placeholders.",
          "     * @return {Array} Array of placeholders without the placeholder prefix.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get placeholders from URL.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "url {String} The URL to parse for placeholders.",
            "paramName": "url",
            "description": " The URL to parse for placeholders.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Array of placeholders without the placeholder prefix.",
            "type": "Array<any>",
            "description": "Array of placeholders without the placeholder prefix."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 6050
        },
        "end": {
          "line": 189,
          "column": 5,
          "index": 6436
        }
      },
      "type": "function",
      "params": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    }
  },
  "members": {
    "__requests": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 193,
          "column": 4,
          "index": 6460
        },
        "end": {
          "line": 193,
          "column": 20,
          "index": 6476
        }
      },
      "appearsIn": []
    },
    "__routes": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 6482
        },
        "end": {
          "line": 194,
          "column": 18,
          "index": 6496
        }
      },
      "appearsIn": []
    },
    "__baseUrl": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 6502
        },
        "end": {
          "line": 195,
          "column": 19,
          "index": 6517
        }
      },
      "appearsIn": []
    },
    "__pollTimers": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 6523
        },
        "end": {
          "line": 196,
          "column": 22,
          "index": 6541
        }
      },
      "appearsIn": []
    },
    "__longPollHandlers": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 197,
          "column": 4,
          "index": 6547
        },
        "end": {
          "line": 197,
          "column": 28,
          "index": 6571
        }
      },
      "appearsIn": []
    },
    "__configureRequestCallback": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 6577
        },
        "end": {
          "line": 198,
          "column": 36,
          "index": 6609
        }
      },
      "appearsIn": []
    },
    "__requestHandler": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} Request callbacks for 'onsuccess', 'onfail' and 'onloadend' - see {@link #setRequestHandler}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Request callbacks for 'onsuccess', 'onfail' and 'onloadend' - see {@link #setRequestHandler}."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 203,
          "column": 4,
          "index": 6745
        },
        "end": {
          "line": 203,
          "column": 26,
          "index": 6767
        }
      },
      "appearsIn": []
    },
    "__begetRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Function} Function which returns instances from {@link qx.io.request.AbstractRequest}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Function} Function which returns instances from {@link qx.io.request.AbstractRequest}."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 208,
          "column": 4,
          "index": 6891
        },
        "end": {
          "line": 208,
          "column": 24,
          "index": 6911
        }
      },
      "appearsIn": []
    },
    "setRequestFactory": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set a request factory function to switch the request implementation.",
          "     * The created requests have to implement {@link qx.io.request.AbstractRequest}.",
          "     *",
          "     * @param fn {Function} Function which returns request instances.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a request factory function to switch the request implementation.\n The created requests have to implement {@link qx.io.request.AbstractRequest}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fn {Function} Function which returns request instances.",
            "paramName": "fn",
            "description": " Function which returns request instances.",
            "type": "((...args: any[]) => any)"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 222,
          "column": 4,
          "index": 7226
        },
        "end": {
          "line": 224,
          "column": 5,
          "index": 7287
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fn",
          "type": "((...args: any[]) => any)"
        }
      ],
      "appearsIn": []
    },
    "setRequestHandler": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets request callbacks for 'onsuccess', 'onfail' and 'onloadend'.",
          "     *",
          "     * @param handler {Map} Map defining callbacks and their context.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets request callbacks for 'onsuccess', 'onfail' and 'onloadend'.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "handler {Map} Map defining callbacks and their context.",
            "paramName": "handler",
            "description": " Map defining callbacks and their context.",
            "type": "Map<any, any>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 233,
          "column": 4,
          "index": 7484
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 7557
        }
      },
      "type": "function",
      "params": [
        {
          "name": "handler",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "_getRequestHandler": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides the request callbacks for 'onsuccess', 'onfail' and 'onloadend'.",
          "     *",
          "     * @return {Map} Map defining callbacks and their context.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the request callbacks for 'onsuccess', 'onfail' and 'onloadend'.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map defining callbacks and their context.",
            "type": "Map<any, any>",
            "description": "Map defining callbacks and their context."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 242,
          "column": 4,
          "index": 7731
        },
        "end": {
          "line": 348,
          "column": 5,
          "index": 11132
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "getRequestsByAction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Retrieve the currently stored request objects for an action.",
          "     *",
          "     * @param action {String} The action (e.g. \"get\", \"post\" ...).",
          "     * @return {Array|null} Request objects.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Retrieve the currently stored request objects for an action.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The action (e.g. \"get\", \"post\" ...).",
            "paramName": "action",
            "description": " The action (e.g. \"get\", \"post\" ...).",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array|null} Request objects.",
            "type": "Array|null",
            "description": "Request objects."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 358,
          "column": 4,
          "index": 11366
        },
        "end": {
          "line": 361,
          "column": 5,
          "index": 11539
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Array|null"
      },
      "appearsIn": []
    },
    "configureRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Configure request.",
          "     *",
          "     * @param callback {Function} Function called before request is send.",
          "     *   Receives request, action, params and data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Configure request.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function called before request is send.\n   Receives request, action, params and data.",
            "paramName": "callback",
            "description": " Function called before request is send.\n   Receives request, action, params and data.",
            "type": "((...args: any[]) => any)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 369,
          "column": 4,
          "index": 11721
        },
        "end": {
          "line": 371,
          "column": 5,
          "index": 11805
        }
      },
      "type": "function",
      "params": [
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        }
      ],
      "appearsIn": []
    },
    "_getRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get request.",
          "     *",
          "     * May be overridden to change type of request.",
          "     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get request.\n May be overridden to change type of request.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object",
            "type": "qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest",
            "description": "Request object"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 11994
        },
        "end": {
          "line": 383,
          "column": 5,
          "index": 12131
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest"
      },
      "appearsIn": []
    },
    "__createRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Create request.",
          "     *",
          "     * @param action {String} The action the created request is associated to.",
          "     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create request.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The action the created request is associated to.",
            "paramName": "action",
            "description": " The action the created request is associated to.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object",
            "type": "qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest",
            "description": "Request object"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 391,
          "column": 4,
          "index": 12350
        },
        "end": {
          "line": 402,
          "column": 5,
          "index": 12629
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest"
      },
      "appearsIn": []
    },
    "map": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Map action to combination of method and URL pattern.",
          "     *",
          "     * @param action {String} Action to associate to request.",
          "     * @param method {String} Method to configure request with.",
          "     * @param url {String} URL to configure request with. May contain positional",
          "     *   parameters (<code>{param}</code>) that are replaced by values given when the action",
          "     *   is invoked. Parameters are optional, unless a check is defined. A default",
          "     *   value can be provided (<code>{param=default}</code>).",
          "     * @param check {Map?} Map defining parameter constraints, where the key is",
          "     *   the URL parameter and the value a regular expression (to match string) or",
          "     *   <code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map action to combination of method and URL pattern.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to associate to request.",
            "paramName": "action",
            "description": " Action to associate to request.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "method {String} Method to configure request with.",
            "paramName": "method",
            "description": " Method to configure request with.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "url {String} URL to configure request with. May contain positional\n   parameters (<code>{param}</code>) that are replaced by values given when the action\n   is invoked. Parameters are optional, unless a check is defined. A default\n   value can be provided (<code>{param=default}</code>).",
            "paramName": "url",
            "description": " URL to configure request with. May contain positional\n   parameters (<code>{param}</code>) that are replaced by values given when the action\n   is invoked. Parameters are optional, unless a check is defined. A default\n   value can be provided (<code>{param=default}</code>).",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "check {Map?} Map defining parameter constraints, where the key is\n   the URL parameter and the value a regular expression (to match string) or\n   <code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).",
            "paramName": "check",
            "description": " Map defining parameter constraints, where the key is\n   the URL parameter and the value a regular expression (to match string) or\n   <code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).",
            "optional": true,
            "type": "Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 421,
          "column": 4,
          "index": 13444
        },
        "end": {
          "line": 454,
          "column": 5,
          "index": 14473
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        },
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "check",
          "type": "Map",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "invoke": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Invoke action with parameters.",
          "     *",
          "     * Internally called by actions dynamically created.",
          "     *",
          "     * May be overridden to customize action and parameter handling.",
          "     *",
          "     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)",
          "     *",
          "     * @param action {String} Action to invoke.",
          "     * @param params {Map} Map of parameters inserted into URL when a matching",
          "     *  positional parameter is found.",
          "     * @param data {Map|String} Data to be send as part of the request.",
          "     *  See {@link qx.bom.request.SimpleXhr#getRequestData}.",
          "     *  See {@link qx.io.request.AbstractRequest#requestData}.",
          "     * @return {Number} Id of the action's invocation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Invoke action with parameters.\n Internally called by actions dynamically created.\n May be overridden to customize action and parameter handling.</p>"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreUnused(successHandler, failHandler, loadEndHandler)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to invoke.",
            "paramName": "action",
            "description": " Action to invoke.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "params {Map} Map of parameters inserted into URL when a matching\n  positional parameter is found.",
            "paramName": "params",
            "description": " Map of parameters inserted into URL when a matching\n  positional parameter is found.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "data {Map|String} Data to be send as part of the request.\n  See {@link qx.bom.request.SimpleXhr#getRequestData}.\n  See {@link qx.io.request.AbstractRequest#requestData}.",
            "paramName": "data",
            "description": " Data to be send as part of the request.\n  See {@link qx.bom.request.SimpleXhr#getRequestData}.\n  See {@link qx.io.request.AbstractRequest#requestData}.",
            "type": [
              "Map",
              "String"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Id of the action's invocation.",
            "type": "number",
            "description": "Id of the action's invocation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 473,
          "column": 4,
          "index": 15176
        },
        "end": {
          "line": 537,
          "column": 5,
          "index": 17139
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        },
        {
          "name": "params",
          "type": "Map<any, any>"
        },
        {
          "name": "data",
          "type": [
            "Map",
            "String"
          ]
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "setBaseUrl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set base URL.",
          "     *",
          "     * The base URL is prepended to the URLs given in the description.",
          "     * Changes affect all future invocations.",
          "     *",
          "     * @param baseUrl {String} Base URL.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set base URL.\n The base URL is prepended to the URLs given in the description.\n Changes affect all future invocations.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "baseUrl {String} Base URL.",
            "paramName": "baseUrl",
            "description": " Base URL.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 547,
          "column": 4,
          "index": 17355
        },
        "end": {
          "line": 549,
          "column": 5,
          "index": 17414
        }
      },
      "type": "function",
      "params": [
        {
          "name": "baseUrl",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__checkParameters": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Check parameters.",
          "     *",
          "     * @param params {Map} Parameters.",
          "     * @param check {Map} Checks.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check parameters.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "params {Map} Parameters.",
            "paramName": "params",
            "description": " Parameters.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "check {Map} Checks.",
            "paramName": "check",
            "description": " Checks.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 557,
          "column": 4,
          "index": 17542
        },
        "end": {
          "line": 595,
          "column": 5,
          "index": 18733
        }
      },
      "type": "function",
      "params": [
        {
          "name": "params",
          "type": "Map<any, any>"
        },
        {
          "name": "check",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "__configureRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Configure request.",
          "     *",
          "     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.",
          "     * @param config {Map} Configuration.",
          "     * @param data {Map} Data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Configure request.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.",
            "paramName": "req",
            "description": " Request.",
            "type": [
              "qx.bom.request.SimpleXhr",
              "qx.io.request.AbstractRequest"
            ]
          },
          {
            "name": "@param",
            "body": "config {Map} Configuration.",
            "paramName": "config",
            "description": " Configuration.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "data {Map} Data.",
            "paramName": "data",
            "description": " Data.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 604,
          "column": 4,
          "index": 18946
        },
        "end": {
          "line": 622,
          "column": 5,
          "index": 19370
        }
      },
      "type": "function",
      "params": [
        {
          "name": "req",
          "type": [
            "qx.bom.request.SimpleXhr",
            "qx.io.request.AbstractRequest"
          ]
        },
        {
          "name": "config",
          "type": "Map<any, any>"
        },
        {
          "name": "data",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "__configureJsonRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Serialize data to JSON when content type indicates.",
          "     *",
          "     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.",
          "     * @param config {Map} Configuration.",
          "     * @param data {Map} Data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Serialize data to JSON when content type indicates.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.",
            "paramName": "req",
            "description": " Request.",
            "type": [
              "qx.bom.request.SimpleXhr",
              "qx.io.request.AbstractRequest"
            ]
          },
          {
            "name": "@param",
            "body": "config {Map} Configuration.",
            "paramName": "config",
            "description": " Configuration.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "data {Map} Data.",
            "paramName": "data",
            "description": " Data.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 631,
          "column": 4,
          "index": 19616
        },
        "end": {
          "line": 645,
          "column": 5,
          "index": 20044
        }
      },
      "type": "function",
      "params": [
        {
          "name": "req",
          "type": [
            "qx.bom.request.SimpleXhr",
            "qx.io.request.AbstractRequest"
          ]
        },
        {
          "name": "config",
          "type": "Map<any, any>"
        },
        {
          "name": "data",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "abort": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Abort action.",
          "     *",
          "     * @param varargs {String|Number} Action of which all invocations to abort",
          "     *  (when string), or a single invocation of an action to abort (when number)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abort action.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "when string), or a single invocation of an action to abort (when number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 653,
          "column": 4,
          "index": 20256
        },
        "end": {
          "line": 670,
          "column": 5,
          "index": 20746
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs"
        }
      ],
      "appearsIn": []
    },
    "refresh": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Resend request associated to action.",
          "     *",
          "     * Replays parameters given when action was invoked originally.",
          "     *",
          "     * @param action {String} Action to refresh.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resend request associated to action.\n Replays parameters given when action was invoked originally.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to refresh.",
            "paramName": "action",
            "description": " Action to refresh.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 679,
          "column": 4,
          "index": 20944
        },
        "end": {
          "line": 681,
          "column": 5,
          "index": 21024
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "poll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Periodically invoke action.",
          "     *",
          "     * Replays parameters given when action was invoked originally. When the",
          "     * action was not yet invoked and requires parameters, parameters must be",
          "     * given.",
          "     *",
          "     * Please note that IE tends to cache overly aggressive. One work-around is",
          "     * to disable caching on the client side by configuring the request with",
          "     * <code>setCache(false)</code>. If you control the server, a better",
          "     * work-around is to include appropriate headers to explicitly control",
          "     * caching. This way you still avoid requests that can be correctly answered",
          "     * from cache (e.g. when nothing has changed since the last poll). Please",
          "     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">",
          "     * XMLHttpRequest Caching Test</a> for available options.",
          "     *",
          "     * @lint ignoreUnused(intervalListener)",
          "     *",
          "     * @param action {String} Action to poll.",
          "     * @param interval {Number} Interval in ms.",
          "     * @param params {Map?} Map of parameters. See {@link #invoke}.",
          "     * @param immediately {Boolean?false} <code>true</code>, if the poll should",
          "     *   invoke a call immediately.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Periodically invoke action.\n Replays parameters given when action was invoked originally. When the\n action was not yet invoked and requires parameters, parameters must be\n given.\n Please note that IE tends to cache overly aggressive. One work-around is\n to disable caching on the client side by configuring the request with\n <code>setCache(false)</code>. If you control the server, a better\n work-around is to include appropriate headers to explicitly control\n caching. This way you still avoid requests that can be correctly answered\n from cache (e.g. when nothing has changed since the last poll). Please\n refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\n XMLHttpRequest Caching Test</a> for available options.</p>"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreUnused(intervalListener)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "interval {Number} Interval in ms.",
            "paramName": "interval",
            "description": " Interval in ms.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "params {Map?} Map of parameters. See {@link #invoke}.",
            "paramName": "params",
            "description": " Map of parameters. See {@link #invoke}.",
            "optional": true,
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "immediately {Boolean?false} <code>true</code>, if the poll should\n   invoke a call immediately.",
            "paramName": "immediately",
            "description": " <code>true</code>, if the poll should\n   invoke a call immediately.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 707,
          "column": 4,
          "index": 22211
        },
        "end": {
          "line": 737,
          "column": 5,
          "index": 23059
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        },
        {
          "name": "interval",
          "type": "number"
        },
        {
          "name": "params",
          "type": "Map",
          "optional": true
        },
        {
          "name": "immediately",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "appearsIn": []
    },
    "_startPoll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Start a poll process.",
          "     *",
          "     * @param action {String} Action to poll.",
          "     * @param listener {Function} The function to repeatedly execute at the given interval.",
          "     * @param interval {Number} Interval in ms.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start a poll process.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function to repeatedly execute at the given interval.",
            "paramName": "listener",
            "description": " The function to repeatedly execute at the given interval.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "interval {Number} Interval in ms.",
            "paramName": "interval",
            "description": " Interval in ms.",
            "type": "number"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 746,
          "column": 4,
          "index": 23304
        },
        "end": {
          "line": 752,
          "column": 5,
          "index": 23502
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "interval",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "stopPollByAction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stops a poll process by the associated action.",
          "     *",
          "     * @param action {String} Action to poll.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops a poll process by the associated action.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 759,
          "column": 4,
          "index": 23632
        },
        "end": {
          "line": 764,
          "column": 5,
          "index": 23810
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "restartPollByAction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Restarts a poll process by the associated action.",
          "     *",
          "     * @param action {String} Action to poll.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restarts a poll process by the associated action.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 771,
          "column": 4,
          "index": 23943
        },
        "end": {
          "line": 777,
          "column": 5,
          "index": 24178
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "longPoll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Long-poll action.",
          "     *",
          "     * Use Ajax long-polling to continuously fetch a resource as soon as the",
          "     * server signals new data. The server determines when new data is available,",
          "     * while the client keeps open a request. Requires configuration on the",
          "     * server side. Basically, the server must not close a connection until",
          "     * new data is available. For a high level introduction to long-polling,",
          "     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">",
          "     * Ajax with long polling</a>.",
          "     *",
          "     * Uses {@link #refresh} internally. Make sure you understand the",
          "     * implications of IE's tendency to cache overly aggressive.",
          "     *",
          "     * Note no interval is given on the client side.",
          "     *",
          "     * @lint ignoreUnused(longPollHandler)",
          "     *",
          "     * @param action {String} Action to poll.",
          "     * @return {String} Id of handler responsible for long-polling. To stop",
          "     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Long-poll action.\n Use Ajax long-polling to continuously fetch a resource as soon as the\n server signals new data. The server determines when new data is available,\n while the client keeps open a request. Requires configuration on the\n server side. Basically, the server must not close a connection until\n new data is available. For a high level introduction to long-polling,\n refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\n Ajax with long polling</a>.\n Uses {@link #refresh} internally. Make sure you understand the\n implications of IE's tendency to cache overly aggressive.\n Note no interval is given on the client side.</p>"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreUnused(longPollHandler)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Id of handler responsible for long-polling. To stop\n  polling, remove handler using {@link qx.core.Object#removeListenerById}.",
            "type": "string",
            "description": "Id of handler responsible for long-polling. To stop\n  polling, remove handler using {@link qx.core.Object#removeListenerById}."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 801,
          "column": 4,
          "index": 25217
        },
        "end": {
          "line": 851,
          "column": 5,
          "index": 26686
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "_getRequestConfig": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get request configuration for action and parameters.",
          "     *",
          "     * This is were placeholders are replaced with parameters.",
          "     *",
          "     * @param action {String} Action associated to request.",
          "     * @param params {Map} Parameters to embed in request.",
          "     * @return {Map} Map of configuration settings. Has the properties",
          "     *   <code>method</code>, <code>url</code> and <code>check</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get request configuration for action and parameters.\n This is were placeholders are replaced with parameters.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action associated to request.",
            "paramName": "action",
            "description": " Action associated to request.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "params {Map} Parameters to embed in request.",
            "paramName": "params",
            "description": " Parameters to embed in request.",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of configuration settings. Has the properties\n   <code>method</code>, <code>url</code> and <code>check</code>.",
            "type": "Map<any, any>",
            "description": "Map of configuration settings. Has the properties\n   <code>method</code>, <code>url</code> and <code>check</code>."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 863,
          "column": 4,
          "index": 27107
        },
        "end": {
          "line": 898,
          "column": 5,
          "index": 28228
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        },
        {
          "name": "params",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "_getThrottleLimit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Override to adjust the throttle limit.",
          "     * @return {Integer} Throttle limit in milliseconds",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override to adjust the throttle limit.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Throttle limit in milliseconds",
            "type": "Integer",
            "description": "Throttle limit in milliseconds"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 904,
          "column": 4,
          "index": 28353
        },
        "end": {
          "line": 906,
          "column": 5,
          "index": 28435
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "_getThrottleCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Override to adjust the throttle count.",
          "     * @return {Integer} Throttle count",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override to adjust the throttle count.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Throttle count",
            "type": "Integer",
            "description": "Throttle count"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 912,
          "column": 4,
          "index": 28544
        },
        "end": {
          "line": 914,
          "column": 5,
          "index": 28626
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "__mapFromDescription": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Map actions from description.",
          "     *",
          "     * Allows to decoratively define routes.",
          "     *",
          "     * @param description {Map} Map that defines the routes.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Map actions from description.\n Allows to decoratively define routes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "description {Map} Map that defines the routes.",
            "paramName": "description",
            "description": " Map that defines the routes.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 923,
          "column": 4,
          "index": 28806
        },
        "end": {
          "line": 944,
          "column": 5,
          "index": 29428
        }
      },
      "type": "function",
      "params": [
        {
          "name": "description",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "__declareEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Declare event at runtime.",
          "     *",
          "     * @param type {String} Type of event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Declare event at runtime.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Type of event.",
            "paramName": "type",
            "description": " Type of event.",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 951,
          "column": 4,
          "index": 29534
        },
        "end": {
          "line": 959,
          "column": 5,
          "index": 29771
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "isDisposed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns true if the object is disposed.",
          "     *",
          "     * @return {Boolean} Whether the object has been disposed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true if the object is disposed.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has been disposed",
            "type": "boolean",
            "description": "Whether the object has been disposed"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 972,
          "column": 4,
          "index": 30100
        },
        "end": {
          "line": 974,
          "column": 5,
          "index": 30159
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "dispose": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Dispose this object",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose this object</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 980,
          "column": 4,
          "index": 30216
        },
        "end": {
          "line": 1064,
          "column": 5,
          "index": 32930
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    },
    "destruct": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Destructs the Resource.",
          "     *",
          "     * All created requests, routes and pollTimers will be disposed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Destructs the Resource.\n All created requests, routes and pollTimers will be disposed.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1071,
          "column": 4,
          "index": 33060
        },
        "end": {
          "line": 1096,
          "column": 5,
          "index": 33693
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "properties": {}
}