{
  "version": 0.3,
  "lastModified": 1717235169158,
  "lastModifiedIso": "2024-06-01T09:46:09.158Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/lang/Array.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 56,
      "column": 0,
      "index": 1533
    },
    "end": {
      "line": 668,
      "column": 3,
      "index": 18070
    }
  },
  "className": "qx.lang.Array",
  "jsdoc": {
    "raw": [
      "*",
      " * Static helper functions for arrays with a lot of often used convenience",
      " * methods like <code>remove</code> or <code>contains</code>.",
      " *",
      " * The native JavaScript Array is not modified by this class. However,",
      " * there are modifications to the native Array in {@link qx.lang.normalize.Array} for",
      " * browsers that do not support certain JavaScript features natively .",
      " *",
      " * @ignore(qx.data)",
      " * @ignore(qx.data.IListData)",
      " * @ignore(qx.Class.*)",
      " * @require(qx.lang.normalize.Date)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Static helper functions for arrays with a lot of often used convenience\n methods like <code>remove</code> or <code>contains</code>.\n The native JavaScript Array is not modified by this class. However,\n there are modifications to the native Array in {@link qx.lang.normalize.Array} for\n browsers that do not support certain JavaScript features natively .</p>"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "qx.data"
      },
      {
        "name": "@ignore",
        "body": "qx.data.IListData"
      },
      {
        "name": "@ignore",
        "body": "qx.Class.*"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.lang.normalize.Date"
      }
    ]
  },
  "statics": {
    "cast": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts an array like object to any other array like",
          "     * object.",
          "     *",
          "     * Attention: The returned array may be same",
          "     * instance as the incoming one if the constructor is identical!",
          "     *",
          "     * @param object {var} any array-like object",
          "     * @param constructor {Function} constructor of the new instance",
          "     * @param offset {Integer?0} position to start from",
          "     * @return {Array} the converted array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts an array like object to any other array like\n object.\n Attention: The returned array may be same\n instance as the incoming one if the constructor is identical!</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {var} any array-like object",
            "paramName": "object",
            "description": " any array-like object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "constructor {Function} constructor of the new instance",
            "paramName": "constructor",
            "description": " constructor of the new instance",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "offset {Integer?0} position to start from",
            "paramName": "offset",
            "description": " position to start from",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the converted array",
            "type": "Array<any>",
            "description": "the converted array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 2030
        },
        "end": {
          "line": 107,
          "column": 5,
          "index": 3074
        }
      },
      "type": "function",
      "params": [
        {
          "name": "object",
          "type": "var"
        },
        {
          "name": "constructor",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "offset",
          "type": "Integer",
          "optional": true,
          "defaultValue": "0"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "fromArguments": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert an arguments object into an array.",
          "     *",
          "     * @param args {arguments} arguments object",
          "     * @param offset {Integer?0} position to start from",
          "     * @return {Array} a newly created array (copy) with the content of the arguments object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert an arguments object into an array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} arguments object",
            "paramName": "args",
            "description": " arguments object",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "offset {Integer?0} position to start from",
            "paramName": "offset",
            "description": " position to start from",
            "optional": true,
            "defaultValue": "0",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} a newly created array (copy) with the content of the arguments object.",
            "type": "Array<any>",
            "description": "a newly created array (copy) with the content of the arguments object."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3352
        },
        "end": {
          "line": 122,
          "column": 5,
          "index": 3621
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "arguments"
        },
        {
          "name": "offset",
          "type": "Integer",
          "optional": true,
          "defaultValue": "0"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "fromCollection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert a (node) collection into an array",
          "     *",
          "     * @param coll {var} node collection",
          "     * @return {Array} a newly created array (copy) with the content of the node collection.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert a (node) collection into an array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "coll {var} node collection",
            "paramName": "coll",
            "description": " node collection",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} a newly created array (copy) with the content of the node collection.",
            "type": "Array<any>",
            "description": "a newly created array (copy) with the content of the node collection."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 3834
        },
        "end": {
          "line": 145,
          "column": 5,
          "index": 4284
        }
      },
      "type": "function",
      "params": [
        {
          "name": "coll",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "fromShortHand": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Expand shorthand definition to a four element list.",
          "     * This is an utility function for padding/margin and all other shorthand handling.",
          "     *",
          "     * @param input {Array} arr with one to four elements",
          "     * @return {Array} an arr with four elements",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Expand shorthand definition to a four element list.\n This is an utility function for padding/margin and all other shorthand handling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "input {Array} arr with one to four elements",
            "paramName": "input",
            "description": " arr with one to four elements",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an arr with four elements",
            "type": "Array<any>",
            "description": "an arr with four elements"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 4568
        },
        "end": {
          "line": 174,
          "column": 5,
          "index": 5021
        }
      },
      "type": "function",
      "params": [
        {
          "name": "input",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "clone": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return a copy of the given array",
          "     *",
          "     * @param arr {Array} the array to copy",
          "     * @return {Array} copy of the array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a copy of the given array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array to copy",
            "paramName": "arr",
            "description": " the array to copy",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} copy of the array",
            "type": "Array<any>",
            "description": "copy of the array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 5176
        },
        "end": {
          "line": 184,
          "column": 5,
          "index": 5221
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "insertAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert an element at a given position into the array",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param obj {var} the element to insert",
          "     * @param i {Integer} position where to insert the element into the array",
          "     * @return {Array} the array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element at a given position into the array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "obj {var} the element to insert",
            "paramName": "obj",
            "description": " the element to insert",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "i {Integer} position where to insert the element into the array",
            "paramName": "i",
            "description": " position where to insert the element into the array",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "Array<any>",
            "description": "the array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 194,
          "column": 4,
          "index": 5504
        },
        "end": {
          "line": 198,
          "column": 5,
          "index": 5581
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        },
        {
          "name": "obj",
          "type": "var"
        },
        {
          "name": "i",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "insertBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert an element into the array before a given second element.",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param obj {var} object to be inserted",
          "     * @param obj2 {var} insert obj1 before this object",
          "     * @return {Array} the array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element into the array before a given second element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "obj {var} object to be inserted",
            "paramName": "obj",
            "description": " object to be inserted",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "obj2 {var} insert obj1 before this object",
            "paramName": "obj2",
            "description": " insert obj1 before this object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "Array<any>",
            "description": "the array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 208,
          "column": 4,
          "index": 5853
        },
        "end": {
          "line": 218,
          "column": 5,
          "index": 6040
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        },
        {
          "name": "obj",
          "type": "var"
        },
        {
          "name": "obj2",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "insertAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert an element into the array after a given second element.",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param obj {var} object to be inserted",
          "     * @param obj2 {var} insert obj1 after this object",
          "     * @return {Array} the array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element into the array after a given second element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "obj {var} object to be inserted",
            "paramName": "obj",
            "description": " object to be inserted",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "obj2 {var} insert obj1 after this object",
            "paramName": "obj2",
            "description": " insert obj1 after this object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "Array<any>",
            "description": "the array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 228,
          "column": 4,
          "index": 6310
        },
        "end": {
          "line": 238,
          "column": 5,
          "index": 6523
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        },
        {
          "name": "obj",
          "type": "var"
        },
        {
          "name": "obj2",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove an element from the array at the given index",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param i {Integer} index of the element to be removed",
          "     * @return {var} The removed element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element from the array at the given index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "i {Integer} index of the element to be removed",
            "paramName": "i",
            "description": " index of the element to be removed",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed element.",
            "type": "var",
            "description": "The removed element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 247,
          "column": 4,
          "index": 6751
        },
        "end": {
          "line": 249,
          "column": 5,
          "index": 6809
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        },
        {
          "name": "i",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all elements from the array",
          "     *",
          "     * @param arr {Array} the array",
          "     * @return {Array} empty array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all elements from the array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} empty array",
            "type": "Array<any>",
            "description": "empty array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 257,
          "column": 4,
          "index": 6952
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 7015
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "append": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Append the elements of an array to the array",
          "     *",
          "     * @param arr1 {Array} the array",
          "     * @param arr2 {Array} the elements of this array will be appended to other one",
          "     * @return {Array} The modified array.",
          "     * @throws {Error} if one of the arguments is not an array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Append the elements of an array to the array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr1 {Array} the array",
            "paramName": "arr1",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "arr2 {Array} the elements of this array will be appended to other one",
            "paramName": "arr2",
            "description": " the elements of this array will be appended to other one",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The modified array.",
            "type": "Array<any>",
            "description": "The modified array."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the arguments is not an array",
            "type": "Error",
            "description": " if one of the arguments is not an array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 270,
          "column": 4,
          "index": 7324
        },
        "end": {
          "line": 296,
          "column": 5,
          "index": 8075
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr1",
          "type": "Array<any>"
        },
        {
          "name": "arr2",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "exclude": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Modifies the first array as it removes all elements",
          "     * which are listed in the second array as well.",
          "     *",
          "     * @param arr1 {Array} the array",
          "     * @param arr2 {Array} the elements of this array will be excluded from the other one",
          "     * @return {Array} The modified array.",
          "     * @throws {Error} if one of the arguments is not an array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Modifies the first array as it removes all elements\n which are listed in the second array as well.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr1 {Array} the array",
            "paramName": "arr1",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "arr2 {Array} the elements of this array will be excluded from the other one",
            "paramName": "arr2",
            "description": " the elements of this array will be excluded from the other one",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The modified array.",
            "type": "Array<any>",
            "description": "The modified array."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the arguments is not an array",
            "type": "Error",
            "description": " if one of the arguments is not an array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 8450
        },
        "end": {
          "line": 336,
          "column": 5,
          "index": 9233
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr1",
          "type": "Array<any>"
        },
        {
          "name": "arr2",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove an element from the array.",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param obj {var} element to be removed from the array",
          "     * @return {var} the removed element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element from the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "obj {var} element to be removed from the array",
            "paramName": "obj",
            "description": " element to be removed from the array",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the removed element",
            "type": "var",
            "description": "the removed element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 345,
          "column": 4,
          "index": 9442
        },
        "end": {
          "line": 356,
          "column": 5,
          "index": 9657
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        },
        {
          "name": "obj",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "contains": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the array contains the given element",
          "     *",
          "     * @deprecated {6.0} Please use Array instance include method instead",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param obj {var} object to look for",
          "     * @return {Boolean} whether the arr contains the element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the array contains the given element</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use Array instance include method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "obj {var} object to look for",
            "paramName": "obj",
            "description": " object to look for",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the arr contains the element",
            "type": "boolean",
            "description": "whether the arr contains the element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 367,
          "column": 4,
          "index": 9961
        },
        "end": {
          "line": 369,
          "column": 5,
          "index": 10019
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        },
        {
          "name": "obj",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "equals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Check whether the two arrays have the same content. Checks only the",
          "     * equality of the arrays' content.",
          "     *",
          "     * @param arr1 {Array} first array",
          "     * @param arr2 {Array} second array",
          "     * @return {Boolean} Whether the two arrays are equal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the two arrays have the same content. Checks only the\n equality of the arrays' content.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr1 {Array} first array",
            "paramName": "arr1",
            "description": " first array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "arr2 {Array} second array",
            "paramName": "arr2",
            "description": " second array",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the two arrays are equal",
            "type": "boolean",
            "description": "Whether the two arrays are equal"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 10301
        },
        "end": {
          "line": 398,
          "column": 5,
          "index": 10699
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr1",
          "type": "Array<any>"
        },
        {
          "name": "arr2",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "sum": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the sum of all values in the given array. Supports",
          "     * numeric values only.",
          "     *",
          "     * @param arr {Number[]} Array to process",
          "     * @return {Number} The sum of all values.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the sum of all values in the given array. Supports\n numeric values only.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Number[]} Array to process",
            "paramName": "arr",
            "description": " Array to process",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The sum of all values.",
            "type": "number",
            "description": "The sum of all values."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 407,
          "column": 4,
          "index": 10916
        },
        "end": {
          "line": 416,
          "column": 5,
          "index": 11109
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Number[]"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "max": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the highest value in the given array. Supports",
          "     * numeric values only.",
          "     *",
          "     * @param arr {Number[]} Array to process",
          "     * @return {Number|null} The highest of all values or undefined if array is empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the highest value in the given array. Supports\n numeric values only.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Number[]} Array to process",
            "paramName": "arr",
            "description": " Array to process",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number|null} The highest of all values or undefined if array is empty.",
            "type": "Number|null",
            "description": "The highest of all values or undefined if array is empty."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 425,
          "column": 4,
          "index": 11362
        },
        "end": {
          "line": 442,
          "column": 5,
          "index": 11763
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Number[]"
        }
      ],
      "returnType": {
        "type": "Number|null"
      },
      "appearsIn": []
    },
    "min": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the lowest value in the given array. Supports",
          "     * numeric values only.",
          "     *",
          "     * @param arr {Number[]} Array to process",
          "     * @return {Number|null} The lowest of all values or undefined if array is empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the lowest value in the given array. Supports\n numeric values only.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Number[]} Array to process",
            "paramName": "arr",
            "description": " Array to process",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number|null} The lowest of all values or undefined if array is empty.",
            "type": "Number|null",
            "description": "The lowest of all values or undefined if array is empty."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 451,
          "column": 4,
          "index": 12014
        },
        "end": {
          "line": 468,
          "column": 5,
          "index": 12415
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Number[]"
        }
      ],
      "returnType": {
        "type": "Number|null"
      },
      "appearsIn": []
    },
    "unique": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Recreates an array which is free of all duplicate elements from the original.",
          "     *",
          "     * This method does not modify the original array!",
          "     *",
          "     * Keep in mind that this methods deletes undefined indexes.",
          "     *",
          "     * @param arr {Array} Incoming array",
          "     * @return {Array} Returns a copy with no duplicates",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Recreates an array which is free of all duplicate elements from the original.\n This method does not modify the original array!\n Keep in mind that this methods deletes undefined indexes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} Incoming array",
            "paramName": "arr",
            "description": " Incoming array",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Returns a copy with no duplicates",
            "type": "Array<any>",
            "description": "Returns a copy with no duplicates"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 480,
          "column": 4,
          "index": 12762
        },
        "end": {
          "line": 554,
          "column": 5,
          "index": 14665
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "range": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a new array with integers from start to stop incremented or decremented by step.",
          "     *",
          "     * @param start {Integer} start of the new array, defaults to 0",
          "     * @param stop {Integer} stop of the new array",
          "     * @param step {Integer} increment / decrement - depends whether you use positive or negative values",
          "     * @return {Array} Returns a new array with integers",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new array with integers from start to stop incremented or decremented by step.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} start of the new array, defaults to 0",
            "paramName": "start",
            "description": " start of the new array, defaults to 0",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "stop {Integer} stop of the new array",
            "paramName": "stop",
            "description": " stop of the new array",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "step {Integer} increment / decrement - depends whether you use positive or negative values",
            "paramName": "step",
            "description": " increment / decrement - depends whether you use positive or negative values",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Returns a new array with integers",
            "type": "Array<any>",
            "description": "Returns a new array with integers"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 564,
          "column": 4,
          "index": 15072
        },
        "end": {
          "line": 581,
          "column": 5,
          "index": 15456
        }
      },
      "type": "function",
      "params": [
        {
          "name": "start",
          "type": "Integer"
        },
        {
          "name": "stop",
          "type": "Integer"
        },
        {
          "name": "step",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "replace": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces the contents of the array `dest`",
          "     *",
          "     * @param dest {Array|qx.data.Array} the array to edit (if null then a new array is created)",
          "     * @param src {Array|qx.data.Array} the array to copy from, or null",
          "     * @return {Array} the edited array (or the new array, if dest is null)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces the contents of the array <code>dest</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dest {Array|qx.data.Array} the array to edit (if null then a new array is created)",
            "paramName": "dest",
            "description": " the array to edit (if null then a new array is created)",
            "type": [
              "Array",
              "qx.data.Array"
            ]
          },
          {
            "name": "@param",
            "body": "src {Array|qx.data.Array} the array to copy from, or null",
            "paramName": "src",
            "description": " the array to copy from, or null",
            "type": [
              "Array",
              "qx.data.Array"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the edited array (or the new array, if dest is null)",
            "type": "Array<any>",
            "description": "the edited array (or the new array, if dest is null)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 590,
          "column": 4,
          "index": 15780
        },
        "end": {
          "line": 614,
          "column": 5,
          "index": 16324
        }
      },
      "type": "function",
      "params": [
        {
          "name": "dest",
          "type": [
            "Array",
            "qx.data.Array"
          ]
        },
        {
          "name": "src",
          "type": [
            "Array",
            "qx.data.Array"
          ]
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "toNativeArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a native array from src where possible; qx.data.Array is converted to its native array,",
          "     * in which case unless `clone` parameter is set to true the rules of qx.data.Array.toArray should",
          "     * be followed, ie that the array should not be manipulated directly.",
          "     *",
          "     * @param src {qx.data.Array|Array} the object to return as an array",
          "     * @param clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code",
          "     * @return {Array}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a native array from src where possible; qx.data.Array is converted to its native array,\n in which case unless <code>clone</code> parameter is set to true the rules of qx.data.Array.toArray should\n be followed, ie that the array should not be manipulated directly.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "src {qx.data.Array|Array} the object to return as an array",
            "paramName": "src",
            "description": " the object to return as an array",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          },
          {
            "name": "@param",
            "body": "clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}",
            "type": "Array<any>",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 625,
          "column": 4,
          "index": 16836
        },
        "end": {
          "line": 642,
          "column": 5,
          "index": 17245
        }
      },
      "type": "function",
      "params": [
        {
          "name": "src",
          "type": [
            "qx.data.Array",
            "Array"
          ]
        },
        {
          "name": "clone"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "toDataArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a `qx.data.Array` array from src where possible; if `clone` is true then the result will",
          "     * always be a new instance of `qx.data.Array` even if it is already a `qx.data.Array`",
          "     *",
          "     * @param src {qx.data.Array|Array} the object to return as `qx.data.Array`",
          "     * @param clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code",
          "     * @return {Array}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a <code>qx.data.Array</code> array from src where possible; if <code>clone</code> is true then the result will\n always be a new instance of <code>qx.data.Array</code> even if it is already a <code>qx.data.Array</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "src {qx.data.Array|Array} the object to return as <code>qx.data.Array</code>",
            "paramName": "src",
            "description": " the object to return as <code>qx.data.Array</code>",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          },
          {
            "name": "@param",
            "body": "clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array}",
            "type": "Array<any>",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 652,
          "column": 4,
          "index": 17679
        },
        "end": {
          "line": 666,
          "column": 5,
          "index": 18062
        }
      },
      "type": "function",
      "params": [
        {
          "name": "src",
          "type": [
            "qx.data.Array",
            "Array"
          ]
        },
        {
          "name": "clone"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}