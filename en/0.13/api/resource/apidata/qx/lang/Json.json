{
  "version": 0.3,
  "lastModified": 1735222259022,
  "lastModifiedIso": "2024-12-26T14:10:59.022Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/lang/Json.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 62,
      "column": 0,
      "index": 2216
    },
    "end": {
      "line": 207,
      "column": 3,
      "index": 8021
    }
  },
  "className": "qx.lang.Json",
  "jsdoc": {
    "raw": [
      "*",
      " * Exposes (potentially polyfilled or patched) window.JSON to qooxdoo",
      " * (enabled by <a href=\"https://github.com/bestiejs/json3\">JSON 3</a>).",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Exposes (potentially polyfilled or patched) window.JSON to qooxdoo\n (enabled by <a href=\"https://github.com/bestiejs/json3\">JSON 3</a>).</p>"
      }
    ]
  },
  "statics": {
    "stringify": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method produces a JSON text from a JavaScript value.",
          "     *",
          "     * When an object value is found, if the object contains a toJSON",
          "     * method, its toJSON method will be called and the result will be",
          "     * stringified. A toJSON method does not serialize: it returns the",
          "     * value represented by the name/value pair that should be serialized,",
          "     * or undefined if nothing should be serialized. The toJSON method",
          "     * will be passed the key associated with the value, and this will be",
          "     * bound to the object holding the key.",
          "     *",
          "     * For example, this would serialize Dates as ISO strings.",
          "     *",
          "     * <pre class=\"javascript\">",
          "     *     Date.prototype.toJSON = function (key) {",
          "     *         function f(n) {",
          "     *             // Format integers to have at least two digits.",
          "     *             return n < 10 ? '0' + n : n;",
          "     *         }",
          "     *",
          "     *         return this.getUTCFullYear()   + '-' +",
          "     *              f(this.getUTCMonth() + 1) + '-' +",
          "     *              f(this.getUTCDate())      + 'T' +",
          "     *              f(this.getUTCHours())     + ':' +",
          "     *              f(this.getUTCMinutes())   + ':' +",
          "     *              f(this.getUTCSeconds())   + 'Z';",
          "     *     };",
          "     * </pre>",
          "     *",
          "     * You can provide an optional replacer method. It will be passed the",
          "     * key and value of each member, with this bound to the containing",
          "     * object. The value that is returned from your method will be",
          "     * serialized. If your method returns undefined, then the member will",
          "     * be excluded from the serialization.",
          "     *",
          "     * If the replacer parameter is an array of strings, then it will be",
          "     * used to select the members to be serialized. It filters the results",
          "     * such that only members with keys listed in the replacer array are",
          "     * stringified.",
          "     *",
          "     * Values that do not have JSON representations, such as undefined or",
          "     * functions, will not be serialized. Such values in objects will be",
          "     * dropped; in arrays they will be replaced with null. You can use",
          "     * a replacer function to replace those with JSON values.",
          "     * JSON.stringify(undefined) returns undefined.",
          "     *",
          "     * The optional space parameter produces a stringification of the",
          "     * value that is filled with line breaks and indentation to make it",
          "     * easier to read.",
          "     *",
          "     * If the space parameter is a non-empty string, then that string will",
          "     * be used for indentation. If the space parameter is a number, then",
          "     * the indentation will be that many spaces.",
          "     *",
          "     * Example:",
          "     *",
          "     * <pre class=\"javascript\">",
          "     * text = JSON.stringify(['e', {pluribus: 'unum'}]);",
          "     * // text is '[\"e\",{\"pluribus\":\"unum\"}]'",
          "     *",
          "     *",
          "     * text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');",
          "     * // text is '[\\n\\t\"e\",\\n\\t{\\n\\t\\t\"pluribus\": \"unum\"\\n\\t}\\n]'",
          "     *",
          "     * text = JSON.stringify([new Date()], function (key, value) {",
          "     *     return this[key] instanceof Date ?",
          "     *         'Date(' + this[key] + ')' : value;",
          "     * });",
          "     * // text is '[\"Date(---current time---)\"]'",
          "     * </pre>",
          "     *",
          "     * @signature function(value, replacer, space)",
          "     *",
          "     * @param value {var} any JavaScript value, usually an object or array.",
          "     *",
          "     * @param replacer {Function?} an optional parameter that determines how",
          "     *    object values are stringified for objects. It can be a function or an",
          "     *    array of strings.",
          "     *",
          "     * @param space {String?} an optional parameter that specifies the",
          "     *    indentation of nested structures. If it is omitted, the text will",
          "     *    be packed without extra whitespace. If it is a number, it will specify",
          "     *    the number of spaces to indent at each level. If it is a string",
          "     *    (such as '\\t' or '&nbsp;'), it contains the characters used to indent",
          "     *    at each level.",
          "     *",
          "     * @return {String} The JSON string of the value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method produces a JSON text from a JavaScript value.\n When an object value is found, if the object contains a toJSON\n method, its toJSON method will be called and the result will be\n stringified. A toJSON method does not serialize: it returns the\n value represented by the name/value pair that should be serialized,\n or undefined if nothing should be serialized. The toJSON method\n will be passed the key associated with the value, and this will be\n bound to the object holding the key.\n For example, this would serialize Dates as ISO strings.\n </p>\n<pre class=\"javascript\">\n     Date.prototype.toJSON = function (key) {\n         function f(n) {\n\n             return n < 10 ? '0' + n : n;\n         }\n         return this.getUTCFullYear()   + '-' +\n              f(this.getUTCMonth() + 1) + '-' +\n              f(this.getUTCDate())      + 'T' +\n              f(this.getUTCHours())     + ':' +\n              f(this.getUTCMinutes())   + ':' +\n              f(this.getUTCSeconds())   + 'Z';\n     };\n </pre>\n<p>You can provide an optional replacer method. It will be passed the\n key and value of each member, with this bound to the containing\n object. The value that is returned from your method will be\n serialized. If your method returns undefined, then the member will\n be excluded from the serialization.\n If the replacer parameter is an array of strings, then it will be\n used to select the members to be serialized. It filters the results\n such that only members with keys listed in the replacer array are\n stringified.\n Values that do not have JSON representations, such as undefined or\n functions, will not be serialized. Such values in objects will be\n dropped; in arrays they will be replaced with null. You can use\n a replacer function to replace those with JSON values.\n JSON.stringify(undefined) returns undefined.\n The optional space parameter produces a stringification of the\n value that is filled with line breaks and indentation to make it\n easier to read.\n If the space parameter is a non-empty string, then that string will\n be used for indentation. If the space parameter is a number, then\n the indentation will be that many spaces.\n Example:\n </p>\n<pre class=\"javascript\">\n text = JSON.stringify(['e', {pluribus: 'unum'}]);\n\n text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\\t');\n\n text = JSON.stringify([new Date()], function (key, value) {\n     return this[key] instanceof Date ?\n         'Date(' + this[key] + ')' : value;\n });\n\n </pre>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(value, replacer, space)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} any JavaScript value, usually an object or array.",
            "paramName": "value",
            "description": " any JavaScript value, usually an object or array.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "replacer {Function?} an optional parameter that determines how\n    object values are stringified for objects. It can be a function or an\n    array of strings.",
            "paramName": "replacer",
            "description": " an optional parameter that determines how\n    object values are stringified for objects. It can be a function or an\n    array of strings.",
            "optional": true,
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "space {String?} an optional parameter that specifies the\n    indentation of nested structures. If it is omitted, the text will\n    be packed without extra whitespace. If it is a number, it will specify\n    the number of spaces to indent at each level. If it is a string\n    (such as '\\t' or '&nbsp;'), it contains the characters used to indent\n    at each level.",
            "paramName": "space",
            "description": " an optional parameter that specifies the\n    indentation of nested structures. If it is omitted, the text will\n    be packed without extra whitespace. If it is a number, it will specify\n    the number of spaces to indent at each level. If it is a string\n    (such as '\\t' or '&nbsp;'), it contains the characters used to indent\n    at each level.",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The JSON string of the value",
            "type": "string",
            "description": "The JSON string of the value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 6182
        },
        "end": {
          "line": 152,
          "column": 19,
          "index": 6197
        }
      },
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "parse": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This method parses a JSON text to produce an object or array.",
          "     * It can throw a SyntaxError exception.",
          "     *",
          "     * The optional reviver parameter is a function that can filter and",
          "     * transform the results. It receives each of the keys and values,",
          "     * and its return value is used instead of the original value.",
          "     * If it returns what it received, then the structure is not modified.",
          "     * If it returns undefined then the member is deleted.",
          "     *",
          "     * Example:",
          "     *",
          "     * <pre class=\"javascript\">",
          "     * // Parse the text. Values that look like ISO date strings will",
          "     * // be converted to Date objects.",
          "     *",
          "     * myData = JSON.parse(text, function (key, value)",
          "     * {",
          "     *   if (typeof value === 'string')",
          "     *   {",
          "     *     var a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);",
          "     *     if (a) {",
          "     *       return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));",
          "     *     }",
          "     *   }",
          "     *   return value;",
          "     * });",
          "     *",
          "     * myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {",
          "     *     var d;",
          "     *     if (typeof value === 'string' &&",
          "     *             value.slice(0, 5) === 'Date(' &&",
          "     *             value.slice(-1) === ')') {",
          "     *         d = new Date(value.slice(5, -1));",
          "     *         if (d) {",
          "     *             return d;",
          "     *         }",
          "     *     }",
          "     *     return value;",
          "     * });",
          "     * </pre>",
          "     *",
          "     * @signature function(text, reviver)",
          "     *",
          "     * @param text {String} JSON string to parse",
          "     *",
          "     * @param reviver {Function?} Optional reviver function to filter and",
          "     *    transform the results",
          "     *",
          "     * @return {Object} The parsed JSON object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method parses a JSON text to produce an object or array.\n It can throw a SyntaxError exception.\n The optional reviver parameter is a function that can filter and\n transform the results. It receives each of the keys and values,\n and its return value is used instead of the original value.\n If it returns what it received, then the structure is not modified.\n If it returns undefined then the member is deleted.\n Example:\n </p>\n<pre class=\"javascript\">\n\n\n myData = JSON.parse(text, function (key, value)\n {\n   if (typeof value === 'string')\n   {\n     var a = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)Z$/.exec(value);\n     if (a) {\n       return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));\n     }\n   }\n   return value;\n });\n myData = JSON.parse('[\"Date(09/09/2001)\"]', function (key, value) {\n     var d;\n     if (typeof value === 'string' &&\n             value.slice(0, 5) === 'Date(' &&\n             value.slice(-1) === ')') {\n         d = new Date(value.slice(5, -1));\n         if (d) {\n             return d;\n         }\n     }\n     return value;\n });\n </pre>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(text, reviver)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "text {String} JSON string to parse",
            "paramName": "text",
            "description": " JSON string to parse",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "reviver {Function?} Optional reviver function to filter and\n    transform the results",
            "paramName": "reviver",
            "description": " Optional reviver function to filter and\n    transform the results",
            "optional": true,
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The parsed JSON object",
            "type": "Record<any, any>",
            "description": "The parsed JSON object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 7968
        },
        "end": {
          "line": 205,
          "column": 15,
          "index": 7979
        }
      },
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}