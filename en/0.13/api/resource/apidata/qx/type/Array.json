{
  "version": 0.3,
  "lastModified": 1729101020096,
  "lastModifiedIso": "2024-10-16T17:50:20.096Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/type/Array.js",
  "type": "class",
  "location": {
    "start": {
      "line": 25,
      "column": 0,
      "index": 673
    },
    "end": {
      "line": 207,
      "column": 3,
      "index": 5448
    }
  },
  "className": "qx.type.Array",
  "jsdoc": {
    "raw": [
      "*",
      " * An extended array class which adds a lot of often used",
      " * convenience methods to the regular array like <code>remove</code> or",
      " * <code>contains</code>.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>An extended array class which adds a lot of often used\n convenience methods to the regular array like <code>remove</code> or\n <code>contains</code>.</p>"
      }
    ]
  },
  "superClass": "qx.type.BaseArray",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "length_or_items"
      }
    ],
    "location": {
      "start": {
        "line": 48,
        "column": 2,
        "index": 1454
      },
      "end": {
        "line": 50,
        "column": 3,
        "index": 1532
      }
    }
  },
  "members": {
    "clone": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a clone of the array. Primitive values are copied.",
          "     * Others are referenced.",
          "     *",
          "     * @return {Array} Cloned array instance",
          "     * @signature function()",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a clone of the array. Primitive values are copied.\n Others are referenced.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Cloned array instance",
            "type": "Array<any>",
            "description": "Cloned array instance"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 60,
          "column": 4,
          "index": 1745
        },
        "end": {
          "line": 60,
          "column": 45,
          "index": 1786
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "insertAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert an element at a given position",
          "     *",
          "     * @param obj {var} the element to insert",
          "     * @param i {Integer} position where to insert the element into the arr",
          "     * @return {Array} the array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element at a given position</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {var} the element to insert",
            "paramName": "obj",
            "description": " the element to insert",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "i {Integer} position where to insert the element into the arr",
            "paramName": "i",
            "description": " position where to insert the element into the arr",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "Array<any>",
            "description": "the array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 69,
          "column": 4,
          "index": 2016
        },
        "end": {
          "line": 72,
          "column": 5,
          "index": 2089
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "var"
        },
        {
          "name": "i",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "insertBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert an element before a given second element",
          "     *",
          "     * @param obj {var} object to be inserted",
          "     * @param obj2 {var} insert obj1 before this object",
          "     * @return {Array} the array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element before a given second element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {var} object to be inserted",
            "paramName": "obj",
            "description": " object to be inserted",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "obj2 {var} insert obj1 before this object",
            "paramName": "obj2",
            "description": " insert obj1 before this object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "Array<any>",
            "description": "the array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2309
        },
        "end": {
          "line": 91,
          "column": 5,
          "index": 2495
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "var"
        },
        {
          "name": "obj2",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "insertAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert an element after a given second element",
          "     *",
          "     * @param obj {var} object to be inserted",
          "     * @param obj2 {var} insert obj1 after this object",
          "     * @return {Array} the array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element after a given second element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {var} object to be inserted",
            "paramName": "obj",
            "description": " object to be inserted",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "obj2 {var} insert obj1 after this object",
            "paramName": "obj2",
            "description": " insert obj1 after this object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the array",
            "type": "Array<any>",
            "description": "the array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2713
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 2926
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "var"
        },
        {
          "name": "obj2",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove an element at the given index",
          "     *",
          "     * @param i {Integer} index of the element to be removed",
          "     * @return {var} The removed element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element at the given index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "i {Integer} index of the element to be removed",
            "paramName": "i",
            "description": " index of the element to be removed",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed element.",
            "type": "var",
            "description": "The removed element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3103
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3157
        }
      },
      "type": "function",
      "params": [
        {
          "name": "i",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all elements",
          "     *",
          "     * @return {Array} empty array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all elements</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} empty array",
            "type": "Array<any>",
            "description": "empty array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3249
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3310
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "append": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Append the elements of the given array",
          "     *",
          "     * @param arr {Array} the elements of this array will be appended to other one",
          "     * @return {Array} The modified array.",
          "     * @throws {Error} if one of the arguments is not an array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Append the elements of the given array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the elements of this array will be appended to other one",
            "paramName": "arr",
            "description": " the elements of this array will be appended to other one",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The modified array.",
            "type": "Array<any>",
            "description": "The modified array."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the arguments is not an array",
            "type": "Error",
            "description": " if one of the arguments is not an array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 139,
          "column": 4,
          "index": 3575
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 3700
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "prepend": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Prepend the elements of the given array.",
          "     *",
          "     * @param arr {Array} The elements of this array will be prepended to other one",
          "     * @return {Array} The modified array.",
          "     * @throws {Error} if one of the arguments is not an array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Prepend the elements of the given array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} The elements of this array will be prepended to other one",
            "paramName": "arr",
            "description": " The elements of this array will be prepended to other one",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The modified array.",
            "type": "Array<any>",
            "description": "The modified array."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if one of the arguments is not an array",
            "type": "Error",
            "description": " if one of the arguments is not an array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 3968
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 4111
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__toPlainArray": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper which checks for the given element and converts that to a",
          "     * native array if necessary.",
          "     *",
          "     * @param arr {Array} Native or qx.type.BaseArray to convert.",
          "     * @return {Array} A native array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper which checks for the given element and converts that to a\n native array if necessary.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} Native or qx.type.BaseArray to convert.",
            "paramName": "arr",
            "description": " Native or qx.type.BaseArray to convert.",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} A native array.",
            "type": "Array<any>",
            "description": "A native array."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 4352
        },
        "end": {
          "line": 181,
          "column": 5,
          "index": 4906
        }
      },
      "type": "function",
      "params": [
        {
          "name": "arr",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove an element",
          "     *",
          "     * @param obj {var} element to be removed from the array",
          "     * @return {var} the removed element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {var} element to be removed from the array",
            "paramName": "obj",
            "description": " element to be removed from the array",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the removed element",
            "type": "var",
            "description": "the removed element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 189,
          "column": 4,
          "index": 5063
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 5191
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "contains": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the array contains the given element",
          "     *",
          "     * @param obj {var} object to look for",
          "     * @return {Boolean} whether the array contains the element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the array contains the given element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {var} object to look for",
            "paramName": "obj",
            "description": " object to look for",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the array contains the element",
            "type": "boolean",
            "description": "whether the array contains the element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 203,
          "column": 4,
          "index": 5380
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 5440
        }
      },
      "type": "function",
      "params": [
        {
          "name": "obj",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}