{
  "version": 0.3,
  "lastModified": 1645577566000,
  "lastModifiedIso": "2022-02-23T00:52:46.000Z",
  "classFilename": "../../qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/Rpc.js",
  "type": "class",
  "location": {
    "start": {
      "line": 80,
      "column": 0,
      "index": 3025
    },
    "end": {
      "line": 1001,
      "column": 3,
      "index": 32705
    }
  },
  "className": "qx.io.remote.Rpc",
  "jsdoc": {
    "raw": [
      "*",
      " * Provides a Remote Procedure Call (RPC) implementation.",
      " *",
      " * Each instance of this class represents a \"Service\". These services can",
      " * correspond to various concepts on the server side (depending on the",
      " * programming language/environment being used), but usually, a service means",
      " * a class on the server.",
      " *",
      " * In case multiple instances of the same service are needed, they can be",
      " * distinguished by ids. If such an id is specified, the server routes all",
      " * calls to a service that have the same id to the same server-side instance.",
      " *",
      " * When calling a server-side method, the parameters and return values are",
      " * converted automatically. Supported types are int (and Integer), double",
      " * (and Double), String, Date, Map, and JavaBeans. Beans must have a default",
      " * constructor on the server side and are represented by simple JavaScript",
      " * objects on the client side (used as associative arrays with keys matching",
      " * the server-side properties). Beans can also be nested, but be careful not to",
      " * create circular references! There are no checks to detect these (which would",
      " * be expensive), so you as the user are responsible for avoiding them.",
      " *",
      " * A simple example:",
      " * <pre class='javascript'>",
      " *   function callRpcServer ()",
      " *   {",
      " *     var rpc = new qx.io.remote.Rpc();",
      " *     rpc.setTimeout(10000);",
      " *     rpc.setUrl(\"http://127.0.0.1:8007\");",
      " *     rpc.setServiceName(\"qooxdoo.admin\");",
      " *",
      " *     // call a remote procedure -- takes no arguments, returns a string",
      " *     var that = this;",
      " *     this.RpcRunning = rpc.callAsync(",
      " *       function(result, ex, id)",
      " *       {",
      " *         that.RpcRunning = null;",
      " *         if (ex == null) {",
      " *             alert(result);",
      " *         } else {",
      " *             alert(\"Async(\" + id + \") exception: \" + ex);",
      " *         }",
      " *       },",
      " *       \"fss.getBaseDir\");",
      " *   }",
      " * </pre>",
      " * __fss.getBaseDir__ is the remote procedure in this case, potential arguments",
      " * would be listed after the procedure name.",
      " * <p>",
      " * Passing data from the client (qooxdoo) side is demonstrated in the",
      " * qooxdoo-contrib project RpcExample. There are three ways to issue a remote",
      " * procedure call: synchronously (qx.io.remote.Rpc.callSync -- dangerous",
      " * because it blocks the whole browser, not just your application, so is",
      " * highly discouraged); async with results via a callback function",
      " * (qx.io.remote.Rpc.callAsync) and async with results via an event listener",
      " * (qx.io.remote.Rpc.callAsyncListeners).",
      " * <p>",
      " * @ignore(qx.core.ServerSettings.*)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Provides a Remote Procedure Call (RPC) implementation.\n Each instance of this class represents a \"Service\". These services can\n correspond to various concepts on the server side (depending on the\n programming language/environment being used), but usually, a service means\n a class on the server.\n In case multiple instances of the same service are needed, they can be\n distinguished by ids. If such an id is specified, the server routes all\n calls to a service that have the same id to the same server-side instance.\n When calling a server-side method, the parameters and return values are\n converted automatically. Supported types are int (and Integer), double\n (and Double), String, Date, Map, and JavaBeans. Beans must have a default\n constructor on the server side and are represented by simple JavaScript\n objects on the client side (used as associative arrays with keys matching\n the server-side properties). Beans can also be nested, but be careful not to\n create circular references! There are no checks to detect these (which would\n be expensive), so you as the user are responsible for avoiding them.\n A simple example:\n </p>\n<pre class='javascript'>\n   function callRpcServer ()\n   {\n     var rpc = new qx.io.remote.Rpc();\n     rpc.setTimeout(10000);\n     rpc.setUrl(\"http://127.0.0.1:8007\");\n     rpc.setServiceName(\"qooxdoo.admin\");\n\n     var that = this;\n     this.RpcRunning = rpc.callAsync(\n       function(result, ex, id)\n       {\n         that.RpcRunning = null;\n         if (ex == null) {\n             alert(result);\n         } else {\n             alert(\"Async(\" + id + \") exception: \" + ex);\n         }\n       },\n       \"fss.getBaseDir\");\n   }\n </pre>\n<p><strong>fss.getBaseDir</strong> is the remote procedure in this case, potential arguments\n would be listed after the procedure name.\n <p>\n Passing data from the client (qooxdoo) side is demonstrated in the\n qooxdoo-contrib project RpcExample. There are three ways to issue a remote\n procedure call: synchronously (qx.io.remote.Rpc.callSync -- dangerous\n because it blocks the whole browser, not just your application, so is\n highly discouraged); async with results via a callback function\n (qx.io.remote.Rpc.callAsync) and async with results via an event listener\n (qx.io.remote.Rpc.callAsyncListeners).\n <p></p>"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "qx.core.ServerSettings.*"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "url"
      },
      {
        "name": "serviceName"
      }
    ],
    "location": {
      "start": {
        "line": 106,
        "column": 2,
        "index": 4298
      },
      "end": {
        "line": 120,
        "column": 3,
        "index": 4599
      }
    }
  },
  "events": {
    "completed": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when call is completed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when call is completed.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4854
        },
        "end": {
          "line": 132,
          "column": 36,
          "index": 4886
        }
      }
    },
    "aborted": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when call aborted.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when call aborted.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 137,
          "column": 4,
          "index": 4941
        },
        "end": {
          "line": 137,
          "column": 34,
          "index": 4971
        }
      }
    },
    "failed": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when call failed.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when call failed.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 5025
        },
        "end": {
          "line": 142,
          "column": 33,
          "index": 5054
        }
      }
    },
    "timeout": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired when call timed out.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when call timed out.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 147,
          "column": 4,
          "index": 5111
        },
        "end": {
          "line": 147,
          "column": 34,
          "index": 5141
        }
      }
    }
  },
  "statics": {
    "origin": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Origins of errors",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Origins of errors</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 5391
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5481
        }
      },
      "appearsIn": []
    },
    "localError": {
      "jsdoc": {
        "raw": [
          "*",
          "     *  Locally-detected errors",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locally-detected errors</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 5536
        },
        "end": {
          "line": 174,
          "column": 5,
          "index": 5606
        }
      },
      "appearsIn": []
    },
    "CONVERT_DATES": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Boolean flag which controls the stringification of date objects.",
          "     * <code>null</code> for the default behavior, acts like false",
          "     * <code>true</code> for stringifying dates the old, qooxdoo specific way",
          "     * <code>false</code> using the native toJSON of date objects.",
          "     *",
          "     * When enabled, dates are converted to and parsed from",
          "     * a literal that complies to the format",
          "     *",
          "     * <code>new Date(Date.UTC(year,month,day,hour,min,sec,ms))</code>",
          "     *",
          "     * The server can fairly easily parse this in its JSON",
          "     * implementation by stripping off \"new Date(Date.UTC(\"",
          "     * from the beginning of the string, and \"))\" from the",
          "     * end of the string. What remains is the set of",
          "     * comma-separated date components, which are also very",
          "     * easy to parse.",
          "     *",
          "     * The work-around compensates for the fact that while the",
          "     * Date object is a primitive type in Javascript, the",
          "     * specification neglects to provide a literal form for it.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Boolean flag which controls the stringification of date objects.\n <code>null</code> for the default behavior, acts like false\n <code>true</code> for stringifying dates the old, qooxdoo specific way\n <code>false</code> using the native toJSON of date objects.\n When enabled, dates are converted to and parsed from\n a literal that complies to the format\n <code>new Date(Date.UTC(year,month,day,hour,min,sec,ms))</code>\n The server can fairly easily parse this in its JSON\n implementation by stripping off \"new Date(Date.UTC(\"\n from the beginning of the string, and \"))\" from the\n end of the string. What remains is the set of\n comma-separated date components, which are also very\n easy to parse.\n The work-around compensates for the fact that while the\n Date object is a primitive type in Javascript, the\n specification neglects to provide a literal form for it.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 6615
        },
        "end": {
          "line": 198,
          "column": 23,
          "index": 6634
        }
      },
      "appearsIn": []
    },
    "RESPONSE_JSON": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Boolean flag which controls whether to expect and verify a JSON",
          "     * response.",
          "     *",
          "     * Should be <code>true</code> when backend returns valid JSON.",
          "     *",
          "     * Date literals are parsed when CONVERT_DATES is <code>true</code>",
          "     * and comply to the format",
          "     *",
          "     * <code>\"new Date(Date.UTC(year,month,day,hour,min,sec,ms))\"</code>",
          "     *",
          "     * Note the surrounding quotes that encode the literal as string.",
          "     *",
          "     * Using valid JSON is recommended, because it allows to use",
          "     * {@link qx.lang.Json#parse} for parsing. {@link qx.lang.Json#parse}",
          "     * is preferred over the potentially insecure <code>eval</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Boolean flag which controls whether to expect and verify a JSON\n response.\n Should be <code>true</code> when backend returns valid JSON.\n Date literals are parsed when CONVERT_DATES is <code>true</code>\n and comply to the format\n <code>\"new Date(Date.UTC(year,month,day,hour,min,sec,ms))\"</code>\n Note the surrounding quotes that encode the literal as string.\n Using valid JSON is recommended, because it allows to use\n {@link qx.lang.Json#parse} for parsing. {@link qx.lang.Json#parse}\n is preferred over the potentially insecure <code>eval</code>.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 217,
          "column": 4,
          "index": 7303
        },
        "end": {
          "line": 217,
          "column": 23,
          "index": 7322
        }
      },
      "appearsIn": []
    },
    "makeServerURL": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates an URL for talking to a local service. A local service is one that",
          "     * lives in the same application as the page calling the service. For backends",
          "     * that don't support this auto-generation, this method returns null.",
          "     *",
          "     * @param instanceId {String ? null} an optional identifier for the",
          "     *                                   server side instance that should be",
          "     *                                   used. All calls to the same service",
          "     *                                   with the same instance id are",
          "     *                                   routed to the same object instance",
          "     *                                   on the server. The instance id can",
          "     *                                   also be used to provide additional",
          "     *                                   data for the service instantiation",
          "     *                                   on the server.",
          "     * @return {String} the url.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates an URL for talking to a local service. A local service is one that\n lives in the same application as the page calling the service. For backends\n that don't support this auto-generation, this method returns null.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "instanceId {String ? null} an optional identifier for the\n                                   server side instance that should be\n                                   used. All calls to the same service\n                                   with the same instance id are\n                                   routed to the same object instance\n                                   on the server. The instance id can\n                                   also be used to provide additional\n                                   data for the service instantiation\n                                   on the server.",
            "paramName": "instanceId",
            "description": " an optional identifier for the\n                                   server side instance that should be\n                                   used. All calls to the same service\n                                   with the same instance id are\n                                   routed to the same object instance\n                                   on the server. The instance id can\n                                   also be used to provide additional\n                                   data for the service instantiation\n                                   on the server.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the url.",
            "type": "string",
            "description": "the url."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 8281
        },
        "end": {
          "line": 250,
          "column": 5,
          "index": 8642
        }
      },
      "type": "function",
      "params": [
        {
          "name": "instanceId",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    }
  },
  "properties": {
    "timeout": {
      "location": {
        "start": {
          "line": 267,
          "column": 4,
          "index": 9112
        },
        "end": {
          "line": 270,
          "column": 5,
          "index": 9174
        }
      },
      "json": {
        "check": "Integer",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* The timeout for asynchronous calls in milliseconds. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The timeout for asynchronous calls in milliseconds.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "crossDomain": {
      "location": {
        "start": {
          "line": 281,
          "column": 4,
          "index": 9586
        },
        "end": {
          "line": 284,
          "column": 5,
          "index": 9649
        }
      },
      "json": {
        "check": "Boolean",
        "init": false
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Indicate that the request is cross domain.",
          "     *",
          "     * A request is cross domain if the request's URL points to a host other",
          "     * than the local host. This switches the concrete implementation that is",
          "     * used for sending the request from qx.io.remote.transport.XmlHttp to",
          "     * qx.io.remote.transport.Script because only the latter can handle cross",
          "     * domain requests.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Indicate that the request is cross domain.\n A request is cross domain if the request's URL points to a host other\n than the local host. This switches the concrete implementation that is\n used for sending the request from qx.io.remote.transport.XmlHttp to\n qx.io.remote.transport.Script because only the latter can handle cross\n domain requests.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "url": {
      "location": {
        "start": {
          "line": 287,
          "column": 4,
          "index": 9708
        },
        "end": {
          "line": 290,
          "column": 5,
          "index": 9765
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* The URL at which the service is located. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The URL at which the service is located.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "serviceName": {
      "location": {
        "start": {
          "line": 293,
          "column": 4,
          "index": 9802
        },
        "end": {
          "line": 296,
          "column": 5,
          "index": 9867
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* The service name.  "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The service name.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "serverData": {
      "location": {
        "start": {
          "line": 306,
          "column": 4,
          "index": 10317
        },
        "end": {
          "line": 309,
          "column": 5,
          "index": 10381
        }
      },
      "json": {
        "check": "Object",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Data sent as \"out of band\" data in the request to the server.  The",
          "     * format of the data is opaque to RPC and may be recognized only by",
          "     * particular servers It is up to the server to decide what to do with",
          "     * it: whether to ignore it, handle it locally before calling the",
          "     * specified method, or pass it on to the method.  This server data is",
          "     * not sent to the server if it has been set to 'null'.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data sent as \"out of band\" data in the request to the server.  The\n format of the data is opaque to RPC and may be recognized only by\n particular servers It is up to the server to decide what to do with\n it: whether to ignore it, handle it locally before calling the\n specified method, or pass it on to the method.  This server data is\n not sent to the server if it has been set to 'null'.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "username": {
      "location": {
        "start": {
          "line": 315,
          "column": 4,
          "index": 10500
        },
        "end": {
          "line": 318,
          "column": 5,
          "index": 10562
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Username to use for HTTP authentication. Null if HTTP authentication",
          "     * is not used.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Username to use for HTTP authentication. Null if HTTP authentication\n is not used.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "password": {
      "location": {
        "start": {
          "line": 324,
          "column": 4,
          "index": 10681
        },
        "end": {
          "line": 327,
          "column": 5,
          "index": 10743
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Password to use for HTTP authentication. Null if HTTP authentication",
          "     * is not used.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Password to use for HTTP authentication. Null if HTTP authentication\n is not used.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "useBasicHttpAuth": {
      "location": {
        "start": {
          "line": 332,
          "column": 4,
          "index": 10801
        },
        "end": {
          "line": 335,
          "column": 5,
          "index": 10872
        }
      },
      "json": {
        "check": "Boolean",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "      Use Basic HTTP Authentication",
          "    "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<pre><code>  Use Basic HTTP Authentication\n</code></pre>"
          }
        ]
      },
      "appearsIn": []
    },
    "protocol": {
      "location": {
        "start": {
          "line": 345,
          "column": 4,
          "index": 11135
        },
        "end": {
          "line": 350,
          "column": 5,
          "index": 11244
        }
      },
      "json": {
        "init": "2.0",
        "check": "[[ ObjectMethod Function ]]"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     *",
          "     * Whether to use the original qooxdoo RPC protocol or the",
          "     * now-standardized Version 2 protocol.  Defaults to the original qooxdoo",
          "     * protocol for backward compatibility.",
          "     *",
          "     * Valid values are \"qx1\" and \"2.0\".",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to use the original qooxdoo RPC protocol or the\n now-standardized Version 2 protocol.  Defaults to the original qooxdoo\n protocol for backward compatibility.\n Valid values are \"qx1\" and \"2.0\".</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__previousServerSuffix": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 360,
          "column": 4,
          "index": 11453
        },
        "end": {
          "line": 360,
          "column": 32,
          "index": 11481
        }
      },
      "appearsIn": []
    },
    "__currentServerSuffix": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 361,
          "column": 4,
          "index": 11487
        },
        "end": {
          "line": 361,
          "column": 31,
          "index": 11514
        }
      },
      "appearsIn": []
    },
    "createRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Factory method to create a request object. By default, a POST request",
          "     * will be made, and the expected response type will be",
          "     * \"application/json\". Classes extending this one may override this method",
          "     * to obtain a Request object with different parameters.",
          "     *",
          "     * @return {qx.io.remote.Request}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Factory method to create a request object. By default, a POST request\n will be made, and the expected response type will be\n \"application/json\". Classes extending this one may override this method\n to obtain a Request object with different parameters.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.io.remote.Request}",
            "type": "qx.io.remote.Request",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 371,
          "column": 4,
          "index": 11859
        },
        "end": {
          "line": 377,
          "column": 5,
          "index": 11996
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.io.remote.Request"
      },
      "appearsIn": []
    },
    "createRpcData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Factory method to create the object containing the remote procedure",
          "     * call data. By default, a qooxdoo-style RPC request is built, which",
          "     * contains the following members: \"service\", \"method\", \"id\", and",
          "     * \"params\". If a different style of RPC request is desired, a class",
          "     * extending this one may override this method.",
          "     *",
          "     * @param id {Integer}",
          "     *   The unique sequence number of this request.",
          "     *",
          "     * @param method {String}",
          "     *   The name of the method to be called",
          "     *",
          "     * @param parameters {Array}",
          "     *   An array containing the arguments to the called method.",
          "     *",
          "     * @param serverData {var}",
          "     *   \"Out-of-band\" data to be provided to the server.",
          "     *",
          "     * @return {Object}",
          "     *   The object to be converted to JSON and passed to the JSON-RPC",
          "     *   server.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Factory method to create the object containing the remote procedure\n call data. By default, a qooxdoo-style RPC request is built, which\n contains the following members: \"service\", \"method\", \"id\", and\n \"params\". If a different style of RPC request is desired, a class\n extending this one may override this method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Integer}\n   The unique sequence number of this request.",
            "paramName": "id",
            "description": "\n   The unique sequence number of this request.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "method {String}\n   The name of the method to be called",
            "paramName": "method",
            "description": "\n   The name of the method to be called",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "parameters {Array}\n   An array containing the arguments to the called method.",
            "paramName": "parameters",
            "description": "\n   An array containing the arguments to the called method.",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "serverData {var}\n   \"Out-of-band\" data to be provided to the server.",
            "paramName": "serverData",
            "description": "\n   \"Out-of-band\" data to be provided to the server.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}\n   The object to be converted to JSON and passed to the JSON-RPC\n   server.",
            "type": "Record<any, any>",
            "description": "   The object to be converted to JSON and passed to the JSON-RPC\n   server."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 402,
          "column": 4,
          "index": 12852
        },
        "end": {
          "line": 439,
          "column": 5,
          "index": 13953
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "Integer"
        },
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "parameters",
          "type": "Array<any>"
        },
        {
          "name": "serverData",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "_callInternal": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal RPC call method",
          "     *",
          "     * @lint ignoreDeprecated(eval)",
          "     *",
          "     * @param args {Array}",
          "     *   array of arguments",
          "     *",
          "     * @param callType {Integer}",
          "     *   0 = sync,",
          "     *   1 = async with handler,",
          "     *   2 = async event listeners",
          "     *",
          "     * @param refreshSession {Boolean}",
          "     *   whether a new session should be requested",
          "     *",
          "     * @return {var} the method call reference.",
          "     * @throws {Error} An error.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal RPC call method</p>"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreDeprecated(eval)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {Array}\n   array of arguments",
            "paramName": "args",
            "description": "\n   array of arguments",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "callType {Integer}\n   0 = sync,\n   1 = async with handler,\n   2 = async event listeners",
            "paramName": "callType",
            "description": "\n   0 = sync,\n   1 = async with handler,\n   2 = async event listeners",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "refreshSession {Boolean}\n   whether a new session should be requested",
            "paramName": "refreshSession",
            "description": "\n   whether a new session should be requested",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the method call reference.",
            "type": "var",
            "description": "the method call reference."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} An error.",
            "type": "Error",
            "description": " An error."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 460,
          "column": 4,
          "index": 14425
        },
        "end": {
          "line": 782,
          "column": 5,
          "index": 24157
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "Array<any>"
        },
        {
          "name": "callType",
          "type": "Integer"
        },
        {
          "name": "refreshSession",
          "type": "boolean"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "fixUrl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method to rewrite a URL with a stale session id (so that it includes",
          "     * the correct session id afterwards).",
          "     *",
          "     * @param url {String} the URL to examine.",
          "     * @return {String} the (possibly re-written) URL.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method to rewrite a URL with a stale session id (so that it includes\n the correct session id afterwards).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "url {String} the URL to examine.",
            "paramName": "url",
            "description": " the URL to examine.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the (possibly re-written) URL.",
            "type": "string",
            "description": "the (possibly re-written) URL."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 791,
          "column": 4,
          "index": 24415
        },
        "end": {
          "line": 812,
          "column": 5,
          "index": 24964
        }
      },
      "type": "function",
      "params": [
        {
          "name": "url",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "callSync": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Makes a synchronous server call. The method arguments (if any) follow",
          "     * after the method name (as normal JavaScript arguments, separated by",
          "     * commas, not as an array).",
          "     *",
          "     * If a problem occurs when making the call, an exception is thrown.",
          "     *",
          "     *",
          "     * WARNING.  With some browsers, the synchronous interface",
          "     * causes the browser to hang while awaiting a response!  If the server",
          "     * decides to pause for a minute or two, your browser may do nothing",
          "     * (including refreshing following window changes) until the response is",
          "     * received.  Instead, use the asynchronous interface.",
          "     *",
          "     *",
          "     * YOU HAVE BEEN WARNED.",
          "     *",
          "     *",
          "     * @param methodName {String} the name of the method to call.",
          "     * @param args {Array} an array of values passed through to the backend.",
          "     * @return {var} the result returned by the server.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Makes a synchronous server call. The method arguments (if any) follow\n after the method name (as normal JavaScript arguments, separated by\n commas, not as an array).\n If a problem occurs when making the call, an exception is thrown.\n WARNING.  With some browsers, the synchronous interface\n causes the browser to hang while awaiting a response!  If the server\n decides to pause for a minute or two, your browser may do nothing\n (including refreshing following window changes) until the response is\n received.  Instead, use the asynchronous interface.\n YOU HAVE BEEN WARNED.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "methodName {String} the name of the method to call.",
            "paramName": "methodName",
            "description": " the name of the method to call.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "args {Array} an array of values passed through to the backend.",
            "paramName": "args",
            "description": " an array of values passed through to the backend.",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the result returned by the server.",
            "type": "var",
            "description": "the result returned by the server."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 836,
          "column": 4,
          "index": 25870
        },
        "end": {
          "line": 838,
          "column": 5,
          "index": 25951
        }
      },
      "type": "function",
      "params": [
        {
          "name": "methodName",
          "type": "string"
        },
        {
          "name": "args",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "callAsync": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Makes an asynchronous server call. The method arguments (if any) follow",
          "     * after the method name (as normal JavaScript arguments, separated by",
          "     * commas, not as an array).",
          "     *",
          "     * When an answer from the server arrives, the <code>handler</code>",
          "     * function is called with the result of the call as the first, an",
          "     * exception as the second parameter, and the id (aka sequence number) of",
          "     * the invoking request as the third parameter. If the call was",
          "     * successful, the second parameter is <code>null</code>. If there was a",
          "     * problem, the second parameter contains an exception, and the first one",
          "     * is <code>null</code>.",
          "     *",
          "     *",
          "     * The return value of this method is a call reference that you can store",
          "     * if you want to abort the request later on. This value should be treated",
          "     * as opaque and can change completely in the future! The only thing you",
          "     * can rely on is that the <code>abort</code> method will accept this",
          "     * reference and that you can retrieve the sequence number of the request",
          "     * by invoking the getSequenceNumber() method (see below).",
          "     *",
          "     *",
          "     * If a specific method is being called, asynchronously, a number of times",
          "     * in succession, the getSequenceNumber() method may be used to",
          "     * disambiguate which request a response corresponds to.  The sequence",
          "     * number value is a value which increments with each request.)",
          "     *",
          "     *",
          "     * @param handler {Function} the callback function.",
          "     * @param methodName {String} the name of the method to call.",
          "     * @param args {Array} an array of values passed through to the backend.",
          "     * @return {var} the method call reference.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Makes an asynchronous server call. The method arguments (if any) follow\n after the method name (as normal JavaScript arguments, separated by\n commas, not as an array).\n When an answer from the server arrives, the <code>handler</code>\n function is called with the result of the call as the first, an\n exception as the second parameter, and the id (aka sequence number) of\n the invoking request as the third parameter. If the call was\n successful, the second parameter is <code>null</code>. If there was a\n problem, the second parameter contains an exception, and the first one\n is <code>null</code>.\n The return value of this method is a call reference that you can store\n if you want to abort the request later on. This value should be treated\n as opaque and can change completely in the future! The only thing you\n can rely on is that the <code>abort</code> method will accept this\n reference and that you can retrieve the sequence number of the request\n by invoking the getSequenceNumber() method (see below).\n If a specific method is being called, asynchronously, a number of times\n in succession, the getSequenceNumber() method may be used to\n disambiguate which request a response corresponds to.  The sequence\n number value is a value which increments with each request.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "handler {Function} the callback function.",
            "paramName": "handler",
            "description": " the callback function.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "methodName {String} the name of the method to call.",
            "paramName": "methodName",
            "description": " the name of the method to call.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "args {Array} an array of values passed through to the backend.",
            "paramName": "args",
            "description": " an array of values passed through to the backend.",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the method call reference.",
            "type": "var",
            "description": "the method call reference."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 873,
          "column": 4,
          "index": 27669
        },
        "end": {
          "line": 875,
          "column": 5,
          "index": 27760
        }
      },
      "type": "function",
      "params": [
        {
          "name": "handler",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "methodName",
          "type": "string"
        },
        {
          "name": "args",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "callAsyncListeners": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Makes an asynchronous server call and dispatches an event upon completion",
          "     * or failure. The method arguments (if any) follow after the method name",
          "     * (as normal JavaScript arguments, separated by commas, not as an array).",
          "     *",
          "     * When an answer from the server arrives (or fails to arrive on time), if",
          "     * an exception occurred, a \"failed\", \"timeout\" or \"aborted\" event, as",
          "     * appropriate, is dispatched to any waiting event listeners.  If no",
          "     * exception occurred, a \"completed\" event is dispatched.",
          "     *",
          "     *",
          "     * When a \"failed\", \"timeout\" or \"aborted\" event is dispatched, the event",
          "     * data contains an object with the properties 'origin', 'code', 'message'",
          "     * and 'id'.  The object has a toString() function which may be called to",
          "     * convert the exception to a string.",
          "     *",
          "     *",
          "     * When a \"completed\" event is dispatched, the event data contains a",
          "     * map with the JSON-RPC sequence number and result:",
          "     * <p>",
          "     * {",
          "     *   id: rpc_id,",
          "     *   result: json-rpc result",
          "     * }",
          "     *",
          "     *",
          "     * The return value of this method is a call reference that you can store",
          "     * if you want to abort the request later on. This value should be treated",
          "     * as opaque and can change completely in the future! The only thing you",
          "     * can rely on is that the <code>abort</code> method will accept this",
          "     * reference and that you can retrieve the sequence number of the request",
          "     * by invoking the getSequenceNumber() method (see below).",
          "     *",
          "     *",
          "     * If a specific method is being called, asynchronously, a number of times",
          "     * in succession, the getSequenceNumber() method may be used to",
          "     * disambiguate which request a response corresponds to.  The sequence",
          "     * number value is a value which increments with each request.)",
          "     *",
          "     *",
          "     * @param coalesce {Boolean} coalesce all failure types (\"failed\",",
          "     *                           \"timeout\", and \"aborted\") to \"failed\".",
          "     *                           This is reasonable in many cases, as",
          "     *                           the provided exception contains adequate",
          "     *                           disambiguating information.",
          "     * @param methodName {String} the name of the method to call.",
          "     * @param args {Array} an array of values passed through to the backend.",
          "     * @return {var} the method call reference.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Makes an asynchronous server call and dispatches an event upon completion\n or failure. The method arguments (if any) follow after the method name\n (as normal JavaScript arguments, separated by commas, not as an array).\n When an answer from the server arrives (or fails to arrive on time), if\n an exception occurred, a \"failed\", \"timeout\" or \"aborted\" event, as\n appropriate, is dispatched to any waiting event listeners.  If no\n exception occurred, a \"completed\" event is dispatched.\n When a \"failed\", \"timeout\" or \"aborted\" event is dispatched, the event\n data contains an object with the properties 'origin', 'code', 'message'\n and 'id'.  The object has a toString() function which may be called to\n convert the exception to a string.\n When a \"completed\" event is dispatched, the event data contains a\n map with the JSON-RPC sequence number and result:\n <p>\n {\n   id: rpc_id,\n   result: json-rpc result\n }\n The return value of this method is a call reference that you can store\n if you want to abort the request later on. This value should be treated\n as opaque and can change completely in the future! The only thing you\n can rely on is that the <code>abort</code> method will accept this\n reference and that you can retrieve the sequence number of the request\n by invoking the getSequenceNumber() method (see below).\n If a specific method is being called, asynchronously, a number of times\n in succession, the getSequenceNumber() method may be used to\n disambiguate which request a response corresponds to.  The sequence\n number value is a value which increments with each request.)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "coalesce {Boolean} coalesce all failure types (\"failed\",\n                           \"timeout\", and \"aborted\") to \"failed\".\n                           This is reasonable in many cases, as\n                           the provided exception contains adequate\n                           disambiguating information.",
            "paramName": "coalesce",
            "description": " coalesce all failure types (\"failed\",\n                           \"timeout\", and \"aborted\") to \"failed\".\n                           This is reasonable in many cases, as\n                           the provided exception contains adequate\n                           disambiguating information.",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "methodName {String} the name of the method to call.",
            "paramName": "methodName",
            "description": " the name of the method to call.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "args {Array} an array of values passed through to the backend.",
            "paramName": "args",
            "description": " an array of values passed through to the backend.",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the method call reference.",
            "type": "var",
            "description": "the method call reference."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 926,
          "column": 4,
          "index": 30155
        },
        "end": {
          "line": 928,
          "column": 5,
          "index": 30256
        }
      },
      "type": "function",
      "params": [
        {
          "name": "coalesce",
          "type": "boolean"
        },
        {
          "name": "methodName",
          "type": "string"
        },
        {
          "name": "args",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "refreshSession": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Refreshes a server session by retrieving the session id again from the",
          "     * server.",
          "     *",
          "     * The specified handler function is called when the refresh is",
          "     * complete. The first parameter can be <code>true</code> (indicating that",
          "     * a refresh either wasn't necessary at this time or it was successful) or",
          "     * <code>false</code> (indicating that a refresh would have been necessary",
          "     * but can't be performed because the server backend doesn't support",
          "     * it). If there is a non-null second parameter, it's an exception",
          "     * indicating that there was an error when refreshing the session.",
          "     *",
          "     *",
          "     * @param handler {Function} a callback function that is called when the",
          "     *                           refresh is complete (or failed).",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Refreshes a server session by retrieving the session id again from the\n server.\n The specified handler function is called when the refresh is\n complete. The first parameter can be <code>true</code> (indicating that\n a refresh either wasn't necessary at this time or it was successful) or\n <code>false</code> (indicating that a refresh would have been necessary\n but can't be performed because the server backend doesn't support\n it). If there is a non-null second parameter, it's an exception\n indicating that there was an error when refreshing the session.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "handler {Function} a callback function that is called when the\n                           refresh is complete (or failed).",
            "paramName": "handler",
            "description": " a callback function that is called when the\n                           refresh is complete (or failed).",
            "type": "((...args: any[]) => any)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 946,
          "column": 4,
          "index": 31056
        },
        "end": {
          "line": 963,
          "column": 5,
          "index": 31676
        }
      },
      "type": "function",
      "params": [
        {
          "name": "handler",
          "type": "((...args: any[]) => any)"
        }
      ],
      "appearsIn": []
    },
    "_isConvertDates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether to convert date objects to pseudo literals and",
          "     * parse with eval.",
          "     *",
          "     * Controlled by {@link #CONVERT_DATES}.",
          "     *",
          "     * @return {Boolean} Whether to convert.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to convert date objects to pseudo literals and\n parse with eval.\n Controlled by {@link #CONVERT_DATES}.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether to convert.",
            "type": "boolean",
            "description": "Whether to convert."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 973,
          "column": 4,
          "index": 31889
        },
        "end": {
          "line": 975,
          "column": 5,
          "index": 31961
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_isResponseJson": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether to expect and verify a JSON response.",
          "     *",
          "     * Controlled by {@link #RESPONSE_JSON}.",
          "     *",
          "     * @return {Boolean} Whether to expect JSON.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to expect and verify a JSON response.\n Controlled by {@link #RESPONSE_JSON}.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether to expect JSON.",
            "type": "boolean",
            "description": "Whether to expect JSON."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 984,
          "column": 4,
          "index": 32145
        },
        "end": {
          "line": 986,
          "column": 5,
          "index": 32217
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "abort": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Aborts an asynchronous server call. Consequently, the callback function",
          "     * provided to <code>callAsync</code> or <code>callAsyncListeners</code>",
          "     * will be called with an exception.",
          "     *",
          "     * @param opaqueCallRef {var} the call reference as returned by",
          "     *                            <code>callAsync</code> or",
          "     *                            <code>callAsyncListeners</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Aborts an asynchronous server call. Consequently, the callback function\n provided to <code>callAsync</code> or <code>callAsyncListeners</code>\n will be called with an exception.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "opaqueCallRef {var} the call reference as returned by\n                            <code>callAsync</code> or\n                            <code>callAsyncListeners</code>",
            "paramName": "opaqueCallRef",
            "description": " the call reference as returned by\n                            <code>callAsync</code> or\n                            <code>callAsyncListeners</code>",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 997,
          "column": 4,
          "index": 32638
        },
        "end": {
          "line": 999,
          "column": 5,
          "index": 32695
        }
      },
      "type": "function",
      "params": [
        {
          "name": "opaqueCallRef",
          "type": "var"
        }
      ],
      "appearsIn": []
    }
  }
}