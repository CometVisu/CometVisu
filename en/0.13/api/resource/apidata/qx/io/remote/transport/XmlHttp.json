{
  "version": 0.3,
  "lastModified": 1645577566000,
  "lastModifiedIso": "2022-02-23T00:52:46.000Z",
  "classFilename": "../../qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/transport/XmlHttp.js",
  "type": "class",
  "location": {
    "start": {
      "line": 28,
      "column": 0,
      "index": 718
    },
    "end": {
      "line": 943,
      "column": 3,
      "index": 27107
    }
  },
  "className": "qx.io.remote.transport.XmlHttp",
  "jsdoc": {
    "raw": [
      "*",
      " * Transports requests to a server using the native XmlHttpRequest object.",
      " *",
      " * This class should not be used directly by client programmers.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Transports requests to a server using the native XmlHttpRequest object.\n This class should not be used directly by client programmers.</p>"
      }
    ]
  },
  "superClass": "qx.io.remote.transport.Abstract",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "statics": {
    "handles": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Capabilities of this transport type.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Capabilities of this transport type.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1135
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 1447
        }
      },
      "appearsIn": []
    },
    "createRequestObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return a new XMLHttpRequest object suitable for the client browser.",
          "     *",
          "     * @return {Object} native XMLHttpRequest object",
          "     * @signature function()",
          "     *",
          "     * @ignore(XMLHttpRequest)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a new XMLHttpRequest object suitable for the client browser.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} native XMLHttpRequest object",
            "type": "Record<any, any>",
            "description": "native XMLHttpRequest object"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@ignore": [
          {
            "name": "@ignore",
            "body": "XMLHttpRequest"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1672
        },
        "end": {
          "line": 91,
          "column": 6,
          "index": 2634
        }
      },
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "isSupported": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the transport type is supported by the client.",
          "     *",
          "     * @return {Boolean} supported or not",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the transport type is supported by the client.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} supported or not",
            "type": "boolean",
            "description": "supported or not"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2768
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2832
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__timeout": {
      "jsdoc": {
        "raw": [
          "* The timeout for Xhr requests "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The timeout for Xhr requests</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2879
        },
        "end": {
          "line": 103,
          "column": 16,
          "index": 2891
        }
      },
      "appearsIn": []
    },
    "setTimeout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the timeout for requests",
          "     * @deprecated {6.0} This method is deprecated from the start because synchronous I/O itself is deprecated",
          "     *  in the W3C spec {@link https://xhr.spec.whatwg.org/} and timeouts are indicative of synchronous I/O and/or",
          "     *  other server issues.  However, this API is still supported by many browsers and this API is useful",
          "     *  for code which has not made the transition to asynchronous I/O",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the timeout for requests</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} This method is deprecated from the start because synchronous I/O itself is deprecated\n  in the W3C spec {@link https://xhr.spec.whatwg.org/} and timeouts are indicative of synchronous I/O and/or\n  other server issues.  However, this API is still supported by many browsers and this API is useful\n  for code which has not made the transition to asynchronous I/O"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3355
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3414
        }
      },
      "type": "function",
      "params": [
        {
          "name": "timeout"
        }
      ],
      "appearsIn": []
    },
    "getTimeout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the timeout for requests",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the timeout for requests</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 3477
        },
        "end": {
          "line": 121,
          "column": 5,
          "index": 3526
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "properties": {
    "parseJson": {
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 4164
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4224
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * If true and the responseType property is set to \"application/json\", getResponseContent() will",
          "     * return a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().",
          "     * If false, the raw string data will be returned and the parsing must be done manually.",
          "     * This is useful for special JSON dialects / extensions which are not supported by",
          "     * qx.lang.Json.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If true and the responseType property is set to \"application/json\", getResponseContent() will\n return a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().\n If false, the raw string data will be returned and the parsing must be done manually.\n This is useful for special JSON dialects / extensions which are not supported by\n qx.lang.Json.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__localRequest": {
      "jsdoc": {
        "raw": [
          "",
          "    ---------------------------------------------------------------------------",
          "      CORE METHODS",
          "    ---------------------------------------------------------------------------",
          "    "
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 157,
          "column": 4,
          "index": 4627
        },
        "end": {
          "line": 157,
          "column": 25,
          "index": 4648
        }
      },
      "appearsIn": []
    },
    "__lastReadyState": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 158,
          "column": 4,
          "index": 4654
        },
        "end": {
          "line": 158,
          "column": 23,
          "index": 4673
        }
      },
      "appearsIn": []
    },
    "__request": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4679
        },
        "end": {
          "line": 159,
          "column": 19,
          "index": 4694
        }
      },
      "appearsIn": []
    },
    "getRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the native request object",
          "     *",
          "     * @return {Object} native XmlHTTPRequest object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the native request object</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} native XmlHTTPRequest object",
            "type": "Record<any, any>",
            "description": "native XmlHTTPRequest object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 4818
        },
        "end": {
          "line": 176,
          "column": 5,
          "index": 5121
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "send": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Implementation for sending the request",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation for sending the request</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 5391
        },
        "end": {
          "line": 389,
          "column": 5,
          "index": 11406
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "failedLocally": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Force the transport into the failed state (\"failed\").",
          "     *",
          "     * This method should be used only if the requests URI was local",
          "     * access. I.e. it started with \"file://\".",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the transport into the failed state (\"failed\").\n This method should be used only if the requests URI was local\n access. I.e. it started with \"file://\".</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 398,
          "column": 4,
          "index": 11620
        },
        "end": {
          "line": 407,
          "column": 5,
          "index": 11842
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_onreadystatechange": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listener method for change of the \"readystate\".",
          "     * Sets the internal state and informs the transport layer.",
          "     *",
          "     * @signature function(e)",
          "     * @param e {Event} native event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener method for change of the \"readystate\".\n Sets the internal state and informs the transport layer.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} native event",
            "paramName": "e",
            "description": " native event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 422,
          "column": 4,
          "index": 12253
        },
        "end": {
          "line": 478,
          "column": 6,
          "index": 14060
        }
      },
      "appearsIn": []
    },
    "getReadyState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the ready state of this transports request.",
          "     *",
          "     * For qx.io.remote.transport.XmlHttp, ready state is a number between 1 to 4.",
          "     *",
          "     * @return {Integer} ready state number",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the ready state of this transports request.\n For qx.io.remote.transport.XmlHttp, ready state is a number between 1 to 4.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} ready state number",
            "type": "Integer",
            "description": "ready state number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 493,
          "column": 4,
          "index": 14472
        },
        "end": {
          "line": 501,
          "column": 5,
          "index": 14639
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "setRequestHeader": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set a request header to this transports request.",
          "     *",
          "     * @param vLabel {String} Request header name",
          "     * @param vValue {var} Request header value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a request header to this transports request.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vLabel {String} Request header name",
            "paramName": "vLabel",
            "description": " Request header name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "vValue {var} Request header value",
            "paramName": "vValue",
            "description": " Request header value",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 515,
          "column": 4,
          "index": 15027
        },
        "end": {
          "line": 517,
          "column": 5,
          "index": 15116
        }
      },
      "type": "function",
      "params": [
        {
          "name": "vLabel",
          "type": "string"
        },
        {
          "name": "vValue",
          "type": "var"
        }
      ],
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getResponseHeader": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a specific header provided by the server upon sending a request,",
          "     * with header name determined by the argument headerName.",
          "     *",
          "     * Only available at readyState 3 and 4 universally and in readyState 2",
          "     * in Gecko.",
          "     *",
          "     * Please note: Some servers/proxies (such as Selenium RC) will capitalize",
          "     * response header names. This is in accordance with RFC 2616[1], which",
          "     * states that HTTP 1.1 header names are case-insensitive, so your",
          "     * application should be case-agnostic when dealing with response headers.",
          "     *",
          "     * [1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC 2616: HTTP Message Headers</a>",
          "     *",
          "     * @param vLabel {String} Response header name",
          "     * @return {String|null} Response header value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a specific header provided by the server upon sending a request,\n with header name determined by the argument headerName.\n Only available at readyState 3 and 4 universally and in readyState 2\n in Gecko.\n Please note: Some servers/proxies (such as Selenium RC) will capitalize\n response header names. This is in accordance with RFC 2616[1], which\n states that HTTP 1.1 header names are case-insensitive, so your\n application should be case-agnostic when dealing with response headers.\n [1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC 2616: HTTP Message Headers</a></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vLabel {String} Response header name",
            "paramName": "vLabel",
            "description": " Response header name",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} Response header value",
            "type": "String|null",
            "description": "Response header value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 542,
          "column": 4,
          "index": 16131
        },
        "end": {
          "line": 550,
          "column": 5,
          "index": 16343
        }
      },
      "type": "function",
      "params": [
        {
          "name": "vLabel",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "String|null"
      },
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getStringResponseHeaders": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns all response headers of the request.",
          "     *",
          "     * @return {var} response headers",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all response headers of the request.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} response headers",
            "type": "var",
            "description": "response headers"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 557,
          "column": 4,
          "index": 16463
        },
        "end": {
          "line": 569,
          "column": 5,
          "index": 16739
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "getResponseHeaders": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides a hash of all response headers.",
          "     *",
          "     * @return {var} hash of all response headers",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides a hash of all response headers.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} hash of all response headers",
            "type": "var",
            "description": "hash of all response headers"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 576,
          "column": 4,
          "index": 16867
        },
        "end": {
          "line": 593,
          "column": 5,
          "index": 17304
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "var"
      },
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getStatusCode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current status code of the request if available or -1 if not.",
          "     *",
          "     * @return {Integer} current status code",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current status code of the request if available or -1 if not.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} current status code",
            "type": "Integer",
            "description": "current status code"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 606,
          "column": 4,
          "index": 17656
        },
        "end": {
          "line": 620,
          "column": 5,
          "index": 17973
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getStatusText": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides the status text for the current request if available and null",
          "     * otherwise.",
          "     *",
          "     * @return {String} current status code text",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the status text for the current request if available and null\n otherwise.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} current status code text",
            "type": "string",
            "description": "current status code text"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 628,
          "column": 4,
          "index": 18148
        },
        "end": {
          "line": 636,
          "column": 5,
          "index": 18313
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getResponseText": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides the response text from the request when available and null",
          "     * otherwise.  By passing true as the \"partial\" parameter of this method,",
          "     * incomplete data will be made available to the caller.",
          "     *",
          "     * @return {String} Content of the response as string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the response text from the request when available and null\n otherwise.  By passing true as the \"partial\" parameter of this method,\n incomplete data will be made available to the caller.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Content of the response as string",
            "type": "string",
            "description": "Content of the response as string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 651,
          "column": 4,
          "index": 18818
        },
        "end": {
          "line": 661,
          "column": 5,
          "index": 19032
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getResponseXml": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides the XML provided by the response if any and null otherwise.  By",
          "     * passing true as the \"partial\" parameter of this method, incomplete data will",
          "     * be made available to the caller.",
          "     *",
          "     * @return {String} Content of the response as XML",
          "     * @throws {Error} If an error within the response occurs.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the XML provided by the response if any and null otherwise.  By\n passing true as the \"partial\" parameter of this method, incomplete data will\n be made available to the caller.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Content of the response as XML",
            "type": "string",
            "description": "Content of the response as XML"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If an error within the response occurs.",
            "type": "Error",
            "description": " If an error within the response occurs."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 671,
          "column": 4,
          "index": 19384
        },
        "end": {
          "line": 721,
          "column": 5,
          "index": 20982
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getFetchedLength": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the length of the content as fetched thus far",
          "     *",
          "     * @return {Integer} Length of the response text.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the length of the content as fetched thus far</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Length of the response text.",
            "type": "Integer",
            "description": "Length of the response text."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 728,
          "column": 4,
          "index": 21127
        },
        "end": {
          "line": 731,
          "column": 5,
          "index": 21253
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    },
    "getResponseContent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the content of the response",
          "     *",
          "     * @return {null | String} Response content if available",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the content of the response</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{null | String} Response content if available",
            "type": "null | String",
            "description": "Response content if available"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 738,
          "column": 4,
          "index": 21387
        },
        "end": {
          "line": 842,
          "column": 5,
          "index": 24465
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "null | String"
      },
      "appearsIn": []
    },
    "_applyState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply method for the \"state\" property.",
          "     * Fires an event for each state value to inform the listeners.",
          "     *",
          "     * @param value {var} Current value",
          "     * @param old {var} Previous value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for the \"state\" property.\n Fires an event for each state value to inform the listeners.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "var"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 857,
          "column": 4,
          "index": 24884
        },
        "end": {
          "line": 899,
          "column": 5,
          "index": 25833
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "old",
          "type": "var"
        }
      ],
      "overriddenFrom": "qx.io.remote.transport.Abstract",
      "appearsIn": [
        "qx.io.remote.transport.Abstract"
      ]
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 923,
        "column": 2,
        "index": 26500
      },
      "end": {
        "line": 942,
        "column": 3,
        "index": 27102
      }
    }
  }
}