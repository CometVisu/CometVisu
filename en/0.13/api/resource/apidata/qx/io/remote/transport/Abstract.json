{
  "version": 0.3,
  "lastModified": 1645577566000,
  "lastModifiedIso": "2022-02-23T00:52:46.000Z",
  "classFilename": "../../qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/transport/Abstract.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 563
    },
    "end": {
      "line": 451,
      "column": 3,
      "index": 11285
    }
  },
  "className": "qx.io.remote.transport.Abstract",
  "jsdoc": {
    "raw": [
      "*",
      " * Abstract for all transport implementations",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Abstract for all transport implementations</p>"
      }
    ]
  },
  "isSingleton": false,
  "abstract": true,
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 33,
        "column": 2,
        "index": 853
      },
      "end": {
        "line": 39,
        "column": 3,
        "index": 972
      }
    }
  },
  "events": {
    "created": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Event when a request is created "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is created</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1217
        },
        "end": {
          "line": 49,
          "column": 34,
          "index": 1247
        }
      }
    },
    "configured": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Event when a request is configured "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is configured</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1300
        },
        "end": {
          "line": 52,
          "column": 37,
          "index": 1333
        }
      }
    },
    "sending": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Event when a request is send "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is send</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1380
        },
        "end": {
          "line": 55,
          "column": 34,
          "index": 1410
        }
      }
    },
    "receiving": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Event when a request is received "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is received</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1461
        },
        "end": {
          "line": 58,
          "column": 36,
          "index": 1493
        }
      }
    },
    "completed": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Event when a request is completed "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is completed</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1545
        },
        "end": {
          "line": 61,
          "column": 36,
          "index": 1577
        }
      }
    },
    "aborted": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Event when a request is aborted "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request is aborted</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1627
        },
        "end": {
          "line": 64,
          "column": 34,
          "index": 1657
        }
      }
    },
    "failed": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Event when a request has failed "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request has failed</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 1707
        },
        "end": {
          "line": 67,
          "column": 33,
          "index": 1736
        }
      }
    },
    "timeout": {
      "type": "qx.event.type.Event",
      "jsdoc": {
        "raw": [
          "* Event when a request has timed out "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event when a request has timed out</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 1789
        },
        "end": {
          "line": 70,
          "column": 34,
          "index": 1819
        }
      }
    }
  },
  "properties": {
    "url": {
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2080
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2137
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Target url to issue the request to "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Target url to issue the request to</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "method": {
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2196
        },
        "end": {
          "line": 91,
          "column": 5,
          "index": 2275
        }
      },
      "json": {
        "check": "String",
        "nullable": true,
        "init": "GET"
      },
      "jsdoc": {
        "raw": [
          "* Determines what type of request to issue "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determines what type of request to issue</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "asynchronous": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2325
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2410
        }
      },
      "json": {
        "check": "Boolean",
        "nullable": true,
        "init": true
      },
      "jsdoc": {
        "raw": [
          "* Set the request to asynchronous "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the request to asynchronous</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "data": {
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2469
        },
        "end": {
          "line": 104,
          "column": 5,
          "index": 2527
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Set the data to be sent via this request "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the data to be sent via this request</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "username": {
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 2585
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 2647
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Username to use for HTTP authentication "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Username to use for HTTP authentication</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "password": {
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 2705
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 2767
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Password to use for HTTP authentication "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Password to use for HTTP authentication</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "state": {
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 2818
        },
        "end": {
          "line": 133,
          "column": 5,
          "index": 3093
        }
      },
      "json": {
        "check": [
          "created",
          "configured",
          "sending",
          "receiving",
          "completed",
          "aborted",
          "timeout",
          "failed"
        ],
        "init": "created",
        "event": "changeState",
        "apply": "_applyState"
      },
      "jsdoc": {
        "raw": [
          "* The state of the current request "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The state of the current request</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "requestHeaders": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3127
        },
        "end": {
          "line": 139,
          "column": 5,
          "index": 3195
        }
      },
      "json": {
        "check": "Object",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Request headers "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request headers</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "parameters": {
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 3241
        },
        "end": {
          "line": 145,
          "column": 5,
          "index": 3305
        }
      },
      "json": {
        "check": "Object",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Request parameters to send. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request parameters to send.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "formFields": {
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 3352
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 3416
        }
      },
      "json": {
        "check": "Object",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Request form fields to send. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request form fields to send.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "responseType": {
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 3448
        },
        "end": {
          "line": 157,
          "column": 5,
          "index": 3514
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Response Type "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Response Type</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "useBasicHttpAuth": {
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 3562
        },
        "end": {
          "line": 163,
          "column": 5,
          "index": 3633
        }
      },
      "json": {
        "check": "Boolean",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "* Use Basic HTTP Authentication "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Use Basic HTTP Authentication</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "send": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sending a request.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sending a request.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 4254
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 4311
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "abort": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Force the transport into the aborted state (\"aborted\").",
          "     *",
          "     * Listeners of the \"aborted\" signal are notified about the event.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the transport into the aborted state (\"aborted\").\n Listeners of the \"aborted\" signal are notified about the event.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 4482
        },
        "end": {
          "line": 206,
          "column": 5,
          "index": 4694
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "timeout": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Force the transport into the timeout state (\"timeout\").",
          "     *",
          "     * Listeners of the \"timeout\" signal are notified about the event.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the transport into the timeout state (\"timeout\").\n Listeners of the \"timeout\" signal are notified about the event.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 214,
          "column": 4,
          "index": 4865
        },
        "end": {
          "line": 222,
          "column": 5,
          "index": 5078
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "failed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Force the transport into the failed state (\"failed\").",
          "     *",
          "     * Listeners of the \"failed\" signal are notified about the event.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Force the transport into the failed state (\"failed\").\n Listeners of the \"failed\" signal are notified about the event.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 230,
          "column": 4,
          "index": 5246
        },
        "end": {
          "line": 238,
          "column": 5,
          "index": 5456
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "setRequestHeader": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a request header to this transports qx.io.remote.Request.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @param vLabel {String} Request header name",
          "     * @param vValue {var} Value for the header",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a request header to this transports qx.io.remote.Request.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vLabel {String} Request header name",
            "paramName": "vLabel",
            "description": " Request header name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "vValue {var} Value for the header",
            "paramName": "vValue",
            "description": " Value for the header",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 257,
          "column": 4,
          "index": 6026
        },
        "end": {
          "line": 259,
          "column": 5,
          "index": 6121
        }
      },
      "type": "function",
      "params": [
        {
          "name": "vLabel",
          "type": "string"
        },
        {
          "name": "vValue",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "getResponseHeader": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the request header of the request.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @param vLabel {String} Response header name",
          "     * @return {Object}",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the request header of the request.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vLabel {String} Response header name",
            "paramName": "vLabel",
            "description": " Response header name",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Record<any, any>",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 278,
          "column": 4,
          "index": 6650
        },
        "end": {
          "line": 280,
          "column": 5,
          "index": 6739
        }
      },
      "type": "function",
      "params": [
        {
          "name": "vLabel",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "getResponseHeaders": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides an hash of all response headers.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @return {Object}",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides an hash of all response headers.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Record<any, any>",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 292,
          "column": 4,
          "index": 7011
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 7096
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "getStatusCode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current status code of the request if available or -1 if not.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @return {Integer}",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current status code of the request if available or -1 if not.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer}",
            "type": "Integer",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 312,
          "column": 4,
          "index": 7597
        },
        "end": {
          "line": 314,
          "column": 5,
          "index": 7672
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getStatusText": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides the status text for the current request if available and null otherwise.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @return {String}",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the status text for the current request if available and null otherwise.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "string",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 326,
          "column": 4,
          "index": 7984
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 8059
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "getResponseText": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides the response text from the request when available and null otherwise.",
          "     * By passing true as the \"partial\" parameter of this method, incomplete data will",
          "     * be made available to the caller.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @return {String}",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the response text from the request when available and null otherwise.\n By passing true as the \"partial\" parameter of this method, incomplete data will\n be made available to the caller.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "string",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 348,
          "column": 4,
          "index": 8698
        },
        "end": {
          "line": 350,
          "column": 5,
          "index": 8777
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "getResponseXml": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides the XML provided by the response if any and null otherwise.",
          "     * By passing true as the \"partial\" parameter of this method, incomplete data will",
          "     * be made available to the caller.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @return {Object}",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides the XML provided by the response if any and null otherwise.\n By passing true as the \"partial\" parameter of this method, incomplete data will\n be made available to the caller.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Record<any, any>",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 364,
          "column": 4,
          "index": 9203
        },
        "end": {
          "line": 366,
          "column": 5,
          "index": 9280
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "getFetchedLength": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the length of the content as fetched thus far.",
          "     *",
          "     * This method is virtual and concrete subclasses are supposed to",
          "     * implement it.",
          "     *",
          "     * @abstract",
          "     * @return {Integer}",
          "     * @throws {Error} the abstract function warning.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the length of the content as fetched thus far.\n This method is virtual and concrete subclasses are supposed to\n implement it.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer}",
            "type": "Integer",
            "description": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 378,
          "column": 4,
          "index": 9566
        },
        "end": {
          "line": 380,
          "column": 5,
          "index": 9647
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "_applyState": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply method for \"state\" property. For each state value a corresponding",
          "     * event is fired to inform the listeners.",
          "     *",
          "     * @param value {var} Current value",
          "     * @param old {var} Previous value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for \"state\" property. For each state value a corresponding\n event is fired to inform the listeners.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "var"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 395,
          "column": 4,
          "index": 10078
        },
        "end": {
          "line": 437,
          "column": 5,
          "index": 10973
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "old",
          "type": "var"
        }
      ],
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 446,
        "column": 2,
        "index": 11170
      },
      "end": {
        "line": 450,
        "column": 3,
        "index": 11280
      }
    }
  },
  "statics": {}
}