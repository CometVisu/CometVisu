{
  "version": 0.3,
  "lastModified": 1735383688197,
  "lastModifiedIso": "2024-12-28T11:01:28.197Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/io/PartLoader.js",
  "type": "class",
  "location": {
    "start": {
      "line": 24,
      "column": 0,
      "index": 628
    },
    "end": {
      "line": 121,
      "column": 3,
      "index": 3718
    }
  },
  "className": "qx.io.PartLoader",
  "jsdoc": {
    "raw": [
      "*",
      " * The part loader knows about all generated packages and parts.",
      " *",
      " * It contains functionality to load parts and to retrieve part instances.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The part loader knows about all generated packages and parts.\n It contains functionality to load parts and to retrieve part instances.</p>"
      }
    ]
  },
  "isSingleton": true,
  "abstract": false,
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 28,
        "column": 2,
        "index": 716
      },
      "end": {
        "line": 41,
        "column": 3,
        "index": 1054
      }
    }
  },
  "events": {
    "partLoaded": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired if a parts was loaded. The data of the event instance point to the",
          "     * loaded part instance.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a parts was loaded. The data of the event instance point to the\n loaded part instance.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1198
        },
        "end": {
          "line": 48,
          "column": 36,
          "index": 1230
        }
      }
    },
    "partLoadingError": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Fired if a part could not be loaded. The event's",
          "     * {@link qx.event.type.Data#getData} method returns the name of the failed",
          "     * part.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired if a part could not be loaded. The event's\n {@link qx.event.type.Data#getData} method returns the name of the failed\n part.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1402
        },
        "end": {
          "line": 55,
          "column": 42,
          "index": 1440
        }
      }
    }
  },
  "statics": {
    "require": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Loads one or more parts asynchronously. The callback is called after all",
          "     * parts and their dependencies are fully loaded. If the parts are already",
          "     * loaded the callback is called immediately.",
          "     *",
          "     * @param partNames {String[]} List of parts names to load as defined in the",
          "     *    config file at compile time.",
          "     * @param callback {Function} Function to execute on completion.",
          "     *   The function has one parameter which is an array of ready states of",
          "     *   the parts specified in the partNames argument.",
          "     * @param self {Object?window} Context to execute the given function in",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loads one or more parts asynchronously. The callback is called after all\n parts and their dependencies are fully loaded. If the parts are already\n loaded the callback is called immediately.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "partNames {String[]} List of parts names to load as defined in the\n    config file at compile time.",
            "paramName": "partNames",
            "description": " List of parts names to load as defined in the\n    config file at compile time.",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "callback {Function} Function to execute on completion.\n   The function has one parameter which is an array of ready states of\n   the parts specified in the partNames argument.",
            "paramName": "callback",
            "description": " Function to execute on completion.\n   The function has one parameter which is an array of ready states of\n   the parts specified in the partNames argument.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "self {Object?window} Context to execute the given function in",
            "paramName": "self",
            "description": " Context to execute the given function in",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 71,
          "column": 4,
          "index": 2094
        },
        "end": {
          "line": 73,
          "column": 5,
          "index": 2197
        }
      },
      "type": "function",
      "params": [
        {
          "name": "partNames",
          "type": "String[]"
        },
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "self",
          "type": "Object",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "appearsIn": []
    }
  },
  "members": {
    "require": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Loads one or more parts asynchronously. The callback is called after all",
          "     * parts and their dependencies are fully loaded. If the parts are already",
          "     * loaded the callback is called immediately.",
          "     *",
          "     * @param partNames {String|String[]} List of parts names to load as defined",
          "     *    in the config file at compile time. The method also accepts a single",
          "     *    string as parameter to only load one part.",
          "     * @param callback {Function} Function to execute on completion",
          "     * @param self {Object?window} Context to execute the given function in",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loads one or more parts asynchronously. The callback is called after all\n parts and their dependencies are fully loaded. If the parts are already\n loaded the callback is called immediately.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "partNames {String|String[]} List of parts names to load as defined\n    in the config file at compile time. The method also accepts a single\n    string as parameter to only load one part.",
            "paramName": "partNames",
            "description": " List of parts names to load as defined\n    in the config file at compile time. The method also accepts a single\n    string as parameter to only load one part.",
            "type": [
              "String",
              {
                "type": "String",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "callback {Function} Function to execute on completion",
            "paramName": "callback",
            "description": " Function to execute on completion",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "self {Object?window} Context to execute the given function in",
            "paramName": "self",
            "description": " Context to execute the given function in",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2810
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2907
        }
      },
      "type": "function",
      "params": [
        {
          "name": "partNames",
          "type": [
            "String",
            {
              "type": "String",
              "dimensions": 2
            }
          ]
        },
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "self",
          "type": "Object",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "appearsIn": []
    },
    "getPart": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the part instance of the part with the given name.",
          "     *",
          "     * @param name {String} Name of the part as defined in the config file at",
          "     *    compile time.",
          "     * @return {qx.io.part.Part} The corresponding part instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the part instance of the part with the given name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the part as defined in the config file at\n    compile time.",
            "paramName": "name",
            "description": " Name of the part as defined in the config file at\n    compile time.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.io.part.Part} The corresponding part instance",
            "type": "qx.io.part.Part",
            "description": "The corresponding part instance"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 3166
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 3223
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.io.part.Part"
      },
      "appearsIn": []
    },
    "hasPart": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if a part with the given name is available.",
          "     * @param name {String} Name of the part as defined in the config file at",
          "     *    compile time.",
          "     * @return {Boolean} <code>true</code>, if the part is available",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if a part with the given name is available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the part as defined in the config file at\n    compile time.",
            "paramName": "name",
            "description": " Name of the part as defined in the config file at\n    compile time.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the part is available",
            "type": "boolean",
            "description": "<code>true</code>, if the part is available"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3475
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 3543
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getParts": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a map of all known parts.",
          "     * @return {Map} Map containing all parts.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a map of all known parts.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map containing all parts.",
            "type": "Map<any, any>",
            "description": "Map containing all parts."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3654
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 3710
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    }
  },
  "properties": {}
}