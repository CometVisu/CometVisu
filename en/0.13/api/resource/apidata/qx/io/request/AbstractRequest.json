{
  "className": "qx.io.request.AbstractRequest",
  "packageName": "qx.io.request",
  "name": "AbstractRequest",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 35,
        "column": 0,
        "index": 1152
      },
      "end": {
        "line": 1047,
        "column": 3,
        "index": 27340
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>AbstractRequest serves as a base class for {@link qx.io.request.Xhr}\n and {@link qx.io.request.Jsonp}. It contains methods to conveniently\n communicate with transports found in {@link qx.bom.request}.\n The general procedure to derive a new request is to choose a\n transport (override {@link #<em>createTransport}) and link\n the transport’s response (override {@link #</em>getParsedResponse}).\n The transport must implement {@link qx.bom.request.IRequest}.\n To adjust the behavior of {@link #send} override\n {@link #<em>getConfiguredUrl} and {@link #</em>getConfiguredRequestHeaders}.\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "construct": {
    "location": {
      "start": {
        "line": 44,
        "column": 2,
        "index": 1363
      },
      "end": {
        "line": 73,
        "column": 3,
        "index": 2352
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "url {String?} The URL of the resource to request.",
          "paramName": "url",
          "description": " The URL of the resource to request.",
          "optional": true,
          "type": "String"
        }
      ]
    }
  },
  "events": {
    "readyStateChange": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2447
        },
        "end": {
          "line": 79,
          "column": 43,
          "index": 2486
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on every change of the transport’s readyState.</p>"
          }
        ]
      },
      "name": "readyStateChange",
      "type": "qx.event.type.Event"
    },
    "success": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2608
        },
        "end": {
          "line": 85,
          "column": 34,
          "index": 2638
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request completes without error and transport’s status\n indicates success.</p>"
          }
        ]
      },
      "name": "success",
      "type": "qx.event.type.Event"
    },
    "load": {
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2712
        },
        "end": {
          "line": 90,
          "column": 31,
          "index": 2739
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request completes without error.</p>"
          }
        ]
      },
      "name": "load",
      "type": "qx.event.type.Event"
    },
    "loadEnd": {
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2821
        },
        "end": {
          "line": 95,
          "column": 34,
          "index": 2851
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request completes with or without error.</p>"
          }
        ]
      },
      "name": "loadEnd",
      "type": "qx.event.type.Event"
    },
    "abort": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2912
        },
        "end": {
          "line": 100,
          "column": 32,
          "index": 2940
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request is aborted.</p>"
          }
        ]
      },
      "name": "abort",
      "type": "qx.event.type.Event"
    },
    "timeout": {
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 3012
        },
        "end": {
          "line": 105,
          "column": 34,
          "index": 3042
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request reaches timeout limit.</p>"
          }
        ]
      },
      "name": "timeout",
      "type": "qx.event.type.Event"
    },
    "error": {
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3113
        },
        "end": {
          "line": 110,
          "column": 32,
          "index": 3141
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request completes with error.</p>"
          }
        ]
      },
      "name": "error",
      "type": "qx.event.type.Event"
    },
    "statusError": {
      "location": {
        "start": {
          "line": 115,
          "column": 4,
          "index": 3241
        },
        "end": {
          "line": 115,
          "column": 38,
          "index": 3275
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when request completes without error but erroneous HTTP status.</p>"
          }
        ]
      },
      "name": "statusError",
      "type": "qx.event.type.Event"
    },
    "parseError": {
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3372
        },
        "end": {
          "line": 120,
          "column": 36,
          "index": 3404
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the configured parser runs into an unrecoverable error.</p>"
          }
        ]
      },
      "name": "parseError",
      "type": "qx.event.type.Data"
    },
    "fail": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3624
        },
        "end": {
          "line": 128,
          "column": 31,
          "index": 3651
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on timeout, error or remote error.\n This event is fired for convenience. Usually, it is recommended\n to handle error related events in a more fine-grained approach.</p>"
          }
        ]
      },
      "name": "fail",
      "type": "qx.event.type.Event"
    },
    "changeResponse": {
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4339
        },
        "end": {
          "line": 150,
          "column": 40,
          "index": 4375
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on change of the parsed response.\n This event allows to use data binding with the\n parsed response as source.\n For example, to bind the response to the value of a label:\n </p>\n<pre class=\"javascript\">\n\n\n req.bind(\"response\", label, \"value\");\n </pre>\n<p>The response is parsed (and therefore changed) only\n after the request completes successfully. This means\n that when a new request is made the initial empty value\n is ignored, instead only the final value is bound.</p>"
          }
        ]
      },
      "name": "changeResponse",
      "type": "qx.event.type.Data"
    },
    "changePhase": {
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 4435
        },
        "end": {
          "line": 155,
          "column": 37,
          "index": 4468
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired on change of the phase.</p>"
          }
        ]
      },
      "name": "changePhase",
      "type": "qx.event.type.Data"
    }
  },
  "properties": {
    "url": {
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 4707
        },
        "end": {
          "line": 168,
          "column": 5,
          "index": 4741
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The URL of the resource to request.\n Note: Depending on the configuration of the request\n and/or the transport chosen, query params may be appended\n automatically.</p>"
          }
        ]
      },
      "name": "url",
      "propertyType": "new",
      "check": "String"
    },
    "timeout": {
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 4830
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 4905
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Timeout limit in milliseconds. Default (0) means no limit.</p>"
          }
        ]
      },
      "name": "timeout",
      "propertyType": "new",
      "nullable": true,
      "init": 0,
      "allowNull": true,
      "check": "Number",
      "defaultValue": 0
    },
    "requestData": {
      "location": {
        "start": {
          "line": 203,
          "column": 4,
          "index": 5654
        },
        "end": {
          "line": 216,
          "column": 5,
          "index": 6112
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Data to be sent as part of the request.\n Supported types:</p>\n<ul>\n<li>String</li>\n<li>Map</li>\n<li>qooxdoo Object</li>\n<li>Blob</li>\n<li>ArrayBuffer</li>\n<li>FormData\nFor maps, Arrays and qooxdoo objects, a URL encoded string\nwith unsafe characters escaped is internally generated and sent\nas part of the request.\nDepending on the underlying transport and its configuration, the request\ndata is transparently included as URL query parameters or embedded in the\nrequest body as form data.\nIf a string is given the user must make sure it is properly formatted and\nescaped. See {@link qx.util.Serializer#toUriParameter}.</li>\n</ul>"
          }
        ]
      },
      "name": "requestData",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "[[ ObjectMethod Function ]]"
    },
    "authentication": {
      "location": {
        "start": {
          "line": 223,
          "column": 4,
          "index": 6263
        },
        "end": {
          "line": 226,
          "column": 5,
          "index": 6368
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Authentication delegate.\n The delegate must implement {@link qx.io.request.authentication.IAuthentication}.</p>"
          }
        ]
      },
      "name": "authentication",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "qx.io.request.authentication.IAuthentication"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__onReadyStateChangeBound": {
      "location": {
        "start": {
          "line": 233,
          "column": 4,
          "index": 6431
        },
        "end": {
          "line": 233,
          "column": 35,
          "index": 6462
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Bound handlers.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onLoadBound": {
      "location": {
        "start": {
          "line": 234,
          "column": 4,
          "index": 6468
        },
        "end": {
          "line": 234,
          "column": 23,
          "index": 6487
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onLoadEndBound": {
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 6493
        },
        "end": {
          "line": 235,
          "column": 26,
          "index": 6515
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onAbortBound": {
      "location": {
        "start": {
          "line": 236,
          "column": 4,
          "index": 6521
        },
        "end": {
          "line": 236,
          "column": 24,
          "index": 6541
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onTimeoutBound": {
      "location": {
        "start": {
          "line": 237,
          "column": 4,
          "index": 6547
        },
        "end": {
          "line": 237,
          "column": 26,
          "index": 6569
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onErrorBound": {
      "location": {
        "start": {
          "line": 238,
          "column": 4,
          "index": 6575
        },
        "end": {
          "line": 238,
          "column": 24,
          "index": 6595
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__response": {
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 6642
        },
        "end": {
          "line": 243,
          "column": 20,
          "index": 6658
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Parsed response.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__abort": {
      "location": {
        "start": {
          "line": 248,
          "column": 4,
          "index": 6700
        },
        "end": {
          "line": 248,
          "column": 17,
          "index": 6713
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abort flag.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__phase": {
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 6758
        },
        "end": {
          "line": 253,
          "column": 17,
          "index": 6771
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Current phase.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__requestHeaders": {
      "location": {
        "start": {
          "line": 258,
          "column": 4,
          "index": 6818
        },
        "end": {
          "line": 258,
          "column": 26,
          "index": 6840
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request headers.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__requestHeadersDeprecated": {
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 6900
        },
        "end": {
          "line": 263,
          "column": 36,
          "index": 6932
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Request headers (deprecated).</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_transport": {
      "location": {
        "start": {
          "line": 268,
          "column": 4,
          "index": 6979
        },
        "end": {
          "line": 268,
          "column": 20,
          "index": 6995
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Holds transport.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_parserFailed": {
      "location": {
        "start": {
          "line": 273,
          "column": 4,
          "index": 7089
        },
        "end": {
          "line": 273,
          "column": 24,
          "index": 7109
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Holds information about the parser status for the last request.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_createTransport": {
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 7615
        },
        "end": {
          "line": 292,
          "column": 5,
          "index": 7688
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create and return transport.\n This method MUST be overridden, unless the constructor is overridden as\n well. It is called by the constructor and should return the transport that\n is to be interfaced.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.request} Transport.",
            "type": "qx.bom.request",
            "description": " Transport."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getConfiguredUrl": {
      "location": {
        "start": {
          "line": 306,
          "column": 4,
          "index": 8074
        },
        "end": {
          "line": 306,
          "column": 26,
          "index": 8096
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get configured URL.\n A configured URL typically includes a query string that\n encapsulates transport specific settings such as request\n data or no-cache settings.\n This method MAY be overridden. It is called in {@link #send}\n before the request is initialized.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The configured URL.",
            "type": "String",
            "description": " The configured URL."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getConfiguredRequestHeaders": {
      "location": {
        "start": {
          "line": 316,
          "column": 4,
          "index": 8340
        },
        "end": {
          "line": 316,
          "column": 37,
          "index": 8373
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get configuration related request headers.\n This method MAY be overridden to add request headers for features limited\n to a certain transport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of request headers.",
            "type": "Map",
            "description": " Map of request headers."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getParsedResponse": {
      "location": {
        "start": {
          "line": 328,
          "column": 4,
          "index": 8663
        },
        "end": {
          "line": 330,
          "column": 5,
          "index": 8738
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get parsed response.\n Is called in the {@link #_onReadyStateChange} event handler\n to parse and store the transport’s response.\n This method MUST be overridden.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The parsed response of the request.",
            "type": "String",
            "description": " The parsed response of the request."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getMethod": {
      "location": {
        "start": {
          "line": 340,
          "column": 4,
          "index": 8940
        },
        "end": {
          "line": 342,
          "column": 5,
          "index": 8980
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get method.\n This method MAY be overridden. It is called in {@link #send}\n before the request is initialized.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The method.",
            "type": "String",
            "description": " The method."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isAsync": {
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 9209
        },
        "end": {
          "line": 354,
          "column": 5,
          "index": 9246
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether async.\n This method MAY be overridden. It is called in {@link #send}\n before the request is initialized.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether to process asynchronously.",
            "type": "Boolean",
            "description": " Whether to process asynchronously."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "send": {
      "location": {
        "start": {
          "line": 365,
          "column": 4,
          "index": 9495
        },
        "end": {
          "line": 427,
          "column": 5,
          "index": 10926
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send request.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sendWithPromise": {
      "location": {
        "start": {
          "line": 444,
          "column": 4,
          "index": 11685
        },
        "end": {
          "line": 530,
          "column": 5,
          "index": 14498
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The same as send() but also return a <code>qx.Promise</code> object. The promise\n is resolved to this object if the request is successful.\n Calling <code>abort()</code> on the request object, rejects the promise. Calling\n <code>cancel()</code> on the promise aborts the request if the request is not in a\n final state.\n If the promise has other listener paths, then cancelation of one path will\n not have any effect on the request and consequently that call will not\n affect the other paths.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "context {Object?} optional context to bind the qx.Promise.",
            "paramName": "context",
            "description": " optional context to bind the qx.Promise.",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} The qx.Promise object",
            "type": "qx.Promise",
            "description": " The qx.Promise object"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.type.BaseError} If the environment setting <code>qx.promise</code> is set to false",
            "type": "qx.type.BaseError",
            "description": " If the environment setting <code>qx.promise</code> is set to false"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "abort": {
      "location": {
        "start": {
          "line": 535,
          "column": 4,
          "index": 14543
        },
        "end": {
          "line": 545,
          "column": 5,
          "index": 14822
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abort request.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_setRequestHeaders": {
      "location": {
        "start": {
          "line": 559,
          "column": 4,
          "index": 15204
        },
        "end": {
          "line": 566,
          "column": 5,
          "index": 15437
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply configured request headers to transport.\n This method MAY be overridden to customize application of request headers\n to transport.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getAllRequestHeaders": {
      "location": {
        "start": {
          "line": 573,
          "column": 4,
          "index": 15541
        },
        "end": {
          "line": 589,
          "column": 5,
          "index": 16126
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get all request headers.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} All request headers.",
            "type": "Map",
            "description": " All request headers."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__getAuthRequestHeaders": {
      "location": {
        "start": {
          "line": 596,
          "column": 4,
          "index": 16276
        },
        "end": {
          "line": 606,
          "column": 5,
          "index": 16541
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Retrieve authentication headers from auth delegate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Authentication related request headers.",
            "type": "Map",
            "description": " Authentication related request headers."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "setRequestHeader": {
      "location": {
        "start": {
          "line": 616,
          "column": 4,
          "index": 16782
        },
        "end": {
          "line": 618,
          "column": 5,
          "index": 16860
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set a request header.\n Note: Setting request headers has no effect after the request was send.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} Key of the header.",
            "paramName": "key",
            "description": " Key of the header.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String} Value of the header.",
            "paramName": "value",
            "description": " Value of the header.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRequestHeader": {
      "location": {
        "start": {
          "line": 626,
          "column": 4,
          "index": 17014
        },
        "end": {
          "line": 628,
          "column": 5,
          "index": 17084
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a request header.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} Key of the header.",
            "paramName": "key",
            "description": " Key of the header.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The value of the header.",
            "type": "String",
            "description": " The value of the header."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeRequestHeader": {
      "location": {
        "start": {
          "line": 637,
          "column": 4,
          "index": 17279
        },
        "end": {
          "line": 641,
          "column": 5,
          "index": 17402
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove a request header.\n Note: Removing request headers has no effect after the request was send.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} Key of the header.",
            "paramName": "key",
            "description": " Key of the header.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTransport": {
      "location": {
        "start": {
          "line": 671,
          "column": 4,
          "index": 18415
        },
        "end": {
          "line": 673,
          "column": 5,
          "index": 18467
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get low-level transport.\n Note: To be used with caution!\n This method can be used to query the transport directly,\n but should be used with caution. Especially, it\n is not advisable to call any destructive methods\n such as <code>open</code> or <code>send</code>.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} An instance of a class found in\n  <code>qx.bom.request.*</code>",
            "type": "Object",
            "description": " An instance of a class found in\n  <code>qx.bom.request.*</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getReadyState": {
      "location": {
        "start": {
          "line": 687,
          "column": 4,
          "index": 18734
        },
        "end": {
          "line": 689,
          "column": 5,
          "index": 18798
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get current ready state.\n States can be:\n UNSENT:           0,\n OPENED:           1,\n HEADERS_RECEIVED: 2,\n LOADING:          3,\n DONE:             4</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Ready state.",
            "type": "Number",
            "description": " Ready state."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPhase": {
      "location": {
        "start": {
          "line": 710,
          "column": 4,
          "index": 19528
        },
        "end": {
          "line": 712,
          "column": 5,
          "index": 19573
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get current phase.\n A more elaborate version of {@link #getReadyState}, this method indicates\n the current phase of the request. Maps to stateful (i.e. deterministic)\n events (success, abort, timeout, statusError) and intermediate\n readyStates (unsent, configured, loading, load).\n When the requests is successful, it progresses the states:<br>\n 'unsent', 'opened', 'sent', 'loading', 'load', 'success'\n In case of failure, the final state is one of:<br>\n 'abort', 'timeout', 'statusError'\n For each change of the phase, a {@link #changePhase} data event is fired.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Current phase.",
            "type": "String",
            "description": " Current phase."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getStatus": {
      "location": {
        "start": {
          "line": 719,
          "column": 4,
          "index": 19680
        },
        "end": {
          "line": 721,
          "column": 5,
          "index": 19736
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get status code.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The transport’s status code.",
            "type": "Number",
            "description": " The transport’s status code."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getStatusText": {
      "location": {
        "start": {
          "line": 728,
          "column": 4,
          "index": 19843
        },
        "end": {
          "line": 730,
          "column": 5,
          "index": 19907
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get status text.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The transport’s status text.",
            "type": "String",
            "description": " The transport’s status text."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponseText": {
      "location": {
        "start": {
          "line": 737,
          "column": 4,
          "index": 20033
        },
        "end": {
          "line": 739,
          "column": 5,
          "index": 20101
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get raw (unprocessed) response.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The raw response of the request.",
            "type": "String",
            "description": " The raw response of the request."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAllResponseHeaders": {
      "location": {
        "start": {
          "line": 746,
          "column": 4,
          "index": 20224
        },
        "end": {
          "line": 748,
          "column": 5,
          "index": 20309
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get all response headers from response.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} All response headers.",
            "type": "String",
            "description": " All response headers."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponseHeader": {
      "location": {
        "start": {
          "line": 758,
          "column": 4,
          "index": 20517
        },
        "end": {
          "line": 760,
          "column": 5,
          "index": 20600
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a single response header from response.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String}\n   Key of the header to get the value from.",
            "paramName": "key",
            "description": "\n   Key of the header to get the value from.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}\n   Response header.",
            "type": "String",
            "description": "\n   Response header."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "overrideResponseContentType": {
      "location": {
        "start": {
          "line": 769,
          "column": 4,
          "index": 20815
        },
        "end": {
          "line": 771,
          "column": 5,
          "index": 20923
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override the content type response header from response.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "contentType {String}\n   Content type for overriding.",
            "paramName": "contentType",
            "description": "\n   Content type for overriding.",
            "type": "String"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "qx.bom.request.Xhr#overrideMimeType"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponseContentType": {
      "location": {
        "start": {
          "line": 779,
          "column": 4,
          "index": 21075
        },
        "end": {
          "line": 781,
          "column": 5,
          "index": 21160
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the content type response header from response.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}\n   Content type response header.",
            "type": "String",
            "description": "\n   Content type response header."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isDone": {
      "location": {
        "start": {
          "line": 786,
          "column": 4,
          "index": 21227
        },
        "end": {
          "line": 788,
          "column": 5,
          "index": 21284
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether request completed (is done).</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getResponse": {
      "location": {
        "start": {
          "line": 801,
          "column": 4,
          "index": 21592
        },
        "end": {
          "line": 803,
          "column": 5,
          "index": 21643
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get parsed response.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The parsed response of the request.",
            "type": "String",
            "description": " The parsed response of the request."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_setResponse": {
      "location": {
        "start": {
          "line": 810,
          "column": 4,
          "index": 21762
        },
        "end": {
          "line": 820,
          "column": 5,
          "index": 22037
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set response.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "response {String} The parsed response of the request.",
            "paramName": "response",
            "description": " The parsed response of the request.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onReadyStateChange": {
      "location": {
        "start": {
          "line": 831,
          "column": 4,
          "index": 22296
        },
        "end": {
          "line": 855,
          "column": 5,
          "index": 22948
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle \"readyStateChange\" event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__onReadyStateDone": {
      "location": {
        "start": {
          "line": 860,
          "column": 4,
          "index": 23021
        },
        "end": {
          "line": 899,
          "column": 5,
          "index": 24113
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called internally when readyState is DONE.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_onLoad": {
      "location": {
        "start": {
          "line": 904,
          "column": 4,
          "index": 24164
        },
        "end": {
          "line": 906,
          "column": 5,
          "index": 24211
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle \"load\" event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onLoadEnd": {
      "location": {
        "start": {
          "line": 911,
          "column": 4,
          "index": 24265
        },
        "end": {
          "line": 913,
          "column": 5,
          "index": 24318
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle \"loadEnd\" event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onAbort": {
      "location": {
        "start": {
          "line": 918,
          "column": 4,
          "index": 24370
        },
        "end": {
          "line": 920,
          "column": 5,
          "index": 24428
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle \"abort\" event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onTimeout": {
      "location": {
        "start": {
          "line": 925,
          "column": 4,
          "index": 24482
        },
        "end": {
          "line": 930,
          "column": 5,
          "index": 24608
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle \"timeout\" event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onError": {
      "location": {
        "start": {
          "line": 935,
          "column": 4,
          "index": 24660
        },
        "end": {
          "line": 940,
          "column": 5,
          "index": 24773
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle \"error\" event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fireStatefulEvent": {
      "location": {
        "start": {
          "line": 955,
          "column": 4,
          "index": 25144
        },
        "end": {
          "line": 961,
          "column": 5,
          "index": 25328
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire stateful event.\n Fires event and sets phase to name of event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "evt {String} Name of the event to fire.",
            "paramName": "evt",
            "description": " Name of the event to fire.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setPhase": {
      "location": {
        "start": {
          "line": 968,
          "column": 4,
          "index": 25423
        },
        "end": {
          "line": 981,
          "column": 5,
          "index": 25843
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set phase.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "phase {String} The phase to set.",
            "paramName": "phase",
            "description": " The phase to set.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_serializeData": {
      "location": {
        "start": {
          "line": 989,
          "column": 4,
          "index": 26008
        },
        "end": {
          "line": 1020,
          "column": 5,
          "index": 26780
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Serialize data.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {String|Map|qx.core.Object} Data to serialize.",
            "paramName": "data",
            "description": " Data to serialize.",
            "type": [
              "String",
              "Map",
              "qx.core.Object"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} Serialized data.",
            "type": "String|null",
            "description": " Serialized data."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getUrl": {
      "type": "function",
      "name": "getUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for url"
          }
        ]
      }
    },
    "setUrl": {
      "type": "function",
      "name": "setUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for url"
          }
        ]
      }
    },
    "resetUrl": {
      "type": "function",
      "name": "resetUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>url</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ]
      }
    },
    "getTimeout": {
      "type": "function",
      "name": "getTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Number",
            "desc": "Returns the value for timeout"
          }
        ]
      }
    },
    "setTimeout": {
      "type": "function",
      "name": "setTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Number",
            "paramName": "value",
            "desc": "Value for timeout"
          }
        ]
      }
    },
    "resetTimeout": {
      "type": "function",
      "name": "resetTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>timeout</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ]
      }
    },
    "getRequestData": {
      "type": "function",
      "name": "getRequestData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>requestData</code>.\n\nFor further details take a look at the property definition: {@link #requestData}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for requestData"
          }
        ]
      }
    },
    "setRequestData": {
      "type": "function",
      "name": "setRequestData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>requestData</code>.\n\nFor further details take a look at the property definition: {@link #requestData}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for requestData"
          }
        ]
      }
    },
    "resetRequestData": {
      "type": "function",
      "name": "resetRequestData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>requestData</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #requestData}."
          }
        ]
      }
    },
    "getAuthentication": {
      "type": "function",
      "name": "getAuthentication",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>authentication</code>.\n\nFor further details take a look at the property definition: {@link #authentication}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.io.request.authentication.IAuthentication",
            "desc": "Returns the value for authentication"
          }
        ]
      }
    },
    "setAuthentication": {
      "type": "function",
      "name": "setAuthentication",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>authentication</code>.\n\nFor further details take a look at the property definition: {@link #authentication}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.io.request.authentication.IAuthentication",
            "paramName": "value",
            "desc": "Value for authentication"
          }
        ]
      }
    },
    "resetAuthentication": {
      "type": "function",
      "name": "resetAuthentication",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>authentication</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #authentication}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1027,
        "column": 2,
        "index": 26837
      },
      "end": {
        "line": 1046,
        "column": 3,
        "index": 27336
      }
    }
  },
  "descendants": [
    "qx.io.request.Jsonp",
    "qx.io.request.Xhr"
  ]
}