{
  "version": 0.3,
  "lastModified": 1726088850461,
  "lastModifiedIso": "2024-09-11T21:07:30.461Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/io/jsonrpc/Client.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 588
    },
    "end": {
      "line": 355,
      "column": 3,
      "index": 11568
    }
  },
  "className": "qx.io.jsonrpc.Client",
  "jsdoc": {
    "raw": [
      "*",
      " * This class provides a JSON-RPC client object with auto-configuration of the",
      " * transport used (based on the URI passed).",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This class provides a JSON-RPC client object with auto-configuration of the\n transport used (based on the URI passed).</p>"
      }
    ]
  },
  "superClass": "qx.io.transport.AbstractClient",
  "statics": {
    "registerTransport": {
      "jsdoc": {
        "raw": [
          " statics are not inherited from parent class"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 741
        },
        "end": {
          "line": 28,
          "column": 71,
          "index": 808
        }
      },
      "appearsIn": [
        "qx.io.transport.AbstractClient"
      ]
    }
  },
  "events": {
    "outgoingRequest": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event fired before a request message is sent to the server.",
          "     * Event data is the {@link qx.io.jsonrpc.protocol.Message} to",
          "     * be sent. This also allows listeners to configure the transport",
          "     * object beforehand.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired before a request message is sent to the server.\n Event data is the {@link qx.io.jsonrpc.protocol.Message} to\n be sent. This also allows listeners to configure the transport\n object beforehand.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 1077
        },
        "end": {
          "line": 38,
          "column": 41,
          "index": 1114
        }
      }
    },
    "error": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event fired when a request results in an error. Event data is an instance of",
          "     * {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},",
          "     * or {@link qx.io.exception.Cancel}.",
          "     * Event fired when a message is received from the endpoint. Event data",
          "     * is an UTF-8 encoded string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired when a request results in an error. Event data is an instance of\n {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n or {@link qx.io.exception.Cancel}.\n Event fired when a message is received from the endpoint. Event data\n is an UTF-8 encoded string</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1449
        },
        "end": {
          "line": 47,
          "column": 31,
          "index": 1476
        }
      }
    },
    "incomingRequest": {
      "type": "qx.event.type.Data",
      "jsdoc": {
        "raw": [
          "*",
          "     * Event fired when a peer-originated JSON-RPC message has been",
          "     * received from the peer endpoint. Event data is an instance of {@link",
          "     * qx.io.jsonrpc.message.Batch}, {@link qx.io.jsonrpc.message.Request}",
          "     * or {@link qx.io.jsonrpc.protocol.Notification}.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired when a peer-originated JSON-RPC message has been\n received from the peer endpoint. Event data is an instance of {@link\n qx.io.jsonrpc.message.Batch}, {@link qx.io.jsonrpc.message.Request}\n or {@link qx.io.jsonrpc.protocol.Notification}.</p>"
          }
        ]
      },
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1773
        },
        "end": {
          "line": 55,
          "column": 41,
          "index": 1810
        }
      }
    }
  },
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "transportOrUri"
      },
      {
        "name": "methodPrefix"
      },
      {
        "name": "parser"
      }
    ],
    "location": {
      "start": {
        "line": 68,
        "column": 2,
        "index": 2433
      },
      "end": {
        "line": 85,
        "column": 3,
        "index": 2907
      }
    }
  },
  "properties": {
    "methodPrefix": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 3083
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3148
        }
      },
      "json": {
        "check": "String",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * An optional string which is prepended to the method name by the {@link #sendRequest}",
          "     * and {@link #sendNotification} methods",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>An optional string which is prepended to the method name by the {@link #sendRequest}\n and {@link #sendNotification} methods</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "parser": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 3263
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 3323
        }
      },
      "json": {
        "check": "qx.io.jsonrpc.protocol.Parser"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The parser object, which must be a subclass of {@link qx.io.jsonrpc.protocol.Parser}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The parser object, which must be a subclass of {@link qx.io.jsonrpc.protocol.Parser}</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__requests": {
      "jsdoc": {
        "raw": [
          "*",
          "     * A cache of the requests which have been sent out and are still pending",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>A cache of the requests which have been sent out and are still pending</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3441
        },
        "end": {
          "line": 109,
          "column": 20,
          "index": 3457
        }
      },
      "appearsIn": []
    },
    "_prependMethodPrefix": {
      "jsdoc": {
        "raw": [
          "*",
          "     * If a service name has been configured, prepend it to the method name,",
          "     * unless it has already been prefixed",
          "     * @param {String} method",
          "     * @return {String}",
          "     * @private",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If a service name has been configured, prepend it to the method name,\n unless it has already been prefixed</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method",
            "paramName": "method",
            "description": "",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "string",
            "description": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3670
        },
        "end": {
          "line": 125,
          "column": 5,
          "index": 3932
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "_throwTransportException": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires \"error\" event and throws the error after informing pending requests",
          "     * about the error.",
          "     * @param exception",
          "     * @private",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires \"error\" event and throws the error after informing pending requests\n about the error.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "exception",
            "paramName": "exception",
            "type": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4100
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4395
        }
      },
      "type": "function",
      "params": [
        {
          "name": "exception"
        }
      ],
      "appearsIn": []
    },
    "send": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Send the given JSON-RPC message object using the configured transport",
          "     *",
          "     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message",
          "     * @return {qx.Promise} Promise that resolves (with no data)",
          "     * when the message has been successfully sent out, and rejects",
          "     * when there is an error or a cancellation up to that point.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given JSON-RPC message object using the configured transport</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message",
            "paramName": "message",
            "description": "",
            "type": [
              "qx.io.jsonrpc.protocol.Message",
              "qx.io.jsonrpc.protocol.Batch"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves (with no data)\n when the message has been successfully sent out, and rejects\n when there is an error or a cancellation up to that point.",
            "type": "qx.Promise",
            "description": "Promise that resolves (with no data)\n when the message has been successfully sent out, and rejects\n when there is an error or a cancellation up to that point."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4785
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 6169
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message",
          "type": [
            "qx.io.jsonrpc.protocol.Message",
            "qx.io.jsonrpc.protocol.Batch"
          ]
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": []
    },
    "sendRequest": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sends a single JSON-RPC request. If a method prefix name has been configured,",
          "     * it will be prepended to the method name.",
          "     * @param {String} method",
          "     * @param {Array|Object?} params",
          "     * @return {qx.Promise} Promise that resolves with the result to that request,",
          "     * and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a single JSON-RPC request. If a method prefix name has been configured,\n it will be prepended to the method name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method",
            "paramName": "method",
            "description": "",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{Array|Object?} params",
            "paramName": "params",
            "description": "",
            "optional": true,
            "type": [
              "Array",
              "Object"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves with the result to that request,\n and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace.",
            "type": "qx.Promise",
            "description": "Promise that resolves with the result to that request,\n and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 6562
        },
        "end": {
          "line": 213,
          "column": 5,
          "index": 6802
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "params",
          "type": [
            "Array",
            "Object"
          ],
          "optional": true
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": []
    },
    "sendNotification": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sends a single JSON-RPC notification. Will use the method prefix",
          "     * @param {String} method",
          "     * @param {Array|Object?} params",
          "     * @return {qx.Promise} Promise that resolves immediately, (i.e. when the",
          "     * notification has been sent out (which is synchronous)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a single JSON-RPC notification. Will use the method prefix</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method",
            "paramName": "method",
            "description": "",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "{Array|Object?} params",
            "paramName": "params",
            "description": "",
            "optional": true,
            "type": [
              "Array",
              "Object"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves immediately, (i.e. when the\n notification has been sent out (which is synchronous)",
            "type": "qx.Promise",
            "description": "Promise that resolves immediately, (i.e. when the\n notification has been sent out (which is synchronous)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 222,
          "column": 4,
          "index": 7103
        },
        "end": {
          "line": 229,
          "column": 5,
          "index": 7322
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "params",
          "type": [
            "Array",
            "Object"
          ],
          "optional": true
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": []
    },
    "sendBatch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Send the given message batch. Will use the method prefix.",
          "     * @param {qx.io.jsonrpc.protocol.Batch} batch",
          "     * @return {qx.Promise} Promise that resolves with an array of the responses",
          "     * to all requests in the batch, or rejects with any error that occurs.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given message batch. Will use the method prefix.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Batch} batch",
            "paramName": "batch",
            "description": "",
            "type": "qx.io.jsonrpc.protocol.Batch"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves with an array of the responses\n to all requests in the batch, or rejects with any error that occurs.",
            "type": "qx.Promise",
            "description": "Promise that resolves with an array of the responses\n to all requests in the batch, or rejects with any error that occurs."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 237,
          "column": 4,
          "index": 7618
        },
        "end": {
          "line": 248,
          "column": 5,
          "index": 8009
        }
      },
      "type": "function",
      "params": [
        {
          "name": "batch",
          "type": "qx.io.jsonrpc.protocol.Batch"
        }
      ],
      "returnType": {
        "type": "qx.Promise"
      },
      "appearsIn": []
    },
    "handleIncoming": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Receives and handles an incoming JSON-RPC compliant message data",
          "     * @param {String} json JSON data",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Receives and handles an incoming JSON-RPC compliant message data</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} json JSON data",
            "paramName": "json",
            "description": "JSON data",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 254,
          "column": 4,
          "index": 8142
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 8798
        }
      },
      "type": "function",
      "params": [
        {
          "name": "json",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "_cleanup": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clean up after a message has been received",
          "     * @param {qx.io.jsonrpc.protocol.Message} message",
          "     * @private",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clean up after a message has been received</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message} message",
            "paramName": "message",
            "description": "",
            "type": "qx.io.jsonrpc.protocol.Message"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 8942
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 8992
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message",
          "type": "qx.io.jsonrpc.protocol.Message"
        }
      ],
      "appearsIn": []
    },
    "handleMessage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handle an incoming message or batch of messages",
          "     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message Message or Batch",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle an incoming message or batch of messages</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message Message or Batch",
            "paramName": "message",
            "description": "Message or Batch",
            "type": [
              "qx.io.jsonrpc.protocol.Message",
              "qx.io.jsonrpc.protocol.Batch"
            ]
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 288,
          "column": 4,
          "index": 9171
        },
        "end": {
          "line": 349,
          "column": 5,
          "index": 11504
        }
      },
      "type": "function",
      "params": [
        {
          "name": "message",
          "type": [
            "qx.io.jsonrpc.protocol.Message",
            "qx.io.jsonrpc.protocol.Batch"
          ]
        }
      ],
      "appearsIn": []
    }
  }
}