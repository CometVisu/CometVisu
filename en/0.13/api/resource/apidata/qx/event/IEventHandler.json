{
  "className": "qx.event.IEventHandler",
  "packageName": "qx.event",
  "name": "IEventHandler",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0,
        "index": 639
      },
      "end": {
        "line": 81,
        "column": 3,
        "index": 2882
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Event handler Interface.\n All custom event handler like mouse or keyboard event handler must implement\n this interface.</p>"
        }
      ]
    }
  },
  "type": "interface",
  "statics": {
    "TARGET_DOMNODE": {
      "location": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 770
        },
        "end": {
          "line": 28,
          "column": 21,
          "index": 787
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The event target must be a dom node"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TARGET_WINDOW": {
      "location": {
        "start": {
          "line": 31,
          "column": 4,
          "index": 865
        },
        "end": {
          "line": 31,
          "column": 20,
          "index": 881
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The event target must be a window object"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TARGET_OBJECT": {
      "location": {
        "start": {
          "line": 34,
          "column": 4,
          "index": 960
        },
        "end": {
          "line": 34,
          "column": 20,
          "index": 976
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The event target must be a qooxdoo object"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TARGET_DOCUMENT": {
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1054
        },
        "end": {
          "line": 37,
          "column": 22,
          "index": 1072
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The event target must be a document node"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "canHandleEvent": {
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1766
        },
        "end": {
          "line": 54,
          "column": 35,
          "index": 1797
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the event handler can handle events of the given type. If the\n event handler class has a static variable called <code>IGNORE_CAN_HANDLE</code>\n with the value <code>true</code> this function is not called. Whether the\n handler can handle the event is them only determined by the static variables\n <code>SUPPORTED_TYPES</code> and <code>TARGET_CHECK</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target to, which the event handler should\n     be attached",
            "paramName": "target",
            "description": " The target to, which the event handler should\n     be attached",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event handler can handle events of the\n     given type.",
            "type": "Boolean",
            "description": " Whether the event handler can handle events of the\n     given type."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "registerEvent": {
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 2259
        },
        "end": {
          "line": 66,
          "column": 43,
          "index": 2298
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called each time an event listener, for one of the\n supported events, is added using {@link qx.event.Manager#addListener}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target to, which the event handler should\n     be attached",
            "paramName": "target",
            "description": " The target to, which the event handler should\n     be attached",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unregisterEvent": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2831
        },
        "end": {
          "line": 79,
          "column": 45,
          "index": 2872
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called each time an event listener, for one of the\n supported events, is removed by using {@link qx.event.Manager#removeListener}\n and no other event listener is listening on this type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target from, which the event handler should\n     be removed",
            "paramName": "target",
            "description": " The target from, which the event handler should\n     be removed",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}