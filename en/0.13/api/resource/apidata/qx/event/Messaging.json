{
  "version": 0.3,
  "lastModified": 1735341602215,
  "lastModifiedIso": "2024-12-27T23:20:02.215Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/Messaging.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 42,
      "column": 0,
      "index": 1171
    },
    "end": {
      "line": 267,
      "column": 3,
      "index": 8522
    }
  },
  "className": "qx.event.Messaging",
  "jsdoc": {
    "raw": [
      "*",
      " * Define messages to react on certain channels.",
      " *",
      " * The channel names will be used in the {@link #on} method to define handlers which will",
      " * be called on certain channels and routes. The {@link #emit} method can be used",
      " * to execute a given route on a channel. {@link #onAny} defines a handler on any channel.",
      " *",
      " * *Example*",
      " *",
      " * Here is a little example of how to use the messaging.",
      " *",
      " * <pre class='javascript'>",
      " *   var m = new qx.event.Messaging();",
      " *",
      " *   m.on(\"get\", \"/address/{id}\", function(data) {",
      " *     var id = data.params.id; // 1234",
      " *     // do something with the id...",
      " *   },this);",
      " *",
      " *   m.emit(\"get\", \"/address/1234\");",
      " * </pre>",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Define messages to react on certain channels.\n The channel names will be used in the {@link #on} method to define handlers which will\n be called on certain channels and routes. The {@link #emit} method can be used\n to execute a given route on a channel. {@link #onAny} defines a handler on any channel.\n<em>Example</em>\n Here is a little example of how to use the messaging.\n </p>\n<pre class='javascript'>\n   var m = new qx.event.Messaging();\n   m.on(\"get\", \"/address/{id}\", function(data) {\n     var id = data.params.id;\n\n   },this);\n   m.emit(\"get\", \"/address/1234\");\n </pre>"
      }
    ]
  },
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 43,
        "column": 2,
        "index": 1217
      },
      "end": {
        "line": 47,
        "column": 3,
        "index": 1327
      }
    }
  },
  "members": {
    "_listener": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1347
        },
        "end": {
          "line": 50,
          "column": 19,
          "index": 1362
        }
      },
      "appearsIn": []
    },
    "__listenerIdCount": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1368
        },
        "end": {
          "line": 51,
          "column": 27,
          "index": 1391
        }
      },
      "appearsIn": []
    },
    "__channelToIdMapping": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1397
        },
        "end": {
          "line": 52,
          "column": 30,
          "index": 1423
        }
      },
      "appearsIn": []
    },
    "on": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a route handler for the given channel. The route is called",
          "     * if the {@link #emit} method finds a match.",
          "     *",
          "     * @param channel {String} The channel of the message.",
          "     * @param type {String|RegExp} The type, used for checking if the executed path matches.",
          "     * @param handler {Function} The handler to call if the route matches the executed path.",
          "     * @param scope {var ? null} The scope of the handler.",
          "     * @return {String} The id of the route used to remove the route.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a route handler for the given channel. The route is called\n if the {@link #emit} method finds a match.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel of the message.",
            "paramName": "channel",
            "description": " The channel of the message.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "type {String|RegExp} The type, used for checking if the executed path matches.",
            "paramName": "type",
            "description": " The type, used for checking if the executed path matches.",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "handler {Function} The handler to call if the route matches the executed path.",
            "paramName": "handler",
            "description": " The handler to call if the route matches the executed path.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "scope {var ? null} The scope of the handler.",
            "paramName": "scope",
            "description": " The scope of the handler.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The id of the route used to remove the route.",
            "type": "string",
            "description": "The id of the route used to remove the route."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1948
        },
        "end": {
          "line": 66,
          "column": 5,
          "index": 2052
        }
      },
      "type": "function",
      "params": [
        {
          "name": "channel",
          "type": "string"
        },
        {
          "name": "type",
          "type": [
            "String",
            "RegExp"
          ]
        },
        {
          "name": "handler",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "scope",
          "type": "var",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "onAny": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a handler for the \"any\" channel. The \"any\" channel is called",
          "     * before all other channels.",
          "     *",
          "     * @param type {String|RegExp} The route, used for checking if the executed path matches",
          "     * @param handler {Function} The handler to call if the route matches the executed path",
          "     * @param scope {var ? null} The scope of the handler.",
          "     * @return {String} The id of the route used to remove the route.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a handler for the \"any\" channel. The \"any\" channel is called\n before all other channels.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String|RegExp} The route, used for checking if the executed path matches",
            "paramName": "type",
            "description": " The route, used for checking if the executed path matches",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "handler {Function} The handler to call if the route matches the executed path",
            "paramName": "handler",
            "description": " The handler to call if the route matches the executed path",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "scope {var ? null} The scope of the handler.",
            "paramName": "scope",
            "description": " The scope of the handler.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The id of the route used to remove the route.",
            "type": "string",
            "description": "The id of the route used to remove the route."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2503
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2599
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": [
            "String",
            "RegExp"
          ]
        },
        {
          "name": "handler",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "scope",
          "type": "var",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "_addListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a listener for a certain channel.",
          "     *",
          "     * @param channel {String} The channel the route should be registered for",
          "     * @param type {String|RegExp} The type, used for checking if the executed path matches",
          "     * @param handler {Function} The handler to call if the route matches the executed path",
          "     * @param scope {var ? null} The scope of the handler.",
          "     * @return {String} The id of the route used to remove the route.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a listener for a certain channel.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel the route should be registered for",
            "paramName": "channel",
            "description": " The channel the route should be registered for",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "type {String|RegExp} The type, used for checking if the executed path matches",
            "paramName": "type",
            "description": " The type, used for checking if the executed path matches",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "handler {Function} The handler to call if the route matches the executed path",
            "paramName": "handler",
            "description": " The handler to call if the route matches the executed path",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "scope {var ? null} The scope of the handler.",
            "paramName": "scope",
            "description": " The scope of the handler.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The id of the route used to remove the route.",
            "type": "string",
            "description": "The id of the route used to remove the route."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 3066
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3808
        }
      },
      "type": "function",
      "params": [
        {
          "name": "channel",
          "type": "string"
        },
        {
          "name": "type",
          "type": [
            "String",
            "RegExp"
          ]
        },
        {
          "name": "handler",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "scope",
          "type": "var",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes a registered listener by the given id.",
          "     *",
          "     * @param id {String} The id of the registered listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a registered listener by the given id.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id of the registered listener.",
            "paramName": "id",
            "description": " The id of the registered listener.",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3953
        },
        "end": {
          "line": 127,
          "column": 5,
          "index": 4139
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "has": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if a listener is registered for the given path in the given channel.",
          "     *",
          "     * @param channel {String} The channel of the message.",
          "     * @param path {String} The path to check.",
          "     * @return {Boolean} Whether a listener is registered.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if a listener is registered for the given path in the given channel.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel of the message.",
            "paramName": "channel",
            "description": " The channel of the message.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "path {String} The path to check.",
            "paramName": "path",
            "description": " The path to check.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether a listener is registered.",
            "type": "boolean",
            "description": "Whether a listener is registered."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 4417
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4758
        }
      },
      "type": "function",
      "params": [
        {
          "name": "channel",
          "type": "string"
        },
        {
          "name": "path",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "emit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sends a message on the given channel and informs all matching route handlers.",
          "     *",
          "     * @param channel {String} The channel of the message.",
          "     * @param path {String} The path to execute",
          "     * @param params {Map} The given parameters that should be propagated",
          "     * @param customData {var} The given custom data that should be propagated",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a message on the given channel and informs all matching route handlers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel of the message.",
            "paramName": "channel",
            "description": " The channel of the message.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "path {String} The path to execute",
            "paramName": "path",
            "description": " The path to execute",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 5133
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 5233
        }
      },
      "type": "function",
      "params": [
        {
          "name": "channel",
          "type": "string"
        },
        {
          "name": "path",
          "type": "string"
        },
        {
          "name": "params",
          "type": "Map<any, any>"
        },
        {
          "name": "customData",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "_emit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Executes a certain channel with a given path. Informs all",
          "     * route handlers that match with the path.",
          "     *",
          "     * @param channel {String} The channel to execute.",
          "     * @param path {String} The path to check",
          "     * @param params {Map} The given parameters that should be propagated",
          "     * @param customData {var} The given custom data that should be propagated",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes a certain channel with a given path. Informs all\n route handlers that match with the path.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel to execute.",
            "paramName": "channel",
            "description": " The channel to execute.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "path {String} The path to check",
            "paramName": "path",
            "description": " The path to check",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 5630
        },
        "end": {
          "line": 197,
          "column": 5,
          "index": 6239
        }
      },
      "type": "function",
      "params": [
        {
          "name": "channel",
          "type": "string"
        },
        {
          "name": "path",
          "type": "string"
        },
        {
          "name": "params",
          "type": "Map<any, any>"
        },
        {
          "name": "customData",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "_emitListeners": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Executes all given listener for a certain channel. Checks all listeners if they match",
          "     * with the given path and executes the stored handler of the matching route.",
          "     *",
          "     * @param channel {String} The channel to execute.",
          "     * @param path {String} The path to check",
          "     * @param listeners {Map[]} All routes to test and execute.",
          "     * @param params {Map} The given parameters that should be propagated",
          "     * @param customData {var} The given custom data that should be propagated",
          "     *",
          "     * @return {Boolean} Whether the route has been executed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes all given listener for a certain channel. Checks all listeners if they match\n with the given path and executes the stored handler of the matching route.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel to execute.",
            "paramName": "channel",
            "description": " The channel to execute.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "path {String} The path to check",
            "paramName": "path",
            "description": " The path to check",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listeners {Map[]} All routes to test and execute.",
            "paramName": "listeners",
            "description": " All routes to test and execute.",
            "type": "Map[]"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the route has been executed",
            "type": "boolean",
            "description": "Whether the route has been executed"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 211,
          "column": 4,
          "index": 6830
        },
        "end": {
          "line": 227,
          "column": 5,
          "index": 7283
        }
      },
      "type": "function",
      "params": [
        {
          "name": "channel",
          "type": "string"
        },
        {
          "name": "path",
          "type": "string"
        },
        {
          "name": "listeners",
          "type": "Map[]"
        },
        {
          "name": "params",
          "type": "Map<any, any>"
        },
        {
          "name": "customData",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_emitRoute": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Executes a certain listener. Checks if the listener matches the given path and",
          "     * executes the stored handler of the route.",
          "     *",
          "     * @param channel {String} The channel to execute.",
          "     * @param path {String} The path to check",
          "     * @param listener {Map} The route data.",
          "     * @param params {Map} The given parameters that should be propagated",
          "     * @param customData {var} The given custom data that should be propagated",
          "     *",
          "     * @return {Boolean} Whether the route has been executed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes a certain listener. Checks if the listener matches the given path and\n executes the stored handler of the route.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel to execute.",
            "paramName": "channel",
            "description": " The channel to execute.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "path {String} The path to check",
            "paramName": "path",
            "description": " The path to check",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Map} The route data.",
            "paramName": "listener",
            "description": " The route data.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the route has been executed",
            "type": "boolean",
            "description": "Whether the route has been executed"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 241,
          "column": 4,
          "index": 7815
        },
        "end": {
          "line": 265,
          "column": 5,
          "index": 8514
        }
      },
      "type": "function",
      "params": [
        {
          "name": "channel",
          "type": "string"
        },
        {
          "name": "path",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "Map<any, any>"
        },
        {
          "name": "params",
          "type": "Map<any, any>"
        },
        {
          "name": "customData",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}