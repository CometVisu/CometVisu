{
  "version": 0.3,
  "lastModified": 1729101021884,
  "lastModifiedIso": "2024-10-16T17:50:21.884Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/handler/GestureCore.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 24,
      "column": 0,
      "index": 632
    },
    "end": {
      "line": 961,
      "column": 3,
      "index": 29370
    }
  },
  "className": "qx.event.handler.GestureCore",
  "jsdoc": {
    "raw": [
      "*",
      " * Listens for (native or synthetic) pointer events and fires events",
      " * for gestures like \"tap\" or \"swipe\"",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Listens for (native or synthetic) pointer events and fires events\n for gestures like \"tap\" or \"swipe\"</p>"
      }
    ]
  },
  "superClass": "Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "statics": {
    "TYPES": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 29,
          "column": 4,
          "index": 758
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 930
        }
      },
      "appearsIn": []
    },
    "GESTURE_EVENTS": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 937
        },
        "end": {
          "line": 47,
          "column": 5,
          "index": 1048
        }
      },
      "appearsIn": []
    },
    "TAP_MAX_DISTANCE": {
      "jsdoc": {
        "raw": [
          "* @type {Map} Maximum distance between a pointer-down and pointer-up event, values are configurable "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maximum distance between a pointer-down and pointer-up event, values are configurable"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1164
        },
        "end": {
          "line": 50,
          "column": 54,
          "index": 1214
        }
      },
      "appearsIn": []
    },
    "DOUBLETAP_MAX_DISTANCE": {
      "jsdoc": {
        "raw": [
          "* @type {Map} Maximum distance between two subsequent taps, values are configurable "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maximum distance between two subsequent taps, values are configurable"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1345
        },
        "end": {
          "line": 53,
          "column": 60,
          "index": 1401
        }
      },
      "appearsIn": []
    },
    "SWIPE_DIRECTION": {
      "jsdoc": {
        "raw": [
          "* @type {Map} The direction of a swipe relative to the axis "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} The direction of a swipe relative to the axis"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1508
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 1584
        }
      },
      "appearsIn": []
    },
    "LONGTAP_TIME": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Integer} The time delta in milliseconds to fire a long tap event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The time delta in milliseconds to fire a long tap event."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1687
        },
        "end": {
          "line": 64,
          "column": 71,
          "index": 1754
        }
      },
      "appearsIn": []
    },
    "DOUBLETAP_TIME": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Integer} Maximum time between two tap events that will still trigger a",
          "     * dbltap event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Maximum time between two tap events that will still trigger a\n dbltap event."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 1883
        },
        "end": {
          "line": 70,
          "column": 23,
          "index": 1902
        }
      },
      "appearsIn": []
    },
    "ROLL_FACTOR": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Integer} Factor which is used for adapting the delta of the mouse wheel",
          "     * event to the roll events,",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Factor which is used for adapting the delta of the mouse wheel\n event to the roll events,"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2044
        },
        "end": {
          "line": 76,
          "column": 19,
          "index": 2059
        }
      },
      "appearsIn": []
    },
    "TOUCHPAD_ROLL_FACTOR": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Integer} Factor which is used for adapting the delta of the touchpad gesture",
          "     * event to the roll events,",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Factor which is used for adapting the delta of the touchpad gesture\n event to the roll events,"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2206
        },
        "end": {
          "line": 82,
          "column": 27,
          "index": 2229
        }
      },
      "appearsIn": []
    },
    "TOUCHPAD_WHEEL_EVENTS_THRESHOLD": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Integer} Minimum number of wheel events to receive during the",
          "     * TOUCHPAD_WHEEL_EVENTS_PERIOD to detect a touchpad.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Minimum number of wheel events to receive during the\n TOUCHPAD_WHEEL_EVENTS_PERIOD to detect a touchpad."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2386
        },
        "end": {
          "line": 88,
          "column": 39,
          "index": 2421
        }
      },
      "appearsIn": []
    },
    "TOUCHPAD_WHEEL_EVENTS_PERIOD": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Integer} Period (in ms) during which the wheel events are counted in order",
          "     * to detect a touchpad.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Period (in ms) during which the wheel events are counted in order\n to detect a touchpad."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2562
        },
        "end": {
          "line": 94,
          "column": 37,
          "index": 2595
        }
      },
      "appearsIn": []
    },
    "TOUCHPAD_WHEEL_EVENTS_TIMEOUT": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Integer} Timeout (in ms) after which the touchpad detection is reset if no wheel",
          "     * events are received in the meantime.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Timeout (in ms) after which the touchpad detection is reset if no wheel\n events are received in the meantime."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2757
        },
        "end": {
          "line": 100,
          "column": 39,
          "index": 2792
        }
      },
      "appearsIn": []
    }
  },
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "target"
      },
      {
        "name": "emitter"
      }
    ],
    "location": {
      "start": {
        "line": 108,
        "column": 2,
        "index": 2999
      },
      "end": {
        "line": 117,
        "column": 3,
        "index": 3256
      }
    }
  },
  "members": {
    "__defaultTarget": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3276
        },
        "end": {
          "line": 120,
          "column": 25,
          "index": 3297
        }
      },
      "appearsIn": []
    },
    "__emitter": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3303
        },
        "end": {
          "line": 121,
          "column": 19,
          "index": 3318
        }
      },
      "appearsIn": []
    },
    "__gesture": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3324
        },
        "end": {
          "line": 122,
          "column": 19,
          "index": 3339
        }
      },
      "appearsIn": []
    },
    "__eventName": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3345
        },
        "end": {
          "line": 123,
          "column": 21,
          "index": 3362
        }
      },
      "appearsIn": []
    },
    "__primaryTarget": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3368
        },
        "end": {
          "line": 124,
          "column": 25,
          "index": 3389
        }
      },
      "appearsIn": []
    },
    "__isMultiPointerGesture": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3395
        },
        "end": {
          "line": 125,
          "column": 33,
          "index": 3424
        }
      },
      "appearsIn": []
    },
    "__initialAngle": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3430
        },
        "end": {
          "line": 126,
          "column": 24,
          "index": 3450
        }
      },
      "appearsIn": []
    },
    "__lastTap": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3456
        },
        "end": {
          "line": 127,
          "column": 19,
          "index": 3471
        }
      },
      "appearsIn": []
    },
    "__rollImpulseId": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3477
        },
        "end": {
          "line": 128,
          "column": 25,
          "index": 3498
        }
      },
      "appearsIn": []
    },
    "__stopMomentum": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3504
        },
        "end": {
          "line": 129,
          "column": 24,
          "index": 3524
        }
      },
      "appearsIn": []
    },
    "__initialDistance": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 3530
        },
        "end": {
          "line": 130,
          "column": 27,
          "index": 3553
        }
      },
      "appearsIn": []
    },
    "__momentum": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3559
        },
        "end": {
          "line": 131,
          "column": 20,
          "index": 3575
        }
      },
      "appearsIn": []
    },
    "__rollEvents": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3581
        },
        "end": {
          "line": 132,
          "column": 22,
          "index": 3599
        }
      },
      "appearsIn": []
    },
    "__rollEventsCountStart": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 3605
        },
        "end": {
          "line": 133,
          "column": 29,
          "index": 3630
        }
      },
      "appearsIn": []
    },
    "__rollEventsCount": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 3636
        },
        "end": {
          "line": 134,
          "column": 24,
          "index": 3656
        }
      },
      "appearsIn": []
    },
    "__touchPadDetectionPerformed": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 3662
        },
        "end": {
          "line": 135,
          "column": 39,
          "index": 3697
        }
      },
      "appearsIn": []
    },
    "__lastRollEventTime": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3703
        },
        "end": {
          "line": 136,
          "column": 26,
          "index": 3725
        }
      },
      "appearsIn": []
    },
    "_initObserver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Register pointer event listeners",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Register pointer event listeners</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 141,
          "column": 4,
          "index": 3788
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 4451
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_stopObserver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove native pointer event listeners.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove native pointer event listeners.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 4520
        },
        "end": {
          "line": 187,
          "column": 5,
          "index": 5156
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "checkAndFireGesture": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if a gesture was made and fires the gesture event.",
          "     *",
          "     * @param domEvent {qx.event.type.Pointer} DOM event",
          "     * @param type {String ? null} type of the event",
          "     * @param target {Element ? null} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if a gesture was made and fires the gesture event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {qx.event.type.Pointer} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "qx.event.type.Pointer"
          },
          {
            "name": "@param",
            "body": "type {String ? null} type of the event",
            "paramName": "type",
            "description": " type of the event",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {Element ? null} event target",
            "paramName": "target",
            "description": " event target",
            "optional": true,
            "defaultValue": "null",
            "type": "Element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5412
        },
        "end": {
          "line": 214,
          "column": 5,
          "index": 5959
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "qx.event.type.Pointer"
        },
        {
          "name": "type",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "target",
          "type": "Element",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "gestureBegin": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for gesture start.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for gesture start.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 222,
          "column": 4,
          "index": 6114
        },
        "end": {
          "line": 266,
          "column": 5,
          "index": 7565
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "gestureMove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for gesture move.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for gesture move.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 274,
          "column": 4,
          "index": 7719
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 8872
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "_hasIntermediaryHandler": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if a DOM element located between the target of a gesture",
          "     * event and the element this handler is attached to has a gesture",
          "     * handler of its own.",
          "     *",
          "     * @param target {Element} The gesture event's target",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if a DOM element located between the target of a gesture\n event and the element this handler is attached to has a gesture\n handler of its own.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} The gesture event's target",
            "paramName": "target",
            "description": " The gesture event's target",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 320,
          "column": 4,
          "index": 9154
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 9387
        }
      },
      "type": "function",
      "params": [
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "gestureFinish": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper method for gesture end.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for gesture end.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 336,
          "column": 4,
          "index": 9540
        },
        "end": {
          "line": 419,
          "column": 5,
          "index": 12253
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "stopMomentum": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stops the momentum scrolling currently running.",
          "     *",
          "     * @param id {Integer} The timeoutId of a 'roll' event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the momentum scrolling currently running.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Integer} The timeoutId of a 'roll' event",
            "paramName": "id",
            "description": " The timeoutId of a 'roll' event",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 426,
          "column": 4,
          "index": 12397
        },
        "end": {
          "line": 428,
          "column": 5,
          "index": 12459
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "gestureCancel": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Cancels the gesture if running.",
          "     * @param id {Number} The pointer Id.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cancels the gesture if running.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Number} The pointer Id.",
            "paramName": "id",
            "description": " The pointer Id.",
            "type": "number"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 434,
          "column": 4,
          "index": 12563
        },
        "end": {
          "line": 443,
          "column": 5,
          "index": 12841
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "number"
        }
      ],
      "appearsIn": []
    },
    "updateGestureTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Update the target of a running gesture. This is used in virtual widgets",
          "     * when the DOM element changes.",
          "     *",
          "     * @param id {String} The pointer id.",
          "     * @param target {Element} The new target element.",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Update the target of a running gesture. This is used in virtual widgets\n when the DOM element changes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The pointer id.",
            "paramName": "id",
            "description": " The pointer id.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "target {Element} The new target element.",
            "paramName": "target",
            "description": " The new target element.",
            "type": "qx.event.handler.Element"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 453,
          "column": 4,
          "index": 13101
        },
        "end": {
          "line": 455,
          "column": 5,
          "index": 13182
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "string"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "__handleRollImpulse": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Method which will be called recursively to provide a momentum scrolling.",
          "     * @param deltaX {Number} The last offset in X direction",
          "     * @param deltaY {Number} The last offset in Y direction",
          "     * @param domEvent {Event} The original gesture event",
          "     * @param target {Element} The target of the momentum roll events",
          "     * @param time {Number ?} The time in ms between the last two calls",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method which will be called recursively to provide a momentum scrolling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "deltaX {Number} The last offset in X direction",
            "paramName": "deltaX",
            "description": " The last offset in X direction",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "deltaY {Number} The last offset in Y direction",
            "paramName": "deltaY",
            "description": " The last offset in Y direction",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "domEvent {Event} The original gesture event",
            "paramName": "domEvent",
            "description": " The original gesture event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} The target of the momentum roll events",
            "paramName": "target",
            "description": " The target of the momentum roll events",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "time {Number ?} The time in ms between the last two calls",
            "paramName": "time",
            "description": " The time in ms between the last two calls",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 465,
          "column": 4,
          "index": 13607
        },
        "end": {
          "line": 521,
          "column": 5,
          "index": 15294
        }
      },
      "type": "function",
      "params": [
        {
          "name": "deltaX",
          "type": "number"
        },
        {
          "name": "deltaY",
          "type": "number"
        },
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        },
        {
          "name": "time",
          "type": "Number",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "_calcAngle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calculates the angle of the primary and secondary pointer.",
          "     * @return {Number} the rotation angle of the 2 pointers.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the angle of the primary and secondary pointer.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the rotation angle of the 2 pointers.",
            "type": "number",
            "description": "the rotation angle of the 2 pointers."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 527,
          "column": 4,
          "index": 15445
        },
        "end": {
          "line": 544,
          "column": 5,
          "index": 15910
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "_calcDistance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calculates the scaling distance between two pointers.",
          "     * @return {Number} the calculated distance.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the scaling distance between two pointers.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the calculated distance.",
            "type": "number",
            "description": "the calculated distance."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 550,
          "column": 4,
          "index": 16043
        },
        "end": {
          "line": 569,
          "column": 5,
          "index": 16522
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "_isBelowTapMaxDistance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if the distance between the x/y coordinates of DOM event",
          "     * exceeds TAP_MAX_DISTANCE and returns the result.",
          "     *",
          "     * @param domEvent {Event} The DOM event from the browser.",
          "     * @return {Boolean|null} true if distance is below TAP_MAX_DISTANCE.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the distance between the x/y coordinates of DOM event\n exceeds TAP<em>MAX</em>DISTANCE and returns the result.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} The DOM event from the browser.",
            "paramName": "domEvent",
            "description": " The DOM event from the browser.",
            "type": "Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|null} true if distance is below TAP_MAX_DISTANCE.",
            "type": "Boolean|null",
            "description": "true if distance is below TAP_MAX_DISTANCE."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 578,
          "column": 4,
          "index": 16816
        },
        "end": {
          "line": 592,
          "column": 5,
          "index": 17189
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        }
      ],
      "returnType": {
        "type": "Boolean|null"
      },
      "appearsIn": []
    },
    "__isBelowDoubleTapDistance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if the distance between the x1/y1 and x2/y2 is",
          "     * below the TAP_MAX_DISTANCE and returns the result.",
          "     *",
          "     * @param x1 {Number} The x position of point one.",
          "     * @param y1 {Number} The y position of point one.",
          "     * @param x2 {Number} The x position of point two.",
          "     * @param y2 {Number} The y position of point two.",
          "     * @param type {String} The pointer type e.g. \"mouse\"",
          "     * @return {Boolean} <code>true</code>, if points are in range",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the distance between the x1/y1 and x2/y2 is\n below the TAP<em>MAX</em>DISTANCE and returns the result.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x1 {Number} The x position of point one.",
            "paramName": "x1",
            "description": " The x position of point one.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "y1 {Number} The y position of point one.",
            "paramName": "y1",
            "description": " The y position of point one.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "x2 {Number} The x position of point two.",
            "paramName": "x2",
            "description": " The x position of point two.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "y2 {Number} The y position of point two.",
            "paramName": "y2",
            "description": " The y position of point two.",
            "type": "number"
          },
          {
            "name": "@param",
            "body": "type {String} The pointer type e.g. \"mouse\"",
            "paramName": "type",
            "description": " The pointer type e.g. \"mouse\"",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if points are in range",
            "type": "boolean",
            "description": "<code>true</code>, if points are in range"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 605,
          "column": 4,
          "index": 17683
        },
        "end": {
          "line": 612,
          "column": 5,
          "index": 17958
        }
      },
      "type": "function",
      "params": [
        {
          "name": "x1",
          "type": "number"
        },
        {
          "name": "y1",
          "type": "number"
        },
        {
          "name": "x2",
          "type": "number"
        },
        {
          "name": "y2",
          "type": "number"
        },
        {
          "name": "type",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_getDeltaCoordinates": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Calculates the delta coordinates in relation to the position on <code>pointerstart</code> event.",
          "     * @param domEvent {Event} The DOM event from the browser.",
          "     * @return {Map} containing the deltaX as x, and deltaY as y.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the delta coordinates in relation to the position on <code>pointerstart</code> event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} The DOM event from the browser.",
            "paramName": "domEvent",
            "description": " The DOM event from the browser.",
            "type": "Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} containing the deltaX as x, and deltaY as y.",
            "type": "Map<any, any>",
            "description": "containing the deltaX as x, and deltaY as y."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 619,
          "column": 4,
          "index": 18214
        },
        "end": {
          "line": 638,
          "column": 5,
          "index": 18644
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        }
      ],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "_fireEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fire a gesture event with the given parameters",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param type {String} type of the event",
          "     * @param target {Element ? null} event target",
          "     * @return {qx.Promise?} a promise, if one or more of the event handlers returned a promise",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a gesture event with the given parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "type {String} type of the event",
            "paramName": "type",
            "description": " type of the event",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "target {Element ? null} event target",
            "paramName": "target",
            "description": " event target",
            "optional": true,
            "defaultValue": "null",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if one or more of the event handlers returned a promise",
            "type": "qx.Promise?",
            "description": "a promise, if one or more of the event handlers returned a promise"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 648,
          "column": 4,
          "index": 18962
        },
        "end": {
          "line": 681,
          "column": 5,
          "index": 20067
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "target",
          "type": "Element",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.Promise?"
      },
      "appearsIn": []
    },
    "_onDblClick": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fire \"tap\" and \"dbltap\" events after a native \"dblclick\"",
          "     * event to fix IE 8's broken mouse event sequence.",
          "     *",
          "     * @param domEvent {Event} dblclick event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire \"tap\" and \"dbltap\" events after a native \"dblclick\"\n event to fix IE 8's broken mouse event sequence.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} dblclick event",
            "paramName": "domEvent",
            "description": " dblclick event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 689,
          "column": 4,
          "index": 20263
        },
        "end": {
          "line": 693,
          "column": 5,
          "index": 20444
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "__getSwipeGesture": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the swipe gesture when the user performed a swipe.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     * @return {Map|null} returns the swipe data when the user performed a swipe, null if the gesture was no swipe.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the swipe gesture when the user performed a swipe.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} returns the swipe data when the user performed a swipe, null if the gesture was no swipe.",
            "type": "Map|null",
            "description": "returns the swipe data when the user performed a swipe, null if the gesture was no swipe."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 702,
          "column": 4,
          "index": 20741
        },
        "end": {
          "line": 729,
          "column": 5,
          "index": 21591
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "returnType": {
        "type": "Map|null"
      },
      "appearsIn": []
    },
    "__fireTrack": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires a track event.",
          "     *",
          "     * @param type {String} the track type",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a track event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} the track type",
            "paramName": "type",
            "description": " the track type",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 738,
          "column": 4,
          "index": 21777
        },
        "end": {
          "line": 741,
          "column": 5,
          "index": 21946
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "__fireRollEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires a roll event.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     * @param rollFactor {Integer} the roll factor to apply",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a roll event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "rollFactor {Integer} the roll factor to apply",
            "paramName": "rollFactor",
            "description": " the roll factor to apply",
            "type": "Integer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 750,
          "column": 4,
          "index": 22148
        },
        "end": {
          "line": 760,
          "column": 5,
          "index": 22566
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        },
        {
          "name": "rollFactor",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "__performAdaptativeRollScrolling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Triggers the adaptative roll scrolling.",
          "     *",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Triggers the adaptative roll scrolling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 767,
          "column": 4,
          "index": 22687
        },
        "end": {
          "line": 780,
          "column": 5,
          "index": 23259
        }
      },
      "type": "function",
      "params": [
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "__endTouchPadDetection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Ends touch pad detection process.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Ends touch pad detection process.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 785,
          "column": 4,
          "index": 23323
        },
        "end": {
          "line": 798,
          "column": 5,
          "index": 23793
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_isTouchPadDetectionEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Is touchpad detection enabled ? Default implementation activates it only for Mac OS after Sierra (>= 10.12).",
          "     * @return {boolean} true if touchpad detection should occur.",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Is touchpad detection enabled ? Default implementation activates it only for Mac OS after Sierra (&gt;= 10.12).</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{boolean} true if touchpad detection should occur.",
            "type": "boolean",
            "description": "true if touchpad detection should occur."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 805,
          "column": 4,
          "index": 24015
        },
        "end": {
          "line": 810,
          "column": 5,
          "index": 24186
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_fireRoll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires a roll event after determining the roll factor to apply. Mac OS Sierra (10.12+)",
          "     * introduces a lot more wheel events fired from the trackpad, so the roll factor to be applied",
          "     * has to be reduced in order to make the scrolling less sensitive.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param type {String} The type of the dom event",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a roll event after determining the roll factor to apply. Mac OS Sierra (10.12+)\n introduces a lot more wheel events fired from the trackpad, so the roll factor to be applied\n has to be reduced in order to make the scrolling less sensitive.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "type {String} The type of the dom event",
            "paramName": "type",
            "description": " The type of the dom event",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 821,
          "column": 4,
          "index": 24620
        },
        "end": {
          "line": 892,
          "column": 5,
          "index": 27555
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "__fireRotate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires a rotate event.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a rotate event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 900,
          "column": 4,
          "index": 27699
        },
        "end": {
          "line": 906,
          "column": 5,
          "index": 27958
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "__firePinch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires a pinch event.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a pinch event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 914,
          "column": 4,
          "index": 28101
        },
        "end": {
          "line": 921,
          "column": 5,
          "index": 28401
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "__fireLongTap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fires the long tap event.",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param target {Element} event target",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires the long tap event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 929,
          "column": 4,
          "index": 28549
        },
        "end": {
          "line": 936,
          "column": 5,
          "index": 28814
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "target",
          "type": "qx.event.handler.Element"
        }
      ],
      "appearsIn": []
    },
    "__stopLongTapTimer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stops the time for the long tap event.",
          "     * @param gesture {Map} Data may representing the gesture.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the time for the long tap event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "gesture {Map} Data may representing the gesture.",
            "paramName": "gesture",
            "description": " Data may representing the gesture.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 942,
          "column": 4,
          "index": 28946
        },
        "end": {
          "line": 947,
          "column": 5,
          "index": 29111
        }
      },
      "type": "function",
      "params": [
        {
          "name": "gesture",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "dispose": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Dispose the current instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose the current instance</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 952,
          "column": 4,
          "index": 29170
        },
        "end": {
          "line": 959,
          "column": 5,
          "index": 29362
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    }
  },
  "properties": {}
}