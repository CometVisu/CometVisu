{
  "version": 0.3,
  "lastModified": 1717235172010,
  "lastModifiedIso": "2024-06-01T09:46:12.010Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/handler/PointerCore.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 26,
      "column": 0,
      "index": 631
    },
    "end": {
      "line": 571,
      "column": 3,
      "index": 17244
    }
  },
  "className": "qx.event.handler.PointerCore",
  "jsdoc": {
    "raw": [
      "*",
      " * Low-level pointer event handler.",
      " *",
      " * @require(qx.bom.client.Event)",
      " * @require(qx.bom.client.Device)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Low-level pointer event handler.</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.bom.client.Event"
      },
      {
        "name": "@require",
        "body": "qx.bom.client.Device"
      }
    ]
  },
  "superClass": "Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "statics": {
    "MOUSE_TO_POINTER_MAPPING": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 31,
          "column": 4,
          "index": 757
        },
        "end": {
          "line": 37,
          "column": 5,
          "index": 943
        }
      },
      "appearsIn": []
    },
    "TOUCH_TO_POINTER_MAPPING": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 39,
          "column": 4,
          "index": 950
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1112
        }
      },
      "appearsIn": []
    },
    "MSPOINTER_TO_POINTER_MAPPING": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1119
        },
        "end": {
          "line": 55,
          "column": 5,
          "index": 1445
        }
      },
      "appearsIn": []
    },
    "POINTER_TO_GESTURE_MAPPING": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 57,
          "column": 4,
          "index": 1452
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1627
        }
      },
      "appearsIn": []
    },
    "LEFT_BUTTON": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1634
        },
        "end": {
          "line": 68,
          "column": 11,
          "index": 1789
        }
      },
      "appearsIn": []
    },
    "SIM_MOUSE_DISTANCE": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 1796
        },
        "end": {
          "line": 70,
          "column": 26,
          "index": 1818
        }
      },
      "appearsIn": []
    },
    "SIM_MOUSE_DELAY": {
      "jsdoc": null,
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 1825
        },
        "end": {
          "line": 72,
          "column": 25,
          "index": 1846
        }
      },
      "appearsIn": []
    },
    "__lastTouch": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Coordinates of the last touch. This needs to be static because the target could",
          "     * change between touch and simulated mouse events. Touch events will be detected",
          "     * by one instance which moves the target. The simulated mouse events will be fired with",
          "     * a delay which causes another target and with that, another instance of this handler.",
          "     * last touch was.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Coordinates of the last touch. This needs to be static because the target could\n change between touch and simulated mouse events. Touch events will be detected\n by one instance which moves the target. The simulated mouse events will be fired with\n a delay which causes another target and with that, another instance of this handler.\n last touch was.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2250
        },
        "end": {
          "line": 81,
          "column": 21,
          "index": 2267
        }
      },
      "appearsIn": []
    }
  },
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "target"
      },
      {
        "name": "emitter"
      }
    ],
    "location": {
      "start": {
        "line": 91,
        "column": 2,
        "index": 2513
      },
      "end": {
        "line": 160,
        "column": 3,
        "index": 4307
      }
    }
  },
  "members": {
    "__defaultTarget": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 4327
        },
        "end": {
          "line": 163,
          "column": 25,
          "index": 4348
        }
      },
      "appearsIn": []
    },
    "__emitter": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 4354
        },
        "end": {
          "line": 164,
          "column": 19,
          "index": 4369
        }
      },
      "appearsIn": []
    },
    "__eventNames": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 4375
        },
        "end": {
          "line": 165,
          "column": 22,
          "index": 4393
        }
      },
      "appearsIn": []
    },
    "__nativePointerEvents": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 4399
        },
        "end": {
          "line": 166,
          "column": 32,
          "index": 4427
        }
      },
      "appearsIn": []
    },
    "__wrappedListener": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 4433
        },
        "end": {
          "line": 167,
          "column": 27,
          "index": 4456
        }
      },
      "appearsIn": []
    },
    "__lastButtonState": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 168,
          "column": 4,
          "index": 4462
        },
        "end": {
          "line": 168,
          "column": 24,
          "index": 4482
        }
      },
      "appearsIn": []
    },
    "__buttonStates": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 4488
        },
        "end": {
          "line": 169,
          "column": 24,
          "index": 4508
        }
      },
      "appearsIn": []
    },
    "__primaryIdentifier": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 4514
        },
        "end": {
          "line": 170,
          "column": 29,
          "index": 4539
        }
      },
      "appearsIn": []
    },
    "__activeTouches": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 171,
          "column": 4,
          "index": 4545
        },
        "end": {
          "line": 171,
          "column": 25,
          "index": 4566
        }
      },
      "appearsIn": []
    },
    "_processedFlag": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 172,
          "column": 4,
          "index": 4572
        },
        "end": {
          "line": 172,
          "column": 24,
          "index": 4592
        }
      },
      "appearsIn": []
    },
    "_initPointerObserver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds listeners to native pointer events if supported",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds listeners to native pointer events if supported</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 4675
        },
        "end": {
          "line": 179,
          "column": 5,
          "index": 4753
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_initObserver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Register native event listeners",
          "     * @param callback {Function} listener callback",
          "     * @param useEmitter {Boolean} attach listener to Emitter instead of",
          "     * native event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Register native event listeners</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} listener callback",
            "paramName": "callback",
            "description": " listener callback",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "useEmitter {Boolean} attach listener to Emitter instead of\n native event",
            "paramName": "useEmitter",
            "description": " attach listener to Emitter instead of\n native event",
            "type": "boolean"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 4960
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 5638
        }
      },
      "type": "function",
      "params": [
        {
          "name": "callback",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "useEmitter",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "_onPointerEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for native pointer events",
          "     * @param domEvent {Event}  Native DOM event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for native pointer events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event}  Native DOM event",
            "paramName": "domEvent",
            "description": "  Native DOM event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 211,
          "column": 4,
          "index": 5751
        },
        "end": {
          "line": 230,
          "column": 5,
          "index": 6425
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "_onTouchEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for touch events",
          "     * @param domEvent {Event} Native DOM event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for touch events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native DOM event",
            "paramName": "domEvent",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 236,
          "column": 4,
          "index": 6528
        },
        "end": {
          "line": 344,
          "column": 5,
          "index": 10099
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "_onMouseEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for touch events",
          "     * @param domEvent {Event} Native DOM event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for touch events</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native DOM event",
            "paramName": "domEvent",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 350,
          "column": 4,
          "index": 10202
        },
        "end": {
          "line": 420,
          "column": 5,
          "index": 12387
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        }
      ],
      "appearsIn": []
    },
    "_determineActiveTouches": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Determines the current active touches.",
          "     * @param type {String} the DOM event type.",
          "     * @param changedTouches {Array} the current changed touches.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Determines the current active touches.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} the DOM event type.",
            "paramName": "type",
            "description": " the DOM event type.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "changedTouches {Array} the current changed touches.",
            "paramName": "changedTouches",
            "description": " the current changed touches.",
            "type": "Array<any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 12570
        },
        "end": {
          "line": 452,
          "column": 5,
          "index": 13392
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "changedTouches",
          "type": "Array<any>"
        }
      ],
      "appearsIn": []
    },
    "_isSimulatedMouseEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the given MouseEvent position is identical to the previously fired TouchEvent position.",
          "     * If <code>true</code> the corresponding event can be identified as simulated.",
          "     * @param x {Integer} current mouse x",
          "     * @param y {Integer} current mouse y",
          "     * @return {Boolean} <code>true</code> if passed mouse position is a synthetic MouseEvent.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the given MouseEvent position is identical to the previously fired TouchEvent position.\n If <code>true</code> the corresponding event can be identified as simulated.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x {Integer} current mouse x",
            "paramName": "x",
            "description": " current mouse x",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "y {Integer} current mouse y",
            "paramName": "y",
            "description": " current mouse y",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if passed mouse position is a synthetic MouseEvent.",
            "type": "boolean",
            "description": "<code>true</code> if passed mouse position is a synthetic MouseEvent."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 461,
          "column": 4,
          "index": 13789
        },
        "end": {
          "line": 475,
          "column": 5,
          "index": 14390
        }
      },
      "type": "function",
      "params": [
        {
          "name": "x",
          "type": "Integer"
        },
        {
          "name": "y",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_stopObserver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes native pointer event listeners.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes native pointer event listeners.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 480,
          "column": 4,
          "index": 14460
        },
        "end": {
          "line": 488,
          "column": 5,
          "index": 14701
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_fireEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fire a touch event with the given parameters",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param type {String ? null} type of the event",
          "     * @param target {Element ? null} event target",
          "     * @return {qx.Promise?} a promise, if one was returned by event handlers",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a touch event with the given parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "type {String ? null} type of the event",
            "paramName": "type",
            "description": " type of the event",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {Element ? null} event target",
            "paramName": "target",
            "description": " event target",
            "optional": true,
            "defaultValue": "null",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if one was returned by event handlers",
            "type": "qx.Promise?",
            "description": "a promise, if one was returned by event handlers"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 498,
          "column": 4,
          "index": 15006
        },
        "end": {
          "line": 561,
          "column": 5,
          "index": 17089
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "type",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "target",
          "type": "Element",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.Promise?"
      },
      "appearsIn": []
    },
    "dispose": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Dispose this object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose this object</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 566,
          "column": 4,
          "index": 17139
        },
        "end": {
          "line": 569,
          "column": 5,
          "index": 17236
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    }
  },
  "properties": {}
}