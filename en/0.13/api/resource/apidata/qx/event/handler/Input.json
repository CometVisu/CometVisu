{
  "className": "qx.event.handler.Input",
  "packageName": "qx.event.handler",
  "name": "Input",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.event.IEventHandler"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 53,
        "column": 0,
        "index": 1875
      },
      "end": {
        "line": 735,
        "column": 3,
        "index": 22047
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This handler provides an \"change\" event for all form fields and an\n \"input\" event for form fields of type \"text\" and \"textarea\".\n To let these events work it is needed to create the elements using\n {@link qx.bom.Input}</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 63,
        "column": 2,
        "index": 2183
      },
      "end": {
        "line": 84,
        "column": 3,
        "index": 2872
      }
    },
    "jsdoc": {}
  },
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 3138
        },
        "end": {
          "line": 94,
          "column": 51,
          "index": 3185
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this handler"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "SUPPORTED_TYPES": {
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 3240
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 3299
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Supported event types"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TARGET_CHECK": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 3362
        },
        "end": {
          "line": 103,
          "column": 55,
          "index": 3413
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Which target check to use"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "IGNORE_CAN_HANDLE": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 3501
        },
        "end": {
          "line": 106,
          "column": 28,
          "index": 3525
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Whether the method \"canHandleEvent\" must be called"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__enter": {
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3778
        },
        "end": {
          "line": 117,
          "column": 18,
          "index": 3792
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "private"
    },
    "__onInputTimeoutId": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3799
        },
        "end": {
          "line": 118,
          "column": 28,
          "index": 3823
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__oldValue": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3885
        },
        "end": {
          "line": 121,
          "column": 20,
          "index": 3901
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "private"
    },
    "__oldInputValue": {
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3953
        },
        "end": {
          "line": 124,
          "column": 25,
          "index": 3974
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "private"
    },
    "canHandleEvent": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4227
        },
        "end": {
          "line": 148,
          "column": 5,
          "index": 4608
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "registerEvent": {
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4650
        },
        "end": {
          "line": 239,
          "column": 5,
          "index": 7411
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "__registerInputListener": {
      "location": {
        "start": {
          "line": 241,
          "column": 4,
          "index": 7420
        },
        "end": {
          "line": 305,
          "column": 6,
          "index": 9444
        }
      },
      "type": "variable",
      "access": "private"
    },
    "unregisterEvent": {
      "location": {
        "start": {
          "line": 308,
          "column": 4,
          "index": 9486
        },
        "end": {
          "line": 386,
          "column": 5,
          "index": 11900
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "__unregisterInputListener": {
      "location": {
        "start": {
          "line": 388,
          "column": 4,
          "index": 11909
        },
        "end": {
          "line": 465,
          "column": 6,
          "index": 13959
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_onKeyPress": {
      "location": {
        "start": {
          "line": 482,
          "column": 4,
          "index": 14594
        },
        "end": {
          "line": 512,
          "column": 6,
          "index": 15412
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for fixing the different behavior when pressing the enter key.\n FF and Safari fire a \"change\" event if the user presses the enter key.\n IE and Opera fire the event only if the focus is changed.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e, target)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} DOM event object",
            "paramName": "e",
            "description": " DOM event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_inputFix": {
      "location": {
        "start": {
          "line": 531,
          "column": 4,
          "index": 16062
        },
        "end": {
          "line": 547,
          "column": 6,
          "index": 16540
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for fixing the different behavior when pressing the backspace or\n delete key.\n The other browsers fire a \"input\" event if the user presses the backspace\n or delete key.\n IE fire the event only for other keys.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e, target)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} DOM event object",
            "paramName": "e",
            "description": " DOM event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onKeyDown": {
      "location": {
        "start": {
          "line": 561,
          "column": 4,
          "index": 16969
        },
        "end": {
          "line": 570,
          "column": 6,
          "index": 17188
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Key event listener for opera which recognizes if the enter key has been\n pressed.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} DOM event object",
            "paramName": "e",
            "description": " DOM event object",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onKeyUp": {
      "location": {
        "start": {
          "line": 579,
          "column": 4,
          "index": 17393
        },
        "end": {
          "line": 588,
          "column": 6,
          "index": 17611
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Key event listener for opera which recognizes if the enter key has been\n pressed.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} DOM event object",
            "paramName": "e",
            "description": " DOM event object",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onInput": {
      "location": {
        "start": {
          "line": 602,
          "column": 4,
          "index": 18015
        },
        "end": {
          "line": 627,
          "column": 6,
          "index": 18995
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function called by input elements created using {@link qx.bom.Input}.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Native DOM event",
            "paramName": "e",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onChangeValue": {
      "location": {
        "start": {
          "line": 635,
          "column": 4,
          "index": 19190
        },
        "end": {
          "line": 651,
          "column": 6,
          "index": 19696
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function called by input elements created using {@link qx.bom.Input}.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Native DOM event",
            "paramName": "e",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onChangeChecked": {
      "location": {
        "start": {
          "line": 659,
          "column": 4,
          "index": 19891
        },
        "end": {
          "line": 676,
          "column": 6,
          "index": 20403
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function called by input elements created using {@link qx.bom.Input}.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Native DOM event",
            "paramName": "e",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onProperty": {
      "location": {
        "start": {
          "line": 684,
          "column": 4,
          "index": 20598
        },
        "end": {
          "line": 723,
          "column": 6,
          "index": 21773
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function called by input elements created using {@link qx.bom.Input}.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Native DOM event",
            "paramName": "e",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 732,
        "column": 2,
        "index": 21973
      },
      "end": {
        "line": 734,
        "column": 3,
        "index": 22042
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}