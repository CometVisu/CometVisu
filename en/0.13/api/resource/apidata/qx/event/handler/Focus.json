{
  "className": "qx.event.handler.Focus",
  "packageName": "qx.event.handler",
  "name": "Focus",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.event.IEventHandler",
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 38,
        "column": 0,
        "index": 1195
      },
      "end": {
        "line": 1577,
        "column": 3,
        "index": 43157
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This handler is used to normalize all focus/activation requirements\n and normalize all cross browser quirks in this area.\n Notes:</p>\n<ul>\n<li>Webkit and Opera (before 9.5) do not support tabIndex for all elements\n(See also: https://bugs.webkit.org/show_bug.cgi?id=7138)</li>\n<li>TabIndex is normally 0, which means all naturally focusable elements are focusable.</li>\n<li>TabIndex &gt; 0 means that the element is focusable and tabable</li>\n<li>TabIndex &lt; 0 means that the element, even if naturally possible, is not focusable.\nNOTE: Instances of this class must be disposed of after use</li>\n</ul>"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.event.dispatch.DomBubbling"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 55,
        "column": 2,
        "index": 1676
      },
      "end": {
        "line": 77,
        "column": 3,
        "index": 2330
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Create a new instance</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "manager {qx.event.Manager} Event manager for the window to use",
          "paramName": "manager",
          "description": " Event manager for the window to use",
          "type": "qx.event.Manager"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.application.Inline"
        }
      ]
    }
  },
  "properties": {
    "active": {
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2574
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2639
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The active DOM element</p>"
          }
        ]
      },
      "name": "active",
      "propertyType": "new",
      "apply": "_applyActive",
      "nullable": true,
      "allowNull": true
    },
    "focus": {
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2681
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 2744
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The focused DOM element</p>"
          }
        ]
      },
      "name": "focus",
      "propertyType": "new",
      "apply": "_applyFocus",
      "nullable": true,
      "allowNull": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 3004
        },
        "end": {
          "line": 107,
          "column": 51,
          "index": 3051
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this handler"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "SUPPORTED_TYPES": {
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3103
        },
        "end": {
          "line": 117,
          "column": 5,
          "index": 3234
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Supported event types"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "IGNORE_CAN_HANDLE": {
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3319
        },
        "end": {
          "line": 120,
          "column": 27,
          "index": 3342
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Whether the method \"canHandleEvent\" must be called"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "FOCUSABLE_ELEMENTS": {
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3450
        },
        "end": {
          "line": 165,
          "column": 6,
          "index": 4130
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} See: http://msdn.microsoft.com/en-us/library/ms534654(VS.85).aspx"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__onNativeMouseDownWrapper": {
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 4338
        },
        "end": {
          "line": 175,
          "column": 36,
          "index": 4370
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeMouseUpWrapper": {
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 4376
        },
        "end": {
          "line": 176,
          "column": 34,
          "index": 4406
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusWrapper": {
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 4412
        },
        "end": {
          "line": 177,
          "column": 32,
          "index": 4440
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeBlurWrapper": {
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 4446
        },
        "end": {
          "line": 178,
          "column": 31,
          "index": 4473
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeDragGestureWrapper": {
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 4479
        },
        "end": {
          "line": 179,
          "column": 38,
          "index": 4513
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeSelectStartWrapper": {
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 4519
        },
        "end": {
          "line": 180,
          "column": 38,
          "index": 4553
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusInWrapper": {
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 4559
        },
        "end": {
          "line": 181,
          "column": 34,
          "index": 4589
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusOutWrapper": {
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 4595
        },
        "end": {
          "line": 182,
          "column": 35,
          "index": 4626
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__previousFocus": {
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 4632
        },
        "end": {
          "line": 183,
          "column": 25,
          "index": 4653
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__previousActive": {
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 4659
        },
        "end": {
          "line": 184,
          "column": 26,
          "index": 4681
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__down": {
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 4687
        },
        "end": {
          "line": 185,
          "column": 14,
          "index": 4697
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__up": {
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 4703
        },
        "end": {
          "line": 186,
          "column": 12,
          "index": 4711
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__needsScrollFix": {
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 4717
        },
        "end": {
          "line": 187,
          "column": 27,
          "index": 4740
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__relatedTarget": {
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 4746
        },
        "end": {
          "line": 188,
          "column": 25,
          "index": 4767
        }
      },
      "type": "variable",
      "access": "private"
    },
    "canHandleEvent": {
      "location": {
        "start": {
          "line": 197,
          "column": 4,
          "index": 5011
        },
        "end": {
          "line": 197,
          "column": 35,
          "index": 5042
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "registerEvent": {
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5081
        },
        "end": {
          "line": 202,
          "column": 5,
          "index": 5164
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "unregisterEvent": {
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 5203
        },
        "end": {
          "line": 207,
          "column": 5,
          "index": 5288
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "focus": {
      "location": {
        "start": {
          "line": 220,
          "column": 4,
          "index": 5615
        },
        "end": {
          "line": 255,
          "column": 5,
          "index": 6855
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Focuses the given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to focus",
            "paramName": "element",
            "description": " DOM element to focus",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "activate": {
      "location": {
        "start": {
          "line": 262,
          "column": 4,
          "index": 6980
        },
        "end": {
          "line": 264,
          "column": 5,
          "index": 7036
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Activates the given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to activate",
            "paramName": "element",
            "description": " DOM element to activate",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blur": {
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 7154
        },
        "end": {
          "line": 283,
          "column": 5,
          "index": 7389
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Blurs the given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to focus",
            "paramName": "element",
            "description": " DOM element to focus",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 7516
        },
        "end": {
          "line": 294,
          "column": 5,
          "index": 7621
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Deactivates the given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to activate",
            "paramName": "element",
            "description": " DOM element to activate",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "tryActivate": {
      "location": {
        "start": {
          "line": 302,
          "column": 4,
          "index": 7811
        },
        "end": {
          "line": 307,
          "column": 5,
          "index": 7958
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tries to activate the given element. This checks whether\n the activation is allowed first.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to activate",
            "paramName": "element",
            "description": " DOM element to activate",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__fireEvent": {
      "location": {
        "start": {
          "line": 324,
          "column": 4,
          "index": 8581
        },
        "end": {
          "line": 334,
          "column": 5,
          "index": 8865
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shorthand to fire events from within this class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} DOM element which is the target",
            "paramName": "target",
            "description": " DOM element which is the target",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "related {Element} DOM element which is the related target",
            "paramName": "related",
            "description": " DOM element which is the related target",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "type {String} Name of the event to fire",
            "paramName": "type",
            "description": " Name of the event to fire",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "bubbles {Boolean} Whether the event should bubble",
            "paramName": "bubbles",
            "description": " Whether the event should bubble",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if one or more of the event handlers returned a promise",
            "type": "qx.Promise?",
            "description": " a promise, if one or more of the event handlers returned a promise"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_windowFocused": {
      "location": {
        "start": {
          "line": 343,
          "column": 4,
          "index": 9146
        },
        "end": {
          "line": 343,
          "column": 24,
          "index": 9166
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the window is focused currently"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__doWindowBlur": {
      "location": {
        "start": {
          "line": 348,
          "column": 4,
          "index": 9254
        },
        "end": {
          "line": 355,
          "column": 5,
          "index": 9520
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper for native event listeners to react on window blur</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__doWindowFocus": {
      "location": {
        "start": {
          "line": 360,
          "column": 4,
          "index": 9609
        },
        "end": {
          "line": 367,
          "column": 5,
          "index": 9878
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper for native event listeners to react on window focus</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_initObserver": {
      "location": {
        "start": {
          "line": 380,
          "column": 4,
          "index": 10170
        },
        "end": {
          "line": 706,
          "column": 6,
          "index": 18567
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes event listeners.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_stopObserver": {
      "location": {
        "start": {
          "line": 713,
          "column": 4,
          "index": 18662
        },
        "end": {
          "line": 893,
          "column": 6,
          "index": 23024
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disconnects event listeners.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__onNativeDragGesture": {
      "location": {
        "start": {
          "line": 910,
          "column": 4,
          "index": 23560
        },
        "end": {
          "line": 921,
          "column": 5,
          "index": 23909
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>draggesture</code> event\n supported by gecko. Used to stop native drag and drop when\n selection is disabled.</p>"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "https://developer.mozilla.org/en-US/docs/Drag_and_Drop"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusIn": {
      "location": {
        "start": {
          "line": 930,
          "column": 4,
          "index": 24142
        },
        "end": {
          "line": 1003,
          "column": 5,
          "index": 26490
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>DOMFocusIn</code> or <code>focusin</code>\n depending on the client's engine.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocusOut": {
      "location": {
        "start": {
          "line": 1012,
          "column": 4,
          "index": 26725
        },
        "end": {
          "line": 1085,
          "column": 5,
          "index": 28967
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>DOMFocusOut</code> or <code>focusout</code>\n depending on the client's engine.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeBlur": {
      "location": {
        "start": {
          "line": 1093,
          "column": 4,
          "index": 29130
        },
        "end": {
          "line": 1123,
          "column": 5,
          "index": 30098
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>blur</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeFocus": {
      "location": {
        "start": {
          "line": 1131,
          "column": 4,
          "index": 30262
        },
        "end": {
          "line": 1171,
          "column": 5,
          "index": 31495
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>focus</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeMouseDown": {
      "location": {
        "start": {
          "line": 1179,
          "column": 4,
          "index": 31663
        },
        "end": {
          "line": 1277,
          "column": 5,
          "index": 34969
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>mousedown</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeMouseUp": {
      "location": {
        "start": {
          "line": 1285,
          "column": 4,
          "index": 35135
        },
        "end": {
          "line": 1322,
          "column": 5,
          "index": 36237
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>mouseup</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__getCorrectFocusTarget": {
      "location": {
        "start": {
          "line": 1331,
          "column": 4,
          "index": 36492
        },
        "end": {
          "line": 1353,
          "column": 5,
          "index": 37274
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fix for bug #9331.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(target)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} element to check",
            "paramName": "target",
            "description": " element to check",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} return correct target (in case of compound input controls should always return textfield);",
            "type": "qx.event.handler.Element",
            "description": " return correct target (in case of compound input controls should always return textfield);"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__fixFocus": {
      "location": {
        "start": {
          "line": 1362,
          "column": 4,
          "index": 37477
        },
        "end": {
          "line": 1376,
          "column": 5,
          "index": 37834
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fix for bug #2602.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(target)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} target element from mouse up event",
            "paramName": "target",
            "description": " target element from mouse up event",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} Element to activate;",
            "type": "qx.event.handler.Element",
            "description": " Element to activate;"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onNativeSelectStart": {
      "location": {
        "start": {
          "line": 1384,
          "column": 4,
          "index": 38003
        },
        "end": {
          "line": 1402,
          "column": 5,
          "index": 38558
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Native event listener for <code>selectstart</code>.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event",
            "paramName": "domEvent",
            "description": " Native event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__isFocusable": {
      "location": {
        "start": {
          "line": 1417,
          "column": 4,
          "index": 39043
        },
        "end": {
          "line": 1429,
          "column": 5,
          "index": 39350
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given element is focusable. This is perfectly modeled to the\n browsers behavior and this way may differ in the various clients.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} DOM Element to query",
            "paramName": "el",
            "description": " DOM Element to query",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element is focusable",
            "type": "Boolean",
            "description": " Whether the element is focusable"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__findFocusableElement": {
      "location": {
        "start": {
          "line": 1437,
          "column": 4,
          "index": 39573
        },
        "end": {
          "line": 1454,
          "column": 5,
          "index": 40036
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the next focusable parent element of an activated DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} Element to start lookup with.",
            "paramName": "el",
            "description": " Element to start lookup with.",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element|null} The next focusable element.",
            "type": "Element|null",
            "description": " The next focusable element."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__findActivatableElement": {
      "location": {
        "start": {
          "line": 1466,
          "column": 4,
          "index": 40493
        },
        "end": {
          "line": 1478,
          "column": 5,
          "index": 40736
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the next activatable element. May be the element itself.\n Works a bit different than the method {@link #__findFocusableElement}\n as it looks up for a parent which is has a keep focus flag. When\n there is such a parent it returns null otherwise the original\n incoming element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} Element to start lookup with.",
            "paramName": "el",
            "description": " Element to start lookup with.",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The next activatable element.",
            "type": "qx.event.handler.Element",
            "description": " The next activatable element."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__isSelectable": {
      "location": {
        "start": {
          "line": 1487,
          "column": 4,
          "index": 40967
        },
        "end": {
          "line": 1498,
          "column": 5,
          "index": 41224
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given el (or its content) should be selectable\n by the user.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Element} Node to start lookup with",
            "paramName": "node",
            "description": " Node to start lookup with",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the content is selectable.",
            "type": "Boolean",
            "description": " Whether the content is selectable."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyActive": {
      "location": {
        "start": {
          "line": 1507,
          "column": 4,
          "index": 41457
        },
        "end": {
          "line": 1520,
          "column": 5,
          "index": 41825
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "active"
      ]
    },
    "_applyFocus": {
      "location": {
        "start": {
          "line": 1523,
          "column": 4,
          "index": 41853
        },
        "end": {
          "line": 1541,
          "column": 5,
          "index": 42290
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "focus"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getActive": {
      "type": "function",
      "name": "getActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>active</code>.\n\nFor further details take a look at the property definition: {@link #active}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for active"
          }
        ]
      }
    },
    "setActive": {
      "type": "function",
      "name": "setActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>active</code>.\n\nFor further details take a look at the property definition: {@link #active}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for active"
          }
        ]
      }
    },
    "resetActive": {
      "type": "function",
      "name": "resetActive",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>active</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #active}."
          }
        ]
      }
    },
    "getFocus": {
      "type": "function",
      "name": "getFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>focus</code>.\n\nFor further details take a look at the property definition: {@link #focus}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for focus"
          }
        ]
      }
    },
    "setFocus": {
      "type": "function",
      "name": "setFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>focus</code>.\n\nFor further details take a look at the property definition: {@link #focus}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for focus"
          }
        ]
      }
    },
    "resetFocus": {
      "type": "function",
      "name": "resetFocus",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>focus</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #focus}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1550,
        "column": 2,
        "index": 42486
      },
      "end": {
        "line": 1560,
        "column": 3,
        "index": 42700
      }
    },
    "jsdoc": {}
  },
  "defer": {
    "location": {
      "start": {
        "line": 1568,
        "column": 2,
        "index": 42887
      },
      "end": {
        "line": 1576,
        "column": 3,
        "index": 43153
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}