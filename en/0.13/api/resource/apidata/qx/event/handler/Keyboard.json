{
  "className": "qx.event.handler.Keyboard",
  "packageName": "qx.event.handler",
  "name": "Keyboard",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.event.IEventHandler",
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0,
        "index": 788
      },
      "end": {
        "line": 704,
        "column": 3,
        "index": 20623
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This class provides unified key event handler for Internet Explorer,\n Firefox, Opera and Safari.\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.event.handler.UserAction"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 44,
        "column": 2,
        "index": 1246
      },
      "end": {
        "line": 63,
        "column": 3,
        "index": 1773
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Create a new instance</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "manager {qx.event.Manager} Event manager for the window to use",
          "paramName": "manager",
          "description": " Event manager for the window to use",
          "type": "qx.event.Manager"
        }
      ]
    }
  },
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 2039
        },
        "end": {
          "line": 73,
          "column": 51,
          "index": 2086
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this handler"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "SUPPORTED_TYPES": {
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2141
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2241
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Supported event types"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TARGET_CHECK": {
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2304
        },
        "end": {
          "line": 84,
          "column": 55,
          "index": 2355
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Which target check to use"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "IGNORE_CAN_HANDLE": {
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2443
        },
        "end": {
          "line": 87,
          "column": 27,
          "index": 2466
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Whether the method \"canHandleEvent\" must be called"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__onKeyUpDownWrapper": {
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2684
        },
        "end": {
          "line": 97,
          "column": 30,
          "index": 2710
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__manager": {
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2717
        },
        "end": {
          "line": 98,
          "column": 19,
          "index": 2732
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__window": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2739
        },
        "end": {
          "line": 99,
          "column": 18,
          "index": 2753
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__root": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2760
        },
        "end": {
          "line": 100,
          "column": 16,
          "index": 2772
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastUpDownType": {
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2779
        },
        "end": {
          "line": 101,
          "column": 26,
          "index": 2801
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastKeyCode": {
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 2808
        },
        "end": {
          "line": 102,
          "column": 23,
          "index": 2827
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__inputListeners": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2834
        },
        "end": {
          "line": 103,
          "column": 26,
          "index": 2856
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onKeyPressWrapper": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 2863
        },
        "end": {
          "line": 104,
          "column": 29,
          "index": 2888
        }
      },
      "type": "variable",
      "access": "private"
    },
    "canHandleEvent": {
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 3141
        },
        "end": {
          "line": 113,
          "column": 35,
          "index": 3172
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "registerEvent": {
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3214
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3299
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "unregisterEvent": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3341
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 3428
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "_fireInputEvent": {
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3879
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 4841
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a key input event with the given parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "charCode {Integer} character code",
            "paramName": "charCode",
            "description": " character code",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise if the event handlers created one",
            "type": "qx.Promise?",
            "description": " a promise if the event handlers created one"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fireSequenceEvent": {
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 5172
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7225
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a key up/down/press event with the given parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "type {String} type og the event",
            "paramName": "type",
            "description": " type og the event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "keyIdentifier {String} key identifier",
            "paramName": "keyIdentifier",
            "description": " key identifier",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if any of the event handlers returned a promise",
            "type": "qx.Promise?",
            "description": " a promise, if any of the event handlers returned a promise"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__getEventTarget": {
      "location": {
        "start": {
          "line": 247,
          "column": 4,
          "index": 7357
        },
        "end": {
          "line": 262,
          "column": 5,
          "index": 7886
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the target element for key events</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the event target element",
            "type": "qx.event.handler.Element",
            "description": " the event target element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_initKeyObserver": {
      "location": {
        "start": {
          "line": 275,
          "column": 4,
          "index": 8209
        },
        "end": {
          "line": 300,
          "column": 5,
          "index": 8824
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes the native key event listeners.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_stopKeyObserver": {
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 8935
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 9648
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the native key event listeners.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__onKeyUpDown": {
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 10057
        },
        "end": {
          "line": 413,
          "column": 5,
          "index": 12060
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Low level handler for \"keyup\" and \"keydown\" events</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event object",
            "paramName": "domEvent",
            "description": " DOM event object",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__firefoxInputFix": {
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 12555
        },
        "end": {
          "line": 461,
          "column": 6,
          "index": 13701
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>some keys like \"up\", \"down\", \"pageup\", \"pagedown\" do not bubble a\n \"keypress\" event in Firefox. To work around this bug we attach keypress\n listeners directly to the input events.\n https://bugzilla.mozilla.org/show_bug.cgi?id=467513</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(target, type, keyCode)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "type {String} The event type",
            "paramName": "type",
            "description": " The event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "keyCode {Integer} the key code",
            "paramName": "keyCode",
            "description": " the key code",
            "type": "Integer"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onKeyPress": {
      "location": {
        "start": {
          "line": 469,
          "column": 4,
          "index": 13859
        },
        "end": {
          "line": 571,
          "column": 5,
          "index": 16951
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Low level key press handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event object",
            "paramName": "domEvent",
            "description": " DOM event object",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_idealKeyHandler": {
      "location": {
        "start": {
          "line": 589,
          "column": 4,
          "index": 17611
        },
        "end": {
          "line": 614,
          "column": 5,
          "index": 18395
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Key handler for an idealized browser.\n Runs after the browser specific key handlers have normalized the key events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "keyCode {String} keyboard code",
            "paramName": "keyCode",
            "description": " keyboard code",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "charCode {String} character code",
            "paramName": "charCode",
            "description": " character code",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "eventType {String} type of the event (keydown, keypress, keyup)",
            "paramName": "eventType",
            "description": " type of the event (keydown, keypress, keyup)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "domEvent {Element} DomEvent",
            "paramName": "domEvent",
            "description": " DomEvent",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if an event handler created one",
            "type": "qx.Promise?",
            "description": " a promise, if an event handler created one"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_emulateKeyPress": {
      "location": {
        "start": {
          "line": 627,
          "column": 4,
          "index": 18758
        },
        "end": {
          "line": 649,
          "column": 6,
          "index": 19186
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} maps the charcodes of special keys for key press emulation"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_emulateKeyPress)"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_identifierToKeyCode": {
      "location": {
        "start": {
          "line": 663,
          "column": 4,
          "index": 19583
        },
        "end": {
          "line": 668,
          "column": 5,
          "index": 19763
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>converts a key identifier back to a keycode</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "keyIdentifier {String} The key identifier to convert",
            "paramName": "keyIdentifier",
            "description": " The key identifier to convert",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} keyboard code",
            "type": "Integer",
            "description": " keyboard code"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 677,
        "column": 2,
        "index": 19968
      },
      "end": {
        "line": 685,
        "column": 3,
        "index": 20155
      }
    },
    "jsdoc": {}
  },
  "defer": {
    "location": {
      "start": {
        "line": 693,
        "column": 2,
        "index": 20350
      },
      "end": {
        "line": 703,
        "column": 3,
        "index": 20618
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}