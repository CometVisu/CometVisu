{
  "version": 0.3,
  "lastModified": 1735341602087,
  "lastModifiedIso": "2024-12-27T23:20:02.087Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/handler/Keyboard.js",
  "type": "class",
  "location": {
    "start": {
      "line": 29,
      "column": 0,
      "index": 760
    },
    "end": {
      "line": 704,
      "column": 3,
      "index": 19920
    }
  },
  "className": "qx.event.handler.Keyboard",
  "jsdoc": {
    "raw": [
      "*",
      " * This class provides unified key event handler for Internet Explorer,",
      " * Firefox, Opera and Safari.",
      " *",
      " * NOTE: Instances of this class must be disposed of after use",
      " *",
      " * @require(qx.event.handler.UserAction)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>This class provides unified key event handler for Internet Explorer,\n Firefox, Opera and Safari.\n NOTE: Instances of this class must be disposed of after use</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.event.handler.UserAction"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.event.IEventHandler",
    "qx.core.IDisposable"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "manager"
      }
    ],
    "location": {
      "start": {
        "line": 44,
        "column": 2,
        "index": 1203
      },
      "end": {
        "line": 63,
        "column": 3,
        "index": 1711
      }
    }
  },
  "statics": {
    "PRIORITY": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} Priority of this handler "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this handler"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1967
        },
        "end": {
          "line": 73,
          "column": 51,
          "index": 2014
        }
      },
      "appearsIn": []
    },
    "SUPPORTED_TYPES": {
      "jsdoc": {
        "raw": [
          "* @type {Map} Supported event types "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Supported event types"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2066
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2161
        }
      },
      "appearsIn": []
    },
    "TARGET_CHECK": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} Which target check to use "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Which target check to use"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2221
        },
        "end": {
          "line": 84,
          "column": 55,
          "index": 2272
        }
      },
      "appearsIn": []
    },
    "IGNORE_CAN_HANDLE": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} Whether the method \"canHandleEvent\" must be called "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Whether the method \"canHandleEvent\" must be called"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2357
        },
        "end": {
          "line": 87,
          "column": 27,
          "index": 2380
        }
      },
      "appearsIn": []
    }
  },
  "members": {
    "__onKeyUpDownWrapper": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2588
        },
        "end": {
          "line": 97,
          "column": 30,
          "index": 2614
        }
      },
      "appearsIn": []
    },
    "__manager": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2620
        },
        "end": {
          "line": 98,
          "column": 19,
          "index": 2635
        }
      },
      "appearsIn": []
    },
    "__window": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2641
        },
        "end": {
          "line": 99,
          "column": 18,
          "index": 2655
        }
      },
      "appearsIn": []
    },
    "__root": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2661
        },
        "end": {
          "line": 100,
          "column": 16,
          "index": 2673
        }
      },
      "appearsIn": []
    },
    "__lastUpDownType": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2679
        },
        "end": {
          "line": 101,
          "column": 26,
          "index": 2701
        }
      },
      "appearsIn": []
    },
    "__lastKeyCode": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 2707
        },
        "end": {
          "line": 102,
          "column": 23,
          "index": 2726
        }
      },
      "appearsIn": []
    },
    "__inputListeners": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2732
        },
        "end": {
          "line": 103,
          "column": 26,
          "index": 2754
        }
      },
      "appearsIn": []
    },
    "__onKeyPressWrapper": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 2760
        },
        "end": {
          "line": 104,
          "column": 29,
          "index": 2785
        }
      },
      "appearsIn": []
    },
    "canHandleEvent": {
      "jsdoc": {
        "raw": [
          " interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 3029
        },
        "end": {
          "line": 113,
          "column": 35,
          "index": 3060
        }
      },
      "type": "function",
      "params": [
        {
          "name": "target"
        },
        {
          "name": "type"
        }
      ],
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "registerEvent": {
      "jsdoc": {
        "raw": [
          " interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3099
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3182
        }
      },
      "type": "function",
      "params": [
        {
          "name": "target"
        },
        {
          "name": "type"
        },
        {
          "name": "capture"
        }
      ],
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "unregisterEvent": {
      "jsdoc": {
        "raw": [
          " interface implementation"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3221
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 3306
        }
      },
      "type": "function",
      "params": [
        {
          "name": "target"
        },
        {
          "name": "type"
        },
        {
          "name": "capture"
        }
      ],
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "_fireInputEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fire a key input event with the given parameters",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param charCode {Integer} character code",
          "     * @return {qx.Promise?} a promise if the event handlers created one",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a key input event with the given parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "charCode {Integer} character code",
            "paramName": "charCode",
            "description": " character code",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise if the event handlers created one",
            "type": "qx.Promise?",
            "description": "a promise if the event handlers created one"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3742
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 4671
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "charCode",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.Promise?"
      },
      "appearsIn": []
    },
    "_fireSequenceEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fire a key up/down/press event with the given parameters",
          "     *",
          "     * @param domEvent {Event} DOM event",
          "     * @param type {String} type og the event",
          "     * @param keyIdentifier {String} key identifier",
          "     * @return {qx.Promise?} a promise, if any of the event handlers returned a promise",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a key up/down/press event with the given parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "type {String} type og the event",
            "paramName": "type",
            "description": " type og the event",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "keyIdentifier {String} key identifier",
            "paramName": "keyIdentifier",
            "description": " key identifier",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if any of the event handlers returned a promise",
            "type": "qx.Promise?",
            "description": "a promise, if any of the event handlers returned a promise"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 4992
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 6986
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domEvent",
          "type": "Event"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "keyIdentifier",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.Promise?"
      },
      "appearsIn": []
    },
    "__getEventTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the target element for key events",
          "     *",
          "     * @return {Element} the event target element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the target element for key events</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the event target element",
            "type": "qx.event.handler.Element",
            "description": "the event target element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 247,
          "column": 4,
          "index": 7111
        },
        "end": {
          "line": 262,
          "column": 5,
          "index": 7625
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.event.handler.Element"
      },
      "appearsIn": []
    },
    "_initKeyObserver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initializes the native key event listeners.",
          "     *",
          "     * @signature function()",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initializes the native key event listeners.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 275,
          "column": 4,
          "index": 7935
        },
        "end": {
          "line": 300,
          "column": 5,
          "index": 8525
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_stopKeyObserver": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stops the native key event listeners.",
          "     *",
          "     * @signature function()",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the native key event listeners.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 307,
          "column": 4,
          "index": 8629
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 9312
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__onKeyUpDown": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Low level handler for \"keyup\" and \"keydown\" events",
          "     *",
          "     * @internal",
          "     * @signature function(domEvent)",
          "     * @param domEvent {Event} DOM event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Low level handler for \"keyup\" and \"keydown\" events</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event object",
            "paramName": "domEvent",
            "description": " DOM event object",
            "type": "Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 9706
        },
        "end": {
          "line": 413,
          "column": 5,
          "index": 11648
        }
      },
      "appearsIn": []
    },
    "__firefoxInputFix": {
      "jsdoc": {
        "raw": [
          "*",
          "     * some keys like \"up\", \"down\", \"pageup\", \"pagedown\" do not bubble a",
          "     * \"keypress\" event in Firefox. To work around this bug we attach keypress",
          "     * listeners directly to the input events.",
          "     *",
          "     * https://bugzilla.mozilla.org/show_bug.cgi?id=467513",
          "     *",
          "     * @signature function(target, type, keyCode)",
          "     * @param target {Element} The event target",
          "     * @param type {String} The event type",
          "     * @param keyCode {Integer} the key code",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>some keys like \"up\", \"down\", \"pageup\", \"pagedown\" do not bubble a\n \"keypress\" event in Firefox. To work around this bug we attach keypress\n listeners directly to the input events.\n https://bugzilla.mozilla.org/show_bug.cgi?id=467513</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(target, type, keyCode)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "type {String} The event type",
            "paramName": "type",
            "description": " The event type",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "keyCode {Integer} the key code",
            "paramName": "keyCode",
            "description": " the key code",
            "type": "Integer"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 12129
        },
        "end": {
          "line": 461,
          "column": 6,
          "index": 13241
        }
      },
      "appearsIn": []
    },
    "__onKeyPress": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Low level key press handler",
          "     *",
          "     * @signature function(domEvent)",
          "     * @param domEvent {Event} DOM event object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Low level key press handler</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(domEvent)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event object",
            "paramName": "domEvent",
            "description": " DOM event object",
            "type": "Event"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 469,
          "column": 4,
          "index": 13391
        },
        "end": {
          "line": 571,
          "column": 5,
          "index": 16381
        }
      },
      "appearsIn": []
    },
    "_idealKeyHandler": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Key handler for an idealized browser.",
          "     * Runs after the browser specific key handlers have normalized the key events.",
          "     *",
          "     * @param keyCode {String} keyboard code",
          "     * @param charCode {String} character code",
          "     * @param eventType {String} type of the event (keydown, keypress, keyup)",
          "     * @param domEvent {Element} DomEvent",
          "     * @return {qx.Promise?} a promise, if an event handler created one",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Key handler for an idealized browser.\n Runs after the browser specific key handlers have normalized the key events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "keyCode {String} keyboard code",
            "paramName": "keyCode",
            "description": " keyboard code",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "charCode {String} character code",
            "paramName": "charCode",
            "description": " character code",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "eventType {String} type of the event (keydown, keypress, keyup)",
            "paramName": "eventType",
            "description": " type of the event (keydown, keypress, keyup)",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "domEvent {Element} DomEvent",
            "paramName": "domEvent",
            "description": " DomEvent",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if an event handler created one",
            "type": "qx.Promise?",
            "description": "a promise, if an event handler created one"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 589,
          "column": 4,
          "index": 17023
        },
        "end": {
          "line": 614,
          "column": 5,
          "index": 17782
        }
      },
      "type": "function",
      "params": [
        {
          "name": "keyCode",
          "type": "string"
        },
        {
          "name": "charCode",
          "type": "string"
        },
        {
          "name": "eventType",
          "type": "string"
        },
        {
          "name": "domEvent",
          "type": "qx.event.handler.Element"
        }
      ],
      "returnType": {
        "type": "qx.Promise?"
      },
      "appearsIn": []
    },
    "_emulateKeyPress": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @type {Map} maps the charcodes of special keys for key press emulation",
          "     *",
          "     * @lint ignoreReferenceField(_emulateKeyPress)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} maps the charcodes of special keys for key press emulation"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(_emulateKeyPress)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 627,
          "column": 4,
          "index": 18132
        },
        "end": {
          "line": 649,
          "column": 6,
          "index": 18538
        }
      },
      "appearsIn": []
    },
    "_identifierToKeyCode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * converts a key identifier back to a keycode",
          "     *",
          "     * @param keyIdentifier {String} The key identifier to convert",
          "     * @return {Integer} keyboard code",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>converts a key identifier back to a keycode</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "keyIdentifier {String} The key identifier to convert",
            "paramName": "keyIdentifier",
            "description": " The key identifier to convert",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} keyboard code",
            "type": "Integer",
            "description": "keyboard code"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 663,
          "column": 4,
          "index": 18921
        },
        "end": {
          "line": 668,
          "column": 5,
          "index": 19096
        }
      },
      "type": "function",
      "params": [
        {
          "name": "keyIdentifier",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 677,
        "column": 2,
        "index": 19292
      },
      "end": {
        "line": 685,
        "column": 3,
        "index": 19471
      }
    }
  },
  "properties": {}
}