{
  "className": "qx.event.Manager",
  "packageName": "qx.event",
  "name": "Manager",
  "superClass": "Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0,
        "index": 697
      },
      "end": {
        "line": 1025,
        "column": 3,
        "index": 31640
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Wrapper for browser DOM event handling for each browser window/frame.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.bom.Event"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 43,
        "column": 2,
        "index": 1202
      },
      "end": {
        "line": 81,
        "column": 3,
        "index": 2324
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Creates a new instance of the event handler.</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "win {Window} The DOM window this manager handles the events for",
          "paramName": "win",
          "description": " The DOM window this manager handles the events for",
          "type": "Window"
        },
        {
          "name": "@param",
          "body": "registration {qx.event.Registration} The event registration to use",
          "paramName": "registration",
          "description": " The event registration to use",
          "type": "qx.event.Registration"
        }
      ]
    }
  },
  "statics": {
    "__lastUnique": {
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2581
        },
        "end": {
          "line": 91,
          "column": 19,
          "index": 2596
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Last used ID for an event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "getNextUniqueId": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 2815
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 2879
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an unique ID which may be used in combination with a target and\n a type to identify an event entry.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The next free identifier (auto-incremented)",
            "type": "String",
            "description": " The next free identifier (auto-incremented)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__globalEventMonitors": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 2970
        },
        "end": {
          "line": 106,
          "column": 29,
          "index": 2995
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} private list of global event monitor functions"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "addGlobalEventMonitor": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3523
        },
        "end": {
          "line": 122,
          "column": 5,
          "index": 3679
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a global event monitor function which is called for each event fired\n anywhere in the application. The function is called with the signature\n (target: {@link qx.core.Object}, event: {@link qx.event.type.Event}).\n Since for performance reasons, the original event object is passed,\n the monitor function must not change this event in any way.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fn {Function} Monitor function",
            "paramName": "fn",
            "description": " Monitor function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Optional execution context of the function",
            "paramName": "context",
            "description": " Optional execution context of the function",
            "optional": true,
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeGlobalEventMonitor": {
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3844
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 3981
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a global event monitor function that had\n previously been added.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fn {Function} The global monitor function",
            "paramName": "fn",
            "description": " The global monitor function",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetGlobalEventMonitors": {
      "location": {
        "start": {
          "line": 137,
          "column": 4,
          "index": 4048
        },
        "end": {
          "line": 139,
          "column": 5,
          "index": 4133
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all registered event monitors</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getGlobalEventMonitor": {
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 4393
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4468
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the global event monitor. Not compatible with the {@link\n qx.event.Manager.addGlobalEventMonitor} API. Will be removed in v7.0.0</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function?} the global monitor function",
            "type": "Function?",
            "description": " the global monitor function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setGlobalEventMonitor": {
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 4795
        },
        "end": {
          "line": 163,
          "column": 5,
          "index": 4911
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the global event monitor. Not compatible with the {@link\n qx.event.Manager.addGlobalEventMonitor} API. Will be removed in\n v7.0.0. Use {@link qx.event.Manager.addGlobalEventMonitor} instead.</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fn {Function?} the global monitor function",
            "paramName": "fn",
            "description": " the global monitor function",
            "optional": true,
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "__registration": {
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 5119
        },
        "end": {
          "line": 173,
          "column": 24,
          "index": 5139
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__listeners": {
      "location": {
        "start": {
          "line": 174,
          "column": 4,
          "index": 5145
        },
        "end": {
          "line": 174,
          "column": 21,
          "index": 5162
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dispatchers": {
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 5169
        },
        "end": {
          "line": 176,
          "column": 23,
          "index": 5188
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__disposeWrapper": {
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5194
        },
        "end": {
          "line": 177,
          "column": 26,
          "index": 5216
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__handlers": {
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5223
        },
        "end": {
          "line": 179,
          "column": 20,
          "index": 5239
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__handlerCache": {
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 5245
        },
        "end": {
          "line": 180,
          "column": 24,
          "index": 5265
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__window": {
      "location": {
        "start": {
          "line": 181,
          "column": 4,
          "index": 5271
        },
        "end": {
          "line": 181,
          "column": 18,
          "index": 5285
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__windowId": {
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 5291
        },
        "end": {
          "line": 182,
          "column": 20,
          "index": 5307
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__blacklist": {
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 5314
        },
        "end": {
          "line": 184,
          "column": 21,
          "index": 5331
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__clearBlackList": {
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 5337
        },
        "end": {
          "line": 185,
          "column": 26,
          "index": 5359
        }
      },
      "type": "variable",
      "access": "private"
    },
    "getWindow": {
      "location": {
        "start": {
          "line": 198,
          "column": 4,
          "index": 5690
        },
        "end": {
          "line": 200,
          "column": 5,
          "index": 5737
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the window instance the event manager is responsible for</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Window} DOM window instance",
            "type": "Window",
            "description": " DOM window instance"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getWindowId": {
      "location": {
        "start": {
          "line": 207,
          "column": 4,
          "index": 5861
        },
        "end": {
          "line": 209,
          "column": 5,
          "index": 5912
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the hashcode of the manager's window</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The window's hashcode",
            "type": "String",
            "description": " The window's hashcode"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getHandler": {
      "location": {
        "start": {
          "line": 217,
          "column": 4,
          "index": 6166
        },
        "end": {
          "line": 225,
          "column": 5,
          "index": 6367
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an instance of the given handler class for this manager(window).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Any class which implements {@link qx.event.IEventHandler}",
            "paramName": "clazz",
            "description": " Any class which implements {@link qx.event.IEventHandler}",
            "type": "Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The instance used by this manager",
            "type": "Object",
            "description": " The instance used by this manager"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDispatcher": {
      "location": {
        "start": {
          "line": 233,
          "column": 4,
          "index": 6624
        },
        "end": {
          "line": 244,
          "column": 5,
          "index": 6888
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an instance of the given dispatcher class for this manager(window).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Any class which implements {@link qx.event.IEventHandler}",
            "paramName": "clazz",
            "description": " Any class which implements {@link qx.event.IEventHandler}",
            "type": "Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The instance used by this manager",
            "type": "Object",
            "description": " The instance used by this manager"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getListeners": {
      "location": {
        "start": {
          "line": 266,
          "column": 4,
          "index": 7700
        },
        "end": {
          "line": 279,
          "column": 5,
          "index": 8099
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a copy of all event listeners for the given combination\n of target, event type and phase.\n This method is especially useful and for event handlers to\n to query the listeners registered in the manager.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} Event type",
            "paramName": "type",
            "description": " Event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether the listener is for the\n       capturing phase of the bubbling phase.",
            "paramName": "capture",
            "description": " Whether the listener is for the\n       capturing phase of the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array|null} Array of registered event handlers. May return\n       null when no listener were found.",
            "type": "Array|null",
            "description": " Array of registered event handlers. May return\n       null when no listener were found."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAllListeners": {
      "location": {
        "start": {
          "line": 288,
          "column": 4,
          "index": 8282
        },
        "end": {
          "line": 290,
          "column": 5,
          "index": 8338
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all registered listeners.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} All registered listeners. The key is the hash code form an object.",
            "type": "Map",
            "description": " All registered listeners. The key is the hash code form an object."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "serializeListeners": {
      "location": {
        "start": {
          "line": 299,
          "column": 4,
          "index": 8664
        },
        "end": {
          "line": 326,
          "column": 5,
          "index": 9495
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a serialized array of all events attached on the given target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} Array of maps where everyone contains the keys:\n   <code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>.",
            "type": "Map[]",
            "description": " Array of maps where everyone contains the keys:\n   <code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toggleAttachedEvents": {
      "location": {
        "start": {
          "line": 341,
          "column": 4,
          "index": 10037
        },
        "end": {
          "line": 361,
          "column": 5,
          "index": 10760
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method might be used to temporally remove all events\n directly attached to the given target. This do not work\n have any effect on bubbling events normally.\n This is mainly thought for detaching events in IE, before\n cloning them. It also removes all leak scenarios\n when unloading a document and may be used here as well.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "enable {Boolean} Whether to enable or disable the events",
            "paramName": "enable",
            "description": " Whether to enable or disable the events",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasListener": {
      "location": {
        "start": {
          "line": 373,
          "column": 4,
          "index": 11202
        },
        "end": {
          "line": 393,
          "column": 5,
          "index": 11792
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether there are one or more listeners for an event type\n registered at the target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} The event type",
            "paramName": "type",
            "description": " The event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the target has event listeners of the given type.",
            "type": "Boolean",
            "description": " Whether the target has event listeners of the given type."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "importListeners": {
      "location": {
        "start": {
          "line": 410,
          "column": 4,
          "index": 12457
        },
        "end": {
          "line": 445,
          "column": 5,
          "index": 13620
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Imports a list of event listeners at once. This only\n works for newly created elements as it replaces\n all existing data structures.\n Works with a map of data. Each entry in this map should be a\n map again with the keys <code>type</code>, <code>listener</code>,\n <code>self</code>, <code>capture</code> and an optional <code>unique</code>.\n The values are identical to the parameters of {@link #addListener}.\n For details please have a look there.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "list {Map} A map where every listener has an unique key.",
            "paramName": "list",
            "description": " A map where every listener has an unique key.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addListener": {
      "location": {
        "start": {
          "line": 467,
          "column": 4,
          "index": 14822
        },
        "end": {
          "line": 522,
          "column": 5,
          "index": 16482
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add an event listener to any valid target. The event listener is passed an\n instance of {@link qx.event.type.Event} containing all relevant information\n about the event as parameter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} Name of the event e.g. \"click\", \"keydown\", ...",
            "paramName": "type",
            "description": " Name of the event e.g. \"click\", \"keydown\", ...",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} Event listener function",
            "paramName": "listener",
            "description": " Event listener function",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event. The default is\n         to attach the event handler to the bubbling phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} An opaque ID, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "String",
            "description": " An opaque ID, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the parameters are wrong",
            "type": "Error",
            "description": " if the parameters are wrong"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "findHandler": {
      "location": {
        "start": {
          "line": 532,
          "column": 4,
          "index": 16785
        },
        "end": {
          "line": 615,
          "column": 5,
          "index": 19189
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the event handler class matching the given event target and type</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} The event type",
            "paramName": "type",
            "description": " The event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.IEventHandler|null} The best matching event handler or\n     <code>null</code>.",
            "type": "qx.event.IEventHandler|null",
            "description": " The best matching event handler or\n     <code>null</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__registerAtHandler": {
      "location": {
        "start": {
          "line": 627,
          "column": 4,
          "index": 19648
        },
        "end": {
          "line": 645,
          "column": 5,
          "index": 20106
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called each time an event listener for one of the\n supported events is added using {qx.event.Manager#addListener}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if there is no handler for the event",
            "type": "Error",
            "description": " if there is no handler for the event"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "removeListener": {
      "location": {
        "start": {
          "line": 660,
          "column": 4,
          "index": 20736
        },
        "end": {
          "line": 718,
          "column": 5,
          "index": 22351
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an event listener from an event target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} Name of the event",
            "paramName": "type",
            "description": " Name of the event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The pointer to the event listener",
            "paramName": "listener",
            "description": " The pointer to the event listener",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to remove the event listener of\n         the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to remove the event listener of\n         the bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event was removed successfully (was existant)",
            "type": "Boolean",
            "description": " Whether the event was removed successfully (was existant)"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the parameters are wrong",
            "type": "Error",
            "description": " if the parameters are wrong"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeListenerById": {
      "location": {
        "start": {
          "line": 728,
          "column": 4,
          "index": 22668
        },
        "end": {
          "line": 779,
          "column": 5,
          "index": 24025
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an event listener from an event target by an ID returned by\n {@link #addListener}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "id {String} The ID returned by {@link #addListener}",
            "paramName": "id",
            "description": " The ID returned by {@link #addListener}",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the handler was removed",
            "type": "Boolean",
            "description": " <code>true</code> if the handler was removed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAllListeners": {
      "location": {
        "start": {
          "line": 787,
          "column": 4,
          "index": 24308
        },
        "end": {
          "line": 815,
          "column": 5,
          "index": 25128
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all event listeners, which are attached to the given event target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} The event target to remove all event listeners from.",
            "paramName": "target",
            "description": " The event target to remove all event listeners from.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the events were existant and were removed successfully.",
            "type": "Boolean",
            "description": " Whether the events were existant and were removed successfully."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deleteAllListeners": {
      "location": {
        "start": {
          "line": 826,
          "column": 4,
          "index": 25380
        },
        "end": {
          "line": 828,
          "column": 5,
          "index": 25459
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for deleting the internal listener  data structure for\n the given targetKey.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "targetKey {String} Hash code for the object to delete its\n   listeners.",
            "paramName": "targetKey",
            "description": " Hash code for the object to delete its\n   listeners.",
            "type": "String"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__unregisterAtHandler": {
      "location": {
        "start": {
          "line": 841,
          "column": 4,
          "index": 25991
        },
        "end": {
          "line": 859,
          "column": 5,
          "index": 26453
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is called each time the an event listener for one of the\n supported events is removed by using {qx.event.Manager#removeListener}\n and no other event listener is listening on this type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\n         capturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if there is no handler for the event",
            "type": "Error",
            "description": " if there is no handler for the event"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "dispatchEvent": {
      "location": {
        "start": {
          "line": 881,
          "column": 4,
          "index": 27431
        },
        "end": {
          "line": 985,
          "column": 5,
          "index": 30605
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispatches an event object using the qooxdoo event handler system. The\n event will only be visible in event listeners attached using\n {@link #addListener}. After dispatching the event object will be pooled\n for later reuse or disposed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any valid event target",
            "paramName": "target",
            "description": " Any valid event target",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event object to dispatch. The event\n     object must be obtained using {@link qx.event.Registration#createEvent}\n     and initialized using {@link qx.event.type.Event#init}.",
            "paramName": "event",
            "description": " The event object to dispatch. The event\n     object must be obtained using {@link qx.event.Registration#createEvent}\n     and initialized using {@link qx.event.type.Event#init}.",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|qx.Promise} whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented.",
            "type": "Boolean|qx.Promise",
            "description": " whether the event default was prevented or not.\n     Returns true, when the event was NOT prevented."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if there is no dispatcher for the event",
            "type": "Error",
            "description": " if there is no dispatcher for the event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "dispose": {
      "location": {
        "start": {
          "line": 990,
          "column": 4,
          "index": 30661
        },
        "end": {
          "line": 1000,
          "column": 5,
          "index": 31036
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose the event manager</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.IDisposable",
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    },
    "__addToBlacklist": {
      "location": {
        "start": {
          "line": 1007,
          "column": 4,
          "index": 31140
        },
        "end": {
          "line": 1013,
          "column": 5,
          "index": 31325
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add event to blacklist.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "uid {number} unique event id",
            "paramName": "uid",
            "description": " unique event id",
            "type": "number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "isBlacklisted": {
      "location": {
        "start": {
          "line": 1021,
          "column": 4,
          "index": 31532
        },
        "end": {
          "line": 1023,
          "column": 5,
          "index": 31632
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if the event with the given id has been removed and is therefore blacklisted for event handling</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "uid {number} unique event id",
            "paramName": "uid",
            "description": " unique event id",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}