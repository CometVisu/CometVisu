{
  "className": "qx.event.Timer",
  "packageName": "qx.event",
  "name": "Timer",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 31,
        "column": 0,
        "index": 846
      },
      "end": {
        "line": 287,
        "column": 3,
        "index": 7349
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Global timer support.\n This class can be used to periodically fire an event. This event can be\n used to simulate e.g. a background task. The static method\n {@link #once} is a special case. It will call a function deferred after a\n given timeout.\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 44,
        "column": 2,
        "index": 1224
      },
      "end": {
        "line": 59,
        "column": 3,
        "index": 1706
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "interval {Number} initial interval in milliseconds of the timer.",
          "paramName": "interval",
          "description": " initial interval in milliseconds of the timer.",
          "type": "Number"
        }
      ]
    }
  },
  "events": {
    "interval": {
      "location": {
        "start": {
          "line": 69,
          "column": 4,
          "index": 1979
        },
        "end": {
          "line": 69,
          "column": 35,
          "index": 2010
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This event if fired each time the interval time has elapsed</p>"
          }
        ]
      },
      "name": "interval",
      "type": "qx.event.type.Event"
    }
  },
  "statics": {
    "once": {
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2715
        },
        "end": {
          "line": 121,
          "column": 5,
          "index": 3549
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start a function after a given timeout.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} Function to call",
            "paramName": "func",
            "description": " Function to call",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "obj {Object} context (this), the function is called with",
            "paramName": "obj",
            "description": " context (this), the function is called with",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "timeout {Number} Number of milliseconds to wait before the\n   function is called.",
            "paramName": "timeout",
            "description": " Number of milliseconds to wait before the\n   function is called.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.Timer} The timer object used for the timeout. This\n    object can be used to cancel the timeout. Note that the timer is\n    only valid until the timer has been executed.",
            "type": "qx.event.Timer",
            "description": " The timer object used for the timeout. This\n    object can be used to cancel the timeout. Note that the timer is\n    only valid until the timer has been executed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "enabled": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3974
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 4062
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>With the enabled property the Timer can be started and suspended.\n Setting it to \"true\" is equivalent to {@link #start}, setting it\n to \"false\" is equivalent to {@link #stop}.</p>"
          }
        ]
      },
      "name": "enabled",
      "propertyType": "new",
      "apply": "_applyEnabled",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "interval": {
      "location": {
        "start": {
          "line": 147,
          "column": 4,
          "index": 4223
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4312
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Time in milliseconds between two callback calls.\n This property can be set to modify the interval of\n a running timer.</p>"
          }
        ]
      },
      "name": "interval",
      "propertyType": "new",
      "apply": "_applyInterval",
      "init": 1000,
      "check": "Integer",
      "defaultValue": 1000
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__intervalHandler": {
      "location": {
        "start": {
          "line": 161,
          "column": 4,
          "index": 4520
        },
        "end": {
          "line": 161,
          "column": 27,
          "index": 4543
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__oninterval": {
      "location": {
        "start": {
          "line": 162,
          "column": 4,
          "index": 4549
        },
        "end": {
          "line": 162,
          "column": 22,
          "index": 4567
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_applyInterval": {
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 4912
        },
        "end": {
          "line": 180,
          "column": 5,
          "index": 5009
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the interval of the timer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "interval"
      ]
    },
    "_applyEnabled": {
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 5163
        },
        "end": {
          "line": 198,
          "column": 5,
          "index": 5462
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply the enabled state of the timer.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} Previous value",
            "paramName": "old",
            "description": " Previous value",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "enabled"
      ]
    },
    "start": {
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 5708
        },
        "end": {
          "line": 212,
          "column": 5,
          "index": 5752
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start the timer</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "startWith": {
      "location": {
        "start": {
          "line": 219,
          "column": 4,
          "index": 5909
        },
        "end": {
          "line": 222,
          "column": 5,
          "index": 5990
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Start the timer with a given interval</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "interval {Integer} Time in milliseconds between two callback calls.",
            "paramName": "interval",
            "description": " Time in milliseconds between two callback calls.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stop": {
      "location": {
        "start": {
          "line": 228,
          "column": 4,
          "index": 6043
        },
        "end": {
          "line": 230,
          "column": 5,
          "index": 6087
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop the timer.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "restart": {
      "location": {
        "start": {
          "line": 237,
          "column": 4,
          "index": 6216
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 6272
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restart the timer.\n This makes it possible to change the interval of a running timer.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "restartWith": {
      "location": {
        "start": {
          "line": 247,
          "column": 4,
          "index": 6433
        },
        "end": {
          "line": 250,
          "column": 5,
          "index": 6513
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restart the timer. with a given interval.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "interval {Integer} Time in milliseconds between two callback calls.",
            "paramName": "interval",
            "description": " Time in milliseconds between two callback calls.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_oninterval": {
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 6788
        },
        "end": {
          "line": 271,
          "column": 6,
          "index": 6985
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>timer callback</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getEnabled": {
      "type": "function",
      "name": "getEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "isEnabled": {
      "type": "function",
      "name": "isEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for enabled"
          }
        ]
      }
    },
    "setEnabled": {
      "type": "function",
      "name": "setEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>enabled</code>.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for enabled"
          }
        ]
      }
    },
    "resetEnabled": {
      "type": "function",
      "name": "resetEnabled",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>enabled</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #enabled}."
          }
        ]
      }
    },
    "getInterval": {
      "type": "function",
      "name": "getInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>interval</code>.\n\nFor further details take a look at the property definition: {@link #interval}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for interval"
          }
        ]
      }
    },
    "setInterval": {
      "type": "function",
      "name": "setInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>interval</code>.\n\nFor further details take a look at the property definition: {@link #interval}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for interval"
          }
        ]
      }
    },
    "resetInterval": {
      "type": "function",
      "name": "resetInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>interval</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #interval}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 280,
        "column": 2,
        "index": 7181
      },
      "end": {
        "line": 286,
        "column": 3,
        "index": 7345
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}