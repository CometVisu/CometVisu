{
  "version": 0.3,
  "lastModified": 1731947915419,
  "lastModifiedIso": "2024-11-18T16:38:35.419Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/Emitter.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 595
    },
    "end": {
      "line": 249,
      "column": 3,
      "index": 7589
    }
  },
  "className": "qx.event.Emitter",
  "jsdoc": {
    "raw": [
      "*",
      " * Basic implementation for an event emitter. This supplies a basic and",
      " * minimalistic event mechanism.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Basic implementation for an event emitter. This supplies a basic and\n minimalistic event mechanism.</p>"
      }
    ]
  },
  "superClass": "Object",
  "statics": {
    "__storage": {
      "jsdoc": {
        "raw": [
          "* Static storage for all event listener "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Static storage for all event listener</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 27,
          "column": 4,
          "index": 721
        },
        "end": {
          "line": 27,
          "column": 17,
          "index": 734
        }
      },
      "appearsIn": []
    }
  },
  "members": {
    "__listener": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 31,
          "column": 4,
          "index": 758
        },
        "end": {
          "line": 31,
          "column": 20,
          "index": 774
        }
      },
      "appearsIn": []
    },
    "__any": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 32,
          "column": 4,
          "index": 780
        },
        "end": {
          "line": 32,
          "column": 15,
          "index": 791
        }
      },
      "appearsIn": []
    },
    "on": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Attach a listener to the event emitter. The given <code>name</code>",
          "     * will define the type of event. Handing in a <code>'*'</code> will",
          "     * listen to all events emitted by the event emitter.",
          "     *",
          "     * @param name {String} The name of the event to listen to.",
          "     * @param listener {Function} The function execute on {@link #emit}.",
          "     * @param ctx {var?Window} The context of the listener.",
          "     * @return {Integer} An unique <code>id</code> for the attached listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach a listener to the event emitter. The given <code>name</code>\n will define the type of event. Handing in a <code>'*'</code> will\n listen to all events emitted by the event emitter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} An unique <code>id</code> for the attached listener.",
            "type": "Integer",
            "description": "An unique <code>id</code> for the attached listener."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1302
        },
        "end": {
          "line": 60,
          "column": 5,
          "index": 1645
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "ctx",
          "type": "var",
          "optional": true,
          "defaultValue": "Window"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "once": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Attach a listener to the event emitter which will be executed only once.",
          "     * The given <code>name</code> will define the type of event. Handing in a",
          "     * <code>'*'</code> will listen to all events emitted by the event emitter.",
          "     *",
          "     * @param name {String} The name of the event to listen to.",
          "     * @param listener {Function} The function execute on {@link #emit}.",
          "     * @param ctx {var?Window} The context of the listener.",
          "     * @return {Integer} An unique <code>id</code> for the attached listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attach a listener to the event emitter which will be executed only once.\n The given <code>name</code> will define the type of event. Handing in a\n <code>'*'</code> will listen to all events emitted by the event emitter.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} An unique <code>id</code> for the attached listener.",
            "type": "Integer",
            "description": "An unique <code>id</code> for the attached listener."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 2189
        },
        "end": {
          "line": 88,
          "column": 5,
          "index": 2534
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "ctx",
          "type": "var",
          "optional": true,
          "defaultValue": "Window"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "off": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove a listener from the event emitter. The given <code>name</code>",
          "     * will define the type of event.",
          "     *",
          "     * @param name {String} The name of the event to listen to.",
          "     * @param listener {Function} The function execute on {@link #emit}.",
          "     * @param ctx {var?Window} The context of the listener.",
          "     * @return {Integer|null} The listener's id if it was removed or",
          "     * <code>null</code> if it wasn't found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove a listener from the event emitter. The given <code>name</code>\n will define the type of event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null} The listener's id if it was removed or\n <code>null</code> if it wasn't found",
            "type": "Integer|null",
            "description": "The listener's id if it was removed or\n <code>null</code> if it wasn't found"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2989
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 3365
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "ctx",
          "type": "var",
          "optional": true,
          "defaultValue": "Window"
        }
      ],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "offById": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the listener identified by the given <code>id</code>. The id",
          "     * will be return on attaching the listener and can be stored for removing.",
          "     *",
          "     * @param id {Integer} The id of the listener.",
          "     * @return {Integer|null} The listener's id if it was removed or",
          "     * <code>null</code> if it wasn't found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the listener identified by the given <code>id</code>. The id\n will be return on attaching the listener and can be stored for removing.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Integer} The id of the listener.",
            "paramName": "id",
            "description": " The id of the listener.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null} The listener's id if it was removed or\n <code>null</code> if it wasn't found",
            "type": "Integer|null",
            "description": "The listener's id if it was removed or\n <code>null</code> if it wasn't found"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3715
        },
        "end": {
          "line": 127,
          "column": 5,
          "index": 3887
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "addListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Alternative for {@link #on}.",
          "     * @param name {String} The name of the event to listen to.",
          "     * @param listener {Function} The function execute on {@link #emit}.",
          "     * @param ctx {var?Window} The context of the listener.",
          "     * @return {Integer} An unique <code>id</code> for the attached listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alternative for {@link #on}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} An unique <code>id</code> for the attached listener.",
            "type": "Integer",
            "description": "An unique <code>id</code> for the attached listener."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 4221
        },
        "end": {
          "line": 138,
          "column": 5,
          "index": 4304
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "ctx",
          "type": "var",
          "optional": true,
          "defaultValue": "Window"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "addListenerOnce": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Alternative for {@link #once}.",
          "     * @param name {String} The name of the event to listen to.",
          "     * @param listener {Function} The function execute on {@link #emit}.",
          "     * @param ctx {var?Window} The context of the listener.",
          "     * @return {Integer} An unique <code>id</code> for the attached listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alternative for {@link #once}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} An unique <code>id</code> for the attached listener.",
            "type": "Integer",
            "description": "An unique <code>id</code> for the attached listener."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 147,
          "column": 4,
          "index": 4640
        },
        "end": {
          "line": 149,
          "column": 5,
          "index": 4729
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "ctx",
          "type": "var",
          "optional": true,
          "defaultValue": "Window"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "removeListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Alternative for {@link #off}.",
          "     * @param name {String} The name of the event to listen to.",
          "     * @param listener {Function} The function execute on {@link #emit}.",
          "     * @param ctx {var?Window} The context of the listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alternative for {@link #off}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to listen to.",
            "paramName": "name",
            "description": " The name of the event to listen to.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function execute on {@link #emit}.",
            "paramName": "listener",
            "description": " The function execute on {@link #emit}.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "ctx {var?Window} The context of the listener.",
            "paramName": "ctx",
            "description": " The context of the listener.",
            "optional": true,
            "defaultValue": "Window",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 157,
          "column": 4,
          "index": 4986
        },
        "end": {
          "line": 159,
          "column": 5,
          "index": 5066
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "ctx",
          "type": "var",
          "optional": true,
          "defaultValue": "Window"
        }
      ],
      "appearsIn": []
    },
    "removeListenerById": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Alternative for {@link #offById}.",
          "     * @param id {Integer} The id of the listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Alternative for {@link #offById}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Integer} The id of the listener.",
            "paramName": "id",
            "description": " The id of the listener.",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 5181
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 5235
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "emit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Emits an event with the given name. The data will be passed",
          "     * to the listener.",
          "     * @param name {String} The name of the event to emit.",
          "     * @param data {var?undefined} The data which should be passed to the listener.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Emits an event with the given name. The data will be passed\n to the listener.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event to emit.",
            "paramName": "name",
            "description": " The name of the event to emit.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {var?undefined} The data which should be passed to the listener.",
            "paramName": "data",
            "description": " The data which should be passed to the listener.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 5492
        },
        "end": {
          "line": 202,
          "column": 5,
          "index": 6312
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "data",
          "type": "var",
          "optional": true,
          "defaultValue": "undefined"
        }
      ],
      "appearsIn": []
    },
    "getListeners": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the internal attached listener.",
          "     * @internal",
          "     * @return {Map} A map which has the event name as key. The values are",
          "     *   arrays containing a map with 'listener' and 'ctx'.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the internal attached listener.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map which has the event name as key. The values are\n   arrays containing a map with 'listener' and 'ctx'.",
            "type": "Map<any, any>",
            "description": "A map which has the event name as key. The values are\n   arrays containing a map with 'listener' and 'ctx'."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 6534
        },
        "end": {
          "line": 212,
          "column": 5,
          "index": 6586
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "getEntryById": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the data entry for a given event id. If the entry could",
          "     * not be found, undefined will be returned.",
          "     * @internal",
          "     * @param id {Number} The listeners id",
          "     * @return {Map|undefined} The data entry if found",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the data entry for a given event id. If the entry could\n not be found, undefined will be returned.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Number} The listeners id",
            "paramName": "id",
            "description": " The listeners id",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|undefined} The data entry if found",
            "type": "Map|undefined",
            "description": "The data entry if found"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 221,
          "column": 4,
          "index": 6844
        },
        "end": {
          "line": 231,
          "column": 5,
          "index": 7105
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "Map|undefined"
      },
      "appearsIn": []
    },
    "__getStorage": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper which will return the storage for the given name.",
          "     * @param name {String} The name of the event.",
          "     * @return {Array} An array which is the storage for the listener and",
          "     *   the given event name.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper which will return the storage for the given name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the event.",
            "paramName": "name",
            "description": " The name of the event.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} An array which is the storage for the listener and\n   the given event name.",
            "type": "Array<any>",
            "description": "An array which is the storage for the listener and\n   the given event name."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 239,
          "column": 4,
          "index": 7357
        },
        "end": {
          "line": 247,
          "column": 5,
          "index": 7581
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    }
  },
  "properties": {}
}