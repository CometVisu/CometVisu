{
  "version": 0.3,
  "lastModified": 1731947915979,
  "lastModifiedIso": "2024-11-18T16:38:35.979Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/GlobalError.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 31,
      "column": 0,
      "index": 989
    },
    "end": {
      "line": 159,
      "column": 3,
      "index": 4932
    }
  },
  "className": "qx.event.GlobalError",
  "jsdoc": {
    "raw": [
      "*",
      " * The GlobalError class stores a reference to a global error handler function.",
      " *",
      " *  This function is called for each uncatched JavaScript exception. To enable",
      " *  global error handling the setting <code>qx.globalErrorHandling</code> must",
      " *  be enabled and an error handler must be registered.",
      " *  Further each JavaScript \"entry point\" must be wrapped with a call to",
      " *  {@link qx.event.GlobalError#observeMethod}.",
      " *",
      " * @ignore(qx.core, qx.core.Environment)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>The GlobalError class stores a reference to a global error handler function.\n  This function is called for each uncatched JavaScript exception. To enable\n  global error handling the setting <code>qx.globalErrorHandling</code> must\n  be enabled and an error handler must be registered.\n  Further each JavaScript \"entry point\" must be wrapped with a call to\n  {@link qx.event.GlobalError#observeMethod}.</p>"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "qx.core, qx.core.Environment"
      }
    ]
  },
  "statics": {
    "__callback": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 33,
          "column": 4,
          "index": 1052
        },
        "end": {
          "line": 33,
          "column": 20,
          "index": 1068
        }
      },
      "appearsIn": []
    },
    "__originalOnError": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 35,
          "column": 4,
          "index": 1075
        },
        "end": {
          "line": 35,
          "column": 27,
          "index": 1098
        }
      },
      "appearsIn": []
    },
    "__context": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1105
        },
        "end": {
          "line": 37,
          "column": 19,
          "index": 1120
        }
      },
      "appearsIn": []
    },
    "__isGlobalErrorHandlingEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Little helper to check if the global error handling is enabled.",
          "     * @return {Boolean} <code>true</code>, if it is enabled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Little helper to check if the global error handling is enabled.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if it is enabled.",
            "type": "boolean",
            "description": "<code>true</code>, if it is enabled."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 43,
          "column": 4,
          "index": 1276
        },
        "end": {
          "line": 49,
          "column": 5,
          "index": 1528
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "setErrorHandler": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the global fallback error handler",
          "     *",
          "     * @param callback {Function?null} The error handler. The first argument is the",
          "     *    exception, which caused the error",
          "     * @param context {Object?window} The \"this\" context of the callback function",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the global fallback error handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function?null} The error handler. The first argument is the\n    exception, which caused the error",
            "paramName": "callback",
            "description": " The error handler. The first argument is the\n    exception, which caused the error",
            "optional": true,
            "defaultValue": "null",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?window} The \"this\" context of the callback function",
            "paramName": "context",
            "description": " The \"this\" context of the callback function",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1813
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2893
        }
      },
      "type": "function",
      "params": [
        {
          "name": "callback",
          "type": "Function",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "context",
          "type": "Object",
          "optional": true,
          "defaultValue": "window"
        }
      ],
      "appearsIn": []
    },
    "__onErrorWindow": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Catches all errors of the <code>window.onerror</code> handler",
          "     * and passes an {@link qx.core.WindowError} object to the error",
          "     * handling.",
          "     *",
          "     * @param msg {String} browser error message",
          "     * @param uri {String} uri to erroneous script",
          "     * @param lineNumber {Integer} line number of error",
          "     * @param columnNumber {Integer} column number of error",
          "     * @param exception {Error} orginal error",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Catches all errors of the <code>window.onerror</code> handler\n and passes an {@link qx.core.WindowError} object to the error\n handling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "msg {String} browser error message",
            "paramName": "msg",
            "description": " browser error message",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "uri {String} uri to erroneous script",
            "paramName": "uri",
            "description": " uri to erroneous script",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "lineNumber {Integer} line number of error",
            "paramName": "lineNumber",
            "description": " line number of error",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "columnNumber {Integer} column number of error",
            "paramName": "columnNumber",
            "description": " column number of error",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "exception {Error} orginal error",
            "paramName": "exception",
            "description": " orginal error",
            "type": "Error"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 3340
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 3565
        }
      },
      "type": "function",
      "params": [
        {
          "name": "msg",
          "type": "string"
        },
        {
          "name": "uri",
          "type": "string"
        },
        {
          "name": "lineNumber",
          "type": "Integer"
        },
        {
          "name": "columnNumber",
          "type": "Integer"
        },
        {
          "name": "exception",
          "type": "Error"
        }
      ],
      "appearsIn": []
    },
    "observeMethod": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Wraps a method with error handling code. Only methods, which are called",
          "     * directly by the browser (e.g. event handler) should be wrapped.",
          "     *",
          "     * @param method {Function} method to wrap",
          "     * @return {Function} The function wrapped with error handling code",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Wraps a method with error handling code. Only methods, which are called\n directly by the browser (e.g. event handler) should be wrapped.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "method {Function} method to wrap",
            "paramName": "method",
            "description": " method to wrap",
            "type": "((...args: any[]) => any)"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} The function wrapped with error handling code",
            "type": "((...args: any[]) => any)",
            "description": "The function wrapped with error handling code"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3864
        },
        "end": {
          "line": 135,
          "column": 5,
          "index": 4325
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "((...args: any[]) => any)"
        }
      ],
      "returnType": {
        "type": "((...args: any[]) => any)"
      },
      "appearsIn": []
    },
    "handleError": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Delegates every given exception to the registered error handler",
          "     *",
          "     * @param ex {qx.core.WindowError|Error} Exception to delegate",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Delegates every given exception to the registered error handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "ex {qx.core.WindowError|Error} Exception to delegate",
            "paramName": "ex",
            "description": " Exception to delegate",
            "type": [
              "qx.core.WindowError",
              "Error"
            ]
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 4493
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 4603
        }
      },
      "type": "function",
      "params": [
        {
          "name": "ex",
          "type": [
            "qx.core.WindowError",
            "Error"
          ]
        }
      ],
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}