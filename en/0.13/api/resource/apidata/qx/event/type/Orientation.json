{
  "version": 0.3,
  "lastModified": 1735341602323,
  "lastModifiedIso": "2024-12-27T23:20:02.323Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/type/Orientation.js",
  "type": "class",
  "location": {
    "start": {
      "line": 37,
      "column": 0,
      "index": 869
    },
    "end": {
      "line": 122,
      "column": 3,
      "index": 3392
    }
  },
  "className": "qx.event.type.Orientation",
  "jsdoc": {
    "raw": [
      "*",
      " * Orientation event object.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Orientation event object.</p>"
      }
    ]
  },
  "superClass": "qx.event.type.Event",
  "members": {
    "__orientation": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1149
        },
        "end": {
          "line": 47,
          "column": 23,
          "index": 1168
        }
      },
      "appearsIn": []
    },
    "__mode": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1174
        },
        "end": {
          "line": 48,
          "column": 16,
          "index": 1186
        }
      },
      "appearsIn": []
    },
    "init": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initialize the fields of the event. The event must be initialized before",
          "     * it can be dispatched.",
          "     *",
          "     * @param orientation {String} One of <code>0</code>, <code>90</code> or <code>-90</code>",
          "     * @param mode {String} <code>landscape</code> or <code>portrait</code>",
          "     * @return {qx.event.type.Orientation} The initialized event instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the fields of the event. The event must be initialized before\n it can be dispatched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "orientation {String} One of <code>0</code>, <code>90</code> or <code>-90</code>",
            "paramName": "orientation",
            "description": " One of <code>0</code>, <code>90</code> or <code>-90</code>",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "mode {String} <code>landscape</code> or <code>portrait</code>",
            "paramName": "mode",
            "description": " <code>landscape</code> or <code>portrait</code>",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Orientation} The initialized event instance",
            "type": "qx.event.type.Orientation",
            "description": "The initialized event instance"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1569
        },
        "end": {
          "line": 65,
          "column": 5,
          "index": 1719
        }
      },
      "type": "function",
      "params": [
        {
          "name": "orientation",
          "type": "string"
        },
        {
          "name": "mode",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.event.type.Orientation"
      },
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "clone": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get a copy of this object",
          "     *",
          "     * @param embryo {qx.event.type.Orientation?null} Optional event class, which will",
          "     *     be configured using the data of this event instance. The event must be",
          "     *     an instance of this event class. If the data is <code>null</code>,",
          "     *     a new pooled instance is created.",
          "     *",
          "     * @return {qx.event.type.Orientation} a copy of this object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a copy of this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "embryo {qx.event.type.Orientation?null} Optional event class, which will\n     be configured using the data of this event instance. The event must be\n     an instance of this event class. If the data is <code>null</code>,\n     a new pooled instance is created.",
            "paramName": "embryo",
            "description": " Optional event class, which will\n     be configured using the data of this event instance. The event must be\n     an instance of this event class. If the data is <code>null</code>,\n     a new pooled instance is created.",
            "optional": true,
            "defaultValue": "null",
            "type": "qx.event.type.Orientation"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Orientation} a copy of this object",
            "type": "qx.event.type.Orientation",
            "description": "a copy of this object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2146
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2310
        }
      },
      "type": "function",
      "params": [
        {
          "name": "embryo",
          "type": "qx.event.type.Orientation",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.event.type.Orientation"
      },
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event",
        "qx.core.Object"
      ]
    },
    "getOrientation": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current orientation of the viewport in degree.",
          "     *",
          "     * All possible values and their meaning:",
          "     *",
          "     * * <code>0</code>: \"Portrait\"",
          "     * * <code>-90</code>: \"Landscape (right, screen turned clockwise)\"",
          "     * * <code>90</code>: \"Landscape (left, screen turned counterclockwise)\"",
          "     * * <code>180</code>: \"Portrait (upside-down portrait)\"",
          "     *",
          "     * @return {Integer} The current orientation in degree",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current orientation of the viewport in degree.\n All possible values and their meaning:</p>\n<ul>\n<li><code>0</code>: \"Portrait\"</li>\n<li><code>-90</code>: \"Landscape (right, screen turned clockwise)\"</li>\n<li><code>90</code>: \"Landscape (left, screen turned counterclockwise)\"</li>\n<li><code>180</code>: \"Portrait (upside-down portrait)\"</li>\n</ul>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The current orientation in degree",
            "type": "Integer",
            "description": "The current orientation in degree"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2771
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2828
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "isLandscape": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the viewport orientation is currently in landscape mode.",
          "     *",
          "     * @return {Boolean} <code>true</code> when the viewport orientation",
          "     *     is currently in landscape mode.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the viewport orientation is currently in landscape mode.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the viewport orientation\n     is currently in landscape mode.",
            "type": "boolean",
            "description": "<code>true</code> when the viewport orientation\n     is currently in landscape mode."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 3046
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 3108
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isPortrait": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the viewport orientation is currently in portrait mode.",
          "     *",
          "     * @return {Boolean} <code>true</code> when the viewport orientation",
          "     *     is currently in portrait mode.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the viewport orientation is currently in portrait mode.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the viewport orientation\n     is currently in portrait mode.",
            "type": "boolean",
            "description": "<code>true</code> when the viewport orientation\n     is currently in portrait mode."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3324
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3384
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}