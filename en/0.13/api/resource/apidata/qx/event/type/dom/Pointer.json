{
  "className": "qx.event.type.dom.Pointer",
  "packageName": "qx.event.type.dom",
  "name": "Pointer",
  "superClass": "qx.event.type.dom.Custom",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0,
        "index": 574
      },
      "end": {
        "line": 335,
        "column": 3,
        "index": 9374
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Synthetic pointer event</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "MOUSE_PROPERTIES": {
      "location": {
        "start": {
          "line": 27,
          "column": 4,
          "index": 683
        },
        "end": {
          "line": 48,
          "column": 5,
          "index": 1080
        }
      },
      "type": "variable",
      "access": "public"
    },
    "POINTER_PROPERTIES": {
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1089
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 1277
        }
      },
      "type": "variable",
      "access": "public"
    },
    "READONLY_PROPERTIES": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1286
        },
        "end": {
          "line": 61,
          "column": 27,
          "index": 1309
        }
      },
      "type": "variable",
      "access": "public"
    },
    "BIND_METHODS": {
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1318
        },
        "end": {
          "line": 71,
          "column": 5,
          "index": 1513
        }
      },
      "type": "variable",
      "access": "public"
    },
    "getPointerType": {
      "location": {
        "start": {
          "line": 80,
          "column": 4,
          "index": 1775
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2270
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the device type which the event triggered. This can be one\n of the following strings: <code>mouse</code>, <code>pen</code>\n or <code>touch</code>.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The type of the pointer.",
            "type": "String",
            "description": " The type of the pointer."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getViewportLeft": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 2460
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 2514
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal coordinate at which the event occurred relative\n to the viewport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position",
            "type": "Number",
            "description": " The horizontal mouse position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getViewportTop": {
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 2730
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 2783
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical coordinate at which the event occurred relative\n to the viewport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position",
            "type": "Number",
            "description": " The vertical mouse position"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentLeft": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3068
        },
        "end": {
          "line": 135,
          "column": 5,
          "index": 3312
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal position at which the event occurred relative to the\n left of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position in the document.",
            "type": "Number",
            "description": " The horizontal mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentTop": {
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 3592
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 3834
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical position at which the event occurred relative to the\n top of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position in the document.",
            "type": "Number",
            "description": " The vertical mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenLeft": {
      "location": {
        "start": {
          "line": 162,
          "column": 4,
          "index": 4207
        },
        "end": {
          "line": 164,
          "column": 5,
          "index": 4259
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal coordinate at which the event occurred relative to\n the origin of the screen coordinate system.\n Note: This value is usually not very useful unless you want to\n position a native popup window at this coordinate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position on the screen.",
            "type": "Number",
            "description": " The horizontal mouse position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenTop": {
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 4628
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 4679
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical coordinate at which the event occurred relative to\n the origin of the screen coordinate system.\n Note: This value is usually not very useful unless you want to\n position a native popup window at this coordinate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position on the screen.",
            "type": "Number",
            "description": " The vertical mouse position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "normalize": {
      "location": {
        "start": {
          "line": 185,
          "column": 4,
          "index": 4855
        },
        "end": {
          "line": 193,
          "column": 5,
          "index": 5188
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Manipulates the event object, adding methods if they're not\n already present</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} Native event object",
            "paramName": "event",
            "description": " Native event object",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "construct": {
    "location": {
      "start": {
        "line": 196,
        "column": 2,
        "index": 5200
      },
      "end": {
        "line": 198,
        "column": 3,
        "index": 5293
      }
    }
  },
  "members": {
    "_createEvent": {
      "location": {
        "start": {
          "line": 201,
          "column": 4,
          "index": 5316
        },
        "end": {
          "line": 218,
          "column": 5,
          "index": 6031
        }
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.event.type.dom.Custom",
      "appearsIn": [
        "qx.event.type.dom.Custom"
      ],
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "body": "{Event} event object",
            "type": "Event",
            "description": " event object"
          }
        ]
      }
    },
    "_initEvent": {
      "location": {
        "start": {
          "line": 220,
          "column": 4,
          "index": 6040
        },
        "end": {
          "line": 320,
          "column": 5,
          "index": 8956
        }
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.event.type.dom.Custom",
      "appearsIn": [
        "qx.event.type.dom.Custom"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} Native event that will be used as a template for the new event",
            "paramName": "domEvent",
            "description": " Native event that will be used as a template for the new event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "customProps {Map?} Map of event properties (will override the domEvent's values)",
            "paramName": "customProps",
            "description": " Map of event properties (will override the domEvent's values)",
            "optional": true,
            "type": "Map"
          }
        ]
      }
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 323,
        "column": 2,
        "index": 8968
      },
      "end": {
        "line": 334,
        "column": 3,
        "index": 9369
      }
    }
  },
  "descendants": []
}