{
  "version": 0.3,
  "lastModified": 1726088852533,
  "lastModifiedIso": "2024-09-11T21:07:32.533Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/type/Native.js",
  "type": "class",
  "location": {
    "start": {
      "line": 24,
      "column": 0,
      "index": 621
    },
    "end": {
      "line": 125,
      "column": 3,
      "index": 3744
    }
  },
  "className": "qx.event.type.Native",
  "jsdoc": {
    "raw": [
      "*",
      " * Common base class for all native events (DOM events, IO events, ...).",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Common base class for all native events (DOM events, IO events, …).</p>"
      }
    ]
  },
  "superClass": "qx.event.type.Event",
  "members": {
    "init": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initialize the fields of the event. The event must be initialized before",
          "     * it can be dispatched.",
          "     *",
          "     * @param nativeEvent {Event} The DOM event to use",
          "     * @param target {Object?} The event target",
          "     * @param relatedTarget {Object?null} The related event target",
          "     * @param canBubble {Boolean?false} Whether or not the event is a bubbling event.",
          "     *     If the event is bubbling, the bubbling can be stopped using",
          "     *     {@link qx.event.type.Event#stopPropagation}",
          "     * @param cancelable {Boolean?false} Whether or not an event can have its default",
          "     *     action prevented. The default action can either be the browser's",
          "     *     default action of a native event (e.g. open the context menu on a",
          "     *     right click) or the default action of a qooxdoo class (e.g. close",
          "     *     the window widget). The default action can be prevented by calling",
          "     *     {@link #preventDefault}",
          "     * @return {qx.event.type.Event} The initialized event instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the fields of the event. The event must be initialized before\n it can be dispatched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "nativeEvent {Event} The DOM event to use",
            "paramName": "nativeEvent",
            "description": " The DOM event to use",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "target {Object?} The event target",
            "paramName": "target",
            "description": " The event target",
            "optional": true,
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "relatedTarget {Object?null} The related event target",
            "paramName": "relatedTarget",
            "description": " The related event target",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "canBubble {Boolean?false} Whether or not the event is a bubbling event.\n     If the event is bubbling, the bubbling can be stopped using\n     {@link qx.event.type.Event#stopPropagation}",
            "paramName": "canBubble",
            "description": " Whether or not the event is a bubbling event.\n     If the event is bubbling, the bubbling can be stopped using\n     {@link qx.event.type.Event#stopPropagation}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link #preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link #preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} The initialized event instance",
            "type": "qx.event.type.Event",
            "description": "The initialized event instance"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1723
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 2181
        }
      },
      "type": "function",
      "params": [
        {
          "name": "nativeEvent",
          "type": "qx.event.type.Event"
        },
        {
          "name": "target",
          "type": "Object",
          "optional": true
        },
        {
          "name": "relatedTarget",
          "type": "Object",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "canBubble",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        },
        {
          "name": "cancelable",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.event.type.Event"
      },
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "clone": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 2206
        },
        "end": {
          "line": 73,
          "column": 5,
          "index": 2436
        }
      },
      "type": "function",
      "params": [
        {
          "name": "embryo"
        }
      ],
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event",
        "qx.core.Object"
      ]
    },
    "_cloneNativeEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clone the native browser event",
          "     *",
          "     * @param nativeEvent {Event} The native browser event",
          "     * @param clone {Object} The initialized clone.",
          "     * @return {Object} The cloned event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clone the native browser event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "nativeEvent {Event} The native browser event",
            "paramName": "nativeEvent",
            "description": " The native browser event",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "clone {Object} The initialized clone.",
            "paramName": "clone",
            "description": " The initialized clone.",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The cloned event",
            "type": "Record<any, any>",
            "description": "The cloned event"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2656
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2766
        }
      },
      "type": "function",
      "params": [
        {
          "name": "nativeEvent",
          "type": "qx.event.type.Event"
        },
        {
          "name": "clone",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "preventDefault": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Prevent browser default behavior, e.g. opening the context menu, ...",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Prevent browser default behavior, e.g. opening the context menu, …</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 2865
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2968
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "getNativeEvent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the native browser event object of this event.",
          "     *",
          "     * @return {Event} The native browser event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the native browser event object of this event.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Event} The native browser event",
            "type": "qx.event.type.Event",
            "description": "The native browser event"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 3104
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 3155
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.event.type.Event"
      },
      "appearsIn": []
    },
    "setReturnValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the event's return value. If the return value is set in a",
          "     * beforeunload event, the user will be asked by the browser, whether",
          "     * he really wants to leave the page. The return string will be displayed in",
          "     * the message box.",
          "     *",
          "     * @param returnValue {String?null} Return value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the event's return value. If the return value is set in a\n beforeunload event, the user will be asked by the browser, whether\n he really wants to leave the page. The return string will be displayed in\n the message box.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "returnValue {String?null} Return value",
            "paramName": "returnValue",
            "description": " Return value",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3487
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3561
        }
      },
      "type": "function",
      "params": [
        {
          "name": "returnValue",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "appearsIn": []
    },
    "getReturnValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Retrieves the event's return value.",
          "     *",
          "     * @return {String?null} The return value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Retrieves the event's return value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String?null} The return value",
            "type": "String?null",
            "description": "The return value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3680
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 3736
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "String?null"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}