{
  "version": 0.3,
  "lastModified": 1729101021196,
  "lastModifiedIso": "2024-10-16T17:50:21.196Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/type/Drag.js",
  "type": "class",
  "location": {
    "start": {
      "line": 25,
      "column": 0,
      "index": 629
    },
    "end": {
      "line": 291,
      "column": 3,
      "index": 8857
    }
  },
  "className": "qx.event.type.Drag",
  "jsdoc": {
    "raw": [
      "*",
      " * Event object class for drag events",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Event object class for drag events</p>"
      }
    ]
  },
  "superClass": "qx.event.type.Event",
  "members": {
    "init": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initialize the fields of the event. The event must be initialized before",
          "     * it can be dispatched.",
          "     *",
          "     * @param cancelable {Boolean?false} Whether or not an event can have its default",
          "     *     action prevented. The default action can either be the browser's",
          "     *     default action of a native event (e.g. open the context menu on a",
          "     *     right click) or the default action of a qooxdoo class (e.g. close",
          "     *     the window widget). The default action can be prevented by calling",
          "     *     {@link qx.event.type.Event#preventDefault}",
          "     * @param originalEvent {qx.event.type.Track} The original (mouse) event to use",
          "     * @return {qx.event.type.Event} The initialized event instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the fields of the event. The event must be initialized before\n it can be dispatched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "originalEvent {qx.event.type.Track} The original (mouse) event to use",
            "paramName": "originalEvent",
            "description": " The original (mouse) event to use",
            "type": "qx.event.type.Track"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} The initialized event instance",
            "type": "qx.event.type.Event",
            "description": "The initialized event instance"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1634
        },
        "end": {
          "line": 60,
          "column": 5,
          "index": 1983
        }
      },
      "type": "function",
      "params": [
        {
          "name": "cancelable",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        },
        {
          "name": "originalEvent",
          "type": "qx.event.type.Track"
        }
      ],
      "returnType": {
        "type": "qx.event.type.Event"
      },
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "clone": {
      "jsdoc": {
        "raw": [
          " overridden"
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 2008
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 2126
        }
      },
      "type": "function",
      "params": [
        {
          "name": "embryo"
        }
      ],
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event",
        "qx.core.Object"
      ]
    },
    "getDocumentLeft": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the horizontal position at which the event occurred relative to the",
          "     * left of the document. This property takes into account any scrolling of",
          "     * the page.",
          "     *",
          "     * @return {Integer} The horizontal mouse position in the document.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal position at which the event occurred relative to the\n left of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The horizontal mouse position in the document.",
            "type": "Integer",
            "description": "The horizontal mouse position in the document."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2403
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 2984
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getDocumentTop": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the vertical position at which the event occurred relative to the",
          "     * top of the document. This property takes into account any scrolling of",
          "     * the page.",
          "     *",
          "     * @return {Integer} The vertical mouse position in the document.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical position at which the event occurred relative to the\n top of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The vertical mouse position in the document.",
            "type": "Integer",
            "description": "The vertical mouse position in the document."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3256
        },
        "end": {
          "line": 122,
          "column": 5,
          "index": 3836
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "getManager": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the drag&drop event handler responsible for the target",
          "     *",
          "     * @return {qx.event.handler.DragDrop} The drag&drop handler",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the drag&amp;drop event handler responsible for the target</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.handler.DragDrop} The drag&drop handler",
            "type": "qx.event.handler.DragDrop",
            "description": "The drag&drop handler"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 4001
        },
        "end": {
          "line": 133,
          "column": 5,
          "index": 4140
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.event.handler.DragDrop"
      },
      "appearsIn": []
    },
    "addType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Used during <code>dragstart</code> listener to",
          "     * inform the manager about supported data types.",
          "     *",
          "     * @param type {String} Data type to add to list of supported types",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Used during <code>dragstart</code> listener to\n inform the manager about supported data types.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Data type to add to list of supported types",
            "paramName": "type",
            "description": " Data type to add to list of supported types",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 141,
          "column": 4,
          "index": 4350
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 4410
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "addAction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Used during <code>dragstart</code> listener to",
          "     * inform the manager about supported drop actions.",
          "     *",
          "     * @param action {String} Action to add to the list of supported actions",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Used during <code>dragstart</code> listener to\n inform the manager about supported drop actions.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to add to the list of supported actions",
            "paramName": "action",
            "description": " Action to add to the list of supported actions",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4627
        },
        "end": {
          "line": 153,
          "column": 5,
          "index": 4695
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "supportsType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the given type is supported by the drag",
          "     * target (source target).",
          "     *",
          "     * This is used in the event listeners for <code>dragover</code>",
          "     * or <code>dragdrop</code>.",
          "     *",
          "     * @param type {String} The type to look for",
          "     * @return {Boolean} Whether the given type is supported",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given type is supported by the drag\n target (source target).\n This is used in the event listeners for <code>dragover</code>\n or <code>dragdrop</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} The type to look for",
            "paramName": "type",
            "description": " The type to look for",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the given type is supported",
            "type": "boolean",
            "description": "Whether the given type is supported"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 5030
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 5107
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "supportsAction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the given action is supported by the drag",
          "     * target (source target).",
          "     *",
          "     * This is used in the event listeners for <code>dragover</code>",
          "     * or <code>dragdrop</code>.",
          "     *",
          "     * @param action {String} The action to look for",
          "     * @return {Boolean} Whether the given action is supported",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given action is supported by the drag\n target (source target).\n This is used in the event listeners for <code>dragover</code>\n or <code>dragdrop</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The action to look for",
            "paramName": "action",
            "description": " The action to look for",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the given action is supported",
            "type": "boolean",
            "description": "Whether the given action is supported"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5450
        },
        "end": {
          "line": 181,
          "column": 5,
          "index": 5535
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "addData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds data of the given type to the internal storage. The data",
          "     * is available until the <code>dragend</code> event is fired.",
          "     *",
          "     * @param type {String} Any valid type",
          "     * @param data {var} Any data to store",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds data of the given type to the internal storage. The data\n is available until the <code>dragend</code> event is fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any valid type",
            "paramName": "type",
            "description": " Any valid type",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "data {var} Any data to store",
            "paramName": "data",
            "description": " Any data to store",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 190,
          "column": 4,
          "index": 5787
        },
        "end": {
          "line": 192,
          "column": 5,
          "index": 5859
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "data",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "getData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the data of the given type. Used in the <code>drop</code> listener.",
          "     *",
          "     * Note that this is a synchronous method and if any of the drag and drop",
          "     * events handlers are implemented using Promises, this may fail; @see",
          "     * `getDataAsync`.",
          "     *",
          "     * @param type {String} Any of the supported types.",
          "     * @return {var} The data for the given type",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the data of the given type. Used in the <code>drop</code> listener.\n Note that this is a synchronous method and if any of the drag and drop\n events handlers are implemented using Promises, this may fail; @see\n <code>getDataAsync</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any of the supported types.",
            "paramName": "type",
            "description": " Any of the supported types.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The data for the given type",
            "type": "var",
            "description": "The data for the given type"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 6260
        },
        "end": {
          "line": 206,
          "column": 5,
          "index": 6327
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "getDataAsync": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the data of the given type. Used in the <code>drop</code> listener.",
          "     *",
          "     * @param type {String} Any of the supported types.",
          "     * @return {qx.Promise|var} The data for the given type",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the data of the given type. Used in the <code>drop</code> listener.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any of the supported types.",
            "paramName": "type",
            "description": " Any of the supported types.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|var} The data for the given type",
            "type": "qx.Promise|var",
            "description": "The data for the given type"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 214,
          "column": 4,
          "index": 6556
        },
        "end": {
          "line": 216,
          "column": 5,
          "index": 6633
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.Promise|var"
      },
      "appearsIn": []
    },
    "getCurrentType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the type which was requested last, to be used",
          "     * in the <code>droprequest</code> listener.",
          "     *",
          "     * @return {String} The last requested data type",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the type which was requested last, to be used\n in the <code>droprequest</code> listener.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The last requested data type",
            "type": "string",
            "description": "The last requested data type"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 224,
          "column": 4,
          "index": 6826
        },
        "end": {
          "line": 226,
          "column": 5,
          "index": 6899
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "getCurrentAction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the currently selected action. Depends on the",
          "     * supported actions of the source target and the modification",
          "     * keys pressed by the user.",
          "     *",
          "     * Used in the <code>droprequest</code> listener.",
          "     *",
          "     * @return {String} The action. May be one of <code>move</code>,",
          "     *    <code>copy</code> or <code>alias</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the currently selected action. Depends on the\n supported actions of the source target and the modification\n keys pressed by the user.\n Used in the <code>droprequest</code> listener.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The action. May be one of <code>move</code>,\n    <code>copy</code> or <code>alias</code>.",
            "type": "string",
            "description": "The action. May be one of <code>move</code>,\n    <code>copy</code> or <code>alias</code>."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 238,
          "column": 4,
          "index": 7271
        },
        "end": {
          "line": 243,
          "column": 5,
          "index": 7417
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "getCurrentActionAsync": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the currently selected action. Depends on the",
          "     * supported actions of the source target and the modification",
          "     * keys pressed by the user.",
          "     *",
          "     * Used in the <code>droprequest</code> listener.",
          "     *",
          "     * @return {qx.Promise|String} The action. May be one of <code>move</code>,",
          "     *    <code>copy</code> or <code>alias</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the currently selected action. Depends on the\n supported actions of the source target and the modification\n keys pressed by the user.\n Used in the <code>droprequest</code> listener.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|String} The action. May be one of <code>move</code>,\n    <code>copy</code> or <code>alias</code>.",
            "type": "qx.Promise|String",
            "description": "The action. May be one of <code>move</code>,\n    <code>copy</code> or <code>alias</code>."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 255,
          "column": 4,
          "index": 7800
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 7956
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.Promise|String"
      },
      "appearsIn": []
    },
    "setDropAllowed": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the current drop target allows the current drag target.",
          "     *",
          "     * This can be called from within the \"drag\" event to enable/disable",
          "     * a drop target selectively, for example based on the child item,",
          "     * above and beyond the one-time choice made by the the \"dragover\"",
          "     * event for the droppable widget itself.",
          "     *",
          "     * @param isAllowed {Boolean} False if a drop should be disallowed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the current drop target allows the current drag target.\n This can be called from within the \"drag\" event to enable/disable\n a drop target selectively, for example based on the child item,\n above and beyond the one-time choice made by the the \"dragover\"\n event for the droppable widget itself.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "isAllowed {Boolean} False if a drop should be disallowed",
            "paramName": "isAllowed",
            "description": " False if a drop should be disallowed",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 272,
          "column": 4,
          "index": 8396
        },
        "end": {
          "line": 274,
          "column": 5,
          "index": 8480
        }
      },
      "type": "function",
      "params": [
        {
          "name": "isAllowed",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "getDragTarget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the target which has been initially tapped on.",
          "     * @return {qx.ui.core.Widget} The tapped widget.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the target which has been initially tapped on.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The tapped widget.",
            "type": "qx.ui.core.Widget",
            "description": "The tapped widget."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 8619
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 8690
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": []
    },
    "stopSession": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stops the drag&drop session and fires a <code>dragend</code> event.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the drag&amp;drop session and fires a <code>dragend</code> event.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 287,
          "column": 4,
          "index": 8788
        },
        "end": {
          "line": 289,
          "column": 5,
          "index": 8849
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}