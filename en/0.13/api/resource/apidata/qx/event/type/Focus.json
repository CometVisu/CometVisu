{
  "version": 0.3,
  "lastModified": 1726088851321,
  "lastModifiedIso": "2024-09-11T21:07:31.321Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/event/type/Focus.js",
  "type": "class",
  "location": {
    "start": {
      "line": 22,
      "column": 0,
      "index": 531
    },
    "end": {
      "line": 46,
      "column": 3,
      "index": 1335
    }
  },
  "className": "qx.event.type.Focus",
  "jsdoc": {
    "raw": [
      "*",
      " * Common base class for all focus events.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Common base class for all focus events.</p>"
      }
    ]
  },
  "superClass": "qx.event.type.Event",
  "members": {
    "init": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initialize the fields of the event. The event must be initialized before",
          "     * it can be dispatched.",
          "     *",
          "     * @param target {Object} Any possible event target",
          "     * @param relatedTarget {Object} Any possible event target",
          "     * @param canBubble {Boolean?false} Whether or not the event is a bubbling event.",
          "     *     If the event is bubbling, the bubbling can be stopped using",
          "     *     {@link qx.event.type.Event#stopPropagation}",
          "     * @return {qx.event.type.Event} The initialized event instance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the fields of the event. The event must be initialized before\n it can be dispatched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} Any possible event target",
            "paramName": "target",
            "description": " Any possible event target",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "relatedTarget {Object} Any possible event target",
            "paramName": "relatedTarget",
            "description": " Any possible event target",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "canBubble {Boolean?false} Whether or not the event is a bubbling event.\n     If the event is bubbling, the bubbling can be stopped using\n     {@link qx.event.type.Event#stopPropagation}",
            "paramName": "canBubble",
            "description": " Whether or not the event is a bubbling event.\n     If the event is bubbling, the bubbling can be stopped using\n     {@link qx.event.type.Event#stopPropagation}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} The initialized event instance",
            "type": "qx.event.type.Event",
            "description": "The initialized event instance"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1152
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1327
        }
      },
      "type": "function",
      "params": [
        {
          "name": "target",
          "type": "Record<any, any>"
        },
        {
          "name": "relatedTarget",
          "type": "Record<any, any>"
        },
        {
          "name": "canBubble",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.event.type.Event"
      },
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    }
  },
  "statics": {},
  "properties": {}
}