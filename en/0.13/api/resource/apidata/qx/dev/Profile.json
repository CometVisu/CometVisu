{
  "version": 0.3,
  "lastModified": 1722151626727,
  "lastModifiedIso": "2024-07-28T07:27:06.727Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/dev/Profile.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 30,
      "column": 0,
      "index": 944
    },
    "end": {
      "line": 345,
      "column": 3,
      "index": 9485
    }
  },
  "className": "qx.dev.Profile",
  "jsdoc": {
    "raw": [
      "*",
      " * qooxdoo profiler.",
      " *",
      " * All functions of qooxdoo classes (constructors, members, statics) can be profiled",
      " * using this class.",
      " *",
      " * To enable profiling this class must be loaded <b>before</b> <code>qx.Class</code> is",
      " * loaded. This can be achieved by making <code>qx.core.Aspect</code> and",
      " * <code>qx.dev.Profile</code> a load time dependency of <code>qx.Class</code>.",
      " * Further more the variant <code>qx.aspects</code> must be set to <code>on</code>.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>qooxdoo profiler.\n All functions of qooxdoo classes (constructors, members, statics) can be profiled\n using this class.\n To enable profiling this class must be loaded <b>before</b> <code>qx.Class</code> is\n loaded. This can be achieved by making <code>qx.core.Aspect</code> and\n <code>qx.dev.Profile</code> a load time dependency of <code>qx.Class</code>.\n Further more the variant <code>qx.aspects</code> must be set to <code>on</code>.</p>"
      }
    ]
  },
  "statics": {
    "__profileData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Storage for profiling data",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Storage for profiling data</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 1075
        },
        "end": {
          "line": 37,
          "column": 21,
          "index": 1092
        }
      },
      "appearsIn": []
    },
    "__callStack": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Array for call stack-like data types.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Array for call stack-like data types.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1184
        },
        "end": {
          "line": 44,
          "column": 19,
          "index": 1199
        }
      },
      "appearsIn": []
    },
    "__doProfile": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Flag marking profiler run.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag marking profiler run.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1280
        },
        "end": {
          "line": 51,
          "column": 21,
          "index": 1297
        }
      },
      "appearsIn": []
    },
    "__callOverhead": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Profiler execution time. Subtracted for more accurate calculations.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Profiler execution time. Subtracted for more accurate calculations.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1419
        },
        "end": {
          "line": 58,
          "column": 29,
          "index": 1444
        }
      },
      "appearsIn": []
    },
    "__calibrateCount": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Amount of times to run calculation of profiler overhead.",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Amount of times to run calculation of profiler overhead.</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1555
        },
        "end": {
          "line": 65,
          "column": 26,
          "index": 1577
        }
      },
      "appearsIn": []
    },
    "start": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clear profiling data and start profiling.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clear profiling data and start profiling.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 1649
        },
        "end": {
          "line": 74,
          "column": 5,
          "index": 1789
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "stop": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stop profiling.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop profiling.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 1835
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 1881
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "getProfileData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return the profiling data as JSON data structure.",
          "     *",
          "     * Example:",
          "     * <pre class=\"javascript\">",
          "     * {",
          "     *   \"qx.core.ObjectRegistry.toHashCode (static)\":{",
          "     *     *     \"totalTime\":3,",
          "     *     \"ownTime\":3,",
          "     *     \"callCount\":218,",
          "     *     \"subRoutineCalls\":0,",
          "     *     \"name\":\"qx.core.ObjectRegistry.toHashCode\",",
          "     *     \"type\":\"static\"",
          "     *   },",
          "     *   \"qx.core.Object.addListener (member)\":{",
          "     *     \"totalTime\":19,",
          "     *     \"ownTime\":12,",
          "     *     \"callCount\":59,",
          "     *     \"subRoutineCalls\":251,",
          "     *     \"name\":\"qx.core.Object.addListener\",",
          "     *     \"type\":\"member\"",
          "     *   },",
          "     *   \"qx.ui.table.cellrenderer.Default (constructor)\":{",
          "     *     \"totalTime\":2,",
          "     *     \"ownTime\":1,",
          "     *     \"callCount\":1,",
          "     *     \"subRoutineCalls\":4,",
          "     *     \"name\":\"qx.ui.table.cellrenderer.Default\",",
          "     *     \"type\":\"constructor\"",
          "     *   }",
          "     * }",
          "     * </pre>",
          "     *",
          "     * @return {Map} The current profiling data.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the profiling data as JSON data structure.\n Example:\n </p>\n<pre class=\"javascript\">\n {\n   \"qx.core.ObjectRegistry.toHashCode (static)\":{\n*     \"totalTime\":3,\n     \"ownTime\":3,\n     \"callCount\":218,\n     \"subRoutineCalls\":0,\n     \"name\":\"qx.core.ObjectRegistry.toHashCode\",\n     \"type\":\"static\"\n   },\n   \"qx.core.Object.addListener (member)\":{\n     \"totalTime\":19,\n     \"ownTime\":12,\n     \"callCount\":59,\n     \"subRoutineCalls\":251,\n     \"name\":\"qx.core.Object.addListener\",\n     \"type\":\"member\"\n   },\n   \"qx.ui.table.cellrenderer.Default (constructor)\":{\n     \"totalTime\":2,\n     \"ownTime\":1,\n     \"callCount\":1,\n     \"subRoutineCalls\":4,\n     \"name\":\"qx.ui.table.cellrenderer.Default\",\n     \"type\":\"constructor\"\n   }\n }\n </pre>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The current profiling data.",
            "type": "Map<any, any>",
            "description": "The current profiling data."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 2884
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 2941
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "showResults": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Show profiling results in a popup window. The results are sorted by the",
          "     * function's own time.",
          "     *",
          "     * @param maxLength {Integer?100} maximum number of entries to display.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Show profiling results in a popup window. The results are sorted by the\n function's own time.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "maxLength {Integer?100} maximum number of entries to display.",
            "paramName": "maxLength",
            "description": " maximum number of entries to display.",
            "optional": true,
            "defaultValue": "100",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3154
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 4623
        }
      },
      "type": "function",
      "params": [
        {
          "name": "maxLength",
          "type": "Integer",
          "optional": true,
          "defaultValue": "100"
        }
      ],
      "appearsIn": []
    },
    "__calibrate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Measure the overhead of calling a wrapped function vs. calling an",
          "     * unwrapped function.",
          "     *",
          "     * @lint ignoreDeprecated(eval)",
          "     *",
          "     * @param count {Integer} Number of iterations to measure.",
          "     * @return {Number} Overhead of a wrapped function call in milliseconds.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Measure the overhead of calling a wrapped function vs. calling an\n unwrapped function.</p>"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreDeprecated(eval)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "count {Integer} Number of iterations to measure.",
            "paramName": "count",
            "description": " Number of iterations to measure.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Overhead of a wrapped function call in milliseconds.",
            "type": "number",
            "description": "Overhead of a wrapped function call in milliseconds."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 4936
        },
        "end": {
          "line": 226,
          "column": 5,
          "index": 5913
        }
      },
      "type": "function",
      "params": [
        {
          "name": "count",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "__calibrateHelper": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Helper to measure overhead.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to measure overhead.</p>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 231,
          "column": 4,
          "index": 5971
        },
        "end": {
          "line": 231,
          "column": 26,
          "index": 5993
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "normalizeProfileData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Normalize profiling data by subtracting the overhead of wrapping from the",
          "     * function's own time.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Normalize profiling data by subtracting the overhead of wrapping from the\n function's own time.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 237,
          "column": 4,
          "index": 6125
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 6659
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "profileBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This function will be called before each function call. (Start timing)",
          "     *",
          "     * @param fullName {String} Full name of the function including the class name.",
          "     * @param fcn {Function} Function to time.",
          "     * @param type {String} Function type as in parameter with same name to",
          "     *                      {@link qx.core.Aspect#addAdvice}",
          "     * @param args {arguments} The arguments passed to the wrapped function",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function will be called before each function call. (Start timing)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fullName {String} Full name of the function including the class name.",
            "paramName": "fullName",
            "description": " Full name of the function including the class name.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "fcn {Function} Function to time.",
            "paramName": "fcn",
            "description": " Function to time.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "type {String} Function type as in parameter with same name to\n                      {@link qx.core.Aspect#addAdvice}",
            "paramName": "type",
            "description": " Function type as in parameter with same name to\n                      {@link qx.core.Aspect#addAdvice}",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "args {arguments} The arguments passed to the wrapped function",
            "paramName": "args",
            "description": " The arguments passed to the wrapped function",
            "type": "arguments"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 265,
          "column": 4,
          "index": 7111
        },
        "end": {
          "line": 279,
          "column": 5,
          "index": 7408
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fullName",
          "type": "string"
        },
        {
          "name": "fcn",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "args",
          "type": "arguments"
        }
      ],
      "appearsIn": []
    },
    "profileAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This function will be called after each function call. (Stop timing)",
          "     *",
          "     * @param fullName {String} Full name of the function including the class name.",
          "     * @param fcn {Function} Function to time.",
          "     * @param type {String} Function type as in parameter with same name to",
          "     *                      {@link qx.core.Aspect#addAdvice}",
          "     * @param args {arguments} The arguments passed to the wrapped function",
          "     * @param returnValue {var} return value of the wrapped function.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This function will be called after each function call. (Stop timing)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fullName {String} Full name of the function including the class name.",
            "paramName": "fullName",
            "description": " Full name of the function including the class name.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "fcn {Function} Function to time.",
            "paramName": "fcn",
            "description": " Function to time.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "type {String} Function type as in parameter with same name to\n                      {@link qx.core.Aspect#addAdvice}",
            "paramName": "type",
            "description": " Function type as in parameter with same name to\n                      {@link qx.core.Aspect#addAdvice}",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "args {arguments} The arguments passed to the wrapped function",
            "paramName": "args",
            "description": " The arguments passed to the wrapped function",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "returnValue {var} return value of the wrapped function.",
            "paramName": "returnValue",
            "description": " return value of the wrapped function.",
            "type": "var"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 7928
        },
        "end": {
          "line": 326,
          "column": 5,
          "index": 8995
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fullName",
          "type": "string"
        },
        {
          "name": "fcn",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "args",
          "type": "arguments"
        },
        {
          "name": "returnValue",
          "type": "var"
        }
      ],
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}