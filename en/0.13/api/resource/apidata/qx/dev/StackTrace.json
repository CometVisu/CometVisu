{
  "version": 0.3,
  "lastModified": 1731947916927,
  "lastModifiedIso": "2024-11-18T16:38:36.927Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/dev/StackTrace.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 28,
      "column": 0,
      "index": 696
    },
    "end": {
      "line": 398,
      "column": 3,
      "index": 13639
    }
  },
  "className": "qx.dev.StackTrace",
  "jsdoc": {
    "raw": [
      "*",
      " * Methods to get information about the JavaScript call stack.",
      " *",
      " * @require(qx.lang.normalize.String)",
      " * @ignore(qx.bom.client.EcmaScript.*)",
      " * @ignore(qx.bom.client)",
      " * @ignore(qx.bom)",
      " * @ignore(qx.Class.*)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Methods to get information about the JavaScript call stack.</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.lang.normalize.String"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "qx.bom.client.EcmaScript.*"
      },
      {
        "name": "@ignore",
        "body": "qx.bom.client"
      },
      {
        "name": "@ignore",
        "body": "qx.bom"
      },
      {
        "name": "@ignore",
        "body": "qx.Class.*"
      }
    ]
  },
  "statics": {
    "FILENAME_TO_CLASSNAME": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Optional user-defined function to convert source file names into readable",
          "     * class names. Will be called with the source file name extracted from the",
          "     * browser's stack trace information as the only argument. The returned",
          "     * string is used in the output of {@link #getStackTraceFromError}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Optional user-defined function to convert source file names into readable\n class names. Will be called with the source file name extracted from the\n browser's stack trace information as the only argument. The returned\n string is used in the output of {@link #getStackTraceFromError}</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 36,
          "column": 4,
          "index": 1080
        },
        "end": {
          "line": 36,
          "column": 31,
          "index": 1107
        }
      },
      "appearsIn": []
    },
    "FORMAT_STACKTRACE": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Optional user-defined formatting function for stack trace information.",
          "     * Will be called by with an array of strings representing the calls in the",
          "     * stack trace. {@link #getStackTraceFromError} will return the output of",
          "     * this function. Must return an array of strings.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Optional user-defined formatting function for stack trace information.\n Will be called by with an array of strings representing the calls in the\n stack trace. {@link #getStackTraceFromError} will return the output of\n this function. Must return an array of strings.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1421
        },
        "end": {
          "line": 44,
          "column": 27,
          "index": 1444
        }
      },
      "appearsIn": []
    },
    "getStackTrace": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get a stack trace of the current position in the code.",
          "     *",
          "     * Browser compatibility:",
          "     * <ul>",
          "     *   <li>In new versions of Gecko, WebKit and Opera, the output of",
          "     *   {@link #getStackTraceFromError} and {@link #getStackTraceFromCaller} is",
          "     *   combined to generate the richest trace, including line numbers.</li>",
          "     *   <li>For Internet Explorer (and other engines that do not provide stack",
          "     *    traces), {@link #getStackTraceFromCaller} is used</li>",
          "     * </ul>",
          "     *",
          "     * @return {String[]} Stack trace of the current position in the code. Each line in the array",
          "     *     represents one call in the stack trace.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a stack trace of the current position in the code.\n Browser compatibility:\n </p>\n<ul>\n   <li>In new versions of Gecko, WebKit and Opera, the output of\n   {@link #getStackTraceFromError} and {@link #getStackTraceFromCaller} is\n   combined to generate the richest trace, including line numbers.</li>\n   <li>For Internet Explorer (and other engines that do not provide stack\n    traces), {@link #getStackTraceFromCaller} is used</li>\n </ul>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} Stack trace of the current position in the code. Each line in the array\n     represents one call in the stack trace.",
            "type": "String[]",
            "description": "Stack trace of the current position in the code. Each line in the array\n     represents one call in the stack trace."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 2122
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 4316
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "String[]"
      },
      "appearsIn": []
    },
    "getStackTraceFromCaller": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get a stack trace from the arguments special variable using the",
          "     * <code>caller</code> property.",
          "     *",
          "     * This methods returns class/mixin and function names of each step",
          "     * in the call stack.",
          "     *",
          "     * Recursion is not supported.",
          "     *",
          "     * @param args {arguments} arguments variable.",
          "     * @return {String[]} Stack trace of caller of the function the arguments variable belongs to.",
          "     *     Each line in the array represents one call in the stack trace.",
          "     * @signature function(args)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a stack trace from the arguments special variable using the\n <code>caller</code> property.\n This methods returns class/mixin and function names of each step\n in the call stack.\n Recursion is not supported.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} arguments variable.",
            "paramName": "args",
            "description": " arguments variable.",
            "type": "arguments"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} Stack trace of caller of the function the arguments variable belongs to.\n     Each line in the array represents one call in the stack trace.",
            "type": "String[]",
            "description": "Stack trace of caller of the function the arguments variable belongs to.\n     Each line in the array represents one call in the stack trace."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(args)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4858
        },
        "end": {
          "line": 184,
          "column": 5,
          "index": 5709
        }
      },
      "type": "function",
      "params": [
        {
          "name": "args",
          "type": "arguments"
        }
      ],
      "returnType": {
        "type": "String[]"
      },
      "appearsIn": []
    },
    "getStackTraceFromError": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Try to get a stack trace from an Error object. Mozilla sets the field",
          "     * <code>stack</code> for Error objects thrown using <code>throw new Error()</code>.",
          "     * From this field it is possible to get a stack trace from the position",
          "     * the exception was thrown at.",
          "     *",
          "     * This will get the JavaScript file names and the line numbers of each call.",
          "     * The file names are converted into qooxdoo class names if possible (customizable",
          "     * via {@link #FILENAME_TO_CLASSNAME}).",
          "     *",
          "     * The stack trace can be custom formatted using {@link #FORMAT_STACKTRACE}.",
          "     *",
          "     * This works reliably in Gecko-based browsers. Later Opera versions and",
          "     * Chrome also provide a useful stack trace. For Safari, only the class or",
          "     * file name and line number where the error occurred are returned.",
          "     * IE 6/7/8/9 does not attach any stack information to error objects so an",
          "     * empty array is returned.",
          "     *",
          "     * @param error {Error} Error exception instance.",
          "     * @return {String[]} Stack trace of the exception. Each line in the array",
          "     *     represents one call in the stack trace.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Try to get a stack trace from an Error object. Mozilla sets the field\n <code>stack</code> for Error objects thrown using <code>throw new Error()</code>.\n From this field it is possible to get a stack trace from the position\n the exception was thrown at.\n This will get the JavaScript file names and the line numbers of each call.\n The file names are converted into qooxdoo class names if possible (customizable\n via {@link #FILENAME<em>TO</em>CLASSNAME}).\n The stack trace can be custom formatted using {@link #FORMAT_STACKTRACE}.\n This works reliably in Gecko-based browsers. Later Opera versions and\n Chrome also provide a useful stack trace. For Safari, only the class or\n file name and line number where the error occurred are returned.\n IE 6/7/8/9 does not attach any stack information to error objects so an\n empty array is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "error {Error} Error exception instance.",
            "paramName": "error",
            "description": " Error exception instance.",
            "type": "Error"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} Stack trace of the exception. Each line in the array\n     represents one call in the stack trace.",
            "type": "String[]",
            "description": "Stack trace of the exception. Each line in the array\n     represents one call in the stack trace."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 208,
          "column": 4,
          "index": 6856
        },
        "end": {
          "line": 311,
          "column": 5,
          "index": 10641
        }
      },
      "type": "function",
      "params": [
        {
          "name": "error",
          "type": "Error"
        }
      ],
      "returnType": {
        "type": "String[]"
      },
      "appearsIn": []
    },
    "__fileNameToClassName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts the URL of a JavaScript file to a class name using either a",
          "     * user-defined ({@link #FILENAME_TO_CLASSNAME}) or default",
          "     * ({@link #__fileNameToClassNameDefault}) converter",
          "     *",
          "     * @param fileName {String} URL of the JavaScript file",
          "     * @return {String} Result of the conversion",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts the URL of a JavaScript file to a class name using either a\n user-defined ({@link #FILENAME<em>TO</em>CLASSNAME}) or default\n ({@link #__fileNameToClassNameDefault}) converter</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fileName {String} URL of the JavaScript file",
            "paramName": "fileName",
            "description": " URL of the JavaScript file",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Result of the conversion",
            "type": "string",
            "description": "Result of the conversion"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 321,
          "column": 4,
          "index": 10976
        },
        "end": {
          "line": 334,
          "column": 5,
          "index": 11484
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fileName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "__fileNameToClassNameDefault": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts the URL of a JavaScript file to a class name if the file is",
          "     * named using the qooxdoo naming conventions.",
          "     *",
          "     * @param fileName {String} URL of the JavaScript file",
          "     * @return {String} class name of the file if conversion was possible.",
          "     * Otherwise the fileName is returned unmodified.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts the URL of a JavaScript file to a class name if the file is\n named using the qooxdoo naming conventions.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fileName {String} URL of the JavaScript file",
            "paramName": "fileName",
            "description": " URL of the JavaScript file",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} class name of the file if conversion was possible.\n Otherwise the fileName is returned unmodified.",
            "type": "string",
            "description": "class name of the file if conversion was possible.\n Otherwise the fileName is returned unmodified."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 344,
          "column": 4,
          "index": 11829
        },
        "end": {
          "line": 363,
          "column": 5,
          "index": 12436
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fileName",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "__formatStackTrace": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Runs the given stack trace array through the formatter function",
          "     * ({@link #FORMAT_STACKTRACE}) if available and returns it. Otherwise, the",
          "     * original array is returned",
          "     *",
          "     * @param trace {String[]} Stack trace information",
          "     * @return {String[]} Formatted stack trace info",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Runs the given stack trace array through the formatter function\n ({@link #FORMAT_STACKTRACE}) if available and returns it. Otherwise, the\n original array is returned</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "trace {String[]} Stack trace information",
            "paramName": "trace",
            "description": " Stack trace information",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} Formatted stack trace info",
            "type": "String[]",
            "description": "Formatted stack trace info"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 373,
          "column": 4,
          "index": 12759
        },
        "end": {
          "line": 386,
          "column": 5,
          "index": 13316
        }
      },
      "type": "function",
      "params": [
        {
          "name": "trace",
          "type": "String[]"
        }
      ],
      "returnType": {
        "type": "String[]"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}