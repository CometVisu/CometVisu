{
  "className": "qx.dev.Tokenizer",
  "packageName": "qx.dev",
  "name": "Tokenizer",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0,
        "index": 851
      },
      "end": {
        "line": 263,
        "column": 3,
        "index": 8434
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Simple JavaScript tokenizer used to print syntax highlighted\n JavaScript code.\n Based on Public Domain code by Christopher Diggins\n http://www.cdiggins.com/tokenizer.html</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "tokenizeJavaScript": {
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1317
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 6240
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tokenizes a string of JavaScript code.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "javaScriptText {String} String of JavaScript code to tokenize",
            "paramName": "javaScriptText",
            "description": " String of JavaScript code to tokenize",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} Array of tokens. A token is a map with the fields\n   <code>type</code> containing the token type and <code>value</code>,\n   which contains the string value of the token from the input string.",
            "type": "Map[]",
            "description": " Array of tokens. A token is a map with the fields\n   <code>type</code> containing the token type and <code>value</code>,\n   which contains the string value of the token from the input string."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "javaScriptToHtml": {
      "location": {
        "start": {
          "line": 209,
          "column": 4,
          "index": 6843
        },
        "end": {
          "line": 261,
          "column": 5,
          "index": 8424
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create a colored HTML string for a string of JavaScript code.\n The colored elements are placed in <code>span</code> elements\n with class names corresponding to the token types. The returned code\n should be placed into <code>pre</code> tags to preserve the\n indentation.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "javaScriptText {String} String of JavaScript code to tokenize",
            "paramName": "javaScriptText",
            "description": " String of JavaScript code to tokenize",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "forPreTag {Boolean ? false} Whatever the HTML should be generated\n   for a pre tag or not",
            "paramName": "forPreTag",
            "description": " Whatever the HTML should be generated\n   for a pre tag or not",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HTML fragment with the colored JavaScript code.",
            "type": "String",
            "description": " HTML fragment with the colored JavaScript code."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}