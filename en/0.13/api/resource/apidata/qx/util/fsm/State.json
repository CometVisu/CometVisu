{
  "version": 0.3,
  "lastModified": 1726088853117,
  "lastModifiedIso": "2024-09-11T21:07:33.117Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/util/fsm/State.js",
  "type": "class",
  "location": {
    "start": {
      "line": 22,
      "column": 0,
      "index": 530
    },
    "end": {
      "line": 887,
      "column": 3,
      "index": 28581
    }
  },
  "className": "qx.util.fsm.State",
  "jsdoc": {
    "raw": [
      "*",
      " * Create a new state which may be added to a finite state machine.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Create a new state which may be added to a finite state machine.</p>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "stateName"
      },
      {
        "name": "stateInfo"
      }
    ],
    "location": {
      "start": {
        "line": 145,
        "column": 2,
        "index": 5478
      },
      "end": {
        "line": 225,
        "column": 3,
        "index": 7648
      }
    }
  },
  "statics": {
    "_commonTransformAutoActions": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Common function for checking the value provided for",
          "     * auto actions.",
          "     *",
          "     * Auto-action property values passed to us look akin to:",
          "     *",
          "     *     <pre class='javascript'>",
          "     *     {",
          "     *       // The name of a function.",
          "     *       \"setEnabled\" :",
          "     *       [",
          "     *         {",
          "     *           // The parameter value(s), thus \"setEnabled(true);\"",
          "     *           \"parameters\"   : [ true ],",
          "     *",
          "     *           // The function would be called on each object:",
          "     *           //  this.getObject(\"obj1\").setEnabled(true);",
          "     *           //  this.getObject(\"obj2\").setEnabled(true);",
          "     *           \"objects\" : [ \"obj1\", \"obj2\" ]",
          "     *",
          "     *           // And similarly for each object in each specified group.",
          "     *           \"groups\"  : [ \"group1\", \"group2\" ],",
          "     *         }",
          "     *       ];",
          "     *",
          "     *       \"setTextColor\" :",
          "     *       [",
          "     *         {",
          "     *           \"parameters\" : [ \"blue\" ]",
          "     *           \"groups\"     : [ \"group3\", \"group4\" ],",
          "     *           \"objects\"    : [ \"obj3\", \"obj4\" ]",
          "     *         }",
          "     *       ];",
          "     *     };",
          "     *     </pre>",
          "     *",
          "     *",
          "     * @param actionType {String}",
          "     *   The name of the action being validated (for debug messages)",
          "     *",
          "     * @param value {Object}",
          "     *   The property value which is being validated",
          "     *",
          "     * @param context {Object}",
          "     *   The object to which the created function should be bound.",
          "     *",
          "     * @return {Function}",
          "     *   Function that implements calls to each of the requested automatic",
          "     *   actions",
          "     *",
          "     * @throws {Error} If the value has an invalid type.",
          "     * @throws {Error} If the function type is not an array.",
          "     * @throws {Error} If the function request parameter type is not valid.",
          "     * @throws {Error} If the function parameters are not valid.",
          "     * @throws {Error} If 'objects' list is invalid.",
          "     * @throws {Error} If a name in the 'objects' list is not valid.",
          "     * @throws {Error} If the 'groups' list is not valid.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Common function for checking the value provided for\n auto actions.\n Auto-action property values passed to us look akin to:\n     <pre class='javascript'>\n     {</p>\n<pre><code>   \"setEnabled\" :\n   [\n     {\n\n       \"parameters\"   : [ true ],\n\n\n\n       \"objects\" : [ \"obj1\", \"obj2\" ]\n\n       \"groups\"  : [ \"group1\", \"group2\" ],\n     }\n   ];\n   \"setTextColor\" :\n   [\n     {\n       \"parameters\" : [ \"blue\" ]\n       \"groups\"     : [ \"group3\", \"group4\" ],\n       \"objects\"    : [ \"obj3\", \"obj4\" ]\n     }\n   ];\n };\n &lt;/pre&gt;\n</code></pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "actionType {String}\n   The name of the action being validated (for debug messages)",
            "paramName": "actionType",
            "description": "\n   The name of the action being validated (for debug messages)",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {Object}\n   The property value which is being validated",
            "paramName": "value",
            "description": "\n   The property value which is being validated",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "context {Object}\n   The object to which the created function should be bound.",
            "paramName": "context",
            "description": "\n   The object to which the created function should be bound.",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function}\n   Function that implements calls to each of the requested automatic\n   actions",
            "type": "((...args: any[]) => any)",
            "description": "   Function that implements calls to each of the requested automatic\n   actions"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the value has an invalid type.",
            "type": "Error",
            "description": " If the value has an invalid type."
          },
          {
            "name": "@throws",
            "body": "{Error} If the function type is not an array.",
            "type": "Error",
            "description": " If the function type is not an array."
          },
          {
            "name": "@throws",
            "body": "{Error} If the function request parameter type is not valid.",
            "type": "Error",
            "description": " If the function request parameter type is not valid."
          },
          {
            "name": "@throws",
            "body": "{Error} If the function parameters are not valid.",
            "type": "Error",
            "description": " If the function parameters are not valid."
          },
          {
            "name": "@throws",
            "body": "{Error} If 'objects' list is invalid.",
            "type": "Error",
            "description": " If 'objects' list is invalid."
          },
          {
            "name": "@throws",
            "body": "{Error} If a name in the 'objects' list is not valid.",
            "type": "Error",
            "description": " If a name in the 'objects' list is not valid."
          },
          {
            "name": "@throws",
            "body": "{Error} If the 'groups' list is not valid.",
            "type": "Error",
            "description": " If the 'groups' list is not valid."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 286,
          "column": 4,
          "index": 9680
        },
        "end": {
          "line": 454,
          "column": 5,
          "index": 15458
        }
      },
      "type": "function",
      "params": [
        {
          "name": "actionType",
          "type": "string"
        },
        {
          "name": "value",
          "type": "Record<any, any>"
        },
        {
          "name": "context",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "((...args: any[]) => any)"
      },
      "appearsIn": []
    }
  },
  "properties": {
    "name": {
      "location": {
        "start": {
          "line": 463,
          "column": 4,
          "index": 15672
        },
        "end": {
          "line": 466,
          "column": 5,
          "index": 15742
        }
      },
      "json": {
        "transform": "__transformName",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The name of this state.  This name may be used as a Transition's",
          "     * nextState value, or an explicit next state in the 'events' handling",
          "     * list in a State.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of this state.  This name may be used as a Transition's\n nextState value, or an explicit next state in the 'events' handling\n list in a State.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "onentry": {
      "location": {
        "start": {
          "line": 474,
          "column": 4,
          "index": 16021
        },
        "end": {
          "line": 478,
          "column": 5,
          "index": 16124
        }
      },
      "json": {
        "transform": "__transformOnentry",
        "nullable": true,
        "init": "[[ ObjectMethod Function ]]"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The onentry function for this state.  This is documented in the",
          "     * constructor, and is typically provided through the constructor's",
          "     * stateInfo object, but it is also possible (but highly NOT recommended)",
          "     * to change this dynamically.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The onentry function for this state.  This is documented in the\n constructor, and is typically provided through the constructor's\n stateInfo object, but it is also possible (but highly NOT recommended)\n to change this dynamically.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "onexit": {
      "location": {
        "start": {
          "line": 486,
          "column": 4,
          "index": 16402
        },
        "end": {
          "line": 490,
          "column": 5,
          "index": 16503
        }
      },
      "json": {
        "transform": "__transformOnexit",
        "nullable": true,
        "init": "[[ ObjectMethod Function ]]"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The onexit function for this state.  This is documented in the",
          "     * constructor, and is typically provided through the constructor's",
          "     * stateInfo object, but it is also possible (but highly NOT recommended)",
          "     * to change this dynamically.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The onexit function for this state.  This is documented in the\n constructor, and is typically provided through the constructor's\n stateInfo object, but it is also possible (but highly NOT recommended)\n to change this dynamically.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "autoActionsBeforeOnentry": {
      "location": {
        "start": {
          "line": 520,
          "column": 4,
          "index": 17486
        },
        "end": {
          "line": 524,
          "column": 5,
          "index": 17623
        }
      },
      "json": {
        "transform": "__transformAutoActionsBeforeOnentry",
        "nullable": true,
        "init": "[[ ObjectMethod Function ]]"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Automatic actions to take prior to calling the state's onentry function.",
          "     *",
          "     * The value passed to setAutoActionsBeforeOnentry() should like something",
          "     * akin to:",
          "     *",
          "     *     <pre class='javascript'>",
          "     *     \"autoActionsBeforeOnentry\" :",
          "     *     {",
          "     *       // The name of a function.  This would become \"setEnabled(\"",
          "     *       \"enabled\" :",
          "     *       [",
          "     *         {",
          "     *           // The parameter value, thus \"setEnabled(true);\"",
          "     *           \"parameters\" : [ true ],",
          "     *",
          "     *           // The function would be called on each object:",
          "     *           //  this.getObject(\"obj1\").setEnabled(true);",
          "     *           //  this.getObject(\"obj2\").setEnabled(true);",
          "     *           \"objects\" : [ \"obj1\", \"obj2\" ]",
          "     *",
          "     *           // And similarly for each object in each specified group.",
          "     *           \"groups\"  : [ \"group1\", \"group2\" ],",
          "     *         }",
          "     *       ];",
          "     *     };",
          "     *     </pre>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Automatic actions to take prior to calling the state's onentry function.\n The value passed to setAutoActionsBeforeOnentry() should like something\n akin to:\n     <pre class='javascript'>\n     \"autoActionsBeforeOnentry\" :\n     {</p>\n<pre><code>   \"enabled\" :\n   [\n     {\n\n       \"parameters\" : [ true ],\n\n\n\n       \"objects\" : [ \"obj1\", \"obj2\" ]\n\n       \"groups\"  : [ \"group1\", \"group2\" ],\n     }\n   ];\n };\n &lt;/pre&gt;\n</code></pre>"
          }
        ]
      },
      "appearsIn": []
    },
    "autoActionsAfterOnentry": {
      "location": {
        "start": {
          "line": 555,
          "column": 4,
          "index": 18612
        },
        "end": {
          "line": 559,
          "column": 5,
          "index": 18747
        }
      },
      "json": {
        "transform": "__transformAutoActionsAfterOnentry",
        "nullable": true,
        "init": "[[ ObjectMethod Function ]]"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Automatic actions to take after return from the state's onentry",
          "     * function.",
          "     *",
          "     * The value passed to setAutoActionsAfterOnentry() should like something",
          "     * akin to:",
          "     *",
          "     *     <pre class='javascript'>",
          "     *     \"autoActionsAfterOnentry\" :",
          "     *     {",
          "     *       // The name of a function.  This would become \"setEnabled(\"",
          "     *       \"enabled\" :",
          "     *       [",
          "     *         {",
          "     *           // The parameter value, thus \"setEnabled(true);\"",
          "     *           \"parameters\" : [ true ],",
          "     *",
          "     *           // The function would be called on each object:",
          "     *           //  this.getObject(\"obj1\").setEnabled(true);",
          "     *           //  this.getObject(\"obj2\").setEnabled(true);",
          "     *           \"objects\" : [ \"obj1\", \"obj2\" ]",
          "     *",
          "     *           // And similarly for each object in each specified group.",
          "     *           \"groups\"  : [ \"group1\", \"group2\" ],",
          "     *         }",
          "     *       ];",
          "     *     };",
          "     *     </pre>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Automatic actions to take after return from the state's onentry\n function.\n The value passed to setAutoActionsAfterOnentry() should like something\n akin to:\n     <pre class='javascript'>\n     \"autoActionsAfterOnentry\" :\n     {</p>\n<pre><code>   \"enabled\" :\n   [\n     {\n\n       \"parameters\" : [ true ],\n\n\n\n       \"objects\" : [ \"obj1\", \"obj2\" ]\n\n       \"groups\"  : [ \"group1\", \"group2\" ],\n     }\n   ];\n };\n &lt;/pre&gt;\n</code></pre>"
          }
        ]
      },
      "appearsIn": []
    },
    "autoActionsBeforeOnexit": {
      "location": {
        "start": {
          "line": 589,
          "column": 4,
          "index": 19727
        },
        "end": {
          "line": 593,
          "column": 5,
          "index": 19862
        }
      },
      "json": {
        "transform": "__transformAutoActionsBeforeOnexit",
        "nullable": true,
        "init": "[[ ObjectMethod Function ]]"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Automatic actions to take prior to calling the state's onexit function.",
          "     *",
          "     * The value passed to setAutoActionsBeforeOnexit() should like something",
          "     * akin to:",
          "     *",
          "     *     <pre class='javascript'>",
          "     *     \"autoActionsBeforeOnexit\" :",
          "     *     {",
          "     *       // The name of a function.  This would become \"setEnabled(\"",
          "     *       \"enabled\" :",
          "     *       [",
          "     *         {",
          "     *           // The parameter value, thus \"setEnabled(true);\"",
          "     *           \"parameters\" : [ true ],",
          "     *",
          "     *           // The function would be called on each object:",
          "     *           //  this.getObject(\"obj1\").setEnabled(true);",
          "     *           //  this.getObject(\"obj2\").setEnabled(true);",
          "     *           \"objects\" : [ \"obj1\", \"obj2\" ]",
          "     *",
          "     *           // And similarly for each object in each specified group.",
          "     *           \"groups\"  : [ \"group1\", \"group2\" ],",
          "     *         }",
          "     *       ];",
          "     *     };",
          "     *     </pre>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Automatic actions to take prior to calling the state's onexit function.\n The value passed to setAutoActionsBeforeOnexit() should like something\n akin to:\n     <pre class='javascript'>\n     \"autoActionsBeforeOnexit\" :\n     {</p>\n<pre><code>   \"enabled\" :\n   [\n     {\n\n       \"parameters\" : [ true ],\n\n\n\n       \"objects\" : [ \"obj1\", \"obj2\" ]\n\n       \"groups\"  : [ \"group1\", \"group2\" ],\n     }\n   ];\n };\n &lt;/pre&gt;\n</code></pre>"
          }
        ]
      },
      "appearsIn": []
    },
    "autoActionsAfterOnexit": {
      "location": {
        "start": {
          "line": 624,
          "column": 4,
          "index": 20852
        },
        "end": {
          "line": 628,
          "column": 5,
          "index": 20985
        }
      },
      "json": {
        "transform": "__transformAutoActionsAfterOnexit",
        "nullable": true,
        "init": "[[ ObjectMethod Function ]]"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Automatic actions to take after returning from the state's onexit",
          "     * function.",
          "     *",
          "     * The value passed to setAutoActionsAfterOnexit() should like something",
          "     * akin to:",
          "     *",
          "     *     <pre class='javascript'>",
          "     *     \"autoActionsBeforeOnexit\" :",
          "     *     {",
          "     *       // The name of a function.  This would become \"setEnabled(\"",
          "     *       \"enabled\" :",
          "     *       [",
          "     *         {",
          "     *           // The parameter value, thus \"setEnabled(true);\"",
          "     *           \"parameters\" : [ true ],",
          "     *",
          "     *           // The function would be called on each object:",
          "     *           //  this.getObject(\"obj1\").setEnabled(true);",
          "     *           //  this.getObject(\"obj2\").setEnabled(true);",
          "     *           \"objects\" : [ \"obj1\", \"obj2\" ]",
          "     *",
          "     *           // And similarly for each object in each specified group.",
          "     *           \"groups\"  : [ \"group1\", \"group2\" ],",
          "     *         }",
          "     *       ];",
          "     *     };",
          "     *     </pre>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Automatic actions to take after returning from the state's onexit\n function.\n The value passed to setAutoActionsAfterOnexit() should like something\n akin to:\n     <pre class='javascript'>\n     \"autoActionsBeforeOnexit\" :\n     {</p>\n<pre><code>   \"enabled\" :\n   [\n     {\n\n       \"parameters\" : [ true ],\n\n\n\n       \"objects\" : [ \"obj1\", \"obj2\" ]\n\n       \"groups\"  : [ \"group1\", \"group2\" ],\n     }\n   ];\n };\n &lt;/pre&gt;\n</code></pre>"
          }
        ]
      },
      "appearsIn": []
    },
    "events": {
      "location": {
        "start": {
          "line": 636,
          "column": 4,
          "index": 21293
        },
        "end": {
          "line": 639,
          "column": 5,
          "index": 21367
        }
      },
      "json": {
        "transform": "__transformEvents",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The object representing handled and blocked events for this state.",
          "     * This is documented in the constructor, and is typically provided",
          "     * through the constructor's stateInfo object, but it is also possible",
          "     * (but highly NOT recommended) to change this dynamically.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The object representing handled and blocked events for this state.\n This is documented in the constructor, and is typically provided\n through the constructor's stateInfo object, but it is also possible\n (but highly NOT recommended) to change this dynamically.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__transformName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal transform method",
          "     *",
          "     * @param value {var} Value passed to setter",
          "     * @return {var} the final value",
          "     * @throws {Error} when an invalid value is detected",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value passed to setter",
            "paramName": "value",
            "description": " Value passed to setter",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the final value",
            "type": "var",
            "description": "the final value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when an invalid value is detected",
            "type": "Error",
            "description": " when an invalid value is detected"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 650,
          "column": 4,
          "index": 21590
        },
        "end": {
          "line": 657,
          "column": 5,
          "index": 21801
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__transformOnentry": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal transform method",
          "     *",
          "     * @param value {var} Current value",
          "     * @return {var} the final value",
          "     * @throws {Error} when an invalid value is detected",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the final value",
            "type": "var",
            "description": "the final value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when an invalid value is detected",
            "type": "Error",
            "description": " when an invalid value is detected"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 666,
          "column": 4,
          "index": 21998
        },
        "end": {
          "line": 680,
          "column": 5,
          "index": 22470
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__transformOnexit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal transform method",
          "     *",
          "     * @param value {var} Current value",
          "     * @return {var} the final value",
          "     * @throws {Error} when an invalid value is detected",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the final value",
            "type": "var",
            "description": "the final value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when an invalid value is detected",
            "type": "Error",
            "description": " when an invalid value is detected"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 689,
          "column": 4,
          "index": 22667
        },
        "end": {
          "line": 703,
          "column": 5,
          "index": 23136
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__transformEvents": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal transform method",
          "     *",
          "     * @param value {var} Current value",
          "     * @return {var} the final value",
          "     * @throws {Error} when an invalid value is detected",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the final value",
            "type": "var",
            "description": "the final value"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when an invalid value is detected",
            "type": "Error",
            "description": " when an invalid value is detected"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 712,
          "column": 4,
          "index": 23333
        },
        "end": {
          "line": 784,
          "column": 5,
          "index": 25878
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__transformAutoActionsBeforeOnentry": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal transform method",
          "     *",
          "     * @param value {var} Current value",
          "     * @return {var} the final value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the final value",
            "type": "var",
            "description": "the final value"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 792,
          "column": 4,
          "index": 26018
        },
        "end": {
          "line": 798,
          "column": 5,
          "index": 26224
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__transformAutoActionsAfterOnentry": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal transform method",
          "     *",
          "     * @param value {var} Current value",
          "     * @return {var} the final value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the final value",
            "type": "var",
            "description": "the final value"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 806,
          "column": 4,
          "index": 26364
        },
        "end": {
          "line": 812,
          "column": 5,
          "index": 26568
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__transformAutoActionsBeforeOnexit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal transform method",
          "     *",
          "     * @param value {var} Current value",
          "     * @return {var} the final value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the final value",
            "type": "var",
            "description": "the final value"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 820,
          "column": 4,
          "index": 26708
        },
        "end": {
          "line": 826,
          "column": 5,
          "index": 26912
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__transformAutoActionsAfterOnexit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal transform method",
          "     *",
          "     * @param value {var} Current value",
          "     * @return {var} the final value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal transform method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the final value",
            "type": "var",
            "description": "the final value"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 834,
          "column": 4,
          "index": 27052
        },
        "end": {
          "line": 840,
          "column": 5,
          "index": 27254
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "__bindIfFunction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * If given a function, bind it to a specified context.",
          "     *",
          "     * @param f {Function|var}",
          "     *   The (possibly) function to be bound to the specified context.",
          "     *",
          "     * @param context {Object}",
          "     *   The context to bind the function to.",
          "     *",
          "     * @return {Function}",
          "     *   If f was a function, the return value is f wrapped such that it will",
          "     *   be called in the specified context. Otherwise, f is returned",
          "     *   unaltered.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>If given a function, bind it to a specified context.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "f {Function|var}\n   The (possibly) function to be bound to the specified context.",
            "paramName": "f",
            "description": "\n   The (possibly) function to be bound to the specified context.",
            "type": [
              "Function",
              "var"
            ]
          },
          {
            "name": "@param",
            "body": "context {Object}\n   The context to bind the function to.",
            "paramName": "context",
            "description": "\n   The context to bind the function to.",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function}\n   If f was a function, the return value is f wrapped such that it will\n   be called in the specified context. Otherwise, f is returned\n   unaltered.",
            "type": "((...args: any[]) => any)",
            "description": "   If f was a function, the return value is f wrapped such that it will\n   be called in the specified context. Otherwise, f is returned\n   unaltered."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 856,
          "column": 4,
          "index": 27731
        },
        "end": {
          "line": 864,
          "column": 5,
          "index": 27969
        }
      },
      "type": "function",
      "params": [
        {
          "name": "f",
          "type": [
            "Function",
            "var"
          ]
        },
        {
          "name": "context",
          "type": "Record<any, any>"
        }
      ],
      "returnType": {
        "type": "((...args: any[]) => any)"
      },
      "appearsIn": []
    },
    "addTransition": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add a transition to a state",
          "     *",
          "     *",
          "     * @param trans {qx.util.fsm.Transition}",
          "     *   An object of class qx.util.fsm.Transition representing a transition",
          "     *   which is to be a part of this state.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a transition to a state</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "trans {qx.util.fsm.Transition}\n   An object of class qx.util.fsm.Transition representing a transition\n   which is to be a part of this state.",
            "paramName": "trans",
            "description": "\n   An object of class qx.util.fsm.Transition representing a transition\n   which is to be a part of this state.",
            "type": "qx.util.fsm.Transition"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 875,
          "column": 4,
          "index": 28216
        },
        "end": {
          "line": 885,
          "column": 5,
          "index": 28573
        }
      },
      "type": "function",
      "params": [
        {
          "name": "trans",
          "type": "qx.util.fsm.Transition"
        }
      ],
      "appearsIn": []
    }
  }
}