{
  "version": 0.3,
  "lastModified": 1735383688417,
  "lastModifiedIso": "2024-12-28T11:01:28.417Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/util/StringBuilder.js",
  "type": "class",
  "location": {
    "start": {
      "line": 34,
      "column": 0,
      "index": 971
    },
    "end": {
      "line": 125,
      "column": 3,
      "index": 3291
    }
  },
  "className": "qx.util.StringBuilder",
  "jsdoc": {
    "raw": [
      "*",
      " * A string builder class",
      " *",
      " * += operator is faster in Firefox and Opera.",
      " * Array push/join is faster in Internet Explorer",
      " *",
      " * Even with this wrapper, which costs some time, this is",
      " * faster in Firefox than the alternative Array concat in",
      " * all browsers (which is in relation to IE's performance issues",
      " * only marginal). The IE performance loss caused by this",
      " * wrapper is not relevant.",
      " *",
      " * So this class seems to be the best compromise to handle",
      " * string concatenation.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A string builder class\n += operator is faster in Firefox and Opera.\n Array push/join is faster in Internet Explorer\n Even with this wrapper, which costs some time, this is\n faster in Firefox than the alternative Array concat in\n all browsers (which is in relation to IE's performance issues\n only marginal). The IE performance loss caused by this\n wrapper is not relevant.\n So this class seems to be the best compromise to handle\n string concatenation.</p>"
      }
    ]
  },
  "superClass": "qx.type.BaseArray",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "length_or_items"
      }
    ],
    "location": {
      "start": {
        "line": 59,
        "column": 2,
        "index": 1904
      },
      "end": {
        "line": 61,
        "column": 3,
        "index": 1982
      }
    }
  },
  "members": {
    "clear": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all content",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all content</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2235
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 2273
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "get": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the concatted strings.",
          "     *",
          "     * @return {String} Concatted strings",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the concatted strings.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Concatted strings",
            "type": "string",
            "description": "Concatted strings"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2383
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2424
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds new strings. Supports multiple arguments.",
          "     *",
          "     * @signature function(varargs)",
          "     * @param varargs {String} The separate strings to add",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds new strings. Supports multiple arguments.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(varargs)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {String} The separate strings to add",
            "paramName": "varargs",
            "description": " The separate strings to add",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2603
        },
        "end": {
          "line": 93,
          "column": 13,
          "index": 2612
        }
      },
      "appearsIn": []
    },
    "isEmpty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the string builder is empty",
          "     *",
          "     * @return {Boolean} <code>true</code> when the builder is empty",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the string builder is empty</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the builder is empty",
            "type": "boolean",
            "description": "<code>true</code> when the builder is empty"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2754
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 2803
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "size": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the size of the strings",
          "     *",
          "     * @return {Integer} The string length",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the size of the strings</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The string length",
            "type": "Integer",
            "description": "The string length"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 2915
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 2964
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}