{
  "version": 0.3,
  "lastModified": 1731947914971,
  "lastModifiedIso": "2024-11-18T16:38:34.971Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/util/ColorUtil.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 28,
      "column": 0,
      "index": 680
    },
    "end": {
      "line": 928,
      "column": 3,
      "index": 26673
    }
  },
  "className": "qx.util.ColorUtil",
  "jsdoc": {
    "raw": [
      "*",
      " * Methods to convert colors between different color spaces.",
      " *",
      " * @ignore(qx.theme.*)",
      " * @ignore(qx.Class)",
      " * @ignore(qx.Class.*)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Methods to convert colors between different color spaces.</p>"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "qx.theme.*"
      },
      {
        "name": "@ignore",
        "body": "qx.Class"
      },
      {
        "name": "@ignore",
        "body": "qx.Class.*"
      }
    ]
  },
  "statics": {
    "REGEXP": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Regular expressions for color strings",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Regular expressions for color strings</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 33,
          "column": 4,
          "index": 801
        },
        "end": {
          "line": 41,
          "column": 5,
          "index": 1413
        }
      },
      "appearsIn": []
    },
    "SYSTEM": {
      "jsdoc": {
        "raw": [
          "*",
          "     * CSS3 system color names.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>CSS3 system color names.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1468
        },
        "end": {
          "line": 75,
          "column": 5,
          "index": 2197
        }
      },
      "appearsIn": []
    },
    "NAMED": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Named colors, only the 16 basic colors plus the following ones:",
          "     * transparent, grey, magenta, orange and brown",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Named colors, only the 16 basic colors plus the following ones:\n transparent, grey, magenta, orange and brown</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2343
        },
        "end": {
          "line": 104,
          "column": 5,
          "index": 2961
        }
      },
      "appearsIn": []
    },
    "isNamedColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the incoming value is a named color.",
          "     *",
          "     * @param value {String} the color value to test",
          "     * @return {Boolean} true if the color is a named color",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the incoming value is a named color.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} the color value to test",
            "paramName": "value",
            "description": " the color value to test",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the color is a named color",
            "type": "boolean",
            "description": "true if the color is a named color"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 3156
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3229
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isSystemColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the incoming value is a system color.",
          "     *",
          "     * @param value {String} the color value to test",
          "     * @return {Boolean} true if the color is a system color",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the incoming value is a system color.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} the color value to test",
            "paramName": "value",
            "description": " the color value to test",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the color is a system color",
            "type": "boolean",
            "description": "true if the color is a system color"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3426
        },
        "end": {
          "line": 124,
          "column": 5,
          "index": 3501
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "supportsThemes": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the color theme manager is loaded. Generally",
          "     * part of the GUI of qooxdoo.",
          "     *",
          "     * @return {Boolean} <code>true</code> when color theme support is ready.",
          "     *"
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the color theme manager is loaded. Generally\n part of the GUI of qooxdoo.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when color theme support is ready.",
            "type": "boolean",
            "description": "<code>true</code> when color theme support is ready."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3705
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 3840
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isThemedColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the incoming value is a themed color.",
          "     *",
          "     * @param value {String} the color value to test",
          "     * @return {Boolean} true if the color is a themed color",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the incoming value is a themed color.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} the color value to test",
            "paramName": "value",
            "description": " the color value to test",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the color is a themed color",
            "type": "boolean",
            "description": "true if the color is a themed color"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 145,
          "column": 4,
          "index": 4037
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 4298
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "stringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Try to convert an incoming string to an RGBA array.",
          "     * Supports themed, named and system colors, but also RGBA strings,",
          "     * hex[3468] values.",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Array} returns an array of red, green, blue and optional alpha on a successful transformation",
          "     * @throws {Error} if the string could not be parsed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Try to convert an incoming string to an RGBA array.\n Supports themed, named and system colors, but also RGBA strings,\n hex[3468] values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} returns an array of red, green, blue and optional alpha on a successful transformation",
            "type": "Array<any>",
            "description": "returns an array of red, green, blue and optional alpha on a successful transformation"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the string could not be parsed",
            "type": "Error",
            "description": " if the string could not be parsed"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 4689
        },
        "end": {
          "line": 170,
          "column": 5,
          "index": 4894
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "cssStringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Try to convert an incoming string to an RGB array with optional alpha.",
          "     * Support named colors, RGB strings, RGBA strings, hex[3468] values.",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Array} returns an array of red, green, blue on a successful transformation",
          "     * @throws {Error} if the string could not be parsed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Try to convert an incoming string to an RGB array with optional alpha.\n Support named colors, RGB strings, RGBA strings, hex[3468] values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} returns an array of red, green, blue on a successful transformation",
            "type": "Array<any>",
            "description": "returns an array of red, green, blue on a successful transformation"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the string could not be parsed",
            "type": "Error",
            "description": " if the string could not be parsed"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 5262
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 6109
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "stringToRgbString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Try to convert an incoming string to an RGB string, which can be used",
          "     * for all color properties.",
          "     * Supports themed, named and system colors, but also RGB strings,",
          "     * hexShort and hexLong values.",
          "     *",
          "     * @param str {String} any string",
          "     * @return {String} a RGB string",
          "     * @throws {Error} if the string could not be parsed",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Try to convert an incoming string to an RGB string, which can be used\n for all color properties.\n Supports themed, named and system colors, but also RGB strings,\n hexShort and hexLong values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} a RGB string",
            "type": "string",
            "description": "a RGB string"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the string could not be parsed",
            "type": "Error",
            "description": " if the string could not be parsed"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 215,
          "column": 4,
          "index": 6488
        },
        "end": {
          "line": 217,
          "column": 5,
          "index": 6575
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "rgbToRgbString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a RGB array to an RGB string",
          "     *",
          "     * @param rgb {Array} an array with red, green and blue values and optionally",
          "     * an alpha value",
          "     * @return {String} an RGB string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a RGB array to an RGB string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rgb {Array} an array with red, green and blue values and optionally\n an alpha value",
            "paramName": "rgb",
            "description": " an array with red, green and blue values and optionally\n an alpha value",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} an RGB string",
            "type": "string",
            "description": "an RGB string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 226,
          "column": 4,
          "index": 6792
        },
        "end": {
          "line": 238,
          "column": 5,
          "index": 7051
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rgb",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "rgbToHexString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a RGB array to a hex[68] string",
          "     *",
          "     * @param rgb {Array} an array with red, green, blue and optional alpha",
          "     * @return {String} a hex[68] string (#xxxxxx)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a RGB array to a hex[68] string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rgb {Array} an array with red, green, blue and optional alpha",
            "paramName": "rgb",
            "description": " an array with red, green, blue and optional alpha",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} a hex[68] string (#xxxxxx)",
            "type": "string",
            "description": "a hex[68] string (#xxxxxx)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 246,
          "column": 4,
          "index": 7256
        },
        "end": {
          "line": 261,
          "column": 5,
          "index": 7743
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rgb",
          "type": "Array<any>"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "isValidPropertyValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects if a string is a valid qooxdoo color",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Boolean} true when the incoming value is a valid qooxdoo color",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if a string is a valid qooxdoo color</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the incoming value is a valid qooxdoo color",
            "type": "boolean",
            "description": "true when the incoming value is a valid qooxdoo color"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 269,
          "column": 4,
          "index": 7942
        },
        "end": {
          "line": 278,
          "column": 5,
          "index": 8207
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isCssString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects if a string is a valid CSS color string",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Boolean} true when the incoming value is a valid CSS color string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if a string is a valid CSS color string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the incoming value is a valid CSS color string",
            "type": "boolean",
            "description": "true when the incoming value is a valid CSS color string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 286,
          "column": 4,
          "index": 8412
        },
        "end": {
          "line": 295,
          "column": 5,
          "index": 8668
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "ishexShortString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects if a string is a valid hexShort string",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Boolean} true when the incoming value is a valid hexShort string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if a string is a valid hexShort string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the incoming value is a valid hexShort string",
            "type": "boolean",
            "description": "true when the incoming value is a valid hexShort string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 303,
          "column": 4,
          "index": 8871
        },
        "end": {
          "line": 305,
          "column": 5,
          "index": 8945
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isHex3String": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects if a string is a valid hex3 string",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Boolean} true when the incoming value is a valid hex3 string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if a string is a valid hex3 string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the incoming value is a valid hex3 string",
            "type": "boolean",
            "description": "true when the incoming value is a valid hex3 string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 312,
          "column": 4,
          "index": 9139
        },
        "end": {
          "line": 314,
          "column": 5,
          "index": 9205
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isHex6String": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects if a string is a valid hex6 string",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Boolean} true when the incoming value is a valid hex6 string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if a string is a valid hex6 string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the incoming value is a valid hex6 string",
            "type": "boolean",
            "description": "true when the incoming value is a valid hex6 string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 322,
          "column": 4,
          "index": 9400
        },
        "end": {
          "line": 324,
          "column": 5,
          "index": 9466
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "ishexLongString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects if a string is a valid hex6/8 string",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Boolean} true when the incoming value is a valid hex8 string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if a string is a valid hex6/8 string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the incoming value is a valid hex8 string",
            "type": "boolean",
            "description": "true when the incoming value is a valid hex8 string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 332,
          "column": 4,
          "index": 9663
        },
        "end": {
          "line": 334,
          "column": 5,
          "index": 9735
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isRgbString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects if a string is a valid RGB string",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Boolean} true when the incoming value is a valid RGB string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if a string is a valid RGB string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the incoming value is a valid RGB string",
            "type": "boolean",
            "description": "true when the incoming value is a valid RGB string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 342,
          "column": 4,
          "index": 9928
        },
        "end": {
          "line": 344,
          "column": 5,
          "index": 9992
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isRgbaString": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects if a string is a valid RGBA string",
          "     *",
          "     * @param str {String} any string",
          "     * @return {Boolean} true when the incoming value is a valid RGBA string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects if a string is a valid RGBA string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the incoming value is a valid RGBA string",
            "type": "boolean",
            "description": "true when the incoming value is a valid RGBA string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 352,
          "column": 4,
          "index": 10187
        },
        "end": {
          "line": 354,
          "column": 5,
          "index": 10253
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__rgbStringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a regexp object match of a rgb string to an RGBA array.",
          "     *",
          "     * @return {Array} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a regexp object match of a rgb string to an RGBA array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue",
            "type": "Array<any>",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 361,
          "column": 4,
          "index": 10409
        },
        "end": {
          "line": 367,
          "column": 5,
          "index": 10595
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__rgbaStringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a regexp object match of a rgba string to an RGB array.",
          "     *",
          "     * @return {Array} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a regexp object match of a rgba string to an RGB array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue",
            "type": "Array<any>",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 374,
          "column": 4,
          "index": 10751
        },
        "end": {
          "line": 387,
          "column": 5,
          "index": 11220
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__hexShortStringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a regexp object match of a hexShort string to an RGB array.",
          "     *",
          "     * @return {Array} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a regexp object match of a hexShort string to an RGB array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue",
            "type": "Array<any>",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 394,
          "column": 4,
          "index": 11380
        },
        "end": {
          "line": 401,
          "column": 5,
          "index": 11717
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__hex3StringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a regexp object match of a hex3 string to an RGB array.",
          "     *",
          "     * @return {Array} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a regexp object match of a hex3 string to an RGB array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue",
            "type": "Array<any>",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 408,
          "column": 4,
          "index": 11873
        },
        "end": {
          "line": 414,
          "column": 5,
          "index": 12075
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__hex6StringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a regexp object match of a hex6 string to an RGB array.",
          "     *",
          "     * @return {Array} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a regexp object match of a hex6 string to an RGB array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue",
            "type": "Array<any>",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 421,
          "column": 4,
          "index": 12231
        },
        "end": {
          "line": 427,
          "column": 5,
          "index": 12511
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "__hexLongStringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a regexp object match of a hexLong string to an RGB array.",
          "     *",
          "     * @return {Array} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a regexp object match of a hexLong string to an RGB array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue",
            "type": "Array<any>",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 434,
          "column": 4,
          "index": 12670
        },
        "end": {
          "line": 441,
          "column": 5,
          "index": 12993
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "hex3StringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a hex3 string to an RGB array",
          "     *",
          "     * @param value {String} a hex3 (#xxx) string",
          "     * @return {Array} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a hex3 string to an RGB array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} a hex3 (#xxx) string",
            "paramName": "value",
            "description": " a hex3 (#xxx) string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue",
            "type": "Array<any>",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 449,
          "column": 4,
          "index": 13173
        },
        "end": {
          "line": 455,
          "column": 5,
          "index": 13351
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "hex3StringToHex6String": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a hex3 (#xxx) string to a hex6 (#xxxxxx) string.",
          "     *",
          "     * @param value {String} a hex3 (#xxx) string",
          "     * @return {String} The hex6 (#xxxxxx) string or the passed value when the",
          "     *   passed value is not an hex3 (#xxx) value.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a hex3 (#xxx) string to a hex6 (#xxxxxx) string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} a hex3 (#xxx) string",
            "paramName": "value",
            "description": " a hex3 (#xxx) string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The hex6 (#xxxxxx) string or the passed value when the\n   passed value is not an hex3 (#xxx) value.",
            "type": "string",
            "description": "The hex6 (#xxxxxx) string or the passed value when the\n   passed value is not an hex3 (#xxx) value."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 464,
          "column": 4,
          "index": 13626
        },
        "end": {
          "line": 469,
          "column": 5,
          "index": 13794
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "hex6StringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a hex6 string to an RGB array",
          "     *",
          "     * @param value {String} a hex6 (#xxxxxx) string",
          "     * @return {Array} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a hex6 string to an RGB array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} a hex6 (#xxxxxx) string",
            "paramName": "value",
            "description": " a hex6 (#xxxxxx) string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue",
            "type": "Array<any>",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 477,
          "column": 4,
          "index": 13977
        },
        "end": {
          "line": 483,
          "column": 5,
          "index": 14155
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "hexStringToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a hex string to an RGB array",
          "     *",
          "     * @param value {String} a hexShort (#rgb/#rgba) or hexLong (#rrggbb/#rrggbbaa) string",
          "     * @return {Array} an array with red, green, blue and alpha",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a hex string to an RGB array</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} a hexShort (#rgb/#rgba) or hexLong (#rrggbb/#rrggbbaa) string",
            "paramName": "value",
            "description": " a hexShort (#rgb/#rgba) or hexLong (#rrggbb/#rrggbbaa) string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with red, green, blue and alpha",
            "type": "Array<any>",
            "description": "an array with red, green, blue and alpha"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 491,
          "column": 4,
          "index": 14385
        },
        "end": {
          "line": 501,
          "column": 5,
          "index": 14668
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "rgbToHsb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert RGB colors to HSB/HSV",
          "     *",
          "     * @param rgb {Number[]} red, blue and green as array",
          "     * @return {Array} an array with hue, saturation and brightness/value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert RGB colors to HSB/HSV</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rgb {Number[]} red, blue and green as array",
            "paramName": "rgb",
            "description": " red, blue and green as array",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with hue, saturation and brightness/value",
            "type": "Array<any>",
            "description": "an array with hue, saturation and brightness/value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 509,
          "column": 4,
          "index": 14867
        },
        "end": {
          "line": 563,
          "column": 5,
          "index": 15988
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rgb",
          "type": "Number[]"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "hsbToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert HSB/HSV colors to RGB",
          "     *",
          "     * @param hsb {Number[]} an array with hue, saturation and brightness/value",
          "     * @return {Integer[]} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert HSB/HSV colors to RGB</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hsb {Number[]} an array with hue, saturation and brightness/value",
            "paramName": "hsb",
            "description": " an array with hue, saturation and brightness/value",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer[]} an array with red, green, blue",
            "type": "Integer[]",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 571,
          "column": 4,
          "index": 16193
        },
        "end": {
          "line": 646,
          "column": 5,
          "index": 17719
        }
      },
      "type": "function",
      "params": [
        {
          "name": "hsb",
          "type": "Number[]"
        }
      ],
      "returnType": {
        "type": "Integer[]"
      },
      "appearsIn": []
    },
    "rgbToHsl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert RGB colors to HSL",
          "     *",
          "     * @param rgb {Number[]} red, blue and green as array",
          "     * @return {Array} an array with hue, saturation and lightness",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert RGB colors to HSL</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rgb {Number[]} red, blue and green as array",
            "paramName": "rgb",
            "description": " red, blue and green as array",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} an array with hue, saturation and lightness",
            "type": "Array<any>",
            "description": "an array with hue, saturation and lightness"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 654,
          "column": 4,
          "index": 17907
        },
        "end": {
          "line": 671,
          "column": 5,
          "index": 18498
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rgb",
          "type": "Number[]"
        }
      ],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "hslToRgb": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert HSL colors to RGB",
          "     *",
          "     * @param hsl {Number[]} an array with hue, saturation and lightness",
          "     * @return {Integer[]} an array with red, green, blue",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert HSL colors to RGB</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "hsl {Number[]} an array with hue, saturation and lightness",
            "paramName": "hsl",
            "description": " an array with hue, saturation and lightness",
            "type": "Number[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer[]} an array with red, green, blue",
            "type": "Integer[]",
            "description": "an array with red, green, blue"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 678,
          "column": 4,
          "index": 18691
        },
        "end": {
          "line": 692,
          "column": 5,
          "index": 19196
        }
      },
      "type": "function",
      "params": [
        {
          "name": "hsl",
          "type": "Number[]"
        }
      ],
      "returnType": {
        "type": "Integer[]"
      },
      "appearsIn": []
    },
    "randomColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates a random color.",
          "     *",
          "     * @return {String} a valid qooxdoo/CSS rgb color string.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a random color.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} a valid qooxdoo/CSS rgb color string.",
            "type": "string",
            "description": "a valid qooxdoo/CSS rgb color string."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 698,
          "column": 4,
          "index": 19318
        },
        "end": {
          "line": 704,
          "column": 5,
          "index": 19526
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "__tuner": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Tune a color string according to the tuneMap",
          "     *",
          "     * @param color {String} a valid qooxdoo/CSS rgb color string",
          "     * @param scaleMap {Map}  as described above",
          "     * @param tuner {Function}  function",
          "     * @param hue_tuner {Function}  function",
          "     * @return {String} a valid CSS rgb color string.*",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tune a color string according to the tuneMap</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "color {String} a valid qooxdoo/CSS rgb color string",
            "paramName": "color",
            "description": " a valid qooxdoo/CSS rgb color string",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "scaleMap {Map}  as described above",
            "paramName": "scaleMap",
            "description": "  as described above",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "tuner {Function}  function",
            "paramName": "tuner",
            "description": "  function",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "hue_tuner {Function}  function",
            "paramName": "hue_tuner",
            "description": "  function",
            "type": "((...args: any[]) => any)"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} a valid CSS rgb color string.*",
            "type": "string",
            "description": "a valid CSS rgb color string.*"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 715,
          "column": 4,
          "index": 19864
        },
        "end": {
          "line": 788,
          "column": 5,
          "index": 22087
        }
      },
      "type": "function",
      "params": [
        {
          "name": "color",
          "type": "string"
        },
        {
          "name": "tuneMap"
        },
        {
          "name": "tuner",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "hue_tuner",
          "type": "((...args: any[]) => any)"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "scale": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scale",
          "     *",
          "     * Scale the given properties of the input color according to the",
          "     * configuration given in the `scaleMap`. Each key argument must point to a",
          "     * number between -100% and 100% (inclusive). This indicates how far the",
          "     * corresponding property should be moved from its original position",
          "     * towards the maximum (if the argument is positive) or the minimum (if the",
          "     * argument is negative). This means that, for example, `lightness: \"50%\"`",
          "     * will make all colors 50% closer to maximum lightness without making them",
          "     * fully white.",
          "     *",
          "     * Supported keys are:",
          "     * `red`, `green`, `blue`, `alpha`, `saturation`,",
          "     * `brightness`, `value`, `lightness`.",
          "     *",
          "     * @param color {String}  a valid qooxdoo/CSS rgb color string",
          "     * @param scaleMap {Map}  as described above",
          "     * @return {String} a valid CSS rgb color string.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scale\n Scale the given properties of the input color according to the\n configuration given in the <code>scaleMap</code>. Each key argument must point to a\n number between -100% and 100% (inclusive). This indicates how far the\n corresponding property should be moved from its original position\n towards the maximum (if the argument is positive) or the minimum (if the\n argument is negative). This means that, for example, <code>lightness: \"50%\"</code>\n will make all colors 50% closer to maximum lightness without making them\n fully white.\n Supported keys are:\n <code>red</code>, <code>green</code>, <code>blue</code>, <code>alpha</code>, <code>saturation</code>,\n <code>brightness</code>, <code>value</code>, <code>lightness</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "color {String}  a valid qooxdoo/CSS rgb color string",
            "paramName": "color",
            "description": "  a valid qooxdoo/CSS rgb color string",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "scaleMap {Map}  as described above",
            "paramName": "scaleMap",
            "description": "  as described above",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} a valid CSS rgb color string.",
            "type": "string",
            "description": "a valid CSS rgb color string."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 810,
          "column": 4,
          "index": 22997
        },
        "end": {
          "line": 827,
          "column": 5,
          "index": 23457
        }
      },
      "type": "function",
      "params": [
        {
          "name": "color",
          "type": "string"
        },
        {
          "name": "scaleMap",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "adjust": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adjust",
          "     *",
          "     * Increases or decreases one or more properties of the input color",
          "     * by fixed amounts according to the configuration given in the",
          "     * `adjustMap`. The value of the corresponding key is added to the",
          "     * original value and the final result is adjusted to stay within legal",
          "     * bounds. Hue values can go full circle.a1",
          "     *",
          "     * Supported keys are:",
          "     * `red`, `green`, `blue`, `alpha`, `hue`, `saturation`, `brightness`,",
          "     * `lightness`",
          "     *",
          "     * @param color {String} a valid qooxdoo/CSS rgb color string",
          "     * @param scaleMap {Map} as described above",
          "     * @return {String} a valid CSS rgb color string.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adjust\n Increases or decreases one or more properties of the input color\n by fixed amounts according to the configuration given in the\n <code>adjustMap</code>. The value of the corresponding key is added to the\n original value and the final result is adjusted to stay within legal\n bounds. Hue values can go full circle.a1\n Supported keys are:\n <code>red</code>, <code>green</code>, <code>blue</code>, <code>alpha</code>, <code>hue</code>, <code>saturation</code>, <code>brightness</code>,\n <code>lightness</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "color {String} a valid qooxdoo/CSS rgb color string",
            "paramName": "color",
            "description": " a valid qooxdoo/CSS rgb color string",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "scaleMap {Map} as described above",
            "paramName": "scaleMap",
            "description": " as described above",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} a valid CSS rgb color string.",
            "type": "string",
            "description": "a valid CSS rgb color string."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 845,
          "column": 4,
          "index": 24138
        },
        "end": {
          "line": 870,
          "column": 5,
          "index": 24703
        }
      },
      "type": "function",
      "params": [
        {
          "name": "color",
          "type": "string"
        },
        {
          "name": "adjustMap"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "luminance": {
      "jsdoc": {
        "raw": [
          "*",
          "     * RgbToLuminance",
          "     *",
          "     * Calculate the [luminance](https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests) of the given rgb color.",
          "     *",
          "     * @param color {String} a valid qooxdoo/CSS rgb color string",
          "     * @return {Number} luminance",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>RgbToLuminance\n Calculate the <a href=\"https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\">luminance</a> of the given rgb color.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "color {String} a valid qooxdoo/CSS rgb color string",
            "paramName": "color",
            "description": " a valid qooxdoo/CSS rgb color string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} luminance",
            "type": "number",
            "description": "luminance"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 879,
          "column": 4,
          "index": 24973
        },
        "end": {
          "line": 886,
          "column": 5,
          "index": 25251
        }
      },
      "type": "function",
      "params": [
        {
          "name": "color",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "contrast": {
      "jsdoc": {
        "raw": [
          "*",
          "     * contrast",
          "     *",
          "     * Calculate the contrast of two given rgb colors.",
          "     *",
          "     * @param back {String} a valid qooxdoo/CSS rgb color string",
          "     * @param front {String} a valid qooxdoo/CSS rgb color string",
          "     * @return {Number} contrast",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>contrast\n Calculate the contrast of two given rgb colors.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "back {String} a valid qooxdoo/CSS rgb color string",
            "paramName": "back",
            "description": " a valid qooxdoo/CSS rgb color string",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "front {String} a valid qooxdoo/CSS rgb color string",
            "paramName": "front",
            "description": " a valid qooxdoo/CSS rgb color string",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} contrast",
            "type": "number",
            "description": "contrast"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 896,
          "column": 4,
          "index": 25522
        },
        "end": {
          "line": 900,
          "column": 5,
          "index": 25689
        }
      },
      "type": "function",
      "params": [
        {
          "name": "back",
          "type": "string"
        },
        {
          "name": "front",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "chooseContrastingColor": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Picks a contrasting color",
          "     *",
          "     * @param rgb {Number[]|String} the color, either as a string or as an RGB array of 3 numbers",
          "     * @param threshold {Number?} the threshold between light and dark outputs, where the range is 0-255, defaults to 128",
          "     * @param dark {String?} the colour to use for \"dark\", defaults to black",
          "     * @param light {String?} the colour to use for \"light\", defaults to white",
          "     * @return {String} colour string",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Picks a contrasting color</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rgb {Number[]|String} the color, either as a string or as an RGB array of 3 numbers",
            "paramName": "rgb",
            "description": " the color, either as a string or as an RGB array of 3 numbers",
            "type": [
              {
                "type": "Number",
                "dimensions": 2
              },
              "String"
            ]
          },
          {
            "name": "@param",
            "body": "threshold {Number?} the threshold between light and dark outputs, where the range is 0-255, defaults to 128",
            "paramName": "threshold",
            "description": " the threshold between light and dark outputs, where the range is 0-255, defaults to 128",
            "optional": true,
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "dark {String?} the colour to use for \"dark\", defaults to black",
            "paramName": "dark",
            "description": " the colour to use for \"dark\", defaults to black",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "light {String?} the colour to use for \"light\", defaults to white",
            "paramName": "light",
            "description": " the colour to use for \"light\", defaults to white",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} colour string",
            "type": "string",
            "description": "colour string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 911,
          "column": 4,
          "index": 26166
        },
        "end": {
          "line": 926,
          "column": 5,
          "index": 26665
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rgb",
          "type": [
            {
              "type": "Number",
              "dimensions": 2
            },
            "String"
          ]
        },
        {
          "name": "threshold",
          "type": "Number",
          "optional": true
        },
        {
          "name": "dark",
          "type": "String",
          "optional": true
        },
        {
          "name": "light",
          "type": "String",
          "optional": true
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}