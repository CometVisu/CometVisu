{
  "version": 0.3,
  "lastModified": 1731947916587,
  "lastModifiedIso": "2024-11-18T16:38:36.587Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/util/format/NumberFormat.js",
  "type": "class",
  "location": {
    "start": {
      "line": 25,
      "column": 0,
      "index": 581
    },
    "end": {
      "line": 311,
      "column": 3,
      "index": 8400
    }
  },
  "className": "qx.util.format.NumberFormat",
  "jsdoc": {
    "raw": [
      "*",
      " * A formatter and parser for numbers.",
      " *",
      " * NOTE: Instances of this class must be disposed of after use",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A formatter and parser for numbers.\n NOTE: Instances of this class must be disposed of after use</p>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.util.format.IFormat",
    "qx.core.IDisposable"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "locale"
      }
    ],
    "location": {
      "start": {
        "line": 39,
        "column": 2,
        "index": 1028
      },
      "end": {
        "line": 60,
        "column": 3,
        "index": 1620
      }
    }
  },
  "properties": {
    "minimumIntegerDigits": {
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1994
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 2060
        }
      },
      "json": {
        "check": "Number",
        "init": 0
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The minimum number of integer digits (digits before the decimal separator).",
          "     * Missing digits will be filled up with 0 (\"19\" -> \"0019\").",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The minimum number of integer digits (digits before the decimal separator).\n Missing digits will be filled up with 0 (\"19\" -&gt; \"0019\").</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "maximumIntegerDigits": {
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2188
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2261
        }
      },
      "json": {
        "check": "Number",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The maximum number of integer digits (superfluous digits will be cut off",
          "     * (\"1923\" -> \"23\").",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The maximum number of integer digits (superfluous digits will be cut off\n (\"1923\" -&gt; \"23\").</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "minimumFractionDigits": {
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2433
        },
        "end": {
          "line": 94,
          "column": 5,
          "index": 2500
        }
      },
      "json": {
        "check": "Number",
        "init": 0
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The minimum number of fraction digits (digits after the decimal separator).",
          "     * Missing digits will be filled up with 0 (\"1.5\" -> \"1.500\")",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The minimum number of fraction digits (digits after the decimal separator).\n Missing digits will be filled up with 0 (\"1.5\" -&gt; \"1.500\")</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "maximumFractionDigits": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2673
        },
        "end": {
          "line": 103,
          "column": 5,
          "index": 2747
        }
      },
      "json": {
        "check": "Number",
        "nullable": true
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * The maximum number of fraction digits (digits after the decimal separator).",
          "     * Superfluous digits will cause rounding (\"1.8277\" -> \"1.83\")",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The maximum number of fraction digits (digits after the decimal separator).\n Superfluous digits will cause rounding (\"1.8277\" -&gt; \"1.83\")</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "groupingUsed": {
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 2830
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 2892
        }
      },
      "json": {
        "check": "Boolean",
        "init": true
      },
      "jsdoc": {
        "raw": [
          "* Whether thousand groupings should be used {e.g. \"1,432,234.65\"}. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether thousand groupings should be used {e.g. \"1,432,234.65\"}.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "prefix": {
      "location": {
        "start": {
          "line": 112,
          "column": 4,
          "index": 2971
        },
        "end": {
          "line": 116,
          "column": 5,
          "index": 3059
        }
      },
      "json": {
        "check": "String",
        "init": "",
        "event": "changeNumberFormat"
      },
      "jsdoc": {
        "raw": [
          "* The prefix to put before the number {\"EUR \" -> \"EUR 12.31\"}. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>The prefix to put before the number {\"EUR \" -&gt; \"EUR 12.31\"}.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "postfix": {
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 3139
        },
        "end": {
          "line": 123,
          "column": 5,
          "index": 3228
        }
      },
      "json": {
        "check": "String",
        "init": "",
        "event": "changeNumberFormat"
      },
      "jsdoc": {
        "raw": [
          "* Sets the postfix to put after the number {\" %\" -> \"56.13 %\"}. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the postfix to put after the number {\" %\" -&gt; \"56.13 %\"}.</p>"
          }
        ]
      },
      "appearsIn": []
    },
    "locale": {
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3258
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3342
        }
      },
      "json": {
        "check": "String",
        "event": "changeLocale"
      },
      "jsdoc": {
        "raw": [
          "* Locale used "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Locale used</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "format": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Formats a number.",
          "     *",
          "     * @param num {Number} the number to format.",
          "     * @return {String} the formatted number as a string.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Formats a number.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "num {Number} the number to format.",
            "paramName": "num",
            "description": " the number to format.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the formatted number as a string.",
            "type": "string",
            "description": "the formatted number as a string."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 3705
        },
        "end": {
          "line": 244,
          "column": 5,
          "index": 6500
        }
      },
      "type": "function",
      "params": [
        {
          "name": "num",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": [
        "qx.util.format.IFormat"
      ]
    },
    "parse": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Parses a number.",
          "     *",
          "     * @param str {String} the string to parse.",
          "     * @return {Double} the number.",
          "     * @throws {Error} If the number string does not match the number format.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Parses a number.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to parse.",
            "paramName": "str",
            "description": " the string to parse.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Double} the number.",
            "type": "Double",
            "description": "the number."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the number string does not match the number format.",
            "type": "Error",
            "description": " If the number string does not match the number format."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 6716
        },
        "end": {
          "line": 303,
          "column": 5,
          "index": 8247
        }
      },
      "type": "function",
      "params": [
        {
          "name": "str",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Double"
      },
      "appearsIn": [
        "qx.util.format.IFormat"
      ]
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 306,
        "column": 2,
        "index": 8256
      },
      "end": {
        "line": 310,
        "column": 3,
        "index": 8396
      }
    }
  },
  "statics": {}
}