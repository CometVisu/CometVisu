{
  "version": 0.3,
  "lastModified": 1722151627443,
  "lastModifiedIso": "2024-07-28T07:27:07.443Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/util/ValueManager.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 575
    },
    "end": {
      "line": 100,
      "column": 3,
      "index": 2476
    }
  },
  "className": "qx.util.ValueManager",
  "jsdoc": {
    "raw": [
      "*",
      " * Abstract base class for all managers of themed values.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Abstract base class for all managers of themed values.</p>"
      }
    ]
  },
  "isSingleton": false,
  "abstract": true,
  "superClass": "qx.core.Object",
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 33,
        "column": 2,
        "index": 854
      },
      "end": {
        "line": 38,
        "column": 3,
        "index": 941
      }
    }
  },
  "members": {
    "_dynamic": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1145
        },
        "end": {
          "line": 47,
          "column": 18,
          "index": 1159
        }
      },
      "appearsIn": []
    },
    "resolveDynamic": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the dynamically interpreted result for the incoming value",
          "     *",
          "     * @param value {String} dynamically interpreted identifier",
          "     * @return {var} return the (translated) result of the incoming value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dynamically interpreted result for the incoming value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} return the (translated) result of the incoming value",
            "type": "var",
            "description": "return the (translated) result of the incoming value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1400
        },
        "end": {
          "line": 57,
          "column": 5,
          "index": 1464
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "isDynamic": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether a value is interpreted dynamically",
          "     *",
          "     * @param value {String} dynamically interpreted identifier",
          "     * @return {Boolean} returns true if the value is interpreted dynamically",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a value is interpreted dynamically</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true if the value is interpreted dynamically",
            "type": "boolean",
            "description": "returns true if the value is interpreted dynamically"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 1686
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 1747
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "resolve": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the dynamically interpreted result for the incoming value,",
          "     * (if available), otherwise returns the original value",
          "     * @param value {String} Value to resolve",
          "     * @return {var} either returns the (translated) result of the incoming",
          "     * value or the value itself",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dynamically interpreted result for the incoming value,\n (if available), otherwise returns the original value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} Value to resolve",
            "paramName": "value",
            "description": " Value to resolve",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} either returns the (translated) result of the incoming\n value or the value itself",
            "type": "var",
            "description": "either returns the (translated) result of the incoming\n value or the value itself"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2059
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2190
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "_setDynamic": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the dynamics map.",
          "     * @param value {Map} The map.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the dynamics map.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Map} The map.",
            "paramName": "value",
            "description": " The map.",
            "type": "Map<any, any>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2278
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2333
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "Map<any, any>"
        }
      ],
      "appearsIn": []
    },
    "_getDynamic": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the dynamics map.",
          "     * @return {Map} The map.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dynamics map.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The map.",
            "type": "Map<any, any>",
            "description": "The map."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 96,
          "column": 4,
          "index": 2419
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2468
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}