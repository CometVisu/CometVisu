{
  "className": "qx.dom.Hierarchy",
  "packageName": "qx.dom",
  "name": "Hierarchy",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 63,
        "column": 0,
        "index": 2220
      },
      "end": {
        "line": 453,
        "column": 3,
        "index": 12699
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Methods to operate on nodes and elements on a DOM tree. This contains\n special getters to query for child nodes, siblings, etc. This class also\n supports to operate on one element and reorganize the content with\n the insertion of new HTML or nodes.</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "getNodeIndex": {
      "location": {
        "start": {
          "line": 71,
          "column": 4,
          "index": 2431
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2579
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the DOM index of the given node</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Node} Node to look for",
            "paramName": "node",
            "description": " Node to look for",
            "type": "qx.dom.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The DOM index",
            "type": "Integer",
            "description": " The DOM index"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getElementIndex": {
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2774
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 3027
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the DOM index of the given element (ignoring non-elements)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} Element to look for",
            "paramName": "element",
            "description": " Element to look for",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The DOM index",
            "type": "Integer",
            "description": " The DOM index"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getNextElementSibling": {
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 3306
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3527
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the next element to the supplied element\n \"nextSibling\" is not good enough as it might return a text or comment element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} Starting element node",
            "paramName": "element",
            "description": " Starting element node",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element|null} Next element node",
            "type": "Element|null",
            "description": " Next element node"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPreviousElementSibling": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3818
        },
        "end": {
          "line": 138,
          "column": 5,
          "index": 4047
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return the previous element to the supplied element\n \"previousSibling\" is not good enough as it might return a text or comment element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} Starting element node",
            "paramName": "element",
            "description": " Starting element node",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element|null} Previous element node",
            "type": "Element|null",
            "description": " Previous element node"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4375
        },
        "end": {
          "line": 176,
          "column": 5,
          "index": 5203
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the first element contains the second one\n Uses native non-standard contains() in Internet Explorer,\n Opera and Webkit (supported since Safari 3.0 beta)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} Parent element",
            "paramName": "element",
            "description": " Parent element",
            "type": "qx.dom.Element"
          },
          {
            "name": "@param",
            "body": "target {Node} Child node",
            "paramName": "target",
            "description": " Child node",
            "type": "qx.dom.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isRendered": {
      "location": {
        "start": {
          "line": 186,
          "column": 4,
          "index": 5477
        },
        "end": {
          "line": 212,
          "column": 5,
          "index": 6196
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the element is inserted into the document\n for which it was created.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to check",
            "paramName": "element",
            "description": " DOM element to check",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the element is inserted\n    into the document.",
            "type": "Boolean",
            "description": " <code>true</code> when the element is inserted\n    into the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isDescendantOf": {
      "location": {
        "start": {
          "line": 221,
          "column": 4,
          "index": 6461
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 6549
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if <code>element</code> is a descendant of <code>ancestor</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} first element",
            "paramName": "element",
            "description": " first element",
            "type": "qx.dom.Element"
          },
          {
            "name": "@param",
            "body": "ancestor {Element} second element",
            "paramName": "ancestor",
            "description": " second element",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Element is a descendant of ancestor",
            "type": "Boolean",
            "description": " Element is a descendant of ancestor"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCommonParent": {
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 6966
        },
        "end": {
          "line": 275,
          "column": 5,
          "index": 7895
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the common parent element of two given elements. Returns\n <code>null</code> when no common element has been found.\n Uses native non-standard contains() in Opera and Internet Explorer</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element1 {Element} First element",
            "paramName": "element1",
            "description": " First element",
            "type": "qx.dom.Element"
          },
          {
            "name": "@param",
            "body": "element2 {Element} Second element",
            "paramName": "element2",
            "description": " Second element",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the found parent, if none was found <code>null</code>",
            "type": "qx.dom.Element",
            "description": " the found parent, if none was found <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAncestors": {
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 8127
        },
        "end": {
          "line": 286,
          "column": 5,
          "index": 8218
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Collects all of element's ancestors and returns them as an array of\n elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to query for ancestors",
            "paramName": "element",
            "description": " DOM element to query for ancestors",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} list of all parents",
            "type": "Array",
            "description": " list of all parents"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getChildElements": {
      "location": {
        "start": {
          "line": 294,
          "column": 4,
          "index": 8405
        },
        "end": {
          "line": 308,
          "column": 5,
          "index": 8666
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns element's children.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to query for child elements",
            "paramName": "element",
            "description": " DOM element to query for child elements",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} list of all child elements",
            "type": "Array",
            "description": " list of all child elements"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDescendants": {
      "location": {
        "start": {
          "line": 317,
          "column": 4,
          "index": 8919
        },
        "end": {
          "line": 319,
          "column": 5,
          "index": 9028
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Collects all of element's descendants (deep) and returns them as an array\n of elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to query for child elements",
            "paramName": "element",
            "description": " DOM element to query for child elements",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} list of all found elements",
            "type": "Array",
            "description": " list of all found elements"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFirstDescendant": {
      "location": {
        "start": {
          "line": 328,
          "column": 4,
          "index": 9340
        },
        "end": {
          "line": 336,
          "column": 5,
          "index": 9531
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the first child that is an element. This is opposed to firstChild DOM\n property which will return any node (whitespace in most usual cases).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to query for first descendant",
            "paramName": "element",
            "description": " DOM element to query for first descendant",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the first descendant",
            "type": "qx.dom.Element",
            "description": " the first descendant"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getLastDescendant": {
      "location": {
        "start": {
          "line": 345,
          "column": 4,
          "index": 9839
        },
        "end": {
          "line": 353,
          "column": 5,
          "index": 10032
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the last child that is an element. This is opposed to lastChild DOM\n property which will return any node (whitespace in most usual cases).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to query for last descendant",
            "paramName": "element",
            "description": " DOM element to query for last descendant",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the last descendant",
            "type": "qx.dom.Element",
            "description": " the last descendant"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPreviousSiblings": {
      "location": {
        "start": {
          "line": 361,
          "column": 4,
          "index": 10280
        },
        "end": {
          "line": 363,
          "column": 5,
          "index": 10383
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Collects all of element's previous siblings and returns them as an array of elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to query for previous siblings",
            "paramName": "element",
            "description": " DOM element to query for previous siblings",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} list of found DOM elements",
            "type": "Array",
            "description": " list of found DOM elements"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getNextSiblings": {
      "location": {
        "start": {
          "line": 372,
          "column": 4,
          "index": 10630
        },
        "end": {
          "line": 374,
          "column": 5,
          "index": 10725
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Collects all of element's next siblings and returns them as an array of\n elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to query for next siblings",
            "paramName": "element",
            "description": " DOM element to query for next siblings",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} list of found DOM elements",
            "type": "Array",
            "description": " list of found DOM elements"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_recursivelyCollect": {
      "location": {
        "start": {
          "line": 386,
          "column": 4,
          "index": 11144
        },
        "end": {
          "line": 396,
          "column": 5,
          "index": 11363
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Recursively collects elements whose relationship is specified by\n property.  <code>property</code> has to be a property (a method won't\n do!) of element that points to a single DOM node. Returns an array of\n elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} DOM element to start with",
            "paramName": "element",
            "description": " DOM element to start with",
            "type": "qx.dom.Element"
          },
          {
            "name": "@param",
            "body": "property {String} property to look for",
            "paramName": "property",
            "description": " property to look for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} result list",
            "type": "Array",
            "description": " result list"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getSiblings": {
      "location": {
        "start": {
          "line": 404,
          "column": 4,
          "index": 11581
        },
        "end": {
          "line": 408,
          "column": 5,
          "index": 11723
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Collects all of element's siblings and returns them as an array of elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {var} DOM element to start with",
            "paramName": "element",
            "description": " DOM element to start with",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} list of all found siblings",
            "type": "Array",
            "description": " list of all found siblings"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isEmpty": {
      "location": {
        "start": {
          "line": 417,
          "column": 4,
          "index": 11945
        },
        "end": {
          "line": 432,
          "column": 5,
          "index": 12259
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given element is empty.\n Inspired by Base2 (Dean Edwards)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The element to check",
            "paramName": "element",
            "description": " The element to check",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the element is empty",
            "type": "Boolean",
            "description": " true when the element is empty"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cleanWhitespace": {
      "location": {
        "start": {
          "line": 439,
          "column": 4,
          "index": 12413
        },
        "end": {
          "line": 451,
          "column": 5,
          "index": 12691
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all of element's text nodes which contain only whitespace</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} Element to cleanup",
            "paramName": "element",
            "description": " Element to cleanup",
            "type": "qx.dom.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}