{
  "version": 0.3,
  "lastModified": 1731947915395,
  "lastModifiedIso": "2024-11-18T16:38:35.395Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/dom/Element.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 602
    },
    "end": {
      "line": 362,
      "column": 3,
      "index": 9917
    }
  },
  "className": "qx.dom.Element",
  "jsdoc": {
    "raw": [
      "*",
      " * Manages children structures of an element. Easy and convenient APIs",
      " * to insert, remove and replace children.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Manages children structures of an element. Easy and convenient APIs\n to insert, remove and replace children.</p>"
      }
    ]
  },
  "statics": {
    "hasChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the given <code>child</code> is a child of <code>parent</code>",
          "     *",
          "     * @param parent {Element} parent element",
          "     * @param child {Node} child node",
          "     * @return {Boolean} true when the given <code>child</code> is a child of <code>parent</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given <code>child</code> is a child of <code>parent</code></p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {Element} parent element",
            "paramName": "parent",
            "description": " parent element",
            "type": "qx.dom.Element"
          },
          {
            "name": "@param",
            "body": "child {Node} child node",
            "paramName": "child",
            "description": " child node",
            "type": "qx.dom.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the given <code>child</code> is a child of <code>parent</code>",
            "type": "boolean",
            "description": "true when the given <code>child</code> is a child of <code>parent</code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 32,
          "column": 4,
          "index": 942
        },
        "end": {
          "line": 34,
          "column": 5,
          "index": 1015
        }
      },
      "type": "function",
      "params": [
        {
          "name": "parent",
          "type": "qx.dom.Element"
        },
        {
          "name": "child",
          "type": "qx.dom.Node"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the given <code>element</code> has children.",
          "     *",
          "     * @param element {Element} element to test",
          "     * @return {Boolean} true when the given <code>element</code> has at least one child node",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given <code>element</code> has children.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} element to test",
            "paramName": "element",
            "description": " element to test",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the given <code>element</code> has at least one child node",
            "type": "boolean",
            "description": "true when the given <code>element</code> has at least one child node"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 1247
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 1310
        }
      },
      "type": "function",
      "params": [
        {
          "name": "element",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "hasChildElements": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the given <code>element</code> has any child elements.",
          "     *",
          "     * @param element {Element} element to test",
          "     * @return {Boolean} true when the given <code>element</code> has at least one child element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given <code>element</code> has any child elements.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} element to test",
            "paramName": "element",
            "description": " element to test",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the given <code>element</code> has at least one child element",
            "type": "boolean",
            "description": "true when the given <code>element</code> has at least one child element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1555
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 1789
        }
      },
      "type": "function",
      "params": [
        {
          "name": "element",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "getParentElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the parent element of the given element.",
          "     *",
          "     * @param element {Element} Element to find the parent for",
          "     * @return {Element} The parent element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the parent element of the given element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} Element to find the parent for",
            "paramName": "element",
            "description": " Element to find the parent for",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The parent element",
            "type": "qx.dom.Element",
            "description": "The parent element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 1982
        },
        "end": {
          "line": 74,
          "column": 5,
          "index": 2048
        }
      },
      "type": "function",
      "params": [
        {
          "name": "element",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "qx.dom.Element"
      },
      "appearsIn": []
    },
    "isInDom": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks if the <code>element</code> is in the DOM, but note that",
          "     * the method is very expensive!",
          "     *",
          "     * @param element {Element} The DOM element to check.",
          "     * @param win {Window} The window to check for.",
          "     * @return {Boolean} <code>true</code> if the <code>element</code> is in",
          "     *          the DOM, <code>false</code> otherwise.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the <code>element</code> is in the DOM, but note that\n the method is very expensive!</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The DOM element to check.",
            "paramName": "element",
            "description": " The DOM element to check.",
            "type": "qx.dom.Element"
          },
          {
            "name": "@param",
            "body": "win {Window} The window to check for.",
            "paramName": "win",
            "description": " The window to check for.",
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the <code>element</code> is in\n          the DOM, <code>false</code> otherwise.",
            "type": "boolean",
            "description": "<code>true</code> if the <code>element</code> is in\n          the DOM, <code>false</code> otherwise."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2428
        },
        "end": {
          "line": 99,
          "column": 5,
          "index": 2748
        }
      },
      "type": "function",
      "params": [
        {
          "name": "element",
          "type": "qx.dom.Element"
        },
        {
          "name": "win",
          "type": "Window"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "insertAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Inserts <code>node</code> at the given <code>index</code>",
          "     * inside <code>parent</code>.",
          "     *",
          "     * @param node {Node} node to insert",
          "     * @param parent {Element} parent element node",
          "     * @param index {Integer} where to insert",
          "     * @return {Boolean} returns true (successful)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Inserts <code>node</code> at the given <code>index</code>\n inside <code>parent</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Node} node to insert",
            "paramName": "node",
            "description": " node to insert",
            "type": "qx.dom.Node"
          },
          {
            "name": "@param",
            "body": "parent {Element} parent element node",
            "paramName": "parent",
            "description": " parent element node",
            "type": "qx.dom.Element"
          },
          {
            "name": "@param",
            "body": "index {Integer} where to insert",
            "paramName": "index",
            "description": " where to insert",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true (successful)",
            "type": "boolean",
            "description": "returns true (successful)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3258
        },
        "end": {
          "line": 126,
          "column": 5,
          "index": 3472
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.dom.Node"
        },
        {
          "name": "parent",
          "type": "qx.dom.Element"
        },
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "insertBegin": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert <code>node</code> into <code>parent</code> as first child.",
          "     * Indexes of other children will be incremented by one.",
          "     *",
          "     * @param node {Node} Node to insert",
          "     * @param parent {Element} parent element node",
          "     * @return {Boolean} returns true (successful)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert <code>node</code> into <code>parent</code> as first child.\n Indexes of other children will be incremented by one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Node} Node to insert",
            "paramName": "node",
            "description": " Node to insert",
            "type": "qx.dom.Node"
          },
          {
            "name": "@param",
            "body": "parent {Element} parent element node",
            "paramName": "parent",
            "description": " parent element node",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true (successful)",
            "type": "boolean",
            "description": "returns true (successful)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3779
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 3971
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.dom.Node"
        },
        {
          "name": "parent",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "insertEnd": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert <code>node</code> into <code>parent</code> as last child.",
          "     *",
          "     * @param node {Node} Node to insert",
          "     * @param parent {Element} parent element node",
          "     * @return {Boolean} returns true (successful)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert <code>node</code> into <code>parent</code> as last child.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Node} Node to insert",
            "paramName": "node",
            "description": " Node to insert",
            "type": "qx.dom.Node"
          },
          {
            "name": "@param",
            "body": "parent {Element} parent element node",
            "paramName": "parent",
            "description": " parent element node",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true (successful)",
            "type": "boolean",
            "description": "returns true (successful)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 4216
        },
        "end": {
          "line": 155,
          "column": 5,
          "index": 4298
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.dom.Node"
        },
        {
          "name": "parent",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "insertBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Inserts <code>node</code> before <code>ref</code> in the same parent.",
          "     *",
          "     * @param node {Node} Node to insert",
          "     * @param ref {Node} Node which will be used as reference for insertion",
          "     * @return {Boolean} returns true (successful)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Inserts <code>node</code> before <code>ref</code> in the same parent.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Node} Node to insert",
            "paramName": "node",
            "description": " Node to insert",
            "type": "qx.dom.Node"
          },
          {
            "name": "@param",
            "body": "ref {Node} Node which will be used as reference for insertion",
            "paramName": "ref",
            "description": " Node which will be used as reference for insertion",
            "type": "qx.dom.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true (successful)",
            "type": "boolean",
            "description": "returns true (successful)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 4573
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 4669
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.dom.Node"
        },
        {
          "name": "ref",
          "type": "qx.dom.Node"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "insertAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Inserts <code>node</code> after <code>ref</code> in the same parent.",
          "     *",
          "     * @param node {Node} Node to insert",
          "     * @param ref {Node} Node which will be used as reference for insertion",
          "     * @return {Boolean} returns true (successful)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Inserts <code>node</code> after <code>ref</code> in the same parent.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Node} Node to insert",
            "paramName": "node",
            "description": " Node to insert",
            "type": "qx.dom.Node"
          },
          {
            "name": "@param",
            "body": "ref {Node} Node which will be used as reference for insertion",
            "paramName": "ref",
            "description": " Node which will be used as reference for insertion",
            "type": "qx.dom.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true (successful)",
            "type": "boolean",
            "description": "returns true (successful)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 4943
        },
        "end": {
          "line": 186,
          "column": 5,
          "index": 5180
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.dom.Node"
        },
        {
          "name": "ref",
          "type": "qx.dom.Node"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given <code>node</code> from its parent element.",
          "     *",
          "     * @param node {Node} Node to remove",
          "     * @return {Boolean} <code>true</code> when node was successfully removed,",
          "     *   otherwise <code>false</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given <code>node</code> from its parent element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Node} Node to remove",
            "paramName": "node",
            "description": " Node to remove",
            "type": "qx.dom.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when node was successfully removed,\n   otherwise <code>false</code>",
            "type": "boolean",
            "description": "<code>true</code> when node was successfully removed,\n   otherwise <code>false</code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 201,
          "column": 4,
          "index": 5625
        },
        "end": {
          "line": 208,
          "column": 5,
          "index": 5766
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.dom.Node"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "removeChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given <code>node</code> from the <code>parent</code>.",
          "     *",
          "     * @param node {Node} Node to remove",
          "     * @param parent {Element} parent element which contains the <code>node</code>",
          "     * @return {Boolean} <code>true</code> when node was successfully removed,",
          "     *   otherwise <code>false</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given <code>node</code> from the <code>parent</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node {Node} Node to remove",
            "paramName": "node",
            "description": " Node to remove",
            "type": "qx.dom.Node"
          },
          {
            "name": "@param",
            "body": "parent {Element} parent element which contains the <code>node</code>",
            "paramName": "parent",
            "description": " parent element which contains the <code>node</code>",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when node was successfully removed,\n   otherwise <code>false</code>",
            "type": "boolean",
            "description": "<code>true</code> when node was successfully removed,\n   otherwise <code>false</code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 218,
          "column": 4,
          "index": 6110
        },
        "end": {
          "line": 225,
          "column": 5,
          "index": 6265
        }
      },
      "type": "function",
      "params": [
        {
          "name": "node",
          "type": "qx.dom.Node"
        },
        {
          "name": "parent",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "removeChildAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the node at the given <code>index</code>",
          "     * from the <code>parent</code>.",
          "     *",
          "     * @param index {Integer} position of the node which should be removed",
          "     * @param parent {Element} parent DOM element",
          "     * @return {Boolean} <code>true</code> when node was successfully removed,",
          "     *   otherwise <code>false</code>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the node at the given <code>index</code>\n from the <code>parent</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} position of the node which should be removed",
            "paramName": "index",
            "description": " position of the node which should be removed",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "parent {Element} parent DOM element",
            "paramName": "parent",
            "description": " parent DOM element",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when node was successfully removed,\n   otherwise <code>false</code>",
            "type": "boolean",
            "description": "<code>true</code> when node was successfully removed,\n   otherwise <code>false</code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 236,
          "column": 4,
          "index": 6630
        },
        "end": {
          "line": 245,
          "column": 5,
          "index": 6814
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "parent",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "replaceChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces <code>oldNode</code> with <code>newNode</code> in the current",
          "     * parent of <code>oldNode</code>.",
          "     *",
          "     * @param newNode {Node} DOM node to insert",
          "     * @param oldNode {Node} DOM node to remove",
          "     * @return {Boolean} <code>true</code> when node was successfully replaced",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces <code>oldNode</code> with <code>newNode</code> in the current\n parent of <code>oldNode</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newNode {Node} DOM node to insert",
            "paramName": "newNode",
            "description": " DOM node to insert",
            "type": "qx.dom.Node"
          },
          {
            "name": "@param",
            "body": "oldNode {Node} DOM node to remove",
            "paramName": "oldNode",
            "description": " DOM node to remove",
            "type": "qx.dom.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when node was successfully replaced",
            "type": "boolean",
            "description": "<code>true</code> when node was successfully replaced"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 7325
        },
        "end": {
          "line": 268,
          "column": 5,
          "index": 7503
        }
      },
      "type": "function",
      "params": [
        {
          "name": "newNode",
          "type": "qx.dom.Node"
        },
        {
          "name": "oldNode",
          "type": "qx.dom.Node"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "replaceAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Replaces the node at <code>index</code> with <code>newNode</code> in",
          "     * the given parent.",
          "     *",
          "     * @param newNode {Node} DOM node to insert",
          "     * @param index {Integer} position of old DOM node",
          "     * @param parent {Element} parent DOM element",
          "     * @return {Boolean} <code>true</code> when node was successfully replaced",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replaces the node at <code>index</code> with <code>newNode</code> in\n the given parent.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "newNode {Node} DOM node to insert",
            "paramName": "newNode",
            "description": " DOM node to insert",
            "type": "qx.dom.Node"
          },
          {
            "name": "@param",
            "body": "index {Integer} position of old DOM node",
            "paramName": "index",
            "description": " position of old DOM node",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "parent {Element} parent DOM element",
            "paramName": "parent",
            "description": " parent DOM element",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when node was successfully replaced",
            "type": "boolean",
            "description": "<code>true</code> when node was successfully replaced"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 279,
          "column": 4,
          "index": 7866
        },
        "end": {
          "line": 288,
          "column": 5,
          "index": 8071
        }
      },
      "type": "function",
      "params": [
        {
          "name": "newNode",
          "type": "qx.dom.Node"
        },
        {
          "name": "index",
          "type": "Integer"
        },
        {
          "name": "parent",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__helperElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stores helper element for element creation in WebKit",
          "     *",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stores helper element for element creation in WebKit</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 295,
          "column": 4,
          "index": 8178
        },
        "end": {
          "line": 295,
          "column": 23,
          "index": 8197
        }
      },
      "appearsIn": []
    },
    "getHelperElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and returns a DOM helper element.",
          "     *",
          "     * @param win {Window?} Window to create the element for",
          "     * @return {Element} The created element node",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and returns a DOM helper element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "win {Window?} Window to create the element for",
            "paramName": "win",
            "description": " Window to create the element for",
            "optional": true,
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The created element node",
            "type": "qx.dom.Element",
            "description": "The created element node"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 303,
          "column": 4,
          "index": 8387
        },
        "end": {
          "line": 324,
          "column": 5,
          "index": 9023
        }
      },
      "type": "function",
      "params": [
        {
          "name": "win",
          "type": "Window",
          "optional": true
        }
      ],
      "returnType": {
        "type": "qx.dom.Element"
      },
      "appearsIn": []
    },
    "create": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates a DOM element.",
          "     *",
          "     * @param name {String} Tag name of the element",
          "     * @param attributes {Map?} Map of attributes to apply",
          "     * @param win {Window?} Window to create the element for",
          "     * @return {Element} The created element node",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Tag name of the element",
            "paramName": "name",
            "description": " Tag name of the element",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "attributes {Map?} Map of attributes to apply",
            "paramName": "attributes",
            "description": " Map of attributes to apply",
            "optional": true,
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "win {Window?} Window to create the element for",
            "paramName": "win",
            "description": " Window to create the element for",
            "optional": true,
            "type": "Window"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The created element node",
            "type": "qx.dom.Element",
            "description": "The created element node"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 334,
          "column": 4,
          "index": 9305
        },
        "end": {
          "line": 350,
          "column": 5,
          "index": 9663
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "attributes",
          "type": "Map",
          "optional": true
        },
        {
          "name": "win",
          "type": "Window",
          "optional": true
        }
      ],
      "returnType": {
        "type": "qx.dom.Element"
      },
      "appearsIn": []
    },
    "empty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all content from the given element",
          "     *",
          "     * @param element {Element} element to clean",
          "     * @return {String} empty string (new HTML content)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all content from the given element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} element to clean",
            "paramName": "element",
            "description": " element to clean",
            "type": "qx.dom.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} empty string (new HTML content)",
            "type": "string",
            "description": "empty string (new HTML content)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 358,
          "column": 4,
          "index": 9848
        },
        "end": {
          "line": 360,
          "column": 5,
          "index": 9909
        }
      },
      "type": "function",
      "params": [
        {
          "name": "element",
          "type": "qx.dom.Element"
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}