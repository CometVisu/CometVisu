{
  "version": 0.3,
  "lastModified": 1722153600147,
  "lastModifiedIso": "2024-07-28T08:00:00.147Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/theme/manager/Font.js",
  "type": "class",
  "location": {
    "start": {
      "line": 27,
      "column": 0,
      "index": 644
    },
    "end": {
      "line": 371,
      "column": 3,
      "index": 11088
    }
  },
  "className": "qx.theme.manager.Font",
  "jsdoc": {
    "raw": [
      "*",
      " * Manager for font themes",
      " *",
      " * NOTE: Instances of this class must be disposed of after use",
      " *",
      " * @ignore(qx.$$fontBootstrap)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Manager for font themes\n NOTE: Instances of this class must be disposed of after use</p>"
      }
    ],
    "@ignore": [
      {
        "name": "@ignore",
        "body": "qx.$$fontBootstrap"
      }
    ]
  },
  "isSingleton": true,
  "abstract": false,
  "superClass": "qx.util.ValueManager",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "construct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 38,
        "column": 2,
        "index": 967
      },
      "end": {
        "line": 46,
        "column": 3,
        "index": 1142
      }
    }
  },
  "properties": {
    "theme": {
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1397
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 1510
        }
      },
      "json": {
        "check": "Theme",
        "nullable": true,
        "apply": "_applyTheme",
        "event": "changeTheme"
      },
      "jsdoc": {
        "raw": [
          "* the currently selected font theme "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>the currently selected font theme</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "_manifestFonts": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 71,
          "column": 4,
          "index": 1718
        },
        "end": {
          "line": 71,
          "column": 24,
          "index": 1738
        }
      },
      "appearsIn": []
    },
    "resolveDynamic": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the dynamically interpreted result for the incoming value",
          "     *",
          "     * @param value {String} dynamically interpreted identifier",
          "     * @return {var} return the (translated) result of the incoming value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dynamically interpreted result for the incoming value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} return the (translated) result of the incoming value",
            "type": "var",
            "description": "return the (translated) result of the incoming value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 1979
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2111
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "overriddenFrom": "qx.util.ValueManager",
      "appearsIn": [
        "qx.util.ValueManager"
      ]
    },
    "resolve": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the dynamically interpreted result for the incoming value,",
          "     * (if available), otherwise returns the original value",
          "     * @param value {String} Value to resolve",
          "     * @return {var} either returns the (translated) result of the incoming",
          "     * value or the value itself",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dynamically interpreted result for the incoming value,\n (if available), otherwise returns the original value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} Value to resolve",
            "paramName": "value",
            "description": " Value to resolve",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} either returns the (translated) result of the incoming\n value or the value itself",
            "type": "var",
            "description": "either returns the (translated) result of the incoming\n value or the value itself"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2423
        },
        "end": {
          "line": 129,
          "column": 5,
          "index": 3652
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "overriddenFrom": "qx.util.ValueManager",
      "appearsIn": [
        "qx.util.ValueManager"
      ]
    },
    "isDynamic": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether a value is interpreted dynamically",
          "     *",
          "     * @param value {String} dynamically interpreted identifier",
          "     * @return {Boolean} returns true if the value is interpreted dynamically",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a value is interpreted dynamically</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true if the value is interpreted dynamically",
            "type": "boolean",
            "description": "returns true if the value is interpreted dynamically"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 137,
          "column": 4,
          "index": 3874
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 4903
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "overriddenFrom": "qx.util.ValueManager",
      "appearsIn": [
        "qx.util.ValueManager"
      ]
    },
    "__resolveInclude": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Checks for includes and resolves them recursively",
          "     *",
          "     * @param fonts {Map} all fonts of the theme",
          "     * @param fontName {String} font name to include",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks for includes and resolves them recursively</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fonts {Map} all fonts of the theme",
            "paramName": "fonts",
            "description": " all fonts of the theme",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "fontName {String} font name to include",
            "paramName": "fontName",
            "description": " font name to include",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 175,
          "column": 4,
          "index": 5092
        },
        "end": {
          "line": 192,
          "column": 5,
          "index": 5604
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fonts",
          "type": "Map<any, any>"
        },
        {
          "name": "fontName",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "__initialiseFonts": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Initialises fonts from a set of font definitions (eg from a theme Font configuration)",
          "     *",
          "     * @param {Map<String,Object>} fontDefs indexed by font ID",
          "     * @return {Map<String,qx.bom.Font>} created fonts",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialises fonts from a set of font definitions (eg from a theme Font configuration)</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{Map<String,Object>} fontDefs indexed by font ID",
            "paramName": "fontDefs",
            "description": "indexed by font ID",
            "type": "Map<String,Object>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map<String,qx.bom.Font>} created fonts",
            "type": "Map<String,qx.bom.Font>",
            "description": "created fonts"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 200,
          "column": 4,
          "index": 5845
        },
        "end": {
          "line": 316,
          "column": 5,
          "index": 9782
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fontDefs",
          "type": "Map<String,Object>"
        }
      ],
      "returnType": {
        "type": "Map<String,qx.bom.Font>"
      },
      "appearsIn": []
    },
    "_applyTheme": {
      "jsdoc": {
        "raw": [
          " apply method"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 319,
          "column": 4,
          "index": 9809
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 10300
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "__getFontClass": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Decides which Font class should be used based on the theme configuration",
          "     *",
          "     * @param config {Map} The font's configuration map",
          "     * @return {Class}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decides which Font class should be used based on the theme configuration</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "config {Map} The font's configuration map",
            "paramName": "config",
            "description": " The font's configuration map",
            "type": "Map<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class}",
            "type": "Class",
            "description": ""
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 345,
          "column": 4,
          "index": 10489
        },
        "end": {
          "line": 350,
          "column": 5,
          "index": 10637
        }
      },
      "type": "function",
      "params": [
        {
          "name": "config",
          "type": "Map<any, any>"
        }
      ],
      "returnType": {
        "type": "Class"
      },
      "appearsIn": []
    },
    "getManifestFonts": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the font information output by the compiler",
          "     * @internal subject to change",
          "     * @return {Object}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the font information output by the compiler</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": "subject to change"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}",
            "type": "Record<any, any>",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 357,
          "column": 4,
          "index": 10778
        },
        "end": {
          "line": 359,
          "column": 5,
          "index": 10838
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 368,
        "column": 2,
        "index": 11034
      },
      "end": {
        "line": 370,
        "column": 3,
        "index": 11084
      }
    }
  },
  "statics": {}
}