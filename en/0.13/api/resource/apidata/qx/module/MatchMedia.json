{
  "version": 0.3,
  "lastModified": 1735341602191,
  "lastModifiedIso": "2024-12-27T23:20:02.191Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/module/MatchMedia.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 24,
      "column": 0,
      "index": 699
    },
    "end": {
      "line": 140,
      "column": 3,
      "index": 3851
    }
  },
  "className": "qx.module.MatchMedia",
  "jsdoc": {
    "raw": [
      "*",
      " * Module for mediaqueries evaluation. The module is a wrapper for media.match.js,",
      " * that implements a polyfill for window.matchMedia when it's not supported natively.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Module for mediaqueries evaluation. The module is a wrapper for media.match.js,\n that implements a polyfill for window.matchMedia when it's not supported natively.</p>"
      }
    ]
  },
  "statics": {
    "matchMedia": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Evaluates the specified mediaquery list",
          "     *",
          "     * @param query {String} the media query to evaluate",
          "     * @return {qx.bom.MediaQuery}  The media query",
          "     * @attachStatic {qxWeb, matchMedia}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Evaluates the specified mediaquery list</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "query {String} the media query to evaluate",
            "paramName": "query",
            "description": " the media query to evaluate",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.MediaQuery}  The media query",
            "type": "qx.bom.MediaQuery",
            "description": " The media query"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, matchMedia}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 33,
          "column": 4,
          "index": 982
        },
        "end": {
          "line": 35,
          "column": 5,
          "index": 1050
        }
      },
      "type": "function",
      "params": [
        {
          "name": "query",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.bom.MediaQuery"
      },
      "appearsIn": []
    },
    "addSizeClasses": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds screen size classes (e.g. small-only or medium-up) by pre-defined media queries using em.",
          "     * The range goes from small to medium, large and xlarge up to xxlarge:",
          "     *",
          "     * small: 0em - 40em",
          "     * medium: 40.063em - 64em",
          "     * large: 64.063em - 90em",
          "     * xlarge: 90.063em - 120em",
          "     * xxlarge: > 120.063em",
          "     *",
          "     * The suffix of the class name indicates either that the current screen",
          "     * is larger than this size (*-up) or in that range (*-only).",
          "     *",
          "     * @attachStatic {qxWeb}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds screen size classes (e.g. small-only or medium-up) by pre-defined media queries using em.\n The range goes from small to medium, large and xlarge up to xxlarge:\n small: 0em - 40em\n medium: 40.063em - 64em\n large: 64.063em - 90em\n xlarge: 90.063em - 120em\n xxlarge: &gt; 120.063em\n The suffix of the class name indicates either that the current screen\n is larger than this size (<em>-up) or in that range (</em>-only).</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1590
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 2693
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__applyClass": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds or removes a class depending on matching a given media query",
          "     *",
          "     * @param query {String} the media query to evaluate",
          "     * @param className {String} css class name that gets bind to an element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds or removes a class depending on matching a given media query</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "query {String} the media query to evaluate",
            "paramName": "query",
            "description": " the media query to evaluate",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "className {String} css class name that gets bind to an element",
            "paramName": "className",
            "description": " css class name that gets bind to an element",
            "type": "string"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2930
        },
        "end": {
          "line": 107,
          "column": 5,
          "index": 3094
        }
      },
      "type": "function",
      "params": [
        {
          "name": "query",
          "type": "string"
        },
        {
          "name": "className",
          "type": "string"
        }
      ],
      "appearsIn": []
    }
  },
  "members": {
    "mediaQueryToClass": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Listens for media query updates and applies/removes the css class.",
          "     *",
          "     * @param queryString {String} the media query to evaluate",
          "     * @param className {String} css class name that gets bind to an element",
          "     *",
          "     * @attach {qxWeb}",
          "     * @return {qxWeb} Self instance for chaining",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listens for media query updates and applies/removes the css class.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "queryString {String} the media query to evaluate",
            "paramName": "queryString",
            "description": " the media query to evaluate",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "className {String} css class name that gets bind to an element",
            "paramName": "className",
            "description": " css class name that gets bind to an element",
            "type": "string"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} Self instance for chaining",
            "type": "qxWeb",
            "description": "Self instance for chaining"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3435
        },
        "end": {
          "line": 134,
          "column": 5,
          "index": 3790
        }
      },
      "type": "function",
      "params": [
        {
          "name": "queryString",
          "type": "string"
        },
        {
          "name": "className",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qxWeb"
      },
      "appearsIn": []
    }
  },
  "properties": {}
}