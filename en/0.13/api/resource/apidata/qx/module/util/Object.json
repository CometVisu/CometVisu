{
  "version": 0.3,
  "lastModified": 1735383688153,
  "lastModifiedIso": "2024-12-28T11:01:28.153Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/module/util/Object.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 25,
      "column": 0,
      "index": 596
    },
    "end": {
      "line": 101,
      "column": 3,
      "index": 2798
    }
  },
  "className": "qx.module.util.Object",
  "jsdoc": {
    "raw": [
      "*",
      " * Helper functions to handle an Object as a Hash map.",
      " *",
      " * @group (Utilities)",
      " * @require (qx.module.util.Array)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Helper functions to handle an Object as a Hash map.</p>"
      }
    ],
    "@group": [
      {
        "name": "@group",
        "body": "Utilities"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.module.util.Array"
      }
    ]
  },
  "statics": {
    "clone": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Return a copy of an Object",
          "     *",
          "     * @signature function(source, deep)",
          "     * @attachStatic {qxWeb, object.clone}",
          "     *",
          "     * @param source {Object} Object to copy",
          "     * @param deep {Boolean} If the clone should be a deep clone.",
          "     * @return {Object} A copy of the object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a copy of an Object</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(source, deep)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, object.clone}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "source {Object} Object to copy",
            "paramName": "source",
            "description": " Object to copy",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "deep {Boolean} If the clone should be a deep clone.",
            "paramName": "deep",
            "description": " If the clone should be a deep clone.",
            "type": "boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} A copy of the object",
            "type": "Record<any, any>",
            "description": "A copy of the object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 964
        },
        "end": {
          "line": 37,
          "column": 31,
          "index": 991
        }
      },
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "getValues": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the values of a map as array",
          "     *",
          "     * @signature function(map)",
          "     * @attachStatic {qxWeb, object.getValues}",
          "     *",
          "     * @param map {Object} the map",
          "     * @return {Array} array of the values of the map",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the values of a map as array</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(map)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, object.getValues}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Object} the map",
            "paramName": "map",
            "description": " the map",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} array of the values of the map",
            "type": "Array<any>",
            "description": "array of the values of the map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1236
        },
        "end": {
          "line": 48,
          "column": 39,
          "index": 1271
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "invert": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Inverts a map by exchanging the keys with the values.",
          "     *",
          "     * @signature function(map)",
          "     * @attachStatic {qxWeb, object.invert}",
          "     *",
          "     * If the map has the same values for different keys, information will get lost.",
          "     * The values will be converted to strings using the toString methods.",
          "     *",
          "     * @param map {Object} Map to invert",
          "     * @return {Object} inverted Map",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Inverts a map by exchanging the keys with the values.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(map)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, object.invert}\n If the map has the same values for different keys, information will get lost.\n The values will be converted to strings using the toString methods."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Object} Map to invert",
            "paramName": "map",
            "description": " Map to invert",
            "type": "Record<any, any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} inverted Map",
            "type": "Record<any, any>",
            "description": "inverted Map"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1690
        },
        "end": {
          "line": 62,
          "column": 33,
          "index": 1719
        }
      },
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "contains": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the map contains the given value.",
          "     *",
          "     * @signature function(map, value)",
          "     * @attachStatic {qxWeb, object.contains}",
          "     *",
          "     * @param map {Object} Map to search for the value",
          "     * @param value {var} Value to look for",
          "     * @return {Boolean} Whether the value was found in the map.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the map contains the given value.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(map, value)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, object.contains}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Object} Map to search for the value",
            "paramName": "map",
            "description": " Map to search for the value",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "value {var} Value to look for",
            "paramName": "value",
            "description": " Value to look for",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the value was found in the map.",
            "type": "boolean",
            "description": "Whether the value was found in the map."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2054
        },
        "end": {
          "line": 74,
          "column": 37,
          "index": 2087
        }
      },
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "merge": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Merges one or more objects into the 'target' object.",
          "     * *The objects are merged by overwriting existing keys.*",
          "     *",
          "     * @attachStatic {qxWeb, object.merge}",
          "     *",
          "     * @param target {Object} target object to merge into",
          "     * @param varargs {var} As many items as you want to merge.",
          "     * @return {Object} the merged object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Merges one or more objects into the 'target' object.\n<em>The objects are merged by overwriting existing keys.</em></p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, object.merge}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} target object to merge into",
            "paramName": "target",
            "description": " target object to merge into",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "varargs {var} As many items as you want to merge.",
            "paramName": "varargs",
            "description": " As many items as you want to merge.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the merged object",
            "type": "Record<any, any>",
            "description": "the merged object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2453
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 2727
        }
      },
      "type": "function",
      "params": [
        {
          "name": "target",
          "type": "Record<any, any>"
        },
        {
          "name": "varargs",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}