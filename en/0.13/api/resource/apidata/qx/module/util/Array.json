{
  "version": 0.3,
  "lastModified": 1735222257258,
  "lastModifiedIso": "2024-12-26T14:10:57.258Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/module/util/Array.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 569
    },
    "end": {
      "line": 184,
      "column": 3,
      "index": 5678
    }
  },
  "className": "qx.module.util.Array",
  "jsdoc": {
    "raw": [
      "*",
      " * Utility module to give some support to work with arrays.",
      " *",
      " * @group (Utilities)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Utility module to give some support to work with arrays.</p>"
      }
    ],
    "@group": [
      {
        "name": "@group",
        "body": "Utilities"
      }
    ]
  },
  "statics": {
    "cast": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts an array like object to any other array like",
          "     * object.",
          "     *",
          "     * Attention: The returned array may be same",
          "     * instance as the incoming one if the constructor is identical!",
          "     *",
          "     * @signature function(object, constructor, offset)",
          "     * @attachStatic {qxWeb, array.cast}",
          "     *",
          "     * @param object {var} any array-like object",
          "     * @param constructor {Function} constructor of the new instance",
          "     * @param offset {Number?0} position to start from",
          "     * @return {Array} the converted array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts an array like object to any other array like\n object.\n Attention: The returned array may be same\n instance as the incoming one if the constructor is identical!</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(object, constructor, offset)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.cast}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {var} any array-like object",
            "paramName": "object",
            "description": " any array-like object",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "constructor {Function} constructor of the new instance",
            "paramName": "constructor",
            "description": " constructor of the new instance",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "offset {Number?0} position to start from",
            "paramName": "offset",
            "description": " position to start from",
            "optional": true,
            "defaultValue": "0",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the converted array",
            "type": "Array<any>",
            "description": "the converted array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 40,
          "column": 4,
          "index": 1176
        },
        "end": {
          "line": 40,
          "column": 28,
          "index": 1200
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "equals": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Check whether the two arrays have the same content. Checks only the",
          "     * equality of the arrays' content.",
          "     *",
          "     * @signature function(arr1, arr2)",
          "     * @attachStatic {qxWeb, array.equals}",
          "     *",
          "     * @param arr1 {Array} first array",
          "     * @param arr2 {Array} second array",
          "     * @return {Boolean} Whether the two arrays are equal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the two arrays have the same content. Checks only the\n equality of the arrays' content.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr1, arr2)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.equals}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr1 {Array} first array",
            "paramName": "arr1",
            "description": " first array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "arr2 {Array} second array",
            "paramName": "arr2",
            "description": " second array",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the two arrays are equal",
            "type": "boolean",
            "description": "Whether the two arrays are equal"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1571
        },
        "end": {
          "line": 53,
          "column": 32,
          "index": 1599
        }
      },
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "exclude": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Modifies the first array as it removes all elements",
          "     * which are listed in the second array as well.",
          "     *",
          "     * @signature function(arr1, arr2)",
          "     * @attachStatic {qxWeb, array.exclude}",
          "     *",
          "     * @param arr1 {Array} the array",
          "     * @param arr2 {Array} the elements of this array will be excluded from the other one",
          "     * @return {Array} The modified array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Modifies the first array as it removes all elements\n which are listed in the second array as well.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr1, arr2)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.exclude}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr1 {Array} the array",
            "paramName": "arr1",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "arr2 {Array} the elements of this array will be excluded from the other one",
            "paramName": "arr2",
            "description": " the elements of this array will be excluded from the other one",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The modified array.",
            "type": "Array<any>",
            "description": "The modified array."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 2001
        },
        "end": {
          "line": 66,
          "column": 34,
          "index": 2031
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "fromArguments": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convert an arguments object into an array.",
          "     *",
          "     * @signature function(args, offset)",
          "     * @attachStatic {qxWeb, array.fromArguments}",
          "     *",
          "     * @param args {arguments} arguments object",
          "     * @param offset {Number?0} position to start from",
          "     * @return {Array} a newly created array (copy) with the content of the arguments object.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert an arguments object into an array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(args, offset)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.fromArguments}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} arguments object",
            "paramName": "args",
            "description": " arguments object",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "offset {Number?0} position to start from",
            "paramName": "offset",
            "description": " position to start from",
            "optional": true,
            "defaultValue": "0",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} a newly created array (copy) with the content of the arguments object.",
            "type": "Array<any>",
            "description": "a newly created array (copy) with the content of the arguments object."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2406
        },
        "end": {
          "line": 78,
          "column": 46,
          "index": 2448
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "insertAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert an element into the array after a given second element.",
          "     *",
          "     * @signature function(arr, obj, obj2)",
          "     * @attachStatic {qxWeb, array.insertAfter}",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param obj {var} object to be inserted",
          "     * @param obj2 {var} insert obj1 after this object",
          "     * @return {Array} The given array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element into the array after a given second element.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr, obj, obj2)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.insertAfter}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "obj {var} object to be inserted",
            "paramName": "obj",
            "description": " object to be inserted",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "obj2 {var} insert obj1 after this object",
            "paramName": "obj2",
            "description": " insert obj1 after this object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The given array.",
            "type": "Array<any>",
            "description": "The given array."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2823
        },
        "end": {
          "line": 91,
          "column": 42,
          "index": 2861
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "insertBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert an element into the array before a given second element.",
          "     *",
          "     * @signature function(arr, obj, obj2)",
          "     * @attachStatic {qxWeb, array.insertBefore}",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param obj {var} object to be inserted",
          "     * @param obj2 {var} insert obj1 before this object",
          "     * @return {Array} The given array.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element into the array before a given second element.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr, obj, obj2)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.insertBefore}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "obj {var} object to be inserted",
            "paramName": "obj",
            "description": " object to be inserted",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "obj2 {var} insert obj1 before this object",
            "paramName": "obj2",
            "description": " insert obj1 before this object",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The given array.",
            "type": "Array<any>",
            "description": "The given array."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3239
        },
        "end": {
          "line": 104,
          "column": 44,
          "index": 3279
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "max": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the highest value in the given array. Supports",
          "     * numeric values only.",
          "     *",
          "     * @signature function(arr)",
          "     * @attachStatic {qxWeb, array.max}",
          "     *",
          "     * @param arr {Array} Array to process.",
          "     * @return {Number|undefined} The highest of all values or undefined if array is empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the highest value in the given array. Supports\n numeric values only.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.max}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} Array to process.",
            "paramName": "arr",
            "description": " Array to process.",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number|undefined} The highest of all values or undefined if array is empty.",
            "type": "Number|undefined",
            "description": "The highest of all values or undefined if array is empty."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3614
        },
        "end": {
          "line": 116,
          "column": 26,
          "index": 3636
        }
      },
      "returnType": {
        "type": "Number|undefined"
      },
      "appearsIn": []
    },
    "min": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the lowest value in the given array. Supports",
          "     * numeric values only.",
          "     *",
          "     * @signature function(arr)",
          "     * @attachStatic {qxWeb, array.min}",
          "     *",
          "     * @param arr {Array} Array to process.",
          "     * @return {Number|undefined} The lowest of all values or undefined if array is empty.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the lowest value in the given array. Supports\n numeric values only.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.min}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} Array to process.",
            "paramName": "arr",
            "description": " Array to process.",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number|undefined} The lowest of all values or undefined if array is empty.",
            "type": "Number|undefined",
            "description": "The lowest of all values or undefined if array is empty."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3969
        },
        "end": {
          "line": 128,
          "column": 26,
          "index": 3991
        }
      },
      "returnType": {
        "type": "Number|undefined"
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove an element from the array.",
          "     *",
          "     * @signature function(arr, obj)",
          "     * @attachStatic {qxWeb, array.remove}",
          "     *",
          "     * @param arr {Array} the array",
          "     * @param obj {var} element to be removed from the array",
          "     * @return {var} the removed element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element from the array.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr, obj)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.remove}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          },
          {
            "name": "@param",
            "body": "obj {var} element to be removed from the array",
            "paramName": "obj",
            "description": " element to be removed from the array",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the removed element",
            "type": "var",
            "description": "the removed element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 140,
          "column": 4,
          "index": 4287
        },
        "end": {
          "line": 140,
          "column": 32,
          "index": 4315
        }
      },
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all elements from the array",
          "     *",
          "     * @signature function(arr)",
          "     * @attachStatic {qxWeb, array.removeAll}",
          "     *",
          "     * @param arr {Array} the array",
          "     * @return {Array} empty array",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all elements from the array</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.removeAll}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} the array",
            "paramName": "arr",
            "description": " the array",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} empty array",
            "type": "Array<any>",
            "description": "empty array"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4543
        },
        "end": {
          "line": 151,
          "column": 38,
          "index": 4577
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "unique": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Recreates an array which is free of all duplicate elements from the original.",
          "     * This method do not modifies the original array!",
          "     * Keep in mind that this methods deletes undefined indexes.",
          "     *",
          "     * @signature function(arr)",
          "     * @attachStatic {qxWeb, array.unique}",
          "     *",
          "     * @param arr {Array} Incoming array",
          "     * @return {Array} Returns a copy with no duplicates",
          "     *   or the original array if no duplicates were found.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Recreates an array which is free of all duplicate elements from the original.\n This method do not modifies the original array!\n Keep in mind that this methods deletes undefined indexes.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(arr)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.unique}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "arr {Array} Incoming array",
            "paramName": "arr",
            "description": " Incoming array",
            "type": "Array<any>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Returns a copy with no duplicates\n   or the original array if no duplicates were found.",
            "type": "Array<any>",
            "description": "Returns a copy with no duplicates\n   or the original array if no duplicates were found."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 5052
        },
        "end": {
          "line": 165,
          "column": 32,
          "index": 5080
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "range": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a new array with integers from start to stop incremented or decremented by step.",
          "     *",
          "     * @signature function(start, stop, step)",
          "     * @attachStatic {qxWeb, array.range}",
          "     *",
          "     * @param start {Integer} start of the new array, defaults to 0",
          "     * @param stop {Integer} stop of the new array",
          "     * @param step {Integer} increment / decrement - depends whether you use positive or negative values",
          "     * @return {Array} Returns a new array with integers",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new array with integers from start to stop incremented or decremented by step.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(start, stop, step)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, array.range}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} start of the new array, defaults to 0",
            "paramName": "start",
            "description": " start of the new array, defaults to 0",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "stop {Integer} stop of the new array",
            "paramName": "stop",
            "description": " stop of the new array",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "step {Integer} increment / decrement - depends whether you use positive or negative values",
            "paramName": "step",
            "description": " increment / decrement - depends whether you use positive or negative values",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Returns a new array with integers",
            "type": "Array<any>",
            "description": "Returns a new array with integers"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 5582
        },
        "end": {
          "line": 178,
          "column": 30,
          "index": 5608
        }
      },
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}