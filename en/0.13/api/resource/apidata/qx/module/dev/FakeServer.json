{
  "version": 0.3,
  "lastModified": 1726088851269,
  "lastModifiedIso": "2024-09-11T21:07:31.269Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/module/dev/FakeServer.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 28,
      "column": 0,
      "index": 856
    },
    "end": {
      "line": 145,
      "column": 3,
      "index": 5332
    }
  },
  "className": "qx.module.dev.FakeServer",
  "jsdoc": {
    "raw": [
      "*",
      " * A wrapper around Sinon.JS's FakeXMLHttpRequest and FakeServer features that",
      " * allows quick and simple configuration of mock HTTP backends for testing and",
      " * development.",
      " * Automatically creates URL filtering rules to ensure that only configured",
      " * requests are faked while others will be processed normally by the browser's",
      " * XHR implementation.",
      " *",
      " * @group (IO)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A wrapper around Sinon.JS's FakeXMLHttpRequest and FakeServer features that\n allows quick and simple configuration of mock HTTP backends for testing and\n development.\n Automatically creates URL filtering rules to ensure that only configured\n requests are faked while others will be processed normally by the browser's\n XHR implementation.</p>"
      }
    ],
    "@group": [
      {
        "name": "@group",
        "body": "IO"
      }
    ]
  },
  "statics": {
    "configure": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Configures a set of fake HTTP responses. Each response is defined as a map",
          "     * that must provide the following keys:",
          "     * <ul>",
          "     *   <li><code>method</code> HTTP method to respond to, e.g. <code>PUT</code></li>",
          "     *   <li><code>url</code> URL used to match requests to fake responses. Can be",
          "     *   a RegExp or a String. REST-style parameter placeholders in curly braces",
          "     *   will be replaced with wildcards, e.g. the string \"/resource/{resourceId}\"",
          "     *   is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>",
          "     *   <li><code>response</code> This can be either:",
          "     *     <ul>",
          "     *       <li>a string: This will be the response body, status code will be 200</li>",
          "     *       <li>an array containing the status code, a map of response headers and",
          "     *         the response text, e.g. <code>[200, { \"Content-Type\": \"text/html\" }, \"OK\"]</code>",
          "     *       </li>",
          "     *       <li>a function: This will be called with a FakeXMLHttpRequest object as",
          "     *       the only argument. Its <code>respond</code> method must be called to send a response.",
          "     *       See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.",
          "     *       </li>",
          "     *     </ul>",
          "     *   </li>",
          "     * </ul>",
          "     *",
          "     * @attachStatic {qxWeb, dev.fakeServer.configure}",
          "     * @param responseData {Map[]} An array of response description maps.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Configures a set of fake HTTP responses. Each response is defined as a map\n that must provide the following keys:\n </p>\n<ul>\n   <li><code>method</code> HTTP method to respond to, e.g. <code>PUT</code></li>\n   <li><code>url</code> URL used to match requests to fake responses. Can be\n   a RegExp or a String. REST-style parameter placeholders in curly braces\n   will be replaced with wildcards, e.g. the string \"/resource/{resourceId}\"\n   is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n   <li><code>response</code> This can be either:\n     <ul>\n       <li>a string: This will be the response body, status code will be 200</li>\n       <li>an array containing the status code, a map of response headers and\n         the response text, e.g. <code>[200, { \"Content-Type\": \"text/html\" }, \"OK\"]</code>\n       </li>\n       <li>a function: This will be called with a FakeXMLHttpRequest object as\n       the only argument. Its <code>respond</code> method must be called to send a response.\n       See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n       </li>\n     </ul>\n   </li>\n </ul>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, dev.fakeServer.configure}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "responseData {Map[]} An array of response description maps.",
            "paramName": "responseData",
            "description": " An array of response description maps.",
            "type": "Map[]"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 2323
        },
        "end": {
          "line": 58,
          "column": 5,
          "index": 2417
        }
      },
      "type": "function",
      "params": [
        {
          "name": "responseData",
          "type": "Map[]"
        }
      ],
      "appearsIn": []
    },
    "removeResponse": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes a response that was configured with {@link #configure}",
          "     * @param method {String} HTTP method of the response",
          "     * @param url {String|RegExp} URL of the response",
          "     *",
          "     * @attachStatic {qxWeb, dev.fakeServer.removeResponse}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a response that was configured with {@link #configure}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "method {String} HTTP method of the response",
            "paramName": "method",
            "description": " HTTP method of the response",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "url {String|RegExp} URL of the response",
            "paramName": "url",
            "description": " URL of the response",
            "type": [
              "String",
              "RegExp"
            ]
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, dev.fakeServer.removeResponse}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 2689
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 2791
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "url",
          "type": [
            "String",
            "RegExp"
          ]
        }
      ],
      "appearsIn": []
    },
    "addFilter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a URL filtering function to decide whether a request should be handled",
          "     * by the FakeServer or passed to the regular XMLHttp implementation.",
          "     * See <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>",
          "     * for details.",
          "     *",
          "     * @attachStatic {qxWeb, dev.fakeServer.addFilter}",
          "     * @param filter {Function} URL filter function. Will be called with the",
          "     * following arguments: <code>method</code>, <code>url</code>, <code>async</code>,",
          "     * <code>username</code>, <code>password</code>. Must return <code>true</code>",
          "     * if the request should not be faked.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a URL filtering function to decide whether a request should be handled\n by the FakeServer or passed to the regular XMLHttp implementation.\n See <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\n for details.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, dev.fakeServer.addFilter}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "filter {Function} URL filter function. Will be called with the\n following arguments: <code>method</code>, <code>url</code>, <code>async</code>,\n <code>username</code>, <code>password</code>. Must return <code>true</code>\n if the request should not be faked.",
            "paramName": "filter",
            "description": " URL filter function. Will be called with the\n following arguments: <code>method</code>, <code>url</code>, <code>async</code>,\n <code>username</code>, <code>password</code>. Must return <code>true</code>\n if the request should not be faked.",
            "type": "((...args: any[]) => any)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 3439
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 3521
        }
      },
      "type": "function",
      "params": [
        {
          "name": "filter",
          "type": "((...args: any[]) => any)"
        }
      ],
      "appearsIn": []
    },
    "removeFilter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove a filter that was added with {@link #addFilter}",
          "     * @param filter {Function} filter function to remove",
          "     *",
          "     * @attachStatic {qxWeb, dev.fakeServer.removeFilter}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove a filter that was added with {@link #addFilter}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "filter {Function} filter function to remove",
            "paramName": "filter",
            "description": " filter function to remove",
            "type": "((...args: any[]) => any)"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, dev.fakeServer.removeFilter}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 3729
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3817
        }
      },
      "type": "function",
      "params": [
        {
          "name": "filter",
          "type": "((...args: any[]) => any)"
        }
      ],
      "appearsIn": []
    },
    "respondWith": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Defines a fake XHR response to a matching request.",
          "     *",
          "     * @attachStatic {qxWeb, dev.fakeServer.respondWith}",
          "     * @param method {String} HTTP method to respond to, e.g. \"GET\"",
          "     * @param urlRegExp {RegExp} Request URL must match match this expression",
          "     * @param response {Function|Array|String} Response to send. See",
          "     * <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Defines a fake XHR response to a matching request.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, dev.fakeServer.respondWith}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "method {String} HTTP method to respond to, e.g. \"GET\"",
            "paramName": "method",
            "description": " HTTP method to respond to, e.g. \"GET\"",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "urlRegExp {RegExp} Request URL must match match this expression",
            "paramName": "urlRegExp",
            "description": " Request URL must match match this expression",
            "type": "RegExp"
          },
          {
            "name": "@param",
            "body": "response {Function|Array|String} Response to send. See\n <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.",
            "paramName": "response",
            "description": " Response to send. See\n <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.",
            "type": [
              "Function",
              "Array",
              "String"
            ]
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 106,
          "column": 4,
          "index": 4269
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 4397
        }
      },
      "type": "function",
      "params": [
        {
          "name": "method",
          "type": "string"
        },
        {
          "name": "urlRegExp",
          "type": "RegExp"
        },
        {
          "name": "response",
          "type": [
            "Function",
            "Array",
            "String"
          ]
        }
      ],
      "appearsIn": []
    },
    "getFakeServer": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Creates and configures a FakeServer if necessary and returns it.",
          "     *",
          "     * @attachStatic {qxWeb, dev.fakeServer.getFakeServer}",
          "     * @return {Object} FakeServer object",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates and configures a FakeServer if necessary and returns it.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, dev.fakeServer.getFakeServer}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} FakeServer object",
            "type": "Record<any, any>",
            "description": "FakeServer object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 4600
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 4685
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "restore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Stops the FakeServer and removes all configured responses and/or filters.",
          "     * @attachStatic {qxWeb, dev.fakeServer.restore}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the FakeServer and removes all configured responses and/or filters.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, dev.fakeServer.restore}"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 4843
        },
        "end": {
          "line": 127,
          "column": 5,
          "index": 4909
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}