{
  "version": 0.3,
  "lastModified": 1735383688165,
  "lastModifiedIso": "2024-12-28T11:01:28.165Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/module/event/Orientation.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 26,
      "column": 0,
      "index": 598
    },
    "end": {
      "line": 107,
      "column": 3,
      "index": 2925
    }
  },
  "className": "qx.module.event.Orientation",
  "jsdoc": {
    "raw": [
      "*",
      " * Normalization for orientationchange events",
      " *",
      " * @require(qx.module.Event)",
      " *",
      " * @group (Event_Normalization)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Normalization for orientationchange events</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.module.Event"
      }
    ],
    "@group": [
      {
        "name": "@group",
        "body": "Event_Normalization"
      }
    ]
  },
  "statics": {
    "TYPES": {
      "jsdoc": {
        "raw": [
          "*",
          "     * List of event types to be normalized",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of event types to be normalized</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 31,
          "column": 4,
          "index": 728
        },
        "end": {
          "line": 31,
          "column": 32,
          "index": 756
        }
      },
      "appearsIn": []
    },
    "BIND_METHODS": {
      "jsdoc": {
        "raw": [
          "*",
          "     * List of qx.module.event.Orientation methods to be attached to native",
          "     * event objects",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of qx.module.event.Orientation methods to be attached to native\n event objects</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 893
        },
        "end": {
          "line": 38,
          "column": 65,
          "index": 954
        }
      },
      "appearsIn": []
    },
    "getOrientation": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the current orientation of the viewport in degrees.",
          "     *",
          "     * All possible values and their meaning:",
          "     *",
          "     * * <code>0</code>: \"Portrait\"",
          "     * * <code>-90</code>: \"Landscape (right, screen turned clockwise)\"",
          "     * * <code>90</code>: \"Landscape (left, screen turned counterclockwise)\"",
          "     * * <code>180</code>: \"Portrait (upside-down portrait)\"",
          "     *",
          "     * @return {Number} The current orientation in degrees",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current orientation of the viewport in degrees.\n All possible values and their meaning:</p>\n<ul>\n<li><code>0</code>: \"Portrait\"</li>\n<li><code>-90</code>: \"Landscape (right, screen turned clockwise)\"</li>\n<li><code>90</code>: \"Landscape (left, screen turned counterclockwise)\"</li>\n<li><code>180</code>: \"Portrait (upside-down portrait)\"</li>\n</ul>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The current orientation in degrees",
            "type": "number",
            "description": "The current orientation in degrees"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1416
        },
        "end": {
          "line": 54,
          "column": 5,
          "index": 1472
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "isLandscape": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the viewport orientation is currently in landscape mode.",
          "     *",
          "     * @return {Boolean} <code>true</code> when the viewport orientation",
          "     *     is currently in landscape mode.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the viewport orientation is currently in landscape mode.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the viewport orientation\n     is currently in landscape mode.",
            "type": "boolean",
            "description": "<code>true</code> when the viewport orientation\n     is currently in landscape mode."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1690
        },
        "end": {
          "line": 64,
          "column": 5,
          "index": 1751
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isPortrait": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the viewport orientation is currently in portrait mode.",
          "     *",
          "     * @return {Boolean} <code>true</code> when the viewport orientation",
          "     *     is currently in portrait mode.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the viewport orientation is currently in portrait mode.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the viewport orientation\n     is currently in portrait mode.",
            "type": "boolean",
            "description": "<code>true</code> when the viewport orientation\n     is currently in portrait mode."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 1967
        },
        "end": {
          "line": 74,
          "column": 5,
          "index": 2026
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "normalize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Manipulates the native event object, adding methods if they're not",
          "     * already present",
          "     *",
          "     * @param event {Event} Native event object",
          "     * @param element {Element} DOM element the listener was attached to",
          "     * @param type {String} Event type",
          "     * @return {Event} Normalized event object",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Manipulates the native event object, adding methods if they're not\n already present</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} Native event object",
            "paramName": "event",
            "description": " Native event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "element {Element} DOM element the listener was attached to",
            "paramName": "element",
            "description": " DOM element the listener was attached to",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "type {String} Event type",
            "paramName": "type",
            "description": " Event type",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Event} Normalized event object",
            "type": "Event",
            "description": "Normalized event object"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2377
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 2819
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        },
        {
          "name": "element",
          "type": "Element"
        },
        {
          "name": "type",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Event"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}