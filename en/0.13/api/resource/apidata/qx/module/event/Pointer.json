{
  "version": 0.3,
  "lastModified": 1735222259330,
  "lastModifiedIso": "2024-12-26T14:10:59.330Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/module/event/Pointer.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 34,
      "column": 0,
      "index": 1486
    },
    "end": {
      "line": 160,
      "column": 3,
      "index": 5132
    }
  },
  "className": "qx.module.event.Pointer",
  "jsdoc": {
    "raw": [
      "*",
      " * Normalization for pointer events. Pointer events are hardware-agnostic and",
      " * will be fired regardless of which input type of input device is used (e.g. mouse or touchscreen).",
      " *",
      " * @require(qx.module.Event)",
      " * @require(qx.module.event.Pointer#getPointerType) // static code analysis - this method has to referenced",
      " * @require(qx.module.event.Pointer#getViewportLeft) // static code analysis - this method has to referenced",
      " * @require(qx.module.event.Pointer#getViewportTop) // static code analysis - this method has to referenced",
      " * @require(qx.module.event.Pointer#getDocumentLeft) // static code analysis - this method has to referenced",
      " * @require(qx.module.event.Pointer#getDocumentTop) // static code analysis - this method has to referenced",
      " * @require(qx.module.event.Pointer#getScreenLeft) // static code analysis - this method has to referenced",
      " * @require(qx.module.event.Pointer#getScreenTop) // static code analysis - this method has to referenced",
      " *",
      " * @group (Event_Normalization)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Normalization for pointer events. Pointer events are hardware-agnostic and\n will be fired regardless of which input type of input device is used (e.g. mouse or touchscreen).</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.module.Event"
      },
      {
        "name": "@require",
        "body": "qx.module.event.Pointer#getPointerType"
      },
      {
        "name": "@require",
        "body": "qx.module.event.Pointer#getViewportLeft"
      },
      {
        "name": "@require",
        "body": "qx.module.event.Pointer#getViewportTop"
      },
      {
        "name": "@require",
        "body": "qx.module.event.Pointer#getDocumentLeft"
      },
      {
        "name": "@require",
        "body": "qx.module.event.Pointer#getDocumentTop"
      },
      {
        "name": "@require",
        "body": "qx.module.event.Pointer#getScreenLeft"
      },
      {
        "name": "@require",
        "body": "qx.module.event.Pointer#getScreenTop"
      }
    ],
    "@group": [
      {
        "name": "@group",
        "body": "Event_Normalization"
      }
    ]
  },
  "statics": {
    "TYPES": {
      "jsdoc": {
        "raw": [
          "*",
          "     * List of event types to be normalized",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of event types to be normalized</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 39,
          "column": 4,
          "index": 1612
        },
        "end": {
          "line": 46,
          "column": 5,
          "index": 1750
        }
      },
      "appearsIn": []
    },
    "getPointerType": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the device type which the event triggered. This can be one",
          "     * of the following strings: <code>mouse</code>, <code>pen</code>",
          "     * or <code>touch</code>.",
          "     *",
          "     * @return {String} The type of the pointer.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the device type which the event triggered. This can be one\n of the following strings: <code>mouse</code>, <code>pen</code>\n or <code>touch</code>.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The type of the pointer.",
            "type": "string",
            "description": "The type of the pointer."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 2003
        },
        "end": {
          "line": 58,
          "column": 5,
          "index": 2127
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "getViewportLeft": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the horizontal coordinate at which the event occurred relative",
          "     * to the viewport.",
          "     *",
          "     * @return {Number} The horizontal mouse position",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal coordinate at which the event occurred relative\n to the viewport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position",
            "type": "number",
            "description": "The horizontal mouse position"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 2309
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 2434
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "getViewportTop": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the vertical coordinate at which the event occurred relative",
          "     * to the viewport.",
          "     *",
          "     * @return {Number} The vertical mouse position",
          "     * @signature function()",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical coordinate at which the event occurred relative\n to the viewport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position",
            "type": "number",
            "description": "The vertical mouse position"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2641
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2765
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "getDocumentLeft": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the horizontal position at which the event occurred relative to the",
          "     * left of the document. This property takes into account any scrolling of",
          "     * the page.",
          "     *",
          "     * @return {Number} The horizontal mouse position in the document.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal position at which the event occurred relative to the\n left of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position in the document.",
            "type": "number",
            "description": "The horizontal mouse position in the document."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 3041
        },
        "end": {
          "line": 93,
          "column": 5,
          "index": 3166
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "getDocumentTop": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the vertical position at which the event occurred relative to the",
          "     * top of the document. This property takes into account any scrolling of",
          "     * the page.",
          "     *",
          "     * @return {Number} The vertical mouse position in the document.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical position at which the event occurred relative to the\n top of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position in the document.",
            "type": "number",
            "description": "The vertical mouse position in the document."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 3437
        },
        "end": {
          "line": 105,
          "column": 5,
          "index": 3561
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "getScreenLeft": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the horizontal coordinate at which the event occurred relative to",
          "     * the origin of the screen coordinate system.",
          "     *",
          "     * Note: This value is usually not very useful unless you want to",
          "     * position a native popup window at this coordinate.",
          "     *",
          "     * @return {Number} The horizontal mouse position on the screen.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal coordinate at which the event occurred relative to\n the origin of the screen coordinate system.\n Note: This value is usually not very useful unless you want to\n position a native popup window at this coordinate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal mouse position on the screen.",
            "type": "number",
            "description": "The horizontal mouse position on the screen."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3923
        },
        "end": {
          "line": 119,
          "column": 5,
          "index": 4046
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "getScreenTop": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the vertical coordinate at which the event occurred relative to",
          "     * the origin of the screen coordinate system.",
          "     *",
          "     * Note: This value is usually not very useful unless you want to",
          "     * position a native popup window at this coordinate.",
          "     *",
          "     * @return {Number} The vertical mouse position on the screen.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical coordinate at which the event occurred relative to\n the origin of the screen coordinate system.\n Note: This value is usually not very useful unless you want to\n position a native popup window at this coordinate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical mouse position on the screen.",
            "type": "number",
            "description": "The vertical mouse position on the screen."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4404
        },
        "end": {
          "line": 133,
          "column": 5,
          "index": 4526
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "number"
      },
      "appearsIn": []
    },
    "normalize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Manipulates the native event object, adding methods if they're not",
          "     * already present",
          "     *",
          "     * @param event {Event} Native event object",
          "     * @param element {Element} DOM element the listener was attached to",
          "     * @return {Event} Normalized event object",
          "     * @internal",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Manipulates the native event object, adding methods if they're not\n already present</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} Native event object",
            "paramName": "event",
            "description": " Native event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "element {Element} DOM element the listener was attached to",
            "paramName": "element",
            "description": " DOM element the listener was attached to",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Event} Normalized event object",
            "type": "Event",
            "description": "Normalized event object"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 4838
        },
        "end": {
          "line": 151,
          "column": 5,
          "index": 4992
        }
      },
      "type": "function",
      "params": [
        {
          "name": "event",
          "type": "Event"
        },
        {
          "name": "element",
          "type": "Element"
        }
      ],
      "returnType": {
        "type": "Event"
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}