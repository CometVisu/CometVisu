{
  "className": "qx.module.event.Tap",
  "packageName": "qx.module.event",
  "name": "Tap",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0,
        "index": 1441
      },
      "end": {
        "line": 156,
        "column": 3,
        "index": 4918
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Normalization for tap gesture events. These gestures are based on <a href=\"#Pointer\">Pointer events</a>,\n meaning that they are available on all devices, no matter which input device type is used (e.g. mouse or\n touchscreen).</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.Event"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Tap#getViewportLeft"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Tap#getViewportTop"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Tap#getDocumentLeft"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Tap#getDocumentTop"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Tap#getScreenLeft"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Tap#getScreenTop"
        }
      ],
      "@group": [
        {
          "name": "@group",
          "body": "Event_Normalization"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "TYPES": {
      "location": {
        "start": {
          "line": 39,
          "column": 4,
          "index": 1568
        },
        "end": {
          "line": 39,
          "column": 39,
          "index": 1603
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List of event types to be normalized</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "BIND_METHODS": {
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 1717
        },
        "end": {
          "line": 53,
          "column": 5,
          "index": 1887
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>List methods to be attached to gesture event\n objects</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getViewportLeft": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 2079
        },
        "end": {
          "line": 63,
          "column": 5,
          "index": 2153
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal coordinate at which the event occurred relative\n to the viewport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal contact position",
            "type": "Number",
            "description": " The horizontal contact position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getViewportTop": {
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 2371
        },
        "end": {
          "line": 74,
          "column": 5,
          "index": 2443
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical coordinate at which the event occurred relative\n to the viewport.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical contact position",
            "type": "Number",
            "description": " The vertical contact position"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentLeft": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2730
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2804
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal position at which the event occurred relative to the\n left of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal contact position in the document.",
            "type": "Number",
            "description": " The horizontal contact position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentTop": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 3086
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 3158
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical position at which the event occurred relative to the\n top of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical contact position in the document.",
            "type": "Number",
            "description": " The vertical contact position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenLeft": {
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 3533
        },
        "end": {
          "line": 109,
          "column": 5,
          "index": 3603
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal coordinate at which the event occurred relative to\n the origin of the screen coordinate system.\n Note: This value is usually not very useful unless you want to\n position a native popup window at this coordinate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal contact position on the screen.",
            "type": "Number",
            "description": " The horizontal contact position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenTop": {
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3974
        },
        "end": {
          "line": 122,
          "column": 5,
          "index": 4042
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical coordinate at which the event occurred relative to\n the origin of the screen coordinate system.\n Note: This value is usually not very useful unless you want to\n position a native popup window at this coordinate.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical contact position on the screen.",
            "type": "Number",
            "description": " The vertical contact position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "normalize": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4365
        },
        "end": {
          "line": 147,
          "column": 5,
          "index": 4773
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Manipulates the native event object, adding methods if they're not\n already present</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} Native event object",
            "paramName": "event",
            "description": " Native event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "element {Element} DOM element the listener was attached to",
            "paramName": "element",
            "description": " DOM element the listener was attached to",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Event} Normalized event object",
            "type": "Event",
            "description": " Normalized event object"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 150,
        "column": 2,
        "index": 4785
      },
      "end": {
        "line": 155,
        "column": 3,
        "index": 4913
      }
    }
  },
  "descendants": []
}