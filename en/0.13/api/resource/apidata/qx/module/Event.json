{
  "className": "qx.module.Event",
  "packageName": "qx.module",
  "name": "Event",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 28,
        "column": 0,
        "index": 694
      },
      "end": {
        "line": 725,
        "column": 3,
        "index": 22954
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Support for native and custom events.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.Polyfill"
        },
        {
          "name": "@require",
          "body": "qx.module.Environment"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.module.event.PointerHandler"
        }
      ],
      "@group": [
        {
          "name": "@group",
          "body": "Core"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__normalizations": {
      "location": {
        "start": {
          "line": 35,
          "column": 4,
          "index": 828
        },
        "end": {
          "line": 35,
          "column": 24,
          "index": 848
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event normalization registry</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__hooks": {
      "location": {
        "start": {
          "line": 41,
          "column": 4,
          "index": 919
        },
        "end": {
          "line": 44,
          "column": 5,
          "index": 963
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registry of event hooks</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__isReady": {
      "location": {
        "start": {
          "line": 46,
          "column": 4,
          "index": 970
        },
        "end": {
          "line": 46,
          "column": 20,
          "index": 986
        }
      },
      "type": "variable",
      "access": "private"
    },
    "ready": {
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1160
        },
        "end": {
          "line": 106,
          "column": 5,
          "index": 2675
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes the given function once the document is ready.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} callback function",
            "paramName": "callback",
            "description": " callback function",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$registerEventNormalization": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3325
        },
        "end": {
          "line": 135,
          "column": 5,
          "index": 3782
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers a normalization function for the given event types. Listener\n callbacks for these types will be called with the return value of the\n normalization function instead of the regular event object.\n The normalizer will be called with two arguments: The original event\n object and the element on which the event was triggered</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, $registerEventNormalization}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "types {String[]} List of event types to be normalized. Use an\n asterisk (<code>*</code>) to normalize all event types",
            "paramName": "types",
            "description": " List of event types to be normalized. Use an\n asterisk (<code>*</code>) to normalize all event types",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "normalizer {Function} Normalizer function",
            "paramName": "normalizer",
            "description": " Normalizer function",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$unregisterEventNormalization": {
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 4051
        },
        "end": {
          "line": 155,
          "column": 5,
          "index": 4428
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Unregisters a normalization function from the given event types.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, $unregisterEventNormalization}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "types {String[]} List of event types",
            "paramName": "types",
            "description": " List of event types",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "normalizer {Function} Normalizer function",
            "paramName": "normalizer",
            "description": " Normalizer function",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$getEventNormalizationRegistry": {
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 4628
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 4715
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all registered event normalizers</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, $getEventNormalizationRegistry}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of event types/normalizer functions",
            "type": "Map",
            "description": " Map of event types/normalizer functions"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$registerEventHook": {
      "location": {
        "start": {
          "line": 176,
          "column": 4,
          "index": 5099
        },
        "end": {
          "line": 203,
          "column": 5,
          "index": 5943
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers an event hook for the given event types.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, $registerEventHook}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "types {String[]} List of event types",
            "paramName": "types",
            "description": " List of event types",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "registerHook {Function} Hook function to be called on event registration",
            "paramName": "registerHook",
            "description": " Hook function to be called on event registration",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "unregisterHook {Function?} Hook function to be called on event deregistration",
            "paramName": "unregisterHook",
            "description": " Hook function to be called on event deregistration",
            "optional": true,
            "type": "Function"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$unregisterEventHook": {
      "location": {
        "start": {
          "line": 214,
          "column": 4,
          "index": 6326
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 7003
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Unregisters a hook from the given event types.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, $unregisterEventHooks}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "types {String[]} List of event types",
            "paramName": "types",
            "description": " List of event types",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "registerHook {Function} Hook function to be called on event registration",
            "paramName": "registerHook",
            "description": " Hook function to be called on event registration",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "unregisterHook {Function?} Hook function to be called on event deregistration",
            "paramName": "unregisterHook",
            "description": " Hook function to be called on event deregistration",
            "optional": true,
            "type": "Function"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$getEventHookRegistry": {
      "location": {
        "start": {
          "line": 244,
          "column": 4,
          "index": 7212
        },
        "end": {
          "line": 246,
          "column": 5,
          "index": 7281
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns all registered event hooks</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, $getEventHookRegistry}"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of event types/registration hook functions",
            "type": "Map",
            "description": " Map of event types/registration hook functions"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "on": {
      "location": {
        "start": {
          "line": 263,
          "column": 4,
          "index": 7892
        },
        "end": {
          "line": 329,
          "column": 5,
          "index": 10020
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers a listener for the given event type on each item in the\n collection. This can be either native or custom events.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Type of the event to listen for",
            "paramName": "type",
            "description": " Type of the event to listen for",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} Listener callback",
            "paramName": "listener",
            "description": " Listener callback",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Context the callback function will be executed in.\n Default: The element on which the listener was registered",
            "paramName": "context",
            "description": " Context the callback function will be executed in.\n Default: The element on which the listener was registered",
            "optional": true,
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "useCapture {Boolean?} Attach the listener to the capturing\n phase if true",
            "paramName": "useCapture",
            "description": " Attach the listener to the capturing\n phase if true",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining",
            "type": "qxWeb",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "off": {
      "location": {
        "start": {
          "line": 343,
          "column": 4,
          "index": 10472
        },
        "end": {
          "line": 424,
          "column": 5,
          "index": 13040
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Unregisters event listeners for the given type from each element in the\n collection.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Type of the event",
            "paramName": "type",
            "description": " Type of the event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} Listener callback",
            "paramName": "listener",
            "description": " Listener callback",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Listener callback context",
            "paramName": "context",
            "description": " Listener callback context",
            "optional": true,
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "useCapture {Boolean?} Attach the listener to the capturing\n phase if true",
            "paramName": "useCapture",
            "description": " Attach the listener to the capturing\n phase if true",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining",
            "type": "qxWeb",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "allOff": {
      "location": {
        "start": {
          "line": 434,
          "column": 4,
          "index": 13336
        },
        "end": {
          "line": 436,
          "column": 5,
          "index": 13405
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all event listeners (or all listeners for a given type) from the\n collection.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String?} Event type. All listeners will be removed if this is undefined.",
            "paramName": "type",
            "description": " Event type. All listeners will be removed if this is undefined.",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining",
            "type": "qxWeb",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "offById": {
      "location": {
        "start": {
          "line": 443,
          "column": 4,
          "index": 13586
        },
        "end": {
          "line": 451,
          "column": 5,
          "index": 13788
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the listener with the given id.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Number} The id of the listener to remove",
            "paramName": "id",
            "description": " The id of the listener to remove",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining.",
            "type": "qxWeb",
            "description": " The collection for chaining."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "emit": {
      "location": {
        "start": {
          "line": 462,
          "column": 4,
          "index": 14073
        },
        "end": {
          "line": 470,
          "column": 5,
          "index": 14275
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire an event of the given type.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type",
            "paramName": "type",
            "description": " Event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var?} Optional data that will be passed to the listener\n callback function.",
            "paramName": "data",
            "description": " Optional data that will be passed to the listener\n callback function.",
            "optional": true,
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining",
            "type": "qxWeb",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "once": {
      "location": {
        "start": {
          "line": 482,
          "column": 4,
          "index": 14719
        },
        "end": {
          "line": 490,
          "column": 5,
          "index": 14985
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Attaches a listener for the given event that will be executed only once.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Type of the event to listen for",
            "paramName": "type",
            "description": " Type of the event to listen for",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} Listener callback",
            "paramName": "listener",
            "description": " Listener callback",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Context the callback function will be executed in.\n Default: The element on which the listener was registered",
            "paramName": "context",
            "description": " Context the callback function will be executed in.\n Default: The element on which the listener was registered",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining",
            "type": "qxWeb",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasListener": {
      "location": {
        "start": {
          "line": 505,
          "column": 4,
          "index": 15636
        },
        "end": {
          "line": 541,
          "column": 5,
          "index": 16665
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if one or more listeners for the given event type are attached to\n the first element in the collection.\n<em>Important:</em> Make sure you are handing in the <em>identical</em> context object to get\n the correct result. Especially when using a collection instance this is a common pitfall.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type, e.g. <code>mousedown</code>",
            "paramName": "type",
            "description": " Event type, e.g. <code>mousedown</code>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function?} Event listener to check for.",
            "paramName": "listener",
            "description": " Event listener to check for.",
            "optional": true,
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} Context object listener to check for.",
            "paramName": "context",
            "description": " Context object listener to check for.",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if one or more listeners are attached",
            "type": "Boolean",
            "description": " <code>true</code> if one or more listeners are attached"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "copyEventsTo": {
      "location": {
        "start": {
          "line": 550,
          "column": 4,
          "index": 16909
        },
        "end": {
          "line": 592,
          "column": 5,
          "index": 18450
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Copies any event listeners that are attached to the elements in the\n collection to the provided target element</p>"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} Element to attach the copied listeners to",
            "paramName": "target",
            "description": " Element to attach the copied listeners to",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hover": {
      "location": {
        "start": {
          "line": 605,
          "column": 4,
          "index": 18843
        },
        "end": {
          "line": 613,
          "column": 5,
          "index": 19058
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Bind one or two callbacks to the collection.\n If only the first callback is defined the collection\n does react on 'pointerover' only.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callbackIn {Function} callback when hovering over",
            "paramName": "callbackIn",
            "description": " callback when hovering over",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "callbackOut {Function?} callback when hovering out",
            "paramName": "callbackOut",
            "description": " callback when hovering out",
            "optional": true,
            "type": "Function"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining",
            "type": "qxWeb",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onMatchTarget": {
      "location": {
        "start": {
          "line": 629,
          "column": 4,
          "index": 19836
        },
        "end": {
          "line": 667,
          "column": 5,
          "index": 21074
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a listener for the given type and checks if the target fulfills the selector check.\n If the check is successful the callback is executed with the target and event as arguments.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "eventType {String} name of the event to watch out for (attached to the document object)",
            "paramName": "eventType",
            "description": " name of the event to watch out for (attached to the document object)",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {String|Element|Element[]|qxWeb} Selector expression, DOM element,\n Array of DOM elements or collection",
            "paramName": "target",
            "description": " Selector expression, DOM element,\n Array of DOM elements or collection",
            "type": [
              "String",
              "Element",
              {
                "type": "Element",
                "dimensions": 2
              },
              "qxWeb"
            ]
          },
          {
            "name": "@param",
            "body": "callback {Function} function to call if the selector matches.\n The callback will get the target as qxWeb collection and the event as arguments",
            "paramName": "callback",
            "description": " function to call if the selector matches.\n The callback will get the target as qxWeb collection and the event as arguments",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} optional context object to call the callback",
            "paramName": "context",
            "description": " optional context object to call the callback",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining",
            "type": "qxWeb",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "offMatchTarget": {
      "location": {
        "start": {
          "line": 681,
          "column": 4,
          "index": 21564
        },
        "end": {
          "line": 710,
          "column": 5,
          "index": 22372
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a listener for the given type and selector check.</p>"
          }
        ],
        "@attach": [
          {
            "name": "@attach",
            "body": "{qxWeb}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "eventType {String} name of the event to remove for",
            "paramName": "eventType",
            "description": " name of the event to remove for",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {String|Element|Element[]|qxWeb} Selector expression, DOM element,\n Array of DOM elements or collection",
            "paramName": "target",
            "description": " Selector expression, DOM element,\n Array of DOM elements or collection",
            "type": [
              "String",
              "Element",
              {
                "type": "Element",
                "dimensions": 2
              },
              "qxWeb"
            ]
          },
          {
            "name": "@param",
            "body": "callback {Function} function to remove",
            "paramName": "callback",
            "description": " function to remove",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {Object?} optional context object to remove",
            "paramName": "context",
            "description": " optional context object to remove",
            "optional": true,
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxWeb} The collection for chaining",
            "type": "qxWeb",
            "description": " The collection for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 713,
        "column": 2,
        "index": 22381
      },
      "end": {
        "line": 724,
        "column": 3,
        "index": 22950
      }
    }
  },
  "descendants": []
}