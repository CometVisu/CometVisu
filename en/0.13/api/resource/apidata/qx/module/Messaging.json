{
  "version": 0.3,
  "lastModified": 1729101022564,
  "lastModifiedIso": "2024-10-16T17:50:22.564Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/module/Messaging.js",
  "type": "bootstrap",
  "location": {
    "start": {
      "line": 31,
      "column": 0,
      "index": 966
    },
    "end": {
      "line": 87,
      "column": 3,
      "index": 3044
    }
  },
  "className": "qx.module.Messaging",
  "jsdoc": {
    "raw": [
      "*",
      " * Define messages to react on certain channels.",
      " *",
      " * The channel names will be used in the q.messaging.on method to define handlers which will",
      " * be called on certain channels and routes. The q.messaging.emit method can be used",
      " * to execute a given route on a channel. q.messaging.onAny defines a handler on any channel.",
      " *",
      " * @require(qx.event.Messaging#on)",
      " * @require(qx.event.Messaging#onAny)",
      " * @require(qx.event.Messaging#remove)",
      " * @require(qx.event.Messaging#emit)",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>Define messages to react on certain channels.\n The channel names will be used in the q.messaging.on method to define handlers which will\n be called on certain channels and routes. The q.messaging.emit method can be used\n to execute a given route on a channel. q.messaging.onAny defines a handler on any channel.</p>"
      }
    ],
    "@require": [
      {
        "name": "@require",
        "body": "qx.event.Messaging#on"
      },
      {
        "name": "@require",
        "body": "qx.event.Messaging#onAny"
      },
      {
        "name": "@require",
        "body": "qx.event.Messaging#remove"
      },
      {
        "name": "@require",
        "body": "qx.event.Messaging#emit"
      }
    ]
  },
  "statics": {
    "on": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a route handler for the given channel. The route is called",
          "     * if the {@link #emit} method finds a match.",
          "     *",
          "     * @attachStatic{qxWeb, messaging.on}",
          "     * @param channel {String} The channel of the message.",
          "     * @param type {String|RegExp} The type, used for checking if the executed path matches.",
          "     * @param handler {Function} The handler to call if the route matches the executed path.",
          "     * @param scope {var ? null} The scope of the handler.",
          "     * @return {String} The id of the route used to remove the route.",
          "     * @signature function(channel, type, handler, scope)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a route handler for the given channel. The route is called\n if the {@link #emit} method finds a match.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, messaging.on}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel of the message.",
            "paramName": "channel",
            "description": " The channel of the message.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "type {String|RegExp} The type, used for checking if the executed path matches.",
            "paramName": "type",
            "description": " The type, used for checking if the executed path matches.",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "handler {Function} The handler to call if the route matches the executed path.",
            "paramName": "handler",
            "description": " The handler to call if the route matches the executed path.",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "scope {var ? null} The scope of the handler.",
            "paramName": "scope",
            "description": " The scope of the handler.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The id of the route used to remove the route.",
            "type": "string",
            "description": "The id of the route used to remove the route."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(channel, type, handler, scope)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1646
        },
        "end": {
          "line": 45,
          "column": 12,
          "index": 1654
        }
      },
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "onAny": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a handler for the \"any\" channel. The \"any\" channel is called",
          "     * before all other channels.",
          "     *",
          "     * @attachStatic{qxWeb, messaging.onAny}",
          "     * @param type {String|RegExp} The route, used for checking if the executed path matches",
          "     * @param handler {Function} The handler to call if the route matches the executed path",
          "     * @param scope {var ? null} The scope of the handler.",
          "     * @return {String} The id of the route used to remove the route.",
          "     * @signature function(type, handler, scope)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a handler for the \"any\" channel. The \"any\" channel is called\n before all other channels.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, messaging.onAny}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String|RegExp} The route, used for checking if the executed path matches",
            "paramName": "type",
            "description": " The route, used for checking if the executed path matches",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "handler {Function} The handler to call if the route matches the executed path",
            "paramName": "handler",
            "description": " The handler to call if the route matches the executed path",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "scope {var ? null} The scope of the handler.",
            "paramName": "scope",
            "description": " The scope of the handler.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The id of the route used to remove the route.",
            "type": "string",
            "description": "The id of the route used to remove the route."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(type, handler, scope)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 2199
        },
        "end": {
          "line": 58,
          "column": 15,
          "index": 2210
        }
      },
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes a registered listener by the given id.",
          "     *",
          "     * @attachStatic{qxWeb, messaging.remove}",
          "     * @param id {String} The id of the registered listener.",
          "     * @signature function(id)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a registered listener by the given id.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, messaging.remove}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id of the registered listener.",
            "paramName": "id",
            "description": " The id of the registered listener.",
            "type": "string"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(id)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 2432
        },
        "end": {
          "line": 67,
          "column": 16,
          "index": 2444
        }
      },
      "appearsIn": []
    },
    "emit": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sends a message on the given channel and informs all matching route handlers.",
          "     *",
          "     * @attachStatic{qxWeb, messaging.emit}",
          "     * @param channel {String} The channel of the message.",
          "     * @param path {String} The path to execute",
          "     * @param params {Map} The given parameters that should be propagated",
          "     * @param customData {var} The given custom data that should be propagated",
          "     * @signature function(channel, path, params, customData)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a message on the given channel and informs all matching route handlers.</p>"
          }
        ],
        "@attachStatic": [
          {
            "name": "@attachStatic",
            "body": "{qxWeb, messaging.emit}"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel of the message.",
            "paramName": "channel",
            "description": " The channel of the message.",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "path {String} The path to execute",
            "paramName": "path",
            "description": " The path to execute",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(channel, path, params, customData)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2925
        },
        "end": {
          "line": 79,
          "column": 14,
          "index": 2935
        }
      },
      "appearsIn": []
    }
  },
  "members": {},
  "properties": {}
}