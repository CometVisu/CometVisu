{
  "version": 0.3,
  "lastModified": 1726088852549,
  "lastModifiedIso": "2024-09-11T21:07:32.549Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/html/Node.js",
  "type": "class",
  "location": {
    "start": {
      "line": 39,
      "column": 0,
      "index": 1293
    },
    "end": {
      "line": 1747,
      "column": 3,
      "index": 49001
    }
  },
  "className": "qx.html.Node",
  "jsdoc": {
    "raw": [
      "*",
      " * High-performance, high-level DOM element creation and management.",
      " *",
      " * Mirrors the DOM structure of Node (see also Element and Text) so to provide",
      " * DOM insertion and modification with advanced logic to reduce the real transactions.",
      " *",
      " * Each child itself also has got some powerful methods to control its",
      " * position:",
      " * {@link #getParent}, {@link #free},",
      " * {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},",
      " * {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},",
      " *",
      " * NOTE: Instances of this class must be disposed of after use",
      " *",
      " * NOTE:: This class used to require `qx.module.Animation` but that brings in a huge",
      " * list of dependencies, so the require has been moved to the `qx.application.AbstractGui`",
      " * class",
      " *",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>High-performance, high-level DOM element creation and management.\n Mirrors the DOM structure of Node (see also Element and Text) so to provide\n DOM insertion and modification with advanced logic to reduce the real transactions.\n Each child itself also has got some powerful methods to control its\n position:\n {@link #getParent}, {@link #free},\n {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},\n NOTE: Instances of this class must be disposed of after use\n NOTE:: This class used to require <code>qx.module.Animation</code> but that brings in a huge\n list of dependencies, so the require has been moved to the <code>qx.application.AbstractGui</code>\n class</p>"
      }
    ]
  },
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "nodeName"
      }
    ],
    "location": {
      "start": {
        "line": 49,
        "column": 2,
        "index": 1564
      },
      "end": {
        "line": 52,
        "column": 3,
        "index": 1633
      }
    }
  },
  "statics": {
    "fromDomNode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Finds the Widget for a given DOM element",
          "     *",
          "     * @param domElement {DOM} the DOM element",
          "     * @return {qx.ui.core.Widget} the Widget that created the DOM element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the Widget for a given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domElement {DOM} the DOM element",
            "paramName": "domElement",
            "description": " the DOM element",
            "type": "DOM"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} the Widget that created the DOM element",
            "type": "qx.ui.core.Widget",
            "description": "the Widget that created the DOM element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 67,
          "column": 4,
          "index": 2030
        },
        "end": {
          "line": 75,
          "column": 5,
          "index": 2332
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domNode"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": []
    },
    "toVirtualNode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Converts a DOM node into a qx.html.Node, providing the existing instance if",
          "     * there is one",
          "     *",
          "     * @param {Node} domNode",
          "     * @returns {qx.html.Node}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a DOM node into a qx.html.Node, providing the existing instance if\n there is one</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{Node} domNode",
            "paramName": "domNode",
            "description": "",
            "type": "qx.html.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Node}",
            "type": "qx.html.Node",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2525
        },
        "end": {
          "line": 96,
          "column": 5,
          "index": 2814
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domNode",
          "type": "qx.html.Node"
        }
      ],
      "returnType": {
        "type": "qx.html.Node"
      },
      "appearsIn": []
    }
  },
  "properties": {
    "visible": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3600
        },
        "end": {
          "line": 124,
          "column": 5,
          "index": 3739
        }
      },
      "json": {
        "init": true,
        "nullable": true,
        "check": "Boolean",
        "apply": "_applyVisible",
        "event": "changeVisible"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Controls whether the element is visible which means that a previously applied",
          "     * CSS style of display=none gets removed and the element will inserted into the DOM,",
          "     * when this had not already happened before.",
          "     *",
          "     * If the element already exists in the DOM then it will kept in DOM, but configured",
          "     * hidden using a CSS style of display=none.",
          "     *",
          "     * Please note: This does not control the visibility or parent inclusion recursively.",
          "     *",
          "     * @type {Boolean} Whether the element should be visible in the render result",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Controls whether the element is visible which means that a previously applied\n CSS style of display=none gets removed and the element will inserted into the DOM,\n when this had not already happened before.\n If the element already exists in the DOM then it will kept in DOM, but configured\n hidden using a CSS style of display=none.\n Please note: This does not control the visibility or parent inclusion recursively.</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the element should be visible in the render result"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "_nodeName": {
      "jsdoc": {
        "raw": [
          "* @type {String} the name of the node "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} the name of the node"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 141,
          "column": 4,
          "index": 4198
        },
        "end": {
          "line": 141,
          "column": 19,
          "index": 4213
        }
      },
      "appearsIn": []
    },
    "_domNode": {
      "jsdoc": {
        "raw": [
          "* @type {Node} DOM node of this object "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Node} DOM node of this object"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 4268
        },
        "end": {
          "line": 144,
          "column": 18,
          "index": 4282
        }
      },
      "appearsIn": []
    },
    "_parent": {
      "jsdoc": {
        "raw": [
          "* @type {qx.html.Element} parent element "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.html.Element} parent element"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 147,
          "column": 4,
          "index": 4339
        },
        "end": {
          "line": 147,
          "column": 17,
          "index": 4352
        }
      },
      "appearsIn": []
    },
    "_qxObject": {
      "jsdoc": {
        "raw": [
          "* @type {qx.core.Object} the Qooxdoo object this node is attached to "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.core.Object} the Qooxdoo object this node is attached to"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 150,
          "column": 4,
          "index": 4437
        },
        "end": {
          "line": 150,
          "column": 19,
          "index": 4452
        }
      },
      "appearsIn": []
    },
    "_included": {
      "jsdoc": {
        "raw": [
          "* @type {Boolean} Whether the element should be included in the render result "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Whether the element should be included in the render result"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4546
        },
        "end": {
          "line": 153,
          "column": 19,
          "index": 4561
        }
      },
      "appearsIn": []
    },
    "_children": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 4568
        },
        "end": {
          "line": 155,
          "column": 19,
          "index": 4583
        }
      },
      "appearsIn": []
    },
    "_modifiedChildren": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4589
        },
        "end": {
          "line": 156,
          "column": 27,
          "index": 4612
        }
      },
      "appearsIn": []
    },
    "_propertyJobs": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 158,
          "column": 4,
          "index": 4619
        },
        "end": {
          "line": 158,
          "column": 23,
          "index": 4638
        }
      },
      "appearsIn": []
    },
    "_properties": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4644
        },
        "end": {
          "line": 159,
          "column": 21,
          "index": 4661
        }
      },
      "appearsIn": []
    },
    "__eventValues": {
      "jsdoc": {
        "raw": [
          "* @type {Map} map of event handlers "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} map of event handlers"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 162,
          "column": 4,
          "index": 4713
        },
        "end": {
          "line": 162,
          "column": 23,
          "index": 4732
        }
      },
      "appearsIn": []
    },
    "connectObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Connects a widget to this element, and to the DOM element in this Element.  They",
          "     * remain associated until disposed or disconnectObject is called",
          "     *",
          "     * @param qxObject {qx.core.Object} the object to associate",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Connects a widget to this element, and to the DOM element in this Element.  They\n remain associated until disposed or disconnectObject is called</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "qxObject {qx.core.Object} the object to associate",
            "paramName": "qxObject",
            "description": " the object to associate",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 4984
        },
        "end": {
          "line": 194,
          "column": 5,
          "index": 5763
        }
      },
      "type": "function",
      "params": [
        {
          "name": "qxObject",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "disconnectObject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disconnects a widget from this element and the DOM element.  The DOM element remains",
          "     * untouched, except that it can no longer be used to find the Widget.",
          "     *",
          "     * @param qxObject {qx.core.Object} the Widget",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disconnects a widget from this element and the DOM element.  The DOM element remains\n untouched, except that it can no longer be used to find the Widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "qxObject {qx.core.Object} the Widget",
            "paramName": "qxObject",
            "description": " the Widget",
            "type": "qx.core.Object"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 202,
          "column": 4,
          "index": 6011
        },
        "end": {
          "line": 224,
          "column": 5,
          "index": 6727
        }
      },
      "type": "function",
      "params": [
        {
          "name": "qxObject",
          "type": "qx.core.Object"
        }
      ],
      "appearsIn": []
    },
    "_createDomElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper to generate the DOM element",
          "     *",
          "     * @return {Element} DOM element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper to generate the DOM element</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} DOM element",
            "type": "qx.html.Element",
            "description": "DOM element"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 231,
          "column": 4,
          "index": 6845
        },
        "end": {
          "line": 235,
          "column": 5,
          "index": 6977
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "serialize": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Serializes the virtual DOM element to a string",
          "     *",
          "     * @param pretty {Boolean?} whether to pretty print the output. Defaults to `false`",
          "     * @return {String} the serialised version",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Serializes the virtual DOM element to a string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pretty {Boolean?} whether to pretty print the output. Defaults to <code>false</code>",
            "paramName": "pretty",
            "description": " whether to pretty print the output. Defaults to <code>false</code>",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the serialised version",
            "type": "string",
            "description": "the serialised version"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 243,
          "column": 4,
          "index": 7196
        },
        "end": {
          "line": 248,
          "column": 5,
          "index": 7397
        }
      },
      "type": "function",
      "params": [
        {
          "name": "pretty",
          "type": "Boolean",
          "optional": true
        }
      ],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "_serializeImpl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Serializes the virtual DOM element to a writer; the `writer` function accepts",
          "     *  an varargs, which can be joined with an empty string or streamed.",
          "     *",
          "     * @param serializer {qx.html.Serializer} the serializer",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Serializes the virtual DOM element to a writer; the <code>writer</code> function accepts\n  an varargs, which can be joined with an empty string or streamed.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "serializer {qx.html.Serializer} the serializer",
            "paramName": "serializer",
            "description": " the serializer",
            "type": "qx.html.Serializer"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 256,
          "column": 4,
          "index": 7647
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 7782
        }
      },
      "type": "function",
      "params": [
        {
          "name": "serializer",
          "type": "qx.html.Serializer"
        }
      ],
      "appearsIn": []
    },
    "useNode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Uses an existing element instead of creating one. This may be interesting",
          "     * when the DOM element is directly needed to add content etc.",
          "     *",
          "     * @param domNode {Node} DOM Node to reuse",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Uses an existing element instead of creating one. This may be interesting\n when the DOM element is directly needed to add content etc.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domNode {Node} DOM Node to reuse",
            "paramName": "domNode",
            "description": " DOM Node to reuse",
            "type": "qx.html.Node"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 268,
          "column": 4,
          "index": 8007
        },
        "end": {
          "line": 337,
          "column": 5,
          "index": 10195
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domNode",
          "type": "qx.html.Node"
        }
      ],
      "appearsIn": []
    },
    "_connectDomNode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Connects a DOM element to this Node; if this Node is already connected to a Widget",
          "     * then the Widget is also connected.",
          "     *",
          "     * @param domNode {DOM} the DOM Node to associate",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Connects a DOM element to this Node; if this Node is already connected to a Widget\n then the Widget is also connected.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domNode {DOM} the DOM Node to associate",
            "paramName": "domNode",
            "description": " the DOM Node to associate",
            "type": "DOM"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 345,
          "column": 4,
          "index": 10411
        },
        "end": {
          "line": 362,
          "column": 5,
          "index": 11048
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domNode",
          "type": "DOM"
        }
      ],
      "appearsIn": []
    },
    "_disconnectDomNode": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disconnects the DOM node",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disconnects the DOM node</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 367,
          "column": 4,
          "index": 11103
        },
        "end": {
          "line": 372,
          "column": 5,
          "index": 11289
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "isInDocument": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the DOM node has been created and is in the document",
          "     *",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the DOM node has been created and is in the document</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 379,
          "column": 4,
          "index": 11420
        },
        "end": {
          "line": 395,
          "column": 5,
          "index": 11779
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "updateObjectId": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Updates the Object ID on the element to match the QxObjectId",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Updates the Object ID on the element to match the QxObjectId</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 400,
          "column": 4,
          "index": 11870
        },
        "end": {
          "line": 410,
          "column": 5,
          "index": 12151
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_cascadeQxObjectIdChanges": {
      "jsdoc": {
        "raw": [
          "*",
          "     * @Override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 415,
          "column": 4,
          "index": 12191
        },
        "end": {
          "line": 420,
          "column": 5,
          "index": 12362
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MObjectId"
      ]
    },
    "_scheduleChildrenUpdate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Add the element to the global modification list.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add the element to the global modification list.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 432,
          "column": 4,
          "index": 12642
        },
        "end": {
          "line": 443,
          "column": 5,
          "index": 12923
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_flush": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Syncs data of an HtmlElement object to the DOM.",
          "     *",
          "     * This is just a public wrapper around `flush`, because the scope has changed",
          "     *",
          "     * @deprecated {6.0} Please use `.flush()` instead",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Syncs data of an HtmlElement object to the DOM.\n This is just a public wrapper around <code>flush</code>, because the scope has changed</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use <code>.flush()</code> instead"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 452,
          "column": 4,
          "index": 13153
        },
        "end": {
          "line": 454,
          "column": 5,
          "index": 13189
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "flush": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Syncs data of an HtmlElement object to the DOM.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Syncs data of an HtmlElement object to the DOM.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 460,
          "column": 4,
          "index": 13274
        },
        "end": {
          "line": 498,
          "column": 5,
          "index": 14152
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "isRoot": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns this element's root flag",
          "     *",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns this element's root flag</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 505,
          "column": 4,
          "index": 14247
        },
        "end": {
          "line": 507,
          "column": 5,
          "index": 14341
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "isInRoot": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether this element is inside a root element",
          "     *",
          "     * @return {Boolean}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether this element is inside a root element</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "boolean",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 514,
          "column": 4,
          "index": 14457
        },
        "end": {
          "line": 523,
          "column": 5,
          "index": 14633
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_willBeSeeable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Walk up the internal children hierarchy and",
          "     * look if one of the children is marked as root.",
          "     *",
          "     * This method is quite performance hungry as it",
          "     * really walks up recursively.",
          "     * @return {Boolean} <code>true</code> if the element will be seeable",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Walk up the internal children hierarchy and\n look if one of the children is marked as root.\n This method is quite performance hungry as it\n really walks up recursively.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the element will be seeable",
            "type": "boolean",
            "description": "<code>true</code> if the element will be seeable"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 533,
          "column": 4,
          "index": 14931
        },
        "end": {
          "line": 553,
          "column": 5,
          "index": 15326
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_insertChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Append all child nodes to the DOM",
          "     * element. This function is used when the element is initially",
          "     * created. After this initial apply {@link #_syncChildren} is used",
          "     * instead.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Append all child nodes to the DOM\n element. This function is used when the element is initially\n created. After this initial apply {@link #_syncChildren} is used\n instead.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 568,
          "column": 4,
          "index": 15761
        },
        "end": {
          "line": 595,
          "column": 5,
          "index": 16517
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_syncChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Synchronize internal children hierarchy to the DOM. This is used",
          "     * for further runtime updates after the element has been created",
          "     * initially.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Synchronize internal children hierarchy to the DOM. This is used\n for further runtime updates after the element has been created\n initially.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 603,
          "column": 4,
          "index": 16707
        },
        "end": {
          "line": 672,
          "column": 5,
          "index": 18624
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_copyData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Copies data between the internal representation and the DOM. This",
          "     * simply copies all the data and only works well directly after",
          "     * element creation. After this the data must be synced using {@link #_syncData}",
          "     *",
          "     * @param fromMarkup {Boolean} Whether the copy should respect styles",
          "     *   given from markup",
          "     * @param propertiesFromDom {Boolean} whether the copy should respect the property",
          "     *  values in the dom",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Copies data between the internal representation and the DOM. This\n simply copies all the data and only works well directly after\n element creation. After this the data must be synced using {@link #_syncData}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromMarkup {Boolean} Whether the copy should respect styles\n   given from markup",
            "paramName": "fromMarkup",
            "description": " Whether the copy should respect styles\n   given from markup",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "propertiesFromDom {Boolean} whether the copy should respect the property\n  values in the dom",
            "paramName": "propertiesFromDom",
            "description": " whether the copy should respect the property\n  values in the dom",
            "type": "boolean"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 684,
          "column": 4,
          "index": 19095
        },
        "end": {
          "line": 721,
          "column": 5,
          "index": 20324
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fromMarkup",
          "type": "boolean"
        },
        {
          "name": "propertiesFromDom",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "_syncData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Synchronizes data between the internal representation and the DOM. This",
          "     * is the counterpart of {@link #_copyData} and is used for further updates",
          "     * after the element has been created.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Synchronizes data between the internal representation and the DOM. This\n is the counterpart of {@link #_copyData} and is used for further updates\n after the element has been created.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 729,
          "column": 4,
          "index": 20556
        },
        "end": {
          "line": 742,
          "column": 5,
          "index": 20903
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_addChildImpl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for all children addition needs",
          "     *",
          "     * @param child {var} the element to add",
          "     * @throws {Error} if the given element is already a child",
          "     *     of this element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for all children addition needs</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {var} the element to add",
            "paramName": "child",
            "description": " the element to add",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the given element is already a child\n     of this element",
            "type": "Error",
            "description": " if the given element is already a child\n     of this element"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 757,
          "column": 4,
          "index": 21325
        },
        "end": {
          "line": 783,
          "column": 5,
          "index": 21951
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "var"
        }
      ],
      "appearsIn": []
    },
    "_removeChildImpl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for all children removal needs",
          "     *",
          "     * @param child {qx.html.Element} the removed element",
          "     * @throws {Error} if the given element is not a child",
          "     *     of this element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for all children removal needs</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the removed element",
            "paramName": "child",
            "description": " the removed element",
            "type": "qx.html.Element"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the given element is not a child\n     of this element",
            "type": "Error",
            "description": " if the given element is not a child\n     of this element"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 792,
          "column": 4,
          "index": 22179
        },
        "end": {
          "line": 804,
          "column": 5,
          "index": 22484
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.html.Element"
        }
      ],
      "appearsIn": []
    },
    "_moveChildImpl": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Internal helper for all children move needs",
          "     *",
          "     * @param child {qx.html.Element} the moved element",
          "     * @throws {Error} if the given element is not a child",
          "     *     of this element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper for all children move needs</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the moved element",
            "paramName": "child",
            "description": " the moved element",
            "type": "qx.html.Element"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the given element is not a child\n     of this element",
            "type": "Error",
            "description": " if the given element is not a child\n     of this element"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 813,
          "column": 4,
          "index": 22707
        },
        "end": {
          "line": 822,
          "column": 5,
          "index": 22941
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.html.Element"
        }
      ],
      "appearsIn": []
    },
    "getChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a copy of the internal children structure.",
          "     *",
          "     * Please do not modify the array in place. If you need",
          "     * to work with the data in such a way make yourself",
          "     * a copy of the data first.",
          "     *",
          "     * @return {Array} the children list",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a copy of the internal children structure.\n Please do not modify the array in place. If you need\n to work with the data in such a way make yourself\n a copy of the data first.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the children list",
            "type": "Array<any>",
            "description": "the children list"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 839,
          "column": 4,
          "index": 23453
        },
        "end": {
          "line": 841,
          "column": 5,
          "index": 23511
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Array<any>"
      },
      "appearsIn": []
    },
    "getChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get a child element at the given index",
          "     *",
          "     * @param index {Integer} child index",
          "     * @return {qx.html.Element|null} The child element or <code>null</code> if",
          "     *     no child is found at that index.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a child element at the given index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} child index",
            "paramName": "index",
            "description": " child index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element|null} The child element or <code>null</code> if\n     no child is found at that index.",
            "type": "qx.html.Element|null",
            "description": "The child element or <code>null</code> if\n     no child is found at that index."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 850,
          "column": 4,
          "index": 23753
        },
        "end": {
          "line": 853,
          "column": 5,
          "index": 23865
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.html.Element|null"
      },
      "appearsIn": []
    },
    "hasChildren": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns whether the element has any child nodes",
          "     *",
          "     * @return {Boolean} Whether the element has any child nodes",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the element has any child nodes</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element has any child nodes",
            "type": "boolean",
            "description": "Whether the element has any child nodes"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 860,
          "column": 4,
          "index": 24015
        },
        "end": {
          "line": 863,
          "column": 5,
          "index": 24125
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "indexOf": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Find the position of the given child",
          "     *",
          "     * @param child {qx.html.Element} the child",
          "     * @return {Integer} returns the position. If the element",
          "     *     is not a child <code>-1</code> will be returned.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Find the position of the given child</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the child",
            "paramName": "child",
            "description": " the child",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} returns the position. If the element\n     is not a child <code>-1</code> will be returned.",
            "type": "Integer",
            "description": "returns the position. If the element\n     is not a child <code>-1</code> will be returned."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 872,
          "column": 4,
          "index": 24369
        },
        "end": {
          "line": 875,
          "column": 5,
          "index": 24482
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "hasChild": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the given element is a child of this element.",
          "     *",
          "     * @param child {qx.html.Element} the child",
          "     * @return {Boolean} Returns <code>true</code> when the given",
          "     *    element is a child of this element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given element is a child of this element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the child",
            "paramName": "child",
            "description": " the child",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>true</code> when the given\n    element is a child of this element.",
            "type": "boolean",
            "description": "Returns <code>true</code> when the given\n    element is a child of this element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 884,
          "column": 4,
          "index": 24733
        },
        "end": {
          "line": 887,
          "column": 5,
          "index": 24850
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "add": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Append all given children at the end of this element.",
          "     *",
          "     * @param varargs {qx.html.Element} elements to insert",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Append all given children at the end of this element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {qx.html.Element} elements to insert",
            "paramName": "varargs",
            "description": " elements to insert",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 895,
          "column": 4,
          "index": 25068
        },
        "end": {
          "line": 924,
          "column": 5,
          "index": 25943
        }
      },
      "type": "function",
      "params": [
        {
          "name": "varargs",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "addAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Inserts a new element into this element at the given position.",
          "     *",
          "     * @param child {qx.html.Element} the element to insert",
          "     * @param index {Integer} the index (starts at 0 for the",
          "     *     first child) to insert (the index of the following",
          "     *     children will be increased by one)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Inserts a new element into this element at the given position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "child {qx.html.Element} the element to insert",
            "paramName": "child",
            "description": " the element to insert",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "index {Integer} the index (starts at 0 for the\n     first child) to insert (the index of the following\n     children will be increased by one)",
            "paramName": "index",
            "description": " the index (starts at 0 for the\n     first child) to insert (the index of the following\n     children will be increased by one)",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 935,
          "column": 4,
          "index": 26340
        },
        "end": {
          "line": 946,
          "column": 5,
          "index": 26684
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child",
          "type": "qx.html.Element"
        },
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "remove": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all given children",
          "     *",
          "     * @param childs {qx.html.Element} children to remove",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all given children</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "childs {qx.html.Element} children to remove",
            "paramName": "childs",
            "description": " children to remove",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 954,
          "column": 4,
          "index": 26874
        },
        "end": {
          "line": 975,
          "column": 5,
          "index": 27439
        }
      },
      "type": "function",
      "params": [
        {
          "name": "childs",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "removeAt": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the child at the given index",
          "     *",
          "     * @param index {Integer} the position of the",
          "     *     child (starts at 0 for the first child)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the child at the given index</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} the position of the\n     child (starts at 0 for the first child)",
            "paramName": "index",
            "description": " the position of the\n     child (starts at 0 for the first child)",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 984,
          "column": 4,
          "index": 27682
        },
        "end": {
          "line": 1000,
          "column": 5,
          "index": 28077
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "removeAll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove all children from this element.",
          "     *",
          "     * @return {qx.html.Element} A reference to this.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all children from this element.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} A reference to this.",
            "type": "qx.html.Element",
            "description": "A reference to this."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1007,
          "column": 4,
          "index": 28207
        },
        "end": {
          "line": 1020,
          "column": 5,
          "index": 28507
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "getParent": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the parent of this element.",
          "     *",
          "     * @return {qx.html.Element|null} The parent of this element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the parent of this element.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element|null} The parent of this element",
            "type": "qx.html.Element|null",
            "description": "The parent of this element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1033,
          "column": 4,
          "index": 28870
        },
        "end": {
          "line": 1035,
          "column": 5,
          "index": 28924
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element|null"
      },
      "appearsIn": []
    },
    "insertInto": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert self into the given parent. Normally appends self to the end,",
          "     * but optionally a position can be defined. With index <code>0</code> it",
          "     * will be inserted at the begin.",
          "     *",
          "     * @param parent {qx.html.Element} The new parent of this element",
          "     * @param index {Integer?null} Optional position",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert self into the given parent. Normally appends self to the end,\n but optionally a position can be defined. With index <code>0</code> it\n will be inserted at the begin.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parent {qx.html.Element} The new parent of this element",
            "paramName": "parent",
            "description": " The new parent of this element",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "index {Integer?null} Optional position",
            "paramName": "index",
            "description": " Optional position",
            "optional": true,
            "defaultValue": "null",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1046,
          "column": 4,
          "index": 29337
        },
        "end": {
          "line": 1056,
          "column": 5,
          "index": 29573
        }
      },
      "type": "function",
      "params": [
        {
          "name": "parent",
          "type": "qx.html.Element"
        },
        {
          "name": "index",
          "type": "Integer",
          "optional": true,
          "defaultValue": "null"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "insertBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert self before the given (related) element",
          "     *",
          "     * @param rel {qx.html.Element} the related element",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert self before the given (related) element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rel {qx.html.Element} the related element",
            "paramName": "rel",
            "description": " the related element",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1064,
          "column": 4,
          "index": 29781
        },
        "end": {
          "line": 1071,
          "column": 5,
          "index": 29956
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rel",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "insertAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Insert self after the given (related) element",
          "     *",
          "     * @param rel {qx.html.Element} the related element",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert self after the given (related) element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rel {qx.html.Element} the related element",
            "paramName": "rel",
            "description": " the related element",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1079,
          "column": 4,
          "index": 30163
        },
        "end": {
          "line": 1086,
          "column": 5,
          "index": 30336
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rel",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "moveTo": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Move self to the given index in the current parent.",
          "     *",
          "     * @param index {Integer} the index (starts at 0 for the first child)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     * @throws {Error} when the given element is not child",
          "     *      of this element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Move self to the given index in the current parent.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} the index (starts at 0 for the first child)",
            "paramName": "index",
            "description": " the index (starts at 0 for the first child)",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when the given element is not child\n      of this element.",
            "type": "Error",
            "description": " when the given element is not child\n      of this element."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1096,
          "column": 4,
          "index": 30655
        },
        "end": {
          "line": 1113,
          "column": 5,
          "index": 31092
        }
      },
      "type": "function",
      "params": [
        {
          "name": "index",
          "type": "Integer"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "moveBefore": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Move self before the given (related) child.",
          "     *",
          "     * @param rel {qx.html.Element} the related child",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Move self before the given (related) child.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rel {qx.html.Element} the related child",
            "paramName": "rel",
            "description": " the related child",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1121,
          "column": 4,
          "index": 31295
        },
        "end": {
          "line": 1124,
          "column": 5,
          "index": 31408
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rel",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "moveAfter": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Move self after the given (related) child.",
          "     *",
          "     * @param rel {qx.html.Element} the related child",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Move self after the given (related) child.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rel {qx.html.Element} the related child",
            "paramName": "rel",
            "description": " the related child",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1132,
          "column": 4,
          "index": 31610
        },
        "end": {
          "line": 1135,
          "column": 5,
          "index": 31726
        }
      },
      "type": "function",
      "params": [
        {
          "name": "rel",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "free": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Remove self from the current parent.",
          "     *",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove self from the current parent.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1142,
          "column": 4,
          "index": 31868
        },
        "end": {
          "line": 1156,
          "column": 5,
          "index": 32173
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "getDomElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the DOM element (if created). Please use this with caution.",
          "     * It is better to make all changes to the object itself using the public",
          "     * API rather than to the underlying DOM element.",
          "     *",
          "     * @param create {Boolean?} if true, the DOM node will be created if it does",
          "     * not exist",
          "     * @return {Element|null} The DOM element node, if available.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the DOM element (if created). Please use this with caution.\n It is better to make all changes to the object itself using the public\n API rather than to the underlying DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "create {Boolean?} if true, the DOM node will be created if it does\n not exist",
            "paramName": "create",
            "description": " if true, the DOM node will be created if it does\n not exist",
            "optional": true,
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element|null} The DOM element node, if available.",
            "type": "Element|null",
            "description": "The DOM element node, if available."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1173,
          "column": 4,
          "index": 32774
        },
        "end": {
          "line": 1178,
          "column": 5,
          "index": 32907
        }
      },
      "type": "function",
      "params": [
        {
          "name": "create",
          "type": "Boolean",
          "optional": true
        }
      ],
      "returnType": {
        "type": "Element|null"
      },
      "appearsIn": []
    },
    "getNodeName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the nodeName of the DOM element.",
          "     *",
          "     * @return {String} The node name",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the nodeName of the DOM element.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The node name",
            "type": "string",
            "description": "The node name"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1185,
          "column": 4,
          "index": 33023
        },
        "end": {
          "line": 1187,
          "column": 5,
          "index": 33073
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "setNodeName": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the nodeName of the DOM element.",
          "     *",
          "     * @param name {String} The node name",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the nodeName of the DOM element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The node name",
            "paramName": "name",
            "description": " The node name",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1194,
          "column": 4,
          "index": 33190
        },
        "end": {
          "line": 1204,
          "column": 5,
          "index": 33477
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "include": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Marks the element as included which means it will be moved into",
          "     * the DOM again and synced with the internal data representation.",
          "     *",
          "     * @return {Node} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks the element as included which means it will be moved into\n the DOM again and synced with the internal data representation.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Node} this object (for chaining support)",
            "type": "qx.html.Node",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1218,
          "column": 4,
          "index": 33903
        },
        "end": {
          "line": 1230,
          "column": 5,
          "index": 34110
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Node"
      },
      "appearsIn": []
    },
    "exclude": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Marks the element as excluded which means it will be removed",
          "     * from the DOM and ignored for updates until it gets included again.",
          "     *",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks the element as excluded which means it will be removed\n from the DOM and ignored for updates until it gets included again.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1238,
          "column": 4,
          "index": 34350
        },
        "end": {
          "line": 1250,
          "column": 5,
          "index": 34559
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "isIncluded": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the element is part of the DOM",
          "     *",
          "     * @return {Boolean} Whether the element is part of the DOM.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the element is part of the DOM</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element is part of the DOM.",
            "type": "boolean",
            "description": "Whether the element is part of the DOM."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1257,
          "column": 4,
          "index": 34700
        },
        "end": {
          "line": 1259,
          "column": 5,
          "index": 34758
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "_applyVisible": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply method for visible property",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for visible property</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1264,
          "column": 4,
          "index": 34822
        },
        "end": {
          "line": 1266,
          "column": 5,
          "index": 34886
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        }
      ],
      "appearsIn": []
    },
    "registerProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Registers a property and the implementations used to read the property value",
          "     * from the DOM and to set the property value onto the DOM.  This allows the element",
          "     * to have a simple `setProperty` method that knows how to read and write the value.",
          "     *",
          "     * You do not have to specify a getter or a setter - by default the setter will use",
          "     * `_applyProperty` for backwards compatibility, and there is no getter implementation.",
          "     *",
          "     * The functions are called with `this` set to this Element.  The getter takes",
          "     * the property name as a parameter and is expected to return a value, the setter takes",
          "     * the property name and value as parameters, and returns nothing.",
          "     *",
          "     * @param key {String} the property name",
          "     * @param getter {Function?} function to read from the DOM",
          "     * @param setter {Function?} function to copy to the DOM",
          "     * @param serialize {Function?} function to serialize the value to HTML",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers a property and the implementations used to read the property value\n from the DOM and to set the property value onto the DOM.  This allows the element\n to have a simple <code>setProperty</code> method that knows how to read and write the value.\n You do not have to specify a getter or a setter - by default the setter will use\n <code>_applyProperty</code> for backwards compatibility, and there is no getter implementation.\n The functions are called with <code>this</code> set to this Element.  The getter takes\n the property name as a parameter and is expected to return a value, the setter takes\n the property name and value as parameters, and returns nothing.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the property name",
            "paramName": "key",
            "description": " the property name",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "getter {Function?} function to read from the DOM",
            "paramName": "getter",
            "description": " function to read from the DOM",
            "optional": true,
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "setter {Function?} function to copy to the DOM",
            "paramName": "setter",
            "description": " function to copy to the DOM",
            "optional": true,
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "serialize {Function?} function to serialize the value to HTML",
            "paramName": "serialize",
            "description": " function to serialize the value to HTML",
            "optional": true,
            "type": "Function"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1289,
          "column": 4,
          "index": 36059
        },
        "end": {
          "line": 1323,
          "column": 5,
          "index": 36971
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "get"
        },
        {
          "name": "set"
        },
        {
          "name": "serialize",
          "type": "Function",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "_applyProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Applies a special property with the given value.",
          "     *",
          "     * This property apply routine can be easily overwritten and",
          "     * extended by sub classes to add new low level features which",
          "     * are not easily possible using styles and attributes.",
          "     *",
          "     * Note that this implementation is for backwards compatibility and",
          "     * implementations",
          "     *",
          "     * @param name {String} Unique property identifier",
          "     * @param value {var} Any valid value (depends on the property)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     * @abstract",
          "     * @deprecated {6.0} please use `registerProperty` instead",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Applies a special property with the given value.\n This property apply routine can be easily overwritten and\n extended by sub classes to add new low level features which\n are not easily possible using styles and attributes.\n Note that this implementation is for backwards compatibility and\n implementations</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Unique property identifier",
            "paramName": "name",
            "description": " Unique property identifier",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} Any valid value (depends on the property)",
            "paramName": "value",
            "description": " Any valid value (depends on the property)",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} please use <code>registerProperty</code> instead"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1341,
          "column": 4,
          "index": 37629
        },
        "end": {
          "line": 1343,
          "column": 5,
          "index": 37694
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "_setProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set up the given property.",
          "     *",
          "     * @param key {String} the name of the property",
          "     * @param value {var} the value",
          "     * @param direct {Boolean?false} Whether the value should be applied",
          "     *    directly (without queuing)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set up the given property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the property",
            "paramName": "key",
            "description": " the name of the property",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} the value",
            "paramName": "value",
            "description": " the value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1353,
          "column": 4,
          "index": 38024
        },
        "end": {
          "line": 1385,
          "column": 5,
          "index": 38989
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "_removeProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given misc",
          "     *",
          "     * @param key {String} the name of the misc",
          "     * @param direct {Boolean?false} Whether the value should be removed",
          "     *    directly (without queuing)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given misc</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the misc",
            "paramName": "key",
            "description": " the name of the misc",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be removed\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be removed\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1395,
          "column": 4,
          "index": 39275
        },
        "end": {
          "line": 1397,
          "column": 5,
          "index": 39362
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "_getProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the value of the given misc.",
          "     *",
          "     * @param key {String} name of the misc",
          "     * @param direct {Boolean?false} Whether the value should be obtained directly (without queuing)",
          "     * @return {var} the value of the misc",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the value of the given misc.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} name of the misc",
            "paramName": "key",
            "description": " name of the misc",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be obtained directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be obtained directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the misc",
            "type": "var",
            "description": "the value of the misc"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1406,
          "column": 4,
          "index": 39620
        },
        "end": {
          "line": 1422,
          "column": 5,
          "index": 40075
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "addListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds an event listener to the element.",
          "     *",
          "     * @param type {String} Name of the event",
          "     * @param listener {Function} Function to execute on event",
          "     * @param self {Object ? null} Reference to the 'this' variable inside",
          "     *         the event listener. When not given, the corresponding dispatcher",
          "     *         usually falls back to a default, which is the target",
          "     *         by convention. Note this is not a strict requirement, i.e.",
          "     *         custom dispatchers can follow a different strategy.",
          "     * @param capture {Boolean ? false} Whether capturing should be enabled",
          "     * @return {var} An opaque id, which can be used to remove the event listener",
          "     *         using the {@link #removeListenerById} method.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an event listener to the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Name of the event",
            "paramName": "type",
            "description": " Name of the event",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} Function to execute on event",
            "paramName": "listener",
            "description": " Function to execute on event",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "paramName": "self",
            "description": " Reference to the 'this' variable inside\n         the event listener. When not given, the corresponding dispatcher\n         usually falls back to a default, which is the target\n         by convention. Note this is not a strict requirement, i.e.\n         custom dispatchers can follow a different strategy.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether capturing should be enabled",
            "paramName": "capture",
            "description": " Whether capturing should be enabled",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method.",
            "type": "var",
            "description": "An opaque id, which can be used to remove the event listener\n         using the {@link #removeListenerById} method."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1444,
          "column": 4,
          "index": 41038
        },
        "end": {
          "line": 1510,
          "column": 5,
          "index": 42688
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "self",
          "type": "Object",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "capture",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "removeListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes an event listener from the element.",
          "     *",
          "     * @param type {String} Name of the event",
          "     * @param listener {Function} Function to execute on event",
          "     * @param self {Object} Execution context of given function",
          "     * @param capture {Boolean ? false} Whether capturing should be enabled",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an event listener from the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Name of the event",
            "paramName": "type",
            "description": " Name of the event",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "listener {Function} Function to execute on event",
            "paramName": "listener",
            "description": " Function to execute on event",
            "type": "((...args: any[]) => any)"
          },
          {
            "name": "@param",
            "body": "self {Object} Execution context of given function",
            "paramName": "self",
            "description": " Execution context of given function",
            "type": "Record<any, any>"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether capturing should be enabled",
            "paramName": "capture",
            "description": " Whether capturing should be enabled",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1521,
          "column": 4,
          "index": 43086
        },
        "end": {
          "line": 1592,
          "column": 5,
          "index": 44970
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "listener",
          "type": "((...args: any[]) => any)"
        },
        {
          "name": "self",
          "type": "Record<any, any>"
        },
        {
          "name": "capture",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "removeListenerById": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes an event listener from an event target by an id returned by",
          "     * {@link #addListener}",
          "     *",
          "     * @param id {var} The id returned by {@link #addListener}",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes an event listener from an event target by an id returned by\n {@link #addListener}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {var} The id returned by {@link #addListener}",
            "paramName": "id",
            "description": " The id returned by {@link #addListener}",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1601,
          "column": 4,
          "index": 45234
        },
        "end": {
          "line": 1624,
          "column": 5,
          "index": 45786
        }
      },
      "type": "function",
      "params": [
        {
          "name": "id",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "hasListener": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Check if there are one or more listeners for an event type.",
          "     *",
          "     * @param type {String} name of the event type",
          "     * @param capture {Boolean ? false} Whether to check for listeners of",
          "     *         the bubbling or of the capturing phase.",
          "     * @return {Boolean} Whether the object has a listener of the given type.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if there are one or more listeners for an event type.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} name of the event type",
            "paramName": "type",
            "description": " name of the event type",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "capture {Boolean ? false} Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "paramName": "capture",
            "description": " Whether to check for listeners of\n         the bubbling or of the capturing phase.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has a listener of the given type.",
            "type": "boolean",
            "description": "Whether the object has a listener of the given type."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1634,
          "column": 4,
          "index": 46141
        },
        "end": {
          "line": 1669,
          "column": 5,
          "index": 46953
        }
      },
      "type": "function",
      "params": [
        {
          "name": "type",
          "type": "string"
        },
        {
          "name": "capture",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "getListeners": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Serializes and returns all event listeners attached to this element",
          "     * @return {Map[]} an Array containing a map for each listener. The maps",
          "     * have the following keys:",
          "     * <ul>",
          "     *   <li><code>type</code> (String): Event name</li>",
          "     *   <li><code>handler</code> (Function): Callback function</li>",
          "     *   <li><code>self</code> (Object): The callback's context</li>",
          "     *   <li><code>capture</code> (Boolean): If <code>true</code>, the listener is",
          "     * attached to the capturing phase</li>",
          "     * </ul>",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Serializes and returns all event listeners attached to this element</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} an Array containing a map for each listener. The maps\n have the following keys:\n <ul>\n   <li><code>type</code> (String): Event name</li>\n   <li><code>handler</code> (Function): Callback function</li>\n   <li><code>self</code> (Object): The callback's context</li>\n   <li><code>capture</code> (Boolean): If <code>true</code>, the listener is\n attached to the capturing phase</li>\n </ul>",
            "type": "Map[]",
            "description": "an Array containing a map for each listener. The maps\n have the following keys:\n <ul>\n   <li><code>type</code> (String): Event name</li>\n   <li><code>handler</code> (Function): Callback function</li>\n   <li><code>self</code> (Object): The callback's context</li>\n   <li><code>capture</code> (Boolean): If <code>true</code>, the listener is\n attached to the capturing phase</li>\n </ul>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1683,
          "column": 4,
          "index": 47507
        },
        "end": {
          "line": 1712,
          "column": 5,
          "index": 48218
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map[]"
      },
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 1721,
        "column": 2,
        "index": 48412
      },
      "end": {
        "line": 1746,
        "column": 3,
        "index": 48997
      }
    }
  }
}