{
  "version": 0.3,
  "lastModified": 1735222258974,
  "lastModifiedIso": "2024-12-26T14:10:58.974Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/html/Input.js",
  "type": "class",
  "location": {
    "start": {
      "line": 23,
      "column": 0,
      "index": 606
    },
    "end": {
      "line": 261,
      "column": 3,
      "index": 7650
    }
  },
  "className": "qx.html.Input",
  "jsdoc": {
    "raw": [
      "*",
      " * A Input wrap any valid HTML input element and make it accessible",
      " * through the normalized qooxdoo element interface.",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>A Input wrap any valid HTML input element and make it accessible\n through the normalized qooxdoo element interface.</p>"
      }
    ]
  },
  "superClass": "qx.html.Element",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "type"
      },
      {
        "name": "styles"
      },
      {
        "name": "attributes"
      }
    ],
    "location": {
      "start": {
        "line": 44,
        "column": 2,
        "index": 1572
      },
      "end": {
        "line": 63,
        "column": 3,
        "index": 2012
      }
    }
  },
  "members": {
    "__type": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 2216
        },
        "end": {
          "line": 72,
          "column": 16,
          "index": 2228
        }
      },
      "appearsIn": []
    },
    "__selectable": {
      "jsdoc": {
        "raw": [
          " used for webkit only"
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2262
        },
        "end": {
          "line": 74,
          "column": 22,
          "index": 2280
        }
      },
      "appearsIn": []
    },
    "__enabled": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2286
        },
        "end": {
          "line": 75,
          "column": 19,
          "index": 2301
        }
      },
      "appearsIn": []
    },
    "_useNodeImpl": {
      "jsdoc": {
        "raw": [
          "",
          "    ---------------------------------------------------------------------------",
          "      ELEMENT API",
          "    ---------------------------------------------------------------------------",
          "    "
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2501
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2591
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domNode"
        },
        {
          "name": "newChildren"
        }
      ],
      "appearsIn": []
    },
    "_createDomElement": {
      "jsdoc": {
        "raw": [
          "overridden"
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2615
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2689
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.html.Element",
      "appearsIn": [
        "qx.html.Element",
        "qx.html.Node"
      ]
    },
    "_setValueProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Implementation of setter for the \"value\" property",
          "     *",
          "     * @param value {String?} value to set",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation of setter for the \"value\" property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String?} value to set",
            "paramName": "value",
            "description": " value to set",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2819
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2938
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "_getValueProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Implementation of getter for the \"value\" property",
          "     *",
          "     * @return {String?} value on the dom",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation of getter for the \"value\" property</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String?} value on the dom",
            "type": "String?",
            "description": "value on the dom"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 3067
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 3206
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "String?"
      },
      "appearsIn": []
    },
    "_setWrapProperty": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Implementation of setter for the \"wrap\" property",
          "     *",
          "     * @param value {String?} value to set",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation of setter for the \"wrap\" property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String?} value to set",
            "paramName": "value",
            "description": " value to set",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3335
        },
        "end": {
          "line": 129,
          "column": 5,
          "index": 3906
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "setEnabled": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the input element enabled / disabled.",
          "     * Webkit needs a special treatment because the set color of the input",
          "     * field changes automatically. Therefore, we use",
          "     * <code>-webkit-user-modify: read-only</code> and",
          "     * <code>-webkit-user-select: none</code>",
          "     * for disabling the fields in webkit. All other browsers use the disabled",
          "     * attribute.",
          "     *",
          "     * @param value {Boolean} true, if the input element should be enabled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the input element enabled / disabled.\n Webkit needs a special treatment because the set color of the input\n field changes automatically. Therefore, we use\n <code>-webkit-user-modify: read-only</code> and\n <code>-webkit-user-select: none</code>\n for disabling the fields in webkit. All other browsers use the disabled\n attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} true, if the input element should be enabled.",
            "paramName": "value",
            "description": " true, if the input element should be enabled.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 4388
        },
        "end": {
          "line": 160,
          "column": 5,
          "index": 4858
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "setSelectable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set whether the element is selectable. It uses the qooxdoo attribute",
          "     * qxSelectable with the values 'on' or 'off'.",
          "     * In webkit, a special css property will be used and checks for the",
          "     * enabled state.",
          "     *",
          "     * @param value {Boolean} True, if the element should be selectable.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the element is selectable. It uses the qooxdoo attribute\n qxSelectable with the values 'on' or 'off'.\n In webkit, a special css property will be used and checks for the\n enabled state.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} True, if the element should be selectable.",
            "paramName": "value",
            "description": " True, if the element should be selectable.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 5183
        },
        "end": {
          "line": 181,
          "column": 6,
          "index": 5475
        }
      },
      "overriddenFrom": "qx.html.Element",
      "appearsIn": [
        "qx.html.Element"
      ]
    },
    "setValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the value of the input element.",
          "     *",
          "     * @param value {var} the new value",
          "     * @return {qx.html.Input} This instance for for chaining support.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the value of the input element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} the new value",
            "paramName": "value",
            "description": " the new value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Input} This instance for for chaining support.",
            "type": "qx.html.Input",
            "description": "This instance for for chaining support."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5851
        },
        "end": {
          "line": 209,
          "column": 5,
          "index": 6251
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "var"
        }
      ],
      "returnType": {
        "type": "qx.html.Input"
      },
      "appearsIn": []
    },
    "getValue": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the current value.",
          "     *",
          "     * @return {String} The element's current value.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the current value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The element's current value.",
            "type": "string",
            "description": "The element's current value."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 216,
          "column": 4,
          "index": 6364
        },
        "end": {
          "line": 224,
          "column": 5,
          "index": 6549
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "setWrap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the text wrap behavior of a text area element.",
          "     *",
          "     * This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"",
          "     *",
          "     * @param wrap {Boolean} Whether to turn text wrap on or off.",
          "     * @param direct {Boolean?false} Whether the execution should be made",
          "     *  directly when possible",
          "     * @return {qx.html.Input} This instance for for chaining support.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the text wrap behavior of a text area element.\n This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "wrap {Boolean} Whether to turn text wrap on or off.",
            "paramName": "wrap",
            "description": " Whether to turn text wrap on or off.",
            "type": "boolean"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the execution should be made\n  directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n  directly when possible",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Input} This instance for for chaining support.",
            "type": "qx.html.Input",
            "description": "This instance for for chaining support."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 236,
          "column": 4,
          "index": 6970
        },
        "end": {
          "line": 244,
          "column": 5,
          "index": 7203
        }
      },
      "type": "function",
      "params": [
        {
          "name": "wrap",
          "type": "boolean"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Input"
      },
      "appearsIn": []
    },
    "getWrap": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Gets the text wrap behavior of a text area element.",
          "     *",
          "     * This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"",
          "     *",
          "     * @return {Boolean} Whether wrapping is enabled or disabled.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the text wrap behavior of a text area element.\n This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether wrapping is enabled or disabled.",
            "type": "boolean",
            "description": "Whether wrapping is enabled or disabled."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 7448
        },
        "end": {
          "line": 259,
          "column": 5,
          "index": 7642
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    }
  },
  "statics": {},
  "properties": {}
}