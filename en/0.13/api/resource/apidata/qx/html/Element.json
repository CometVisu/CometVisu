{
  "className": "qx.html.Element",
  "packageName": "qx.html",
  "name": "Element",
  "superClass": "qx.html.Node",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 43,
        "column": 0,
        "index": 1428
      },
      "end": {
        "line": 2019,
        "column": 3,
        "index": 59909
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>High-performance, high-level DOM element creation and management.\n Includes support for HTML and style attributes. Elements also have\n got a powerful children and visibility management.\n Processes DOM insertion and modification with advanced logic\n to reduce the real transactions.\n From the view of the parent you can use the following children management\n methods:\n {@link #getChildren}, {@link #indexOf}, {@link #hasChild}, {@link #add},\n {@link #addAt}, {@link #remove}, {@link #removeAt}, {@link #removeAll}\n Each child itself also has got some powerful methods to control its\n position:\n {@link #getParent}, {@link #free},\n {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.Animation"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 61,
        "column": 2,
        "index": 2107
      },
      "end": {
        "line": 89,
        "column": 3,
        "index": 2806
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Creates a new Element</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "tagName {String?\"div\"} Tag name of the element to create",
          "paramName": "tagName",
          "description": " Tag name of the element to create",
          "optional": true,
          "defaultValue": "\"div\"",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "styles {Map?null} optional map of CSS styles, where the key is the name\n    of the style and the value is the value to use.",
          "paramName": "styles",
          "description": " optional map of CSS styles, where the key is the name\n    of the style and the value is the value to use.",
          "optional": true,
          "defaultValue": "null",
          "type": "Map"
        },
        {
          "name": "@param",
          "body": "attributes {Map?null} optional map of element attributes, where the\n    key is the name of the attribute and the value is the value to use.",
          "paramName": "attributes",
          "description": " optional map of element attributes, where the\n    key is the name of the attribute and the value is the value to use.",
          "optional": true,
          "defaultValue": "null",
          "type": "Map"
        }
      ]
    }
  },
  "statics": {
    "DEBUG": {
      "location": {
        "start": {
          "line": 105,
          "column": 4,
          "index": 3277
        },
        "end": {
          "line": 105,
          "column": 16,
          "index": 3289
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} If debugging should be enabled"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "_hasRoots": {
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 3342
        },
        "end": {
          "line": 108,
          "column": 16,
          "index": 3354
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} number of roots"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_defaultRoot": {
      "location": {
        "start": {
          "line": 111,
          "column": 4,
          "index": 3415
        },
        "end": {
          "line": 111,
          "column": 22,
          "index": 3433
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Element} the default root to use"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_modified": {
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3540
        },
        "end": {
          "line": 114,
          "column": 17,
          "index": 3553
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the modified {@link qx.html.Element}s. The key is the hash code."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_visibility": {
      "location": {
        "start": {
          "line": 117,
          "column": 4,
          "index": 3704
        },
        "end": {
          "line": 117,
          "column": 19,
          "index": 3719
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the {@link qx.html.Element}s which should get hidden or visible at the next flush. The key is the hash code."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_scroll": {
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3830
        },
        "end": {
          "line": 120,
          "column": 15,
          "index": 3841
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the {@link qx.html.Element}s which should scrolled at the next flush"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_actions": {
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3978
        },
        "end": {
          "line": 123,
          "column": 16,
          "index": 3990
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} List of post actions for elements. The key is the action name. The value the {@link qx.html.Element}."
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "__selection": {
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 4048
        },
        "end": {
          "line": 126,
          "column": 19,
          "index": 4063
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} List of all selections."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__focusHandler": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 4072
        },
        "end": {
          "line": 128,
          "column": 24,
          "index": 4092
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__mouseCapture": {
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4101
        },
        "end": {
          "line": 130,
          "column": 24,
          "index": 4121
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__SELF_CLOSING_TAGS": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4130
        },
        "end": {
          "line": 132,
          "column": 29,
          "index": 4155
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_scheduleFlush": {
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4642
        },
        "end": {
          "line": 148,
          "column": 5,
          "index": 4720
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Schedule a deferred element queue flush. If the widget subsystem is used\n this method gets overwritten by {@link qx.ui.core.queue.Manager}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "job {String} The job descriptor. Should always be <code>\"element\"</code>.",
            "paramName": "job",
            "description": " The job descriptor. Should always be <code>\"element\"</code>.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "flush": {
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4786
        },
        "end": {
          "line": 358,
          "column": 5,
          "index": 11119
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flush the global modified list</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__getFocusHandler": {
      "location": {
        "start": {
          "line": 365,
          "column": 4,
          "index": 11243
        },
        "end": {
          "line": 377,
          "column": 5,
          "index": 11716
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the focus handler</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.handler.Focus} The focus handler",
            "type": "qx.event.handler.Focus",
            "description": " The focus handler"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getCaptureElement": {
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 11845
        },
        "end": {
          "line": 398,
          "column": 5,
          "index": 12379
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the mouse capture element</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The mouse capture DOM element",
            "type": "qx.html.Element",
            "description": " The mouse capture DOM element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__willBecomeInvisible": {
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 12619
        },
        "end": {
          "line": 409,
          "column": 5,
          "index": 12767
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given DOM element will become invisible after the flush</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domElement {Element} The DOM element to check",
            "paramName": "domElement",
            "description": " The DOM element to check",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element will become invisible",
            "type": "Boolean",
            "description": " Whether the element will become invisible"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "fromDomElement": {
      "location": {
        "start": {
          "line": 418,
          "column": 4,
          "index": 13030
        },
        "end": {
          "line": 420,
          "column": 5,
          "index": 13117
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the Widget for a given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domElement {DOM} the DOM element",
            "paramName": "domElement",
            "description": " the DOM element",
            "type": "DOM"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} the Widget that created the DOM element",
            "type": "qx.ui.core.Widget",
            "description": " the Widget that created the DOM element"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.1} see qx.html.Node.fromDomNode"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDefaultRoot": {
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 13241
        },
        "end": {
          "line": 437,
          "column": 5,
          "index": 13570
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the default Root element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "root {Element} the new default root",
            "paramName": "root",
            "description": " the new default root",
            "type": "qx.html.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDefaultRoot": {
      "location": {
        "start": {
          "line": 444,
          "column": 4,
          "index": 13681
        },
        "end": {
          "line": 446,
          "column": 5,
          "index": 13739
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the default root</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the default root",
            "type": "qx.html.Element",
            "description": " the default root"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "cssClass": {
      "location": {
        "start": {
          "line": 468,
          "column": 4,
          "index": 14607
        },
        "end": {
          "line": 473,
          "column": 5,
          "index": 14722
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} The primary CSS class for this element\n The implementation will add and remove this class from the list of classes,\n this property is provided as a means to easily set the primary class.  Because\n SCSS supports inheritance, it's more useful to be able to allow the SCSS\n definition to control the inheritance hierarchy of classes.\n For example, a dialog could be implemented in code as a Dialog class derived from\n a Window class, but the presentation may be so different that the theme author\n would choose to not use inheritance at all."
          }
        ]
      },
      "name": "cssClass",
      "propertyType": "new",
      "apply": "_applyCssClass",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__root": {
      "location": {
        "start": {
          "line": 490,
          "column": 4,
          "index": 15237
        },
        "end": {
          "line": 490,
          "column": 17,
          "index": 15250
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Marker for always visible root nodes (often the body node)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__lazyScrollIntoViewX": {
      "location": {
        "start": {
          "line": 492,
          "column": 4,
          "index": 15259
        },
        "end": {
          "line": 492,
          "column": 31,
          "index": 15286
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lazyScrollIntoViewY": {
      "location": {
        "start": {
          "line": 493,
          "column": 4,
          "index": 15293
        },
        "end": {
          "line": 493,
          "column": 31,
          "index": 15320
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lazyScrollX": {
      "location": {
        "start": {
          "line": 495,
          "column": 4,
          "index": 15329
        },
        "end": {
          "line": 495,
          "column": 23,
          "index": 15348
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lazyScrollY": {
      "location": {
        "start": {
          "line": 496,
          "column": 4,
          "index": 15355
        },
        "end": {
          "line": 496,
          "column": 23,
          "index": 15374
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__styleJobs": {
      "location": {
        "start": {
          "line": 498,
          "column": 4,
          "index": 15383
        },
        "end": {
          "line": 498,
          "column": 21,
          "index": 15400
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__attribJobs": {
      "location": {
        "start": {
          "line": 499,
          "column": 4,
          "index": 15407
        },
        "end": {
          "line": 499,
          "column": 22,
          "index": 15425
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__styleValues": {
      "location": {
        "start": {
          "line": 501,
          "column": 4,
          "index": 15434
        },
        "end": {
          "line": 501,
          "column": 23,
          "index": 15453
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__attribValues": {
      "location": {
        "start": {
          "line": 502,
          "column": 4,
          "index": 15460
        },
        "end": {
          "line": 502,
          "column": 24,
          "index": 15480
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_createDomElement": {
      "location": {
        "start": {
          "line": 507,
          "column": 4,
          "index": 15524
        },
        "end": {
          "line": 509,
          "column": 5,
          "index": 15605
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "serialize": {
      "location": {
        "start": {
          "line": 514,
          "column": 4,
          "index": 15649
        },
        "end": {
          "line": 520,
          "column": 5,
          "index": 15844
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "_serializeImpl": {
      "location": {
        "start": {
          "line": 525,
          "column": 4,
          "index": 15888
        },
        "end": {
          "line": 582,
          "column": 5,
          "index": 17614
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "connectWidget": {
      "location": {
        "start": {
          "line": 591,
          "column": 4,
          "index": 17919
        },
        "end": {
          "line": 593,
          "column": 5,
          "index": 17991
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Connects a widget to this element, and to the DOM element in this Element.  They\n remain associated until disposed or disconnectWidget is called</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} the widget to associate",
            "paramName": "widget",
            "description": " the widget to associate",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.1} see connectObject"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "disconnectWidget": {
      "location": {
        "start": {
          "line": 602,
          "column": 4,
          "index": 18294
        },
        "end": {
          "line": 604,
          "column": 5,
          "index": 18372
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disconnects a widget from this element and the DOM element.  The DOM element remains\n untouched, except that it can no longer be used to find the Widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "qxObject {qx.core.Object} the Widget",
            "paramName": "qxObject",
            "description": " the Widget",
            "type": "qx.core.Object"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.1} see disconnectObject"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_addChildImpl": {
      "location": {
        "start": {
          "line": 609,
          "column": 4,
          "index": 18416
        },
        "end": {
          "line": 612,
          "column": 5,
          "index": 18522
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "_removeChildImpl": {
      "location": {
        "start": {
          "line": 617,
          "column": 4,
          "index": 18566
        },
        "end": {
          "line": 620,
          "column": 5,
          "index": 18678
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "getQxObject": {
      "location": {
        "start": {
          "line": 625,
          "column": 4,
          "index": 18722
        },
        "end": {
          "line": 631,
          "column": 5,
          "index": 18913
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MObjectId"
      ]
    },
    "importQxObjectIds": {
      "location": {
        "start": {
          "line": 648,
          "column": 4,
          "index": 19553
        },
        "end": {
          "line": 724,
          "column": 5,
          "index": 22285
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>When a tree of virtual dom is loaded via JSX code, the paths in the <code>data-qx-object-id</code>\n attribute are relative to the JSX, and these attribuite values need to be loaded into the\n <code>qxObjectId</code> property - while resolving the parent parts of the path.\n EG\n  <div data-qx-object-id=\"root\">\n    <div>\n      <div data-qx-object-id=\"root/child\">\n The root DIV has to take on the qxObjectId of \"root\", and the third DIV has to have the\n ID \"child\" and be owned by the first DIV.\n This function imports and resolves those IDs</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_copyData": {
      "location": {
        "start": {
          "line": 740,
          "column": 4,
          "index": 22880
        },
        "end": {
          "line": 807,
          "column": 5,
          "index": 25044
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Copies data between the internal representation and the DOM. This\n simply copies all the data and only works well directly after\n element creation. After this the data must be synced using {@link #_syncData}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromMarkup {Boolean} Whether the copy should respect styles\n   given from markup",
            "paramName": "fromMarkup",
            "description": " Whether the copy should respect styles\n   given from markup",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "_syncData": {
      "location": {
        "start": {
          "line": 815,
          "column": 4,
          "index": 25284
        },
        "end": {
          "line": 857,
          "column": 5,
          "index": 26284
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Synchronizes data between the internal representation and the DOM. This\n is the counterpart of {@link #_copyData} and is used for further updates\n after the element has been created.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "setRoot": {
      "location": {
        "start": {
          "line": 870,
          "column": 4,
          "index": 26677
        },
        "end": {
          "line": 877,
          "column": 5,
          "index": 26888
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the element's root flag, which indicates\n whether the element should be a root element or not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "root {Boolean} The root flag.",
            "paramName": "root",
            "description": " The root flag.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isRoot": {
      "location": {
        "start": {
          "line": 882,
          "column": 4,
          "index": 26932
        },
        "end": {
          "line": 884,
          "column": 5,
          "index": 26976
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "useMarkup": {
      "location": {
        "start": {
          "line": 894,
          "column": 4,
          "index": 27324
        },
        "end": {
          "line": 915,
          "column": 5,
          "index": 28065
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Uses existing markup for this element. This is mainly used\n to insert pre-built markup blocks into the element hierarchy.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "html {String} HTML markup with one root element\n   which is used as the main element for this instance.",
            "paramName": "html",
            "description": " HTML markup with one root element\n   which is used as the main element for this instance.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The created DOM element",
            "type": "qx.html.Element",
            "description": " The created DOM element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "useElement": {
      "location": {
        "start": {
          "line": 924,
          "column": 4,
          "index": 28335
        },
        "end": {
          "line": 926,
          "column": 5,
          "index": 28387
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Uses an existing element instead of creating one. This may be interesting\n when the DOM element is directly needed to add content etc.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} Element to reuse",
            "paramName": "elem",
            "description": " Element to reuse",
            "type": "qx.html.Element"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.1} see useNode"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isFocusable": {
      "location": {
        "start": {
          "line": 933,
          "column": 4,
          "index": 28564
        },
        "end": {
          "line": 945,
          "column": 5,
          "index": 28877
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the element is focusable (or will be when created)</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the element is focusable.",
            "type": "Boolean",
            "description": " <code>true</code> when the element is focusable."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setSelectable": {
      "location": {
        "start": {
          "line": 954,
          "column": 4,
          "index": 29193
        },
        "end": {
          "line": 963,
          "column": 5,
          "index": 29521
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the element is selectable. It uses the qooxdoo attribute\n qxSelectable with the values 'on' or 'off'.\n In webkit, a special css property will be used (-webkit-user-select).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} True, if the element should be selectable.",
            "paramName": "value",
            "description": " True, if the element should be selectable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isNativelyFocusable": {
      "location": {
        "start": {
          "line": 972,
          "column": 4,
          "index": 29761
        },
        "end": {
          "line": 974,
          "column": 5,
          "index": 29866
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the element is natively focusable (or will be when created)\n This ignores the configured tabIndex.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the element is focusable.",
            "type": "Boolean",
            "description": " <code>true</code> when the element is focusable."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fadeIn": {
      "location": {
        "start": {
          "line": 987,
          "column": 4,
          "index": 30284
        },
        "end": {
          "line": 1009,
          "column": 5,
          "index": 30822
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fades in the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\n   the fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "description": " The animation handle to react for\n   the fade animation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "fadeOut": {
      "location": {
        "start": {
          "line": 1017,
          "column": 4,
          "index": 31038
        },
        "end": {
          "line": 1035,
          "column": 5,
          "index": 31445
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fades out the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\n   the fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "description": " The animation handle to react for\n   the fade animation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyVisible": {
      "location": {
        "start": {
          "line": 1046,
          "column": 4,
          "index": 31695
        },
        "end": {
          "line": 1064,
          "column": 5,
          "index": 32309
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "show": {
      "location": {
        "start": {
          "line": 1073,
          "column": 4,
          "index": 32630
        },
        "end": {
          "line": 1076,
          "column": 5,
          "index": 32695
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks the element as visible which means that a previously applied\n CSS style of display=none gets removed and the element will inserted\n into the DOM, when this had not already happened before.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hide": {
      "location": {
        "start": {
          "line": 1084,
          "column": 4,
          "index": 32958
        },
        "end": {
          "line": 1087,
          "column": 5,
          "index": 33024
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks the element as hidden which means it will kept in DOM (if it\n is already there, but configured hidden using a CSS style of display=none).</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoViewX": {
      "location": {
        "start": {
          "line": 1110,
          "column": 4,
          "index": 33983
        },
        "end": {
          "line": 1133,
          "column": 5,
          "index": 34607
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the given child element into view. Only scrolls children.\n Do not influence elements on top of this element.\n If the element is currently invisible it gets scrolled automatically\n at the next time it is visible again (queued).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {qx.html.Element} The element to scroll into the viewport.",
            "paramName": "elem",
            "description": " The element to scroll into the viewport.",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the element. Allowed values:\n   <code>left</code> or <code>right</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the element. Allowed values:\n   <code>left</code> or <code>right</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\n   directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n   directly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollChildIntoViewY": {
      "location": {
        "start": {
          "line": 1150,
          "column": 4,
          "index": 35364
        },
        "end": {
          "line": 1173,
          "column": 5,
          "index": 35988
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the given child element into view. Only scrolls children.\n Do not influence elements on top of this element.\n If the element is currently invisible it gets scrolled automatically\n at the next time it is visible again (queued).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {qx.html.Element} The element to scroll into the viewport.",
            "paramName": "elem",
            "description": " The element to scroll into the viewport.",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the element. Allowed values:\n   <code>top</code> or <code>bottom</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the element. Allowed values:\n   <code>top</code> or <code>bottom</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\n   directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n   directly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollToX": {
      "location": {
        "start": {
          "line": 1182,
          "column": 4,
          "index": 36244
        },
        "end": {
          "line": 1194,
          "column": 5,
          "index": 36648
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element to the given left position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x {Integer} Horizontal scroll position",
            "paramName": "x",
            "description": " Horizontal scroll position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lazy {Boolean?false} Whether the scrolling should be performed\n    during element flush.",
            "paramName": "lazy",
            "description": " Whether the scrolling should be performed\n    during element flush.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScrollX": {
      "location": {
        "start": {
          "line": 1201,
          "column": 4,
          "index": 36780
        },
        "end": {
          "line": 1208,
          "column": 5,
          "index": 36942
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal scroll position.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Horizontal scroll position",
            "type": "Integer",
            "description": " Horizontal scroll position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scrollToY": {
      "location": {
        "start": {
          "line": 1217,
          "column": 4,
          "index": 37195
        },
        "end": {
          "line": 1229,
          "column": 5,
          "index": 37598
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element to the given top position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "y {Integer} Vertical scroll position",
            "paramName": "y",
            "description": " Vertical scroll position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lazy {Boolean?false} Whether the scrolling should be performed\n    during element flush.",
            "paramName": "lazy",
            "description": " Whether the scrolling should be performed\n    during element flush.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScrollY": {
      "location": {
        "start": {
          "line": 1236,
          "column": 4,
          "index": 37726
        },
        "end": {
          "line": 1243,
          "column": 5,
          "index": 37887
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical scroll position.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Vertical scroll position",
            "type": "Integer",
            "description": " Vertical scroll position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "disableScrolling": {
      "location": {
        "start": {
          "line": 1248,
          "column": 4,
          "index": 37956
        },
        "end": {
          "line": 1253,
          "column": 5,
          "index": 38124
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disables browser-native scrolling</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "enableScrolling": {
      "location": {
        "start": {
          "line": 1258,
          "column": 4,
          "index": 38195
        },
        "end": {
          "line": 1260,
          "column": 5,
          "index": 38282
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Re-enables browser-native scrolling</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__inScroll": {
      "location": {
        "start": {
          "line": 1262,
          "column": 4,
          "index": 38291
        },
        "end": {
          "line": 1262,
          "column": 20,
          "index": 38307
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onScroll": {
      "location": {
        "start": {
          "line": 1269,
          "column": 4,
          "index": 38432
        },
        "end": {
          "line": 1276,
          "column": 5,
          "index": 38637
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the scroll-event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Native} scroll-event",
            "paramName": "e",
            "description": " scroll-event",
            "type": "qx.event.type.Native"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "setText": {
      "location": {
        "start": {
          "line": 1290,
          "column": 4,
          "index": 39085
        },
        "end": {
          "line": 1305,
          "column": 5,
          "index": 39574
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the text value of this element; it will delete children first, except\n for the first node which (if it is a Text node) will have it's value updated</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} the text to set",
            "paramName": "value",
            "description": " the text to set",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getText": {
      "location": {
        "start": {
          "line": 1312,
          "column": 4,
          "index": 39714
        },
        "end": {
          "line": 1320,
          "column": 5,
          "index": 39930
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the text value, accumulated from all child nodes</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the text value",
            "type": "String",
            "description": " the text value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTextSelection": {
      "location": {
        "start": {
          "line": 1330,
          "column": 4,
          "index": 40147
        },
        "end": {
          "line": 1337,
          "column": 5,
          "index": 40295
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the selection of the element.\n If the underlaying DOM element is not yet created, this methods returns\n a null value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null}",
            "type": "String|null",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTextSelectionLength": {
      "location": {
        "start": {
          "line": 1347,
          "column": 4,
          "index": 40523
        },
        "end": {
          "line": 1354,
          "column": 5,
          "index": 40683
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the length of selection of the element.\n If the underlaying DOM element is not yet created, this methods returns\n a null value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTextSelectionStart": {
      "location": {
        "start": {
          "line": 1364,
          "column": 4,
          "index": 40914
        },
        "end": {
          "line": 1371,
          "column": 5,
          "index": 41072
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the start of the selection of the element.\n If the underlaying DOM element is not yet created, this methods returns\n a null value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTextSelectionEnd": {
      "location": {
        "start": {
          "line": 1381,
          "column": 4,
          "index": 41301
        },
        "end": {
          "line": 1388,
          "column": 5,
          "index": 41455
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the end of the selection of the element.\n If the underlaying DOM element is not yet created, this methods returns\n a null value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setTextSelection": {
      "location": {
        "start": {
          "line": 1399,
          "column": 4,
          "index": 41845
        },
        "end": {
          "line": 1414,
          "column": 5,
          "index": 42256
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the selection of the element with the given start and end value.\n If no end value is passed the selection will extend to the end.\n This method only works if the underlying DOM element is already created.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} start of the selection (zero based)",
            "paramName": "start",
            "description": " start of the selection (zero based)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "end {Integer} end of the selection",
            "paramName": "end",
            "description": " end of the selection",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearTextSelection": {
      "location": {
        "start": {
          "line": 1422,
          "column": 4,
          "index": 42425
        },
        "end": {
          "line": 1428,
          "column": 5,
          "index": 42610
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the selection of the element.\n This method only works if the underlying DOM element is already created.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__performAction": {
      "location": {
        "start": {
          "line": 1447,
          "column": 4,
          "index": 43301
        },
        "end": {
          "line": 1463,
          "column": 5,
          "index": 43763
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes the action to process as argument and queues this action if the\n underlying DOM element is not yet created.\n Note that \"actions\" are functions in <code>qx.bom.Element</code> and only apply to\n environments with a user interface.  This will throw an error if the user\n interface is headless</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} action to queue",
            "paramName": "action",
            "description": " action to queue",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Array} optional list of arguments for the action",
            "paramName": "args",
            "description": " optional list of arguments for the action",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "focus": {
      "location": {
        "start": {
          "line": 1473,
          "column": 4,
          "index": 44025
        },
        "end": {
          "line": 1477,
          "column": 5,
          "index": 44144
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Focus this element.\n If the underlaying DOM element is not yet created, the\n focus is queued for processing after the element creation.\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "blur": {
      "location": {
        "start": {
          "line": 1485,
          "column": 4,
          "index": 44320
        },
        "end": {
          "line": 1489,
          "column": 5,
          "index": 44437
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark this element to get blurred on the next flush of the queue\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "activate": {
      "location": {
        "start": {
          "line": 1497,
          "column": 4,
          "index": 44615
        },
        "end": {
          "line": 1501,
          "column": 5,
          "index": 44740
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark this element to get activated on the next flush of the queue\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deactivate": {
      "location": {
        "start": {
          "line": 1509,
          "column": 4,
          "index": 44920
        },
        "end": {
          "line": 1513,
          "column": 5,
          "index": 45049
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark this element to get deactivated on the next flush of the queue\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "capture": {
      "location": {
        "start": {
          "line": 1524,
          "column": 4,
          "index": 45395
        },
        "end": {
          "line": 1528,
          "column": 5,
          "index": 45564
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Captures all mouse events to this element\n Silently does nothing when in a headless environment</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "containerCapture {Boolean?true} If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "paramName": "containerCapture",
            "description": " If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "releaseCapture": {
      "location": {
        "start": {
          "line": 1535,
          "column": 4,
          "index": 45728
        },
        "end": {
          "line": 1539,
          "column": 5,
          "index": 45865
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Releases this element from a previous {@link #capture} call\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setStyle": {
      "location": {
        "start": {
          "line": 1556,
          "column": 4,
          "index": 46420
        },
        "end": {
          "line": 1596,
          "column": 5,
          "index": 47527
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set up the given style attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the style attribute",
            "paramName": "key",
            "description": " the name of the style attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} the value",
            "paramName": "value",
            "description": " the value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyStyle": {
      "location": {
        "start": {
          "line": 1607,
          "column": 4,
          "index": 47901
        },
        "end": {
          "line": 1609,
          "column": 5,
          "index": 47961
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called by setStyle when a value of a style changes; this is intended to be\n overridden to allow the element to update properties etc according to the\n style</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the style value",
            "paramName": "key",
            "description": " the style value",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {String?} the value to set",
            "paramName": "value",
            "description": " the value to set",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "oldValue {String?} The previous value (not from DOM)",
            "paramName": "oldValue",
            "description": " The previous value (not from DOM)",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setStyles": {
      "location": {
        "start": {
          "line": 1620,
          "column": 4,
          "index": 48359
        },
        "end": {
          "line": 1679,
          "column": 5,
          "index": 49955
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convenience method to modify a set of styles at once.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Map} a map where the key is the name of the property\n    and the value is the value to use.",
            "paramName": "map",
            "description": " a map where the key is the name of the property\n    and the value is the value to use.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the values should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the values should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeStyle": {
      "location": {
        "start": {
          "line": 1689,
          "column": 4,
          "index": 50273
        },
        "end": {
          "line": 1692,
          "column": 5,
          "index": 50367
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given style attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the style attribute",
            "paramName": "key",
            "description": " the name of the style attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be removed\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be removed\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getStyle": {
      "location": {
        "start": {
          "line": 1700,
          "column": 4,
          "index": 50565
        },
        "end": {
          "line": 1702,
          "column": 5,
          "index": 50654
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the value of the given style attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} name of the style attribute",
            "paramName": "key",
            "description": " name of the style attribute",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the style attribute",
            "type": "var",
            "description": " the value of the style attribute"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAllStyles": {
      "location": {
        "start": {
          "line": 1709,
          "column": 4,
          "index": 50836
        },
        "end": {
          "line": 1711,
          "column": 5,
          "index": 50901
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a map of all styles. Do not modify the result map!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} All styles or <code>null</code> when none are configured.",
            "type": "Map",
            "description": " All styles or <code>null</code> when none are configured."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__breakClasses": {
      "location": {
        "start": {
          "line": 1718,
          "column": 4,
          "index": 51113
        },
        "end": {
          "line": 1726,
          "column": 5,
          "index": 51343
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "private"
    },
    "__combineClasses": {
      "location": {
        "start": {
          "line": 1728,
          "column": 4,
          "index": 51352
        },
        "end": {
          "line": 1737,
          "column": 5,
          "index": 51670
        }
      },
      "type": "function",
      "access": "private"
    },
    "addClass": {
      "location": {
        "start": {
          "line": 1745,
          "column": 4,
          "index": 51843
        },
        "end": {
          "line": 1758,
          "column": 5,
          "index": 52288
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a css class to the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the CSS class.",
            "paramName": "name",
            "description": " Name of the CSS class.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} this, for chaining",
            "type": "qx.html.Element",
            "description": " this, for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeClass": {
      "location": {
        "start": {
          "line": 1766,
          "column": 4,
          "index": 52474
        },
        "end": {
          "line": 1780,
          "column": 5,
          "index": 52924
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a CSS class from the current element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the CSS class.",
            "paramName": "name",
            "description": " Name of the CSS class.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} this, for chaining",
            "type": "qx.html.Element",
            "description": " this, for chaining"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAllClasses": {
      "location": {
        "start": {
          "line": 1785,
          "column": 4,
          "index": 53009
        },
        "end": {
          "line": 1788,
          "column": 5,
          "index": 53106
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all CSS classed from the current element.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyCssClass": {
      "location": {
        "start": {
          "line": 1793,
          "column": 4,
          "index": 53167
        },
        "end": {
          "line": 1802,
          "column": 5,
          "index": 53542
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for cssClass</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "cssClass"
      ]
    },
    "getDimensions": {
      "location": {
        "start": {
          "line": 1828,
          "column": 4,
          "index": 54791
        },
        "end": {
          "line": 1848,
          "column": 5,
          "index": 55339
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the size and position of this element; this is just a helper method that wraps\n the calls to qx.bom.*\n Supported modes:</p>\n<ul>\n<li><code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)</li>\n<li><code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)</li>\n<li><code>border</code>: Calculate the border box (useful to align to border edges of two elements).</li>\n<li><code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).</li>\n<li><code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String} the type of size required, see above",
            "paramName": "mode",
            "description": " the type of size required, see above",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} a map, containing:\n  left, right, top, bottom - document co-ords\n  content - Object, containing:\n    width, height: maximum permissible content size",
            "type": "Object",
            "description": " a map, containing:\n  left, right, top, bottom - document co-ords\n  content - Object, containing:\n    width, height: maximum permissible content size"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "canBeSeen": {
      "location": {
        "start": {
          "line": 1853,
          "column": 4,
          "index": 55414
        },
        "end": {
          "line": 1866,
          "column": 5,
          "index": 55744
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the DOM Node is visible</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setAttribute": {
      "location": {
        "start": {
          "line": 1883,
          "column": 4,
          "index": 56291
        },
        "end": {
          "line": 1926,
          "column": 5,
          "index": 57440
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set up the given attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the attribute",
            "paramName": "key",
            "description": " the name of the attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} the value",
            "paramName": "value",
            "description": " the value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setAttributes": {
      "location": {
        "start": {
          "line": 1937,
          "column": 4,
          "index": 57842
        },
        "end": {
          "line": 1943,
          "column": 5,
          "index": 57989
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convenience method to modify a set of attributes at once.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Map} a map where the key is the name of the property\n    and the value is the value to use.",
            "paramName": "map",
            "description": " a map where the key is the name of the property\n    and the value is the value to use.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the values should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the values should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAttribute": {
      "location": {
        "start": {
          "line": 1953,
          "column": 4,
          "index": 58295
        },
        "end": {
          "line": 1955,
          "column": 5,
          "index": 58384
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the attribute",
            "paramName": "key",
            "description": " the name of the attribute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be removed\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be removed\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": " this object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAttribute": {
      "location": {
        "start": {
          "line": 1963,
          "column": 4,
          "index": 58564
        },
        "end": {
          "line": 1965,
          "column": 5,
          "index": 58659
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the value of the given attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} name of the attribute",
            "paramName": "key",
            "description": " name of the attribute",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the attribute",
            "type": "var",
            "description": " the value of the attribute"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getVisible": {
      "type": "function",
      "name": "getVisible",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visible</code>.\n\nFor further details take a look at the property definition: {@link #visible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for visible"
          }
        ]
      }
    },
    "isVisible": {
      "type": "function",
      "name": "isVisible",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visible</code>.\n\nFor further details take a look at the property definition: {@link #visible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for visible"
          }
        ]
      }
    },
    "setVisible": {
      "type": "function",
      "name": "setVisible",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>visible</code>.\n\nFor further details take a look at the property definition: {@link #visible}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for visible"
          }
        ]
      }
    },
    "resetVisible": {
      "type": "function",
      "name": "resetVisible",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>visible</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #visible}."
          }
        ]
      }
    },
    "getCssClass": {
      "type": "function",
      "name": "getCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>cssClass</code>.\n\nFor further details take a look at the property definition: {@link #cssClass}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for cssClass"
          }
        ]
      }
    },
    "setCssClass": {
      "type": "function",
      "name": "setCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>cssClass</code>.\n\nFor further details take a look at the property definition: {@link #cssClass}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for cssClass"
          }
        ]
      }
    },
    "resetCssClass": {
      "type": "function",
      "name": "resetCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>cssClass</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #cssClass}."
          }
        ]
      }
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 1974,
        "column": 2,
        "index": 58863
      },
      "end": {
        "line": 1995,
        "column": 3,
        "index": 59315
      }
    },
    "jsdoc": {}
  },
  "destruct": {
    "location": {
      "start": {
        "line": 2003,
        "column": 2,
        "index": 59513
      },
      "end": {
        "line": 2018,
        "column": 3,
        "index": 59904
      }
    },
    "jsdoc": {}
  },
  "descendants": [
    "qx.html.Blocker",
    "qx.html.Canvas",
    "qx.html.Iframe",
    "qx.html.Image",
    "qx.html.Input",
    "qx.html.Label",
    "qx.html.Root",
    "qx.ui.splitpane.Blocker",
    "cv.svg.Element",
    "com.zenesis.qx.upload.InputElement"
  ]
}