{
  "version": 0.3,
  "lastModified": 1735341601419,
  "lastModifiedIso": "2024-12-27T23:20:01.419Z",
  "classFilename": "../../node_modules/@qooxdoo/framework/source/class/qx/html/Element.js",
  "type": "class",
  "location": {
    "start": {
      "line": 45,
      "column": 0,
      "index": 1538
    },
    "end": {
      "line": 2076,
      "column": 3,
      "index": 60632
    }
  },
  "className": "qx.html.Element",
  "jsdoc": {
    "raw": [
      "*",
      " * High-performance, high-level DOM element creation and management.",
      " *",
      " * Includes support for HTML and style attributes. Elements also have",
      " * got a powerful children and visibility management.",
      " *",
      " * Processes DOM insertion and modification with advanced logic",
      " * to reduce the real transactions.",
      " *",
      " * From the view of the parent you can use the following children management",
      " * methods:",
      " * {@link #getChildren}, {@link #indexOf}, {@link #hasChild}, {@link #add},",
      " * {@link #addAt}, {@link #remove}, {@link #removeAt}, {@link #removeAll}",
      " *",
      " * Each child itself also has got some powerful methods to control its",
      " * position:",
      " * {@link #getParent}, {@link #free},",
      " * {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},",
      " * {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},",
      " *",
      " * NOTE: Instances of this class must be disposed of after use",
      " *",
      " * NOTE:: This class used to require `qx.module.Animation` but that brings in a huge",
      " * list of dependencies, so the require has been moved to the `qx.application.AbstractGui`",
      " * class",
      " "
    ],
    "@description": [
      {
        "name": "@description",
        "body": "<p>High-performance, high-level DOM element creation and management.\n Includes support for HTML and style attributes. Elements also have\n got a powerful children and visibility management.\n Processes DOM insertion and modification with advanced logic\n to reduce the real transactions.\n From the view of the parent you can use the following children management\n methods:\n {@link #getChildren}, {@link #indexOf}, {@link #hasChild}, {@link #add},\n {@link #addAt}, {@link #remove}, {@link #removeAt}, {@link #removeAll}\n Each child itself also has got some powerful methods to control its\n position:\n {@link #getParent}, {@link #free},\n {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},\n NOTE: Instances of this class must be disposed of after use\n NOTE:: This class used to require <code>qx.module.Animation</code> but that brings in a huge\n list of dependencies, so the require has been moved to the <code>qx.application.AbstractGui</code>\n class</p>"
      }
    ]
  },
  "superClass": "qx.html.Node",
  "construct": {
    "type": "function",
    "params": [
      {
        "name": "tagName"
      },
      {
        "name": "styles"
      },
      {
        "name": "attributes"
      }
    ],
    "location": {
      "start": {
        "line": 63,
        "column": 2,
        "index": 2199
      },
      "end": {
        "line": 91,
        "column": 3,
        "index": 2875
      }
    }
  },
  "statics": {
    "DEBUG": {
      "jsdoc": {
        "raw": [
          "* @type {Boolean} If debugging should be enabled "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} If debugging should be enabled"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 3330
        },
        "end": {
          "line": 107,
          "column": 16,
          "index": 3342
        }
      },
      "appearsIn": []
    },
    "_hasRoots": {
      "jsdoc": {
        "raw": [
          "* @type {Integer} number of roots "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} number of roots"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 110,
          "column": 4,
          "index": 3392
        },
        "end": {
          "line": 110,
          "column": 16,
          "index": 3404
        }
      },
      "appearsIn": []
    },
    "_defaultRoot": {
      "jsdoc": {
        "raw": [
          "* @type {Element} the default root to use "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Element} the default root to use"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 113,
          "column": 4,
          "index": 3462
        },
        "end": {
          "line": 113,
          "column": 22,
          "index": 3480
        }
      },
      "appearsIn": []
    },
    "_modified": {
      "jsdoc": {
        "raw": [
          "* @type {Map} Contains the modified {@link qx.html.Element}s. The key is the hash code. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the modified {@link qx.html.Element}s. The key is the hash code."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3584
        },
        "end": {
          "line": 116,
          "column": 17,
          "index": 3597
        }
      },
      "appearsIn": []
    },
    "_visibility": {
      "jsdoc": {
        "raw": [
          "* @type {Map} Contains the {@link qx.html.Element}s which should get hidden or visible at the next flush. The key is the hash code. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the {@link qx.html.Element}s which should get hidden or visible at the next flush. The key is the hash code."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 3745
        },
        "end": {
          "line": 119,
          "column": 19,
          "index": 3760
        }
      },
      "appearsIn": []
    },
    "_scroll": {
      "jsdoc": {
        "raw": [
          "* @type {Map} Contains the {@link qx.html.Element}s which should scrolled at the next flush "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the {@link qx.html.Element}s which should scrolled at the next flush"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3868
        },
        "end": {
          "line": 122,
          "column": 15,
          "index": 3879
        }
      },
      "appearsIn": []
    },
    "_actions": {
      "jsdoc": {
        "raw": [
          "* @type {Array} List of post actions for elements. The key is the action name. The value the {@link qx.html.Element}. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} List of post actions for elements. The key is the action name. The value the {@link qx.html.Element}."
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 4013
        },
        "end": {
          "line": 125,
          "column": 16,
          "index": 4025
        }
      },
      "appearsIn": []
    },
    "__selection": {
      "jsdoc": {
        "raw": [
          "*  @type {Map} List of all selections. "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} List of all selections."
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 4080
        },
        "end": {
          "line": 128,
          "column": 19,
          "index": 4095
        }
      },
      "appearsIn": []
    },
    "__focusHandler": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4102
        },
        "end": {
          "line": 130,
          "column": 24,
          "index": 4122
        }
      },
      "appearsIn": []
    },
    "__mouseCapture": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4129
        },
        "end": {
          "line": 132,
          "column": 24,
          "index": 4149
        }
      },
      "appearsIn": []
    },
    "_scheduleFlush": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Schedule a deferred element queue flush. If the widget subsystem is used",
          "     * this method gets overwritten by {@link qx.ui.core.queue.Manager}.",
          "     *",
          "     * @param job {String} The job descriptor. Should always be <code>\"element\"</code>.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Schedule a deferred element queue flush. If the widget subsystem is used\n this method gets overwritten by {@link qx.ui.core.queue.Manager}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "job {String} The job descriptor. Should always be <code>\"element\"</code>.",
            "paramName": "job",
            "description": " The job descriptor. Should always be <code>\"element\"</code>.",
            "type": "string"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 146,
          "column": 4,
          "index": 4622
        },
        "end": {
          "line": 148,
          "column": 5,
          "index": 4698
        }
      },
      "type": "function",
      "params": [
        {
          "name": "job",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "flush": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Flush the global modified list",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flush the global modified list</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4759
        },
        "end": {
          "line": 358,
          "column": 5,
          "index": 10887
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__getFocusHandler": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the focus handler",
          "     *",
          "     * @return {qx.event.handler.Focus} The focus handler",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the focus handler</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.handler.Focus} The focus handler",
            "type": "qx.event.handler.Focus",
            "description": "The focus handler"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 365,
          "column": 4,
          "index": 11004
        },
        "end": {
          "line": 377,
          "column": 5,
          "index": 11465
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.event.handler.Focus"
      },
      "appearsIn": []
    },
    "__getCaptureElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the mouse capture element",
          "     *",
          "     * @return {Element} The mouse capture DOM element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the mouse capture element</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The mouse capture DOM element",
            "type": "qx.html.Element",
            "description": "The mouse capture DOM element"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 384,
          "column": 4,
          "index": 11587
        },
        "end": {
          "line": 398,
          "column": 5,
          "index": 12107
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "__willBecomeInvisible": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the given DOM element will become invisible after the flush",
          "     *",
          "     * @param domElement {Element} The DOM element to check",
          "     * @return {Boolean} Whether the element will become invisible",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given DOM element will become invisible after the flush</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domElement {Element} The DOM element to check",
            "paramName": "domElement",
            "description": " The DOM element to check",
            "type": "qx.html.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the element will become invisible",
            "type": "boolean",
            "description": "Whether the element will become invisible"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 406,
          "column": 4,
          "index": 12339
        },
        "end": {
          "line": 409,
          "column": 5,
          "index": 12484
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domElement",
          "type": "qx.html.Element"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "fromDomElement": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Finds the Widget for a given DOM element",
          "     *",
          "     * @param domElement {Node} the DOM element",
          "     * @return {qx.ui.core.Widget} the Widget that created the DOM element",
          "     * @deprecated {6.1} see qx.html.Node.fromDomNode",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the Widget for a given DOM element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domElement {Node} the DOM element",
            "paramName": "domElement",
            "description": " the DOM element",
            "type": "qx.html.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} the Widget that created the DOM element",
            "type": "qx.ui.core.Widget",
            "description": "the Widget that created the DOM element"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.1} see qx.html.Node.fromDomNode"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 418,
          "column": 4,
          "index": 12739
        },
        "end": {
          "line": 420,
          "column": 5,
          "index": 12824
        }
      },
      "type": "function",
      "params": [
        {
          "name": "domElement",
          "type": "qx.html.Node"
        }
      ],
      "returnType": {
        "type": "qx.ui.core.Widget"
      },
      "appearsIn": []
    },
    "setDefaultRoot": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the default Root element",
          "     *",
          "     * @param root {Element} the new default root",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the default Root element</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "root {Element} the new default root",
            "paramName": "root",
            "description": " the new default root",
            "type": "qx.html.Element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 12941
        },
        "end": {
          "line": 437,
          "column": 5,
          "index": 13260
        }
      },
      "type": "function",
      "params": [
        {
          "name": "root",
          "type": "qx.html.Element"
        }
      ],
      "appearsIn": []
    },
    "getDefaultRoot": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the default root",
          "     *",
          "     * @return {Element} the default root",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the default root</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the default root",
            "type": "qx.html.Element",
            "description": "the default root"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 444,
          "column": 4,
          "index": 13364
        },
        "end": {
          "line": 446,
          "column": 5,
          "index": 13420
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    }
  },
  "properties": {
    "cssClass": {
      "location": {
        "start": {
          "line": 468,
          "column": 4,
          "index": 14266
        },
        "end": {
          "line": 473,
          "column": 5,
          "index": 14376
        }
      },
      "json": {
        "nullable": true,
        "check": "String",
        "apply": "_applyCssClass"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * @type{String} The primary CSS class for this element",
          "     *",
          "     * The implementation will add and remove this class from the list of classes,",
          "     * this property is provided as a means to easily set the primary class.  Because",
          "     * SCSS supports inheritance, it's more useful to be able to allow the SCSS",
          "     * definition to control the inheritance hierarchy of classes.",
          "     *",
          "     * For example, a dialog could be implemented in code as a Dialog class derived from",
          "     * a Window class, but the presentation may be so different that the theme author",
          "     * would choose to not use inheritance at all.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String} The primary CSS class for this element\n The implementation will add and remove this class from the list of classes,\n this property is provided as a means to easily set the primary class.  Because\n SCSS supports inheritance, it's more useful to be able to allow the SCSS\n definition to control the inheritance hierarchy of classes.\n For example, a dialog could be implemented in code as a Dialog class derived from\n a Window class, but the presentation may be so different that the theme author\n would choose to not use inheritance at all."
          }
        ]
      },
      "appearsIn": []
    },
    "isCustomElement": {
      "location": {
        "start": {
          "line": 479,
          "column": 4,
          "index": 14535
        },
        "end": {
          "line": 483,
          "column": 5,
          "index": 14639
        }
      },
      "json": {
        "init": false,
        "check": "Boolean",
        "apply": "_applyIsCustomElement"
      },
      "jsdoc": {
        "raw": [
          "*",
          "     * Used by the {@link qx.html.Slot}-related mechanisms to determine if an",
          "     * element is the top-level of a custom tag function.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Used by the {@link qx.html.Slot}-related mechanisms to determine if an\n element is the top-level of a custom tag function.</p>"
          }
        ]
      },
      "appearsIn": []
    }
  },
  "members": {
    "__root": {
      "jsdoc": {
        "raw": [
          "* @type {Boolean} Marker for always visible root nodes (often the body node) "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Boolean} Marker for always visible root nodes (often the body node)"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 500,
          "column": 4,
          "index": 15137
        },
        "end": {
          "line": 500,
          "column": 17,
          "index": 15150
        }
      },
      "appearsIn": []
    },
    "__lazyScrollIntoViewX": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 502,
          "column": 4,
          "index": 15157
        },
        "end": {
          "line": 502,
          "column": 31,
          "index": 15184
        }
      },
      "appearsIn": []
    },
    "__lazyScrollIntoViewY": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 503,
          "column": 4,
          "index": 15190
        },
        "end": {
          "line": 503,
          "column": 31,
          "index": 15217
        }
      },
      "appearsIn": []
    },
    "__lazyScrollX": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 505,
          "column": 4,
          "index": 15224
        },
        "end": {
          "line": 505,
          "column": 23,
          "index": 15243
        }
      },
      "appearsIn": []
    },
    "__lazyScrollY": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 506,
          "column": 4,
          "index": 15249
        },
        "end": {
          "line": 506,
          "column": 23,
          "index": 15268
        }
      },
      "appearsIn": []
    },
    "__styleJobs": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 508,
          "column": 4,
          "index": 15275
        },
        "end": {
          "line": 508,
          "column": 21,
          "index": 15292
        }
      },
      "appearsIn": []
    },
    "__attribJobs": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 509,
          "column": 4,
          "index": 15298
        },
        "end": {
          "line": 509,
          "column": 22,
          "index": 15316
        }
      },
      "appearsIn": []
    },
    "__styleValues": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 511,
          "column": 4,
          "index": 15323
        },
        "end": {
          "line": 511,
          "column": 23,
          "index": 15342
        }
      },
      "appearsIn": []
    },
    "__attribValues": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 512,
          "column": 4,
          "index": 15348
        },
        "end": {
          "line": 512,
          "column": 24,
          "index": 15368
        }
      },
      "appearsIn": []
    },
    "__slots": {
      "jsdoc": {
        "raw": [
          "*",
          "     * This is a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map | Map},",
          "     * not a POJO",
          "     * @type {Map<string, qx.html.Slot>}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>This is a {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map | Map},\n not a POJO</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map<string, qx.html.Slot>}"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 519,
          "column": 4,
          "index": 15567
        },
        "end": {
          "line": 519,
          "column": 17,
          "index": 15580
        }
      },
      "appearsIn": []
    },
    "_createDomElement": {
      "jsdoc": {
        "raw": [
          "",
          "     * @Override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 524,
          "column": 4,
          "index": 15619
        },
        "end": {
          "line": 526,
          "column": 5,
          "index": 15698
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "_serializeImpl": {
      "jsdoc": {
        "raw": [
          "",
          "     * @Override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 531,
          "column": 4,
          "index": 15737
        },
        "end": {
          "line": 592,
          "column": 5,
          "index": 17532
        }
      },
      "type": "function",
      "params": [
        {
          "name": "serializer"
        }
      ],
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "connectWidget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Connects a widget to this element, and to the DOM element in this Element.  They",
          "     * remain associated until disposed or disconnectWidget is called",
          "     *",
          "     * @param widget {qx.ui.core.Widget} the widget to associate",
          "     * @deprecated {6.1} see connectObject",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Connects a widget to this element, and to the DOM element in this Element.  They\n remain associated until disposed or disconnectWidget is called</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} the widget to associate",
            "paramName": "widget",
            "description": " the widget to associate",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.1} see connectObject"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 601,
          "column": 4,
          "index": 17828
        },
        "end": {
          "line": 603,
          "column": 5,
          "index": 17898
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget",
          "type": "qx.ui.core.Widget"
        }
      ],
      "appearsIn": []
    },
    "disconnectWidget": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disconnects a widget from this element and the DOM element.  The DOM element remains",
          "     * untouched, except that it can no longer be used to find the Widget.",
          "     *",
          "     * @param qxObject {qx.core.Object} the Widget",
          "     * @deprecated {6.1} see disconnectObject",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disconnects a widget from this element and the DOM element.  The DOM element remains\n untouched, except that it can no longer be used to find the Widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "qxObject {qx.core.Object} the Widget",
            "paramName": "qxObject",
            "description": " the Widget",
            "type": "qx.core.Object"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.1} see disconnectObject"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 612,
          "column": 4,
          "index": 18192
        },
        "end": {
          "line": 614,
          "column": 5,
          "index": 18268
        }
      },
      "type": "function",
      "params": [
        {
          "name": "widget"
        }
      ],
      "appearsIn": []
    },
    "_addChildImpl": {
      "jsdoc": {
        "raw": [
          "",
          "     * @Override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 619,
          "column": 4,
          "index": 18307
        },
        "end": {
          "line": 628,
          "column": 5,
          "index": 18601
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "_removeChildImpl": {
      "jsdoc": {
        "raw": [
          "",
          "     * @Override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 633,
          "column": 4,
          "index": 18640
        },
        "end": {
          "line": 640,
          "column": 5,
          "index": 18870
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "_getApplicableQxObjectId": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Works out the object ID to use on an actual DOM node",
          "     *",
          "     * @returns {String}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Works out the object ID to use on an actual DOM node</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "string",
            "description": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 647,
          "column": 4,
          "index": 18985
        },
        "end": {
          "line": 657,
          "column": 5,
          "index": 19362
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "getSlots": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Retrieve the slots this element contains.",
          "     * The Map returned is a copy of the internal Map, as such modifications to",
          "     * it will not effect the element.",
          "     * @returns {Map<string, qx.html.Slot>} A `Map` of slots, keyed by slot name. The default slot, if it exists, is keyed as `qx.html.Slot.DEFAULT`",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Retrieve the slots this element contains.\n The Map returned is a copy of the internal Map, as such modifications to\n it will not effect the element.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map<string, qx.html.Slot>} A <code>Map</code> of slots, keyed by slot name. The default slot, if it exists, is keyed as <code>qx.html.Slot.DEFAULT</code>",
            "type": "Map<string, qx.html.Slot>",
            "description": "A <code>Map</code> of slots, keyed by slot name. The default slot, if it exists, is keyed as <code>qx.html.Slot.DEFAULT</code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 671,
          "column": 4,
          "index": 19893
        },
        "end": {
          "line": 676,
          "column": 5,
          "index": 20016
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<string, qx.html.Slot>"
      },
      "appearsIn": []
    },
    "hasSlots": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns whether the element has slot(s) matching the given projection.",
          "     *",
          "     * @param projection {true | String?} `true` to check for the default slot, a string to check for a slot with the given name, or `null|undefined` to check for any slot(s)",
          "     * @return {Boolean} Indicates whether the projected slot exists, or if any slots exist if no projection was specified",
          "     * @example",
          "     * ```js",
          "     * myNode.hasSlots();             // `true` if there are any slots                 `false` if there are none",
          "     * myNode.hasSlots(true);         // `true` if there is a default (unnamed) slot   `false` if there is not",
          "     * myNode.hasSlots(\"mySlotName\"); // `true` if there is a slot named `mySlotName`  `false` if there is not",
          "     * ```",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the element has slot(s) matching the given projection.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "projection {true | String?} <code>true</code> to check for the default slot, a string to check for a slot with the given name, or <code>null|undefined</code> to check for any slot(s)",
            "paramName": "projection",
            "description": " <code>true</code> to check for the default slot, a string to check for a slot with the given name, or <code>null|undefined</code> to check for any slot(s)",
            "optional": true,
            "type": [
              "true",
              "String"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Indicates whether the projected slot exists, or if any slots exist if no projection was specified",
            "type": "boolean",
            "description": "Indicates whether the projected slot exists, or if any slots exist if no projection was specified"
          }
        ],
        "@example": [
          {
            "name": "@example",
            "body": "<code></code><code>js\n myNode.hasSlots();\n myNode.hasSlots(true);\n myNode.hasSlots(\"mySlotName\");\n </code><code></code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 690,
          "column": 4,
          "index": 20797
        },
        "end": {
          "line": 708,
          "column": 5,
          "index": 21340
        }
      },
      "type": "function",
      "params": [
        {
          "name": "projection",
          "type": [
            "true",
            "String"
          ],
          "optional": true
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "__injectionSlotCheck": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Provides devtime debugging assistance for invalid slot usage.",
          "     * @return {Boolean} `false` if no such slot, `true` otherwise",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Provides devtime debugging assistance for invalid slot usage.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>false</code> if no such slot, <code>true</code> otherwise",
            "type": "boolean",
            "description": "<code>false</code> if no such slot, <code>true</code> otherwise"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 714,
          "column": 4,
          "index": 21499
        },
        "end": {
          "line": 729,
          "column": 5,
          "index": 22049
        }
      },
      "type": "function",
      "params": [
        {
          "name": "slotName"
        }
      ],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "inject": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Inject a child into a slot descendant of this element.",
          "     *",
          "     * @param childNode {qx.html.Element} element to insert. Use a fragment to inject many elements.",
          "     * @param slotNameOverride {String?} name of the slot to inject into. If not provided, the slot name will be read from the `slot` attribute of `childNode`. This may be useful when injecting fragments.",
          "     * @return {this} this object (for chaining support)",
          "     *",
          "     * @example",
          "     * ```js",
          "     * myElem.inject(<p>Hello World</p>);                   // inject one child to the default slot",
          "     * myElem.inject(<p slot=\"mySlotName\">Hello World</p>); // inject one child to the slot named \"mySlotName\" (declarative syntax)",
          "     * myElem.inject(<p>Hello World</p>, \"mySlotName\");     // inject one child to the slot named \"mySlotName\" (functional syntax)",
          "     * myElem.inject((",
          "     *   <>",
          "     *     <p>Hello World</p>",
          "     *     <p>Hello Qooxdoo</p>",
          "     *   </>",
          "     * ), \"mySlotName\");                                    // inject a fragment of children to the slot named \"mySlotName\"",
          "     *",
          "     * ```",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Inject a child into a slot descendant of this element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "childNode {qx.html.Element} element to insert. Use a fragment to inject many elements.",
            "paramName": "childNode",
            "description": " element to insert. Use a fragment to inject many elements.",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "slotNameOverride {String?} name of the slot to inject into. If not provided, the slot name will be read from the <code>slot</code> attribute of <code>childNode</code>. This may be useful when injecting fragments.",
            "paramName": "slotNameOverride",
            "description": " name of the slot to inject into. If not provided, the slot name will be read from the <code>slot</code> attribute of <code>childNode</code>. This may be useful when injecting fragments.",
            "optional": true,
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{this} this object (for chaining support)",
            "type": "this",
            "description": "this object (for chaining support)"
          }
        ],
        "@example": [
          {
            "name": "@example",
            "body": "<code></code><code>js\n myElem.inject(<p>Hello World</p>);\n myElem.inject(<p slot=\"mySlotName\">Hello World</p>);\n myElem.inject(<p>Hello World</p>, \"mySlotName\");\n myElem.inject((\n   <>\n     <p>Hello World</p>\n     <p>Hello Qooxdoo</p>\n   </>\n ), \"mySlotName\");\n </code><code></code>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 752,
          "column": 4,
          "index": 23155
        },
        "end": {
          "line": 766,
          "column": 5,
          "index": 23494
        }
      },
      "type": "function",
      "params": [
        {
          "name": "childNode",
          "type": "qx.html.Element"
        },
        {
          "name": "slotNameOverride",
          "type": "String",
          "optional": true
        }
      ],
      "returnType": {
        "type": "this"
      },
      "appearsIn": []
    },
    "__slotScan": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 768,
          "column": 4,
          "index": 23501
        },
        "end": {
          "line": 785,
          "column": 5,
          "index": 24009
        }
      },
      "type": "function",
      "params": [
        {
          "name": "element"
        }
      ],
      "appearsIn": []
    },
    "_slotScanAdd": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 787,
          "column": 4,
          "index": 24016
        },
        "end": {
          "line": 791,
          "column": 5,
          "index": 24154
        }
      },
      "type": "function",
      "params": [
        {
          "name": "element"
        }
      ],
      "appearsIn": []
    },
    "_slotScanRemove": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 793,
          "column": 4,
          "index": 24161
        },
        "end": {
          "line": 797,
          "column": 5,
          "index": 24295
        }
      },
      "type": "function",
      "params": [
        {
          "name": "child"
        }
      ],
      "appearsIn": []
    },
    "_copyData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Copies data between the internal representation and the DOM. This",
          "     * simply copies all the data and only works well directly after",
          "     * element creation. After this the data must be synced using {@link #_syncData}",
          "     *",
          "     * @param fromMarkup {Boolean} Whether the copy should respect styles",
          "     *   given from markup",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Copies data between the internal representation and the DOM. This\n simply copies all the data and only works well directly after\n element creation. After this the data must be synced using {@link #_syncData}</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromMarkup {Boolean} Whether the copy should respect styles\n   given from markup",
            "paramName": "fromMarkup",
            "description": " Whether the copy should respect styles\n   given from markup",
            "type": "boolean"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 813,
          "column": 4,
          "index": 24874
        },
        "end": {
          "line": 882,
          "column": 5,
          "index": 27051
        }
      },
      "type": "function",
      "params": [
        {
          "name": "fromMarkup",
          "type": "boolean"
        },
        {
          "name": "propertiesFromDom"
        }
      ],
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "_syncData": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Synchronizes data between the internal representation and the DOM. This",
          "     * is the counterpart of {@link #_copyData} and is used for further updates",
          "     * after the element has been created.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Synchronizes data between the internal representation and the DOM. This\n is the counterpart of {@link #_copyData} and is used for further updates\n after the element has been created.</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 890,
          "column": 4,
          "index": 27283
        },
        "end": {
          "line": 932,
          "column": 5,
          "index": 28241
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "setRoot": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Sets the element's root flag, which indicates",
          "     * whether the element should be a root element or not.",
          "     * @param root {Boolean} The root flag.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the element's root flag, which indicates\n whether the element should be a root element or not.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "root {Boolean} The root flag.",
            "paramName": "root",
            "description": " The root flag.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 945,
          "column": 4,
          "index": 28621
        },
        "end": {
          "line": 952,
          "column": 5,
          "index": 28825
        }
      },
      "type": "function",
      "params": [
        {
          "name": "root",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "isRoot": {
      "jsdoc": {
        "raw": [
          "",
          "     * @Override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 957,
          "column": 4,
          "index": 28864
        },
        "end": {
          "line": 959,
          "column": 5,
          "index": 28906
        }
      },
      "type": "function",
      "params": [],
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "useMarkup": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Uses existing markup for this element. This is mainly used",
          "     * to insert pre-built markup blocks into the element hierarchy.",
          "     *",
          "     * @param html {String} HTML markup with one root element",
          "     *   which is used as the main element for this instance.",
          "     * @return {Element} The created DOM element",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Uses existing markup for this element. This is mainly used\n to insert pre-built markup blocks into the element hierarchy.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "html {String} HTML markup with one root element\n   which is used as the main element for this instance.",
            "paramName": "html",
            "description": " HTML markup with one root element\n   which is used as the main element for this instance.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The created DOM element",
            "type": "qx.html.Element",
            "description": "The created DOM element"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 969,
          "column": 4,
          "index": 29244
        },
        "end": {
          "line": 990,
          "column": 5,
          "index": 29961
        }
      },
      "type": "function",
      "params": [
        {
          "name": "html",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "isFocusable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the element is focusable (or will be when created)",
          "     *",
          "     * @return {Boolean} <code>true</code> when the element is focusable.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the element is focusable (or will be when created)</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the element is focusable.",
            "type": "boolean",
            "description": "<code>true</code> when the element is focusable."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 997,
          "column": 4,
          "index": 30131
        },
        "end": {
          "line": 1009,
          "column": 5,
          "index": 30432
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "setSelectable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set whether the element is selectable. It uses the qooxdoo attribute",
          "     * qxSelectable with the values 'on' or 'off'.",
          "     * In webkit, a special css property will be used (-webkit-user-select).",
          "     *",
          "     * @param value {Boolean} True, if the element should be selectable.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the element is selectable. It uses the qooxdoo attribute\n qxSelectable with the values 'on' or 'off'.\n In webkit, a special css property will be used (-webkit-user-select).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} True, if the element should be selectable.",
            "paramName": "value",
            "description": " True, if the element should be selectable.",
            "type": "boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1018,
          "column": 4,
          "index": 30739
        },
        "end": {
          "line": 1027,
          "column": 5,
          "index": 31058
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "boolean"
        }
      ],
      "appearsIn": []
    },
    "isNativelyFocusable": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Whether the element is natively focusable (or will be when created)",
          "     *",
          "     * This ignores the configured tabIndex.",
          "     *",
          "     * @return {Boolean} <code>true</code> when the element is focusable.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the element is natively focusable (or will be when created)\n This ignores the configured tabIndex.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the element is focusable.",
            "type": "boolean",
            "description": "<code>true</code> when the element is focusable."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1036,
          "column": 4,
          "index": 31289
        },
        "end": {
          "line": 1038,
          "column": 5,
          "index": 31392
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "boolean"
      },
      "appearsIn": []
    },
    "fadeIn": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fades in the element.",
          "     * @param duration {Number} Time in ms.",
          "     * @return {qx.bom.element.AnimationHandle} The animation handle to react for",
          "     *   the fade animation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fades in the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\n   the fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "description": "The animation handle to react for\n   the fade animation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1051,
          "column": 4,
          "index": 31797
        },
        "end": {
          "line": 1073,
          "column": 5,
          "index": 32313
        }
      },
      "type": "function",
      "params": [
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "qx.bom.element.AnimationHandle"
      },
      "appearsIn": []
    },
    "fadeOut": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Fades out the element.",
          "     * @param duration {Number} Time in ms.",
          "     * @return {qx.bom.element.AnimationHandle} The animation handle to react for",
          "     *   the fade animation.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fades out the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "duration {Number} Time in ms.",
            "paramName": "duration",
            "description": " Time in ms.",
            "type": "number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.element.AnimationHandle} The animation handle to react for\n   the fade animation.",
            "type": "qx.bom.element.AnimationHandle",
            "description": "The animation handle to react for\n   the fade animation."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1081,
          "column": 4,
          "index": 32521
        },
        "end": {
          "line": 1099,
          "column": 5,
          "index": 32910
        }
      },
      "type": "function",
      "params": [
        {
          "name": "duration",
          "type": "number"
        }
      ],
      "returnType": {
        "type": "qx.bom.element.AnimationHandle"
      },
      "appearsIn": []
    },
    "_applyVisible": {
      "jsdoc": {
        "raw": [
          "",
          "     * @Override",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@Override": [
          {
            "name": "@Override",
            "body": ""
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1110,
          "column": 4,
          "index": 33149
        },
        "end": {
          "line": 1128,
          "column": 5,
          "index": 33745
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "oldValue"
        }
      ],
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "show": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Marks the element as visible which means that a previously applied",
          "     * CSS style of display=none gets removed and the element will inserted",
          "     * into the DOM, when this had not already happened before.",
          "     *",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks the element as visible which means that a previously applied\n CSS style of display=none gets removed and the element will inserted\n into the DOM, when this had not already happened before.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1137,
          "column": 4,
          "index": 34057
        },
        "end": {
          "line": 1140,
          "column": 5,
          "index": 34119
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "hide": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Marks the element as hidden which means it will kept in DOM (if it",
          "     * is already there, but configured hidden using a CSS style of display=none).",
          "     *",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Marks the element as hidden which means it will kept in DOM (if it\n is already there, but configured hidden using a CSS style of display=none).</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1148,
          "column": 4,
          "index": 34374
        },
        "end": {
          "line": 1151,
          "column": 5,
          "index": 34437
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "scrollChildIntoViewX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the given child element into view. Only scrolls children.",
          "     * Do not influence elements on top of this element.",
          "     *",
          "     * If the element is currently invisible it gets scrolled automatically",
          "     * at the next time it is visible again (queued).",
          "     *",
          "     * @param elem {qx.html.Element} The element to scroll into the viewport.",
          "     * @param align {String?null} Alignment of the element. Allowed values:",
          "     *   <code>left</code> or <code>right</code>. Could also be null.",
          "     *   Without a given alignment the method tries to scroll the widget",
          "     *   with the minimum effort needed.",
          "     * @param direct {Boolean?true} Whether the execution should be made",
          "     *   directly when possible",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the given child element into view. Only scrolls children.\n Do not influence elements on top of this element.\n If the element is currently invisible it gets scrolled automatically\n at the next time it is visible again (queued).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {qx.html.Element} The element to scroll into the viewport.",
            "paramName": "elem",
            "description": " The element to scroll into the viewport.",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the element. Allowed values:\n   <code>left</code> or <code>right</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the element. Allowed values:\n   <code>left</code> or <code>right</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\n   directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n   directly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1174,
          "column": 4,
          "index": 35373
        },
        "end": {
          "line": 1197,
          "column": 5,
          "index": 35974
        }
      },
      "type": "function",
      "params": [
        {
          "name": "elem",
          "type": "qx.html.Element"
        },
        {
          "name": "align",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "true"
        }
      ],
      "appearsIn": []
    },
    "scrollChildIntoViewY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the given child element into view. Only scrolls children.",
          "     * Do not influence elements on top of this element.",
          "     *",
          "     * If the element is currently invisible it gets scrolled automatically",
          "     * at the next time it is visible again (queued).",
          "     *",
          "     * @param elem {qx.html.Element} The element to scroll into the viewport.",
          "     * @param align {String?null} Alignment of the element. Allowed values:",
          "     *   <code>top</code> or <code>bottom</code>. Could also be null.",
          "     *   Without a given alignment the method tries to scroll the widget",
          "     *   with the minimum effort needed.",
          "     * @param direct {Boolean?true} Whether the execution should be made",
          "     *   directly when possible",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the given child element into view. Only scrolls children.\n Do not influence elements on top of this element.\n If the element is currently invisible it gets scrolled automatically\n at the next time it is visible again (queued).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {qx.html.Element} The element to scroll into the viewport.",
            "paramName": "elem",
            "description": " The element to scroll into the viewport.",
            "type": "qx.html.Element"
          },
          {
            "name": "@param",
            "body": "align {String?null} Alignment of the element. Allowed values:\n   <code>top</code> or <code>bottom</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "paramName": "align",
            "description": " Alignment of the element. Allowed values:\n   <code>top</code> or <code>bottom</code>. Could also be null.\n   Without a given alignment the method tries to scroll the widget\n   with the minimum effort needed.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?true} Whether the execution should be made\n   directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n   directly when possible",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1214,
          "column": 4,
          "index": 36714
        },
        "end": {
          "line": 1237,
          "column": 5,
          "index": 37315
        }
      },
      "type": "function",
      "params": [
        {
          "name": "elem",
          "type": "qx.html.Element"
        },
        {
          "name": "align",
          "type": "String",
          "optional": true,
          "defaultValue": "null"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "true"
        }
      ],
      "appearsIn": []
    },
    "scrollToX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the element to the given left position.",
          "     *",
          "     * @param x {Integer} Horizontal scroll position",
          "     * @param lazy {Boolean?false} Whether the scrolling should be performed",
          "     *    during element flush.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element to the given left position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x {Integer} Horizontal scroll position",
            "paramName": "x",
            "description": " Horizontal scroll position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lazy {Boolean?false} Whether the scrolling should be performed\n    during element flush.",
            "paramName": "lazy",
            "description": " Whether the scrolling should be performed\n    during element flush.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1246,
          "column": 4,
          "index": 37562
        },
        "end": {
          "line": 1258,
          "column": 5,
          "index": 37954
        }
      },
      "type": "function",
      "params": [
        {
          "name": "x",
          "type": "Integer"
        },
        {
          "name": "lazy",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "appearsIn": []
    },
    "getScrollX": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the horizontal scroll position.",
          "     *",
          "     * @return {Integer} Horizontal scroll position",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal scroll position.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Horizontal scroll position",
            "type": "Integer",
            "description": "Horizontal scroll position"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1265,
          "column": 4,
          "index": 38079
        },
        "end": {
          "line": 1272,
          "column": 5,
          "index": 38234
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "scrollToY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Scrolls the element to the given top position.",
          "     *",
          "     * @param y {Integer} Vertical scroll position",
          "     * @param lazy {Boolean?false} Whether the scrolling should be performed",
          "     *    during element flush.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Scrolls the element to the given top position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "y {Integer} Vertical scroll position",
            "paramName": "y",
            "description": " Vertical scroll position",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lazy {Boolean?false} Whether the scrolling should be performed\n    during element flush.",
            "paramName": "lazy",
            "description": " Whether the scrolling should be performed\n    during element flush.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1281,
          "column": 4,
          "index": 38478
        },
        "end": {
          "line": 1293,
          "column": 5,
          "index": 38869
        }
      },
      "type": "function",
      "params": [
        {
          "name": "y",
          "type": "Integer"
        },
        {
          "name": "lazy",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "appearsIn": []
    },
    "getScrollY": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the vertical scroll position.",
          "     *",
          "     * @return {Integer} Vertical scroll position",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical scroll position.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Vertical scroll position",
            "type": "Integer",
            "description": "Vertical scroll position"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1300,
          "column": 4,
          "index": 38990
        },
        "end": {
          "line": 1307,
          "column": 5,
          "index": 39144
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer"
      },
      "appearsIn": []
    },
    "disableScrolling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Disables browser-native scrolling",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Disables browser-native scrolling</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1312,
          "column": 4,
          "index": 39208
        },
        "end": {
          "line": 1317,
          "column": 5,
          "index": 39371
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "enableScrolling": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Re-enables browser-native scrolling",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Re-enables browser-native scrolling</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1322,
          "column": 4,
          "index": 39437
        },
        "end": {
          "line": 1324,
          "column": 5,
          "index": 39522
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__inScroll": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 1326,
          "column": 4,
          "index": 39529
        },
        "end": {
          "line": 1326,
          "column": 20,
          "index": 39545
        }
      },
      "appearsIn": []
    },
    "__onScroll": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Handler for the scroll-event",
          "     *",
          "     * @param e {qx.event.type.Native} scroll-event",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the scroll-event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Native} scroll-event",
            "paramName": "e",
            "description": " scroll-event",
            "type": "qx.event.type.Native"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1333,
          "column": 4,
          "index": 39663
        },
        "end": {
          "line": 1340,
          "column": 5,
          "index": 39861
        }
      },
      "type": "function",
      "params": [
        {
          "name": "e",
          "type": "qx.event.type.Native"
        }
      ],
      "appearsIn": []
    },
    "setText": {
      "jsdoc": {
        "raw": [
          "",
          "     * Sets the text value of this element; it will delete children first, except",
          "     * for the first node which (if it is a Text node) will have it's value updated",
          "     *",
          "     * @param value {String} the text to set",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the text value of this element; it will delete children first, except\n for the first node which (if it is a Text node) will have it's value updated</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} the text to set",
            "paramName": "value",
            "description": " the text to set",
            "type": "string"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1354,
          "column": 4,
          "index": 40295
        },
        "end": {
          "line": 1369,
          "column": 5,
          "index": 40769
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "appearsIn": []
    },
    "getText": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the text value, accumulated from all child nodes",
          "     *",
          "     * @return {String} the text value",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the text value, accumulated from all child nodes</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the text value",
            "type": "string",
            "description": "the text value"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1376,
          "column": 4,
          "index": 40902
        },
        "end": {
          "line": 1384,
          "column": 5,
          "index": 41110
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "string"
      },
      "appearsIn": []
    },
    "getTextSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the selection of the element.",
          "     *",
          "     * If the underlaying DOM element is not yet created, this methods returns",
          "     * a null value.",
          "     *",
          "     * @return {String|null}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the selection of the element.\n If the underlaying DOM element is not yet created, this methods returns\n a null value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null}",
            "type": "String|null",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1394,
          "column": 4,
          "index": 41317
        },
        "end": {
          "line": 1401,
          "column": 5,
          "index": 41458
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "String|null"
      },
      "appearsIn": []
    },
    "getTextSelectionLength": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the length of selection of the element.",
          "     *",
          "     * If the underlaying DOM element is not yet created, this methods returns",
          "     * a null value.",
          "     *",
          "     * @return {Integer|null}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the length of selection of the element.\n If the underlaying DOM element is not yet created, this methods returns\n a null value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1411,
          "column": 4,
          "index": 41676
        },
        "end": {
          "line": 1418,
          "column": 5,
          "index": 41829
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "getTextSelectionStart": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the start of the selection of the element.",
          "     *",
          "     * If the underlaying DOM element is not yet created, this methods returns",
          "     * a null value.",
          "     *",
          "     * @return {Integer|null}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the start of the selection of the element.\n If the underlaying DOM element is not yet created, this methods returns\n a null value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1428,
          "column": 4,
          "index": 42050
        },
        "end": {
          "line": 1435,
          "column": 5,
          "index": 42201
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "getTextSelectionEnd": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the end of the selection of the element.",
          "     *",
          "     * If the underlaying DOM element is not yet created, this methods returns",
          "     * a null value.",
          "     *",
          "     * @return {Integer|null}",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the end of the selection of the element.\n If the underlaying DOM element is not yet created, this methods returns\n a null value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer|null}",
            "type": "Integer|null",
            "description": ""
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1445,
          "column": 4,
          "index": 42420
        },
        "end": {
          "line": 1452,
          "column": 5,
          "index": 42567
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Integer|null"
      },
      "appearsIn": []
    },
    "setTextSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set the selection of the element with the given start and end value.",
          "     * If no end value is passed the selection will extend to the end.",
          "     *",
          "     * This method only works if the underlying DOM element is already created.",
          "     *",
          "     * @param start {Integer} start of the selection (zero based)",
          "     * @param end {Integer} end of the selection",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the selection of the element with the given start and end value.\n If no end value is passed the selection will extend to the end.\n This method only works if the underlying DOM element is already created.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} start of the selection (zero based)",
            "paramName": "start",
            "description": " start of the selection (zero based)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "end {Integer} end of the selection",
            "paramName": "end",
            "description": " end of the selection",
            "type": "Integer"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1463,
          "column": 4,
          "index": 42946
        },
        "end": {
          "line": 1478,
          "column": 5,
          "index": 43342
        }
      },
      "type": "function",
      "params": [
        {
          "name": "start",
          "type": "Integer"
        },
        {
          "name": "end",
          "type": "Integer"
        }
      ],
      "appearsIn": []
    },
    "clearTextSelection": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Clears the selection of the element.",
          "     *",
          "     * This method only works if the underlying DOM element is already created.",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the selection of the element.\n This method only works if the underlying DOM element is already created.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1486,
          "column": 4,
          "index": 43503
        },
        "end": {
          "line": 1492,
          "column": 5,
          "index": 43682
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__performAction": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Takes the action to process as argument and queues this action if the",
          "     * underlying DOM element is not yet created.",
          "     *",
          "     * Note that \"actions\" are functions in `qx.bom.Element` and only apply to",
          "     * environments with a user interface.  This will throw an error if the user",
          "     * interface is headless",
          "     *",
          "     * @param action {String} action to queue",
          "     * @param args {Array} optional list of arguments for the action",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Takes the action to process as argument and queues this action if the\n underlying DOM element is not yet created.\n Note that \"actions\" are functions in <code>qx.bom.Element</code> and only apply to\n environments with a user interface.  This will throw an error if the user\n interface is headless</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} action to queue",
            "paramName": "action",
            "description": " action to queue",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "args {Array} optional list of arguments for the action",
            "paramName": "args",
            "description": " optional list of arguments for the action",
            "type": "Array<any>"
          }
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1511,
          "column": 4,
          "index": 44354
        },
        "end": {
          "line": 1527,
          "column": 5,
          "index": 44800
        }
      },
      "type": "function",
      "params": [
        {
          "name": "action",
          "type": "string"
        },
        {
          "name": "args",
          "type": "Array<any>"
        }
      ],
      "appearsIn": []
    },
    "focus": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Focus this element.",
          "     *",
          "     * If the underlaying DOM element is not yet created, the",
          "     * focus is queued for processing after the element creation.",
          "     *",
          "     * Silently does nothing when in a headless environment",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Focus this element.\n If the underlaying DOM element is not yet created, the\n focus is queued for processing after the element creation.\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1537,
          "column": 4,
          "index": 45052
        },
        "end": {
          "line": 1541,
          "column": 5,
          "index": 45167
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "blur": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mark this element to get blurred on the next flush of the queue",
          "     *",
          "     * Silently does nothing when in a headless environment",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark this element to get blurred on the next flush of the queue\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1549,
          "column": 4,
          "index": 45335
        },
        "end": {
          "line": 1553,
          "column": 5,
          "index": 45448
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "activate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mark this element to get activated on the next flush of the queue",
          "     *",
          "     * Silently does nothing when in a headless environment",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark this element to get activated on the next flush of the queue\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1561,
          "column": 4,
          "index": 45618
        },
        "end": {
          "line": 1565,
          "column": 5,
          "index": 45739
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "deactivate": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Mark this element to get deactivated on the next flush of the queue",
          "     *",
          "     * Silently does nothing when in a headless environment",
          "     *",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Mark this element to get deactivated on the next flush of the queue\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1573,
          "column": 4,
          "index": 45911
        },
        "end": {
          "line": 1577,
          "column": 5,
          "index": 46036
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "capture": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Captures all mouse events to this element",
          "     *",
          "     * Silently does nothing when in a headless environment",
          "     *",
          "     * @param containerCapture {Boolean?true} If true all events originating in",
          "     *   the container are captured. If false events originating in the container",
          "     *   are not captured.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Captures all mouse events to this element\n Silently does nothing when in a headless environment</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "containerCapture {Boolean?true} If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "paramName": "containerCapture",
            "description": " If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1588,
          "column": 4,
          "index": 46371
        },
        "end": {
          "line": 1592,
          "column": 5,
          "index": 46536
        }
      },
      "type": "function",
      "params": [
        {
          "name": "containerCapture",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "true"
        }
      ],
      "appearsIn": []
    },
    "releaseCapture": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Releases this element from a previous {@link #capture} call",
          "     *",
          "     * Silently does nothing when in a headless environment",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Releases this element from a previous {@link #capture} call\n Silently does nothing when in a headless environment</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1599,
          "column": 4,
          "index": 46693
        },
        "end": {
          "line": 1603,
          "column": 5,
          "index": 46826
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "setStyle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set up the given style attribute",
          "     *",
          "     * @param key {String} the name of the style attribute",
          "     * @param value {var} the value",
          "     * @param direct {Boolean?false} Whether the value should be applied",
          "     *    directly (without queuing)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set up the given style attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the style attribute",
            "paramName": "key",
            "description": " the name of the style attribute",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} the value",
            "paramName": "value",
            "description": " the value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1620,
          "column": 4,
          "index": 47364
        },
        "end": {
          "line": 1660,
          "column": 5,
          "index": 48431
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "_applyStyle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Called by setStyle when a value of a style changes; this is intended to be",
          "     * overridden to allow the element to update properties etc according to the",
          "     * style",
          "     *",
          "     * @param key {String} the style value",
          "     * @param value {String?} the value to set",
          "     * @param oldValue {String?} The previous value (not from DOM)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Called by setStyle when a value of a style changes; this is intended to be\n overridden to allow the element to update properties etc according to the\n style</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the style value",
            "paramName": "key",
            "description": " the style value",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {String?} the value to set",
            "paramName": "value",
            "description": " the value to set",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "oldValue {String?} The previous value (not from DOM)",
            "paramName": "oldValue",
            "description": " The previous value (not from DOM)",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1671,
          "column": 4,
          "index": 48794
        },
        "end": {
          "line": 1673,
          "column": 5,
          "index": 48852
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "value",
          "type": "String",
          "optional": true
        },
        {
          "name": "oldValue",
          "type": "String",
          "optional": true
        }
      ],
      "appearsIn": []
    },
    "setStyles": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convenience method to modify a set of styles at once.",
          "     *",
          "     * @param map {Map} a map where the key is the name of the property",
          "     *    and the value is the value to use.",
          "     * @param direct {Boolean?false} Whether the values should be applied",
          "     *    directly (without queuing)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convenience method to modify a set of styles at once.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Map} a map where the key is the name of the property\n    and the value is the value to use.",
            "paramName": "map",
            "description": " a map where the key is the name of the property\n    and the value is the value to use.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the values should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the values should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1683,
          "column": 4,
          "index": 49239
        },
        "end": {
          "line": 1739,
          "column": 5,
          "index": 50773
        }
      },
      "type": "function",
      "params": [
        {
          "name": "map",
          "type": "Map<any, any>"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "removeStyle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given style attribute",
          "     *",
          "     * @param key {String} the name of the style attribute",
          "     * @param direct {Boolean?false} Whether the value should be removed",
          "     *    directly (without queuing)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given style attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the style attribute",
            "paramName": "key",
            "description": " the name of the style attribute",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be removed\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be removed\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1749,
          "column": 4,
          "index": 51081
        },
        "end": {
          "line": 1752,
          "column": 5,
          "index": 51172
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "getStyle": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the value of the given style attribute.",
          "     *",
          "     * @param key {String} name of the style attribute",
          "     * @return {var} the value of the style attribute",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the value of the given style attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} name of the style attribute",
            "paramName": "key",
            "description": " name of the style attribute",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the style attribute",
            "type": "var",
            "description": "the value of the style attribute"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1760,
          "column": 4,
          "index": 51362
        },
        "end": {
          "line": 1762,
          "column": 5,
          "index": 51449
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    },
    "getAllStyles": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns a map of all styles. Do not modify the result map!",
          "     *",
          "     * @return {Map} All styles or <code>null</code> when none are configured.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a map of all styles. Do not modify the result map!</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} All styles or <code>null</code> when none are configured.",
            "type": "Map<any, any>",
            "description": "All styles or <code>null</code> when none are configured."
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1769,
          "column": 4,
          "index": 51624
        },
        "end": {
          "line": 1771,
          "column": 5,
          "index": 51687
        }
      },
      "type": "function",
      "params": [],
      "returnType": {
        "type": "Map<any, any>"
      },
      "appearsIn": []
    },
    "__breakClasses": {
      "jsdoc": {
        "raw": [
          "",
          "    ---------------------------------------------------------------------------",
          "      CSS CLASS SUPPORT",
          "    ---------------------------------------------------------------------------",
          "    "
        ]
      },
      "access": "private",
      "location": {
        "start": {
          "line": 1778,
          "column": 4,
          "index": 51892
        },
        "end": {
          "line": 1786,
          "column": 5,
          "index": 52114
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "__combineClasses": {
      "jsdoc": null,
      "access": "private",
      "location": {
        "start": {
          "line": 1788,
          "column": 4,
          "index": 52121
        },
        "end": {
          "line": 1797,
          "column": 5,
          "index": 52430
        }
      },
      "type": "function",
      "params": [
        {
          "name": "map"
        }
      ],
      "appearsIn": []
    },
    "addClass": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Adds a css class to the element.",
          "     *",
          "     * @param name {String} Name of the CSS class.",
          "     * @return {Element} this, for chaining",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a css class to the element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the CSS class.",
            "paramName": "name",
            "description": " Name of the CSS class.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} this, for chaining",
            "type": "qx.html.Element",
            "description": "this, for chaining"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1805,
          "column": 4,
          "index": 52595
        },
        "end": {
          "line": 1818,
          "column": 5,
          "index": 53027
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "removeClass": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes a CSS class from the current element.",
          "     *",
          "     * @param name {String} Name of the CSS class.",
          "     * @return {Element} this, for chaining",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a CSS class from the current element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the CSS class.",
            "paramName": "name",
            "description": " Name of the CSS class.",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} this, for chaining",
            "type": "qx.html.Element",
            "description": "this, for chaining"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1826,
          "column": 4,
          "index": 53205
        },
        "end": {
          "line": 1840,
          "column": 5,
          "index": 53641
        }
      },
      "type": "function",
      "params": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "removeAllClasses": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes all CSS classed from the current element.",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all CSS classed from the current element.</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1845,
          "column": 4,
          "index": 53721
        },
        "end": {
          "line": 1848,
          "column": 5,
          "index": 53815
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "_applyCssClass": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Apply method for cssClass",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply method for cssClass</p>"
          }
        ]
      },
      "access": "protected",
      "location": {
        "start": {
          "line": 1853,
          "column": 4,
          "index": 53871
        },
        "end": {
          "line": 1862,
          "column": 5,
          "index": 54237
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "oldValue"
        }
      ],
      "appearsIn": []
    },
    "_applyIsCustomElement": {
      "jsdoc": null,
      "access": "protected",
      "location": {
        "start": {
          "line": 1864,
          "column": 4,
          "index": 54244
        },
        "end": {
          "line": 1878,
          "column": 5,
          "index": 54769
        }
      },
      "type": "function",
      "params": [
        {
          "name": "value"
        },
        {
          "name": "oldValue"
        }
      ],
      "appearsIn": []
    },
    "getDimensions": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Returns the size and position of this element; this is just a helper method that wraps",
          "     * the calls to qx.bom.*",
          "     *",
          "     * Supported modes:",
          "     *",
          "     * * <code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)",
          "     * * <code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)",
          "     * * <code>border</code>: Calculate the border box (useful to align to border edges of two elements).",
          "     * * <code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).",
          "     * * <code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).",
          "     *",
          "     * @param mode {String} the type of size required, see above",
          "     * @return {Object} a map, containing:",
          "     *  left, right, top, bottom - document co-ords",
          "     *  content - Object, containing:",
          "     *    width, height: maximum permissible content size",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the size and position of this element; this is just a helper method that wraps\n the calls to qx.bom.*\n Supported modes:</p>\n<ul>\n<li><code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)</li>\n<li><code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)</li>\n<li><code>border</code>: Calculate the border box (useful to align to border edges of two elements).</li>\n<li><code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).</li>\n<li><code>padding</code>: Calculate the padding box (relevant for static/relative positioned content).</li>\n</ul>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String} the type of size required, see above",
            "paramName": "mode",
            "description": " the type of size required, see above",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} a map, containing:\n  left, right, top, bottom - document co-ords\n  content - Object, containing:\n    width, height: maximum permissible content size",
            "type": "Record<any, any>",
            "description": "a map, containing:\n  left, right, top, bottom - document co-ords\n  content - Object, containing:\n    width, height: maximum permissible content size"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1904,
          "column": 4,
          "index": 55992
        },
        "end": {
          "line": 1924,
          "column": 5,
          "index": 56520
        }
      },
      "type": "function",
      "params": [
        {
          "name": "mode",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "Record<any, any>"
      },
      "appearsIn": []
    },
    "canBeSeen": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Detects whether the DOM Node is visible",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the DOM Node is visible</p>"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1929,
          "column": 4,
          "index": 56590
        },
        "end": {
          "line": 1942,
          "column": 5,
          "index": 56907
        }
      },
      "type": "function",
      "params": [],
      "appearsIn": []
    },
    "setAttribute": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Set up the given attribute",
          "     *",
          "     * @param key {String} the name of the attribute",
          "     * @param value {var} the value",
          "     * @param direct {Boolean?false} Whether the value should be applied",
          "     *    directly (without queuing)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set up the given attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the attribute",
            "paramName": "key",
            "description": " the name of the attribute",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "value {var} the value",
            "paramName": "value",
            "description": " the value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 1959,
          "column": 4,
          "index": 57437
        },
        "end": {
          "line": 2002,
          "column": 5,
          "index": 58588
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "value",
          "type": "var"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "setAttributes": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Convenience method to modify a set of attributes at once.",
          "     *",
          "     * @param map {Map} a map where the key is the name of the property",
          "     *    and the value is the value to use.",
          "     * @param direct {Boolean?false} Whether the values should be applied",
          "     *    directly (without queuing)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convenience method to modify a set of attributes at once.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Map} a map where the key is the name of the property\n    and the value is the value to use.",
            "paramName": "map",
            "description": " a map where the key is the name of the property\n    and the value is the value to use.",
            "type": "Map<any, any>"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the values should be applied\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the values should be applied\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 2013,
          "column": 4,
          "index": 58979
        },
        "end": {
          "line": 2019,
          "column": 5,
          "index": 59120
        }
      },
      "type": "function",
      "params": [
        {
          "name": "map",
          "type": "Map<any, any>"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "removeAttribute": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Removes the given attribute",
          "     *",
          "     * @param key {String} the name of the attribute",
          "     * @param direct {Boolean?false} Whether the value should be removed",
          "     *    directly (without queuing)",
          "     * @return {qx.html.Element} this object (for chaining support)",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the given attribute</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} the name of the attribute",
            "paramName": "key",
            "description": " the name of the attribute",
            "type": "string"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the value should be removed\n    directly (without queuing)",
            "paramName": "direct",
            "description": " Whether the value should be removed\n    directly (without queuing)",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Element} this object (for chaining support)",
            "type": "qx.html.Element",
            "description": "this object (for chaining support)"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 2029,
          "column": 4,
          "index": 59416
        },
        "end": {
          "line": 2031,
          "column": 5,
          "index": 59503
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        },
        {
          "name": "direct",
          "type": "Boolean",
          "optional": true,
          "defaultValue": "false"
        }
      ],
      "returnType": {
        "type": "qx.html.Element"
      },
      "appearsIn": []
    },
    "getAttribute": {
      "jsdoc": {
        "raw": [
          "*",
          "     * Get the value of the given attribute.",
          "     *",
          "     * @param key {String} name of the attribute",
          "     * @return {var} the value of the attribute",
          "     "
        ],
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the value of the given attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} name of the attribute",
            "paramName": "key",
            "description": " name of the attribute",
            "type": "string"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the attribute",
            "type": "var",
            "description": "the value of the attribute"
          }
        ]
      },
      "access": "public",
      "location": {
        "start": {
          "line": 2039,
          "column": 4,
          "index": 59675
        },
        "end": {
          "line": 2041,
          "column": 5,
          "index": 59768
        }
      },
      "type": "function",
      "params": [
        {
          "name": "key",
          "type": "string"
        }
      ],
      "returnType": {
        "type": "var"
      },
      "appearsIn": []
    }
  },
  "destruct": {
    "type": "function",
    "params": [],
    "location": {
      "start": {
        "line": 2060,
        "column": 2,
        "index": 60252
      },
      "end": {
        "line": 2075,
        "column": 3,
        "index": 60628
      }
    }
  }
}