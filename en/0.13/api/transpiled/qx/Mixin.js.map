{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "name",
    "config",
    "include",
    "getClass",
    "mixin",
    "setDisplayNames",
    "key",
    "Function",
    "$$mixin",
    "construct",
    "$$constructor",
    "setDisplayName",
    "$$includes",
    "properties",
    "$$properties",
    "members",
    "$$members",
    "events",
    "$$events",
    "destruct",
    "$$destructor",
    "$$type",
    "toString",
    "genericToString",
    "basename",
    "createNamespace",
    "$$registry",
    "checkCompatibility",
    "mixins",
    "list",
    "flatten",
    "len",
    "length",
    "i",
    "Error",
    "isCompatible",
    "clazz",
    "util",
    "OOUtil",
    "getMixins",
    "push",
    "Mixin",
    "getByName",
    "isDefined",
    "undefined",
    "getTotalNumber",
    "objectGetLength",
    "concat",
    "l",
    "apply",
    "baseClassMethod",
    "methodName",
    "$$mixinBaseClassMethods",
    "mixedInAt",
    "mixedInIndex",
    "searchClass",
    "superclass",
    "$$flatIncludes",
    "pos",
    "indexOf",
    "fn",
    "peerMixin",
    "prototype",
    "base",
    "self",
    "__allowedKeys",
    "core",
    "Environment",
    "select",
    "__validateConfig",
    "allowed",
    "maps",
    "classname",
    "a"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/Mixin.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * This class is used to define mixins (similar to mixins in Ruby).\n *\n * Mixins are collections of code and variables, which can be merged into\n * other classes. They are similar to classes but don't support inheritance.\n *\n * See the description of the {@link #define} method how a mixin is defined.\n *\n * @require(qx.lang.normalize.Array)\n */\nqx.Bootstrap.define(\"qx.Mixin\", {\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Define a new mixin.\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Mixin.define(\"name\",\n     * {\n     *   include: [SuperMixins],\n     *\n     *   properties: {\n     *     tabIndex: {type: \"number\", init: -1}\n     *   },\n     *\n     *   members:\n     *   {\n     *     prop1: \"foo\",\n     *     meth1: function() {},\n     *     meth2: function() {}\n     *   }\n     * });\n     * </pre>\n     *\n     * @param name {String} name of the mixin\n     * @param config {Map ? null} Mixin definition structure. The configuration map has the following keys:\n     *   <table>\n     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *     <tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each\n     *         class including this mixin. The constructor takes no parameters.</td></tr>\n     *     <tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>\n     *     <tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>\n     *     <tr><th>statics</th><td>Map</td><td>\n     *         Map of statics of the mixin. The statics will not get copied into the target class. They remain\n     *         accessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).\n     *     </td></tr>\n     *     <tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>\n     *     <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n     *           {@link qx.core.Property}.</td></tr>\n     *     <tr><th>events</th><td>Map</td><td>\n     *         Map of events the mixin fires. The keys are the names of the events and the values are\n     *         corresponding event type classes.\n     *     </td></tr>\n     *   </table>\n     *\n     * @return {qx.Mixin} The configured mixin\n     */\n    define(name, config) {\n      if (config) {\n        // Normalize include\n        if (\n          config.include &&\n          !(qx.Bootstrap.getClass(config.include) === \"Array\")\n        ) {\n          config.include = [config.include];\n        }\n\n        // Validate incoming data\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__validateConfig(name, config);\n        }\n\n        // Create Interface from statics\n        var mixin = config.statics ? config.statics : {};\n        qx.Bootstrap.setDisplayNames(mixin, name);\n\n        for (var key in mixin) {\n          if (mixin[key] instanceof Function) {\n            mixin[key].$$mixin = mixin;\n          }\n        }\n\n        // Attach configuration\n        if (config.construct) {\n          mixin.$$constructor = config.construct;\n          qx.Bootstrap.setDisplayName(config.construct, name, \"constructor\");\n        }\n\n        if (config.include) {\n          mixin.$$includes = config.include;\n        }\n\n        if (config.properties) {\n          mixin.$$properties = config.properties;\n        }\n\n        if (config.members) {\n          mixin.$$members = config.members;\n          qx.Bootstrap.setDisplayNames(config.members, name + \".prototype\");\n        }\n\n        for (var key in mixin.$$members) {\n          if (mixin.$$members[key] instanceof Function) {\n            mixin.$$members[key].$$mixin = mixin;\n          }\n        }\n\n        if (config.events) {\n          mixin.$$events = config.events;\n        }\n\n        if (config.destruct) {\n          mixin.$$destructor = config.destruct;\n          qx.Bootstrap.setDisplayName(config.destruct, name, \"destruct\");\n        }\n      } else {\n        var mixin = {};\n      }\n\n      // Add basics\n      mixin.$$type = \"Mixin\";\n      mixin.name = name;\n\n      // Attach toString\n      mixin.toString = this.genericToString;\n\n      // Assign to namespace\n      mixin.basename = qx.Bootstrap.createNamespace(name, mixin);\n\n      // Store class reference in global mixin registry\n      this.$$registry[name] = mixin;\n\n      // Return final mixin\n      return mixin;\n    },\n\n    /**\n     * Check compatibility between mixins (including their includes)\n     *\n     * @param mixins {Mixin[]} an array of mixins\n     * @throws {Error} when there is a conflict between the mixins\n     * @return {Boolean} <code>true</code> if the mixin passed the compatibility check\n     */\n    checkCompatibility(mixins) {\n      var list = this.flatten(mixins);\n      var len = list.length;\n\n      if (len < 2) {\n        return true;\n      }\n\n      var properties = {};\n      var members = {};\n      var events = {};\n      var mixin;\n\n      for (var i = 0; i < len; i++) {\n        mixin = list[i];\n\n        for (var key in mixin.events) {\n          if (events[key]) {\n            throw new Error(\n              'Conflict between mixin \"' +\n                mixin.name +\n                '\" and \"' +\n                events[key] +\n                '\" in member \"' +\n                key +\n                '\"!'\n            );\n          }\n\n          events[key] = mixin.name;\n        }\n\n        for (var key in mixin.properties) {\n          if (properties[key]) {\n            throw new Error(\n              'Conflict between mixin \"' +\n                mixin.name +\n                '\" and \"' +\n                properties[key] +\n                '\" in property \"' +\n                key +\n                '\"!'\n            );\n          }\n\n          properties[key] = mixin.name;\n        }\n\n        for (var key in mixin.members) {\n          if (members[key]) {\n            throw new Error(\n              'Conflict between mixin \"' +\n                mixin.name +\n                '\" and \"' +\n                members[key] +\n                '\" in member \"' +\n                key +\n                '\"!'\n            );\n          }\n\n          members[key] = mixin.name;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Checks if a class is compatible to the given mixin (no conflicts)\n     *\n     * @param mixin {Mixin} mixin to check\n     * @param clazz {Class} class to check\n     * @throws {Error} when the given mixin is incompatible to the class\n     * @return {Boolean} true if the mixin is compatible to the given class\n     */\n    isCompatible(mixin, clazz) {\n      var list = qx.util.OOUtil.getMixins(clazz);\n      list.push(mixin);\n      return qx.Mixin.checkCompatibility(list);\n    },\n\n    /**\n     * Returns a mixin by name\n     *\n     * @param name {String} class name to resolve\n     * @return {Class} the class\n     */\n    getByName(name) {\n      return this.$$registry[name];\n    },\n\n    /**\n     * Determine if mixin exists\n     *\n     * @param name {String} mixin name to check\n     * @return {Boolean} true if mixin exists\n     */\n    isDefined(name) {\n      return this.getByName(name) !== undefined;\n    },\n\n    /**\n     * Determine the number of mixins which are defined\n     *\n     * @return {Number} the number of mixins\n     */\n    getTotalNumber() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n    /**\n     * Generates a list of all mixins given plus all the\n     * mixins these includes plus... (deep)\n     *\n     * @param mixins {Mixin[] ? []} List of mixins\n     * @return {Array} List of all mixins\n     */\n    flatten(mixins) {\n      if (!mixins) {\n        return [];\n      }\n\n      // we need to create a copy and not to modify the existing array\n      var list = mixins.concat();\n\n      for (var i = 0, l = mixins.length; i < l; i++) {\n        if (mixins[i].$$includes) {\n          list.push.apply(list, this.flatten(mixins[i].$$includes));\n        }\n      }\n\n      return list;\n    },\n\n    /**\n     * This method is used to determine the base method to call at runtime, and is used\n     * by Mixins where the mixin method calls `this.base()`.  It is only required by the\n     * compiler, and not the generator.\n     *\n     * The problem is that while Mixin's cannot override the same methods in a single class,\n     * they can override methods that were implemented in a base base - but the compiler\n     * cannot emit compile-time code which knows the base class method because that depends\n     * on the class that the mixin is mixed-into.\n     *\n     * This method will search the hierarchy of the class at runtime, and figure out the\n     * nearest superclass method to call; the result is cached, and it is acceptable for\n     * a mixin's method to override a method mixed into a superclass.\n     *\n     * Technically, this method should be private - it is internal and no notification will\n     * be given if the API changes.  However, because it needs to be called by generated code\n     * in any class, it has to appear as public.  Do not use it directly.\n     *\n     * @param clazz {Class} the class that is to be examined\n     * @param mixin {Mixin} the mixin that is calling `this.base`\n     * @param methodName {String} the name of the method in `mixin` that is calling `this.base`\n     * @return {Function} the base class function to call\n     */\n    baseClassMethod(clazz, mixin, methodName) {\n      if (!qx.core.Environment.get(\"qx.compiler\")) {\n        qx.log.Logger.error(\n          \"qx.Mixin.baseClassMethod should not be used except with code compiled by the compiler (ie NOT the generator / python toolchain)\"\n        );\n      } else {\n        if (\n          clazz.$$mixinBaseClassMethods &&\n          clazz.$$mixinBaseClassMethods[mixin.name] !== undefined &&\n          clazz.$$mixinBaseClassMethods[mixin.name][methodName] !== undefined\n        ) {\n          return clazz.$$mixinBaseClassMethods[mixin.name][methodName];\n        }\n\n        // Find the class which added the mixin; if it is mixed in twice, we pick the super-most class\n        var mixedInAt = null;\n        var mixedInIndex = -1;\n        for (\n          var searchClass = clazz;\n          searchClass;\n          searchClass = searchClass.superclass\n        ) {\n          if (searchClass.$$flatIncludes) {\n            var pos = searchClass.$$flatIncludes.indexOf(mixin);\n            if (pos > -1) {\n              mixedInAt = searchClass;\n              mixedInIndex = pos;\n            }\n          }\n        }\n\n        var fn = null;\n\n        if (mixedInAt) {\n          // Multiple mixins can provide an implementation, in which case the mixin which was\n          //  added second's \"base\" implementation is the first mixin's method\n          for (var i = mixedInIndex - 1; i > -1; i--) {\n            var peerMixin = mixedInAt.$$flatIncludes[i];\n            if (peerMixin.$$members[methodName]) {\n              fn = peerMixin.$$members[methodName];\n              break;\n            }\n          }\n          // Try looking in the class itself\n          if (!fn && mixedInAt.prototype[methodName]) {\n            fn = mixedInAt.prototype[methodName].base;\n            // if fn.self is set fn is an overloaded mixin method from\n            // another mixin. In this case fn.base contains the original\n            // class method.\n            if (fn && fn.self) {\n              fn = fn.base;\n            }\n          }\n          // Try looking in the superclass\n          if (!fn && mixedInAt.superclass) {\n            fn = mixedInAt.superclass.prototype[methodName];\n          }\n        }\n\n        // Cache the result\n        if (fn) {\n          if (!clazz.$$mixinBaseClassMethods) {\n            clazz.$$mixinBaseClassMethods = {};\n          }\n          if (!clazz.$$mixinBaseClassMethods[mixin.name]) {\n            clazz.$$mixinBaseClassMethods[mixin.name] = {};\n          }\n          clazz.$$mixinBaseClassMethods[mixin.name][methodName] = fn;\n        } else if (qx.core.Environment.get(\"qx.debug\")) {\n          throw new Error(\n            \"Cannot find base class method called \" +\n              methodName +\n              \" for mixin \" +\n              mixin.name +\n              \", when viewed from \" +\n              clazz.classname\n          );\n        }\n\n        return fn;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all mixins to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The mixin identifier\n     */\n    genericToString() {\n      return \"[Mixin \" + this.name + \"]\";\n    },\n\n    /** Registers all defined mixins */\n    $$registry: {},\n\n    /** @type {Map} allowed keys in mixin definition */\n    __allowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        include: \"object\", // Mixin | Mixin[]\n        statics: \"object\", // Map\n        members: \"object\", // Map\n        properties: \"object\", // Map\n        events: \"object\", // Map\n        destruct: \"function\", // Function\n        construct: \"function\" // Function\n      },\n\n      default: null\n    }),\n\n    /**\n     * Validates incoming configuration and checks keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     */\n    __validateConfig: qx.core.Environment.select(\"qx.debug\", {\n      true(name, config) {\n        // Validate keys\n        var allowed = this.__allowedKeys;\n        for (var key in config) {\n          if (!allowed[key]) {\n            throw new Error(\n              'The configuration key \"' +\n                key +\n                '\" in mixin \"' +\n                name +\n                '\" is not allowed!'\n            );\n          }\n\n          if (config[key] == null) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in mixin \"' +\n                name +\n                '\"! The value is undefined/null!'\n            );\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error(\n              'Invalid type of key \"' +\n                key +\n                '\" in mixin \"' +\n                name +\n                '\"! The type of the key must be \"' +\n                allowed[key] +\n                '\"!'\n            );\n          }\n        }\n\n        // Validate maps\n        var maps = [\"statics\", \"members\", \"properties\", \"events\"];\n        for (var i = 0, l = maps.length; i < l; i++) {\n          var key = maps[i];\n\n          if (\n            config[key] !== undefined &&\n            ([\"Array\", \"RegExp\", \"Date\"].indexOf(\n              qx.Bootstrap.getClass(config[key])\n            ) != -1 ||\n              config[key].classname !== undefined)\n          ) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in mixin \"' +\n                name +\n                '\"! The value needs to be a map!'\n            );\n          }\n        }\n\n        // Validate includes\n        if (config.include) {\n          for (var i = 0, a = config.include, l = a.length; i < l; i++) {\n            if (a[i] == null) {\n              throw new Error(\n                \"Includes of mixins must be mixins. The include number '\" +\n                  (i + 1) +\n                  \"' in mixin '\" +\n                  name +\n                  \"'is undefined/null!\"\n              );\n            }\n\n            if (a[i].$$type !== \"Mixin\") {\n              throw new Error(\n                \"Includes of mixins must be mixins. The include number '\" +\n                  (i + 1) +\n                  \"' in mixin '\" +\n                  name +\n                  \"'is not a mixin!\"\n              );\n            }\n          }\n\n          this.checkCompatibility(config.include);\n        }\n      },\n\n      default(name, config) {}\n    })\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,UAApB,EAAgC;IAC9BC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACID,MApDO,kBAoDAE,IApDA,EAoDMC,MApDN,EAoDc;QACnB,IAAIA,MAAJ,EAAY;UACV;UACA,IACEA,MAAM,CAACC,OAAP,IACA,EAAER,EAAE,CAACC,SAAH,CAAaQ,QAAb,CAAsBF,MAAM,CAACC,OAA7B,MAA0C,OAA5C,CAFF,EAGE;YACAD,MAAM,CAACC,OAAP,GAAiB,CAACD,MAAM,CAACC,OAAR,CAAjB;UACD,CAPS,CASV;;;UAKA;UACA,IAAIE,KAAK,GAAGH,MAAM,CAACF,OAAP,GAAiBE,MAAM,CAACF,OAAxB,GAAkC,EAA9C;UACAL,EAAE,CAACC,SAAH,CAAaU,eAAb,CAA6BD,KAA7B,EAAoCJ,IAApC;;UAEA,KAAK,IAAIM,GAAT,IAAgBF,KAAhB,EAAuB;YACrB,IAAIA,KAAK,CAACE,GAAD,CAAL,YAAsBC,QAA1B,EAAoC;cAClCH,KAAK,CAACE,GAAD,CAAL,CAAWE,OAAX,GAAqBJ,KAArB;YACD;UACF,CAtBS,CAwBV;;;UACA,IAAIH,MAAM,CAACQ,SAAX,EAAsB;YACpBL,KAAK,CAACM,aAAN,GAAsBT,MAAM,CAACQ,SAA7B;YACAf,EAAE,CAACC,SAAH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"
}