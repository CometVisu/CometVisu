{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "name",
    "testFunction",
    "constructor",
    "call",
    "setName",
    "setTestFunction",
    "properties",
    "check",
    "description",
    "event",
    "exitCode",
    "nullable",
    "init",
    "needsServer",
    "members",
    "execute",
    "f",
    "getTestFunction",
    "Promise",
    "resolve",
    "tool",
    "cli",
    "api",
    "Test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/tool/cli/api/Test.js"
  ],
  "sourcesContent": [
    "/**\n * This is used to add an test case for qx test\n */\nqx.Class.define(\"qx.tool.cli.api.Test\", {\n  extend: qx.core.Object,\n  construct(name, testFunction) {\n    super();\n    this.setName(name);\n    if (testFunction) {\n      this.setTestFunction(testFunction);\n    }\n  },\n  properties: {\n    /**\n     * Name of the process\n     */\n    name: {\n      check: \"String\"\n    },\n\n    /**\n     * A description of the test.\n     * For documentation purpose\n     */\n    description: {\n      check: \"String\",\n      event: \"changeDescription\"\n    },\n\n    /**\n     * The exit code of the test.\n     *\n     */\n    exitCode: {\n      check: \"Number\",\n      event: \"changeExitCode\",\n      nullable: true,\n      init: null\n    },\n\n    /**\n     * Is the webserver instance needed for this test?\n     */\n    needsServer: {\n      check: \"Boolean\",\n      nullable: false,\n      init: true\n    },\n\n    /**\n     * The test function called by qx test\n     *\n     */\n    testFunction: {\n      check: \"Function\",\n      nullable: false,\n      init: () => {}\n    }\n  },\n\n  members: {\n    /**\n     * Execute the test\n     *\n     * @returns: Promise\n     *\n     * Can be overriden\n     */\n    execute() {\n      let f = this.getTestFunction();\n      return qx.Promise.resolve(f.call(this, this));\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,sBAAsB,EAAE;IACtCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,SAAS,WAAAA,UAACC,IAAI,EAAEC,YAAY,EAAE;MAC5BX,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAI,WAAA,CAAAC,IAAA;MACA,IAAI,CAACC,OAAO,CAACJ,IAAI,CAAC;MAClB,IAAIC,YAAY,EAAE;QAChB,IAAI,CAACI,eAAe,CAACJ,YAAY,CAAC;MACpC;IACF,CAAC;IACDK,UAAU,EAAE;MACV;AACJ;AACA;MACIN,IAAI,EAAE;QACJO,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;AACA;MACIC,WAAW,EAAE;QACXD,KAAK,EAAE,QAAQ;QACfE,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;AACA;MACIC,QAAQ,EAAE;QACRH,KAAK,EAAE,QAAQ;QACfE,KAAK,EAAE,gBAAgB;QACvBE,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;MACIC,WAAW,EAAE;QACXN,KAAK,EAAE,SAAS;QAChBI,QAAQ,EAAE,KAAK;QACfC,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;MACIX,YAAY,EAAE;QACZM,KAAK,EAAE,UAAU;QACjBI,QAAQ,EAAE,KAAK;QACfC,IAAI,EAAE,SAAAA,KAAA,EAAM,CAAC;MACf;IACF,CAAC;IAEDE,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAAA,EAAG;QACR,IAAIC,CAAC,GAAG,IAAI,CAACC,eAAe,CAAC,CAAC;QAC9B,OAAO3B,EAAE,CAAC4B,OAAO,CAACC,OAAO,CAACH,CAAC,CAACb,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;MAC/C;IACF;EACF,CAAC,CAAC;EAzEFb,EAAE,CAAC8B,IAAI,CAACC,GAAG,CAACC,GAAG,CAACC,IAAI,CAAC9B,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}