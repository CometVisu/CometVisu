{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "tool",
    "compiler",
    "jsdoc",
    "CommandParser",
    "members",
    "parseCommand",
    "pdoc",
    "typeResolver",
    "m",
    "body",
    "match",
    "type",
    "paramName",
    "trim",
    "resolveType",
    "description",
    "_m$5$trim",
    "_m$",
    "pos",
    "indexOf",
    "optional",
    "tmp",
    "substring",
    "defaultValue",
    "segs",
    "split",
    "length",
    "map",
    "str",
    "result",
    "dims",
    "count",
    "dimensions",
    "ParamParser"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/tool/compiler/jsdoc/ParamParser.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2017 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\n/**\n * Parser for JSDoc \"@param\"\n */\nqx.Class.define(\"qx.tool.compiler.jsdoc.ParamParser\", {\n  extend: qx.tool.compiler.jsdoc.CommandParser,\n\n  members: {\n    /**\n     * @Override\n     */\n    parseCommand(pdoc, typeResolver) {\n      var m = pdoc.body.match(/^([\\S]+)(\\s+\\{([^}]+)\\}([\\s\\S]+)?)??$/);\n      var type;\n      if (m) {\n        pdoc.paramName = m[1].trim();\n        type = typeResolver.resolveType((m[3] || \"\").trim());\n        pdoc.description = m[4];\n      } else {\n        m = pdoc.body.match(/^(\\{([^}]+)\\}([\\s]+))(\\S+)(\\s+[\\s\\S]*)?$/);\n        if (m) {\n          pdoc.paramName = m[4].trim();\n          type = typeResolver.resolveType((m[2] || \"\").trim());\n          pdoc.description = m[5]?.trim() ?? \"\";\n        }\n      }\n      if (m) {\n        var pos = type.indexOf(\"?\");\n        if (pos > -1) {\n          pdoc.optional = true;\n          var tmp = type.substring(pos + 1).trim();\n          if (tmp) {\n            pdoc.defaultValue = tmp;\n          }\n          type = type.substring(0, pos).trim();\n        }\n        var segs = type.split(\"|\");\n        if (segs.length > 1) {\n          type = segs.map(str => {\n            var result;\n            str = str.trim();\n            var pos = str.indexOf(\"[]\");\n            if (pos > -1) {\n              var dims = str.substring(pos);\n              result = {\n                type: str.substring(0, pos)\n              };\n\n              var count = 1;\n              pos = 0;\n              while (dims.length && dims.substring(pos, 2) == \"[]\") {\n                pos += 2;\n                count++;\n              }\n              result.dimensions = count;\n            } else {\n              result = str;\n            }\n            return result;\n          });\n        }\n        pdoc.type = type;\n      } else {\n        delete pdoc.paramName;\n        delete pdoc.type;\n        delete pdoc.description;\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}