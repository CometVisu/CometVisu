{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "showdown",
    "require",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "parseComment",
    "comment",
    "trim",
    "startsWith",
    "current",
    "name",
    "body",
    "cmds",
    "replace",
    "split",
    "forEach",
    "line",
    "trimRight",
    "m",
    "match",
    "length",
    "push",
    "result",
    "converter",
    "Converter",
    "cmd",
    "makeHtml",
    "e",
    "tool",
    "compiler",
    "Console",
    "getInstance",
    "isVerbose",
    "info",
    "concat",
    "message",
    "parseJsDoc",
    "jsdoc",
    "typeResolver",
    "key",
    "parser",
    "__PARSERS",
    "pdoc",
    "parseCommand",
    "ParamParser",
    "ReturnParser",
    "ThrowsParser",
    "ChildControlParser",
    "getTypeExpression",
    "text",
    "chars",
    "open",
    "firstInclude",
    "firstExclude",
    "idx",
    "expr",
    "slice",
    "start",
    "end",
    "Parser"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/tool/compiler/jsdoc/Parser.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2017 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\nconst showdown = require(\"showdown\");\n\n/**\n * JSDoc Parser\n */\nqx.Class.define(\"qx.tool.compiler.jsdoc.Parser\", {\n  extend: qx.core.Object,\n\n  statics: {\n    /**\n     * Parses a JSDoc comment, returns an object where the keys are the name of the JSDoc (eg \"@description\")\n     * and the value are an array of objects, one for each entry that was found.  The individual entries\n     * consist of the name, the body of the JSDoc entry, and optional, key-specific parsed data (where supported)\n     */\n    parseComment(comment) {\n      /* \n         JSDoc starts with /**\n         babel parses this to * - the comment starting end ending is striped\n         So whe have to test for valid JSDoc comment.\n      */\n      comment = comment.trim();\n      if (\n        !(\n          comment.startsWith(\"* \") ||\n          comment.startsWith(\"*\\n\") ||\n          comment.startsWith(\"*\\r\")\n        )\n      ) {\n        return {};\n      }\n      var current = { name: \"@description\", body: \"\" };\n      var cmds = [current];\n\n      // special handling for code section\n      comment = comment.replace(/`([^`]*)`/gm, \"<code>$1</code>\");\n      // Strip optional leading *\n      comment = comment.replace(/^[ \\t]*\\*/gm, \"\");\n      // special handling for as markdown lists - * in qooxdoo\n      comment = comment.replace(/^\\s*\\*/gm, \"*\");\n      comment = comment.replace(/^\\s*\\*\\*\\*\\*/gm, \"\\t\\t\\t*\");\n      comment = comment.replace(/^\\s*\\*\\*\\*/gm, \"\\t\\t*\");\n      comment = comment.replace(/^\\s*\\*\\*/gm, \"\\t*\");\n\n      comment = comment.split(\"\\n\");\n      comment.forEach(function (line) {\n        line = line.trimRight();\n        if (!line) {\n          return;\n        }\n\n        // Strip trailing single line comment\n        let m = line.match(/(^.*)([^:]\\/\\/.*)$/);\n        if (m) {\n          line = m[1].trimRight();\n        }\n\n        // Look for command at the beginning of the line\n        m = line.match(/^\\s*(\\@[a-zA-Z0-9_]+)(.*)$/);\n        if (!m) {\n          // Clean starting * as markdown lists\n          if (current.body.length) {\n            current.body += \"\\n\";\n          }\n          current.body += line;\n          return;\n        }\n\n        var name = m[1];\n        var body = m[2];\n\n        // Patch common command names\n        if (name == \"@returns\") {\n          name = \"@return\";\n        }\n        if (name == \"@throw\") {\n          name = \"@throws\";\n        }\n\n        // store it\n        current = { name: name, body: body };\n        cmds.push(current);\n      });\n      var result = {};\n      let converter = new showdown.Converter();\n      cmds.forEach(function (cmd) {\n        if (cmd.name === \"@description\") {\n          try {\n            cmd.body = converter.makeHtml(cmd.body);\n          } catch (e) {\n            if (qx.tool.compiler.Console.getInstance().isVerbose()) {\n              qx.tool.compiler.Console.info(`\n              Markdown conversion problem: \n              Error \"${e.message}\" was thrown parsing \n              \"${cmd.body.trim()}\". \n              Please review your doc comments for compatibility with Markdown syntax.\n              `);\n            }\n          }\n        } else {\n          // If the body is surrounded by parameters, remove them\n          let m = cmd.body.match(/^\\s*\\(([\\s\\S]*)\\)\\s*$/m);\n          if (m) {\n            cmd.body = m[1];\n          }\n          cmd.body = cmd.body.trim();\n        }\n        if (result[cmd.name]) {\n          result[cmd.name].push(cmd);\n        } else {\n          result[cmd.name] = [cmd];\n        }\n      });\n      return result;\n    },\n\n    /**\n     *\n     * @param {*} jsdoc POJO\n     */\n    parseJsDoc(jsdoc, typeResolver) {\n      for (var key in jsdoc) {\n        var parser = this.__PARSERS[key];\n        if (parser) {\n          jsdoc[key].forEach(pdoc => parser.parseCommand(pdoc, typeResolver));\n        }\n      }\n    },\n\n    __PARSERS: {\n      \"@param\": new qx.tool.compiler.jsdoc.ParamParser(),\n      \"@return\": new qx.tool.compiler.jsdoc.ReturnParser(),\n      \"@throws\": new qx.tool.compiler.jsdoc.ThrowsParser(),\n      \"@throw\": new qx.tool.compiler.jsdoc.ThrowsParser(),\n      \"@childControl\": new qx.tool.compiler.jsdoc.ChildControlParser()\n    },\n\n    getTypeExpression(text) {\n      const chars = text.split(\"\");\n      let open = 0;\n      let firstInclude;\n      let firstExclude;\n      for (let idx = 0; idx < chars.length; idx++) {\n        const current = chars[idx];\n        if (current == \"{\") {\n          open++;\n          if (!firstInclude) {\n            firstInclude = idx + 1;\n          }\n        }\n        if (current == \"}\") {\n          open--;\n          if (open === 0 && !firstExclude) {\n            firstExclude = idx;\n            break;\n          }\n        }\n      }\n      if (!firstInclude || !firstExclude) {\n        return null;\n      }\n      return {\n        expr: text.slice(firstInclude, firstExclude),\n        start: firstInclude,\n        end: firstExclude\n      };\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}