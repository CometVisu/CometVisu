{
  "version": 3,
  "names": [
    "_regeneratorRuntime",
    "e",
    "t",
    "r",
    "Object",
    "prototype",
    "n",
    "hasOwnProperty",
    "o",
    "defineProperty",
    "value",
    "i",
    "Symbol",
    "a",
    "iterator",
    "c",
    "asyncIterator",
    "u",
    "toStringTag",
    "define",
    "enumerable",
    "configurable",
    "writable",
    "wrap",
    "Generator",
    "create",
    "Context",
    "makeInvokeMethod",
    "tryCatch",
    "type",
    "arg",
    "call",
    "h",
    "l",
    "f",
    "s",
    "y",
    "GeneratorFunction",
    "GeneratorFunctionPrototype",
    "p",
    "d",
    "getPrototypeOf",
    "v",
    "values",
    "g",
    "defineIteratorMethods",
    "forEach",
    "_invoke",
    "AsyncIterator",
    "invoke",
    "_typeof",
    "resolve",
    "__await",
    "then",
    "callInvokeWithMethodAndArg",
    "Error",
    "done",
    "method",
    "delegate",
    "maybeInvokeDelegate",
    "sent",
    "_sent",
    "dispatchException",
    "abrupt",
    "TypeError",
    "resultName",
    "next",
    "nextLoc",
    "pushTryEntry",
    "tryLoc",
    "catchLoc",
    "finallyLoc",
    "afterLoc",
    "tryEntries",
    "push",
    "resetTryEntry",
    "completion",
    "reset",
    "isNaN",
    "length",
    "displayName",
    "isGeneratorFunction",
    "constructor",
    "name",
    "mark",
    "setPrototypeOf",
    "__proto__",
    "awrap",
    "async",
    "Promise",
    "keys",
    "reverse",
    "pop",
    "prev",
    "charAt",
    "slice",
    "stop",
    "rval",
    "handle",
    "complete",
    "finish",
    "_catch",
    "delegateYield",
    "asyncGeneratorStep",
    "_asyncToGenerator",
    "arguments",
    "apply",
    "_next",
    "_throw",
    "$$dbClassInfo",
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "fs",
    "require",
    "path",
    "tmp",
    "http",
    "fontkit",
    "log",
    "tool",
    "utils",
    "LogManager",
    "createLog",
    "Class",
    "extend",
    "core",
    "construct",
    "library",
    "__library",
    "properties",
    "check",
    "defaultSize",
    "init",
    "mapping",
    "nullable",
    "comparisonString",
    "resources",
    "members",
    "__fontData",
    "_loadLocalFont",
    "filename",
    "_this",
    "_callee",
    "fontpath",
    "_callee$",
    "_context",
    "join",
    "getRootDir",
    "getResourcePath",
    "__processFontFile",
    "_loadRemoteFont",
    "url",
    "_this2",
    "_callee2",
    "tmpFilename",
    "result",
    "_callee2$",
    "_context2",
    "Http",
    "downloadToTempFile",
    "unlink",
    "__P_488_2",
    "_this3",
    "_callee3",
    "_font$GSUB",
    "font",
    "mapPath",
    "data",
    "map",
    "ligatureName",
    "lookupList",
    "lookupListIndexes",
    "_callee3$",
    "_context3",
    "open",
    "getMapping",
    "promises",
    "readFile",
    "encoding",
    "t0",
    "error",
    "concat",
    "code",
    "JSON",
    "parse",
    "key",
    "codePoint",
    "parseInt",
    "glyph",
    "glyphForCodePoint",
    "id",
    "compiler",
    "Console",
    "trace",
    "getName",
    "Math",
    "ceil",
    "getDefaultSize",
    "advanceWidth",
    "advanceHeight",
    "GSUB",
    "toArray",
    "featureList",
    "feature",
    "index",
    "_subTable$coverage",
    "_subTable$ligatureSet",
    "subTable",
    "subTables",
    "leadingCharacters",
    "coverage",
    "rangeRecords",
    "start",
    "end",
    "character",
    "stringsForGlyph",
    "ligatureSets",
    "ligatureSet",
    "ligatureSetIndex",
    "leadingCharacter",
    "ligature",
    "ligatureText",
    "components",
    "x",
    "hexId",
    "charCodeAt",
    "toString",
    "undefined",
    "characterSet",
    "_commands",
    "commands",
    "_glyph$path",
    "ex",
    "layers",
    "found",
    "gName",
    "names",
    "getBootstrapCode",
    "target",
    "application",
    "res",
    "lineHeight",
    "family",
    "fontFaces",
    "paths",
    "getResources",
    "getComparisonString",
    "stringify",
    "generateForTarget",
    "_this4",
    "__generateForTargetPromise",
    "generate",
    "_ref",
    "_callee4",
    "_iterator",
    "_step",
    "resource",
    "basename",
    "_callee4$",
    "_context4",
    "_createForOfIteratorHelper",
    "match",
    "generateForApplication",
    "_this5",
    "_callee5",
    "_callee5$",
    "_context5",
    "str",
    "app",
    "WebFont"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/tool/compiler/app/WebFont.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2017 GONICUS GmbH, http://www.gonicus.de\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * Cajus Pollmeier (pollmeier@gonicus.de, @cajus)\n *\n * *********************************************************************** */\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst tmp = require(\"tmp\");\nconst http = require(\"http\");\nconst fontkit = require(\"fontkit\");\n\nvar log = qx.tool.utils.LogManager.createLog(\"font\");\n\n/**\n * Represents a WebFont provided by a Library\n */\nqx.Class.define(\"qx.tool.compiler.app.WebFont\", {\n  extend: qx.core.Object,\n\n  construct(library) {\n    super();\n    this.__library = library;\n  },\n\n  properties: {\n    /** The name of the webfont */\n    name: {\n      check: \"String\"\n    },\n\n    /** The default size */\n    defaultSize: {\n      check: \"Integer\",\n      init: 40\n    },\n\n    /**\n     * Optional mapping filename. The path is relative to the location of the\n     * `Manifest.json` file. The mapping file is in json format and should contain\n     * a map of icon name to code point in hex:\n     * `{ \"my_icon\": \"ef99\", \"my_other_icon\": \"483c\"}`\n     */\n    mapping: {\n      init: null,\n      nullable: true,\n      check: \"String\"\n    },\n\n    /**\n     * Characters that are used to test if the font has loaded properly. These\n     * default to \"WEei\" in `qx.bom.webfont.Validator` and can be overridden\n     * for certain cases like icon fonts that do not provide the predefined\n     * characters.\n     */\n    comparisonString: {\n      init: null,\n      nullable: true,\n      check: \"String\"\n    },\n\n    /** {String[]} Resources that make up the font; an array of Strings, each of which can be a URL or a local file */\n    resources: {\n      check: \"Array\"\n    }\n  },\n\n  members: {\n    __library: null,\n    __fontData: null,\n\n    /**\n     * Helper which triggers a local font analyze run.\n     *\n     * @param filename {String} Filename for the local font\n     * @return {Map<String,String>} mapping of glyphs to codepoints\n     */\n    async _loadLocalFont(filename) {\n      let fontpath = path.join(\n        this.__library.getRootDir(),\n        path.join(this.__library.getResourcePath(), filename)\n      );\n\n      return await this.__processFontFile(fontpath);\n    },\n\n    /**\n     * Helper which loads a remote font to analyze the result.\n     *\n     * @param url {String} URL for the font download\n     * @return {Map<String,String>} mapping of glyphs to codepoints\n     */\n    async _loadRemoteFont(url) {\n      let tmpFilename = await qx.tool.utils.Http.downloadToTempFile(\n        url,\n        /^font\\/(ttf|svg|eot|woff|woff2)$/\n      );\n\n      let result = await this.__processFontFile(tmpFilename);\n      fs.unlink(tmpFilename);\n      return result;\n    },\n\n    /**\n     * Common code to extract the desired font information from a font file\n     * on disk.\n     *\n     * @param filename {String} Path to font file\n     * @return {Map<String,String>} mapping of glyphs to codepoints\n     */\n    async __processFontFile(filename) {\n      let font = await fontkit.open(filename);\n      let resources = {};\n\n      // If we have a mapping file, take qx.tool.compiler.Console.information instead\n      // of anaylzing the font.\n      if (this.getMapping()) {\n        let mapPath = path.join(\n          this.__library.getRootDir(),\n          path.join(this.__library.getResourcePath(), this.getMapping())\n        );\n\n        let data;\n        try {\n          data = await fs.promises.readFile(mapPath, { encoding: \"utf-8\" });\n        } catch (err) {\n          log.error(`Cannot read mapping file '${mapPath}': ${err.code}`);\n          throw err;\n        }\n\n        let map = JSON.parse(data);\n        Object.keys(map).forEach(key => {\n          let codePoint = parseInt(map[key], 16);\n          let glyph = font.glyphForCodePoint(codePoint);\n          if (!glyph.id) {\n            qx.tool.compiler.Console.trace(\n              `WARN: no glyph found in ${filename} ${key}: ${codePoint}`\n            );\n\n            return;\n          }\n          resources[\"@\" + this.getName() + \"/\" + key] = [\n            Math.ceil(\n              (this.getDefaultSize() * glyph.advanceWidth) / glyph.advanceHeight\n            ),\n\n            // width\n            this.getDefaultSize(), // height\n            codePoint\n          ];\n        }, this);\n\n        return resources;\n      }\n\n      if (!font.GSUB?.lookupList?.toArray()?.length) {\n        qx.tool.compiler.Console.error(\n          `The webfont in ${filename} does not have any ligatures`\n        );\n\n        return resources;\n      }\n\n      // some IconFonts (MaterialIcons for example) use ligatures\n      // to name their icons. This code extracts the ligatures\n      // hat tip to Jossef Harush https://stackoverflow.com/questions/54721774/extracting-ttf-font-ligature-mappings/54728584\n      let ligatureName = {};\n      let lookupList = font.GSUB.lookupList.toArray();\n      let lookupListIndexes =\n        font.GSUB.featureList[0].feature.lookupListIndexes;\n      lookupListIndexes.forEach(index => {\n        let subTable = lookupList[index].subTables[0];\n        let leadingCharacters = [];\n        if (subTable?.coverage?.rangeRecords) {\n          subTable.coverage.rangeRecords.forEach(coverage => {\n            for (let i = coverage.start; i <= coverage.end; i++) {\n              let character = font.stringsForGlyph(i)[0];\n              leadingCharacters.push(character);\n            }\n          });\n        }\n        let ligatureSets = subTable?.ligatureSets?.toArray() || [];\n        ligatureSets.forEach((ligatureSet, ligatureSetIndex) => {\n          let leadingCharacter = leadingCharacters[ligatureSetIndex];\n          ligatureSet.forEach(ligature => {\n            let character = font.stringsForGlyph(ligature.glyph)[0];\n            if (!character) {\n              // qx.tool.compiler.Console.log(`WARN: ${this.getName()} no character ${ligature}`);\n              return;\n            }\n            let ligatureText =\n              leadingCharacter +\n              ligature.components.map(x => font.stringsForGlyph(x)[0]).join(\"\");\n            var hexId = character.charCodeAt(0).toString(16);\n            if (ligatureName[hexId] == undefined) {\n              ligatureName[hexId] = [ligatureText];\n            } else {\n              ligatureName[hexId].push(ligatureText);\n            }\n          });\n        });\n      });\n\n      let defaultSize = this.getDefaultSize();\n      font.characterSet.forEach(codePoint => {\n        let glyph = font.glyphForCodePoint(codePoint);\n        let commands = null;\n        try {\n          // This can throw an exception if the font does not support ligatures\n          commands = glyph?.path?.commands;\n        } catch (ex) {\n          commands = null;\n        }\n        if (!commands?.length && !glyph.layers) {\n          return;\n        }\n\n        const found = gName => {\n          resources[\"@\" + this.getName() + \"/\" + gName] = [\n            Math.ceil(\n              (this.getDefaultSize() * glyph.advanceWidth) / glyph.advanceHeight\n            ),\n\n            // width\n            defaultSize, // height\n            codePoint\n          ];\n        };\n        if (glyph.name) {\n          found(glyph.name);\n        }\n        var names = ligatureName[codePoint.toString(16)];\n        if (names) {\n          names.forEach(found);\n        }\n      }, this);\n\n      return resources;\n    },\n\n    /**\n     * Return bootstrap code that is executed before the Application starts.\n     *\n     * @param target  {qx.tool.compiler.targets.Target} the target\n     * @param application  {qx.tool.compiler.app.Application} the application being built\n     * @return {String}\n     */\n    getBootstrapCode(target, application) {\n      let res = \"\";\n      let font = {\n        defaultSize: this.getDefaultSize(),\n        lineHeight: 1,\n        family: [this.getName()],\n        fontFaces: [\n          {\n            paths: this.getResources()\n          }\n        ]\n      };\n\n      if (this.getComparisonString()) {\n        font.comparisonString = this.getComparisonString();\n      }\n\n      return (res +=\n        \"qx.$$fontBootstrap['\" +\n        this.getName() +\n        \"']=\" +\n        JSON.stringify(font, null, 2) +\n        \";\");\n    },\n\n    /**\n     * Called by {Target} to compile the fonts, called once per application build\n     * (NOTE:: right now, this is called for each application - that is soon to be fixed)\n     *\n     * @param target  {qx.tool.compiler.targets.Target} the target\n     * @return {Promise}\n     */\n    generateForTarget(target) {\n      if (this.__generateForTargetPromise) {\n        return this.__generateForTargetPromise;\n      }\n\n      const generate = async () => {\n        for (let resource of this.getResources()) {\n          // Search for the first supported extension\n          let basename = resource.match(/^.*[/\\\\]([^/\\\\\\?#]+).*$/)[1];\n          // fontkit knows about these font formats\n          if (!basename.match(/\\.(ttf|otf|woff|woff2)$/)) {\n            continue;\n          }\n\n          if (resource.match(/^https?:\\/\\//)) {\n            this.__fontData = await this._loadRemoteFont(resource);\n          } else {\n            this.__fontData = await this._loadLocalFont(resource);\n          }\n\n          return this.__fontData;\n        }\n\n        throw new Error(\n          `Failed to load/validate FontMap for webfont (expected ttf, otf, woff or woff2) ${this.getName()}`\n        );\n      };\n\n      this.__generateForTargetPromise = generate();\n      return this.__generateForTargetPromise;\n    },\n\n    /**\n     * Called by Target to add fonts to an application\n     *\n     * @param target  {qx.tool.compiler.targets.Target} the target\n     * @param application  {qx.tool.compiler.app.Application} the application being built\n     * @return {Promise}\n     */\n    async generateForApplication(target, application) {\n      return this.__fontData || null;\n    },\n\n    /**\n     * Returns a string representation of this for debugging\n     *\n     * @return {String} the name or resource of this font\n     */\n    toString() {\n      var str = this.getName();\n      if (!str) {\n        str = JSON.stringify(this.getResources());\n      }\n      return str;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;+CACA,qJAAAA,mBAAA,YAAAA,oBAAA,WAAAC,CAAA,SAAAC,CAAA,EAAAD,CAAA,OAAAE,CAAA,GAAAC,MAAA,CAAAC,SAAA,EAAAC,CAAA,GAAAH,CAAA,CAAAI,cAAA,EAAAC,CAAA,GAAAJ,MAAA,CAAAK,cAAA,cAAAP,CAAA,EAAAD,CAAA,EAAAE,CAAA,IAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,CAAAO,KAAA,KAAAC,CAAA,wBAAAC,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAF,CAAA,CAAAG,QAAA,kBAAAC,CAAA,GAAAJ,CAAA,CAAAK,aAAA,uBAAAC,CAAA,GAAAN,CAAA,CAAAO,WAAA,8BAAAC,OAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAC,MAAA,CAAAK,cAAA,CAAAP,CAAA,EAAAD,CAAA,IAAAS,KAAA,EAAAP,CAAA,EAAAiB,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAApB,CAAA,CAAAD,CAAA,WAAAkB,MAAA,mBAAAjB,CAAA,IAAAiB,MAAA,YAAAA,OAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,gBAAAoB,KAAArB,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAG,CAAA,QAAAK,CAAA,GAAAV,CAAA,IAAAA,CAAA,CAAAI,SAAA,YAAAmB,SAAA,GAAAvB,CAAA,GAAAuB,SAAA,EAAAX,CAAA,GAAAT,MAAA,CAAAqB,MAAA,CAAAd,CAAA,CAAAN,SAAA,GAAAU,CAAA,OAAAW,OAAA,CAAApB,CAAA,gBAAAE,CAAA,CAAAK,CAAA,eAAAH,KAAA,EAAAiB,gBAAA,CAAAzB,CAAA,EAAAC,CAAA,EAAAY,CAAA,MAAAF,CAAA,aAAAe,SAAA1B,CAAA,EAAAD,CAAA,EAAAE,CAAA,mBAAA0B,IAAA,YAAAC,GAAA,EAAA5B,CAAA,CAAA6B,IAAA,CAAA9B,CAAA,EAAAE,CAAA,cAAAD,CAAA,aAAA2B,IAAA,WAAAC,GAAA,EAAA5B,CAAA,QAAAD,CAAA,CAAAsB,IAAA,GAAAA,IAAA,MAAAS,CAAA,qBAAAC,CAAA,qBAAAC,CAAA,gBAAAC,CAAA,gBAAAC,CAAA,gBAAAZ,UAAA,cAAAa,kBAAA,cAAAC,2BAAA,SAAAC,CAAA,OAAApB,MAAA,CAAAoB,CAAA,EAAA1B,CAAA,qCAAA2B,CAAA,GAAApC,MAAA,CAAAqC,cAAA,EAAAC,CAAA,GAAAF,CAAA,IAAAA,CAAA,CAAAA,CAAA,CAAAG,MAAA,QAAAD,CAAA,IAAAA,CAAA,KAAAvC,CAAA,IAAAG,CAAA,CAAAyB,IAAA,CAAAW,CAAA,EAAA7B,CAAA,MAAA0B,CAAA,GAAAG,CAAA,OAAAE,CAAA,GAAAN,0BAAA,CAAAjC,SAAA,GAAAmB,SAAA,CAAAnB,SAAA,GAAAD,MAAA,CAAAqB,MAAA,CAAAc,CAAA,YAAAM,sBAAA3C,CAAA,gCAAA4C,OAAA,WAAA7C,CAAA,IAAAkB,MAAA,CAAAjB,CAAA,EAAAD,CAAA,YAAAC,CAAA,gBAAA6C,OAAA,CAAA9C,CAAA,EAAAC,CAAA,sBAAA8C,cAAA9C,CAAA,EAAAD,CAAA,aAAAgD,OAAA9C,CAAA,EAAAK,CAAA,EAAAG,CAAA,EAAAE,CAAA,QAAAE,CAAA,GAAAa,QAAA,CAAA1B,CAAA,CAAAC,CAAA,GAAAD,CAAA,EAAAM,CAAA,mBAAAO,CAAA,CAAAc,IAAA,QAAAZ,CAAA,GAAAF,CAAA,CAAAe,GAAA,EAAAE,CAAA,GAAAf,CAAA,CAAAP,KAAA,SAAAsB,CAAA,gBAAAkB,OAAA,CAAAlB,CAAA,KAAA1B,CAAA,CAAAyB,IAAA,CAAAC,CAAA,eAAA/B,CAAA,CAAAkD,OAAA,CAAAnB,CAAA,CAAAoB,OAAA,EAAAC,IAAA,WAAAnD,CAAA,IAAA+C,MAAA,SAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,gBAAAX,CAAA,IAAA+C,MAAA,UAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,QAAAZ,CAAA,CAAAkD,OAAA,CAAAnB,CAAA,EAAAqB,IAAA,WAAAnD,CAAA,IAAAe,CAAA,CAAAP,KAAA,GAAAR,CAAA,EAAAS,CAAA,CAAAM,CAAA,gBAAAf,CAAA,WAAA+C,MAAA,UAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,SAAAA,CAAA,CAAAE,CAAA,CAAAe,GAAA,SAAA3B,CAAA,EAAAK,CAAA,oBAAAE,KAAA,WAAAA,MAAAR,CAAA,EAAAI,CAAA,aAAAgD,2BAAA,eAAArD,CAAA,WAAAA,CAAA,EAAAE,CAAA,IAAA8C,MAAA,CAAA/C,CAAA,EAAAI,CAAA,EAAAL,CAAA,EAAAE,CAAA,gBAAAA,CAAA,GAAAA,CAAA,GAAAA,CAAA,CAAAkD,IAAA,CAAAC,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAA3B,iBAAA1B,CAAA,EAAAE,CAAA,EAAAG,CAAA,QAAAE,CAAA,GAAAwB,CAAA,mBAAArB,CAAA,EAAAE,CAAA,QAAAL,CAAA,KAAA0B,CAAA,QAAAqB,KAAA,sCAAA/C,CAAA,KAAA2B,CAAA,oBAAAxB,CAAA,QAAAE,CAAA,WAAAH,KAAA,EAAAR,CAAA,EAAAsD,IAAA,eAAAlD,CAAA,CAAAmD,MAAA,GAAA9C,CAAA,EAAAL,CAAA,CAAAwB,GAAA,GAAAjB,CAAA,UAAAE,CAAA,GAAAT,CAAA,CAAAoD,QAAA,MAAA3C,CAAA,QAAAE,CAAA,GAAA0C,mBAAA,CAAA5C,CAAA,EAAAT,CAAA,OAAAW,CAAA,QAAAA,CAAA,KAAAmB,CAAA,mBAAAnB,CAAA,qBAAAX,CAAA,CAAAmD,MAAA,EAAAnD,CAAA,CAAAsD,IAAA,GAAAtD,CAAA,CAAAuD,KAAA,GAAAvD,CAAA,CAAAwB,GAAA,sBAAAxB,CAAA,CAAAmD,MAAA,QAAAjD,CAAA,KAAAwB,CAAA,QAAAxB,CAAA,GAAA2B,CAAA,EAAA7B,CAAA,CAAAwB,GAAA,EAAAxB,CAAA,CAAAwD,iBAAA,CAAAxD,CAAA,CAAAwB,GAAA,uBAAAxB,CAAA,CAAAmD,MAAA,IAAAnD,CAAA,CAAAyD,MAAA,WAAAzD,CAAA,CAAAwB,GAAA,GAAAtB,CAAA,GAAA0B,CAAA,MAAAK,CAAA,GAAAX,QAAA,CAAA3B,CAAA,EAAAE,CAAA,EAAAG,CAAA,oBAAAiC,CAAA,CAAAV,IAAA,QAAArB,CAAA,GAAAF,CAAA,CAAAkD,IAAA,GAAArB,CAAA,GAAAF,CAAA,EAAAM,CAAA,CAAAT,GAAA,KAAAM,CAAA,qBAAA1B,KAAA,EAAA6B,CAAA,CAAAT,GAAA,EAAA0B,IAAA,EAAAlD,CAAA,CAAAkD,IAAA,kBAAAjB,CAAA,CAAAV,IAAA,KAAArB,CAAA,GAAA2B,CAAA,EAAA7B,CAAA,CAAAmD,MAAA,YAAAnD,CAAA,CAAAwB,GAAA,GAAAS,CAAA,CAAAT,GAAA,mBAAA6B,oBAAA1D,CAAA,EAAAE,CAAA,QAAAG,CAAA,GAAAH,CAAA,CAAAsD,MAAA,EAAAjD,CAAA,GAAAP,CAAA,CAAAa,QAAA,CAAAR,CAAA,OAAAE,CAAA,KAAAN,CAAA,SAAAC,CAAA,CAAAuD,QAAA,qBAAApD,CAAA,IAAAL,CAAA,CAAAa,QAAA,eAAAX,CAAA,CAAAsD,MAAA,aAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,EAAAyD,mBAAA,CAAA1D,CAAA,EAAAE,CAAA,eAAAA,CAAA,CAAAsD,MAAA,kBAAAnD,CAAA,KAAAH,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,OAAAkC,SAAA,uCAAA1D,CAAA,iBAAA8B,CAAA,MAAAzB,CAAA,GAAAiB,QAAA,CAAApB,CAAA,EAAAP,CAAA,CAAAa,QAAA,EAAAX,CAAA,CAAA2B,GAAA,mBAAAnB,CAAA,CAAAkB,IAAA,SAAA1B,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,GAAAnB,CAAA,CAAAmB,GAAA,EAAA3B,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,MAAAvB,CAAA,GAAAF,CAAA,CAAAmB,GAAA,SAAAjB,CAAA,GAAAA,CAAA,CAAA2C,IAAA,IAAArD,CAAA,CAAAF,CAAA,CAAAgE,UAAA,IAAApD,CAAA,CAAAH,KAAA,EAAAP,CAAA,CAAA+D,IAAA,GAAAjE,CAAA,CAAAkE,OAAA,eAAAhE,CAAA,CAAAsD,MAAA,KAAAtD,CAAA,CAAAsD,MAAA,WAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,GAAAC,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,IAAAvB,CAAA,IAAAV,CAAA,CAAAsD,MAAA,YAAAtD,CAAA,CAAA2B,GAAA,OAAAkC,SAAA,sCAAA7D,CAAA,CAAAuD,QAAA,SAAAtB,CAAA,cAAAgC,aAAAlE,CAAA,QAAAD,CAAA,KAAAoE,MAAA,EAAAnE,CAAA,YAAAA,CAAA,KAAAD,CAAA,CAAAqE,QAAA,GAAApE,CAAA,WAAAA,CAAA,KAAAD,CAAA,CAAAsE,UAAA,GAAArE,CAAA,KAAAD,CAAA,CAAAuE,QAAA,GAAAtE,CAAA,WAAAuE,UAAA,CAAAC,IAAA,CAAAzE,CAAA,cAAA0E,cAAAzE,CAAA,QAAAD,CAAA,GAAAC,CAAA,CAAA0E,UAAA,QAAA3E,CAAA,CAAA4B,IAAA,oBAAA5B,CAAA,CAAA6B,GAAA,EAAA5B,CAAA,CAAA0E,UAAA,GAAA3E,CAAA,aAAAyB,QAAAxB,CAAA,SAAAuE,UAAA,MAAAJ,MAAA,aAAAnE,CAAA,CAAA4C,OAAA,CAAAsB,YAAA,cAAAS,KAAA,iBAAAlC,OAAA1C,CAAA,QAAAA,CAAA,WAAAA,CAAA,QAAAE,CAAA,GAAAF,CAAA,CAAAY,CAAA,OAAAV,CAAA,SAAAA,CAAA,CAAA4B,IAAA,CAAA9B,CAAA,4BAAAA,CAAA,CAAAiE,IAAA,SAAAjE,CAAA,OAAA6E,KAAA,CAAA7E,CAAA,CAAA8E,MAAA,SAAAvE,CAAA,OAAAG,CAAA,YAAAuD,KAAA,aAAA1D,CAAA,GAAAP,CAAA,CAAA8E,MAAA,OAAAzE,CAAA,CAAAyB,IAAA,CAAA9B,CAAA,EAAAO,CAAA,UAAA0D,IAAA,CAAAxD,KAAA,GAAAT,CAAA,CAAAO,CAAA,GAAA0D,IAAA,CAAAV,IAAA,OAAAU,IAAA,SAAAA,IAAA,CAAAxD,KAAA,GAAAR,CAAA,EAAAgE,IAAA,CAAAV,IAAA,OAAAU,IAAA,YAAAvD,CAAA,CAAAuD,IAAA,GAAAvD,CAAA,gBAAAqD,SAAA,CAAAd,OAAA,CAAAjD,CAAA,kCAAAoC,iBAAA,CAAAhC,SAAA,GAAAiC,0BAAA,EAAA9B,CAAA,CAAAoC,CAAA,mBAAAlC,KAAA,EAAA4B,0BAAA,EAAAjB,YAAA,SAAAb,CAAA,CAAA8B,0BAAA,mBAAA5B,KAAA,EAAA2B,iBAAA,EAAAhB,YAAA,SAAAgB,iBAAA,CAAA2C,WAAA,GAAA7D,MAAA,CAAAmB,0BAAA,EAAArB,CAAA,wBAAAhB,CAAA,CAAAgF,mBAAA,aAAA/E,CAAA,QAAAD,CAAA,wBAAAC,CAAA,IAAAA,CAAA,CAAAgF,WAAA,WAAAjF,CAAA,KAAAA,CAAA,KAAAoC,iBAAA,6BAAApC,CAAA,CAAA+E,WAAA,IAAA/E,CAAA,CAAAkF,IAAA,OAAAlF,CAAA,CAAAmF,IAAA,aAAAlF,CAAA,WAAAE,MAAA,CAAAiF,cAAA,GAAAjF,MAAA,CAAAiF,cAAA,CAAAnF,CAAA,EAAAoC,0BAAA,KAAApC,CAAA,CAAAoF,SAAA,GAAAhD,0BAAA,EAAAnB,MAAA,CAAAjB,CAAA,EAAAe,CAAA,yBAAAf,CAAA,CAAAG,SAAA,GAAAD,MAAA,CAAAqB,MAAA,CAAAmB,CAAA,GAAA1C,CAAA,KAAAD,CAAA,CAAAsF,KAAA,aAAArF,CAAA,aAAAkD,OAAA,EAAAlD,CAAA,OAAA2C,qBAAA,CAAAG,aAAA,CAAA3C,SAAA,GAAAc,MAAA,CAAA6B,aAAA,CAAA3C,SAAA,EAAAU,CAAA,iCAAAd,CAAA,CAAA+C,aAAA,GAAAA,aAAA,EAAA/C,CAAA,CAAAuF,KAAA,aAAAtF,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAE,CAAA,EAAAG,CAAA,eAAAA,CAAA,KAAAA,CAAA,GAAA8E,OAAA,OAAA5E,CAAA,OAAAmC,aAAA,CAAAzB,IAAA,CAAArB,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAE,CAAA,GAAAG,CAAA,UAAAV,CAAA,CAAAgF,mBAAA,CAAA9E,CAAA,IAAAU,CAAA,GAAAA,CAAA,CAAAqD,IAAA,GAAAb,IAAA,WAAAnD,CAAA,WAAAA,CAAA,CAAAsD,IAAA,GAAAtD,CAAA,CAAAQ,KAAA,GAAAG,CAAA,CAAAqD,IAAA,WAAArB,qBAAA,CAAAD,CAAA,GAAAzB,MAAA,CAAAyB,CAAA,EAAA3B,CAAA,gBAAAE,MAAA,CAAAyB,CAAA,EAAA/B,CAAA,iCAAAM,MAAA,CAAAyB,CAAA,6DAAA3C,CAAA,CAAAyF,IAAA,aAAAxF,CAAA,QAAAD,CAAA,GAAAG,MAAA,CAAAF,CAAA,GAAAC,CAAA,gBAAAG,CAAA,IAAAL,CAAA,EAAAE,CAAA,CAAAuE,IAAA,CAAApE,CAAA,UAAAH,CAAA,CAAAwF,OAAA,aAAAzB,KAAA,WAAA/D,CAAA,CAAA4E,MAAA,SAAA7E,CAAA,GAAAC,CAAA,CAAAyF,GAAA,QAAA1F,CAAA,IAAAD,CAAA,SAAAiE,IAAA,CAAAxD,KAAA,GAAAR,CAAA,EAAAgE,IAAA,CAAAV,IAAA,OAAAU,IAAA,WAAAA,IAAA,CAAAV,IAAA,OAAAU,IAAA,QAAAjE,CAAA,CAAA0C,MAAA,GAAAA,MAAA,EAAAjB,OAAA,CAAArB,SAAA,KAAA6E,WAAA,EAAAxD,OAAA,EAAAmD,KAAA,WAAAA,MAAA5E,CAAA,aAAA4F,IAAA,WAAA3B,IAAA,WAAAN,IAAA,QAAAC,KAAA,GAAA3D,CAAA,OAAAsD,IAAA,YAAAE,QAAA,cAAAD,MAAA,gBAAA3B,GAAA,GAAA5B,CAAA,OAAAuE,UAAA,CAAA3B,OAAA,CAAA6B,aAAA,IAAA1E,CAAA,WAAAE,CAAA,kBAAAA,CAAA,CAAA2F,MAAA,OAAAxF,CAAA,CAAAyB,IAAA,OAAA5B,CAAA,MAAA2E,KAAA,EAAA3E,CAAA,CAAA4F,KAAA,cAAA5F,CAAA,IAAAD,CAAA,MAAA8F,IAAA,WAAAA,KAAA,SAAAxC,IAAA,WAAAtD,CAAA,QAAAuE,UAAA,IAAAG,UAAA,kBAAA1E,CAAA,CAAA2B,IAAA,QAAA3B,CAAA,CAAA4B,GAAA,cAAAmE,IAAA,KAAAnC,iBAAA,WAAAA,kBAAA7D,CAAA,aAAAuD,IAAA,QAAAvD,CAAA,MAAAE,CAAA,kBAAA+F,OAAA5F,CAAA,EAAAE,CAAA,WAAAK,CAAA,CAAAgB,IAAA,YAAAhB,CAAA,CAAAiB,GAAA,GAAA7B,CAAA,EAAAE,CAAA,CAAA+D,IAAA,GAAA5D,CAAA,EAAAE,CAAA,KAAAL,CAAA,CAAAsD,MAAA,WAAAtD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,KAAAM,CAAA,aAAAA,CAAA,QAAAiE,UAAA,CAAAM,MAAA,MAAAvE,CAAA,SAAAA,CAAA,QAAAG,CAAA,QAAA8D,UAAA,CAAAjE,CAAA,GAAAK,CAAA,GAAAF,CAAA,CAAAiE,UAAA,iBAAAjE,CAAA,CAAA0D,MAAA,SAAA6B,MAAA,aAAAvF,CAAA,CAAA0D,MAAA,SAAAwB,IAAA,QAAA9E,CAAA,GAAAT,CAAA,CAAAyB,IAAA,CAAApB,CAAA,eAAAM,CAAA,GAAAX,CAAA,CAAAyB,IAAA,CAAApB,CAAA,qBAAAI,CAAA,IAAAE,CAAA,aAAA4E,IAAA,GAAAlF,CAAA,CAAA2D,QAAA,SAAA4B,MAAA,CAAAvF,CAAA,CAAA2D,QAAA,gBAAAuB,IAAA,GAAAlF,CAAA,CAAA4D,UAAA,SAAA2B,MAAA,CAAAvF,CAAA,CAAA4D,UAAA,cAAAxD,CAAA,aAAA8E,IAAA,GAAAlF,CAAA,CAAA2D,QAAA,SAAA4B,MAAA,CAAAvF,CAAA,CAAA2D,QAAA,qBAAArD,CAAA,QAAAsC,KAAA,qDAAAsC,IAAA,GAAAlF,CAAA,CAAA4D,UAAA,SAAA2B,MAAA,CAAAvF,CAAA,CAAA4D,UAAA,YAAAR,MAAA,WAAAA,OAAA7D,CAAA,EAAAD,CAAA,aAAAE,CAAA,QAAAsE,UAAA,CAAAM,MAAA,MAAA5E,CAAA,SAAAA,CAAA,QAAAK,CAAA,QAAAiE,UAAA,CAAAtE,CAAA,OAAAK,CAAA,CAAA6D,MAAA,SAAAwB,IAAA,IAAAvF,CAAA,CAAAyB,IAAA,CAAAvB,CAAA,wBAAAqF,IAAA,GAAArF,CAAA,CAAA+D,UAAA,QAAA5D,CAAA,GAAAH,CAAA,aAAAG,CAAA,iBAAAT,CAAA,mBAAAA,CAAA,KAAAS,CAAA,CAAA0D,MAAA,IAAApE,CAAA,IAAAA,CAAA,IAAAU,CAAA,CAAA4D,UAAA,KAAA5D,CAAA,cAAAE,CAAA,GAAAF,CAAA,GAAAA,CAAA,CAAAiE,UAAA,cAAA/D,CAAA,CAAAgB,IAAA,GAAA3B,CAAA,EAAAW,CAAA,CAAAiB,GAAA,GAAA7B,CAAA,EAAAU,CAAA,SAAA8C,MAAA,gBAAAS,IAAA,GAAAvD,CAAA,CAAA4D,UAAA,EAAAnC,CAAA,SAAA+D,QAAA,CAAAtF,CAAA,MAAAsF,QAAA,WAAAA,SAAAjG,CAAA,EAAAD,CAAA,oBAAAC,CAAA,CAAA2B,IAAA,QAAA3B,CAAA,CAAA4B,GAAA,qBAAA5B,CAAA,CAAA2B,IAAA,mBAAA3B,CAAA,CAAA2B,IAAA,QAAAqC,IAAA,GAAAhE,CAAA,CAAA4B,GAAA,gBAAA5B,CAAA,CAAA2B,IAAA,SAAAoE,IAAA,QAAAnE,GAAA,GAAA5B,CAAA,CAAA4B,GAAA,OAAA2B,MAAA,kBAAAS,IAAA,yBAAAhE,CAAA,CAAA2B,IAAA,IAAA5B,CAAA,UAAAiE,IAAA,GAAAjE,CAAA,GAAAmC,CAAA,KAAAgE,MAAA,WAAAA,OAAAlG,CAAA,aAAAD,CAAA,QAAAwE,UAAA,CAAAM,MAAA,MAAA9E,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAAsE,UAAA,CAAAxE,CAAA,OAAAE,CAAA,CAAAoE,UAAA,KAAArE,CAAA,cAAAiG,QAAA,CAAAhG,CAAA,CAAAyE,UAAA,EAAAzE,CAAA,CAAAqE,QAAA,GAAAG,aAAA,CAAAxE,CAAA,GAAAiC,CAAA,yBAAAiE,OAAAnG,CAAA,aAAAD,CAAA,QAAAwE,UAAA,CAAAM,MAAA,MAAA9E,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAAsE,UAAA,CAAAxE,CAAA,OAAAE,CAAA,CAAAkE,MAAA,KAAAnE,CAAA,QAAAI,CAAA,GAAAH,CAAA,CAAAyE,UAAA,kBAAAtE,CAAA,CAAAuB,IAAA,QAAArB,CAAA,GAAAF,CAAA,CAAAwB,GAAA,EAAA6C,aAAA,CAAAxE,CAAA,YAAAK,CAAA,YAAA+C,KAAA,8BAAA+C,aAAA,WAAAA,cAAArG,CAAA,EAAAE,CAAA,EAAAG,CAAA,gBAAAoD,QAAA,KAAA5C,QAAA,EAAA6B,MAAA,CAAA1C,CAAA,GAAAgE,UAAA,EAAA9D,CAAA,EAAAgE,OAAA,EAAA7D,CAAA,oBAAAmD,MAAA,UAAA3B,GAAA,GAAA5B,CAAA,GAAAkC,CAAA,OAAAnC,CAAA;AAAA,SAAAsG,mBAAAjG,CAAA,EAAAJ,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAK,CAAA,EAAAK,CAAA,EAAAE,CAAA,cAAAJ,CAAA,GAAAL,CAAA,CAAAO,CAAA,EAAAE,CAAA,GAAAE,CAAA,GAAAN,CAAA,CAAAD,KAAA,WAAAJ,CAAA,gBAAAL,CAAA,CAAAK,CAAA,KAAAK,CAAA,CAAA6C,IAAA,GAAAtD,CAAA,CAAAe,CAAA,IAAAwE,OAAA,CAAAtC,OAAA,CAAAlC,CAAA,EAAAoC,IAAA,CAAAlD,CAAA,EAAAK,CAAA;AAAA,SAAAgG,kBAAAlG,CAAA,6BAAAJ,CAAA,SAAAD,CAAA,GAAAwG,SAAA,aAAAhB,OAAA,WAAAtF,CAAA,EAAAK,CAAA,QAAAK,CAAA,GAAAP,CAAA,CAAAoG,KAAA,CAAAxG,CAAA,EAAAD,CAAA,YAAA0G,MAAArG,CAAA,IAAAiG,kBAAA,CAAA1F,CAAA,EAAAV,CAAA,EAAAK,CAAA,EAAAmG,KAAA,EAAAC,MAAA,UAAAtG,CAAA,cAAAsG,OAAAtG,CAAA,IAAAiG,kBAAA,CAAA1F,CAAA,EAAAV,CAAA,EAAAK,CAAA,EAAAmG,KAAA,EAAAC,MAAA,WAAAtG,CAAA,KAAAqG,KAAA;AAAA;EAAA,IAAAE,aAAA;IAAA;MAAA;QAAA;QAAA;MAAA;MAAA;QAAA;QAAA;MAAA;MAAA;QAAA;QAAA;MAAA;MAAA;MAAA;IAAA;EAAA;EADAC,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACH,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,IAAMI,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;EACxB,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;EAC5B,IAAME,GAAG,GAAGF,OAAO,CAAC,KAAK,CAAC;EAC1B,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;EAC5B,IAAMI,OAAO,GAAGJ,OAAO,CAAC,SAAS,CAAC;EAElC,IAAIK,GAAG,GAAGT,EAAE,CAACU,IAAI,CAACC,KAAK,CAACC,UAAU,CAACC,SAAS,CAAC,MAAM,CAAC;;EAEpD;AACA;AACA;EACAb,EAAE,CAACc,KAAK,CAACzG,MAAM,CAAC,8BAA8B,EAAE;IAC9C0G,MAAM,EAAEf,EAAE,CAACgB,IAAI,CAAC1H,MAAM;IAEtB2H,SAAS,WAAAA,UAACC,OAAO,EAAE;MACjBlB,EAAA,CAAAgB,IAAA,CAAA1H,MAAA,CAAA8E,WAAA,CAAAnD,IAAA;MACA,IAAI,CAACkG,SAAS,GAAGD,OAAO;IAC1B,CAAC;IAEDE,UAAU,EAAE;MACV;MACA/C,IAAI,EAAE;QACJgD,KAAK,EAAE;MACT,CAAC;MAED;MACAC,WAAW,EAAE;QACXD,KAAK,EAAE,SAAS;QAChBE,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE;QACPD,IAAI,EAAE,IAAI;QACVE,QAAQ,EAAE,IAAI;QACdJ,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIK,gBAAgB,EAAE;QAChBH,IAAI,EAAE,IAAI;QACVE,QAAQ,EAAE,IAAI;QACdJ,KAAK,EAAE;MACT,CAAC;MAED;MACAM,SAAS,EAAE;QACTN,KAAK,EAAE;MACT;IACF,CAAC;IAEDO,OAAO,EAAE;MACPT,SAAS,EAAE,IAAI;MACfU,SAAU,EAAE,IAAI;MAEhB;AACJ;AACA;AACA;AACA;AACA;MACUC,cAAc,WAAAA,eAACC,QAAQ,EAAE;QAAA,IAAAC,KAAA;QAAA,OAAAtC,iBAAA,eAAAxG,mBAAA,GAAAoF,IAAA,UAAA2D,QAAA;UAAA,IAAAC,QAAA;UAAA,OAAAhJ,mBAAA,GAAAuB,IAAA,UAAA0H,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAArD,IAAA,GAAAqD,QAAA,CAAAhF,IAAA;cAAA;gBACzB8E,QAAQ,GAAG7B,IAAI,CAACgC,IAAI,CACtBL,KAAI,CAACb,SAAS,CAACmB,UAAU,CAAC,CAAC,EAC3BjC,IAAI,CAACgC,IAAI,CAACL,KAAI,CAACb,SAAS,CAACoB,eAAe,CAAC,CAAC,EAAER,QAAQ,CACtD,CAAC;gBAAAK,QAAA,CAAAhF,IAAA;gBAAA,OAEY4E,KAAI,CAACQ,SAAiB,CAACN,QAAQ,CAAC;cAAA;gBAAA,OAAAE,QAAA,CAAAnF,MAAA,WAAAmF,QAAA,CAAAtF,IAAA;cAAA;cAAA;gBAAA,OAAAsF,QAAA,CAAAlD,IAAA;YAAA;UAAA,GAAA+C,OAAA;QAAA;MAC/C,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACUQ,eAAe,WAAAA,gBAACC,GAAG,EAAE;QAAA,IAAAC,MAAA;QAAA,OAAAjD,iBAAA,eAAAxG,mBAAA,GAAAoF,IAAA,UAAAsE,SAAA;UAAA,IAAAC,WAAA,EAAAC,MAAA;UAAA,OAAA5J,mBAAA,GAAAuB,IAAA,UAAAsI,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAjE,IAAA,GAAAiE,SAAA,CAAA5F,IAAA;cAAA;gBAAA4F,SAAA,CAAA5F,IAAA;gBAAA,OACD4C,EAAE,CAACU,IAAI,CAACC,KAAK,CAACsC,IAAI,CAACC,kBAAkB,CAC3DR,GAAG,EACH,kCACF,CAAC;cAAA;gBAHGG,WAAW,GAAAG,SAAA,CAAAlG,IAAA;gBAAAkG,SAAA,CAAA5F,IAAA;gBAAA,OAKIuF,MAAI,CAACH,SAAiB,CAACK,WAAW,CAAC;cAAA;gBAAlDC,MAAM,GAAAE,SAAA,CAAAlG,IAAA;gBACVqD,EAAE,CAACgD,MAAM,CAACN,WAAW,CAAC;gBAAC,OAAAG,SAAA,CAAA/F,MAAA,WAChB6F,MAAM;cAAA;cAAA;gBAAA,OAAAE,SAAA,CAAA9D,IAAA;YAAA;UAAA,GAAA0D,QAAA;QAAA;MACf,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACUJ,SAAiB,WAAAY,UAACrB,QAAQ,EAAE;QAAA,IAAAsB,MAAA;QAAA,OAAA3D,iBAAA,eAAAxG,mBAAA,GAAAoF,IAAA,UAAAgF,SAAA;UAAA,IAAAC,UAAA;UAAA,IAAAC,IAAA,EAAA7B,SAAA,EAAA8B,OAAA,EAAAC,IAAA,EAAAC,GAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,iBAAA,EAAAxC,WAAA;UAAA,OAAApI,mBAAA,GAAAuB,IAAA,UAAAsJ,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAjF,IAAA,GAAAiF,SAAA,CAAA5G,IAAA;cAAA;gBAAA4G,SAAA,CAAA5G,IAAA;gBAAA,OACfoD,OAAO,CAACyD,IAAI,CAAClC,QAAQ,CAAC;cAAA;gBAAnCyB,IAAI,GAAAQ,SAAA,CAAAlH,IAAA;gBACJ6E,SAAS,GAAG,CAAC,CAAC,EAElB;gBACA;gBAAA,KACI0B,MAAI,CAACa,UAAU,CAAC,CAAC;kBAAAF,SAAA,CAAA5G,IAAA;kBAAA;gBAAA;gBACfqG,OAAO,GAAGpD,IAAI,CAACgC,IAAI,CACrBgB,MAAI,CAAClC,SAAS,CAACmB,UAAU,CAAC,CAAC,EAC3BjC,IAAI,CAACgC,IAAI,CAACgB,MAAI,CAAClC,SAAS,CAACoB,eAAe,CAAC,CAAC,EAAEc,MAAI,CAACa,UAAU,CAAC,CAAC,CAC/D,CAAC;gBAAAF,SAAA,CAAAjF,IAAA;gBAAAiF,SAAA,CAAA5G,IAAA;gBAAA,OAIc+C,EAAE,CAACgE,QAAQ,CAACC,QAAQ,CAACX,OAAO,EAAE;kBAAEY,QAAQ,EAAE;gBAAQ,CAAC,CAAC;cAAA;gBAAjEX,IAAI,GAAAM,SAAA,CAAAlH,IAAA;gBAAAkH,SAAA,CAAA5G,IAAA;gBAAA;cAAA;gBAAA4G,SAAA,CAAAjF,IAAA;gBAAAiF,SAAA,CAAAM,EAAA,GAAAN,SAAA;gBAEJvD,GAAG,CAAC8D,KAAK,8BAAAC,MAAA,CAA8Bf,OAAO,SAAAe,MAAA,CAAMR,SAAA,CAAAM,EAAA,CAAIG,IAAI,CAAE,CAAC;gBAAC,MAAAT,SAAA,CAAAM,EAAA;cAAA;gBAI9DX,GAAG,GAAGe,IAAI,CAACC,KAAK,CAACjB,IAAI,CAAC;gBAC1BpK,MAAM,CAACsF,IAAI,CAAC+E,GAAG,CAAC,CAAC3H,OAAO,CAAC,UAAA4I,GAAG,EAAI;kBAC9B,IAAIC,SAAS,GAAGC,QAAQ,CAACnB,GAAG,CAACiB,GAAG,CAAC,EAAE,EAAE,CAAC;kBACtC,IAAIG,KAAK,GAAGvB,IAAI,CAACwB,iBAAiB,CAACH,SAAS,CAAC;kBAC7C,IAAI,CAACE,KAAK,CAACE,EAAE,EAAE;oBACbjF,EAAE,CAACU,IAAI,CAACwE,QAAQ,CAACC,OAAO,CAACC,KAAK,4BAAAZ,MAAA,CACDzC,QAAQ,OAAAyC,MAAA,CAAII,GAAG,QAAAJ,MAAA,CAAKK,SAAS,CAC1D,CAAC;oBAED;kBACF;kBACAlD,SAAS,CAAC,GAAG,GAAG0B,MAAI,CAACgC,OAAO,CAAC,CAAC,GAAG,GAAG,GAAGT,GAAG,CAAC,GAAG,CAC5CU,IAAI,CAACC,IAAI,CACNlC,MAAI,CAACmC,cAAc,CAAC,CAAC,GAAGT,KAAK,CAACU,YAAY,GAAIV,KAAK,CAACW,aACvD,CAAC;kBAED;kBACArC,MAAI,CAACmC,cAAc,CAAC,CAAC;kBAAE;kBACvBX,SAAS,CACV;gBACH,CAAC,EAAExB,MAAI,CAAC;gBAAC,OAAAW,SAAA,CAAA/G,MAAA,WAEF0E,SAAS;cAAA;gBAAA,KAAA4B,UAAA,GAGbC,IAAI,CAACmC,IAAI,cAAApC,UAAA,gBAAAA,UAAA,GAATA,UAAA,CAAWM,UAAU,cAAAN,UAAA,gBAAAA,UAAA,GAArBA,UAAA,CAAuBqC,OAAO,CAAC,CAAC,cAAArC,UAAA,eAAhCA,UAAA,CAAkCtF,MAAM;kBAAA+F,SAAA,CAAA5G,IAAA;kBAAA;gBAAA;gBAC3C4C,EAAE,CAACU,IAAI,CAACwE,QAAQ,CAACC,OAAO,CAACZ,KAAK,mBAAAC,MAAA,CACVzC,QAAQ,iCAC5B,CAAC;gBAAC,OAAAiC,SAAA,CAAA/G,MAAA,WAEK0E,SAAS;cAAA;gBAGlB;gBACA;gBACA;gBACIiC,YAAY,GAAG,CAAC,CAAC;gBACjBC,UAAU,GAAGL,IAAI,CAACmC,IAAI,CAAC9B,UAAU,CAAC+B,OAAO,CAAC,CAAC;gBAC3C9B,iBAAiB,GACnBN,IAAI,CAACmC,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC,CAACC,OAAO,CAAChC,iBAAiB;gBACpDA,iBAAiB,CAAC9H,OAAO,CAAC,UAAA+J,KAAK,EAAI;kBAAA,IAAAC,kBAAA,EAAAC,qBAAA;kBACjC,IAAIC,QAAQ,GAAGrC,UAAU,CAACkC,KAAK,CAAC,CAACI,SAAS,CAAC,CAAC,CAAC;kBAC7C,IAAIC,iBAAiB,GAAG,EAAE;kBAC1B,IAAIF,QAAQ,aAARA,QAAQ,gBAAAF,kBAAA,GAARE,QAAQ,CAAEG,QAAQ,cAAAL,kBAAA,eAAlBA,kBAAA,CAAoBM,YAAY,EAAE;oBACpCJ,QAAQ,CAACG,QAAQ,CAACC,YAAY,CAACtK,OAAO,CAAC,UAAAqK,QAAQ,EAAI;sBACjD,KAAK,IAAIxM,CAAC,GAAGwM,QAAQ,CAACE,KAAK,EAAE1M,CAAC,IAAIwM,QAAQ,CAACG,GAAG,EAAE3M,CAAC,EAAE,EAAE;wBACnD,IAAI4M,SAAS,GAAGjD,IAAI,CAACkD,eAAe,CAAC7M,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC1CuM,iBAAiB,CAACxI,IAAI,CAAC6I,SAAS,CAAC;sBACnC;oBACF,CAAC,CAAC;kBACJ;kBACA,IAAIE,YAAY,GAAG,CAAAT,QAAQ,aAARA,QAAQ,gBAAAD,qBAAA,GAARC,QAAQ,CAAES,YAAY,cAAAV,qBAAA,uBAAtBA,qBAAA,CAAwBL,OAAO,CAAC,CAAC,KAAI,EAAE;kBAC1De,YAAY,CAAC3K,OAAO,CAAC,UAAC4K,WAAW,EAAEC,gBAAgB,EAAK;oBACtD,IAAIC,gBAAgB,GAAGV,iBAAiB,CAACS,gBAAgB,CAAC;oBAC1DD,WAAW,CAAC5K,OAAO,CAAC,UAAA+K,QAAQ,EAAI;sBAC9B,IAAIN,SAAS,GAAGjD,IAAI,CAACkD,eAAe,CAACK,QAAQ,CAAChC,KAAK,CAAC,CAAC,CAAC,CAAC;sBACvD,IAAI,CAAC0B,SAAS,EAAE;wBACd;wBACA;sBACF;sBACA,IAAIO,YAAY,GACdF,gBAAgB,GAChBC,QAAQ,CAACE,UAAU,CAACtD,GAAG,CAAC,UAAAuD,CAAC;wBAAA,OAAI1D,IAAI,CAACkD,eAAe,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC;sBAAA,EAAC,CAAC7E,IAAI,CAAC,EAAE,CAAC;sBACnE,IAAI8E,KAAK,GAAGV,SAAS,CAACW,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;sBAChD,IAAIzD,YAAY,CAACuD,KAAK,CAAC,IAAIG,SAAS,EAAE;wBACpC1D,YAAY,CAACuD,KAAK,CAAC,GAAG,CAACH,YAAY,CAAC;sBACtC,CAAC,MAAM;wBACLpD,YAAY,CAACuD,KAAK,CAAC,CAACvJ,IAAI,CAACoJ,YAAY,CAAC;sBACxC;oBACF,CAAC,CAAC;kBACJ,CAAC,CAAC;gBACJ,CAAC,CAAC;gBAEE1F,WAAW,GAAG+B,MAAI,CAACmC,cAAc,CAAC,CAAC;gBACvChC,IAAI,CAAC+D,YAAY,CAACvL,OAAO,CAAC,UAAA6I,SAAS,EAAI;kBAAA,IAAA2C,SAAA;kBACrC,IAAIzC,KAAK,GAAGvB,IAAI,CAACwB,iBAAiB,CAACH,SAAS,CAAC;kBAC7C,IAAI4C,QAAQ,GAAG,IAAI;kBACnB,IAAI;oBAAA,IAAAC,WAAA;oBACF;oBACAD,QAAQ,GAAG1C,KAAK,aAALA,KAAK,gBAAA2C,WAAA,GAAL3C,KAAK,CAAE1E,IAAI,cAAAqH,WAAA,uBAAXA,WAAA,CAAaD,QAAQ;kBAClC,CAAC,CAAC,OAAOE,EAAE,EAAE;oBACXF,QAAQ,GAAG,IAAI;kBACjB;kBACA,IAAI,GAAAD,SAAA,GAACC,QAAQ,cAAAD,SAAA,eAARA,SAAA,CAAUvJ,MAAM,KAAI,CAAC8G,KAAK,CAAC6C,MAAM,EAAE;oBACtC;kBACF;kBAEA,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAGC,KAAK,EAAI;oBACrBnG,SAAS,CAAC,GAAG,GAAG0B,MAAI,CAACgC,OAAO,CAAC,CAAC,GAAG,GAAG,GAAGyC,KAAK,CAAC,GAAG,CAC9CxC,IAAI,CAACC,IAAI,CACNlC,MAAI,CAACmC,cAAc,CAAC,CAAC,GAAGT,KAAK,CAACU,YAAY,GAAIV,KAAK,CAACW,aACvD,CAAC;oBAED;oBACApE,WAAW;oBAAE;oBACbuD,SAAS,CACV;kBACH,CAAC;kBACD,IAAIE,KAAK,CAAC1G,IAAI,EAAE;oBACdwJ,KAAK,CAAC9C,KAAK,CAAC1G,IAAI,CAAC;kBACnB;kBACA,IAAI0J,KAAK,GAAGnE,YAAY,CAACiB,SAAS,CAACwC,QAAQ,CAAC,EAAE,CAAC,CAAC;kBAChD,IAAIU,KAAK,EAAE;oBACTA,KAAK,CAAC/L,OAAO,CAAC6L,KAAK,CAAC;kBACtB;gBACF,CAAC,EAAExE,MAAI,CAAC;gBAAC,OAAAW,SAAA,CAAA/G,MAAA,WAEF0E,SAAS;cAAA;cAAA;gBAAA,OAAAqC,SAAA,CAAA9E,IAAA;YAAA;UAAA,GAAAoE,QAAA;QAAA;MAClB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACI0E,gBAAgB,WAAAA,iBAACC,MAAM,EAAEC,WAAW,EAAE;QACpC,IAAIC,GAAG,GAAG,EAAE;QACZ,IAAI3E,IAAI,GAAG;UACTlC,WAAW,EAAE,IAAI,CAACkE,cAAc,CAAC,CAAC;UAClC4C,UAAU,EAAE,CAAC;UACbC,MAAM,EAAE,CAAC,IAAI,CAAChD,OAAO,CAAC,CAAC,CAAC;UACxBiD,SAAS,EAAE,CACT;YACEC,KAAK,EAAE,IAAI,CAACC,YAAY,CAAC;UAC3B,CAAC;QAEL,CAAC;QAED,IAAI,IAAI,CAACC,mBAAmB,CAAC,CAAC,EAAE;UAC9BjF,IAAI,CAAC9B,gBAAgB,GAAG,IAAI,CAAC+G,mBAAmB,CAAC,CAAC;QACpD;QAEA,OAAQN,GAAG,IACT,sBAAsB,GACtB,IAAI,CAAC9C,OAAO,CAAC,CAAC,GACd,KAAK,GACLX,IAAI,CAACgE,SAAS,CAAClF,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAC7B,GAAG;MACP,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACImF,iBAAiB,WAAAA,kBAACV,MAAM,EAAE;QAAA,IAAAW,MAAA;QACxB,IAAI,IAAI,CAACC,SAA0B,EAAE;UACnC,OAAO,IAAI,CAACA,SAA0B;QACxC;QAEA,IAAMC,QAAQ;UAAA,IAAAC,IAAA,GAAArJ,iBAAA,eAAAxG,mBAAA,GAAAoF,IAAA,CAAG,SAAA0K,SAAA;YAAA,IAAAC,SAAA,EAAAC,KAAA,EAAAC,QAAA,EAAAC,QAAA;YAAA,OAAAlQ,mBAAA,GAAAuB,IAAA,UAAA4O,UAAAC,SAAA;cAAA,kBAAAA,SAAA,CAAAvK,IAAA,GAAAuK,SAAA,CAAAlM,IAAA;gBAAA;kBAAA6L,SAAA,GAAAM,0BAAA,CACMX,MAAI,CAACJ,YAAY,CAAC,CAAC;kBAAAc,SAAA,CAAAvK,IAAA;kBAAAkK,SAAA,CAAA5N,CAAA;gBAAA;kBAAA,KAAA6N,KAAA,GAAAD,SAAA,CAAAzP,CAAA,IAAAkD,IAAA;oBAAA4M,SAAA,CAAAlM,IAAA;oBAAA;kBAAA;kBAA/B+L,QAAQ,GAAAD,KAAA,CAAAtP,KAAA;kBACf;kBACIwP,QAAQ,GAAGD,QAAQ,CAACK,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,EAC3D;kBAAA,IACKJ,QAAQ,CAACI,KAAK,CAAC,yBAAyB,CAAC;oBAAAF,SAAA,CAAAlM,IAAA;oBAAA;kBAAA;kBAAA,OAAAkM,SAAA,CAAArM,MAAA;gBAAA;kBAAA,KAI1CkM,QAAQ,CAACK,KAAK,CAAC,cAAc,CAAC;oBAAAF,SAAA,CAAAlM,IAAA;oBAAA;kBAAA;kBAAAkM,SAAA,CAAAlM,IAAA;kBAAA,OACRwL,MAAI,CAACnG,eAAe,CAAC0G,QAAQ,CAAC;gBAAA;kBAAtDP,MAAI,CAAC/G,SAAU,GAAAyH,SAAA,CAAAxM,IAAA;kBAAAwM,SAAA,CAAAlM,IAAA;kBAAA;gBAAA;kBAAAkM,SAAA,CAAAlM,IAAA;kBAAA,OAESwL,MAAI,CAAC9G,cAAc,CAACqH,QAAQ,CAAC;gBAAA;kBAArDP,MAAI,CAAC/G,SAAU,GAAAyH,SAAA,CAAAxM,IAAA;gBAAA;kBAAA,OAAAwM,SAAA,CAAArM,MAAA,WAGV2L,MAAI,CAAC/G,SAAU;gBAAA;kBAAAyH,SAAA,CAAAlM,IAAA;kBAAA;gBAAA;kBAAAkM,SAAA,CAAAlM,IAAA;kBAAA;gBAAA;kBAAAkM,SAAA,CAAAvK,IAAA;kBAAAuK,SAAA,CAAAhF,EAAA,GAAAgF,SAAA;kBAAAL,SAAA,CAAA9P,CAAA,CAAAmQ,SAAA,CAAAhF,EAAA;gBAAA;kBAAAgF,SAAA,CAAAvK,IAAA;kBAAAkK,SAAA,CAAA7N,CAAA;kBAAA,OAAAkO,SAAA,CAAAhK,MAAA;gBAAA;kBAAA,MAGlB,IAAI7C,KAAK,mFAAA+H,MAAA,CACqEoE,MAAI,CAACvD,OAAO,CAAC,CAAC,CAClG,CAAC;gBAAA;gBAAA;kBAAA,OAAAiE,SAAA,CAAApK,IAAA;cAAA;YAAA,GAAA8J,QAAA;UAAA,CACF;UAAA,gBArBKF,QAAQA,CAAA;YAAA,OAAAC,IAAA,CAAAnJ,KAAA,OAAAD,SAAA;UAAA;QAAA,GAqBb;QAED,IAAI,CAACkJ,SAA0B,GAAGC,QAAQ,CAAC,CAAC;QAC5C,OAAO,IAAI,CAACD,SAA0B;MACxC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACUY,sBAAsB,WAAAA,uBAACxB,MAAM,EAAEC,WAAW,EAAE;QAAA,IAAAwB,MAAA;QAAA,OAAAhK,iBAAA,eAAAxG,mBAAA,GAAAoF,IAAA,UAAAqL,SAAA;UAAA,OAAAzQ,mBAAA,GAAAuB,IAAA,UAAAmP,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAA9K,IAAA,GAAA8K,SAAA,CAAAzM,IAAA;cAAA;gBAAA,OAAAyM,SAAA,CAAA5M,MAAA,WACzCyM,MAAI,CAAC7H,SAAU,IAAI,IAAI;cAAA;cAAA;gBAAA,OAAAgI,SAAA,CAAA3K,IAAA;YAAA;UAAA,GAAAyK,QAAA;QAAA;MAChC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACItC,QAAQ,WAAAA,SAAA,EAAG;QACT,IAAIyC,GAAG,GAAG,IAAI,CAACzE,OAAO,CAAC,CAAC;QACxB,IAAI,CAACyE,GAAG,EAAE;UACRA,GAAG,GAAGpF,IAAI,CAACgE,SAAS,CAAC,IAAI,CAACF,YAAY,CAAC,CAAC,CAAC;QAC3C;QACA,OAAOsB,GAAG;MACZ;IACF;EACF,CAAC,CAAC;EA9VF9J,EAAE,CAACU,IAAI,CAACwE,QAAQ,CAAC6E,GAAG,CAACC,OAAO,CAACjK,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}