{
  "version": 3,
  "names": [
    "_regeneratorRuntime",
    "e",
    "t",
    "r",
    "Object",
    "prototype",
    "n",
    "hasOwnProperty",
    "o",
    "defineProperty",
    "value",
    "i",
    "Symbol",
    "a",
    "iterator",
    "c",
    "asyncIterator",
    "u",
    "toStringTag",
    "define",
    "enumerable",
    "configurable",
    "writable",
    "wrap",
    "Generator",
    "create",
    "Context",
    "makeInvokeMethod",
    "tryCatch",
    "type",
    "arg",
    "call",
    "h",
    "l",
    "f",
    "s",
    "y",
    "GeneratorFunction",
    "GeneratorFunctionPrototype",
    "p",
    "d",
    "getPrototypeOf",
    "v",
    "values",
    "g",
    "defineIteratorMethods",
    "forEach",
    "_invoke",
    "AsyncIterator",
    "invoke",
    "_typeof",
    "resolve",
    "__await",
    "then",
    "callInvokeWithMethodAndArg",
    "Error",
    "done",
    "method",
    "delegate",
    "maybeInvokeDelegate",
    "sent",
    "_sent",
    "dispatchException",
    "abrupt",
    "TypeError",
    "resultName",
    "next",
    "nextLoc",
    "pushTryEntry",
    "tryLoc",
    "catchLoc",
    "finallyLoc",
    "afterLoc",
    "tryEntries",
    "push",
    "resetTryEntry",
    "completion",
    "reset",
    "isNaN",
    "length",
    "displayName",
    "isGeneratorFunction",
    "constructor",
    "name",
    "mark",
    "setPrototypeOf",
    "__proto__",
    "awrap",
    "async",
    "Promise",
    "keys",
    "reverse",
    "pop",
    "prev",
    "charAt",
    "slice",
    "stop",
    "rval",
    "handle",
    "complete",
    "finish",
    "_catch",
    "delegateYield",
    "asyncGeneratorStep",
    "_asyncToGenerator",
    "arguments",
    "apply",
    "_next",
    "_throw",
    "$$dbClassInfo",
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "path",
    "require",
    "fs",
    "_require",
    "promisify",
    "readFile",
    "Class",
    "extend",
    "core",
    "construct",
    "metaDb",
    "__metaDb",
    "properties",
    "outputTo",
    "init",
    "check",
    "members",
    "__outputStream",
    "__outputStreamClosed",
    "__currentClass",
    "__hierarchy",
    "__indent",
    "open",
    "_this",
    "_callee",
    "time",
    "str",
    "baseDeclaration",
    "_callee$",
    "_context",
    "Date",
    "createWriteStream",
    "getOutputTo",
    "on",
    "write",
    "concat",
    "join",
    "tool",
    "utils",
    "Utils",
    "getTemplateDir",
    "promises",
    "close",
    "_this2",
    "_callee2",
    "globalFile",
    "_callee2$",
    "_context2",
    "end",
    "process",
    "cwd",
    "existsSync",
    "writeFileSync",
    "_this3",
    "_callee3",
    "classnames",
    "lastPackageName",
    "declared",
    "_iterator",
    "_step",
    "classname",
    "metaData",
    "pos",
    "packageName",
    "_callee3$",
    "_context3",
    "getClassnames",
    "sort",
    "_createForOfIteratorHelper",
    "getMetaData",
    "lastIndexOf",
    "substring",
    "writeClass",
    "t0",
    "msg",
    "meta",
    "_this4",
    "_callee4",
    "_meta$jsdoc",
    "extendsClause",
    "superTypes",
    "superType",
    "_callee4$",
    "_context4",
    "className",
    "getHierarchyFlat",
    "superClass",
    "Array",
    "isArray",
    "map",
    "sup",
    "getType",
    "filter",
    "__writeJsDoc",
    "jsdoc",
    "raw",
    "location",
    "interfaces",
    "itf",
    "writeConstructor",
    "writeClassBody",
    "isSingleton",
    "writeMembers",
    "getInstance",
    "access",
    "returnType",
    "appearsIn",
    "statics",
    "writeProperties",
    "names",
    "types",
    "propertyName",
    "_propertyMeta$appears",
    "_propertyMeta$json$ch",
    "_propertyMeta$json",
    "_propertyMeta$json2",
    "_propertyMeta$json3",
    "propertyMeta",
    "superLikeName",
    "superLikeMeta",
    "superLikeProperty",
    "upname",
    "lang",
    "String",
    "firstUp",
    "json",
    "JSON",
    "stringify",
    "replace",
    "match",
    "group",
    "__writeMethod",
    "override",
    "toLowerCase",
    "parameters",
    "__propertiesInHierarchy",
    "superIsQxClass",
    "objType",
    "Math",
    "min",
    "_arguments$",
    "_this5",
    "firstpass",
    "_meta$properties",
    "mixins",
    "some",
    "mixin",
    "mixinMeta",
    "superClassMeta",
    "typename",
    "_this6",
    "defaultType",
    "_typename$dimensions",
    "dimensions",
    "repeat",
    "fromTypes",
    "compiler",
    "targets",
    "TypeScriptWriter",
    "TYPE_MAPPINGS",
    "re",
    "RegExp",
    "p1",
    "p2",
    "p3",
    "indexOf",
    "methodMeta",
    "__serializeParameters",
    "params",
    "methodName",
    "config",
    "_config$jsdoc",
    "declaration",
    "__escapeMemberName",
    "__writeField",
    "fieldName",
    "_config$jsdoc2",
    "_this7",
    "_jsdoc",
    "fixup",
    "source",
    "typeExpr",
    "Parser",
    "getTypeExpression",
    "start",
    "trim",
    "line",
    "sourceCodePath",
    "getRootDir",
    "classFilename",
    "locationSpecifier",
    "_toConsumableArray",
    "_this8",
    "forceOptional",
    "arr",
    "paramMeta",
    "decl",
    "optional",
    "tmp",
    "Type",
    "body",
    "classMeta",
    "_this9",
    "isStatic",
    "undefined",
    "_classMeta$mixins",
    "_memberMeta$appearsIn",
    "memberMeta",
    "getOwnPropertyDescriptor",
    "includes",
    "superLikeMember",
    "_memberMeta$jsdoc",
    "_memberMeta$jsdoc2",
    "_memberMeta$jsdoc3",
    "_memberMeta$jsdoc5",
    "_memberMeta$jsdoc6",
    "_memberMeta$jsdoc4",
    "_memberMeta$jsdoc$Pa",
    "_memberMeta$jsdoc$Pa2",
    "paramaterList",
    "paramName",
    "Event",
    "LocalizedString",
    "LayoutItem",
    "Widget",
    "Decorator",
    "MWidgetController",
    "AbstractTreeItem",
    "Axis",
    "ILayer",
    "Pane",
    "IDesktop",
    "IWindowManager",
    "DateFormat",
    "Interface",
    "Mixin",
    "Theme",
    "Boolean",
    "Number",
    "document",
    "Stylesheet",
    "Element",
    "Map",
    "Iterable",
    "Iterator",
    "RegEx"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/tool/compiler/targets/TypeScriptWriter.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2017 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * JBaron (Peter, @jbaron)\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\n\nvar path = require(\"upath\");\n\nvar fs = require(\"fs\");\nconst { promisify } = require(\"util\");\nconst readFile = promisify(fs.readFile);\n\n/**\n * Generates TypeScript .d.ts files\n */\nqx.Class.define(\"qx.tool.compiler.targets.TypeScriptWriter\", {\n  extend: qx.core.Object,\n\n  /**\n   *\n   * @param {qx.tool.compiler.MetaDatabase} metaDb loaded database\n   */\n  construct(metaDb) {\n    super();\n    this.__metaDb = metaDb;\n  },\n\n  properties: {\n    outputTo: {\n      init: \"qooxdoo.d.ts\",\n      check: \"String\"\n    }\n  },\n\n  members: {\n    /** @type {qx.tool.compiler.MetaDatabase} */\n    __metaDb: null,\n\n    /** @type {Stream} where to write the .d.ts */\n    __outputStream: null,\n\n    __outputStreamClosed: null,\n\n    /** @type {qx.tool.compiler.MetaExtraction} */\n    __currentClass: null,\n\n    /** @type {object} */\n    __hierarchy: null,\n\n    /** Current indent */\n    __indent: \"    \",\n\n    /**\n     * Opens the stream to write to\n     */\n    async open() {\n      var time = new Date();\n      this.__outputStream = fs.createWriteStream(this.getOutputTo());\n      this.__outputStreamClosed = new qx.Promise();\n      this.__outputStream.on(\"close\", () =>\n        this.__outputStreamClosed.resolve()\n      );\n      this.write(`// Generated declaration file at ${time}\\n`);\n      let str = path.join(qx.tool.utils.Utils.getTemplateDir(), \"TypeScriptWriter-base_declaration.d.ts\")\n      let baseDeclaration = await fs.promises.readFile(str, \"utf8\");\n      this.write(baseDeclaration + \"\\n\");\n    },\n\n    /**\n     * Closes the stream\n     */\n    async close() {\n      await this.__outputStream.end();\n      this.__outputStream = null;\n      await this.__outputStreamClosed;\n      this.__outputStreamClosed = null;\n\n      // add global declaration file for tooling (eg, text editor) support\n      const globalFile = path.join(process.cwd(), \"source\", \"global.d.ts\");\n      if (!fs.existsSync(globalFile)) {\n        fs.writeFileSync(\n          globalFile,\n          [\n            \"// the reference directive enables tooling to discover the generated type definitions\",\n            `/// <reference path=\"../${this.getOutputTo()}\" />`,\n            \"\",\n            \"// add custom global declarations here\"\n          ].join(\"\\n\")\n        );\n      }\n    },\n\n    /**\n     * Processes a list of filename and generates the .d.ts\n     *\n     */\n    async process() {\n      await this.open();\n      let classnames = this.__metaDb.getClassnames();\n      classnames.sort();\n      let lastPackageName = null;\n      let declared = false;\n      for (let classname of classnames) {\n        let metaData = this.__metaDb.getMetaData(classname);\n        var pos = classname.lastIndexOf(\".\");\n        var packageName = \"\";\n        if (pos > -1) {\n          packageName = classname.substring(0, pos);\n        }\n        if (lastPackageName != packageName) {\n          if (lastPackageName) {\n            this.write(\"}\\n\\n\");\n          }\n          if (packageName) {\n            this.write(\"declare module \" + packageName + \" {\\n\");\n            declared = true;\n          } else {\n            declared = false;\n          }\n          lastPackageName = packageName;\n        } else {\n          this.write(\"\\n\");\n        }\n        await this.writeClass(metaData, declared);\n      }\n      if (lastPackageName) {\n        this.write(\"}\\n\");\n      }\n      await this.close();\n    },\n\n    /**\n     * Write a piece of code to the declaration file\n     */\n    write(msg) {\n      this.__outputStream.write(msg);\n    },\n\n    /**\n     * Write the class or interface declaration\n     */\n    async writeClass(meta, declared) {\n      if (!meta.className) {\n        return;\n      }\n\n      this.__currentClass = meta;\n      this.__hierarchy = this.__metaDb.getHierarchyFlat(meta);\n      // qx.tool.compiler.Console.info(\"Processing class \" + meta.packageName + \".\" + meta.name);\n      var extendsClause = \"\";\n      if (\n        meta.superClass &&\n        meta.superClass !== \"Object\" &&\n        meta.superClass !== \"Array\" &&\n        meta.superClass !== \"Error\"\n      ) {\n        if (meta.type === \"interface\" && Array.isArray(meta.superClass)) {\n          let superTypes = meta.superClass.map(sup => this.getType(sup));\n          superTypes.filter(sup => sup != \"any\");\n          if (superTypes.length) {\n            extendsClause = \" extends \" + superTypes.join(\", \");\n          }\n        } else {\n          let superType = this.getType(meta.superClass);\n          if (superType != \"any\") {\n            extendsClause = \" extends \" + superType;\n          }\n        }\n      }\n      var type = \"class \"; // default for class and mixins\n      if (meta.type === \"interface\") {\n        type = \"interface \";\n      } else if (meta.abstract) {\n        type = \"abstract \" + type;\n      }\n      if (!declared) {\n        type = \"declare \" + type;\n      }\n\n      this.__writeJsDoc(meta.jsdoc?.raw, meta.location);\n      this.write(\"  // \" + meta.className + \"\\n\");\n      let name = meta.className;\n      let pos = name.lastIndexOf(\".\");\n      if (pos > -1) {\n        name = name.substring(pos + 1);\n      }\n      this.write(\"  \" + type + name + extendsClause);\n\n      if (meta.interfaces && meta.interfaces.length) {\n        this.write(\n          \" implements \" +\n            meta.interfaces.map(itf => this.getType(itf)).join(\", \")\n        );\n      }\n\n      this.write(\" {\\n\");\n\n      if (meta.type == \"class\" && meta.construct) {\n        this.writeConstructor(meta.construct);\n      }\n\n      this.writeClassBody(meta);\n\n      this.write(\"\\n  }\\n\");\n      this.__currentClass = null;\n      this.__hierarchy = null;\n    },\n\n    /**\n     * Writes the body of the class (excl. constructor) and processes mixins\n     */\n    writeClassBody(meta) {\n      if (meta.isSingleton) {\n        this.writeMembers(\n          {\n            getInstance: {\n              type: \"function\",\n              access: \"public\",\n              returnType: meta.className,\n              appearsIn: []\n            }\n          },\n\n          meta,\n          true\n        );\n      }\n      if (meta.type !== \"interface\") {\n        this.writeMembers(meta.statics, meta, true);\n      }\n      this.writeMembers(meta.members, meta);\n      if (meta.properties) {\n        this.writeProperties(meta);\n      }\n    },\n\n    /**\n     * Writes the property accessors\n     */\n    writeProperties(meta) {\n      const names = [];\n      const types = [];\n      for (let propertyName in meta.properties) {\n        names.push(propertyName);\n        let propertyMeta = meta.properties[propertyName];\n        if (propertyMeta.appearsIn?.length) {\n          const superLikeName = propertyMeta.appearsIn.slice(-1)[0];\n          const superLikeMeta = this.__metaDb.getMetaData(superLikeName);\n          const superLikeProperty = superLikeMeta.properties[propertyName];\n          superLikeProperty.jsdoc = propertyMeta.jsdoc;\n          propertyMeta = superLikeProperty;\n        }\n\n        let upname = qx.lang.String.firstUp(propertyName);\n        let type = propertyMeta.json?.check ?? \"any\";\n\n        if (Array.isArray(type)) {\n          // `[t1, t2]` -> `t1|t2`\n          type = JSON.stringify(type).replace(/,/g, \"|\").slice(1, -1);\n        } else if (typeof type === \"string\") {\n          if (\n            !type.match(/^[a-z\\d\\s.\\|\\<\\>\\&\\(\\)\\[\\]]+$/i) ||\n            type === \"[[ ObjectMethod Function ]]\"\n          ) {\n            type = \"any\";\n          }\n        } else {\n          type = \"any\";\n        }\n        types.push(type);\n\n        if (!propertyMeta.json?.group) {\n          this.__writeMethod(\"get\" + upname, {\n            location: propertyMeta.location,\n            returnType: type,\n            jsdoc: { raw: [`Gets the ${propertyName} property`] },\n            override: propertyMeta.override\n          });\n\n          if (typeof type === \"string\" && type.toLowerCase() === \"boolean\") {\n            this.__writeMethod(\"is\" + upname, {\n              location: propertyMeta.location,\n              returnType: type,\n              jsdoc: { raw: [`Gets the ${propertyName} property`] },\n              override: propertyMeta.override\n            });\n          }\n        }\n        this.__writeMethod(\"set\" + upname, {\n          location: propertyMeta.location,\n          parameters: [{ name: \"value\", type }],\n          returnType: type,\n          jsdoc: { raw: [`Sets the ${propertyName} property`] },\n          override: propertyMeta.override\n        });\n\n        this.__writeMethod(\"reset\" + upname, {\n          location: propertyMeta.location,\n          jsdoc: { raw: [`Resets the ${propertyName} property`] },\n          override: propertyMeta.override\n        });\n\n        if (propertyMeta.json?.async) {\n          this.__writeMethod(\"get\" + upname + \"Async\", {\n            location: propertyMeta.location,\n            returnType: `Promise<${type}>`,\n            jsdoc: {\n              raw: [`Gets the ${propertyName} property, asynchronously`]\n            },\n\n            override: propertyMeta.override\n          });\n\n          if (typeof type === \"string\" && type.toLowerCase() === \"boolean\") {\n            this.__writeMethod(\"is\" + upname + \"Async\", {\n              location: propertyMeta.location,\n              returnType: `Promise<${type}>`,\n              jsdoc: {\n                raw: [`Gets the ${propertyName} property, asynchronously`]\n              },\n\n              override: propertyMeta.override\n            });\n          }\n          this.__writeMethod(\"set\" + upname + \"Async\", {\n            location: propertyMeta.location,\n            parameters: [{ name: \"value\", type }],\n            returnType: `Promise<${type}>`,\n            jsdoc: { raw: [`Sets the ${propertyName} property`] },\n            override: propertyMeta.override\n          });\n        }\n      }\n\n      if (!names.length) {\n        return;\n      }\n\n      const override = this.__propertiesInHierarchy(meta);\n      const superIsQxClass = !!this.__metaDb.getMetaData(meta.superClass);\n\n      let objType = `{`;\n      for (let i = 0; i < Math.min(names.length, types.length); i++) {\n        objType += `\\n${this.__indent}  ${names[i]}?: ${types[i]};`;\n      }\n      objType += `\\n${this.__indent}}`;\n      this.__writeMethod(\"set\", {\n        parameters: [\n          {\n            name: \"data\",\n            type:\n              objType +\n              (superIsQxClass\n                ? ` & Parameters<globalThis.${meta.superClass}[\"set\"]>[0]`\n                : \"\")\n          }\n        ],\n\n        returnType: \"this\",\n        jsdoc: { raw: [`Sets several properties at once`] },\n        override\n      });\n\n      this.__writeMethod(\"get\", {\n        parameters: [\n          {\n            name: \"prop\",\n            type:\n              names.map(name => `\"${name}\"`).join(\" | \") +\n              (superIsQxClass\n                ? ` | Parameters<globalThis.${meta.superClass}[\"get\"]>[0]`\n                : \"\")\n          }\n        ],\n\n        returnType: \"this\",\n        jsdoc: { raw: [`Gets a property by name`] },\n        override\n      });\n    },\n\n    /**\n     * Determines if any class in the hierarchy defines any properties\n     * @param {qx.tool.compiler.MetaExtraction} meta\n     * @returns {Boolean}\n     */\n    __propertiesInHierarchy(meta) {\n      const firstpass = arguments[1] ?? true;\n      if (!firstpass) {\n        if (Object.keys(meta?.properties ?? {}).length) {\n          return true;\n        }\n        if (meta?.mixins) {\n          return meta.mixins.some(mixin => {\n            const mixinMeta = this.__metaDb.getMetaData(mixin);\n            return this.__propertiesInHierarchy(mixinMeta, false);\n          });\n        }\n      }\n      if (meta?.superClass) {\n        const superClassMeta = this.__metaDb.getMetaData(meta.superClass);\n        return this.__propertiesInHierarchy(superClassMeta, false);\n      }\n      return false;\n    },\n    /**\n     * Do the mapping of types from Qooxdoo to TypeScript\n     *\n     * @param {String|String[]} typename the name of the type to convert\n     * @return {String} the Typescript name, if possible\n     */\n    getType(typename) {\n      if (Array.isArray(typename)) {\n        return typename.map(t => this.getType(t)).join(\"|\");\n      }\n      // TODO: use an AST parser to handle modifying complex type expressions\n\n      // handle certain cases\n      var defaultType = \"any\";\n      if (!typename || typename == \"[[ Function ]]\") {\n        return defaultType;\n      }\n\n      if (typeof typename == \"object\") {\n        if (\"type\" in typename) {\n          const dimensions = typename.dimensions ?? 1;\n          typename = typename.type + \"[]\".repeat(dimensions - 1);\n        } else {\n          typename = this.getType(typename.name);\n        }\n      }\n\n      // handle transformations\n\n      if (typename === \"Array\") {\n        return \"any[]\";\n      }\n\n      //mapping\n      const fromTypes = Object.keys(\n        qx.tool.compiler.targets.TypeScriptWriter.TYPE_MAPPINGS\n      );\n\n      const re = new RegExp(\n        `(^|[^.a-zA-Z0-9])(${fromTypes\n          .join(\"|\")\n          .replace(\"*\", \"\\\\*\")})($|[^.a-zA-Z0-9<])`\n      );\n\n      // regexp matches overlapping strings, so we need to loop\n      while (typename.match(re)) {\n        typename = typename.replace(\n          re,\n          (match, p1, p2, p3) =>\n            `${p1}${qx.tool.compiler.targets.TypeScriptWriter.TYPE_MAPPINGS[p2]}${p3}`\n        );\n      }\n\n      //nullables\n      typename = typename.replace(/\\?.*$/, \"\");\n\n      // handle global types\n      if (\n        (this.__metaDb.getMetaData(typename) && typename.indexOf(\".\") != -1) ||\n        (this.__metaDb.getMetaData(typename.replace(/\\[\\]/g, \"\")) &&\n          typename.replace(/\\[\\]/g, \"\").indexOf(\".\") != -1)\n      ) {\n        return \"globalThis.\" + typename;\n      }\n\n      typename = typename.replace(\"Promise<\", \"globalThis.Promise<\");\n      typename = typename.replace(\n        /(^|[^.a-zA-Z])(var|\\*)([^.a-zA-Z]|$)/g,\n        \"$1any$3\"\n      );\n\n      // this will do for now, but it will fail on an expression like `Array<Record<string, any>>`\n      typename = typename.replace(/(?<!qx\\.data\\.)Array<([^>]+)>/g, \"($1)[]\");\n\n      // We don't know the type\n      // qx.tool.compiler.Console.error(\"Unknown type: \" + typename);\n      return typename;\n    },\n\n    /**\n     * Write a constructor\n     */\n    writeConstructor(methodMeta) {\n      this.write(\n        this.__indent +\n          \"constructor (\" +\n          this.__serializeParameters(methodMeta.params) +\n          \");\\n\"\n      );\n    },\n\n    /**\n     * @typedef {Object} MemberConfig\n     * @property {object} location\n     * @property {Boolean} access\n     * @property {Boolean} abstract\n     * @property {Boolean} override\n     * @property {Boolean} async\n     * @property {Boolean} static\n     * @property {Array} parameters JSDoc parameters and types\n     * @property {any} returnType JSDoc return type\n     * @property {object} jsdoc\n     *\n     * @param {string} methodName\n     * @param {MemberConfig} config\n     */\n    __writeMethod(methodName, config) {\n      var declaration = \"\";\n\n      if (config.access === \"protected\" || config.access === \"public\") {\n        declaration += config.access + \" \";\n      } else if (config.access === \"private\") {\n        return;\n      }\n\n      if (config.static) {\n        declaration += \"static \";\n      }\n\n      if (config.abstract) {\n        declaration += \"abstract \";\n      }\n\n      if (config.override) {\n        declaration += \"override \";\n      }\n\n      declaration += this.__escapeMemberName(methodName) + \"(\";\n\n      if (config.parameters) {\n        declaration += this.__serializeParameters(config.parameters);\n      }\n      declaration += \")\";\n\n      var returnType = \"void\";\n      if (config.returnType) {\n        returnType = this.getType(config.returnType);\n      }\n      declaration += \": \" + returnType;\n\n      this.__writeJsDoc(config.jsdoc?.raw, config.location);\n\n      this.write(\n        this.__indent +\n          `// ${this.__currentClass.className}${\n            config.static ? \"#\" : \".\"\n          }${methodName}\\n`\n      );\n\n      this.write(this.__indent + declaration + \";\" + \"\\n\");\n    },\n\n    /**\n     * @typedef {Object} FieldConfig\n     * @property {object} location\n     * @property {Boolean} access\n     * @property {Boolean} abstract\n     * @property {Boolean} override\n     * @property {Boolean} async\n     * @property {Boolean} static\n     * @property {Array} type\n     * @property {object} jsdoc\n     *\n     * @param {string} fieldName\n     * @param {FieldConfig} config\n     */\n    __writeField(fieldName, config) {\n      var declaration = \"\";\n\n      if (config.access === \"protected\" || config.access === \"public\") {\n        declaration += config.access + \" \";\n      } else if (config.access === \"private\") {\n        return;\n      }\n\n      if (config.static) {\n        declaration += \"static \";\n      }\n\n      if (config.abstract) {\n        declaration += \"abstract \";\n      }\n\n      if (config.override) {\n        declaration += \"override \";\n      }\n\n      declaration += this.__escapeMemberName(fieldName) + \": \" + config.type;\n\n      this.__writeJsDoc(config.jsdoc?.raw, config.location);\n\n      this.write(\n        this.__indent +\n          `// ${this.__currentClass.className}${\n            config.static ? \"#\" : \".\"\n          }${fieldName}\\n`\n      );\n\n      this.write(this.__indent + declaration + \";\" + \"\\n\");\n    },\n\n    /**\n     * Writes the JSDoc content and adds a link to the source code\n     * @param {string[]} jsdoc\n     * @param {object} location\n     */\n    __writeJsDoc(jsdoc, location) {\n      const fixup = source => {\n        source = source\n          // to ensure that links work correctly, include the full class path\n          .replace(\n            /\\{@link #([^}]+)\\}/g,\n            `{@link ${this.__currentClass.className}.$1}`\n          );\n\n        if (source.match(/@param|@return/)) {\n          const typeExpr =\n            qx.tool.compiler.jsdoc.Parser.getTypeExpression(source);\n          if (typeExpr) {\n            source =\n              source.slice(0, typeExpr.start - 1).trim() +\n              \" \" +\n              source.slice(typeExpr.end + 1, source.length).trim();\n          }\n          if (source.trim().match(/^\\*\\s*(@param|@return(s?))$/)) {\n            return \"\";\n          }\n        }\n        return source.trim();\n      };\n\n      jsdoc = (jsdoc ?? []).map(fixup).filter(line => line.trim().length);\n      if (jsdoc.length) {\n        jsdoc.push(\"*\");\n      }\n\n      const sourceCodePath = path.join(\n        process.cwd(),\n        this.__metaDb.getRootDir(),\n        this.__currentClass.classFilename\n      );\n\n      // currently, VSCode does not support the use of `%file:%line:%column` in\n      // in-file links, though it supports them in all other contexts.\n      // TODO: find/create issue at microsoft/vscode regarding the above\n      const locationSpecifier = \"\"; // location?.start\n      //   ? `:${location.start.line}:${location.start.column}`\n      //   : \"\";\n\n      this.write(\n        `${this.__indent}/**\\n` +\n          [\n            ...jsdoc,\n            `* [source code](${sourceCodePath}${locationSpecifier})`,\n            `*/\\n`\n          ]\n            .map(line => `${this.__indent} ${line}`)\n            .join(\"\\n\")\n      );\n    },\n\n    __serializeParameters(params) {\n      let forceOptional = false;\n      let arr = params.map(paramMeta => {\n        var decl = paramMeta.name;\n        let optional = paramMeta.optional;\n        if (paramMeta.name == \"varargs\") {\n          optional = true;\n        }\n        if (optional || forceOptional) {\n          decl += \"?\";\n          forceOptional = true;\n        }\n        decl += \": \";\n        let type = \"any\";\n        if (paramMeta.type) {\n          var tmp = null;\n          if (qx.lang.Type.isArray(paramMeta.type)) {\n            if (paramMeta.type.length == 1) {\n              tmp = paramMeta.type[0];\n            }\n          } else {\n            tmp = paramMeta.type;\n          }\n          if (tmp) {\n            type = this.getType(tmp);\n            if (tmp.dimensions) {\n              type += \"[]\";\n            }\n          }\n        }\n        decl += type;\n        return decl;\n      });\n      return arr.join(\", \");\n    },\n\n    /**\n     * Write all the methods of a type\n     */\n    writeMembers(body, classMeta, isStatic = false) {\n      if (!body || !Object.keys(body).length) {\n        return;\n      }\n\n      const access = isStatic ? \"statics\" : \"members\";\n\n      for (var name in body) {\n        let memberMeta = Object.getOwnPropertyDescriptor(body, name).value;\n\n        // this prevents destruction of type information by base classes which include the `qx.core.MProperty` mixin\n        if (\n          (name === \"get\" || name === \"set\") &&\n          classMeta.mixins?.includes(\"qx.core.MProperty\")\n        ) {\n          continue;\n        }\n\n        if (memberMeta.appearsIn?.length) {\n          const superLikeName = memberMeta.appearsIn.slice(-1)[0];\n          const superLikeMeta = this.__metaDb.getMetaData(superLikeName);\n          const superLikeMember = superLikeMeta[access][name];\n          superLikeMember.jsdoc = memberMeta.jsdoc;\n          memberMeta = superLikeMember;\n        }\n\n        if (memberMeta.type === \"function\") {\n          this.__writeMethod(name, {\n            location: memberMeta.location,\n            access: classMeta.type !== \"interface\" && memberMeta.access,\n            abstract: classMeta.type !== \"interface\" && memberMeta.abstract,\n            async: memberMeta.async,\n            static: isStatic,\n            parameters: memberMeta.params,\n            returnType:\n              typeof memberMeta.returnType === \"object\" &&\n              \"type\" in memberMeta.returnType\n                ? memberMeta.returnType.type\n                : memberMeta.returnType,\n            jsdoc: memberMeta.jsdoc ?? {},\n            override: memberMeta.override\n          });\n        } else {\n          let type = \"any\";\n          if (memberMeta.jsdoc?.[\"@return\"] || memberMeta.jsdoc?.[\"@param\"]) {\n            // TODO: move anon fn type gen into metadata?\n            const returnType = this.getType(\n              memberMeta.jsdoc?.[\"@return\"]?.[0].type\n            );\n\n            const paramaterList =\n              memberMeta.jsdoc[\"@param\"]?.map(\n                p =>\n                  `${p.paramName}${p.optional ? \"?\" : \"\"}: ${this.getType(\n                    p.type\n                  )}`\n              ) ?? [];\n            type = `((${paramaterList.join(\", \")}) => ${returnType})`;\n          } else if (!!memberMeta.jsdoc?.[\"@type\"]) {\n            type = this.getType(memberMeta.jsdoc[\"@type\"][0].type);\n          }\n          this.__writeField(name, {\n            location: memberMeta.location,\n            access: classMeta.type !== \"interface\" && memberMeta.access,\n            abstract: classMeta.type !== \"interface\" && memberMeta.abstract,\n            static: isStatic,\n            type,\n            jsdoc: memberMeta.jsdoc ?? {},\n            override: memberMeta.override\n          });\n        }\n      }\n    },\n\n    /**\n     * Escapes the name with quote marks, only if necessary\n     *\n     * @param name\n     *          {String} the name to escape\n     * @return {String} the escaped (if necessary) name\n     */\n    __escapeMemberName(name) {\n      if (!name.match(/^[$a-zA-Z_][$a-zA-Z0-9_]*$/)) {\n        return '\"' + name + '\"';\n      }\n      return name;\n    }\n  },\n\n  statics: {\n    TYPE_MAPPINGS: {\n      Event: \"qx.event.type.Event\",\n      LocalizedString: \"qx.locale.LocalizedString\",\n      LayoutItem: \"qx.ui.core.LayoutItem\",\n      Widget: \"qx.ui.core.Widget\",\n      Decorator: \"qx.ui.decoration.Decorator\",\n      MWidgetController: \"qx.ui.list.core.MWidgetController\",\n      AbstractTreeItem: \"qx.ui.tree.core.AbstractTreeItem\",\n      Axis: \"qx.ui.virtual.core.Axis\",\n      ILayer: \"qx.ui.virtual.core.ILayer\",\n      Pane: \"qx.ui.virtual.core.Pane\",\n      IDesktop: \"qx.ui.window.IDesktop\",\n      IWindowManager: \"qx.ui.window.IWindowManager\",\n      DateFormat: \"qx.util.format.DateFormat\",\n      Class: \"qx.Class\",\n      Interface: \"qx.Interface\",\n      Mixin: \"qx.Mixin\",\n      Theme: \"qx.Theme\",\n      Boolean: \"boolean\",\n      Number: \"number\",\n      String: \"string\",\n      document: \"Document\",\n      Stylesheet: \"StyleSheet\",\n      Element: \"HTMLElement\",\n      Object: \"object\",\n      Map: \"Record<string, any>\",\n      Iterable: \"Iterable<any>\",\n      Iterator: \"Iterator<any>\",\n      Array: \"Array<any>\",\n      RegEx: \"RegExp\",\n      // TODO: deprecate the below types as they are non-standard aliases for builtin types without any tangible benefit\n      var: \"any\",\n      \"*\": \"any\",\n      arguments: \"any\"\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}