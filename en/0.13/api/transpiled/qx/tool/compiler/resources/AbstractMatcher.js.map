{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "match",
    "constructor",
    "call",
    "lang",
    "Type",
    "isArray",
    "map",
    "elem",
    "__match",
    "filename",
    "some",
    "endsWith",
    "test",
    "members",
    "matches",
    "library",
    "tool",
    "compiler",
    "resources",
    "AbstractMatcher"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/tool/compiler/resources/AbstractMatcher.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2019 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\n\n/**\n * Basic helper base class for matching files\n */\nqx.Class.define(\"qx.tool.compiler.resources.AbstractMatcher\", {\n  extend: qx.core.Object,\n  type: \"abstract\",\n\n  /**\n   * Constructor\n   *\n   * @param match {Array[String]|String|RegEx?} the reg ex to match filenames, or the extension,\n   * or an array of extensions\n   */\n  construct(match) {\n    super();\n    if (match) {\n      if (qx.lang.Type.isArray(match)) {\n        match = match.map(elem => {\n          if (elem[0] != \".\") {\n            elem = \".\" + elem;\n          }\n          return elem;\n        });\n        this.__match = filename => match.some(elem => filename.endsWith(elem));\n      } else if (typeof match == \"string\") {\n        if (match[0] != \".\") {\n          match = \".\" + match;\n        }\n        this.__match = filename => filename.endsWith(match);\n      } else {\n        this.__match = filename => match.test(filename);\n      }\n    }\n  },\n\n  members: {\n    __match: null,\n\n    /**\n     * Called to determine whether this handler is appropriate for the given filename;\n     * default implementation is to check the RegEx passed to the constructor\n     *\n     * @param filename {String} the name of the resource\n     * @param library {qx.tool.compiler.app.Library} the library its in\n     */\n    matches(filename, library) {\n      return this.__match !== null && this.__match(filename);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,4CAA4C,EAAE;IAC5DC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,IAAI,EAAE,UAAU;IAEhB;AACF;AACA;AACA;AACA;AACA;IACEC,SAAS,WAATA,SAASA,CAACC,KAAK,EAAE;MACfX,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAI,WAAA,CAAAC,IAAA;MACA,IAAIF,KAAK,EAAE;QACT,IAAIX,EAAE,CAACc,IAAI,CAACC,IAAI,CAACC,OAAO,CAACL,KAAK,CAAC,EAAE;UAC/BA,KAAK,GAAGA,KAAK,CAACM,GAAG,CAAC,UAAAC,IAAI,EAAI;YACxB,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;cAClBA,IAAI,GAAG,GAAG,GAAGA,IAAI;YACnB;YACA,OAAOA,IAAI;UACb,CAAC,CAAC;UACF,IAAI,CAACC,SAAO,GAAG,UAAAC,QAAQ;YAAA,OAAIT,KAAK,CAACU,IAAI,CAAC,UAAAH,IAAI;cAAA,OAAIE,QAAQ,CAACE,QAAQ,CAACJ,IAAI,CAAC;YAAA,EAAC;UAAA;QACxE,CAAC,MAAM,IAAI,OAAOP,KAAK,IAAI,QAAQ,EAAE;UACnC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;YACnBA,KAAK,GAAG,GAAG,GAAGA,KAAK;UACrB;UACA,IAAI,CAACQ,SAAO,GAAG,UAAAC,QAAQ;YAAA,OAAIA,QAAQ,CAACE,QAAQ,CAACX,KAAK,CAAC;UAAA;QACrD,CAAC,MAAM;UACL,IAAI,CAACQ,SAAO,GAAG,UAAAC,QAAQ;YAAA,OAAIT,KAAK,CAACY,IAAI,CAACH,QAAQ,CAAC;UAAA;QACjD;MACF;IACF,CAAC;IAEDI,OAAO,EAAE;MACPL,SAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;MACIM,OAAO,WAAPA,OAAOA,CAACL,QAAQ,EAAEM,OAAO,EAAE;QACzB,OAAO,IAAI,CAACP,SAAO,KAAK,IAAI,IAAI,IAAI,CAACA,SAAO,CAACC,QAAQ,CAAC;MACxD;IACF;EACF,CAAC,CAAC;EAvEFpB,EAAE,CAAC2B,IAAI,CAACC,QAAQ,CAACC,SAAS,CAACC,eAAe,CAAC3B,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}