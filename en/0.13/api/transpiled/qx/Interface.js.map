{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "name",
    "config",
    "extend",
    "getClass",
    "iface",
    "$$extends",
    "properties",
    "$$properties",
    "members",
    "$$members",
    "events",
    "$$events",
    "$$type",
    "toString",
    "genericToString",
    "basename",
    "createNamespace",
    "Interface",
    "$$registry",
    "getByName",
    "isDefined",
    "undefined",
    "getTotalNumber",
    "objectGetLength",
    "flatten",
    "ifaces",
    "list",
    "concat",
    "i",
    "l",
    "length",
    "push",
    "apply",
    "__checkMembers",
    "object",
    "clazz",
    "wrap",
    "shouldThrow",
    "key",
    "isFunction",
    "isPropertyMethod",
    "__isPropertyMethod",
    "hasMemberFunction",
    "Error",
    "classname",
    "shouldWrapFunction",
    "util",
    "OOUtil",
    "hasInterface",
    "__wrapInterfaceMember",
    "methodName",
    "match",
    "propertyName",
    "firstLow",
    "getPropertyDefinition",
    "isBoolean",
    "check",
    "__checkProperties",
    "__checkEvents",
    "supportsEvent",
    "assertObject",
    "constructor",
    "assert",
    "prototype",
    "objectImplements",
    "classImplements",
    "has",
    "core",
    "Environment",
    "select",
    "true",
    "origFunction",
    "functionName",
    "preCondition",
    "wrappedFunction",
    "arguments",
    "wrapper",
    "base",
    "default",
    "__allowedKeys",
    "__validateConfig"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/Interface.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * This class is used to define interfaces (similar to Java interfaces).\n *\n * See the description of the {@link #define} method how an interface is\n * defined.\n *\n * @require(qx.lang.normalize.Array)\n */\nqx.Bootstrap.define(\"qx.Interface\", {\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Define a new interface. Interface definitions look much like class definitions.\n     *\n     * The main difference is that the bodies of functions defined in <code>members</code>\n     * and <code>statics</code> are called before the original function with the\n     * same arguments. This can be used to check the passed arguments. If the\n     * checks fail, an exception should be thrown. It is convenient to use the\n     * method defined in {@link qx.core.MAssert} to check the arguments.\n     *\n     * In the <code>build</code> version the checks are omitted.\n     *\n     * For properties only the names are required so the value of the properties\n     * can be empty maps.\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Interface.define(\"name\",\n     * {\n     *   extend: [SuperInterfaces],\n     *\n     *   statics:\n     *   {\n     *     PI : 3.14\n     *   },\n     *\n     *   properties: {\"color\": {}, \"name\": {} },\n     *\n     *   members:\n     *   {\n     *     meth1: function() {},\n     *     meth2: function(a, b) { this.assertArgumentsCount(arguments, 2, 2); },\n     *     meth3: function(c) { this.assertInterface(c.constructor, qx.some.Interface); }\n     *   },\n     *\n     *   events :\n     *   {\n     *     keydown : \"qx.event.type.KeySequence\"\n     *   }\n     * });\n     * </pre>\n     *\n     * @param name {String} name of the interface\n     * @param config {Map ? null} Interface definition structure. The configuration map has the following keys:\n     *   <table>\n     *     <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *     <tr><th>extend</th><td>Interface |<br>Interface[]</td><td>Single interface or array of interfaces this interface inherits from.</td></tr>\n     *     <tr><th>members</th><td>Map</td><td>Map of members of the interface.</td></tr>\n     *     <tr><th>statics</th><td>Map</td><td>\n     *         Map of statics of the interface. The statics will not get copied into the target class.\n     *         This is the same behaviour as statics in mixins ({@link qx.Mixin#define}).\n     *     </td></tr>\n     *     <tr><th>properties</th><td>Map</td><td>Map of properties and their definitions.</td></tr>\n     *     <tr><th>events</th><td>Map</td><td>Map of event names and the corresponding event class name.</td></tr>\n     *   </table>\n     *\n     * @return {qx.Interface} The configured interface\n     */\n    define(name, config) {\n      if (config) {\n        // Normalize include\n        if (\n          config.extend &&\n          !(qx.Bootstrap.getClass(config.extend) === \"Array\")\n        ) {\n          config.extend = [config.extend];\n        }\n\n        // Validate incoming data\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__validateConfig(name, config);\n        }\n\n        // Create interface from statics\n        var iface = config.statics ? config.statics : {};\n\n        // Attach configuration\n        if (config.extend) {\n          iface.$$extends = config.extend;\n        }\n\n        if (config.properties) {\n          iface.$$properties = config.properties;\n        }\n\n        if (config.members) {\n          iface.$$members = config.members;\n        }\n\n        if (config.events) {\n          iface.$$events = config.events;\n        }\n      } else {\n        // Create empty interface\n        var iface = {};\n      }\n\n      // Add Basics\n      iface.$$type = \"Interface\";\n      iface.name = name;\n\n      // Attach toString\n      iface.toString = this.genericToString;\n\n      // Assign to namespace\n      iface.basename = qx.Bootstrap.createNamespace(name, iface);\n\n      // Add to registry\n      qx.Interface.$$registry[name] = iface;\n\n      // Return final interface\n      return iface;\n    },\n\n    /**\n     * Returns an interface by name\n     *\n     * @param name {String} class name to resolve\n     * @return {Class} the class\n     */\n    getByName(name) {\n      return this.$$registry[name];\n    },\n\n    /**\n     * Determine if interface exists\n     *\n     * @param name {String} Interface name to check\n     * @return {Boolean} true if interface exists\n     */\n    isDefined(name) {\n      return this.getByName(name) !== undefined;\n    },\n\n    /**\n     * Determine the number of interfaces which are defined\n     *\n     * @return {Number} the number of interfaces\n     */\n    getTotalNumber() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n    /**\n     * Generates a list of all interfaces including their super interfaces\n     * (resolved recursively)\n     *\n     * @param ifaces {Interface[] ? []} List of interfaces to be resolved\n     * @return {Array} List of all interfaces\n     */\n    flatten(ifaces) {\n      if (!ifaces) {\n        return [];\n      }\n\n      // we need to create a copy and not to modify the existing array\n      var list = ifaces.concat();\n\n      for (var i = 0, l = ifaces.length; i < l; i++) {\n        if (ifaces[i].$$extends) {\n          list.push.apply(list, this.flatten(ifaces[i].$$extends));\n        }\n      }\n\n      return list;\n    },\n\n    /**\n     * Assert members\n     *\n     * @param object {qx.core.Object} The object, which contains the methods\n     * @param clazz {Class} class of the object\n     * @param iface {Interface} the interface to verify\n     * @param wrap {Boolean ? false} wrap functions required by interface to\n     *     check parameters etc.\n     * @param shouldThrow {Boolean} if <code>false</code>, the method\n     *   will return a boolean instead of throwing an exception\n     * @return {Boolean} <code>true</code> if all members are supported\n     */\n    __checkMembers(object, clazz, iface, wrap, shouldThrow) {\n      // Validate members\n      var members = iface.$$members;\n      if (members) {\n        for (var key in members) {\n          if (qx.Bootstrap.isFunction(members[key])) {\n            var isPropertyMethod = this.__isPropertyMethod(clazz, key);\n            var hasMemberFunction =\n              isPropertyMethod || qx.Bootstrap.isFunction(object[key]);\n\n            if (!hasMemberFunction) {\n              if (shouldThrow) {\n                throw new Error(\n                  'Implementation of method \"' +\n                    key +\n                    '\" is missing in class \"' +\n                    clazz.classname +\n                    '\" required by interface \"' +\n                    iface.name +\n                    '\"'\n                );\n              } else {\n                return false;\n              }\n            }\n\n            // Only wrap members if the interface was not been applied yet. This\n            // can easily be checked by the recursive hasInterface method.\n            var shouldWrapFunction =\n              wrap === true &&\n              !isPropertyMethod &&\n              !qx.util.OOUtil.hasInterface(clazz, iface);\n\n            if (shouldWrapFunction) {\n              object[key] = this.__wrapInterfaceMember(\n                iface,\n                object[key],\n                key,\n                members[key]\n              );\n            }\n          } else {\n            // Other members are not checked more detailed because of\n            // JavaScript's loose type handling\n            if (typeof object[key] === \"undefined\") {\n              if (shouldThrow) {\n                throw new Error(\n                  'Implementation of member \"' +\n                    key +\n                    '\" is missing in class \"' +\n                    clazz.classname +\n                    '\" required by interface \"' +\n                    iface.name +\n                    '\"'\n                );\n              } else {\n                return false;\n              }\n            }\n          }\n        }\n      }\n      if (!shouldThrow) {\n        return true;\n      }\n    },\n\n    /**\n     * Internal helper to detect if the method will be generated by the\n     * property system.\n     *\n     * @param clazz {Class} The current class.\n     * @param methodName {String} The name of the method.\n     *\n     * @return {Boolean} true, if the method will be generated by the property\n     *   system.\n     */\n    __isPropertyMethod(clazz, methodName) {\n      var match = methodName.match(/^(is|toggle|get|set|reset)(.*)$/);\n\n      if (!match) {\n        return false;\n      }\n\n      var propertyName = qx.Bootstrap.firstLow(match[2]);\n      var isPropertyMethod = qx.util.OOUtil.getPropertyDefinition(\n        clazz,\n        propertyName\n      );\n\n      if (!isPropertyMethod) {\n        return false;\n      }\n\n      var isBoolean = match[0] === \"is\" || match[0] === \"toggle\";\n      if (isBoolean) {\n        return (\n          qx.util.OOUtil.getPropertyDefinition(clazz, propertyName).check ===\n          \"Boolean\"\n        );\n      }\n\n      return true;\n    },\n\n    /**\n     * Assert properties\n     *\n     * @param clazz {Class} class to check interface for\n     * @param iface {Interface} the interface to verify\n     * @param shouldThrow {Boolean} if <code>false</code>, the method\n     *   will return a boolean instead of throwing an exception\n     * @return {Boolean} <code>true</code> if all properties are supported\n     */\n    __checkProperties(clazz, iface, shouldThrow) {\n      if (iface.$$properties) {\n        for (var key in iface.$$properties) {\n          if (!qx.util.OOUtil.getPropertyDefinition(clazz, key)) {\n            if (shouldThrow) {\n              throw new Error(\n                'The property \"' +\n                  key +\n                  '\" is not supported by Class \"' +\n                  clazz.classname +\n                  '\"!'\n              );\n            } else {\n              return false;\n            }\n          }\n        }\n      }\n      if (!shouldThrow) {\n        return true;\n      }\n    },\n\n    /**\n     * Assert events\n     *\n     * @param clazz {Class} class to check interface for\n     * @param iface {Interface} the interface to verify\n     * @param shouldThrow {Boolean} if <code>false</code>, the method\n     *   will return a boolean instead of throwing an exception\n     * @return {Boolean} <code>true</code> if all events are supported\n     */\n    __checkEvents(clazz, iface, shouldThrow) {\n      if (iface.$$events) {\n        for (var key in iface.$$events) {\n          if (!qx.util.OOUtil.supportsEvent(clazz, key)) {\n            if (shouldThrow) {\n              throw new Error(\n                'The event \"' +\n                  key +\n                  '\" is not supported by Class \"' +\n                  clazz.classname +\n                  '\"!'\n              );\n            } else {\n              return false;\n            }\n          }\n        }\n      }\n      if (!shouldThrow) {\n        return true;\n      }\n    },\n\n    /**\n     * Asserts that the given object implements all the methods defined in the\n     * interface. This method throws an exception if the object does not\n     * implement the interface.\n     *\n     *  @param object {qx.core.Object} Object to check interface for\n     *  @param iface {Interface} The interface to verify\n     */\n    assertObject(object, iface) {\n      var clazz = object.constructor;\n      this.__checkMembers(object, clazz, iface, false, true);\n      this.__checkProperties(clazz, iface, true);\n      this.__checkEvents(clazz, iface, true);\n\n      // Validate extends, recursive\n      var extend = iface.$$extends;\n      if (extend) {\n        for (var i = 0, l = extend.length; i < l; i++) {\n          this.assertObject(object, extend[i]);\n        }\n      }\n    },\n\n    /**\n     * Checks if an interface is implemented by a class\n     *\n     * @param clazz {Class} class to check interface for\n     * @param iface {Interface} the interface to verify\n     * @param wrap {Boolean ? false} wrap functions required by interface to\n     *     check parameters etc.\n     */\n    assert(clazz, iface, wrap) {\n      this.__checkMembers(clazz.prototype, clazz, iface, wrap, true);\n      this.__checkProperties(clazz, iface, true);\n      this.__checkEvents(clazz, iface, true);\n\n      // Validate extends, recursive\n      var extend = iface.$$extends;\n      if (extend) {\n        for (var i = 0, l = extend.length; i < l; i++) {\n          this.assert(clazz, extend[i], wrap);\n        }\n      }\n    },\n\n    /**\n     * Asserts that the given object implements all the methods defined in the\n     * interface.\n     *\n     *  @param object {qx.core.Object} Object to check interface for\n     *  @param iface {Interface} The interface to verify\n     * @return {Boolean} <code>true</code> if the objects implements the interface\n     */\n    objectImplements(object, iface) {\n      var clazz = object.constructor;\n      if (\n        !this.__checkMembers(object, clazz, iface) ||\n        !this.__checkProperties(clazz, iface) ||\n        !this.__checkEvents(clazz, iface)\n      ) {\n        return false;\n      }\n\n      // Validate extends, recursive\n      var extend = iface.$$extends;\n      if (extend) {\n        for (var i = 0, l = extend.length; i < l; i++) {\n          if (!this.objectImplements(object, extend[i])) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Tests whether an interface is implemented by a class, without throwing an\n     * exception when it doesn't.\n     *\n     * @param clazz {Class} class to check interface for\n     * @param iface {Interface} the interface to verify\n     * @return {Boolean} <code>true</code> if interface is implemented\n     */\n    classImplements(clazz, iface) {\n      if (\n        !this.__checkMembers(clazz.prototype, clazz, iface) ||\n        !this.__checkProperties(clazz, iface) ||\n        !this.__checkEvents(clazz, iface)\n      ) {\n        return false;\n      }\n\n      // Validate extends, recursive\n      var extend = iface.$$extends;\n      if (extend) {\n        for (var i = 0, l = extend.length; i < l; i++) {\n          if (!this.has(clazz, extend[i])) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all interface to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The interface identifier\n     */\n    genericToString() {\n      return \"[Interface \" + this.name + \"]\";\n    },\n\n    /** Registry of all defined interfaces */\n    $$registry: {},\n\n    /**\n     * Wrap a method with a precondition check.\n     *\n     * @signature function(iface, origFunction, functionName, preCondition)\n     * @param iface {String} Name of the interface, where the pre condition\n     *   was defined. (Used in error messages).\n     * @param origFunction {Function} function to wrap.\n     * @param functionName {String} name of the function. (Used in error messages).\n     * @param preCondition {Function}. This function gets called with the arguments of the\n     *   original function. If this function return true the original function is called.\n     *   Otherwise an exception is thrown.\n     * @return {Function} wrapped function\n     */\n    __wrapInterfaceMember: qx.core.Environment.select(\"qx.debug\", {\n      true(iface, origFunction, functionName, preCondition) {\n        function wrappedFunction() {\n          // call precondition\n          preCondition.apply(this, arguments);\n\n          // call original function\n          return origFunction.apply(this, arguments);\n        }\n\n        origFunction.wrapper = wrappedFunction;\n        if (origFunction.base !== undefined) {\n          if (wrappedFunction.base !== undefined) {\n            throw new Error(\"base is already defined for the wrapped function\");\n          }\n          wrappedFunction.base = origFunction.base;\n        }\n        return wrappedFunction;\n      },\n\n      default(iface, origFunction, functionName, preCondition) {}\n    }),\n\n    /** @type {Map} allowed keys in interface definition */\n    __allowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        extend: \"object\", // Interface | Interface[]\n        statics: \"object\", // Map\n        members: \"object\", // Map\n        properties: \"object\", // Map\n        events: \"object\" // Map\n      },\n\n      default: null\n    }),\n\n    /**\n     * Validates incoming configuration and checks keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     */\n    __validateConfig: qx.core.Environment.select(\"qx.debug\", {\n      true(name, config) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          // Validate keys\n          var allowed = this.__allowedKeys;\n\n          for (var key in config) {\n            if (allowed[key] === undefined) {\n              throw new Error(\n                'The configuration key \"' +\n                  key +\n                  '\" in class \"' +\n                  name +\n                  '\" is not allowed!'\n              );\n            }\n\n            if (config[key] == null) {\n              throw new Error(\n                \"Invalid key '\" +\n                  key +\n                  \"' in interface '\" +\n                  name +\n                  \"'! The value is undefined/null!\"\n              );\n            }\n\n            if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n              throw new Error(\n                'Invalid type of key \"' +\n                  key +\n                  '\" in interface \"' +\n                  name +\n                  '\"! The type of the key must be \"' +\n                  allowed[key] +\n                  '\"!'\n              );\n            }\n          }\n\n          // Validate maps\n          var maps = [\"statics\", \"members\", \"properties\", \"events\"];\n          for (var i = 0, l = maps.length; i < l; i++) {\n            var key = maps[i];\n\n            if (\n              config[key] !== undefined &&\n              ([\"Array\", \"RegExp\", \"Date\"].indexOf(\n                qx.Bootstrap.getClass(config[key])\n              ) != -1 ||\n                config[key].classname !== undefined)\n            ) {\n              throw new Error(\n                'Invalid key \"' +\n                  key +\n                  '\" in interface \"' +\n                  name +\n                  '\"! The value needs to be a map!'\n              );\n            }\n          }\n\n          // Validate extends\n          if (config.extend) {\n            for (var i = 0, a = config.extend, l = a.length; i < l; i++) {\n              if (a[i] == null) {\n                throw new Error(\n                  \"Extends of interfaces must be interfaces. The extend number '\" +\n                    i +\n                    1 +\n                    \"' in interface '\" +\n                    name +\n                    \"' is undefined/null!\"\n                );\n              }\n\n              if (a[i].$$type !== \"Interface\") {\n                throw new Error(\n                  \"Extends of interfaces must be interfaces. The extend number '\" +\n                    i +\n                    1 +\n                    \"' in interface '\" +\n                    name +\n                    \"' is not an interface!\"\n                );\n              }\n            }\n          }\n\n          // Validate statics\n          if (config.statics) {\n            for (var key in config.statics) {\n              if (key.toUpperCase() !== key) {\n                throw new Error(\n                  'Invalid key \"' +\n                    key +\n                    '\" in interface \"' +\n                    name +\n                    '\"! Static constants must be all uppercase.'\n                );\n              }\n\n              switch (typeof config.statics[key]) {\n                case \"boolean\":\n                case \"string\":\n                case \"number\":\n                  break;\n\n                default:\n                  throw new Error(\n                    'Invalid key \"' +\n                      key +\n                      '\" in interface \"' +\n                      name +\n                      '\"! Static constants must be all of a primitive type.'\n                  );\n              }\n            }\n          }\n        }\n      },\n\n      default(name, config) {}\n    })\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,cAAc,EAAE;IAClCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACID,MAAM,WAANA,MAAMA,CAACE,IAAI,EAAEC,MAAM,EAAE;QACnB,IAAIA,MAAM,EAAE;UACV;UACA,IACEA,MAAM,CAACC,MAAM,IACb,EAAER,EAAE,CAACC,SAAS,CAACQ,QAAQ,CAACF,MAAM,CAACC,MAAM,CAAC,KAAK,OAAO,CAAC,EACnD;YACAD,MAAM,CAACC,MAAM,GAAG,CAACD,MAAM,CAACC,MAAM,CAAC;UACjC;;UAEA;;UAKA;UACA,IAAIE,KAAK,GAAGH,MAAM,CAACF,OAAO,GAAGE,MAAM,CAACF,OAAO,GAAG,CAAC,CAAC;;UAEhD;UACA,IAAIE,MAAM,CAACC,MAAM,EAAE;YACjBE,KAAK,CAACC,SAAS,GAAGJ,MAAM,CAACC,MAAM;UACjC;UAEA,IAAID,MAAM,CAACK,UAAU,EAAE;YACrBF,KAAK,CAACG,YAAY,GAAGN,MAAM,CAACK,UAAU;UACxC;UAEA,IAAIL,MAAM,CAACO,OAAO,EAAE;YAClBJ,KAAK,CAACK,SAAS,GAAGR,MAAM,CAACO,OAAO;UAClC;UAEA,IAAIP,MAAM,CAACS,M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",
  "ignoreList": []
}