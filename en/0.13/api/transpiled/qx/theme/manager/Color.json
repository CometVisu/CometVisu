{
  "className": "qx.theme.manager.Color",
  "packageName": "qx.theme.manager",
  "name": "Color",
  "superClass": "qx.util.ValueManager",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0,
        "index": 545
      },
      "end": {
        "line": 146,
        "column": 3,
        "index": 4456
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Manager for color themes</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": true,
  "properties": {
    "theme": {
      "location": {
        "start": {
          "line": 35,
          "column": 4,
          "index": 896
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 1009
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>the currently selected color theme</p>"
          }
        ]
      },
      "name": "theme",
      "propertyType": "new",
      "event": "changeTheme",
      "apply": "_applyTheme",
      "nullable": true,
      "allowNull": true,
      "check": "Theme"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "_applyTheme": {
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1217
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1524
        }
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "theme"
      ]
    },
    "__parseColor": {
      "location": {
        "start": {
          "line": 73,
          "column": 4,
          "index": 1957
        },
        "end": {
          "line": 91,
          "column": 5,
          "index": 2651
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to take a color stored in the theme and returns the string color value.\n In most of the times that means it just returns the string stored in the theme.\n It additionally checks if its a valid color at all.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "colors {Map} The map of color definitions.",
            "paramName": "colors",
            "description": " The map of color definitions.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the color to check.",
            "paramName": "name",
            "description": " The name of the color to check.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The resolved color as string.",
            "type": "String",
            "description": " The resolved color as string."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "resolve": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2963
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3582
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dynamically interpreted result for the incoming value,\n (if available), otherwise returns the original value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} Value to resolve",
            "paramName": "value",
            "description": " Value to resolve",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} either returns the (translated) result of the incoming\n value or the value itself",
            "type": "var",
            "description": " either returns the (translated) result of the incoming\n value or the value itself"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.util.ValueManager",
      "appearsIn": [
        "qx.util.ValueManager"
      ]
    },
    "isDynamic": {
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3804
        },
        "end": {
          "line": 144,
          "column": 5,
          "index": 4448
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a value is interpreted dynamically</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true if the value is interpreted dynamically",
            "type": "Boolean",
            "description": " returns true if the value is interpreted dynamically"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.util.ValueManager",
      "appearsIn": [
        "qx.util.ValueManager"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getTheme": {
      "type": "function",
      "name": "getTheme",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>theme</code>.\n\nFor further details take a look at the property definition: {@link #theme}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Theme",
            "desc": "Returns the value for theme"
          }
        ]
      }
    },
    "setTheme": {
      "type": "function",
      "name": "setTheme",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>theme</code>.\n\nFor further details take a look at the property definition: {@link #theme}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Theme",
            "paramName": "value",
            "desc": "Value for theme"
          }
        ]
      }
    },
    "resetTheme": {
      "type": "function",
      "name": "resetTheme",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>theme</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #theme}."
          }
        ]
      }
    }
  },
  "descendants": []
}