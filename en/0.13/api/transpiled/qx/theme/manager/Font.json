{
  "className": "qx.theme.manager.Font",
  "packageName": "qx.theme.manager",
  "name": "Font",
  "superClass": "qx.util.ValueManager",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0,
        "index": 644
      },
      "end": {
        "line": 258,
        "column": 3,
        "index": 7362
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Manager for font themes\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.$$fontBootstrap"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": true,
  "construct": {
    "location": {
      "start": {
        "line": 38,
        "column": 2,
        "index": 967
      },
      "end": {
        "line": 46,
        "column": 3,
        "index": 1142
      }
    },
    "jsdoc": {}
  },
  "properties": {
    "theme": {
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1397
        },
        "end": {
          "line": 61,
          "column": 5,
          "index": 1510
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>the currently selected font theme</p>"
          }
        ]
      },
      "name": "theme",
      "propertyType": "new",
      "event": "changeTheme",
      "apply": "_applyTheme",
      "nullable": true,
      "allowNull": true,
      "check": "Theme"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "_manifestFonts": {
      "location": {
        "start": {
          "line": 71,
          "column": 4,
          "index": 1718
        },
        "end": {
          "line": 71,
          "column": 24,
          "index": 1738
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "resolveDynamic": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 1979
        },
        "end": {
          "line": 82,
          "column": 5,
          "index": 2111
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dynamically interpreted result for the incoming value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} return the (translated) result of the incoming value",
            "type": "var",
            "description": " return the (translated) result of the incoming value"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.util.ValueManager",
      "appearsIn": [
        "qx.util.ValueManager"
      ]
    },
    "resolve": {
      "location": {
        "start": {
          "line": 91,
          "column": 4,
          "index": 2423
        },
        "end": {
          "line": 133,
          "column": 5,
          "index": 3856
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the dynamically interpreted result for the incoming value,\n (if available), otherwise returns the original value</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} Value to resolve",
            "paramName": "value",
            "description": " Value to resolve",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} either returns the (translated) result of the incoming\n value or the value itself",
            "type": "var",
            "description": " either returns the (translated) result of the incoming\n value or the value itself"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.util.ValueManager",
      "appearsIn": [
        "qx.util.ValueManager"
      ]
    },
    "isDynamic": {
      "location": {
        "start": {
          "line": 141,
          "column": 4,
          "index": 4078
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 5091
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether a value is interpreted dynamically</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} dynamically interpreted identifier",
            "paramName": "value",
            "description": " dynamically interpreted identifier",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} returns true if the value is interpreted dynamically",
            "type": "Boolean",
            "description": " returns true if the value is interpreted dynamically"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.util.ValueManager",
      "appearsIn": [
        "qx.util.ValueManager"
      ]
    },
    "__resolveInclude": {
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5280
        },
        "end": {
          "line": 196,
          "column": 5,
          "index": 5792
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks for includes and resolves them recursively</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fonts {Map} all fonts of the theme",
            "paramName": "fonts",
            "description": " all fonts of the theme",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "fontName {String} font name to include",
            "paramName": "fontName",
            "description": " font name to include",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyTheme": {
      "location": {
        "start": {
          "line": 199,
          "column": 4,
          "index": 5819
        },
        "end": {
          "line": 233,
          "column": 5,
          "index": 6791
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "theme"
      ]
    },
    "__getFontClass": {
      "location": {
        "start": {
          "line": 241,
          "column": 4,
          "index": 6980
        },
        "end": {
          "line": 246,
          "column": 5,
          "index": 7112
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Decides which Font class should be used based on the theme configuration</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "config {Map} The font's configuration map",
            "paramName": "config",
            "description": " The font's configuration map",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class}",
            "type": "Class",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getTheme": {
      "type": "function",
      "name": "getTheme",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>theme</code>.\n\nFor further details take a look at the property definition: {@link #theme}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Theme",
            "desc": "Returns the value for theme"
          }
        ]
      }
    },
    "setTheme": {
      "type": "function",
      "name": "setTheme",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>theme</code>.\n\nFor further details take a look at the property definition: {@link #theme}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Theme",
            "paramName": "value",
            "desc": "Value for theme"
          }
        ]
      }
    },
    "resetTheme": {
      "type": "function",
      "name": "resetTheme",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>theme</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #theme}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 255,
        "column": 2,
        "index": 7308
      },
      "end": {
        "line": 257,
        "column": 3,
        "index": 7358
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}