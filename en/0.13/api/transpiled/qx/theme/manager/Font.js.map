{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "util",
    "ValueManager",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "constructor",
    "call",
    "$$fontBootstrap",
    "_manifestFonts",
    "properties",
    "theme",
    "check",
    "nullable",
    "apply",
    "event",
    "members",
    "resolveDynamic",
    "value",
    "dynamic",
    "_dynamic",
    "bom",
    "Font",
    "resolve",
    "cache",
    "resolved",
    "getTheme",
    "fonts",
    "createdFonts",
    "__initialiseFonts",
    "font",
    "isDynamic",
    "undefined",
    "fontClass",
    "__getFontClass",
    "comparisonString",
    "setComparisonString",
    "set",
    "__resolveInclude",
    "__P_458_2",
    "fontName",
    "include",
    "fontToInclude",
    "lang",
    "Object",
    "mergeWith",
    "__P_458_0",
    "fontDefs",
    "_this",
    "webFontDefs",
    "_loop",
    "fontDef",
    "fontId",
    "preset",
    "keys",
    "forEach",
    "presetKey",
    "sources",
    "family",
    "indexOf",
    "unshift",
    "fontFaces",
    "fontFacesLookup",
    "fontFace",
    "fontKey",
    "webfonts",
    "WebFontLoader",
    "createFontLookupKey",
    "fontWeight",
    "fontStyle",
    "fontFamily",
    "push",
    "css",
    "getProperties",
    "propertyName",
    "String",
    "firstUp",
    "themed",
    "_loop2",
    "webFontDef",
    "_webFontDefs",
    "_i",
    "loader",
    "getLoader",
    "load",
    "length",
    "loadComplete",
    "_applyTheme",
    "key",
    "dispose",
    "assign",
    "_setDynamic",
    "__P_458_1",
    "config",
    "WebFont",
    "getManifestFonts",
    "destruct",
    "_disposeMap",
    "manager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/theme/manager/Font.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Manager for font themes\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @ignore(qx.$$fontBootstrap)\n */\nqx.Class.define(\"qx.theme.manager.Font\", {\n  type: \"singleton\",\n  extend: qx.util.ValueManager,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    // Grab bootstrap info\n    if (qx.$$fontBootstrap) {\n      this._manifestFonts = qx.$$fontBootstrap;\n      delete qx.$$fontBootstrap;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** the currently selected font theme */\n    theme: {\n      check: \"Theme\",\n      nullable: true,\n      apply: \"_applyTheme\",\n      event: \"changeTheme\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    _manifestFonts: null,\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {var} return the (translated) result of the incoming value\n     */\n    resolveDynamic(value) {\n      var dynamic = this._dynamic;\n      return value instanceof qx.bom.Font ? value : dynamic[value];\n    },\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value,\n     * (if available), otherwise returns the original value\n     * @param value {String} Value to resolve\n     * @return {var} either returns the (translated) result of the incoming\n     * value or the value itself\n     */\n    resolve(value) {\n      var cache = this._dynamic;\n      var resolved = cache[value];\n\n      if (resolved) {\n        return resolved;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && theme.fonts[value]) {\n        let createdFonts = this.__initialiseFonts(theme.fonts);\n        let font = createdFonts[value] || null;\n        if (font) {\n          cache[value] = font;\n        }\n        return font;\n      }\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (theme) {\n          if (!this.__warnedMissingFonts) {\n            this.__warnedMissingFonts = {};\n          }\n          if (!this.__warnedMissingFonts[value]) {\n            this.__warnedMissingFonts[value] = true;\n            this.debug(\n              `Cannot resolve a font named ${value} - available fonts are ${Object.keys(\n                theme.fonts\n              ).join(\", \")}`\n            );\n          }\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Whether a value is interpreted dynamically\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {Boolean} returns true if the value is interpreted dynamically\n     */\n    isDynamic(value) {\n      var cache = this._dynamic;\n\n      if (\n        value &&\n        (value instanceof qx.bom.Font || cache[value] !== undefined)\n      ) {\n        return true;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && value && theme.fonts[value]) {\n        var fontClass = this.__getFontClass(theme.fonts[value]);\n        var font = new fontClass();\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (theme.fonts[value].comparisonString) {\n          font.setComparisonString(theme.fonts[value].comparisonString);\n        }\n\n        cache[value] = font.set(theme.fonts[value]);\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Checks for includes and resolves them recursively\n     *\n     * @param fonts {Map} all fonts of the theme\n     * @param fontName {String} font name to include\n     */\n    __resolveInclude(fonts, fontName) {\n      if (fonts[fontName].include) {\n        // get font infos out of the font theme\n        var fontToInclude = fonts[fonts[fontName].include];\n\n        // delete 'include' key - not part of the merge\n        fonts[fontName].include = null;\n        delete fonts[fontName].include;\n\n        fonts[fontName] = qx.lang.Object.mergeWith(\n          fonts[fontName],\n          fontToInclude,\n          false\n        );\n\n        this.__resolveInclude(fonts, fontName);\n      }\n    },\n\n    /**\n     * Initialises fonts from a set of font definitions (eg from a theme Font configuration)\n     *\n     * @param {Map<String,Object>} fontDefs indexed by font ID\n     * @return {Map<String,qx.bom.Font>} created fonts\n     */\n    __initialiseFonts(fontDefs) {\n      let webFontDefs = [];\n      let createdFonts = {};\n\n      for (var fontId in fontDefs) {\n        let fontDef = fontDefs[fontId];\n        if (fontDef.include && fontDefs[fontDef.include]) {\n          this.__resolveInclude(fontDefs, fontId);\n        }\n\n        if (fontDef.fontName) {\n          let preset = this._manifestFonts[fontDef.fontName];\n          Object.keys(preset).forEach(presetKey => {\n            if (fontDef[presetKey] === undefined) {\n              fontDef[presetKey] = preset[presetKey];\n            }\n          });\n        }\n\n        // If the theme font is defining sources, then we want to intercept that and either\n        //  fabricate a Manifest font, or if the qx.bom.webfonts.WebFont has already been\n        //  created we need to add the font face definition to the existing one\n        if (fontDef.sources) {\n          // Make sure the font family is specified in the font definition (it was previously allowable to\n          //  only specify the font family in the sources object)\n          if (\n            fontDef.sources.family &&\n            fontDef.family.indexOf(fontDef.sources.family) < 0\n          ) {\n            fontDef.family.unshift(fontDef.sources.family);\n          }\n          let family = fontDef.family[0];\n\n          // Make sure that there is a font definition\n          if (!fontDefs[family]) {\n            fontDefs[family] = {\n              fontFaces: []\n            };\n          }\n\n          // Create a lookup of the fontFaces within the font definition\n          let fontFacesLookup = {};\n          fontDefs[family].fontFaces.forEach(fontFace => {\n            let fontKey = qx.bom.webfonts.WebFontLoader.createFontLookupKey(\n              fontFace.family,\n              fontFace.fontWeight,\n              fontFace.fontStyle\n            );\n\n            fontFacesLookup[fontKey] = fontFace;\n          });\n          let fontKey = qx.bom.webfonts.WebFontLoader.createFontLookupKey(\n            fontDef.sources.family,\n            fontDef.sources.fontWeight,\n            fontDef.sources.fontStyle\n          );\n\n          if (!fontFacesLookup[fontKey]) {\n            let fontFace = {\n              fontFamily: fontDef.sources.family,\n              fontWeight: fontDef.sources.fontWeight,\n              fontStyle: fontDef.sources.fontStyle\n            };\n\n            fontDefs[family].fontFaces.push(fontFace);\n          }\n        }\n        if (fontDef.css || fontDef.fontFaces) {\n          webFontDefs.push(fontDef);\n        }\n        var fontClass = this.__getFontClass(fontDef);\n        var font = new fontClass();\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (fontDef.comparisonString) {\n          font.setComparisonString(fontDef.comparisonString);\n        }\n\n        createdFonts[fontId] = font;\n        qx.Class.getProperties(qx.bom.Font).forEach(propertyName => {\n          let value = fontDef[propertyName];\n          if (value !== undefined) {\n            font[\"set\" + qx.lang.String.firstUp(propertyName)](value);\n          }\n        });\n        createdFonts[fontId].themed = true;\n      }\n\n      // Load all of the web fonts\n      for (let webFontDef of webFontDefs) {\n        let loader = qx.bom.webfonts.WebFontLoader.getLoader(\n          webFontDef.family[0],\n          true\n        );\n\n        [\"css\", \"fontFaces\", \"comparisonString\", \"version\"].forEach(\n          propertyName => {\n            if (webFontDef[propertyName]) {\n              loader[\"set\" + qx.lang.String.firstUp(propertyName)](\n                webFontDef[propertyName]\n              );\n            }\n          }\n        );\n\n        loader.load();\n      }\n\n      // Initialise the fonts, including those that refer to the loaded web fonts\n      for (let fontId in createdFonts) {\n        let font = createdFonts[fontId];\n        font.loadComplete();\n      }\n\n      return createdFonts;\n    },\n\n    // apply method\n    _applyTheme(value) {\n      let createdFonts = (this._dynamic = {});\n\n      for (let key in createdFonts) {\n        if (createdFonts[key].themed) {\n          createdFonts[key].dispose();\n          delete createdFonts[key];\n        }\n      }\n\n      if (value) {\n        var fonts = this._manifestFonts\n          ? Object.assign(value.fonts, this._manifestFonts)\n          : value.fonts;\n        createdFonts = this.__initialiseFonts(fonts);\n      }\n\n      this._setDynamic(createdFonts);\n    },\n\n    /**\n     * Decides which Font class should be used based on the theme configuration\n     *\n     * @param config {Map} The font's configuration map\n     * @return {Class}\n     */\n    __getFontClass(config) {\n      if (config.fontFaces || config.css) {\n        return qx.bom.webfonts.WebFont;\n      }\n      return qx.bom.Font;\n    },\n\n    /**\n     * Returns the font information output by the compiler\n     * @internal subject to change\n     * @return {Object}\n     */\n    getManifestFonts() {\n      return this._manifestFonts;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeMap(\"_dynamic\");\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}