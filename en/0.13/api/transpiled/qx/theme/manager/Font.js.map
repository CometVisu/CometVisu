{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "util",
    "ValueManager",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "$$fontBootstrap",
    "_manifestFonts",
    "properties",
    "theme",
    "check",
    "nullable",
    "apply",
    "event",
    "members",
    "resolveDynamic",
    "value",
    "dynamic",
    "_dynamic",
    "bom",
    "Font",
    "resolve",
    "cache",
    "resolved",
    "getTheme",
    "fonts",
    "font",
    "__getFontClass",
    "fo",
    "comparisonString",
    "setComparisonString",
    "set",
    "isDynamic",
    "undefined",
    "__resolveInclude",
    "fontName",
    "include",
    "fontToInclude",
    "lang",
    "Object",
    "mergeWith",
    "_applyTheme",
    "dest",
    "key",
    "themed",
    "dispose",
    "source",
    "assign",
    "_setDynamic",
    "config",
    "sources",
    "webfonts",
    "WebFont",
    "destruct",
    "_disposeMap",
    "manager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/theme/manager/Font.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Manager for font themes\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @ignore(qx.$$fontBootstrap)\n */\nqx.Class.define(\"qx.theme.manager.Font\", {\n  type: \"singleton\",\n  extend: qx.util.ValueManager,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    // Grab bootstrap info\n    if (qx.$$fontBootstrap) {\n      this._manifestFonts = qx.$$fontBootstrap;\n      delete qx.$$fontBootstrap;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** the currently selected font theme */\n    theme: {\n      check: \"Theme\",\n      nullable: true,\n      apply: \"_applyTheme\",\n      event: \"changeTheme\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    _manifestFonts: null,\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {var} return the (translated) result of the incoming value\n     */\n    resolveDynamic(value) {\n      var dynamic = this._dynamic;\n      return value instanceof qx.bom.Font ? value : dynamic[value];\n    },\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value,\n     * (if available), otherwise returns the original value\n     * @param value {String} Value to resolve\n     * @return {var} either returns the (translated) result of the incoming\n     * value or the value itself\n     */\n    resolve(value) {\n      var cache = this._dynamic;\n      var resolved = cache[value];\n\n      if (resolved) {\n        return resolved;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && theme.fonts[value]) {\n        var font = this.__getFontClass(theme.fonts[value]);\n        var fo = new font();\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (theme.fonts[value].comparisonString) {\n          fo.setComparisonString(theme.fonts[value].comparisonString);\n        }\n\n        return (cache[value] = fo.set(theme.fonts[value]));\n      }\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (theme) {\n          if (!this.__warnedMissingFonts) {\n            this.__warnedMissingFonts = {};\n          }\n          if (!this.__warnedMissingFonts[value]) {\n            this.__warnedMissingFonts[value] = true;\n            this.debug(\n              `Cannot resolve a font named ${value} - available fonts are ${Object.keys(\n                theme.fonts\n              ).join(\", \")}`\n            );\n          }\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Whether a value is interpreted dynamically\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {Boolean} returns true if the value is interpreted dynamically\n     */\n    isDynamic(value) {\n      var cache = this._dynamic;\n\n      if (\n        value &&\n        (value instanceof qx.bom.Font || cache[value] !== undefined)\n      ) {\n        return true;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && value && theme.fonts[value]) {\n        var font = this.__getFontClass(theme.fonts[value]);\n        var fo = new font();\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (theme.fonts[value].comparisonString) {\n          fo.setComparisonString(theme.fonts[value].comparisonString);\n        }\n\n        cache[value] = fo.set(theme.fonts[value]);\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Checks for includes and resolves them recursively\n     *\n     * @param fonts {Map} all fonts of the theme\n     * @param fontName {String} font name to include\n     */\n    __resolveInclude(fonts, fontName) {\n      if (fonts[fontName].include) {\n        // get font infos out of the font theme\n        var fontToInclude = fonts[fonts[fontName].include];\n\n        // delete 'include' key - not part of the merge\n        fonts[fontName].include = null;\n        delete fonts[fontName].include;\n\n        fonts[fontName] = qx.lang.Object.mergeWith(\n          fonts[fontName],\n          fontToInclude,\n          false\n        );\n\n        this.__resolveInclude(fonts, fontName);\n      }\n    },\n\n    // apply method\n    _applyTheme(value) {\n      var dest = (this._dynamic = {});\n\n      for (var key in dest) {\n        if (dest[key].themed) {\n          dest[key].dispose();\n          delete dest[key];\n        }\n      }\n\n      if (value) {\n        var source = this._manifestFonts\n          ? Object.assign(value.fonts, this._manifestFonts)\n          : value.fonts;\n\n        for (var key in source) {\n          if (source[key].include && source[source[key].include]) {\n            this.__resolveInclude(source, key);\n          }\n\n          var font = this.__getFontClass(source[key]);\n          var fo = new font();\n\n          // Inject information about custom charcter set tests before we apply the\n          // complete blob in one.\n          if (source[key].comparisonString) {\n            fo.setComparisonString(source[key].comparisonString);\n          }\n\n          dest[key] = fo.set(source[key]);\n          dest[key].themed = true;\n        }\n      }\n      this._setDynamic(dest);\n    },\n\n    /**\n     * Decides which Font class should be used based on the theme configuration\n     *\n     * @param config {Map} The font's configuration map\n     * @return {Class}\n     */\n    __getFontClass(config) {\n      if (config.sources) {\n        return qx.bom.webfonts.WebFont;\n      }\n      return qx.bom.Font;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeMap(\"_dynamic\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,uBAAuB,EAAE;IACvCC,IAAI,EAAE,WAAW;IACjBC,MAAM,EAAEP,EAAE,CAACQ,IAAI,CAACC,YAAY;IAC5BC,SAAS,EAAE,CAACV,EAAE,CAACW,IAAI,CAACC,WAAW,CAAC;IAEhC;AACF;AACA;AACA;AACA;IAEEC,SAAS,uBAAG;MACV;;MAEA;MACA,IAAIb,EAAE,CAACc,eAAe,EAAE;QACtB,IAAI,CAACC,cAAc,GAAGf,EAAE,CAACc,eAAe;QACxC,OAAOd,EAAE,CAACc,eAAe;MAC3B;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEE,UAAU,EAAE;MACV;MACAC,KAAK,EAAE;QACLC,KAAK,EAAE,OAAO;QACdC,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE,aAAa;QACpBC,KAAK,EAAE;MACT;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPP,cAAc,EAAE,IAAI;MAEpB;AACJ;AACA;AACA;AACA;AACA;MACIQ,cAAc,0BAACC,KAAK,EAAE;QACpB,IAAIC,OAAO,GAAG,IAAI,CAACC,QAAQ;QAC3B,OAAOF,KAAK,YAAYxB,EAAE,CAAC2B,GAAG,CAACC,IAAI,GAAGJ,KAAK,GAAGC,OAAO,CAACD,KAAK,CAAC;MAC9D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIK,OAAO,mBAACL,KAAK,EAAE;QACb,IAAIM,KAAK,GAAG,IAAI,CAACJ,QAAQ;QACzB,IAAIK,QAAQ,GAAGD,KAAK,CAACN,KAAK,CAAC;QAE3B,IAAIO,QAAQ,EAAE;UACZ,OAAOA,QAAQ;QACjB;;QAEA;QACA;QACA;QACA;QACA,IAAId,KAAK,GAAG,IAAI,CAACe,QAAQ,EAAE;QAC3B,IAAIf,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,EAAE;UACxC,IAAIU,IAAI,GAAG,IAAI,CAACC,SAAc,CAAClB,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,CAAC;UAClD,IAAIY,EAAE,GAAG,IAAIF,IAAI,EAAE;;UAEnB;UACA;UACA,IAAIjB,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,CAACa,gBAAgB,EAAE;YACvCD,EAAE,CAACE,mBAAmB,CAACrB,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,CAACa,gBAAgB,CAAC;UAC7D;UAEA,OAAQP,KAAK,CAACN,KAAK,CAAC,GAAGY,EAAE,CAACG,GAAG,CAACtB,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,CAAC;QACnD;QAiBA,OAAOA,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIgB,SAAS,qBAAChB,KAAK,EAAE;QACf,IAAIM,KAAK,GAAG,IAAI,CAACJ,QAAQ;QAEzB,IACEF,KAAK,KACJA,KAAK,YAAYxB,EAAE,CAAC2B,GAAG,CAACC,IAAI,IAAIE,KAAK,CAACN,KAAK,CAAC,KAAKiB,SAAS,CAAC,EAC5D;UACA,OAAO,IAAI;QACb;;QAEA;QACA;QACA;QACA;QACA,IAAIxB,KAAK,GAAG,IAAI,CAACe,QAAQ,EAAE;QAC3B,IAAIf,KAAK,KAAK,IAAI,IAAIO,KAAK,IAAIP,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,EAAE;UACjD,IAAIU,IAAI,GAAG,IAAI,CAACC,SAAc,CAAClB,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,CAAC;UAClD,IAAIY,EAAE,GAAG,IAAIF,IAAI,EAAE;;UAEnB;UACA;UACA,IAAIjB,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,CAACa,gBAAgB,EAAE;YACvCD,EAAE,CAACE,mBAAmB,CAACrB,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,CAACa,gBAAgB,CAAC;UAC7D;UAEAP,KAAK,CAACN,KAAK,CAAC,GAAGY,EAAE,CAACG,GAAG,CAACtB,KAAK,CAACgB,KAAK,CAACT,KAAK,CAAC,CAAC;UACzC,OAAO,IAAI;QACb;QAEA,OAAO,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIkB,SAAgB,qBAACT,KAAK,EAAEU,QAAQ,EAAE;QAChC,IAAIV,KAAK,CAACU,QAAQ,CAAC,CAACC,OAAO,EAAE;UAC3B;UACA,IAAIC,aAAa,GAAGZ,KAAK,CAACA,KAAK,CAACU,QAAQ,CAAC,CAACC,OAAO,CAAC;;UAElD;UACAX,KAAK,CAACU,QAAQ,CAAC,CAACC,OAAO,GAAG,IAAI;UAC9B,OAAOX,KAAK,CAACU,QAAQ,CAAC,CAACC,OAAO;UAE9BX,KAAK,CAACU,QAAQ,CAAC,GAAG3C,EAAE,CAAC8C,IAAI,CAACC,MAAM,CAACC,SAAS,CACxCf,KAAK,CAACU,QAAQ,CAAC,EACfE,aAAa,EACb,KAAK,CACN;UAED,IAAI,CAACH,SAAgB,CAACT,KAAK,EAAEU,QAAQ,CAAC;QACxC;MACF,CAAC;MAED;MACAM,WAAW,uBAACzB,KAAK,EAAE;QACjB,IAAI0B,IAAI,GAAI,IAAI,CAACxB,QAAQ,GAAG,CAAC,CAAE;QAE/B,KAAK,IAAIyB,GAAG,IAAID,IAAI,EAAE;UACpB,IAAIA,IAAI,CAACC,GAAG,CAAC,CAACC,MAAM,EAAE;YACpBF,IAAI,CAACC,GAAG,CAAC,CAACE,OAAO,EAAE;YACnB,OAAOH,IAAI,CAACC,GAAG,CAAC;UAClB;QACF;QAEA,IAAI3B,KAAK,EAAE;UACT,IAAI8B,MAAM,GAAG,IAAI,CAACvC,cAAc,GAC5BgC,MAAM,CAACQ,MAAM,CAAC/B,KAAK,CAACS,KAAK,EAAE,IAAI,CAAClB,cAAc,CAAC,GAC/CS,KAAK,CAACS,KAAK;UAEf,KAAK,IAAIkB,GAAG,IAAIG,MAAM,EAAE;YACtB,IAAIA,MAAM,CAACH,GAAG,CAAC,CAACP,OAAO,IAAIU,MAAM,CAACA,MAAM,CAACH,GAAG,CAAC,CAACP,OAAO,CAAC,EAAE;cACtD,IAAI,CAACF,SAAgB,CAACY,MAAM,EAAEH,GAAG,CAAC;YACpC;YAEA,IAAIjB,IAAI,GAAG,IAAI,CAACC,SAAc,CAACmB,MAAM,CAACH,GAAG,CAAC,CAAC;YAC3C,IAAIf,EAAE,GAAG,IAAIF,IAAI,EAAE;;YAEnB;YACA;YACA,IAAIoB,MAAM,CAACH,GAAG,CAAC,CAACd,gBAAgB,EAAE;cAChCD,EAAE,CAACE,mBAAmB,CAACgB,MAAM,CAACH,GAAG,CAAC,CAACd,gBAAgB,CAAC;YACtD;YAEAa,IAAI,CAACC,GAAG,CAAC,GAAGf,EAAE,CAACG,GAAG,CAACe,MAAM,CAACH,GAAG,CAAC,CAAC;YAC/BD,IAAI,CAACC,GAAG,CAAC,CAACC,MAAM,GAAG,IAAI;UACzB;QACF;QACA,IAAI,CAACI,WAAW,CAACN,IAAI,CAAC;MACxB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIf,SAAc,qBAACsB,MAAM,EAAE;QACrB,IAAIA,MAAM,CAACC,OAAO,EAAE;UAClB,OAAO1D,EAAE,CAAC2B,GAAG,CAACgC,QAAQ,CAACC,OAAO;QAChC;QACA,OAAO5D,EAAE,CAAC2B,GAAG,CAACC,IAAI;MACpB;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEEiC,QAAQ,sBAAG;MACT,IAAI,CAACC,WAAW,CAAC,UAAU,CAAC;IAC9B;EACF,CAAC,CAAC;EAjQF9D,EAAE,CAACiB,KAAK,CAAC8C,OAAO,CAACnC,IAAI,CAACzB,aAAa,GAAGA,aAAa;AAAC"
}