{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "util",
    "ValueManager",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "$$fontBootstrap",
    "_manifestFonts",
    "properties",
    "theme",
    "check",
    "nullable",
    "apply",
    "event",
    "members",
    "resolveDynamic",
    "value",
    "dynamic",
    "_dynamic",
    "bom",
    "Font",
    "resolve",
    "cache",
    "resolved",
    "getTheme",
    "fonts",
    "createdFonts",
    "__initialiseFonts",
    "font",
    "isDynamic",
    "undefined",
    "fontClass",
    "__getFontClass",
    "comparisonString",
    "setComparisonString",
    "set",
    "__resolveInclude",
    "fontName",
    "include",
    "fontToInclude",
    "lang",
    "Object",
    "mergeWith",
    "fontDefs",
    "webFontDefs",
    "fontDef",
    "fontId",
    "preset",
    "keys",
    "forEach",
    "presetKey",
    "sources",
    "family",
    "indexOf",
    "unshift",
    "fontFaces",
    "fontFacesLookup",
    "fontFace",
    "fontKey",
    "webfonts",
    "WebFontLoader",
    "createFontLookupKey",
    "fontWeight",
    "fontStyle",
    "fontFamily",
    "push",
    "css",
    "getProperties",
    "propertyName",
    "String",
    "firstUp",
    "themed",
    "webFontDef",
    "loader",
    "getLoader",
    "load",
    "loadComplete",
    "_applyTheme",
    "key",
    "dispose",
    "assign",
    "_setDynamic",
    "config",
    "WebFont",
    "getManifestFonts",
    "destruct",
    "_disposeMap",
    "manager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/theme/manager/Font.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Manager for font themes\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @ignore(qx.$$fontBootstrap)\n */\nqx.Class.define(\"qx.theme.manager.Font\", {\n  type: \"singleton\",\n  extend: qx.util.ValueManager,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    // Grab bootstrap info\n    if (qx.$$fontBootstrap) {\n      this._manifestFonts = qx.$$fontBootstrap;\n      delete qx.$$fontBootstrap;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** the currently selected font theme */\n    theme: {\n      check: \"Theme\",\n      nullable: true,\n      apply: \"_applyTheme\",\n      event: \"changeTheme\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    _manifestFonts: null,\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {var} return the (translated) result of the incoming value\n     */\n    resolveDynamic(value) {\n      var dynamic = this._dynamic;\n      return value instanceof qx.bom.Font ? value : dynamic[value];\n    },\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value,\n     * (if available), otherwise returns the original value\n     * @param value {String} Value to resolve\n     * @return {var} either returns the (translated) result of the incoming\n     * value or the value itself\n     */\n    resolve(value) {\n      var cache = this._dynamic;\n      var resolved = cache[value];\n\n      if (resolved) {\n        return resolved;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && theme.fonts[value]) {\n        let createdFonts = this.__initialiseFonts(theme.fonts);\n        let font = createdFonts[value] || null;\n        if (font) {\n          cache[value] = font;\n        }\n        return font;\n      }\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (theme) {\n          if (!this.__warnedMissingFonts) {\n            this.__warnedMissingFonts = {};\n          }\n          if (!this.__warnedMissingFonts[value]) {\n            this.__warnedMissingFonts[value] = true;\n            this.debug(\n              `Cannot resolve a font named ${value} - available fonts are ${Object.keys(\n                theme.fonts\n              ).join(\", \")}`\n            );\n          }\n        }\n      }\n\n      return value;\n    },\n\n    /**\n     * Whether a value is interpreted dynamically\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {Boolean} returns true if the value is interpreted dynamically\n     */\n    isDynamic(value) {\n      var cache = this._dynamic;\n\n      if (\n        value &&\n        (value instanceof qx.bom.Font || cache[value] !== undefined)\n      ) {\n        return true;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && value && theme.fonts[value]) {\n        var fontClass = this.__getFontClass(theme.fonts[value]);\n        var font = new fontClass();\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (theme.fonts[value].comparisonString) {\n          font.setComparisonString(theme.fonts[value].comparisonString);\n        }\n\n        cache[value] = font.set(theme.fonts[value]);\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Checks for includes and resolves them recursively\n     *\n     * @param fonts {Map} all fonts of the theme\n     * @param fontName {String} font name to include\n     */\n    __resolveInclude(fonts, fontName) {\n      if (fonts[fontName].include) {\n        // get font infos out of the font theme\n        var fontToInclude = fonts[fonts[fontName].include];\n\n        // delete 'include' key - not part of the merge\n        fonts[fontName].include = null;\n        delete fonts[fontName].include;\n\n        fonts[fontName] = qx.lang.Object.mergeWith(\n          fonts[fontName],\n          fontToInclude,\n          false\n        );\n\n        this.__resolveInclude(fonts, fontName);\n      }\n    },\n\n    /**\n     * Initialises fonts from a set of font definitions (eg from a theme Font configuration)\n     *\n     * @param {Map<String,Object>} fontDefs indexed by font ID\n     * @return {Map<String,qx.bom.Font>} created fonts\n     */\n    __initialiseFonts(fontDefs) {\n      let webFontDefs = [];\n      let createdFonts = {};\n\n      for (var fontId in fontDefs) {\n        let fontDef = fontDefs[fontId];\n        if (fontDef.include && fontDefs[fontDef.include]) {\n          this.__resolveInclude(fontDefs, fontId);\n        }\n\n        if (fontDef.fontName) {\n          let preset = this._manifestFonts[fontDef.fontName];\n          Object.keys(preset).forEach(presetKey => {\n            if (fontDef[presetKey] === undefined) {\n              fontDef[presetKey] = preset[presetKey];\n            }\n          });\n        }\n\n        // If the theme font is defining sources, then we want to intercept that and either\n        //  fabricate a Manifest font, or if the qx.bom.webfonts.WebFont has already been\n        //  created we need to add the font face definition to the existing one\n        if (fontDef.sources) {\n          // Make sure the font family is specified in the font definition (it was previously allowable to\n          //  only specify the font family in the sources object)\n          if (\n            fontDef.sources.family &&\n            fontDef.family.indexOf(fontDef.sources.family) < 0\n          ) {\n            fontDef.family.unshift(fontDef.sources.family);\n          }\n          let family = fontDef.family[0];\n\n          // Make sure that there is a font definition\n          if (!fontDefs[family]) {\n            fontDefs[family] = {\n              fontFaces: []\n            };\n          }\n\n          // Create a lookup of the fontFaces within the font definition\n          let fontFacesLookup = {};\n          fontDefs[family].fontFaces.forEach(fontFace => {\n            let fontKey = qx.bom.webfonts.WebFontLoader.createFontLookupKey(\n              fontFace.family,\n              fontFace.fontWeight,\n              fontFace.fontStyle\n            );\n\n            fontFacesLookup[fontKey] = fontFace;\n          });\n          let fontKey = qx.bom.webfonts.WebFontLoader.createFontLookupKey(\n            fontDef.sources.family,\n            fontDef.sources.fontWeight,\n            fontDef.sources.fontStyle\n          );\n\n          if (!fontFacesLookup[fontKey]) {\n            let fontFace = {\n              fontFamily: fontDef.sources.family,\n              fontWeight: fontDef.sources.fontWeight,\n              fontStyle: fontDef.sources.fontStyle\n            };\n\n            fontDefs[family].fontFaces.push(fontFace);\n          }\n        }\n        if (fontDef.css || fontDef.fontFaces) {\n          webFontDefs.push(fontDef);\n        }\n        var fontClass = this.__getFontClass(fontDef);\n        var font = new fontClass();\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (fontDef.comparisonString) {\n          font.setComparisonString(fontDef.comparisonString);\n        }\n\n        createdFonts[fontId] = font;\n        qx.Class.getProperties(qx.bom.Font).forEach(propertyName => {\n          let value = fontDef[propertyName];\n          if (value !== undefined) {\n            font[\"set\" + qx.lang.String.firstUp(propertyName)](value);\n          }\n        });\n        createdFonts[fontId].themed = true;\n      }\n\n      // Load all of the web fonts\n      for (let webFontDef of webFontDefs) {\n        let loader = qx.bom.webfonts.WebFontLoader.getLoader(\n          webFontDef.family[0],\n          true\n        );\n\n        [\"css\", \"fontFaces\", \"comparisonString\", \"version\"].forEach(\n          propertyName => {\n            if (webFontDef[propertyName]) {\n              loader[\"set\" + qx.lang.String.firstUp(propertyName)](\n                webFontDef[propertyName]\n              );\n            }\n          }\n        );\n\n        loader.load();\n      }\n\n      // Initialise the fonts, including those that refer to the loaded web fonts\n      for (let fontId in createdFonts) {\n        let font = createdFonts[fontId];\n        font.loadComplete();\n      }\n\n      return createdFonts;\n    },\n\n    // apply method\n    _applyTheme(value) {\n      let createdFonts = (this._dynamic = {});\n\n      for (let key in createdFonts) {\n        if (createdFonts[key].themed) {\n          createdFonts[key].dispose();\n          delete createdFonts[key];\n        }\n      }\n\n      if (value) {\n        var fonts = this._manifestFonts\n          ? Object.assign(value.fonts, this._manifestFonts)\n          : value.fonts;\n        createdFonts = this.__initialiseFonts(fonts);\n      }\n\n      this._setDynamic(createdFonts);\n    },\n\n    /**\n     * Decides which Font class should be used based on the theme configuration\n     *\n     * @param config {Map} The font's configuration map\n     * @return {Class}\n     */\n    __getFontClass(config) {\n      if (config.fontFaces || config.css) {\n        return qx.bom.webfonts.WebFont;\n      }\n      return qx.bom.Font;\n    },\n\n    /**\n     * Returns the font information output by the compiler\n     * @internal subject to change\n     * @return {Object}\n     */\n    getManifestFonts() {\n      return this._manifestFonts;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeMap(\"_dynamic\");\n  }\n});\n"
  ],
  "mappings": "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"
}