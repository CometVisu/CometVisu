{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractTransport",
    "implement",
    "ITransport",
    "construct",
    "url",
    "members",
    "__tranportImpl",
    "getTransportImpl",
    "_createTransportImpl",
    "send",
    "message",
    "core",
    "Assert",
    "assertString",
    "init",
    "body",
    "fetch",
    "getEndpoint",
    "response",
    "exception",
    "Transport",
    "code",
    "ok",
    "status",
    "statusText",
    "text",
    "responseData",
    "fireDataEvent",
    "headers",
    "Accept",
    "method",
    "defer",
    "graphql",
    "Client",
    "registerTransport",
    "Fetch"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/transport/Fetch.js"
  ],
  "sourcesContent": [
    "/**\n * The implementation of a HTTP Transport using the Fetch API,\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n */\nqx.Class.define(\"qx.io.transport.Fetch\", {\n  extend: qx.io.transport.AbstractTransport,\n  implement: [qx.io.transport.ITransport],\n\n  /**\n   * Constructor.\n   *\n   * @param {String} url The URL of the http endpoint\n   */\n  construct(url) {\n    super(url);\n  },\n\n  members: {\n    /**\n     * @type {Object}\n     */\n    __tranportImpl: null,\n\n    /**\n     * Returns the object which implements the transport on the\n     * underlying level, so that transport-specific configuration\n     * can be done on it. In the case of the Fetch API, the\n     * \"implementation\" is a configuration object which will be\n     * passed to the `fetch` method as second parameter.\n     *\n     * @return {Object}\n     */\n    getTransportImpl() {\n      if (!this.__tranportImpl) {\n        this.__tranportImpl = this._createTransportImpl();\n      }\n      return this.__tranportImpl;\n    },\n\n    /**\n     * Transport the given message to the endpoint\n     *\n     * @param {String} message\n     *\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     * @ignore(fetch)\n     */\n    async send(message) {\n      qx.core.Assert.assertString(message);\n      let init = this.getTransportImpl();\n      init.body = message;\n      let response;\n      try {\n        response = await fetch(this.getEndpoint(), init);\n      } catch (e) {\n        throw new qx.io.exception.Transport(e.message, e.code);\n      }\n      if (!response.ok) {\n        switch (response.status) {\n          case 400:\n            // \"400 Bad Request\" is a really a protocol error (syntax error)\n            break;\n          default:\n            throw new qx.io.exception.Transport(\n              response.statusText,\n              response.status\n            );\n        }\n      }\n      let responseData = await response.text();\n      // notify listeners\n      this.fireDataEvent(\"message\", responseData);\n    },\n\n    /**\n     * Factory method to create a request object. In this implementation,\n     * it returns an object that will be used as the `init` parameter of the\n     * fetch method.\n     * @return {Object}\n     */\n    _createTransportImpl() {\n      let init = {};\n      init.headers = {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      };\n\n      init.method = \"POST\";\n      return init;\n    }\n  },\n\n  defer() {\n    qx.io.graphql.Client.registerTransport(/^http/, qx.io.transport.Fetch);\n  }\n});\n"
  ],
  "mappings": "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"
}