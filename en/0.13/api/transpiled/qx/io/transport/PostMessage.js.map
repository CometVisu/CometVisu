{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractTransport",
    "implement",
    "ITransport",
    "construct",
    "windowOrWorker",
    "addEventListener",
    "evt",
    "fireDataEvent",
    "data",
    "members",
    "getTransportImpl",
    "send",
    "message",
    "core",
    "Assert",
    "assertString",
    "getEndpoint",
    "postMessage",
    "_createTransportImpl",
    "PostMessage"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/transport/PostMessage.js"
  ],
  "sourcesContent": [
    "/**\n * An implementation of a PostMessage transport\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n * The transport is special isasmuch it is not used with an URI, but with the\n * target Window or Worker object with acts as the endpoint of the message.\n */\nqx.Class.define(\"qx.io.transport.PostMessage\", {\n  extend: qx.io.transport.AbstractTransport,\n  implement: [qx.io.transport.ITransport],\n\n  /**\n   * Constructor.\n   *\n   * @param {Window|Worker} windowOrWorker The target Window or Worker instance\n   * which is the endpoint for the request\n   */\n  construct(windowOrWorker) {\n    windowOrWorker.addEventListener(\"message\", evt => {\n      this.fireDataEvent(\"message\", evt.data);\n    });\n    super(windowOrWorker);\n  },\n\n  members: {\n    /**\n     * PostMessage is a very simple protocol without configuration options.\n     * No transport implementation is needed.\n     * @return {null}\n     */\n    getTransportImpl() {\n      return null;\n    },\n\n    /**\n     * Transport the given message to the endpoint\n     *\n     * @param {String} message\n     *\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     * @ignore(fetch)\n     */\n    async send(message) {\n      qx.core.Assert.assertString(message);\n      this.getEndpoint().postMessage(message);\n    },\n\n    /**\n     * Empty stub since no transport implementation is needed.\n     */\n    _createTransportImpl() {}\n  }\n});\n"
  ],
  "mappings": ";+CACA;AAAA;AAAA;AAAA;EAAA;IAAA;MAAA;QAAA;QAAA;MAAA;MAAA;QAAA;QAAA;MAAA;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EADAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,6BAA6B,EAAE;IAC7CC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,SAAS,CAACC,iBAAiB;IACzCC,SAAS,EAAE,CAACV,EAAE,CAACO,EAAE,CAACC,SAAS,CAACG,UAAU,CAAC;IAEvC;AACF;AACA;AACA;AACA;AACA;IACEC,SAAS,qBAACC,cAAc,EAAE;MAAA;MACxBA,cAAc,CAACC,gBAAgB,CAAC,SAAS,EAAE,UAAAC,GAAG,EAAI;QAChD,KAAI,CAACC,aAAa,CAAC,SAAS,EAAED,GAAG,CAACE,IAAI,CAAC;MACzC,CAAC,CAAC;MACF,yDAAMJ,cAAc;IACtB,CAAC;IAEDK,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;MACIC,gBAAgB,8BAAG;QACjB,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACUC,IAAI,gBAACC,OAAO,EAAE;QAAA;QAAA;UAAA;YAAA;cAAA;gBAClBrB,EAAE,CAACsB,IAAI,CAACC,MAAM,CAACC,YAAY,CAACH,OAAO,CAAC;gBACpC,MAAI,CAACI,WAAW,EAAE,CAACC,WAAW,CAACL,OAAO,CAAC;cAAC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAC1C,CAAC;MAED;AACJ;AACA;MACIM,oBAAoB,kCAAG,CAAC;IAC1B;EACF,CAAC,CAAC;EArDF3B,EAAE,CAACO,EAAE,CAACC,SAAS,CAACoB,WAAW,CAACzB,aAAa,GAAGA,aAAa;AAAC"
}