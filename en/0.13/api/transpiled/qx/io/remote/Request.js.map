{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/io/remote/Request.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "vUrl",
    "vMethod",
    "vResponseType",
    "__requestHeaders",
    "__urlParameters",
    "__dataParameters",
    "__formFields",
    "undefined",
    "setUrl",
    "setMethod",
    "setResponseType",
    "setProhibitCaching",
    "__seqNum",
    "io",
    "remote",
    "Request",
    "events",
    "statics",
    "methodAllowsRequestBody",
    "httpMethod",
    "properties",
    "url",
    "check",
    "init",
    "method",
    "apply",
    "asynchronous",
    "data",
    "nullable",
    "username",
    "password",
    "state",
    "event",
    "responseType",
    "timeout",
    "prohibitCaching",
    "v",
    "crossDomain",
    "fileUpload",
    "transport",
    "useBasicHttpAuth",
    "parseJson",
    "members",
    "send",
    "RequestQueue",
    "getInstance",
    "add",
    "abort",
    "reset",
    "getState",
    "error",
    "isConfigured",
    "isQueued",
    "isSending",
    "isReceiving",
    "isCompleted",
    "isAborted",
    "isTimeout",
    "isFailed",
    "__forwardEvent",
    "GlobalError",
    "observeMethod",
    "e",
    "clonedEvent",
    "clone",
    "setTarget",
    "dispatchEvent",
    "_onqueued",
    "setState",
    "_onsending",
    "_onreceiving",
    "_oncompleted",
    "dispose",
    "_onaborted",
    "_ontimeout",
    "_onfailed",
    "_applyState",
    "value",
    "old",
    "_applyProhibitCaching",
    "removeParameter",
    "removeRequestHeader",
    "getMethod",
    "setParameter",
    "Date",
    "valueOf",
    "setRequestHeader",
    "_applyMethod",
    "getProhibitCaching",
    "_applyResponseType",
    "vId",
    "vValue",
    "getRequestHeader",
    "getRequestHeaders",
    "bAsData",
    "bFromData",
    "getParameter",
    "getParameters",
    "setFormField",
    "removeFormField",
    "getFormField",
    "getFormFields",
    "getSequenceNumber",
    "destruct",
    "setTransport"
  ],
  "mappings": "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7B,eAAO,KAAK1F,SAAZ;AACD,OAtbH;;AA2bE;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIgF,MAAAA,YAAY,EAAG,sBAASO,GAAT,EAAcC,MAAd,EAAsBG,OAAtB,EACf;AACE,YAAIA,OAAJ,EACA;AACE,eAAKzF,SAAL,CAAsBqF,GAAtB,IAA6BC,MAA7B;AACD,SAHD,MAKA;AACE,eAAKvF,SAAL,CAAqBsF,GAArB,IAA4BC,MAA5B;AACD;AACF,OAneH;;AAseE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIX,MAAAA,eAAe,EAAG,yBAASU,GAAT,EAAcK,SAAd,EAClB;AACE,YAAIA,SAAJ,EACA;AACE,iBAAO,KAAK1F,SAAL,CAAsBqF,GAAtB,CAAP;AACD,SAHD,MAKA;AACE,iBAAO,KAAKtF,SAAL,CAAqBsF,GAArB,CAAP;AACD;AACF,OA5fH;;AA+fE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIM,MAAAA,YAAY,EAAG,sBAASN,GAAT,EAAcK,SAAd,EACf;AACE,YAAIA,SAAJ,EACA;AACE,iBAAO,KAAK1F,SAAL,CAAsBqF,GAAtB,KAA8B,IAArC;AACD,SAHD,MAKA;AACE,iBAAO,KAAKtF,SAAL,CAAqBsF,GAArB,KAA6B,IAApC;AACD;AACF,OAxhBH;;AA2hBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIO,MAAAA,aAAa,EAAG,uBAASF,SAAT,EAChB;AACE,eAAQA,SAAS,GAAG,KAAK1F,SAAR,GAA2B,KAAKD,SAAjD;AACD,OA1iBH;;AA+iBE;AACJ;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI8F,MAAAA,YAAY,EAAG,sBAASR,GAAT,EAAcC,MAAd,EAAsB;AACnC,aAAKrF,SAAL,CAAkBoF,GAAlB,IAAyBC,MAAzB;AACD,OApkBH;;AAukBE;AACJ;AACA;AACA;AACA;AACIQ,MAAAA,eAAe,EAAG,yBAAST,GAAT,EAAc;AAC9B,eAAO,KAAKpF,SAAL,CAAkBoF,GAAlB,CAAP;AACD,OA9kBH;;AAilBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIU,MAAAA,YAAY,EAAG,sBAASV,GAAT,EAAc;AAC3B,eAAO,KAAKpF,SAAL,CAAkBoF,GAAlB,KAA0B,IAAjC;AACD,OA1lBH;;AA6lBE;AACJ;AACA;AACA;AACA;AACA;AACA;AACIW,MAAAA,aAAa,EAAG,yBAAW;AACzB,eAAO,KAAK/F,SAAZ;AACD,OAtmBH;;AAymBE;AACJ;AACA;AACA;AACA;AACIgG,MAAAA,iBAAiB,EAAG,6BAAW;AAC7B,eAAO,KAAK1F,SAAZ;AACD;AAhnBH,KA9VF;;AAo9BE;AACF;AACA;AACA;AACA;AAEE2F,IAAAA,QAAQ,EAAG,oBACX;AACE,WAAKC,YAAL,CAAkB,IAAlB;AACA,WAAKrG,SAAL,GAAwB,KAAKC,SAAL,GAAuB,KAAKC,SAAL,GAC7C,KAAKC,SAAL,GAAoB,IADtB;AAED;AA/9BH,GADA;AA3BAlB,EAAAA,EAAE,CAACyB,EAAH,CAAMC,MAAN,CAAaC,OAAb,CAAqBxB,aAArB,GAAqCA,aAArC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n     2006 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * This class is used to send HTTP requests to the server.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.remote.Request\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.core.IDisposable ],\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param vUrl {String}\n   *   Target url to issue the request to.\n   *\n   * @param vMethod {String}\n   *   Determines http method (GET, POST, PUT, etc.) to use. See \"method\" property\n   *   for valid values and default value.\n   *\n   * @param vResponseType {String}\n   *   The mime type of the response. Default is text/plain.\n   */\n  construct : function(vUrl, vMethod, vResponseType)\n  {\n    this.base(arguments);\n\n    this.__requestHeaders = {};\n    this.__urlParameters = {};\n    this.__dataParameters = {};\n    this.__formFields = {};\n\n    if (vUrl !== undefined) {\n      this.setUrl(vUrl);\n    }\n\n    if (vMethod !== undefined) {\n      this.setMethod(vMethod);\n    }\n\n    if (vResponseType !== undefined) {\n      this.setResponseType(vResponseType);\n    }\n\n    this.setProhibitCaching(true);\n\n    // Get the next sequence number for this request\n    this.__seqNum = ++qx.io.remote.Request.__seqNum;\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events : {\n\n    /** Fired when the Request object changes its state to 'created' */\n    \"created\" : \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'configured' */\n    \"configured\" : \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'sending' */\n    \"sending\" : \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'receiving' */\n    \"receiving\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired once the request has finished successfully. The event object\n     * can be used to read the transferred data.\n     */\n    \"completed\" : \"qx.io.remote.Response\",\n\n    /** Fired when the pending request has been aborted. */\n    \"aborted\" : \"qx.event.type.Event\",\n\n    /** Fired when the pending request fails. */\n    \"failed\" : \"qx.io.remote.Response\",\n\n    /** Fired when the pending request times out. */\n    \"timeout\" : \"qx.io.remote.Response\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      SEQUENCE NUMBER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sequence (id) number of a request, used to associate a response or error\n     * with its initiating request.\n     */\n    __seqNum : 0,\n\n    /**\n     * Returns true if the given HTTP method allows a request body being transferred to the server.\n     * This is currently POST and PUT. Other methods require their data being encoded into\n     * the URL\n     *\n     * @param httpMethod {String} one of the values of the method property\n     * @return {Boolean}\n     */\n    methodAllowsRequestBody : function(httpMethod) {\n      return (httpMethod == \"POST\") || (httpMethod == \"PUT\");\n    }\n\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Target url to issue the request to.\n     */\n    url :\n    {\n      check : \"String\",\n      init : \"\"\n    },\n\n\n    /**\n     * Determines what type of request to issue (GET, POST, PUT, HEAD, DELETE).\n     */\n    method :\n    {\n      check : [ \"GET\", \"POST\", \"PUT\", \"HEAD\", \"DELETE\" ],\n      apply : \"_applyMethod\",\n      init : \"GET\"\n    },\n\n\n    /**\n     * Set the request to asynchronous.\n     */\n    asynchronous :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n\n    /**\n     * Set the data to be sent via this request\n     */\n    data :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /**\n     * Username to use for HTTP authentication.\n     * Set to NULL if HTTP authentication is not used.\n     */\n    username :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /**\n     * Password to use for HTTP authentication.\n     * Set to NULL if HTTP authentication is not used.\n     */\n    password :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /**\n     * The state that the request is in, while being processed.\n     */\n    state :\n    {\n      check : [ \"configured\", \"queued\", \"sending\", \"receiving\", \"completed\", \"aborted\", \"timeout\", \"failed\" ],\n      init : \"configured\",\n      apply : \"_applyState\",\n      event : \"changeState\"\n    },\n\n\n    /**\n     * Response type of request.\n     *\n     * The response type is a MIME type, default is text/plain. Other supported\n     * MIME types are text/javascript, text/html, application/json,\n     * application/xml.\n     */\n    responseType :\n    {\n      check : [ \"text/plain\", \"text/javascript\", \"application/json\", \"application/xml\", \"text/html\" ],\n      init : \"text/plain\",\n      apply : \"_applyResponseType\"\n    },\n\n\n    /**\n     * Number of milliseconds before the request is being timed out.\n     *\n     * If this property is null, the timeout for the request comes is the\n     * qx.io.remote.RequestQueue's property defaultTimeout.\n     */\n    timeout :\n    {\n      check : \"Integer\",\n      nullable : true\n    },\n\n\n    /**\n     * Prohibit request from being cached.\n     *\n     * Setting the value to <i>true</i> adds a parameter \"nocache\" to the\n     * request URL with a value of the current time, as well as adding request\n     * headers Pragma:no-cache and Cache-Control:no-cache.\n     *\n     * Setting the value to <i>false</i> removes the parameter and request\n     * headers.\n     *\n     * As a special case, this property may be set to the string value\n     * \"no-url-params-on-post\" which will prevent the nocache parameter from\n     * being added to the URL if the POST method is used but will still add\n     * the Pragma and Cache-Control headers.  This is useful if your backend\n     * does nasty things like mixing parameters specified in the URL into\n     * form fields in the POST request.  (One example of this nasty behavior\n     * is known as \"mixed mode\" in Oracle, as described here:\n     * http://docs.oracle.com/cd/B32110_01/web.1013/b28963/concept.htm#i1005684)\n     */\n    prohibitCaching :\n    {\n      check : function(v)\n      {\n        return typeof v == \"boolean\" || v === \"no-url-params-on-post\";\n      },\n      init : true,\n      apply : \"_applyProhibitCaching\"\n    },\n\n\n    /**\n     * Indicate that the request is cross domain.\n     *\n     * A request is cross domain if the request's URL points to a host other than\n     * the local host. This switches the concrete implementation that is used for\n     * sending the request from qx.io.remote.transport.XmlHttp to\n     * qx.io.remote.transport.Script, because only the latter can handle cross\n     * domain requests.\n     */\n    crossDomain :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * Indicate that the request will be used for a file upload.\n     *\n     * The request will be used for a file upload.  This switches the concrete\n     * implementation that is used for sending the request from\n     * qx.io.remote.transport.XmlHttp to qx.io.remote.IFrameTransport, because only\n     * the latter can handle file uploads.\n     */\n    fileUpload :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n\n    /**\n     * The transport instance used for the request.\n     *\n     * This is necessary to be able to abort an asynchronous request.\n     */\n    transport :\n    {\n      check : \"qx.io.remote.Exchange\",\n      nullable : true\n    },\n\n\n    /**\n     * Use Basic HTTP Authentication.\n     */\n    useBasicHttpAuth :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n    /**\n     * If true and the responseType property is set to \"application/json\", getContent() will\n     * return a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().\n     * If false, the raw string data will be returned and the parsing must be done manually.\n     * This is useful for special JSON dialects / extensions which are not supported by\n     * qx.lang.Json.\n     *\n     * Note that this is currently only respected by qx.io.remote.transport.XmlHttp, i. e.\n     * if the transport used is the one using XMLHttpRequests. The other transports\n     * do not support JSON parsing, so this property has no effect.\n     */\n    parseJson :\n    {\n      check : \"Boolean\",\n      init : true\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    __requestHeaders : null,\n    __urlParameters : null,\n    __dataParameters : null,\n    __formFields : null,\n    __seqNum : null,\n\n    /*\n    ---------------------------------------------------------------------------\n      CORE METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Schedule this request for transport to server.\n     *\n     * The request is added to the singleton class qx.io.remote.RequestQueue's\n     * list of pending requests.\n     *\n     */\n    send : function() {\n      qx.io.remote.RequestQueue.getInstance().add(this);\n    },\n\n\n    /**\n     * Abort sending this request.\n     *\n     * The request is removed from the singleton class qx.io.remote.RequestQueue's\n     * list of pending events. If the request haven't been scheduled this\n     * method is a noop.\n     *\n     */\n    abort : function() {\n      qx.io.remote.RequestQueue.getInstance().abort(this);\n    },\n\n\n    /**\n     * Abort sending this request if it has not already been aborted.\n     *\n     */\n    reset : function()\n    {\n      switch(this.getState())\n      {\n        case \"sending\":\n        case \"receiving\":\n          this.error(\"Aborting already sent request!\");\n\n          // no break\n\n        case \"queued\":\n          this.abort();\n          break;\n      }\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      STATE ALIASES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Determine if this request is in the configured state.\n     *\n     * @return {Boolean} <true> if the request is in the configured state; <false> otherwise.\n     */\n    isConfigured : function() {\n      return this.getState() === \"configured\";\n    },\n\n\n    /**\n     * Determine if this request is in the queued state.\n     *\n     * @return {Boolean} <true> if the request is in the queued state; <false> otherwise.\n     */\n    isQueued : function() {\n      return this.getState() === \"queued\";\n    },\n\n\n    /**\n     * Determine if this request is in the sending state.\n     *\n     * @return {Boolean} <true> if the request is in the sending state; <false> otherwise.\n     */\n    isSending : function() {\n      return this.getState() === \"sending\";\n    },\n\n\n    /**\n     * Determine if this request is in the receiving state.\n     *\n     * @return {Boolean} <true> if the request is in the receiving state; <false> otherwise.\n     */\n    isReceiving : function() {\n      return this.getState() === \"receiving\";\n    },\n\n\n    /**\n     * Determine if this request is in the completed state.\n     *\n     * @return {Boolean} <true> if the request is in the completed state; <false> otherwise.\n     */\n    isCompleted : function() {\n      return this.getState() === \"completed\";\n    },\n\n\n    /**\n     * Determine if this request is in the aborted state.\n     *\n     * @return {Boolean} <true> if the request is in the aborted state; <false> otherwise.\n     */\n    isAborted : function() {\n      return this.getState() === \"aborted\";\n    },\n\n\n    /**\n     * Determine if this request is in the timeout state.\n     *\n     * @return {Boolean} <true> if the request is in the timeout state; <false> otherwise.\n     */\n    isTimeout : function() {\n      return this.getState() === \"timeout\";\n    },\n\n\n    /**\n     * Determine if this request is in the failed state.\n     *\n     * @return {Boolean} <true> if the request is in the failed state; <false> otherwise.\n     */\n    isFailed : function() {\n      return this.getState() === \"failed\";\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Dispatches a clone of the given event on this instance\n     *\n     * @param e {qx.event.type.Event} The original event\n     */\n    __forwardEvent : qx.event.GlobalError.observeMethod(function(e)\n    {\n      var clonedEvent = e.clone();\n      clonedEvent.setTarget(this);\n      this.dispatchEvent(clonedEvent);\n    }),\n\n\n\n    /**\n     * Event handler called when the request enters the queued state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onqueued : function(e)\n    {\n      // Modify internal state\n      this.setState(\"queued\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n\n    /**\n     * Event handler called when the request enters the sending state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onsending : function(e)\n    {\n      // Modify internal state\n      this.setState(\"sending\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n\n    /**\n     * Event handler called when the request enters the receiving state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onreceiving : function(e)\n    {\n      // Modify internal state\n      this.setState(\"receiving\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n\n    /**\n     * Event handler called when the request enters the completed state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _oncompleted : function(e)\n    {\n      // Modify internal state\n      this.setState(\"completed\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n\n    /**\n     * Event handler called when the request enters the aborted state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onaborted : function(e)\n    {\n      // Modify internal state\n      this.setState(\"aborted\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n\n    /**\n     * Event handler called when the request enters the timeout state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _ontimeout : function(e)\n    {\n      /*\n        // User's handler can block until timeout.\n        switch(this.getState())\n        {\n          // If we're no longer running...\n          case \"completed\":\n          case \"timeout\":\n          case \"aborted\":\n          case \"failed\":\n            // then don't bubble up the timeout event\n            return;\n        }\n\n\n    */  // Modify internal state\n      this.setState(\"timeout\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n\n    /**\n     * Event handler called when the request enters the failed state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onfailed : function(e)\n    {\n      // Modify internal state\n      this.setState(\"failed\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyState : function(value, old)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.debug(\"State: \" + value);\n        }\n      }\n    },\n\n\n    // property apply\n    _applyProhibitCaching : function(value, old)\n    {\n      if (! value)\n      {\n        this.removeParameter(\"nocache\");\n        this.removeRequestHeader(\"Pragma\");\n        this.removeRequestHeader(\"Cache-Control\");\n        return;\n      }\n\n      // If value isn't \"no-url-params-on-post\" or this isn't a POST request\n      if (value !== \"no-url-params-on-post\" ||\n          this.getMethod() != \"POST\")\n      {\n        // ... then add a parameter to the URL to make it unique on each\n        // request.  The actual id, \"nocache\" is irrelevant; it's the fact\n        // that a (usually) different date is added to the URL on each request\n        // that prevents caching.\n        this.setParameter(\"nocache\", new Date().valueOf());\n      }\n      else\n      {\n        // Otherwise, we don't want the nocache parameter in the URL.\n        this.removeParameter(\"nocache\");\n      }\n\n      // Add the HTTP 1.0 request to avoid use of a cache\n      this.setRequestHeader(\"Pragma\", \"no-cache\");\n\n      // Add the HTTP 1.1 request to avoid use of a cache\n      this.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    },\n\n\n    // property apply\n    _applyMethod : function(value, old)\n    {\n      if (qx.io.remote.Request.methodAllowsRequestBody(value)) {\n        this.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n      } else {\n        this.removeRequestHeader(\"Content-Type\");\n      }\n\n      // Re-test the prohibit caching property.  We may need to add or remove\n      // the \"nocache\" parameter.  We explicitly call the _apply method since\n      // it wouldn't be called normally when setting the value to its already\n      // existant value.\n      var prohibitCaching = this.getProhibitCaching();\n      this._applyProhibitCaching(prohibitCaching, prohibitCaching);\n    },\n\n\n    // property apply\n    _applyResponseType : function(value, old) {\n      this.setRequestHeader(\"X-Qooxdoo-Response-Type\", value);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUEST HEADER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a request header to the request.\n     *\n     * Example: request.setRequestHeader(\"Content-Type\", \"text/html\")\n     *\n     * Please note: Some browsers, such as Safari 3 and 4, will capitalize\n     * header field names. This is in accordance with RFC 2616[1], which states\n     * that HTTP 1.1 header names are case-insensitive, so your server backend\n     * should be case-agnostic when dealing with request headers.\n     *\n     * [1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC 2616: HTTP Message Headers</a>\n     *\n     * @param vId {String} The identifier to use for this added header\n     * @param vValue {String} The value to use for this added header\n     */\n    setRequestHeader : function(vId, vValue) {\n      this.__requestHeaders[vId] = vValue;\n    },\n\n\n    /**\n     * Remove a previously-added request header\n     *\n     * @param vId {String} The id of the header to be removed\n     */\n    removeRequestHeader : function(vId) {\n      delete this.__requestHeaders[vId];\n    },\n\n\n    /**\n     * Retrieve the value of a header which was previously set\n     *\n     * @param vId {String} The id of the header value being requested\n     * @return {String} The value of the header with the specified id\n     */\n    getRequestHeader : function(vId) {\n      return this.__requestHeaders[vId] || null;\n    },\n\n\n    /**\n     * Return the object containing all of the headers which have been added.\n     *\n     * @return {Object} The returned object has as its property names each of the ids of headers\n     *     which have been added, and as each property value, the value of the\n     *     property corresponding to that id.\n     */\n    getRequestHeaders : function() {\n      return this.__requestHeaders;\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PARAMETERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a parameter to the request.\n     *\n     * @param vId {String}\n     *   String identifier of the parameter to add.\n     *\n     * @param vValue {var}\n     *   Value of parameter. May be a string (for one parameter) or an array\n     *   of strings (for setting multiple parameter values with the same\n     *   parameter name).\n     *\n     * @param bAsData {Boolean}\n     *   If <i>false</i>, add the parameter to the URL.  If <i>true</i> then\n     *   instead the parameters added by calls to this method will be combined\n     *   into a string added as the request data, as if the entire set of\n     *   parameters had been pre-build and passed to setData().\n     *\n     * Note: Parameters requested to be sent as data will be silently dropped\n     *       if data is manually added via a call to setData().\n     *\n     * Note: Some transports, e.g. Script, do not support passing parameters\n     *       as data.\n     *\n     */\n    setParameter : function(vId, vValue, bAsData)\n    {\n      if (bAsData)\n      {\n        this.__dataParameters[vId] = vValue;\n      }\n      else\n      {\n        this.__urlParameters[vId] = vValue;\n      }\n    },\n\n\n    /**\n     * Remove a parameter from the request.\n     *\n     * @param vId {String}\n     *   Identifier of the parameter to remove.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then remove the parameter of the URL parameter list.\n     *   If <i>true</i> then remove it from the list of parameters to be sent\n     *   as request data.\n     *\n     */\n    removeParameter : function(vId, bFromData)\n    {\n      if (bFromData)\n      {\n        delete this.__dataParameters[vId];\n      }\n      else\n      {\n        delete this.__urlParameters[vId];\n      }\n    },\n\n\n    /**\n     * Get a parameter in the request.\n     *\n     * @param vId {String}\n     *   Identifier of the parameter to get.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then retrieve the parameter from the URL parameter\n     *   list. If <i>true</i> then retrieve it from the list of parameters to\n     *   be sent as request data.\n     *\n     * @return {var}\n     *   The requested parameter value\n     *\n     */\n    getParameter : function(vId, bFromData)\n    {\n      if (bFromData)\n      {\n        return this.__dataParameters[vId] || null;\n      }\n      else\n      {\n        return this.__urlParameters[vId] || null;\n      }\n    },\n\n\n    /**\n     * Returns the object containing all parameters for the request.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then retrieve the URL parameter list.\n     *   If <i>true</i> then retrieve the data parameter list.\n     *\n     * @return {Object}\n     *   The returned object has as its property names each of the ids of\n     *   parameters which have been added, and as each property value, the\n     *   value of the property corresponding to that id.\n     */\n    getParameters : function(bFromData)\n    {\n      return (bFromData ? this.__dataParameters : this.__urlParameters);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      FORM FIELDS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a form field to the POST request.\n     *\n     * NOTE: Adding any programmatic form fields using this method will switch the\n     *       Transport implementation to IframeTransport.\n     *\n     * NOTE: Use of these programmatic form fields disallow use of synchronous\n     *       requests and cross-domain requests.  Be sure that you do not need\n     *       those features when setting these programmatic form fields.\n     *\n     * @param vId {String} String identifier of the form field to add.\n     * @param vValue {String} Value of form field\n     */\n    setFormField : function(vId, vValue) {\n      this.__formFields[vId] = vValue;\n    },\n\n\n    /**\n     * Remove a form field from the POST request.\n     *\n     * @param vId {String} Identifier of the form field to remove.\n     */\n    removeFormField : function(vId) {\n      delete this.__formFields[vId];\n    },\n\n\n    /**\n     * Get a form field in the POST request.\n     *\n     * @param vId {String} Identifier of the form field to get.\n     * @return {String|null} Value of form field or <code>null</code> if no value\n     *    exists for the passed identifier.\n     */\n    getFormField : function(vId) {\n      return this.__formFields[vId] || null;\n    },\n\n\n    /**\n     * Returns the object containing all form fields for the POST request.\n     *\n     * @return {Object} The returned object has as its property names each of the ids of\n     *     form fields which have been added, and as each property value, the value\n     *     of the property corresponding to that id.\n     */\n    getFormFields : function() {\n      return this.__formFields;\n    },\n\n\n    /**\n     * Obtain the sequence (id) number used for this request\n     *\n     * @return {Integer} The sequence number of this request\n     */\n    getSequenceNumber : function() {\n      return this.__seqNum;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.setTransport(null);\n    this.__requestHeaders = this.__urlParameters = this.__dataParameters =\n      this.__formFields = null;\n  }\n});\n"
  ]
}