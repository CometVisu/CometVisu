{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "vUrl",
    "vMethod",
    "vResponseType",
    "__requestHeaders",
    "__urlParameters",
    "__dataParameters",
    "__formFields",
    "undefined",
    "setUrl",
    "setMethod",
    "setResponseType",
    "setProhibitCaching",
    "__seqNum",
    "io",
    "remote",
    "Request",
    "events",
    "created",
    "configured",
    "sending",
    "receiving",
    "completed",
    "aborted",
    "failed",
    "timeout",
    "statics",
    "methodAllowsRequestBody",
    "httpMethod",
    "properties",
    "url",
    "check",
    "init",
    "method",
    "apply",
    "asynchronous",
    "data",
    "nullable",
    "username",
    "password",
    "state",
    "event",
    "responseType",
    "prohibitCaching",
    "v",
    "crossDomain",
    "fileUpload",
    "transport",
    "useBasicHttpAuth",
    "parseJson",
    "members",
    "send",
    "RequestQueue",
    "getInstance",
    "add",
    "abort",
    "reset",
    "getState",
    "error",
    "isConfigured",
    "isQueued",
    "isSending",
    "isReceiving",
    "isCompleted",
    "isAborted",
    "isTimeout",
    "isFailed",
    "__forwardEvent",
    "GlobalError",
    "observeMethod",
    "e",
    "clonedEvent",
    "clone",
    "setTarget",
    "dispatchEvent",
    "_onqueued",
    "setState",
    "_onsending",
    "_onreceiving",
    "_oncompleted",
    "dispose",
    "_onaborted",
    "_ontimeout",
    "_onfailed",
    "_applyState",
    "value",
    "old",
    "_applyProhibitCaching",
    "removeParameter",
    "removeRequestHeader",
    "getMethod",
    "setParameter",
    "Date",
    "valueOf",
    "setRequestHeader",
    "_applyMethod",
    "getProhibitCaching",
    "_applyResponseType",
    "vId",
    "vValue",
    "getRequestHeader",
    "getRequestHeaders",
    "bAsData",
    "bFromData",
    "getParameter",
    "getParameters",
    "setFormField",
    "removeFormField",
    "getFormField",
    "getFormFields",
    "getSequenceNumber",
    "destruct",
    "setTransport"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/Request.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n     2006 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * This class is used to send HTTP requests to the server.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.remote.Request\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param vUrl {String}\n   *   Target url to issue the request to.\n   *\n   * @param vMethod {String}\n   *   Determines http method (GET, POST, PUT, etc.) to use. See \"method\" property\n   *   for valid values and default value.\n   *\n   * @param vResponseType {String}\n   *   The mime type of the response. Default is text/plain.\n   */\n  construct(vUrl, vMethod, vResponseType) {\n    super();\n\n    this.__requestHeaders = {};\n    this.__urlParameters = {};\n    this.__dataParameters = {};\n    this.__formFields = {};\n\n    if (vUrl !== undefined) {\n      this.setUrl(vUrl);\n    }\n\n    if (vMethod !== undefined) {\n      this.setMethod(vMethod);\n    }\n\n    if (vResponseType !== undefined) {\n      this.setResponseType(vResponseType);\n    }\n\n    this.setProhibitCaching(true);\n\n    // Get the next sequence number for this request\n    this.__seqNum = ++qx.io.remote.Request.__seqNum;\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fired when the Request object changes its state to 'created' */\n    created: \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'configured' */\n    configured: \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'sending' */\n    sending: \"qx.event.type.Event\",\n\n    /** Fired when the Request object changes its state to 'receiving' */\n    receiving: \"qx.event.type.Event\",\n\n    /**\n     * Fired once the request has finished successfully. The event object\n     * can be used to read the transferred data.\n     */\n    completed: \"qx.io.remote.Response\",\n\n    /** Fired when the pending request has been aborted. */\n    aborted: \"qx.event.type.Event\",\n\n    /** Fired when the pending request fails. */\n    failed: \"qx.io.remote.Response\",\n\n    /** Fired when the pending request times out. */\n    timeout: \"qx.io.remote.Response\",\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      SEQUENCE NUMBER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sequence (id) number of a request, used to associate a response or error\n     * with its initiating request.\n     */\n    __seqNum: 0,\n\n    /**\n     * Returns true if the given HTTP method allows a request body being transferred to the server.\n     * This is currently POST and PUT. Other methods require their data being encoded into\n     * the URL\n     *\n     * @param httpMethod {String} one of the values of the method property\n     * @return {Boolean}\n     */\n    methodAllowsRequestBody(httpMethod) {\n      return httpMethod == \"POST\" || httpMethod == \"PUT\";\n    },\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Target url to issue the request to.\n     */\n    url: {\n      check: \"String\",\n      init: \"\",\n    },\n\n    /**\n     * Determines what type of request to issue (GET, POST, PUT, HEAD, DELETE).\n     */\n    method: {\n      check: [\"GET\", \"POST\", \"PUT\", \"HEAD\", \"DELETE\"],\n      apply: \"_applyMethod\",\n      init: \"GET\",\n    },\n\n    /**\n     * Set the request to asynchronous.\n     */\n    asynchronous: {\n      check: \"Boolean\",\n      init: true,\n    },\n\n    /**\n     * Set the data to be sent via this request\n     */\n    data: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n     * Username to use for HTTP authentication.\n     * Set to NULL if HTTP authentication is not used.\n     */\n    username: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n     * Password to use for HTTP authentication.\n     * Set to NULL if HTTP authentication is not used.\n     */\n    password: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n     * The state that the request is in, while being processed.\n     */\n    state: {\n      check: [\n        \"configured\",\n        \"queued\",\n        \"sending\",\n        \"receiving\",\n        \"completed\",\n        \"aborted\",\n        \"timeout\",\n        \"failed\",\n      ],\n      init: \"configured\",\n      apply: \"_applyState\",\n      event: \"changeState\",\n    },\n\n    /**\n     * Response type of request.\n     *\n     * The response type is a MIME type, default is text/plain. Other supported\n     * MIME types are text/javascript, text/html, application/json,\n     * application/xml.\n     */\n    responseType: {\n      check: [\n        \"text/plain\",\n        \"text/javascript\",\n        \"application/json\",\n        \"application/xml\",\n        \"text/html\",\n      ],\n      init: \"text/plain\",\n      apply: \"_applyResponseType\",\n    },\n\n    /**\n     * Number of milliseconds before the request is being timed out.\n     *\n     * If this property is null, the timeout for the request comes is the\n     * qx.io.remote.RequestQueue's property defaultTimeout.\n     */\n    timeout: {\n      check: \"Integer\",\n      nullable: true,\n    },\n\n    /**\n     * Prohibit request from being cached.\n     *\n     * Setting the value to <i>true</i> adds a parameter \"nocache\" to the\n     * request URL with a value of the current time, as well as adding request\n     * headers Pragma:no-cache and Cache-Control:no-cache.\n     *\n     * Setting the value to <i>false</i> removes the parameter and request\n     * headers.\n     *\n     * As a special case, this property may be set to the string value\n     * \"no-url-params-on-post\" which will prevent the nocache parameter from\n     * being added to the URL if the POST method is used but will still add\n     * the Pragma and Cache-Control headers.  This is useful if your backend\n     * does nasty things like mixing parameters specified in the URL into\n     * form fields in the POST request.  (One example of this nasty behavior\n     * is known as \"mixed mode\" in Oracle, as described here:\n     * http://docs.oracle.com/cd/B32110_01/web.1013/b28963/concept.htm#i1005684)\n     */\n    prohibitCaching: {\n      check(v) {\n        return typeof v == \"boolean\" || v === \"no-url-params-on-post\";\n      },\n      init: true,\n      apply: \"_applyProhibitCaching\",\n    },\n\n    /**\n     * Indicate that the request is cross domain.\n     *\n     * A request is cross domain if the request's URL points to a host other than\n     * the local host. This switches the concrete implementation that is used for\n     * sending the request from qx.io.remote.transport.XmlHttp to\n     * qx.io.remote.transport.Script, because only the latter can handle cross\n     * domain requests.\n     */\n    crossDomain: {\n      check: \"Boolean\",\n      init: false,\n    },\n\n    /**\n     * Indicate that the request will be used for a file upload.\n     *\n     * The request will be used for a file upload.  This switches the concrete\n     * implementation that is used for sending the request from\n     * qx.io.remote.transport.XmlHttp to qx.io.remote.IFrameTransport, because only\n     * the latter can handle file uploads.\n     */\n    fileUpload: {\n      check: \"Boolean\",\n      init: false,\n    },\n\n    /**\n     * The transport instance used for the request.\n     *\n     * This is necessary to be able to abort an asynchronous request.\n     */\n    transport: {\n      check: \"qx.io.remote.Exchange\",\n      nullable: true,\n    },\n\n    /**\n     * Use Basic HTTP Authentication.\n     */\n    useBasicHttpAuth: {\n      check: \"Boolean\",\n      init: false,\n    },\n\n    /**\n     * If true and the responseType property is set to \"application/json\", getContent() will\n     * return a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().\n     * If false, the raw string data will be returned and the parsing must be done manually.\n     * This is useful for special JSON dialects / extensions which are not supported by\n     * qx.lang.Json.\n     *\n     * Note that this is currently only respected by qx.io.remote.transport.XmlHttp, i. e.\n     * if the transport used is the one using XMLHttpRequests. The other transports\n     * do not support JSON parsing, so this property has no effect.\n     */\n    parseJson: {\n      check: \"Boolean\",\n      init: true,\n    },\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __requestHeaders: null,\n    __urlParameters: null,\n    __dataParameters: null,\n    __formFields: null,\n    __seqNum: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      CORE METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Schedule this request for transport to server.\n     *\n     * The request is added to the singleton class qx.io.remote.RequestQueue's\n     * list of pending requests.\n     *\n     */\n    send() {\n      qx.io.remote.RequestQueue.getInstance().add(this);\n    },\n\n    /**\n     * Abort sending this request.\n     *\n     * The request is removed from the singleton class qx.io.remote.RequestQueue's\n     * list of pending events. If the request haven't been scheduled this\n     * method is a noop.\n     *\n     */\n    abort() {\n      qx.io.remote.RequestQueue.getInstance().abort(this);\n    },\n\n    /**\n     * Abort sending this request if it has not already been aborted.\n     *\n     */\n    reset() {\n      switch (this.getState()) {\n        case \"sending\":\n        case \"receiving\":\n          this.error(\"Aborting already sent request!\");\n\n        // no break\n\n        case \"queued\":\n          this.abort();\n          break;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STATE ALIASES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Determine if this request is in the configured state.\n     *\n     * @return {Boolean} <true> if the request is in the configured state; <false> otherwise.\n     */\n    isConfigured() {\n      return this.getState() === \"configured\";\n    },\n\n    /**\n     * Determine if this request is in the queued state.\n     *\n     * @return {Boolean} <true> if the request is in the queued state; <false> otherwise.\n     */\n    isQueued() {\n      return this.getState() === \"queued\";\n    },\n\n    /**\n     * Determine if this request is in the sending state.\n     *\n     * @return {Boolean} <true> if the request is in the sending state; <false> otherwise.\n     */\n    isSending() {\n      return this.getState() === \"sending\";\n    },\n\n    /**\n     * Determine if this request is in the receiving state.\n     *\n     * @return {Boolean} <true> if the request is in the receiving state; <false> otherwise.\n     */\n    isReceiving() {\n      return this.getState() === \"receiving\";\n    },\n\n    /**\n     * Determine if this request is in the completed state.\n     *\n     * @return {Boolean} <true> if the request is in the completed state; <false> otherwise.\n     */\n    isCompleted() {\n      return this.getState() === \"completed\";\n    },\n\n    /**\n     * Determine if this request is in the aborted state.\n     *\n     * @return {Boolean} <true> if the request is in the aborted state; <false> otherwise.\n     */\n    isAborted() {\n      return this.getState() === \"aborted\";\n    },\n\n    /**\n     * Determine if this request is in the timeout state.\n     *\n     * @return {Boolean} <true> if the request is in the timeout state; <false> otherwise.\n     */\n    isTimeout() {\n      return this.getState() === \"timeout\";\n    },\n\n    /**\n     * Determine if this request is in the failed state.\n     *\n     * @return {Boolean} <true> if the request is in the failed state; <false> otherwise.\n     */\n    isFailed() {\n      return this.getState() === \"failed\";\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Dispatches a clone of the given event on this instance\n     *\n     * @param e {qx.event.type.Event} The original event\n     */\n    __forwardEvent: qx.event.GlobalError.observeMethod(function (e) {\n      var clonedEvent = e.clone();\n      clonedEvent.setTarget(this);\n      this.dispatchEvent(clonedEvent);\n    }),\n\n    /**\n     * Event handler called when the request enters the queued state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onqueued(e) {\n      // Modify internal state\n      this.setState(\"queued\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n    /**\n     * Event handler called when the request enters the sending state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onsending(e) {\n      // Modify internal state\n      this.setState(\"sending\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n    /**\n     * Event handler called when the request enters the receiving state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onreceiving(e) {\n      // Modify internal state\n      this.setState(\"receiving\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n    },\n\n    /**\n     * Event handler called when the request enters the completed state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _oncompleted(e) {\n      // Modify internal state\n      this.setState(\"completed\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n    /**\n     * Event handler called when the request enters the aborted state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onaborted(e) {\n      // Modify internal state\n      this.setState(\"aborted\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n    /**\n     * Event handler called when the request enters the timeout state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _ontimeout(e) {\n      /*\n        // User's handler can block until timeout.\n        switch(this.getState())\n        {\n          // If we're no longer running...\n          case \"completed\":\n          case \"timeout\":\n          case \"aborted\":\n          case \"failed\":\n            // then don't bubble up the timeout event\n            return;\n        }\n      */\n\n      // Modify internal state\n      this.setState(\"timeout\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n    /**\n     * Event handler called when the request enters the failed state.\n     *\n     * @param e {qx.event.type.Event} Event indicating state change\n     */\n    _onfailed(e) {\n      // Modify internal state\n      this.setState(\"failed\");\n\n      // Bubbling up\n      this.__forwardEvent(e);\n\n      // Automatically dispose after event completion\n      this.dispose();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyState(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.debug(\"State: \" + value);\n        }\n      }\n    },\n\n    // property apply\n    _applyProhibitCaching(value, old) {\n      if (!value) {\n        this.removeParameter(\"nocache\");\n        this.removeRequestHeader(\"Pragma\");\n        this.removeRequestHeader(\"Cache-Control\");\n        return;\n      }\n\n      // If value isn't \"no-url-params-on-post\" or this isn't a POST request\n      if (value !== \"no-url-params-on-post\" || this.getMethod() != \"POST\") {\n        // ... then add a parameter to the URL to make it unique on each\n        // request.  The actual id, \"nocache\" is irrelevant; it's the fact\n        // that a (usually) different date is added to the URL on each request\n        // that prevents caching.\n        this.setParameter(\"nocache\", new Date().valueOf());\n      } else {\n        // Otherwise, we don't want the nocache parameter in the URL.\n        this.removeParameter(\"nocache\");\n      }\n\n      // Add the HTTP 1.0 request to avoid use of a cache\n      this.setRequestHeader(\"Pragma\", \"no-cache\");\n\n      // Add the HTTP 1.1 request to avoid use of a cache\n      this.setRequestHeader(\"Cache-Control\", \"no-cache\");\n    },\n\n    // property apply\n    _applyMethod(value, old) {\n      if (qx.io.remote.Request.methodAllowsRequestBody(value)) {\n        this.setRequestHeader(\n          \"Content-Type\",\n          \"application/x-www-form-urlencoded\"\n        );\n      } else {\n        this.removeRequestHeader(\"Content-Type\");\n      }\n\n      // Re-test the prohibit caching property.  We may need to add or remove\n      // the \"nocache\" parameter.  We explicitly call the _apply method since\n      // it wouldn't be called normally when setting the value to its already\n      // existant value.\n      var prohibitCaching = this.getProhibitCaching();\n      this._applyProhibitCaching(prohibitCaching, prohibitCaching);\n    },\n\n    // property apply\n    _applyResponseType(value, old) {\n      this.setRequestHeader(\"X-Qooxdoo-Response-Type\", value);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUEST HEADER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a request header to the request.\n     *\n     * Example: request.setRequestHeader(\"Content-Type\", \"text/html\")\n     *\n     * Please note: Some browsers, such as Safari 3 and 4, will capitalize\n     * header field names. This is in accordance with RFC 2616[1], which states\n     * that HTTP 1.1 header names are case-insensitive, so your server backend\n     * should be case-agnostic when dealing with request headers.\n     *\n     * [1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC 2616: HTTP Message Headers</a>\n     *\n     * @param vId {String} The identifier to use for this added header\n     * @param vValue {String} The value to use for this added header\n     */\n    setRequestHeader(vId, vValue) {\n      this.__requestHeaders[vId] = vValue;\n    },\n\n    /**\n     * Remove a previously-added request header\n     *\n     * @param vId {String} The id of the header to be removed\n     */\n    removeRequestHeader(vId) {\n      delete this.__requestHeaders[vId];\n    },\n\n    /**\n     * Retrieve the value of a header which was previously set\n     *\n     * @param vId {String} The id of the header value being requested\n     * @return {String} The value of the header with the specified id\n     */\n    getRequestHeader(vId) {\n      return this.__requestHeaders[vId] || null;\n    },\n\n    /**\n     * Return the object containing all of the headers which have been added.\n     *\n     * @return {Object} The returned object has as its property names each of the ids of headers\n     *     which have been added, and as each property value, the value of the\n     *     property corresponding to that id.\n     */\n    getRequestHeaders() {\n      return this.__requestHeaders;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PARAMETERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a parameter to the request.\n     *\n     * @param vId {String}\n     *   String identifier of the parameter to add.\n     *\n     * @param vValue {var}\n     *   Value of parameter. May be a string (for one parameter) or an array\n     *   of strings (for setting multiple parameter values with the same\n     *   parameter name).\n     *\n     * @param bAsData {Boolean}\n     *   If <i>false</i>, add the parameter to the URL.  If <i>true</i> then\n     *   instead the parameters added by calls to this method will be combined\n     *   into a string added as the request data, as if the entire set of\n     *   parameters had been pre-build and passed to setData().\n     *\n     * Note: Parameters requested to be sent as data will be silently dropped\n     *       if data is manually added via a call to setData().\n     *\n     * Note: Some transports, e.g. Script, do not support passing parameters\n     *       as data.\n     *\n     */\n    setParameter(vId, vValue, bAsData) {\n      if (bAsData) {\n        this.__dataParameters[vId] = vValue;\n      } else {\n        this.__urlParameters[vId] = vValue;\n      }\n    },\n\n    /**\n     * Remove a parameter from the request.\n     *\n     * @param vId {String}\n     *   Identifier of the parameter to remove.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then remove the parameter of the URL parameter list.\n     *   If <i>true</i> then remove it from the list of parameters to be sent\n     *   as request data.\n     *\n     */\n    removeParameter(vId, bFromData) {\n      if (bFromData) {\n        delete this.__dataParameters[vId];\n      } else {\n        delete this.__urlParameters[vId];\n      }\n    },\n\n    /**\n     * Get a parameter in the request.\n     *\n     * @param vId {String}\n     *   Identifier of the parameter to get.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then retrieve the parameter from the URL parameter\n     *   list. If <i>true</i> then retrieve it from the list of parameters to\n     *   be sent as request data.\n     *\n     * @return {var}\n     *   The requested parameter value\n     *\n     */\n    getParameter(vId, bFromData) {\n      if (bFromData) {\n        return this.__dataParameters[vId] || null;\n      } else {\n        return this.__urlParameters[vId] || null;\n      }\n    },\n\n    /**\n     * Returns the object containing all parameters for the request.\n     *\n     * @param bFromData {Boolean}\n     *   If <i>false</i> then retrieve the URL parameter list.\n     *   If <i>true</i> then retrieve the data parameter list.\n     *\n     * @return {Object}\n     *   The returned object has as its property names each of the ids of\n     *   parameters which have been added, and as each property value, the\n     *   value of the property corresponding to that id.\n     */\n    getParameters(bFromData) {\n      return bFromData ? this.__dataParameters : this.__urlParameters;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      FORM FIELDS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a form field to the POST request.\n     *\n     * NOTE: Adding any programmatic form fields using this method will switch the\n     *       Transport implementation to IframeTransport.\n     *\n     * NOTE: Use of these programmatic form fields disallow use of synchronous\n     *       requests and cross-domain requests.  Be sure that you do not need\n     *       those features when setting these programmatic form fields.\n     *\n     * @param vId {String} String identifier of the form field to add.\n     * @param vValue {String} Value of form field\n     */\n    setFormField(vId, vValue) {\n      this.__formFields[vId] = vValue;\n    },\n\n    /**\n     * Remove a form field from the POST request.\n     *\n     * @param vId {String} Identifier of the form field to remove.\n     */\n    removeFormField(vId) {\n      delete this.__formFields[vId];\n    },\n\n    /**\n     * Get a form field in the POST request.\n     *\n     * @param vId {String} Identifier of the form field to get.\n     * @return {String|null} Value of form field or <code>null</code> if no value\n     *    exists for the passed identifier.\n     */\n    getFormField(vId) {\n      return this.__formFields[vId] || null;\n    },\n\n    /**\n     * Returns the object containing all form fields for the POST request.\n     *\n     * @return {Object} The returned object has as its property names each of the ids of\n     *     form fields which have been added, and as each property value, the value\n     *     of the property corresponding to that id.\n     */\n    getFormFields() {\n      return this.__formFields;\n    },\n\n    /**\n     * Obtain the sequence (id) number used for this request\n     *\n     * @return {Integer} The sequence number of this request\n     */\n    getSequenceNumber() {\n      return this.__seqNum;\n    },\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.setTransport(null);\n    this.__requestHeaders =\n      this.__urlParameters =\n      this.__dataParameters =\n      this.__formFields =\n        null;\n  },\n});\n"
  ],
  "mappings": "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"
}