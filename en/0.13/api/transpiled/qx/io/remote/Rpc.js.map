{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "url",
    "serviceName",
    "undefined",
    "setUrl",
    "setServiceName",
    "ServerSettings",
    "__currentServerSuffix",
    "serverPathSuffix",
    "events",
    "completed",
    "aborted",
    "failed",
    "timeout",
    "statics",
    "origin",
    "server",
    "application",
    "transport",
    "local",
    "localError",
    "abort",
    "nodata",
    "CONVERT_DATES",
    "RESPONSE_JSON",
    "makeServerURL",
    "instanceId",
    "retVal",
    "serverPathPrefix",
    "properties",
    "check",
    "nullable",
    "crossDomain",
    "init",
    "serverData",
    "username",
    "password",
    "useBasicHttpAuth",
    "protocol",
    "val",
    "members",
    "__previousServerSuffix",
    "createRequest",
    "io",
    "remote",
    "Request",
    "getUrl",
    "createRpcData",
    "id",
    "method",
    "parameters",
    "requestObject",
    "service",
    "getProtocol",
    "getServiceName",
    "params",
    "server_data",
    "jsonrpc",
    "_callInternal",
    "args",
    "callType",
    "refreshSession",
    "self",
    "offset",
    "whichMethod",
    "handler",
    "argsArray",
    "eventTarget",
    "i",
    "length",
    "push",
    "req",
    "getServerData",
    "rpcData",
    "getSequenceNumber",
    "setCrossDomain",
    "getCrossDomain",
    "getUsername",
    "setUseBasicHttpAuth",
    "getUseBasicHttpAuth",
    "setUsername",
    "setPassword",
    "getPassword",
    "setTimeout",
    "getTimeout",
    "ex",
    "result",
    "response",
    "handleRequestFinished",
    "eventType",
    "e",
    "error",
    "lang",
    "Json",
    "stringify",
    "fireDataEvent",
    "addToStringToObject",
    "obj",
    "toString",
    "Rpc",
    "code",
    "message",
    "ret",
    "data",
    "makeException",
    "addListener",
    "evt",
    "getStatusCode",
    "Exchange",
    "statusCodeToString",
    "debug",
    "getContent",
    "Type",
    "isObject",
    "_isConvertDates",
    "_isResponseJson",
    "parse",
    "key",
    "value",
    "indexOf",
    "m",
    "match",
    "Date",
    "UTC",
    "eval",
    "warn",
    "exTest",
    "newSuffix",
    "fixUrl",
    "replacer",
    "isDate",
    "dateParams",
    "getUTCFullYear",
    "getUTCMonth",
    "getUTCDate",
    "getUTCHours",
    "getUTCMinutes",
    "getUTCSeconds",
    "getUTCMilliseconds",
    "setData",
    "setAsynchronous",
    "setRequestHeader",
    "setParseJson",
    "send",
    "Error",
    "rpcdetails",
    "index",
    "substring",
    "callSync",
    "methodName",
    "arguments",
    "callAsync",
    "callAsyncListeners",
    "coalesce",
    "timeDiff",
    "getTime",
    "lastSessionRefresh",
    "sessionTimeoutInSeconds",
    "opaqueCallRef"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/Rpc.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n     2006 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Andreas Junghans (lucidcake)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Provides a Remote Procedure Call (RPC) implementation.\n *\n * Each instance of this class represents a \"Service\". These services can\n * correspond to various concepts on the server side (depending on the\n * programming language/environment being used), but usually, a service means\n * a class on the server.\n *\n * In case multiple instances of the same service are needed, they can be\n * distinguished by ids. If such an id is specified, the server routes all\n * calls to a service that have the same id to the same server-side instance.\n *\n * When calling a server-side method, the parameters and return values are\n * converted automatically. Supported types are int (and Integer), double\n * (and Double), String, Date, Map, and JavaBeans. Beans must have a default\n * constructor on the server side and are represented by simple JavaScript\n * objects on the client side (used as associative arrays with keys matching\n * the server-side properties). Beans can also be nested, but be careful not to\n * create circular references! There are no checks to detect these (which would\n * be expensive), so you as the user are responsible for avoiding them.\n *\n * A simple example:\n * <pre class='javascript'>\n *   function callRpcServer ()\n *   {\n *     var rpc = new qx.io.remote.Rpc();\n *     rpc.setTimeout(10000);\n *     rpc.setUrl(\"http://127.0.0.1:8007\");\n *     rpc.setServiceName(\"qooxdoo.admin\");\n *\n *     // call a remote procedure -- takes no arguments, returns a string\n *     var that = this;\n *     this.RpcRunning = rpc.callAsync(\n *       function(result, ex, id)\n *       {\n *         that.RpcRunning = null;\n *         if (ex == null) {\n *             alert(result);\n *         } else {\n *             alert(\"Async(\" + id + \") exception: \" + ex);\n *         }\n *       },\n *       \"fss.getBaseDir\");\n *   }\n * </pre>\n * __fss.getBaseDir__ is the remote procedure in this case, potential arguments\n * would be listed after the procedure name.\n * <p>\n * Passing data from the client (qooxdoo) side is demonstrated in the\n * qooxdoo-contrib project RpcExample. There are three ways to issue a remote\n * procedure call: synchronously (qx.io.remote.Rpc.callSync -- dangerous\n * because it blocks the whole browser, not just your application, so is\n * highly discouraged); async with results via a callback function\n * (qx.io.remote.Rpc.callAsync) and async with results via an event listener\n * (qx.io.remote.Rpc.callAsyncListeners).\n * <p>\n * @ignore(qx.core.ServerSettings.*)\n */\n\nqx.Class.define(\"qx.io.remote.Rpc\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param url {String}            identifies the url where the service\n   *                                is found.  Note that if the url is to\n   *                                a domain (server) other than where the\n   *                                qooxdoo script came from, i.e. it is\n   *                                cross-domain, then you must also call\n   *                                the setCrossDomain(true) method to\n   *                                enable the ScriptTransport instead of\n   *                                the XmlHttpTransport, since the latter\n   *                                can not handle cross-domain requests.\n   *\n   * @param serviceName {String}    identifies the service. For the Java\n   *                                implementation, this is the fully\n   *                                qualified name of the class that offers\n   *                                the service methods\n   *                                (e.g. \"my.pkg.MyService\").\n   */\n  construct(url, serviceName) {\n    super();\n\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    if (serviceName != null) {\n      this.setServiceName(serviceName);\n    }\n\n    if (qx.core.ServerSettings) {\n      this.__currentServerSuffix = qx.core.ServerSettings.serverPathSuffix;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when call is completed.\n     */\n    completed: \"qx.event.type.Event\",\n\n    /**\n     * Fired when call aborted.\n     */\n    aborted: \"qx.event.type.Event\",\n\n    /**\n     * Fired when call failed.\n     */\n    failed: \"qx.event.type.Event\",\n\n    /**\n     * Fired when call timed out.\n     */\n    timeout: \"qx.event.type.Event\",\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Origins of errors\n     */\n    origin: {\n      server: 1,\n      application: 2,\n      transport: 3,\n      local: 4,\n    },\n\n    /**\n     *  Locally-detected errors\n     */\n    localError: {\n      timeout: 1,\n      abort: 2,\n      nodata: 3,\n    },\n\n    /**\n     * Boolean flag which controls the stringification of date objects.\n     * <code>null</code> for the default behavior, acts like false\n     * <code>true</code> for stringifying dates the old, qooxdoo specific way\n     * <code>false</code> using the native toJSON of date objects.\n     *\n     * When enabled, dates are converted to and parsed from\n     * a literal that complies to the format\n     *\n     * <code>new Date(Date.UTC(year,month,day,hour,min,sec,ms))</code>\n     *\n     * The server can fairly easily parse this in its JSON\n     * implementation by stripping off \"new Date(Date.UTC(\"\n     * from the beginning of the string, and \"))\" from the\n     * end of the string. What remains is the set of\n     * comma-separated date components, which are also very\n     * easy to parse.\n     *\n     * The work-around compensates for the fact that while the\n     * Date object is a primitive type in Javascript, the\n     * specification neglects to provide a literal form for it.\n     */\n    CONVERT_DATES: null,\n\n    /**\n     * Boolean flag which controls whether to expect and verify a JSON\n     * response.\n     *\n     * Should be <code>true</code> when backend returns valid JSON.\n     *\n     * Date literals are parsed when CONVERT_DATES is <code>true</code>\n     * and comply to the format\n     *\n     * <code>\"new Date(Date.UTC(year,month,day,hour,min,sec,ms))\"</code>\n     *\n     * Note the surrounding quotes that encode the literal as string.\n     *\n     * Using valid JSON is recommended, because it allows to use\n     * {@link qx.lang.Json#parse} for parsing. {@link qx.lang.Json#parse}\n     * is preferred over the potentially insecure <code>eval</code>.\n     */\n    RESPONSE_JSON: null,\n\n    /**\n     * Creates an URL for talking to a local service. A local service is one that\n     * lives in the same application as the page calling the service. For backends\n     * that don't support this auto-generation, this method returns null.\n     *\n     * @param instanceId {String ? null} an optional identifier for the\n     *                                   server side instance that should be\n     *                                   used. All calls to the same service\n     *                                   with the same instance id are\n     *                                   routed to the same object instance\n     *                                   on the server. The instance id can\n     *                                   also be used to provide additional\n     *                                   data for the service instantiation\n     *                                   on the server.\n     * @return {String} the url.\n     */\n    makeServerURL(instanceId) {\n      var retVal = null;\n\n      if (qx.core.ServerSettings) {\n        retVal =\n          qx.core.ServerSettings.serverPathPrefix +\n          \"/.qxrpc\" +\n          qx.core.ServerSettings.serverPathSuffix;\n\n        if (instanceId != null) {\n          retVal += \"?instanceId=\" + instanceId;\n        }\n      }\n\n      return retVal;\n    },\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTIES\n    ---------------------------------------------------------------------------\n    */\n\n    /** The timeout for asynchronous calls in milliseconds. */\n    timeout: {\n      check: \"Integer\",\n      nullable: true,\n    },\n\n    /**\n     * Indicate that the request is cross domain.\n     *\n     * A request is cross domain if the request's URL points to a host other\n     * than the local host. This switches the concrete implementation that is\n     * used for sending the request from qx.io.remote.transport.XmlHttp to\n     * qx.io.remote.transport.Script because only the latter can handle cross\n     * domain requests.\n     */\n    crossDomain: {\n      check: \"Boolean\",\n      init: false,\n    },\n\n    /** The URL at which the service is located. */\n    url: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** The service name.  */\n    serviceName: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n     * Data sent as \"out of band\" data in the request to the server.  The\n     * format of the data is opaque to RPC and may be recognized only by\n     * particular servers It is up to the server to decide what to do with\n     * it: whether to ignore it, handle it locally before calling the\n     * specified method, or pass it on to the method.  This server data is\n     * not sent to the server if it has been set to 'null'.\n     */\n    serverData: {\n      check: \"Object\",\n      nullable: true,\n    },\n\n    /**\n     * Username to use for HTTP authentication. Null if HTTP authentication\n     * is not used.\n     */\n    username: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n     * Password to use for HTTP authentication. Null if HTTP authentication\n     * is not used.\n     */\n    password: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /**\n      Use Basic HTTP Authentication\n    */\n    useBasicHttpAuth: {\n      check: \"Boolean\",\n      nullable: true,\n    },\n\n    /**\n     *\n     * Whether to use the original qooxdoo RPC protocol or the\n     * now-standardized Version 2 protocol.  Defaults to the original qooxdoo\n     * protocol for backward compatibility.\n     *\n     * Valid values are \"qx1\" and \"2.0\".\n     */\n    protocol: {\n      init: \"2.0\",\n      check(val) {\n        return val == \"qx1\" || val == \"2.0\";\n      },\n    },\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __previousServerSuffix: null,\n    __currentServerSuffix: null,\n\n    /**\n     * Factory method to create a request object. By default, a POST request\n     * will be made, and the expected response type will be\n     * \"application/json\". Classes extending this one may override this method\n     * to obtain a Request object with different parameters.\n     *\n     * @return {qx.io.remote.Request}\n     */\n    createRequest() {\n      return new qx.io.remote.Request(\n        this.getUrl(),\n        \"POST\",\n        \"application/json\"\n      );\n    },\n\n    /**\n     * Factory method to create the object containing the remote procedure\n     * call data. By default, a qooxdoo-style RPC request is built, which\n     * contains the following members: \"service\", \"method\", \"id\", and\n     * \"params\". If a different style of RPC request is desired, a class\n     * extending this one may override this method.\n     *\n     * @param id {Integer}\n     *   The unique sequence number of this request.\n     *\n     * @param method {String}\n     *   The name of the method to be called\n     *\n     * @param parameters {Array}\n     *   An array containing the arguments to the called method.\n     *\n     * @param serverData {var}\n     *   \"Out-of-band\" data to be provided to the server.\n     *\n     * @return {Object}\n     *   The object to be converted to JSON and passed to the JSON-RPC\n     *   server.\n     */\n    createRpcData(id, method, parameters, serverData) {\n      var requestObject;\n      var service;\n\n      // Create a protocol-dependent request object\n      if (this.getProtocol() == \"qx1\") {\n        // Create a qooxdoo-modified version 1.0 rpc data object\n        requestObject = {\n          service: method == \"refreshSession\" ? null : this.getServiceName(),\n          method: method,\n          id: id,\n          params: parameters,\n        };\n\n        // Only add the server_data member if there is actually server data\n        if (serverData) {\n          requestObject.server_data = serverData;\n        }\n      } else {\n        // If there's a service name, we'll prepend it to the method name\n        service = this.getServiceName();\n        if (service && service != \"\") {\n          service += \".\";\n        } else {\n          service = \"\";\n        }\n\n        // Create a standard version 2.0 rpc data object\n        requestObject = {\n          jsonrpc: \"2.0\",\n          method: service + method,\n          id: id,\n          params: parameters,\n        };\n      }\n\n      return requestObject;\n    },\n\n    /**\n     * Internal RPC call method\n     *\n     * @lint ignoreDeprecated(eval)\n     *\n     * @param args {Array}\n     *   array of arguments\n     *\n     * @param callType {Integer}\n     *   0 = sync,\n     *   1 = async with handler,\n     *   2 = async event listeners\n     *\n     * @param refreshSession {Boolean}\n     *   whether a new session should be requested\n     *\n     * @return {var} the method call reference.\n     * @throws {Error} An error.\n     */\n    _callInternal(args, callType, refreshSession) {\n      var self = this;\n      var offset = callType == 0 ? 0 : 1;\n      var whichMethod = refreshSession ? \"refreshSession\" : args[offset];\n      var handler = args[0];\n      var argsArray = [];\n      var eventTarget = this;\n      var protocol = this.getProtocol();\n\n      for (var i = offset + 1; i < args.length; ++i) {\n        argsArray.push(args[i]);\n      }\n\n      var req = this.createRequest();\n\n      // Get any additional out-of-band data to be sent to the server\n      var serverData = this.getServerData();\n\n      // Create the request object\n      var rpcData = this.createRpcData(\n        req.getSequenceNumber(),\n        whichMethod,\n        argsArray,\n        serverData\n      );\n\n      req.setCrossDomain(this.getCrossDomain());\n\n      if (this.getUsername()) {\n        req.setUseBasicHttpAuth(this.getUseBasicHttpAuth());\n        req.setUsername(this.getUsername());\n        req.setPassword(this.getPassword());\n      }\n\n      req.setTimeout(this.getTimeout());\n      var ex = null;\n      var id = null;\n      var result = null;\n      var response = null;\n\n      var handleRequestFinished = function (eventType, eventTarget) {\n        switch (callType) {\n          case 0: // sync\n            break;\n\n          case 1: // async with handler function\n            try {\n              handler(result, ex, id);\n            } catch (e) {\n              eventTarget.error(\n                \"rpc handler threw an error:\" +\n                  \" id=\" +\n                  id +\n                  \" result=\" +\n                  qx.lang.Json.stringify(result) +\n                  \" ex=\" +\n                  qx.lang.Json.stringify(ex),\n                e\n              );\n            }\n            break;\n\n          case 2: // async with event listeners\n            // Dispatch the event to our listeners.\n            if (!ex) {\n              eventTarget.fireDataEvent(eventType, response);\n            } else {\n              // Add the id to the exception\n              ex.id = id;\n\n              if (args[0]) {\n                // coalesce\n                // They requested that we coalesce all failure types to\n                // \"failed\"\n                eventTarget.fireDataEvent(\"failed\", ex);\n              } else {\n                // No coalese so use original event type\n                eventTarget.fireDataEvent(eventType, ex);\n              }\n            }\n        }\n      };\n\n      var addToStringToObject = function (obj) {\n        if (protocol == \"qx1\") {\n          obj.toString = function () {\n            switch (obj.origin) {\n              case qx.io.remote.Rpc.origin.server:\n                return \"Server error \" + obj.code + \": \" + obj.message;\n\n              case qx.io.remote.Rpc.origin.application:\n                return \"Application error \" + obj.code + \": \" + obj.message;\n\n              case qx.io.remote.Rpc.origin.transport:\n                return \"Transport error \" + obj.code + \": \" + obj.message;\n\n              case qx.io.remote.Rpc.origin.local:\n                return \"Local error \" + obj.code + \": \" + obj.message;\n\n              default:\n                return (\n                  \"UNEXPECTED origin \" +\n                  obj.origin +\n                  \" error \" +\n                  obj.code +\n                  \": \" +\n                  obj.message\n                );\n            }\n          };\n        }\n        // protocol == \"2.0\"\n        else {\n          obj.toString = function () {\n            var ret;\n\n            ret = \"Error \" + obj.code + \": \" + obj.message;\n            if (obj.data) {\n              ret += \" (\" + obj.data + \")\";\n            }\n\n            return ret;\n          };\n        }\n      };\n\n      var makeException = function (origin, code, message) {\n        var ex = {};\n        if (protocol == \"qx1\") {\n          ex.origin = origin;\n        }\n        ex.code = code;\n        ex.message = message;\n        addToStringToObject(ex);\n        return ex;\n      };\n\n      req.addListener(\"failed\", function (evt) {\n        var code = evt.getStatusCode();\n        ex = makeException(\n          qx.io.remote.Rpc.origin.transport,\n          code,\n          qx.io.remote.Exchange.statusCodeToString(code)\n        );\n        id = this.getSequenceNumber();\n        handleRequestFinished(\"failed\", eventTarget);\n      });\n\n      req.addListener(\"timeout\", function (evt) {\n        this.debug(\"TIMEOUT OCCURRED\");\n        ex = makeException(\n          qx.io.remote.Rpc.origin.local,\n          qx.io.remote.Rpc.localError.timeout,\n          \"Local time-out expired for \" + whichMethod\n        );\n        id = this.getSequenceNumber();\n        handleRequestFinished(\"timeout\", eventTarget);\n      });\n\n      req.addListener(\"aborted\", function (evt) {\n        ex = makeException(\n          qx.io.remote.Rpc.origin.local,\n          qx.io.remote.Rpc.localError.abort,\n          \"Aborted \" + whichMethod\n        );\n        id = this.getSequenceNumber();\n        handleRequestFinished(\"aborted\", eventTarget);\n      });\n\n      req.addListener(\"completed\", function (evt) {\n        response = evt.getContent();\n\n        // server may have reset, giving us no data on our requests\n        if (response === null) {\n          ex = makeException(\n            qx.io.remote.Rpc.origin.local,\n            qx.io.remote.Rpc.localError.nodata,\n            \"No data in response to \" + whichMethod\n          );\n          id = this.getSequenceNumber();\n          handleRequestFinished(\"failed\", eventTarget);\n          return;\n        }\n\n        // Parse. Skip when response is already an object\n        // because the script transport was used.\n        if (!qx.lang.Type.isObject(response)) {\n          // Handle converted dates\n          if (self._isConvertDates()) {\n            // Parse as JSON and revive date literals\n            if (self._isResponseJson()) {\n              response = qx.lang.Json.parse(response, function (key, value) {\n                if (value && typeof value === \"string\") {\n                  if (value.indexOf(\"new Date(Date.UTC(\") >= 0) {\n                    var m = value.match(\n                      /new Date\\(Date.UTC\\((\\d+),(\\d+),(\\d+),(\\d+),(\\d+),(\\d+),(\\d+)\\)\\)/\n                    );\n                    return new Date(\n                      Date.UTC(m[1], m[2], m[3], m[4], m[5], m[6], m[7])\n                    );\n                  }\n                }\n                return value;\n              });\n\n              // Eval\n            } else {\n              response =\n                response && response.length > 0\n                  ? eval(\"(\" + response + \")\")\n                  : null;\n            }\n\n            // No special date handling required, JSON assumed\n          } else {\n            response = qx.lang.Json.parse(response);\n          }\n        }\n\n        id = response[\"id\"];\n\n        if (id != this.getSequenceNumber()) {\n          this.warn(\n            \"Received id (\" +\n              id +\n              \") does not match requested id \" +\n              \"(\" +\n              this.getSequenceNumber() +\n              \")!\"\n          );\n        }\n\n        // Determine if an error was returned. Assume no error, initially.\n        var eventType = \"completed\";\n        var exTest = response[\"error\"];\n\n        if (exTest != null) {\n          // There was an error\n          result = null;\n          addToStringToObject(exTest);\n          ex = exTest;\n\n          // Change the event type\n          eventType = \"failed\";\n        } else {\n          result = response[\"result\"];\n\n          if (refreshSession) {\n            result = eval(\"(\" + result + \")\");\n            var newSuffix = qx.core.ServerSettings.serverPathSuffix;\n\n            if (self.__currentServerSuffix != newSuffix) {\n              self.__previousServerSuffix = self.__currentServerSuffix;\n              self.__currentServerSuffix = newSuffix;\n            }\n\n            self.setUrl(self.fixUrl(self.getUrl()));\n          }\n        }\n\n        handleRequestFinished(eventType, eventTarget);\n      });\n\n      // Provide a replacer when convert dates is enabled\n      var replacer = null;\n      if (this._isConvertDates()) {\n        replacer = function (key, value) {\n          // The value passed in is of type string, because the Date's\n          // toJson gets applied before. Get value from containing object.\n          value = this[key];\n\n          if (qx.lang.Type.isDate(value)) {\n            var dateParams =\n              value.getUTCFullYear() +\n              \",\" +\n              value.getUTCMonth() +\n              \",\" +\n              value.getUTCDate() +\n              \",\" +\n              value.getUTCHours() +\n              \",\" +\n              value.getUTCMinutes() +\n              \",\" +\n              value.getUTCSeconds() +\n              \",\" +\n              value.getUTCMilliseconds();\n            return \"new Date(Date.UTC(\" + dateParams + \"))\";\n          }\n          return value;\n        };\n      }\n\n      req.setData(qx.lang.Json.stringify(rpcData, replacer));\n      req.setAsynchronous(callType > 0);\n\n      if (req.getCrossDomain()) {\n        // Our choice here has no effect anyway.  This is purely informational.\n        req.setRequestHeader(\n          \"Content-Type\",\n          \"application/x-www-form-urlencoded\"\n        );\n      } else {\n        // When not cross-domain, set type to text/json\n        req.setRequestHeader(\"Content-Type\", \"application/json\");\n      }\n\n      // Do not parse as JSON. Later done conditionally.\n      req.setParseJson(false);\n\n      req.send();\n\n      if (callType == 0) {\n        if (ex != null) {\n          var error = new Error(ex.toString());\n          error.rpcdetails = ex;\n          throw error;\n        }\n\n        return result;\n      } else {\n        return req;\n      }\n    },\n\n    /**\n     * Helper method to rewrite a URL with a stale session id (so that it includes\n     * the correct session id afterwards).\n     *\n     * @param url {String} the URL to examine.\n     * @return {String} the (possibly re-written) URL.\n     */\n    fixUrl(url) {\n      if (\n        this.__previousServerSuffix == null ||\n        this.__currentServerSuffix == null ||\n        this.__previousServerSuffix == \"\" ||\n        this.__previousServerSuffix == this.__currentServerSuffix\n      ) {\n        return url;\n      }\n\n      var index = url.indexOf(this.__previousServerSuffix);\n\n      if (index == -1) {\n        return url;\n      }\n\n      return (\n        url.substring(0, index) +\n        this.__currentServerSuffix +\n        url.substring(index + this.__previousServerSuffix.length)\n      );\n    },\n\n    /**\n     * Makes a synchronous server call. The method arguments (if any) follow\n     * after the method name (as normal JavaScript arguments, separated by\n     * commas, not as an array).\n     *\n     * If a problem occurs when making the call, an exception is thrown.\n     *\n     *\n     * WARNING.  With some browsers, the synchronous interface\n     * causes the browser to hang while awaiting a response!  If the server\n     * decides to pause for a minute or two, your browser may do nothing\n     * (including refreshing following window changes) until the response is\n     * received.  Instead, use the asynchronous interface.\n     *\n     *\n     * YOU HAVE BEEN WARNED.\n     *\n     *\n     * @param methodName {String} the name of the method to call.\n     * @param args {Array} an array of values passed through to the backend.\n     * @return {var} the result returned by the server.\n     */\n    callSync(methodName, args) {\n      return this._callInternal(arguments, 0);\n    },\n\n    /**\n     * Makes an asynchronous server call. The method arguments (if any) follow\n     * after the method name (as normal JavaScript arguments, separated by\n     * commas, not as an array).\n     *\n     * When an answer from the server arrives, the <code>handler</code>\n     * function is called with the result of the call as the first, an\n     * exception as the second parameter, and the id (aka sequence number) of\n     * the invoking request as the third parameter. If the call was\n     * successful, the second parameter is <code>null</code>. If there was a\n     * problem, the second parameter contains an exception, and the first one\n     * is <code>null</code>.\n     *\n     *\n     * The return value of this method is a call reference that you can store\n     * if you want to abort the request later on. This value should be treated\n     * as opaque and can change completely in the future! The only thing you\n     * can rely on is that the <code>abort</code> method will accept this\n     * reference and that you can retrieve the sequence number of the request\n     * by invoking the getSequenceNumber() method (see below).\n     *\n     *\n     * If a specific method is being called, asynchronously, a number of times\n     * in succession, the getSequenceNumber() method may be used to\n     * disambiguate which request a response corresponds to.  The sequence\n     * number value is a value which increments with each request.)\n     *\n     *\n     * @param handler {Function} the callback function.\n     * @param methodName {String} the name of the method to call.\n     * @param args {Array} an array of values passed through to the backend.\n     * @return {var} the method call reference.\n     */\n    callAsync(handler, methodName, args) {\n      return this._callInternal(arguments, 1);\n    },\n\n    /**\n     * Makes an asynchronous server call and dispatches an event upon completion\n     * or failure. The method arguments (if any) follow after the method name\n     * (as normal JavaScript arguments, separated by commas, not as an array).\n     *\n     * When an answer from the server arrives (or fails to arrive on time), if\n     * an exception occurred, a \"failed\", \"timeout\" or \"aborted\" event, as\n     * appropriate, is dispatched to any waiting event listeners.  If no\n     * exception occurred, a \"completed\" event is dispatched.\n     *\n     *\n     * When a \"failed\", \"timeout\" or \"aborted\" event is dispatched, the event\n     * data contains an object with the properties 'origin', 'code', 'message'\n     * and 'id'.  The object has a toString() function which may be called to\n     * convert the exception to a string.\n     *\n     *\n     * When a \"completed\" event is dispatched, the event data contains a\n     * map with the JSON-RPC sequence number and result:\n     * <p>\n     * {\n     *   id: rpc_id,\n     *   result: json-rpc result\n     * }\n     *\n     *\n     * The return value of this method is a call reference that you can store\n     * if you want to abort the request later on. This value should be treated\n     * as opaque and can change completely in the future! The only thing you\n     * can rely on is that the <code>abort</code> method will accept this\n     * reference and that you can retrieve the sequence number of the request\n     * by invoking the getSequenceNumber() method (see below).\n     *\n     *\n     * If a specific method is being called, asynchronously, a number of times\n     * in succession, the getSequenceNumber() method may be used to\n     * disambiguate which request a response corresponds to.  The sequence\n     * number value is a value which increments with each request.)\n     *\n     *\n     * @param coalesce {Boolean} coalesce all failure types (\"failed\",\n     *                           \"timeout\", and \"aborted\") to \"failed\".\n     *                           This is reasonable in many cases, as\n     *                           the provided exception contains adequate\n     *                           disambiguating information.\n     * @param methodName {String} the name of the method to call.\n     * @param args {Array} an array of values passed through to the backend.\n     * @return {var} the method call reference.\n     */\n    callAsyncListeners(coalesce, methodName, args) {\n      return this._callInternal(arguments, 2);\n    },\n\n    /**\n     * Refreshes a server session by retrieving the session id again from the\n     * server.\n     *\n     * The specified handler function is called when the refresh is\n     * complete. The first parameter can be <code>true</code> (indicating that\n     * a refresh either wasn't necessary at this time or it was successful) or\n     * <code>false</code> (indicating that a refresh would have been necessary\n     * but can't be performed because the server backend doesn't support\n     * it). If there is a non-null second parameter, it's an exception\n     * indicating that there was an error when refreshing the session.\n     *\n     *\n     * @param handler {Function} a callback function that is called when the\n     *                           refresh is complete (or failed).\n     */\n    refreshSession(handler) {\n      if (qx.core.ServerSettings && qx.core.ServerSettings.serverPathSuffix) {\n        var timeDiff =\n          new Date().getTime() - qx.core.ServerSettings.lastSessionRefresh;\n\n        if (\n          timeDiff / 1000 >\n          qx.core.ServerSettings.sessionTimeoutInSeconds - 30\n        ) {\n          // this.info(\"refreshing session\");\n          this._callInternal([handler], 1, true);\n        } else {\n          handler(true); // session refresh was OK (in this case: not needed)\n        }\n      } else {\n        handler(false); // no refresh possible, but would be necessary\n      }\n    },\n\n    /**\n     * Whether to convert date objects to pseudo literals and\n     * parse with eval.\n     *\n     * Controlled by {@link #CONVERT_DATES}.\n     *\n     * @return {Boolean} Whether to convert.\n     */\n    _isConvertDates() {\n      return !!qx.io.remote.Rpc.CONVERT_DATES;\n    },\n\n    /**\n     * Whether to expect and verify a JSON response.\n     *\n     * Controlled by {@link #RESPONSE_JSON}.\n     *\n     * @return {Boolean} Whether to expect JSON.\n     */\n    _isResponseJson() {\n      return !!qx.io.remote.Rpc.RESPONSE_JSON;\n    },\n\n    /**\n     * Aborts an asynchronous server call. Consequently, the callback function\n     * provided to <code>callAsync</code> or <code>callAsyncListeners</code>\n     * will be called with an exception.\n     *\n     * @param opaqueCallRef {var} the call reference as returned by\n     *                            <code>callAsync</code> or\n     *                            <code>callAsyncListeners</code>\n     */\n    abort(opaqueCallRef) {\n      opaqueCallRef.abort();\n    },\n  },\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kBAAhB,EAAoC;IAClCC,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADkB;;IAGlC;AACF;AACA;AACA;AACA;;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SA1BkC,qBA0BxBC,GA1BwB,EA0BnBC,WA1BmB,EA0BN;MAC1B;;MAEA,IAAID,GAAG,KAAKE,SAAZ,EAAuB;QACrB,KAAKC,MAAL,CAAYH,GAAZ;MACD;;MAED,IAAIC,WAAW,IAAI,IAAnB,EAAyB;QACvB,KAAKG,cAAL,CAAoBH,WAApB;MACD;;MAED,IAAIX,EAAE,CAACO,IAAH,CAAQQ,cAAZ,EAA4B;QAC1B,KAAKC,SAAL,GAA6BhB,EAAE,CAACO,IAAH,CAAQQ,cAAR,CAAuBE,gBAApD;MACD;IACF,CAxCiC;;IA0ClC;AACF;AACA;AACA;AACA;IAEEC,MAAM,EAAE;MACN;AACJ;AACA;MACIC,SAAS,EAAE,qBAJL;;MAMN;AACJ;AACA;MACIC,OAAO,EAAE,qBATH;;MAWN;AACJ;AACA;MACIC,MAAM,EAAE,qBAdF;;MAgBN;AACJ;AACA;MACIC,OAAO,EAAE;IAnBH,CAhD0B;;IAsElC;AACF;AA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"
}