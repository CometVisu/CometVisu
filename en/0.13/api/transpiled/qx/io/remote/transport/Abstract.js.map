{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/io/remote/transport/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "setRequestHeaders",
    "setParameters",
    "setFormFields",
    "events",
    "properties",
    "url",
    "check",
    "nullable",
    "method",
    "init",
    "asynchronous",
    "data",
    "username",
    "password",
    "state",
    "event",
    "apply",
    "requestHeaders",
    "parameters",
    "formFields",
    "responseType",
    "useBasicHttpAuth",
    "members",
    "send",
    "Error",
    "abort",
    "setState",
    "timeout",
    "failed",
    "setRequestHeader",
    "vLabel",
    "vValue",
    "getResponseHeader",
    "getResponseHeaders",
    "getStatusCode",
    "getStatusText",
    "getResponseText",
    "getResponseXml",
    "getFetchedLength",
    "_applyState",
    "value",
    "old",
    "fireEvent",
    "destruct",
    "io",
    "remote",
    "transport",
    "Abstract"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Abstract for all transport implementations\n */\nqx.Class.define(\"qx.io.remote.transport.Abstract\",\n{\n  type : \"abstract\",\n  extend : qx.core.Object,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.setRequestHeaders({});\n    this.setParameters({});\n    this.setFormFields({});\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events : {\n    /** Event when a request is created */\n    \"created\" : \"qx.event.type.Event\",\n\n    /** Event when a request is configured */\n    \"configured\" : \"qx.event.type.Event\",\n\n    /** Event when a request is send */\n    \"sending\" : \"qx.event.type.Event\",\n\n    /** Event when a request is received */\n    \"receiving\" : \"qx.event.type.Event\",\n\n    /** Event when a request is completed */\n    \"completed\" : \"qx.event.type.Event\",\n\n    /** Event when a request is aborted */\n    \"aborted\" : \"qx.event.type.Event\",\n\n    /** Event when a request has failed */\n    \"failed\" : \"qx.event.type.Event\",\n\n    /** Event when a request has timed out */\n    \"timeout\" : \"qx.event.type.Event\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Target url to issue the request to */\n    url :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /** Determines what type of request to issue */\n    method :\n    {\n      check : \"String\",\n      nullable : true,\n      init : \"GET\"\n    },\n\n\n    /** Set the request to asynchronous */\n    asynchronous :\n    {\n      check : \"Boolean\",\n      nullable : true,\n      init : true\n    },\n\n\n    /** Set the data to be sent via this request */\n    data :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /** Username to use for HTTP authentication */\n    username :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /** Password to use for HTTP authentication */\n    password :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /** The state of the current request */\n    state :\n    {\n      check : [ \"created\", \"configured\", \"sending\", \"receiving\", \"completed\", \"aborted\", \"timeout\", \"failed\" ],\n      init : \"created\",\n      event : \"changeState\",\n      apply : \"_applyState\"\n    },\n\n\n    /** Request headers */\n    requestHeaders :\n    {\n      check : \"Object\",\n      nullable : true\n    },\n\n\n    /** Request parameters to send. */\n    parameters :\n    {\n      check : \"Object\",\n      nullable : true\n    },\n\n\n    /** Request form fields to send. */\n    formFields :\n    {\n      check : \"Object\",\n      nullable : true\n    },\n\n\n    /** Response Type */\n    responseType :\n    {\n      check : \"String\",\n      nullable : true\n    },\n\n\n    /** Use Basic HTTP Authentication */\n    useBasicHttpAuth :\n    {\n      check : \"Boolean\",\n      nullable : true\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sending a request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @throws {Error} the abstract function warning.\n     */\n    send : function() {\n      throw new Error(\"send is abstract\");\n    },\n\n\n    /**\n     * Force the transport into the aborted state (\"aborted\").\n     *\n     * Listeners of the \"aborted\" signal are notified about the event.\n     *\n     */\n    abort : function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Aborting...\");\n        }\n      }\n\n      this.setState(\"aborted\");\n    },\n\n\n    /**\n     * Force the transport into the timeout state (\"timeout\").\n     *\n     * Listeners of the \"timeout\" signal are notified about the event.\n     *\n     */\n    timeout : function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Timeout...\");\n        }\n      }\n\n      this.setState(\"timeout\");\n    },\n\n\n    /**\n     * Force the transport into the failed state (\"failed\").\n     *\n     * Listeners of the \"failed\" signal are notified about the event.\n     *\n     */\n    failed : function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Failed...\");\n        }\n      }\n\n      this.setState(\"failed\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUEST HEADER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a request header to this transports qx.io.remote.Request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @param vLabel {String} Request header name\n     * @param vValue {var} Value for the header\n     * @throws {Error} the abstract function warning.\n     */\n    setRequestHeader : function(vLabel, vValue) {\n      throw new Error(\"setRequestHeader is abstract\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE HEADER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the request header of the request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @param vLabel {String} Response header name\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseHeader : function(vLabel) {\n      throw new Error(\"getResponseHeader is abstract\");\n    },\n\n\n    /**\n     * Provides an hash of all response headers.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseHeaders : function() {\n      throw new Error(\"getResponseHeaders is abstract\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      STATUS SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the current status code of the request if available or -1 if not.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Integer}\n     * @throws {Error} the abstract function warning.\n     */\n    getStatusCode : function() {\n      throw new Error(\"getStatusCode is abstract\");\n    },\n\n\n    /**\n     * Provides the status text for the current request if available and null otherwise.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {String}\n     * @throws {Error} the abstract function warning.\n     */\n    getStatusText : function() {\n      throw new Error(\"getStatusText is abstract\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE DATA SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Provides the response text from the request when available and null otherwise.\n     * By passing true as the \"partial\" parameter of this method, incomplete data will\n     * be made available to the caller.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {String}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseText : function() {\n      throw new Error(\"getResponseText is abstract\");\n    },\n\n\n    /**\n     * Provides the XML provided by the response if any and null otherwise.\n     * By passing true as the \"partial\" parameter of this method, incomplete data will\n     * be made available to the caller.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseXml : function() {\n      throw new Error(\"getResponseXml is abstract\");\n    },\n\n\n    /**\n     * Returns the length of the content as fetched thus far.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Integer}\n     * @throws {Error} the abstract function warning.\n     */\n    getFetchedLength : function() {\n      throw new Error(\"getFetchedLength is abstract\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply method for \"state\" property. For each state value a corresponding\n     * event is fired to inform the listeners.\n     *\n     * @param value {var} Current value\n     * @param old {var} Previous value\n     */\n    _applyState : function(value, old)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.debug(\"State: \" + value);\n        }\n      }\n\n      switch(value)\n      {\n        case \"created\":\n          this.fireEvent(\"created\");\n          break;\n\n        case \"configured\":\n          this.fireEvent(\"configured\");\n          break;\n\n        case \"sending\":\n          this.fireEvent(\"sending\");\n          break;\n\n        case \"receiving\":\n          this.fireEvent(\"receiving\");\n          break;\n\n        case \"completed\":\n          this.fireEvent(\"completed\");\n          break;\n\n        case \"aborted\":\n          this.fireEvent(\"aborted\");\n          break;\n\n        case \"failed\":\n          this.fireEvent(\"failed\");\n          break;\n\n        case \"timeout\":\n          this.fireEvent(\"timeout\");\n          break;\n      }\n\n      return true;\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.setRequestHeaders(null);\n    this.setParameters(null);\n    this.setFormFields(null);\n  }\n});\n"
  ]
}