{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "setRequestHeaders",
    "setParameters",
    "setFormFields",
    "events",
    "created",
    "configured",
    "sending",
    "receiving",
    "completed",
    "aborted",
    "failed",
    "timeout",
    "properties",
    "url",
    "check",
    "nullable",
    "method",
    "init",
    "asynchronous",
    "data",
    "username",
    "password",
    "state",
    "event",
    "apply",
    "requestHeaders",
    "parameters",
    "formFields",
    "responseType",
    "useBasicHttpAuth",
    "members",
    "send",
    "Error",
    "abort",
    "setState",
    "setRequestHeader",
    "vLabel",
    "vValue",
    "getResponseHeader",
    "getResponseHeaders",
    "getStatusCode",
    "getStatusText",
    "getResponseText",
    "getResponseXml",
    "getFetchedLength",
    "_applyState",
    "value",
    "old",
    "fireEvent",
    "destruct",
    "io",
    "remote",
    "transport",
    "Abstract"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/transport/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Abstract for all transport implementations\n */\nqx.Class.define(\"qx.io.remote.transport.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this.setRequestHeaders({});\n    this.setParameters({});\n    this.setFormFields({});\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Event when a request is created */\n    created: \"qx.event.type.Event\",\n\n    /** Event when a request is configured */\n    configured: \"qx.event.type.Event\",\n\n    /** Event when a request is send */\n    sending: \"qx.event.type.Event\",\n\n    /** Event when a request is received */\n    receiving: \"qx.event.type.Event\",\n\n    /** Event when a request is completed */\n    completed: \"qx.event.type.Event\",\n\n    /** Event when a request is aborted */\n    aborted: \"qx.event.type.Event\",\n\n    /** Event when a request has failed */\n    failed: \"qx.event.type.Event\",\n\n    /** Event when a request has timed out */\n    timeout: \"qx.event.type.Event\",\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** Target url to issue the request to */\n    url: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** Determines what type of request to issue */\n    method: {\n      check: \"String\",\n      nullable: true,\n      init: \"GET\",\n    },\n\n    /** Set the request to asynchronous */\n    asynchronous: {\n      check: \"Boolean\",\n      nullable: true,\n      init: true,\n    },\n\n    /** Set the data to be sent via this request */\n    data: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** Username to use for HTTP authentication */\n    username: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** Password to use for HTTP authentication */\n    password: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** The state of the current request */\n    state: {\n      check: [\n        \"created\",\n        \"configured\",\n        \"sending\",\n        \"receiving\",\n        \"completed\",\n        \"aborted\",\n        \"timeout\",\n        \"failed\",\n      ],\n      init: \"created\",\n      event: \"changeState\",\n      apply: \"_applyState\",\n    },\n\n    /** Request headers */\n    requestHeaders: {\n      check: \"Object\",\n      nullable: true,\n    },\n\n    /** Request parameters to send. */\n    parameters: {\n      check: \"Object\",\n      nullable: true,\n    },\n\n    /** Request form fields to send. */\n    formFields: {\n      check: \"Object\",\n      nullable: true,\n    },\n\n    /** Response Type */\n    responseType: {\n      check: \"String\",\n      nullable: true,\n    },\n\n    /** Use Basic HTTP Authentication */\n    useBasicHttpAuth: {\n      check: \"Boolean\",\n      nullable: true,\n    },\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sending a request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @throws {Error} the abstract function warning.\n     */\n    send() {\n      throw new Error(\"send is abstract\");\n    },\n\n    /**\n     * Force the transport into the aborted state (\"aborted\").\n     *\n     * Listeners of the \"aborted\" signal are notified about the event.\n     *\n     */\n    abort() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Aborting...\");\n        }\n      }\n\n      this.setState(\"aborted\");\n    },\n\n    /**\n     * Force the transport into the timeout state (\"timeout\").\n     *\n     * Listeners of the \"timeout\" signal are notified about the event.\n     *\n     */\n    timeout() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Timeout...\");\n        }\n      }\n\n      this.setState(\"timeout\");\n    },\n\n    /**\n     * Force the transport into the failed state (\"failed\").\n     *\n     * Listeners of the \"failed\" signal are notified about the event.\n     *\n     */\n    failed() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.warn(\"Failed...\");\n        }\n      }\n\n      this.setState(\"failed\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      REQUEST HEADER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a request header to this transports qx.io.remote.Request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @param vLabel {String} Request header name\n     * @param vValue {var} Value for the header\n     * @throws {Error} the abstract function warning.\n     */\n    setRequestHeader(vLabel, vValue) {\n      throw new Error(\"setRequestHeader is abstract\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE HEADER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the request header of the request.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @param vLabel {String} Response header name\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseHeader(vLabel) {\n      throw new Error(\"getResponseHeader is abstract\");\n    },\n\n    /**\n     * Provides an hash of all response headers.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseHeaders() {\n      throw new Error(\"getResponseHeaders is abstract\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STATUS SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the current status code of the request if available or -1 if not.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Integer}\n     * @throws {Error} the abstract function warning.\n     */\n    getStatusCode() {\n      throw new Error(\"getStatusCode is abstract\");\n    },\n\n    /**\n     * Provides the status text for the current request if available and null otherwise.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {String}\n     * @throws {Error} the abstract function warning.\n     */\n    getStatusText() {\n      throw new Error(\"getStatusText is abstract\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE DATA SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Provides the response text from the request when available and null otherwise.\n     * By passing true as the \"partial\" parameter of this method, incomplete data will\n     * be made available to the caller.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {String}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseText() {\n      throw new Error(\"getResponseText is abstract\");\n    },\n\n    /**\n     * Provides the XML provided by the response if any and null otherwise.\n     * By passing true as the \"partial\" parameter of this method, incomplete data will\n     * be made available to the caller.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Object}\n     * @throws {Error} the abstract function warning.\n     */\n    getResponseXml() {\n      throw new Error(\"getResponseXml is abstract\");\n    },\n\n    /**\n     * Returns the length of the content as fetched thus far.\n     *\n     * This method is virtual and concrete subclasses are supposed to\n     * implement it.\n     *\n     * @abstract\n     * @return {Integer}\n     * @throws {Error} the abstract function warning.\n     */\n    getFetchedLength() {\n      throw new Error(\"getFetchedLength is abstract\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply method for \"state\" property. For each state value a corresponding\n     * event is fired to inform the listeners.\n     *\n     * @param value {var} Current value\n     * @param old {var} Previous value\n     */\n    _applyState(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.io.remote\")) {\n          this.debug(\"State: \" + value);\n        }\n      }\n\n      switch (value) {\n        case \"created\":\n          this.fireEvent(\"created\");\n          break;\n\n        case \"configured\":\n          this.fireEvent(\"configured\");\n          break;\n\n        case \"sending\":\n          this.fireEvent(\"sending\");\n          break;\n\n        case \"receiving\":\n          this.fireEvent(\"receiving\");\n          break;\n\n        case \"completed\":\n          this.fireEvent(\"completed\");\n          break;\n\n        case \"aborted\":\n          this.fireEvent(\"aborted\");\n          break;\n\n        case \"failed\":\n          this.fireEvent(\"failed\");\n          break;\n\n        case \"timeout\":\n          this.fireEvent(\"timeout\");\n          break;\n      }\n\n      return true;\n    },\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.setRequestHeaders(null);\n    this.setParameters(null);\n    this.setFormFields(null);\n  },\n});\n"
  ],
  "mappings": "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BAA8B,CAAC;MACjD,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIM,iBAAiB,6BAACF,MAAM,EAAE;QACxB,MAAM,IAAIJ,KAAK,CAAC,+BAA+B,CAAC;MAClD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIO,kBAAkB,gCAAG;QACnB,MAAM,IAAIP,KAAK,CAAC,gCAAgC,CAAC;MACnD,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIQ,aAAa,2BAAG;QACd,MAAM,IAAIR,KAAK,CAAC,2BAA2B,CAAC;MAC9C,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIS,aAAa,2BAAG;QACd,MAAM,IAAIT,KAAK,CAAC,2BAA2B,CAAC;MAC9C,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIU,eAAe,6BAAG;QAChB,MAAM,IAAIV,KAAK,CAAC,6BAA6B,CAAC;MAChD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIW,cAAc,4BAAG;QACf,MAAM,IAAIX,KAAK,CAAC,4BAA4B,CAAC;MAC/C,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIY,gBAAgB,8BAAG;QACjB,MAAM,IAAIZ,KAAK,CAAC,8BAA8B,CAAC;MACjD,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;MACIa,WAAW,uBAACC,KAAK,EAAEC,GAAG,EAAE;QAOtB,QAAQD,KAAK;UACX,KAAK,SAAS;YACZ,IAAI,CAACE,SAAS,CAAC,SAAS,CAAC;YACzB;UAEF,KAAK,YAAY;YACf,IAAI,CAACA,SAAS,CAAC,YAAY,CAAC;YAC5B;UAEF,KAAK,SAAS;YACZ,IAAI,CAACA,SAAS,CAAC,SAAS,CAAC;YACzB;UAEF,KAAK,WAAW;YACd,IAAI,CAACA,SAAS,CAAC,WAAW,CAAC;YAC3B;UAEF,KAAK,WAAW;YACd,IAAI,CAACA,SAAS,CAAC,WAAW,CAAC;YAC3B;UAEF,KAAK,SAAS;YACZ,IAAI,CAACA,SAAS,CAAC,SAAS,CAAC;YACzB;UAEF,KAAK,QAAQ;YACX,IAAI,CAACA,SAAS,CAAC,QAAQ,CAAC;YACxB;UAEF,KAAK,SAAS;YACZ,IAAI,CAACA,SAAS,CAAC,SAAS,CAAC;YACzB;QAAM;QAGV,OAAO,IAAI;MACb;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEEC,QAAQ,sBAAG;MACT,IAAI,CAACjD,iBAAiB,CAAC,IAAI,CAAC;MAC5B,IAAI,CAACC,aAAa,CAAC,IAAI,CAAC;MACxB,IAAI,CAACC,aAAa,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,CAAC;EAlcFb,EAAE,CAAC6D,EAAE,CAACC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAAC7D,aAAa,GAAGA,aAAa;AAAC"
}