{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Event",
    "properties",
    "state",
    "check",
    "nullable",
    "statusCode",
    "content",
    "responseHeaders",
    "apply",
    "members",
    "__lowerHeaders",
    "clone",
    "embryo",
    "io",
    "remote",
    "Response",
    "superclass",
    "prototype",
    "call",
    "setType",
    "getType",
    "setState",
    "getState",
    "setStatusCode",
    "getStatusCode",
    "setContent",
    "getContent",
    "setResponseHeaders",
    "getResponseHeaders",
    "getResponseHeader",
    "vHeader",
    "toLowerCase",
    "_applyResponseHeaders",
    "value",
    "old",
    "lowerHeaders",
    "Object",
    "keys",
    "forEach",
    "key"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/io/remote/Response.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * This class is used to work with the result of a HTTP request.\n */\nqx.Class.define(\"qx.io.remote.Response\", {\n  extend: qx.event.type.Event,\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTIES\n    ---------------------------------------------------------------------------\n    */\n\n    /** State of the response. */\n    state: {\n      check: \"Integer\",\n      nullable: true,\n    },\n\n    /** Status code of the response. */\n    statusCode: {\n      check: \"Integer\",\n      nullable: true,\n    },\n\n    /** Content of the response. */\n    content: {\n      nullable: true,\n    },\n\n    /** The headers of the response. */\n    responseHeaders: {\n      check: \"Object\",\n      nullable: true,\n      apply: \"_applyResponseHeaders\",\n    },\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __lowerHeaders: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    clone(embryo) {\n      var clone = super.clone(embryo);\n      clone.setType(this.getType());\n      clone.setState(this.getState());\n      clone.setStatusCode(this.getStatusCode());\n      clone.setContent(this.getContent());\n      clone.setResponseHeaders(this.getResponseHeaders());\n      return clone;\n    },\n\n    /**\n     * Returns a specific response header\n     * @param vHeader {String} Response header name\n     * @return {Object | null} The header value or null;\n     */\n    getResponseHeader(vHeader) {\n      if (this.__lowerHeaders) {\n        return this.__lowerHeaders[vHeader.toLowerCase()] || null;\n      }\n\n      return null;\n    },\n\n    /**\n     * Keep lower-cased shadow of response headers for later\n     * case-insensitive matching.\n     *\n     * @param value {var} Current value\n     * @param old {var} Previous value\n     */\n    _applyResponseHeaders(value, old) {\n      var lowerHeaders = {};\n\n      if (value !== null) {\n        Object.keys(value).forEach(function (key) {\n          lowerHeaders[key.toLowerCase()] = value[key];\n        });\n        this.__lowerHeaders = lowerHeaders;\n      }\n    },\n  },\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,uBAAuB,EAAE;IACvCC,MAAM,EAAEN,EAAE,CAACO,KAAK,CAACC,IAAI,CAACC,KAAK;IAE3B;AACF;AACA;AACA;AACA;;IAEEC,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;;MAEI;MACAC,KAAK,EAAE;QACLC,KAAK,EAAE,SAAS;QAChBC,QAAQ,EAAE;MACZ,CAAC;MAED;MACAC,UAAU,EAAE;QACVF,KAAK,EAAE,SAAS;QAChBC,QAAQ,EAAE;MACZ,CAAC;MAED;MACAE,OAAO,EAAE;QACPF,QAAQ,EAAE;MACZ,CAAC;MAED;MACAG,eAAe,EAAE;QACfJ,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,IAAI;QACdI,KAAK,EAAE;MACT;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPC,SAAc,EAAE,IAAI;MAEpB;AACJ;AACA;AACA;AACA;MAEI;MACAC,KAAK,WAALA,KAAKA,CAACC,MAAM,EAAE;QACZ,IAAID,KAAK,GAAApB,EAAA,CAAAsB,EAAA,CAAAC,MAAA,CAAAC,QAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAN,KAAA,CAAAO,IAAA,OAAeN,MAAM,CAAC;QAC/BD,KAAK,CAACQ,OAAO,CAAC,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC;QAC7BT,KAAK,CAACU,QAAQ,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;QAC/BX,KAAK,CAACY,aAAa,CAAC,IAAI,CAACC,aAAa,CAAC,CAAC,CAAC;QACzCb,KAAK,CAACc,UAAU,CAAC,IAAI,CAACC,UAAU,CAAC,CAAC,CAAC;QACnCf,KAAK,CAACgB,kBAAkB,CAAC,IAAI,CAACC,kBAAkB,CAAC,CAAC,CAAC;QACnD,OAAOjB,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIkB,iBAAiB,WAAjBA,iBAAiBA,CAACC,OAAO,EAAE;QACzB,IAAI,IAAI,CAACpB,SAAc,EAAE;UACvB,OAAO,IAAI,CAACA,SAAc,CAACoB,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI;QAC3D;QAEA,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,qBAAqB,WAArBA,qBAAqBA,CAACC,KAAK,EAAEC,GAAG,EAAE;QAChC,IAAIC,YAAY,GAAG,CAAC,CAAC;QAErB,IAAIF,KAAK,KAAK,IAAI,EAAE;UAClBG,MAAM,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,OAAO,CAAC,UAAUC,GAAG,EAAE;YACxCJ,YAAY,CAACI,GAAG,CAACR,WAAW,CAAC,CAAC,CAAC,GAAGE,KAAK,CAACM,GAAG,CAAC;UAC9C,CAAC,CAAC;UACF,IAAI,CAAC7B,SAAc,GAAGyB,YAAY;QACpC;MACF;IACF;EACF,CAAC,CAAC;EAxHF5C,EAAE,CAACsB,EAAE,CAACC,MAAM,CAACC,QAAQ,CAACrB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}