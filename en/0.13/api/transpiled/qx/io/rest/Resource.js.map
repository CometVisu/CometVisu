{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "description",
    "__longPollHandlers",
    "__pollTimers",
    "__routes",
    "_resource",
    "_tailorResource",
    "_getResource",
    "__mapFromDescription",
    "e",
    "dispose",
    "events",
    "success",
    "actionSuccess",
    "error",
    "actionError",
    "statics",
    "POLL_THROTTLE_LIMIT",
    "POLL_THROTTLE_COUNT",
    "REQUIRED",
    "placeholdersFromUrl",
    "url",
    "bom",
    "rest",
    "Resource",
    "members",
    "resource",
    "setRequestFactory",
    "_getRequest",
    "setRequestHandler",
    "onsuccess",
    "callback",
    "req",
    "action",
    "props",
    "getResponse",
    "getPhase",
    "fireEvent",
    "event",
    "type",
    "Rest",
    "context",
    "onfail",
    "onloadend",
    "configureRequest",
    "io",
    "request",
    "Xhr",
    "map",
    "method",
    "check",
    "__addAction",
    "undefined",
    "Error",
    "__declareEvent",
    "lang",
    "Function",
    "bind",
    "Array",
    "prototype",
    "unshift",
    "call",
    "arguments",
    "invoke",
    "apply",
    "params",
    "data",
    "setBaseUrl",
    "baseUrl",
    "abort",
    "varargs",
    "refresh",
    "poll",
    "interval",
    "immediately",
    "intervalListener",
    "reqs",
    "getRequestsByAction",
    "isDone",
    "isDisposed",
    "timer",
    "Timer",
    "addListener",
    "start",
    "longPoll",
    "res",
    "lastResponse",
    "immediateResponseCount",
    "throttle",
    "isImmediateResponse",
    "Date",
    "_getThrottleLimit",
    "_getThrottleCount",
    "handlerId",
    "longPollHandler",
    "_getRequestConfig",
    "keys",
    "forEach",
    "route",
    "constructor",
    "$$events",
    "destruct",
    "stop",
    "id",
    "removeListenerById"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/rest/Resource.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Client-side wrapper of a REST resource.\n *\n * Each instance represents a resource in terms of REST. A number of actions\n * (usually HTTP methods) unique to the resource can be defined and invoked.\n * A resource with its actions is configured declaratively by passing a resource\n * description to the constructor, or programmatically using {@link #map}.\n *\n * Each action is associated to a route. A route is a combination of method,\n * URL pattern and optional parameter constraints.\n *\n * An action is invoked by calling a method with the same name. When a URL\n * pattern of a route contains positional parameters, those parameters must be\n * passed when invoking the associated action. Also, constraints defined in the\n * route must be satisfied.\n *\n * When an action is invoked, a request is configured according to the associated\n * route, is passed the URL parameters, request body data, and finally send.\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\n *\n * No constraints on the action's name or the scope of the URLs are imposed. However,\n * if you want to follow RESTful design patterns it is recommended to name actions\n * the same as the HTTP action.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\" },\n *  \"put\": { method: \"PUT\", url: \"/photo/{id}\"},\n *  \"post\": { method: \"POST\", url: \"/photos/\"}\n * };\n * var photo = new qx.io.rest.Resource(description);\n * // Can also be written: photo.invoke(\"get\", {id: 1});\n * photo.get({id: 1});\n *\n * // Additionally sets request data (provide it as string or set the content type)\n * // In a RESTful environment this creates a new resource with the given 'id'\n * photo.configureRequest(function(req) {\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\n * });\n * photo.put({id: 1}, {title: \"Monkey\"});\n *\n * // Additionally sets request data (provide it as string or set the content type)\n * // In a RESTful environment this adds a new resource to the resource collection 'photos'\n * photo.configureRequest(function(req) {\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\n * });\n * photo.post(null, {title: \"Monkey\"});\n * </pre>\n *\n * To check for existence of URL parameters or constrain them to a certain format, you\n * can add a <code>check</code> property to the description. See {@link #map} for details.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\", check: { id: /\\d+/ } }\n * };\n * var photo = new qx.io.rest.Resource(description);\n * // photo.get({id: \"FAIL\"});\n * // -- Error: \"Parameter 'id' is invalid\"\n * </pre>\n *\n * If your description happens to use the same action more than once, consider\n * defining another resource.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photos\"},\n * };\n * // Distinguish \"photo\" (singular) and \"photos\" (plural) resource\n * var photos = new qx.io.rest.Resource(description);\n * photos.get();\n * </pre>\n *\n * Basically, all routes of a resource should point to the same URL (resource in\n * terms of HTTP). One acceptable exception of this constraint are resources where\n * required parameters are part of the URL (<code>/photos/1/</code>) or filter\n * resources. For instance:\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photos/{tag}\" }\n * };\n * var photos = new qx.io.rest.Resource(description);\n * photos.get();\n * photos.get({tag: \"wildlife\"})\n * </pre>\n *\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\n * and could therefore just as well mapped to two distinct resources (for instance,\n * named photos and photosTagged). What style to choose depends on the kind of data\n * returned. For instance, it seems sensible to stick with one resource if the filter\n * only limits the result set (i.e. the individual results have the same properties).\n *\n * In order to respond to successful (or erroneous) invocations of actions,\n * either listen to the generic \"success\" or \"error\" event and get the action\n * from the event data, or listen to action specific events defined at runtime.\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.rest.Resource\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param description {Map?} Each key of the map is interpreted as\n   *  <code>action</code> name. The value associated to the key must be a map\n   *  with the properties <code>method</code> and <code>url</code>.\n   *  <code>check</code> is optional. Also see {@link #map}.\n   *\n   * For example:\n   *\n   * <pre class=\"javascript\">\n   * { get: {method: \"GET\", url: \"/photos/{id}\", check: { id: /\\d+/ }} }\n   * </pre>\n   *\n   * @see qx.bom.rest\n   * @see qx.io.rest\n   */\n  construct(description) {\n    super();\n\n    this.__longPollHandlers = {};\n    this.__pollTimers = {};\n    this.__routes = {};\n\n    this._resource = this._tailorResource(this._getResource());\n\n    try {\n      if (typeof description !== \"undefined\") {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertMap(description);\n        }\n        this.__mapFromDescription(description);\n      }\n    } catch (e) {\n      this.dispose();\n      throw e;\n    }\n  },\n\n  events: {\n    /**\n     * Fired when any request was successful.\n     *\n     * The action the successful request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Success\", e.g. \"indexSuccess\".\n     */\n    success: \"qx.event.type.Rest\",\n\n    /**\n     * Fired when request associated to action given in prefix was successful.\n     *\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\n     * successful.\n     */\n    actionSuccess: \"qx.event.type.Rest\",\n\n    /**\n     * Fired when any request fails.\n     *\n     * The action the failed request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Error\", e.g. \"indexError\".\n     */\n    error: \"qx.event.type.Rest\",\n\n    /**\n     * Fired when any request associated to action given in prefix fails.\n     *\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\n     */\n    actionError: \"qx.event.type.Rest\"\n  },\n\n  statics: {\n    /**\n     * Number of milliseconds below a long-poll request is considered immediate and\n     * subject to throttling checks.\n     */\n    POLL_THROTTLE_LIMIT: 100,\n\n    /**\n     * Number of immediate long-poll responses accepted before throttling takes place.\n     */\n    POLL_THROTTLE_COUNT: 30,\n\n    /**\n     * A symbol used in checks to declare required parameter.\n     */\n    REQUIRED: true,\n\n    /**\n     * Get placeholders from URL.\n     *\n     * @param url {String} The URL to parse for placeholders.\n     * @return {Array} Array of placeholders without the placeholder prefix.\n     */\n    placeholdersFromUrl(url) {\n      return qx.bom.rest.Resource.placeholdersFromUrl(url);\n    }\n  },\n\n  members: {\n    _resource: null,\n    __longPollHandlers: null,\n    __pollTimers: null,\n    __routes: null,\n\n    /**\n     * Get resource.\n     *\n     * May be overridden to change type of resource.\n     * @param description {Map?} See construct.\n     * @return {qx.bom.rest.Resource} Resource implementation which does the heavy lifting.\n     */\n    _getResource(description) {\n      return new qx.bom.rest.Resource(description);\n    },\n\n    /**\n     * Tailors (apply dependency injection) the given resource to fit our needs.\n     *\n     * @param resource {qx.bom.rest.Resource} Resource.\n     * @return {qx.bom.rest.Resource} Tailored resource.\n     */\n    _tailorResource(resource) {\n      // inject different request implementation\n      resource.setRequestFactory(this._getRequest);\n\n      // inject different request handling\n      resource.setRequestHandler({\n        onsuccess: {\n          callback(req, action) {\n            return function () {\n              var props = [\n                req.getResponse(),\n                null,\n                false,\n                req,\n                action,\n                req.getPhase()\n              ];\n\n              this.fireEvent(action + \"Success\", qx.event.type.Rest, props);\n              this.fireEvent(\"success\", qx.event.type.Rest, props);\n            };\n          },\n          context: this\n        },\n\n        onfail: {\n          callback(req, action) {\n            return function () {\n              var props = [\n                req.getResponse(),\n                null,\n                false,\n                req,\n                action,\n                req.getPhase()\n              ];\n\n              this.fireEvent(action + \"Error\", qx.event.type.Rest, props);\n              this.fireEvent(\"error\", qx.event.type.Rest, props);\n            };\n          },\n          context: this\n        },\n\n        onloadend: {\n          callback(req, action) {\n            return function () {\n              req.dispose();\n            };\n          },\n          context: this\n        }\n      });\n\n      return resource;\n    },\n\n    //\n    // Request\n    //\n\n    /**\n     * Configure request.\n     *\n     * @param callback {Function} Function called before request is send.\n     *   Receives request, action, params and data.\n     *\n     * <pre class=\"javascript\">\n     * res.configureRequest(function(req, action, params, data) {\n     *   if (action === \"index\") {\n     *     req.setAccept(\"application/json\");\n     *   }\n     * });\n     * </pre>\n     */\n    configureRequest(callback) {\n      this._resource.configureRequest(callback);\n    },\n\n    /**\n     * Get request.\n     *\n     * May be overridden to change type of request.\n     * @return {qx.io.request.Xhr} Xhr object\n     */\n    _getRequest() {\n      return new qx.io.request.Xhr();\n    },\n\n    //\n    // Routes and actions\n    //\n\n    /**\n     * Map action to combination of method and URL pattern.\n     *\n     * <pre class=\"javascript\">\n     *   res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\n     *\n     *   // GET /photos/123\n     *   res.get({id: \"123\"});\n     * </pre>\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    map(action, method, url, check) {\n      // add dynamic methods also on ourself to allow 'invoke()' delegation\n      this.__addAction(action, method, url, check);\n\n      this._resource.map(action, method, url, check);\n    },\n\n    /**\n     * Map actions to members.\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    __addAction(action, method, url, check) {\n      this.__routes[action] = [method, url, check];\n\n      // Undefine generic getter when action is named \"get\"\n      if (action == \"get\") {\n        this[action] = undefined;\n      }\n\n      // Do not overwrite existing \"non-action\" methods unless the method is\n      // null (i.e. because it exists as a stub for documentation)\n      if (\n        typeof this[action] !== \"undefined\" &&\n        this[action] !== null &&\n        this[action].action !== true\n      ) {\n        throw new Error(\n          \"Method with name of action (\" + action + \") already exists\"\n        );\n      }\n\n      this.__declareEvent(action + \"Success\");\n      this.__declareEvent(action + \"Error\");\n\n      this[action] = qx.lang.Function.bind(function () {\n        Array.prototype.unshift.call(arguments, action);\n        return this.invoke.apply(this, arguments);\n      }, this);\n\n      // Method is safe to overwrite\n      this[action].action = true;\n    },\n\n    /**\n     * Invoke action with parameters.\n     *\n     * Internally called by actions dynamically created.\n     *\n     * May be overridden to customize action and parameter handling.\n     *\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\n     *\n     * @param action {String} Action to invoke.\n     * @param params {Map} Map of parameters inserted into URL when a matching\n     *  positional parameter is found.\n     * @param data {Map|String} Data to be send as part of the request.\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\n     * @return {Number} Id of the action's invocation.\n     */\n    invoke(action, params, data) {\n      var params = params == null ? {} : params;\n\n      // Cache parameters\n      this.__routes[action].params = params;\n\n      return this._resource.invoke(action, params, data);\n    },\n\n    /**\n     * Set base URL.\n     *\n     * The base URL is prepended to the URLs given in the description.\n     * Changes affect all future invocations.\n     *\n     * @param baseUrl {String} Base URL.\n     */\n    setBaseUrl(baseUrl) {\n      this._resource.setBaseUrl(baseUrl);\n    },\n\n    /**\n     * Abort action.\n     *\n     * Example:\n     *\n     * <pre class=\"javascript\">\n     *   // Abort all invocations of action\n     *   res.get({id: 1});\n     *   res.get({id: 2});\n     *   res.abort(\"get\");\n     *\n     *   // Abort specific invocation of action (by id)\n     *   var actionId = res.get({id: 1});\n     *   res.abort(actionId);\n     * </pre>\n     *\n     * @param varargs {String|Number} Action of which all invocations to abort\n     *  (when string), or a single invocation of an action to abort (when number)\n     */\n    abort(varargs) {\n      this._resource.abort(varargs);\n    },\n\n    /**\n     * Resend request associated to action.\n     *\n     * Replays parameters given when action was invoked originally.\n     *\n     * @param action {String} Action to refresh.\n     */\n    refresh(action) {\n      this._resource.refresh(action);\n    },\n\n    /**\n     * Periodically invoke action.\n     *\n     * Replays parameters given when action was invoked originally. When the\n     * action was not yet invoked and requires parameters, parameters must be\n     * given.\n     *\n     * Please note that IE tends to cache overly aggressive. One work-around is\n     * to disable caching on the client side by configuring the request with\n     * <code>setCache(false)</code>. If you control the server, a better\n     * work-around is to include appropriate headers to explicitly control\n     * caching. This way you still avoid requests that can be correctly answered\n     * from cache (e.g. when nothing has changed since the last poll). Please\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\n     * XMLHttpRequest Caching Test</a> for available options.\n     *\n     * @lint ignoreUnused(intervalListener)\n     *\n     * @param action {String} Action to poll.\n     * @param interval {Number} Interval in ms.\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\n     *   invoke a call immediately.\n     * @return {qx.event.Timer} Timer that periodically invokes action. Use to\n     *   stop or resume. Is automatically disposed on disposal of object.\n     */\n    poll(action, interval, params, immediately) {\n      // Dispose timer previously created for action\n      if (this.__pollTimers[action]) {\n        this.__pollTimers[action].dispose();\n      }\n\n      // Fallback to previous params\n      if (typeof params == \"undefined\") {\n        params = this.__routes[action].params;\n      }\n\n      // Invoke immediately\n      if (immediately) {\n        this.invoke(action, params);\n      }\n\n      var intervalListener = function () {\n        var reqs = this.getRequestsByAction(action),\n          req = reqs ? reqs[0] : null;\n\n        if (!immediately && !req) {\n          this.invoke(action, params);\n          return;\n        }\n        if (req && (req.isDone() || req.isDisposed())) {\n          this.refresh(action);\n        }\n      };\n\n      var timer = (this.__pollTimers[action] = new qx.event.Timer(interval));\n      timer.addListener(\"interval\", intervalListener, this._resource);\n      timer.start();\n      return timer;\n    },\n\n    /**\n     * Long-poll action.\n     *\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\n     * server signals new data. The server determines when new data is available,\n     * while the client keeps open a request. Requires configuration on the\n     * server side. Basically, the server must not close a connection until\n     * new data is available. For a high level introduction to long-polling,\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\n     * Ajax with long polling</a>.\n     *\n     * Uses {@link #refresh} internally. Make sure you understand the\n     * implications of IE's tendency to cache overly aggressive.\n     *\n     * Note no interval is given on the client side.\n     *\n     * @lint ignoreUnused(longPollHandler)\n     *\n     * @param action {String} Action to poll.\n     * @return {String} Id of handler responsible for long-polling. To stop\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\n     */\n    longPoll(action) {\n      var res = this,\n        lastResponse, // Keep track of last response\n        immediateResponseCount = 0; // Count immediate responses\n\n      // Throttle to prevent high load on server and client\n      function throttle() {\n        var isImmediateResponse =\n          lastResponse && new Date() - lastResponse < res._getThrottleLimit();\n\n        if (isImmediateResponse) {\n          immediateResponseCount += 1;\n          if (immediateResponseCount > res._getThrottleCount()) {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              res.debug(\n                \"Received successful response more than \" +\n                  res._getThrottleCount() +\n                  \" times subsequently, each within \" +\n                  res._getThrottleLimit() +\n                  \" ms. Throttling.\"\n              );\n            }\n            return true;\n          }\n        }\n\n        // Reset counter on delayed response\n        if (!isImmediateResponse) {\n          immediateResponseCount = 0;\n        }\n\n        return false;\n      }\n\n      var handlerId = (this.__longPollHandlers[action] = this.addListener(\n        action + \"Success\",\n        function longPollHandler() {\n          if (res.isDisposed()) {\n            return;\n          }\n\n          if (!throttle()) {\n            lastResponse = new Date();\n            res.refresh(action);\n          }\n        }\n      ));\n\n      this.invoke(action);\n      return handlerId;\n    },\n\n    /**\n     * Get request configuration for action and parameters.\n     *\n     * This is were placeholders are replaced with parameters.\n     *\n     * @param action {String} Action associated to request.\n     * @param params {Map} Parameters to embed in request.\n     * @return {Map} Map of configuration settings. Has the properties\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\n     */\n    _getRequestConfig(action, params) {\n      return this._resource._getRequestConfig(action, params);\n    },\n\n    /**\n     * Override to adjust the throttle limit.\n     * @return {Integer} Throttle limit in milliseconds\n     */\n    _getThrottleLimit() {\n      return qx.io.rest.Resource.POLL_THROTTLE_LIMIT;\n    },\n\n    /**\n     * Override to adjust the throttle count.\n     * @return {Integer} Throttle count\n     */\n    _getThrottleCount() {\n      return qx.io.rest.Resource.POLL_THROTTLE_COUNT;\n    },\n\n    /**\n     * Map actions from description.\n     *\n     * Allows to decoratively define routes.\n     *\n     * @param description {Map} Map that defines the routes.\n     */\n    __mapFromDescription(description) {\n      Object.keys(description).forEach(function (action) {\n        var route = description[action],\n          method = route.method,\n          url = route.url,\n          check = route.check;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertString(\n            method,\n            \"Method must be string for route '\" + action + \"'\"\n          );\n\n          qx.core.Assert.assertString(\n            url,\n            \"URL must be string for route '\" + action + \"'\"\n          );\n        }\n\n        this.map(action, method, url, check);\n      }, this);\n    },\n\n    /**\n     * Declare event at runtime.\n     *\n     * @param type {String} Type of event.\n     */\n    __declareEvent(type) {\n      if (!this.constructor.$$events) {\n        this.constructor.$$events = {};\n      }\n\n      if (!this.constructor.$$events[type]) {\n        this.constructor.$$events[type] = \"qx.event.type.Rest\";\n      }\n    }\n  },\n\n  /**\n   * Destructs the Resource.\n   *\n   * All created requests, routes and pollTimers will be disposed.\n   */\n  destruct() {\n    var action;\n\n    if (this.__pollTimers) {\n      for (action in this.__pollTimers) {\n        var timer = this.__pollTimers[action];\n        timer.stop();\n        timer.dispose();\n      }\n    }\n\n    if (this.__longPollHandlers) {\n      for (action in this.__longPollHandlers) {\n        var id = this.__longPollHandlers[action];\n        this.removeListenerById(id);\n      }\n    }\n\n    this._resource.destruct();\n    this._resource =\n      this.__routes =\n      this.__pollTimers =\n      this.__longPollHandlers =\n        null;\n  }\n});\n"
  ],
  "mappings": "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"
}