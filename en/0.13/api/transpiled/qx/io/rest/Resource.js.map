{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "description",
    "constructor",
    "call",
    "__longPollHandlers",
    "__pollTimers",
    "__routes",
    "_resource",
    "_tailorResource",
    "_getResource",
    "__mapFromDescription",
    "e",
    "dispose",
    "events",
    "success",
    "actionSuccess",
    "error",
    "actionError",
    "statics",
    "POLL_THROTTLE_LIMIT",
    "POLL_THROTTLE_COUNT",
    "REQUIRED",
    "placeholdersFromUrl",
    "url",
    "bom",
    "rest",
    "Resource",
    "members",
    "resource",
    "setRequestFactory",
    "_getRequest",
    "setRequestHandler",
    "onsuccess",
    "callback",
    "req",
    "action",
    "props",
    "getResponse",
    "getPhase",
    "fireEvent",
    "event",
    "type",
    "Rest",
    "context",
    "onfail",
    "onloadend",
    "configureRequest",
    "io",
    "request",
    "Xhr",
    "map",
    "method",
    "check",
    "__addAction",
    "__P_270_4",
    "undefined",
    "Error",
    "__declareEvent",
    "lang",
    "Function",
    "bind",
    "Array",
    "prototype",
    "unshift",
    "arguments",
    "invoke",
    "apply",
    "params",
    "data",
    "setBaseUrl",
    "baseUrl",
    "abort",
    "varargs",
    "refresh",
    "poll",
    "interval",
    "immediately",
    "intervalListener",
    "reqs",
    "getRequestsByAction",
    "isDone",
    "isDisposed",
    "timer",
    "Timer",
    "addListener",
    "start",
    "longPoll",
    "res",
    "lastResponse",
    "immediateResponseCount",
    "throttle",
    "isImmediateResponse",
    "Date",
    "_getThrottleLimit",
    "_getThrottleCount",
    "handlerId",
    "longPollHandler",
    "_getRequestConfig",
    "__P_270_3",
    "keys",
    "forEach",
    "route",
    "__P_270_5",
    "$$events",
    "destruct",
    "stop",
    "id",
    "removeListenerById"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/rest/Resource.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Tristan Koch (tristankoch)\r\n     * Richard Sternagel (rsternagel)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Client-side wrapper of a REST resource.\r\n *\r\n * Each instance represents a resource in terms of REST. A number of actions\r\n * (usually HTTP methods) unique to the resource can be defined and invoked.\r\n * A resource with its actions is configured declaratively by passing a resource\r\n * description to the constructor, or programmatically using {@link #map}.\r\n *\r\n * Each action is associated to a route. A route is a combination of method,\r\n * URL pattern and optional parameter constraints.\r\n *\r\n * An action is invoked by calling a method with the same name. When a URL\r\n * pattern of a route contains positional parameters, those parameters must be\r\n * passed when invoking the associated action. Also, constraints defined in the\r\n * route must be satisfied.\r\n *\r\n * When an action is invoked, a request is configured according to the associated\r\n * route, is passed the URL parameters, request body data, and finally send.\r\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\r\n *\r\n * No constraints on the action's name or the scope of the URLs are imposed. However,\r\n * if you want to follow RESTful design patterns it is recommended to name actions\r\n * the same as the HTTP action.\r\n *\r\n * <pre class=\"javascript\">\r\n * var description = {\r\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\" },\r\n *  \"put\": { method: \"PUT\", url: \"/photo/{id}\"},\r\n *  \"post\": { method: \"POST\", url: \"/photos/\"}\r\n * };\r\n * var photo = new qx.io.rest.Resource(description);\r\n * // Can also be written: photo.invoke(\"get\", {id: 1});\r\n * photo.get({id: 1});\r\n *\r\n * // Additionally sets request data (provide it as string or set the content type)\r\n * // In a RESTful environment this creates a new resource with the given 'id'\r\n * photo.configureRequest(function(req) {\r\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\r\n * });\r\n * photo.put({id: 1}, {title: \"Monkey\"});\r\n *\r\n * // Additionally sets request data (provide it as string or set the content type)\r\n * // In a RESTful environment this adds a new resource to the resource collection 'photos'\r\n * photo.configureRequest(function(req) {\r\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\r\n * });\r\n * photo.post(null, {title: \"Monkey\"});\r\n * </pre>\r\n *\r\n * To check for existence of URL parameters or constrain them to a certain format, you\r\n * can add a <code>check</code> property to the description. See {@link #map} for details.\r\n *\r\n * <pre class=\"javascript\">\r\n * var description = {\r\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\", check: { id: /\\d+/ } }\r\n * };\r\n * var photo = new qx.io.rest.Resource(description);\r\n * // photo.get({id: \"FAIL\"});\r\n * // -- Error: \"Parameter 'id' is invalid\"\r\n * </pre>\r\n *\r\n * If your description happens to use the same action more than once, consider\r\n * defining another resource.\r\n *\r\n * <pre class=\"javascript\">\r\n * var description = {\r\n *  \"get\": { method: \"GET\", url: \"/photos\"},\r\n * };\r\n * // Distinguish \"photo\" (singular) and \"photos\" (plural) resource\r\n * var photos = new qx.io.rest.Resource(description);\r\n * photos.get();\r\n * </pre>\r\n *\r\n * Basically, all routes of a resource should point to the same URL (resource in\r\n * terms of HTTP). One acceptable exception of this constraint are resources where\r\n * required parameters are part of the URL (<code>/photos/1/</code>) or filter\r\n * resources. For instance:\r\n *\r\n * <pre class=\"javascript\">\r\n * var description = {\r\n *  \"get\": { method: \"GET\", url: \"/photos/{tag}\" }\r\n * };\r\n * var photos = new qx.io.rest.Resource(description);\r\n * photos.get();\r\n * photos.get({tag: \"wildlife\"})\r\n * </pre>\r\n *\r\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\r\n * and could therefore just as well mapped to two distinct resources (for instance,\r\n * named photos and photosTagged). What style to choose depends on the kind of data\r\n * returned. For instance, it seems sensible to stick with one resource if the filter\r\n * only limits the result set (i.e. the individual results have the same properties).\r\n *\r\n * In order to respond to successful (or erroneous) invocations of actions,\r\n * either listen to the generic \"success\" or \"error\" event and get the action\r\n * from the event data, or listen to action specific events defined at runtime.\r\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\r\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\r\n *\r\n * NOTE: Instances of this class must be disposed of after use\r\n *\r\n */\r\nqx.Class.define(\"qx.io.rest.Resource\", {\r\n  extend: qx.core.Object,\r\n  implement: [qx.core.IDisposable],\r\n\r\n  /**\r\n   * @param description {Map?} Each key of the map is interpreted as\r\n   *  <code>action</code> name. The value associated to the key must be a map\r\n   *  with the properties <code>method</code> and <code>url</code>.\r\n   *  <code>check</code> is optional. Also see {@link #map}.\r\n   *\r\n   * For example:\r\n   *\r\n   * <pre class=\"javascript\">\r\n   * { get: {method: \"GET\", url: \"/photos/{id}\", check: { id: /\\d+/ }} }\r\n   * </pre>\r\n   *\r\n   * @see qx.bom.rest\r\n   * @see qx.io.rest\r\n   */\r\n  construct(description) {\r\n    super();\r\n\r\n    this.__longPollHandlers = {};\r\n    this.__pollTimers = {};\r\n    this.__routes = {};\r\n\r\n    this._resource = this._tailorResource(this._getResource());\r\n\r\n    try {\r\n      if (typeof description !== \"undefined\") {\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          qx.core.Assert.assertMap(description);\r\n        }\r\n        this.__mapFromDescription(description);\r\n      }\r\n    } catch (e) {\r\n      this.dispose();\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  events: {\r\n    /**\r\n     * Fired when any request was successful.\r\n     *\r\n     * The action the successful request is associated to, as well as the\r\n     * request itself, can be retrieved from the event’s properties.\r\n     * Additionally, an action specific event is fired that follows the pattern\r\n     * \"<action>Success\", e.g. \"indexSuccess\".\r\n     */\r\n    success: \"qx.event.type.Rest\",\r\n\r\n    /**\r\n     * Fired when request associated to action given in prefix was successful.\r\n     *\r\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\r\n     * successful.\r\n     */\r\n    actionSuccess: \"qx.event.type.Rest\",\r\n\r\n    /**\r\n     * Fired when any request fails.\r\n     *\r\n     * The action the failed request is associated to, as well as the\r\n     * request itself, can be retrieved from the event’s properties.\r\n     * Additionally, an action specific event is fired that follows the pattern\r\n     * \"<action>Error\", e.g. \"indexError\".\r\n     */\r\n    error: \"qx.event.type.Rest\",\r\n\r\n    /**\r\n     * Fired when any request associated to action given in prefix fails.\r\n     *\r\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\r\n     */\r\n    actionError: \"qx.event.type.Rest\"\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * Number of milliseconds below a long-poll request is considered immediate and\r\n     * subject to throttling checks.\r\n     */\r\n    POLL_THROTTLE_LIMIT: 100,\r\n\r\n    /**\r\n     * Number of immediate long-poll responses accepted before throttling takes place.\r\n     */\r\n    POLL_THROTTLE_COUNT: 30,\r\n\r\n    /**\r\n     * A symbol used in checks to declare required parameter.\r\n     */\r\n    REQUIRED: true,\r\n\r\n    /**\r\n     * Get placeholders from URL.\r\n     *\r\n     * @param url {String} The URL to parse for placeholders.\r\n     * @return {Array} Array of placeholders without the placeholder prefix.\r\n     */\r\n    placeholdersFromUrl(url) {\r\n      return qx.bom.rest.Resource.placeholdersFromUrl(url);\r\n    }\r\n  },\r\n\r\n  members: {\r\n    _resource: null,\r\n    __longPollHandlers: null,\r\n    __pollTimers: null,\r\n    __routes: null,\r\n\r\n    /**\r\n     * Get resource.\r\n     *\r\n     * May be overridden to change type of resource.\r\n     * @param description {Map?} See construct.\r\n     * @return {qx.bom.rest.Resource} Resource implementation which does the heavy lifting.\r\n     */\r\n    _getResource(description) {\r\n      return new qx.bom.rest.Resource(description);\r\n    },\r\n\r\n    /**\r\n     * Tailors (apply dependency injection) the given resource to fit our needs.\r\n     *\r\n     * @param resource {qx.bom.rest.Resource} Resource.\r\n     * @return {qx.bom.rest.Resource} Tailored resource.\r\n     */\r\n    _tailorResource(resource) {\r\n      // inject different request implementation\r\n      resource.setRequestFactory(this._getRequest);\r\n\r\n      // inject different request handling\r\n      resource.setRequestHandler({\r\n        onsuccess: {\r\n          callback(req, action) {\r\n            return function () {\r\n              var props = [\r\n                req.getResponse(),\r\n                null,\r\n                false,\r\n                req,\r\n                action,\r\n                req.getPhase()\r\n              ];\r\n\r\n              this.fireEvent(action + \"Success\", qx.event.type.Rest, props);\r\n              this.fireEvent(\"success\", qx.event.type.Rest, props);\r\n            };\r\n          },\r\n          context: this\r\n        },\r\n\r\n        onfail: {\r\n          callback(req, action) {\r\n            return function () {\r\n              var props = [\r\n                req.getResponse(),\r\n                null,\r\n                false,\r\n                req,\r\n                action,\r\n                req.getPhase()\r\n              ];\r\n\r\n              this.fireEvent(action + \"Error\", qx.event.type.Rest, props);\r\n              this.fireEvent(\"error\", qx.event.type.Rest, props);\r\n            };\r\n          },\r\n          context: this\r\n        },\r\n\r\n        onloadend: {\r\n          callback(req, action) {\r\n            return function () {\r\n              req.dispose();\r\n            };\r\n          },\r\n          context: this\r\n        }\r\n      });\r\n\r\n      return resource;\r\n    },\r\n\r\n    //\r\n    // Request\r\n    //\r\n\r\n    /**\r\n     * Configure request.\r\n     *\r\n     * @param callback {Function} Function called before request is send.\r\n     *   Receives request, action, params and data.\r\n     *\r\n     * <pre class=\"javascript\">\r\n     * res.configureRequest(function(req, action, params, data) {\r\n     *   if (action === \"index\") {\r\n     *     req.setAccept(\"application/json\");\r\n     *   }\r\n     * });\r\n     * </pre>\r\n     */\r\n    configureRequest(callback) {\r\n      this._resource.configureRequest(callback);\r\n    },\r\n\r\n    /**\r\n     * Get request.\r\n     *\r\n     * May be overridden to change type of request.\r\n     * @return {qx.io.request.Xhr} Xhr object\r\n     */\r\n    _getRequest() {\r\n      return new qx.io.request.Xhr();\r\n    },\r\n\r\n    //\r\n    // Routes and actions\r\n    //\r\n\r\n    /**\r\n     * Map action to combination of method and URL pattern.\r\n     *\r\n     * <pre class=\"javascript\">\r\n     *   res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\r\n     *\r\n     *   // GET /photos/123\r\n     *   res.get({id: \"123\"});\r\n     * </pre>\r\n     *\r\n     * @param action {String} Action to associate to request.\r\n     * @param method {String} Method to configure request with.\r\n     * @param url {String} URL to configure request with. May contain positional\r\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\r\n     *   is invoked. Parameters are optional, unless a check is defined. A default\r\n     *   value can be provided (<code>{param=default}</code>).\r\n     * @param check {Map?} Map defining parameter constraints, where the key is\r\n     *   the URL parameter and the value a regular expression (to match string) or\r\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\r\n     */\r\n    map(action, method, url, check) {\r\n      // add dynamic methods also on ourself to allow 'invoke()' delegation\r\n      this.__addAction(action, method, url, check);\r\n\r\n      this._resource.map(action, method, url, check);\r\n    },\r\n\r\n    /**\r\n     * Map actions to members.\r\n     *\r\n     * @param action {String} Action to associate to request.\r\n     * @param method {String} Method to configure request with.\r\n     * @param url {String} URL to configure request with. May contain positional\r\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\r\n     *   is invoked. Parameters are optional, unless a check is defined. A default\r\n     *   value can be provided (<code>{param=default}</code>).\r\n     * @param check {Map?} Map defining parameter constraints, where the key is\r\n     *   the URL parameter and the value a regular expression (to match string) or\r\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\r\n     */\r\n    __addAction(action, method, url, check) {\r\n      this.__routes[action] = [method, url, check];\r\n\r\n      // Undefine generic getter when action is named \"get\"\r\n      if (action == \"get\") {\r\n        this[action] = undefined;\r\n      }\r\n\r\n      // Do not overwrite existing \"non-action\" methods unless the method is\r\n      // null (i.e. because it exists as a stub for documentation)\r\n      if (\r\n        typeof this[action] !== \"undefined\" &&\r\n        this[action] !== null &&\r\n        this[action].action !== true\r\n      ) {\r\n        throw new Error(\r\n          \"Method with name of action (\" + action + \") already exists\"\r\n        );\r\n      }\r\n\r\n      this.__declareEvent(action + \"Success\");\r\n      this.__declareEvent(action + \"Error\");\r\n\r\n      this[action] = qx.lang.Function.bind(function () {\r\n        Array.prototype.unshift.call(arguments, action);\r\n        return this.invoke.apply(this, arguments);\r\n      }, this);\r\n\r\n      // Method is safe to overwrite\r\n      this[action].action = true;\r\n    },\r\n\r\n    /**\r\n     * Invoke action with parameters.\r\n     *\r\n     * Internally called by actions dynamically created.\r\n     *\r\n     * May be overridden to customize action and parameter handling.\r\n     *\r\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\r\n     *\r\n     * @param action {String} Action to invoke.\r\n     * @param params {Map} Map of parameters inserted into URL when a matching\r\n     *  positional parameter is found.\r\n     * @param data {Map|String} Data to be send as part of the request.\r\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\r\n     * @return {Number} Id of the action's invocation.\r\n     */\r\n    invoke(action, params, data) {\r\n      var params = params == null ? {} : params;\r\n\r\n      // Cache parameters\r\n      this.__routes[action].params = params;\r\n\r\n      return this._resource.invoke(action, params, data);\r\n    },\r\n\r\n    /**\r\n     * Set base URL.\r\n     *\r\n     * The base URL is prepended to the URLs given in the description.\r\n     * Changes affect all future invocations.\r\n     *\r\n     * @param baseUrl {String} Base URL.\r\n     */\r\n    setBaseUrl(baseUrl) {\r\n      this._resource.setBaseUrl(baseUrl);\r\n    },\r\n\r\n    /**\r\n     * Abort action.\r\n     *\r\n     * Example:\r\n     *\r\n     * <pre class=\"javascript\">\r\n     *   // Abort all invocations of action\r\n     *   res.get({id: 1});\r\n     *   res.get({id: 2});\r\n     *   res.abort(\"get\");\r\n     *\r\n     *   // Abort specific invocation of action (by id)\r\n     *   var actionId = res.get({id: 1});\r\n     *   res.abort(actionId);\r\n     * </pre>\r\n     *\r\n     * @param varargs {String|Number} Action of which all invocations to abort\r\n     *  (when string), or a single invocation of an action to abort (when number)\r\n     */\r\n    abort(varargs) {\r\n      this._resource.abort(varargs);\r\n    },\r\n\r\n    /**\r\n     * Resend request associated to action.\r\n     *\r\n     * Replays parameters given when action was invoked originally.\r\n     *\r\n     * @param action {String} Action to refresh.\r\n     */\r\n    refresh(action) {\r\n      this._resource.refresh(action);\r\n    },\r\n\r\n    /**\r\n     * Periodically invoke action.\r\n     *\r\n     * Replays parameters given when action was invoked originally. When the\r\n     * action was not yet invoked and requires parameters, parameters must be\r\n     * given.\r\n     *\r\n     * Please note that IE tends to cache overly aggressive. One work-around is\r\n     * to disable caching on the client side by configuring the request with\r\n     * <code>setCache(false)</code>. If you control the server, a better\r\n     * work-around is to include appropriate headers to explicitly control\r\n     * caching. This way you still avoid requests that can be correctly answered\r\n     * from cache (e.g. when nothing has changed since the last poll). Please\r\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\r\n     * XMLHttpRequest Caching Test</a> for available options.\r\n     *\r\n     * @lint ignoreUnused(intervalListener)\r\n     *\r\n     * @param action {String} Action to poll.\r\n     * @param interval {Number} Interval in ms.\r\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\r\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\r\n     *   invoke a call immediately.\r\n     * @return {qx.event.Timer} Timer that periodically invokes action. Use to\r\n     *   stop or resume. Is automatically disposed on disposal of object.\r\n     */\r\n    poll(action, interval, params, immediately) {\r\n      // Dispose timer previously created for action\r\n      if (this.__pollTimers[action]) {\r\n        this.__pollTimers[action].dispose();\r\n      }\r\n\r\n      // Fallback to previous params\r\n      if (typeof params == \"undefined\") {\r\n        params = this.__routes[action].params;\r\n      }\r\n\r\n      // Invoke immediately\r\n      if (immediately) {\r\n        this.invoke(action, params);\r\n      }\r\n\r\n      var intervalListener = function () {\r\n        var reqs = this.getRequestsByAction(action),\r\n          req = reqs ? reqs[0] : null;\r\n\r\n        if (!immediately && !req) {\r\n          this.invoke(action, params);\r\n          return;\r\n        }\r\n        if (req && (req.isDone() || req.isDisposed())) {\r\n          this.refresh(action);\r\n        }\r\n      };\r\n\r\n      var timer = (this.__pollTimers[action] = new qx.event.Timer(interval));\r\n      timer.addListener(\"interval\", intervalListener, this._resource);\r\n      timer.start();\r\n      return timer;\r\n    },\r\n\r\n    /**\r\n     * Long-poll action.\r\n     *\r\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\r\n     * server signals new data. The server determines when new data is available,\r\n     * while the client keeps open a request. Requires configuration on the\r\n     * server side. Basically, the server must not close a connection until\r\n     * new data is available. For a high level introduction to long-polling,\r\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\r\n     * Ajax with long polling</a>.\r\n     *\r\n     * Uses {@link #refresh} internally. Make sure you understand the\r\n     * implications of IE's tendency to cache overly aggressive.\r\n     *\r\n     * Note no interval is given on the client side.\r\n     *\r\n     * @lint ignoreUnused(longPollHandler)\r\n     *\r\n     * @param action {String} Action to poll.\r\n     * @return {String} Id of handler responsible for long-polling. To stop\r\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\r\n     */\r\n    longPoll(action) {\r\n      var res = this,\r\n        lastResponse, // Keep track of last response\r\n        immediateResponseCount = 0; // Count immediate responses\r\n\r\n      // Throttle to prevent high load on server and client\r\n      function throttle() {\r\n        var isImmediateResponse =\r\n          lastResponse && new Date() - lastResponse < res._getThrottleLimit();\r\n\r\n        if (isImmediateResponse) {\r\n          immediateResponseCount += 1;\r\n          if (immediateResponseCount > res._getThrottleCount()) {\r\n            if (qx.core.Environment.get(\"qx.debug\")) {\r\n              res.debug(\r\n                \"Received successful response more than \" +\r\n                  res._getThrottleCount() +\r\n                  \" times subsequently, each within \" +\r\n                  res._getThrottleLimit() +\r\n                  \" ms. Throttling.\"\r\n              );\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n\r\n        // Reset counter on delayed response\r\n        if (!isImmediateResponse) {\r\n          immediateResponseCount = 0;\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      var handlerId = (this.__longPollHandlers[action] = this.addListener(\r\n        action + \"Success\",\r\n        function longPollHandler() {\r\n          if (res.isDisposed()) {\r\n            return;\r\n          }\r\n\r\n          if (!throttle()) {\r\n            lastResponse = new Date();\r\n            res.refresh(action);\r\n          }\r\n        }\r\n      ));\r\n\r\n      this.invoke(action);\r\n      return handlerId;\r\n    },\r\n\r\n    /**\r\n     * Get request configuration for action and parameters.\r\n     *\r\n     * This is were placeholders are replaced with parameters.\r\n     *\r\n     * @param action {String} Action associated to request.\r\n     * @param params {Map} Parameters to embed in request.\r\n     * @return {Map} Map of configuration settings. Has the properties\r\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\r\n     */\r\n    _getRequestConfig(action, params) {\r\n      return this._resource._getRequestConfig(action, params);\r\n    },\r\n\r\n    /**\r\n     * Override to adjust the throttle limit.\r\n     * @return {Integer} Throttle limit in milliseconds\r\n     */\r\n    _getThrottleLimit() {\r\n      return qx.io.rest.Resource.POLL_THROTTLE_LIMIT;\r\n    },\r\n\r\n    /**\r\n     * Override to adjust the throttle count.\r\n     * @return {Integer} Throttle count\r\n     */\r\n    _getThrottleCount() {\r\n      return qx.io.rest.Resource.POLL_THROTTLE_COUNT;\r\n    },\r\n\r\n    /**\r\n     * Map actions from description.\r\n     *\r\n     * Allows to decoratively define routes.\r\n     *\r\n     * @param description {Map} Map that defines the routes.\r\n     */\r\n    __mapFromDescription(description) {\r\n      Object.keys(description).forEach(function (action) {\r\n        var route = description[action],\r\n          method = route.method,\r\n          url = route.url,\r\n          check = route.check;\r\n\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          qx.core.Assert.assertString(\r\n            method,\r\n            \"Method must be string for route '\" + action + \"'\"\r\n          );\r\n\r\n          qx.core.Assert.assertString(\r\n            url,\r\n            \"URL must be string for route '\" + action + \"'\"\r\n          );\r\n        }\r\n\r\n        this.map(action, method, url, check);\r\n      }, this);\r\n    },\r\n\r\n    /**\r\n     * Declare event at runtime.\r\n     *\r\n     * @param type {String} Type of event.\r\n     */\r\n    __declareEvent(type) {\r\n      if (!this.constructor.$$events) {\r\n        this.constructor.$$events = {};\r\n      }\r\n\r\n      if (!this.constructor.$$events[type]) {\r\n        this.constructor.$$events[type] = \"qx.event.type.Rest\";\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Destructs the Resource.\r\n   *\r\n   * All created requests, routes and pollTimers will be disposed.\r\n   */\r\n  destruct() {\r\n    var action;\r\n\r\n    if (this.__pollTimers) {\r\n      for (action in this.__pollTimers) {\r\n        var timer = this.__pollTimers[action];\r\n        timer.stop();\r\n        timer.dispose();\r\n      }\r\n    }\r\n\r\n    if (this.__longPollHandlers) {\r\n      for (action in this.__longPollHandlers) {\r\n        var id = this.__longPollHandlers[action];\r\n        this.removeListenerById(id);\r\n      }\r\n    }\r\n\r\n    this._resource.destruct();\r\n    this._resource =\r\n      this.__routes =\r\n      this.__pollTimers =\r\n      this.__longPollHandlers =\r\n        null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}