{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "graphql",
    "protocol",
    "Message",
    "properties",
    "operationName",
    "check",
    "nullable",
    "event",
    "query",
    "init",
    "variables",
    "transform",
    "validate",
    "members",
    "toString",
    "lang",
    "Json",
    "stringify",
    "toObject",
    "_jsonReplacer",
    "key",
    "value",
    "undefined",
    "_transformVariables",
    "val",
    "model",
    "includes",
    "data",
    "marshal",
    "createModel",
    "_validateVariables",
    "Type",
    "isObject",
    "core",
    "ValidationError",
    "Request"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/graphql/protocol/Request.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n      2020 Christian Boulanger\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Boulanger (cboulanger)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * An Object modelling a GraphQL request based on the GraphQL language\r\n * (see http://spec.graphql.org/draft/#sec-Language) usually sent as JSON via\r\n * a HTTP request (https://graphql.org/learn/serving-over-http)\r\n * @experimental The API might change. Feedback is appreciated.\r\n */\r\nqx.Class.define(\"qx.io.graphql.protocol.Request\", {\r\n  extend: qx.io.graphql.protocol.Message,\r\n  properties: {\r\n    /**\r\n     * An optional field that only needs to be provided if multiple operations are present in the query\r\n     */\r\n    operationName: {\r\n      check: \"String\",\r\n      nullable: true,\r\n      event: \"changeOperationName\"\r\n    },\r\n\r\n    /**\r\n     * The query as a string which will be parsed and executed on the server\r\n     */\r\n    query: {\r\n      check: \"String\",\r\n      nullable: false,\r\n      init: \"\",\r\n      event: \"changeQuery\"\r\n    },\r\n\r\n    /**\r\n     * A qooxdoo object that maps variable names to variable values\r\n     */\r\n    variables: {\r\n      check: \"qx.core.Object\",\r\n      nullable: true,\r\n      event: \"changeVariables\",\r\n      transform: \"_transformVariables\",\r\n      validate: \"_validateVariables\"\r\n    }\r\n  },\r\n\r\n  members: {\r\n    // overriden\r\n    toString() {\r\n      return qx.lang.Json.stringify(this.toObject(), this._jsonReplacer);\r\n    },\r\n\r\n    _jsonReplacer(key, value) {\r\n      if (key === \"variables\" || key === \"operationName\") {\r\n        return value !== null ? value : undefined;\r\n      }\r\n      // everything else is returned as it is\r\n      return value;\r\n    },\r\n\r\n    /**\r\n     * Transforms the variables object to a qooxdoo model. Called automaticaly\r\n     * when the variables property is set.\r\n     */\r\n    _transformVariables(val) {\r\n      let model = null;\r\n      if (![null, undefined].includes(val)) {\r\n        model = qx.data.marshal.Json.createModel(val);\r\n      }\r\n      return model;\r\n    },\r\n\r\n    _validateVariables(val) {\r\n      if (!qx.lang.Type.isObject(val) && val !== null) {\r\n        throw new qx.core.ValidationError(\r\n          \"Validation Error: \" + val + \" is not an object or null.\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,gCAAgC,EAAE;IAChDC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACC,OAAO;IACtCC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,aAAa,EAAE;QACbC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIC,KAAK,EAAE;QACLH,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,KAAK;QACfG,IAAI,EAAE,EAAE;QACRF,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIG,SAAS,EAAE;QACTL,KAAK,EAAE,gBAAgB;QACvBC,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE,iBAAiB;QACxBI,SAAS,EAAE,qBAAqB;QAChCC,QAAQ,EAAE;MACZ;IACF,CAAC;IAEDC,OAAO,EAAE;MACP;MACAC,QAAQ,WAAAA,SAAA,EAAG;QACT,OAAOtB,EAAE,CAACuB,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAACC,aAAa,CAAC;MACpE,CAAC;MAEDA,aAAa,WAAAA,cAACC,GAAG,EAAEC,KAAK,EAAE;QACxB,IAAID,GAAG,KAAK,WAAW,IAAIA,GAAG,KAAK,eAAe,EAAE;UAClD,OAAOC,KAAK,KAAK,IAAI,GAAGA,KAAK,GAAGC,SAAS;QAC3C;QACA;QACA,OAAOD,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;MACIE,mBAAmB,WAAAA,oBAACC,GAAG,EAAE;QACvB,IAAIC,KAAK,GAAG,IAAI;QAChB,IAAI,CAAC,CAAC,IAAI,EAAEH,SAAS,CAAC,CAACI,QAAQ,CAACF,GAAG,CAAC,EAAE;UACpCC,KAAK,GAAGjC,EAAE,CAACmC,IAAI,CAACC,OAAO,CAACZ,IAAI,CAACa,WAAW,CAACL,GAAG,CAAC;QAC/C;QACA,OAAOC,KAAK;MACd,CAAC;MAEDK,kBAAkB,WAAAA,mBAACN,GAAG,EAAE;QACtB,IAAI,CAAChC,EAAE,CAACuB,IAAI,CAACgB,IAAI,CAACC,QAAQ,CAACR,GAAG,CAAC,IAAIA,GAAG,KAAK,IAAI,EAAE;UAC/C,MAAM,IAAIhC,EAAE,CAACyC,IAAI,CAACC,eAAe,CAC/B,oBAAoB,GAAGV,GAAG,GAAG,4BAC/B,CAAC;QACH;MACF;IACF;EACF,CAAC,CAAC;EA5FFhC,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACkC,OAAO,CAACxC,aAAa,GAAGA,aAAa;AAAC"
}