{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "data",
    "constructor",
    "call",
    "Assert",
    "assertObject",
    "set",
    "members",
    "toNormalizedObject",
    "toObject",
    "errors",
    "toString",
    "lang",
    "Json",
    "stringify",
    "util",
    "Serializer",
    "toNativeObject",
    "io",
    "graphql",
    "protocol",
    "Message"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/graphql/protocol/Message.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * Abstract parent class for GraphQL messages and responses\n * @experimental The API might change. Feedback is appreciated.\n */\nqx.Class.define(\"qx.io.graphql.protocol.Message\", {\n  extend: qx.core.Object,\n\n  /**\n   * Constructor\n   * @param {Object} data\n   */\n  construct(data) {\n    super();\n    qx.core.Assert.assertObject(data);\n    this.set(data);\n  },\n\n  members: {\n    /**\n     * Return the message data in a spec-conformant native object\n     */\n    toNormalizedObject() {\n      let data = this.toObject();\n      if (!data.errors) {\n        delete data.errors;\n      }\n      return data;\n    },\n\n    /**\n     * Serialize to a spec-conformant JSON string\n     * @return {String}\n     */\n    toString() {\n      return qx.lang.Json.stringify(this.toNormalizedObject());\n    },\n\n    /**\n     * Serialize to a native javascript object. If you need a normalized object\n     * that conforms to the spec, use {@link #toNormalizedObject}\n     * @return {Object}\n     */\n    toObject() {\n      return qx.util.Serializer.toNativeObject(this);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,gCAAgC,EAAE;IAChDC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IAEtB;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,IAAI,EAAE;MACdV,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAG,WAAA,CAAAC,IAAA;MACAZ,EAAE,CAACO,IAAI,CAACM,MAAM,CAACC,YAAY,CAACJ,IAAI,CAAC;MACjC,IAAI,CAACK,GAAG,CAACL,IAAI,CAAC;IAChB,CAAC;IAEDM,OAAO,EAAE;MACP;AACJ;AACA;MACIC,kBAAkB,WAAAA,mBAAA,EAAG;QACnB,IAAIP,IAAI,GAAG,IAAI,CAACQ,QAAQ,EAAE;QAC1B,IAAI,CAACR,IAAI,CAACS,MAAM,EAAE;UAChB,OAAOT,IAAI,CAACS,MAAM;QACpB;QACA,OAAOT,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;MACIU,QAAQ,WAAAA,SAAA,EAAG;QACT,OAAOpB,EAAE,CAACqB,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACN,kBAAkB,EAAE,CAAC;MAC1D,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,QAAQ,WAAAA,SAAA,EAAG;QACT,OAAOlB,EAAE,CAACwB,IAAI,CAACC,UAAU,CAACC,cAAc,CAAC,IAAI,CAAC;MAChD;IACF;EACF,CAAC,CAAC;EAhEF1B,EAAE,CAAC2B,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACC,OAAO,CAAC3B,aAAa,GAAGA,aAAa;AAAC"
}