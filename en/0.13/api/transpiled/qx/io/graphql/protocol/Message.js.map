{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "data",
    "constructor",
    "call",
    "Assert",
    "assertObject",
    "set",
    "members",
    "toNormalizedObject",
    "toObject",
    "errors",
    "toString",
    "lang",
    "Json",
    "stringify",
    "util",
    "Serializer",
    "toNativeObject",
    "io",
    "graphql",
    "protocol",
    "Message"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/graphql/protocol/Message.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n      2020 Christian Boulanger\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Boulanger (cboulanger)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Abstract parent class for GraphQL messages and responses\r\n * @experimental The API might change. Feedback is appreciated.\r\n */\r\nqx.Class.define(\"qx.io.graphql.protocol.Message\", {\r\n  extend: qx.core.Object,\r\n\r\n  /**\r\n   * Constructor\r\n   * @param {Object} data\r\n   */\r\n  construct(data) {\r\n    super();\r\n    qx.core.Assert.assertObject(data);\r\n    this.set(data);\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * Return the message data in a spec-conformant native object\r\n     */\r\n    toNormalizedObject() {\r\n      let data = this.toObject();\r\n      if (!data.errors) {\r\n        delete data.errors;\r\n      }\r\n      return data;\r\n    },\r\n\r\n    /**\r\n     * Serialize to a spec-conformant JSON string\r\n     * @return {String}\r\n     */\r\n    toString() {\r\n      return qx.lang.Json.stringify(this.toNormalizedObject());\r\n    },\r\n\r\n    /**\r\n     * Serialize to a native javascript object. If you need a normalized object\r\n     * that conforms to the spec, use {@link #toNormalizedObject}\r\n     * @return {Object}\r\n     */\r\n    toObject() {\r\n      return qx.util.Serializer.toNativeObject(this);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,gCAAgC,EAAE;IAChDC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IAEtB;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,IAAI,EAAE;MACdV,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAG,WAAA,CAAAC,IAAA;MACAZ,EAAE,CAACO,IAAI,CAACM,MAAM,CAACC,YAAY,CAACJ,IAAI,CAAC;MACjC,IAAI,CAACK,GAAG,CAACL,IAAI,CAAC;IAChB,CAAC;IAEDM,OAAO,EAAE;MACP;AACJ;AACA;MACIC,kBAAkB,WAAAA,mBAAA,EAAG;QACnB,IAAIP,IAAI,GAAG,IAAI,CAACQ,QAAQ,CAAC,CAAC;QAC1B,IAAI,CAACR,IAAI,CAACS,MAAM,EAAE;UAChB,OAAOT,IAAI,CAACS,MAAM;QACpB;QACA,OAAOT,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;MACIU,QAAQ,WAAAA,SAAA,EAAG;QACT,OAAOpB,EAAE,CAACqB,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACN,kBAAkB,CAAC,CAAC,CAAC;MAC1D,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,QAAQ,WAAAA,SAAA,EAAG;QACT,OAAOlB,EAAE,CAACwB,IAAI,CAACC,UAAU,CAACC,cAAc,CAAC,IAAI,CAAC;MAChD;IACF;EACF,CAAC,CAAC;EAhEF1B,EAAE,CAAC2B,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACC,OAAO,CAAC3B,aAAa,GAAGA,aAAa;AAAC"
}