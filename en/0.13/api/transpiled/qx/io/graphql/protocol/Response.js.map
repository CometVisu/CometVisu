{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "graphql",
    "protocol",
    "Message",
    "properties",
    "data",
    "check",
    "nullable",
    "init",
    "errors",
    "value",
    "lang",
    "Type",
    "isArray",
    "length",
    "every",
    "item",
    "Boolean",
    "message",
    "Response"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/graphql/protocol/Response.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n      2020 Christian Boulanger\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Boulanger (cboulanger)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * An Object modelling a GraphQL response (see http://spec.graphql.org/draft/#sec-Response-Format)\r\n * @experimental The API might change. Feedback is appreciated.\r\n */\r\nqx.Class.define(\"qx.io.graphql.protocol.Response\", {\r\n  extend: qx.io.graphql.protocol.Message,\r\n\r\n  properties: {\r\n    /**\r\n     * \"The data entry in the response will be the result of the execution\r\n     * of the requested operation. If the operation was a query, this\r\n     * output will be an object of the schema’s query root type; if the\r\n     * operation was a mutation, this output will be an object of the\r\n     * schema’s mutation root type. If an error was encountered before\r\n     * execution begins, the data entry should not be present in the result.\r\n     * If an error was encountered during the execution that prevented\r\n     * a valid response, the data entry in the response should be null\"\r\n     */\r\n    data: {\r\n      check: \"Object\",\r\n      nullable: true,\r\n      init: null\r\n    },\r\n\r\n    /**\r\n     * \"The errors entry in the response is a non‐empty list of errors,\r\n     * where each error is a map. If no errors were encountered during\r\n     * the requested operation, the errors entry should not be present in\r\n     * the result. If the data entry in the response is not present, the\r\n     * errors entry in the response must not be empty. It must contain\r\n     * at least one error. The errors it contains should indicate why no\r\n     * data was able to be returned. If the data entry in the response is\r\n     * present (including if it is the value null), the errors entry in the\r\n     * response may contain any errors that occurred during execution. If\r\n     * errors occurred during execution, it should contain those errors.\"\r\n     */\r\n    errors: {\r\n      check: value =>\r\n        qx.lang.Type.isArray(value) &&\r\n        value.length &&\r\n        value.every(item => Boolean(item.message)),\r\n      nullable: true\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,iCAAiC,EAAE;IACjDC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACC,OAAO;IAEtCC,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,EAAE;QACJC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE;QACNH,KAAK,EAAE,SAAAA,MAAAI,KAAK;UAAA,OACVjB,EAAE,CAACkB,IAAI,CAACC,IAAI,CAACC,OAAO,CAACH,KAAK,CAAC,IAC3BA,KAAK,CAACI,MAAM,IACZJ,KAAK,CAACK,KAAK,CAAC,UAAAC,IAAI;YAAA,OAAIC,OAAO,CAACD,IAAI,CAACE,OAAO,CAAC;UAAA,EAAC;QAAA;QAC5CX,QAAQ,EAAE;MACZ;IACF;EACF,CAAC,CAAC;EA9DFd,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACiB,QAAQ,CAACvB,aAAa,GAAGA,aAAa;AAAC"
}