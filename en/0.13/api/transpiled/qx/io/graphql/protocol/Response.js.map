{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "graphql",
    "protocol",
    "Message",
    "properties",
    "data",
    "check",
    "nullable",
    "init",
    "errors",
    "value",
    "lang",
    "Type",
    "isArray",
    "length",
    "every",
    "item",
    "Boolean",
    "message",
    "Response"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/graphql/protocol/Response.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * An Object modelling a GraphQL response (see http://spec.graphql.org/draft/#sec-Response-Format)\n * @experimental The API might change. Feedback is appreciated.\n */\nqx.Class.define(\"qx.io.graphql.protocol.Response\", {\n  extend: qx.io.graphql.protocol.Message,\n\n  properties: {\n    /**\n     * \"The data entry in the response will be the result of the execution\n     * of the requested operation. If the operation was a query, this\n     * output will be an object of the schema’s query root type; if the\n     * operation was a mutation, this output will be an object of the\n     * schema’s mutation root type. If an error was encountered before\n     * execution begins, the data entry should not be present in the result.\n     * If an error was encountered during the execution that prevented\n     * a valid response, the data entry in the response should be null\"\n     */\n    data: {\n      check: \"Object\",\n      nullable: true,\n      init: null\n    },\n\n    /**\n     * \"The errors entry in the response is a non‐empty list of errors,\n     * where each error is a map. If no errors were encountered during\n     * the requested operation, the errors entry should not be present in\n     * the result. If the data entry in the response is not present, the\n     * errors entry in the response must not be empty. It must contain\n     * at least one error. The errors it contains should indicate why no\n     * data was able to be returned. If the data entry in the response is\n     * present (including if it is the value null), the errors entry in the\n     * response may contain any errors that occurred during execution. If\n     * errors occurred during execution, it should contain those errors.\"\n     */\n    errors: {\n      check: value =>\n        qx.lang.Type.isArray(value) &&\n        value.length &&\n        value.every(item => Boolean(item.message)),\n      nullable: true\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,iCAAhB,EAAmD;IACjDC,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,OAAN,CAAcC,QAAd,CAAuBC,OADkB;IAGjDC,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,EAAE;QACJC,KAAK,EAAE,QADH;QAEJC,QAAQ,EAAE,IAFN;QAGJC,IAAI,EAAE;MAHF,CAXI;;MAiBV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE;QACNH,KAAK,EAAE,eAAAI,KAAK;UAAA,OACVjB,EAAE,CAACkB,IAAH,CAAQC,IAAR,CAAaC,OAAb,CAAqBH,KAArB,KACAA,KAAK,CAACI,MADN,IAEAJ,KAAK,CAACK,KAAN,CAAY,UAAAC,IAAI;YAAA,OAAIC,OAAO,CAACD,IAAI,CAACE,OAAN,CAAX;UAAA,CAAhB,CAHU;QAAA,CADN;QAKNX,QAAQ,EAAE;MALJ;IA7BE;EAHqC,CAAnD;EAtBAd,EAAE,CAACO,EAAH,CAAMC,OAAN,CAAcC,QAAd,CAAuBiB,QAAvB,CAAgCvB,aAAhC,GAAgDA,aAAhD"
}