{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "properties",
    "batch",
    "check",
    "construct",
    "setBatch",
    "data",
    "Array",
    "members",
    "add",
    "message",
    "Assert",
    "assertInstance",
    "io",
    "jsonrpc",
    "protocol",
    "Message",
    "getBatch",
    "push",
    "addRequest",
    "method",
    "params",
    "Request",
    "addNotification",
    "Notification",
    "getPromises",
    "map",
    "getPromise",
    "toObject",
    "toArray",
    "toString",
    "JSON",
    "stringify",
    "Batch"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/jsonrpc/protocol/Batch.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * An object representing a JSON-RPC v2.0 batch message object. You can add\n * one or more of the following message objects to the batch:\n *  - {@link qx.io.jsonrpc.protocol.Request}\n *  - {@link qx.io.jsonrpc.protocol.Notification}\n *  - {@link qx.io.jsonrpc.protocol.Result}\n *  - {@link qx.io.jsonrpc.protocol.Error}\n *  @see https://www.jsonrpc.org/specification#batch\n */\nqx.Class.define(\"qx.io.jsonrpc.protocol.Batch\", {\n  extend: qx.core.Object,\n  properties: {\n    batch: {\n      check: \"qx.data.Array\"\n    }\n  },\n\n  construct() {\n    super();\n    this.setBatch(new qx.data.Array());\n  },\n  members: {\n    /**\n     * Adds a request or notification to the batch\n     * @param {qx.io.jsonrpc.protocol.Message} message\n     * @return {qx.io.jsonrpc.protocol.Batch}\n     */\n    add(message) {\n      qx.core.Assert.assertInstance(message, qx.io.jsonrpc.protocol.Message);\n      this.getBatch().push(message);\n      // return the instance for chaining\n      return this;\n    },\n\n    /**\n     * Adds a request to the batch\n     * @param method\n     * @param params\n     */\n    addRequest(method, params) {\n      this.add(new qx.io.jsonrpc.protocol.Request(method, params));\n      return this;\n    },\n\n    /**\n     * Adds a notification to the batch\n     * @param method\n     * @param params\n     */\n    addNotification(method, params) {\n      this.add(new qx.io.jsonrpc.protocol.Notification(method, params));\n      return this;\n    },\n\n    /**\n     * Returns an array of the promises of the requests in the batch\n     * @return {qx.Promise[]}\n     */\n    getPromises() {\n      return this.getBatch().map(message => message.getPromise());\n    },\n\n    /**\n     * Returns the message as a native object\n     * @return {*}\n     */\n    toObject() {\n      return this.getBatch()\n        .toArray()\n        .map(message => message.toObject());\n    },\n\n    /**\n     * Returns the message as a JSON string\n     * @return {String}\n     */\n    toString() {\n      return JSON.stringify(\n        this.getBatch()\n          .toArray()\n          .map(message => message.toObject())\n      );\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,8BAA8B,EAAE;IAC9CC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,UAAU,EAAE;MACVC,KAAK,EAAE;QACLC,KAAK,EAAE;MACT;IACF,CAAC;IAEDC,SAAS,uBAAG;MACV;MACA,IAAI,CAACC,QAAQ,CAAC,IAAIb,EAAE,CAACc,IAAI,CAACC,KAAK,EAAE,CAAC;IACpC,CAAC;IACDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;MACIC,GAAG,eAACC,OAAO,EAAE;QACXlB,EAAE,CAACO,IAAI,CAACY,MAAM,CAACC,cAAc,CAACF,OAAO,EAAElB,EAAE,CAACqB,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACC,OAAO,CAAC;QACtE,IAAI,CAACC,QAAQ,EAAE,CAACC,IAAI,CAACR,OAAO,CAAC;QAC7B;QACA,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIS,UAAU,sBAACC,MAAM,EAAEC,MAAM,EAAE;QACzB,IAAI,CAACZ,GAAG,CAAC,IAAIjB,EAAE,CAACqB,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACO,OAAO,CAACF,MAAM,EAAEC,MAAM,CAAC,CAAC;QAC5D,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIE,eAAe,2BAACH,MAAM,EAAEC,MAAM,EAAE;QAC9B,IAAI,CAACZ,GAAG,CAAC,IAAIjB,EAAE,CAACqB,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACS,YAAY,CAACJ,MAAM,EAAEC,MAAM,CAAC,CAAC;QACjE,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;MACII,WAAW,yBAAG;QACZ,OAAO,IAAI,CAACR,QAAQ,EAAE,CAACS,GAAG,CAAC,UAAAhB,OAAO;UAAA,OAAIA,OAAO,CAACiB,UAAU,EAAE;QAAA,EAAC;MAC7D,CAAC;MAED;AACJ;AACA;AACA;MACIC,QAAQ,sBAAG;QACT,OAAO,IAAI,CAACX,QAAQ,EAAE,CACnBY,OAAO,EAAE,CACTH,GAAG,CAAC,UAAAhB,OAAO;UAAA,OAAIA,OAAO,CAACkB,QAAQ,EAAE;QAAA,EAAC;MACvC,CAAC;MAED;AACJ;AACA;AACA;MACIE,QAAQ,sBAAG;QACT,OAAOC,IAAI,CAACC,SAAS,CACnB,IAAI,CAACf,QAAQ,EAAE,CACZY,OAAO,EAAE,CACTH,GAAG,CAAC,UAAAhB,OAAO;UAAA,OAAIA,OAAO,CAACkB,QAAQ,EAAE;QAAA,EAAC,CACtC;MACH;IACF;EACF,CAAC,CAAC;EAtGFpC,EAAE,CAACqB,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACkB,KAAK,CAACtC,aAAa,GAAGA,aAAa;AAAC"
}