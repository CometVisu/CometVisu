{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "jsonrpc",
    "protocol",
    "Message",
    "properties",
    "id",
    "check",
    "value",
    "lang",
    "Type",
    "isNumber",
    "parseInt",
    "error",
    "isObject",
    "construct",
    "code",
    "message",
    "data",
    "constructor",
    "call",
    "setId",
    "Error",
    "errorObj",
    "setError"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/jsonrpc/protocol/Error.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * A JSON-RPC v2.0 error message object, which is a response to a {@link qx.io.jsonrpc.protocol.Request},\n * indicating a failure during the processing of the request on the server.\n * @see https://www.jsonrpc.org/specification#error_object\n */\nqx.Class.define(\"qx.io.jsonrpc.protocol.Error\", {\n  extend: qx.io.jsonrpc.protocol.Message,\n  properties: {\n    /**\n     * The integer id of the request\n     * @var {Number}\n     */\n    id: {\n      check: value =>\n        qx.lang.Type.isNumber(value) && parseInt(value, 10) === value\n    },\n\n    /**\n     * The error object\n     * @var {Object}\n     */\n    error: {\n      check: value =>\n        qx.lang.Type.isObject(value) && \"code\" in value && \"message\" in value\n    }\n  },\n\n  /**\n   * The response messsage constructor\n   * @param {Number} id^\n   * @param {Number} code\n   * @param {String} message\n   * @param {*?} data\n   */\n  construct(id, code, message, data) {\n    super();\n    this.setId(id);\n    if (!qx.lang.Type.isNumber(code) || parseInt(code, 10) !== code) {\n      throw new Error(\"Code must be an integer\");\n    }\n    let errorObj = { code, message };\n    if (data) {\n      errorObj.data = data;\n    }\n    this.setError(errorObj);\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,8BAA8B,EAAE;IAC9CC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACC,OAAO;IACtCC,UAAU,EAAE;MACV;AACJ;AACA;AACA;MACIC,EAAE,EAAE;QACFC,KAAK,EAAE,SAAPA,KAAKA,CAAEC,KAAK;UAAA,OACVd,EAAE,CAACe,IAAI,CAACC,IAAI,CAACC,QAAQ,CAACH,KAAK,CAAC,IAAII,QAAQ,CAACJ,KAAK,EAAE,EAAE,CAAC,KAAKA,KAAK;QAAA;MACjE,CAAC;MAED;AACJ;AACA;AACA;MACIK,KAAK,EAAE;QACLN,KAAK,EAAE,SAAPA,KAAKA,CAAEC,KAAK;UAAA,OACVd,EAAE,CAACe,IAAI,CAACC,IAAI,CAACI,QAAQ,CAACN,KAAK,CAAC,IAAI,MAAM,IAAIA,KAAK,IAAI,SAAS,IAAIA,KAAK;QAAA;MACzE;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;AACA;AACA;IACEO,SAAS,WAATA,SAASA,CAACT,EAAE,EAAEU,IAAI,EAAEC,OAAO,EAAEC,IAAI,EAAE;MACjCxB,EAAA,CAAAO,EAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,OAAA,CAAAe,WAAA,CAAAC,IAAA;MACA,IAAI,CAACC,KAAK,CAACf,EAAE,CAAC;MACd,IAAI,CAACZ,EAAE,CAACe,IAAI,CAACC,IAAI,CAACC,QAAQ,CAACK,IAAI,CAAC,IAAIJ,QAAQ,CAACI,IAAI,EAAE,EAAE,CAAC,KAAKA,IAAI,EAAE;QAC/D,MAAM,IAAIM,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACA,IAAIC,QAAQ,GAAG;QAAEP,IAAI,EAAJA,IAAI;QAAEC,OAAO,EAAPA;MAAQ,CAAC;MAChC,IAAIC,IAAI,EAAE;QACRK,QAAQ,CAACL,IAAI,GAAGA,IAAI;MACtB;MACA,IAAI,CAACM,QAAQ,CAACD,QAAQ,CAAC;IACzB;EACF,CAAC,CAAC;EAhEF7B,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,QAAQ,CAACmB,KAAK,CAACzB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}