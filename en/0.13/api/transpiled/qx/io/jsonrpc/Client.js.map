{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractClient",
    "statics",
    "registerTransport",
    "events",
    "outgoingRequest",
    "error",
    "incomingRequest",
    "construct",
    "transportOrUri",
    "methodPrefix",
    "parser",
    "selectTransport",
    "getTransport",
    "addListener",
    "evt",
    "handleIncoming",
    "getData",
    "setMethodPrefix",
    "jsonrpc",
    "protocol",
    "Parser",
    "setParser",
    "__requests",
    "properties",
    "check",
    "nullable",
    "members",
    "_prependMethodPrefix",
    "method",
    "core",
    "Assert",
    "assertString",
    "getMethodPrefix",
    "startsWith",
    "_throwTransportException",
    "exception",
    "fireDataEvent",
    "forEach",
    "request",
    "Request",
    "handleTransportException",
    "send",
    "message",
    "Message",
    "Batch",
    "Error",
    "messages",
    "getBatch",
    "toArray",
    "requests",
    "filter",
    "id",
    "getId",
    "undefined",
    "Transport",
    "INVALID_ID",
    "toObject",
    "Environment",
    "get",
    "debug",
    "toString",
    "sendRequest",
    "params",
    "getPromise",
    "sendNotification",
    "notification",
    "Notification",
    "sendBatch",
    "batch",
    "assertInstance",
    "setMethod",
    "getMethod",
    "Promise",
    "all",
    "getPromises",
    "json",
    "getParser",
    "parse",
    "handleMessage",
    "e",
    "msg",
    "_cleanup",
    "dispose",
    "Result",
    "UNKNOWN_ID",
    "DUPLICATE_ID",
    "resolve",
    "getResult",
    "getError",
    "ex",
    "Protocol",
    "code",
    "reject",
    "environment",
    "Client"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/jsonrpc/Client.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * This class provides a JSON-RPC client object with auto-configuration of the\n * transport used (based on the URI passed).\n */\nqx.Class.define(\"qx.io.jsonrpc.Client\", {\n  extend: qx.io.transport.AbstractClient,\n\n  statics: {\n    // statics are not inherited from parent class\n    registerTransport: qx.io.transport.AbstractClient.registerTransport\n  },\n\n  events: {\n    /**\n     * Event fired before a request message is sent to the server.\n     * Event data is the {@link qx.io.jsonrpc.protocol.Message} to\n     * be sent. This also allows listeners to configure the transport\n     * object beforehand.\n     */\n    outgoingRequest: \"qx.event.type.Data\",\n\n    /**\n     * Event fired when a request results in an error. Event data is an instance of\n     * {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n     * or {@link qx.io.exception.Cancel}.\n     * Event fired when a message is received from the endpoint. Event data\n     * is an UTF-8 encoded string\n     */\n    error: \"qx.event.type.Data\",\n\n    /**\n     * Event fired when a peer-originated JSON-RPC message has been\n     * received from the peer endpoint. Event data is an instance of {@link\n     * qx.io.jsonrpc.message.Batch}, {@link qx.io.jsonrpc.message.Request}\n     * or {@link qx.io.jsonrpc.protocol.Notification}.\n     */\n    incomingRequest: \"qx.event.type.Data\"\n  },\n\n  /**\n   * @param {qx.io.transport.ITransport|String} transportOrUri\n   *    Transport object, which must implement {@link qx.io.transport.ITransport}\n   *    or a string URI, which will trigger auto-detection of transport, as long as an\n   *    appropriate transport has been registered with the static `registerTransport()` function.\n   * @param {String?} methodPrefix\n   *    Optional service name which will be prepended to the method\n   * @param {qx.io.jsonrpc.protocol.Parser?} parser\n   *    Optional parser object, which needs to be an instance of a subclass of {@link qx.io.jsonrpc.protocol.Parser}\n   */\n  construct(transportOrUri, methodPrefix, parser) {\n    super();\n    this.selectTransport(transportOrUri);\n    // listen for incoming messages\n    this.getTransport().addListener(\"message\", evt =>\n      this.handleIncoming(evt.getData())\n    );\n\n    if (!methodPrefix) {\n      methodPrefix = \"\";\n    }\n    this.setMethodPrefix(methodPrefix);\n    if (!parser) {\n      parser = new qx.io.jsonrpc.protocol.Parser();\n    }\n    this.setParser(parser);\n    this.__requests = [];\n  },\n\n  properties: {\n    /**\n     * An optional string which is prepended to the method name by the {@link #sendRequest}\n     * and {@link #sendNotification} methods\n     */\n    methodPrefix: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The parser object, which must be a subclass of {@link qx.io.jsonrpc.protocol.Parser}\n     */\n    parser: {\n      check: \"qx.io.jsonrpc.protocol.Parser\"\n    }\n  },\n\n  members: {\n    /**\n     * A cache of the requests which have been sent out and are still pending\n     */\n    __requests: null,\n\n    /**\n     * If a service name has been configured, prepend it to the method name,\n     * unless it has already been prefixed\n     * @param {String} method\n     * @return {String}\n     * @private\n     */\n    _prependMethodPrefix(method) {\n      qx.core.Assert.assertString(method);\n      let methodPrefix = this.getMethodPrefix();\n      if (methodPrefix && !method.startsWith(methodPrefix)) {\n        return `${methodPrefix}${method}`;\n      }\n      return method;\n    },\n\n    /**\n     * Fires \"error\" event and throws the error after informing pending requests\n     * about the error.\n     * @param exception\n     * @private\n     */\n    _throwTransportException(exception) {\n      this.fireDataEvent(\"error\", exception);\n      this.__requests.forEach(request => {\n        if (request instanceof qx.io.jsonrpc.protocol.Request) {\n          request.handleTransportException(exception);\n        }\n      });\n      throw exception;\n    },\n\n    /**\n     * Send the given JSON-RPC message object using the configured transport\n     *\n     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     */\n    async send(message) {\n      if (\n        !(\n          message instanceof qx.io.jsonrpc.protocol.Message ||\n          message instanceof qx.io.jsonrpc.protocol.Batch\n        )\n      ) {\n        throw new Error(\n          \"Argument must be instanceof qx.io.jsonrpc.protocol.Message or qx.io.jsonrpc.protocol.Batch\"\n        );\n      }\n\n      // filter by type\n      let messages =\n        message instanceof qx.io.jsonrpc.protocol.Batch\n          ? message.getBatch().toArray()\n          : [message];\n      let requests = messages.filter(\n        message => message instanceof qx.io.jsonrpc.protocol.Request\n      );\n\n      // store requests\n      requests.forEach(request => {\n        let id = request.getId();\n        if (this.__requests[id] !== undefined) {\n          throw new qx.io.exception.Transport(\n            `Request ID ${id} is already in use`,\n            qx.io.exception.Transport.INVALID_ID,\n            { request: message.toObject() }\n          );\n        }\n        this.__requests[id] = request;\n      });\n\n      // inform listeners\n      this.fireDataEvent(\"outgoingRequest\", message);\n\n      // debugging\n      if (qx.core.Environment.get(\"qx.io.jsonrpc.debug\")) {\n        this.debug(\">>> Outgoing json-rpc message: \" + message);\n      }\n\n      // send it async, using transport-specific implementation\n      return this.getTransport().send(message.toString());\n    },\n\n    /**\n     * Sends a single JSON-RPC request. If a method prefix name has been configured,\n     * it will be prepended to the method name.\n     * @param {String} method\n     * @param {Array|Object?} params\n     * @return {qx.Promise} Promise that resolves with the result to that request,\n     * and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace.\n     */\n    async sendRequest(method, params) {\n      const request = new qx.io.jsonrpc.protocol.Request(\n        this._prependMethodPrefix(method),\n        params\n      );\n\n      await this.send(request);\n      return await request.getPromise();\n    },\n\n    /**\n     * Sends a single JSON-RPC notification. Will use the method prefix\n     * @param {String} method\n     * @param {Array|Object?} params\n     * @return {qx.Promise} Promise that resolves immediately, (i.e. when the\n     * notification has been sent out (which is synchronous)\n     */\n    async sendNotification(method, params) {\n      const notification = new qx.io.jsonrpc.protocol.Notification(\n        this._prependMethodPrefix(method),\n        params\n      );\n\n      await this.send(notification);\n    },\n\n    /**\n     * Send the given message batch. Will use the method prefix.\n     * @param {qx.io.jsonrpc.protocol.Batch} batch\n     * @return {qx.Promise} Promise that resolves with an array of the responses\n     * to all requests in the batch, or rejects with any error that occurs.\n     */\n    async sendBatch(batch) {\n      qx.core.Assert.assertInstance(batch, qx.io.jsonrpc.protocol.Batch);\n      if (this.getMethodPrefix()) {\n        batch\n          .getBatch()\n          .forEach(message =>\n            message.setMethod(this._prependMethodPrefix(message.getMethod()))\n          );\n      }\n      await this.send(batch);\n      return await qx.Promise.all(batch.getPromises());\n    },\n\n    /**\n     * Receives and handles an incoming JSON-RPC compliant message data\n     * @param {String} json JSON data\n     */\n    handleIncoming(json) {\n      if (qx.core.Environment.get(\"qx.io.jsonrpc.debug\")) {\n        this.debug(\"<<< Incoming json-rpc message: \" + json);\n      }\n      let message;\n      try {\n        message = this.getParser().parse(json);\n        // act on each message\n        this.handleMessage(message);\n      } catch (e) {\n        this._throwTransportException(e);\n      } finally {\n        // cleanup\n        if (message instanceof qx.io.jsonrpc.protocol.Batch) {\n          message.getBatch().forEach(msg => this._cleanup(msg));\n        } else if (message instanceof qx.io.jsonrpc.protocol.Message) {\n          this._cleanup(message);\n        }\n      }\n    },\n\n    /**\n     * Clean up after a message has been received\n     * @param {qx.io.jsonrpc.protocol.Message} message\n     * @private\n     */\n    _cleanup(message) {\n      message.dispose();\n    },\n\n    /**\n     * Handle an incoming message or batch of messages\n     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message Message or Batch\n     */\n    handleMessage(message) {\n      // handle batches\n      if (message instanceof qx.io.jsonrpc.protocol.Batch) {\n        message.getBatch().forEach(msg => this.handleMessage(msg));\n        return;\n      }\n      // handle individual message\n      qx.core.Assert.assertInstance(message, qx.io.jsonrpc.protocol.Message);\n      let request;\n      let id;\n      if (\n        message instanceof qx.io.jsonrpc.protocol.Result ||\n        message instanceof qx.io.jsonrpc.protocol.Error\n      ) {\n        // handle results and errors, which are responses to sent requests\n        id = message.getId();\n        request = this.__requests[id];\n        if (request === undefined) {\n          // no request with this id exists\n          throw new qx.io.exception.Transport(\n            `Invalid jsonrpc response data: Unknown id ${id}.`,\n            qx.io.exception.Transport.UNKNOWN_ID,\n            message.toObject()\n          );\n        }\n        if (request === true) {\n          // the request has already been responded to\n          throw new qx.io.exception.Transport(\n            `Invalid jsonrpc response data: multiple responses with same id ${id}.`,\n            qx.io.exception.Transport.DUPLICATE_ID,\n            message.toObject()\n          );\n        }\n      }\n      // handle the different message types\n      if (message instanceof qx.io.jsonrpc.protocol.Result) {\n        // resolve the individual promise\n        request.getPromise().resolve(message.getResult());\n      } else if (message instanceof qx.io.jsonrpc.protocol.Error) {\n        let error = message.getError();\n        let ex = new qx.io.exception.Protocol(\n          error.message,\n          error.code,\n          message.toObject()\n        );\n\n        // inform listeners\n        this.fireDataEvent(\"error\", ex);\n        // reject the individual promise\n        request.getPromise().reject(ex);\n      } else if (\n        message instanceof qx.io.jsonrpc.protocol.Request ||\n        message instanceof qx.io.jsonrpc.protocol.Notification\n      ) {\n        // handle peer-originated requests and notifications\n        this.fireDataEvent(\"incomingRequest\", message);\n      } else {\n        throw new Error(\"Unhandled message:\" + message.toString());\n      }\n      // mark request as handled (and remove reference so it can be gc'ed)\n      this.__requests[id] = true;\n    }\n  },\n\n  environment: {\n    \"qx.io.jsonrpc.debug\": false\n  }\n});\n"
  ],
  "mappings": "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"
}