{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "transport",
    "AbstractClient",
    "statics",
    "registerTransport",
    "events",
    "outgoingRequest",
    "error",
    "incomingRequest",
    "construct",
    "transportOrUri",
    "methodPrefix",
    "parser",
    "selectTransport",
    "getTransport",
    "addListener",
    "evt",
    "handleIncoming",
    "getData",
    "setMethodPrefix",
    "jsonrpc",
    "protocol",
    "Parser",
    "setParser",
    "__requests",
    "properties",
    "check",
    "nullable",
    "members",
    "_prependMethodPrefix",
    "method",
    "core",
    "Assert",
    "assertString",
    "getMethodPrefix",
    "startsWith",
    "_throwTransportException",
    "exception",
    "fireDataEvent",
    "forEach",
    "request",
    "Request",
    "handleTransportException",
    "send",
    "message",
    "Message",
    "Batch",
    "Error",
    "messages",
    "getBatch",
    "toArray",
    "requests",
    "filter",
    "id",
    "getId",
    "undefined",
    "Transport",
    "INVALID_ID",
    "toObject",
    "Environment",
    "get",
    "debug",
    "toString",
    "sendRequest",
    "params",
    "getPromise",
    "sendNotification",
    "notification",
    "Notification",
    "sendBatch",
    "batch",
    "assertInstance",
    "setMethod",
    "getMethod",
    "Promise",
    "all",
    "getPromises",
    "json",
    "getParser",
    "parse",
    "handleMessage",
    "e",
    "msg",
    "_cleanup",
    "dispose",
    "Result",
    "UNKNOWN_ID",
    "DUPLICATE_ID",
    "resolve",
    "getResult",
    "getError",
    "ex",
    "Protocol",
    "code",
    "reject",
    "environment",
    "Client"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/jsonrpc/Client.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n      2020 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * This class provides a JSON-RPC client object with auto-configuration of the\n * transport used (based on the URI passed).\n */\nqx.Class.define(\"qx.io.jsonrpc.Client\", {\n  extend: qx.io.transport.AbstractClient,\n\n  statics: {\n    // statics are not inherited from parent class\n    registerTransport: qx.io.transport.AbstractClient.registerTransport\n  },\n\n  events: {\n    /**\n     * Event fired before a request message is sent to the server.\n     * Event data is the {@link qx.io.jsonrpc.protocol.Message} to\n     * be sent. This also allows listeners to configure the transport\n     * object beforehand.\n     */\n    outgoingRequest: \"qx.event.type.Data\",\n\n    /**\n     * Event fired when a request results in an error. Event data is an instance of\n     * {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n     * or {@link qx.io.exception.Cancel}.\n     * Event fired when a message is received from the endpoint. Event data\n     * is an UTF-8 encoded string\n     */\n    error: \"qx.event.type.Data\",\n\n    /**\n     * Event fired when a peer-originated JSON-RPC message has been\n     * received from the peer endpoint. Event data is an instance of {@link\n     * qx.io.jsonrpc.message.Batch}, {@link qx.io.jsonrpc.message.Request}\n     * or {@link qx.io.jsonrpc.protocol.Notification}.\n     */\n    incomingRequest: \"qx.event.type.Data\"\n  },\n\n  /**\n   * @param {qx.io.transport.ITransport|String} transportOrUri\n   *    Transport object, which must implement {@link qx.io.transport.ITransport}\n   *    or a string URI, which will trigger auto-detection of transport, as long as an\n   *    appropriate transport has been registered with the static `registerTransport()` function.\n   * @param {String?} methodPrefix\n   *    Optional service name which will be prepended to the method\n   * @param {qx.io.jsonrpc.protocol.Parser?} parser\n   *    Optional parser object, which needs to be an instance of a subclass of {@link qx.io.jsonrpc.protocol.Parser}\n   */\n  construct(transportOrUri, methodPrefix, parser) {\n    super();\n    this.selectTransport(transportOrUri);\n    // listen for incoming messages\n    this.getTransport().addListener(\"message\", evt =>\n      this.handleIncoming(evt.getData())\n    );\n\n    if (!methodPrefix) {\n      methodPrefix = \"\";\n    }\n    this.setMethodPrefix(methodPrefix);\n    if (!parser) {\n      parser = new qx.io.jsonrpc.protocol.Parser();\n    }\n    this.setParser(parser);\n    this.__requests = [];\n  },\n\n  properties: {\n    /**\n     * An optional string which is prepended to the method name by the {@link #sendRequest}\n     * and {@link #sendNotification} methods\n     */\n    methodPrefix: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The parser object, which must be a subclass of {@link qx.io.jsonrpc.protocol.Parser}\n     */\n    parser: {\n      check: \"qx.io.jsonrpc.protocol.Parser\"\n    }\n  },\n\n  members: {\n    /**\n     * A cache of the requests which have been sent out and are still pending\n     */\n    __requests: null,\n\n    /**\n     * If a service name has been configured, prepend it to the method name,\n     * unless it has already been prefixed\n     * @param {String} method\n     * @return {String}\n     * @private\n     */\n    _prependMethodPrefix(method) {\n      qx.core.Assert.assertString(method);\n      let methodPrefix = this.getMethodPrefix();\n      if (methodPrefix && !method.startsWith(methodPrefix)) {\n        return `${methodPrefix}${method}`;\n      }\n      return method;\n    },\n\n    /**\n     * Fires \"error\" event and throws the error after informing pending requests\n     * about the error.\n     * @param exception\n     * @private\n     */\n    _throwTransportException(exception) {\n      this.fireDataEvent(\"error\", exception);\n      this.__requests.forEach(request => {\n        if (request instanceof qx.io.jsonrpc.protocol.Request) {\n          request.handleTransportException(exception);\n        }\n      });\n      throw exception;\n    },\n\n    /**\n     * Send the given JSON-RPC message object using the configured transport\n     *\n     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message\n     * @return {qx.Promise} Promise that resolves (with no data)\n     * when the message has been successfully sent out, and rejects\n     * when there is an error or a cancellation up to that point.\n     */\n    async send(message) {\n      if (\n        !(\n          message instanceof qx.io.jsonrpc.protocol.Message ||\n          message instanceof qx.io.jsonrpc.protocol.Batch\n        )\n      ) {\n        throw new Error(\n          \"Argument must be instanceof qx.io.jsonrpc.protocol.Message or qx.io.jsonrpc.protocol.Batch\"\n        );\n      }\n\n      // filter by type\n      let messages =\n        message instanceof qx.io.jsonrpc.protocol.Batch\n          ? message.getBatch().toArray()\n          : [message];\n      let requests = messages.filter(\n        message => message instanceof qx.io.jsonrpc.protocol.Request\n      );\n\n      // store requests\n      requests.forEach(request => {\n        let id = request.getId();\n        if (this.__requests[id] !== undefined) {\n          throw new qx.io.exception.Transport(\n            `Request ID ${id} is already in use`,\n            qx.io.exception.Transport.INVALID_ID,\n            { request: message.toObject() }\n          );\n        }\n        this.__requests[id] = request;\n      });\n\n      // inform listeners\n      this.fireDataEvent(\"outgoingRequest\", message);\n\n      // debugging\n      if (qx.core.Environment.get(\"qx.io.jsonrpc.debug\")) {\n        this.debug(\">>> Outgoing json-rpc message: \" + message);\n      }\n\n      // send it async, using transport-specific implementation\n      return this.getTransport().send(message.toString());\n    },\n\n    /**\n     * Sends a single JSON-RPC request. If a method prefix name has been configured,\n     * it will be prepended to the method name.\n     * @param {String} method\n     * @param {Array|Object?} params\n     * @return {qx.Promise} Promise that resolves with the result to that request,\n     * and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace.\n     */\n    async sendRequest(method, params) {\n      const request = new qx.io.jsonrpc.protocol.Request(\n        this._prependMethodPrefix(method),\n        params\n      );\n\n      await this.send(request);\n      return await request.getPromise();\n    },\n\n    /**\n     * Sends a single JSON-RPC notification. Will use the method prefix\n     * @param {String} method\n     * @param {Array|Object?} params\n     * @return {qx.Promise} Promise that resolves immediately, (i.e. when the\n     * notification has been sent out (which is synchronous)\n     */\n    async sendNotification(method, params) {\n      const notification = new qx.io.jsonrpc.protocol.Notification(\n        this._prependMethodPrefix(method),\n        params\n      );\n\n      await this.send(notification);\n    },\n\n    /**\n     * Send the given message batch. Will use the method prefix.\n     * @param {qx.io.jsonrpc.protocol.Batch} batch\n     * @return {qx.Promise} Promise that resolves with an array of the responses\n     * to all requests in the batch, or rejects with any error that occurs.\n     */\n    async sendBatch(batch) {\n      qx.core.Assert.assertInstance(batch, qx.io.jsonrpc.protocol.Batch);\n      if (this.getMethodPrefix()) {\n        batch\n          .getBatch()\n          .forEach(message =>\n            message.setMethod(this._prependMethodPrefix(message.getMethod()))\n          );\n      }\n      await this.send(batch);\n      return await qx.Promise.all(batch.getPromises());\n    },\n\n    /**\n     * Receives and handles an incoming JSON-RPC compliant message data\n     * @param {String} json JSON data\n     */\n    handleIncoming(json) {\n      if (qx.core.Environment.get(\"qx.io.jsonrpc.debug\")) {\n        this.debug(\"<<< Incoming json-rpc message: \" + json);\n      }\n      let message;\n      try {\n        message = this.getParser().parse(json);\n        // act on each message\n        this.handleMessage(message);\n      } catch (e) {\n        this._throwTransportException(e);\n      } finally {\n        // cleanup\n        if (message instanceof qx.io.jsonrpc.protocol.Batch) {\n          message.getBatch().forEach(msg => this._cleanup(msg));\n        } else if (message instanceof qx.io.jsonrpc.protocol.Message) {\n          this._cleanup(message);\n        }\n      }\n    },\n\n    /**\n     * Clean up after a message has been received\n     * @param {qx.io.jsonrpc.protocol.Message} message\n     * @private\n     */\n    _cleanup(message) {\n      message.dispose();\n    },\n\n    /**\n     * Handle an incoming message or batch of messages\n     * @param {qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message Message or Batch\n     */\n    handleMessage(message) {\n      // handle batches\n      if (message instanceof qx.io.jsonrpc.protocol.Batch) {\n        message.getBatch().forEach(msg => this.handleMessage(msg));\n        return;\n      }\n      // handle individual message\n      qx.core.Assert.assertInstance(message, qx.io.jsonrpc.protocol.Message);\n      let request;\n      let id;\n      if (\n        message instanceof qx.io.jsonrpc.protocol.Result ||\n        message instanceof qx.io.jsonrpc.protocol.Error\n      ) {\n        // handle results and errors, which are responses to sent requests\n        id = message.getId();\n        request = this.__requests[id];\n        if (request === undefined) {\n          // no request with this id exists\n          throw new qx.io.exception.Transport(\n            `Invalid jsonrpc response data: Unknown id ${id}.`,\n            qx.io.exception.Transport.UNKNOWN_ID,\n            message.toObject()\n          );\n        }\n        if (request === true) {\n          // the request has already been responded to\n          throw new qx.io.exception.Transport(\n            `Invalid jsonrpc response data: multiple responses with same id ${id}.`,\n            qx.io.exception.Transport.DUPLICATE_ID,\n            message.toObject()\n          );\n        }\n      }\n      // handle the different message types\n      if (message instanceof qx.io.jsonrpc.protocol.Result) {\n        // resolve the individual promise\n        request.getPromise().resolve(message.getResult());\n      } else if (message instanceof qx.io.jsonrpc.protocol.Error) {\n        let error = message.getError();\n        let ex = new qx.io.exception.Protocol(\n          error.message,\n          error.code,\n          message.toObject()\n        );\n\n        // inform listeners\n        this.fireDataEvent(\"error\", ex);\n        // reject the individual promise\n        request.getPromise().reject(ex);\n      } else if (\n        message instanceof qx.io.jsonrpc.protocol.Request ||\n        message instanceof qx.io.jsonrpc.protocol.Notification\n      ) {\n        // handle peer-originated requests and notifications\n        this.fireDataEvent(\"incomingRequest\", message);\n      } else {\n        throw new Error(\"Unhandled message:\" + message.toString());\n      }\n      // mark request as handled (and remove reference so it can be gc'ed)\n      this.__requests[id] = true;\n    }\n  },\n\n  environment: {\n    \"qx.io.jsonrpc.debug\": false\n  }\n});\n"
  ],
  "mappings": "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"
}