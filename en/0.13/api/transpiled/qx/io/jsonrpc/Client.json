{
  "className": "qx.io.jsonrpc.Client",
  "packageName": "qx.io.jsonrpc",
  "name": "Client",
  "superClass": "qx.io.transport.AbstractClient",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0,
        "index": 588
      },
      "end": {
        "line": 355,
        "column": 3,
        "index": 11568
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This class provides a JSON-RPC client object with auto-configuration of the\n transport used (based on the URI passed).</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "registerTransport": {
      "location": {
        "start": {
          "line": 28,
          "column": 4,
          "index": 741
        },
        "end": {
          "line": 28,
          "column": 71,
          "index": 808
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "public"
    }
  },
  "events": {
    "outgoingRequest": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 1077
        },
        "end": {
          "line": 38,
          "column": 41,
          "index": 1114
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired before a request message is sent to the server.\n Event data is the {@link qx.io.jsonrpc.protocol.Message} to\n be sent. This also allows listeners to configure the transport\n object beforehand.</p>"
          }
        ]
      },
      "name": "outgoingRequest",
      "type": "qx.event.type.Data"
    },
    "error": {
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1449
        },
        "end": {
          "line": 47,
          "column": 31,
          "index": 1476
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired when a request results in an error. Event data is an instance of\n {@link qx.io.exception.Transport}, {@link qx.io.exception.Protocol},\n or {@link qx.io.exception.Cancel}.\n Event fired when a message is received from the endpoint. Event data\n is an UTF-8 encoded string</p>"
          }
        ]
      },
      "name": "error",
      "type": "qx.event.type.Data"
    },
    "incomingRequest": {
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1773
        },
        "end": {
          "line": 55,
          "column": 41,
          "index": 1810
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Event fired when a peer-originated JSON-RPC message has been\n received from the peer endpoint. Event data is an instance of {@link\n qx.io.jsonrpc.message.Batch}, {@link qx.io.jsonrpc.message.Request}\n or {@link qx.io.jsonrpc.protocol.Notification}.</p>"
          }
        ]
      },
      "name": "incomingRequest",
      "type": "qx.event.type.Data"
    }
  },
  "construct": {
    "location": {
      "start": {
        "line": 68,
        "column": 2,
        "index": 2433
      },
      "end": {
        "line": 85,
        "column": 3,
        "index": 2907
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "{qx.io.transport.ITransport|String} transportOrUri\n    Transport object, which must implement {@link qx.io.transport.ITransport}\n    or a string URI, which will trigger auto-detection of transport, as long as an\n    appropriate transport has been registered with the static <code>registerTransport()</code> function.",
          "paramName": "transportOrUri",
          "description": "Transport object, which must implement {@link qx.io.transport.ITransport}\n    or a string URI, which will trigger auto-detection of transport, as long as an\n    appropriate transport has been registered with the static <code>registerTransport()</code> function.",
          "type": [
            "qx.io.transport.ITransport",
            "String"
          ]
        },
        {
          "name": "@param",
          "body": "{String?} methodPrefix\n    Optional service name which will be prepended to the method",
          "paramName": "methodPrefix",
          "description": "Optional service name which will be prepended to the method",
          "optional": true,
          "type": "String"
        },
        {
          "name": "@param",
          "body": "{qx.io.jsonrpc.protocol.Parser?} parser\n    Optional parser object, which needs to be an instance of a subclass of {@link qx.io.jsonrpc.protocol.Parser}",
          "paramName": "parser",
          "description": "Optional parser object, which needs to be an instance of a subclass of {@link qx.io.jsonrpc.protocol.Parser}",
          "optional": true,
          "type": "qx.io.jsonrpc.protocol.Parser"
        }
      ]
    }
  },
  "properties": {
    "methodPrefix": {
      "location": {
        "start": {
          "line": 92,
          "column": 4,
          "index": 3083
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3148
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>An optional string which is prepended to the method name by the {@link #sendRequest}\n and {@link #sendNotification} methods</p>"
          }
        ]
      },
      "name": "methodPrefix",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "parser": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 3263
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 3323
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The parser object, which must be a subclass of {@link qx.io.jsonrpc.protocol.Parser}</p>"
          }
        ]
      },
      "name": "parser",
      "propertyType": "new",
      "check": "qx.io.jsonrpc.protocol.Parser"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__requests": {
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 3441
        },
        "end": {
          "line": 109,
          "column": 20,
          "index": 3457
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A cache of the requests which have been sent out and are still pending</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_prependMethodPrefix": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3670
        },
        "end": {
          "line": 125,
          "column": 5,
          "index": 3932
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If a service name has been configured, prepend it to the method name,\n unless it has already been prefixed</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_throwTransportException": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4100
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4395
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires \"error\" event and throws the error after informing pending requests\n about the error.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "exception",
            "paramName": "exception",
            "type": ""
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "send": {
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4785
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 6169
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given JSON-RPC message object using the configured transport</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves (with no data)\n when the message has been successfully sent out, and rejects\n when there is an error or a cancellation up to that point.",
            "type": "qx.Promise",
            "description": " Promise that resolves (with no data)\n when the message has been successfully sent out, and rejects\n when there is an error or a cancellation up to that point."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sendRequest": {
      "location": {
        "start": {
          "line": 205,
          "column": 4,
          "index": 6562
        },
        "end": {
          "line": 213,
          "column": 5,
          "index": 6802
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a single JSON-RPC request. If a method prefix name has been configured,\n it will be prepended to the method name.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method"
          },
          {
            "name": "@param",
            "body": "{Array|Object?} params"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves with the result to that request,\n and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace.",
            "type": "qx.Promise",
            "description": " Promise that resolves with the result to that request,\n and rejects with an exception in the {@link qx.io.jsonrpc.exception} namespace."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sendNotification": {
      "location": {
        "start": {
          "line": 222,
          "column": 4,
          "index": 7103
        },
        "end": {
          "line": 229,
          "column": 5,
          "index": 7322
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a single JSON-RPC notification. Will use the method prefix</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} method"
          },
          {
            "name": "@param",
            "body": "{Array|Object?} params"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves immediately, (i.e. when the\n notification has been sent out (which is synchronous)",
            "type": "qx.Promise",
            "description": " Promise that resolves immediately, (i.e. when the\n notification has been sent out (which is synchronous)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sendBatch": {
      "location": {
        "start": {
          "line": 237,
          "column": 4,
          "index": 7618
        },
        "end": {
          "line": 248,
          "column": 5,
          "index": 8009
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Send the given message batch. Will use the method prefix.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Batch} batch"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} Promise that resolves with an array of the responses\n to all requests in the batch, or rejects with any error that occurs.",
            "type": "qx.Promise",
            "description": " Promise that resolves with an array of the responses\n to all requests in the batch, or rejects with any error that occurs."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "handleIncoming": {
      "location": {
        "start": {
          "line": 254,
          "column": 4,
          "index": 8142
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 8798
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Receives and handles an incoming JSON-RPC compliant message data</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} json JSON data",
            "paramName": "json",
            "description": "JSON data",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_cleanup": {
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 8942
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 8992
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clean up after a message has been received</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message} message"
          }
        ],
        "@private": [
          {
            "name": "@private",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "handleMessage": {
      "location": {
        "start": {
          "line": 288,
          "column": 4,
          "index": 9171
        },
        "end": {
          "line": 349,
          "column": 5,
          "index": 11504
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handle an incoming message or batch of messages</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{qx.io.jsonrpc.protocol.Message|qx.io.jsonrpc.protocol.Batch} message Message or Batch",
            "paramName": "message",
            "description": "Message or Batch",
            "type": [
              "qx.io.jsonrpc.protocol.Message",
              "qx.io.jsonrpc.protocol.Batch"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getTransport": {
      "type": "function",
      "name": "getTransport",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>transport</code>.\n\nFor further details take a look at the property definition: {@link #transport}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.io.transport.ITransport",
            "desc": "Returns the value for transport"
          }
        ]
      }
    },
    "setTransport": {
      "type": "function",
      "name": "setTransport",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>transport</code>.\n\nFor further details take a look at the property definition: {@link #transport}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.io.transport.ITransport",
            "paramName": "value",
            "desc": "Value for transport"
          }
        ]
      }
    },
    "resetTransport": {
      "type": "function",
      "name": "resetTransport",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>transport</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #transport}."
          }
        ]
      }
    },
    "getMethodPrefix": {
      "type": "function",
      "name": "getMethodPrefix",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>methodPrefix</code>.\n\nFor further details take a look at the property definition: {@link #methodPrefix}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for methodPrefix"
          }
        ]
      }
    },
    "setMethodPrefix": {
      "type": "function",
      "name": "setMethodPrefix",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>methodPrefix</code>.\n\nFor further details take a look at the property definition: {@link #methodPrefix}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for methodPrefix"
          }
        ]
      }
    },
    "resetMethodPrefix": {
      "type": "function",
      "name": "resetMethodPrefix",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>methodPrefix</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #methodPrefix}."
          }
        ]
      }
    },
    "getParser": {
      "type": "function",
      "name": "getParser",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>parser</code>.\n\nFor further details take a look at the property definition: {@link #parser}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.io.jsonrpc.protocol.Parser",
            "desc": "Returns the value for parser"
          }
        ]
      }
    },
    "setParser": {
      "type": "function",
      "name": "setParser",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>parser</code>.\n\nFor further details take a look at the property definition: {@link #parser}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.io.jsonrpc.protocol.Parser",
            "paramName": "value",
            "desc": "Value for parser"
          }
        ]
      }
    },
    "resetParser": {
      "type": "function",
      "name": "resetParser",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>parser</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #parser}."
          }
        ]
      }
    }
  },
  "descendants": []
}