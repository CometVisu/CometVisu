{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "request",
    "AbstractRequest",
    "construct",
    "url",
    "method",
    "undefined",
    "setMethod",
    "constructor",
    "call",
    "_parser",
    "_createResponseParser",
    "events",
    "readyStateChange",
    "success",
    "load",
    "statusError",
    "properties",
    "init",
    "async",
    "check",
    "accept",
    "nullable",
    "cache",
    "value",
    "lang",
    "Type",
    "isBoolean",
    "isString",
    "members",
    "_createTransport",
    "bom",
    "Xhr",
    "_getConfiguredUrl",
    "getUrl",
    "serializedData",
    "getMethod",
    "getRequestData",
    "_serializeData",
    "util",
    "Uri",
    "appendParamsToUrl",
    "getCache",
    "nocache",
    "Date",
    "valueOf",
    "_getConfiguredRequestHeaders",
    "headers",
    "isAllowsBody",
    "Request",
    "methodAllowsRequestBody",
    "isFormData",
    "getClass",
    "isCrossDomain",
    "getAccept",
    "core",
    "Environment",
    "get",
    "debug",
    "_getMethod",
    "_isAsync",
    "isAsync",
    "ResponseParser",
    "_getParsedResponse",
    "response",
    "_transport",
    "responseType",
    "responseText",
    "contentType",
    "getResponseContentType",
    "parsedResponse",
    "parse",
    "_parserFailed",
    "e",
    "fireDataEvent",
    "error",
    "setParser",
    "parser"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/request/Xhr.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Tristan Koch (tristankoch)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Send HTTP requests and handle responses using the HTTP client API.\r\n *\r\n * Configuration of the request is done with properties. Events are fired for\r\n * various states in the life cycle of a request, such as \"success\". Request\r\n * data is transparently processed.\r\n *\r\n * Here is how to request a JSON file and listen to the \"success\" event:\r\n *\r\n * <pre class=\"javascript\">\r\n * var req = new qx.io.request.Xhr(\"/some/path/file.json\");\r\n *\r\n * req.addListener(\"success\", function(e) {\r\n *   var req = e.getTarget();\r\n *\r\n *   // Response parsed according to the server's\r\n *   // response content type, e.g. JSON\r\n *   req.getResponse();\r\n * }, this);\r\n *\r\n * // Send request\r\n * req.send();\r\n * </pre>\r\n *\r\n * Some noteable features:\r\n *\r\n * * Abstraction of low-level request\r\n * * Convenient setup using properties\r\n * * Fine-grained events\r\n * * Symbolic phases\r\n * * Transparent processing of request data\r\n * * Stream-lined authentication\r\n * * Automagic parsing of response based on content type\r\n *\r\n * Cross-origin requests are supported, but require browser support\r\n * (see <a href=\"http://caniuse.com/#search=CORS\">caniuse.com</a>) and backend configuration\r\n * (see <a href=\"https://developer.mozilla.org/en-US/docs/docs/HTTP/Access_control_CORS>MDN</a>).\r\n * Note that IE's <code>XDomainRequest</code> is not currently supported.\r\n * For a cross-browser alternative, consider {@link qx.io.request.Jsonp}.\r\n *\r\n * In order to debug requests, set the environment flag\r\n * <code>qx.debug.io</code>.\r\n *\r\n * Internally uses {@link qx.bom.request.Xhr}.\r\n */\r\nqx.Class.define(\"qx.io.request.Xhr\", {\r\n  extend: qx.io.request.AbstractRequest,\r\n\r\n  /**\r\n   * @param url {String?} The URL of the resource to request.\r\n   * @param method {String?} The HTTP method.\r\n   */\r\n  construct(url, method) {\r\n    if (method !== undefined) {\r\n      this.setMethod(method);\r\n    }\r\n\r\n    super(url);\r\n    this._parser = this._createResponseParser();\r\n  },\r\n\r\n  // Only document events with transport specific details.\r\n  // For a complete list of events, refer to AbstractRequest.\r\n\r\n  events: {\r\n    /**\r\n     * Fired on every change of the transport’s readyState.\r\n     *\r\n     * See {@link qx.bom.request.Xhr} for available readyStates.\r\n     */\r\n    readyStateChange: \"qx.event.type.Event\",\r\n\r\n    /**\r\n     * Fired when request completes without error and transport status\r\n     * indicates success.\r\n     *\r\n     * Refer to {@link qx.util.Request#isSuccessful} for a list of HTTP\r\n     * status considered successful.\r\n     */\r\n    success: \"qx.event.type.Event\",\r\n\r\n    /**\r\n     * Fired when request completes without error.\r\n     *\r\n     * Every request not canceled or aborted completes. This means that\r\n     * even requests receiving a response with erroneous HTTP status\r\n     * fire a \"load\" event. If you are only interested in successful\r\n     * responses, listen to the {@link #success} event instead.\r\n     */\r\n    load: \"qx.event.type.Event\",\r\n\r\n    /**\r\n     * Fired when request completes without error but erroneous HTTP status.\r\n     *\r\n     * Refer to {@link qx.util.Request#isSuccessful} for a list of HTTP\r\n     * status considered successful.\r\n     */\r\n    statusError: \"qx.event.type.Event\"\r\n  },\r\n\r\n  properties: {\r\n    /**\r\n     * The HTTP method.\r\n     */\r\n    method: {\r\n      init: \"GET\"\r\n    },\r\n\r\n    /**\r\n     * Whether the request should be executed asynchronously.\r\n     */\r\n    async: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    },\r\n\r\n    /**\r\n     * The content type to accept. By default, every content type\r\n     * is accepted.\r\n     *\r\n     * Note: Some backends send distinct representations of the same\r\n     * resource depending on the content type accepted. For instance,\r\n     * a backend may respond with either a JSON (the accept header\r\n     * indicates so) or a HTML representation (the default, no accept\r\n     * header given).\r\n     */\r\n    accept: {\r\n      check: \"String\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * Whether to allow request to be answered from cache.\r\n     *\r\n     * Allowed values:\r\n     *\r\n     * * <code>true</code>: Allow caching (Default)\r\n     * * <code>false</code>: Prohibit caching. Appends nocache parameter to URL.\r\n     * * <code>String</code>: Any Cache-Control request directive\r\n     *\r\n     * If a string is given, it is inserted in the request's Cache-Control\r\n     * header. A request’s Cache-Control header may contain a number of directives\r\n     * controlling the behavior of any caches in between client and origin\r\n     * server.\r\n     *\r\n     * * <code>\"no-cache\"</code>: Force caches to submit request in order to\r\n     *   validate the freshness of the representation. Note that the requested\r\n     *   resource may still be served from cache if the representation is\r\n     *   considered fresh. Use this directive to ensure freshness but save\r\n     *   bandwidth when possible.\r\n     * * <code>\"no-store\"</code>: Do not keep a copy of the representation under\r\n     *   any conditions.\r\n     *\r\n     * See <a href=\"http://www.mnot.net/cache_docs/#CACHE-CONTROL\">\r\n     * Caching tutorial</a> for an excellent introduction to Caching in general.\r\n     * Refer to the corresponding section in the\r\n     * <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">\r\n     * HTTP 1.1 specification</a> for more details and advanced directives.\r\n     *\r\n     * It is recommended to choose an appropriate Cache-Control directive rather\r\n     * than prohibit caching using the nocache parameter.\r\n     */\r\n    cache: {\r\n      check(value) {\r\n        return qx.lang.Type.isBoolean(value) || qx.lang.Type.isString(value);\r\n      },\r\n      init: true\r\n    }\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * @type {Function} Parser.\r\n     */\r\n    _parser: null,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      CONFIGURE TRANSPORT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Create XHR transport.\r\n     *\r\n     * @return {qx.bom.request.Xhr} Transport.\r\n     */\r\n    _createTransport() {\r\n      return new qx.bom.request.Xhr();\r\n    },\r\n\r\n    /**\r\n     * Get configured URL.\r\n     *\r\n     * Append request data to URL if HTTP method is GET. Append random\r\n     * string to URL if required by value of {@link #cache}.\r\n     *\r\n     * @return {String} The configured URL.\r\n     */\r\n    _getConfiguredUrl() {\r\n      var url = this.getUrl(),\r\n        serializedData;\r\n\r\n      if (this.getMethod() === \"GET\" && this.getRequestData()) {\r\n        serializedData = this._serializeData(this.getRequestData());\r\n        url = qx.util.Uri.appendParamsToUrl(url, serializedData);\r\n      }\r\n\r\n      if (this.getCache() === false) {\r\n        // Make sure URL cannot be served from cache and new request is made\r\n        url = qx.util.Uri.appendParamsToUrl(url, {\r\n          nocache: new Date().valueOf()\r\n        });\r\n      }\r\n\r\n      return url;\r\n    },\r\n\r\n    // overridden\r\n    _getConfiguredRequestHeaders() {\r\n      var headers = {},\r\n        isAllowsBody = qx.util.Request.methodAllowsRequestBody(\r\n          this.getMethod()\r\n        ),\r\n        isFormData = qx.Bootstrap.getClass(this.getRequestData()) == \"FormData\";\r\n\r\n      // Follow convention to include X-Requested-With header when same origin\r\n      if (!qx.util.Request.isCrossDomain(this.getUrl())) {\r\n        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\r\n      }\r\n\r\n      // Include Cache-Control header if configured\r\n      if (qx.lang.Type.isString(this.getCache())) {\r\n        headers[\"Cache-Control\"] = this.getCache();\r\n      }\r\n\r\n      // By default, set content-type urlencoded for requests with body\r\n      if (this.getRequestData() && isAllowsBody && !isFormData) {\r\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\r\n      }\r\n\r\n      // What representations to accept\r\n      if (this.getAccept()) {\r\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\r\n          this.debug(\"Accepting: '\" + this.getAccept() + \"'\");\r\n        }\r\n        headers[\"Accept\"] = this.getAccept();\r\n      }\r\n\r\n      return headers;\r\n    },\r\n\r\n    // overridden\r\n    _getMethod() {\r\n      return this.getMethod();\r\n    },\r\n\r\n    // overridden\r\n    _isAsync() {\r\n      return this.isAsync();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PARSING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Create response parser.\r\n     *\r\n     * @return {qx.util.ResponseParser} parser.\r\n     */\r\n    _createResponseParser() {\r\n      return new qx.util.ResponseParser();\r\n    },\r\n\r\n    /**\r\n     * Returns response parsed with parser determined by content type.\r\n     *\r\n     * @return {String|Object} The parsed response of the request.\r\n     */\r\n    _getParsedResponse() {\r\n      var response =\r\n          this._transport.responseType === \"blob\"\r\n            ? this._transport.response\r\n            : this._transport.responseText,\r\n        contentType = this.getResponseContentType() || \"\",\r\n        parsedResponse = \"\";\r\n\r\n      try {\r\n        parsedResponse = this._parser.parse(response, contentType);\r\n        this._parserFailed = false;\r\n      } catch (e) {\r\n        this._parserFailed = true;\r\n        this.fireDataEvent(\"parseError\", {\r\n          error: e,\r\n          response: response\r\n        });\r\n      }\r\n\r\n      return parsedResponse;\r\n    },\r\n\r\n    /**\r\n     * Set parser used to parse response once request has\r\n     * completed successfully.\r\n     *\r\n     * @see qx.util.ResponseParser#setParser\r\n     *\r\n     * @param parser {String|Function}\r\n     * @return {Function} The parser function\r\n     */\r\n    setParser(parser) {\r\n      return this._parser.setParser(parser);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,eAAe;IAErC;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,GAAG,EAAEC,MAAM,EAAE;MACrB,IAAIA,MAAM,KAAKC,SAAS,EAAE;QACxB,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC;MACxB;MAEAZ,EAAA,CAAAO,EAAA,CAAAC,OAAA,CAAAC,eAAA,CAAAM,WAAA,CAAAC,IAAA,OAAML,GAAG;MACT,IAAI,CAACM,OAAO,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC;IAC7C,CAAC;IAED;IACA;;IAEAC,MAAM,EAAE;MACN;AACJ;AACA;AACA;AACA;MACIC,gBAAgB,EAAE,qBAAqB;MAEvC;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,qBAAqB;MAE9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,EAAE,qBAAqB;MAE3B;AACJ;AACA;AACA;AACA;AACA;MACIC,WAAW,EAAE;IACf,CAAC;IAEDC,UAAU,EAAE;MACV;AACJ;AACA;MACIZ,MAAM,EAAE;QACNa,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;MACIC,KAAK,EAAE;QACLC,KAAK,EAAE,SAAS;QAChBF,IAAI,EAAE;MACR,CAAC;MAED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"
}