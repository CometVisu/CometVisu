{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "io",
    "request",
    "AbstractRequest",
    "construct",
    "url",
    "method",
    "undefined",
    "setMethod",
    "_parser",
    "_createResponseParser",
    "events",
    "readyStateChange",
    "success",
    "load",
    "statusError",
    "properties",
    "init",
    "async",
    "check",
    "accept",
    "nullable",
    "cache",
    "value",
    "lang",
    "Type",
    "isBoolean",
    "isString",
    "members",
    "_createTransport",
    "bom",
    "Xhr",
    "_getConfiguredUrl",
    "getUrl",
    "serializedData",
    "getMethod",
    "getRequestData",
    "_serializeData",
    "util",
    "Uri",
    "appendParamsToUrl",
    "getCache",
    "nocache",
    "Date",
    "valueOf",
    "_getConfiguredRequestHeaders",
    "headers",
    "isAllowsBody",
    "Request",
    "methodAllowsRequestBody",
    "isFormData",
    "getClass",
    "isCrossDomain",
    "getAccept",
    "core",
    "Environment",
    "get",
    "debug",
    "_getMethod",
    "_isAsync",
    "isAsync",
    "ResponseParser",
    "_getParsedResponse",
    "response",
    "_transport",
    "responseType",
    "responseText",
    "contentType",
    "getResponseContentType",
    "parsedResponse",
    "parse",
    "_parserFailed",
    "e",
    "fireDataEvent",
    "error",
    "setParser",
    "parser"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/request/Xhr.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * Send HTTP requests and handle responses using the HTTP client API.\n *\n * Configuration of the request is done with properties. Events are fired for\n * various states in the life cycle of a request, such as \"success\". Request\n * data is transparently processed.\n *\n * Here is how to request a JSON file and listen to the \"success\" event:\n *\n * <pre class=\"javascript\">\n * var req = new qx.io.request.Xhr(\"/some/path/file.json\");\n *\n * req.addListener(\"success\", function(e) {\n *   var req = e.getTarget();\n *\n *   // Response parsed according to the server's\n *   // response content type, e.g. JSON\n *   req.getResponse();\n * }, this);\n *\n * // Send request\n * req.send();\n * </pre>\n *\n * Some noteable features:\n *\n * * Abstraction of low-level request\n * * Convenient setup using properties\n * * Fine-grained events\n * * Symbolic phases\n * * Transparent processing of request data\n * * Stream-lined authentication\n * * Automagic parsing of response based on content type\n *\n * Cross-origin requests are supported, but require browser support\n * (see <a href=\"http://caniuse.com/#search=CORS\">caniuse.com</a>) and backend configuration\n * (see <a href=\"https://developer.mozilla.org/en-US/docs/docs/HTTP/Access_control_CORS>MDN</a>).\n * Note that IE's <code>XDomainRequest</code> is not currently supported.\n * For a cross-browser alternative, consider {@link qx.io.request.Jsonp}.\n *\n * In order to debug requests, set the environment flag\n * <code>qx.debug.io</code>.\n *\n * Internally uses {@link qx.bom.request.Xhr}.\n */\nqx.Class.define(\"qx.io.request.Xhr\", {\n  extend: qx.io.request.AbstractRequest,\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   * @param method {String?} The HTTP method.\n   */\n  construct(url, method) {\n    if (method !== undefined) {\n      this.setMethod(method);\n    }\n\n    super(url);\n    this._parser = this._createResponseParser();\n  },\n\n  // Only document events with transport specific details.\n  // For a complete list of events, refer to AbstractRequest.\n\n  events: {\n    /**\n     * Fired on every change of the transport’s readyState.\n     *\n     * See {@link qx.bom.request.Xhr} for available readyStates.\n     */\n    readyStateChange: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport status\n     * indicates success.\n     *\n     * Refer to {@link qx.util.Request#isSuccessful} for a list of HTTP\n     * status considered successful.\n     */\n    success: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     *\n     * Every request not canceled or aborted completes. This means that\n     * even requests receiving a response with erroneous HTTP status\n     * fire a \"load\" event. If you are only interested in successful\n     * responses, listen to the {@link #success} event instead.\n     */\n    load: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     *\n     * Refer to {@link qx.util.Request#isSuccessful} for a list of HTTP\n     * status considered successful.\n     */\n    statusError: \"qx.event.type.Event\"\n  },\n\n  properties: {\n    /**\n     * The HTTP method.\n     */\n    method: {\n      init: \"GET\"\n    },\n\n    /**\n     * Whether the request should be executed asynchronously.\n     */\n    async: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * The content type to accept. By default, every content type\n     * is accepted.\n     *\n     * Note: Some backends send distinct representations of the same\n     * resource depending on the content type accepted. For instance,\n     * a backend may respond with either a JSON (the accept header\n     * indicates so) or a HTML representation (the default, no accept\n     * header given).\n     */\n    accept: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * Whether to allow request to be answered from cache.\n     *\n     * Allowed values:\n     *\n     * * <code>true</code>: Allow caching (Default)\n     * * <code>false</code>: Prohibit caching. Appends nocache parameter to URL.\n     * * <code>String</code>: Any Cache-Control request directive\n     *\n     * If a string is given, it is inserted in the request's Cache-Control\n     * header. A request’s Cache-Control header may contain a number of directives\n     * controlling the behavior of any caches in between client and origin\n     * server.\n     *\n     * * <code>\"no-cache\"</code>: Force caches to submit request in order to\n     *   validate the freshness of the representation. Note that the requested\n     *   resource may still be served from cache if the representation is\n     *   considered fresh. Use this directive to ensure freshness but save\n     *   bandwidth when possible.\n     * * <code>\"no-store\"</code>: Do not keep a copy of the representation under\n     *   any conditions.\n     *\n     * See <a href=\"http://www.mnot.net/cache_docs/#CACHE-CONTROL\">\n     * Caching tutorial</a> for an excellent introduction to Caching in general.\n     * Refer to the corresponding section in the\n     * <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">\n     * HTTP 1.1 specification</a> for more details and advanced directives.\n     *\n     * It is recommended to choose an appropriate Cache-Control directive rather\n     * than prohibit caching using the nocache parameter.\n     */\n    cache: {\n      check(value) {\n        return qx.lang.Type.isBoolean(value) || qx.lang.Type.isString(value);\n      },\n      init: true\n    }\n  },\n\n  members: {\n    /**\n     * @type {Function} Parser.\n     */\n    _parser: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create XHR transport.\n     *\n     * @return {qx.bom.request.Xhr} Transport.\n     */\n    _createTransport() {\n      return new qx.bom.request.Xhr();\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * Append request data to URL if HTTP method is GET. Append random\n     * string to URL if required by value of {@link #cache}.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl() {\n      var url = this.getUrl(),\n        serializedData;\n\n      if (this.getMethod() === \"GET\" && this.getRequestData()) {\n        serializedData = this._serializeData(this.getRequestData());\n        url = qx.util.Uri.appendParamsToUrl(url, serializedData);\n      }\n\n      if (this.getCache() === false) {\n        // Make sure URL cannot be served from cache and new request is made\n        url = qx.util.Uri.appendParamsToUrl(url, {\n          nocache: new Date().valueOf()\n        });\n      }\n\n      return url;\n    },\n\n    // overridden\n    _getConfiguredRequestHeaders() {\n      var headers = {},\n        isAllowsBody = qx.util.Request.methodAllowsRequestBody(\n          this.getMethod()\n        ),\n        isFormData = qx.Bootstrap.getClass(this.getRequestData()) == \"FormData\";\n\n      // Follow convention to include X-Requested-With header when same origin\n      if (!qx.util.Request.isCrossDomain(this.getUrl())) {\n        headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n      }\n\n      // Include Cache-Control header if configured\n      if (qx.lang.Type.isString(this.getCache())) {\n        headers[\"Cache-Control\"] = this.getCache();\n      }\n\n      // By default, set content-type urlencoded for requests with body\n      if (this.getRequestData() && isAllowsBody && !isFormData) {\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n      }\n\n      // What representations to accept\n      if (this.getAccept()) {\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\"Accepting: '\" + this.getAccept() + \"'\");\n        }\n        headers[\"Accept\"] = this.getAccept();\n      }\n\n      return headers;\n    },\n\n    // overridden\n    _getMethod() {\n      return this.getMethod();\n    },\n\n    // overridden\n    _isAsync() {\n      return this.isAsync();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PARSING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create response parser.\n     *\n     * @return {qx.util.ResponseParser} parser.\n     */\n    _createResponseParser() {\n      return new qx.util.ResponseParser();\n    },\n\n    /**\n     * Returns response parsed with parser determined by content type.\n     *\n     * @return {String|Object} The parsed response of the request.\n     */\n    _getParsedResponse() {\n      var response =\n          this._transport.responseType === \"blob\"\n            ? this._transport.response\n            : this._transport.responseText,\n        contentType = this.getResponseContentType() || \"\",\n        parsedResponse = \"\";\n\n      try {\n        parsedResponse = this._parser.parse(response, contentType);\n        this._parserFailed = false;\n      } catch (e) {\n        this._parserFailed = true;\n        this.fireDataEvent(\"parseError\", {\n          error: e,\n          response: response\n        });\n      }\n\n      return parsedResponse;\n    },\n\n    /**\n     * Set parser used to parse response once request has\n     * completed successfully.\n     *\n     * @see qx.util.ResponseParser#setParser\n     *\n     * @param parser {String|Function}\n     * @return {Function} The parser function\n     */\n    setParser(parser) {\n      return this._parser.setParser(parser);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EAAqC;IACnCC,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,OAAN,CAAcC,eADa;;IAGnC;AACF;AACA;AACA;IACEC,SAPmC,qBAOzBC,GAPyB,EAOpBC,MAPoB,EAOZ;MACrB,IAAIA,MAAM,KAAKC,SAAf,EAA0B;QACxB,KAAKC,SAAL,CAAeF,MAAf;MACD;;MAED,qDAAMD,GAAN;MACA,KAAKI,OAAL,GAAe,KAAKC,qBAAL,EAAf;IACD,CAdkC;IAgBnC;IACA;IAEAC,MAAM,EAAE;MACN;AACJ;AACA;AACA;AACA;MACIC,gBAAgB,EAAE,qBANZ;;MAQN;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,qBAfH;;MAiBN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,EAAE,qBAzBA;;MA2BN;AACJ;AACA;AACA;AACA;AACA;MACIC,WAAW,EAAE;IAjCP,CAnB2B;IAuDnCC,UAAU,EAAE;MACV;AACJ;AACA;MACIV,MAAM,EAAE;QACNW,IAAI,EAAE;MADA,CAJE;;MAQV;AACJ;AACA;MACIC,KAAK,EAAE;QACLC,KAAK,EAAE,SADF;QAELF,IAAI,EAAE;MAFD,CAXG;;MAgBV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,MAAM,EAAE;QACND,KAAK,EAAE,QADD;QAENE,QAAQ,EAAE;MAFJ,CA1BE;;MA+BV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAE;QACLH,KADK,iBACCI,KADD,EACQ;UACX,OAAO7B,EAAE,CAAC8B,IAAH,CAAQC,IAAR,CAAaC,SAAb,CAAuBH,KAAvB,KAAiC7B,EAAE,CAAC8B,IAAH,CAAQC,IAAR,CAAaE,QAAb,CAAsBJ,KAAtB,CAAxC;QACD,CAHI;QAILN,IAAI,EAAE;MAJD;IA9DG,CAvDuB;IA6HnCW,OAAO,EAAE;MACP;AACJ;AACA;MACInB,OAAO,EAAE,IAJF;;MAMP;AACJ;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;MACIoB,gBAjBO,8BAiBY;QACjB,OAAO,IAAInC,EAAE,CAACoC,GAAH,CAAO5B,OAAP,CAAe6B,GAAnB,EAAP;MACD,CAnBM;;MAqBP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,iBA7BO,+BA6Ba;QAClB,IAAI3B,GAAG,GAAG,KAAK4B,MAAL,EAAV;QAAA,IACEC,cADF;;QAGA,IAAI,KAAKC,SAAL,OAAqB,KAArB,IAA8B,KAAKC,cAAL,EAAlC,EAAyD;UACvDF,cAAc,GAAG,KAAKG,cAAL,CAAoB,KAAKD,cAAL,EAApB,CAAjB;UACA/B,GAAG,GAAGX,EAAE,CAAC4C,IAAH,CAAQC,GAAR,CAAYC,iBAAZ,CAA8BnC,GAA9B,EAAmC6B,cAAnC,CAAN;QACD;;QAED,IAAI,KAAKO,QAAL,OAAoB,KAAxB,EAA+B;UAC7B;UACApC,GAAG,GAAGX,EAAE,CAAC4C,IAAH,CAAQC,GAAR,CAAYC,iBAAZ,CAA8BnC,GAA9B,EAAmC;YACvCqC,OAAO,EAAE,IAAIC,IAAJ,GAAWC,OAAX;UAD8B,CAAnC,CAAN;QAGD;;QAED,OAAOvC,GAAP;MACD,CA9CM;MAgDP;MACAwC,4BAjDO,0CAiDwB;QAC7B,IAAIC,OAAO,GAAG,EAAd;QAAA,IACEC,YAAY,GAAGrD,EAAE,CAAC4C,IAAH,CAAQU,OAAR,CAAgBC,uBAAhB,CACb,KAAKd,SAAL,EADa,CADjB;QAAA,IAIEe,UAAU,GAAGxD,EAAE,CAACC,SAAH,CAAawD,QAAb,CAAsB,KAAKf,cAAL,EAAtB,KAAgD,UAJ/D,CAD6B,CAO7B;;QACA,IAAI,CAAC1C,EAAE,CAAC4C,IAAH,CAAQU,OAAR,CAAgBI,aAAhB,CAA8B,KAAKnB,MAAL,EAA9B,CAAL,EAAmD;UACjDa,OAAO,CAAC,kBAAD,CAAP,GAA8B,gBAA9B;QACD,CAV4B,CAY7B;;;QACA,IAAIpD,EAAE,CAAC8B,IAAH,CAAQC,IAAR,CAAaE,QAAb,CAAsB,KAAKc,QAAL,EAAtB,CAAJ,EAA4C;UAC1CK,OAAO,CAAC,eAAD,CAAP,GAA2B,KAAKL,QAAL,EAA3B;QACD,CAf4B,CAiB7B;;;QACA,IAAI,KAAKL,cAAL,MAAyBW,YAAzB,IAAyC,CAACG,UAA9C,EAA0D;UACxDJ,OAAO,CAAC,cAAD,CAAP,GAA0B,mCAA1B;QACD,CApB4B,CAsB7B;;;QACA,IAAI,KAAKO,SAAL,EAAJ,EAAsB;UACpB,IAAI3D,EAAE,CAAC4D,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAJ,EAA4C;YAC1C,KAAKC,KAAL,CAAW,iBAAiB,KAAKJ,SAAL,EAAjB,GAAoC,GAA/C;UACD;;UACDP,OAAO,CAAC,QAAD,CAAP,GAAoB,KAAKO,SAAL,EAApB;QACD;;QAED,OAAOP,OAAP;MACD,CAhFM;MAkFP;MACAY,UAnFO,wBAmFM;QACX,OAAO,KAAKvB,SAAL,EAAP;MACD,CArFM;MAuFP;MACAwB,QAxFO,sBAwFI;QACT,OAAO,KAAKC,OAAL,EAAP;MACD,CA1FM;;MA4FP;AACJ;AACA;AACA;AACA;;MAEI;AACJ;AACA;AACA;AACA;MACIlD,qBAvGO,mCAuGiB;QACtB,OAAO,IAAIhB,EAAE,CAAC4C,IAAH,CAAQuB,cAAZ,EAAP;MACD,CAzGM;;MA2GP;AACJ;AACA;AACA;AACA;MACIC,kBAhHO,gCAgHc;QACnB,IAAIC,QAAQ,GACR,KAAKC,UAAL,CAAgBC,YAAhB,KAAiC,MAAjC,GACI,KAAKD,UAAL,CAAgBD,QADpB,GAEI,KAAKC,UAAL,CAAgBE,YAHxB;QAAA,IAIEC,WAAW,GAAG,KAAKC,sBAAL,MAAiC,EAJjD;QAAA,IAKEC,cAAc,GAAG,EALnB;;QAOA,IAAI;UACFA,cAAc,GAAG,KAAK5D,OAAL,CAAa6D,KAAb,CAAmBP,QAAnB,EAA6BI,WAA7B,CAAjB;UACA,KAAKI,aAAL,GAAqB,KAArB;QACD,CAHD,CAGE,OAAOC,CAAP,EAAU;UACV,KAAKD,aAAL,GAAqB,IAArB;UACA,KAAKE,aAAL,CAAmB,YAAnB,EAAiC;YAC/BC,KAAK,EAAEF,CADwB;YAE/BT,QAAQ,EAAEA;UAFqB,CAAjC;QAID;;QAED,OAAOM,cAAP;MACD,CApIM;;MAsIP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIM,SA/IO,qBA+IGC,MA/IH,EA+IW;QAChB,OAAO,KAAKnE,OAAL,CAAakE,SAAb,CAAuBC,MAAvB,CAAP;MACD;IAjJM;EA7H0B,CAArC;EA/DAlF,EAAE,CAACO,EAAH,CAAMC,OAAN,CAAc6B,GAAd,CAAkBlC,aAAlB,GAAkCA,aAAlC"
}