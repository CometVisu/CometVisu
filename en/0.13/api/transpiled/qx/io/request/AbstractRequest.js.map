{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "url",
    "undefined",
    "setUrl",
    "__requestHeaders",
    "transport",
    "_transport",
    "_createTransport",
    "_setPhase",
    "__onReadyStateChangeBound",
    "lang",
    "Function",
    "bind",
    "_onReadyStateChange",
    "__onLoadBound",
    "_onLoad",
    "__onLoadEndBound",
    "_onLoadEnd",
    "__onAbortBound",
    "_onAbort",
    "__onTimeoutBound",
    "_onTimeout",
    "__onErrorBound",
    "_onError",
    "onreadystatechange",
    "onload",
    "onloadend",
    "onabort",
    "ontimeout",
    "onerror",
    "events",
    "readyStateChange",
    "success",
    "load",
    "loadEnd",
    "abort",
    "timeout",
    "error",
    "statusError",
    "parseError",
    "fail",
    "changeResponse",
    "changePhase",
    "properties",
    "check",
    "nullable",
    "init",
    "requestData",
    "value",
    "Type",
    "isString",
    "isSubClassOf",
    "constructor",
    "isObject",
    "isArray",
    "getClass",
    "authentication",
    "members",
    "__response",
    "__abort",
    "__phase",
    "__requestHeadersDeprecated",
    "_parserFailed",
    "Error",
    "_getConfiguredUrl",
    "_getConfiguredRequestHeaders",
    "_getParsedResponse",
    "_getMethod",
    "_isAsync",
    "send",
    "method",
    "async",
    "test",
    "replace",
    "getTimeout",
    "Environment",
    "get",
    "debug",
    "open",
    "getRequestData",
    "indexOf",
    "_serializeData",
    "_setRequestHeaders",
    "sendWithPromise",
    "context",
    "req",
    "promise",
    "Promise",
    "resolve",
    "reject",
    "listeners",
    "changeResponseListener",
    "addListener",
    "e",
    "forEach",
    "removeListenerById",
    "push",
    "statusErrorListener",
    "failMessage",
    "String",
    "format",
    "getStatus",
    "getStatusText",
    "err",
    "BaseError",
    "timeoutListener",
    "parseErrorListener",
    "abortListener",
    "errorListener",
    "getReadyState",
    "requestHeaders",
    "_getAllRequestHeaders",
    "key",
    "setRequestHeader",
    "mergeWith",
    "__getAuthRequestHeaders",
    "auth",
    "getAuthentication",
    "headers",
    "getAuthHeaders",
    "header",
    "getRequestHeader",
    "removeRequestHeader",
    "getTransport",
    "readyState",
    "getPhase",
    "status",
    "statusText",
    "getResponseText",
    "responseText",
    "getAllResponseHeaders",
    "getResponseHeader",
    "overrideResponseContentType",
    "contentType",
    "overrideMimeType",
    "getResponseContentType",
    "isDone",
    "getResponse",
    "_setResponse",
    "response",
    "oldResponse",
    "fireEvent",
    "event",
    "Data",
    "__onReadyStateDone",
    "util",
    "Request",
    "isSuccessful",
    "_fireStatefulEvent",
    "evt",
    "phase",
    "previousPhase",
    "fireDataEvent",
    "data",
    "isPost",
    "getMethod",
    "isJson",
    "Serializer",
    "toUriParameter",
    "Json",
    "stringify",
    "Uri",
    "toParameter",
    "environment",
    "destruct",
    "noop",
    "window",
    "setTimeout",
    "dispose",
    "io",
    "request",
    "AbstractRequest"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/request/AbstractRequest.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * AbstractRequest serves as a base class for {@link qx.io.request.Xhr}\n * and {@link qx.io.request.Jsonp}. It contains methods to conveniently\n * communicate with transports found in {@link qx.bom.request}.\n *\n * The general procedure to derive a new request is to choose a\n * transport (override {@link #_createTransport}) and link\n * the transport’s response (override {@link #_getParsedResponse}).\n * The transport must implement {@link qx.bom.request.IRequest}.\n *\n * To adjust the behavior of {@link #send} override\n * {@link #_getConfiguredUrl} and {@link #_getConfiguredRequestHeaders}.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.request.AbstractRequest\", {\n  type: \"abstract\",\n\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   */\n  construct(url) {\n    super();\n\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    this.__requestHeaders = {};\n\n    var transport = (this._transport = this._createTransport());\n    this._setPhase(\"unsent\");\n\n    this.__onReadyStateChangeBound = qx.lang.Function.bind(\n      this._onReadyStateChange,\n      this\n    );\n\n    this.__onLoadBound = qx.lang.Function.bind(this._onLoad, this);\n    this.__onLoadEndBound = qx.lang.Function.bind(this._onLoadEnd, this);\n    this.__onAbortBound = qx.lang.Function.bind(this._onAbort, this);\n    this.__onTimeoutBound = qx.lang.Function.bind(this._onTimeout, this);\n    this.__onErrorBound = qx.lang.Function.bind(this._onError, this);\n\n    transport.onreadystatechange = this.__onReadyStateChangeBound;\n    transport.onload = this.__onLoadBound;\n    transport.onloadend = this.__onLoadEndBound;\n    transport.onabort = this.__onAbortBound;\n    transport.ontimeout = this.__onTimeoutBound;\n    transport.onerror = this.__onErrorBound;\n  },\n\n  events: {\n    /**\n     * Fired on every change of the transport’s readyState.\n     */\n    readyStateChange: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport’s status\n     * indicates success.\n     */\n    success: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     */\n    load: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with or without error.\n     */\n    loadEnd: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request is aborted.\n     */\n    abort: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request reaches timeout limit.\n     */\n    timeout: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with error.\n     */\n    error: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     */\n    statusError: \"qx.event.type.Event\",\n\n    /**\n     * Fired when the configured parser runs into an unrecoverable error.\n     */\n    parseError: \"qx.event.type.Data\",\n\n    /**\n     * Fired on timeout, error or remote error.\n     *\n     * This event is fired for convenience. Usually, it is recommended\n     * to handle error related events in a more fine-grained approach.\n     */\n    fail: \"qx.event.type.Event\",\n\n    /**\n     * Fired on change of the parsed response.\n     *\n     * This event allows to use data binding with the\n     * parsed response as source.\n     *\n     * For example, to bind the response to the value of a label:\n     *\n     * <pre class=\"javascript\">\n     * // req is an instance of qx.io.request.*,\n     * // label an instance of qx.ui.basic.Label\n     * req.bind(\"response\", label, \"value\");\n     * </pre>\n     *\n     * The response is parsed (and therefore changed) only\n     * after the request completes successfully. This means\n     * that when a new request is made the initial empty value\n     * is ignored, instead only the final value is bound.\n     *\n     */\n    changeResponse: \"qx.event.type.Data\",\n\n    /**\n     * Fired on change of the phase.\n     */\n    changePhase: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /**\n     * The URL of the resource to request.\n     *\n     * Note: Depending on the configuration of the request\n     * and/or the transport chosen, query params may be appended\n     * automatically.\n     */\n    url: {\n      check: \"String\"\n    },\n\n    /**\n     * Timeout limit in milliseconds. Default (0) means no limit.\n     */\n    timeout: {\n      check: \"Number\",\n      nullable: true,\n      init: 0\n    },\n\n    /**\n     * Data to be sent as part of the request.\n     *\n     * Supported types:\n     *\n     * * String\n     * * Map\n     * * qooxdoo Object\n     * * Blob\n     * * ArrayBuffer\n     * * FormData\n     *\n     * For maps, Arrays and qooxdoo objects, a URL encoded string\n     * with unsafe characters escaped is internally generated and sent\n     * as part of the request.\n     *\n     * Depending on the underlying transport and its configuration, the request\n     * data is transparently included as URL query parameters or embedded in the\n     * request body as form data.\n     *\n     * If a string is given the user must make sure it is properly formatted and\n     * escaped. See {@link qx.util.Serializer#toUriParameter}.\n     *\n     */\n    requestData: {\n      check(value) {\n        return (\n          qx.lang.Type.isString(value) ||\n          qx.Class.isSubClassOf(value.constructor, qx.core.Object) ||\n          qx.lang.Type.isObject(value) ||\n          qx.lang.Type.isArray(value) ||\n          qx.Bootstrap.getClass(value) == \"Blob\" ||\n          qx.Bootstrap.getClass(value) == \"ArrayBuffer\" ||\n          qx.Bootstrap.getClass(value) == \"FormData\"\n        );\n      },\n      nullable: true\n    },\n\n    /**\n     * Authentication delegate.\n     *\n     * The delegate must implement {@link qx.io.request.authentication.IAuthentication}.\n     */\n    authentication: {\n      check: \"qx.io.request.authentication.IAuthentication\",\n      nullable: true\n    }\n  },\n\n  members: {\n    /**\n     * Bound handlers.\n     */\n    __onReadyStateChangeBound: null,\n    __onLoadBound: null,\n    __onLoadEndBound: null,\n    __onAbortBound: null,\n    __onTimeoutBound: null,\n    __onErrorBound: null,\n\n    /**\n     * Parsed response.\n     */\n    __response: null,\n\n    /**\n     * Abort flag.\n     */\n    __abort: null,\n\n    /**\n     * Current phase.\n     */\n    __phase: null,\n\n    /**\n     * Request headers.\n     */\n    __requestHeaders: null,\n\n    /**\n     * Request headers (deprecated).\n     */\n    __requestHeadersDeprecated: null,\n\n    /**\n     * Holds transport.\n     */\n    _transport: null,\n\n    /**\n     * Holds information about the parser status for the last request.\n     */\n    _parserFailed: false,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create and return transport.\n     *\n     * This method MUST be overridden, unless the constructor is overridden as\n     * well. It is called by the constructor and should return the transport that\n     * is to be interfaced.\n     *\n     * @return {qx.bom.request} Transport.\n     */\n    _createTransport() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * A configured URL typically includes a query string that\n     * encapsulates transport specific settings such as request\n     * data or no-cache settings.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl() {},\n\n    /**\n     * Get configuration related request headers.\n     *\n     * This method MAY be overridden to add request headers for features limited\n     * to a certain transport.\n     *\n     * @return {Map} Map of request headers.\n     */\n    _getConfiguredRequestHeaders() {},\n\n    /**\n     * Get parsed response.\n     *\n     * Is called in the {@link #_onReadyStateChange} event handler\n     * to parse and store the transport’s response.\n     *\n     * This method MUST be overridden.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    _getParsedResponse() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get method.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The method.\n     */\n    _getMethod() {\n      return \"GET\";\n    },\n\n    /**\n     * Whether async.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {Boolean} Whether to process asynchronously.\n     */\n    _isAsync() {\n      return true;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERACT WITH TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Send request.\n     */\n    send() {\n      var transport = this._transport,\n        url,\n        method,\n        async,\n        requestData;\n\n      //\n      // Open request\n      //\n\n      url = this._getConfiguredUrl();\n\n      // Drop fragment (anchor) from URL as per\n      // http://www.w3.org/TR/XMLHttpRequest/#the-open-method\n      if (/\\#/.test(url)) {\n        url = url.replace(/\\#.*/, \"\");\n      }\n\n      transport.timeout = this.getTimeout();\n\n      // Support transports with enhanced feature set\n      method = this._getMethod();\n      async = this._isAsync();\n\n      // Open\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\n          \"Open low-level request with method: \" +\n            method +\n            \", url: \" +\n            url +\n            \", async: \" +\n            async\n        );\n      }\n\n      transport.open(method, url, async);\n      this._setPhase(\"opened\");\n\n      //\n      // Send request\n      //\n\n      requestData = this.getRequestData();\n      if (\n        [\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(\n          qx.Bootstrap.getClass(requestData)\n        ) == -1\n      ) {\n        requestData = this._serializeData(requestData);\n      }\n\n      this._setRequestHeaders();\n\n      // Send\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Send low-level request\");\n      }\n\n      method == \"GET\" ? transport.send() : transport.send(requestData);\n      this._setPhase(\"sent\");\n    },\n\n    /**\n     * The same as send() but also return a `qx.Promise` object. The promise\n     * is resolved to this object if the request is successful.\n     *\n     * Calling `abort()` on the request object, rejects the promise. Calling\n     * `cancel()` on the promise aborts the request if the request is not in a\n     * final state.\n     * If the promise has other listener paths, then cancelation of one path will\n     * not have any effect on the request and consequently that call will not\n     * affect the other paths.\n     *\n     * @param context {Object?} optional context to bind the qx.Promise.\n     * @return {qx.Promise} The qx.Promise object\n     * @throws {qx.type.BaseError} If the environment setting `qx.promise` is set to false\n     */\n    sendWithPromise(context) {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        context = context || this;\n\n        // save this object's context\n        var req = this;\n\n        var promise = new qx.Promise(function (resolve, reject) {\n          var listeners = [];\n\n          var changeResponseListener = req.addListener(\"success\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            resolve(req);\n          });\n\n          listeners.push(changeResponseListener);\n\n          var statusErrorListener = req.addListener(\"statusError\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = qx.lang.String.format(\"%1: %2.\", [\n              req.getStatus(),\n              req.getStatusText()\n            ]);\n\n            var err = new qx.type.BaseError(\"statusError\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(statusErrorListener);\n\n          var timeoutListener = req.addListener(\"timeout\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = qx.lang.String.format(\n              \"Request failed with timeout after %1 ms.\",\n              [req.getTimeout()]\n            );\n\n            var err = new qx.type.BaseError(\"timeout\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(timeoutListener);\n\n          var parseErrorListener = req.addListener(\"parseError\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Error parsing the response.\";\n            var err = new qx.type.BaseError(\"parseError\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(parseErrorListener);\n\n          var abortListener = req.addListener(\"abort\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Request aborted.\";\n            var err = new qx.type.BaseError(\"abort\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(abortListener);\n\n          var errorListener = req.addListener(\"error\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Request failed.\";\n            var err = new qx.type.BaseError(\"error\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(errorListener);\n\n          req.send();\n        }, context).finally(function () {\n          if (req.getReadyState() !== 4) {\n            req.abort();\n          }\n        });\n\n        return promise;\n        // eslint-disable-next-line no-else-return\n      } else {\n        // fail loudly\n        throw new qx.type.BaseError(\n          \"Error\",\n          \"Environment setting qx.promise is set to false.\"\n        );\n      }\n    },\n\n    /**\n     * Abort request.\n     */\n    abort() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Abort request\");\n      }\n      this.__abort = true;\n\n      // Update phase to \"abort\" before user handler are invoked [BUG #5485]\n      this.__phase = \"abort\";\n\n      this._transport.abort();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     REQUEST HEADERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply configured request headers to transport.\n     *\n     * This method MAY be overridden to customize application of request headers\n     * to transport.\n     */\n    _setRequestHeaders() {\n      var transport = this._transport,\n        requestHeaders = this._getAllRequestHeaders();\n\n      for (var key in requestHeaders) {\n        transport.setRequestHeader(key, requestHeaders[key]);\n      }\n    },\n\n    /**\n     * Get all request headers.\n     *\n     * @return {Map} All request headers.\n     */\n    _getAllRequestHeaders() {\n      var requestHeaders = {};\n      // Transport specific headers\n      qx.lang.Object.mergeWith(\n        requestHeaders,\n        this._getConfiguredRequestHeaders()\n      );\n\n      // Authentication delegate\n      qx.lang.Object.mergeWith(requestHeaders, this.__getAuthRequestHeaders());\n      // User-defined, requestHeaders property (deprecated)\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeadersDeprecated);\n      // User-defined\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeaders);\n\n      return requestHeaders;\n    },\n\n    /**\n     * Retrieve authentication headers from auth delegate.\n     *\n     * @return {Map} Authentication related request headers.\n     */\n    __getAuthRequestHeaders() {\n      var auth = this.getAuthentication(),\n        headers = {};\n\n      if (auth) {\n        auth.getAuthHeaders().forEach(function (header) {\n          headers[header.key] = header.value;\n        });\n        return headers;\n      }\n    },\n\n    /**\n     * Set a request header.\n     *\n     * Note: Setting request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     * @param value {String} Value of the header.\n     */\n    setRequestHeader(key, value) {\n      this.__requestHeaders[key] = value;\n    },\n\n    /**\n     * Get a request header.\n     *\n     * @param key {String} Key of the header.\n     * @return {String} The value of the header.\n     */\n    getRequestHeader(key) {\n      return this.__requestHeaders[key];\n    },\n\n    /**\n     * Remove a request header.\n     *\n     * Note: Removing request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     */\n    removeRequestHeader(key) {\n      if (this.__requestHeaders[key]) {\n        delete this.__requestHeaders[key];\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     QUERY TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get low-level transport.\n     *\n     * Note: To be used with caution!\n     *\n     * This method can be used to query the transport directly,\n     * but should be used with caution. Especially, it\n     * is not advisable to call any destructive methods\n     * such as <code>open</code> or <code>send</code>.\n     *\n     * @return {Object} An instance of a class found in\n     *  <code>qx.bom.request.*</code>\n     */\n\n    // This method mainly exists so that some methods found in the\n    // low-level transport can be deliberately omitted here,\n    // but still be accessed should it be absolutely necessary.\n    //\n    // Valid use cases include to query the transport’s responseXML\n    // property if performance is critical and any extra parsing\n    // should be avoided at all costs.\n    //\n    getTransport() {\n      return this._transport;\n    },\n\n    /**\n     * Get current ready state.\n     *\n     * States can be:\n     * UNSENT:           0,\n     * OPENED:           1,\n     * HEADERS_RECEIVED: 2,\n     * LOADING:          3,\n     * DONE:             4\n     *\n     * @return {Number} Ready state.\n     */\n    getReadyState() {\n      return this._transport.readyState;\n    },\n\n    /**\n     * Get current phase.\n     *\n     * A more elaborate version of {@link #getReadyState}, this method indicates\n     * the current phase of the request. Maps to stateful (i.e. deterministic)\n     * events (success, abort, timeout, statusError) and intermediate\n     * readyStates (unsent, configured, loading, load).\n     *\n     * When the requests is successful, it progresses the states:<br>\n     * 'unsent', 'opened', 'sent', 'loading', 'load', 'success'\n     *\n     * In case of failure, the final state is one of:<br>\n     * 'abort', 'timeout', 'statusError'\n     *\n     * For each change of the phase, a {@link #changePhase} data event is fired.\n     *\n     * @return {String} Current phase.\n     *\n     */\n    getPhase() {\n      return this.__phase;\n    },\n\n    /**\n     * Get status code.\n     *\n     * @return {Number} The transport’s status code.\n     */\n    getStatus() {\n      return this._transport.status;\n    },\n\n    /**\n     * Get status text.\n     *\n     * @return {String} The transport’s status text.\n     */\n    getStatusText() {\n      return this._transport.statusText;\n    },\n\n    /**\n     * Get raw (unprocessed) response.\n     *\n     * @return {String} The raw response of the request.\n     */\n    getResponseText() {\n      return this._transport.responseText;\n    },\n\n    /**\n     * Get all response headers from response.\n     *\n     * @return {String} All response headers.\n     */\n    getAllResponseHeaders() {\n      return this._transport.getAllResponseHeaders();\n    },\n\n    /**\n     * Get a single response header from response.\n     *\n     * @param key {String}\n     *   Key of the header to get the value from.\n     * @return {String}\n     *   Response header.\n     */\n    getResponseHeader(key) {\n      return this._transport.getResponseHeader(key);\n    },\n\n    /**\n     * Override the content type response header from response.\n     *\n     * @param contentType {String}\n     *   Content type for overriding.\n     * @see qx.bom.request.Xhr#overrideMimeType\n     */\n    overrideResponseContentType(contentType) {\n      return this._transport.overrideMimeType(contentType);\n    },\n\n    /**\n     * Get the content type response header from response.\n     *\n     * @return {String}\n     *   Content type response header.\n     */\n    getResponseContentType() {\n      return this.getResponseHeader(\"Content-Type\");\n    },\n\n    /**\n     * Whether request completed (is done).\n     */\n    isDone() {\n      return this.getReadyState() === 4;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get parsed response.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    getResponse() {\n      return this.__response;\n    },\n\n    /**\n     * Set response.\n     *\n     * @param response {String} The parsed response of the request.\n     */\n    _setResponse(response) {\n      var oldResponse = response;\n\n      if (this.__response !== response) {\n        this.__response = response;\n        this.fireEvent(\"changeResponse\", qx.event.type.Data, [\n          this.__response,\n          oldResponse\n        ]);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handle \"readyStateChange\" event.\n     */\n    _onReadyStateChange() {\n      var readyState = this.getReadyState();\n\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Fire readyState: \" + readyState);\n      }\n\n      this.fireEvent(\"readyStateChange\");\n\n      // Transport switches to readyState DONE on abort and may already\n      // have successful HTTP status when response is served from cache.\n      //\n      // Not fire custom event \"loading\" (or \"success\", when cached).\n      if (this.__abort) {\n        return;\n      }\n\n      if (readyState === 3) {\n        this._setPhase(\"loading\");\n      }\n\n      if (this.isDone()) {\n        this.__onReadyStateDone();\n      }\n    },\n\n    /**\n     * Called internally when readyState is DONE.\n     */\n    __onReadyStateDone() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Request completed with HTTP status: \" + this.getStatus());\n      }\n\n      // Event \"load\" fired in onLoad\n      this._setPhase(\"load\");\n\n      // Successful HTTP status\n      if (qx.util.Request.isSuccessful(this.getStatus())) {\n        // Parse response\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\n            \"Response is of type: '\" + this.getResponseContentType() + \"'\"\n          );\n        }\n\n        this._setResponse(this._getParsedResponse());\n\n        if (this._parserFailed) {\n          this.fireEvent(\"fail\");\n        } else {\n          this._fireStatefulEvent(\"success\");\n        }\n\n        // Erroneous HTTP status\n      } else {\n        try {\n          this._setResponse(this._getParsedResponse());\n        } catch (e) {\n          // ignore if it does not work\n        }\n\n        // A remote error failure\n        if (this.getStatus() !== 0) {\n          this._fireStatefulEvent(\"statusError\");\n          this.fireEvent(\"fail\");\n        }\n      }\n    },\n\n    /**\n     * Handle \"load\" event.\n     */\n    _onLoad() {\n      this.fireEvent(\"load\");\n    },\n\n    /**\n     * Handle \"loadEnd\" event.\n     */\n    _onLoadEnd() {\n      this.fireEvent(\"loadEnd\");\n    },\n\n    /**\n     * Handle \"abort\" event.\n     */\n    _onAbort() {\n      this._fireStatefulEvent(\"abort\");\n    },\n\n    /**\n     * Handle \"timeout\" event.\n     */\n    _onTimeout() {\n      this._fireStatefulEvent(\"timeout\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /**\n     * Handle \"error\" event.\n     */\n    _onError() {\n      this.fireEvent(\"error\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL / HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire stateful event.\n     *\n     * Fires event and sets phase to name of event.\n     *\n     * @param evt {String} Name of the event to fire.\n     */\n    _fireStatefulEvent(evt) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(evt);\n      }\n      this._setPhase(evt);\n      this.fireEvent(evt);\n    },\n\n    /**\n     * Set phase.\n     *\n     * @param phase {String} The phase to set.\n     */\n    _setPhase(phase) {\n      var previousPhase = this.__phase;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(phase);\n        qx.core.Assert.assertMatch(\n          phase,\n          /^(unsent)|(opened)|(sent)|(loading)|(load)|(success)|(abort)|(timeout)|(statusError)$/\n        );\n      }\n\n      this.__phase = phase;\n      this.fireDataEvent(\"changePhase\", phase, previousPhase);\n    },\n\n    /**\n     * Serialize data.\n     *\n     * @param data {String|Map|qx.core.Object} Data to serialize.\n     * @return {String|null} Serialized data.\n     */\n    _serializeData(data) {\n      var isPost =\n          typeof this.getMethod !== \"undefined\" && this.getMethod() == \"POST\",\n        isJson = /application\\/.*\\+?json/.test(\n          this.getRequestHeader(\"Content-Type\")\n        );\n\n      if (!data) {\n        return null;\n      }\n\n      if (qx.lang.Type.isString(data)) {\n        return data;\n      }\n\n      if (qx.Class.isSubClassOf(data.constructor, qx.core.Object)) {\n        return qx.util.Serializer.toUriParameter(data);\n      }\n\n      if (\n        isJson &&\n        (qx.lang.Type.isObject(data) || qx.lang.Type.isArray(data))\n      ) {\n        return qx.lang.Json.stringify(data);\n      }\n\n      if (qx.lang.Type.isObject(data)) {\n        return qx.util.Uri.toParameter(data, isPost);\n      }\n\n      return null;\n    }\n  },\n\n  environment: {\n    \"qx.debug.io\": false\n  },\n\n  destruct() {\n    var transport = this._transport,\n      noop = function () {};\n\n    if (this._transport) {\n      transport.onreadystatechange =\n        transport.onload =\n        transport.onloadend =\n        transport.onabort =\n        transport.ontimeout =\n        transport.onerror =\n          noop;\n\n      // [BUG #8315] dispose asynchronously to work with Sinon.js fake server\n      window.setTimeout(function () {\n        transport.dispose();\n      }, 0);\n    }\n    this.__response = null;\n  }\n});\n"
  ],
  "mappings": "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"
}