{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "url",
    "constructor",
    "call",
    "undefined",
    "setUrl",
    "__requestHeaders",
    "transport",
    "_transport",
    "_createTransport",
    "_setPhase",
    "__onReadyStateChangeBound",
    "lang",
    "Function",
    "bind",
    "_onReadyStateChange",
    "__onLoadBound",
    "_onLoad",
    "__onLoadEndBound",
    "_onLoadEnd",
    "__onAbortBound",
    "_onAbort",
    "__onTimeoutBound",
    "_onTimeout",
    "__onErrorBound",
    "_onError",
    "onreadystatechange",
    "onload",
    "onloadend",
    "onabort",
    "ontimeout",
    "onerror",
    "events",
    "readyStateChange",
    "success",
    "load",
    "loadEnd",
    "abort",
    "timeout",
    "error",
    "statusError",
    "parseError",
    "fail",
    "changeResponse",
    "changePhase",
    "properties",
    "check",
    "nullable",
    "init",
    "requestData",
    "value",
    "Type",
    "isString",
    "isSubClassOf",
    "isObject",
    "isArray",
    "getClass",
    "authentication",
    "members",
    "__response",
    "__abort",
    "__phase",
    "__requestHeadersDeprecated",
    "_parserFailed",
    "Error",
    "_getConfiguredUrl",
    "_getConfiguredRequestHeaders",
    "_getParsedResponse",
    "_getMethod",
    "_isAsync",
    "send",
    "method",
    "async",
    "test",
    "replace",
    "getTimeout",
    "Environment",
    "get",
    "debug",
    "open",
    "getRequestData",
    "indexOf",
    "_serializeData",
    "_setRequestHeaders",
    "sendWithPromise",
    "context",
    "req",
    "promise",
    "Promise",
    "resolve",
    "reject",
    "listeners",
    "changeResponseListener",
    "addListener",
    "e",
    "forEach",
    "removeListenerById",
    "push",
    "statusErrorListener",
    "failMessage",
    "String",
    "format",
    "getStatus",
    "getStatusText",
    "err",
    "BaseError",
    "timeoutListener",
    "parseErrorListener",
    "abortListener",
    "errorListener",
    "getReadyState",
    "requestHeaders",
    "_getAllRequestHeaders",
    "key",
    "setRequestHeader",
    "mergeWith",
    "__getAuthRequestHeaders",
    "__P_268_11",
    "auth",
    "getAuthentication",
    "headers",
    "getAuthHeaders",
    "header",
    "getRequestHeader",
    "removeRequestHeader",
    "getTransport",
    "readyState",
    "getPhase",
    "status",
    "statusText",
    "getResponseText",
    "responseText",
    "getAllResponseHeaders",
    "getResponseHeader",
    "overrideResponseContentType",
    "contentType",
    "overrideMimeType",
    "getResponseContentType",
    "isDone",
    "getResponse",
    "_setResponse",
    "response",
    "oldResponse",
    "fireEvent",
    "event",
    "Data",
    "__onReadyStateDone",
    "__P_268_12",
    "util",
    "Request",
    "isSuccessful",
    "_fireStatefulEvent",
    "evt",
    "phase",
    "previousPhase",
    "fireDataEvent",
    "data",
    "isPost",
    "getMethod",
    "isJson",
    "Serializer",
    "toUriParameter",
    "Json",
    "stringify",
    "Uri",
    "toParameter",
    "environment",
    "destruct",
    "noop",
    "window",
    "setTimeout",
    "dispose",
    "io",
    "request",
    "AbstractRequest"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/request/AbstractRequest.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * AbstractRequest serves as a base class for {@link qx.io.request.Xhr}\n * and {@link qx.io.request.Jsonp}. It contains methods to conveniently\n * communicate with transports found in {@link qx.bom.request}.\n *\n * The general procedure to derive a new request is to choose a\n * transport (override {@link #_createTransport}) and link\n * the transport’s response (override {@link #_getParsedResponse}).\n * The transport must implement {@link qx.bom.request.IRequest}.\n *\n * To adjust the behavior of {@link #send} override\n * {@link #_getConfiguredUrl} and {@link #_getConfiguredRequestHeaders}.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.request.AbstractRequest\", {\n  type: \"abstract\",\n\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   */\n  construct(url) {\n    super();\n\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    this.__requestHeaders = {};\n\n    var transport = (this._transport = this._createTransport());\n    this._setPhase(\"unsent\");\n\n    this.__onReadyStateChangeBound = qx.lang.Function.bind(\n      this._onReadyStateChange,\n      this\n    );\n\n    this.__onLoadBound = qx.lang.Function.bind(this._onLoad, this);\n    this.__onLoadEndBound = qx.lang.Function.bind(this._onLoadEnd, this);\n    this.__onAbortBound = qx.lang.Function.bind(this._onAbort, this);\n    this.__onTimeoutBound = qx.lang.Function.bind(this._onTimeout, this);\n    this.__onErrorBound = qx.lang.Function.bind(this._onError, this);\n\n    transport.onreadystatechange = this.__onReadyStateChangeBound;\n    transport.onload = this.__onLoadBound;\n    transport.onloadend = this.__onLoadEndBound;\n    transport.onabort = this.__onAbortBound;\n    transport.ontimeout = this.__onTimeoutBound;\n    transport.onerror = this.__onErrorBound;\n  },\n\n  events: {\n    /**\n     * Fired on every change of the transport’s readyState.\n     */\n    readyStateChange: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport’s status\n     * indicates success.\n     */\n    success: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     */\n    load: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with or without error.\n     */\n    loadEnd: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request is aborted.\n     */\n    abort: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request reaches timeout limit.\n     */\n    timeout: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with error.\n     */\n    error: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     */\n    statusError: \"qx.event.type.Event\",\n\n    /**\n     * Fired when the configured parser runs into an unrecoverable error.\n     */\n    parseError: \"qx.event.type.Data\",\n\n    /**\n     * Fired on timeout, error or remote error.\n     *\n     * This event is fired for convenience. Usually, it is recommended\n     * to handle error related events in a more fine-grained approach.\n     */\n    fail: \"qx.event.type.Event\",\n\n    /**\n     * Fired on change of the parsed response.\n     *\n     * This event allows to use data binding with the\n     * parsed response as source.\n     *\n     * For example, to bind the response to the value of a label:\n     *\n     * <pre class=\"javascript\">\n     * // req is an instance of qx.io.request.*,\n     * // label an instance of qx.ui.basic.Label\n     * req.bind(\"response\", label, \"value\");\n     * </pre>\n     *\n     * The response is parsed (and therefore changed) only\n     * after the request completes successfully. This means\n     * that when a new request is made the initial empty value\n     * is ignored, instead only the final value is bound.\n     *\n     */\n    changeResponse: \"qx.event.type.Data\",\n\n    /**\n     * Fired on change of the phase.\n     */\n    changePhase: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /**\n     * The URL of the resource to request.\n     *\n     * Note: Depending on the configuration of the request\n     * and/or the transport chosen, query params may be appended\n     * automatically.\n     */\n    url: {\n      check: \"String\"\n    },\n\n    /**\n     * Timeout limit in milliseconds. Default (0) means no limit.\n     */\n    timeout: {\n      check: \"Number\",\n      nullable: true,\n      init: 0\n    },\n\n    /**\n     * Data to be sent as part of the request.\n     *\n     * Supported types:\n     *\n     * * String\n     * * Map\n     * * qooxdoo Object\n     * * Blob\n     * * ArrayBuffer\n     * * FormData\n     *\n     * For maps, Arrays and qooxdoo objects, a URL encoded string\n     * with unsafe characters escaped is internally generated and sent\n     * as part of the request.\n     *\n     * Depending on the underlying transport and its configuration, the request\n     * data is transparently included as URL query parameters or embedded in the\n     * request body as form data.\n     *\n     * If a string is given the user must make sure it is properly formatted and\n     * escaped. See {@link qx.util.Serializer#toUriParameter}.\n     *\n     */\n    requestData: {\n      check(value) {\n        return (\n          qx.lang.Type.isString(value) ||\n          qx.Class.isSubClassOf(value.constructor, qx.core.Object) ||\n          qx.lang.Type.isObject(value) ||\n          qx.lang.Type.isArray(value) ||\n          qx.Bootstrap.getClass(value) == \"Blob\" ||\n          qx.Bootstrap.getClass(value) == \"ArrayBuffer\" ||\n          qx.Bootstrap.getClass(value) == \"FormData\"\n        );\n      },\n      nullable: true\n    },\n\n    /**\n     * Authentication delegate.\n     *\n     * The delegate must implement {@link qx.io.request.authentication.IAuthentication}.\n     */\n    authentication: {\n      check: \"qx.io.request.authentication.IAuthentication\",\n      nullable: true\n    }\n  },\n\n  members: {\n    /**\n     * Bound handlers.\n     */\n    __onReadyStateChangeBound: null,\n    __onLoadBound: null,\n    __onLoadEndBound: null,\n    __onAbortBound: null,\n    __onTimeoutBound: null,\n    __onErrorBound: null,\n\n    /**\n     * Parsed response.\n     */\n    __response: null,\n\n    /**\n     * Abort flag.\n     */\n    __abort: null,\n\n    /**\n     * Current phase.\n     */\n    __phase: null,\n\n    /**\n     * Request headers.\n     */\n    __requestHeaders: null,\n\n    /**\n     * Request headers (deprecated).\n     */\n    __requestHeadersDeprecated: null,\n\n    /**\n     * Holds transport.\n     */\n    _transport: null,\n\n    /**\n     * Holds information about the parser status for the last request.\n     */\n    _parserFailed: false,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create and return transport.\n     *\n     * This method MUST be overridden, unless the constructor is overridden as\n     * well. It is called by the constructor and should return the transport that\n     * is to be interfaced.\n     *\n     * @return {qx.bom.request.Jsonp | qx.bom.request.Script | qx.bom.request.SimpleXhr | qx.bom.request.Xhr | qx.bom.request.IRequest} Transport.\n     */\n    _createTransport() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * A configured URL typically includes a query string that\n     * encapsulates transport specific settings such as request\n     * data or no-cache settings.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl() {},\n\n    /**\n     * Get configuration related request headers.\n     *\n     * This method MAY be overridden to add request headers for features limited\n     * to a certain transport.\n     *\n     * @return {Map} Map of request headers.\n     */\n    _getConfiguredRequestHeaders() {},\n\n    /**\n     * Get parsed response.\n     *\n     * Is called in the {@link #_onReadyStateChange} event handler\n     * to parse and store the transport’s response.\n     *\n     * This method MUST be overridden.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    _getParsedResponse() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get method.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The method.\n     */\n    _getMethod() {\n      return \"GET\";\n    },\n\n    /**\n     * Whether async.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {Boolean} Whether to process asynchronously.\n     */\n    _isAsync() {\n      return true;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERACT WITH TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Send request.\n     */\n    send() {\n      var transport = this._transport,\n        url,\n        method,\n        async,\n        requestData;\n\n      //\n      // Open request\n      //\n\n      url = this._getConfiguredUrl();\n\n      // Drop fragment (anchor) from URL as per\n      // http://www.w3.org/TR/XMLHttpRequest/#the-open-method\n      if (/\\#/.test(url)) {\n        url = url.replace(/\\#.*/, \"\");\n      }\n\n      transport.timeout = this.getTimeout();\n\n      // Support transports with enhanced feature set\n      method = this._getMethod();\n      async = this._isAsync();\n\n      // Open\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\n          \"Open low-level request with method: \" +\n            method +\n            \", url: \" +\n            url +\n            \", async: \" +\n            async\n        );\n      }\n\n      transport.open(method, url, async);\n      this._setPhase(\"opened\");\n\n      //\n      // Send request\n      //\n\n      requestData = this.getRequestData();\n      if (\n        [\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(\n          qx.Bootstrap.getClass(requestData)\n        ) == -1\n      ) {\n        requestData = this._serializeData(requestData);\n      }\n\n      this._setRequestHeaders();\n\n      // Send\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Send low-level request\");\n      }\n\n      method == \"GET\" ? transport.send() : transport.send(requestData);\n      this._setPhase(\"sent\");\n    },\n\n    /**\n     * The same as send() but also return a `qx.Promise` object. The promise\n     * is resolved to this object if the request is successful.\n     *\n     * Calling `abort()` on the request object, rejects the promise. Calling\n     * `cancel()` on the promise aborts the request if the request is not in a\n     * final state.\n     * If the promise has other listener paths, then cancelation of one path will\n     * not have any effect on the request and consequently that call will not\n     * affect the other paths.\n     *\n     * @param context {Object?} optional context to bind the qx.Promise.\n     * @return {qx.Promise} The qx.Promise object\n     * @throws {qx.type.BaseError} If the environment setting `qx.promise` is set to false\n     */\n    sendWithPromise(context) {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        context = context || this;\n\n        // save this object's context\n        var req = this;\n\n        var promise = new qx.Promise(function (resolve, reject) {\n          var listeners = [];\n\n          var changeResponseListener = req.addListener(\"success\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            resolve(req);\n          });\n\n          listeners.push(changeResponseListener);\n\n          var statusErrorListener = req.addListener(\"statusError\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = qx.lang.String.format(\"%1: %2.\", [\n              req.getStatus(),\n              req.getStatusText()\n            ]);\n\n            var err = new qx.type.BaseError(\"statusError\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(statusErrorListener);\n\n          var timeoutListener = req.addListener(\"timeout\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = qx.lang.String.format(\n              \"Request failed with timeout after %1 ms.\",\n              [req.getTimeout()]\n            );\n\n            var err = new qx.type.BaseError(\"timeout\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(timeoutListener);\n\n          var parseErrorListener = req.addListener(\"parseError\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Error parsing the response.\";\n            var err = new qx.type.BaseError(\"parseError\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(parseErrorListener);\n\n          var abortListener = req.addListener(\"abort\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Request aborted.\";\n            var err = new qx.type.BaseError(\"abort\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(abortListener);\n\n          var errorListener = req.addListener(\"error\", e => {\n            listeners.forEach(req.removeListenerById.bind(req));\n            var failMessage = \"Request failed.\";\n            var err = new qx.type.BaseError(\"error\", failMessage);\n            reject(err);\n          });\n\n          listeners.push(errorListener);\n\n          req.send();\n        }, context).finally(function () {\n          if (req.getReadyState() !== 4) {\n            req.abort();\n          }\n        });\n\n        return promise;\n        // eslint-disable-next-line no-else-return\n      } else {\n        // fail loudly\n        throw new qx.type.BaseError(\n          \"Error\",\n          \"Environment setting qx.promise is set to false.\"\n        );\n      }\n    },\n\n    /**\n     * Abort request.\n     */\n    abort() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Abort request\");\n      }\n      this.__abort = true;\n\n      // Update phase to \"abort\" before user handler are invoked [BUG #5485]\n      this.__phase = \"abort\";\n\n      this._transport.abort();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     REQUEST HEADERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply configured request headers to transport.\n     *\n     * This method MAY be overridden to customize application of request headers\n     * to transport.\n     */\n    _setRequestHeaders() {\n      var transport = this._transport,\n        requestHeaders = this._getAllRequestHeaders();\n\n      for (var key in requestHeaders) {\n        transport.setRequestHeader(key, requestHeaders[key]);\n      }\n    },\n\n    /**\n     * Get all request headers.\n     *\n     * @return {Map} All request headers.\n     */\n    _getAllRequestHeaders() {\n      var requestHeaders = {};\n      // Transport specific headers\n      qx.lang.Object.mergeWith(\n        requestHeaders,\n        this._getConfiguredRequestHeaders()\n      );\n\n      // Authentication delegate\n      qx.lang.Object.mergeWith(requestHeaders, this.__getAuthRequestHeaders());\n      // User-defined, requestHeaders property (deprecated)\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeadersDeprecated);\n      // User-defined\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeaders);\n\n      return requestHeaders;\n    },\n\n    /**\n     * Retrieve authentication headers from auth delegate.\n     *\n     * @return {Map} Authentication related request headers.\n     */\n    __getAuthRequestHeaders() {\n      var auth = this.getAuthentication(),\n        headers = {};\n\n      if (auth) {\n        auth.getAuthHeaders().forEach(function (header) {\n          headers[header.key] = header.value;\n        });\n        return headers;\n      }\n    },\n\n    /**\n     * Set a request header.\n     *\n     * Note: Setting request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     * @param value {String} Value of the header.\n     */\n    setRequestHeader(key, value) {\n      this.__requestHeaders[key] = value;\n    },\n\n    /**\n     * Get a request header.\n     *\n     * @param key {String} Key of the header.\n     * @return {String} The value of the header.\n     */\n    getRequestHeader(key) {\n      return this.__requestHeaders[key];\n    },\n\n    /**\n     * Remove a request header.\n     *\n     * Note: Removing request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     */\n    removeRequestHeader(key) {\n      if (this.__requestHeaders[key]) {\n        delete this.__requestHeaders[key];\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     QUERY TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get low-level transport.\n     *\n     * Note: To be used with caution!\n     *\n     * This method can be used to query the transport directly,\n     * but should be used with caution. Especially, it\n     * is not advisable to call any destructive methods\n     * such as <code>open</code> or <code>send</code>.\n     *\n     * @return {Object} An instance of a class found in\n     *  <code>qx.bom.request.*</code>\n     */\n\n    // This method mainly exists so that some methods found in the\n    // low-level transport can be deliberately omitted here,\n    // but still be accessed should it be absolutely necessary.\n    //\n    // Valid use cases include to query the transport’s responseXML\n    // property if performance is critical and any extra parsing\n    // should be avoided at all costs.\n    //\n    getTransport() {\n      return this._transport;\n    },\n\n    /**\n     * Get current ready state.\n     *\n     * States can be:\n     * UNSENT:           0,\n     * OPENED:           1,\n     * HEADERS_RECEIVED: 2,\n     * LOADING:          3,\n     * DONE:             4\n     *\n     * @return {Number} Ready state.\n     */\n    getReadyState() {\n      return this._transport.readyState;\n    },\n\n    /**\n     * Get current phase.\n     *\n     * A more elaborate version of {@link #getReadyState}, this method indicates\n     * the current phase of the request. Maps to stateful (i.e. deterministic)\n     * events (success, abort, timeout, statusError) and intermediate\n     * readyStates (unsent, configured, loading, load).\n     *\n     * When the requests is successful, it progresses the states:<br>\n     * 'unsent', 'opened', 'sent', 'loading', 'load', 'success'\n     *\n     * In case of failure, the final state is one of:<br>\n     * 'abort', 'timeout', 'statusError'\n     *\n     * For each change of the phase, a {@link #changePhase} data event is fired.\n     *\n     * @return {String} Current phase.\n     *\n     */\n    getPhase() {\n      return this.__phase;\n    },\n\n    /**\n     * Get status code.\n     *\n     * @return {Number} The transport’s status code.\n     */\n    getStatus() {\n      return this._transport.status;\n    },\n\n    /**\n     * Get status text.\n     *\n     * @return {String} The transport’s status text.\n     */\n    getStatusText() {\n      return this._transport.statusText;\n    },\n\n    /**\n     * Get raw (unprocessed) response.\n     *\n     * @return {String} The raw response of the request.\n     */\n    getResponseText() {\n      return this._transport.responseText;\n    },\n\n    /**\n     * Get all response headers from response.\n     *\n     * @return {String} All response headers.\n     */\n    getAllResponseHeaders() {\n      return this._transport.getAllResponseHeaders();\n    },\n\n    /**\n     * Get a single response header from response.\n     *\n     * @param key {String}\n     *   Key of the header to get the value from.\n     * @return {String}\n     *   Response header.\n     */\n    getResponseHeader(key) {\n      return this._transport.getResponseHeader(key);\n    },\n\n    /**\n     * Override the content type response header from response.\n     *\n     * @param contentType {String}\n     *   Content type for overriding.\n     * @see qx.bom.request.Xhr#overrideMimeType\n     */\n    overrideResponseContentType(contentType) {\n      return this._transport.overrideMimeType(contentType);\n    },\n\n    /**\n     * Get the content type response header from response.\n     *\n     * @return {String}\n     *   Content type response header.\n     */\n    getResponseContentType() {\n      return this.getResponseHeader(\"Content-Type\");\n    },\n\n    /**\n     * Whether request completed (is done).\n     */\n    isDone() {\n      return this.getReadyState() === 4;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get parsed response.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    getResponse() {\n      return this.__response;\n    },\n\n    /**\n     * Set response.\n     *\n     * @param response {String} The parsed response of the request.\n     */\n    _setResponse(response) {\n      var oldResponse = response;\n\n      if (this.__response !== response) {\n        this.__response = response;\n        this.fireEvent(\"changeResponse\", qx.event.type.Data, [\n          this.__response,\n          oldResponse\n        ]);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handle \"readyStateChange\" event.\n     */\n    _onReadyStateChange() {\n      var readyState = this.getReadyState();\n\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Fire readyState: \" + readyState);\n      }\n\n      this.fireEvent(\"readyStateChange\");\n\n      // Transport switches to readyState DONE on abort and may already\n      // have successful HTTP status when response is served from cache.\n      //\n      // Not fire custom event \"loading\" (or \"success\", when cached).\n      if (this.__abort) {\n        return;\n      }\n\n      if (readyState === 3) {\n        this._setPhase(\"loading\");\n      }\n\n      if (this.isDone()) {\n        this.__onReadyStateDone();\n      }\n    },\n\n    /**\n     * Called internally when readyState is DONE.\n     */\n    __onReadyStateDone() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Request completed with HTTP status: \" + this.getStatus());\n      }\n\n      // Event \"load\" fired in onLoad\n      this._setPhase(\"load\");\n\n      // Successful HTTP status\n      if (qx.util.Request.isSuccessful(this.getStatus())) {\n        // Parse response\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\n            \"Response is of type: '\" + this.getResponseContentType() + \"'\"\n          );\n        }\n\n        this._setResponse(this._getParsedResponse());\n\n        if (this._parserFailed) {\n          this.fireEvent(\"fail\");\n        } else {\n          this._fireStatefulEvent(\"success\");\n        }\n\n        // Erroneous HTTP status\n      } else {\n        try {\n          this._setResponse(this._getParsedResponse());\n        } catch (e) {\n          // ignore if it does not work\n        }\n\n        // A remote error failure\n        if (this.getStatus() !== 0) {\n          this._fireStatefulEvent(\"statusError\");\n          this.fireEvent(\"fail\");\n        }\n      }\n    },\n\n    /**\n     * Handle \"load\" event.\n     */\n    _onLoad() {\n      this.fireEvent(\"load\");\n    },\n\n    /**\n     * Handle \"loadEnd\" event.\n     */\n    _onLoadEnd() {\n      this.fireEvent(\"loadEnd\");\n    },\n\n    /**\n     * Handle \"abort\" event.\n     */\n    _onAbort() {\n      this._fireStatefulEvent(\"abort\");\n    },\n\n    /**\n     * Handle \"timeout\" event.\n     */\n    _onTimeout() {\n      this._fireStatefulEvent(\"timeout\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /**\n     * Handle \"error\" event.\n     */\n    _onError() {\n      this.fireEvent(\"error\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL / HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire stateful event.\n     *\n     * Fires event and sets phase to name of event.\n     *\n     * @param evt {String} Name of the event to fire.\n     */\n    _fireStatefulEvent(evt) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(evt);\n      }\n      this._setPhase(evt);\n      this.fireEvent(evt);\n    },\n\n    /**\n     * Set phase.\n     *\n     * @param phase {String} The phase to set.\n     */\n    _setPhase(phase) {\n      var previousPhase = this.__phase;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(phase);\n        qx.core.Assert.assertMatch(\n          phase,\n          /^(unsent)|(opened)|(sent)|(loading)|(load)|(success)|(abort)|(timeout)|(statusError)$/\n        );\n      }\n\n      this.__phase = phase;\n      this.fireDataEvent(\"changePhase\", phase, previousPhase);\n    },\n\n    /**\n     * Serialize data.\n     *\n     * @param data {String|Map|qx.core.Object} Data to serialize.\n     * @return {String|null} Serialized data.\n     */\n    _serializeData(data) {\n      var isPost =\n          typeof this.getMethod !== \"undefined\" && this.getMethod() == \"POST\",\n        isJson = /application\\/.*\\+?json/.test(\n          this.getRequestHeader(\"Content-Type\")\n        );\n\n      if (!data) {\n        return null;\n      }\n\n      if (qx.lang.Type.isString(data)) {\n        return data;\n      }\n\n      if (qx.Class.isSubClassOf(data.constructor, qx.core.Object)) {\n        return qx.util.Serializer.toUriParameter(data);\n      }\n\n      if (\n        isJson &&\n        (qx.lang.Type.isObject(data) || qx.lang.Type.isArray(data))\n      ) {\n        return qx.lang.Json.stringify(data);\n      }\n\n      if (qx.lang.Type.isObject(data)) {\n        return qx.util.Uri.toParameter(data, isPost);\n      }\n\n      return null;\n    }\n  },\n\n  environment: {\n    \"qx.debug.io\": false\n  },\n\n  destruct() {\n    var transport = this._transport,\n      noop = function () {};\n\n    if (this._transport) {\n      transport.onreadystatechange =\n        transport.onload =\n        transport.onloadend =\n        transport.onabort =\n        transport.ontimeout =\n        transport.onerror =\n          noop;\n\n      // [BUG #8315] dispose asynchronously to work with Sinon.js fake server\n      window.setTimeout(function () {\n        transport.dispose();\n      }, 0);\n    }\n    this.__response = null;\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}