{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "loader",
    "_loader",
    "Part",
    "getInstance",
    "self",
    "onpart",
    "part",
    "getReadyState",
    "fireDataEvent",
    "getName",
    "events",
    "partLoaded",
    "partLoadingError",
    "statics",
    "require",
    "partNames",
    "callback",
    "members",
    "getPart",
    "name",
    "getParts",
    "hasPart",
    "undefined",
    "io",
    "PartLoader"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/PartLoader.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The part loader knows about all generated packages and parts.\n *\n * It contains functionality to load parts and to retrieve part instances.\n */\nqx.Class.define(\"qx.io.PartLoader\", {\n  type: \"singleton\",\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    var loader = (this._loader = qx.Part.getInstance());\n\n    var self = this;\n    loader.onpart = function (part) {\n      if (part.getReadyState() == \"complete\") {\n        self.fireDataEvent(\"partLoaded\", part);\n      } else {\n        self.fireDataEvent(\"partLoadingError\", part.getName());\n      }\n    };\n  },\n\n  events: {\n    /**\n     * Fired if a parts was loaded. The data of the event instance point to the\n     * loaded part instance.\n     */\n    partLoaded: \"qx.event.type.Data\",\n\n    /**\n     * Fired if a part could not be loaded. The event's\n     * {@link qx.event.type.Data#getData} method returns the name of the failed\n     * part.\n     */\n    partLoadingError: \"qx.event.type.Data\"\n  },\n\n  statics: {\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String[]} List of parts names to load as defined in the\n     *    config file at compile time.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require(partNames, callback, self) {\n      this.getInstance().require(partNames, callback, self);\n    }\n  },\n\n  members: {\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String|String[]} List of parts names to load as defined\n     *    in the config file at compile time. The method also accepts a single\n     *    string as parameter to only load one part.\n     * @param callback {Function} Function to execute on completion\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require(partNames, callback, self) {\n      this._loader.require(partNames, callback, self);\n    },\n\n    /**\n     * Get the part instance of the part with the given name.\n     *\n     * @param name {String} Name of the part as defined in the config file at\n     *    compile time.\n     * @return {qx.io.part.Part} The corresponding part instance\n     */\n    getPart(name) {\n      return this.getParts()[name];\n    },\n\n    /**\n     * Checks if a part with the given name is available.\n     * @param name {String} Name of the part as defined in the config file at\n     *    compile time.\n     * @return {Boolean} <code>true</code>, if the part is available\n     */\n    hasPart(name) {\n      return this.getPart(name) !== undefined;\n    },\n\n    /**\n     * Returns a map of all known parts.\n     * @return {Map} Map containing all parts.\n     */\n    getParts() {\n      return this._loader.getParts();\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kBAAkB,EAAE;IAClCC,IAAI,EAAE,WAAW;IACjBC,MAAM,EAAEP,EAAE,CAACQ,IAAI,CAACC,MAAM;IAEtBC,SAAS,WAATA,SAASA,CAAA,EAAG;MACVV,EAAA,CAAAQ,IAAA,CAAAC,MAAA,CAAAE,WAAA,CAAAC,IAAA;MAEA,IAAIC,MAAM,GAAI,IAAI,CAACC,OAAO,GAAGd,EAAE,CAACe,IAAI,CAACC,WAAW,CAAC,CAAE;MAEnD,IAAIC,IAAI,GAAG,IAAI;MACfJ,MAAM,CAACK,MAAM,GAAG,UAAUC,IAAI,EAAE;QAC9B,IAAIA,IAAI,CAACC,aAAa,CAAC,CAAC,IAAI,UAAU,EAAE;UACtCH,IAAI,CAACI,aAAa,CAAC,YAAY,EAAEF,IAAI,CAAC;QACxC,CAAC,MAAM;UACLF,IAAI,CAACI,aAAa,CAAC,kBAAkB,EAAEF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;QACxD;MACF,CAAC;IACH,CAAC;IAEDC,MAAM,EAAE;MACN;AACJ;AACA;AACA;MACIC,UAAU,EAAE,oBAAoB;MAEhC;AACJ;AACA;AACA;AACA;MACIC,gBAAgB,EAAE;IACpB,CAAC;IAEDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,WAAPA,OAAOA,CAACC,SAAS,EAAEC,QAAQ,EAAEZ,IAAI,EAAE;QACjC,IAAI,CAACD,WAAW,CAAC,CAAC,CAACW,OAAO,CAACC,SAAS,EAAEC,QAAQ,EAAEZ,IAAI,CAAC;MACvD;IACF,CAAC;IAEDa,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIH,OAAO,WAAPA,OAAOA,CAACC,SAAS,EAAEC,QAAQ,EAAEZ,IAAI,EAAE;QACjC,IAAI,CAACH,OAAO,CAACa,OAAO,CAACC,SAAS,EAAEC,QAAQ,EAAEZ,IAAI,CAAC;MACjD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIc,OAAO,WAAPA,OAAOA,CAACC,IAAI,EAAE;QACZ,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACD,IAAI,CAAC;MAC9B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIE,OAAO,WAAPA,OAAOA,CAACF,IAAI,EAAE;QACZ,OAAO,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC,KAAKG,SAAS;MACzC,CAAC;MAED;AACJ;AACA;AACA;MACIF,QAAQ,WAARA,QAAQA,CAAA,EAAG;QACT,OAAO,IAAI,CAACnB,OAAO,CAACmB,QAAQ,CAAC,CAAC;MAChC;IACF;EACF,CAAC,CAAC;EAxHFjC,EAAE,CAACoC,EAAE,CAACC,UAAU,CAAClC,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}