{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "loader",
    "_loader",
    "Part",
    "getInstance",
    "self",
    "onpart",
    "part",
    "getReadyState",
    "fireDataEvent",
    "getName",
    "events",
    "partLoaded",
    "partLoadingError",
    "statics",
    "require",
    "partNames",
    "callback",
    "members",
    "getPart",
    "name",
    "getParts",
    "hasPart",
    "undefined",
    "io",
    "PartLoader"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/PartLoader.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The part loader knows about all generated packages and parts.\n *\n * It contains functionality to load parts and to retrieve part instances.\n */\nqx.Class.define(\"qx.io.PartLoader\", {\n  type: \"singleton\",\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    var loader = (this._loader = qx.Part.getInstance());\n\n    var self = this;\n    loader.onpart = function (part) {\n      if (part.getReadyState() == \"complete\") {\n        self.fireDataEvent(\"partLoaded\", part);\n      } else {\n        self.fireDataEvent(\"partLoadingError\", part.getName());\n      }\n    };\n  },\n\n  events: {\n    /**\n     * Fired if a parts was loaded. The data of the event instance point to the\n     * loaded part instance.\n     */\n    partLoaded: \"qx.event.type.Data\",\n\n    /**\n     * Fired if a part could not be loaded. The event's\n     * {@link qx.event.type.Data#getData} method returns the name of the failed\n     * part.\n     */\n    partLoadingError: \"qx.event.type.Data\"\n  },\n\n  statics: {\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String[]} List of parts names to load as defined in the\n     *    config file at compile time.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require(partNames, callback, self) {\n      this.getInstance().require(partNames, callback, self);\n    }\n  },\n\n  members: {\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String|String[]} List of parts names to load as defined\n     *    in the config file at compile time. The method also accepts a single\n     *    string as parameter to only load one part.\n     * @param callback {Function} Function to execute on completion\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require(partNames, callback, self) {\n      this._loader.require(partNames, callback, self);\n    },\n\n    /**\n     * Get the part instance of the part with the given name.\n     *\n     * @param name {String} Name of the part as defined in the config file at\n     *    compile time.\n     * @return {qx.io.part.Part} The corresponding part instance\n     */\n    getPart(name) {\n      return this.getParts()[name];\n    },\n\n    /**\n     * Checks if a part with the given name is available.\n     * @param name {String} Name of the part as defined in the config file at\n     *    compile time.\n     * @return {Boolean} <code>true</code>, if the part is available\n     */\n    hasPart(name) {\n      return this.getPart(name) !== undefined;\n    },\n\n    /**\n     * Returns a map of all known parts.\n     * @return {Map} Map containing all parts.\n     */\n    getParts() {\n      return this._loader.getParts();\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kBAAhB,EAAoC;IAClCC,IAAI,EAAE,WAD4B;IAElCC,MAAM,EAAEP,EAAE,CAACQ,IAAH,CAAQC,MAFkB;IAIlCC,SAJkC,uBAItB;MACV;MAEA,IAAIC,MAAM,GAAI,KAAKC,OAAL,GAAeZ,EAAE,CAACa,IAAH,CAAQC,WAAR,EAA7B;MAEA,IAAIC,IAAI,GAAG,IAAX;;MACAJ,MAAM,CAACK,MAAP,GAAgB,UAAUC,IAAV,EAAgB;QAC9B,IAAIA,IAAI,CAACC,aAAL,MAAwB,UAA5B,EAAwC;UACtCH,IAAI,CAACI,aAAL,CAAmB,YAAnB,EAAiCF,IAAjC;QACD,CAFD,MAEO;UACLF,IAAI,CAACI,aAAL,CAAmB,kBAAnB,EAAuCF,IAAI,CAACG,OAAL,EAAvC;QACD;MACF,CAND;IAOD,CAjBiC;IAmBlCC,MAAM,EAAE;MACN;AACJ;AACA;AACA;MACIC,UAAU,EAAE,oBALN;;MAON;AACJ;AACA;AACA;AACA;MACIC,gBAAgB,EAAE;IAZZ,CAnB0B;IAkClCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAbO,mBAaCC,SAbD,EAaYC,QAbZ,EAasBZ,IAbtB,EAa4B;QACjC,KAAKD,WAAL,GAAmBW,OAAnB,CAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDZ,IAAhD;MACD;IAfM,CAlCyB;IAoDlCa,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIH,OAZO,mBAYCC,SAZD,EAYYC,QAZZ,EAYsBZ,IAZtB,EAY4B;QACjC,KAAKH,OAAL,CAAaa,OAAb,CAAqBC,SAArB,EAAgCC,QAAhC,EAA0CZ,IAA1C;MACD,CAdM;;MAgBP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIc,OAvBO,mBAuBCC,IAvBD,EAuBO;QACZ,OAAO,KAAKC,QAAL,GAAgBD,IAAhB,CAAP;MACD,CAzBM;;MA2BP;AACJ;AACA;AACA;AACA;AACA;MACIE,OAjCO,mBAiCCF,IAjCD,EAiCO;QACZ,OAAO,KAAKD,OAAL,CAAaC,IAAb,MAAuBG,SAA9B;MACD,CAnCM;;MAqCP;AACJ;AACA;AACA;MACIF,QAzCO,sBAyCI;QACT,OAAO,KAAKnB,OAAL,CAAamB,QAAb,EAAP;MACD;IA3CM;EApDyB,CAApC;EAvBA/B,EAAE,CAACkC,EAAH,CAAMC,UAAN,CAAiBhC,aAAjB,GAAiCA,aAAjC"
}