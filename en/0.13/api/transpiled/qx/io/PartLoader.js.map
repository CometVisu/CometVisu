{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "loader",
    "_loader",
    "Part",
    "getInstance",
    "self",
    "onpart",
    "part",
    "getReadyState",
    "fireDataEvent",
    "getName",
    "events",
    "partLoaded",
    "partLoadingError",
    "statics",
    "require",
    "partNames",
    "callback",
    "members",
    "getPart",
    "name",
    "getParts",
    "hasPart",
    "undefined",
    "io",
    "PartLoader"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/PartLoader.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The part loader knows about all generated packages and parts.\r\n *\r\n * It contains functionality to load parts and to retrieve part instances.\r\n */\r\nqx.Class.define(\"qx.io.PartLoader\", {\r\n  type: \"singleton\",\r\n  extend: qx.core.Object,\r\n\r\n  construct() {\r\n    super();\r\n\r\n    var loader = (this._loader = qx.Part.getInstance());\r\n\r\n    var self = this;\r\n    loader.onpart = function (part) {\r\n      if (part.getReadyState() == \"complete\") {\r\n        self.fireDataEvent(\"partLoaded\", part);\r\n      } else {\r\n        self.fireDataEvent(\"partLoadingError\", part.getName());\r\n      }\r\n    };\r\n  },\r\n\r\n  events: {\r\n    /**\r\n     * Fired if a parts was loaded. The data of the event instance point to the\r\n     * loaded part instance.\r\n     */\r\n    partLoaded: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired if a part could not be loaded. The event's\r\n     * {@link qx.event.type.Data#getData} method returns the name of the failed\r\n     * part.\r\n     */\r\n    partLoadingError: \"qx.event.type.Data\"\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * Loads one or more parts asynchronously. The callback is called after all\r\n     * parts and their dependencies are fully loaded. If the parts are already\r\n     * loaded the callback is called immediately.\r\n     *\r\n     * @param partNames {String[]} List of parts names to load as defined in the\r\n     *    config file at compile time.\r\n     * @param callback {Function} Function to execute on completion.\r\n     *   The function has one parameter which is an array of ready states of\r\n     *   the parts specified in the partNames argument.\r\n     * @param self {Object?window} Context to execute the given function in\r\n     */\r\n    require(partNames, callback, self) {\r\n      this.getInstance().require(partNames, callback, self);\r\n    }\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * Loads one or more parts asynchronously. The callback is called after all\r\n     * parts and their dependencies are fully loaded. If the parts are already\r\n     * loaded the callback is called immediately.\r\n     *\r\n     * @param partNames {String|String[]} List of parts names to load as defined\r\n     *    in the config file at compile time. The method also accepts a single\r\n     *    string as parameter to only load one part.\r\n     * @param callback {Function} Function to execute on completion\r\n     * @param self {Object?window} Context to execute the given function in\r\n     */\r\n    require(partNames, callback, self) {\r\n      this._loader.require(partNames, callback, self);\r\n    },\r\n\r\n    /**\r\n     * Get the part instance of the part with the given name.\r\n     *\r\n     * @param name {String} Name of the part as defined in the config file at\r\n     *    compile time.\r\n     * @return {qx.io.part.Part} The corresponding part instance\r\n     */\r\n    getPart(name) {\r\n      return this.getParts()[name];\r\n    },\r\n\r\n    /**\r\n     * Checks if a part with the given name is available.\r\n     * @param name {String} Name of the part as defined in the config file at\r\n     *    compile time.\r\n     * @return {Boolean} <code>true</code>, if the part is available\r\n     */\r\n    hasPart(name) {\r\n      return this.getPart(name) !== undefined;\r\n    },\r\n\r\n    /**\r\n     * Returns a map of all known parts.\r\n     * @return {Map} Map containing all parts.\r\n     */\r\n    getParts() {\r\n      return this._loader.getParts();\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kBAAkB,EAAE;IAClCC,IAAI,EAAE,WAAW;IACjBC,MAAM,EAAEP,EAAE,CAACQ,IAAI,CAACC,MAAM;IAEtBC,SAAS,WAAAA,UAAA,EAAG;MACVV,EAAA,CAAAQ,IAAA,CAAAC,MAAA,CAAAE,WAAA,CAAAC,IAAA;MAEA,IAAIC,MAAM,GAAI,IAAI,CAACC,OAAO,GAAGd,EAAE,CAACe,IAAI,CAACC,WAAW,CAAC,CAAE;MAEnD,IAAIC,IAAI,GAAG,IAAI;MACfJ,MAAM,CAACK,MAAM,GAAG,UAAUC,IAAI,EAAE;QAC9B,IAAIA,IAAI,CAACC,aAAa,CAAC,CAAC,IAAI,UAAU,EAAE;UACtCH,IAAI,CAACI,aAAa,CAAC,YAAY,EAAEF,IAAI,CAAC;QACxC,CAAC,MAAM;UACLF,IAAI,CAACI,aAAa,CAAC,kBAAkB,EAAEF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;QACxD;MACF,CAAC;IACH,CAAC;IAEDC,MAAM,EAAE;MACN;AACJ;AACA;AACA;MACIC,UAAU,EAAE,oBAAoB;MAEhC;AACJ;AACA;AACA;AACA;MACIC,gBAAgB,EAAE;IACpB,CAAC;IAEDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAACC,SAAS,EAAEC,QAAQ,EAAEZ,IAAI,EAAE;QACjC,IAAI,CAACD,WAAW,CAAC,CAAC,CAACW,OAAO,CAACC,SAAS,EAAEC,QAAQ,EAAEZ,IAAI,CAAC;MACvD;IACF,CAAC;IAEDa,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIH,OAAO,WAAAA,QAACC,SAAS,EAAEC,QAAQ,EAAEZ,IAAI,EAAE;QACjC,IAAI,CAACH,OAAO,CAACa,OAAO,CAACC,SAAS,EAAEC,QAAQ,EAAEZ,IAAI,CAAC;MACjD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIc,OAAO,WAAAA,QAACC,IAAI,EAAE;QACZ,OAAO,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACD,IAAI,CAAC;MAC9B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIE,OAAO,WAAAA,QAACF,IAAI,EAAE;QACZ,OAAO,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC,KAAKG,SAAS;MACzC,CAAC;MAED;AACJ;AACA;AACA;MACIF,QAAQ,WAAAA,SAAA,EAAG;QACT,OAAO,IAAI,CAACnB,OAAO,CAACmB,QAAQ,CAAC,CAAC;MAChC;IACF;EACF,CAAC,CAAC;EAxHFjC,EAAE,CAACoC,EAAE,CAACC,UAAU,CAAClC,aAAa,GAAGA,aAAa;AAAC"
}