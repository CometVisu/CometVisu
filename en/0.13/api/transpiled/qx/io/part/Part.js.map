{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "name",
    "packages",
    "loader",
    "__name",
    "_readyState",
    "_packages",
    "_loader",
    "i",
    "length",
    "getReadyState",
    "members",
    "getName",
    "getPackages",
    "preload",
    "callback",
    "self",
    "window",
    "setTimeout",
    "call",
    "load",
    "_checkCompleteLoading",
    "_appendPartListener",
    "part",
    "onLoad",
    "pkg",
    "addPackageListener",
    "notifyPackageResult",
    "_markAsCompleted",
    "Error",
    "that",
    "addPartListener",
    "_signalStartup",
    "readyState",
    "notifyPartResult",
    "$$loader",
    "applicationHandlerReady",
    "signalStartup",
    "io",
    "Part"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/io/part/Part.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Wrapper for a part as defined in the config file. This class knows about all\r\n * packages the part depends on and provides functionality to load the part.\r\n *\r\n * @internal\r\n */\r\nqx.Bootstrap.define(\"qx.io.part.Part\", {\r\n  /**\r\n   * @param name {String} Name of the part as defined in the config file at\r\n   *    compile time.\r\n   * @param packages {qx.io.part.Package[]} List of dependent packages\r\n   * @param loader {qx.Part} The loader of this part.\r\n   */\r\n  construct(name, packages, loader) {\r\n    this.__name = name;\r\n    this._readyState = \"complete\";\r\n    this._packages = packages;\r\n    this._loader = loader;\r\n\r\n    for (var i = 0; i < packages.length; i++) {\r\n      if (packages[i].getReadyState() !== \"complete\") {\r\n        this._readyState = \"initialized\";\r\n        break;\r\n      }\r\n    }\r\n  },\r\n\r\n  members: {\r\n    _readyState: null,\r\n    _loader: null,\r\n    _packages: null,\r\n    __name: null,\r\n\r\n    /**\r\n     * Get the ready state of the part. The value is one of\r\n     * <ul>\r\n     * <li>\r\n     *   <b>initialized</b>: The part is initialized. The {@link #load}\r\n     *   method has not yet been called\r\n     * </li>\r\n     * <li><b>loading</b>: The part is still loading.</li>\r\n     * <li><b>complete</b>: The part has been loaded successfully</li>\r\n     * </li>\r\n     *\r\n     * @return {String} The ready state.\r\n     */\r\n    getReadyState() {\r\n      return this._readyState;\r\n    },\r\n\r\n    /**\r\n     * The part name as defined in the config file\r\n     *\r\n     * @return {String} The part name\r\n     */\r\n    getName() {\r\n      return this.__name;\r\n    },\r\n\r\n    /**\r\n     * Internal helper for testing purposes.\r\n     * @internal\r\n     * @return {qx.io.part.Package[]} All contained packages in an array.\r\n     */\r\n    getPackages() {\r\n      return this._packages;\r\n    },\r\n\r\n    /**\r\n     * Method for preloading this part.\r\n     * Empty implementation! Regular parts can not be preloaded.\r\n     *\r\n     * @param callback {Function} Callback for the preload.\r\n     * @param self {Object?} The context of the callback.\r\n     */\r\n    preload(callback, self) {\r\n      // Just do nothing because you can not preload regular parts.\r\n      // Also, loading the part here is not a good idea because it could break\r\n      // the load order of the packages if someone uses preload right after\r\n      // loading another part. So we just invoke the callback async.\r\n      if (callback) {\r\n        window.setTimeout(function () {\r\n          callback.call(self, this);\r\n        }, 0);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Loads the part asynchronously. The callback is called after the part and\r\n     * its dependencies are fully loaded. If the part is already loaded the\r\n     * callback is called immediately.\r\n     *\r\n     * @internal\r\n     *\r\n     * @param callback {Function} Function to execute on completion\r\n     * @param self {Object?window} Context to execute the given function in\r\n     */\r\n    load(callback, self) {\r\n      if (this._checkCompleteLoading(callback, self)) {\r\n        return;\r\n      }\r\n\r\n      this._readyState = \"loading\";\r\n\r\n      if (callback) {\r\n        this._appendPartListener(callback, self, this);\r\n      }\r\n\r\n      var part = this;\r\n      var onLoad = function () {\r\n        part.load();\r\n      };\r\n\r\n      for (var i = 0; i < this._packages.length; i++) {\r\n        var pkg = this._packages[i];\r\n        switch (pkg.getReadyState()) {\r\n          case \"initialized\":\r\n            this._loader.addPackageListener(pkg, onLoad);\r\n            pkg.load(this._loader.notifyPackageResult, this._loader);\r\n            return;\r\n\r\n          case \"loading\":\r\n            this._loader.addPackageListener(pkg, onLoad);\r\n            return;\r\n\r\n          case \"complete\":\r\n            break;\r\n\r\n          case \"error\":\r\n            this._markAsCompleted(\"error\");\r\n            return;\r\n\r\n          default:\r\n            throw new Error(\"Invalid case! \" + pkg.getReadyState());\r\n        }\r\n      }\r\n\r\n      this._markAsCompleted(\"complete\");\r\n    },\r\n\r\n    /**\r\n     * Helper for appending a listener for this part.\r\n     *\r\n     * @param callback {Function} The function to call when the part is loaded.\r\n     * @param self {Object?} The context of the callback.\r\n     * @param part {qx.io.part.Part|qx.io.part.ClosurePart} The part to listen\r\n     *   to.\r\n     */\r\n    _appendPartListener(callback, self, part) {\r\n      var that = this;\r\n      this._loader.addPartListener(this, function () {\r\n        that._signalStartup();\r\n        callback.call(self, part._readyState);\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Helper for marking the part as complete.\r\n     *\r\n     * @param readyState {String} The new ready state.\r\n     */\r\n    _markAsCompleted(readyState) {\r\n      this._readyState = readyState;\r\n      this._loader.notifyPartResult(this);\r\n    },\r\n\r\n    /**\r\n     * Method used to start up the application in case not all parts\r\n     * necessary to initialize the application are in the boot part. [BUG #3793]\r\n     */\r\n    _signalStartup() {\r\n      // signal the application startup if not already done\r\n      if (!qx.$$loader.applicationHandlerReady) {\r\n        qx.$$loader.signalStartup();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper for checking if the part is loaded completely.\r\n     *\r\n     * @param callback {Function} The function to be called if the part has\r\n     *   been loaded completely.\r\n     * @param self {Object} The context of the callback function.\r\n     * @return {Boolean} true, if the part is loading, complete or has an error.\r\n     */\r\n    _checkCompleteLoading(callback, self) {\r\n      // check if its already loaded\r\n      var readyState = this._readyState;\r\n      if (readyState == \"complete\" || readyState == \"error\") {\r\n        if (callback) {\r\n          var that = this;\r\n          setTimeout(function () {\r\n            that._signalStartup();\r\n            callback.call(self, readyState);\r\n          }, 0);\r\n        }\r\n        return true;\r\n      }\r\n      // add a listener if it is currently loading\r\n      else if (readyState == \"loading\" && callback) {\r\n        this._appendPartListener(callback, self, this);\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}