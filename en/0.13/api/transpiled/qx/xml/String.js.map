{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "TO_CHARCODE",
    "quot",
    "amp",
    "lt",
    "gt",
    "apos",
    "FROM_CHARCODE",
    "escape",
    "str",
    "util",
    "StringEscape",
    "unescape",
    "xml",
    "String"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/xml/String.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Escaping and unescaping of XML strings.\n */\nqx.Class.define(\"qx.xml.String\", {\n  statics: {\n    /** Mapping of XML entity names to the corresponding char code */\n    TO_CHARCODE: {\n      quot: 34, // \" - double-quote\n      amp: 38, // &\n      lt: 60, // <\n      gt: 62, // >\n      apos: 39 // XML apostrophe\n    },\n\n    /** Mapping of char codes to XML entity names */\n    FROM_CHARCODE: {\n      34: \"quot\", // \" - double-quote\n      38: \"amp\", // &\n      60: \"lt\", // <\n      62: \"gt\", // >\n      39: \"apos\" // XML apostrophe\n    },\n\n    /**\n     * Escapes the characters in a <code>String</code> using XML entities.\n     *\n     * For example: <tt>\"bread\" & \"butter\"</tt> =>\n     * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n     *\n     * Supports only the four basic XML entities (gt, lt, quot, amp).\n     * Does not support DTDs or external entities.\n     * Note that unicode characters greater than 0x7f are currently escaped to their numerical \\\\u equivalent.\n     *\n     * @param str {String} the string to be escaped\n     * @return {String} the escaped string\n     */\n    escape(str) {\n      return qx.util.StringEscape.escape(str, this.FROM_CHARCODE);\n    },\n\n    /**\n     * Unescapes a string containing XML entity escapes to a string\n     * containing the actual Unicode characters corresponding to the\n     * escapes.\n     *\n     * Supports only the four basic XML entities (gt, lt, quot, amp).\n     * Does not support DTDs or external entities.\n     *\n     * @param str {String} the string to be unescaped\n     * @return {String} the unescaped string\n     */\n    unescape(str) {\n      return qx.util.StringEscape.unescape(str, this.TO_CHARCODE);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,eAAhB,EAAiC;IAC/BC,OAAO,EAAE;MACP;MACAC,WAAW,EAAE;QACXC,IAAI,EAAE,EADK;QACD;QACVC,GAAG,EAAE,EAFM;QAEF;QACTC,EAAE,EAAE,EAHO;QAGH;QACRC,EAAE,EAAE,EAJO;QAIH;QACRC,IAAI,EAAE,EALK,CAKF;;MALE,CAFN;;MAUP;MACAC,aAAa,EAAE;QACb,IAAI,MADS;QACD;QACZ,IAAI,KAFS;QAEF;QACX,IAAI,IAHS;QAGH;QACV,IAAI,IAJS;QAIH;QACV,IAAI,MALS,CAKF;;MALE,CAXR;;MAmBP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAhCO,kBAgCAC,GAhCA,EAgCK;QACV,OAAOf,EAAE,CAACgB,IAAH,CAAQC,YAAR,CAAqBH,MAArB,CAA4BC,GAA5B,EAAiC,KAAKF,aAAtC,CAAP;MACD,CAlCM;;MAoCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,QA/CO,oBA+CEH,GA/CF,EA+CO;QACZ,OAAOf,EAAE,CAACgB,IAAH,CAAQC,YAAR,CAAqBC,QAArB,CAA8BH,GAA9B,EAAmC,KAAKR,WAAxC,CAAP;MACD;IAjDM;EADsB,CAAjC;EArBAP,EAAE,CAACmB,GAAH,CAAOC,MAAP,CAAcjB,aAAd,GAA8BA,aAA9B"
}