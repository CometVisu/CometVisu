{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__xpe",
    "XML_SERIALIZER",
    "serialize",
    "element",
    "dom",
    "Node",
    "isDocument",
    "documentElement",
    "XMLSerializer",
    "serializeToString",
    "xml",
    "outerHTML",
    "selectSingleNode",
    "query",
    "namespaces",
    "core",
    "Environment",
    "get",
    "XPathEvaluator",
    "xpe",
    "resolver",
    "prefix",
    "createNSResolver",
    "evaluate",
    "XPathResult",
    "FIRST_ORDERED_NODE_TYPE",
    "singleNodeValue",
    "err",
    "Error",
    "namespaceString",
    "ownerDocument",
    "setProperty",
    "selectNodes",
    "result",
    "ORDERED_NODE_SNAPSHOT_TYPE",
    "nodes",
    "i",
    "snapshotLength",
    "snapshotItem",
    "getElementsByTagNameNS",
    "namespaceURI",
    "tagname",
    "doc",
    "Element",
    "getSingleNodeText",
    "node",
    "getText",
    "setAttributeNS",
    "document",
    "namespaceUri",
    "name",
    "value",
    "attr",
    "createNode",
    "nodeValue",
    "setAttributeNode",
    "getAttributeNS",
    "attributes",
    "attribute",
    "getQualifiedItem",
    "createSubElementNS",
    "parent",
    "createElementNS",
    "appendChild",
    "defer",
    "window"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/xml/Element.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Cross browser XML Element API\r\n *\r\n * API to select, query and serialize XML elements.\r\n *\r\n * Further information:\r\n *\r\n * * <a href=\"https://developer.mozilla.org/en-US/docs/Parsing_and_serializing_XML\">MDN Parsing and Serializing XML</a>\r\n *\r\n * Please note that nodes selected using the <code>selectSingleNode()</code> and\r\n * <code>selectNodes()</code> methods remain in their document context so\r\n * <code>qx.xml.Element.selectNodes(foo, \"//bar\");</code>\r\n * will search the entire document for any nodes named \"bar\", not just the\r\n * <code>foo</code> node.\r\n */\r\nqx.Class.define(\"qx.xml.Element\", {\r\n  statics: {\r\n    __xpe: null,\r\n\r\n    /**\r\n     * @type {Boolean} <code>true</code> if the native XMLSerializer should be used,\r\n     * <code>false</code> otherwise.\r\n     */\r\n    XML_SERIALIZER: false,\r\n\r\n    /**\r\n     * The subtree rooted by the specified element or document is serialized to a string.\r\n     *\r\n     * @param element {Element | Document} The root of the subtree to be serialized. This could be any node, including a Document.\r\n     * @return {String} Serialized subtree\r\n     */\r\n    serialize(element) {\r\n      if (qx.dom.Node.isDocument(element)) {\r\n        element = element.documentElement;\r\n      }\r\n\r\n      if (this.XML_SERIALIZER) {\r\n        return new XMLSerializer().serializeToString(element);\r\n      } else {\r\n        return element.xml || element.outerHTML;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Selects the first XmlNode that matches the XPath expression.\r\n     *\r\n     * @param element {Element | Document} root element for the search\r\n     * @param query {String} XPath query\r\n     * @param namespaces {Map} optional map of prefixes and their namespace URIs\r\n     * @return {Element} first matching element\r\n     */\r\n    selectSingleNode(element, query, namespaces) {\r\n      if (qx.core.Environment.get(\"html.xpath\")) {\r\n        if (!this.__xpe) {\r\n          this.__xpe = new XPathEvaluator();\r\n        }\r\n\r\n        var xpe = this.__xpe;\r\n\r\n        var resolver;\r\n\r\n        if (namespaces) {\r\n          resolver = function (prefix) {\r\n            return namespaces[prefix] || null;\r\n          };\r\n        } else {\r\n          resolver = xpe.createNSResolver(element);\r\n        }\r\n\r\n        try {\r\n          return xpe.evaluate(\r\n            query,\r\n            element,\r\n            resolver,\r\n            XPathResult.FIRST_ORDERED_NODE_TYPE,\r\n            null\r\n          ).singleNodeValue;\r\n        } catch (err) {\r\n          throw new Error(\r\n            \"selectSingleNode: query: \" +\r\n              query +\r\n              \", element: \" +\r\n              element +\r\n              \", error: \" +\r\n              err\r\n          );\r\n        }\r\n      }\r\n\r\n      if (qx.core.Environment.get(\"xml.selectsinglenode\")) {\r\n        if (namespaces) {\r\n          var namespaceString = \"\";\r\n          for (var prefix in namespaces) {\r\n            namespaceString +=\r\n              \"xmlns:\" + prefix + \"='\" + namespaces[prefix] + \"' \";\r\n          }\r\n\r\n          // If the element is a node, set the selection namespace on its parent document.\r\n          if (element.ownerDocument) {\r\n            element.ownerDocument.setProperty(\r\n              \"SelectionNamespaces\",\r\n              namespaceString\r\n            );\r\n          }\r\n          // element is a document\r\n          else {\r\n            element.setProperty(\"SelectionNamespaces\", namespaceString);\r\n          }\r\n        }\r\n\r\n        return element.selectSingleNode(query);\r\n      }\r\n\r\n      throw new Error(\"No XPath implementation available!\");\r\n    },\r\n\r\n    /**\r\n     * Selects a list of nodes matching the XPath expression.\r\n     *\r\n     * @param element {Element | Document} root element for the search\r\n     * @param query {String} XPath query\r\n     * @param namespaces {Map} optional map of prefixes and their namespace URIs\r\n     * @return {Element[]} List of matching elements\r\n     */\r\n    selectNodes(element, query, namespaces) {\r\n      if (qx.core.Environment.get(\"html.xpath\")) {\r\n        var xpe = this.__xpe;\r\n\r\n        if (!xpe) {\r\n          this.__xpe = xpe = new XPathEvaluator();\r\n        }\r\n\r\n        var resolver;\r\n\r\n        if (namespaces) {\r\n          resolver = function (prefix) {\r\n            return namespaces[prefix] || null;\r\n          };\r\n        } else {\r\n          resolver = xpe.createNSResolver(element);\r\n        }\r\n\r\n        try {\r\n          var result = xpe.evaluate(\r\n            query,\r\n            element,\r\n            resolver,\r\n            XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,\r\n            null\r\n          );\r\n        } catch (err) {\r\n          throw new Error(\r\n            \"selectNodes: query: \" +\r\n              query +\r\n              \", element: \" +\r\n              element +\r\n              \", error: \" +\r\n              err\r\n          );\r\n        }\r\n\r\n        var nodes = [];\r\n        for (var i = 0; i < result.snapshotLength; i++) {\r\n          nodes[i] = result.snapshotItem(i);\r\n        }\r\n\r\n        return nodes;\r\n      }\r\n\r\n      if (qx.core.Environment.get(\"xml.selectnodes\")) {\r\n        if (namespaces) {\r\n          var namespaceString = \"\";\r\n          for (var prefix in namespaces) {\r\n            namespaceString +=\r\n              \"xmlns:\" + prefix + \"='\" + namespaces[prefix] + \"' \";\r\n          }\r\n\r\n          // If the element is a node, set the selection namespace on its parent document.\r\n          if (element.ownerDocument) {\r\n            element.ownerDocument.setProperty(\r\n              \"SelectionNamespaces\",\r\n              namespaceString\r\n            );\r\n          }\r\n          // element is a document\r\n          else {\r\n            element.setProperty(\"SelectionNamespaces\", namespaceString);\r\n          }\r\n        }\r\n\r\n        return element.selectNodes(query);\r\n      }\r\n\r\n      throw new Error(\"No XPath implementation available!\");\r\n    },\r\n\r\n    /**\r\n     * Returns a list of elements with the given tag name belonging to the given namespace\r\n     *\r\n     * (See\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagNameNS\">MDN\r\n     * Reference</a>).\r\n     *\r\n     * @param element {Element | Document} the element from where the search should start.\r\n     *       Note that only the descendants of this element are included in the search, not the node itself.\r\n     * @param namespaceURI {var} is the namespace URI of elements to look for . For example, if you need to look\r\n     *       for XHTML elements, use the XHTML namespace URI, <tt>http://www.w3.org/1999/xhtml/</tt>.\r\n     * @param tagname {String} the tagname to look for\r\n     * @return {Element[]} a list of found elements in the order they appear in the tree.\r\n     */\r\n    getElementsByTagNameNS(element, namespaceURI, tagname) {\r\n      if (qx.core.Environment.get(\"xml.getelementsbytagnamens\")) {\r\n        return element.getElementsByTagNameNS(namespaceURI, tagname);\r\n      }\r\n\r\n      if (qx.core.Environment.get(\"xml.domproperties\")) {\r\n        var doc = element.ownerDocument || element;\r\n\r\n        doc.setProperty(\"SelectionLanguage\", \"XPath\");\r\n        doc.setProperty(\r\n          \"SelectionNamespaces\",\r\n          \"xmlns:ns='\" + namespaceURI + \"'\"\r\n        );\r\n\r\n        return qx.xml.Element.selectNodes(\r\n          element,\r\n          \"descendant-or-self::ns:\" + tagname\r\n        );\r\n      }\r\n\r\n      throw new Error(\"The client does not support this operation!\");\r\n    },\r\n\r\n    /**\r\n     * Selects the first XmlNode that matches the XPath expression and returns the text content of the element\r\n     *\r\n     * @param element {Element|Document} root element for the search\r\n     * @param query {String}  XPath query\r\n     * @return {String} the joined text content of the found element or null if not appropriate.\r\n     */\r\n    getSingleNodeText(element, query) {\r\n      var node = this.selectSingleNode(element, query);\r\n      return qx.dom.Node.getText(node);\r\n    },\r\n\r\n    /**\r\n     * Adds or sets an attribute with the given namespace on a node\r\n     *\r\n     * @param document {Document} The node's parent document, created e.g. by\r\n     * {@link qx.xml.Document#create}\r\n     * @param element {Element} XML/DOM element to modify\r\n     * @param namespaceUri {String} Namespace URI\r\n     * @param name {String} Attribute name\r\n     * @param value {String} Attribute value\r\n     */\r\n    setAttributeNS(document, element, namespaceUri, name, value) {\r\n      if (qx.core.Environment.get(\"xml.attributens\")) {\r\n        element.setAttributeNS(namespaceUri, name, value);\r\n      } else if (qx.core.Environment.get(\"xml.createnode\")) {\r\n        var attr = document.createNode(2, name, namespaceUri);\r\n        attr.nodeValue = value;\r\n        element.setAttributeNode(attr);\r\n      } else {\r\n        throw new Error(\"The client does not support this operation!\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get the value of the attribute with the given namespace and name\r\n     *\r\n     * @param element {Element} XML/DOM element to modify\r\n     * @param namespaceUri {String} Namespace URI\r\n     * @param name {String} Attribute name\r\n     * @return {String} the value of the attribute, empty string if not found\r\n     */\r\n    getAttributeNS(element, namespaceUri, name) {\r\n      if (qx.core.Environment.get(\"xml.attributens\")) {\r\n        var value = element.getAttributeNS(namespaceUri, name);\r\n        return value === null ? \"\" : value;\r\n      }\r\n\r\n      if (qx.core.Environment.get(\"xml.getqualifieditem\")) {\r\n        var attributes = element.attributes;\r\n        var value = null;\r\n        if (attributes) {\r\n          var attribute = attributes.getQualifiedItem(name, namespaceUri);\r\n          if (attribute) {\r\n            value = attribute.nodeValue;\r\n          }\r\n        }\r\n        return value === null ? \"\" : value;\r\n      }\r\n\r\n      throw new Error(\"The client does not support this operation!\");\r\n    },\r\n\r\n    /**\r\n     * Creates an element with the given namespace and appends it to an existing\r\n     * element\r\n     *\r\n     * @param document {Document} The node's parent document, created e.g. by\r\n     * {@link qx.xml.Document#create}\r\n     * @param parent {Element} The parent element for the new sub-element\r\n     * @param name {String} The new element's name\r\n     * @param namespaceUri {String} Namespace URI for the new element\r\n     *\r\n     * @return {Element} The newly created sub-element\r\n     */\r\n    createSubElementNS(document, parent, name, namespaceUri) {\r\n      if (qx.core.Environment.get(\"xml.createelementns\")) {\r\n        // the \"x\" prefix has no importance. when there's a conflict,\r\n        // mozilla engine assigns an alternative prefix automatically.\r\n        // not putting a prefix means to assign default namespace prefix\r\n        // to the given namespace uri.\r\n        var node = document.createElementNS(namespaceUri, \"x:\" + name);\r\n        parent.appendChild(node);\r\n        return node;\r\n      }\r\n\r\n      if (qx.core.Environment.get(\"xml.createnode\")) {\r\n        var node = document.createNode(1, name, namespaceUri);\r\n        parent.appendChild(node);\r\n        return node;\r\n      }\r\n\r\n      throw new Error(\"The client does not support this operation!\");\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DEFER\r\n  *****************************************************************************\r\n  */\r\n\r\n  defer(statics) {\r\n    statics.XML_SERIALIZER =\r\n      window.XMLSerializer &&\r\n      !(\r\n        qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\r\n        qx.core.Environment.get(\"engine.version\") >= 9 &&\r\n        qx.core.Environment.get(\"browser.documentmode\") >= 9\r\n      );\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}