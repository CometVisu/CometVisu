{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__Property",
    "core",
    "Property",
    "name",
    "config",
    "__defineImpl",
    "ex",
    "Class",
    "$$brokenClassDefinitions",
    "include",
    "getClass",
    "implement",
    "implicitType",
    "hasOwnProperty",
    "type",
    "clazz",
    "__createClass",
    "extend",
    "construct",
    "destruct",
    "forEach",
    "id",
    "__attachAnno",
    "properties",
    "__addProperties",
    "members",
    "__addMembers",
    "events",
    "__addEvents",
    "objects",
    "__addObjects",
    "i",
    "l",
    "length",
    "__addMixin",
    "Error",
    "environment",
    "key",
    "Environment",
    "add",
    "__addInterface",
    "defer",
    "self",
    "addPendingDefer",
    "getByName",
    "classname",
    "prototype",
    "undefine",
    "$$registry",
    "ns",
    "split",
    "window",
    "push",
    "last",
    "parent",
    "isFunction",
    "objectGetLength",
    "isDefined",
    "util",
    "OOUtil",
    "classIsDefined",
    "getTotalNumber",
    "mixin",
    "patch",
    "isClass",
    "obj",
    "$$type",
    "constructor",
    "isSubClassOf",
    "superClass",
    "getPropertyDefinition",
    "getProperties",
    "list",
    "$$properties",
    "apply",
    "Object",
    "keys",
    "superclass",
    "getByProperty",
    "hasProperty",
    "getEventType",
    "supportsEvent",
    "hasOwnMixin",
    "$$includes",
    "indexOf",
    "getByMixin",
    "$$flatIncludes",
    "getMixins",
    "hasMixin",
    "hasOwnInterface",
    "iface",
    "$$implements",
    "getByInterface",
    "getInterfaces",
    "$$flatImplements",
    "hasInterface",
    "implementsInterface",
    "Interface",
    "objectImplements",
    "classImplements",
    "getInstance",
    "$$instance",
    "$$allowconstruct",
    "getSubclasses",
    "subclasses",
    "registry",
    "genericToString",
    "__allowedKeys",
    "select",
    "__staticAllowedKeys",
    "__validateConfig",
    "true",
    "allowed",
    "_typeof",
    "maps",
    "undefined",
    "$$hash",
    "isObject",
    "a",
    "Mixin",
    "checkCompatibility",
    "message",
    "substr",
    "settings",
    "variants",
    "default",
    "__validateAbstractInterfaces",
    "$$classtype",
    "interfaces",
    "assert",
    "group",
    "anno",
    "$$annotations",
    "lang",
    "Type",
    "isArray",
    "mixins",
    "isStrictMode",
    "setDisplayNames",
    "__createDefaultConstructor",
    "__wrapConstructor",
    "setDisplayName",
    "staticValue",
    "charAt",
    "basename",
    "createNamespace",
    "toString",
    "extendClass",
    "$$destructor",
    "$$events",
    "validateCachedObject",
    "value",
    "$$objects",
    "proto",
    "refine",
    "init",
    "event",
    "async",
    "inheritable",
    "$$inheritable",
    "$$refreshInheritables",
    "attachRefreshInheritables",
    "attachMethods",
    "__validateProperty",
    "has",
    "existingProperty",
    "warn",
    "$$allowedGroupKeys",
    "$$allowedKeys",
    "transform",
    "check",
    "isString",
    "base",
    "wrap",
    "member",
    "annoKey",
    "substring",
    "$$install",
    "Function",
    "create",
    "always",
    "flatten",
    "entry",
    "$$members",
    "defaultConstructor",
    "arguments",
    "wrapper",
    "retval",
    "$$original",
    "$$constructor"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/Class.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * John Spackman (john.spackman@zenesis.com)\n\n************************************************************************ */\n\n/**\n * This class is one of the most important parts of qooxdoo's\n * object-oriented features.\n *\n * Its {@link #define} method is used to create qooxdoo classes.\n *\n * Each instance of a class defined by {@link #define} has\n * the following keys attached to the constructor and the prototype:\n *\n * <table>\n * <tr><th><code>classname</code></th><td>The fully-qualified name of the class (e.g. <code>\"qx.ui.core.Widget\"</code>).</td></tr>\n * <tr><th><code>basename</code></th><td>The namespace part of the class name (e.g. <code>\"qx.ui.core\"</code>).</td></tr>\n * <tr><th><code>constructor</code></th><td>A reference to the constructor of the class.</td></tr>\n * <tr><th><code>superclass</code></th><td>A reference to the constructor of the super class.</td></tr>\n * </table>\n *\n * Each method may access static members of the same class by using\n * <code>this.self(arguments)</code> ({@link qx.core.Object#self}):\n * <pre class='javascript'>\n * statics : { FOO : \"bar\" },\n * members: {\n *   baz: function(x) {\n *     this.self(arguments).FOO;\n *     ...\n *   }\n * }\n * </pre>\n *\n * Each overriding method may call the overridden method by using\n * <code>this.base(arguments [, ...])</code> ({@link qx.core.Object#base}). This is also true for calling\n * the constructor of the superclass.\n * <pre class='javascript'>\n * members: {\n *   foo: function(x) {\n *     this.base(arguments, x);\n *     ...\n *   }\n * }\n * </pre>\n *\n * By using <code>qx.Class</code> within an app, the native JS data types are\n * conveniently polyfilled according to {@link qx.lang.normalize}.\n *\n * Annotations can be added to classes, constructors, destructors, and methods, properties, and statics -\n * see <code>qx.Annotation</code> for examples and means access annotations at runtime.\n *\n * @require(qx.Interface)\n * @require(qx.Mixin)\n * @require(qx.lang.normalize.Array)\n * @require(qx.lang.normalize.Date)\n * @require(qx.lang.normalize.Error)\n * @require(qx.lang.normalize.Function)\n * @require(qx.lang.normalize.String)\n * @require(qx.lang.normalize.Object)\n * @require(qx.lang.normalize.Number)\n */\nqx.Bootstrap.define(\"qx.Class\", {\n  statics: {\n    /**\n     * A static reference to the property implementation in the case it\n     * should be included.\n     */\n    __Property: qx.core.Environment.get(\"module.property\")\n      ? qx.core.Property\n      : null,\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Define a new class using the qooxdoo class system. This sets up the\n     * namespace for the class and generates the class from the definition map.\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Class.define(\"name\",\n     * {\n     *   extend : Object, // superclass\n     *   implement : [Interfaces],\n     *   include : [Mixins],\n     *\n     *   statics:\n     *   {\n     *     CONSTANT : 3.141,\n     *\n     *     publicMethod: function() {},\n     *     _protectedMethod: function() {},\n     *     __privateMethod: function() {}\n     *   },\n     *\n     *   properties:\n     *   {\n     *     \"tabIndex\": { check: \"Number\", init : -1 }\n     *   },\n     *\n     *   members:\n     *   {\n     *     publicField: \"foo\",\n     *     publicMethod: function() {},\n     *\n     *     _protectedField: \"bar\",\n     *     _protectedMethod: function() {},\n     *\n     *     __privateField: \"baz\",\n     *     __privateMethod: function() {}\n     *   }\n     * });\n     * </pre>\n     *\n     * @param name {String?null} Name of the class. If <code>null</code>, the class\n     *   will not be added to any namespace which could be handy for testing.\n     * @param config {Map ? null} Class definition structure. The configuration map has the following keys:\n     *     <table>\n     *       <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *       <tr><th>type</th><td>String</td><td>\n     *           Type of the class. Valid types are \"abstract\", \"static\" and \"singleton\".\n     *           If unset it defaults to a regular non-static class.\n     *       </td></tr>\n     *       <tr><th>extend</th><td>Class</td><td>The super class the current class inherits from.</td></tr>\n     *       <tr><th>implement</th><td>Interface | Interface[]</td><td>Single interface or array of interfaces the class implements.</td></tr>\n     *       <tr><th>include</th><td>Mixin | Mixin[]</td><td>Single mixin or array of mixins, which will be merged into the class.</td></tr>\n     *       <tr><th>construct</th><td>Function</td><td>The constructor of the class.</td></tr>\n     *       <tr><th>statics</th><td>Map</td><td>Map of static members of the class.</td></tr>\n     *       <tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n     *           {@link qx.core.Property}.</td></tr>\n     *       <tr><th>members</th><td>Map</td><td>Map of instance members of the class.</td></tr>\n     *       <tr><th>environment</th><td>Map</td><td>Map of environment settings for this class. For a description of the format of a setting see\n     *           {@link qx.core.Environment}.</td></tr>\n     *       <tr><th>events</th><td>Map</td><td>\n     *           Map of events the class fires. The keys are the names of the events and the values are the\n     *           corresponding event type class names.\n     *       </td></tr>\n     *       <tr><th>defer</th><td>Function</td><td>Function that is called at the end of processing the class declaration. It allows access to the declared statics, members and properties.</td></tr>\n     *       <tr><th>destruct</th><td>Function</td><td>The destructor of the class.</td></tr>\n     *     </table>\n     * @return {new (...args: any) => any} The defined class\n     */\n    define(name, config) {\n      try {\n        return this.__defineImpl(name, config);\n      } catch (ex) {\n        qx.Class.$$brokenClassDefinitions = true;\n        throw ex;\n      }\n    },\n\n    /**\n     * Implementation behind `define` - this exists just for the simplicity of wrapping an exception\n     * handler around the code\n     *\n     * @param {String} name @see `define()`\n     * @param {*} config @see `define()`\n     * @returns  @see `define()`\n     */\n    __defineImpl(name, config) {\n      if (!config) {\n        config = {};\n      }\n\n      // Normalize include to array\n      if (\n        config.include &&\n        !(qx.Bootstrap.getClass(config.include) === \"Array\")\n      ) {\n        config.include = [config.include];\n      }\n\n      // Normalize implement to array\n      if (\n        config.implement &&\n        !(qx.Bootstrap.getClass(config.implement) === \"Array\")\n      ) {\n        config.implement = [config.implement];\n      }\n\n      // Normalize type\n      var implicitType = false;\n      if (!config.hasOwnProperty(\"extend\") && !config.type) {\n        config.type = \"static\";\n        implicitType = true;\n      }\n\n      // Validate incoming data\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        try {\n          this.__validateConfig(name, config);\n        } catch (ex) {\n          if (implicitType) {\n            ex.message =\n              'Assumed static class because no \"extend\" key was found. ' +\n              ex.message;\n          }\n          throw ex;\n        }\n      }\n\n      // Create the class\n      var clazz = this.__createClass(\n        name,\n        config.type,\n        config.extend,\n        config.statics,\n        config.construct,\n        config.destruct,\n        config.include\n      );\n\n      // Initialise class and constructor/destructor annotations\n      [\"@\", \"@construct\", \"@destruct\"].forEach(function (id) {\n        this.__attachAnno(clazz, id, null, config[id]);\n      }, this);\n\n      // Members, properties, events and mixins are only allowed for non-static classes\n      if (config.extend) {\n        // Attach properties\n        if (config.properties) {\n          this.__addProperties(clazz, config.properties, true);\n        }\n\n        // Attach members\n        if (config.members) {\n          this.__addMembers(clazz, config.members, true, true, false);\n        }\n\n        // Process events\n        if (config.events) {\n          this.__addEvents(clazz, config.events, true);\n        }\n\n        //Process cached objects\n        if (config.objects) {\n          this.__addObjects(clazz, config.objects);\n        }\n\n        // Include mixins\n        // Must be the last here to detect conflicts\n        if (config.include) {\n          for (var i = 0, l = config.include.length; i < l; i++) {\n            this.__addMixin(clazz, config.include[i], false);\n          }\n        }\n      }\n      // If config has a 'extend' key but it's null or undefined\n      else if (\n        config.hasOwnProperty(\"extend\") &&\n        qx.core.Environment.get(\"qx.debug\")\n      ) {\n        throw new Error('\"extend\" parameter is null or undefined');\n      }\n\n      // Process environment\n      if (config.environment) {\n        for (var key in config.environment) {\n          qx.core.Environment.add(key, config.environment[key]);\n        }\n      }\n\n      // Interface support for non-static classes\n      if (config.implement) {\n        for (var i = 0, l = config.implement.length; i < l; i++) {\n          this.__addInterface(clazz, config.implement[i]);\n        }\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__validateAbstractInterfaces(clazz);\n      }\n\n      // Process defer\n      if (config.defer) {\n        config.defer.self = clazz;\n        qx.Bootstrap.addPendingDefer(clazz, function () {\n          clazz = qx.Class.getByName(clazz.classname);\n          config.defer(clazz, clazz.prototype, {\n            add(name, config) {\n              // build pseudo properties map\n              var properties = {};\n              properties[name] = config;\n\n              // execute generic property handler\n              qx.Class.__addProperties(clazz, properties, true);\n            }\n          });\n        });\n      }\n\n      return clazz;\n    },\n\n    /**\n     * Removes a class from qooxdoo defined by {@link #define}\n     *\n     * @param name {String} Name of the class\n     */\n    undefine(name) {\n      // first, delete the class from the registry\n      delete this.$$registry[name];\n      // delete the class reference from the namespaces and all empty namespaces\n      var ns = name.split(\".\");\n      // build up an array containing all namespace objects including window\n      var objects = [window];\n      for (var i = 0; i < ns.length; i++) {\n        objects.push(objects[i][ns[i]]);\n      }\n\n      // go through all objects and check for the constructor or empty namespaces\n      for (var i = objects.length - 1; i >= 1; i--) {\n        var last = objects[i];\n        var parent = objects[i - 1];\n        if (\n          // The class being undefined, but parent classes in case it is a nested class that is being undefined\n          (i == objects.length - 1 && qx.Bootstrap.isFunction(last)) ||\n          qx.Bootstrap.objectGetLength(last) === 0\n        ) {\n          delete parent[ns[i - 1]];\n        } else {\n          break;\n        }\n      }\n    },\n\n    /**\n     * Whether the given class exists\n     *\n     * @signature function(name)\n     * @param name {String} class name to check\n     * @return {Boolean} true if class exists\n     */\n    isDefined: qx.util.OOUtil.classIsDefined,\n\n    /**\n     * Determine the total number of classes\n     *\n     * @return {Number} the total number of classes\n     */\n    getTotalNumber() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n    /**\n     * Find a class by its name\n     *\n     * @signature function(name)\n     * @param name {String} class name to resolve\n     * @return {Class} the class\n     */\n    getByName: qx.Bootstrap.getByName,\n\n    /**\n     * Include all features of the given mixin into the class. The mixin must\n     * not include any methods or properties that are already available in the\n     * class. This would only be possible using the {@link #patch} method.\n     *\n     * @param clazz {Class} An existing class which should be augmented by including a mixin.\n     * @param mixin {Mixin} The mixin to be included.\n     */\n    include(clazz, mixin) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!mixin) {\n          throw new Error(\n            \"The mixin to include into class '\" +\n              clazz.classname +\n              \"' is undefined/null!\"\n          );\n        }\n\n        qx.Mixin.isCompatible(mixin, clazz);\n      }\n\n      qx.Class.__addMixin(clazz, mixin, false);\n    },\n\n    /**\n     * Include all features of the given mixin into the class. The mixin may\n     * include features, which are already defined in the target class. Existing\n     * features of equal name will be overwritten.\n     * Please keep in mind that this functionality is not intended for regular\n     * use, but as a formalized way (and a last resort) in order to patch\n     * existing classes.\n     *\n     * <b>WARNING</b>: You may break working classes and features.\n     *\n     * @param clazz {Class} An existing class which should be modified by including a mixin.\n     * @param mixin {Mixin} The mixin to be included.\n     * @return {Class} the new class definition\n     */\n    patch(clazz, mixin) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!mixin) {\n          throw new Error(\n            \"The mixin to patch class '\" +\n              clazz.classname +\n              \"' is undefined/null!\"\n          );\n        }\n\n        qx.Mixin.isCompatible(mixin, clazz);\n      }\n\n      qx.Class.__addMixin(clazz, mixin, true);\n      return qx.Class.getByName(clazz.classname);\n    },\n\n    /**\n     * Detects whether the object is a Class (and not an instance of a class)\n     *\n     *  @param obj {Object?} the object to inspect\n     *  @return {Boolean} true if it is a class, false if it is anything else\n     */\n    isClass(obj) {\n      return obj && obj.$$type === \"Class\" && obj.constructor === obj;\n    },\n\n    /**\n     * Whether a class is a direct or indirect sub class of another class,\n     * or both classes coincide.\n     *\n     * @param clazz {Class} the class to check.\n     * @param superClass {Class} the potential super class\n     * @return {Boolean} whether clazz is a sub class of superClass.\n     */\n    isSubClassOf(clazz, superClass) {\n      if (!clazz) {\n        return false;\n      }\n\n      if (clazz == superClass) {\n        return true;\n      }\n\n      if (clazz.prototype instanceof superClass) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Returns the definition of the given property. Returns null\n     * if the property does not exist.\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the class to check for\n     * @return {Map|null} whether the object support the given event.\n     */\n    getPropertyDefinition: qx.util.OOUtil.getPropertyDefinition,\n\n    /**\n     * Returns a list of all properties supported by the given class\n     *\n     * @param clazz {Class} Class to query\n     * @return {String[]} List of all property names\n     */\n    getProperties(clazz) {\n      var list = [];\n\n      while (clazz) {\n        if (clazz.$$properties) {\n          list.push.apply(list, Object.keys(clazz.$$properties));\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return list;\n    },\n\n    /**\n     * Returns the class or one of its superclasses which contains the\n     * declaration for the given property in its class definition. Returns null\n     * if the property is not specified anywhere.\n     *\n     * @param clazz {Class} class to look for the property\n     * @param name {String} name of the property\n     * @return {Class|null} The class which includes the property\n     */\n    getByProperty(clazz, name) {\n      while (clazz) {\n        if (clazz.$$properties && clazz.$$properties[name]) {\n          return clazz;\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return null;\n    },\n\n    /**\n     * Whether a class has the given property\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the property to check for\n     * @return {Boolean} whether the class includes the given property.\n     */\n    hasProperty: qx.util.OOUtil.hasProperty,\n\n    /**\n     * Returns the event type of the given event. Returns null if\n     * the event does not exist.\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the event\n     * @return {String|null} Event type of the given event.\n     */\n    getEventType: qx.util.OOUtil.getEventType,\n\n    /**\n     * Whether a class supports the given event type\n     *\n     * @signature function(clazz, name)\n     * @param clazz {Class} class to check\n     * @param name {String} name of the event to check for\n     * @return {Boolean} whether the class supports the given event.\n     */\n    supportsEvent: qx.util.OOUtil.supportsEvent,\n\n    /**\n     * Whether a class directly includes a mixin.\n     *\n     * @param clazz {Class} class to check\n     * @param mixin {Mixin} the mixin to check for\n     * @return {Boolean} whether the class includes the mixin directly.\n     */\n    hasOwnMixin(clazz, mixin) {\n      return clazz.$$includes && clazz.$$includes.indexOf(mixin) !== -1;\n    },\n\n    /**\n     * Returns the class or one of its superclasses which contains the\n     * declaration for the given mixin. Returns null if the mixin is not\n     * specified anywhere.\n     *\n     * @param clazz {Class} class to look for the mixin\n     * @param mixin {Mixin} mixin to look for\n     * @return {Class|null} The class which directly includes the given mixin\n     */\n    getByMixin(clazz, mixin) {\n      var list, i, l;\n\n      while (clazz) {\n        if (clazz.$$includes) {\n          list = clazz.$$flatIncludes;\n\n          for (i = 0, l = list.length; i < l; i++) {\n            if (list[i] === mixin) {\n              return clazz;\n            }\n          }\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns a list of all mixins available in a given class.\n     *\n     * @signature function(clazz)\n     * @param clazz {Class} class which should be inspected\n     * @return {Mixin[]} array of mixins this class uses\n     */\n    getMixins: qx.util.OOUtil.getMixins,\n\n    /**\n     * Whether a given class or any of its superclasses includes a given mixin.\n     *\n     * @param clazz {Class} class to check\n     * @param mixin {Mixin} the mixin to check for\n     * @return {Boolean} whether the class includes the mixin.\n     */\n    hasMixin(clazz, mixin) {\n      return !!this.getByMixin(clazz, mixin);\n    },\n\n    /**\n     * Whether a given class directly includes an interface.\n     *\n     * This function will only return \"true\" if the interface was defined\n     * in the class declaration ({@link qx.Class#define}) using the \"implement\"\n     * key.\n     *\n     * @param clazz {Class} class or instance to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class includes the mixin directly.\n     */\n    hasOwnInterface(clazz, iface) {\n      return clazz.$$implements && clazz.$$implements.indexOf(iface) !== -1;\n    },\n\n    /**\n     * Returns the class or one of its super classes which contains the\n     * declaration of the given interface. Returns null if the interface is not\n     * specified anywhere.\n     *\n     * @signature function(clazz, iface)\n     * @param clazz {Class} class to look for the interface\n     * @param iface {Interface} interface to look for\n     * @return {Class|null} the class which directly implements the given interface\n     */\n    getByInterface: qx.util.OOUtil.getByInterface,\n\n    /**\n     * Returns a list of all interfaces a given class has to implement.\n     *\n     * @param clazz {Class} class which should be inspected\n     * @return {Interface[]} array of interfaces this class implements\n     */\n    getInterfaces(clazz) {\n      var list = [];\n\n      while (clazz) {\n        if (clazz.$$implements) {\n          list.push.apply(list, clazz.$$flatImplements);\n        }\n\n        clazz = clazz.superclass;\n      }\n\n      return list;\n    },\n\n    /**\n     * Whether a given class or any of its super classes includes a given interface.\n     *\n     * This function will return \"true\" if the interface was defined\n     * in the class declaration ({@link qx.Class#define}) of the class\n     * or any of its super classes using the \"implement\"\n     * key.\n     *\n     * @signature function(clazz, iface)\n     * @param clazz {Class} class to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class includes the interface.\n     */\n    hasInterface: qx.util.OOUtil.hasInterface,\n\n    /**\n     * Whether a given class complies to an interface.\n     *\n     * Checks whether all methods defined in the interface are\n     * implemented. The class does not need to implement\n     * the interface explicitly in the <code>extend</code> key.\n     *\n     * @param obj {Object} class to check\n     * @param iface {Interface} the interface to check for\n     * @return {Boolean} whether the class conforms to the interface.\n     */\n    implementsInterface(obj, iface) {\n      var clazz = obj.constructor;\n\n      if (this.hasInterface(clazz, iface)) {\n        return true;\n      }\n\n      if (qx.Interface.objectImplements(obj, iface)) {\n        return true;\n      }\n\n      if (qx.Interface.classImplements(clazz, iface)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Helper method to handle singletons\n     *\n     * @internal\n     * @return {Object} The singleton instance\n     */\n    getInstance() {\n      if (this.$$instance === null) {\n        throw new Error(\n          \"Singleton instance of \" +\n            this +\n            \" is requested, but not ready yet. This is most likely due to a recursive call in the constructor path.\"\n        );\n      }\n\n      if (!this.$$instance) {\n        this.$$allowconstruct = true;\n        this.$$instance = null; // null means \"object is being created\"; needed for another call of getInstance() during instantiation\n        this.$$instance = new this();\n        delete this.$$allowconstruct;\n      }\n\n      return this.$$instance;\n    },\n\n    /**\n     * Retreive all subclasses of a given class\n     *\n     * @param clazz {Class} the class which should be inspected\n     *\n     * @return {Object} class name hash holding the references to the subclasses or null if the class does not exist.\n     */\n    getSubclasses(clazz) {\n      if (!clazz) {\n        return null;\n      }\n\n      var subclasses = {};\n      var registry = qx.Class.$$registry;\n\n      for (var name in registry) {\n        if (registry[name].superclass && registry[name].superclass == clazz) {\n          subclasses[name] = registry[name];\n        }\n      }\n\n      return subclasses;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL BASICS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all classes to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The class identifier\n     */\n    genericToString() {\n      return \"[Class \" + this.classname + \"]\";\n    },\n\n    /** Stores all defined classes */\n    $$registry: qx.Bootstrap.$$registry,\n\n    /** @type {Map} allowed keys in non-static class definition */\n    __allowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        \"@\": \"object\",\n        \"@construct\": \"object\",\n        \"@destruct\": \"object\",\n        type: \"string\", // String\n        extend: \"function\", // Function\n        implement: \"object\", // Interface[]\n        include: \"object\", // Mixin[]\n        construct: \"function\", // Function\n        statics: \"object\", // Map\n        properties: \"object\", // Map\n        members: \"object\", // Map\n        environment: \"object\", // Map\n        events: \"object\", // Map\n        defer: \"function\", // Function\n        destruct: \"function\", // Function\n        objects: \"object\" // Map\n      },\n\n      default: null\n    }),\n\n    /** @type {Map} allowed keys in static class definition */\n    __staticAllowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        \"@\": \"object\",\n        type: \"string\", // String\n        statics: \"object\", // Map\n        environment: \"object\", // Map\n        defer: \"function\" // Function\n      },\n\n      default: null\n    }),\n\n    /**\n     * Validates an incoming configuration and checks for proper keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     */\n    __validateConfig: qx.core.Environment.select(\"qx.debug\", {\n      true(name, config) {\n        // Validate type\n        if (\n          config.type &&\n          !(\n            config.type === \"static\" ||\n            config.type === \"abstract\" ||\n            config.type === \"singleton\"\n          )\n        ) {\n          throw new Error(\n            'Invalid type \"' +\n              config.type +\n              '\" definition for class \"' +\n              name +\n              '\"!'\n          );\n        }\n\n        // Validate non-static class on the \"extend\" key\n        if (config.type && config.type !== \"static\" && !config.extend) {\n          throw new Error(\n            'Invalid config in class \"' +\n              name +\n              '\"! Every non-static class has to extend at least the \"qx.core.Object\" class.'\n          );\n        }\n\n        // Validate keys\n        var allowed =\n          config.type === \"static\"\n            ? this.__staticAllowedKeys\n            : this.__allowedKeys;\n        for (var key in config) {\n          if (!(key in allowed)) {\n            throw new Error(\n              'The configuration key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\" is not allowed!'\n            );\n          }\n\n          if (config[key] == null) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The value is undefined/null!'\n            );\n          }\n\n          if (typeof config[key] !== allowed[key]) {\n            throw new Error(\n              'Invalid type of key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The type of the key must be \"' +\n                allowed[key] +\n                '\"!'\n            );\n          }\n        }\n\n        // Validate maps\n        var maps = [\n          \"statics\",\n          \"properties\",\n          \"members\",\n          \"environment\",\n          \"settings\",\n          \"variants\",\n          \"events\"\n        ];\n\n        for (var i = 0, l = maps.length; i < l; i++) {\n          var key = maps[i];\n\n          if (\n            config[key] !== undefined &&\n            (config[key].$$hash !== undefined ||\n              !qx.Bootstrap.isObject(config[key]))\n          ) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in class \"' +\n                name +\n                '\"! The value needs to be a map!'\n            );\n          }\n        }\n\n        // Validate include definition\n        if (config.include) {\n          if (qx.Bootstrap.getClass(config.include) === \"Array\") {\n            for (var i = 0, a = config.include, l = a.length; i < l; i++) {\n              if (a[i] == null || a[i].$$type !== \"Mixin\") {\n                throw new Error(\n                  'The include definition in class \"' +\n                    name +\n                    '\" contains an invalid mixin at position ' +\n                    i +\n                    \": \" +\n                    a[i]\n                );\n              }\n            }\n          } else {\n            throw new Error(\n              'Invalid include definition in class \"' +\n                name +\n                '\"! Only mixins and arrays of mixins are allowed!'\n            );\n          }\n        }\n\n        // Validate implement definition\n        if (config.implement) {\n          if (qx.Bootstrap.getClass(config.implement) === \"Array\") {\n            for (var i = 0, a = config.implement, l = a.length; i < l; i++) {\n              if (a[i] == null || a[i].$$type !== \"Interface\") {\n                throw new Error(\n                  'The implement definition in class \"' +\n                    name +\n                    '\" contains an invalid interface at position ' +\n                    i +\n                    \": \" +\n                    a[i]\n                );\n              }\n            }\n          } else {\n            throw new Error(\n              'Invalid implement definition in class \"' +\n                name +\n                '\"! Only interfaces and arrays of interfaces are allowed!'\n            );\n          }\n        }\n\n        // Check mixin compatibility\n        if (config.include) {\n          try {\n            qx.Mixin.checkCompatibility(config.include);\n          } catch (ex) {\n            throw new Error(\n              'Error in include definition of class \"' +\n                name +\n                '\"! ' +\n                ex.message\n            );\n          }\n        }\n\n        // Validate environment\n        if (config.environment) {\n          for (var key in config.environment) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden environment setting \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a ' +\n                  \"environment setting for an external namespace!\"\n              );\n            }\n          }\n        }\n\n        // Validate settings\n        if (config.settings) {\n          for (var key in config.settings) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden setting \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a default setting for an external namespace!'\n              );\n            }\n          }\n        }\n\n        // Validate variants\n        if (config.variants) {\n          for (var key in config.variants) {\n            if (\n              key.substr(0, key.indexOf(\".\")) !=\n              name.substr(0, name.indexOf(\".\"))\n            ) {\n              throw new Error(\n                'Forbidden variant \"' +\n                  key +\n                  '\" found in \"' +\n                  name +\n                  '\". It is forbidden to define a variant for an external namespace!'\n              );\n            }\n          }\n        }\n      },\n\n      default(name, config) {}\n    }),\n\n    /**\n     * Validates the interfaces required by abstract base classes\n     *\n     * @signature function(clazz)\n     * @param clazz {Class} The configured class.\n     */\n    __validateAbstractInterfaces: qx.core.Environment.select(\"qx.debug\", {\n      true(clazz) {\n        var superclass = clazz.superclass;\n        while (superclass) {\n          if (superclass.$$classtype !== \"abstract\") {\n            break;\n          }\n\n          var interfaces = superclass.$$implements;\n          if (interfaces) {\n            for (var i = 0; i < interfaces.length; i++) {\n              qx.Interface.assert(clazz, interfaces[i], true);\n            }\n          }\n          superclass = superclass.superclass;\n        }\n      },\n\n      default(clazz) {}\n    }),\n\n    /**\n     * Attaches an annotation to a class\n     *\n     * @param clazz {Map} Static methods or fields\n     * @param group {String} Group name\n     * @param key {String} Name of the annotated item\n     * @param anno {Object} Annotation object\n     */\n    __attachAnno(clazz, group, key, anno) {\n      if (anno !== undefined) {\n        if (clazz.$$annotations === undefined) {\n          clazz.$$annotations = {};\n          clazz.$$annotations[group] = {};\n        } else if (clazz.$$annotations[group] === undefined) {\n          clazz.$$annotations[group] = {};\n        }\n\n        if (!qx.lang.Type.isArray(anno)) {\n          anno = [anno];\n        }\n\n        if (key) {\n          clazz.$$annotations[group][key] = anno;\n        } else {\n          clazz.$$annotations[group] = anno;\n        }\n      }\n    },\n\n    /**\n     * Creates a class by type. Supports modern inheritance etc.\n     *\n     * @param name {String} Full name of the class\n     * @param type {String} type of the class, i.e. \"static\", \"abstract\" or \"singleton\"\n     * @param extend {Class} Superclass to inherit from\n     * @param statics {Map} Static methods or fields\n     * @param construct {Function} Constructor of the class\n     * @param destruct {Function} Destructor of the class\n     * @param mixins {Mixin[]} array of mixins of the class\n     * @return {Class} The generated class\n     */\n    __createClass(name, type, extend, statics, construct, destruct, mixins) {\n      var isStrictMode = function () {\n        return typeof this == \"undefined\";\n      };\n\n      var clazz;\n\n      if (!extend && qx.core.Environment.get(\"qx.aspects\") == false) {\n        // Create empty/non-empty class\n        clazz = statics || {};\n        qx.Bootstrap.setDisplayNames(clazz, name);\n      } else {\n        clazz = {};\n\n        if (extend) {\n          // Create default constructor\n          if (!construct) {\n            construct = this.__createDefaultConstructor();\n          }\n\n          clazz = this.__wrapConstructor(construct, name, type);\n\n          // Add singleton getInstance()\n          if (type === \"singleton\") {\n            clazz.getInstance = this.getInstance;\n          }\n\n          qx.Bootstrap.setDisplayName(construct, name, \"constructor\");\n        }\n\n        // Copy statics\n        if (statics) {\n          qx.Bootstrap.setDisplayNames(statics, name);\n\n          var key;\n\n          for (var i = 0, a = Object.keys(statics), l = a.length; i < l; i++) {\n            key = a[i];\n            var staticValue = statics[key];\n\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              if (key.charAt(0) === \"@\") {\n                if (statics[key.substring(1)] === undefined) {\n                  throw new Error(\n                    'Annonation for static \"' +\n                      key.substring(1) +\n                      '\" of Class \"' +\n                      clazz.classname +\n                      '\" does not exist!'\n                  );\n                }\n                if (key.charAt(1) === \"_\" && key.charAt(2) === \"_\") {\n                  throw new Error(\n                    'Cannot annotate private static \"' +\n                      key.substring(1) +\n                      '\" of Class \"' +\n                      clazz.classname\n                  );\n                }\n              }\n            }\n            if (key.charAt(0) === \"@\") {\n              continue;\n            }\n\n            if (qx.core.Environment.get(\"qx.aspects\")) {\n              if (staticValue instanceof Function) {\n                staticValue = qx.core.Aspect.wrap(\n                  name + \".\" + key,\n                  staticValue,\n                  \"static\"\n                );\n              }\n\n              clazz[key] = staticValue;\n            } else {\n              clazz[key] = staticValue;\n            }\n\n            // Attach annotations\n            this.__attachAnno(clazz, \"statics\", key, statics[\"@\" + key]);\n          }\n        }\n      }\n\n      // Create namespace\n      var basename = name ? qx.Bootstrap.createNamespace(name, clazz) : \"\";\n\n      // Store names in constructor/object\n      clazz.classname = name;\n      if (!isStrictMode()) {\n        try {\n          clazz.name = name;\n        } catch (ex) {\n          // Nothing\n        }\n      }\n      clazz.basename = basename;\n\n      // Store type info\n      clazz.$$type = \"Class\";\n      if (type) {\n        clazz.$$classtype = type;\n      }\n\n      // Attach toString\n      if (!clazz.hasOwnProperty(\"toString\")) {\n        clazz.toString = this.genericToString;\n      }\n\n      if (extend) {\n        qx.Bootstrap.extendClass(clazz, construct, extend, name, basename);\n\n        // Store destruct onto class\n        if (destruct) {\n          if (qx.core.Environment.get(\"qx.aspects\")) {\n            destruct = qx.core.Aspect.wrap(name, destruct, \"destructor\");\n          }\n\n          clazz.$$destructor = destruct;\n          qx.Bootstrap.setDisplayName(destruct, name, \"destruct\");\n        }\n      }\n\n      // Store class reference in global class registry\n      this.$$registry[name] = clazz;\n\n      // Return final class object\n      return clazz;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE ADD HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Attach events to the class\n     *\n     * @param clazz {Class} class to add the events to\n     * @param events {Map} map of event names the class fires.\n     * @param patch {Boolean ? false} Enable redefinition of event type?\n     */\n    __addEvents(clazz, events, patch) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (\n          typeof events !== \"object\" ||\n          qx.Bootstrap.getClass(events) === \"Array\"\n        ) {\n          throw new Error(\n            clazz.classname + \": the events must be defined as map!\"\n          );\n        }\n\n        for (var key in events) {\n          if (typeof events[key] !== \"string\") {\n            throw new Error(\n              clazz.classname +\n                \"/\" +\n                key +\n                \": the event value needs to be a string with the class name of the event object which will be fired.\"\n            );\n          }\n        }\n\n        // Compare old and new event type/value if patching is disabled\n        if (clazz.$$events && patch !== true) {\n          for (var key in events) {\n            if (\n              clazz.$$events[key] !== undefined &&\n              clazz.$$events[key] !== events[key]\n            ) {\n              throw new Error(\n                clazz.classname +\n                  \"/\" +\n                  key +\n                  \": the event value/type cannot be changed from \" +\n                  clazz.$$events[key] +\n                  \" to \" +\n                  events[key]\n              );\n            }\n          }\n        }\n      }\n\n      if (clazz.$$events) {\n        for (var key in events) {\n          clazz.$$events[key] = events[key];\n        }\n      } else {\n        clazz.$$events = events;\n      }\n    },\n\n    __addObjects(clazz, objects) {\n      function validateCachedObject(key, value) {\n        if (typeof value !== \"function\") {\n          throw new Error(\n            \"Invalid cached object definition for \" +\n              key +\n              \" in \" +\n              clazz.classname\n          );\n        }\n\n        if (typeof key != \"string\") {\n          throw new Error(\n            \"Invalid cached object key for \" + key + \" in \" + clazz.classname\n          );\n        }\n      }\n\n      if (!(objects instanceof Object)) {\n        throw new Error(\"Invalid objects definition for \" + clazz.classname);\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        for (const key in objects) {\n          validateCachedObject(key, objects[key]);\n        }\n      }\n\n      clazz.$$objects = objects;\n    },\n\n    /**\n     * Attach properties to classes\n     *\n     * @param clazz {Class} class to add the properties to\n     * @param properties {Map} map of properties\n     * @param patch {Boolean ? false} Overwrite property with the limitations of a property\n               which means you are able to refine but not to replace (esp. for new properties)\n     */\n    __addProperties(clazz, properties, patch) {\n      // check for the property module\n      if (!qx.core.Environment.get(\"module.property\")) {\n        throw new Error(\"Property module disabled.\");\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.Bootstrap.isQxCoreObject(properties)) {\n          throw new Error(\"Invalid 'properties' for \" + clazz.classname);\n        }\n      }\n\n      var config;\n\n      if (patch === undefined) {\n        patch = false;\n      }\n\n      var proto = clazz.prototype;\n\n      for (var name in properties) {\n        config = properties[name];\n\n        // Check incoming configuration\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.__validateProperty(clazz, name, config, patch);\n        }\n\n        // Store name into configuration\n        config.name = name;\n\n        // Add config to local registry\n        if (!config.refine) {\n          if (clazz.$$properties === undefined) {\n            clazz.$$properties = {};\n          }\n\n          clazz.$$properties[name] = config;\n        }\n\n        // Store init value to prototype. This makes it possible to\n        // overwrite this value in derived classes.\n        if (config.init !== undefined) {\n          clazz.prototype[\"$$init_\" + name] = config.init;\n        }\n\n        // register event name\n        if (config.event !== undefined) {\n          // break if no events layer loaded\n          if (!qx.core.Environment.get(\"module.events\")) {\n            throw new Error(\"Events module not enabled.\");\n          }\n          var event = {};\n          event[config.event] = \"qx.event.type.Data\";\n          if (config.async) {\n            event[config.event + \"Async\"] = \"qx.event.type.Data\";\n          }\n          this.__addEvents(clazz, event, patch);\n        }\n\n        // Remember inheritable properties\n        if (config.inheritable) {\n          this.__Property.$$inheritable[name] = true;\n          if (!proto.$$refreshInheritables) {\n            this.__Property.attachRefreshInheritables(clazz);\n          }\n        }\n\n        if (!config.refine) {\n          this.__Property.attachMethods(clazz, name, config);\n        }\n\n        // Add annotations\n        this.__attachAnno(clazz, \"properties\", name, config[\"@\"]);\n      }\n    },\n\n    /**\n     * Validates the given property\n     *\n     * @signature function(clazz, name, config, patch)\n     * @param clazz {Class} class to add property to\n     * @param name {String} name of the property\n     * @param config {Map} configuration map\n     * @param patch {Boolean ? false} enable refine/patch?\n     */\n    __validateProperty: qx.core.Environment.select(\"qx.debug\", {\n      true(clazz, name, config, patch) {\n        // check for properties\n        if (!qx.core.Environment.get(\"module.property\")) {\n          throw new Error(\"Property module disabled.\");\n        }\n\n        var has = this.hasProperty(clazz, name);\n\n        if (has) {\n          var existingProperty = this.getPropertyDefinition(clazz, name);\n\n          if (\n            config.refine &&\n            existingProperty.init === undefined &&\n            existingProperty[\"@\"] === undefined\n          ) {\n            this.warn(\n              \"Refine a property when there is previously no init or annotations defined. Property '\" +\n                name +\n                \"' of class '\" +\n                clazz.classname +\n                \"'.\"\n            );\n          }\n        }\n\n        if (!has && config.refine) {\n          throw new Error(\n            \"Could not refine non-existent property: '\" +\n              name +\n              \"' of class: '\" +\n              clazz.classname +\n              \"'!\"\n          );\n        }\n\n        if (has && !patch) {\n          throw new Error(\n            \"Class \" +\n              clazz.classname +\n              \" already has a property: \" +\n              name +\n              \"!\"\n          );\n        }\n\n        if (has && patch) {\n          if (!config.refine) {\n            throw new Error(\n              'Could not refine property \"' +\n                name +\n                '\" without a \"refine\" flag in the property definition! This class: ' +\n                clazz.classname +\n                \", original class: \" +\n                this.getByProperty(clazz, name).classname +\n                \".\"\n            );\n          }\n\n          for (var key in config) {\n            if (key !== \"init\" && key !== \"refine\" && key !== \"@\") {\n              throw new Error(\n                \"Class \" +\n                  clazz.classname +\n                  \" could not refine property: \" +\n                  name +\n                  \"! Key: \" +\n                  key +\n                  \" could not be refined!\"\n              );\n            }\n          }\n        }\n\n        // Check 0.7 keys\n        var allowed = config.group\n          ? this.__Property.$$allowedGroupKeys\n          : this.__Property.$$allowedKeys;\n        for (var key in config) {\n          if (allowed[key] === undefined) {\n            throw new Error(\n              'The configuration key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\" is not allowed!'\n            );\n          }\n\n          if (config[key] === undefined) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! The value is undefined: ' +\n                config[key]\n            );\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error(\n              'Invalid type of key \"' +\n                key +\n                '\" of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! The type of the key must be \"' +\n                allowed[key] +\n                '\"!'\n            );\n          }\n        }\n\n        if (config.transform != null) {\n          if (!(typeof config.transform === \"string\")) {\n            throw new Error(\n              'Invalid transform definition of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! Needs to be a String.'\n            );\n          }\n        }\n\n        if (config.check != null) {\n          if (\n            !qx.Bootstrap.isString(config.check) &&\n            !qx.Bootstrap.isArray(config.check) &&\n            !qx.Bootstrap.isFunction(config.check)\n          ) {\n            throw new Error(\n              'Invalid check definition of property \"' +\n                name +\n                '\" in class \"' +\n                clazz.classname +\n                '\"! Needs to be a String, Array or Function.'\n            );\n          }\n        }\n      },\n\n      default: null\n    }),\n\n    /**\n     * Attach members to a class\n     *\n     * @param clazz {Class} clazz to add members to\n     * @param members {Map} The map of members to attach\n     * @param patch {Boolean ? false} Enable patching of\n     * @param base {Boolean ? true} Attach base flag to mark function as members\n     *     of this class\n     * @param wrap {Boolean ? false} Whether the member method should be wrapped.\n     *     this is needed to allow base calls in patched mixin members.\n     */\n    __addMembers(clazz, members, patch, base, wrap) {\n      var proto = clazz.prototype;\n      var key, member;\n      qx.Bootstrap.setDisplayNames(members, clazz.classname + \".prototype\");\n\n      for (var i = 0, a = Object.keys(members), l = a.length; i < l; i++) {\n        key = a[i];\n        member = members[key];\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (key.charAt(0) === \"@\") {\n            var annoKey = key.substring(1);\n            if (\n              members[annoKey] === undefined &&\n              proto[annoKey] === undefined\n            ) {\n              throw new Error(\n                'Annonation for \"' +\n                  annoKey +\n                  '\" of Class \"' +\n                  clazz.classname +\n                  '\" does not exist!'\n              );\n            }\n            if (key.charAt(1) === \"_\" && key.charAt(2) === \"_\") {\n              throw new Error(\n                'Cannot annotate private member \"' +\n                  key.substring(1) +\n                  '\" of Class \"' +\n                  clazz.classname\n              );\n            }\n          } else {\n            if (\n              proto[key] !== undefined &&\n              key.charAt(0) === \"_\" &&\n              key.charAt(1) === \"_\"\n            ) {\n              throw new Error(\n                'Overwriting private member \"' +\n                  key +\n                  '\" of Class \"' +\n                  clazz.classname +\n                  '\" is not allowed!'\n              );\n            }\n\n            if (\n              patch !== true &&\n              proto.hasOwnProperty(key) &&\n              key != \"_createQxObjectImpl\"\n            ) {\n              throw new Error(\n                'Overwriting member \"' +\n                  key +\n                  '\" of Class \"' +\n                  clazz.classname +\n                  '\" is not allowed!'\n              );\n            }\n          }\n        }\n\n        // Annotations are not members\n        if (key.charAt(0) === \"@\") {\n          var annoKey = key.substring(1);\n          if (members[annoKey] === undefined) {\n            this.__attachAnno(clazz, \"members\", annoKey, members[key]);\n          }\n          continue;\n        }\n\n        // If it's a property accessor, we need to install it now so that this.base can refer to it\n        if (proto[key] != undefined && proto[key].$$install) {\n          proto[key].$$install();\n        }\n\n        // Added helper stuff to functions\n        // Hint: Could not use typeof function because RegExp objects are functions, too\n        // Protect to apply base property and aspect support on special attributes e.g.\n        // classes which are function like as well.\n        if (\n          base !== false &&\n          member instanceof Function &&\n          member.$$type == null\n        ) {\n          // If the class has it's own implementation, we need to remember that method in the\n          //  mixed-in method's `.base`; wrap the method with a closure so that it can have a\n          //  `.base` set, if we were to set `member.base` it would mean that the mixin can\n          //  only be added into one class\n          if (wrap) {\n            if (proto[key]) {\n              member = qx.lang.Function.create(member, { always: true });\n            }\n            member.self = clazz;\n          }\n          member.base = proto[key];\n\n          if (qx.core.Environment.get(\"qx.aspects\")) {\n            member = qx.core.Aspect.wrap(\n              clazz.classname + \".\" + key,\n              member,\n              \"member\"\n            );\n          }\n        }\n\n        // Attach member\n        proto[key] = member;\n\n        // Attach annotations\n        this.__attachAnno(clazz, \"members\", key, members[\"@\" + key]);\n      }\n    },\n\n    /**\n     * Add a single interface to a class\n     *\n     * @param clazz {Class} class to add interface to\n     * @param iface {Interface} the Interface to add\n     */\n    __addInterface(clazz, iface) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!clazz || !iface) {\n          throw new Error(\"Incomplete parameters!\");\n        }\n\n        // This differs from mixins, we only check if the interface is already\n        // directly used by this class. It is allowed however, to have an interface\n        // included multiple times by extends in the interfaces etc.\n        if (this.hasOwnInterface(clazz, iface)) {\n          throw new Error(\n            'Interface \"' +\n              iface.name +\n              '\" is already used by Class \"' +\n              clazz.classname +\n              \"!\"\n          );\n        }\n\n        // Check interface and wrap members\n        if (clazz.$$classtype !== \"abstract\") {\n          qx.Interface.assert(clazz, iface, true);\n        }\n      }\n\n      // Store interface reference\n      var list = qx.Interface.flatten([iface]);\n      if (clazz.$$implements) {\n        clazz.$$implements.push(iface);\n        clazz.$$flatImplements.push.apply(clazz.$$flatImplements, list);\n      } else {\n        clazz.$$implements = [iface];\n        clazz.$$flatImplements = list;\n      }\n    },\n\n    /**\n     * Include all features of the mixin into the given class, recursively.\n     *\n     * @param clazz {Class} The class onto which the mixin should be attached.\n     * @param mixin {Mixin} Include all features of this mixin\n     * @param patch {Boolean} Overwrite existing fields, functions and properties\n     */\n    __addMixin(clazz, mixin, patch) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!clazz || !mixin) {\n          throw new Error(\"Incomplete parameters!\");\n        }\n      }\n\n      if (this.hasMixin(clazz, mixin)) {\n        return;\n      }\n\n      // Attach content\n      var list = qx.Mixin.flatten([mixin]);\n      var entry;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        entry = list[i];\n\n        // Attach events\n        if (entry.$$events) {\n          this.__addEvents(clazz, entry.$$events, patch);\n        }\n\n        // Attach properties (Properties are already readonly themselves, no patch handling needed)\n        if (entry.$$properties) {\n          this.__addProperties(clazz, entry.$$properties, patch);\n        }\n\n        // Attach members (Respect patch setting, but dont apply base variables)\n        if (entry.$$members) {\n          this.__addMembers(clazz, entry.$$members, patch, patch, patch);\n        }\n      }\n\n      // Store mixin reference\n      if (clazz.$$includes) {\n        clazz.$$includes.push(mixin);\n        clazz.$$flatIncludes.push.apply(clazz.$$flatIncludes, list);\n      } else {\n        clazz.$$includes = [mixin];\n        clazz.$$flatIncludes = list;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE FUNCTION HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the default constructor.\n     * This constructor just calls the constructor of the base class.\n     *\n     * @return {Function} The default constructor.\n     */\n    __createDefaultConstructor() {\n      function defaultConstructor() {\n        defaultConstructor.base.apply(this, arguments);\n      }\n\n      return defaultConstructor;\n    },\n\n    /**\n     * Generate a wrapper of the original class constructor in order to enable\n     * some of the advanced OO features (e.g. abstract class, singleton, mixins)\n     *\n     * @param construct {Function} the original constructor\n     * @param name {String} name of the class\n     * @param type {String} the user specified class type\n     * @return {Function} The wrapped constructor\n     */\n    __wrapConstructor(construct, name, type) {\n      var wrapper = function () {\n        var clazz = wrapper;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          // new keyword check\n          if (!(this instanceof clazz)) {\n            throw new Error(\n              \"Please initialize '\" + name + \"' objects using the new keyword!\"\n            );\n          }\n\n          // add abstract and singleton checks\n          if (type === \"abstract\") {\n            if (this.classname === name) {\n              throw new Error(\n                \"The class ',\" +\n                  name +\n                  \"' is abstract! It is not possible to instantiate it.\"\n              );\n            }\n          } else if (type === \"singleton\") {\n            if (!clazz.$$allowconstruct) {\n              throw new Error(\n                \"The class '\" +\n                  name +\n                  \"' is a singleton! It is not possible to instantiate it directly. Use the static getInstance() method instead.\"\n              );\n            }\n          }\n        }\n\n        // Execute default constructor\n        var retval = clazz.$$original.apply(this, arguments);\n\n        // Initialize local mixins\n        if (clazz.$$includes) {\n          var mixins = clazz.$$flatIncludes;\n          for (var i = 0, l = mixins.length; i < l; i++) {\n            if (mixins[i].$$constructor) {\n              mixins[i].$$constructor.apply(this, arguments);\n            }\n          }\n        }\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          // Mark instance as initialized\n          if (this.classname === name) {\n            this.$$initialized = true;\n          }\n        }\n\n        // Return optional return value\n        return retval;\n      };\n\n      if (qx.core.Environment.get(\"qx.aspects\")) {\n        var aspectWrapper = qx.core.Aspect.wrap(name, wrapper, \"constructor\");\n        wrapper.$$original = construct;\n        wrapper.constructor = aspectWrapper;\n        wrapper = aspectWrapper;\n      }\n\n      // Store original constructor\n      wrapper.$$original = construct;\n\n      // Store wrapper into constructor (needed for base calls etc.)\n      construct.wrapper = wrapper;\n\n      // Return generated wrapper\n      return wrapper;\n    }\n  },\n\n  defer() {\n    // Binding of already loaded bootstrap classes\n    if (qx.core.Environment.get(\"qx.aspects\")) {\n      for (var classname in qx.Bootstrap.$$registry) {\n        var statics = qx.Bootstrap.$$registry[classname];\n\n        for (var key in statics) {\n          // only functions, no regexps\n          if (statics[key] instanceof Function) {\n            statics[key] = qx.core.Aspect.wrap(\n              classname + \".\" + key,\n              statics[key],\n              \"static\"\n            );\n          }\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,UAAU,EAAE;IAC9BC,OAAO,EAAE;MACP;AACJ;AACA;AACA;MACIC,QAAU,EAAE,OACRN,EAAE,CAACO,IAAI,CAACC,QAAQ,GAChB,IAAI;MAER;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIJ,MAAM,WAANA,MAAMA,CAACK,IAAI,EAAEC,MAAM,EAAE;QACnB,IAAI;UACF,OAAO,IAAI,CAACC,QAAY,CAACF,IAAI,EAAEC,MAAM,CAAC;QACxC,CAAC,CAAC,OAAOE,EAAE,EAAE;UACXZ,EAAE,CAACa,KAAK,CAACC,wBAAwB,GAAG,IAAI;UACx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",
  "ignoreList": []
}