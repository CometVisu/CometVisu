{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "html",
    "Element",
    "construct",
    "type",
    "styles",
    "attributes",
    "nodeName",
    "__type",
    "registerProperty",
    "_getValueProperty",
    "_setValueProperty",
    "_setWrapProperty",
    "members",
    "__selectable",
    "__enabled",
    "_useNodeImpl",
    "domNode",
    "newChildren",
    "_createDomElement",
    "bom",
    "Input",
    "create",
    "value",
    "element",
    "getDomElement",
    "setValue",
    "getValue",
    "setWrap",
    "setStyle",
    "style",
    "overflow",
    "overflowX",
    "overflowY",
    "setEnabled",
    "setAttribute",
    "core",
    "Environment",
    "get",
    "setStyles",
    "userModify",
    "userSelect",
    "setSelectable",
    "select",
    "webkit",
    "_setProperty",
    "_getProperty",
    "wrap",
    "direct",
    "Error",
    "getWrap"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/html/Input.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A Input wrap any valid HTML input element and make it accessible\n * through the normalized qooxdoo element interface.\n */\nqx.Class.define(\"qx.html.Input\", {\n  extend: qx.html.Element,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param type {String} The type of the input field. Valid values are\n   *   <code>text</code>, <code>textarea</code>, <code>select</code>,\n   *   <code>checkbox</code>, <code>radio</code>, <code>password</code>,\n   *   <code>hidden</code>, <code>submit</code>, <code>image</code>,\n   *   <code>file</code>, <code>search</code>, <code>reset</code>,\n   *   <code>select</code> and <code>textarea</code>.\n   * @param styles {Map?null} optional map of CSS styles, where the key is the name\n   *    of the style and the value is the value to use.\n   * @param attributes {Map?null} optional map of element attributes, where the\n   *    key is the name of the attribute and the value is the value to use.\n   */\n  construct(type, styles, attributes) {\n    // Update node name correctly\n    if (type === \"select\" || type === \"textarea\") {\n      var nodeName = type;\n    } else {\n      nodeName = \"input\";\n    }\n\n    super(nodeName, styles, attributes);\n\n    this.__type = type;\n\n    this.registerProperty(\n      \"value\",\n      this._getValueProperty,\n      this._setValueProperty\n    );\n\n    this.registerProperty(\"wrap\", null, this._setWrapProperty);\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __type: null,\n    // used for webkit only\n    __selectable: null,\n    __enabled: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      ELEMENT API\n    ---------------------------------------------------------------------------\n    */\n\n    _useNodeImpl(domNode, newChildren) {\n      super._useNodeImpl(domNode, newChildren);\n    },\n\n    //overridden\n    _createDomElement() {\n      return qx.bom.Input.create(this.__type);\n    },\n\n    /**\n     * Implementation of setter for the \"value\" property\n     *\n     * @param value {String?} value to set\n     */\n    _setValueProperty(value) {\n      var element = this.getDomElement();\n      qx.bom.Input.setValue(element, value);\n    },\n\n    /**\n     * Implementation of getter for the \"value\" property\n     *\n     * @return {String?} value on the dom\n     */\n    _getValueProperty() {\n      var element = this.getDomElement();\n      var value = qx.bom.Input.getValue(element);\n      return value;\n    },\n\n    /**\n     * Implementation of setter for the \"wrap\" property\n     *\n     * @param value {String?} value to set\n     */\n    _setWrapProperty(value) {\n      var element = this.getDomElement();\n      qx.bom.Input.setWrap(element, value);\n\n      // qx.bom.Input#setWrap has the side-effect that the CSS property\n      // overflow is set via DOM methods, causing queue and DOM to get\n      // out of sync. Mirror all overflow properties to handle the case\n      // when group and x/y property differ.\n      this.setStyle(\"overflow\", element.style.overflow, true);\n      this.setStyle(\"overflowX\", element.style.overflowX, true);\n      this.setStyle(\"overflowY\", element.style.overflowY, true);\n    },\n\n    /**\n     * Set the input element enabled / disabled.\n     * Webkit needs a special treatment because the set color of the input\n     * field changes automatically. Therefore, we use\n     * <code>-webkit-user-modify: read-only</code> and\n     * <code>-webkit-user-select: none</code>\n     * for disabling the fields in webkit. All other browsers use the disabled\n     * attribute.\n     *\n     * @param value {Boolean} true, if the input element should be enabled.\n     */\n    setEnabled(value) {\n      this.__enabled = value;\n\n      this.setAttribute(\"disabled\", value === false);\n\n      if (qx.core.Environment.get(\"engine.name\") == \"webkit\") {\n        if (!value) {\n          this.setStyles({\n            userModify: \"read-only\",\n            userSelect: \"none\"\n          });\n        } else {\n          this.setStyles({\n            userModify: null,\n            userSelect: this.__selectable ? null : \"none\"\n          });\n        }\n      }\n    },\n\n    /**\n     * Set whether the element is selectable. It uses the qooxdoo attribute\n     * qxSelectable with the values 'on' or 'off'.\n     * In webkit, a special css property will be used and checks for the\n     * enabled state.\n     *\n     * @param value {Boolean} True, if the element should be selectable.\n     */\n    setSelectable: qx.core.Environment.select(\"engine.name\", {\n      webkit(value) {\n        this.__selectable = value;\n\n        // Only apply the value when it is enabled\n        super.webkit(this.__enabled && value);\n      },\n\n      default(value) {\n        super.default(value);\n      }\n    }),\n\n    /*\n    ---------------------------------------------------------------------------\n      INPUT API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the value of the input element.\n     *\n     * @param value {var} the new value\n     * @return {qx.html.Input} This instance for for chaining support.\n     */\n    setValue(value) {\n      var element = this.getDomElement();\n\n      if (element) {\n        // Do not overwrite when already correct (on input events)\n        // This is needed to keep caret position while typing.\n        if (element.value != value) {\n          qx.bom.Input.setValue(element, value);\n        }\n      } else {\n        this._setProperty(\"value\", value);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the current value.\n     *\n     * @return {String} The element's current value.\n     */\n    getValue() {\n      var element = this.getDomElement();\n\n      if (element) {\n        return qx.bom.Input.getValue(element);\n      }\n\n      return this._getProperty(\"value\") || \"\";\n    },\n\n    /**\n     * Sets the text wrap behavior of a text area element.\n     *\n     * This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"\n     *\n     * @param wrap {Boolean} Whether to turn text wrap on or off.\n     * @param direct {Boolean?false} Whether the execution should be made\n     *  directly when possible\n     * @return {qx.html.Input} This instance for for chaining support.\n     */\n    setWrap(wrap, direct) {\n      if (this.__type === \"textarea\") {\n        this._setProperty(\"wrap\", wrap, direct);\n      } else {\n        throw new Error(\"Text wrapping is only support by textareas!\");\n      }\n\n      return this;\n    },\n\n    /**\n     * Gets the text wrap behavior of a text area element.\n     *\n     * This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"\n     *\n     * @return {Boolean} Whether wrapping is enabled or disabled.\n     */\n    getWrap() {\n      if (this.__type === \"textarea\") {\n        return this._getProperty(\"wrap\");\n      } else {\n        throw new Error(\"Text wrapping is only support by textareas!\");\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}