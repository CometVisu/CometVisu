{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "html",
    "Element",
    "construct",
    "type",
    "styles",
    "attributes",
    "nodeName",
    "constructor",
    "call",
    "__type",
    "registerProperty",
    "_getValueProperty",
    "_setValueProperty",
    "_setWrapProperty",
    "members",
    "__selectable",
    "__enabled",
    "_useNodeImpl",
    "domNode",
    "newChildren",
    "Input",
    "superclass",
    "prototype",
    "_createDomElement",
    "bom",
    "create",
    "value",
    "element",
    "getDomElement",
    "setValue",
    "getValue",
    "setWrap",
    "setStyle",
    "style",
    "overflow",
    "overflowX",
    "overflowY",
    "setEnabled",
    "setAttribute",
    "core",
    "Environment",
    "get",
    "setStyles",
    "userModify",
    "userSelect",
    "setSelectable",
    "select",
    "webkit",
    "_default",
    "_setProperty",
    "_getProperty",
    "wrap",
    "direct",
    "Error",
    "getWrap"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/html/Input.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A Input wrap any valid HTML input element and make it accessible\n * through the normalized qooxdoo element interface.\n */\nqx.Class.define(\"qx.html.Input\", {\n  extend: qx.html.Element,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param type {String} The type of the input field. Valid values are\n   *   <code>text</code>, <code>textarea</code>, <code>select</code>,\n   *   <code>checkbox</code>, <code>radio</code>, <code>password</code>,\n   *   <code>hidden</code>, <code>submit</code>, <code>image</code>,\n   *   <code>file</code>, <code>search</code>, <code>reset</code>,\n   *   <code>select</code> and <code>textarea</code>.\n   * @param styles {Map?null} optional map of CSS styles, where the key is the name\n   *    of the style and the value is the value to use.\n   * @param attributes {Map?null} optional map of element attributes, where the\n   *    key is the name of the attribute and the value is the value to use.\n   */\n  construct(type, styles, attributes) {\n    // Update node name correctly\n    if (type === \"select\" || type === \"textarea\") {\n      var nodeName = type;\n    } else {\n      nodeName = \"input\";\n    }\n\n    super(nodeName, styles, attributes);\n\n    this.__type = type;\n\n    this.registerProperty(\n      \"value\",\n      this._getValueProperty,\n      this._setValueProperty\n    );\n\n    this.registerProperty(\"wrap\", null, this._setWrapProperty);\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __type: null,\n    // used for webkit only\n    __selectable: null,\n    __enabled: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      ELEMENT API\n    ---------------------------------------------------------------------------\n    */\n\n    _useNodeImpl(domNode, newChildren) {\n      super._useNodeImpl(domNode, newChildren);\n    },\n\n    //overridden\n    _createDomElement() {\n      return qx.bom.Input.create(this.__type);\n    },\n\n    /**\n     * Implementation of setter for the \"value\" property\n     *\n     * @param value {String?} value to set\n     */\n    _setValueProperty(value) {\n      var element = this.getDomElement();\n      qx.bom.Input.setValue(element, value);\n    },\n\n    /**\n     * Implementation of getter for the \"value\" property\n     *\n     * @return {String?} value on the dom\n     */\n    _getValueProperty() {\n      var element = this.getDomElement();\n      var value = qx.bom.Input.getValue(element);\n      return value;\n    },\n\n    /**\n     * Implementation of setter for the \"wrap\" property\n     *\n     * @param value {String?} value to set\n     */\n    _setWrapProperty(value) {\n      var element = this.getDomElement();\n      qx.bom.Input.setWrap(element, value);\n\n      // qx.bom.Input#setWrap has the side-effect that the CSS property\n      // overflow is set via DOM methods, causing queue and DOM to get\n      // out of sync. Mirror all overflow properties to handle the case\n      // when group and x/y property differ.\n      this.setStyle(\"overflow\", element.style.overflow, true);\n      this.setStyle(\"overflowX\", element.style.overflowX, true);\n      this.setStyle(\"overflowY\", element.style.overflowY, true);\n    },\n\n    /**\n     * Set the input element enabled / disabled.\n     * Webkit needs a special treatment because the set color of the input\n     * field changes automatically. Therefore, we use\n     * <code>-webkit-user-modify: read-only</code> and\n     * <code>-webkit-user-select: none</code>\n     * for disabling the fields in webkit. All other browsers use the disabled\n     * attribute.\n     *\n     * @param value {Boolean} true, if the input element should be enabled.\n     */\n    setEnabled(value) {\n      this.__enabled = value;\n\n      this.setAttribute(\"disabled\", value === false);\n\n      if (qx.core.Environment.get(\"engine.name\") == \"webkit\") {\n        if (!value) {\n          this.setStyles({\n            userModify: \"read-only\",\n            userSelect: \"none\"\n          });\n        } else {\n          this.setStyles({\n            userModify: null,\n            userSelect: this.__selectable ? null : \"none\"\n          });\n        }\n      }\n    },\n\n    /**\n     * Set whether the element is selectable. It uses the qooxdoo attribute\n     * qxSelectable with the values 'on' or 'off'.\n     * In webkit, a special css property will be used and checks for the\n     * enabled state.\n     *\n     * @param value {Boolean} True, if the element should be selectable.\n     */\n    setSelectable: qx.core.Environment.select(\"engine.name\", {\n      webkit(value) {\n        this.__selectable = value;\n\n        // Only apply the value when it is enabled\n        super.webkit(this.__enabled && value);\n      },\n\n      default(value) {\n        super.default(value);\n      }\n    }),\n\n    /*\n    ---------------------------------------------------------------------------\n      INPUT API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the value of the input element.\n     *\n     * @param value {var} the new value\n     * @return {qx.html.Input} This instance for for chaining support.\n     */\n    setValue(value) {\n      var element = this.getDomElement();\n\n      if (element) {\n        // Do not overwrite when already correct (on input events)\n        // This is needed to keep caret position while typing.\n        if (element.value != value) {\n          qx.bom.Input.setValue(element, value);\n        }\n      } else {\n        this._setProperty(\"value\", value);\n      }\n\n      return this;\n    },\n\n    /**\n     * Get the current value.\n     *\n     * @return {String} The element's current value.\n     */\n    getValue() {\n      var element = this.getDomElement();\n\n      if (element) {\n        return qx.bom.Input.getValue(element);\n      }\n\n      return this._getProperty(\"value\") || \"\";\n    },\n\n    /**\n     * Sets the text wrap behavior of a text area element.\n     *\n     * This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"\n     *\n     * @param wrap {Boolean} Whether to turn text wrap on or off.\n     * @param direct {Boolean?false} Whether the execution should be made\n     *  directly when possible\n     * @return {qx.html.Input} This instance for for chaining support.\n     */\n    setWrap(wrap, direct) {\n      if (this.__type === \"textarea\") {\n        this._setProperty(\"wrap\", wrap, direct);\n      } else {\n        throw new Error(\"Text wrapping is only support by textareas!\");\n      }\n\n      return this;\n    },\n\n    /**\n     * Gets the text wrap behavior of a text area element.\n     *\n     * This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"\n     *\n     * @return {Boolean} Whether wrapping is enabled or disabled.\n     */\n    getWrap() {\n      if (this.__type === \"textarea\") {\n        return this._getProperty(\"wrap\");\n      } else {\n        throw new Error(\"Text wrapping is only support by textareas!\");\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}