{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "__output",
    "__objectStack",
    "__tagDataStack",
    "properties",
    "prettyPrint",
    "init",
    "check",
    "nullable",
    "members",
    "__currentTagName",
    "write",
    "_len",
    "arguments",
    "length",
    "args",
    "Array",
    "_key",
    "join",
    "openTag",
    "tagName",
    "__flush",
    "push",
    "indent",
    "toLowerCase",
    "attributes",
    "rawTextInBody",
    "text",
    "undefined",
    "closeTag",
    "pop",
    "setAttribute",
    "key",
    "value",
    "tagData",
    "__peekTagData",
    "openTagWritten",
    "Error",
    "_this",
    "isPrettyPrint",
    "i",
    "tmp",
    "concat",
    "html",
    "Serializer",
    "__SELF_CLOSING_TAGS",
    "closeTagWritten",
    "clear",
    "getOutput",
    "pushQxObject",
    "obj",
    "popQxObject",
    "peekQxObject",
    "getQxObjectIdFor",
    "target",
    "getQxObjectId",
    "stackTop",
    "secondTop",
    "slice",
    "getQxOwner",
    "ids",
    "stackFirst",
    "owner",
    "indexOf",
    "unshift",
    "statics",
    "defer",
    "forEach"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/html/Serializer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2019-22 Zenesis Ltd, https://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     John Spackman (john.spackman@zenesis.com, @johnspackman)\n\n************************************************************************ */\n\n/**\n * Controls serializing the VDOM in `qx.html.*` into an HTML string.\n *\n * The principal task here is to write the HTML with QxObjectIds, in a form which allows\n * the DOM that the browser parsed to be connected to the instances of `qx.html.Node`\n * that are created by the Javascript on the client.\n *\n * In other words, the DOM which is created by this HTML will be passed to `qx.html.Element.useNode`\n * on the client.\n */\nqx.Class.define(\"qx.html.Serializer\", {\n  extend: qx.core.Object,\n\n  /**\n   * Constructor\n   */\n  construct() {\n    super();\n    this.__output = \"\";\n    this.__objectStack = [];\n    this.__tagDataStack = [];\n  },\n\n  properties: {\n    /** Whether to pretty print (default is whatever qx.cdebug is set to) */\n    prettyPrint: {\n      init: qx.core.Environment.get(\"qx.debug\"),\n      check: \"Boolean\",\n      nullable: false\n    }\n  },\n\n  members: {\n    /** @type{String} the HTML being built up */\n    __output: null,\n\n    /** @type{qx.html.Node[]} the stack of objects being written */\n    __objectStack: null,\n\n    /**\n     * For each tag on the stack being emitted, we track the data in an object, nominally called TagData\n     *\n     * @typedef {Object} TagData\n     * @property {Integer} indent how far this node is indented\n     * @property {String} tagName the name of the tag\n     * @property {Dictionary} attributes the attributes to set on the tag\n     * @property {Boolean?} openTagWritten whether the open tag has been written\n     * @property {Boolean?} closeTagWritten whether the close tag has been written\n     */\n\n    /** @type{TagData[]} the stack of elements being written */\n    __tagDataStack: null,\n\n    /** @type{String?} the current tag name */\n    __currentTagName: null,\n\n    /**\n     * Writes to the output\n     * @param  {var[]} args array of values to convert to strings and output\n     */\n    write(...args) {\n      this.__output += args.join(\"\");\n    },\n\n    /**\n     * Called when an open tag needs to be emitted\n     *\n     * @param {String} tagName\n     */\n    openTag(tagName) {\n      this.__flush();\n      this.__tagDataStack.push({\n        indent: this.__tagDataStack.length,\n        tagName: tagName.toLowerCase(),\n        attributes: {}\n      });\n    },\n\n    /**\n     * Called to add plain text into the output\n     * @param {String?} text\n     */\n    rawTextInBody(text) {\n      if (text !== null && text !== undefined) {\n        this.__flush();\n        this.write(text);\n      }\n    },\n\n    /**\n     * Called to close the current tag\n     */\n    closeTag() {\n      this.__flush(true);\n      this.__tagDataStack.pop();\n    },\n\n    /**\n     * Adds an attribute to the current tag; cannot be done if body or children have been output\n     *\n     * @param {String} key the attribute name\n     * @param {String?} value teh attribite value, if null the attribute will be deleted\n     */\n    setAttribute(key, value) {\n      const tagData = this.__peekTagData();\n      if (tagData.openTagWritten) {\n        throw new Error(\n          \"Cannot modify attributes after the opening tag has been written\"\n        );\n      }\n\n      tagData.attributes[key] = value;\n    },\n\n    /**\n     * Looks for the current tag\n     *\n     * @returns {TagData}\n     */\n    __peekTagData() {\n      return this.__tagDataStack[this.__tagDataStack.length - 1];\n    },\n\n    /**\n     * Flushes the tag into the output.  This will prevent further attributes etc from being emitted\n     * and if `closeTag` is true then the tag is closed.  Handles self closing tags and indentation\n     *\n     * @param {Boolean} closeTag if we are flushing because the tag is being closed\n     */\n    __flush(closeTag) {\n      const tagData = this.__peekTagData();\n      if (!tagData) {\n        return;\n      }\n\n      const indent = () => {\n        if (this.isPrettyPrint()) {\n          for (let i = 0; i < tagData.indent; i++) {\n            this.write(\"  \");\n          }\n        }\n      };\n\n      if (!tagData.openTagWritten) {\n        indent();\n        const tmp = [\"<\" + tagData.tagName];\n        for (const key in tagData.attributes) {\n          const value = tagData.attributes[key];\n          if (value !== null && value !== undefined) {\n            tmp.push(`${key}=${value}`);\n          }\n        }\n        this.write(tmp.join(\" \"));\n\n        if (closeTag) {\n          if (qx.html.Serializer.__SELF_CLOSING_TAGS[tagData.tagName]) {\n            this.write(\"/>\");\n          } else {\n            this.write(\"></\" + tagData.tagName + \">\");\n          }\n          tagData.openTagWritten = true;\n          tagData.closeTagWritten = true;\n          if (this.isPrettyPrint()) {\n            this.write(\"\\n\");\n          }\n        } else {\n          this.write(\">\");\n          if (this.isPrettyPrint()) {\n            this.write(\"\\n\");\n          }\n          tagData.openTagWritten = true;\n        }\n      } else if (closeTag && !tagData.closeTagWritten) {\n        indent();\n        this.write(`</${tagData.tagName}>`);\n        if (this.isPrettyPrint()) {\n          this.write(\"\\n\");\n        }\n        tagData.closeTagWritten = true;\n      }\n    },\n\n    /**\n     * Erases all output\n     */\n    clear() {\n      this.__output = \"\";\n    },\n\n    /**\n     * Provides the accumulated output\n     *\n     * @returns {String}\n     */\n    getOutput() {\n      return this.__output;\n    },\n\n    /**\n     * Pushes the QxObject onto the stack\n     *\n     * @param {qx.core.Object} obj\n     */\n    pushQxObject(obj) {\n      this.__objectStack.push(obj);\n    },\n\n    /**\n     * Pops the topmost QxObject from the stack\n     */\n    popQxObject() {\n      this.__objectStack.pop();\n    },\n\n    /**\n     * Peeks the QxObject stack\n     *\n     * @returns {qx.core.Object}\n     */\n    peekQxObject() {\n      return this.__objectStack[this.__objectStack.length - 1] || null;\n    },\n\n    /**\n     * Calculates a Qx Object ID which is either relative to the root most element,\n     * or is relative to it's owner.  This tries to be as concise as possible so that\n     * the output HTML is as readable as possible\n     *\n     * The return is null if the object does not have an ID\n     *\n     * @param {qx.html.Element} target\n     * @returns {String?}\n     */\n    getQxObjectIdFor(target) {\n      if (!target.getQxObjectId()) {\n        return null;\n      }\n\n      // If we can make the ID relative to it's parent, then just use the shorter version.  This is\n      //  not strictly necessary because we could use absolute paths everywhere, but it's a lot\n      //  easier to read and understand, and consumes less bytes in the output\n      const stackTop = this.peekQxObject();\n      if (stackTop === target) {\n        const secondTop = this.__objectStack.slice(-2)[0] || null;\n        if (secondTop === target.getQxOwner()) {\n          return target.getQxObjectId();\n        }\n      }\n\n      // Calculate the relative path between the stack top and the target object\n      const ids = [target.getQxObjectId()];\n      const stackFirst = this.__objectStack[0];\n      let tmp = target;\n      do {\n        const owner = tmp.getQxOwner();\n        if (this.__objectStack.indexOf(owner) < 0) {\n          break;\n        } else if (owner === stackFirst) {\n          ids.unshift(\"..\");\n        } else {\n          ids.unshift(tmp.getQxObjectId());\n        }\n      } while ((tmp = tmp.getQxOwner()));\n\n      return ids.join(\"/\");\n    }\n  },\n\n  statics: {\n    /** @type{Dictionary<String,Boolean>} list of self closing tags, in lowercase */\n    __SELF_CLOSING_TAGS: null\n  },\n\n  /**\n   * Populates statics\n   */\n  defer(statics) {\n    statics.__SELF_CLOSING_TAGS = {};\n    [\n      \"area\",\n      \"base\",\n      \"br\",\n      \"col\",\n      \"embed\",\n      \"hr\",\n      \"img\",\n      \"input\",\n      \"link\",\n      \"meta\",\n      \"param\",\n      \"source\",\n      \"track\",\n      \"wbr\"\n    ].forEach(function (tagName) {\n      statics.__SELF_CLOSING_TAGS[tagName] = true;\n    });\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}