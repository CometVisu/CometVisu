{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "nodeName",
    "_nodeName",
    "statics",
    "fromDomNode",
    "domNode",
    "$$elementObject",
    "toVirtualNode",
    "html",
    "Factory",
    "getInstance",
    "createElement",
    "attributes",
    "useNode",
    "properties",
    "visible",
    "init",
    "nullable",
    "check",
    "apply",
    "event",
    "members",
    "_domNode",
    "_parent",
    "_qxObject",
    "_included",
    "_children",
    "_modifiedChildren",
    "_propertyJobs",
    "_properties",
    "__eventValues",
    "connectObject",
    "qxObject",
    "$$qxObjectHash",
    "toHashCode",
    "$$qxObject",
    "Environment",
    "get",
    "updateObjectId",
    "disconnectObject",
    "_createDomElement",
    "Error",
    "classname",
    "serialize",
    "writer",
    "temporaryQxObjectId",
    "getQxObjectId",
    "setQxObjectId",
    "id",
    "Id",
    "getAbsoluteIdOf",
    "isIdRoot",
    "register",
    "result",
    "undefined",
    "_serializeImpl",
    "buffer",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "append",
    "join",
    "unregister",
    "getAttribute",
    "self",
    "convert",
    "children",
    "fromCollection",
    "childNodes",
    "map",
    "domChild",
    "child",
    "nodeType",
    "window",
    "Node",
    "ELEMENT_NODE",
    "owningQxObjectId",
    "qxObjectId",
    "owningQxObject",
    "pos",
    "lastIndexOf",
    "substring",
    "getQxObject",
    "htmlNode",
    "install",
    "htmlChildren",
    "mapEntry",
    "_useNodeImpl",
    "rootMap",
    "flush",
    "_insertChildren",
    "newChildren",
    "_connectDomNode",
    "_copyData",
    "lookup",
    "oldChildren",
    "clone",
    "forEach",
    "parentElement",
    "removeChild",
    "appendChild",
    "_scheduleChildrenUpdate",
    "$$element",
    "isInDocument",
    "document",
    "body",
    "setAttribute",
    "_cascadeQxObjectIdChanges",
    "Element",
    "_modified",
    "_scheduleFlush",
    "_flush",
    "length",
    "i",
    "isVisible",
    "_syncData",
    "_syncChildren",
    "isRoot",
    "isInRoot",
    "tmp",
    "_willBeSeeable",
    "_hasRoots",
    "pa",
    "domElement",
    "createDocumentFragment",
    "dataChildren",
    "dataLength",
    "dataChild",
    "dataEl",
    "domParent",
    "domChildren",
    "domPos",
    "domEl",
    "insertBefore",
    "fromMarkup",
    "propertiesFromDom",
    "elem",
    "data",
    "domEvents",
    "manager",
    "Registration",
    "getManager",
    "findHandler",
    "type",
    "importListeners",
    "key",
    "prop",
    "value",
    "call",
    "set",
    "jobs",
    "_addChildImpl",
    "__root",
    "remove",
    "_removeChildImpl",
    "_moveChildImpl",
    "getChildren",
    "getChild",
    "index",
    "hasChildren",
    "indexOf",
    "hasChild",
    "add",
    "varargs",
    "addImpl",
    "arr",
    "Type",
    "isArray",
    "push",
    "addAt",
    "insertAt",
    "childs",
    "removeImpl",
    "removeAt",
    "removeAll",
    "l",
    "getParent",
    "insertInto",
    "parent",
    "rel",
    "insertAfter",
    "moveTo",
    "oldIndex",
    "moveBefore",
    "moveAfter",
    "free",
    "getDomElement",
    "create",
    "getNodeName",
    "setNodeName",
    "name",
    "toLowerCase",
    "include",
    "exclude",
    "isIncluded",
    "_applyVisible",
    "registerProperty",
    "debug",
    "Function",
    "bind",
    "_applyProperty",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "_setProperty",
    "direct",
    "_removeProperty",
    "_getProperty",
    "fn",
    "addListener",
    "listener",
    "capture",
    "$$disposed",
    "registerDomEvent",
    "unique",
    "Manager",
    "getNextUniqueId",
    "supportsEvent",
    "domEventId",
    "removeListener",
    "$$wrapped_callback",
    "callback",
    "values",
    "entry",
    "removeListenerById",
    "hasListener",
    "has",
    "getListeners",
    "listeners",
    "serializeListeners",
    "listenerData",
    "handler",
    "destruct",
    "el",
    "removeAllListeners",
    "ObjectRegistry",
    "inShutDown",
    "_disposeArray"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/html/Node.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * John Spackman (https://github.com/johnspackman)\n\n************************************************************************ */\n\n/**\n * High-performance, high-level DOM element creation and management.\n *\n * Mirrors the DOM structure of Node (see also Element and Text) so to provide\n * DOM insertion and modification with advanced logic to reduce the real transactions.\n *\n * Each child itself also has got some powerful methods to control its\n * position:\n * {@link #getParent}, {@link #free},\n * {@link #insertInto}, {@link #insertBefore}, {@link #insertAfter},\n * {@link #moveTo}, {@link #moveBefore}, {@link #moveAfter},\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.module.Animation)\n */\nqx.Class.define(\"qx.html.Node\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * Creates a new Element\n   *\n   * @param nodeName {String} name of the node; will be a tag name for Elements, otherwise it's a reserved\n   * name eg \"#text\"\n   */\n  construct(nodeName) {\n    super();\n    this._nodeName = nodeName;\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Finds the Widget for a given DOM element\n     *\n     * @param domElement {DOM} the DOM element\n     * @return {qx.ui.core.Widget} the Widget that created the DOM element\n     */\n    fromDomNode(domNode) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(\n          (!domNode.$$element && !domNode.$$elementObject) ||\n            domNode.$$element === domNode.$$elementObject.toHashCode()\n        );\n      }\n      return domNode.$$elementObject;\n    },\n\n    /**\n     * Converts a DOM node into a qx.html.Node, providing the existing instance if\n     * there is one\n     *\n     * @param {Node} domNode\n     * @returns {qx.html.Node}\n     */\n    toVirtualNode(domNode) {\n      if (domNode.$$elementObject) {\n        return domNode.$$elementObject;\n      }\n\n      let html = qx.html.Factory.getInstance().createElement(\n        domNode.nodeName,\n        domNode.attributes\n      );\n\n      html.useNode(domNode);\n      return html;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Controls whether the element is visible which means that a previously applied\n     * CSS style of display=none gets removed and the element will inserted into the DOM,\n     * when this had not already happened before.\n     *\n     * If the element already exists in the DOM then it will kept in DOM, but configured\n     * hidden using a CSS style of display=none.\n     *\n     * Please note: This does not control the visibility or parent inclusion recursively.\n     *\n     * @type {Boolean} Whether the element should be visible in the render result\n     */\n    visible: {\n      init: true,\n      nullable: true,\n      check: \"Boolean\",\n      apply: \"_applyVisible\",\n      event: \"changeVisible\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED HELPERS/DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {String} the name of the node */\n    _nodeName: null,\n\n    /** @type {Node} DOM node of this object */\n    _domNode: null,\n\n    /** @type {qx.html.Element} parent element */\n    _parent: null,\n\n    /** @type {qx.core.Object} the Qooxdoo object this node is attached to */\n    _qxObject: null,\n\n    /** @type {Boolean} Whether the element should be included in the render result */\n    _included: true,\n\n    _children: null,\n    _modifiedChildren: null,\n\n    _propertyJobs: null,\n    _properties: null,\n\n    /** @type {Map} map of event handlers */\n    __eventValues: null,\n\n    /**\n     * Connects a widget to this element, and to the DOM element in this Element.  They\n     * remain associated until disposed or disconnectObject is called\n     *\n     * @param qxObject {qx.core.Object} the object to associate\n     */\n    connectObject(qxObject) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(\n          !this._qxObject || this._qxObject === qxObject\n        );\n      }\n\n      this._qxObject = qxObject;\n      if (this._domNode) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertTrue(\n            (!this._domNode.$$qxObjectHash && !this._domNode.$$qxObject) ||\n              (this._domNode.$$qxObject === qxObject &&\n                this._domNode.$$qxObjectHash === qxObject.toHashCode())\n          );\n        }\n\n        this._domNode.$$qxObjectHash = qxObject.toHashCode();\n        this._domNode.$$qxObject = qxObject;\n      }\n\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n    },\n\n    /**\n     * Disconnects a widget from this element and the DOM element.  The DOM element remains\n     * untouched, except that it can no longer be used to find the Widget.\n     *\n     * @param qxObject {qx.core.Object} the Widget\n     */\n    disconnectObject(qxObject) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(this._qxObject === qxObject);\n      }\n\n      delete this._qxObject;\n      if (this._domNode) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertTrue(\n            (!this._domNode.$$qxObjectHash && !this._domNode.$$qxObject) ||\n              (this._domNode.$$qxObject === qxObject &&\n                this._domNode.$$qxObjectHash === qxObject.toHashCode())\n          );\n        }\n\n        this._domNode.$$qxObjectHash = \"\";\n        delete this._domNode.$$qxObject;\n      }\n\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n    },\n\n    /**\n     * Internal helper to generate the DOM element\n     *\n     * @return {Element} DOM element\n     */\n    _createDomElement() {\n      throw new Error(\n        \"No implementation for \" + this.classname + \"._createDomElement\"\n      );\n    },\n\n    /**\n     * Serializes the virtual DOM element to a writer; the `writer` function accepts\n     *  an varargs, which can be joined with an empty string or streamed.\n     *\n     * If writer is null, the element will be serialised to a string which is returned;\n     * note that if writer is not null, the return value will be null\n     *\n     * @param writer {Function?} the writer\n     * @return {String?} the serialised version if writer is null\n     */\n    serialize(writer) {\n      var temporaryQxObjectId = !this.getQxObjectId();\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(this.classname);\n      }\n      var id = qx.core.Id.getAbsoluteIdOf(this, true);\n      var isIdRoot = !id;\n      if (isIdRoot) {\n        qx.core.Id.getInstance().register(this);\n      }\n\n      var result = undefined;\n      if (writer) {\n        this._serializeImpl(writer);\n      } else {\n        var buffer = [];\n        this._serializeImpl(function () {\n          var args = qx.lang.Array.fromArguments(arguments);\n          qx.lang.Array.append(buffer, args);\n        });\n        result = buffer.join(\"\");\n      }\n\n      if (isIdRoot) {\n        qx.core.Id.getInstance().unregister(this);\n      }\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(null);\n      }\n\n      return result;\n    },\n\n    /**\n     * Serializes the virtual DOM element to a writer; the `writer` function accepts\n     *  an varargs, which can be joined with an empty string or streamed.\n     *\n     * @param writer {Function} the writer\n     */\n    _serializeImpl(writer) {\n      throw new Error(\n        \"No implementation for \" + this.classname + \".serializeImpl\"\n      );\n    },\n\n    /**\n     * Uses an existing element instead of creating one. This may be interesting\n     * when the DOM element is directly needed to add content etc.\n     *\n     * @param domNode {Node} DOM Node to reuse\n     */\n    useNode(domNode) {\n      var id = domNode.getAttribute(\"data-qx-object-id\");\n      if (id) {\n        this.setQxObjectId(id);\n      }\n      var temporaryQxObjectId = !this.getQxObjectId();\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(this.classname);\n      }\n      var id = qx.core.Id.getAbsoluteIdOf(this, true);\n      var isIdRoot = !id;\n      if (isIdRoot) {\n        qx.core.Id.getInstance().register(this);\n      }\n\n      /*\n       * When merging children, we want to keep the original DOM nodes in\n       * domNode no matter what - however, where the DOM nodes have a qxObjectId\n       * we must reuse the original instances.\n       *\n       * The crucial thing is that the qxObjectId hierarchy and the DOM hierarchy\n       * are not the same (although they are often similar, the DOM will often have\n       * extra Nodes).\n       *\n       * However, because the objects in the qxObjectId space will typically already\n       * exist (eg accessed via the constructor) we do not want to discard the original\n       * instance of qx.html.Element because there are probably references to them in\n       * code.\n       *\n       * In the code below, we map the DOM heirarchy into a temporary Javascript\n       * hierarchy, where we can either use existing qx.html.Element instances (found\n       * by looking up the qxObjectId) or fabricate new ones.\n       *\n       * Once the temporary hierarchy is ready, we go back and synchronise each\n       * qx.html.Element with the DOM node and our new array of children.\n       *\n       * The only rule to this is that if you are going to call this `useNode`, then\n       * you must not keep references to objects *unless* you also access them via\n       * the qxObjectId mechanism.\n       */\n\n      var self = this;\n      function convert(domNode) {\n        var children = qx.lang.Array.fromCollection(domNode.childNodes);\n        children = children.map(function (domChild) {\n          var child = null;\n          if (domChild.nodeType == window.Node.ELEMENT_NODE) {\n            var id = domChild.getAttribute(\"data-qx-object-id\");\n            if (id) {\n              var owningQxObjectId = null;\n              var qxObjectId = null;\n              var owningQxObject = null;\n              var pos = id.lastIndexOf(\"/\");\n              if (pos > -1) {\n                owningQxObjectId = id.substring(0, pos);\n                qxObjectId = id.substring(pos + 1);\n                owningQxObject = qx.core.Id.getQxObject(owningQxObjectId);\n                child = owningQxObject.getQxObject(qxObjectId);\n              } else {\n                qxObjectId = id;\n                owningQxObject = self;\n                child = self.getQxObject(id);\n              }\n            }\n          }\n          if (!child) {\n            child = qx.html.Factory.getInstance().createElement(\n              domChild.nodeName,\n              domChild.attributes\n            );\n          }\n          return {\n            htmlNode: child,\n            domNode: domChild,\n            children: convert(domChild)\n          };\n        });\n        return children;\n      }\n\n      function install(map) {\n        var htmlChildren = map.children.map(function (mapEntry) {\n          install(mapEntry);\n          return mapEntry.htmlNode;\n        });\n        map.htmlNode._useNodeImpl(map.domNode, htmlChildren);\n      }\n\n      var rootMap = {\n        htmlNode: this,\n        domNode: domNode,\n        children: convert(domNode)\n      };\n\n      install(rootMap);\n\n      this.flush();\n      this._insertChildren();\n\n      if (isIdRoot) {\n        qx.core.Id.getInstance().unregister(this);\n      }\n      if (temporaryQxObjectId) {\n        this.setQxObjectId(null);\n      }\n    },\n\n    /**\n     * Called internally to complete the connection to an existing DOM node\n     *\n     * @param domNode {DOMNode} the node we're syncing to\n     * @param newChildren {qx.html.Node[]} the new children\n     */\n    _useNodeImpl(domNode, newChildren) {\n      if (this._domNode) {\n        throw new Error(\"Could not overwrite existing element!\");\n      }\n\n      // Use incoming element\n      this._connectDomNode(domNode);\n\n      // Copy currently existing data over to element\n      this._copyData(true, true);\n\n      // Add children\n      var lookup = {};\n      var oldChildren = this._children\n        ? qx.lang.Array.clone(this._children)\n        : null;\n      newChildren.forEach(function (child) {\n        lookup[child.toHashCode()] = child;\n      });\n      this._children = newChildren;\n\n      // Make sure that unused children are disconnected\n      if (oldChildren) {\n        oldChildren.forEach(function (child) {\n          if (!lookup[child.toHashCode()]) {\n            if (child._domNode && child._domNode.parentElement) {\n              child._domNode.parentElement.removeChild(child._domNode);\n            }\n            child._parent = null;\n          }\n        });\n      }\n\n      var self = this;\n      this._children.forEach(function (child) {\n        child._parent = self;\n        if (child._domNode && child._domNode.parentElement !== self._domNode) {\n          child._domNode.parentElement.removeChild(child._domNode);\n          if (this._domNode) {\n            this._domNode.appendChild(child._domNode);\n          }\n        }\n      });\n\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n    /**\n     * Connects a DOM element to this Node; if this Node is already connected to a Widget\n     * then the Widget is also connected.\n     *\n     * @param domNode {DOM} the DOM Node to associate\n     */\n    _connectDomNode(domNode) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertTrue(!this._domNode || this._domNode === domNode);\n        qx.core.Assert.assertTrue(\n          (domNode.$$elementObject === this &&\n            domNode.$$element === this.toHashCode()) ||\n            (!domNode.$$elementObject && !domNode.$$element)\n        );\n      }\n\n      this._domNode = domNode;\n      domNode.$$elementObject = this;\n      domNode.$$element = this.toHashCode();\n      if (this._qxObject) {\n        domNode.$$qxObjectHash = this._qxObject.toHashCode();\n        domNode.$$qxObject = this._qxObject;\n      }\n    },\n\n    /**\n     * Detects whether the DOM node has been created and is in the document\n     *\n     * @return {Boolean}\n     */\n    isInDocument() {\n      if (document.body) {\n        for (\n          var domNode = this._domNode;\n          domNode != null;\n          domNode = domNode.parentElement\n        ) {\n          if (domNode === document.body) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Updates the Object ID on the element to match the QxObjectId\n     */\n    updateObjectId() {\n      // Copy Object Id\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        var id = this.getQxObjectId();\n        if (!id && this._qxObject) {\n          id = this._qxObject.getQxObjectId();\n        }\n\n        this.setAttribute(\"data-qx-object-id\", id, true);\n      }\n    },\n\n    _cascadeQxObjectIdChanges() {\n      if (qx.core.Environment.get(\"module.objectid\")) {\n        this.updateObjectId();\n      }\n      super._cascadeQxObjectIdChanges();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      FLUSH OBJECT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add the element to the global modification list.\n     *\n     */\n    _scheduleChildrenUpdate() {\n      if (this._modifiedChildren) {\n        return;\n      }\n\n      if (this._domNode) {\n        this._modifiedChildren = true;\n\n        qx.html.Element._modified[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n    },\n\n    /**\n     * Syncs data of an HtmlElement object to the DOM.\n     *\n     * This is just a public wrapper around `flush`, because the scope has changed\n     *\n     * @deprecated {6.0} Please use `.flush()` instead\n     */\n    _flush() {\n      this.flush();\n    },\n\n    /**\n     * Syncs data of an HtmlElement object to the DOM.\n     *\n     */\n    flush() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (this.DEBUG) {\n          this.debug(\"Flush: \" + this.getAttribute(\"id\"));\n        }\n      }\n\n      var length;\n      var children = this._children;\n      if (children) {\n        length = children.length;\n        var child;\n        for (var i = 0; i < length; i++) {\n          child = children[i];\n\n          if (child.isVisible() && child._included && !child._domNode) {\n            child.flush();\n          }\n        }\n      }\n\n      if (!this._domNode) {\n        this._connectDomNode(this._createDomElement());\n\n        this._copyData(false, false);\n\n        if (children && length > 0) {\n          this._insertChildren();\n        }\n      } else {\n        this._syncData();\n\n        if (this._modifiedChildren) {\n          this._syncChildren();\n        }\n      }\n\n      delete this._modifiedChildren;\n    },\n\n    /**\n     * Returns this element's root flag\n     *\n     * @return {Boolean}\n     */\n    isRoot() {\n      throw new Error(\"No implementation for \" + this.classname + \".isRoot\");\n    },\n\n    /**\n     * Detects whether this element is inside a root element\n     *\n     * @return {Boolean}\n     */\n    isInRoot() {\n      var tmp = this;\n      while (tmp) {\n        if (tmp.isRoot()) {\n          return true;\n        }\n        tmp = tmp._parent;\n      }\n      return false;\n    },\n\n    /**\n     * Walk up the internal children hierarchy and\n     * look if one of the children is marked as root.\n     *\n     * This method is quite performance hungry as it\n     * really walks up recursively.\n     * @return {Boolean} <code>true</code> if the element will be seeable\n     */\n    _willBeSeeable() {\n      if (!qx.html.Element._hasRoots) {\n        return false;\n      }\n      var pa = this;\n\n      // Any chance to cache this information in the parents?\n      while (pa) {\n        if (pa.isRoot()) {\n          return true;\n        }\n\n        if (!pa._included || !pa.isVisible()) {\n          return false;\n        }\n\n        pa = pa._parent;\n      }\n\n      return false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR CHILDREN FLUSH\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Append all child nodes to the DOM\n     * element. This function is used when the element is initially\n     * created. After this initial apply {@link #_syncChildren} is used\n     * instead.\n     *\n     */\n    _insertChildren() {\n      var children = this._children;\n      if (!children) {\n        return;\n      }\n      var length = children.length;\n      var child;\n\n      if (length > 2) {\n        var domElement = document.createDocumentFragment();\n        for (var i = 0; i < length; i++) {\n          child = children[i];\n          if (child._domNode && child._included) {\n            domElement.appendChild(child._domNode);\n          }\n        }\n\n        this._domNode.appendChild(domElement);\n      } else {\n        var domElement = this._domNode;\n        for (var i = 0; i < length; i++) {\n          child = children[i];\n          if (child._domNode && child._included) {\n            domElement.appendChild(child._domNode);\n          }\n        }\n      }\n    },\n\n    /**\n     * Synchronize internal children hierarchy to the DOM. This is used\n     * for further runtime updates after the element has been created\n     * initially.\n     *\n     */\n    _syncChildren() {\n      var dataChildren = this._children || [];\n      var dataLength = dataChildren.length;\n      var dataChild;\n      var dataEl;\n\n      var domParent = this._domNode;\n      var domChildren = domParent.childNodes;\n      var domPos = 0;\n      var domEl;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var domOperations = 0;\n      }\n\n      // Remove children from DOM which are excluded or remove first\n      for (var i = domChildren.length - 1; i >= 0; i--) {\n        domEl = domChildren[i];\n        dataEl = qx.html.Node.fromDomNode(domEl);\n\n        if (!dataEl || !dataEl._included || dataEl._parent !== this) {\n          domParent.removeChild(domEl);\n\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            domOperations++;\n          }\n        }\n      }\n\n      // Start from beginning and bring DOM in sync\n      // with the data structure\n      for (var i = 0; i < dataLength; i++) {\n        dataChild = dataChildren[i];\n\n        // Only process visible childs\n        if (dataChild._included) {\n          dataEl = dataChild._domNode;\n          domEl = domChildren[domPos];\n\n          if (!dataEl) {\n            continue;\n          }\n\n          // Only do something when out of sync\n          // If the data element is not there it may mean that it is still\n          // marked as visible=false\n          if (dataEl != domEl) {\n            if (domEl) {\n              domParent.insertBefore(dataEl, domEl);\n            } else {\n              domParent.appendChild(dataEl);\n            }\n\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              domOperations++;\n            }\n          }\n\n          // Increase counter\n          domPos++;\n        }\n      }\n\n      // User feedback\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.html.Element.DEBUG) {\n          this.debug(\"Synced DOM with \" + domOperations + \" operations\");\n        }\n      }\n    },\n\n    /**\n     * Copies data between the internal representation and the DOM. This\n     * simply copies all the data and only works well directly after\n     * element creation. After this the data must be synced using {@link #_syncData}\n     *\n     * @param fromMarkup {Boolean} Whether the copy should respect styles\n     *   given from markup\n     * @param propertiesFromDom {Boolean} whether the copy should respect the property\n     *  values in the dom\n     */\n    _copyData(fromMarkup, propertiesFromDom) {\n      var elem = this._domNode;\n\n      // Attach events\n      var data = this.__eventValues;\n      if (data) {\n        // Import listeners\n        let domEvents = {};\n        let manager = qx.event.Registration.getManager(elem);\n        for (let id in data) {\n          if (manager.findHandler(elem, data[id].type)) {\n            domEvents[id] = data[id];\n          }\n        }\n        qx.event.Registration.getManager(elem).importListeners(elem, domEvents);\n\n        // Cleanup event map\n        // Events are directly attached through event manager\n        // after initial creation. This differs from the\n        // handling of styles and attributes where queuing happens\n        // through the complete runtime of the application.\n        delete this.__eventValues;\n      }\n\n      // Copy properties\n      if (this._properties) {\n        for (var key in this._properties) {\n          var prop = this._properties[key];\n          if (propertiesFromDom) {\n            if (prop.get) {\n              prop.value = prop.get.call(this, key);\n            }\n          } else if (prop.value !== undefined) {\n            prop.set.call(this, prop.value, key);\n          }\n        }\n      }\n    },\n\n    /**\n     * Synchronizes data between the internal representation and the DOM. This\n     * is the counterpart of {@link #_copyData} and is used for further updates\n     * after the element has been created.\n     *\n     */\n    _syncData() {\n      // Sync misc\n      var jobs = this._propertyJobs;\n      if (jobs && this._properties) {\n        for (var key in jobs) {\n          var prop = this._properties[key];\n          if (prop.value !== undefined) {\n            prop.set.call(this, prop.value, key);\n          }\n        }\n\n        this._propertyJobs = null;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE HELPERS/DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Internal helper for all children addition needs\n     *\n     * @param child {var} the element to add\n     * @throws {Error} if the given element is already a child\n     *     of this element\n     */\n    _addChildImpl(child) {\n      if (child._parent === this) {\n        throw new Error(\"Child is already in: \" + child);\n      }\n\n      if (child.__root) {\n        throw new Error(\"Root elements could not be inserted into other ones.\");\n      }\n\n      // Remove from previous parent\n      if (child._parent) {\n        child._parent.remove(child);\n      }\n\n      // Convert to child of this object\n      child._parent = this;\n\n      // Prepare array\n      if (!this._children) {\n        this._children = [];\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n    /**\n     * Internal helper for all children removal needs\n     *\n     * @param child {qx.html.Element} the removed element\n     * @throws {Error} if the given element is not a child\n     *     of this element\n     */\n    _removeChildImpl(child) {\n      if (child._parent !== this) {\n        throw new Error(\"Has no child: \" + child);\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n\n      // Remove reference to old parent\n      delete child._parent;\n    },\n\n    /**\n     * Internal helper for all children move needs\n     *\n     * @param child {qx.html.Element} the moved element\n     * @throws {Error} if the given element is not a child\n     *     of this element\n     */\n    _moveChildImpl(child) {\n      if (child._parent !== this) {\n        throw new Error(\"Has no child: \" + child);\n      }\n\n      // Schedule children update\n      if (this._domNode) {\n        this._scheduleChildrenUpdate();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN MANAGEMENT (EXECUTED ON THE PARENT)\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns a copy of the internal children structure.\n     *\n     * Please do not modify the array in place. If you need\n     * to work with the data in such a way make yourself\n     * a copy of the data first.\n     *\n     * @return {Array} the children list\n     */\n    getChildren() {\n      return this._children || null;\n    },\n\n    /**\n     * Get a child element at the given index\n     *\n     * @param index {Integer} child index\n     * @return {qx.html.Element|null} The child element or <code>null</code> if\n     *     no child is found at that index.\n     */\n    getChild(index) {\n      var children = this._children;\n      return (children && children[index]) || null;\n    },\n\n    /**\n     * Returns whether the element has any child nodes\n     *\n     * @return {Boolean} Whether the element has any child nodes\n     */\n    hasChildren() {\n      var children = this._children;\n      return children && children[0] !== undefined;\n    },\n\n    /**\n     * Find the position of the given child\n     *\n     * @param child {qx.html.Element} the child\n     * @return {Integer} returns the position. If the element\n     *     is not a child <code>-1</code> will be returned.\n     */\n    indexOf(child) {\n      var children = this._children;\n      return children ? children.indexOf(child) : -1;\n    },\n\n    /**\n     * Whether the given element is a child of this element.\n     *\n     * @param child {qx.html.Element} the child\n     * @return {Boolean} Returns <code>true</code> when the given\n     *    element is a child of this element.\n     */\n    hasChild(child) {\n      var children = this._children;\n      return children && children.indexOf(child) !== -1;\n    },\n\n    /**\n     * Append all given children at the end of this element.\n     *\n     * @param varargs {qx.html.Element} elements to insert\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    add(varargs) {\n      var self = this;\n      function addImpl(arr) {\n        arr.forEach(function (child) {\n          if (child instanceof qx.data.Array || qx.lang.Type.isArray(child)) {\n            addImpl(child);\n          } else {\n            self._addChildImpl(child);\n            self._children.push(child);\n          }\n        });\n      }\n      addImpl(qx.lang.Array.fromArguments(arguments));\n\n      // Chaining support\n      return this;\n    },\n\n    /**\n     * Inserts a new element into this element at the given position.\n     *\n     * @param child {qx.html.Element} the element to insert\n     * @param index {Integer} the index (starts at 0 for the\n     *     first child) to insert (the index of the following\n     *     children will be increased by one)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    addAt(child, index) {\n      this._addChildImpl(child);\n      qx.lang.Array.insertAt(this._children, child, index);\n\n      // Chaining support\n      return this;\n    },\n\n    /**\n     * Removes all given children\n     *\n     * @param childs {qx.html.Element} children to remove\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    remove(childs) {\n      var children = this._children;\n      if (!children) {\n        return this;\n      }\n\n      var self = this;\n      function removeImpl(arr) {\n        arr.forEach(function (child) {\n          if (child instanceof qx.data.Array || qx.lang.Type.isArray(child)) {\n            removeImpl(child);\n          } else {\n            self._removeChildImpl(child);\n            qx.lang.Array.remove(children, child);\n          }\n        });\n      }\n      removeImpl(qx.lang.Array.fromArguments(arguments));\n\n      // Chaining support\n      return this;\n    },\n\n    /**\n     * Removes the child at the given index\n     *\n     * @param index {Integer} the position of the\n     *     child (starts at 0 for the first child)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeAt(index) {\n      var children = this._children;\n      if (!children) {\n        throw new Error(\"Has no children!\");\n      }\n\n      var child = children[index];\n      if (!child) {\n        throw new Error(\"Has no child at this position!\");\n      }\n\n      this._removeChildImpl(child);\n      qx.lang.Array.removeAt(this._children, index);\n\n      // Chaining support\n      return this;\n    },\n\n    /**\n     * Remove all children from this element.\n     *\n     * @return {qx.html.Element} A reference to this.\n     */\n    removeAll() {\n      var children = this._children;\n      if (children) {\n        for (var i = 0, l = children.length; i < l; i++) {\n          this._removeChildImpl(children[i]);\n        }\n\n        // Clear array\n        children.length = 0;\n      }\n\n      // Chaining support\n      return this;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILDREN MANAGEMENT (EXECUTED ON THE CHILD)\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the parent of this element.\n     *\n     * @return {qx.html.Element|null} The parent of this element\n     */\n    getParent() {\n      return this._parent || null;\n    },\n\n    /**\n     * Insert self into the given parent. Normally appends self to the end,\n     * but optionally a position can be defined. With index <code>0</code> it\n     * will be inserted at the begin.\n     *\n     * @param parent {qx.html.Element} The new parent of this element\n     * @param index {Integer?null} Optional position\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertInto(parent, index) {\n      parent._addChildImpl(this);\n\n      if (index == null) {\n        parent._children.push(this);\n      } else {\n        qx.lang.Array.insertAt(this._children, this, index);\n      }\n\n      return this;\n    },\n\n    /**\n     * Insert self before the given (related) element\n     *\n     * @param rel {qx.html.Element} the related element\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertBefore(rel) {\n      var parent = rel._parent;\n\n      parent._addChildImpl(this);\n      qx.lang.Array.insertBefore(parent._children, this, rel);\n\n      return this;\n    },\n\n    /**\n     * Insert self after the given (related) element\n     *\n     * @param rel {qx.html.Element} the related element\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    insertAfter(rel) {\n      var parent = rel._parent;\n\n      parent._addChildImpl(this);\n      qx.lang.Array.insertAfter(parent._children, this, rel);\n\n      return this;\n    },\n\n    /**\n     * Move self to the given index in the current parent.\n     *\n     * @param index {Integer} the index (starts at 0 for the first child)\n     * @return {qx.html.Element} this object (for chaining support)\n     * @throws {Error} when the given element is not child\n     *      of this element.\n     */\n    moveTo(index) {\n      var parent = this._parent;\n\n      parent._moveChildImpl(this);\n\n      var oldIndex = parent._children.indexOf(this);\n\n      if (oldIndex === index) {\n        throw new Error(\"Could not move to same index!\");\n      } else if (oldIndex < index) {\n        index--;\n      }\n\n      qx.lang.Array.removeAt(parent._children, oldIndex);\n      qx.lang.Array.insertAt(parent._children, this, index);\n\n      return this;\n    },\n\n    /**\n     * Move self before the given (related) child.\n     *\n     * @param rel {qx.html.Element} the related child\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    moveBefore(rel) {\n      var parent = this._parent;\n      return this.moveTo(parent._children.indexOf(rel));\n    },\n\n    /**\n     * Move self after the given (related) child.\n     *\n     * @param rel {qx.html.Element} the related child\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    moveAfter(rel) {\n      var parent = this._parent;\n      return this.moveTo(parent._children.indexOf(rel) + 1);\n    },\n\n    /**\n     * Remove self from the current parent.\n     *\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    free() {\n      var parent = this._parent;\n      if (!parent) {\n        throw new Error(\"Has no parent to remove from.\");\n      }\n\n      if (!parent._children) {\n        return this;\n      }\n\n      parent._removeChildImpl(this);\n      qx.lang.Array.remove(parent._children, this);\n\n      return this;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DOM ELEMENT ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the DOM element (if created). Please use this with caution.\n     * It is better to make all changes to the object itself using the public\n     * API rather than to the underlying DOM element.\n     *\n     * @param create {Boolean?} if true, the DOM node will be created if it does\n     * not exist\n     * @return {Element|null} The DOM element node, if available.\n     */\n    getDomElement(create) {\n      if (create && !this._domNode) {\n        this.flush();\n      }\n      return this._domNode || null;\n    },\n\n    /**\n     * Returns the nodeName of the DOM element.\n     *\n     * @return {String} The node name\n     */\n    getNodeName() {\n      return this._nodeName;\n    },\n\n    /**\n     * Sets the nodeName of the DOM element.\n     *\n     * @param name {String} The node name\n     */\n    setNodeName(name) {\n      if (\n        this._domNode &&\n        name.toLowerCase() !== this._nodeName.toLowerCase()\n      ) {\n        throw new Error(\n          \"Cannot change the name of the node after the DOM node has been created\"\n        );\n      }\n      this._nodeName = name;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EXCLUDE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Marks the element as included which means it will be moved into\n     * the DOM again and synced with the internal data representation.\n     *\n     * @return {Node} this object (for chaining support)\n     */\n    include() {\n      if (this._included) {\n        return this;\n      }\n\n      delete this._included;\n\n      if (this._parent) {\n        this._parent._scheduleChildrenUpdate();\n      }\n\n      return this;\n    },\n\n    /**\n     * Marks the element as excluded which means it will be removed\n     * from the DOM and ignored for updates until it gets included again.\n     *\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    exclude() {\n      if (!this._included) {\n        return this;\n      }\n\n      this._included = false;\n\n      if (this._parent) {\n        this._parent._scheduleChildrenUpdate();\n      }\n\n      return this;\n    },\n\n    /**\n     * Whether the element is part of the DOM\n     *\n     * @return {Boolean} Whether the element is part of the DOM.\n     */\n    isIncluded() {\n      return this._included === true;\n    },\n\n    /**\n     * Apply method for visible property\n     */\n    _applyVisible(value) {\n      // Nothing - to be overridden\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Registers a property and the implementations used to read the property value\n     * from the DOM and to set the property value onto the DOM.  This allows the element\n     * to have a simple `setProperty` method that knows how to read and write the value.\n     *\n     * You do not have to specify a getter or a setter - by default the setter will use\n     * `_applyProperty` for backwards compatibility, and there is no getter implementation.\n     *\n     * The functions are called with `this` set to this Element.  The getter takes\n     * the property name as a parameter and is expected to return a value, the setter takes\n     * the property name and value as parameters, and returns nothing.\n     *\n     * @param key {String} the property name\n     * @param getter {Function?} function to read from the DOM\n     * @param setter {Function?} function to copy to the DOM\n     * @param serialize {Function?} function to serialize the value to HTML\n     */\n    registerProperty(key, get, set, serialize) {\n      if (!this._properties) {\n        this._properties = {};\n      }\n      if (this._properties[key]) {\n        this.debug(\n          \"Overridding property \" +\n            key +\n            \" in \" +\n            this +\n            \"[\" +\n            this.classname +\n            \"]\"\n        );\n      }\n      if (!set) {\n        set = qx.lang.Function.bind(function (value, key) {\n          this._applyProperty(key, value);\n        }, this);\n        qx.log.Logger.deprecatedMethodWarning(\n          this._applyProperty,\n          \"The method '_applyProperty' is deprecated.  Please use `registerProperty` instead (property '\" +\n            key +\n            \"' in \" +\n            this.classname +\n            \")\"\n        );\n      }\n      this._properties[key] = {\n        get: get,\n        set: set,\n        serialize: serialize,\n        value: undefined\n      };\n    },\n\n    /**\n     * Applies a special property with the given value.\n     *\n     * This property apply routine can be easily overwritten and\n     * extended by sub classes to add new low level features which\n     * are not easily possible using styles and attributes.\n     *\n     * Note that this implementation is for backwards compatibility and\n     * implementations\n     *\n     * @param name {String} Unique property identifier\n     * @param value {var} Any valid value (depends on the property)\n     * @return {qx.html.Element} this object (for chaining support)\n     * @abstract\n     * @deprecated {6.0} please use `registerProperty` instead\n     */\n    _applyProperty(name, value) {\n      // empty implementation\n    },\n\n    /**\n     * Set up the given property.\n     *\n     * @param key {String} the name of the property\n     * @param value {var} the value\n     * @param direct {Boolean?false} Whether the value should be applied\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    _setProperty(key, value, direct) {\n      if (!this._properties || !this._properties[key]) {\n        this.registerProperty(key, null, null);\n      }\n\n      if (this._properties[key].value == value) {\n        return this;\n      }\n\n      this._properties[key].value = value;\n\n      // Uncreated elements simply copy all data\n      // on creation. We don't need to remember any\n      // jobs. It is a simple full list copy.\n      if (this._domNode) {\n        // Omit queuing in direct mode\n        if (direct) {\n          this._properties[key].set.call(this, value, key);\n          return this;\n        }\n\n        // Dynamically create if needed\n        if (!this._propertyJobs) {\n          this._propertyJobs = {};\n        }\n\n        // Store job info\n        this._propertyJobs[key] = true;\n\n        // Register modification\n        qx.html.Element._modified[this.toHashCode()] = this;\n        qx.html.Element._scheduleFlush(\"element\");\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes the given misc\n     *\n     * @param key {String} the name of the misc\n     * @param direct {Boolean?false} Whether the value should be removed\n     *    directly (without queuing)\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    _removeProperty(key, direct) {\n      return this._setProperty(key, null, direct);\n    },\n\n    /**\n     * Get the value of the given misc.\n     *\n     * @param key {String} name of the misc\n     * @param direct {Boolean?false} Whether the value should be obtained directly (without queuing)\n     * @return {var} the value of the misc\n     */\n    _getProperty(key, direct) {\n      if (!this._properties || !this._properties[key]) {\n        return null;\n      }\n\n      var value = this._properties[key].value;\n      if (this._domNode) {\n        if (direct || value === undefined) {\n          var fn = this._properties[key].get;\n          if (fn) {\n            this._properties[key].value = value = fn.call(this, key);\n          }\n        }\n      }\n\n      return value === undefined || value == null ? null : value;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an event listener to the element.\n     *\n     * @param type {String} Name of the event\n     * @param listener {Function} Function to execute on event\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean ? false} Whether capturing should be enabled\n     * @return {var} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListener(type, listener, self, capture) {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Failed to add event listener for type '\" +\n          type +\n          \"'\" +\n          \" to the target '\" +\n          this +\n          \"': \";\n\n        this.assertString(type, msg + \"Invalid event type.\");\n        this.assertFunction(listener, msg + \"Invalid callback function\");\n\n        if (self !== undefined) {\n          this.assertObject(self, \"Invalid context for callback.\");\n        }\n\n        if (capture !== undefined) {\n          this.assertBoolean(capture, \"Invalid capture flag.\");\n        }\n      }\n\n      const registerDomEvent = () => {\n        if (this._domNode) {\n          return qx.event.Registration.addListener(\n            this._domNode,\n            type,\n            listener,\n            self,\n            capture\n          );\n        }\n\n        if (!this.__eventValues) {\n          this.__eventValues = {};\n        }\n\n        if (capture == null) {\n          capture = false;\n        }\n\n        var unique = qx.event.Manager.getNextUniqueId();\n        var id = type + (capture ? \"|capture|\" : \"|bubble|\") + unique;\n\n        this.__eventValues[id] = {\n          type: type,\n          listener: listener,\n          self: self,\n          capture: capture,\n          unique: unique\n        };\n\n        return id;\n      };\n\n      if (qx.Class.supportsEvent(this, type)) {\n        let id = super.addListener(type, listener, self, capture);\n        id.domEventId = registerDomEvent();\n        return id;\n      }\n\n      return registerDomEvent();\n    },\n\n    /**\n     * Removes an event listener from the element.\n     *\n     * @param type {String} Name of the event\n     * @param listener {Function} Function to execute on event\n     * @param self {Object} Execution context of given function\n     * @param capture {Boolean ? false} Whether capturing should be enabled\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeListener(type, listener, self, capture) {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Failed to remove event listener for type '\" +\n          type +\n          \"'\" +\n          \" from the target '\" +\n          this +\n          \"': \";\n\n        this.assertString(type, msg + \"Invalid event type.\");\n        this.assertFunction(listener, msg + \"Invalid callback function\");\n\n        if (self !== undefined) {\n          this.assertObject(self, \"Invalid context for callback.\");\n        }\n\n        if (capture !== undefined) {\n          this.assertBoolean(capture, \"Invalid capture flag.\");\n        }\n      }\n\n      if (qx.Class.supportsEvent(this, type)) {\n        super.removeListener(type, listener, self, capture);\n      }\n\n      if (this._domNode) {\n        if (\n          listener.$$wrapped_callback &&\n          listener.$$wrapped_callback[type + this.toHashCode()]\n        ) {\n          var callback = listener.$$wrapped_callback[type + this.toHashCode()];\n          delete listener.$$wrapped_callback[type + this.toHashCode()];\n          listener = callback;\n        }\n        qx.event.Registration.removeListener(\n          this._domNode,\n          type,\n          listener,\n          self,\n          capture\n        );\n      } else {\n        var values = this.__eventValues;\n        var entry;\n\n        if (capture == null) {\n          capture = false;\n        }\n\n        for (var key in values) {\n          entry = values[key];\n\n          // Optimized for performance: Testing references first\n          if (\n            entry.listener === listener &&\n            entry.self === self &&\n            entry.capture === capture &&\n            entry.type === type\n          ) {\n            delete values[key];\n            break;\n          }\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes an event listener from an event target by an id returned by\n     * {@link #addListener}\n     *\n     * @param id {var} The id returned by {@link #addListener}\n     * @return {qx.html.Element} this object (for chaining support)\n     */\n    removeListenerById(id) {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      if (id.domEventId) {\n        if (this._domNode) {\n          qx.event.Registration.removeListenerById(\n            this._domNode,\n            id.domEventId\n          );\n        }\n        delete id.domEventId;\n        super.removeListenerById(id);\n      } else {\n        if (this._domNode) {\n          qx.event.Registration.removeListenerById(this._domNode, id);\n        } else {\n          delete this.__eventValues[id];\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Check if there are one or more listeners for an event type.\n     *\n     * @param type {String} name of the event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the object has a listener of the given type.\n     */\n    hasListener(type, capture) {\n      if (this.$$disposed) {\n        return false;\n      }\n\n      if (qx.Class.supportsEvent(this, type)) {\n        let has = super.hasListener(type, capture);\n        if (has) {\n          return true;\n        }\n      }\n\n      if (this._domNode) {\n        if (qx.event.Registration.hasListener(this._domNode, type, capture)) {\n          return true;\n        }\n      } else {\n        var values = this.__eventValues;\n        var entry;\n\n        if (capture == null) {\n          capture = false;\n        }\n\n        for (var key in values) {\n          entry = values[key];\n\n          // Optimized for performance: Testing fast types first\n          if (entry.capture === capture && entry.type === type) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Serializes and returns all event listeners attached to this element\n     * @return {Map[]} an Array containing a map for each listener. The maps\n     * have the following keys:\n     * <ul>\n     *   <li><code>type</code> (String): Event name</li>\n     *   <li><code>handler</code> (Function): Callback function</li>\n     *   <li><code>self</code> (Object): The callback's context</li>\n     *   <li><code>capture</code> (Boolean): If <code>true</code>, the listener is\n     * attached to the capturing phase</li>\n     * </ul>\n     */\n    getListeners() {\n      if (this.$$disposed) {\n        return null;\n      }\n\n      var listeners = [];\n      qx.lang.Array.append(\n        listeners,\n        qx.event.Registration.serializeListeners(this) || []\n      );\n\n      if (this._domNode) {\n        qx.lang.Array.append(\n          listeners,\n          qx.event.Registration.serializeListeners(this._domNode) || []\n        );\n      }\n\n      for (var id in this.__eventValues) {\n        var listenerData = this.__eventValues[id];\n        listeners.push({\n          type: listenerData.type,\n          handler: listenerData.listener,\n          self: listenerData.self,\n          capture: listenerData.capture\n        });\n      }\n\n      return listeners;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  destruct() {\n    var el = this._domNode;\n    if (el) {\n      qx.event.Registration.getManager(el).removeAllListeners(el);\n      el.$$element = \"\";\n      delete el.$$elementObject;\n      el.$$qxObjectHash = \"\";\n      delete el.$$qxObject;\n    }\n\n    if (!qx.core.ObjectRegistry.inShutDown) {\n      var parent = this._parent;\n      if (parent && !parent.$$disposed) {\n        parent.remove(this);\n      }\n    }\n\n    this._disposeArray(\"_children\");\n\n    this._properties =\n      this._propertyJobs =\n      this._domNode =\n      this._parent =\n      this.__eventValues =\n        null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,cAAc,EAAE;IAC9BC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,SAAS,EAAE,CAACT,EAAE,CAACO,IAAI,CAACG,WAAW,CAAC;IAEhC;AACF;AACA;AACA;AACA;AACA;IACEC,SAAS,qBAACC,QAAQ,EAAE;MAClB;MACA,IAAI,CAACC,SAAS,GAAGD,QAAQ;IAC3B,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEE,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,WAAW,uBAACC,OAAO,EAAE;QAOnB,OAAOA,OAAO,CAACC,eAAe;MAChC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,aAAa,yBAACF,OAAO,EAAE;QACrB,IAAIA,OAAO,CAACC,eAAe,EAAE;UAC3B,OAAOD,OAAO,CAACC,eAAe;QAChC;QAEA,IAAIE,IAAI,GAAGnB,EAAE,CAACmB,IAAI,CAACC,OAAO,CAACC,WAAW,EAAE,CAACC,aAAa,CACpDN,OAAO,CAACJ,QAAQ,EAChBI,OAAO,CAACO,UAAU,CACnB;QAEDJ,IAAI,CAACK,OAAO,CAACR,OAAO,CAAC;QACrB,OAAOG,IAAI;MACb;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEM,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE;QACPC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE,SAAS;QAChBC,KAAK,EAAE,eAAe;QACtBC,KA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"
}