{
  "className": "qx.html.Input",
  "packageName": "qx.html",
  "name": "Input",
  "superClass": "qx.html.Element",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0,
        "index": 606
      },
      "end": {
        "line": 261,
        "column": 3,
        "index": 7650
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>A Input wrap any valid HTML input element and make it accessible\n through the normalized qooxdoo element interface.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 44,
        "column": 2,
        "index": 1572
      },
      "end": {
        "line": 63,
        "column": 3,
        "index": 2012
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "type {String} The type of the input field. Valid values are\n   <code>text</code>, <code>textarea</code>, <code>select</code>,\n   <code>checkbox</code>, <code>radio</code>, <code>password</code>,\n   <code>hidden</code>, <code>submit</code>, <code>image</code>,\n   <code>file</code>, <code>search</code>, <code>reset</code>,\n   <code>select</code> and <code>textarea</code>.",
          "paramName": "type",
          "description": " The type of the input field. Valid values are\n   <code>text</code>, <code>textarea</code>, <code>select</code>,\n   <code>checkbox</code>, <code>radio</code>, <code>password</code>,\n   <code>hidden</code>, <code>submit</code>, <code>image</code>,\n   <code>file</code>, <code>search</code>, <code>reset</code>,\n   <code>select</code> and <code>textarea</code>.",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "styles {Map?null} optional map of CSS styles, where the key is the name\n    of the style and the value is the value to use.",
          "paramName": "styles",
          "description": " optional map of CSS styles, where the key is the name\n    of the style and the value is the value to use.",
          "optional": true,
          "defaultValue": "null",
          "type": "Map"
        },
        {
          "name": "@param",
          "body": "attributes {Map?null} optional map of element attributes, where the\n    key is the name of the attribute and the value is the value to use.",
          "paramName": "attributes",
          "description": " optional map of element attributes, where the\n    key is the name of the attribute and the value is the value to use.",
          "optional": true,
          "defaultValue": "null",
          "type": "Map"
        }
      ]
    }
  },
  "members": {
    "__type": {
      "location": {
        "start": {
          "line": 72,
          "column": 4,
          "index": 2216
        },
        "end": {
          "line": 72,
          "column": 16,
          "index": 2228
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__selectable": {
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2262
        },
        "end": {
          "line": 74,
          "column": 22,
          "index": 2280
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "private"
    },
    "__enabled": {
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 2286
        },
        "end": {
          "line": 75,
          "column": 19,
          "index": 2301
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_useNodeImpl": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2501
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2591
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Node",
      "appearsIn": [
        "qx.html.Node"
      ]
    },
    "_createDomElement": {
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2615
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2689
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.html.Element",
      "appearsIn": [
        "qx.html.Element",
        "qx.html.Node"
      ]
    },
    "_setValueProperty": {
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2819
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2938
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation of setter for the \"value\" property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String?} value to set",
            "paramName": "value",
            "description": " value to set",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getValueProperty": {
      "location": {
        "start": {
          "line": 107,
          "column": 4,
          "index": 3067
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 3206
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation of getter for the \"value\" property</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String?} value on the dom",
            "type": "String?",
            "description": " value on the dom"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setWrapProperty": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3335
        },
        "end": {
          "line": 129,
          "column": 5,
          "index": 3906
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementation of setter for the \"wrap\" property</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String?} value to set",
            "paramName": "value",
            "description": " value to set",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setEnabled": {
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 4388
        },
        "end": {
          "line": 160,
          "column": 5,
          "index": 4858
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the input element enabled / disabled.\n Webkit needs a special treatment because the set color of the input\n field changes automatically. Therefore, we use\n <code>-webkit-user-modify: read-only</code> and\n <code>-webkit-user-select: none</code>\n for disabling the fields in webkit. All other browsers use the disabled\n attribute.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} true, if the input element should be enabled.",
            "paramName": "value",
            "description": " true, if the input element should be enabled.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setSelectable": {
      "location": {
        "start": {
          "line": 170,
          "column": 4,
          "index": 5183
        },
        "end": {
          "line": 181,
          "column": 6,
          "index": 5475
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the element is selectable. It uses the qooxdoo attribute\n qxSelectable with the values 'on' or 'off'.\n In webkit, a special css property will be used and checks for the\n enabled state.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean} True, if the element should be selectable.",
            "paramName": "value",
            "description": " True, if the element should be selectable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setValue": {
      "location": {
        "start": {
          "line": 195,
          "column": 4,
          "index": 5851
        },
        "end": {
          "line": 209,
          "column": 5,
          "index": 6251
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the value of the input element.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} the new value",
            "paramName": "value",
            "description": " the new value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Input} This instance for for chaining support.",
            "type": "qx.html.Input",
            "description": " This instance for for chaining support."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getValue": {
      "location": {
        "start": {
          "line": 216,
          "column": 4,
          "index": 6364
        },
        "end": {
          "line": 224,
          "column": 5,
          "index": 6549
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the current value.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The element's current value.",
            "type": "String",
            "description": " The element's current value."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setWrap": {
      "location": {
        "start": {
          "line": 236,
          "column": 4,
          "index": 6970
        },
        "end": {
          "line": 244,
          "column": 5,
          "index": 7203
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the text wrap behavior of a text area element.\n This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "wrap {Boolean} Whether to turn text wrap on or off.",
            "paramName": "wrap",
            "description": " Whether to turn text wrap on or off.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "direct {Boolean?false} Whether the execution should be made\n  directly when possible",
            "paramName": "direct",
            "description": " Whether the execution should be made\n  directly when possible",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.html.Input} This instance for for chaining support.",
            "type": "qx.html.Input",
            "description": " This instance for for chaining support."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getWrap": {
      "location": {
        "start": {
          "line": 253,
          "column": 4,
          "index": 7448
        },
        "end": {
          "line": 259,
          "column": 5,
          "index": 7642
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Gets the text wrap behavior of a text area element.\n This property uses the style property \"wrap\" (IE) respectively \"whiteSpace\"</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether wrapping is enabled or disabled.",
            "type": "Boolean",
            "description": " Whether wrapping is enabled or disabled."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getVisible": {
      "type": "function",
      "name": "getVisible",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visible</code>.\n\nFor further details take a look at the property definition: {@link #visible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for visible"
          }
        ]
      }
    },
    "isVisible": {
      "type": "function",
      "name": "isVisible",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>visible</code>.\n\nFor further details take a look at the property definition: {@link #visible}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for visible"
          }
        ]
      }
    },
    "setVisible": {
      "type": "function",
      "name": "setVisible",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>visible</code>.\n\nFor further details take a look at the property definition: {@link #visible}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for visible"
          }
        ]
      }
    },
    "resetVisible": {
      "type": "function",
      "name": "resetVisible",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>visible</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #visible}."
          }
        ]
      }
    },
    "getCssClass": {
      "type": "function",
      "name": "getCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>cssClass</code>.\n\nFor further details take a look at the property definition: {@link #cssClass}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for cssClass"
          }
        ]
      }
    },
    "setCssClass": {
      "type": "function",
      "name": "setCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>cssClass</code>.\n\nFor further details take a look at the property definition: {@link #cssClass}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for cssClass"
          }
        ]
      }
    },
    "resetCssClass": {
      "type": "function",
      "name": "resetCssClass",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.html.Element",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>cssClass</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #cssClass}."
          }
        ]
      }
    }
  },
  "descendants": []
}