{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "canDispatchEvent",
    "target",
    "event",
    "type",
    "assertInstance",
    "Event",
    "assertString",
    "dispatchEvent",
    "IEventDispatcher"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/IEventDispatcher.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * All event dispatchers must implement this interface. Event dispatchers must\r\n * register themselves at the event Manager using\r\n * {@link qx.event.Registration#addDispatcher}.\r\n */\r\nqx.Interface.define(\"qx.event.IEventDispatcher\", {\r\n  members: {\r\n    /**\r\n     * Whether the dispatcher is responsible for the this event.\r\n     *\r\n     * @param target {Element|Event} The event dispatch target\r\n     * @param event {qx.event.type.Event} The event object\r\n     * @param type {String} the event type\r\n     * @return {Boolean} Whether the event dispatcher is responsible for the this event\r\n     */\r\n    canDispatchEvent(target, event, type) {\r\n      this.assertInstance(event, qx.event.type.Event);\r\n      this.assertString(type);\r\n    },\r\n\r\n    /**\r\n     * This function dispatches the event to the event listeners.\r\n     *\r\n     * @param target {Element|Event} The event dispatch target\r\n     * @param event {qx.event.type.Event} event object to dispatch\r\n     * @param type {String} the event type\r\n     * @return {qx.Promise?} a promise, if one or more of the event handlers returned a promise\r\n     */\r\n    dispatchEvent(target, event, type) {\r\n      this.assertInstance(event, qx.event.type.Event);\r\n      this.assertString(type);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,2BAA2B,EAAE;IAC/CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,gBAAgB,WAAAA,iBAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE;QACpC,IAAI,CAACC,cAAc,CAACF,KAAK,EAAET,EAAE,CAACS,KAAK,CAACC,IAAI,CAACE,KAAK,CAAC;QAC/C,IAAI,CAACC,YAAY,CAACH,IAAI,CAAC;MACzB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACII,aAAa,WAAAA,cAACN,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE;QACjC,IAAI,CAACC,cAAc,CAACF,KAAK,EAAET,EAAE,CAACS,KAAK,CAACC,IAAI,CAACE,KAAK,CAAC;QAC/C,IAAI,CAACC,YAAY,CAACH,IAAI,CAAC;MACzB;IACF;EACF,CAAC,CAAC;EAnDFV,EAAE,CAACS,KAAK,CAACM,gBAAgB,CAACZ,aAAa,GAAGA,aAAa;AAAC"
}