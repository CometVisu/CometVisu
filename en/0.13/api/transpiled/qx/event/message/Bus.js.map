{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "statics",
    "getSubscriptions",
    "getInstance",
    "subscribe",
    "topic",
    "subscriber",
    "context",
    "apply",
    "arguments",
    "subscribeOnce",
    "checkSubscription",
    "unsubscribe",
    "dispatch",
    "message",
    "dispatchByName",
    "name",
    "data",
    "construct",
    "constructor",
    "call",
    "__subscriptions",
    "members",
    "Error",
    "regex",
    "RegExp",
    "toString",
    "sub",
    "warn",
    "push",
    "that",
    "modified_subscriber",
    "length",
    "i",
    "subscrList",
    "subscription",
    "splice",
    "msgName",
    "getName",
    "dispatched",
    "len",
    "substr",
    "__callSubscribers",
    "match",
    "event",
    "Message",
    "ret",
    "dispose",
    "removeAllSubscriptions",
    "subscriptions",
    "key",
    "__P_229_1",
    "subscribers",
    "slice",
    "isDisposed",
    "Bus"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/message/Bus.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007 Christian Boulanger\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Boulanger (cboulanger)\r\n     * Sebastian Werner (wpbasti)\r\n     * Christian Hagendorn (chris_schmidt)\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A simple message bus singleton.\r\n * The message bus registers subscriptions to topics and notifies subscribers when\r\n * a matching message is dispatched. A topic acts as a filter to select only those\r\n * messages which match the filter. It can be the name of a message, which can\r\n * terminated with a trailing `*` as a wildcard, or a regular expression.\r\n */\r\nqx.Class.define(\"qx.event.message.Bus\", {\r\n  type: \"singleton\",\r\n\r\n  extend: qx.core.Object,\r\n\r\n  statics: {\r\n    /**\r\n     * Shorthand method for {@link qx.event.message.Bus.getSubscription}\r\n     * @return {Object}\r\n     */\r\n    getSubscriptions() {\r\n      return this.getInstance().getSubscriptions();\r\n    },\r\n\r\n    /**\r\n     * Shorthand method for {@link qx.event.message.Bus.subscribe}\r\n     * @param topic {String|RegExp}\r\n     * @param subscriber {Function} Message handler function\r\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\r\n     * @return {Boolean} Success\r\n     */\r\n    subscribe(topic, subscriber, context) {\r\n      return this.getInstance().subscribe.apply(this.getInstance(), arguments);\r\n    },\r\n\r\n    /**\r\n     * Shorthand method for {@link qx.event.message.Bus.subscribeOnce}\r\n     * @param topic {String|RegExp}\r\n     * @param subscriber {Function} Message handler function\r\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\r\n     * @return {Boolean} Success\r\n     */\r\n    subscribeOnce(topic, subscriber, context) {\r\n      return this.getInstance().subscribeOnce.apply(\r\n        this.getInstance(),\r\n        arguments\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Shorthand method for {@link qx.event.message.Bus.checkSubscription}\r\n     * @param topic {String|RegExp} The topic that has been used when subscribing\r\n     * @param subscriber {Function} Message handler function\r\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\r\n     * @return {Boolean} Whether a subscription was removed\r\n     */\r\n    checkSubscription(topic, subscriber, context) {\r\n      return this.getInstance().checkSubscription.apply(\r\n        this.getInstance(),\r\n        arguments\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Shorthand method for {@link qx.event.message.Bus.unsubscribe}\r\n     * @param topic {String|RegExp} The topic that has been used when subscribing\r\n     * @param subscriber {Function} Message handler function\r\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\r\n     * @return {Boolean} Whether a subscription was removed\r\n     */\r\n    unsubscribe(topic, subscriber, context) {\r\n      return this.getInstance().unsubscribe.apply(\r\n        this.getInstance(),\r\n        arguments\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Shorthand method for {@link qx.event.message.Bus.dispatch}\r\n     * @param message {qx.event.message.Message} Message which is being dispatched\r\n     * @return {Boolean} If the message could be dispatched\r\n     */\r\n    dispatch(message) {\r\n      return this.getInstance().dispatch.apply(this.getInstance(), arguments);\r\n    },\r\n\r\n    /**\r\n     * Shorthand method for {@link qx.event.message.Bus.dispatchByName}\r\n     * @param name {String} name of the message\r\n     * @param data {var} Any type of data to attach\r\n     * @return {Boolean} If the message was dispatched\r\n     */\r\n    dispatchByName(name, data) {\r\n      return this.getInstance().dispatchByName.apply(\r\n        this.getInstance(),\r\n        arguments\r\n      );\r\n    }\r\n  },\r\n\r\n  /**\r\n   * constructor\r\n   */\r\n  construct() {\r\n    super();\r\n    this.__subscriptions = {};\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * Subscriptions cache\r\n     * @var {Object}\r\n     */\r\n    __subscriptions: null,\r\n\r\n    /**\r\n     * Returns the map of message subscriptions with registered subscriptions. The key is\r\n     * the topic and the value is a map with <code>{subscriber:\r\n     * {Function}, context: {Object|null}}</code>.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    getSubscriptions() {\r\n      return this.__subscriptions;\r\n    },\r\n\r\n    /**\r\n     * Subscribes to a topic\r\n     *\r\n     * @param topic {String|RegExp} Either a string, which can be\r\n     * terminated with a trailing `*` as a wildcard to match all message\r\n     * names that start with the prefix, or a regular expression\r\n     * object, which the message name has to match. If you use regular\r\n     * expressions, you cannot use message names that start and end\r\n     * with a slash (\"/\") at the same time, because regular expressions\r\n     * are converted to their string representation when stored.\r\n     * @param subscriber {Function} Message handler function\r\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\r\n     * @return {Boolean} Success\r\n     */\r\n    subscribe(topic, subscriber, context) {\r\n      if (!topic || typeof subscriber != \"function\") {\r\n        throw new Error(\"Invalid parameters! \" + [topic, subscriber, context]); // since v6.0.0\r\n      }\r\n\r\n      // handle regexes\r\n      var regex = topic instanceof RegExp ? topic : null;\r\n      topic = topic.toString();\r\n\r\n      var sub = this.getSubscriptions();\r\n\r\n      if (this.checkSubscription(topic)) {\r\n        if (this.checkSubscription(topic, subscriber, context)) {\r\n          this.warn(\"Object method already subscribed to \" + topic);\r\n          return false;\r\n        }\r\n\r\n        // add a subscription\r\n        sub[topic].push({\r\n          regex: regex,\r\n          subscriber: subscriber,\r\n          context: context || null\r\n        });\r\n\r\n        return true;\r\n      } else {\r\n        // create a subscription\r\n        sub[topic] = [\r\n          {\r\n            regex: regex,\r\n            subscriber: subscriber,\r\n            context: context || null\r\n          }\r\n        ];\r\n\r\n        return true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Subscribes to a topic just for one dispatch and automatically unsubscribes\r\n     * after executing the message handler. This subscription cannot be unsubscribed\r\n     * from after it has been registered.\r\n     *\r\n     * @param topic {String|RegExp} Topic to subscribe to. see {@link qx.event.message.Bus#subscribe}\r\n     * for details\r\n     * @param subscriber {Function} Message handler function\r\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\r\n     * @return {Boolean} Success\r\n     */\r\n\r\n    subscribeOnce(topic, subscriber, context) {\r\n      var that = this;\r\n      var modified_subscriber = function (message) {\r\n        subscriber.call(context, message);\r\n        that.unsubscribe(topic, modified_subscriber, context);\r\n      };\r\n      return this.subscribe(topic, modified_subscriber, context);\r\n    },\r\n\r\n    /**\r\n     * Checks if subscription is already present. If you supply\r\n     * the message handler function, match only this exact subscription,\r\n     * otherwise any topic subscription will match.\r\n     *\r\n     * @param topic {String|RegExp} Either a string, which can be truncated by `*`\r\n     * to match all message names that start with the prefix, or a regular expression\r\n     * object, which the message name has to match.\r\n     * @param subscriber {Function} Message handler function\r\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\r\n     * @return {Boolean} Whether a subscription exists for the topic\r\n     */\r\n    checkSubscription(topic, subscriber, context) {\r\n      var topic = topic.toString();\r\n      var sub = this.getSubscriptions();\r\n\r\n      if (!sub[topic] || sub[topic].length === 0) {\r\n        return false;\r\n      }\r\n\r\n      if (subscriber) {\r\n        for (var i = 0; i < sub[topic].length; i++) {\r\n          if (\r\n            sub[topic][i].subscriber === subscriber &&\r\n            sub[topic][i].context === (context || null)\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Unsubscribe from a topic.\r\n     *\r\n     * If a \"wildcard\" topic was subscribed to with a trailing asterisk,\r\n     * because the subscriber wanted to receive messages for any topic\r\n     * with the given prefix, that same \"wildcard\" topic should be used to\r\n     * unsubscribe. It is not possible to unsubscribe using any topic other\r\n     * than one exactly matching one that has previously been subscribed to.\r\n     *\r\n     * If you supply the callback function and execution context, only this\r\n     * exact subscription is removed. Otherwise, all subscriptions to this topic\r\n     * will be removed.\r\n     *\r\n     * @param topic {String|RegExp} The topic that has been used when subscribing\r\n     * @param subscriber {Function} Message handler function\r\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\r\n     * @return {Boolean} Whether a subscription was removed\r\n     */\r\n    unsubscribe(topic, subscriber, context) {\r\n      var topic = topic.toString();\r\n      var sub = this.getSubscriptions();\r\n      var subscrList = sub[topic];\r\n      if (subscrList) {\r\n        if (!subscriber) {\r\n          sub[topic] = null;\r\n          delete sub[topic];\r\n          return true;\r\n        } else {\r\n          if (!context) {\r\n            context = null;\r\n          }\r\n          var i = subscrList.length;\r\n          var subscription;\r\n          do {\r\n            subscription = subscrList[--i];\r\n            if (\r\n              subscription.subscriber === subscriber &&\r\n              subscription.context === context\r\n            ) {\r\n              subscrList.splice(i, 1);\r\n              if (subscrList.length === 0) {\r\n                sub[topic] = null;\r\n                delete sub[topic];\r\n              }\r\n              return true;\r\n            }\r\n          } while (i);\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Dispatch message, which calls subscribers\r\n     *\r\n     * @param message {qx.event.message.Message} Message which is being dispatched\r\n     * @return {Boolean} If the message could be dispatched, i.e. if subscribers\r\n     * exist which have received the message\r\n     */\r\n    dispatch(message) {\r\n      var sub = this.getSubscriptions();\r\n      var msgName = message.getName();\r\n      var dispatched = false;\r\n\r\n      for (var topic in sub) {\r\n        var len = topic.length;\r\n        if (topic[len - 1] === \"*\") {\r\n          // use of wildcard, only allowed as \"*\" or at the end of the topic\r\n          if (\r\n            len === 1 ||\r\n            topic.substr(0, len - 2) === msgName.substr(0, len - 2)\r\n          ) {\r\n            this.__callSubscribers(sub[topic], message);\r\n            dispatched = true;\r\n          }\r\n        } else if (sub[topic][0].regex) {\r\n          // regular expression\r\n          if (message.getName().match(sub[topic][0].regex)) {\r\n            this.__callSubscribers(sub[topic], message);\r\n            dispatched = true;\r\n          }\r\n        } else if (topic === msgName) {\r\n          // exact match\r\n          this.__callSubscribers(sub[topic], message);\r\n          dispatched = true;\r\n        }\r\n      }\r\n      return dispatched;\r\n    },\r\n\r\n    /**\r\n     * Dispatches a new message by supplying the name of the\r\n     * message and its data.\r\n     *\r\n     * @param name {String} name of the message\r\n     * @param data {var} Any type of data to attach\r\n     * @return {Boolean} If the message was dispatched\r\n     */\r\n    dispatchByName(name, data) {\r\n      var message = new qx.event.message.Message(name, data);\r\n\r\n      // Dispatch the message\r\n      var ret = this.dispatch(message);\r\n\r\n      // We instantiated this message, so it's our responsibility to dispose it.\r\n      message.dispose();\r\n      message = null;\r\n\r\n      // Let 'em know whether this message was dispatched to any subscribers.\r\n      return ret;\r\n    },\r\n\r\n    /**\r\n     * Removes all subscriptions\r\n     */\r\n    removeAllSubscriptions() {\r\n      var subscriptions = this.getSubscriptions();\r\n      for (var key in subscriptions) {\r\n        delete subscriptions[key];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Call subscribers with passed message.\r\n     *\r\n     * Each currently-subscribed subscriber function will be called in\r\n     * turn. Any requests to unsubscribe a subscriber from the list, while\r\n     * processing the currently-subscribed subscriber functions, will take\r\n     * effect after all currently-subscribed subscriber functions have been\r\n     * processed.\r\n     *\r\n     * @param subscribers {Array} subscribers to call\r\n     * @param message {qx.event.message.Message} message for subscribers\r\n     */\r\n    __callSubscribers(subscribers, message) {\r\n      // (Shallow) clone the subscribers array in case one of them alters the\r\n      // list, e.g., by unsubscribing\r\n      subscribers = subscribers.slice();\r\n\r\n      for (var i = 0; i < subscribers.length; i++) {\r\n        var subscriber = subscribers[i].subscriber;\r\n        var context = subscribers[i].context;\r\n\r\n        // call topic subscriber\r\n        if (context && context.isDisposed) {\r\n          if (context.isDisposed()) {\r\n            subscribers.splice(i, 1);\r\n            i--;\r\n          } else {\r\n            subscriber.call(context, message);\r\n          }\r\n        } else {\r\n          subscriber.call(context, message);\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}