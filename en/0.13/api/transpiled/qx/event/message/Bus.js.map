{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "statics",
    "getSubscriptions",
    "getInstance",
    "subscribe",
    "topic",
    "subscriber",
    "context",
    "apply",
    "arguments",
    "subscribeOnce",
    "checkSubscription",
    "unsubscribe",
    "dispatch",
    "message",
    "dispatchByName",
    "name",
    "data",
    "construct",
    "__subscriptions",
    "members",
    "Error",
    "regex",
    "RegExp",
    "toString",
    "sub",
    "warn",
    "push",
    "that",
    "modified_subscriber",
    "call",
    "length",
    "i",
    "subscrList",
    "subscription",
    "splice",
    "msgName",
    "getName",
    "dispatched",
    "len",
    "substr",
    "__callSubscribers",
    "match",
    "event",
    "Message",
    "ret",
    "dispose",
    "removeAllSubscriptions",
    "subscriptions",
    "key",
    "subscribers",
    "slice",
    "isDisposed",
    "Bus"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/message/Bus.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n     * Sebastian Werner (wpbasti)\n     * Christian Hagendorn (chris_schmidt)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A simple message bus singleton.\n * The message bus registers subscriptions to topics and notifies subscribers when\n * a matching message is dispatched. A topic acts as a filter to select only those\n * messages which match the filter. It can be the name of a message, which can\n * terminated with a trailing `*` as a wildcard, or a regular expression.\n */\nqx.Class.define(\"qx.event.message.Bus\", {\n  type: \"singleton\",\n\n  extend: qx.core.Object,\n\n  statics: {\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.getSubscription}\n     * @return {Object}\n     */\n    getSubscriptions() {\n      return this.getInstance().getSubscriptions();\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.subscribe}\n     * @param topic {String|RegExp}\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Success\n     */\n    subscribe(topic, subscriber, context) {\n      return this.getInstance().subscribe.apply(this.getInstance(), arguments);\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.subscribeOnce}\n     * @param topic {String|RegExp}\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Success\n     */\n    subscribeOnce(topic, subscriber, context) {\n      return this.getInstance().subscribeOnce.apply(\n        this.getInstance(),\n        arguments\n      );\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.checkSubscription}\n     * @param topic {String|RegExp} The topic that has been used when subscribing\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Whether a subscription was removed\n     */\n    checkSubscription(topic, subscriber, context) {\n      return this.getInstance().checkSubscription.apply(\n        this.getInstance(),\n        arguments\n      );\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.unsubscribe}\n     * @param topic {String|RegExp} The topic that has been used when subscribing\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Whether a subscription was removed\n     */\n    unsubscribe(topic, subscriber, context) {\n      return this.getInstance().unsubscribe.apply(\n        this.getInstance(),\n        arguments\n      );\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.dispatch}\n     * @param message {qx.event.message.Message} Message which is being dispatched\n     * @return {Boolean} If the message could be dispatched\n     */\n    dispatch(message) {\n      return this.getInstance().dispatch.apply(this.getInstance(), arguments);\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.dispatchByName}\n     * @param name {String} name of the message\n     * @param data {var} Any type of data to attach\n     * @return {Boolean} If the message was dispatched\n     */\n    dispatchByName(name, data) {\n      return this.getInstance().dispatchByName.apply(\n        this.getInstance(),\n        arguments\n      );\n    }\n  },\n\n  /**\n   * constructor\n   */\n  construct() {\n    super();\n    this.__subscriptions = {};\n  },\n\n  members: {\n    /**\n     * Subscriptions cache\n     * @var {Object}\n     */\n    __subscriptions: null,\n\n    /**\n     * Returns the map of message subscriptions with registered subscriptions. The key is\n     * the topic and the value is a map with <code>{subscriber:\n     * {Function}, context: {Object|null}}</code>.\n     *\n     * @return {Object}\n     */\n    getSubscriptions() {\n      return this.__subscriptions;\n    },\n\n    /**\n     * Subscribes to a topic\n     *\n     * @param topic {String|RegExp} Either a string, which can be\n     * terminated with a trailing `*` as a wildcard to match all message\n     * names that start with the prefix, or a regular expression\n     * object, which the message name has to match. If you use regular\n     * expressions, you cannot use message names that start and end\n     * with a slash (\"/\") at the same time, because regular expressions\n     * are converted to their string representation when stored.\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Success\n     */\n    subscribe(topic, subscriber, context) {\n      if (!topic || typeof subscriber != \"function\") {\n        throw new Error(\"Invalid parameters! \" + [topic, subscriber, context]); // since v6.0.0\n      }\n\n      // handle regexes\n      var regex = topic instanceof RegExp ? topic : null;\n      topic = topic.toString();\n\n      var sub = this.getSubscriptions();\n\n      if (this.checkSubscription(topic)) {\n        if (this.checkSubscription(topic, subscriber, context)) {\n          this.warn(\"Object method already subscribed to \" + topic);\n          return false;\n        }\n\n        // add a subscription\n        sub[topic].push({\n          regex: regex,\n          subscriber: subscriber,\n          context: context || null\n        });\n\n        return true;\n      } else {\n        // create a subscription\n        sub[topic] = [\n          {\n            regex: regex,\n            subscriber: subscriber,\n            context: context || null\n          }\n        ];\n\n        return true;\n      }\n    },\n\n    /**\n     * Subscribes to a topic just for one dispatch and automatically unsubscribes\n     * after executing the message handler. This subscription cannot be unsubscribed\n     * from after it has been registered.\n     *\n     * @param topic {String|RegExp} Topic to subscribe to. see {@link qx.event.message.Bus#subscribe}\n     * for details\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Success\n     */\n\n    subscribeOnce(topic, subscriber, context) {\n      var that = this;\n      var modified_subscriber = function (message) {\n        subscriber.call(context, message);\n        that.unsubscribe(topic, modified_subscriber, context);\n      };\n      return this.subscribe(topic, modified_subscriber, context);\n    },\n\n    /**\n     * Checks if subscription is already present. If you supply\n     * the message handler function, match only this exact subscription,\n     * otherwise any topic subscription will match.\n     *\n     * @param topic {String|RegExp} Either a string, which can be truncated by `*`\n     * to match all message names that start with the prefix, or a regular expression\n     * object, which the message name has to match.\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Whether a subscription exists for the topic\n     */\n    checkSubscription(topic, subscriber, context) {\n      var topic = topic.toString();\n      var sub = this.getSubscriptions();\n\n      if (!sub[topic] || sub[topic].length === 0) {\n        return false;\n      }\n\n      if (subscriber) {\n        for (var i = 0; i < sub[topic].length; i++) {\n          if (\n            sub[topic][i].subscriber === subscriber &&\n            sub[topic][i].context === (context || null)\n          ) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      return true;\n    },\n\n    /**\n     * Unsubscribe from a topic.\n     *\n     * If a \"wildcard\" topic was subscribed to with a trailing asterisk,\n     * because the subscriber wanted to receive messages for any topic\n     * with the given prefix, that same \"wildcard\" topic should be used to\n     * unsubscribe. It is not possible to unsubscribe using any topic other\n     * than one exactly matching one that has previously been subscribed to.\n     *\n     * If you supply the callback function and execution context, only this\n     * exact subscription is removed. Otherwise, all subscriptions to this topic\n     * will be removed.\n     *\n     * @param topic {String|RegExp} The topic that has been used when subscribing\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Whether a subscription was removed\n     */\n    unsubscribe(topic, subscriber, context) {\n      var topic = topic.toString();\n      var sub = this.getSubscriptions();\n      var subscrList = sub[topic];\n      if (subscrList) {\n        if (!subscriber) {\n          sub[topic] = null;\n          delete sub[topic];\n          return true;\n        } else {\n          if (!context) {\n            context = null;\n          }\n          var i = subscrList.length;\n          var subscription;\n          do {\n            subscription = subscrList[--i];\n            if (\n              subscription.subscriber === subscriber &&\n              subscription.context === context\n            ) {\n              subscrList.splice(i, 1);\n              if (subscrList.length === 0) {\n                sub[topic] = null;\n                delete sub[topic];\n              }\n              return true;\n            }\n          } while (i);\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Dispatch message, which calls subscribers\n     *\n     * @param message {qx.event.message.Message} Message which is being dispatched\n     * @return {Boolean} If the message could be dispatched, i.e. if subscribers\n     * exist which have received the message\n     */\n    dispatch(message) {\n      var sub = this.getSubscriptions();\n      var msgName = message.getName();\n      var dispatched = false;\n\n      for (var topic in sub) {\n        var len = topic.length;\n        if (topic[len - 1] === \"*\") {\n          // use of wildcard, only allowed as \"*\" or at the end of the topic\n          if (\n            len === 1 ||\n            topic.substr(0, len - 2) === msgName.substr(0, len - 2)\n          ) {\n            this.__callSubscribers(sub[topic], message);\n            dispatched = true;\n          }\n        } else if (sub[topic][0].regex) {\n          // regular expression\n          if (message.getName().match(sub[topic][0].regex)) {\n            this.__callSubscribers(sub[topic], message);\n            dispatched = true;\n          }\n        } else if (topic === msgName) {\n          // exact match\n          this.__callSubscribers(sub[topic], message);\n          dispatched = true;\n        }\n      }\n      return dispatched;\n    },\n\n    /**\n     * Dispatches a new message by supplying the name of the\n     * message and its data.\n     *\n     * @param name {String} name of the message\n     * @param data {var} Any type of data to attach\n     * @return {Boolean} If the message was dispatched\n     */\n    dispatchByName(name, data) {\n      var message = new qx.event.message.Message(name, data);\n\n      // Dispatch the message\n      var ret = this.dispatch(message);\n\n      // We instantiated this message, so it's our responsibility to dispose it.\n      message.dispose();\n      message = null;\n\n      // Let 'em know whether this message was dispatched to any subscribers.\n      return ret;\n    },\n\n    /**\n     * Removes all subscriptions\n     */\n    removeAllSubscriptions() {\n      var subscriptions = this.getSubscriptions();\n      for (var key in subscriptions) {\n        delete subscriptions[key];\n      }\n    },\n\n    /**\n     * Call subscribers with passed message.\n     *\n     * Each currently-subscribed subscriber function will be called in\n     * turn. Any requests to unsubscribe a subscriber from the list, while\n     * processing the currently-subscribed subscriber functions, will take\n     * effect after all currently-subscribed subscriber functions have been\n     * processed.\n     *\n     * @param subscribers {Array} subscribers to call\n     * @param message {qx.event.message.Message} message for subscribers\n     */\n    __callSubscribers(subscribers, message) {\n      // (Shallow) clone the subscribers array in case one of them alters the\n      // list, e.g., by unsubscribing\n      subscribers = subscribers.slice();\n\n      for (var i = 0; i < subscribers.length; i++) {\n        var subscriber = subscribers[i].subscriber;\n        var context = subscribers[i].context;\n\n        // call topic subscriber\n        if (context && context.isDisposed) {\n          if (context.isDisposed()) {\n            subscribers.splice(i, 1);\n            i--;\n          } else {\n            subscriber.call(context, message);\n          }\n        } else {\n          subscriber.call(context, message);\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}