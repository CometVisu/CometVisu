{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "statics",
    "getSubscriptions",
    "getInstance",
    "subscribe",
    "topic",
    "subscriber",
    "context",
    "apply",
    "arguments",
    "subscribeOnce",
    "checkSubscription",
    "unsubscribe",
    "dispatch",
    "message",
    "dispatchByName",
    "name",
    "data",
    "construct",
    "__subscriptions",
    "members",
    "Error",
    "regex",
    "RegExp",
    "toString",
    "sub",
    "warn",
    "push",
    "that",
    "modified_subscriber",
    "call",
    "length",
    "i",
    "subscrList",
    "subscription",
    "splice",
    "msgName",
    "getName",
    "dispatched",
    "len",
    "substr",
    "__callSubscribers",
    "match",
    "event",
    "Message",
    "ret",
    "dispose",
    "removeAllSubscriptions",
    "subscriptions",
    "key",
    "subscribers",
    "slice",
    "isDisposed",
    "Bus"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/message/Bus.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n     * Sebastian Werner (wpbasti)\n     * Christian Hagendorn (chris_schmidt)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A simple message bus singleton.\n * The message bus registers subscriptions to topics and notifies subscribers when\n * a matching message is dispatched. A topic acts as a filter to select only those\n * messages which match the filter. It can be the name of a message, which can\n * terminated with a trailing `*` as a wildcard, or a regular expression.\n */\nqx.Class.define(\"qx.event.message.Bus\", {\n  type: \"singleton\",\n\n  extend: qx.core.Object,\n\n  statics: {\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.getSubscription}\n     * @return {Object}\n     */\n    getSubscriptions() {\n      return this.getInstance().getSubscriptions();\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.subscribe}\n     * @param topic {String|RegExp}\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Success\n     */\n    subscribe(topic, subscriber, context) {\n      return this.getInstance().subscribe.apply(this.getInstance(), arguments);\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.subscribeOnce}\n     * @param topic {String|RegExp}\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Success\n     */\n    subscribeOnce(topic, subscriber, context) {\n      return this.getInstance().subscribeOnce.apply(\n        this.getInstance(),\n        arguments\n      );\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.checkSubscription}\n     * @param topic {String|RegExp} The topic that has been used when subscribing\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Whether a subscription was removed\n     */\n    checkSubscription(topic, subscriber, context) {\n      return this.getInstance().checkSubscription.apply(\n        this.getInstance(),\n        arguments\n      );\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.unsubscribe}\n     * @param topic {String|RegExp} The topic that has been used when subscribing\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Whether a subscription was removed\n     */\n    unsubscribe(topic, subscriber, context) {\n      return this.getInstance().unsubscribe.apply(\n        this.getInstance(),\n        arguments\n      );\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.dispatch}\n     * @param message {qx.event.message.Message} Message which is being dispatched\n     * @return {Boolean} If the message could be dispatched\n     */\n    dispatch(message) {\n      return this.getInstance().dispatch.apply(this.getInstance(), arguments);\n    },\n\n    /**\n     * Shorthand method for {@link qx.event.message.Bus.dispatchByName}\n     * @param name {String} name of the message\n     * @param data {var} Any type of data to attach\n     * @return {Boolean} If the message was dispatched\n     */\n    dispatchByName(name, data) {\n      return this.getInstance().dispatchByName.apply(\n        this.getInstance(),\n        arguments\n      );\n    }\n  },\n\n  /**\n   * constructor\n   */\n  construct() {\n    super();\n    this.__subscriptions = {};\n  },\n\n  members: {\n    /**\n     * Subscriptions cache\n     * @var {Object}\n     */\n    __subscriptions: null,\n\n    /**\n     * Returns the map of message subscriptions with registered subscriptions. The key is\n     * the topic and the value is a map with <code>{subscriber:\n     * {Function}, context: {Object|null}}</code>.\n     *\n     * @return {Object}\n     */\n    getSubscriptions() {\n      return this.__subscriptions;\n    },\n\n    /**\n     * Subscribes to a topic\n     *\n     * @param topic {String|RegExp} Either a string, which can be\n     * terminated with a trailing `*` as a wildcard to match all message\n     * names that start with the prefix, or a regular expression\n     * object, which the message name has to match. If you use regular\n     * expressions, you cannot use message names that start and end\n     * with a slash (\"/\") at the same time, because regular expressions\n     * are converted to their string representation when stored.\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Success\n     */\n    subscribe(topic, subscriber, context) {\n      if (!topic || typeof subscriber != \"function\") {\n        throw new Error(\"Invalid parameters! \" + [topic, subscriber, context]); // since v6.0.0\n      }\n\n      // handle regexes\n      var regex = topic instanceof RegExp ? topic : null;\n      topic = topic.toString();\n\n      var sub = this.getSubscriptions();\n\n      if (this.checkSubscription(topic)) {\n        if (this.checkSubscription(topic, subscriber, context)) {\n          this.warn(\"Object method already subscribed to \" + topic);\n          return false;\n        }\n\n        // add a subscription\n        sub[topic].push({\n          regex: regex,\n          subscriber: subscriber,\n          context: context || null\n        });\n\n        return true;\n      } else {\n        // create a subscription\n        sub[topic] = [\n          {\n            regex: regex,\n            subscriber: subscriber,\n            context: context || null\n          }\n        ];\n\n        return true;\n      }\n    },\n\n    /**\n     * Subscribes to a topic just for one dispatch and automatically unsubscribes\n     * after executing the message handler. This subscription cannot be unsubscribed\n     * from after it has been registered.\n     *\n     * @param topic {String|RegExp} Topic to subscribe to. see {@link qx.event.message.Bus#subscribe}\n     * for details\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Success\n     */\n\n    subscribeOnce(topic, subscriber, context) {\n      var that = this;\n      var modified_subscriber = function (message) {\n        subscriber.call(context, message);\n        that.unsubscribe(topic, modified_subscriber, context);\n      };\n      return this.subscribe(topic, modified_subscriber, context);\n    },\n\n    /**\n     * Checks if subscription is already present. If you supply\n     * the message handler function, match only this exact subscription,\n     * otherwise any topic subscription will match.\n     *\n     * @param topic {String|RegExp} Either a string, which can be truncated by `*`\n     * to match all message names that start with the prefix, or a regular expression\n     * object, which the message name has to match.\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Whether a subscription exists for the topic\n     */\n    checkSubscription(topic, subscriber, context) {\n      var topic = topic.toString();\n      var sub = this.getSubscriptions();\n\n      if (!sub[topic] || sub[topic].length === 0) {\n        return false;\n      }\n\n      if (subscriber) {\n        for (var i = 0; i < sub[topic].length; i++) {\n          if (\n            sub[topic][i].subscriber === subscriber &&\n            sub[topic][i].context === (context || null)\n          ) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      return true;\n    },\n\n    /**\n     * Unsubscribe from a topic.\n     *\n     * If a \"wildcard\" topic was subscribed to with a trailing asterisk,\n     * because the subscriber wanted to receive messages for any topic\n     * with the given prefix, that same \"wildcard\" topic should be used to\n     * unsubscribe. It is not possible to unsubscribe using any topic other\n     * than one exactly matching one that has previously been subscribed to.\n     *\n     * If you supply the callback function and execution context, only this\n     * exact subscription is removed. Otherwise, all subscriptions to this topic\n     * will be removed.\n     *\n     * @param topic {String|RegExp} The topic that has been used when subscribing\n     * @param subscriber {Function} Message handler function\n     * @param context {Object} The execution context of the callback (i.e. \"this\")\n     * @return {Boolean} Whether a subscription was removed\n     */\n    unsubscribe(topic, subscriber, context) {\n      var topic = topic.toString();\n      var sub = this.getSubscriptions();\n      var subscrList = sub[topic];\n      if (subscrList) {\n        if (!subscriber) {\n          sub[topic] = null;\n          delete sub[topic];\n          return true;\n        } else {\n          if (!context) {\n            context = null;\n          }\n          var i = subscrList.length;\n          var subscription;\n          do {\n            subscription = subscrList[--i];\n            if (\n              subscription.subscriber === subscriber &&\n              subscription.context === context\n            ) {\n              subscrList.splice(i, 1);\n              if (subscrList.length === 0) {\n                sub[topic] = null;\n                delete sub[topic];\n              }\n              return true;\n            }\n          } while (i);\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Dispatch message, which calls subscribers\n     *\n     * @param message {qx.event.message.Message} Message which is being dispatched\n     * @return {Boolean} If the message could be dispatched, i.e. if subscribers\n     * exist which have received the message\n     */\n    dispatch(message) {\n      var sub = this.getSubscriptions();\n      var msgName = message.getName();\n      var dispatched = false;\n\n      for (var topic in sub) {\n        var len = topic.length;\n        if (topic[len - 1] === \"*\") {\n          // use of wildcard, only allowed as \"*\" or at the end of the topic\n          if (\n            len === 1 ||\n            topic.substr(0, len - 2) === msgName.substr(0, len - 2)\n          ) {\n            this.__callSubscribers(sub[topic], message);\n            dispatched = true;\n          }\n        } else if (sub[topic][0].regex) {\n          // regular expression\n          if (message.getName().match(sub[topic][0].regex)) {\n            this.__callSubscribers(sub[topic], message);\n            dispatched = true;\n          }\n        } else if (topic === msgName) {\n          // exact match\n          this.__callSubscribers(sub[topic], message);\n          dispatched = true;\n        }\n      }\n      return dispatched;\n    },\n\n    /**\n     * Dispatches a new message by supplying the name of the\n     * message and its data.\n     *\n     * @param name {String} name of the message\n     * @param data {var} Any type of data to attach\n     * @return {Boolean} If the message was dispatched\n     */\n    dispatchByName(name, data) {\n      var message = new qx.event.message.Message(name, data);\n\n      // Dispatch the message\n      var ret = this.dispatch(message);\n\n      // We instantiated this message, so it's our responsibility to dispose it.\n      message.dispose();\n      message = null;\n\n      // Let 'em know whether this message was dispatched to any subscribers.\n      return ret;\n    },\n\n    /**\n     * Removes all subscriptions\n     */\n    removeAllSubscriptions() {\n      var subscriptions = this.getSubscriptions();\n      for (var key in subscriptions) {\n        delete subscriptions[key];\n      }\n    },\n\n    /**\n     * Call subscribers with passed message.\n     *\n     * Each currently-subscribed subscriber function will be called in\n     * turn. Any requests to unsubscribe a subscriber from the list, while\n     * processing the currently-subscribed subscriber functions, will take\n     * effect after all currently-subscribed subscriber functions have been\n     * processed.\n     *\n     * @param subscribers {Array} subscribers to call\n     * @param message {qx.event.message.Message} message for subscribers\n     */\n    __callSubscribers(subscribers, message) {\n      // (Shallow) clone the subscribers array in case one of them alters the\n      // list, e.g., by unsubscribing\n      subscribers = subscribers.slice();\n\n      for (var i = 0; i < subscribers.length; i++) {\n        var subscriber = subscribers[i].subscriber;\n        var context = subscribers[i].context;\n\n        // call topic subscriber\n        if (context && context.isDisposed) {\n          if (context.isDisposed()) {\n            subscribers.splice(i, 1);\n            i--;\n          } else {\n            subscriber.call(context, message);\n          }\n        } else {\n          subscriber.call(context, message);\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}