{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "_listener",
    "__listenerIdCount",
    "__channelToIdMapping",
    "members",
    "on",
    "channel",
    "type",
    "handler",
    "scope",
    "_addListener",
    "onAny",
    "listeners",
    "id",
    "params",
    "param",
    "lang",
    "Type",
    "isString",
    "paramsRegexp",
    "exec",
    "push",
    "RegExp",
    "replace",
    "regExp",
    "remove",
    "listener",
    "has",
    "path",
    "Object",
    "isEmpty",
    "test",
    "emit",
    "customData",
    "_emit",
    "listenerMatchedAny",
    "_emitListeners",
    "listenerMatched",
    "info",
    "_emitRoute",
    "match",
    "value",
    "shift",
    "i",
    "length",
    "call",
    "undefined",
    "event",
    "Messaging"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/Messaging.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * Define messages to react on certain channels.\n *\n * The channel names will be used in the {@link #on} method to define handlers which will\n * be called on certain channels and routes. The {@link #emit} method can be used\n * to execute a given route on a channel. {@link #onAny} defines a handler on any channel.\n *\n * *Example*\n *\n * Here is a little example of how to use the messaging.\n *\n * <pre class='javascript'>\n *   var m = new qx.event.Messaging();\n *\n *   m.on(\"get\", \"/address/{id}\", function(data) {\n *     var id = data.params.id; // 1234\n *     // do something with the id...\n *   },this);\n *\n *   m.emit(\"get\", \"/address/1234\");\n * </pre>\n */\nqx.Bootstrap.define(\"qx.event.Messaging\", {\n  construct() {\n    this._listener = {};\n    this.__listenerIdCount = 0;\n    this.__channelToIdMapping = {};\n  },\n\n  members: {\n    _listener: null,\n    __listenerIdCount: null,\n    __channelToIdMapping: null,\n\n    /**\n     * Adds a route handler for the given channel. The route is called\n     * if the {@link #emit} method finds a match.\n     *\n     * @param channel {String} The channel of the message.\n     * @param type {String|RegExp} The type, used for checking if the executed path matches.\n     * @param handler {Function} The handler to call if the route matches the executed path.\n     * @param scope {var ? null} The scope of the handler.\n     * @return {String} The id of the route used to remove the route.\n     */\n    on(channel, type, handler, scope) {\n      return this._addListener(channel, type, handler, scope);\n    },\n\n    /**\n     * Adds a handler for the \"any\" channel. The \"any\" channel is called\n     * before all other channels.\n     *\n     * @param type {String|RegExp} The route, used for checking if the executed path matches\n     * @param handler {Function} The handler to call if the route matches the executed path\n     * @param scope {var ? null} The scope of the handler.\n     * @return {String} The id of the route used to remove the route.\n     */\n    onAny(type, handler, scope) {\n      return this._addListener(\"any\", type, handler, scope);\n    },\n\n    /**\n     * Adds a listener for a certain channel.\n     *\n     * @param channel {String} The channel the route should be registered for\n     * @param type {String|RegExp} The type, used for checking if the executed path matches\n     * @param handler {Function} The handler to call if the route matches the executed path\n     * @param scope {var ? null} The scope of the handler.\n     * @return {String} The id of the route used to remove the route.\n     */\n    _addListener(channel, type, handler, scope) {\n      var listeners = (this._listener[channel] = this._listener[channel] || {});\n      var id = this.__listenerIdCount++;\n      var params = [];\n      var param = null;\n\n      // Convert the route to a regular expression.\n      if (qx.lang.Type.isString(type)) {\n        var paramsRegexp = /\\{([\\w\\d]+)\\}/g;\n\n        while ((param = paramsRegexp.exec(type)) !== null) {\n          params.push(param[1]);\n        }\n        type = new RegExp(\"^\" + type.replace(paramsRegexp, \"([^/]+)\") + \"$\");\n      }\n\n      listeners[id] = {\n        regExp: type,\n        params: params,\n        handler: handler,\n        scope: scope\n      };\n\n      this.__channelToIdMapping[id] = channel;\n      return id;\n    },\n\n    /**\n     * Removes a registered listener by the given id.\n     *\n     * @param id {String} The id of the registered listener.\n     */\n    remove(id) {\n      var channel = this.__channelToIdMapping[id];\n      var listener = this._listener[channel];\n      delete listener[id];\n      delete this.__channelToIdMapping[id];\n    },\n\n    /**\n     * Checks if a listener is registered for the given path in the given channel.\n     *\n     * @param channel {String} The channel of the message.\n     * @param path {String} The path to check.\n     * @return {Boolean} Whether a listener is registered.\n     */\n    has(channel, path) {\n      var listeners = this._listener[channel];\n      if (!listeners || qx.lang.Object.isEmpty(listeners)) {\n        return false;\n      }\n\n      for (var id in listeners) {\n        var listener = listeners[id];\n        if (listener.regExp.test(path)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Sends a message on the given channel and informs all matching route handlers.\n     *\n     * @param channel {String} The channel of the message.\n     * @param path {String} The path to execute\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    emit(channel, path, params, customData) {\n      this._emit(channel, path, params, customData);\n    },\n\n    /**\n     * Executes a certain channel with a given path. Informs all\n     * route handlers that match with the path.\n     *\n     * @param channel {String} The channel to execute.\n     * @param path {String} The path to check\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     */\n    _emit(channel, path, params, customData) {\n      var listenerMatchedAny = false;\n      var listener = this._listener[\"any\"];\n      listenerMatchedAny = this._emitListeners(\n        channel,\n        path,\n        listener,\n        params,\n        customData\n      );\n\n      var listenerMatched = false;\n      listener = this._listener[channel];\n      listenerMatched = this._emitListeners(\n        channel,\n        path,\n        listener,\n        params,\n        customData\n      );\n\n      if (!listenerMatched && !listenerMatchedAny) {\n        qx.Bootstrap.info(\"No listener found for \" + path);\n      }\n    },\n\n    /**\n     * Executes all given listener for a certain channel. Checks all listeners if they match\n     * with the given path and executes the stored handler of the matching route.\n     *\n     * @param channel {String} The channel to execute.\n     * @param path {String} The path to check\n     * @param listeners {Map[]} All routes to test and execute.\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     *\n     * @return {Boolean} Whether the route has been executed\n     */\n    _emitListeners(channel, path, listeners, params, customData) {\n      if (!listeners || qx.lang.Object.isEmpty(listeners)) {\n        return false;\n      }\n      var listenerMatched = false;\n      for (var id in listeners) {\n        var listener = listeners[id];\n        listenerMatched |= this._emitRoute(\n          channel,\n          path,\n          listener,\n          params,\n          customData\n        );\n      }\n      return listenerMatched;\n    },\n\n    /**\n     * Executes a certain listener. Checks if the listener matches the given path and\n     * executes the stored handler of the route.\n     *\n     * @param channel {String} The channel to execute.\n     * @param path {String} The path to check\n     * @param listener {Map} The route data.\n     * @param params {Map} The given parameters that should be propagated\n     * @param customData {var} The given custom data that should be propagated\n     *\n     * @return {Boolean} Whether the route has been executed\n     */\n    _emitRoute(channel, path, listener, params, customData) {\n      var match = listener.regExp.exec(path);\n      if (match) {\n        var params = params || {};\n        var param = null;\n        var value = null;\n        match.shift(); // first match is the whole path\n        for (var i = 0; i < match.length; i++) {\n          value = match[i];\n          param = listener.params[i];\n          if (param) {\n            params[param] = value;\n          } else {\n            params[i] = value;\n          }\n        }\n        listener.handler.call(listener.scope, {\n          path: path,\n          params: params,\n          customData: customData\n        });\n      }\n\n      return match != undefined;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}