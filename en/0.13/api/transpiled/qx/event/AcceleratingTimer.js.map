{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "__timer",
    "event",
    "Timer",
    "getInterval",
    "addListener",
    "_onInterval",
    "events",
    "interval",
    "properties",
    "check",
    "init",
    "firstInterval",
    "minimum",
    "decrease",
    "members",
    "__currentInterval",
    "start",
    "setInterval",
    "getFirstInterval",
    "stop",
    "Math",
    "max",
    "getMinimum",
    "getDecrease",
    "fireEvent",
    "destruct",
    "_disposeObjects",
    "AcceleratingTimer"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/AcceleratingTimer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Timer, which accelerates after each interval. The initial delay and the\n * interval time can be set using the properties {@link #firstInterval}\n * and {@link #interval}. The {@link #interval} events will be fired with\n * decreasing interval times while the timer is running, until the {@link #minimum}\n * is reached. The {@link #decrease} property sets the amount of milliseconds\n * which will decreased after every firing.\n *\n * This class is e.g. used in the {@link qx.ui.form.RepeatButton} and\n * {@link qx.ui.form.HoverButton} widgets.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.event.AcceleratingTimer\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  construct() {\n    super();\n\n    this.__timer = new qx.event.Timer(this.getInterval());\n    this.__timer.addListener(\"interval\", this._onInterval, this);\n  },\n\n  events: {\n    /** This event if fired each time the interval time has elapsed */\n    interval: \"qx.event.type.Event\"\n  },\n\n  properties: {\n    /**\n     * Interval used after the first run of the timer. Usually a smaller value\n     * than the \"firstInterval\" property value to get a faster reaction.\n     */\n    interval: {\n      check: \"Integer\",\n      init: 100\n    },\n\n    /**\n     * Interval used for the first run of the timer. Usually a greater value\n     * than the \"interval\" property value to a little delayed reaction at the first\n     * time.\n     */\n    firstInterval: {\n      check: \"Integer\",\n      init: 500\n    },\n\n    /** This configures the minimum value for the timer interval. */\n    minimum: {\n      check: \"Integer\",\n      init: 20\n    },\n\n    /** Decrease of the timer on each interval (for the next interval) until minTimer reached. */\n    decrease: {\n      check: \"Integer\",\n      init: 2\n    }\n  },\n\n  members: {\n    __timer: null,\n    __currentInterval: null,\n\n    /**\n     * Reset and start the timer.\n     */\n    start() {\n      this.__timer.setInterval(this.getFirstInterval());\n      this.__timer.start();\n    },\n\n    /**\n     * Stop the timer\n     */\n    stop() {\n      this.__timer.stop();\n      this.__currentInterval = null;\n    },\n\n    /**\n     * Interval event handler\n     */\n    _onInterval() {\n      this.__timer.stop();\n\n      if (this.__currentInterval == null) {\n        this.__currentInterval = this.getInterval();\n      }\n\n      this.__currentInterval = Math.max(\n        this.getMinimum(),\n        this.__currentInterval - this.getDecrease()\n      );\n\n      this.__timer.setInterval(this.__currentInterval);\n      this.__timer.start();\n\n      this.fireEvent(\"interval\");\n    }\n  },\n\n  destruct() {\n    this._disposeObjects(\"__timer\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,4BAAhB,EAA8C;IAC5CC,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MAD4B;IAE5CC,SAAS,EAAE,CAACT,EAAE,CAACO,IAAH,CAAQG,WAAT,CAFiC;IAI5CC,SAJ4C,uBAIhC;MACV;MAEA,KAAKC,SAAL,GAAe,IAAIZ,EAAE,CAACa,KAAH,CAASC,KAAb,CAAmB,KAAKC,WAAL,EAAnB,CAAf;;MACA,KAAKH,SAAL,CAAaI,WAAb,CAAyB,UAAzB,EAAqC,KAAKC,WAA1C,EAAuD,IAAvD;IACD,CAT2C;IAW5CC,MAAM,EAAE;MACN;MACAC,QAAQ,EAAE;IAFJ,CAXoC;IAgB5CC,UAAU,EAAE;MACV;AACJ;AACA;AACA;MACID,QAAQ,EAAE;QACRE,KAAK,EAAE,SADC;QAERC,IAAI,EAAE;MAFE,CALA;;MAUV;AACJ;AACA;AACA;AACA;MACIC,aAAa,EAAE;QACbF,KAAK,EAAE,SADM;QAEbC,IAAI,EAAE;MAFO,CAfL;;MAoBV;MACAE,OAAO,EAAE;QACPH,KAAK,EAAE,SADA;QAEPC,IAAI,EAAE;MAFC,CArBC;;MA0BV;MACAG,QAAQ,EAAE;QACRJ,KAAK,EAAE,SADC;QAERC,IAAI,EAAE;MAFE;IA3BA,CAhBgC;IAiD5CI,OAAO,EAAE;MACPd,SAAO,EAAE,IADF;MAEPe,SAAiB,EAAE,IAFZ;;MAIP;AACJ;AACA;MACIC,KAPO,mBAOC;QACN,KAAKhB,SAAL,CAAaiB,WAAb,CAAyB,KAAKC,gBAAL,EAAzB;;QACA,KAAKlB,SAAL,CAAagB,KAAb;MACD,CAVM;;MAYP;AACJ;AACA;MACIG,IAfO,kBAeA;QACL,KAAKnB,SAAL,CAAamB,IAAb;;QACA,KAAKJ,SAAL,GAAyB,IAAzB;MACD,CAlBM;;MAoBP;AACJ;AACA;MACIV,WAvBO,yBAuBO;QACZ,KAAKL,SAAL,CAAamB,IAAb;;QAEA,IAAI,KAAKJ,SAAL,IAA0B,IAA9B,EAAoC;UAClC,KAAKA,SAAL,GAAyB,KAAKZ,WAAL,EAAzB;QACD;;QAED,KAAKY,SAAL,GAAyBK,IAAI,CAACC,GAAL,CACvB,KAAKC,UAAL,EADuB,EAEvB,KAAKP,SAAL,GAAyB,KAAKQ,WAAL,EAFF,CAAzB;;QAKA,KAAKvB,SAAL,CAAaiB,WAAb,CAAyB,KAAKF,SAA9B;;QACA,KAAKf,SAAL,CAAagB,KAAb;;QAEA,KAAKQ,SAAL,CAAe,UAAf;MACD;IAvCM,CAjDmC;IA2F5CC,QA3F4C,sBA2FjC;MACT,KAAKC,eAAL,CAAqB,WAArB;IACD;EA7F2C,CAA9C;EAhCAtC,EAAE,CAACa,KAAH,CAAS0B,iBAAT,CAA2BpC,aAA3B,GAA2CA,aAA3C"
}