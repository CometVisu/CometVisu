{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "specialCharCodeMap",
    "numpadToCharCode",
    "charCodeAt",
    "keyCodeToIdentifierMap",
    "core",
    "Environment",
    "get",
    "charCodeA",
    "charCodeZ",
    "charCode0",
    "charCode9",
    "keyCodeToIdentifier",
    "keyCode",
    "isIdentifiableKeyCode",
    "numPadKeyCode",
    "String",
    "fromCharCode",
    "charCodeToIdentifier",
    "charCode",
    "toUpperCase",
    "isNonPrintableKeyCode",
    "isValidKeyIdentifier",
    "keyIdentifier",
    "identifierToKeyCodeMap",
    "length",
    "isPrintableKeyIdentifier",
    "defer",
    "key",
    "parseInt",
    "event",
    "util",
    "Keyboard"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/util/Keyboard.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Utilities for working with character codes and key identifiers\n */\nqx.Bootstrap.define(\"qx.event.util.Keyboard\", {\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      KEY MAPS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} maps the charcodes of special printable keys to key identifiers\n     *\n     * @lint ignoreReferenceField(specialCharCodeMap)\n     */\n    specialCharCodeMap: {\n      8: \"Backspace\", // The Backspace (Back) key.\n      9: \"Tab\", // The Horizontal Tabulation (Tab) key.\n\n      //   Note: This key identifier is also used for the\n      //   Return (Macintosh numpad) key.\n      13: \"Enter\", // The Enter key.\n      27: \"Escape\", // The Escape (Esc) key.\n      32: \"Space\" // The Space (Spacebar) key.\n    },\n\n    /**\n     * @type {Map} maps the keycodes of the numpad keys to the right charcodes\n     *\n     * @lint ignoreReferenceField(numpadToCharCode)\n     */\n    numpadToCharCode: {\n      96: \"0\".charCodeAt(0),\n      97: \"1\".charCodeAt(0),\n      98: \"2\".charCodeAt(0),\n      99: \"3\".charCodeAt(0),\n      100: \"4\".charCodeAt(0),\n      101: \"5\".charCodeAt(0),\n      102: \"6\".charCodeAt(0),\n      103: \"7\".charCodeAt(0),\n      104: \"8\".charCodeAt(0),\n      105: \"9\".charCodeAt(0),\n      106: \"*\".charCodeAt(0),\n      107: \"+\".charCodeAt(0),\n      109: \"-\".charCodeAt(0),\n      110: \",\".charCodeAt(0),\n      111: \"/\".charCodeAt(0)\n    },\n\n    /**\n     * @type {Map} maps the keycodes of non printable keys to key identifiers\n     *\n     * @lint ignoreReferenceField(keyCodeToIdentifierMap)\n     */\n    keyCodeToIdentifierMap: {\n      16: \"Shift\", // The Shift key.\n      17: \"Control\", // The Control (Ctrl) key.\n      18: \"Alt\", // The Alt (Menu) key.\n      20: \"CapsLock\", // The CapsLock key\n      224: \"Meta\", // The Meta key. (Apple Meta and Windows key)\n\n      37: \"Left\", // The Left Arrow key.\n      38: \"Up\", // The Up Arrow key.\n      39: \"Right\", // The Right Arrow key.\n      40: \"Down\", // The Down Arrow key.\n\n      33: \"PageUp\", // The Page Up key.\n      34: \"PageDown\", // The Page Down (Next) key.\n\n      35: \"End\", // The End key.\n      36: \"Home\", // The Home key.\n\n      45: \"Insert\", // The Insert (Ins) key. (Does not fire in Opera/Win)\n      46: \"Delete\", // The Delete (Del) Key.\n\n      112: \"F1\", // The F1 key.\n      113: \"F2\", // The F2 key.\n      114: \"F3\", // The F3 key.\n      115: \"F4\", // The F4 key.\n      116: \"F5\", // The F5 key.\n      117: \"F6\", // The F6 key.\n      118: \"F7\", // The F7 key.\n      119: \"F8\", // The F8 key.\n      120: \"F9\", // The F9 key.\n      121: \"F10\", // The F10 key.\n      122: \"F11\", // The F11 key.\n      123: \"F12\", // The F12 key.\n\n      144: \"NumLock\", // The Num Lock key.\n      44: \"PrintScreen\", // The Print Screen (PrintScrn, SnapShot) key.\n      145: \"Scroll\", // The scroll lock key\n      19: \"Pause\", // The pause/break key\n      // The left Windows Logo key or left cmd key\n      91: qx.core.Environment.get(\"os.name\") == \"osx\" ? \"cmd\" : \"Win\",\n      92: \"Win\", // The right Windows Logo key or left cmd key\n      // The Application key (Windows Context Menu) or right cmd key\n      93: qx.core.Environment.get(\"os.name\") == \"osx\" ? \"cmd\" : \"Apps\"\n    },\n\n    /** char code for capital A */\n    charCodeA: \"A\".charCodeAt(0),\n    /** char code for capital Z */\n    charCodeZ: \"Z\".charCodeAt(0),\n    /** char code for 0 */\n    charCode0: \"0\".charCodeAt(0),\n    /** char code for 9 */\n    charCode9: \"9\".charCodeAt(0),\n\n    /**\n     * converts a keyboard code to the corresponding identifier\n     *\n     * @param keyCode {Integer} key code\n     * @return {String} key identifier\n     */\n    keyCodeToIdentifier(keyCode) {\n      if (this.isIdentifiableKeyCode(keyCode)) {\n        var numPadKeyCode = this.numpadToCharCode[keyCode];\n\n        if (numPadKeyCode) {\n          return String.fromCharCode(numPadKeyCode);\n        }\n\n        return (\n          this.keyCodeToIdentifierMap[keyCode] ||\n          this.specialCharCodeMap[keyCode] ||\n          String.fromCharCode(keyCode)\n        );\n      } else {\n        return \"Unidentified\";\n      }\n    },\n\n    /**\n     * converts a character code to the corresponding identifier\n     *\n     * @param charCode {String} character code\n     * @return {String} key identifier\n     */\n    charCodeToIdentifier(charCode) {\n      return (\n        this.specialCharCodeMap[charCode] ||\n        String.fromCharCode(charCode).toUpperCase()\n      );\n    },\n\n    /**\n     * Check whether the keycode can be reliably detected in keyup/keydown events\n     *\n     * @param keyCode {String} key code to check.\n     * @return {Boolean} Whether the keycode can be reliably detected in keyup/keydown events.\n     */\n    isIdentifiableKeyCode(keyCode) {\n      if (keyCode >= this.charCodeA && keyCode <= this.charCodeZ) {\n        return true;\n      }\n\n      // 0-9\n      if (keyCode >= this.charCode0 && keyCode <= this.charCode9) {\n        return true;\n      }\n\n      // Enter, Space, Tab, Backspace\n      if (this.specialCharCodeMap[keyCode]) {\n        return true;\n      }\n\n      // Numpad\n      if (this.numpadToCharCode[keyCode]) {\n        return true;\n      }\n\n      // non printable keys\n      if (this.isNonPrintableKeyCode(keyCode)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Checks whether the keyCode represents a non printable key\n     *\n     * @param keyCode {String} key code to check.\n     * @return {Boolean} Whether the keyCode represents a non printable key.\n     */\n    isNonPrintableKeyCode(keyCode) {\n      return this.keyCodeToIdentifierMap[keyCode] ? true : false;\n    },\n\n    /**\n     * Checks whether a given string is a valid keyIdentifier\n     *\n     * @param keyIdentifier {String} The key identifier.\n     * @return {Boolean} whether the given string is a valid keyIdentifier\n     */\n    isValidKeyIdentifier(keyIdentifier) {\n      if (this.identifierToKeyCodeMap[keyIdentifier]) {\n        return true;\n      }\n\n      if (keyIdentifier.length != 1) {\n        return false;\n      }\n\n      if (keyIdentifier >= \"0\" && keyIdentifier <= \"9\") {\n        return true;\n      }\n\n      if (keyIdentifier >= \"A\" && keyIdentifier <= \"Z\") {\n        return true;\n      }\n\n      switch (keyIdentifier) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n        case \",\":\n          return true;\n\n        default:\n          return false;\n      }\n    },\n\n    /**\n     * Checks whether a given string is a printable keyIdentifier.\n     *\n     * @param keyIdentifier {String} The key identifier.\n     * @return {Boolean} whether the given string is a printable keyIdentifier.\n     */\n    isPrintableKeyIdentifier(keyIdentifier) {\n      if (keyIdentifier === \"Space\") {\n        return true;\n      } else {\n        return this.identifierToKeyCodeMap[keyIdentifier] ? false : true;\n      }\n    }\n  },\n\n  defer(statics) {\n    // construct inverse of keyCodeToIdentifierMap\n    if (!statics.identifierToKeyCodeMap) {\n      statics.identifierToKeyCodeMap = {};\n\n      for (var key in statics.keyCodeToIdentifierMap) {\n        statics.identifierToKeyCodeMap[statics.keyCodeToIdentifierMap[key]] =\n          parseInt(key, 10);\n      }\n\n      for (var key in statics.specialCharCodeMap) {\n        statics.identifierToKeyCodeMap[statics.specialCharCodeMap[key]] =\n          parseInt(key, 10);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}