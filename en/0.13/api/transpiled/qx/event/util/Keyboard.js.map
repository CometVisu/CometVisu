{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "specialCharCodeMap",
    "numpadToCharCode",
    "charCodeAt",
    "keyCodeToIdentifierMap",
    "core",
    "Environment",
    "get",
    "charCodeA",
    "charCodeZ",
    "charCode0",
    "charCode9",
    "keyCodeToIdentifier",
    "keyCode",
    "isIdentifiableKeyCode",
    "numPadKeyCode",
    "String",
    "fromCharCode",
    "charCodeToIdentifier",
    "charCode",
    "toUpperCase",
    "isNonPrintableKeyCode",
    "isValidKeyIdentifier",
    "keyIdentifier",
    "identifierToKeyCodeMap",
    "length",
    "isPrintableKeyIdentifier",
    "defer",
    "key",
    "parseInt",
    "event",
    "util",
    "Keyboard"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/util/Keyboard.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Utilities for working with character codes and key identifiers\n */\nqx.Bootstrap.define(\"qx.event.util.Keyboard\", {\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      KEY MAPS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} maps the charcodes of special printable keys to key identifiers\n     *\n     * @lint ignoreReferenceField(specialCharCodeMap)\n     */\n    specialCharCodeMap: {\n      8: \"Backspace\", // The Backspace (Back) key.\n      9: \"Tab\", // The Horizontal Tabulation (Tab) key.\n\n      //   Note: This key identifier is also used for the\n      //   Return (Macintosh numpad) key.\n      13: \"Enter\", // The Enter key.\n      27: \"Escape\", // The Escape (Esc) key.\n      32: \"Space\" // The Space (Spacebar) key.\n    },\n\n    /**\n     * @type {Map} maps the keycodes of the numpad keys to the right charcodes\n     *\n     * @lint ignoreReferenceField(numpadToCharCode)\n     */\n    numpadToCharCode: {\n      96: \"0\".charCodeAt(0),\n      97: \"1\".charCodeAt(0),\n      98: \"2\".charCodeAt(0),\n      99: \"3\".charCodeAt(0),\n      100: \"4\".charCodeAt(0),\n      101: \"5\".charCodeAt(0),\n      102: \"6\".charCodeAt(0),\n      103: \"7\".charCodeAt(0),\n      104: \"8\".charCodeAt(0),\n      105: \"9\".charCodeAt(0),\n      106: \"*\".charCodeAt(0),\n      107: \"+\".charCodeAt(0),\n      109: \"-\".charCodeAt(0),\n      110: \",\".charCodeAt(0),\n      111: \"/\".charCodeAt(0)\n    },\n\n    /**\n     * @type {Map} maps the keycodes of non printable keys to key identifiers\n     *\n     * @lint ignoreReferenceField(keyCodeToIdentifierMap)\n     */\n    keyCodeToIdentifierMap: {\n      16: \"Shift\", // The Shift key.\n      17: \"Control\", // The Control (Ctrl) key.\n      18: \"Alt\", // The Alt (Menu) key.\n      20: \"CapsLock\", // The CapsLock key\n      224: \"Meta\", // The Meta key. (Apple Meta and Windows key)\n\n      37: \"Left\", // The Left Arrow key.\n      38: \"Up\", // The Up Arrow key.\n      39: \"Right\", // The Right Arrow key.\n      40: \"Down\", // The Down Arrow key.\n\n      33: \"PageUp\", // The Page Up key.\n      34: \"PageDown\", // The Page Down (Next) key.\n\n      35: \"End\", // The End key.\n      36: \"Home\", // The Home key.\n\n      45: \"Insert\", // The Insert (Ins) key. (Does not fire in Opera/Win)\n      46: \"Delete\", // The Delete (Del) Key.\n\n      112: \"F1\", // The F1 key.\n      113: \"F2\", // The F2 key.\n      114: \"F3\", // The F3 key.\n      115: \"F4\", // The F4 key.\n      116: \"F5\", // The F5 key.\n      117: \"F6\", // The F6 key.\n      118: \"F7\", // The F7 key.\n      119: \"F8\", // The F8 key.\n      120: \"F9\", // The F9 key.\n      121: \"F10\", // The F10 key.\n      122: \"F11\", // The F11 key.\n      123: \"F12\", // The F12 key.\n\n      144: \"NumLock\", // The Num Lock key.\n      44: \"PrintScreen\", // The Print Screen (PrintScrn, SnapShot) key.\n      145: \"Scroll\", // The scroll lock key\n      19: \"Pause\", // The pause/break key\n      // The left Windows Logo key or left cmd key\n      91: qx.core.Environment.get(\"os.name\") == \"osx\" ? \"cmd\" : \"Win\",\n      92: \"Win\", // The right Windows Logo key or left cmd key\n      // The Application key (Windows Context Menu) or right cmd key\n      93: qx.core.Environment.get(\"os.name\") == \"osx\" ? \"cmd\" : \"Apps\"\n    },\n\n    /** char code for capital A */\n    charCodeA: \"A\".charCodeAt(0),\n    /** char code for capital Z */\n    charCodeZ: \"Z\".charCodeAt(0),\n    /** char code for 0 */\n    charCode0: \"0\".charCodeAt(0),\n    /** char code for 9 */\n    charCode9: \"9\".charCodeAt(0),\n\n    /**\n     * converts a keyboard code to the corresponding identifier\n     *\n     * @param keyCode {Integer} key code\n     * @return {String} key identifier\n     */\n    keyCodeToIdentifier(keyCode) {\n      if (this.isIdentifiableKeyCode(keyCode)) {\n        var numPadKeyCode = this.numpadToCharCode[keyCode];\n\n        if (numPadKeyCode) {\n          return String.fromCharCode(numPadKeyCode);\n        }\n\n        return (\n          this.keyCodeToIdentifierMap[keyCode] ||\n          this.specialCharCodeMap[keyCode] ||\n          String.fromCharCode(keyCode)\n        );\n      } else {\n        return \"Unidentified\";\n      }\n    },\n\n    /**\n     * converts a character code to the corresponding identifier\n     *\n     * @param charCode {String} character code\n     * @return {String} key identifier\n     */\n    charCodeToIdentifier(charCode) {\n      return (\n        this.specialCharCodeMap[charCode] ||\n        String.fromCharCode(charCode).toUpperCase()\n      );\n    },\n\n    /**\n     * Check whether the keycode can be reliably detected in keyup/keydown events\n     *\n     * @param keyCode {String} key code to check.\n     * @return {Boolean} Whether the keycode can be reliably detected in keyup/keydown events.\n     */\n    isIdentifiableKeyCode(keyCode) {\n      if (keyCode >= this.charCodeA && keyCode <= this.charCodeZ) {\n        return true;\n      }\n\n      // 0-9\n      if (keyCode >= this.charCode0 && keyCode <= this.charCode9) {\n        return true;\n      }\n\n      // Enter, Space, Tab, Backspace\n      if (this.specialCharCodeMap[keyCode]) {\n        return true;\n      }\n\n      // Numpad\n      if (this.numpadToCharCode[keyCode]) {\n        return true;\n      }\n\n      // non printable keys\n      if (this.isNonPrintableKeyCode(keyCode)) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /**\n     * Checks whether the keyCode represents a non printable key\n     *\n     * @param keyCode {String} key code to check.\n     * @return {Boolean} Whether the keyCode represents a non printable key.\n     */\n    isNonPrintableKeyCode(keyCode) {\n      return this.keyCodeToIdentifierMap[keyCode] ? true : false;\n    },\n\n    /**\n     * Checks whether a given string is a valid keyIdentifier\n     *\n     * @param keyIdentifier {String} The key identifier.\n     * @return {Boolean} whether the given string is a valid keyIdentifier\n     */\n    isValidKeyIdentifier(keyIdentifier) {\n      if (this.identifierToKeyCodeMap[keyIdentifier]) {\n        return true;\n      }\n\n      if (keyIdentifier.length != 1) {\n        return false;\n      }\n\n      if (keyIdentifier >= \"0\" && keyIdentifier <= \"9\") {\n        return true;\n      }\n\n      if (keyIdentifier >= \"A\" && keyIdentifier <= \"Z\") {\n        return true;\n      }\n\n      switch (keyIdentifier) {\n        case \"+\":\n        case \"-\":\n        case \"*\":\n        case \"/\":\n        case \",\":\n          return true;\n\n        default:\n          return false;\n      }\n    },\n\n    /**\n     * Checks whether a given string is a printable keyIdentifier.\n     *\n     * @param keyIdentifier {String} The key identifier.\n     * @return {Boolean} whether the given string is a printable keyIdentifier.\n     */\n    isPrintableKeyIdentifier(keyIdentifier) {\n      if (keyIdentifier === \"Space\") {\n        return true;\n      } else {\n        return this.identifierToKeyCodeMap[keyIdentifier] ? false : true;\n      }\n    }\n  },\n\n  defer(statics) {\n    // construct inverse of keyCodeToIdentifierMap\n    if (!statics.identifierToKeyCodeMap) {\n      statics.identifierToKeyCodeMap = {};\n\n      for (var key in statics.keyCodeToIdentifierMap) {\n        statics.identifierToKeyCodeMap[statics.keyCodeToIdentifierMap[key]] =\n          parseInt(key, 10);\n      }\n\n      for (var key in statics.specialCharCodeMap) {\n        statics.identifierToKeyCodeMap[statics.specialCharCodeMap[key]] =\n          parseInt(key, 10);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}