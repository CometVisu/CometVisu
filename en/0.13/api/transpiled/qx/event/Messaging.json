{
  "className": "qx.event.Messaging",
  "packageName": "qx.event",
  "name": "Messaging",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 42,
        "column": 0,
        "index": 1171
      },
      "end": {
        "line": 267,
        "column": 3,
        "index": 8522
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Define messages to react on certain channels.\n The channel names will be used in the {@link #on} method to define handlers which will\n be called on certain channels and routes. The {@link #emit} method can be used\n to execute a given route on a channel. {@link #onAny} defines a handler on any channel.\n<em>Example</em>\n Here is a little example of how to use the messaging.\n </p>\n<pre class='javascript'>\n   var m = new qx.event.Messaging();\n   m.on(\"get\", \"/address/{id}\", function(data) {\n     var id = data.params.id;\n\n   },this);\n   m.emit(\"get\", \"/address/1234\");\n </pre>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 43,
        "column": 2,
        "index": 1217
      },
      "end": {
        "line": 47,
        "column": 3,
        "index": 1327
      }
    }
  },
  "members": {
    "_listener": {
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1347
        },
        "end": {
          "line": 50,
          "column": 19,
          "index": 1362
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "__listenerIdCount": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1368
        },
        "end": {
          "line": 51,
          "column": 27,
          "index": 1391
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__channelToIdMapping": {
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1397
        },
        "end": {
          "line": 52,
          "column": 30,
          "index": 1423
        }
      },
      "type": "variable",
      "access": "private"
    },
    "on": {
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1948
        },
        "end": {
          "line": 66,
          "column": 5,
          "index": 2052
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a route handler for the given channel. The route is called\n if the {@link #emit} method finds a match.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel of the message.",
            "paramName": "channel",
            "description": " The channel of the message.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "type {String|RegExp} The type, used for checking if the executed path matches.",
            "paramName": "type",
            "description": " The type, used for checking if the executed path matches.",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "handler {Function} The handler to call if the route matches the executed path.",
            "paramName": "handler",
            "description": " The handler to call if the route matches the executed path.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "scope {var ? null} The scope of the handler.",
            "paramName": "scope",
            "description": " The scope of the handler.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The id of the route used to remove the route.",
            "type": "String",
            "description": " The id of the route used to remove the route."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "onAny": {
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2503
        },
        "end": {
          "line": 79,
          "column": 5,
          "index": 2599
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a handler for the \"any\" channel. The \"any\" channel is called\n before all other channels.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String|RegExp} The route, used for checking if the executed path matches",
            "paramName": "type",
            "description": " The route, used for checking if the executed path matches",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "handler {Function} The handler to call if the route matches the executed path",
            "paramName": "handler",
            "description": " The handler to call if the route matches the executed path",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "scope {var ? null} The scope of the handler.",
            "paramName": "scope",
            "description": " The scope of the handler.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The id of the route used to remove the route.",
            "type": "String",
            "description": " The id of the route used to remove the route."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_addListener": {
      "location": {
        "start": {
          "line": 90,
          "column": 4,
          "index": 3066
        },
        "end": {
          "line": 115,
          "column": 5,
          "index": 3808
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a listener for a certain channel.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel the route should be registered for",
            "paramName": "channel",
            "description": " The channel the route should be registered for",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "type {String|RegExp} The type, used for checking if the executed path matches",
            "paramName": "type",
            "description": " The type, used for checking if the executed path matches",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "handler {Function} The handler to call if the route matches the executed path",
            "paramName": "handler",
            "description": " The handler to call if the route matches the executed path",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "scope {var ? null} The scope of the handler.",
            "paramName": "scope",
            "description": " The scope of the handler.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The id of the route used to remove the route.",
            "type": "String",
            "description": " The id of the route used to remove the route."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "remove": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3953
        },
        "end": {
          "line": 127,
          "column": 5,
          "index": 4139
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a registered listener by the given id.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The id of the registered listener.",
            "paramName": "id",
            "description": " The id of the registered listener.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "has": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 4417
        },
        "end": {
          "line": 150,
          "column": 5,
          "index": 4758
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if a listener is registered for the given path in the given channel.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel of the message.",
            "paramName": "channel",
            "description": " The channel of the message.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "path {String} The path to check.",
            "paramName": "path",
            "description": " The path to check.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether a listener is registered.",
            "type": "Boolean",
            "description": " Whether a listener is registered."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "emit": {
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 5133
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 5233
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sends a message on the given channel and informs all matching route handlers.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel of the message.",
            "paramName": "channel",
            "description": " The channel of the message.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "path {String} The path to execute",
            "paramName": "path",
            "description": " The path to execute",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_emit": {
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 5630
        },
        "end": {
          "line": 197,
          "column": 5,
          "index": 6239
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes a certain channel with a given path. Informs all\n route handlers that match with the path.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel to execute.",
            "paramName": "channel",
            "description": " The channel to execute.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "path {String} The path to check",
            "paramName": "path",
            "description": " The path to check",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_emitListeners": {
      "location": {
        "start": {
          "line": 211,
          "column": 4,
          "index": 6830
        },
        "end": {
          "line": 227,
          "column": 5,
          "index": 7283
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes all given listener for a certain channel. Checks all listeners if they match\n with the given path and executes the stored handler of the matching route.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel to execute.",
            "paramName": "channel",
            "description": " The channel to execute.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "path {String} The path to check",
            "paramName": "path",
            "description": " The path to check",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listeners {Map[]} All routes to test and execute.",
            "paramName": "listeners",
            "description": " All routes to test and execute.",
            "type": "Map[]"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the route has been executed",
            "type": "Boolean",
            "description": " Whether the route has been executed"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_emitRoute": {
      "location": {
        "start": {
          "line": 241,
          "column": 4,
          "index": 7815
        },
        "end": {
          "line": 265,
          "column": 5,
          "index": 8514
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Executes a certain listener. Checks if the listener matches the given path and\n executes the stored handler of the route.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "channel {String} The channel to execute.",
            "paramName": "channel",
            "description": " The channel to execute.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "path {String} The path to check",
            "paramName": "path",
            "description": " The path to check",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Map} The route data.",
            "paramName": "listener",
            "description": " The route data.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "params {Map} The given parameters that should be propagated",
            "paramName": "params",
            "description": " The given parameters that should be propagated",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "customData {var} The given custom data that should be propagated",
            "paramName": "customData",
            "description": " The given custom data that should be propagated",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the route has been executed",
            "type": "Boolean",
            "description": " Whether the route has been executed"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    }
  },
  "descendants": []
}