{
  "className": "qx.event.type.Drag",
  "packageName": "qx.event.type",
  "name": "Drag",
  "superClass": "qx.event.type.Event",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0,
        "index": 653
      },
      "end": {
        "line": 291,
        "column": 3,
        "index": 9147
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Event object class for drag events</p>"
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "init": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1681
        },
        "end": {
          "line": 60,
          "column": 5,
          "index": 2042
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the fields of the event. The event must be initialized before\n it can be dispatched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "originalEvent {qx.event.type.Track} The original (mouse) event to use",
            "paramName": "originalEvent",
            "description": " The original (mouse) event to use",
            "type": "qx.event.type.Track"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} The initialized event instance",
            "type": "qx.event.type.Event",
            "description": " The initialized event instance"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "clone": {
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 2070
        },
        "end": {
          "line": 69,
          "column": 5,
          "index": 2194
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event",
        "qx.core.Object"
      ]
    },
    "getDocumentLeft": {
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2480
        },
        "end": {
          "line": 95,
          "column": 5,
          "index": 3078
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the horizontal position at which the event occurred relative to the\n left of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The horizontal mouse position in the document.",
            "type": "Integer",
            "description": " The horizontal mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentTop": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3359
        },
        "end": {
          "line": 122,
          "column": 5,
          "index": 3957
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the vertical position at which the event occurred relative to the\n top of the document. This property takes into account any scrolling of\n the page.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The vertical mouse position in the document.",
            "type": "Integer",
            "description": " The vertical mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getManager": {
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 4129
        },
        "end": {
          "line": 133,
          "column": 5,
          "index": 4272
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the drag&amp;drop event handler responsible for the target</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.handler.DragDrop} The drag&drop handler",
            "type": "qx.event.handler.DragDrop",
            "description": " The drag&drop handler"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addType": {
      "location": {
        "start": {
          "line": 141,
          "column": 4,
          "index": 4490
        },
        "end": {
          "line": 143,
          "column": 5,
          "index": 4552
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Used during <code>dragstart</code> listener to\n inform the manager about supported data types.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Data type to add to list of supported types",
            "paramName": "type",
            "description": " Data type to add to list of supported types",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addAction": {
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4777
        },
        "end": {
          "line": 153,
          "column": 5,
          "index": 4847
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Used during <code>dragstart</code> listener to\n inform the manager about supported drop actions.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to add to the list of supported actions",
            "paramName": "action",
            "description": " Action to add to the list of supported actions",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "supportsType": {
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 5194
        },
        "end": {
          "line": 167,
          "column": 5,
          "index": 5273
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given type is supported by the drag\n target (source target).\n This is used in the event listeners for <code>dragover</code>\n or <code>dragdrop</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} The type to look for",
            "paramName": "type",
            "description": " The type to look for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the given type is supported",
            "type": "Boolean",
            "description": " Whether the given type is supported"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "supportsAction": {
      "location": {
        "start": {
          "line": 179,
          "column": 4,
          "index": 5628
        },
        "end": {
          "line": 181,
          "column": 5,
          "index": 5715
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the given action is supported by the drag\n target (source target).\n This is used in the event listeners for <code>dragover</code>\n or <code>dragdrop</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The action to look for",
            "paramName": "action",
            "description": " The action to look for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the given action is supported",
            "type": "Boolean",
            "description": " Whether the given action is supported"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addData": {
      "location": {
        "start": {
          "line": 190,
          "column": 4,
          "index": 5976
        },
        "end": {
          "line": 192,
          "column": 5,
          "index": 6050
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds data of the given type to the internal storage. The data\n is available until the <code>dragend</code> event is fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any valid type",
            "paramName": "type",
            "description": " Any valid type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} Any data to store",
            "paramName": "data",
            "description": " Any data to store",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getData": {
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 6463
        },
        "end": {
          "line": 206,
          "column": 5,
          "index": 6532
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the data of the given type. Used in the <code>drop</code> listener.\n Note that this is a synchronous method and if any of the drag and drop\n events handlers are implemented using Promises, this may fail; @see\n <code>getDataAsync</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any of the supported types.",
            "paramName": "type",
            "description": " Any of the supported types.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The data for the given type",
            "type": "var",
            "description": " The data for the given type"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDataAsync": {
      "location": {
        "start": {
          "line": 214,
          "column": 4,
          "index": 6769
        },
        "end": {
          "line": 216,
          "column": 5,
          "index": 6848
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the data of the given type. Used in the <code>drop</code> listener.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any of the supported types.",
            "paramName": "type",
            "description": " Any of the supported types.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|var} The data for the given type",
            "type": "qx.Promise|var",
            "description": " The data for the given type"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentType": {
      "location": {
        "start": {
          "line": 224,
          "column": 4,
          "index": 7049
        },
        "end": {
          "line": 226,
          "column": 5,
          "index": 7124
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the type which was requested last, to be used\n in the <code>droprequest</code> listener.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The last requested data type",
            "type": "String",
            "description": " The last requested data type"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentAction": {
      "location": {
        "start": {
          "line": 238,
          "column": 4,
          "index": 7508
        },
        "end": {
          "line": 243,
          "column": 5,
          "index": 7659
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the currently selected action. Depends on the\n supported actions of the source target and the modification\n keys pressed by the user.\n Used in the <code>droprequest</code> listener.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The action. May be one of <code>move</code>,\n    <code>copy</code> or <code>alias</code>.",
            "type": "String",
            "description": " The action. May be one of <code>move</code>,\n    <code>copy</code> or <code>alias</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentActionAsync": {
      "location": {
        "start": {
          "line": 255,
          "column": 4,
          "index": 8054
        },
        "end": {
          "line": 260,
          "column": 5,
          "index": 8215
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the currently selected action. Depends on the\n supported actions of the source target and the modification\n keys pressed by the user.\n Used in the <code>droprequest</code> listener.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|String} The action. May be one of <code>move</code>,\n    <code>copy</code> or <code>alias</code>.",
            "type": "qx.Promise|String",
            "description": " The action. May be one of <code>move</code>,\n    <code>copy</code> or <code>alias</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDropAllowed": {
      "location": {
        "start": {
          "line": 272,
          "column": 4,
          "index": 8667
        },
        "end": {
          "line": 274,
          "column": 5,
          "index": 8753
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the current drop target allows the current drag target.\n This can be called from within the \"drag\" event to enable/disable\n a drop target selectively, for example based on the child item,\n above and beyond the one-time choice made by the the \"dragover\"\n event for the droppable widget itself.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "isAllowed {Boolean} False if a drop should be disallowed",
            "paramName": "isAllowed",
            "description": " False if a drop should be disallowed",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDragTarget": {
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 8898
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 8971
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the target which has been initially tapped on.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The tapped widget.",
            "type": "qx.ui.core.Widget",
            "description": " The tapped widget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopSession": {
      "location": {
        "start": {
          "line": 287,
          "column": 4,
          "index": 9074
        },
        "end": {
          "line": 289,
          "column": 5,
          "index": 9137
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the drag&amp;drop session and fires a <code>dragend</code> event.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}