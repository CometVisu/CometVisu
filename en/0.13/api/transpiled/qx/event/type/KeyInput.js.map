{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Dom",
    "members",
    "init",
    "domEvent",
    "target",
    "charCode",
    "KeyInput",
    "superclass",
    "prototype",
    "call",
    "_charCode",
    "clone",
    "embryo",
    "getCharCode",
    "getChar",
    "String",
    "fromCharCode"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/type/KeyInput.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Keyboard input event object.\r\n *\r\n * the interface of this class is based on the DOM Level 3 keyboard event\r\n * interface: http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents\r\n */\r\nqx.Class.define(\"qx.event.type.KeyInput\", {\r\n  extend: qx.event.type.Dom,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Initialize the fields of the event.\r\n     *\r\n     * @param domEvent {Event} DOM event\r\n     * @param target {Object} The event target\r\n     * @param charCode {Integer} the character code\r\n     * @return {qx.event.type.KeyInput} The initialized key event instance\r\n     */\r\n    init(domEvent, target, charCode) {\r\n      super.init(domEvent, target, null, true, true);\r\n\r\n      this._charCode = charCode;\r\n\r\n      return this;\r\n    },\r\n\r\n    // overridden\r\n    clone(embryo) {\r\n      var clone = super.clone(embryo);\r\n\r\n      clone._charCode = this._charCode;\r\n\r\n      return clone;\r\n    },\r\n\r\n    /**\r\n     * Unicode number of the pressed character.\r\n     *\r\n     * @return {Integer} Unicode number of the pressed character\r\n     */\r\n    getCharCode() {\r\n      return this._charCode;\r\n    },\r\n\r\n    /**\r\n     * Returns the pressed character\r\n     *\r\n     * @return {String} The character\r\n     */\r\n    getChar() {\r\n      return String.fromCharCode(this._charCode);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,wBAAwB,EAAE;IACxCC,MAAM,EAAEN,EAAE,CAACO,KAAK,CAACC,IAAI,CAACC,GAAG;IAEzB;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,QAAQ,EAAEC,MAAM,EAAEC,QAAQ,EAAE;QAC/Bd,EAAA,CAAAO,KAAA,CAAAC,IAAA,CAAAO,QAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAN,IAAA,CAAAO,IAAA,OAAWN,QAAQ,EAAEC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAE7C,IAAI,CAACM,SAAS,GAAGL,QAAQ;QAEzB,OAAO,IAAI;MACb,CAAC;MAED;MACAM,KAAK,WAAAA,MAACC,MAAM,EAAE;QACZ,IAAID,KAAK,GAAApB,EAAA,CAAAO,KAAA,CAAAC,IAAA,CAAAO,QAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAG,KAAA,CAAAF,IAAA,OAAeG,MAAM,CAAC;QAE/BD,KAAK,CAACD,SAAS,GAAG,IAAI,CAACA,SAAS;QAEhC,OAAOC,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIE,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO,IAAI,CAACH,SAAS;MACvB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACII,OAAO,WAAAA,QAAA,EAAG;QACR,OAAOC,MAAM,CAACC,YAAY,CAAC,IAAI,CAACN,SAAS,CAAC;MAC5C;IACF;EACF,CAAC,CAAC;EA/EFnB,EAAE,CAACO,KAAK,CAACC,IAAI,CAACO,QAAQ,CAACZ,aAAa,GAAGA,aAAa;AAAC"
}