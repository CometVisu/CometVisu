{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "CAPTURING_PHASE",
    "AT_TARGET",
    "BUBBLING_PHASE",
    "members",
    "_promises",
    "init",
    "canBubble",
    "cancelable",
    "_type",
    "_target",
    "_currentTarget",
    "_relatedTarget",
    "_originalTarget",
    "_stopPropagation",
    "_preventDefault",
    "_bubbles",
    "_cancelable",
    "_timeStamp",
    "Date",
    "getTime",
    "_eventPhase",
    "clone",
    "embryo",
    "event",
    "Pool",
    "getInstance",
    "getObject",
    "constructor",
    "stop",
    "stopPropagation",
    "preventDefault",
    "getPropagationStopped",
    "addPromise",
    "Environment",
    "select",
    "_true",
    "promise",
    "push",
    "_false",
    "Error",
    "classname",
    "getPromises",
    "getDefaultPrevented",
    "Promise",
    "reject",
    "resolve",
    "all",
    "getType",
    "setType",
    "type",
    "getEventPhase",
    "setEventPhase",
    "eventPhase",
    "getTimeStamp",
    "getTarget",
    "setTarget",
    "target",
    "getCurrentTarget",
    "setCurrentTarget",
    "currentTarget",
    "getRelatedTarget",
    "setRelatedTarget",
    "relatedTarget",
    "getOriginalTarget",
    "setOriginalTarget",
    "originalTarget",
    "getBubbles",
    "setBubbles",
    "bubbles",
    "isCancelable",
    "setCancelable",
    "Event"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/type/Event.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Basic event object.\r\n *\r\n * Please note:\r\n * Event objects are only valid during the event dispatch. After the dispatch\r\n * event objects are pooled or disposed. If you want to safe a reference to an\r\n * event instance use the {@link #clone} method.\r\n *\r\n * The interface is modeled after the DOM level 2 event interface:\r\n * http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface\r\n *\r\n * @use(qx.event.Registration)\r\n */\r\nqx.Class.define(\"qx.event.type.Event\", {\r\n  extend: qx.core.Object,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     STATICS\r\n  *****************************************************************************\r\n  */\r\n\r\n  statics: {\r\n    /** The current event phase is the capturing phase. */\r\n    CAPTURING_PHASE: 1,\r\n\r\n    /** The event is currently being evaluated at the target */\r\n    AT_TARGET: 2,\r\n\r\n    /** The current event phase is the bubbling phase. */\r\n    BUBBLING_PHASE: 3\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /** {qx.Promise[]} promises returned by event handlers */\r\n    _promises: null,\r\n\r\n    /**\r\n     * Initialize the fields of the event. The event must be initialized before\r\n     * it can be dispatched.\r\n     *\r\n     * @param canBubble {Boolean?false} Whether or not the event is a bubbling event.\r\n     *     If the event is bubbling, the bubbling can be stopped using\r\n     *     {@link #stopPropagation}\r\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\r\n     *     action prevented. The default action can either be the browser's\r\n     *     default action of a native event (e.g. open the context menu on a\r\n     *     right click) or the default action of a qooxdoo class (e.g. close\r\n     *     the window widget). The default action can be prevented by calling\r\n     *     {@link #preventDefault}\r\n     * @return {qx.event.type.Event} The initialized event instance\r\n     */\r\n    init(canBubble, cancelable) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        if (canBubble !== undefined) {\r\n          qx.core.Assert.assertBoolean(\r\n            canBubble,\r\n            \"Invalid argument value 'canBubble'.\"\r\n          );\r\n        }\r\n\r\n        if (cancelable !== undefined) {\r\n          qx.core.Assert.assertBoolean(\r\n            cancelable,\r\n            \"Invalid argument value 'cancelable'.\"\r\n          );\r\n        }\r\n      }\r\n\r\n      this._type = null;\r\n      this._target = null;\r\n      this._currentTarget = null;\r\n      this._relatedTarget = null;\r\n      this._originalTarget = null;\r\n      this._stopPropagation = false;\r\n      this._preventDefault = false;\r\n      this._bubbles = !!canBubble;\r\n      this._cancelable = !!cancelable;\r\n      this._timeStamp = new Date().getTime();\r\n      this._eventPhase = null;\r\n      this._promises = null;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Create a clone of the event object, which is not automatically disposed\r\n     * or pooled after an event dispatch.\r\n     *\r\n     * @param embryo {qx.event.type.Event?null} Optional event class, which will\r\n     *     be configured using the data of this event instance. The event must be\r\n     *     an instance of this event class. If the value is <code>null</code>,\r\n     *     a new pooled instance is created.\r\n     * @return {qx.event.type.Event} a clone of this class.\r\n     */\r\n    clone(embryo) {\r\n      if (embryo) {\r\n        var clone = embryo;\r\n      } else {\r\n        var clone = qx.event.Pool.getInstance().getObject(this.constructor);\r\n      }\r\n\r\n      clone._type = this._type;\r\n      clone._target = this._target;\r\n      clone._currentTarget = this._currentTarget;\r\n      clone._relatedTarget = this._relatedTarget;\r\n      clone._originalTarget = this._originalTarget;\r\n      clone._stopPropagation = this._stopPropagation;\r\n      clone._bubbles = this._bubbles;\r\n      clone._preventDefault = this._preventDefault;\r\n      clone._cancelable = this._cancelable;\r\n      clone._promises = this._promises;\r\n\r\n      return clone;\r\n    },\r\n\r\n    /**\r\n     * Stops event from all further processing. Execute this when the\r\n     * current handler should have \"exclusive rights\" to the event\r\n     * and no further reaction by anyone else should happen.\r\n     */\r\n    stop() {\r\n      if (this._bubbles) {\r\n        this.stopPropagation();\r\n      }\r\n\r\n      if (this._cancelable) {\r\n        this.preventDefault();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * This method is used to prevent further propagation of an event during event\r\n     * flow. If this method is called by any event listener the event will cease\r\n     * propagating through the tree. The event will complete dispatch to all listeners\r\n     * on the current event target before event flow stops.\r\n     *\r\n     */\r\n    stopPropagation() {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertTrue(\r\n          this._bubbles,\r\n          \"Cannot stop propagation on a non bubbling event: \" + this.getType()\r\n        );\r\n      }\r\n      this._stopPropagation = true;\r\n    },\r\n\r\n    /**\r\n     * Get whether further event propagation has been stopped.\r\n     *\r\n     * @return {Boolean} Whether further propagation has been stopped.\r\n     */\r\n    getPropagationStopped() {\r\n      return !!this._stopPropagation;\r\n    },\r\n\r\n    /**\r\n     * Prevent the default action of cancelable events, e.g. opening the context\r\n     * menu, ...\r\n     *\r\n     */\r\n    preventDefault() {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertTrue(\r\n          this._cancelable,\r\n          \"Cannot prevent default action on a non cancelable event: \" +\r\n            this.getType()\r\n        );\r\n      }\r\n      this._preventDefault = true;\r\n    },\r\n\r\n    /**\r\n     * Adds a promise to the list of promises returned by event handlers\r\n     * @param promise {qx.Promise} the promise to add\r\n     */\r\n    addPromise: qx.core.Environment.select(\"qx.promise\", {\r\n      true(promise) {\r\n        if (this._promises === null) {\r\n          this._promises = [promise];\r\n        } else {\r\n          this._promises.push(promise);\r\n        }\r\n      },\r\n      false() {\r\n        throw new Error(\r\n          this.classname + \".addPromise not supported because qx.promise==false\"\r\n        );\r\n      }\r\n    }),\r\n\r\n    /**\r\n     * Returns the array of promises, or null if there are no promises\r\n     * @return {qx.Promise[]?}\r\n     */\r\n    getPromises: qx.core.Environment.select(\"qx.promise\", {\r\n      true() {\r\n        return this._promises;\r\n      },\r\n      false() {\r\n        throw new Error(\r\n          this.classname +\r\n            \".getPromises not supported because qx.promise==false\"\r\n        );\r\n      }\r\n    }),\r\n\r\n    /**\r\n     * Returns a promise for this event; if the event is defaultPrevented, the promise\r\n     * is a rejected promise, otherwise it is fulfilled.  The promise returned will only\r\n     * be fulfilled when the promises added via {@link addPromise} are also fulfilled\r\n     */\r\n    promise: qx.core.Environment.select(\"qx.promise\", {\r\n      true() {\r\n        if (this.getDefaultPrevented()) {\r\n          return qx.Promise.reject();\r\n        }\r\n        if (this._promises === null) {\r\n          return qx.Promise.resolve(true);\r\n        }\r\n        return qx.Promise.all(this._promises);\r\n      },\r\n      false() {\r\n        throw new Error(\r\n          this.classname + \".promise not supported because qx.promise==false\"\r\n        );\r\n      }\r\n    }),\r\n\r\n    /**\r\n     * Get whether the default action has been prevented\r\n     *\r\n     * @return {Boolean} Whether the default action has been prevented\r\n     */\r\n    getDefaultPrevented() {\r\n      return !!this._preventDefault;\r\n    },\r\n\r\n    /**\r\n     * The name of the event\r\n     *\r\n     * @return {String} name of the event\r\n     */\r\n    getType() {\r\n      return this._type;\r\n    },\r\n\r\n    /**\r\n     * Override the event type\r\n     *\r\n     * @param type {String} new event type\r\n     */\r\n    setType(type) {\r\n      this._type = type;\r\n    },\r\n\r\n    /**\r\n     * Used to indicate which phase of event flow is currently being evaluated.\r\n     *\r\n     * @return {Integer} The current event phase. Possible values are\r\n     *         {@link #CAPTURING_PHASE}, {@link #AT_TARGET} and {@link #BUBBLING_PHASE}.\r\n     */\r\n    getEventPhase() {\r\n      return this._eventPhase;\r\n    },\r\n\r\n    /**\r\n     * Override the event phase\r\n     *\r\n     * @param eventPhase {Integer} new event phase\r\n     */\r\n    setEventPhase(eventPhase) {\r\n      this._eventPhase = eventPhase;\r\n    },\r\n\r\n    /**\r\n     * The time (in milliseconds relative to the epoch) at which the event was created.\r\n     *\r\n     * @return {Integer} the timestamp the event was created.\r\n     */\r\n    getTimeStamp() {\r\n      return this._timeStamp;\r\n    },\r\n\r\n    /**\r\n     * Returns the event target to which the event was originally\r\n     * dispatched.\r\n     *\r\n     * @return {Element} target to which the event was originally\r\n     *       dispatched.\r\n     */\r\n    getTarget() {\r\n      return this._target;\r\n    },\r\n\r\n    /**\r\n     * Override event target.\r\n     *\r\n     * @param target {Element} new event target\r\n     */\r\n    setTarget(target) {\r\n      this._target = target;\r\n    },\r\n\r\n    /**\r\n     * Get the event target node whose event listeners are currently being\r\n     * processed. This is particularly useful during event capturing and\r\n     * bubbling.\r\n     *\r\n     * @return {Element} The target the event listener is currently\r\n     *       dispatched on.\r\n     */\r\n    getCurrentTarget() {\r\n      return this._currentTarget || this._target;\r\n    },\r\n\r\n    /**\r\n     * Override current target.\r\n     *\r\n     * @param currentTarget {Element} new current target\r\n     */\r\n    setCurrentTarget(currentTarget) {\r\n      this._currentTarget = currentTarget;\r\n    },\r\n\r\n    /**\r\n     * Get the related event target. This is only configured for\r\n     * events which also had an influences on another element e.g.\r\n     * mouseover/mouseout, focus/blur, ...\r\n     *\r\n     * @return {Element} The related target\r\n     */\r\n    getRelatedTarget() {\r\n      return this._relatedTarget;\r\n    },\r\n\r\n    /**\r\n     * Override related target.\r\n     *\r\n     * @param relatedTarget {Element} new related target\r\n     */\r\n    setRelatedTarget(relatedTarget) {\r\n      this._relatedTarget = relatedTarget;\r\n    },\r\n\r\n    /**\r\n     * Get the original event target. This is only configured\r\n     * for events which are fired by another event (often when\r\n     * the target should be reconfigured for another view) e.g.\r\n     * low-level DOM event to widget event.\r\n     *\r\n     * @return {Element} The original target\r\n     */\r\n    getOriginalTarget() {\r\n      return this._originalTarget;\r\n    },\r\n\r\n    /**\r\n     * Override original target.\r\n     *\r\n     * @param originalTarget {Element} new original target\r\n     */\r\n    setOriginalTarget(originalTarget) {\r\n      this._originalTarget = originalTarget;\r\n    },\r\n\r\n    /**\r\n     * Check whether or not the event is a bubbling event. If the event can\r\n     * bubble the value is true, else the value is false.\r\n     *\r\n     * @return {Boolean} Whether the event bubbles\r\n     */\r\n    getBubbles() {\r\n      return this._bubbles;\r\n    },\r\n\r\n    /**\r\n     * Set whether the event bubbles.\r\n     *\r\n     * @param bubbles {Boolean} Whether the event bubbles\r\n     */\r\n    setBubbles(bubbles) {\r\n      this._bubbles = bubbles;\r\n    },\r\n\r\n    /**\r\n     * Get whether the event is cancelable\r\n     *\r\n     * @return {Boolean} Whether the event is cancelable\r\n     */\r\n    isCancelable() {\r\n      return this._cancelable;\r\n    },\r\n\r\n    /**\r\n     * Set whether the event is cancelable\r\n     *\r\n     * @param cancelable {Boolean} Whether the event is cancelable\r\n     */\r\n    setCancelable(cancelable) {\r\n      this._cancelable = cancelable;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}