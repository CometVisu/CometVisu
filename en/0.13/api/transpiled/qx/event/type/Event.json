{
  "className": "qx.event.type.Event",
  "packageName": "qx.event.type",
  "name": "Event",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0,
        "index": 972
      },
      "end": {
        "line": 431,
        "column": 3,
        "index": 12050
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Basic event object.\n Please note:\n Event objects are only valid during the event dispatch. After the dispatch\n event objects are pooled or disposed. If you want to safe a reference to an\n event instance use the {@link #clone} method.\n The interface is modeled after the DOM level 2 event interface:\n http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface</p>"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.event.Registration"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "CAPTURING_PHASE": {
      "location": {
        "start": {
          "line": 45,
          "column": 4,
          "index": 1300
        },
        "end": {
          "line": 45,
          "column": 22,
          "index": 1318
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The current event phase is the capturing phase.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "AT_TARGET": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1389
        },
        "end": {
          "line": 48,
          "column": 16,
          "index": 1401
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The event is currently being evaluated at the target</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "BUBBLING_PHASE": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1466
        },
        "end": {
          "line": 51,
          "column": 21,
          "index": 1483
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The current event phase is the bubbling phase.</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "_promises": {
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1753
        },
        "end": {
          "line": 62,
          "column": 19,
          "index": 1768
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{qx.Promise[]} promises returned by event handlers</p>"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "init": {
      "location": {
        "start": {
          "line": 79,
          "column": 4,
          "index": 2597
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 3472
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the fields of the event. The event must be initialized before\n it can be dispatched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "canBubble {Boolean?false} Whether or not the event is a bubbling event.\n     If the event is bubbling, the bubbling can be stopped using\n     {@link #stopPropagation}",
            "paramName": "canBubble",
            "description": " Whether or not the event is a bubbling event.\n     If the event is bubbling, the bubbling can be stopped using\n     {@link #stopPropagation}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link #preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\n     action prevented. The default action can either be the browser's\n     default action of a native event (e.g. open the context menu on a\n     right click) or the default action of a qooxdoo class (e.g. close\n     the window widget). The default action can be prevented by calling\n     {@link #preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} The initialized event instance",
            "type": "qx.event.type.Event",
            "description": " The initialized event instance"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clone": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3970
        },
        "end": {
          "line": 141,
          "column": 5,
          "index": 4609
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Create a clone of the event object, which is not automatically disposed\n or pooled after an event dispatch.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "embryo {qx.event.type.Event?null} Optional event class, which will\n     be configured using the data of this event instance. The event must be\n     an instance of this event class. If the value is <code>null</code>,\n     a new pooled instance is created.",
            "paramName": "embryo",
            "description": " Optional event class, which will\n     be configured using the data of this event instance. The event must be\n     an instance of this event class. If the value is <code>null</code>,\n     a new pooled instance is created.",
            "optional": true,
            "defaultValue": "null",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} a clone of this class.",
            "type": "qx.event.type.Event",
            "description": " a clone of this class."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object"
      ]
    },
    "stop": {
      "location": {
        "start": {
          "line": 148,
          "column": 4,
          "index": 4830
        },
        "end": {
          "line": 156,
          "column": 5,
          "index": 4981
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops event from all further processing. Execute this when the\n current handler should have \"exclusive rights\" to the event\n and no further reaction by anyone else should happen.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopPropagation": {
      "location": {
        "start": {
          "line": 165,
          "column": 4,
          "index": 5322
        },
        "end": {
          "line": 173,
          "column": 5,
          "index": 5580
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method is used to prevent further propagation of an event during event\n flow. If this method is called by any event listener the event will cease\n propagating through the tree. The event will complete dispatch to all listeners\n on the current event target before event flow stops.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPropagationStopped": {
      "location": {
        "start": {
          "line": 180,
          "column": 4,
          "index": 5744
        },
        "end": {
          "line": 182,
          "column": 5,
          "index": 5813
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get whether further event propagation has been stopped.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether further propagation has been stopped.",
            "type": "Boolean",
            "description": " Whether further propagation has been stopped."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "preventDefault": {
      "location": {
        "start": {
          "line": 189,
          "column": 4,
          "index": 5941
        },
        "end": {
          "line": 198,
          "column": 5,
          "index": 6220
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Prevent the default action of cancelable events, e.g. opening the context\n menu, â€¦</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addPromise": {
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 6370
        },
        "end": {
          "line": 217,
          "column": 6,
          "index": 6747
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds a promise to the list of promises returned by event handlers</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "promise {qx.Promise} the promise to add",
            "paramName": "promise",
            "description": " the promise to add",
            "type": "qx.Promise"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getPromises": {
      "location": {
        "start": {
          "line": 223,
          "column": 4,
          "index": 6872
        },
        "end": {
          "line": 233,
          "column": 6,
          "index": 7143
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the array of promises, or null if there are no promises</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise[]?}",
            "type": "qx.Promise[]?",
            "description": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "promise": {
      "location": {
        "start": {
          "line": 240,
          "column": 4,
          "index": 7428
        },
        "end": {
          "line": 255,
          "column": 6,
          "index": 7877
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a promise for this event; if the event is defaultPrevented, the promise\n is a rejected promise, otherwise it is fulfilled.  The promise returned will only\n be fulfilled when the promises added via {@link addPromise} are also fulfilled</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getDefaultPrevented": {
      "location": {
        "start": {
          "line": 262,
          "column": 4,
          "index": 8035
        },
        "end": {
          "line": 264,
          "column": 5,
          "index": 8101
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get whether the default action has been prevented</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the default action has been prevented",
            "type": "Boolean",
            "description": " Whether the default action has been prevented"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getType": {
      "location": {
        "start": {
          "line": 271,
          "column": 4,
          "index": 8202
        },
        "end": {
          "line": 273,
          "column": 5,
          "index": 8244
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The name of the event</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} name of the event",
            "type": "String",
            "description": " name of the event"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setType": {
      "location": {
        "start": {
          "line": 280,
          "column": 4,
          "index": 8348
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 8394
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override the event type</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} new event type",
            "paramName": "type",
            "description": " new event type",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getEventPhase": {
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 8663
        },
        "end": {
          "line": 292,
          "column": 5,
          "index": 8717
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Used to indicate which phase of event flow is currently being evaluated.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The current event phase. Possible values are\n         {@link #CAPTURING_PHASE}, {@link #AT_TARGET} and {@link #BUBBLING_PHASE}.",
            "type": "Integer",
            "description": " The current event phase. Possible values are\n         {@link #CAPTURING_PHASE}, {@link #AT_TARGET} and {@link #BUBBLING_PHASE}."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setEventPhase": {
      "location": {
        "start": {
          "line": 299,
          "column": 4,
          "index": 8830
        },
        "end": {
          "line": 301,
          "column": 5,
          "index": 8900
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override the event phase</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "eventPhase {Integer} new event phase",
            "paramName": "eventPhase",
            "description": " new event phase",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTimeStamp": {
      "location": {
        "start": {
          "line": 308,
          "column": 4,
          "index": 9080
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 9132
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The time (in milliseconds relative to the epoch) at which the event was created.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the timestamp the event was created.",
            "type": "Integer",
            "description": " the timestamp the event was created."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTarget": {
      "location": {
        "start": {
          "line": 319,
          "column": 4,
          "index": 9338
        },
        "end": {
          "line": 321,
          "column": 5,
          "index": 9384
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the event target to which the event was originally\n dispatched.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} target to which the event was originally\n       dispatched.",
            "type": "Element",
            "description": " target to which the event was originally\n       dispatched."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setTarget": {
      "location": {
        "start": {
          "line": 328,
          "column": 4,
          "index": 9492
        },
        "end": {
          "line": 330,
          "column": 5,
          "index": 9546
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override event target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} new event target",
            "paramName": "target",
            "description": " new event target",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentTarget": {
      "location": {
        "start": {
          "line": 340,
          "column": 4,
          "index": 9837
        },
        "end": {
          "line": 342,
          "column": 5,
          "index": 9913
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the event target node whose event listeners are currently being\n processed. This is particularly useful during event capturing and\n bubbling.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The target the event listener is currently\n       dispatched on.",
            "type": "Element",
            "description": " The target the event listener is currently\n       dispatched on."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setCurrentTarget": {
      "location": {
        "start": {
          "line": 349,
          "column": 4,
          "index": 10032
        },
        "end": {
          "line": 351,
          "column": 5,
          "index": 10114
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override current target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "currentTarget {Element} new current target",
            "paramName": "currentTarget",
            "description": " new current target",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRelatedTarget": {
      "location": {
        "start": {
          "line": 360,
          "column": 4,
          "index": 10363
        },
        "end": {
          "line": 362,
          "column": 5,
          "index": 10423
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the related event target. This is only configured for\n events which also had an influences on another element e.g.\n mouseover/mouseout, focus/blur, â€¦</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The related target",
            "type": "Element",
            "description": " The related target"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRelatedTarget": {
      "location": {
        "start": {
          "line": 369,
          "column": 4,
          "index": 10542
        },
        "end": {
          "line": 371,
          "column": 5,
          "index": 10624
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override related target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "relatedTarget {Element} new related target",
            "paramName": "relatedTarget",
            "description": " new related target",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getOriginalTarget": {
      "location": {
        "start": {
          "line": 381,
          "column": 4,
          "index": 10932
        },
        "end": {
          "line": 383,
          "column": 5,
          "index": 10994
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the original event target. This is only configured\n for events which are fired by another event (often when\n the target should be reconfigured for another view) e.g.\n low-level DOM event to widget event.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The original target",
            "type": "Element",
            "description": " The original target"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setOriginalTarget": {
      "location": {
        "start": {
          "line": 390,
          "column": 4,
          "index": 11116
        },
        "end": {
          "line": 392,
          "column": 5,
          "index": 11202
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Override original target.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "originalTarget {Element} new original target",
            "paramName": "originalTarget",
            "description": " new original target",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBubbles": {
      "location": {
        "start": {
          "line": 400,
          "column": 4,
          "index": 11417
        },
        "end": {
          "line": 402,
          "column": 5,
          "index": 11465
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether or not the event is a bubbling event. If the event can\n bubble the value is true, else the value is false.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event bubbles",
            "type": "Boolean",
            "description": " Whether the event bubbles"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setBubbles": {
      "location": {
        "start": {
          "line": 409,
          "column": 4,
          "index": 11591
        },
        "end": {
          "line": 411,
          "column": 5,
          "index": 11649
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the event bubbles.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "bubbles {Boolean} Whether the event bubbles",
            "paramName": "bubbles",
            "description": " Whether the event bubbles",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCancelable": {
      "location": {
        "start": {
          "line": 418,
          "column": 4,
          "index": 11779
        },
        "end": {
          "line": 420,
          "column": 5,
          "index": 11832
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get whether the event is cancelable</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event is cancelable",
            "type": "Boolean",
            "description": " Whether the event is cancelable"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setCancelable": {
      "location": {
        "start": {
          "line": 427,
          "column": 4,
          "index": 11972
        },
        "end": {
          "line": 429,
          "column": 5,
          "index": 12042
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set whether the event is cancelable</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cancelable {Boolean} Whether the event is cancelable",
            "paramName": "cancelable",
            "description": " Whether the event is cancelable",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": [
    "qx.event.type.Data",
    "qx.event.type.Drag",
    "qx.event.type.Focus",
    "qx.event.type.GeoPosition",
    "qx.event.type.Native",
    "qx.event.type.Orientation",
    "qx.io.remote.Response"
  ]
}