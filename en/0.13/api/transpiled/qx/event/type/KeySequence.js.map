{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Dom",
    "members",
    "init",
    "domEvent",
    "target",
    "identifier",
    "KeySequence",
    "superclass",
    "prototype",
    "call",
    "_keyCode",
    "keyCode",
    "_identifier",
    "clone",
    "embryo",
    "getKeyIdentifier",
    "getKeyCode",
    "isPrintable",
    "util",
    "Keyboard",
    "isPrintableKeyIdentifier"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/type/KeySequence.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Keyboard event object.\r\n *\r\n * the interface of this class is based on the DOM Level 3 keyboard event\r\n * interface: http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents\r\n */\r\nqx.Class.define(\"qx.event.type.KeySequence\", {\r\n  extend: qx.event.type.Dom,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Initialize the fields of the event.\r\n     *\r\n     * @param domEvent {Event} DOM event\r\n     * @param target {Object} The event target\r\n     * @param identifier {String} Key identifier\r\n     * @return {qx.event.type.KeySequence} The initialized key event instance\r\n     */\r\n    init(domEvent, target, identifier) {\r\n      super.init(domEvent, target, null, true, true);\r\n\r\n      this._keyCode = domEvent.keyCode;\r\n      this._identifier = identifier;\r\n\r\n      return this;\r\n    },\r\n\r\n    // overridden\r\n    clone(embryo) {\r\n      var clone = super.clone(embryo);\r\n\r\n      clone._keyCode = this._keyCode;\r\n      clone._identifier = this._identifier;\r\n\r\n      return clone;\r\n    },\r\n\r\n    /**\r\n     * Identifier of the pressed key. This property is modeled after the <em>KeyboardEvent.keyIdentifier</em> property\r\n     * of the W3C DOM 3 event specification\r\n     * (http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-KeyboardEvent-keyIdentifier).\r\n     *\r\n     * Printable keys are represented by an unicode string, non-printable keys\r\n     * have one of the following values:\r\n     *\r\n     * <table>\r\n     * <tr><th>Backspace</th><td>The Backspace (Back) key.</td></tr>\r\n     * <tr><th>Tab</th><td>The Horizontal Tabulation (Tab) key.</td></tr>\r\n     * <tr><th>Space</th><td>The Space (Spacebar) key.</td></tr>\r\n     * <tr><th>Enter</th><td>The Enter key. Note: This key identifier is also used for the Return (Macintosh numpad) key.</td></tr>\r\n     * <tr><th>Shift</th><td>The Shift key.</td></tr>\r\n     * <tr><th>Control</th><td>The Control (Ctrl) key.</td></tr>\r\n     * <tr><th>Alt</th><td>The Alt (Menu) key.</td></tr>\r\n     * <tr><th>CapsLock</th><td>The CapsLock key</td></tr>\r\n     * <tr><th>Meta</th><td>The Meta key. (Apple Meta and Windows key)</td></tr>\r\n     * <tr><th>Escape</th><td>The Escape (Esc) key.</td></tr>\r\n     * <tr><th>Left</th><td>The Left Arrow key.</td></tr>\r\n     * <tr><th>Up</th><td>The Up Arrow key.</td></tr>\r\n     * <tr><th>Right</th><td>The Right Arrow key.</td></tr>\r\n     * <tr><th>Down</th><td>The Down Arrow key.</td></tr>\r\n     * <tr><th>PageUp</th><td>The Page Up key.</td></tr>\r\n     * <tr><th>PageDown</th><td>The Page Down (Next) key.</td></tr>\r\n     * <tr><th>End</th><td>The End key.</td></tr>\r\n     * <tr><th>Home</th><td>The Home key.</td></tr>\r\n     * <tr><th>Insert</th><td>The Insert (Ins) key. (Does not fire in Opera/Win)</td></tr>\r\n     * <tr><th>Delete</th><td>The Delete (Del) Key.</td></tr>\r\n     * <tr><th>F1</th><td>The F1 key.</td></tr>\r\n     * <tr><th>F2</th><td>The F2 key.</td></tr>\r\n     * <tr><th>F3</th><td>The F3 key.</td></tr>\r\n     * <tr><th>F4</th><td>The F4 key.</td></tr>\r\n     * <tr><th>F5</th><td>The F5 key.</td></tr>\r\n     * <tr><th>F6</th><td>The F6 key.</td></tr>\r\n     * <tr><th>F7</th><td>The F7 key.</td></tr>\r\n     * <tr><th>F8</th><td>The F8 key.</td></tr>\r\n     * <tr><th>F9</th><td>The F9 key.</td></tr>\r\n     * <tr><th>F10</th><td>The F10 key.</td></tr>\r\n     * <tr><th>F11</th><td>The F11 key.</td></tr>\r\n     * <tr><th>F12</th><td>The F12 key.</td></tr>\r\n     * <tr><th>NumLock</th><td>The Num Lock key.</td></tr>\r\n     * <tr><th>PrintScreen</th><td>The Print Screen (PrintScrn, SnapShot) key.</td></tr>\r\n     * <tr><th>Scroll</th><td>The scroll lock key</td></tr>\r\n     * <tr><th>Pause</th><td>The pause/break key</td></tr>\r\n     * <tr><th>Win</th><td>The Windows Logo key</td></tr>\r\n     * <tr><th>Apps</th><td>The Application key (Windows Context Menu)</td></tr>\r\n     * </table>\r\n     *\r\n     * @return {String} The key identifier\r\n     */\r\n    getKeyIdentifier() {\r\n      return this._identifier;\r\n    },\r\n\r\n    /**\r\n     * Returns the native keyCode and is best used on keydown/keyup events to\r\n     * check which physical key was pressed.\r\n     * Don't use this on keypress events because it's erroneous and\r\n     * inconsistent across browsers. But it can be used to detect which key is\r\n     * exactly pressed (e.g. for num pad keys).\r\n     * In any regular case, you should use {@link #getKeyIdentifier} which\r\n     * takes care of all cross browser stuff.\r\n     *\r\n     * The key codes are not character codes, they are just ASCII codes to\r\n     * identify the keyboard (or other input devices) keys.\r\n     *\r\n     * @return {Number} The key code.\r\n     */\r\n    getKeyCode() {\r\n      return this._keyCode;\r\n    },\r\n\r\n    /**\r\n     * Checks whether the pressed key is printable.\r\n     *\r\n     * @return {Boolean} Whether the pressed key is printable.\r\n     */\r\n    isPrintable() {\r\n      return qx.event.util.Keyboard.isPrintableKeyIdentifier(this._identifier);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,2BAA2B,EAAE;IAC3CC,MAAM,EAAEN,EAAE,CAACO,KAAK,CAACC,IAAI,CAACC,GAAG;IAEzB;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,QAAQ,EAAEC,MAAM,EAAEC,UAAU,EAAE;QACjCd,EAAA,CAAAO,KAAA,CAAAC,IAAA,CAAAO,WAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAN,IAAA,CAAAO,IAAA,OAAWN,QAAQ,EAAEC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;QAE7C,IAAI,CAACM,QAAQ,GAAGP,QAAQ,CAACQ,OAAO;QAChC,IAAI,CAACC,WAAW,GAAGP,UAAU;QAE7B,OAAO,IAAI;MACb,CAAC;MAED;MACAQ,KAAK,WAAAA,MAACC,MAAM,EAAE;QACZ,IAAID,KAAK,GAAAtB,EAAA,CAAAO,KAAA,CAAAC,IAAA,CAAAO,WAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAK,KAAA,CAAAJ,IAAA,OAAeK,MAAM,CAAC;QAE/BD,KAAK,CAACH,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAC9BG,KAAK,CAACD,WAAW,GAAG,IAAI,CAACA,WAAW;QAEpC,OAAOC,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,gBAAgB,WAAAA,iBAAA,EAAG;QACjB,OAAO,IAAI,CAACH,WAAW;MACzB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,UAAU,WAAAA,WAAA,EAAG;QACX,OAAO,IAAI,CAACN,QAAQ;MACtB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIO,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO1B,EAAE,CAACO,KAAK,CAACoB,IAAI,CAACC,QAAQ,CAACC,wBAAwB,CAAC,IAAI,CAACR,WAAW,CAAC;MAC1E;IACF;EACF,CAAC,CAAC;EAjJFrB,EAAE,CAACO,KAAK,CAACC,IAAI,CAACO,WAAW,CAACZ,aAAa,GAAGA,aAAa;AAAC"
}