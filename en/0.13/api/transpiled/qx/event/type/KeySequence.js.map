{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Dom",
    "members",
    "init",
    "domEvent",
    "target",
    "identifier",
    "_keyCode",
    "keyCode",
    "_identifier",
    "clone",
    "embryo",
    "getKeyIdentifier",
    "getKeyCode",
    "isPrintable",
    "util",
    "Keyboard",
    "isPrintableKeyIdentifier",
    "KeySequence"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/type/KeySequence.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Keyboard event object.\n *\n * the interface of this class is based on the DOM Level 3 keyboard event\n * interface: http://www.w3.org/TR/DOM-Level-3-Events/#events-keyboardevents\n */\nqx.Class.define(\"qx.event.type.KeySequence\", {\n  extend: qx.event.type.Dom,\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Initialize the fields of the event.\n     *\n     * @param domEvent {Event} DOM event\n     * @param target {Object} The event target\n     * @param identifier {String} Key identifier\n     * @return {qx.event.type.KeySequence} The initialized key event instance\n     */\n    init(domEvent, target, identifier) {\n      super.init(domEvent, target, null, true, true);\n\n      this._keyCode = domEvent.keyCode;\n      this._identifier = identifier;\n\n      return this;\n    },\n\n    // overridden\n    clone(embryo) {\n      var clone = super.clone(embryo);\n\n      clone._keyCode = this._keyCode;\n      clone._identifier = this._identifier;\n\n      return clone;\n    },\n\n    /**\n     * Identifier of the pressed key. This property is modeled after the <em>KeyboardEvent.keyIdentifier</em> property\n     * of the W3C DOM 3 event specification\n     * (http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-KeyboardEvent-keyIdentifier).\n     *\n     * Printable keys are represented by an unicode string, non-printable keys\n     * have one of the following values:\n     *\n     * <table>\n     * <tr><th>Backspace</th><td>The Backspace (Back) key.</td></tr>\n     * <tr><th>Tab</th><td>The Horizontal Tabulation (Tab) key.</td></tr>\n     * <tr><th>Space</th><td>The Space (Spacebar) key.</td></tr>\n     * <tr><th>Enter</th><td>The Enter key. Note: This key identifier is also used for the Return (Macintosh numpad) key.</td></tr>\n     * <tr><th>Shift</th><td>The Shift key.</td></tr>\n     * <tr><th>Control</th><td>The Control (Ctrl) key.</td></tr>\n     * <tr><th>Alt</th><td>The Alt (Menu) key.</td></tr>\n     * <tr><th>CapsLock</th><td>The CapsLock key</td></tr>\n     * <tr><th>Meta</th><td>The Meta key. (Apple Meta and Windows key)</td></tr>\n     * <tr><th>Escape</th><td>The Escape (Esc) key.</td></tr>\n     * <tr><th>Left</th><td>The Left Arrow key.</td></tr>\n     * <tr><th>Up</th><td>The Up Arrow key.</td></tr>\n     * <tr><th>Right</th><td>The Right Arrow key.</td></tr>\n     * <tr><th>Down</th><td>The Down Arrow key.</td></tr>\n     * <tr><th>PageUp</th><td>The Page Up key.</td></tr>\n     * <tr><th>PageDown</th><td>The Page Down (Next) key.</td></tr>\n     * <tr><th>End</th><td>The End key.</td></tr>\n     * <tr><th>Home</th><td>The Home key.</td></tr>\n     * <tr><th>Insert</th><td>The Insert (Ins) key. (Does not fire in Opera/Win)</td></tr>\n     * <tr><th>Delete</th><td>The Delete (Del) Key.</td></tr>\n     * <tr><th>F1</th><td>The F1 key.</td></tr>\n     * <tr><th>F2</th><td>The F2 key.</td></tr>\n     * <tr><th>F3</th><td>The F3 key.</td></tr>\n     * <tr><th>F4</th><td>The F4 key.</td></tr>\n     * <tr><th>F5</th><td>The F5 key.</td></tr>\n     * <tr><th>F6</th><td>The F6 key.</td></tr>\n     * <tr><th>F7</th><td>The F7 key.</td></tr>\n     * <tr><th>F8</th><td>The F8 key.</td></tr>\n     * <tr><th>F9</th><td>The F9 key.</td></tr>\n     * <tr><th>F10</th><td>The F10 key.</td></tr>\n     * <tr><th>F11</th><td>The F11 key.</td></tr>\n     * <tr><th>F12</th><td>The F12 key.</td></tr>\n     * <tr><th>NumLock</th><td>The Num Lock key.</td></tr>\n     * <tr><th>PrintScreen</th><td>The Print Screen (PrintScrn, SnapShot) key.</td></tr>\n     * <tr><th>Scroll</th><td>The scroll lock key</td></tr>\n     * <tr><th>Pause</th><td>The pause/break key</td></tr>\n     * <tr><th>Win</th><td>The Windows Logo key</td></tr>\n     * <tr><th>Apps</th><td>The Application key (Windows Context Menu)</td></tr>\n     * </table>\n     *\n     * @return {String} The key identifier\n     */\n    getKeyIdentifier() {\n      return this._identifier;\n    },\n\n    /**\n     * Returns the native keyCode and is best used on keydown/keyup events to\n     * check which physical key was pressed.\n     * Don't use this on keypress events because it's erroneous and\n     * inconsistent across browsers. But it can be used to detect which key is\n     * exactly pressed (e.g. for num pad keys).\n     * In any regular case, you should use {@link #getKeyIdentifier} which\n     * takes care of all cross browser stuff.\n     *\n     * The key codes are not character codes, they are just ASCII codes to\n     * identify the keyboard (or other input devices) keys.\n     *\n     * @return {Number} The key code.\n     */\n    getKeyCode() {\n      return this._keyCode;\n    },\n\n    /**\n     * Checks whether the pressed key is printable.\n     *\n     * @return {Boolean} Whether the pressed key is printable.\n     */\n    isPrintable() {\n      return qx.event.util.Keyboard.isPrintableKeyIdentifier(this._identifier);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,2BAAhB,EAA6C;IAC3CC,MAAM,EAAEN,EAAE,CAACO,KAAH,CAASC,IAAT,CAAcC,GADqB;;IAG3C;AACF;AACA;AACA;AACA;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IATO,gBASFC,QATE,EASQC,MATR,EASgBC,UAThB,EAS4B;QACjC,+DAAWF,QAAX,EAAqBC,MAArB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyC,IAAzC;QAEA,KAAKE,QAAL,GAAgBH,QAAQ,CAACI,OAAzB;QACA,KAAKC,WAAL,GAAmBH,UAAnB;QAEA,OAAO,IAAP;MACD,CAhBM;MAkBP;MACAI,KAnBO,iBAmBDC,MAnBC,EAmBO;QACZ,IAAID,KAAK,mEAAeC,MAAf,CAAT;QAEAD,KAAK,CAACH,QAAN,GAAiB,KAAKA,QAAtB;QACAG,KAAK,CAACD,WAAN,GAAoB,KAAKA,WAAzB;QAEA,OAAOC,KAAP;MACD,CA1BM;;MA4BP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,gBA/EO,8BA+EY;QACjB,OAAO,KAAKH,WAAZ;MACD,CAjFM;;MAmFP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,UAjGO,wBAiGM;QACX,OAAO,KAAKN,QAAZ;MACD,CAnGM;;MAqGP;AACJ;AACA;AACA;AACA;MACIO,WA1GO,yBA0GO;QACZ,OAAOtB,EAAE,CAACO,KAAH,CAASgB,IAAT,CAAcC,QAAd,CAAuBC,wBAAvB,CAAgD,KAAKR,WAArD,CAAP;MACD;IA5GM;EATkC,CAA7C;EA1BAjB,EAAE,CAACO,KAAH,CAASC,IAAT,CAAckB,WAAd,CAA0BvB,aAA1B,GAA0CA,aAA1C"
}