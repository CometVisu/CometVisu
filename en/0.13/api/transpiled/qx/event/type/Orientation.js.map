{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Event",
    "members",
    "__orientation",
    "__mode",
    "init",
    "orientation",
    "mode",
    "Orientation",
    "superclass",
    "prototype",
    "call",
    "clone",
    "embryo",
    "getOrientation",
    "isLandscape",
    "isPortrait"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/type/Orientation.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Tino Butz (tbtz)\r\n\r\n   ======================================================================\r\n\r\n   This class contains code based on the following work:\r\n\r\n   * Unify Project\r\n\r\n     Homepage:\r\n       http://unify-project.org\r\n\r\n     Copyright:\r\n       2009-2010 Deutsche Telekom AG, Germany, http://telekom.com\r\n\r\n     License:\r\n       MIT: http://www.opensource.org/licenses/mit-license.php\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Orientation event object.\r\n */\r\nqx.Class.define(\"qx.event.type.Orientation\", {\r\n  extend: qx.event.type.Event,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __orientation: null,\r\n    __mode: null,\r\n\r\n    /**\r\n     * Initialize the fields of the event. The event must be initialized before\r\n     * it can be dispatched.\r\n     *\r\n     * @param orientation {String} One of <code>0</code>, <code>90</code> or <code>-90</code>\r\n     * @param mode {String} <code>landscape</code> or <code>portrait</code>\r\n     * @return {qx.event.type.Orientation} The initialized event instance\r\n     */\r\n    init(orientation, mode) {\r\n      super.init(false, false);\r\n\r\n      this.__orientation = orientation;\r\n      this.__mode = mode;\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get a copy of this object\r\n     *\r\n     * @param embryo {qx.event.type.Orientation?null} Optional event class, which will\r\n     *     be configured using the data of this event instance. The event must be\r\n     *     an instance of this event class. If the data is <code>null</code>,\r\n     *     a new pooled instance is created.\r\n     *\r\n     * @return {qx.event.type.Orientation} a copy of this object\r\n     */\r\n    clone(embryo) {\r\n      var clone = super.clone(embryo);\r\n\r\n      clone.__orientation = this.__orientation;\r\n      clone.__mode = this.__mode;\r\n\r\n      return clone;\r\n    },\r\n\r\n    /**\r\n     * Returns the current orientation of the viewport in degree.\r\n     *\r\n     * All possible values and their meaning:\r\n     *\r\n     * * <code>0</code>: \"Portrait\"\r\n     * * <code>-90</code>: \"Landscape (right, screen turned clockwise)\"\r\n     * * <code>90</code>: \"Landscape (left, screen turned counterclockwise)\"\r\n     * * <code>180</code>: \"Portrait (upside-down portrait)\"\r\n     *\r\n     * @return {Integer} The current orientation in degree\r\n     */\r\n    getOrientation() {\r\n      return this.__orientation;\r\n    },\r\n\r\n    /**\r\n     * Whether the viewport orientation is currently in landscape mode.\r\n     *\r\n     * @return {Boolean} <code>true</code> when the viewport orientation\r\n     *     is currently in landscape mode.\r\n     */\r\n    isLandscape() {\r\n      return this.__mode == \"landscape\";\r\n    },\r\n\r\n    /**\r\n     * Whether the viewport orientation is currently in portrait mode.\r\n     *\r\n     * @return {Boolean} <code>true</code> when the viewport orientation\r\n     *     is currently in portrait mode.\r\n     */\r\n    isPortrait() {\r\n      return this.__mode == \"portrait\";\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,2BAA2B,EAAE;IAC3CC,MAAM,EAAEN,EAAE,CAACO,KAAK,CAACC,IAAI,CAACC,KAAK;IAE3B;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPC,SAAa,EAAE,IAAI;MACnBC,SAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,WAAW,EAAEC,IAAI,EAAE;QACtBf,EAAA,CAAAO,KAAA,CAAAC,IAAA,CAAAQ,WAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAL,IAAA,CAAAM,IAAA,OAAW,KAAK,EAAE,KAAK;QAEvB,IAAI,CAACR,SAAa,GAAGG,WAAW;QAChC,IAAI,CAACF,SAAM,GAAGG,IAAI;QAElB,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,KAAK,WAAAA,MAACC,MAAM,EAAE;QACZ,IAAID,KAAK,GAAApB,EAAA,CAAAO,KAAA,CAAAC,IAAA,CAAAQ,WAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAE,KAAA,CAAAD,IAAA,OAAeE,MAAM,CAAC;QAE/BD,KAAK,CAACT,SAAa,GAAG,IAAI,CAACA,SAAa;QACxCS,KAAK,CAACR,SAAM,GAAG,IAAI,CAACA,SAAM;QAE1B,OAAOQ,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,cAAc,WAAAA,eAAA,EAAG;QACf,OAAO,IAAI,CAACX,SAAa;MAC3B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIY,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO,IAAI,CAACX,SAAM,IAAI,WAAW;MACnC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIY,UAAU,WAAAA,WAAA,EAAG;QACX,OAAO,IAAI,CAACZ,SAAM,IAAI,UAAU;MAClC;IACF;EACF,CAAC,CAAC;EAzHFZ,EAAE,CAACO,KAAK,CAACC,IAAI,CAACQ,WAAW,CAACb,aAAa,GAAGA,aAAa;AAAC"
}