{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Native",
    "statics",
    "SHIFT_MASK",
    "CTRL_MASK",
    "ALT_MASK",
    "META_MASK",
    "CAPSLOCK_MASK",
    "NUMLOCK_MASK",
    "SCROLLLOCK_MASK",
    "members",
    "_cloneNativeEvent",
    "nativeEvent",
    "clone",
    "Dom",
    "superclass",
    "prototype",
    "call",
    "shiftKey",
    "ctrlKey",
    "altKey",
    "metaKey",
    "getModifierState",
    "numLock",
    "capsLock",
    "scrollLock",
    "getModifiers",
    "mask",
    "evt",
    "_native",
    "getKeyLockState",
    "isCtrlPressed",
    "isShiftPressed",
    "isAltPressed",
    "isMetaPressed",
    "isCapsLocked",
    "isNumLocked",
    "isScrollLocked",
    "isCtrlOrCommandPressed",
    "core",
    "Environment",
    "get"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/type/Dom.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Common base class for all DOM events.\n */\nqx.Class.define(\"qx.event.type.Dom\", {\n  extend: qx.event.type.Native,\n\n  statics: {\n    /** @type {Integer} The modifier mask for the shift key. */\n    SHIFT_MASK: 1,\n\n    /** @type {Integer} The modifier mask for the control key. */\n    CTRL_MASK: 2,\n\n    /** @type {Integer} The modifier mask for the alt key. */\n    ALT_MASK: 4,\n\n    /** @type {Integer} The modifier mask for the meta key (e.g. apple key on Macs). */\n    META_MASK: 8,\n\n    /** @type {Integer} The modifier mask for the CapsLock modifier. */\n    CAPSLOCK_MASK: 16,\n\n    /** @type {Integer} The modifier mask for the NumLock modifier. */\n    NUMLOCK_MASK: 32,\n\n    /** @type {Integer} The modifier mask for the ScrollLock modifier. */\n    SCROLLLOCK_MASK: 64\n  },\n\n  members: {\n    // overridden\n    _cloneNativeEvent(nativeEvent, clone) {\n      var clone = super._cloneNativeEvent(nativeEvent, clone);\n\n      clone.shiftKey = nativeEvent.shiftKey;\n      clone.ctrlKey = nativeEvent.ctrlKey;\n      clone.altKey = nativeEvent.altKey;\n      clone.metaKey = nativeEvent.metaKey;\n\n      if (typeof nativeEvent.getModifierState === \"function\") {\n        clone.numLock = nativeEvent.getModifierState(\"NumLock\");\n        clone.capsLock = nativeEvent.getModifierState(\"CapsLock\");\n        clone.scrollLock = nativeEvent.getModifierState(\"ScrollLock\");\n      } else {\n        clone.numLock = false;\n        clone.capsLock = false;\n        clone.scrollLock = false;\n      }\n\n      return clone;\n    },\n\n    /**\n     * Return in a bit map, which modifier keys are pressed. The constants\n     * {@link #SHIFT_MASK}, {@link #CTRL_MASK}, {@link #ALT_MASK},\n     * {@link #META_MASK} and {@link #CAPSLOCK_MASK} define the bit positions\n     * of the corresponding keys.\n     *\n     * @return {Integer} A bit map with the pressed modifier keys.\n     */\n    getModifiers() {\n      var mask = 0;\n      var evt = this._native;\n      if (evt.shiftKey) {\n        mask |= qx.event.type.Dom.SHIFT_MASK;\n      }\n      if (evt.ctrlKey) {\n        mask |= qx.event.type.Dom.CTRL_MASK;\n      }\n      if (evt.altKey) {\n        mask |= qx.event.type.Dom.ALT_MASK;\n      }\n      if (evt.metaKey) {\n        mask |= qx.event.type.Dom.META_MASK;\n      }\n      return mask;\n    },\n\n    /**\n     * Return in a bit map, which lock keys are pressed. The constants\n     * {@link #CAPSLOCK_MASK}, {@link #NUMLOCK_MASK}, and {@link #SCROLLLOCK_MASK}\n     * define the bit positions of the corresponding keys.\n     *\n     * @return {Integer} A bit map with the locked keys.\n     */\n    getKeyLockState() {\n      var mask = 0;\n      var evt = this._native;\n\n      if (evt.capsLock) {\n        mask |= qx.event.type.Dom.CAPSLOCK_MASK;\n      }\n      if (evt.numLock) {\n        mask |= qx.event.type.Dom.NUMLOCK_MASK;\n      }\n      if (evt.scrollLock) {\n        mask |= qx.event.type.Dom.SCROLLLOCK_MASK;\n      }\n      return mask;\n    },\n\n    /**\n     * Returns whether the ctrl key is pressed.\n     *\n     * @return {Boolean} whether the ctrl key is pressed.\n     */\n    isCtrlPressed() {\n      return this._native.ctrlKey;\n    },\n\n    /**\n     * Returns whether the shift key is pressed.\n     *\n     * @return {Boolean} whether the shift key is pressed.\n     */\n    isShiftPressed() {\n      return this._native.shiftKey;\n    },\n\n    /**\n     * Returns whether the alt key is pressed.\n     *\n     * @return {Boolean} whether the alt key is pressed.\n     */\n    isAltPressed() {\n      return this._native.altKey;\n    },\n\n    /**\n     * Returns whether the meta key is pressed.\n     *\n     * @return {Boolean} whether the meta key is pressed.\n     */\n    isMetaPressed() {\n      return this._native.metaKey;\n    },\n\n    /**\n     * Returns whether the caps-lock modifier is active\n     *\n     * @return {Boolean} whether the CapsLock key is pressed.\n     */\n    isCapsLocked() {\n      return this._native.capsLock;\n    },\n\n    /**\n     * Returns whether the num-lock modifier is active\n     *\n     * @return {Boolean} whether the NumLock key is pressed.\n     */\n    isNumLocked() {\n      return this._native.numLock;\n    },\n\n    /**\n     * Returns whether the scroll-lock modifier is active\n     *\n     * @return {Boolean} whether the ScrollLock key is pressed.\n     */\n    isScrollLocked() {\n      return this._native.scrollLock;\n    },\n\n    /**\n     * Returns whether the ctrl key or (on the Mac) the command key is pressed.\n     *\n     * @return {Boolean} <code>true</code> if the command key is pressed on the Mac\n     *           or the ctrl key is pressed on another system.\n     */\n    isCtrlOrCommandPressed() {\n      // Opera seems to use ctrlKey for the cmd key so don't fix that for opera\n      // on mac [BUG #5884]\n      if (\n        qx.core.Environment.get(\"os.name\") == \"osx\" &&\n        qx.core.Environment.get(\"engine.name\") != \"opera\"\n      ) {\n        return this._native.metaKey;\n      } else {\n        return this._native.ctrlKey;\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,MAAM,EAAEN,EAAE,CAACO,KAAK,CAACC,IAAI,CAACC,MAAM;IAE5BC,OAAO,EAAE;MACP;MACAC,UAAU,EAAE,CAAC;MAEb;MACAC,SAAS,EAAE,CAAC;MAEZ;MACAC,QAAQ,EAAE,CAAC;MAEX;MACAC,SAAS,EAAE,CAAC;MAEZ;MACAC,aAAa,EAAE,EAAE;MAEjB;MACAC,YAAY,EAAE,EAAE;MAEhB;MACAC,eAAe,EAAE;IACnB,CAAC;IAEDC,OAAO,EAAE;MACP;MACAC,iBAAiB,WAAAA,kBAACC,WAAW,EAAEC,KAAK,EAAE;QACpC,IAAIA,KAAK,GAAArB,EAAA,CAAAO,KAAA,CAAAC,IAAA,CAAAc,GAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAL,iBAAA,CAAAM,IAAA,OAA2BL,WAAW,EAAEC,KAAK,CAAC;QAEvDA,KAAK,CAACK,QAAQ,GAAGN,WAAW,CAACM,QAAQ;QACrCL,KAAK,CAACM,OAAO,GAAGP,WAAW,CAACO,OAAO;QACnCN,KAAK,CAACO,MAAM,GAAGR,WAAW,CAACQ,MAAM;QACjCP,KAAK,CAACQ,OAAO,GAAGT,WAAW,CAACS,OAAO;QAEnC,IAAI,OAAOT,WAAW,CAACU,gBAAgB,KAAK,UAAU,EAAE;UACtDT,KAAK,CAACU,OAAO,GAAGX,WAAW,CAACU,gBAAgB,CAAC,SAAS,CAAC;UACvDT,KAAK,CAACW,QAAQ,GAAGZ,WAAW,CAACU,gBAAgB,CAAC,UAAU,CAAC;UACzDT,KAAK,CAACY,UAAU,GAAGb,WAAW,CAACU,gBAAgB,CAAC,YAAY,CAAC;QAC/D,CAAC,MAAM;UACLT,KAAK,CAACU,OAAO,GAAG,KAAK;UACrBV,KAAK,CAACW,QAAQ,GAAG,KAAK;UACtBX,KAAK,CAACY,UAAU,GAAG,KAAK;QAC1B;QAEA,OAAOZ,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIa,YAAY,WAAAA,aAAA,EAAG;QACb,IAAIC,IAAI,GAAG,CAAC;QACZ,IAAIC,GAAG,GAAG,IAAI,CAACC,OAAO;QACtB,IAAID,GAAG,CAACV,QAAQ,EAAE;UAChBS,IAAI,IAAInC,EAAE,CAACO,KAAK,CAACC,IAAI,CAACc,GAAG,CAACX,UAAU;QACtC;QACA,IAAIyB,GAAG,CAACT,OAAO,EAAE;UACfQ,IAAI,IAAInC,EAAE,CAACO,KAAK,CAACC,IAAI,CAACc,GAAG,CAACV,SAAS;QACrC;QACA,IAAIwB,GAAG,CAACR,MAAM,EAAE;UACdO,IAAI,IAAInC,EAAE,CAACO,KAAK,CAACC,IAAI,CAACc,GAAG,CAACT,QAAQ;QACpC;QACA,IAAIuB,GAAG,CAACP,OAAO,EAAE;UACfM,IAAI,IAAInC,EAAE,CAACO,KAAK,CAACC,IAAI,CAACc,GAAG,CAACR,SAAS;QACrC;QACA,OAAOqB,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIG,eAAe,WAAAA,gBAAA,EAAG;QAChB,IAAIH,IAAI,GAAG,CAAC;QACZ,IAAIC,GAAG,GAAG,IAAI,CAACC,OAAO;QAEtB,IAAID,GAAG,CAACJ,QAAQ,EAAE;UAChBG,IAAI,IAAInC,EAAE,CAACO,KAAK,CAACC,IAAI,CAACc,GAAG,CAACP,aAAa;QACzC;QACA,IAAIqB,GAAG,CAACL,OAAO,EAAE;UACfI,IAAI,IAAInC,EAAE,CAACO,KAAK,CAACC,IAAI,CAACc,GAAG,CAACN,YAAY;QACxC;QACA,IAAIoB,GAAG,CAACH,UAAU,EAAE;UAClBE,IAAI,IAAInC,EAAE,CAACO,KAAK,CAACC,IAAI,CAACc,GAAG,CAACL,eAAe;QAC3C;QACA,OAAOkB,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;MACII,aAAa,WAAAA,cAAA,EAAG;QACd,OAAO,IAAI,CAACF,OAAO,CAACV,OAAO;MAC7B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIa,cAAc,WAAAA,eAAA,EAAG;QACf,OAAO,IAAI,CAACH,OAAO,CAACX,QAAQ;MAC9B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIe,YAAY,WAAAA,aAAA,EAAG;QACb,OAAO,IAAI,CAACJ,OAAO,CAACT,MAAM;MAC5B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIc,aAAa,WAAAA,cAAA,EAAG;QACd,OAAO,IAAI,CAACL,OAAO,CAACR,OAAO;MAC7B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIc,YAAY,WAAAA,aAAA,EAAG;QACb,OAAO,IAAI,CAACN,OAAO,CAACL,QAAQ;MAC9B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIY,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO,IAAI,CAACP,OAAO,CAACN,OAAO;MAC7B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIc,cAAc,WAAAA,eAAA,EAAG;QACf,OAAO,IAAI,CAACR,OAAO,CAACJ,UAAU;MAChC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIa,sBAAsB,WAAAA,uBAAA,EAAG;QACvB;QACA;QACA,IACE9C,EAAE,CAAC+C,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,SAAS,CAAC,IAAI,KAAK,IAC3CjD,EAAE,CAAC+C,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,aAAa,CAAC,IAAI,OAAO,EACjD;UACA,OAAO,IAAI,CAACZ,OAAO,CAACR,OAAO;QAC7B,CAAC,MAAM;UACL,OAAO,IAAI,CAACQ,OAAO,CAACV,OAAO;QAC7B;MACF;IACF;EACF,CAAC,CAAC;EA3MF3B,EAAE,CAACO,KAAK,CAACC,IAAI,CAACc,GAAG,CAACnB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}