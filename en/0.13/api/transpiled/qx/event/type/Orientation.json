{
  "className": "qx.event.type.Orientation",
  "packageName": "qx.event.type",
  "name": "Orientation",
  "superClass": "qx.event.type.Event",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 37,
        "column": 0,
        "index": 869
      },
      "end": {
        "line": 122,
        "column": 3,
        "index": 3392
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Orientation event object.</p>"
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "__orientation": {
      "location": {
        "start": {
          "line": 47,
          "column": 4,
          "index": 1149
        },
        "end": {
          "line": 47,
          "column": 23,
          "index": 1168
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__mode": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1174
        },
        "end": {
          "line": 48,
          "column": 16,
          "index": 1186
        }
      },
      "type": "variable",
      "access": "private"
    },
    "init": {
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1569
        },
        "end": {
          "line": 65,
          "column": 5,
          "index": 1719
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the fields of the event. The event must be initialized before\n it can be dispatched.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "orientation {String} One of <code>0</code>, <code>90</code> or <code>-90</code>",
            "paramName": "orientation",
            "description": " One of <code>0</code>, <code>90</code> or <code>-90</code>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "mode {String} <code>landscape</code> or <code>portrait</code>",
            "paramName": "mode",
            "description": " <code>landscape</code> or <code>portrait</code>",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Orientation} The initialized event instance",
            "type": "qx.event.type.Orientation",
            "description": " The initialized event instance"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "clone": {
      "location": {
        "start": {
          "line": 77,
          "column": 4,
          "index": 2146
        },
        "end": {
          "line": 84,
          "column": 5,
          "index": 2310
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a copy of this object</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "embryo {qx.event.type.Orientation?null} Optional event class, which will\n     be configured using the data of this event instance. The event must be\n     an instance of this event class. If the data is <code>null</code>,\n     a new pooled instance is created.",
            "paramName": "embryo",
            "description": " Optional event class, which will\n     be configured using the data of this event instance. The event must be\n     an instance of this event class. If the data is <code>null</code>,\n     a new pooled instance is created.",
            "optional": true,
            "defaultValue": "null",
            "type": "qx.event.type.Orientation"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Orientation} a copy of this object",
            "type": "qx.event.type.Orientation",
            "description": " a copy of this object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event",
        "qx.core.Object"
      ]
    },
    "getOrientation": {
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 2771
        },
        "end": {
          "line": 100,
          "column": 5,
          "index": 2828
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current orientation of the viewport in degree.\n All possible values and their meaning:</p>\n<ul>\n<li><code>0</code>: \"Portrait\"</li>\n<li><code>-90</code>: \"Landscape (right, screen turned clockwise)\"</li>\n<li><code>90</code>: \"Landscape (left, screen turned counterclockwise)\"</li>\n<li><code>180</code>: \"Portrait (upside-down portrait)\"</li>\n</ul>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The current orientation in degree",
            "type": "Integer",
            "description": " The current orientation in degree"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isLandscape": {
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 3046
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 3108
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the viewport orientation is currently in landscape mode.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the viewport orientation\n     is currently in landscape mode.",
            "type": "Boolean",
            "description": " <code>true</code> when the viewport orientation\n     is currently in landscape mode."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isPortrait": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3324
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3384
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the viewport orientation is currently in portrait mode.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the viewport orientation\n     is currently in portrait mode.",
            "type": "Boolean",
            "description": " <code>true</code> when the viewport orientation\n     is currently in portrait mode."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "descendants": []
}