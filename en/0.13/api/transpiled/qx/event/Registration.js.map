{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__managers",
    "getManager",
    "target",
    "window",
    "nodeType",
    "dom",
    "Node",
    "getWindow",
    "isWindow",
    "hash",
    "$$hash",
    "core",
    "ObjectRegistry",
    "toHashCode",
    "manager",
    "event",
    "Manager",
    "removeManager",
    "mgr",
    "id",
    "getWindowId",
    "addListener",
    "type",
    "listener",
    "self",
    "capture",
    "removeListener",
    "removeListenerById",
    "removeAllListeners",
    "deleteAllListeners",
    "targetKey",
    "hasListener",
    "serializeListeners",
    "createEvent",
    "clazz",
    "args",
    "Event",
    "obj",
    "Pool",
    "getInstance",
    "getObject",
    "init",
    "apply",
    "setType",
    "dispatchEvent",
    "__fireEvent",
    "evt",
    "fireEvent",
    "tracker",
    "Utils",
    "then",
    "getDefaultPrevented",
    "fireEventAsync",
    "Promise",
    "resolve",
    "__fireNonBubblingEvent",
    "fireNonBubblingEvent",
    "arguments",
    "fireNonBubblingEventAsync",
    "Environment",
    "select",
    "true",
    "promise",
    "false",
    "Error",
    "classname",
    "PRIORITY_FIRST",
    "PRIORITY_NORMAL",
    "PRIORITY_LAST",
    "__handlers",
    "addHandler",
    "handler",
    "push",
    "sort",
    "a",
    "b",
    "PRIORITY",
    "getHandlers",
    "__dispatchers",
    "addDispatcher",
    "dispatcher",
    "priority",
    "getDispatchers",
    "Registration"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/Registration.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Wrapper for browser generic event handling.\n *\n * Supported events differ from target to target. Generally the handlers\n * in {@link qx.event.handler} defines the available features.\n *\n * @require(qx.event.Manager)\n * @require(qx.dom.Node)\n * @require(qx.lang.Function)\n */\nqx.Class.define(\"qx.event.Registration\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Static list of all instantiated event managers. The key is the qooxdoo\n     * hash value of the corresponding window\n     */\n    __managers: {},\n\n    /**\n     * Get an instance of the event manager, which can handle events for the\n     * given target.\n     *\n     * @param target {Object} Any valid event target\n     * @return {qx.event.Manager} The event manger for the target.\n     */\n    getManager(target) {\n      if (target == null) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.log.Logger.error(\n            \"qx.event.Registration.getManager(null) was called!\"\n          );\n\n          qx.log.Logger.trace(this);\n        }\n\n        target = window;\n      } else if (target.nodeType) {\n        target = qx.dom.Node.getWindow(target);\n      } else if (!qx.dom.Node.isWindow(target)) {\n        target = window;\n      }\n\n      var hash = target.$$hash || qx.core.ObjectRegistry.toHashCode(target);\n      var manager = this.__managers[hash];\n\n      if (!manager) {\n        manager = new qx.event.Manager(target, this);\n        this.__managers[hash] = manager;\n      }\n\n      return manager;\n    },\n\n    /**\n     * Removes a manager for a specific window from the list.\n     *\n     * Normally only used when the manager gets disposed through\n     * an unload event of the attached window.\n     *\n     * @param mgr {qx.event.Manager} The manager to remove\n     */\n    removeManager(mgr) {\n      var id = mgr.getWindowId();\n      delete this.__managers[id];\n    },\n\n    /**\n     * Add an event listener to a DOM target. The event listener is passed an\n     * instance of {@link qx.event.type.Event} containing all relevant information\n     * about the event as parameter.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Name of the event e.g. \"click\", \"keydown\", ...\n     * @param listener {Function} Event listener function\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener. When not given, the corresponding dispatcher\n     *         usually falls back to a default, which is the target\n     *         by convention. Note this is not a strict requirement, i.e.\n     *         custom dispatchers can follow a different strategy.\n     * @param capture {Boolean} Whether to attach the event to the\n     *         capturing phase or the bubbling phase of the event. The default is\n     *         to attach the event handler to the bubbling phase.\n     * @return {var} An opaque id, which can be used to remove the event listener\n     *         using the {@link #removeListenerById} method.\n     */\n    addListener(target, type, listener, self, capture) {\n      return this.getManager(target).addListener(\n        target,\n        type,\n        listener,\n        self,\n        capture\n      );\n    },\n\n    /**\n     * Remove an event listener from an event target.\n     *\n     * Note: All registered event listeners will automatically at page unload\n     *   so it is not necessary to detach events in the destructor.\n     *\n     * @param target {Object} The event target\n     * @param type {String} Name of the event\n     * @param listener {Function} The pointer to the event listener\n     * @param self {Object ? null} Reference to the 'this' variable inside\n     *         the event listener.\n     * @param capture {Boolean} Whether to remove the event listener of\n     *    the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the event was removed. Return <code>false</code> if\n     *    the event was already removed before.\n     */\n    removeListener(target, type, listener, self, capture) {\n      return this.getManager(target).removeListener(\n        target,\n        type,\n        listener,\n        self,\n        capture\n      );\n    },\n\n    /**\n     * Removes an event listener from an event target by an id returned by\n     * {@link #addListener}\n     *\n     * @param target {Object} The event target\n     * @param id {var} The id returned by {@link #addListener}\n     * @return {Boolean} Whether the event was removed. Return <code>false</code> if\n     *    the event was already removed before.\n     */\n    removeListenerById(target, id) {\n      return this.getManager(target).removeListenerById(target, id);\n    },\n\n    /**\n     * Remove all event listeners, which are attached to the given event target.\n     *\n     * @param target {Object} The event target to remove all event listeners from.\n     * @return {Boolean} Whether the events were existant and were removed successfully.\n     */\n    removeAllListeners(target) {\n      return this.getManager(target).removeAllListeners(target);\n    },\n\n    /**\n     * Internal helper for deleting the listeners map used during shutdown.\n     *\n     * @param target {Object} The event target to delete the internal map for\n     *    all event listeners.\n     *\n     * @internal\n     */\n    deleteAllListeners(target) {\n      var targetKey = target.$$hash;\n      if (targetKey) {\n        this.getManager(target).deleteAllListeners(targetKey);\n      }\n    },\n\n    /**\n     * Check whether there are one or more listeners for an event type\n     * registered at the target.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} The event type\n     * @param capture {Boolean ? false} Whether to check for listeners of\n     *         the bubbling or of the capturing phase.\n     * @return {Boolean} Whether the target has event listeners of the given type.\n     */\n    hasListener(target, type, capture) {\n      return this.getManager(target).hasListener(target, type, capture);\n    },\n\n    /**\n     * Returns a serialized array of all events attached on the given target.\n     *\n     * @param target {Object} Any valid event target\n     * @return {Map[]} Array of maps where everyone contains the keys:\n     *   <code>handler</code>, <code>self</code>, <code>type</code> and <code>capture</code>.\n     */\n    serializeListeners(target) {\n      return this.getManager(target).serializeListeners(target);\n    },\n\n    /**\n     * Get an event instance of the given class, which can be dispatched using\n     * an event manager. The created events must be initialized using\n     * {@link qx.event.type.Event#init}.\n     *\n     * @param type {String} The type of the event to create\n     * @param clazz {Object?qx.event.type.Event} The event class to use\n     * @param args {Array?null} Array which will be passed to\n     *       the event's init method.\n     * @return {qx.event.type.Event} An instance of the given class.\n     */\n    createEvent(type, clazz, args) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (arguments.length > 1 && clazz === undefined) {\n          throw new Error(\n            \"Create event of type \" +\n              type +\n              \" with undefined class. Please use null to explicit fallback to default event type!\"\n          );\n        }\n      }\n\n      // Fallback to default\n      if (clazz == null) {\n        clazz = qx.event.type.Event;\n      }\n\n      var obj = qx.event.Pool.getInstance().getObject(clazz);\n\n      // Initialize with given arguments\n      args ? obj.init.apply(obj, args) : obj.init();\n\n      // Setup the type\n      // Note: Native event may setup this later or using init() above\n      // using the native information.\n      if (type) {\n        obj.setType(type);\n      }\n\n      return obj;\n    },\n\n    /**\n     * Dispatch an event object on the given target.\n     *\n     * It is normally better to use {@link #fireEvent} because it uses\n     * the event pooling and is quite handy otherwise as well. After dispatching\n     * the event object will be pooled for later reuse or disposed.\n     *\n     * @param target {Object} Any valid event target\n     * @param event {qx.event.type.Event} The event object to dispatch. The event\n     *       object must be obtained using {@link #createEvent} and initialized\n     *       using {@link qx.event.type.Event#init}.\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     */\n    dispatchEvent(target, event) {\n      return this.getManager(target).dispatchEvent(target, event);\n    },\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Event} the event\n     * @see #createEvent\n     */\n    __fireEvent(target, type, clazz, args) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (arguments.length > 2 && clazz === undefined && args !== undefined) {\n          throw new Error(\n            \"Create event of type \" +\n              type +\n              \" with undefined class. Please use null to explicit fallback to default event type!\"\n          );\n        }\n\n        var msg =\n          \"Could not fire event '\" +\n          type +\n          \"' on target '\" +\n          (target ? target.classname : \"undefined\") +\n          \"': \";\n\n        qx.core.Assert.assertNotUndefined(\n          target,\n          msg + \"Invalid event target.\"\n        );\n\n        qx.core.Assert.assertNotNull(target, msg + \"Invalid event target.\");\n      }\n\n      var evt = this.createEvent(type, clazz || null, args);\n      this.getManager(target).dispatchEvent(target, evt);\n      return evt;\n    },\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     *\n     * Note about Promises in v6.0: this method has changed to return either a boolean (true if the\n     * event was prevented) or a promise which will evaluate to the same thing; this is\n     * because events are now asynchronous and preventDefault is inherently synchronous.\n     * However, although this changing in the return type is conspicuous it does not necessarily\n     * introduce a backwards compatibility issue because the \"truthy\" nature of the return\n     * is preserved.  Code which needs to take care of asynchronous issues will need to change,\n     * but that was necessary anyway, and it is rare to use the return value of this method (only\n     * one class in Qooxdoo used it).\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Boolean|qx.Promise} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     * @see #createEvent\n     */\n    fireEvent(target, type, clazz, args) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (arguments.length > 2 && clazz === undefined && args !== undefined) {\n          throw new Error(\n            \"Create event of type \" +\n              type +\n              \" with undefined class. Please use null to explicit fallback to default event type!\"\n          );\n        }\n\n        var msg =\n          \"Could not fire event '\" +\n          type +\n          \"' on target '\" +\n          (target ? target.classname : \"undefined\") +\n          \"': \";\n\n        qx.core.Assert.assertNotUndefined(\n          target,\n          msg + \"Invalid event target.\"\n        );\n\n        qx.core.Assert.assertNotNull(target, msg + \"Invalid event target.\");\n      }\n\n      var evt = this.createEvent(type, clazz || null, args);\n      var tracker = {};\n      var self = this;\n      qx.event.Utils.then(tracker, function () {\n        return self.getManager(target).dispatchEvent(target, evt);\n      });\n      return qx.event.Utils.then(tracker, function () {\n        return !evt.getDefaultPrevented();\n      });\n    },\n\n    /**\n     * Create an event object and dispatch it on the given target; equivalent to fireEvent, except that it\n     * always returns a promise\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     * \tif the default was prevented, the promise is rejected\n     * @see #createEvent\n     */\n    fireEventAsync(target, type, clazz, args) {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        return qx.Promise.resolve(this.fireEvent(target, type, clazz, args));\n      } else {\n        throw new Error(\n          this.classname +\n            \".fireEventAsync not supported because qx.promise==false\"\n        );\n      }\n    },\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Event} the event\n     * @see #createEvent\n     */\n    __fireNonBubblingEvent(target, type, clazz, args) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (arguments.length > 2 && clazz === undefined && args !== undefined) {\n          throw new Error(\n            \"Create event of type \" +\n              type +\n              \" with undefined class. Please use null to explicit fallback to default event type!\"\n          );\n        }\n      }\n\n      var mgr = this.getManager(target);\n      if (!mgr.hasListener(target, type, false)) {\n        return null;\n      }\n\n      var evt = this.createEvent(type, clazz || null, args);\n      mgr.dispatchEvent(target, evt);\n      return evt;\n    },\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {Boolean} whether the event default was prevented or not.\n     *     Returns true, when the event was NOT prevented.\n     * @see #createEvent\n     */\n    fireNonBubblingEvent(target, type, clazz, args) {\n      var evt = this.__fireNonBubblingEvent.apply(this, arguments);\n      if (evt === null) {\n        return true;\n      }\n      return !evt.getDefaultPrevented();\n    },\n\n    /**\n     * Create an event object and dispatch it on the given target.\n     * The event dispatched with this method does never bubble! Use only if you\n     * are sure that bubbling is not required.\n     *\n     * @param target {Object} Any valid event target\n     * @param type {String} Event type to fire\n     * @param clazz {Class?qx.event.type.Event} The event class\n     * @param args {Array?null} Arguments, which will be passed to\n     *       the event's init method.\n     * @return {qx.Promise} a promise aggregated from the event handlers;\n     * \tif the default was prevented, the promise is rejected\n     * @see #createEvent\n     */\n    fireNonBubblingEventAsync: qx.core.Environment.select(\"qx.promise\", {\n      true(target, type, clazz, args) {\n        var evt = this.__fireNonBubblingEvent.apply(this, arguments);\n        if (evt === null) {\n          return qx.Promise.resolve(true);\n        }\n        return evt.promise();\n      },\n      false() {\n        throw new Error(\n          this.classname +\n            \".fireNonBubblingEventAsync not supported because qx.promise==false\"\n        );\n      }\n    }),\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER/DISPATCHER PRIORITY\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Integer} Highest priority. Used by handlers and dispatchers. */\n    PRIORITY_FIRST: -32000,\n\n    /** @type {Integer} Default priority. Used by handlers and dispatchers. */\n    PRIORITY_NORMAL: 0,\n\n    /** @type {Integer} Lowest priority. Used by handlers and dispatchers. */\n    PRIORITY_LAST: 32000,\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER REGISTRATION\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Array} Contains all known event handlers */\n    __handlers: [],\n\n    /**\n     * Register an event handler.\n     *\n     * @param handler {qx.event.IEventHandler} Event handler to add\n     * @throws {Error} if the handler does not have the IEventHandler interface.\n     */\n    addHandler(handler) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInterface(\n          handler,\n          qx.event.IEventHandler,\n          \"Invalid event handler.\"\n        );\n      }\n\n      // Append to list\n      this.__handlers.push(handler);\n\n      // Re-sort list\n      this.__handlers.sort(function (a, b) {\n        return a.PRIORITY - b.PRIORITY;\n      });\n    },\n\n    /**\n     * Get a list of registered event handlers.\n     *\n     * @return {qx.event.IEventHandler[]} registered event handlers\n     */\n    getHandlers() {\n      return this.__handlers;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT DISPATCHER REGISTRATION\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Array} Contains all known event dispatchers */\n    __dispatchers: [],\n\n    /**\n     * Register an event dispatcher.\n     *\n     * @param dispatcher {qx.event.IEventDispatcher} Event dispatcher to add\n     * @param priority {Integer} One of\n     * {@link qx.event.Registration#PRIORITY_FIRST},\n     * {@link qx.event.Registration#PRIORITY_NORMAL}\n     *       or {@link qx.event.Registration#PRIORITY_LAST}.\n     * @throws {Error} if the dispatcher does not have the IEventHandler interface.\n     */\n    addDispatcher(dispatcher, priority) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInterface(\n          dispatcher,\n          qx.event.IEventDispatcher,\n          \"Invalid event dispatcher!\"\n        );\n      }\n\n      // Append to list\n      this.__dispatchers.push(dispatcher);\n\n      // Re-sort list\n      this.__dispatchers.sort(function (a, b) {\n        return a.PRIORITY - b.PRIORITY;\n      });\n    },\n\n    /**\n     * Get a list of registered event dispatchers.\n     *\n     * @return {qx.event.IEventDispatcher[]} all registered event dispatcher\n     */\n    getDispatchers() {\n      return this.__dispatchers;\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}