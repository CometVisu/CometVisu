{
  "className": "qx.event.dispatch.MouseCapture",
  "packageName": "qx.event.dispatch",
  "name": "MouseCapture",
  "superClass": "qx.event.dispatch.AbstractBubbling",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0,
        "index": 845
      },
      "end": {
        "line": 250,
        "column": 3,
        "index": 7396
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Implementation of the Internet Explorer specific event capturing mode for\n mouse events http://msdn2.microsoft.com/en-us/library/ms536742.aspx.\n This class is used internally by {@link qx.event.Manager} to do mouse event\n capturing.</p>"
        }
      ],
      "@use": [
        {
          "name": "@use",
          "body": "qx.event.handler.Focus"
        },
        {
          "name": "@use",
          "body": "qx.event.handler.Window"
        },
        {
          "name": "@use",
          "body": "qx.event.handler.Capture"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 31,
        "column": 2,
        "index": 1119
      },
      "end": {
        "line": 39,
        "column": 3,
        "index": 1495
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "manager {qx.event.Manager} Event manager for the window to use",
          "paramName": "manager",
          "description": " Event manager for the window to use",
          "type": "qx.event.Manager"
        },
        {
          "name": "@param",
          "body": "registration {qx.event.Registration} The event registration to use",
          "paramName": "registration",
          "description": " The event registration to use",
          "type": "qx.event.Registration"
        }
      ]
    }
  },
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 43,
          "column": 4,
          "index": 1574
        },
        "end": {
          "line": 43,
          "column": 50,
          "index": 1620
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this dispatcher"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "__registration": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1703
        },
        "end": {
          "line": 48,
          "column": 24,
          "index": 1723
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__captureElement": {
      "location": {
        "start": {
          "line": 49,
          "column": 4,
          "index": 1730
        },
        "end": {
          "line": 49,
          "column": 26,
          "index": 1752
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__containerCapture": {
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1759
        },
        "end": {
          "line": 50,
          "column": 28,
          "index": 1783
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__window": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1790
        },
        "end": {
          "line": 51,
          "column": 18,
          "index": 1804
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_getParent": {
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1832
        },
        "end": {
          "line": 56,
          "column": 5,
          "index": 1892
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "appearsIn": [
        "qx.event.dispatch.AbstractBubbling"
      ]
    },
    "canDispatchEvent": {
      "location": {
        "start": {
          "line": 65,
          "column": 4,
          "index": 2134
        },
        "end": {
          "line": 67,
          "column": 5,
          "index": 2251
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "appearsIn": [
        "qx.event.dispatch.AbstractBubbling",
        "qx.event.IEventDispatcher"
      ]
    },
    "dispatchEvent": {
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 2279
        },
        "end": {
          "line": 86,
          "column": 5,
          "index": 2682
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "appearsIn": [
        "qx.event.dispatch.AbstractBubbling",
        "qx.event.IEventDispatcher",
        "qx.core.Object",
        "qx.core.MEvent"
      ]
    },
    "__captureEvents": {
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2955
        },
        "end": {
          "line": 113,
          "column": 5,
          "index": 3265
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__captureEvents)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "activateCapture": {
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3825
        },
        "end": {
          "line": 169,
          "column": 5,
          "index": 4938
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the given element as target for event</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The element which should capture the mouse events.",
            "paramName": "element",
            "description": " The element which should capture the mouse events.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "containerCapture {Boolean?true} If true all events originating in\n   the container are captured. IF false events originating in the container\n   are not captured.",
            "paramName": "containerCapture",
            "description": " If true all events originating in\n   the container are captured. IF false events originating in the container\n   are not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCaptureElement": {
      "location": {
        "start": {
          "line": 177,
          "column": 4,
          "index": 5120
        },
        "end": {
          "line": 179,
          "column": 5,
          "index": 5185
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the element currently capturing events.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element|null} The current capture element. This value may be\n    null.",
            "type": "Element|null",
            "description": " The current capture element. This value may be\n    null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "releaseCapture": {
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 5252
        },
        "end": {
          "line": 201,
          "column": 5,
          "index": 5668
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stop capturing of mouse events.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasNativeCapture": {
      "location": {
        "start": {
          "line": 204,
          "column": 4,
          "index": 5743
        },
        "end": {
          "line": 208,
          "column": 60,
          "index": 6016
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the browser should use native mouse capturing</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "nativeSetCapture": {
      "location": {
        "start": {
          "line": 223,
          "column": 4,
          "index": 6666
        },
        "end": {
          "line": 229,
          "column": 6,
          "index": 6867
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If the browser supports native mouse capturing, sets the mouse capture to\n the object that belongs to the current document.\n Please note that under Windows 7 (but not Windows 8), capturing is\n not only applied to mouse events as expected, but also to native pointer events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The capture DOM element",
            "paramName": "element",
            "description": " The capture DOM element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "containerCapture {Boolean?true} If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "paramName": "containerCapture",
            "description": " If true all events originating in\n   the container are captured. If false events originating in the container\n   are not captured.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element, containerCapture)"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "nativeReleaseCapture": {
      "location": {
        "start": {
          "line": 238,
          "column": 4,
          "index": 7142
        },
        "end": {
          "line": 244,
          "column": 6,
          "index": 7307
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>If the browser supports native mouse capturing, removes mouse capture\n from the object in the current document.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} The DOM element to release the capture for",
            "paramName": "element",
            "description": " The DOM element to release the capture for",
            "type": "Element"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(element)"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 247,
        "column": 2,
        "index": 7319
      },
      "end": {
        "line": 249,
        "column": 3,
        "index": 7391
      }
    }
  },
  "descendants": []
}