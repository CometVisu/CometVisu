{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventHandler",
    "IDisposable",
    "construct",
    "manager",
    "constructor",
    "call",
    "__manager",
    "__window",
    "getWindow",
    "Environment",
    "get",
    "__root",
    "document",
    "documentElement",
    "__lastUpDownType",
    "_initKeyObserver",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "keyup",
    "keydown",
    "keypress",
    "keyinput",
    "TARGET_CHECK",
    "TARGET_DOMNODE",
    "IGNORE_CAN_HANDLE",
    "members",
    "__onKeyUpDownWrapper",
    "__lastKeyCode",
    "__inputListeners",
    "__onKeyPressWrapper",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "_fireInputEvent",
    "domEvent",
    "charCode",
    "__getEventTarget",
    "tracker",
    "self",
    "offsetWidth",
    "createEvent",
    "KeyInput",
    "Utils",
    "then",
    "dispatchEvent",
    "fireEvent",
    "Data",
    "promise",
    "_fireSequenceEvent",
    "keyIdentifier",
    "keyCode",
    "KeySequence",
    "getDefaultPrevented",
    "util",
    "Keyboard",
    "isNonPrintableKeyCode",
    "_emulateKeyPress",
    "__P_224_8",
    "focusHandler",
    "getHandler",
    "handler",
    "Focus",
    "getActive",
    "getFocus",
    "body",
    "lang",
    "Function",
    "listener",
    "__onKeyUpDown",
    "__onKeyPress",
    "Event",
    "bom",
    "addNativeListener",
    "_stopKeyObserver",
    "removeNativeListener",
    "key",
    "callback",
    "GlobalError",
    "observeMethod",
    "select",
    "geckoWebkitMshtml",
    "track",
    "_idealKeyHandler",
    "isModifierDown",
    "ctrlKey",
    "altKey",
    "metaKey",
    "opera",
    "__firefoxInputFix",
    "gecko",
    "tagName",
    "toLowerCase",
    "getAttribute",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "stopPropagation",
    "mshtml",
    "window",
    "_charCode2KeyCode",
    "webkit",
    "keyCodeToIdentifierMap",
    "eventType",
    "keyCodeToIdentifier",
    "charCodeToIdentifier",
    "_identifierToKeyCode",
    "identifierToKeyCodeMap",
    "charCodeAt",
    "destruct",
    "defer",
    "addHandler"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/handler/Keyboard.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class provides unified key event handler for Internet Explorer,\n * Firefox, Opera and Safari.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.event.handler.UserAction)\n */\nqx.Class.define(\"qx.event.handler.Keyboard\", {\n  extend: qx.core.Object,\n  implement: [qx.event.IEventHandler, qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct(manager) {\n    super();\n\n    // Define shorthands\n    this.__manager = manager;\n    this.__window = manager.getWindow();\n\n    // Gecko ignores key events when not explicitly clicked in the document.\n    if (qx.core.Environment.get(\"engine.name\") == \"gecko\") {\n      this.__root = this.__window;\n    } else {\n      this.__root = this.__window.document.documentElement;\n    }\n\n    // Internal sequence cache\n    this.__lastUpDownType = {};\n\n    // Initialize observer\n    this._initKeyObserver();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY: qx.event.Registration.PRIORITY_NORMAL,\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES: {\n      keyup: 1,\n      keydown: 1,\n      keypress: 1,\n      keyinput: 1\n    },\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK: qx.event.IEventHandler.TARGET_DOMNODE,\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE: true\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __onKeyUpDownWrapper: null,\n    __manager: null,\n    __window: null,\n    __root: null,\n    __lastUpDownType: null,\n    __lastKeyCode: null,\n    __inputListeners: null,\n    __onKeyPressWrapper: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent(target, type) {},\n\n    // interface implementation\n    registerEvent(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    // interface implementation\n    unregisterEvent(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire a key input event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param charCode {Integer} character code\n     * @return {qx.Promise?} a promise if the event handlers created one\n     */\n    _fireInputEvent(domEvent, charCode) {\n      var target = this.__getEventTarget();\n      var tracker = {};\n      var self = this;\n\n      // Only fire when target is defined and visible\n      if (target && target.offsetWidth != 0) {\n        var event = qx.event.Registration.createEvent(\n          \"keyinput\",\n          qx.event.type.KeyInput,\n          [domEvent, target, charCode]\n        );\n\n        qx.event.Utils.then(tracker, function () {\n          self.__manager.dispatchEvent(target, event);\n        });\n      }\n\n      // Fire user action event\n      // Needs to check if still alive first\n      if (this.__window) {\n        var self = this;\n        qx.event.Utils.then(tracker, function () {\n          return qx.event.Registration.fireEvent(\n            self.__window,\n            \"useraction\",\n            qx.event.type.Data,\n            [\"keyinput\"]\n          );\n        });\n      }\n\n      return tracker.promise;\n    },\n\n    /**\n     * Fire a key up/down/press event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String} type og the event\n     * @param keyIdentifier {String} key identifier\n     * @return {qx.Promise?} a promise, if any of the event handlers returned a promise\n     */\n    _fireSequenceEvent(domEvent, type, keyIdentifier) {\n      var target = this.__getEventTarget();\n      var keyCode = domEvent.keyCode;\n      var tracker = {};\n      var self = this;\n\n      // Fire key event\n      var event = qx.event.Registration.createEvent(\n        type,\n        qx.event.type.KeySequence,\n        [domEvent, target, keyIdentifier]\n      );\n\n      qx.event.Utils.then(tracker, function () {\n        return self.__manager.dispatchEvent(target, event);\n      });\n\n      // IE and Safari suppress a \"keypress\" event if the \"keydown\" event's\n      // default action was prevented. In this case we emulate the \"keypress\"\n      //\n      // FireFox suppresses \"keypress\" when \"keydown\" default action is prevented.\n      // from version 29: https://bugzilla.mozilla.org/show_bug.cgi?id=935876.\n      if (event.getDefaultPrevented() && type == \"keydown\") {\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\" ||\n          qx.core.Environment.get(\"engine.name\") == \"webkit\" ||\n          (qx.core.Environment.get(\"engine.name\") == \"gecko\" &&\n            qx.core.Environment.get(\"browser.version\") >= 29)\n        ) {\n          // some key press events are already emulated. Ignore these events.\n          if (\n            !qx.event.util.Keyboard.isNonPrintableKeyCode(keyCode) &&\n            !this._emulateKeyPress[keyCode]\n          ) {\n            qx.event.Utils.then(tracker, function () {\n              return self._fireSequenceEvent(\n                domEvent,\n                \"keypress\",\n                keyIdentifier\n              );\n            });\n          }\n        }\n      }\n\n      // Fire user action event\n      // Needs to check if still alive first\n      if (this.__window) {\n        qx.event.Utils.then(tracker, function () {\n          return qx.event.Registration.fireEvent(\n            self.__window,\n            \"useraction\",\n            qx.event.type.Data,\n            [type]\n          );\n        });\n      }\n\n      return tracker.promise;\n    },\n\n    /**\n     * Get the target element for key events\n     *\n     * @return {Element} the event target element\n     */\n    __getEventTarget() {\n      var focusHandler = this.__manager.getHandler(qx.event.handler.Focus);\n      var target = focusHandler.getActive();\n\n      // Fallback to focused element when active is null or invisible\n      if (!target || target.offsetWidth == 0) {\n        target = focusHandler.getFocus();\n      }\n\n      // Fallback to body when focused is null or invisible\n      if (!target || target.offsetWidth == 0) {\n        target = this.__manager.getWindow().document.body;\n      }\n\n      return target;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER INIT/STOP\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the native key event listeners.\n     *\n     * @signature function()\n     */\n    _initKeyObserver() {\n      this.__onKeyUpDownWrapper = qx.lang.Function.listener(\n        this.__onKeyUpDown,\n        this\n      );\n\n      this.__onKeyPressWrapper = qx.lang.Function.listener(\n        this.__onKeyPress,\n        this\n      );\n\n      var Event = qx.bom.Event;\n\n      Event.addNativeListener(this.__root, \"keyup\", this.__onKeyUpDownWrapper);\n      Event.addNativeListener(\n        this.__root,\n        \"keydown\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.addNativeListener(\n        this.__root,\n        \"keypress\",\n        this.__onKeyPressWrapper\n      );\n    },\n\n    /**\n     * Stops the native key event listeners.\n     *\n     * @signature function()\n     */\n    _stopKeyObserver() {\n      var Event = qx.bom.Event;\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keyup\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keydown\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keypress\",\n        this.__onKeyPressWrapper\n      );\n\n      for (var key in this.__inputListeners || {}) {\n        var listener = this.__inputListeners[key];\n        Event.removeNativeListener(\n          listener.target,\n          \"keypress\",\n          listener.callback\n        );\n      }\n      delete this.__inputListeners;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE EVENT OBSERVERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Low level handler for \"keyup\" and \"keydown\" events\n     *\n     * @internal\n     * @signature function(domEvent)\n     * @param domEvent {Event} DOM event object\n     */\n    __onKeyUpDown: qx.event.GlobalError.observeMethod(\n      qx.core.Environment.select(\"engine.name\", {\n        \"gecko|webkit|mshtml\"(domEvent) {\n          var keyCode = 0;\n          var charCode = 0;\n          var type = domEvent.type;\n\n          keyCode = domEvent.keyCode;\n\n          var tracker = {};\n          var self = this;\n\n          qx.event.Utils.track(\n            tracker,\n            this._idealKeyHandler(keyCode, charCode, type, domEvent)\n          );\n\n          // On non print-able character be sure to add a keypress event\n          if (type == \"keydown\") {\n            /*\n             * We need an artificial keypress event for every keydown event.\n             * Newer browsers do not fire keypress for a regular charachter key (e.g when typing 'a')\n             * if it was typed with the CTRL, ALT or META Key pressed during typing, like\n             * doing it when typing the combination CTRL+A\n             */\n            var isModifierDown =\n              domEvent.ctrlKey || domEvent.altKey || domEvent.metaKey;\n\n            // non-printable, backspace, tab or the modfier keys are down\n            if (\n              qx.event.util.Keyboard.isNonPrintableKeyCode(keyCode) ||\n              this._emulateKeyPress[keyCode] ||\n              isModifierDown\n            ) {\n              qx.event.Utils.then(tracker, function () {\n                return self._idealKeyHandler(\n                  keyCode,\n                  charCode,\n                  \"keypress\",\n                  domEvent\n                );\n              });\n            }\n          }\n\n          // Store last type\n          this.__lastUpDownType[keyCode] = type;\n\n          return tracker.promise;\n        },\n\n        opera(domEvent) {\n          this.__lastKeyCode = domEvent.keyCode;\n          return this._idealKeyHandler(\n            domEvent.keyCode,\n            0,\n            domEvent.type,\n            domEvent\n          );\n        }\n      })\n    ),\n\n    /**\n     * some keys like \"up\", \"down\", \"pageup\", \"pagedown\" do not bubble a\n     * \"keypress\" event in Firefox. To work around this bug we attach keypress\n     * listeners directly to the input events.\n     *\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=467513\n     *\n     * @signature function(target, type, keyCode)\n     * @param target {Element} The event target\n     * @param type {String} The event type\n     * @param keyCode {Integer} the key code\n     */\n    __firefoxInputFix: qx.core.Environment.select(\"engine.name\", {\n      gecko(target, type, keyCode) {\n        if (\n          type === \"keydown\" &&\n          (keyCode == 33 || keyCode == 34 || keyCode == 38 || keyCode == 40) &&\n          target.type == \"text\" &&\n          target.tagName.toLowerCase() === \"input\" &&\n          target.getAttribute(\"autoComplete\") !== \"off\"\n        ) {\n          if (!this.__inputListeners) {\n            this.__inputListeners = {};\n          }\n          var hash = qx.core.ObjectRegistry.toHashCode(target);\n          if (this.__inputListeners[hash]) {\n            return;\n          }\n          var self = this;\n          this.__inputListeners[hash] = {\n            target: target,\n            callback(domEvent) {\n              qx.bom.Event.stopPropagation(domEvent);\n              self.__onKeyPress(domEvent);\n            }\n          };\n\n          var listener = qx.event.GlobalError.observeMethod(\n            this.__inputListeners[hash].callback\n          );\n\n          qx.bom.Event.addNativeListener(target, \"keypress\", listener);\n        }\n      },\n\n      default: null\n    }),\n\n    /**\n     * Low level key press handler\n     *\n     * @signature function(domEvent)\n     * @param domEvent {Event} DOM event object\n     */\n    __onKeyPress: qx.event.GlobalError.observeMethod(\n      qx.core.Environment.select(\"engine.name\", {\n        mshtml(domEvent) {\n          domEvent = window.event || domEvent;\n\n          if (this._charCode2KeyCode[domEvent.keyCode]) {\n            return this._idealKeyHandler(\n              this._charCode2KeyCode[domEvent.keyCode],\n              0,\n              domEvent.type,\n              domEvent\n            );\n          } else {\n            return this._idealKeyHandler(\n              0,\n              domEvent.keyCode,\n              domEvent.type,\n              domEvent\n            );\n          }\n        },\n\n        gecko(domEvent) {\n          if (qx.core.Environment.get(\"engine.version\") < 66) {\n            var charCode = domEvent.charCode;\n            var type = domEvent.type;\n\n            return this._idealKeyHandler(\n              domEvent.keyCode,\n              charCode,\n              type,\n              domEvent\n            );\n          } else {\n            if (this._charCode2KeyCode[domEvent.keyCode]) {\n              return this._idealKeyHandler(\n                this._charCode2KeyCode[domEvent.keyCode],\n                0,\n                domEvent.type,\n                domEvent\n              );\n            } else {\n              return this._idealKeyHandler(\n                0,\n                domEvent.keyCode,\n                domEvent.type,\n                domEvent\n              );\n            }\n          }\n        },\n\n        webkit(domEvent) {\n          if (this._charCode2KeyCode[domEvent.keyCode]) {\n            return this._idealKeyHandler(\n              this._charCode2KeyCode[domEvent.keyCode],\n              0,\n              domEvent.type,\n              domEvent\n            );\n          } else {\n            return this._idealKeyHandler(\n              0,\n              domEvent.keyCode,\n              domEvent.type,\n              domEvent\n            );\n          }\n        },\n\n        opera(domEvent) {\n          var keyCode = domEvent.keyCode;\n          var type = domEvent.type;\n\n          // Some keys are identified differently for key up/down and keypress\n          // (e.g. \"v\" gets identified as \"F7\").\n          // So we store the last key up/down keycode and compare it to the\n          // current keycode.\n          // See http://bugzilla.qooxdoo.org/show_bug.cgi?id=603\n          if (keyCode != this.__lastKeyCode) {\n            return this._idealKeyHandler(0, this.__lastKeyCode, type, domEvent);\n          } else {\n            if (\n              qx.event.util.Keyboard.keyCodeToIdentifierMap[domEvent.keyCode]\n            ) {\n              return this._idealKeyHandler(\n                domEvent.keyCode,\n                0,\n                domEvent.type,\n                domEvent\n              );\n            } else {\n              return this._idealKeyHandler(\n                0,\n                domEvent.keyCode,\n                domEvent.type,\n                domEvent\n              );\n            }\n          }\n        }\n      })\n    ),\n\n    /*\n    ---------------------------------------------------------------------------\n      IDEAL KEY HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Key handler for an idealized browser.\n     * Runs after the browser specific key handlers have normalized the key events.\n     *\n     * @param keyCode {String} keyboard code\n     * @param charCode {String} character code\n     * @param eventType {String} type of the event (keydown, keypress, keyup)\n     * @param domEvent {Element} DomEvent\n     * @return {qx.Promise?} a promise, if an event handler created one\n     */\n    _idealKeyHandler(keyCode, charCode, eventType, domEvent) {\n      var keyIdentifier;\n\n      // Use: keyCode\n      if (keyCode || (!keyCode && !charCode)) {\n        keyIdentifier = qx.event.util.Keyboard.keyCodeToIdentifier(keyCode);\n\n        return this._fireSequenceEvent(domEvent, eventType, keyIdentifier);\n      }\n\n      // Use: charCode\n      else {\n        keyIdentifier = qx.event.util.Keyboard.charCodeToIdentifier(charCode);\n\n        var tracker = {};\n        var self = this;\n        qx.event.Utils.track(\n          tracker,\n          this._fireSequenceEvent(domEvent, \"keypress\", keyIdentifier)\n        );\n\n        return qx.event.Utils.then(tracker, function () {\n          return self._fireInputEvent(domEvent, charCode);\n        });\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      KEY MAPS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} maps the charcodes of special keys for key press emulation\n     *\n     * @lint ignoreReferenceField(_emulateKeyPress)\n     */\n    _emulateKeyPress: qx.core.Environment.select(\"engine.name\", {\n      mshtml: {\n        8: true,\n        9: true\n      },\n\n      webkit: {\n        8: true,\n        9: true,\n        27: true\n      },\n\n      gecko:\n        qx.core.Environment.get(\"browser.version\") >= 65\n          ? {\n              8: true,\n              9: true,\n              27: true\n            }\n          : {},\n\n      default: {}\n    }),\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * converts a key identifier back to a keycode\n     *\n     * @param keyIdentifier {String} The key identifier to convert\n     * @return {Integer} keyboard code\n     */\n    _identifierToKeyCode(keyIdentifier) {\n      return (\n        qx.event.util.Keyboard.identifierToKeyCodeMap[keyIdentifier] ||\n        keyIdentifier.charCodeAt(0)\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._stopKeyObserver();\n    this.__lastKeyCode =\n      this.__manager =\n      this.__window =\n      this.__root =\n      this.__lastUpDownType =\n        null;\n  },\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer(statics, members) {\n    // register at the event handler\n    qx.event.Registration.addHandler(statics);\n\n    if (qx.core.Environment.get(\"engine.name\") !== \"opera\") {\n      members._charCode2KeyCode = {\n        13: 13,\n        27: 27\n      };\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}