{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventHandler",
    "IDisposable",
    "construct",
    "manager",
    "__manager",
    "__window",
    "getWindow",
    "Environment",
    "get",
    "__root",
    "document",
    "documentElement",
    "__lastUpDownType",
    "_initKeyObserver",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "keyup",
    "keydown",
    "keypress",
    "keyinput",
    "TARGET_CHECK",
    "TARGET_DOMNODE",
    "IGNORE_CAN_HANDLE",
    "members",
    "__onKeyUpDownWrapper",
    "__lastKeyCode",
    "__inputListeners",
    "__onKeyPressWrapper",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "_fireInputEvent",
    "domEvent",
    "charCode",
    "__getEventTarget",
    "tracker",
    "self",
    "offsetWidth",
    "createEvent",
    "KeyInput",
    "Utils",
    "then",
    "dispatchEvent",
    "fireEvent",
    "Data",
    "promise",
    "_fireSequenceEvent",
    "keyIdentifier",
    "keyCode",
    "KeySequence",
    "getDefaultPrevented",
    "util",
    "Keyboard",
    "isNonPrintableKeyCode",
    "_emulateKeyPress",
    "focusHandler",
    "getHandler",
    "handler",
    "Focus",
    "getActive",
    "getFocus",
    "body",
    "lang",
    "Function",
    "listener",
    "__onKeyUpDown",
    "__onKeyPress",
    "Event",
    "bom",
    "addNativeListener",
    "_stopKeyObserver",
    "removeNativeListener",
    "key",
    "callback",
    "GlobalError",
    "observeMethod",
    "select",
    "track",
    "_idealKeyHandler",
    "isModifierDown",
    "ctrlKey",
    "altKey",
    "metaKey",
    "opera",
    "__firefoxInputFix",
    "gecko",
    "tagName",
    "toLowerCase",
    "getAttribute",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "stopPropagation",
    "mshtml",
    "window",
    "_charCode2KeyCode",
    "webkit",
    "keyCodeToIdentifierMap",
    "eventType",
    "keyCodeToIdentifier",
    "charCodeToIdentifier",
    "_identifierToKeyCode",
    "identifierToKeyCodeMap",
    "charCodeAt",
    "destruct",
    "defer",
    "addHandler"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/handler/Keyboard.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class provides unified key event handler for Internet Explorer,\n * Firefox, Opera and Safari.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.event.handler.UserAction)\n */\nqx.Class.define(\"qx.event.handler.Keyboard\", {\n  extend: qx.core.Object,\n  implement: [qx.event.IEventHandler, qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct(manager) {\n    super();\n\n    // Define shorthands\n    this.__manager = manager;\n    this.__window = manager.getWindow();\n\n    // Gecko ignores key events when not explicitly clicked in the document.\n    if (qx.core.Environment.get(\"engine.name\") == \"gecko\") {\n      this.__root = this.__window;\n    } else {\n      this.__root = this.__window.document.documentElement;\n    }\n\n    // Internal sequence cache\n    this.__lastUpDownType = {};\n\n    // Initialize observer\n    this._initKeyObserver();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY: qx.event.Registration.PRIORITY_NORMAL,\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES: {\n      keyup: 1,\n      keydown: 1,\n      keypress: 1,\n      keyinput: 1\n    },\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK: qx.event.IEventHandler.TARGET_DOMNODE,\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE: true\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __onKeyUpDownWrapper: null,\n    __manager: null,\n    __window: null,\n    __root: null,\n    __lastUpDownType: null,\n    __lastKeyCode: null,\n    __inputListeners: null,\n    __onKeyPressWrapper: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent(target, type) {},\n\n    // interface implementation\n    registerEvent(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    // interface implementation\n    unregisterEvent(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire a key input event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param charCode {Integer} character code\n     * @return {qx.Promise?} a promise if the event handlers created one\n     */\n    _fireInputEvent(domEvent, charCode) {\n      var target = this.__getEventTarget();\n      var tracker = {};\n      var self = this;\n\n      // Only fire when target is defined and visible\n      if (target && target.offsetWidth != 0) {\n        var event = qx.event.Registration.createEvent(\n          \"keyinput\",\n          qx.event.type.KeyInput,\n          [domEvent, target, charCode]\n        );\n\n        qx.event.Utils.then(tracker, function () {\n          self.__manager.dispatchEvent(target, event);\n        });\n      }\n\n      // Fire user action event\n      // Needs to check if still alive first\n      if (this.__window) {\n        var self = this;\n        qx.event.Utils.then(tracker, function () {\n          return qx.event.Registration.fireEvent(\n            self.__window,\n            \"useraction\",\n            qx.event.type.Data,\n            [\"keyinput\"]\n          );\n        });\n      }\n\n      return tracker.promise;\n    },\n\n    /**\n     * Fire a key up/down/press event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String} type og the event\n     * @param keyIdentifier {String} key identifier\n     * @return {qx.Promise?} a promise, if any of the event handlers returned a promise\n     */\n    _fireSequenceEvent(domEvent, type, keyIdentifier) {\n      var target = this.__getEventTarget();\n      var keyCode = domEvent.keyCode;\n      var tracker = {};\n      var self = this;\n\n      // Fire key event\n      var event = qx.event.Registration.createEvent(\n        type,\n        qx.event.type.KeySequence,\n        [domEvent, target, keyIdentifier]\n      );\n\n      qx.event.Utils.then(tracker, function () {\n        return self.__manager.dispatchEvent(target, event);\n      });\n\n      // IE and Safari suppress a \"keypress\" event if the \"keydown\" event's\n      // default action was prevented. In this case we emulate the \"keypress\"\n      //\n      // FireFox suppresses \"keypress\" when \"keydown\" default action is prevented.\n      // from version 29: https://bugzilla.mozilla.org/show_bug.cgi?id=935876.\n      if (event.getDefaultPrevented() && type == \"keydown\") {\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\" ||\n          qx.core.Environment.get(\"engine.name\") == \"webkit\" ||\n          (qx.core.Environment.get(\"engine.name\") == \"gecko\" &&\n            qx.core.Environment.get(\"browser.version\") >= 29)\n        ) {\n          // some key press events are already emulated. Ignore these events.\n          if (\n            !qx.event.util.Keyboard.isNonPrintableKeyCode(keyCode) &&\n            !this._emulateKeyPress[keyCode]\n          ) {\n            qx.event.Utils.then(tracker, function () {\n              return self._fireSequenceEvent(\n                domEvent,\n                \"keypress\",\n                keyIdentifier\n              );\n            });\n          }\n        }\n      }\n\n      // Fire user action event\n      // Needs to check if still alive first\n      if (this.__window) {\n        qx.event.Utils.then(tracker, function () {\n          return qx.event.Registration.fireEvent(\n            self.__window,\n            \"useraction\",\n            qx.event.type.Data,\n            [type]\n          );\n        });\n      }\n\n      return tracker.promise;\n    },\n\n    /**\n     * Get the target element for key events\n     *\n     * @return {Element} the event target element\n     */\n    __getEventTarget() {\n      var focusHandler = this.__manager.getHandler(qx.event.handler.Focus);\n      var target = focusHandler.getActive();\n\n      // Fallback to focused element when active is null or invisible\n      if (!target || target.offsetWidth == 0) {\n        target = focusHandler.getFocus();\n      }\n\n      // Fallback to body when focused is null or invisible\n      if (!target || target.offsetWidth == 0) {\n        target = this.__manager.getWindow().document.body;\n      }\n\n      return target;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER INIT/STOP\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the native key event listeners.\n     *\n     * @signature function()\n     */\n    _initKeyObserver() {\n      this.__onKeyUpDownWrapper = qx.lang.Function.listener(\n        this.__onKeyUpDown,\n        this\n      );\n\n      this.__onKeyPressWrapper = qx.lang.Function.listener(\n        this.__onKeyPress,\n        this\n      );\n\n      var Event = qx.bom.Event;\n\n      Event.addNativeListener(this.__root, \"keyup\", this.__onKeyUpDownWrapper);\n      Event.addNativeListener(\n        this.__root,\n        \"keydown\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.addNativeListener(\n        this.__root,\n        \"keypress\",\n        this.__onKeyPressWrapper\n      );\n    },\n\n    /**\n     * Stops the native key event listeners.\n     *\n     * @signature function()\n     */\n    _stopKeyObserver() {\n      var Event = qx.bom.Event;\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keyup\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keydown\",\n        this.__onKeyUpDownWrapper\n      );\n\n      Event.removeNativeListener(\n        this.__root,\n        \"keypress\",\n        this.__onKeyPressWrapper\n      );\n\n      for (var key in this.__inputListeners || {}) {\n        var listener = this.__inputListeners[key];\n        Event.removeNativeListener(\n          listener.target,\n          \"keypress\",\n          listener.callback\n        );\n      }\n      delete this.__inputListeners;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE EVENT OBSERVERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Low level handler for \"keyup\" and \"keydown\" events\n     *\n     * @internal\n     * @signature function(domEvent)\n     * @param domEvent {Event} DOM event object\n     */\n    __onKeyUpDown: qx.event.GlobalError.observeMethod(\n      qx.core.Environment.select(\"engine.name\", {\n        \"gecko|webkit|mshtml\"(domEvent) {\n          var keyCode = 0;\n          var charCode = 0;\n          var type = domEvent.type;\n\n          keyCode = domEvent.keyCode;\n\n          var tracker = {};\n          var self = this;\n\n          qx.event.Utils.track(\n            tracker,\n            this._idealKeyHandler(keyCode, charCode, type, domEvent)\n          );\n\n          // On non print-able character be sure to add a keypress event\n          if (type == \"keydown\") {\n            /*\n             * We need an artificial keypress event for every keydown event.\n             * Newer browsers do not fire keypress for a regular charachter key (e.g when typing 'a')\n             * if it was typed with the CTRL, ALT or META Key pressed during typing, like\n             * doing it when typing the combination CTRL+A\n             */\n            var isModifierDown =\n              domEvent.ctrlKey || domEvent.altKey || domEvent.metaKey;\n\n            // non-printable, backspace, tab or the modfier keys are down\n            if (\n              qx.event.util.Keyboard.isNonPrintableKeyCode(keyCode) ||\n              this._emulateKeyPress[keyCode] ||\n              isModifierDown\n            ) {\n              qx.event.Utils.then(tracker, function () {\n                return self._idealKeyHandler(\n                  keyCode,\n                  charCode,\n                  \"keypress\",\n                  domEvent\n                );\n              });\n            }\n          }\n\n          // Store last type\n          this.__lastUpDownType[keyCode] = type;\n\n          return tracker.promise;\n        },\n\n        opera(domEvent) {\n          this.__lastKeyCode = domEvent.keyCode;\n          return this._idealKeyHandler(\n            domEvent.keyCode,\n            0,\n            domEvent.type,\n            domEvent\n          );\n        }\n      })\n    ),\n\n    /**\n     * some keys like \"up\", \"down\", \"pageup\", \"pagedown\" do not bubble a\n     * \"keypress\" event in Firefox. To work around this bug we attach keypress\n     * listeners directly to the input events.\n     *\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=467513\n     *\n     * @signature function(target, type, keyCode)\n     * @param target {Element} The event target\n     * @param type {String} The event type\n     * @param keyCode {Integer} the key code\n     */\n    __firefoxInputFix: qx.core.Environment.select(\"engine.name\", {\n      gecko(target, type, keyCode) {\n        if (\n          type === \"keydown\" &&\n          (keyCode == 33 || keyCode == 34 || keyCode == 38 || keyCode == 40) &&\n          target.type == \"text\" &&\n          target.tagName.toLowerCase() === \"input\" &&\n          target.getAttribute(\"autoComplete\") !== \"off\"\n        ) {\n          if (!this.__inputListeners) {\n            this.__inputListeners = {};\n          }\n          var hash = qx.core.ObjectRegistry.toHashCode(target);\n          if (this.__inputListeners[hash]) {\n            return;\n          }\n          var self = this;\n          this.__inputListeners[hash] = {\n            target: target,\n            callback(domEvent) {\n              qx.bom.Event.stopPropagation(domEvent);\n              self.__onKeyPress(domEvent);\n            }\n          };\n\n          var listener = qx.event.GlobalError.observeMethod(\n            this.__inputListeners[hash].callback\n          );\n\n          qx.bom.Event.addNativeListener(target, \"keypress\", listener);\n        }\n      },\n\n      default: null\n    }),\n\n    /**\n     * Low level key press handler\n     *\n     * @signature function(domEvent)\n     * @param domEvent {Event} DOM event object\n     */\n    __onKeyPress: qx.event.GlobalError.observeMethod(\n      qx.core.Environment.select(\"engine.name\", {\n        mshtml(domEvent) {\n          domEvent = window.event || domEvent;\n\n          if (this._charCode2KeyCode[domEvent.keyCode]) {\n            return this._idealKeyHandler(\n              this._charCode2KeyCode[domEvent.keyCode],\n              0,\n              domEvent.type,\n              domEvent\n            );\n          } else {\n            return this._idealKeyHandler(\n              0,\n              domEvent.keyCode,\n              domEvent.type,\n              domEvent\n            );\n          }\n        },\n\n        gecko(domEvent) {\n          if (qx.core.Environment.get(\"engine.version\") < 66) {\n            var charCode = domEvent.charCode;\n            var type = domEvent.type;\n\n            return this._idealKeyHandler(\n              domEvent.keyCode,\n              charCode,\n              type,\n              domEvent\n            );\n          } else {\n            if (this._charCode2KeyCode[domEvent.keyCode]) {\n              return this._idealKeyHandler(\n                this._charCode2KeyCode[domEvent.keyCode],\n                0,\n                domEvent.type,\n                domEvent\n              );\n            } else {\n              return this._idealKeyHandler(\n                0,\n                domEvent.keyCode,\n                domEvent.type,\n                domEvent\n              );\n            }\n          }\n        },\n\n        webkit(domEvent) {\n          if (this._charCode2KeyCode[domEvent.keyCode]) {\n            return this._idealKeyHandler(\n              this._charCode2KeyCode[domEvent.keyCode],\n              0,\n              domEvent.type,\n              domEvent\n            );\n          } else {\n            return this._idealKeyHandler(\n              0,\n              domEvent.keyCode,\n              domEvent.type,\n              domEvent\n            );\n          }\n        },\n\n        opera(domEvent) {\n          var keyCode = domEvent.keyCode;\n          var type = domEvent.type;\n\n          // Some keys are identified differently for key up/down and keypress\n          // (e.g. \"v\" gets identified as \"F7\").\n          // So we store the last key up/down keycode and compare it to the\n          // current keycode.\n          // See http://bugzilla.qooxdoo.org/show_bug.cgi?id=603\n          if (keyCode != this.__lastKeyCode) {\n            return this._idealKeyHandler(0, this.__lastKeyCode, type, domEvent);\n          } else {\n            if (\n              qx.event.util.Keyboard.keyCodeToIdentifierMap[domEvent.keyCode]\n            ) {\n              return this._idealKeyHandler(\n                domEvent.keyCode,\n                0,\n                domEvent.type,\n                domEvent\n              );\n            } else {\n              return this._idealKeyHandler(\n                0,\n                domEvent.keyCode,\n                domEvent.type,\n                domEvent\n              );\n            }\n          }\n        }\n      })\n    ),\n\n    /*\n    ---------------------------------------------------------------------------\n      IDEAL KEY HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Key handler for an idealized browser.\n     * Runs after the browser specific key handlers have normalized the key events.\n     *\n     * @param keyCode {String} keyboard code\n     * @param charCode {String} character code\n     * @param eventType {String} type of the event (keydown, keypress, keyup)\n     * @param domEvent {Element} DomEvent\n     * @return {qx.Promise?} a promise, if an event handler created one\n     */\n    _idealKeyHandler(keyCode, charCode, eventType, domEvent) {\n      var keyIdentifier;\n\n      // Use: keyCode\n      if (keyCode || (!keyCode && !charCode)) {\n        keyIdentifier = qx.event.util.Keyboard.keyCodeToIdentifier(keyCode);\n\n        return this._fireSequenceEvent(domEvent, eventType, keyIdentifier);\n      }\n\n      // Use: charCode\n      else {\n        keyIdentifier = qx.event.util.Keyboard.charCodeToIdentifier(charCode);\n\n        var tracker = {};\n        var self = this;\n        qx.event.Utils.track(\n          tracker,\n          this._fireSequenceEvent(domEvent, \"keypress\", keyIdentifier)\n        );\n\n        return qx.event.Utils.then(tracker, function () {\n          return self._fireInputEvent(domEvent, charCode);\n        });\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      KEY MAPS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} maps the charcodes of special keys for key press emulation\n     *\n     * @lint ignoreReferenceField(_emulateKeyPress)\n     */\n    _emulateKeyPress: qx.core.Environment.select(\"engine.name\", {\n      mshtml: {\n        8: true,\n        9: true\n      },\n\n      webkit: {\n        8: true,\n        9: true,\n        27: true\n      },\n\n      gecko:\n        qx.core.Environment.get(\"browser.version\") >= 65\n          ? {\n              8: true,\n              9: true,\n              27: true\n            }\n          : {},\n\n      default: {}\n    }),\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * converts a key identifier back to a keycode\n     *\n     * @param keyIdentifier {String} The key identifier to convert\n     * @return {Integer} keyboard code\n     */\n    _identifierToKeyCode(keyIdentifier) {\n      return (\n        qx.event.util.Keyboard.identifierToKeyCodeMap[keyIdentifier] ||\n        keyIdentifier.charCodeAt(0)\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._stopKeyObserver();\n    this.__lastKeyCode =\n      this.__manager =\n      this.__window =\n      this.__root =\n      this.__lastUpDownType =\n        null;\n  },\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer(statics, members) {\n    // register at the event handler\n    qx.event.Registration.addHandler(statics);\n\n    if (qx.core.Environment.get(\"engine.name\") !== \"opera\") {\n      members._charCode2KeyCode = {\n        13: 13,\n        27: 27\n      };\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}