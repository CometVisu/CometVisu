{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "implement",
    "core",
    "IDisposable",
    "statics",
    "TAP_MAX_DISTANCE",
    "Environment",
    "get",
    "SWIPE_DIRECTION",
    "x",
    "y",
    "SWIPE_MIN_DISTANCE",
    "SWIPE_MIN_VELOCITY",
    "LONGTAP_TIME",
    "construct",
    "target",
    "emitter",
    "__target",
    "__emitter",
    "_initTouchObserver",
    "__pointers",
    "__touchStartPosition",
    "members",
    "__onTouchEventWrapper",
    "__originalTarget",
    "__startTime",
    "__beginScalingDistance",
    "__beginRotation",
    "__touchEventNames",
    "lang",
    "Function",
    "listener",
    "_onTouchEvent",
    "engineVersion",
    "parseInt",
    "i",
    "length",
    "bom",
    "Event",
    "addNativeListener",
    "_stopTouchObserver",
    "removeNativeListener",
    "domEvent",
    "_commonTouchEventHandler",
    "_getScalingDistance",
    "touch0",
    "touch1",
    "Math",
    "sqrt",
    "pow",
    "pageX",
    "pageY",
    "_getRotationAngle",
    "atan2",
    "PI",
    "_calcTouchesDelta",
    "touches",
    "delta",
    "push",
    "_calcSingleTouchDelta",
    "touch",
    "hasOwnProperty",
    "identifier",
    "touchStartPosition",
    "deltaX",
    "floor",
    "clientX",
    "deltaY",
    "clientY",
    "axis",
    "abs",
    "type",
    "_mapPointerEvent",
    "_detectTouchesByPointer",
    "changedTouches",
    "targetTouches",
    "_getTarget",
    "scale",
    "currentScalingDistance",
    "rotation",
    "currentRotation",
    "_rotation",
    "_fireEvent",
    "pointerId",
    "pointer",
    "toLowerCase",
    "indexOf",
    "getTarget",
    "nodeType",
    "parentNode",
    "targetForIE",
    "__evaluateTarget",
    "__P_232_10",
    "hitTargets",
    "document",
    "msElementsFromPoint",
    "currentTarget",
    "pointerEvents",
    "element",
    "Style",
    "emit",
    "dispose",
    "event",
    "handler",
    "TouchCore"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/event/handler/TouchCore.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n     * Tino Butz (tbtz)\r\n     * Christian Hagendorn (chris_schmidt)\r\n     * Daniel Wagner (danielwagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Listens for native touch events and fires composite events like \"tap\" and\r\n * \"swipe\"\r\n *\r\n * @ignore(qx.event.*)\r\n */\r\nqx.Bootstrap.define(\"qx.event.handler.TouchCore\", {\r\n  extend: Object,\r\n  implement: [qx.core.IDisposable],\r\n\r\n  statics: {\r\n    /** @type {Integer} The maximum distance of a tap. Only if the x or y distance of\r\n     *      the performed tap is less or equal the value of this constant, a tap\r\n     *      event is fired.\r\n     */\r\n    TAP_MAX_DISTANCE: qx.core.Environment.get(\"os.name\") != \"android\" ? 10 : 40,\r\n\r\n    /** @type {Map} The direction of a swipe relative to the axis */\r\n    SWIPE_DIRECTION: {\r\n      x: [\"left\", \"right\"],\r\n      y: [\"up\", \"down\"]\r\n    },\r\n\r\n    /** @type {Integer} The minimum distance of a swipe. Only if the x or y distance\r\n     *      of the performed swipe is greater as or equal the value of this\r\n     *      constant, a swipe event is fired.\r\n     */\r\n    SWIPE_MIN_DISTANCE:\r\n      qx.core.Environment.get(\"os.name\") != \"android\" ? 11 : 41,\r\n\r\n    /** @type {Integer} The minimum velocity of a swipe. Only if the velocity of the\r\n     *      performed swipe is greater as or equal the value of this constant, a\r\n     *      swipe event is fired.\r\n     */\r\n    SWIPE_MIN_VELOCITY: 0,\r\n\r\n    /**\r\n     * @type {Integer} The time delta in milliseconds to fire a long tap event.\r\n     */\r\n    LONGTAP_TIME: qx.core.Environment.get(\"device.touch\") ? 500 : 99999\r\n  },\r\n\r\n  /**\r\n   * Create a new instance\r\n   *\r\n   * @param target {Element} element on which to listen for native touch events\r\n   * @param emitter {qx.event.Emitter} Event emitter object\r\n   */\r\n  construct(target, emitter) {\r\n    this.__target = target;\r\n    this.__emitter = emitter;\r\n    this._initTouchObserver();\r\n    this.__pointers = [];\r\n\r\n    this.__touchStartPosition = {};\r\n  },\r\n\r\n  members: {\r\n    __target: null,\r\n    __emitter: null,\r\n    __onTouchEventWrapper: null,\r\n\r\n    __originalTarget: null,\r\n\r\n    __touchStartPosition: null,\r\n    __startTime: null,\r\n\r\n    __beginScalingDistance: null,\r\n    __beginRotation: null,\r\n\r\n    __pointers: null,\r\n\r\n    __touchEventNames: null,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      OBSERVER INIT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Initializes the native touch event listeners.\r\n     */\r\n    _initTouchObserver() {\r\n      this.__onTouchEventWrapper = qx.lang.Function.listener(\r\n        this._onTouchEvent,\r\n        this\r\n      );\r\n\r\n      this.__touchEventNames = [\r\n        \"touchstart\",\r\n        \"touchmove\",\r\n        \"touchend\",\r\n        \"touchcancel\"\r\n      ];\r\n\r\n      if (qx.core.Environment.get(\"event.mspointer\")) {\r\n        var engineVersion = parseInt(\r\n          qx.core.Environment.get(\"engine.version\"),\r\n          10\r\n        );\r\n\r\n        if (engineVersion == 10) {\r\n          // IE 10\r\n          this.__touchEventNames = [\r\n            \"MSPointerDown\",\r\n            \"MSPointerMove\",\r\n            \"MSPointerUp\",\r\n            \"MSPointerCancel\"\r\n          ];\r\n        } else {\r\n          // IE 11+\r\n          this.__touchEventNames = [\r\n            \"pointerdown\",\r\n            \"pointermove\",\r\n            \"pointerup\",\r\n            \"pointercancel\"\r\n          ];\r\n        }\r\n      }\r\n\r\n      for (var i = 0; i < this.__touchEventNames.length; i++) {\r\n        qx.bom.Event.addNativeListener(\r\n          this.__target,\r\n          this.__touchEventNames[i],\r\n          this.__onTouchEventWrapper\r\n        );\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      OBSERVER STOP\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Disconnects the native touch event listeners.\r\n     */\r\n    _stopTouchObserver() {\r\n      for (var i = 0; i < this.__touchEventNames.length; i++) {\r\n        qx.bom.Event.removeNativeListener(\r\n          this.__target,\r\n          this.__touchEventNames[i],\r\n          this.__onTouchEventWrapper\r\n        );\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      NATIVE EVENT OBSERVERS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Handler for native touch events.\r\n     *\r\n     * @param domEvent {Event} The touch event from the browser.\r\n     */\r\n    _onTouchEvent(domEvent) {\r\n      this._commonTouchEventHandler(domEvent);\r\n    },\r\n\r\n    /**\r\n     * Calculates the scaling distance between two touches.\r\n     * @param touch0 {Event} The touch event from the browser.\r\n     * @param touch1 {Event} The touch event from the browser.\r\n     * @return {Number} the calculated distance.\r\n     */\r\n    _getScalingDistance(touch0, touch1) {\r\n      return Math.sqrt(\r\n        Math.pow(touch0.pageX - touch1.pageX, 2) +\r\n          Math.pow(touch0.pageY - touch1.pageY, 2)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Calculates the rotation between two touches.\r\n     * @param touch0 {Event} The touch event from the browser.\r\n     * @param touch1 {Event} The touch event from the browser.\r\n     * @return {Number} the calculated rotation.\r\n     */\r\n    _getRotationAngle(touch0, touch1) {\r\n      var x = touch0.pageX - touch1.pageX;\r\n      var y = touch0.pageY - touch1.pageY;\r\n      return (Math.atan2(y, x) * 180) / Math.PI;\r\n    },\r\n\r\n    /**\r\n     * Calculates the delta of the touch position relative to its position when <code>touchstart/code> event occurred.\r\n     * @param touches {Array} an array with the current active touches, provided by <code>touchmove/code> event.\r\n     * @return {Array} an array containing objects with the calculated delta as <code>x</code>,\r\n     * <code>y</code> and the identifier of the corresponding touch.\r\n     */\r\n    _calcTouchesDelta(touches) {\r\n      var delta = [];\r\n      for (var i = 0; i < touches.length; i++) {\r\n        delta.push(this._calcSingleTouchDelta(touches[i]));\r\n      }\r\n      return delta;\r\n    },\r\n\r\n    /**\r\n     * Calculates the delta of one single touch position relative to its position when <code>touchstart/code> event occurred.\r\n     * @param touch {Event} the current active touch, provided by <code>touchmove/code> event.\r\n     * @return {Map} a map containing deltaX as <code>x</code>, deltaY as <code>y</code>, the direction of the movement as <code>axis</code> and the touch identifier as <code>identifier</code>.\r\n     */\r\n    _calcSingleTouchDelta(touch) {\r\n      if (this.__touchStartPosition.hasOwnProperty(touch.identifier)) {\r\n        var touchStartPosition = this.__touchStartPosition[touch.identifier];\r\n        var deltaX = Math.floor(touch.clientX - touchStartPosition[0]);\r\n        var deltaY = Math.floor(touch.clientY - touchStartPosition[1]);\r\n        var axis = \"x\";\r\n        if (Math.abs(deltaX / deltaY) < 1) {\r\n          axis = \"y\";\r\n        }\r\n        return {\r\n          x: deltaX,\r\n          y: deltaY,\r\n          axis: axis,\r\n          identifier: touch.identifier\r\n        };\r\n      } else {\r\n        return {\r\n          x: 0,\r\n          y: 0,\r\n          axis: null,\r\n          identifier: touch.identifier\r\n        };\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Called by an event handler.\r\n     *\r\n     * @param domEvent {Event} DOM event\r\n     * @param type {String ? null} type of the event\r\n     */\r\n    _commonTouchEventHandler(domEvent, type) {\r\n      var type = type || domEvent.type;\r\n      if (qx.core.Environment.get(\"event.mspointer\")) {\r\n        type = this._mapPointerEvent(type);\r\n        var touches = this._detectTouchesByPointer(domEvent, type);\r\n\r\n        domEvent.changedTouches = touches;\r\n        domEvent.targetTouches = touches;\r\n        domEvent.touches = touches;\r\n      }\r\n\r\n      domEvent.delta = [];\r\n\r\n      if (type == \"touchstart\") {\r\n        this.__originalTarget = this._getTarget(domEvent);\r\n\r\n        if (domEvent.touches && domEvent.touches.length > 1) {\r\n          this.__beginScalingDistance = this._getScalingDistance(\r\n            domEvent.touches[0],\r\n            domEvent.touches[1]\r\n          );\r\n\r\n          this.__beginRotation = this._getRotationAngle(\r\n            domEvent.touches[0],\r\n            domEvent.touches[1]\r\n          );\r\n        }\r\n\r\n        for (var i = 0; i < domEvent.changedTouches.length; i++) {\r\n          var touch = domEvent.changedTouches[i];\r\n          this.__touchStartPosition[touch.identifier] = [\r\n            touch.clientX,\r\n            touch.clientY\r\n          ];\r\n        }\r\n      }\r\n\r\n      if (type == \"touchmove\") {\r\n        // Polyfill for scale\r\n        if (\r\n          typeof domEvent.scale == \"undefined\" &&\r\n          domEvent.targetTouches.length > 1\r\n        ) {\r\n          var currentScalingDistance = this._getScalingDistance(\r\n            domEvent.targetTouches[0],\r\n            domEvent.targetTouches[1]\r\n          );\r\n\r\n          domEvent.scale = currentScalingDistance / this.__beginScalingDistance;\r\n        }\r\n        // Polyfill for rotation\r\n        if (\r\n          (typeof domEvent.rotation == \"undefined\" ||\r\n            qx.core.Environment.get(\"event.mspointer\")) &&\r\n          domEvent.targetTouches.length > 1\r\n        ) {\r\n          var currentRotation = this._getRotationAngle(\r\n            domEvent.targetTouches[0],\r\n            domEvent.targetTouches[1]\r\n          );\r\n\r\n          domEvent._rotation = currentRotation - this.__beginRotation;\r\n        }\r\n\r\n        domEvent.delta = this._calcTouchesDelta(domEvent.targetTouches);\r\n      }\r\n\r\n      this._fireEvent(domEvent, type, this.__originalTarget);\r\n\r\n      if (qx.core.Environment.get(\"event.mspointer\")) {\r\n        if (type == \"touchend\" || type == \"touchcancel\") {\r\n          delete this.__pointers[domEvent.pointerId];\r\n        }\r\n      }\r\n\r\n      if (\r\n        (type == \"touchend\" || type == \"touchcancel\") &&\r\n        domEvent.changedTouches[0]\r\n      ) {\r\n        delete this.__touchStartPosition[domEvent.changedTouches[0].identifier];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Creates an array with all current used touches out of multiple serial pointer events.\r\n     * Needed because pointerEvents do not provide a touch list.\r\n     * @param domEvent {Event} DOM event\r\n     * @param type {String ? null} type of the event\r\n     * @return {Array} touch list array.\r\n     */\r\n    _detectTouchesByPointer(domEvent, type) {\r\n      var touches = [];\r\n      if (type == \"touchstart\") {\r\n        this.__pointers[domEvent.pointerId] = domEvent;\r\n      } else if (type == \"touchmove\") {\r\n        this.__pointers[domEvent.pointerId] = domEvent;\r\n      }\r\n\r\n      for (var pointerId in this.__pointers) {\r\n        var pointer = this.__pointers[pointerId];\r\n        touches.push(pointer);\r\n      }\r\n\r\n      return touches;\r\n    },\r\n\r\n    /**\r\n     * Maps a pointer event type to the corresponding touch event type.\r\n     * @param type {String} the event type to parse.\r\n     * @return {String} the parsed event name.\r\n     */\r\n    _mapPointerEvent(type) {\r\n      type = type.toLowerCase();\r\n\r\n      if (type.indexOf(\"pointerdown\") !== -1) {\r\n        return \"touchstart\";\r\n      } else if (type.indexOf(\"pointerup\") !== -1) {\r\n        return \"touchend\";\r\n      } else if (type.indexOf(\"pointermove\") !== -1) {\r\n        return \"touchmove\";\r\n      } else if (type.indexOf(\"pointercancel\") !== -1) {\r\n        return \"touchcancel\";\r\n      }\r\n\r\n      return type;\r\n    },\r\n\r\n    /**\r\n     * Return the target of the event.\r\n     *\r\n     * @param domEvent {Event} DOM event\r\n     * @return {Element} Event target\r\n     */\r\n    _getTarget(domEvent) {\r\n      var target = qx.bom.Event.getTarget(domEvent);\r\n\r\n      // Text node. Fix Safari Bug, see http://www.quirksmode.org/js/events_properties.html\r\n      if (qx.core.Environment.get(\"engine.name\") == \"webkit\") {\r\n        if (target && target.nodeType == 3) {\r\n          target = target.parentNode;\r\n        }\r\n      } else if (\r\n        qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\r\n        qx.core.Environment.get(\"browser.documentmode\") < 11\r\n      ) {\r\n        // Fix for IE10 and pointer-events:none\r\n        //\r\n        // Changed the condition above to match exactly those browsers\r\n        // for which the fix was intended\r\n        // See: https://github.com/qooxdoo/qooxdoo/issues/9481\r\n        //\r\n        var targetForIE = this.__evaluateTarget(domEvent);\r\n        if (targetForIE) {\r\n          target = targetForIE;\r\n        }\r\n      }\r\n\r\n      return target;\r\n    },\r\n\r\n    /**\r\n     * This method fixes \"pointer-events:none\" for Internet Explorer 10.\r\n     * Checks which elements are placed to position x/y and traverses the array\r\n     * till one element has no \"pointer-events:none\" inside its style attribute.\r\n     * @param domEvent {Event} DOM event\r\n     * @return {Element|null} Event target\r\n     */\r\n    __evaluateTarget(domEvent) {\r\n      var clientX = null;\r\n      var clientY = null;\r\n      if (domEvent && domEvent.touches && domEvent.touches.length !== 0) {\r\n        clientX = domEvent.touches[0].clientX;\r\n        clientY = domEvent.touches[0].clientY;\r\n      }\r\n\r\n      // Retrieve an array with elements on point X/Y.\r\n      var hitTargets = document.msElementsFromPoint(clientX, clientY);\r\n      if (hitTargets) {\r\n        // Traverse this array for the elements which has no pointer-events:none inside.\r\n        for (var i = 0; i < hitTargets.length; i++) {\r\n          var currentTarget = hitTargets[i];\r\n          var pointerEvents = qx.bom.element.Style.get(\r\n            currentTarget,\r\n            \"pointer-events\",\r\n            3\r\n          );\r\n\r\n          if (pointerEvents != \"none\") {\r\n            return currentTarget;\r\n          }\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Fire a touch event with the given parameters\r\n     *\r\n     * @param domEvent {Event} DOM event\r\n     * @param type {String ? null} type of the event\r\n     * @param target {Element ? null} event target\r\n     */\r\n    _fireEvent(domEvent, type, target) {\r\n      if (!target) {\r\n        target = this._getTarget(domEvent);\r\n      }\r\n\r\n      var type = type || domEvent.type;\r\n\r\n      if (target && target.nodeType && this.__emitter) {\r\n        this.__emitter.emit(type, domEvent);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Dispose this object\r\n     */\r\n    dispose() {\r\n      this._stopTouchObserver();\r\n      this.__originalTarget =\r\n        this.__target =\r\n        this.__touchEventNames =\r\n        this.__pointers =\r\n        this.__emitter =\r\n        this.__beginScalingDistance =\r\n        this.__beginRotation =\r\n          null;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}