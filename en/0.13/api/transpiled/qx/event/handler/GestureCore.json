{
  "className": "qx.event.handler.GestureCore",
  "packageName": "qx.event.handler",
  "name": "GestureCore",
  "superClass": "Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0,
        "index": 655
      },
      "end": {
        "line": 961,
        "column": 3,
        "index": 30330
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Listens for (native or synthetic) pointer events and fires events\n for gestures like \"tap\" or \"swipe\"</p>"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "TYPES": {
      "location": {
        "start": {
          "line": 29,
          "column": 4,
          "index": 786
        },
        "end": {
          "line": 40,
          "column": 5,
          "index": 969
        }
      },
      "type": "variable",
      "access": "public"
    },
    "GESTURE_EVENTS": {
      "location": {
        "start": {
          "line": 42,
          "column": 4,
          "index": 978
        },
        "end": {
          "line": 47,
          "column": 5,
          "index": 1094
        }
      },
      "type": "variable",
      "access": "public"
    },
    "TAP_MAX_DISTANCE": {
      "location": {
        "start": {
          "line": 50,
          "column": 4,
          "index": 1213
        },
        "end": {
          "line": 50,
          "column": 54,
          "index": 1263
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maximum distance between a pointer-down and pointer-up event, values are configurable"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "DOUBLETAP_MAX_DISTANCE": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1397
        },
        "end": {
          "line": 53,
          "column": 60,
          "index": 1453
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Maximum distance between two subsequent taps, values are configurable"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SWIPE_DIRECTION": {
      "location": {
        "start": {
          "line": 56,
          "column": 4,
          "index": 1563
        },
        "end": {
          "line": 59,
          "column": 5,
          "index": 1642
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} The direction of a swipe relative to the axis"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "LONGTAP_TIME": {
      "location": {
        "start": {
          "line": 64,
          "column": 4,
          "index": 1750
        },
        "end": {
          "line": 64,
          "column": 71,
          "index": 1817
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} The time delta in milliseconds to fire a long tap event."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "DOUBLETAP_TIME": {
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 1952
        },
        "end": {
          "line": 70,
          "column": 23,
          "index": 1971
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Maximum time between two tap events that will still trigger a\n dbltap event."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "ROLL_FACTOR": {
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2119
        },
        "end": {
          "line": 76,
          "column": 19,
          "index": 2134
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Factor which is used for adapting the delta of the mouse wheel\n event to the roll events,"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TOUCHPAD_ROLL_FACTOR": {
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2287
        },
        "end": {
          "line": 82,
          "column": 27,
          "index": 2310
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Factor which is used for adapting the delta of the touchpad gesture\n event to the roll events,"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TOUCHPAD_WHEEL_EVENTS_THRESHOLD": {
      "location": {
        "start": {
          "line": 88,
          "column": 4,
          "index": 2473
        },
        "end": {
          "line": 88,
          "column": 39,
          "index": 2508
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Minimum number of wheel events to receive during the\n TOUCHPAD_WHEEL_EVENTS_PERIOD to detect a touchpad."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TOUCHPAD_WHEEL_EVENTS_PERIOD": {
      "location": {
        "start": {
          "line": 94,
          "column": 4,
          "index": 2655
        },
        "end": {
          "line": 94,
          "column": 37,
          "index": 2688
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Period (in ms) during which the wheel events are counted in order\n to detect a touchpad."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TOUCHPAD_WHEEL_EVENTS_TIMEOUT": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2856
        },
        "end": {
          "line": 100,
          "column": 39,
          "index": 2891
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Timeout (in ms) after which the touchpad detection is reset if no wheel\n events are received in the meantime."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "construct": {
    "location": {
      "start": {
        "line": 108,
        "column": 2,
        "index": 3106
      },
      "end": {
        "line": 117,
        "column": 3,
        "index": 3372
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "target {Element} DOM Element that should fire gesture events",
          "paramName": "target",
          "description": " DOM Element that should fire gesture events",
          "type": "qx.event.handler.Element"
        },
        {
          "name": "@param",
          "body": "emitter {qx.event.Emitter?} Event emitter (used if dispatchEvent\n is not supported, e.g. in IE8)",
          "paramName": "emitter",
          "description": " Event emitter (used if dispatchEvent\n is not supported, e.g. in IE8)",
          "optional": true,
          "type": "qx.event.Emitter"
        }
      ]
    }
  },
  "members": {
    "__defaultTarget": {
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3395
        },
        "end": {
          "line": 120,
          "column": 25,
          "index": 3416
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__emitter": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3423
        },
        "end": {
          "line": 121,
          "column": 19,
          "index": 3438
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__gesture": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3445
        },
        "end": {
          "line": 122,
          "column": 19,
          "index": 3460
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__eventName": {
      "location": {
        "start": {
          "line": 123,
          "column": 4,
          "index": 3467
        },
        "end": {
          "line": 123,
          "column": 21,
          "index": 3484
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__primaryTarget": {
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3491
        },
        "end": {
          "line": 124,
          "column": 25,
          "index": 3512
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__isMultiPointerGesture": {
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3519
        },
        "end": {
          "line": 125,
          "column": 33,
          "index": 3548
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__initialAngle": {
      "location": {
        "start": {
          "line": 126,
          "column": 4,
          "index": 3555
        },
        "end": {
          "line": 126,
          "column": 24,
          "index": 3575
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastTap": {
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 3582
        },
        "end": {
          "line": 127,
          "column": 19,
          "index": 3597
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__rollImpulseId": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3604
        },
        "end": {
          "line": 128,
          "column": 25,
          "index": 3625
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__stopMomentum": {
      "location": {
        "start": {
          "line": 129,
          "column": 4,
          "index": 3632
        },
        "end": {
          "line": 129,
          "column": 24,
          "index": 3652
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__initialDistance": {
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 3659
        },
        "end": {
          "line": 130,
          "column": 27,
          "index": 3682
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__momentum": {
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 3689
        },
        "end": {
          "line": 131,
          "column": 20,
          "index": 3705
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__rollEvents": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3712
        },
        "end": {
          "line": 132,
          "column": 22,
          "index": 3730
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__rollEventsCountStart": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 3737
        },
        "end": {
          "line": 133,
          "column": 29,
          "index": 3762
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__rollEventsCount": {
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 3769
        },
        "end": {
          "line": 134,
          "column": 24,
          "index": 3789
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__touchPadDetectionPerformed": {
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 3796
        },
        "end": {
          "line": 135,
          "column": 39,
          "index": 3831
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__lastRollEventTime": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 3838
        },
        "end": {
          "line": 136,
          "column": 26,
          "index": 3860
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_initObserver": {
      "location": {
        "start": {
          "line": 141,
          "column": 4,
          "index": 3928
        },
        "end": {
          "line": 162,
          "column": 5,
          "index": 4612
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Register pointer event listeners</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_stopObserver": {
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 4686
        },
        "end": {
          "line": 187,
          "column": 5,
          "index": 5342
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove native pointer event listeners.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "checkAndFireGesture": {
      "location": {
        "start": {
          "line": 196,
          "column": 4,
          "index": 5607
        },
        "end": {
          "line": 214,
          "column": 5,
          "index": 6172
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if a gesture was made and fires the gesture event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {qx.event.type.Pointer} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "qx.event.type.Pointer"
          },
          {
            "name": "@param",
            "body": "type {String ? null} type of the event",
            "paramName": "type",
            "description": " type of the event",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {Element ? null} event target",
            "paramName": "target",
            "description": " event target",
            "optional": true,
            "defaultValue": "null",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "gestureBegin": {
      "location": {
        "start": {
          "line": 222,
          "column": 4,
          "index": 6335
        },
        "end": {
          "line": 266,
          "column": 5,
          "index": 7830
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for gesture start.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "gestureMove": {
      "location": {
        "start": {
          "line": 274,
          "column": 4,
          "index": 7992
        },
        "end": {
          "line": 310,
          "column": 5,
          "index": 9181
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for gesture move.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_hasIntermediaryHandler": {
      "location": {
        "start": {
          "line": 320,
          "column": 4,
          "index": 9473
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 9714
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if a DOM element located between the target of a gesture\n event and the element this handler is attached to has a gesture\n handler of its own.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} The gesture event's target",
            "paramName": "target",
            "description": " The gesture event's target",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "gestureFinish": {
      "location": {
        "start": {
          "line": 336,
          "column": 4,
          "index": 9875
        },
        "end": {
          "line": 419,
          "column": 5,
          "index": 12671
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper method for gesture end.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopMomentum": {
      "location": {
        "start": {
          "line": 426,
          "column": 4,
          "index": 12822
        },
        "end": {
          "line": 428,
          "column": 5,
          "index": 12886
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the momentum scrolling currently running.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Integer} The timeoutId of a 'roll' event",
            "paramName": "id",
            "description": " The timeoutId of a 'roll' event",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "gestureCancel": {
      "location": {
        "start": {
          "line": 434,
          "column": 4,
          "index": 12996
        },
        "end": {
          "line": 443,
          "column": 5,
          "index": 13283
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cancels the gesture if running.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Number} The pointer Id.",
            "paramName": "id",
            "description": " The pointer Id.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "updateGestureTarget": {
      "location": {
        "start": {
          "line": 453,
          "column": 4,
          "index": 13553
        },
        "end": {
          "line": 455,
          "column": 5,
          "index": 13636
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Update the target of a running gesture. This is used in virtual widgets\n when the DOM element changes.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {String} The pointer id.",
            "paramName": "id",
            "description": " The pointer id.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {Element} The new target element.",
            "paramName": "target",
            "description": " The new target element.",
            "type": "qx.event.handler.Element"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__handleRollImpulse": {
      "location": {
        "start": {
          "line": 465,
          "column": 4,
          "index": 14071
        },
        "end": {
          "line": 521,
          "column": 5,
          "index": 15814
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method which will be called recursively to provide a momentum scrolling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "deltaX {Number} The last offset in X direction",
            "paramName": "deltaX",
            "description": " The last offset in X direction",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "deltaY {Number} The last offset in Y direction",
            "paramName": "deltaY",
            "description": " The last offset in Y direction",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "domEvent {Event} The original gesture event",
            "paramName": "domEvent",
            "description": " The original gesture event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} The target of the momentum roll events",
            "paramName": "target",
            "description": " The target of the momentum roll events",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "time {Number ?} The time in ms between the last two calls",
            "paramName": "time",
            "description": " The time in ms between the last two calls",
            "optional": true,
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_calcAngle": {
      "location": {
        "start": {
          "line": 527,
          "column": 4,
          "index": 15971
        },
        "end": {
          "line": 544,
          "column": 5,
          "index": 16453
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the angle of the primary and secondary pointer.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the rotation angle of the 2 pointers.",
            "type": "Number",
            "description": " the rotation angle of the 2 pointers."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_calcDistance": {
      "location": {
        "start": {
          "line": 550,
          "column": 4,
          "index": 16592
        },
        "end": {
          "line": 569,
          "column": 5,
          "index": 17090
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the scaling distance between two pointers.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the calculated distance.",
            "type": "Number",
            "description": " the calculated distance."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isBelowTapMaxDistance": {
      "location": {
        "start": {
          "line": 578,
          "column": 4,
          "index": 17393
        },
        "end": {
          "line": 592,
          "column": 5,
          "index": 17780
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the distance between the x/y coordinates of DOM event\n exceeds TAP<em>MAX</em>DISTANCE and returns the result.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} The DOM event from the browser.",
            "paramName": "domEvent",
            "description": " The DOM event from the browser.",
            "type": "Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|null} true if distance is below TAP_MAX_DISTANCE.",
            "type": "Boolean|null",
            "description": " true if distance is below TAP_MAX_DISTANCE."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__isBelowDoubleTapDistance": {
      "location": {
        "start": {
          "line": 605,
          "column": 4,
          "index": 18287
        },
        "end": {
          "line": 612,
          "column": 5,
          "index": 18569
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the distance between the x1/y1 and x2/y2 is\n below the TAP<em>MAX</em>DISTANCE and returns the result.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "x1 {Number} The x position of point one.",
            "paramName": "x1",
            "description": " The x position of point one.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "y1 {Number} The y position of point one.",
            "paramName": "y1",
            "description": " The y position of point one.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "x2 {Number} The x position of point two.",
            "paramName": "x2",
            "description": " The x position of point two.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "y2 {Number} The y position of point two.",
            "paramName": "y2",
            "description": " The y position of point two.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "type {String} The pointer type e.g. \"mouse\"",
            "paramName": "type",
            "description": " The pointer type e.g. \"mouse\"",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if points are in range",
            "type": "Boolean",
            "description": " <code>true</code>, if points are in range"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_getDeltaCoordinates": {
      "location": {
        "start": {
          "line": 619,
          "column": 4,
          "index": 18832
        },
        "end": {
          "line": 638,
          "column": 5,
          "index": 19281
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Calculates the delta coordinates in relation to the position on <code>pointerstart</code> event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} The DOM event from the browser.",
            "paramName": "domEvent",
            "description": " The DOM event from the browser.",
            "type": "Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} containing the deltaX as x, and deltaY as y.",
            "type": "Map",
            "description": " containing the deltaX as x, and deltaY as y."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fireEvent": {
      "location": {
        "start": {
          "line": 648,
          "column": 4,
          "index": 19609
        },
        "end": {
          "line": 681,
          "column": 5,
          "index": 20747
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire a gesture event with the given parameters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "type {String} type of the event",
            "paramName": "type",
            "description": " type of the event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {Element ? null} event target",
            "paramName": "target",
            "description": " event target",
            "optional": true,
            "defaultValue": "null",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} a promise, if one or more of the event handlers returned a promise",
            "type": "qx.Promise?",
            "description": " a promise, if one or more of the event handlers returned a promise"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onDblClick": {
      "location": {
        "start": {
          "line": 689,
          "column": 4,
          "index": 20951
        },
        "end": {
          "line": 693,
          "column": 5,
          "index": 21136
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fire \"tap\" and \"dbltap\" events after a native \"dblclick\"\n event to fix IE 8's broken mouse event sequence.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} dblclick event",
            "paramName": "domEvent",
            "description": " dblclick event",
            "type": "Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__getSwipeGesture": {
      "location": {
        "start": {
          "line": 702,
          "column": 4,
          "index": 21442
        },
        "end": {
          "line": 729,
          "column": 5,
          "index": 22319
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the swipe gesture when the user performed a swipe.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} returns the swipe data when the user performed a swipe, null if the gesture was no swipe.",
            "type": "Map|null",
            "description": " returns the swipe data when the user performed a swipe, null if the gesture was no swipe."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__fireTrack": {
      "location": {
        "start": {
          "line": 738,
          "column": 4,
          "index": 22514
        },
        "end": {
          "line": 741,
          "column": 5,
          "index": 22686
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a track event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} the track type",
            "paramName": "type",
            "description": " the track type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__fireRollEvent": {
      "location": {
        "start": {
          "line": 750,
          "column": 4,
          "index": 22897
        },
        "end": {
          "line": 760,
          "column": 5,
          "index": 23325
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a roll event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          },
          {
            "name": "@param",
            "body": "rollFactor {Integer} the roll factor to apply",
            "paramName": "rollFactor",
            "description": " the roll factor to apply",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__performAdaptativeRollScrolling": {
      "location": {
        "start": {
          "line": 767,
          "column": 4,
          "index": 23453
        },
        "end": {
          "line": 780,
          "column": 5,
          "index": 24038
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Triggers the adaptative roll scrolling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__endTouchPadDetection": {
      "location": {
        "start": {
          "line": 785,
          "column": 4,
          "index": 24107
        },
        "end": {
          "line": 798,
          "column": 5,
          "index": 24590
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Ends touch pad detection process.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_isTouchPadDetectionEnabled": {
      "location": {
        "start": {
          "line": 805,
          "column": 4,
          "index": 24819
        },
        "end": {
          "line": 810,
          "column": 5,
          "index": 24995
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Is touchpad detection enabled ? Default implementation activates it only for Mac OS after Sierra (&gt;= 10.12).</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{boolean} true if touchpad detection should occur.",
            "type": "boolean",
            "description": " true if touchpad detection should occur."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fireRoll": {
      "location": {
        "start": {
          "line": 821,
          "column": 4,
          "index": 25440
        },
        "end": {
          "line": 892,
          "column": 5,
          "index": 28446
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a roll event after determining the roll factor to apply. Mac OS Sierra (10.12+)\n introduces a lot more wheel events fired from the trackpad, so the roll factor to be applied\n has to be reduced in order to make the scrolling less sensitive.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "type {String} The type of the dom event",
            "paramName": "type",
            "description": " The type of the dom event",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__fireRotate": {
      "location": {
        "start": {
          "line": 900,
          "column": 4,
          "index": 28598
        },
        "end": {
          "line": 906,
          "column": 5,
          "index": 28863
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a rotate event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__firePinch": {
      "location": {
        "start": {
          "line": 914,
          "column": 4,
          "index": 29014
        },
        "end": {
          "line": 921,
          "column": 5,
          "index": 29321
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires a pinch event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__fireLongTap": {
      "location": {
        "start": {
          "line": 929,
          "column": 4,
          "index": 29477
        },
        "end": {
          "line": 936,
          "column": 5,
          "index": 29749
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fires the long tap event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "domEvent {Event} DOM event",
            "paramName": "domEvent",
            "description": " DOM event",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} event target",
            "paramName": "target",
            "description": " event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__stopLongTapTimer": {
      "location": {
        "start": {
          "line": 942,
          "column": 4,
          "index": 29887
        },
        "end": {
          "line": 947,
          "column": 5,
          "index": 30057
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stops the time for the long tap event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "gesture {Map} Data may representing the gesture.",
            "paramName": "gesture",
            "description": " Data may representing the gesture.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "dispose": {
      "location": {
        "start": {
          "line": 952,
          "column": 4,
          "index": 30121
        },
        "end": {
          "line": 959,
          "column": 5,
          "index": 30320
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Dispose the current instance</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.IDisposable",
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    }
  },
  "descendants": [
    "qx.event.handler.Gesture"
  ]
}