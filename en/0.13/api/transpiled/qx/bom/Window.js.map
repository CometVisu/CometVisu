{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__blocker",
    "__blockerWindow",
    "__timer",
    "__modalOptions",
    "top",
    "left",
    "width",
    "height",
    "scrollbars",
    "resizable",
    "__modelessOptions",
    "dependent",
    "status",
    "location",
    "menubar",
    "toolbar",
    "__isCapableToOpenModalWindows",
    "window",
    "showModalDialog",
    "open",
    "url",
    "name",
    "options",
    "modal",
    "useNativeModalDialog",
    "listener",
    "self",
    "newWindow",
    "Date",
    "getTime",
    "configurationString",
    "__generateConfigurationString",
    "getBlocker",
    "block",
    "event",
    "Timer",
    "addListener",
    "__checkForUnblocking",
    "restart",
    "Function",
    "context",
    "onLoadFunction",
    "lang",
    "bind",
    "onNativeLoad",
    "bom",
    "Event",
    "removeNativeListener",
    "addNativeListener",
    "modality",
    "value",
    "configuration",
    "key",
    "Window",
    "suffix",
    "push",
    "log",
    "Logger",
    "warn",
    "join",
    "Type",
    "isBoolean",
    "isClosed",
    "unblock",
    "stop",
    "Blocker",
    "close",
    "win",
    "closed",
    "ex",
    "moveTo",
    "error",
    "resizeTo"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Window.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Alexander Steitz (aback)\n\n************************************************************************ */\n\n/**\n * Includes library functions to work with browser windows\n */\nqx.Class.define(\"qx.bom.Window\", {\n  statics: {\n    /** Internal blocker instance for all browsers which need an additional\n     * blocker for modal windows because they do not support it natively.\n     */\n    __blocker: null,\n\n    /** Window handle which is currently blocked. */\n    __blockerWindow: null,\n\n    /** Timer instance to poll for unblocking if the modal window was closed */\n    __timer: null,\n\n    /** Supported options and their mapping to window options */\n    __modalOptions: {\n      top: \"dialogTop\",\n      left: \"dialogLeft\",\n      width: \"dialogWidth\",\n      height: \"dialogHeight\",\n      scrollbars: \"scroll\",\n      resizable: \"resizable\"\n    },\n\n    /** Supported options for modeless windows */\n    __modelessOptions: {\n      top: 1,\n      left: 1,\n      width: 1,\n      height: 1,\n      dependent: 1,\n      resizable: 1,\n      status: 1,\n      location: 1,\n      menubar: 1,\n      scrollbars: 1,\n      toolbar: 1\n    },\n\n    /**\n     * Whether the browser can open native modal window.\n     *\n     * @return {Boolean} Capability of open modal windows\n     */\n    __isCapableToOpenModalWindows() {\n      return window.showModalDialog != null;\n    },\n\n    /**\n     * Opens a native window with the given options.\n     *\n     * Modal windows can have the following options:\n     *\n     *   * top\n     *\n     *   * left\n     *\n     *   * width\n     *\n     *   * height\n     *\n     *   * scrollbars\n     *\n     *   * resizable\n     *\n     * Modeless windows have the following options:\n     *\n     *   * top\n     *\n     *   * left\n     *\n     *   * width\n     *\n     *   * height\n     *\n     *   * dependent\n     *\n     *   * resizable\n     *\n     *   * status\n     *\n     *   * location\n     *\n     *   * menubar\n     *\n     *   * scrollbars\n     *\n     *   * toolbar\n     *\n     * Except of dimension and location options all other options are boolean\n     * values.\n     *\n     * *Important infos for native modal windows*\n     *\n     * If you want to reference the opened window from within the native modal\n     * window you need to use\n     *\n     * <pre class='javascript'>\n     * var opener = window.dialogArguments[0];\n     * </pre>\n     *\n     * since a reference to the opener is passed automatically to the modal window.\n     *\n     * *Passing window arguments*\n     *\n     * This is only working if the page of the modal window is from the same origin.\n     * This is at least true for Firefox browsers.\n     *\n     * @param url {String} URL of the window\n     * @param name {String} Name of the window\n     * @param options {Map} Window options\n     * @param modal {Boolean} Whether the window should be opened modal\n     * @param useNativeModalDialog {Boolean} controls if modal windows are opened\n     *                                       using the native method or a blocker\n     *                                       should be used to fake modality.\n     *                                       Default is <b>true</b>\n     * @param listener {Function ?} listener function for onload event on the new window\n     * @param self {Object ?} Reference to the 'this' variable inside\n     *         the event listener. When not given, 'this' variable will be the new window\n     * @return {Window} native window object\n     */\n    open(url, name, options, modal, useNativeModalDialog, listener, self) {\n      var newWindow = null;\n      if (url == null) {\n        /* eslint-disable-next-line no-script-url */\n        url = \"javascript:/\";\n      }\n\n      if (name == null) {\n        name = \"qxNativeWindow\" + new Date().getTime();\n      }\n\n      if (useNativeModalDialog == null) {\n        useNativeModalDialog = true;\n      }\n\n      var configurationString = this.__generateConfigurationString(\n        options,\n        modal && useNativeModalDialog\n      );\n\n      if (modal) {\n        if (this.__isCapableToOpenModalWindows() && useNativeModalDialog) {\n          newWindow = window.showModalDialog(\n            url,\n            [window.self],\n            configurationString\n          );\n        } else {\n          this.getBlocker().block();\n\n          if (this.__timer == null) {\n            this.__timer = new qx.event.Timer(500);\n            this.__timer.addListener(\n              \"interval\",\n              this.__checkForUnblocking,\n              this\n            );\n          }\n\n          this.__blockerWindow = window.open(url, name, configurationString);\n          this.__timer.restart();\n\n          newWindow = this.__blockerWindow;\n        }\n      } else {\n        newWindow = window.open(url, name, configurationString);\n      }\n\n      if (newWindow && listener && listener instanceof Function) {\n        var context = self || newWindow;\n        var onLoadFunction = qx.lang.Function.bind(listener, context);\n        var onNativeLoad = function () {\n          onLoadFunction();\n          qx.bom.Event.removeNativeListener(newWindow, \"load\", onNativeLoad);\n        };\n        qx.bom.Event.addNativeListener(newWindow, \"load\", onNativeLoad);\n      }\n      return newWindow;\n    },\n\n    /**\n     * Returns the given config as string for direct use for the \"window.open\" method\n     *\n     * @param options {Array} Array with all configuration options\n     * @param modality {Boolean} whether the config should be for a modal window\n     *\n     * @return {String} configuration as string representation\n     */\n    __generateConfigurationString(options, modality) {\n      var configurationString;\n      var value;\n      var configuration = [];\n\n      if (modality && this.__isCapableToOpenModalWindows()) {\n        for (var key in options) {\n          if (qx.bom.Window.__modalOptions[key]) {\n            var suffix = \"\";\n            if (key != \"scrollbars\" && key != \"resizable\") {\n              suffix = \"px\";\n            }\n\n            value =\n              qx.bom.Window.__modalOptions[key] + \":\" + options[key] + suffix;\n            configuration.push(value);\n          } else {\n            qx.log.Logger.warn(\n              \"Option '\" + key + \"' is not supported for modal windows.\"\n            );\n          }\n        }\n\n        configurationString = configuration.join(\";\");\n      } else {\n        for (var key in options) {\n          if (qx.bom.Window.__modelessOptions[key]) {\n            if (qx.lang.Type.isBoolean(options[key])) {\n              value = key + \"=\" + (options[key] ? \"yes\" : \"no\");\n            } else {\n              value = key + \"=\" + options[key];\n            }\n            configuration.push(value);\n          } else {\n            qx.log.Logger.warn(\n              \"Option '\" + key + \"' is not supported for native windows.\"\n            );\n          }\n        }\n\n        configurationString = configuration.join(\",\");\n      }\n\n      return configurationString;\n    },\n\n    /**\n     * Interval method which checks if the native window was closed to also\n     * stop the associated timer.\n     */\n    __checkForUnblocking() {\n      if (this.isClosed(this.__blockerWindow)) {\n        this.getBlocker().unblock();\n        this.__timer.stop();\n      }\n    },\n\n    /**\n     * If a modal window is opened with the option\n     *\n     * <pre class='javascript'>\n     * useNativeModalWindow = false;\n     * </pre>\n     *\n     * an instance of <b>qx.bom.Blocker</b> is used to fake modality. This method\n     * can be used to get a reference to the blocker to style it.\n     *\n     * @return {qx.bom.Blocker?null} Blocker instance or null if no blocker is used\n     */\n    getBlocker() {\n      if (this.__blocker == null) {\n        this.__blocker = new qx.bom.Blocker();\n      }\n\n      return this.__blocker;\n    },\n\n    /**\n     * Closes the given window\n     *\n     * @param win {Window} Native window object\n     * @return {var} The return value (if any) of the window's native\n     * <code>close</code> method\n     */\n    close(win) {\n      if (win) {\n        return win.close();\n      }\n    },\n\n    /**\n     * Checks if the window is closed\n     *\n     * @param win {Window} Native window object\n     * @return {Boolean} Closed state\n     */\n    isClosed(win) {\n      var closed = true;\n\n      if (win) {\n        try {\n          closed = win.closed;\n        } catch (ex) {}\n      }\n\n      return closed;\n    },\n\n    /**\n     * Moving an opened window is not allowed in the most browsers anymore.\n     *\n     * @param win {Window} Native window object\n     * @param top {Integer} Y-coordinate\n     * @param left {Integer} X-coordinate\n     */\n    moveTo(win, top, left) {\n      /*\n        http://www.microsoft.com/technet/prodtechnol/winxppro/maintain/sp2brows.mspx\n        Changes to Functionality in Microsoft Windows XP Service Pack 2\n        Part 5: Enhanced Browsing Security\n        URLACTION_FEATURE_WINDOW_RESTRICTIONS\n        Allow script-initiated windows without size or position constraints\n        Code: 2102\n      */\n\n      if (!qx.bom.Window.isClosed(win)) {\n        try {\n          win.moveTo(left, top);\n        } catch (ex) {\n          qx.log.Logger.error(\n            \"Cross-Domain Scripting problem: Could not move window!\",\n            ex\n          );\n        }\n      }\n    },\n\n    /**\n     * Resizing an opened window is not allowed in the most browsers anymore.\n     *\n     * @param win {Window} Native window object\n     * @param width {Integer} New width\n     * @param height {Integer} New height\n     */\n    resizeTo(win, width, height) {\n      /*\n        http://www.microsoft.com/technet/prodtechnol/winxppro/maintain/sp2brows.mspx\n        Changes to Functionality in Microsoft Windows XP Service Pack 2\n        Part 5: Enhanced Browsing Security\n        URLACTION_FEATURE_WINDOW_RESTRICTIONS\n        Allow script-initiated windows without size or position constraints\n        Code: 2102\n      */\n\n      if (!qx.bom.Window.isClosed(win)) {\n        try {\n          win.resizeTo(width, height);\n        } catch (ex) {\n          qx.log.Logger.error(\n            \"Cross-Domain Scripting problem: Could not resize window!\",\n            ex\n          );\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}