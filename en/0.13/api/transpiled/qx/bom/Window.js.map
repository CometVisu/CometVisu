{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__blocker",
    "__blockerWindow",
    "__timer",
    "__modalOptions",
    "top",
    "left",
    "width",
    "height",
    "scrollbars",
    "resizable",
    "__modelessOptions",
    "dependent",
    "status",
    "location",
    "menubar",
    "toolbar",
    "__isCapableToOpenModalWindows",
    "window",
    "showModalDialog",
    "open",
    "url",
    "name",
    "options",
    "modal",
    "useNativeModalDialog",
    "listener",
    "self",
    "newWindow",
    "Date",
    "getTime",
    "configurationString",
    "__generateConfigurationString",
    "getBlocker",
    "block",
    "event",
    "Timer",
    "addListener",
    "__checkForUnblocking",
    "restart",
    "Function",
    "context",
    "onLoadFunction",
    "lang",
    "bind",
    "onNativeLoad",
    "bom",
    "Event",
    "removeNativeListener",
    "addNativeListener",
    "modality",
    "value",
    "configuration",
    "key",
    "Window",
    "suffix",
    "push",
    "log",
    "Logger",
    "warn",
    "join",
    "Type",
    "isBoolean",
    "isClosed",
    "unblock",
    "stop",
    "Blocker",
    "close",
    "win",
    "closed",
    "ex",
    "moveTo",
    "error",
    "resizeTo"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Window.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Alexander Steitz (aback)\n\n************************************************************************ */\n\n/**\n * Includes library functions to work with browser windows\n */\nqx.Class.define(\"qx.bom.Window\", {\n  statics: {\n    /** Internal blocker instance for all browsers which need an additional\n     * blocker for modal windows because they do not support it natively.\n     */\n    __blocker: null,\n\n    /** Window handle which is currently blocked. */\n    __blockerWindow: null,\n\n    /** Timer instance to poll for unblocking if the modal window was closed */\n    __timer: null,\n\n    /** Supported options and their mapping to window options */\n    __modalOptions: {\n      top: \"dialogTop\",\n      left: \"dialogLeft\",\n      width: \"dialogWidth\",\n      height: \"dialogHeight\",\n      scrollbars: \"scroll\",\n      resizable: \"resizable\"\n    },\n\n    /** Supported options for modeless windows */\n    __modelessOptions: {\n      top: 1,\n      left: 1,\n      width: 1,\n      height: 1,\n      dependent: 1,\n      resizable: 1,\n      status: 1,\n      location: 1,\n      menubar: 1,\n      scrollbars: 1,\n      toolbar: 1\n    },\n\n    /**\n     * Whether the browser can open native modal window.\n     *\n     * @return {Boolean} Capability of open modal windows\n     */\n    __isCapableToOpenModalWindows() {\n      return window.showModalDialog != null;\n    },\n\n    /**\n     * Opens a native window with the given options.\n     *\n     * Modal windows can have the following options:\n     *\n     *   * top\n     *\n     *   * left\n     *\n     *   * width\n     *\n     *   * height\n     *\n     *   * scrollbars\n     *\n     *   * resizable\n     *\n     * Modeless windows have the following options:\n     *\n     *   * top\n     *\n     *   * left\n     *\n     *   * width\n     *\n     *   * height\n     *\n     *   * dependent\n     *\n     *   * resizable\n     *\n     *   * status\n     *\n     *   * location\n     *\n     *   * menubar\n     *\n     *   * scrollbars\n     *\n     *   * toolbar\n     *\n     * Except of dimension and location options all other options are boolean\n     * values.\n     *\n     * *Important infos for native modal windows*\n     *\n     * If you want to reference the opened window from within the native modal\n     * window you need to use\n     *\n     * <pre class='javascript'>\n     * var opener = window.dialogArguments[0];\n     * </pre>\n     *\n     * since a reference to the opener is passed automatically to the modal window.\n     *\n     * *Passing window arguments*\n     *\n     * This is only working if the page of the modal window is from the same origin.\n     * This is at least true for Firefox browsers.\n     *\n     * @param url {String} URL of the window\n     * @param name {String} Name of the window\n     * @param options {Map} Window options\n     * @param modal {Boolean} Whether the window should be opened modal\n     * @param useNativeModalDialog {Boolean} controls if modal windows are opened\n     *                                       using the native method or a blocker\n     *                                       should be used to fake modality.\n     *                                       Default is <b>true</b>\n     * @param listener {Function ?} listener function for onload event on the new window\n     * @param self {Object ?} Reference to the 'this' variable inside\n     *         the event listener. When not given, 'this' variable will be the new window\n     * @return {Window} native window object\n     */\n    open(url, name, options, modal, useNativeModalDialog, listener, self) {\n      var newWindow = null;\n      if (url == null) {\n        /* eslint-disable-next-line no-script-url */\n        url = \"javascript:/\";\n      }\n\n      if (name == null) {\n        name = \"qxNativeWindow\" + new Date().getTime();\n      }\n\n      if (useNativeModalDialog == null) {\n        useNativeModalDialog = true;\n      }\n\n      var configurationString = this.__generateConfigurationString(\n        options,\n        modal && useNativeModalDialog\n      );\n\n      if (modal) {\n        if (this.__isCapableToOpenModalWindows() && useNativeModalDialog) {\n          newWindow = window.showModalDialog(\n            url,\n            [window.self],\n            configurationString\n          );\n        } else {\n          this.getBlocker().block();\n\n          if (this.__timer == null) {\n            this.__timer = new qx.event.Timer(500);\n            this.__timer.addListener(\n              \"interval\",\n              this.__checkForUnblocking,\n              this\n            );\n          }\n\n          this.__blockerWindow = window.open(url, name, configurationString);\n          this.__timer.restart();\n\n          newWindow = this.__blockerWindow;\n        }\n      } else {\n        newWindow = window.open(url, name, configurationString);\n      }\n\n      if (newWindow && listener && listener instanceof Function) {\n        var context = self || newWindow;\n        var onLoadFunction = qx.lang.Function.bind(listener, context);\n        var onNativeLoad = function () {\n          onLoadFunction();\n          qx.bom.Event.removeNativeListener(newWindow, \"load\", onNativeLoad);\n        };\n        qx.bom.Event.addNativeListener(newWindow, \"load\", onNativeLoad);\n      }\n      return newWindow;\n    },\n\n    /**\n     * Returns the given config as string for direct use for the \"window.open\" method\n     *\n     * @param options {Array} Array with all configuration options\n     * @param modality {Boolean} whether the config should be for a modal window\n     *\n     * @return {String} configuration as string representation\n     */\n    __generateConfigurationString(options, modality) {\n      var configurationString;\n      var value;\n      var configuration = [];\n\n      if (modality && this.__isCapableToOpenModalWindows()) {\n        for (var key in options) {\n          if (qx.bom.Window.__modalOptions[key]) {\n            var suffix = \"\";\n            if (key != \"scrollbars\" && key != \"resizable\") {\n              suffix = \"px\";\n            }\n\n            value =\n              qx.bom.Window.__modalOptions[key] + \":\" + options[key] + suffix;\n            configuration.push(value);\n          } else {\n            qx.log.Logger.warn(\n              \"Option '\" + key + \"' is not supported for modal windows.\"\n            );\n          }\n        }\n\n        configurationString = configuration.join(\";\");\n      } else {\n        for (var key in options) {\n          if (qx.bom.Window.__modelessOptions[key]) {\n            if (qx.lang.Type.isBoolean(options[key])) {\n              value = key + \"=\" + (options[key] ? \"yes\" : \"no\");\n            } else {\n              value = key + \"=\" + options[key];\n            }\n            configuration.push(value);\n          } else {\n            qx.log.Logger.warn(\n              \"Option '\" + key + \"' is not supported for native windows.\"\n            );\n          }\n        }\n\n        configurationString = configuration.join(\",\");\n      }\n\n      return configurationString;\n    },\n\n    /**\n     * Interval method which checks if the native window was closed to also\n     * stop the associated timer.\n     */\n    __checkForUnblocking() {\n      if (this.isClosed(this.__blockerWindow)) {\n        this.getBlocker().unblock();\n        this.__timer.stop();\n      }\n    },\n\n    /**\n     * If a modal window is opened with the option\n     *\n     * <pre class='javascript'>\n     * useNativeModalWindow = false;\n     * </pre>\n     *\n     * an instance of <b>qx.bom.Blocker</b> is used to fake modality. This method\n     * can be used to get a reference to the blocker to style it.\n     *\n     * @return {qx.bom.Blocker?null} Blocker instance or null if no blocker is used\n     */\n    getBlocker() {\n      if (this.__blocker == null) {\n        this.__blocker = new qx.bom.Blocker();\n      }\n\n      return this.__blocker;\n    },\n\n    /**\n     * Closes the given window\n     *\n     * @param win {Window} Native window object\n     * @return {var} The return value (if any) of the window's native\n     * <code>close</code> method\n     */\n    close(win) {\n      if (win) {\n        return win.close();\n      }\n    },\n\n    /**\n     * Checks if the window is closed\n     *\n     * @param win {Window} Native window object\n     * @return {Boolean} Closed state\n     */\n    isClosed(win) {\n      var closed = true;\n\n      if (win) {\n        try {\n          closed = win.closed;\n        } catch (ex) {}\n      }\n\n      return closed;\n    },\n\n    /**\n     * Moving an opened window is not allowed in the most browsers anymore.\n     *\n     * @param win {Window} Native window object\n     * @param top {Integer} Y-coordinate\n     * @param left {Integer} X-coordinate\n     */\n    moveTo(win, top, left) {\n      /*\n        http://www.microsoft.com/technet/prodtechnol/winxppro/maintain/sp2brows.mspx\n        Changes to Functionality in Microsoft Windows XP Service Pack 2\n        Part 5: Enhanced Browsing Security\n        URLACTION_FEATURE_WINDOW_RESTRICTIONS\n        Allow script-initiated windows without size or position constraints\n        Code: 2102\n      */\n\n      if (!qx.bom.Window.isClosed(win)) {\n        try {\n          win.moveTo(left, top);\n        } catch (ex) {\n          qx.log.Logger.error(\n            \"Cross-Domain Scripting problem: Could not move window!\",\n            ex\n          );\n        }\n      }\n    },\n\n    /**\n     * Resizing an opened window is not allowed in the most browsers anymore.\n     *\n     * @param win {Window} Native window object\n     * @param width {Integer} New width\n     * @param height {Integer} New height\n     */\n    resizeTo(win, width, height) {\n      /*\n        http://www.microsoft.com/technet/prodtechnol/winxppro/maintain/sp2brows.mspx\n        Changes to Functionality in Microsoft Windows XP Service Pack 2\n        Part 5: Enhanced Browsing Security\n        URLACTION_FEATURE_WINDOW_RESTRICTIONS\n        Allow script-initiated windows without size or position constraints\n        Code: 2102\n      */\n\n      if (!qx.bom.Window.isClosed(win)) {\n        try {\n          win.resizeTo(width, height);\n        } catch (ex) {\n          qx.log.Logger.error(\n            \"Cross-Domain Scripting problem: Could not resize window!\",\n            ex\n          );\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,eAAe,EAAE;IAC/BC,OAAO,EAAE;MACP;AACJ;AACA;MACIC,SAAS,EAAE,IAAI;MAEf;MACAC,SAAe,EAAE,IAAI;MAErB;MACAC,SAAO,EAAE,IAAI;MAEb;MACAC,SAAc,EAAE;QACdC,GAAG,EAAE,WAAW;QAChBC,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE,aAAa;QACpBC,MAAM,EAAE,cAAc;QACtBC,UAAU,EAAE,QAAQ;QACpBC,SAAS,EAAE;MACb,CAAC;MAED;MACAC,SAAiB,EAAE;QACjBN,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE,CAAC;QACRC,MAAM,EAAE,CAAC;QACTI,SAAS,EAAE,CAAC;QACZF,SAAS,EAAE,CAAC;QACZG,MAAM,EAAE,CAAC;QACTC,QAAQ,EAAE,CAAC;QACXC,OAAO,EAAE,CAAC;QACVN,UAAU,EAAE,CAAC;QACbO,OAAO,EAAE;MACX,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,SAA6B,uBAAG;QAC9B,OAAOC,MAAM,CAACC,eAAe,IAAI,IAAI;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC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"
}