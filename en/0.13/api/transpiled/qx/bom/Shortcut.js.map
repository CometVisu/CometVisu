{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "shortcut",
    "__modifier",
    "__key",
    "setShortcut",
    "initEnabled",
    "events",
    "execute",
    "properties",
    "enabled",
    "init",
    "check",
    "event",
    "apply",
    "nullable",
    "autoRepeat",
    "members",
    "target",
    "fireDataEvent",
    "__onKeyDown",
    "getEnabled",
    "__matchesKeyEvent",
    "isAutoRepeat",
    "getTarget",
    "stop",
    "__onKeyPress",
    "_applyEnabled",
    "value",
    "old",
    "Registration",
    "addListener",
    "document",
    "documentElement",
    "removeListener",
    "_applyShortcut",
    "search",
    "msg",
    "error",
    "Error",
    "Control",
    "Shift",
    "Meta",
    "Alt",
    "index",
    "a",
    "length",
    "push",
    "substring",
    "al",
    "i",
    "identifier",
    "__normalizeKeyIdentifier",
    "e",
    "key",
    "isShiftPressed",
    "isCtrlPressed",
    "isMetaPressed",
    "isAltPressed",
    "getKeyIdentifier",
    "__oldKeyNameToKeyIdentifierMap",
    "esc",
    "ctrl",
    "print",
    "del",
    "pageup",
    "pagedown",
    "numlock",
    "numpad_0",
    "numpad_1",
    "numpad_2",
    "numpad_3",
    "numpad_4",
    "numpad_5",
    "numpad_6",
    "numpad_7",
    "numpad_8",
    "numpad_9",
    "numpad_divide",
    "numpad_multiply",
    "numpad_minus",
    "numpad_plus",
    "keyName",
    "kbUtil",
    "util",
    "Keyboard",
    "keyIdentifier",
    "isValidKeyIdentifier",
    "toUpperCase",
    "toLowerCase",
    "lang",
    "String",
    "firstUp",
    "toString",
    "str",
    "modifier",
    "locale",
    "Key",
    "getKeyName",
    "join",
    "destruct",
    "setEnabled",
    "bom",
    "Shortcut"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Shortcut.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Shortcuts can be used to globally define keyboard shortcuts.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.bom.Shortcut\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance of Command\n   *\n   * @param shortcut {String} shortcuts can be composed of optional modifier\n   *    keys Control, Alt, Shift, Meta and a non modifier key.\n   *    If no non modifier key is specified, the second parameter is evaluated.\n   *    The key must be separated by a <code>+</code> or <code>-</code> character.\n   *    Examples: Alt+F1, Control+C, Control+Alt+Delete\n   */\n  construct(shortcut) {\n    super();\n\n    this.__modifier = {};\n    this.__key = null;\n\n    if (shortcut != null) {\n      this.setShortcut(shortcut);\n    }\n\n    this.initEnabled();\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when the command is executed. Sets the \"data\" property of the event to\n     * the object that issued the command.\n     */\n    execute: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** whether the command should be respected/enabled */\n    enabled: {\n      init: true,\n      check: \"Boolean\",\n      event: \"changeEnabled\",\n      apply: \"_applyEnabled\"\n    },\n\n    /** The command shortcut */\n    shortcut: {\n      check: \"String\",\n      apply: \"_applyShortcut\",\n      nullable: true\n    },\n\n    /**\n     * Whether the execute event should be fired repeatedly if the user keep\n     * the keys pressed.\n     */\n    autoRepeat: {\n      check: \"Boolean\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    __modifier: \"\",\n    __key: \"\",\n\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire the \"execute\" event on this shortcut.\n     *\n     * @param target {Object} Object which issued the execute event\n     */\n    execute(target) {\n      this.fireDataEvent(\"execute\", target);\n    },\n\n    /**\n     * Key down event handler.\n     *\n     * @param event {qx.event.type.KeySequence} The key event object\n     */\n    __onKeyDown(event) {\n      if (this.getEnabled() && this.__matchesKeyEvent(event)) {\n        if (!this.isAutoRepeat()) {\n          this.execute(event.getTarget());\n        }\n        event.stop();\n      }\n    },\n\n    /**\n     * Key press event handler.\n     *\n     * @param event {qx.event.type.KeySequence} The key event object\n     */\n    __onKeyPress(event) {\n      if (this.getEnabled() && this.__matchesKeyEvent(event)) {\n        if (this.isAutoRepeat()) {\n          this.execute(event.getTarget());\n        }\n        event.stop();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyEnabled(value, old) {\n      if (value) {\n        qx.event.Registration.addListener(\n          document.documentElement,\n          \"keydown\",\n          this.__onKeyDown,\n          this\n        );\n\n        qx.event.Registration.addListener(\n          document.documentElement,\n          \"keypress\",\n          this.__onKeyPress,\n          this\n        );\n      } else {\n        qx.event.Registration.removeListener(\n          document.documentElement,\n          \"keydown\",\n          this.__onKeyDown,\n          this\n        );\n\n        qx.event.Registration.removeListener(\n          document.documentElement,\n          \"keypress\",\n          this.__onKeyPress,\n          this\n        );\n      }\n    },\n\n    // property apply\n    _applyShortcut(value, old) {\n      if (value) {\n        // do not allow whitespaces within shortcuts\n        if (value.search(/[\\s]+/) != -1) {\n          var msg = \"Whitespaces are not allowed within shortcuts\";\n          this.error(msg);\n          throw new Error(msg);\n        }\n\n        this.__modifier = {\n          Control: false,\n          Shift: false,\n          Meta: false,\n          Alt: false\n        };\n\n        this.__key = null;\n\n        // To support shortcuts with \"+\" and \"-\" as keys it is necessary\n        // to split the given value in a different way to determine the\n        // several keyIdentifiers\n        var index;\n        var a = [];\n        while (value.length > 0 && index != -1) {\n          // search for delimiters \"+\" and \"-\"\n          index = value.search(/[-+]+/);\n\n          // add identifiers - take value if no separator was found or\n          // only one char is left (second part of shortcut)\n          a.push(\n            value.length == 1 || index == -1 ? value : value.substring(0, index)\n          );\n\n          // extract the already detected identifier\n          value = value.substring(index + 1);\n        }\n        var al = a.length;\n\n        for (var i = 0; i < al; i++) {\n          var identifier = this.__normalizeKeyIdentifier(a[i]);\n\n          switch (identifier) {\n            case \"Control\":\n            case \"Shift\":\n            case \"Meta\":\n            case \"Alt\":\n              this.__modifier[identifier] = true;\n              break;\n\n            case \"Unidentified\":\n              var msg = \"Not a valid key name for a shortcut: \" + a[i];\n              this.error(msg);\n              throw msg;\n\n            default:\n              if (this.__key) {\n                var msg = \"You can only specify one non modifier key!\";\n                this.error(msg);\n                throw msg;\n              }\n\n              this.__key = identifier;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /*\n    --------------------------------------------------------------------------\n      INTERNAL MATCHING LOGIC\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Checks whether the given key event matches the shortcut's shortcut\n     *\n     * @param e {qx.event.type.KeySequence} the key event object\n     * @return {Boolean} whether the shortcuts shortcut matches the key event\n     */\n    __matchesKeyEvent(e) {\n      var key = this.__key;\n\n      if (!key) {\n        // no shortcut defined.\n        return false;\n      }\n\n      // for check special keys\n      // and check if a shortcut is a single char and special keys are pressed\n      if (\n        (!this.__modifier.Shift && e.isShiftPressed()) ||\n        (this.__modifier.Shift && !e.isShiftPressed()) ||\n        (!this.__modifier.Control && e.isCtrlPressed()) ||\n        (this.__modifier.Control && !e.isCtrlPressed()) ||\n        (!this.__modifier.Meta && e.isMetaPressed()) ||\n        (this.__modifier.Meta && !e.isMetaPressed()) ||\n        (!this.__modifier.Alt && e.isAltPressed()) ||\n        (this.__modifier.Alt && !e.isAltPressed())\n      ) {\n        return false;\n      }\n\n      if (key == e.getKeyIdentifier()) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      COMPATIBILITY TO COMMAND\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @lint ignoreReferenceField(__oldKeyNameToKeyIdentifierMap)\n     */\n    __oldKeyNameToKeyIdentifierMap: {\n      // all other keys are converted by converting the first letter to uppercase\n      esc: \"Escape\",\n      ctrl: \"Control\",\n      print: \"PrintScreen\",\n      del: \"Delete\",\n      pageup: \"PageUp\",\n      pagedown: \"PageDown\",\n      numlock: \"NumLock\",\n      numpad_0: \"0\",\n      numpad_1: \"1\",\n      numpad_2: \"2\",\n      numpad_3: \"3\",\n      numpad_4: \"4\",\n      numpad_5: \"5\",\n      numpad_6: \"6\",\n      numpad_7: \"7\",\n      numpad_8: \"8\",\n      numpad_9: \"9\",\n      numpad_divide: \"/\",\n      numpad_multiply: \"*\",\n      numpad_minus: \"-\",\n      numpad_plus: \"+\"\n    },\n\n    /**\n     * Checks and normalizes the key identifier.\n     *\n     * @param keyName {String} name of the key.\n     * @return {String} normalized keyIdentifier or \"Unidentified\" if a conversion was not possible\n     */\n    __normalizeKeyIdentifier(keyName) {\n      var kbUtil = qx.event.util.Keyboard;\n      var keyIdentifier = \"Unidentified\";\n\n      if (kbUtil.isValidKeyIdentifier(keyName)) {\n        return keyName;\n      }\n\n      if (keyName.length == 1 && keyName >= \"a\" && keyName <= \"z\") {\n        return keyName.toUpperCase();\n      }\n\n      keyName = keyName.toLowerCase();\n      var keyIdentifier =\n        this.__oldKeyNameToKeyIdentifierMap[keyName] ||\n        qx.lang.String.firstUp(keyName);\n\n      if (kbUtil.isValidKeyIdentifier(keyIdentifier)) {\n        return keyIdentifier;\n      } else {\n        return \"Unidentified\";\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STRING CONVERSION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the shortcut as string using the currently selected locale.\n     *\n     * @return {String} shortcut\n     */\n    toString() {\n      var key = this.__key;\n\n      var str = [];\n\n      for (var modifier in this.__modifier) {\n        // this.__modifier holds a map with shortcut combination keys\n        // like \"Control\", \"Alt\", \"Meta\" and \"Shift\" as keys with\n        // Boolean values\n        if (this.__modifier[modifier]) {\n          str.push(qx.locale.Key.getKeyName(\"short\", modifier));\n        }\n      }\n\n      if (key) {\n        str.push(qx.locale.Key.getKeyName(\"short\", key));\n      }\n\n      return str.join(\"+\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    // this will remove the event listener\n    this.setEnabled(false);\n\n    this.__modifier = this.__key = null;\n  }\n});\n"
  ],
  "mappings": "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"
}