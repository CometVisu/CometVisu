{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "shortcut",
    "__modifier",
    "__key",
    "setShortcut",
    "initEnabled",
    "events",
    "execute",
    "properties",
    "enabled",
    "init",
    "check",
    "event",
    "apply",
    "nullable",
    "autoRepeat",
    "members",
    "target",
    "fireDataEvent",
    "__onKeyDown",
    "getEnabled",
    "__matchesKeyEvent",
    "isAutoRepeat",
    "getTarget",
    "stop",
    "__onKeyPress",
    "_applyEnabled",
    "value",
    "old",
    "Registration",
    "addListener",
    "document",
    "documentElement",
    "removeListener",
    "_applyShortcut",
    "search",
    "msg",
    "error",
    "Error",
    "Control",
    "Shift",
    "Meta",
    "Alt",
    "index",
    "a",
    "length",
    "push",
    "substring",
    "al",
    "i",
    "identifier",
    "__normalizeKeyIdentifier",
    "e",
    "key",
    "isShiftPressed",
    "isCtrlPressed",
    "isMetaPressed",
    "isAltPressed",
    "getKeyIdentifier",
    "__oldKeyNameToKeyIdentifierMap",
    "esc",
    "ctrl",
    "print",
    "del",
    "pageup",
    "pagedown",
    "numlock",
    "numpad_0",
    "numpad_1",
    "numpad_2",
    "numpad_3",
    "numpad_4",
    "numpad_5",
    "numpad_6",
    "numpad_7",
    "numpad_8",
    "numpad_9",
    "numpad_divide",
    "numpad_multiply",
    "numpad_minus",
    "numpad_plus",
    "keyName",
    "kbUtil",
    "util",
    "Keyboard",
    "keyIdentifier",
    "isValidKeyIdentifier",
    "toUpperCase",
    "toLowerCase",
    "lang",
    "String",
    "firstUp",
    "toString",
    "str",
    "modifier",
    "locale",
    "Key",
    "getKeyName",
    "join",
    "destruct",
    "setEnabled",
    "bom",
    "Shortcut"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Shortcut.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Shortcuts can be used to globally define keyboard shortcuts.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.bom.Shortcut\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance of Command\n   *\n   * @param shortcut {String} shortcuts can be composed of optional modifier\n   *    keys Control, Alt, Shift, Meta and a non modifier key.\n   *    If no non modifier key is specified, the second parameter is evaluated.\n   *    The key must be separated by a <code>+</code> or <code>-</code> character.\n   *    Examples: Alt+F1, Control+C, Control+Alt+Delete\n   */\n  construct(shortcut) {\n    super();\n\n    this.__modifier = {};\n    this.__key = null;\n\n    if (shortcut != null) {\n      this.setShortcut(shortcut);\n    }\n\n    this.initEnabled();\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when the command is executed. Sets the \"data\" property of the event to\n     * the object that issued the command.\n     */\n    execute: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** whether the command should be respected/enabled */\n    enabled: {\n      init: true,\n      check: \"Boolean\",\n      event: \"changeEnabled\",\n      apply: \"_applyEnabled\"\n    },\n\n    /** The command shortcut */\n    shortcut: {\n      check: \"String\",\n      apply: \"_applyShortcut\",\n      nullable: true\n    },\n\n    /**\n     * Whether the execute event should be fired repeatedly if the user keep\n     * the keys pressed.\n     */\n    autoRepeat: {\n      check: \"Boolean\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    __modifier: \"\",\n    __key: \"\",\n\n    /*\n    ---------------------------------------------------------------------------\n      USER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire the \"execute\" event on this shortcut.\n     *\n     * @param target {Object} Object which issued the execute event\n     */\n    execute(target) {\n      this.fireDataEvent(\"execute\", target);\n    },\n\n    /**\n     * Key down event handler.\n     *\n     * @param event {qx.event.type.KeySequence} The key event object\n     */\n    __onKeyDown(event) {\n      if (this.getEnabled() && this.__matchesKeyEvent(event)) {\n        if (!this.isAutoRepeat()) {\n          this.execute(event.getTarget());\n        }\n        event.stop();\n      }\n    },\n\n    /**\n     * Key press event handler.\n     *\n     * @param event {qx.event.type.KeySequence} The key event object\n     */\n    __onKeyPress(event) {\n      if (this.getEnabled() && this.__matchesKeyEvent(event)) {\n        if (this.isAutoRepeat()) {\n          this.execute(event.getTarget());\n        }\n        event.stop();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyEnabled(value, old) {\n      if (value) {\n        qx.event.Registration.addListener(\n          document.documentElement,\n          \"keydown\",\n          this.__onKeyDown,\n          this\n        );\n\n        qx.event.Registration.addListener(\n          document.documentElement,\n          \"keypress\",\n          this.__onKeyPress,\n          this\n        );\n      } else {\n        qx.event.Registration.removeListener(\n          document.documentElement,\n          \"keydown\",\n          this.__onKeyDown,\n          this\n        );\n\n        qx.event.Registration.removeListener(\n          document.documentElement,\n          \"keypress\",\n          this.__onKeyPress,\n          this\n        );\n      }\n    },\n\n    // property apply\n    _applyShortcut(value, old) {\n      if (value) {\n        // do not allow whitespaces within shortcuts\n        if (value.search(/[\\s]+/) != -1) {\n          var msg = \"Whitespaces are not allowed within shortcuts\";\n          this.error(msg);\n          throw new Error(msg);\n        }\n\n        this.__modifier = {\n          Control: false,\n          Shift: false,\n          Meta: false,\n          Alt: false\n        };\n\n        this.__key = null;\n\n        // To support shortcuts with \"+\" and \"-\" as keys it is necessary\n        // to split the given value in a different way to determine the\n        // several keyIdentifiers\n        var index;\n        var a = [];\n        while (value.length > 0 && index != -1) {\n          // search for delimiters \"+\" and \"-\"\n          index = value.search(/[-+]+/);\n\n          // add identifiers - take value if no separator was found or\n          // only one char is left (second part of shortcut)\n          a.push(\n            value.length == 1 || index == -1 ? value : value.substring(0, index)\n          );\n\n          // extract the already detected identifier\n          value = value.substring(index + 1);\n        }\n        var al = a.length;\n\n        for (var i = 0; i < al; i++) {\n          var identifier = this.__normalizeKeyIdentifier(a[i]);\n\n          switch (identifier) {\n            case \"Control\":\n            case \"Shift\":\n            case \"Meta\":\n            case \"Alt\":\n              this.__modifier[identifier] = true;\n              break;\n\n            case \"Unidentified\":\n              var msg = \"Not a valid key name for a shortcut: \" + a[i];\n              this.error(msg);\n              throw msg;\n\n            default:\n              if (this.__key) {\n                var msg = \"You can only specify one non modifier key!\";\n                this.error(msg);\n                throw msg;\n              }\n\n              this.__key = identifier;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /*\n    --------------------------------------------------------------------------\n      INTERNAL MATCHING LOGIC\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Checks whether the given key event matches the shortcut's shortcut\n     *\n     * @param e {qx.event.type.KeySequence} the key event object\n     * @return {Boolean} whether the shortcuts shortcut matches the key event\n     */\n    __matchesKeyEvent(e) {\n      var key = this.__key;\n\n      if (!key) {\n        // no shortcut defined.\n        return false;\n      }\n\n      // for check special keys\n      // and check if a shortcut is a single char and special keys are pressed\n      if (\n        (!this.__modifier.Shift && e.isShiftPressed()) ||\n        (this.__modifier.Shift && !e.isShiftPressed()) ||\n        (!this.__modifier.Control && e.isCtrlPressed()) ||\n        (this.__modifier.Control && !e.isCtrlPressed()) ||\n        (!this.__modifier.Meta && e.isMetaPressed()) ||\n        (this.__modifier.Meta && !e.isMetaPressed()) ||\n        (!this.__modifier.Alt && e.isAltPressed()) ||\n        (this.__modifier.Alt && !e.isAltPressed())\n      ) {\n        return false;\n      }\n\n      if (key == e.getKeyIdentifier()) {\n        return true;\n      }\n\n      return false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      COMPATIBILITY TO COMMAND\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @lint ignoreReferenceField(__oldKeyNameToKeyIdentifierMap)\n     */\n    __oldKeyNameToKeyIdentifierMap: {\n      // all other keys are converted by converting the first letter to uppercase\n      esc: \"Escape\",\n      ctrl: \"Control\",\n      print: \"PrintScreen\",\n      del: \"Delete\",\n      pageup: \"PageUp\",\n      pagedown: \"PageDown\",\n      numlock: \"NumLock\",\n      numpad_0: \"0\",\n      numpad_1: \"1\",\n      numpad_2: \"2\",\n      numpad_3: \"3\",\n      numpad_4: \"4\",\n      numpad_5: \"5\",\n      numpad_6: \"6\",\n      numpad_7: \"7\",\n      numpad_8: \"8\",\n      numpad_9: \"9\",\n      numpad_divide: \"/\",\n      numpad_multiply: \"*\",\n      numpad_minus: \"-\",\n      numpad_plus: \"+\"\n    },\n\n    /**\n     * Checks and normalizes the key identifier.\n     *\n     * @param keyName {String} name of the key.\n     * @return {String} normalized keyIdentifier or \"Unidentified\" if a conversion was not possible\n     */\n    __normalizeKeyIdentifier(keyName) {\n      var kbUtil = qx.event.util.Keyboard;\n      var keyIdentifier = \"Unidentified\";\n\n      if (kbUtil.isValidKeyIdentifier(keyName)) {\n        return keyName;\n      }\n\n      if (keyName.length == 1 && keyName >= \"a\" && keyName <= \"z\") {\n        return keyName.toUpperCase();\n      }\n\n      keyName = keyName.toLowerCase();\n      var keyIdentifier =\n        this.__oldKeyNameToKeyIdentifierMap[keyName] ||\n        qx.lang.String.firstUp(keyName);\n\n      if (kbUtil.isValidKeyIdentifier(keyIdentifier)) {\n        return keyIdentifier;\n      } else {\n        return \"Unidentified\";\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STRING CONVERSION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the shortcut as string using the currently selected locale.\n     *\n     * @return {String} shortcut\n     */\n    toString() {\n      var key = this.__key;\n\n      var str = [];\n\n      for (var modifier in this.__modifier) {\n        // this.__modifier holds a map with shortcut combination keys\n        // like \"Control\", \"Alt\", \"Meta\" and \"Shift\" as keys with\n        // Boolean values\n        if (this.__modifier[modifier]) {\n          str.push(qx.locale.Key.getKeyName(\"short\", modifier));\n        }\n      }\n\n      if (key) {\n        str.push(qx.locale.Key.getKeyName(\"short\", key));\n      }\n\n      return str.join(\"+\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    // this will remove the event listener\n    this.setEnabled(false);\n\n    this.__modifier = this.__key = null;\n  }\n});\n"
  ],
  "mappings": "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"
}