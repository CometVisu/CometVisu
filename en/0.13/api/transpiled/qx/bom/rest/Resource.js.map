{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "event",
    "Emitter",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "description",
    "__requests",
    "__routes",
    "__pollTimers",
    "__longPollHandlers",
    "__mapFromDescription",
    "e",
    "dispose",
    "events",
    "success",
    "actionSuccess",
    "error",
    "actionError",
    "sent",
    "actionSent",
    "started",
    "actionStarted",
    "statics",
    "POLL_THROTTLE_LIMIT",
    "POLL_THROTTLE_COUNT",
    "REQUIRED",
    "placeholdersFromUrl",
    "url",
    "placeholderRe",
    "match",
    "placeholders",
    "exec",
    "push",
    "members",
    "__baseUrl",
    "__configureRequestCallback",
    "__requestHandler",
    "__begetRequest",
    "setRequestFactory",
    "fn",
    "setRequestHandler",
    "handler",
    "_getRequestHandler",
    "onsuccess",
    "callback",
    "req",
    "action",
    "response",
    "id",
    "parseInt",
    "toHashCode",
    "getResponse",
    "request",
    "emit",
    "context",
    "onfail",
    "onloadend",
    "window",
    "setTimeout",
    "onreadystatechange",
    "getTransport",
    "readyState",
    "bom",
    "Xhr",
    "HEADERS_RECEIVED",
    "OPENED",
    "payload",
    "onprogress",
    "progress",
    "lengthComputable",
    "loaded",
    "total",
    "getRequestsByAction",
    "hasRequests",
    "configureRequest",
    "_getRequest",
    "SimpleXhr",
    "__createRequest",
    "__P_156_9",
    "lang",
    "Type",
    "isArray",
    "ObjectRegistry",
    "register",
    "map",
    "method",
    "check",
    "undefined",
    "Error",
    "__declareEvent",
    "Function",
    "bind",
    "Array",
    "prototype",
    "unshift",
    "call",
    "arguments",
    "invoke",
    "apply",
    "params",
    "data",
    "config",
    "_getRequestConfig",
    "__checkParameters",
    "__configureRequest",
    "__configureJsonRequest",
    "reqHandler",
    "addListenerOnce",
    "hasOwnProperty",
    "addListener",
    "send",
    "setBaseUrl",
    "baseUrl",
    "__P_156_11",
    "Object",
    "keys",
    "forEach",
    "param",
    "rest",
    "Resource",
    "test",
    "__P_156_12",
    "setUrl",
    "setMethod",
    "classname",
    "setRequestData",
    "__P_156_13",
    "contentType",
    "getRequestHeader",
    "getMethod",
    "util",
    "Request",
    "methodAllowsRequestBody",
    "Json",
    "stringify",
    "abort",
    "varargs",
    "isNumber",
    "post",
    "getPostId",
    "fromHashCode",
    "reqs",
    "refresh",
    "poll",
    "interval",
    "immediately",
    "stopPollByAction",
    "intervalListener",
    "scope",
    "isDone",
    "isDisposed",
    "_startPoll",
    "listener",
    "setInterval",
    "intervalId",
    "clearInterval",
    "restartPollByAction",
    "timer",
    "longPoll",
    "res",
    "lastResponse",
    "immediateResponseCount",
    "throttle",
    "isImmediateResponse",
    "Date",
    "_getThrottleLimit",
    "_getThrottleCount",
    "handlerId",
    "longPollHandler",
    "route",
    "clone",
    "placeholder",
    "re",
    "RegExp",
    "defaultValue",
    "replace",
    "__P_156_4",
    "__P_156_10",
    "type",
    "constructor",
    "$$events",
    "$$disposed",
    "destruct",
    "removeListenerById"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/rest/Resource.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Richard Sternagel (rsternagel)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Client-side wrapper of a REST resource.\r\n *\r\n * Each instance represents a resource in terms of REST. A number of actions\r\n * (usually HTTP methods) unique to the resource can be defined and invoked.\r\n * A resource with its actions is configured declaratively by passing a resource\r\n * description to the constructor, or programmatically using {@link #map}.\r\n *\r\n * Each action is associated to a route. A route is a combination of method,\r\n * URL pattern and optional parameter constraints.\r\n *\r\n * An action is invoked by calling a method with the same name. When a URL\r\n * pattern of a route contains positional parameters, those parameters must be\r\n * passed when invoking the associated action. Also, constraints defined in the\r\n * route must be satisfied.\r\n *\r\n * When an action is invoked, a request is configured according to the associated\r\n * route, is passed the URL parameters, request body data, and finally send.\r\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\r\n *\r\n * No constraints on the action's name or the scope of the URLs are imposed. However,\r\n * if you want to follow RESTful design patterns it is recommended to name actions\r\n * the same as the HTTP action.\r\n *\r\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\r\n * and could therefore just as well mapped to two distinct resources (for instance,\r\n * named photos and photosTagged). What style to choose depends on the kind of data\r\n * returned. For instance, it seems sensible to stick with one resource if the filter\r\n * only limits the result set (i.e. the individual results have the same properties).\r\n *\r\n * In order to respond to successful (or erroneous) invocations of actions,\r\n * either listen to the generic \"success\" or \"error\" event and get the action\r\n * from the event data, or listen to action specific events defined at runtime.\r\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\r\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\r\n *\r\n * @group (IO)\r\n * @ignore(qx.core.Object.*)\r\n */\r\nqx.Bootstrap.define(\"qx.bom.rest.Resource\", {\r\n  extend: qx.event.Emitter,\r\n  implement: [qx.core.IDisposable],\r\n\r\n  /**\r\n   * @param description {Map?} Each key of the map is interpreted as\r\n   *  <code>action</code> name. The value associated to the key must be a map\r\n   *  with the properties <code>method</code> and <code>url</code>.\r\n   *  <code>check</code> is optional. Also see {@link #map}.\r\n   *\r\n   * @see qx.bom.rest\r\n   * @see qx.io.rest\r\n   */\r\n  construct(description) {\r\n    this.__requests = {};\r\n    this.__routes = {};\r\n    this.__pollTimers = {};\r\n    this.__longPollHandlers = {};\r\n\r\n    try {\r\n      if (typeof description !== \"undefined\") {\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          qx.core.Assert.assertMap(description);\r\n        }\r\n        this.__mapFromDescription(description);\r\n      }\r\n    } catch (e) {\r\n      this.dispose();\r\n      throw e;\r\n    }\r\n  },\r\n\r\n  events: {\r\n    /**\r\n     * Fired when any request was successful.\r\n     *\r\n     * The action the successful request is associated to, as well as the\r\n     * request itself, can be retrieved from the event’s properties.\r\n     * Additionally, an action specific event is fired that follows the pattern\r\n     * \"<action>Success\", e.g. \"indexSuccess\".\r\n     */\r\n    success: \"qx.bom.rest.Resource\",\r\n\r\n    /**\r\n     * Fired when request associated to action given in prefix was successful.\r\n     *\r\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\r\n     * successful.\r\n     */\r\n    actionSuccess: \"qx.bom.rest.Resource\",\r\n\r\n    /**\r\n     * Fired when any request fails.\r\n     *\r\n     * The action the failed request is associated to, as well as the\r\n     * request itself, can be retrieved from the event’s properties.\r\n     * Additionally, an action specific event is fired that follows the pattern\r\n     * \"<action>Error\", e.g. \"indexError\".\r\n     */\r\n    error: \"qx.bom.rest.Resource\",\r\n\r\n    /**\r\n     * Fired when any request associated to action given in prefix fails.\r\n     *\r\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\r\n     */\r\n    actionError: \"qx.bom.rest.Resource\",\r\n\r\n    /**\r\n     * Fired when a request is sent to the given endpoint.\r\n     */\r\n    sent: \"qx.bom.rest.Resource\",\r\n\r\n    /**\r\n     * Fired when any request associated to action is sent to the given endpoint.\r\n     *\r\n     * For example, \"indexSent\" is fired when <code>index()</code> was\r\n     * called.\r\n     */\r\n    actionSent: \"qx.bom.rest.Resource\",\r\n\r\n    /**\r\n     * Fired when a request is started to the given endpoint. This moment is right after the request\r\n     * was opened and send.\r\n     */\r\n    started: \"qx.bom.rest.Resource\",\r\n\r\n    /**\r\n     * Fired when any request associated to action is started to the given endpoint. This moment is\r\n     * right after the request was opened and send.\r\n     *\r\n     * For example, \"indexStarted\" is fired when <code>index()</code> was called.\r\n     */\r\n    actionStarted: \"qx.bom.rest.Resource\"\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * Number of milliseconds below a long-poll request is considered immediate and\r\n     * subject to throttling checks.\r\n     */\r\n    POLL_THROTTLE_LIMIT: 100,\r\n\r\n    /**\r\n     * Number of immediate long-poll responses accepted before throttling takes place.\r\n     */\r\n    POLL_THROTTLE_COUNT: 30,\r\n\r\n    /**\r\n     * A symbol used in checks to declare required parameter.\r\n     */\r\n    REQUIRED: true,\r\n\r\n    /**\r\n     * Get placeholders from URL.\r\n     *\r\n     * @param url {String} The URL to parse for placeholders.\r\n     * @return {Array} Array of placeholders without the placeholder prefix.\r\n     */\r\n    placeholdersFromUrl(url) {\r\n      var placeholderRe = /\\{(\\w+)(=\\w+)?\\}/g,\r\n        match,\r\n        placeholders = [];\r\n\r\n      // With g flag set, searching begins at the regex object's\r\n      // lastIndex, which is zero initially and increments with each match.\r\n      while ((match = placeholderRe.exec(url))) {\r\n        placeholders.push(match[1]);\r\n      }\r\n\r\n      return placeholders;\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __requests: null,\r\n    __routes: null,\r\n    __baseUrl: null,\r\n    __pollTimers: null,\r\n    __longPollHandlers: null,\r\n    __configureRequestCallback: null,\r\n\r\n    /**\r\n     * @type {Map} Request callbacks for 'onsuccess', 'onfail' and 'onloadend' - see {@link #setRequestHandler}.\r\n     */\r\n    __requestHandler: null,\r\n\r\n    /**\r\n     * @type {Function} Function which returns instances from {@link qx.io.request.AbstractRequest}.\r\n     */\r\n    __begetRequest: null,\r\n\r\n    //\r\n    // Request\r\n    //\r\n\r\n    /**\r\n     * Set a request factory function to switch the request implementation.\r\n     * The created requests have to implement {@link qx.io.request.AbstractRequest}.\r\n     *\r\n     * @param fn {Function} Function which returns request instances.\r\n     *\r\n     * @internal\r\n     */\r\n    setRequestFactory(fn) {\r\n      this.__begetRequest = fn;\r\n    },\r\n\r\n    /**\r\n     * Sets request callbacks for 'onsuccess', 'onfail' and 'onloadend'.\r\n     *\r\n     * @param handler {Map} Map defining callbacks and their context.\r\n     *\r\n     * @internal\r\n     */\r\n    setRequestHandler(handler) {\r\n      this.__requestHandler = handler;\r\n    },\r\n\r\n    /**\r\n     * Provides the request callbacks for 'onsuccess', 'onfail' and 'onloadend'.\r\n     *\r\n     * @return {Map} Map defining callbacks and their context.\r\n     */\r\n    _getRequestHandler() {\r\n      return this.__requestHandler === null\r\n        ? {\r\n            onsuccess: {\r\n              callback(req, action) {\r\n                return function () {\r\n                  var response = {\r\n                    id: parseInt(req.toHashCode(), 10),\r\n                    response: req.getResponse(),\r\n                    request: req,\r\n                    action: action\r\n                  };\r\n\r\n                  this.emit(action + \"Success\", response);\r\n                  this.emit(\"success\", response);\r\n                };\r\n              },\r\n              context: this\r\n            },\r\n\r\n            onfail: {\r\n              callback(req, action) {\r\n                return function () {\r\n                  var response = {\r\n                    id: parseInt(req.toHashCode(), 10),\r\n                    response: req.getResponse(),\r\n                    request: req,\r\n                    action: action\r\n                  };\r\n\r\n                  this.emit(action + \"Error\", response);\r\n                  this.emit(\"error\", response);\r\n                };\r\n              },\r\n              context: this\r\n            },\r\n\r\n            onloadend: {\r\n              callback(req, action) {\r\n                return function () {\r\n                  // [#8315] // dispose asynchronous to work with Sinon.js\r\n                  window.setTimeout(function () {\r\n                    req.dispose();\r\n                  }, 0);\r\n                };\r\n              },\r\n              context: this\r\n            },\r\n\r\n            onreadystatechange: {\r\n              callback(req, action) {\r\n                return function () {\r\n                  if (\r\n                    req.getTransport().readyState ===\r\n                    qx.bom.request.Xhr.HEADERS_RECEIVED\r\n                  ) {\r\n                    var response = {\r\n                      id: parseInt(req.toHashCode(), 10),\r\n                      request: req,\r\n                      action: action\r\n                    };\r\n\r\n                    this.emit(action + \"Sent\", response);\r\n                    this.emit(\"sent\", response);\r\n                  }\r\n\r\n                  if (\r\n                    req.getTransport().readyState === qx.bom.request.Xhr.OPENED\r\n                  ) {\r\n                    var payload = {\r\n                      id: parseInt(req.toHashCode(), 10),\r\n                      request: req,\r\n                      action: action\r\n                    };\r\n\r\n                    this.emit(action + \"Started\", payload);\r\n                    this.emit(\"started\", payload);\r\n                  }\r\n                };\r\n              },\r\n              context: this\r\n            },\r\n\r\n            onprogress: {\r\n              callback(req, action) {\r\n                return function () {\r\n                  var payload = {\r\n                    id: parseInt(req.toHashCode(), 10),\r\n                    request: req,\r\n                    action: action,\r\n                    progress: {\r\n                      lengthComputable:\r\n                        req.getTransport().progress.lengthComputable,\r\n                      loaded: req.getTransport().progress.loaded,\r\n                      total: req.getTransport().progress.total\r\n                    }\r\n                  };\r\n\r\n                  this.emit(action + \"Progress\", payload);\r\n                  this.emit(\"progress\", payload);\r\n                };\r\n              },\r\n              context: this\r\n            }\r\n          }\r\n        : this.__requestHandler;\r\n    },\r\n\r\n    /**\r\n     * Retrieve the currently stored request objects for an action.\r\n     *\r\n     * @param action {String} The action (e.g. \"get\", \"post\" ...).\r\n     * @return {Array|null} Request objects.\r\n     *\r\n     * @internal\r\n     */\r\n    getRequestsByAction(action) {\r\n      var hasRequests = this.__requests !== null && action in this.__requests;\r\n      return hasRequests ? this.__requests[action] : null;\r\n    },\r\n\r\n    /**\r\n     * Configure request.\r\n     *\r\n     * @param callback {Function} Function called before request is send.\r\n     *   Receives request, action, params and data.\r\n     */\r\n    configureRequest(callback) {\r\n      this.__configureRequestCallback = callback;\r\n    },\r\n\r\n    /**\r\n     * Get request.\r\n     *\r\n     * May be overridden to change type of request.\r\n     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object\r\n     */\r\n    _getRequest() {\r\n      return this.__begetRequest === null\r\n        ? new qx.bom.request.SimpleXhr()\r\n        : this.__begetRequest();\r\n    },\r\n\r\n    /**\r\n     * Create request.\r\n     *\r\n     * @param action {String} The action the created request is associated to.\r\n     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object\r\n     */\r\n    __createRequest(action) {\r\n      var req = this._getRequest();\r\n\r\n      if (!qx.lang.Type.isArray(this.__requests[action])) {\r\n        this.__requests[action] = [];\r\n      }\r\n\r\n      qx.core.ObjectRegistry.register(req);\r\n      this.__requests[action].push(req);\r\n\r\n      return req;\r\n    },\r\n\r\n    //\r\n    // Routes and actions\r\n    //\r\n\r\n    /**\r\n     * Map action to combination of method and URL pattern.\r\n     *\r\n     * @param action {String} Action to associate to request.\r\n     * @param method {String} Method to configure request with.\r\n     * @param url {String} URL to configure request with. May contain positional\r\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\r\n     *   is invoked. Parameters are optional, unless a check is defined. A default\r\n     *   value can be provided (<code>{param=default}</code>).\r\n     * @param check {Map?} Map defining parameter constraints, where the key is\r\n     *   the URL parameter and the value a regular expression (to match string) or\r\n     *   <code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).\r\n     */\r\n    map(action, method, url, check) {\r\n      this.__routes[action] = [method, url, check];\r\n\r\n      // Track requests\r\n      this.__requests[action] = [];\r\n\r\n      // Undefine generic getter when action is named \"get\"\r\n      if (action == \"get\") {\r\n        this[action] = undefined;\r\n      }\r\n\r\n      // Do not overwrite existing \"non-action\" methods unless the method is\r\n      // null (i.e. because it exists as a stub for documentation)\r\n      if (\r\n        typeof this[action] !== \"undefined\" &&\r\n        this[action] !== null &&\r\n        this[action].action !== true\r\n      ) {\r\n        throw new Error(\r\n          \"Method with name of action (\" + action + \") already exists\"\r\n        );\r\n      }\r\n\r\n      this.__declareEvent(action + \"Success\");\r\n      this.__declareEvent(action + \"Error\");\r\n\r\n      this[action] = qx.lang.Function.bind(function () {\r\n        Array.prototype.unshift.call(arguments, action);\r\n        return this.invoke.apply(this, arguments);\r\n      }, this);\r\n\r\n      // Method is safe to overwrite\r\n      this[action].action = true;\r\n    },\r\n\r\n    /**\r\n     * Invoke action with parameters.\r\n     *\r\n     * Internally called by actions dynamically created.\r\n     *\r\n     * May be overridden to customize action and parameter handling.\r\n     *\r\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\r\n     *\r\n     * @param action {String} Action to invoke.\r\n     * @param params {Map} Map of parameters inserted into URL when a matching\r\n     *  positional parameter is found.\r\n     * @param data {Map|String} Data to be send as part of the request.\r\n     *  See {@link qx.bom.request.SimpleXhr#getRequestData}.\r\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\r\n     * @return {Number} Id of the action's invocation.\r\n     */\r\n    invoke(action, params, data) {\r\n      var req = this.__createRequest(action),\r\n        params = params == null ? {} : params,\r\n        config = this._getRequestConfig(action, params);\r\n\r\n      // Cache parameters\r\n      this.__routes[action].params = params;\r\n\r\n      // Check parameters\r\n      this.__checkParameters(params, config.check);\r\n\r\n      // Configure request\r\n      this.__configureRequest(req, config, data);\r\n\r\n      // Run configuration callback, passing in pre-configured request\r\n      if (this.__configureRequestCallback) {\r\n        this.__configureRequestCallback.call(this, req, action, params, data);\r\n      }\r\n\r\n      // Configure JSON request (content type may have been set in configuration callback)\r\n      this.__configureJsonRequest(req, config, data);\r\n\r\n      var reqHandler = this._getRequestHandler();\r\n\r\n      // Handle successful request\r\n      req.addListenerOnce(\r\n        \"success\",\r\n        reqHandler.onsuccess.callback(req, action),\r\n        reqHandler.onsuccess.context\r\n      );\r\n\r\n      // Handle erroneous request\r\n      req.addListenerOnce(\r\n        \"fail\",\r\n        reqHandler.onfail.callback(req, action),\r\n        reqHandler.onfail.context\r\n      );\r\n\r\n      // Handle loadend (Note that loadEnd is fired after \"success\")\r\n      req.addListenerOnce(\r\n        \"loadEnd\",\r\n        reqHandler.onloadend.callback(req, action),\r\n        reqHandler.onloadend.context\r\n      );\r\n\r\n      if (reqHandler.hasOwnProperty(\"onreadystatechange\")) {\r\n        req.addListener(\r\n          \"readystatechange\",\r\n          reqHandler.onreadystatechange.callback(req, action),\r\n          reqHandler.onreadystatechange.context\r\n        );\r\n      }\r\n      // Handle progress (which is fired multiple times)\r\n      if (reqHandler.hasOwnProperty(\"onprogress\")) {\r\n        req.addListener(\r\n          \"progress\",\r\n          reqHandler.onprogress.callback(req, action),\r\n          reqHandler.onprogress.context\r\n        );\r\n      }\r\n\r\n      req.send();\r\n\r\n      return parseInt(req.toHashCode(), 10);\r\n    },\r\n\r\n    /**\r\n     * Set base URL.\r\n     *\r\n     * The base URL is prepended to the URLs given in the description.\r\n     * Changes affect all future invocations.\r\n     *\r\n     * @param baseUrl {String} Base URL.\r\n     */\r\n    setBaseUrl(baseUrl) {\r\n      this.__baseUrl = baseUrl;\r\n    },\r\n\r\n    /**\r\n     * Check parameters.\r\n     *\r\n     * @param params {Map} Parameters.\r\n     * @param check {Map} Checks.\r\n     */\r\n    __checkParameters(params, check) {\r\n      if (typeof check !== \"undefined\") {\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          qx.core.Assert.assertObject(\r\n            check,\r\n            \"Check must be object with params as keys\"\r\n          );\r\n        }\r\n\r\n        Object.keys(check).forEach(function (param) {\r\n          // Warn about invalid check\r\n          if (qx.core.Environment.get(\"qx.debug\")) {\r\n            if (check[param] !== true) {\r\n              if (qx.core.Environment.get(\"qx.debug\")) {\r\n                qx.core.Assert.assertRegExp(check[param]);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Missing parameter\r\n          if (\r\n            check[param] === qx.bom.rest.Resource.REQUIRED &&\r\n            typeof params[param] === \"undefined\"\r\n          ) {\r\n            throw new Error(\"Missing parameter '\" + param + \"'\");\r\n          }\r\n\r\n          // Ignore invalid checks\r\n          if (!(check[param] && typeof check[param].test == \"function\")) {\r\n            return;\r\n          }\r\n\r\n          // Invalid parameter\r\n          if (!check[param].test(params[param])) {\r\n            throw new Error(\"Parameter '\" + param + \"' is invalid\");\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Configure request.\r\n     *\r\n     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.\r\n     * @param config {Map} Configuration.\r\n     * @param data {Map} Data.\r\n     */\r\n    __configureRequest(req, config, data) {\r\n      req.setUrl(config.url);\r\n\r\n      if (!req.setMethod && config.method !== \"GET\") {\r\n        throw new Error(\r\n          \"Request (\" +\r\n            req.classname +\r\n            \") doesn't support other HTTP methods than 'GET'\"\r\n        );\r\n      }\r\n\r\n      if (req.setMethod) {\r\n        req.setMethod(config.method);\r\n      }\r\n\r\n      if (data) {\r\n        req.setRequestData(data);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Serialize data to JSON when content type indicates.\r\n     *\r\n     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.\r\n     * @param config {Map} Configuration.\r\n     * @param data {Map} Data.\r\n     */\r\n    __configureJsonRequest(req, config, data) {\r\n      if (data) {\r\n        var contentType = req.getRequestHeader(\"Content-Type\");\r\n\r\n        if (\r\n          req.getMethod &&\r\n          qx.util.Request.methodAllowsRequestBody(req.getMethod())\r\n        ) {\r\n          if (/application\\/.*\\+?json/.test(contentType)) {\r\n            data = qx.lang.Json.stringify(data);\r\n            req.setRequestData(data);\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Abort action.\r\n     *\r\n     * @param varargs {String|Number} Action of which all invocations to abort\r\n     *  (when string), or a single invocation of an action to abort (when number)\r\n     */\r\n    abort(varargs) {\r\n      if (qx.lang.Type.isNumber(varargs)) {\r\n        var id = varargs;\r\n        var post = qx.core.ObjectRegistry.getPostId();\r\n        var req = qx.core.ObjectRegistry.fromHashCode(id + post);\r\n        if (req) {\r\n          req.abort();\r\n        }\r\n      } else {\r\n        var action = varargs;\r\n        var reqs = this.__requests[action];\r\n        if (this.__requests[action]) {\r\n          reqs.forEach(function (req) {\r\n            req.abort();\r\n          });\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Resend request associated to action.\r\n     *\r\n     * Replays parameters given when action was invoked originally.\r\n     *\r\n     * @param action {String} Action to refresh.\r\n     */\r\n    refresh(action) {\r\n      this.invoke(action, this.__routes[action].params);\r\n    },\r\n\r\n    /**\r\n     * Periodically invoke action.\r\n     *\r\n     * Replays parameters given when action was invoked originally. When the\r\n     * action was not yet invoked and requires parameters, parameters must be\r\n     * given.\r\n     *\r\n     * Please note that IE tends to cache overly aggressive. One work-around is\r\n     * to disable caching on the client side by configuring the request with\r\n     * <code>setCache(false)</code>. If you control the server, a better\r\n     * work-around is to include appropriate headers to explicitly control\r\n     * caching. This way you still avoid requests that can be correctly answered\r\n     * from cache (e.g. when nothing has changed since the last poll). Please\r\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\r\n     * XMLHttpRequest Caching Test</a> for available options.\r\n     *\r\n     * @lint ignoreUnused(intervalListener)\r\n     *\r\n     * @param action {String} Action to poll.\r\n     * @param interval {Number} Interval in ms.\r\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\r\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\r\n     *   invoke a call immediately.\r\n     */\r\n    poll(action, interval, params, immediately) {\r\n      // Dispose timer previously created for action\r\n      if (this.__pollTimers[action]) {\r\n        this.stopPollByAction(action);\r\n      }\r\n\r\n      // Fallback to previous params\r\n      if (typeof params == \"undefined\") {\r\n        params = this.__routes[action].params;\r\n      }\r\n\r\n      // Invoke immediately\r\n      if (immediately) {\r\n        this.invoke(action, params);\r\n      }\r\n\r\n      var intervalListener = (function (scope) {\r\n        return function () {\r\n          var req = scope.__requests[action][0];\r\n          if (!immediately && !req) {\r\n            scope.invoke(action, params);\r\n            return;\r\n          }\r\n          if (req.isDone() || req.isDisposed()) {\r\n            scope.refresh(action);\r\n          }\r\n        };\r\n      })(this);\r\n\r\n      this._startPoll(action, intervalListener, interval);\r\n    },\r\n\r\n    /**\r\n     * Start a poll process.\r\n     *\r\n     * @param action {String} Action to poll.\r\n     * @param listener {Function} The function to repeatedly execute at the given interval.\r\n     * @param interval {Number} Interval in ms.\r\n     */\r\n    _startPoll(action, listener, interval) {\r\n      this.__pollTimers[action] = {\r\n        id: window.setInterval(listener, interval),\r\n        interval: interval,\r\n        listener: listener\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Stops a poll process by the associated action.\r\n     *\r\n     * @param action {String} Action to poll.\r\n     */\r\n    stopPollByAction(action) {\r\n      if (action in this.__pollTimers) {\r\n        var intervalId = this.__pollTimers[action].id;\r\n        window.clearInterval(intervalId);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Restarts a poll process by the associated action.\r\n     *\r\n     * @param action {String} Action to poll.\r\n     */\r\n    restartPollByAction(action) {\r\n      if (action in this.__pollTimers) {\r\n        var timer = this.__pollTimers[action];\r\n        this.stopPollByAction(action);\r\n        this._startPoll(action, timer.listener, timer.interval);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Long-poll action.\r\n     *\r\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\r\n     * server signals new data. The server determines when new data is available,\r\n     * while the client keeps open a request. Requires configuration on the\r\n     * server side. Basically, the server must not close a connection until\r\n     * new data is available. For a high level introduction to long-polling,\r\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\r\n     * Ajax with long polling</a>.\r\n     *\r\n     * Uses {@link #refresh} internally. Make sure you understand the\r\n     * implications of IE's tendency to cache overly aggressive.\r\n     *\r\n     * Note no interval is given on the client side.\r\n     *\r\n     * @lint ignoreUnused(longPollHandler)\r\n     *\r\n     * @param action {String} Action to poll.\r\n     * @return {String} Id of handler responsible for long-polling. To stop\r\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\r\n     */\r\n    longPoll(action) {\r\n      var res = this,\r\n        lastResponse, // Keep track of last response\r\n        immediateResponseCount = 0; // Count immediate responses\r\n\r\n      // Throttle to prevent high load on server and client\r\n      function throttle() {\r\n        var isImmediateResponse =\r\n          lastResponse && new Date() - lastResponse < res._getThrottleLimit();\r\n\r\n        if (isImmediateResponse) {\r\n          immediateResponseCount += 1;\r\n          if (immediateResponseCount > res._getThrottleCount()) {\r\n            if (qx.core.Environment.get(\"qx.debug\")) {\r\n              qx.Bootstrap.debug(\r\n                \"Received successful response more than \" +\r\n                  res._getThrottleCount() +\r\n                  \" times subsequently, each within \" +\r\n                  res._getThrottleLimit() +\r\n                  \" ms. Throttling.\"\r\n              );\r\n            }\r\n            return true;\r\n          }\r\n        }\r\n\r\n        // Reset counter on delayed response\r\n        if (!isImmediateResponse) {\r\n          immediateResponseCount = 0;\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      var handlerId = (this.__longPollHandlers[action] = this.addListener(\r\n        action + \"Success\",\r\n        function longPollHandler() {\r\n          if (res.isDisposed()) {\r\n            return;\r\n          }\r\n\r\n          if (!throttle()) {\r\n            lastResponse = new Date();\r\n            res.refresh(action);\r\n          }\r\n        }\r\n      ));\r\n\r\n      this.invoke(action);\r\n      return handlerId;\r\n    },\r\n\r\n    /**\r\n     * Get request configuration for action and parameters.\r\n     *\r\n     * This is were placeholders are replaced with parameters.\r\n     *\r\n     * @param action {String} Action associated to request.\r\n     * @param params {Map} Parameters to embed in request.\r\n     * @return {Map} Map of configuration settings. Has the properties\r\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\r\n     */\r\n    _getRequestConfig(action, params) {\r\n      var route = this.__routes[action];\r\n\r\n      // Not modify original params\r\n      var params = qx.lang.Object.clone(params);\r\n\r\n      if (!qx.lang.Type.isArray(route)) {\r\n        throw new Error(\"No route for action \" + action);\r\n      }\r\n\r\n      var method = route[0],\r\n        url = this.__baseUrl !== null ? this.__baseUrl + route[1] : route[1],\r\n        check = route[2],\r\n        placeholders = qx.bom.rest.Resource.placeholdersFromUrl(url);\r\n\r\n      params = params || {};\r\n\r\n      placeholders.forEach(function (placeholder) {\r\n        // Placeholder part of template and default value\r\n        var re = new RegExp(\"{\" + placeholder + \"=?(\\\\w+)?}\"),\r\n          defaultValue = url.match(re)[1];\r\n\r\n        // Fill in default or empty string when missing\r\n        if (typeof params[placeholder] === \"undefined\") {\r\n          if (defaultValue) {\r\n            params[placeholder] = defaultValue;\r\n          } else {\r\n            params[placeholder] = \"\";\r\n          }\r\n        }\r\n\r\n        url = url.replace(re, params[placeholder]);\r\n      });\r\n\r\n      return { method: method, url: url, check: check };\r\n    },\r\n\r\n    /**\r\n     * Override to adjust the throttle limit.\r\n     * @return {Integer} Throttle limit in milliseconds\r\n     */\r\n    _getThrottleLimit() {\r\n      return qx.bom.rest.Resource.POLL_THROTTLE_LIMIT;\r\n    },\r\n\r\n    /**\r\n     * Override to adjust the throttle count.\r\n     * @return {Integer} Throttle count\r\n     */\r\n    _getThrottleCount() {\r\n      return qx.bom.rest.Resource.POLL_THROTTLE_COUNT;\r\n    },\r\n\r\n    /**\r\n     * Map actions from description.\r\n     *\r\n     * Allows to decoratively define routes.\r\n     *\r\n     * @param description {Map} Map that defines the routes.\r\n     */\r\n    __mapFromDescription(description) {\r\n      Object.keys(description).forEach(function (action) {\r\n        var route = description[action],\r\n          method = route.method,\r\n          url = route.url,\r\n          check = route.check;\r\n\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          qx.core.Assert.assertString(\r\n            method,\r\n            \"Method must be string for route '\" + action + \"'\"\r\n          );\r\n\r\n          qx.core.Assert.assertString(\r\n            url,\r\n            \"URL must be string for route '\" + action + \"'\"\r\n          );\r\n        }\r\n\r\n        this.map(action, method, url, check);\r\n      }, this);\r\n    },\r\n\r\n    /**\r\n     * Declare event at runtime.\r\n     *\r\n     * @param type {String} Type of event.\r\n     */\r\n    __declareEvent(type) {\r\n      if (!this.constructor.$$events) {\r\n        this.constructor.$$events = {};\r\n      }\r\n\r\n      if (!this.constructor.$$events[type]) {\r\n        this.constructor.$$events[type] = \"qx.bom.rest.Resource\";\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      DISPOSER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Returns true if the object is disposed.\r\n     *\r\n     * @return {Boolean} Whether the object has been disposed\r\n     */\r\n    isDisposed() {\r\n      return this.$$disposed || false;\r\n    },\r\n\r\n    /**\r\n     * Dispose this object\r\n     *\r\n     */\r\n    dispose() {\r\n      // Check first\r\n      if (this.$$disposed) {\r\n        return;\r\n      }\r\n\r\n      // Mark as disposed (directly, not at end, to omit recursions)\r\n      this.$$disposed = true;\r\n\r\n      // Debug output\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 2) {\r\n          qx.Bootstrap.debug(\r\n            this,\r\n            \"Disposing \" + this.classname + \"[\" + this.toHashCode() + \"]\"\r\n          );\r\n        }\r\n      }\r\n\r\n      this.destruct();\r\n\r\n      // Additional checks\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 0) {\r\n          var key, value;\r\n          for (key in this) {\r\n            value = this[key];\r\n\r\n            // Check for Objects but respect values attached to the prototype itself\r\n            if (\r\n              value !== null &&\r\n              typeof value === \"object\" &&\r\n              !qx.Bootstrap.isString(value)\r\n            ) {\r\n              // Check prototype value\r\n              // undefined is the best, but null may be used as a placeholder for\r\n              // private variables (hint: checks in qx.Class.define). We accept both.\r\n              if (this.constructor.prototype[key] != null) {\r\n                continue;\r\n              }\r\n\r\n              var ff2 = navigator.userAgent.indexOf(\"rv:1.8.1\") != -1;\r\n              var ie6 = navigator.userAgent.indexOf(\"MSIE 6.0\") != -1;\r\n              // keep the old behavior for IE6 and FF2\r\n              if (ff2 || ie6) {\r\n                if (\r\n                  (qx.core.Object && value instanceof qx.core.Object) ||\r\n                  qx.core.Environment.get(\"qx.debug.dispose.level\") > 1\r\n                ) {\r\n                  qx.Bootstrap.warn(\r\n                    this,\r\n                    \"Missing destruct definition for '\" +\r\n                      key +\r\n                      \"' in \" +\r\n                      this.classname +\r\n                      \"[\" +\r\n                      this.toHashCode() +\r\n                      \"]: \" +\r\n                      value\r\n                  );\r\n\r\n                  delete this[key];\r\n                }\r\n              } else {\r\n                if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 1) {\r\n                  qx.Bootstrap.warn(\r\n                    this,\r\n                    \"Missing destruct definition for '\" +\r\n                      key +\r\n                      \"' in \" +\r\n                      this.classname +\r\n                      \"[\" +\r\n                      this.toHashCode() +\r\n                      \"]: \" +\r\n                      value\r\n                  );\r\n\r\n                  delete this[key];\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Destructs the Resource.\r\n     *\r\n     * All created requests, routes and pollTimers will be disposed.\r\n     */\r\n    destruct() {\r\n      var action;\r\n\r\n      for (action in this.__requests) {\r\n        if (this.__requests[action]) {\r\n          this.__requests[action].forEach(function (req) {\r\n            req.dispose();\r\n          });\r\n        }\r\n      }\r\n\r\n      if (this.__pollTimers) {\r\n        for (action in this.__pollTimers) {\r\n          this.stopPollByAction(action);\r\n        }\r\n      }\r\n\r\n      if (this.__longPollHandlers) {\r\n        for (action in this.__longPollHandlers) {\r\n          var id = this.__longPollHandlers[action];\r\n          this.removeListenerById(id);\r\n        }\r\n      }\r\n\r\n      this.__requests = this.__routes = this.__pollTimers = null;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,sBAAsB,EAAE;IAC1CC,MAAM,EAAEL,EAAE,CAACM,KAAK,CAACC,OAAO;IACxBC,SAAS,EAAE,CAACR,EAAE,CAACS,IAAI,CAACC,WAAW,CAAC;IAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,WAAW,EAAE;MACrB,IAAI,CAACC,SAAU,GAAG,CAAC,CAAC;MACpB,IAAI,CAACC,SAAQ,GAAG,CAAC,CAAC;MAClB,IAAI,CAACC,SAAY,GAAG,CAAC,CAAC;MACtB,IAAI,CAACC,SAAkB,GAAG,CAAC,CAAC;MAE5B,IAAI;QACF,IAAI,OAAOJ,WAAW,KAAK,WAAW,EAAE;UAItC,IAAI,CAACK,SAAoB,CAACL,WAAW,CAAC;QACxC;MACF,CAAC,CAAC,OAAOM,CAAC,EAAE;QACV,IAAI,CAACC,OAAO,CAAC,CAAC;QACd,MAAMD,CAAC;MACT;IACF,CAAC;IAEDE,MAAM,EAAE;MACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,sBAAsB;MAE/B;AACJ;AACA;AACA;AACA;AACA;MACIC,aAAa,EAAE,sBAAsB;MAErC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAE,sBAAsB;MAE7B;AACJ;AACA;AACA;AACA;MACIC,WAAW,EAAE,sBAAsB;MAEnC;AACJ;AACA;MACIC,IAAI,EAAE,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"
}