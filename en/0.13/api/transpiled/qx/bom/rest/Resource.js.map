{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "event",
    "Emitter",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "description",
    "__requests",
    "__routes",
    "__pollTimers",
    "__longPollHandlers",
    "__mapFromDescription",
    "e",
    "dispose",
    "events",
    "success",
    "actionSuccess",
    "error",
    "actionError",
    "sent",
    "actionSent",
    "started",
    "actionStarted",
    "statics",
    "POLL_THROTTLE_LIMIT",
    "POLL_THROTTLE_COUNT",
    "REQUIRED",
    "placeholdersFromUrl",
    "url",
    "placeholderRe",
    "match",
    "placeholders",
    "exec",
    "push",
    "members",
    "__baseUrl",
    "__configureRequestCallback",
    "__requestHandler",
    "__begetRequest",
    "setRequestFactory",
    "fn",
    "setRequestHandler",
    "handler",
    "_getRequestHandler",
    "onsuccess",
    "callback",
    "req",
    "action",
    "response",
    "id",
    "parseInt",
    "toHashCode",
    "getResponse",
    "request",
    "emit",
    "context",
    "onfail",
    "onloadend",
    "window",
    "setTimeout",
    "onreadystatechange",
    "getTransport",
    "readyState",
    "bom",
    "Xhr",
    "HEADERS_RECEIVED",
    "OPENED",
    "payload",
    "onprogress",
    "progress",
    "lengthComputable",
    "loaded",
    "total",
    "getRequestsByAction",
    "hasRequests",
    "configureRequest",
    "_getRequest",
    "SimpleXhr",
    "__createRequest",
    "lang",
    "Type",
    "isArray",
    "ObjectRegistry",
    "register",
    "map",
    "method",
    "check",
    "undefined",
    "Error",
    "__declareEvent",
    "Function",
    "bind",
    "Array",
    "prototype",
    "unshift",
    "call",
    "arguments",
    "invoke",
    "apply",
    "params",
    "data",
    "config",
    "_getRequestConfig",
    "__checkParameters",
    "__configureRequest",
    "__configureJsonRequest",
    "reqHandler",
    "addListenerOnce",
    "hasOwnProperty",
    "addListener",
    "send",
    "setBaseUrl",
    "baseUrl",
    "Object",
    "keys",
    "forEach",
    "param",
    "rest",
    "Resource",
    "test",
    "setUrl",
    "setMethod",
    "classname",
    "setRequestData",
    "contentType",
    "getRequestHeader",
    "getMethod",
    "util",
    "Request",
    "methodAllowsRequestBody",
    "Json",
    "stringify",
    "abort",
    "varargs",
    "isNumber",
    "post",
    "getPostId",
    "fromHashCode",
    "reqs",
    "refresh",
    "poll",
    "interval",
    "immediately",
    "stopPollByAction",
    "intervalListener",
    "scope",
    "isDone",
    "isDisposed",
    "_startPoll",
    "listener",
    "setInterval",
    "intervalId",
    "clearInterval",
    "restartPollByAction",
    "timer",
    "longPoll",
    "res",
    "lastResponse",
    "immediateResponseCount",
    "throttle",
    "isImmediateResponse",
    "Date",
    "_getThrottleLimit",
    "_getThrottleCount",
    "handlerId",
    "longPollHandler",
    "route",
    "clone",
    "placeholder",
    "re",
    "RegExp",
    "defaultValue",
    "replace",
    "type",
    "constructor",
    "$$events",
    "$$disposed",
    "destruct",
    "removeListenerById"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/rest/Resource.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Client-side wrapper of a REST resource.\n *\n * Each instance represents a resource in terms of REST. A number of actions\n * (usually HTTP methods) unique to the resource can be defined and invoked.\n * A resource with its actions is configured declaratively by passing a resource\n * description to the constructor, or programmatically using {@link #map}.\n *\n * Each action is associated to a route. A route is a combination of method,\n * URL pattern and optional parameter constraints.\n *\n * An action is invoked by calling a method with the same name. When a URL\n * pattern of a route contains positional parameters, those parameters must be\n * passed when invoking the associated action. Also, constraints defined in the\n * route must be satisfied.\n *\n * When an action is invoked, a request is configured according to the associated\n * route, is passed the URL parameters, request body data, and finally send.\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\n *\n * No constraints on the action's name or the scope of the URLs are imposed. However,\n * if you want to follow RESTful design patterns it is recommended to name actions\n * the same as the HTTP action.\n *\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\n * and could therefore just as well mapped to two distinct resources (for instance,\n * named photos and photosTagged). What style to choose depends on the kind of data\n * returned. For instance, it seems sensible to stick with one resource if the filter\n * only limits the result set (i.e. the individual results have the same properties).\n *\n * In order to respond to successful (or erroneous) invocations of actions,\n * either listen to the generic \"success\" or \"error\" event and get the action\n * from the event data, or listen to action specific events defined at runtime.\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\n *\n * @group (IO)\n * @ignore(qx.core.Object.*)\n */\nqx.Bootstrap.define(\"qx.bom.rest.Resource\", {\n  extend: qx.event.Emitter,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param description {Map?} Each key of the map is interpreted as\n   *  <code>action</code> name. The value associated to the key must be a map\n   *  with the properties <code>method</code> and <code>url</code>.\n   *  <code>check</code> is optional. Also see {@link #map}.\n   *\n   * @see qx.bom.rest\n   * @see qx.io.rest\n   */\n  construct(description) {\n    this.__requests = {};\n    this.__routes = {};\n    this.__pollTimers = {};\n    this.__longPollHandlers = {};\n\n    try {\n      if (typeof description !== \"undefined\") {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertMap(description);\n        }\n        this.__mapFromDescription(description);\n      }\n    } catch (e) {\n      this.dispose();\n      throw e;\n    }\n  },\n\n  events: {\n    /**\n     * Fired when any request was successful.\n     *\n     * The action the successful request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Success\", e.g. \"indexSuccess\".\n     */\n    success: \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when request associated to action given in prefix was successful.\n     *\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\n     * successful.\n     */\n    actionSuccess: \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request fails.\n     *\n     * The action the failed request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Error\", e.g. \"indexError\".\n     */\n    error: \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action given in prefix fails.\n     *\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\n     */\n    actionError: \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when a request is sent to the given endpoint.\n     */\n    sent: \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action is sent to the given endpoint.\n     *\n     * For example, \"indexSent\" is fired when <code>index()</code> was\n     * called.\n     */\n    actionSent: \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when a request is started to the given endpoint. This moment is right after the request\n     * was opened and send.\n     */\n    started: \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action is started to the given endpoint. This moment is\n     * right after the request was opened and send.\n     *\n     * For example, \"indexStarted\" is fired when <code>index()</code> was called.\n     */\n    actionStarted: \"qx.bom.rest.Resource\"\n  },\n\n  statics: {\n    /**\n     * Number of milliseconds below a long-poll request is considered immediate and\n     * subject to throttling checks.\n     */\n    POLL_THROTTLE_LIMIT: 100,\n\n    /**\n     * Number of immediate long-poll responses accepted before throttling takes place.\n     */\n    POLL_THROTTLE_COUNT: 30,\n\n    /**\n     * A symbol used in checks to declare required parameter.\n     */\n    REQUIRED: true,\n\n    /**\n     * Get placeholders from URL.\n     *\n     * @param url {String} The URL to parse for placeholders.\n     * @return {Array} Array of placeholders without the placeholder prefix.\n     */\n    placeholdersFromUrl(url) {\n      var placeholderRe = /\\{(\\w+)(=\\w+)?\\}/g,\n        match,\n        placeholders = [];\n\n      // With g flag set, searching begins at the regex object's\n      // lastIndex, which is zero initially and increments with each match.\n      while ((match = placeholderRe.exec(url))) {\n        placeholders.push(match[1]);\n      }\n\n      return placeholders;\n    }\n  },\n\n  members: {\n    __requests: null,\n    __routes: null,\n    __baseUrl: null,\n    __pollTimers: null,\n    __longPollHandlers: null,\n    __configureRequestCallback: null,\n\n    /**\n     * @type {Map} Request callbacks for 'onsuccess', 'onfail' and 'onloadend' - see {@link #setRequestHandler}.\n     */\n    __requestHandler: null,\n\n    /**\n     * @type {Function} Function which returns instances from {@link qx.io.request.AbstractRequest}.\n     */\n    __begetRequest: null,\n\n    //\n    // Request\n    //\n\n    /**\n     * Set a request factory function to switch the request implementation.\n     * The created requests have to implement {@link qx.io.request.AbstractRequest}.\n     *\n     * @param fn {Function} Function which returns request instances.\n     *\n     * @internal\n     */\n    setRequestFactory(fn) {\n      this.__begetRequest = fn;\n    },\n\n    /**\n     * Sets request callbacks for 'onsuccess', 'onfail' and 'onloadend'.\n     *\n     * @param handler {Map} Map defining callbacks and their context.\n     *\n     * @internal\n     */\n    setRequestHandler(handler) {\n      this.__requestHandler = handler;\n    },\n\n    /**\n     * Provides the request callbacks for 'onsuccess', 'onfail' and 'onloadend'.\n     *\n     * @return {Map} Map defining callbacks and their context.\n     */\n    _getRequestHandler() {\n      return this.__requestHandler === null\n        ? {\n            onsuccess: {\n              callback(req, action) {\n                return function () {\n                  var response = {\n                    id: parseInt(req.toHashCode(), 10),\n                    response: req.getResponse(),\n                    request: req,\n                    action: action\n                  };\n\n                  this.emit(action + \"Success\", response);\n                  this.emit(\"success\", response);\n                };\n              },\n              context: this\n            },\n\n            onfail: {\n              callback(req, action) {\n                return function () {\n                  var response = {\n                    id: parseInt(req.toHashCode(), 10),\n                    response: req.getResponse(),\n                    request: req,\n                    action: action\n                  };\n\n                  this.emit(action + \"Error\", response);\n                  this.emit(\"error\", response);\n                };\n              },\n              context: this\n            },\n\n            onloadend: {\n              callback(req, action) {\n                return function () {\n                  // [#8315] // dispose asynchronous to work with Sinon.js\n                  window.setTimeout(function () {\n                    req.dispose();\n                  }, 0);\n                };\n              },\n              context: this\n            },\n\n            onreadystatechange: {\n              callback(req, action) {\n                return function () {\n                  if (\n                    req.getTransport().readyState ===\n                    qx.bom.request.Xhr.HEADERS_RECEIVED\n                  ) {\n                    var response = {\n                      id: parseInt(req.toHashCode(), 10),\n                      request: req,\n                      action: action\n                    };\n\n                    this.emit(action + \"Sent\", response);\n                    this.emit(\"sent\", response);\n                  }\n\n                  if (\n                    req.getTransport().readyState === qx.bom.request.Xhr.OPENED\n                  ) {\n                    var payload = {\n                      id: parseInt(req.toHashCode(), 10),\n                      request: req,\n                      action: action\n                    };\n\n                    this.emit(action + \"Started\", payload);\n                    this.emit(\"started\", payload);\n                  }\n                };\n              },\n              context: this\n            },\n\n            onprogress: {\n              callback(req, action) {\n                return function () {\n                  var payload = {\n                    id: parseInt(req.toHashCode(), 10),\n                    request: req,\n                    action: action,\n                    progress: {\n                      lengthComputable:\n                        req.getTransport().progress.lengthComputable,\n                      loaded: req.getTransport().progress.loaded,\n                      total: req.getTransport().progress.total\n                    }\n                  };\n\n                  this.emit(action + \"Progress\", payload);\n                  this.emit(\"progress\", payload);\n                };\n              },\n              context: this\n            }\n          }\n        : this.__requestHandler;\n    },\n\n    /**\n     * Retrieve the currently stored request objects for an action.\n     *\n     * @param action {String} The action (e.g. \"get\", \"post\" ...).\n     * @return {Array|null} Request objects.\n     *\n     * @internal\n     */\n    getRequestsByAction(action) {\n      var hasRequests = this.__requests !== null && action in this.__requests;\n      return hasRequests ? this.__requests[action] : null;\n    },\n\n    /**\n     * Configure request.\n     *\n     * @param callback {Function} Function called before request is send.\n     *   Receives request, action, params and data.\n     */\n    configureRequest(callback) {\n      this.__configureRequestCallback = callback;\n    },\n\n    /**\n     * Get request.\n     *\n     * May be overridden to change type of request.\n     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object\n     */\n    _getRequest() {\n      return this.__begetRequest === null\n        ? new qx.bom.request.SimpleXhr()\n        : this.__begetRequest();\n    },\n\n    /**\n     * Create request.\n     *\n     * @param action {String} The action the created request is associated to.\n     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object\n     */\n    __createRequest(action) {\n      var req = this._getRequest();\n\n      if (!qx.lang.Type.isArray(this.__requests[action])) {\n        this.__requests[action] = [];\n      }\n\n      qx.core.ObjectRegistry.register(req);\n      this.__requests[action].push(req);\n\n      return req;\n    },\n\n    //\n    // Routes and actions\n    //\n\n    /**\n     * Map action to combination of method and URL pattern.\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    map(action, method, url, check) {\n      this.__routes[action] = [method, url, check];\n\n      // Track requests\n      this.__requests[action] = [];\n\n      // Undefine generic getter when action is named \"get\"\n      if (action == \"get\") {\n        this[action] = undefined;\n      }\n\n      // Do not overwrite existing \"non-action\" methods unless the method is\n      // null (i.e. because it exists as a stub for documentation)\n      if (\n        typeof this[action] !== \"undefined\" &&\n        this[action] !== null &&\n        this[action].action !== true\n      ) {\n        throw new Error(\n          \"Method with name of action (\" + action + \") already exists\"\n        );\n      }\n\n      this.__declareEvent(action + \"Success\");\n      this.__declareEvent(action + \"Error\");\n\n      this[action] = qx.lang.Function.bind(function () {\n        Array.prototype.unshift.call(arguments, action);\n        return this.invoke.apply(this, arguments);\n      }, this);\n\n      // Method is safe to overwrite\n      this[action].action = true;\n    },\n\n    /**\n     * Invoke action with parameters.\n     *\n     * Internally called by actions dynamically created.\n     *\n     * May be overridden to customize action and parameter handling.\n     *\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\n     *\n     * @param action {String} Action to invoke.\n     * @param params {Map} Map of parameters inserted into URL when a matching\n     *  positional parameter is found.\n     * @param data {Map|String} Data to be send as part of the request.\n     *  See {@link qx.bom.request.SimpleXhr#getRequestData}.\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\n     * @return {Number} Id of the action's invocation.\n     */\n    invoke(action, params, data) {\n      var req = this.__createRequest(action),\n        params = params == null ? {} : params,\n        config = this._getRequestConfig(action, params);\n\n      // Cache parameters\n      this.__routes[action].params = params;\n\n      // Check parameters\n      this.__checkParameters(params, config.check);\n\n      // Configure request\n      this.__configureRequest(req, config, data);\n\n      // Run configuration callback, passing in pre-configured request\n      if (this.__configureRequestCallback) {\n        this.__configureRequestCallback.call(this, req, action, params, data);\n      }\n\n      // Configure JSON request (content type may have been set in configuration callback)\n      this.__configureJsonRequest(req, config, data);\n\n      var reqHandler = this._getRequestHandler();\n\n      // Handle successful request\n      req.addListenerOnce(\n        \"success\",\n        reqHandler.onsuccess.callback(req, action),\n        reqHandler.onsuccess.context\n      );\n\n      // Handle erroneous request\n      req.addListenerOnce(\n        \"fail\",\n        reqHandler.onfail.callback(req, action),\n        reqHandler.onfail.context\n      );\n\n      // Handle loadend (Note that loadEnd is fired after \"success\")\n      req.addListenerOnce(\n        \"loadEnd\",\n        reqHandler.onloadend.callback(req, action),\n        reqHandler.onloadend.context\n      );\n\n      if (reqHandler.hasOwnProperty(\"onreadystatechange\")) {\n        req.addListener(\n          \"readystatechange\",\n          reqHandler.onreadystatechange.callback(req, action),\n          reqHandler.onreadystatechange.context\n        );\n      }\n      // Handle progress (which is fired multiple times)\n      if (reqHandler.hasOwnProperty(\"onprogress\")) {\n        req.addListener(\n          \"progress\",\n          reqHandler.onprogress.callback(req, action),\n          reqHandler.onprogress.context\n        );\n      }\n\n      req.send();\n\n      return parseInt(req.toHashCode(), 10);\n    },\n\n    /**\n     * Set base URL.\n     *\n     * The base URL is prepended to the URLs given in the description.\n     * Changes affect all future invocations.\n     *\n     * @param baseUrl {String} Base URL.\n     */\n    setBaseUrl(baseUrl) {\n      this.__baseUrl = baseUrl;\n    },\n\n    /**\n     * Check parameters.\n     *\n     * @param params {Map} Parameters.\n     * @param check {Map} Checks.\n     */\n    __checkParameters(params, check) {\n      if (typeof check !== \"undefined\") {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertObject(\n            check,\n            \"Check must be object with params as keys\"\n          );\n        }\n\n        Object.keys(check).forEach(function (param) {\n          // Warn about invalid check\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            if (check[param] !== true) {\n              if (qx.core.Environment.get(\"qx.debug\")) {\n                qx.core.Assert.assertRegExp(check[param]);\n              }\n            }\n          }\n\n          // Missing parameter\n          if (\n            check[param] === qx.bom.rest.Resource.REQUIRED &&\n            typeof params[param] === \"undefined\"\n          ) {\n            throw new Error(\"Missing parameter '\" + param + \"'\");\n          }\n\n          // Ignore invalid checks\n          if (!(check[param] && typeof check[param].test == \"function\")) {\n            return;\n          }\n\n          // Invalid parameter\n          if (!check[param].test(params[param])) {\n            throw new Error(\"Parameter '\" + param + \"' is invalid\");\n          }\n        });\n      }\n    },\n\n    /**\n     * Configure request.\n     *\n     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.\n     * @param config {Map} Configuration.\n     * @param data {Map} Data.\n     */\n    __configureRequest(req, config, data) {\n      req.setUrl(config.url);\n\n      if (!req.setMethod && config.method !== \"GET\") {\n        throw new Error(\n          \"Request (\" +\n            req.classname +\n            \") doesn't support other HTTP methods than 'GET'\"\n        );\n      }\n\n      if (req.setMethod) {\n        req.setMethod(config.method);\n      }\n\n      if (data) {\n        req.setRequestData(data);\n      }\n    },\n\n    /**\n     * Serialize data to JSON when content type indicates.\n     *\n     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.\n     * @param config {Map} Configuration.\n     * @param data {Map} Data.\n     */\n    __configureJsonRequest(req, config, data) {\n      if (data) {\n        var contentType = req.getRequestHeader(\"Content-Type\");\n\n        if (\n          req.getMethod &&\n          qx.util.Request.methodAllowsRequestBody(req.getMethod())\n        ) {\n          if (/application\\/.*\\+?json/.test(contentType)) {\n            data = qx.lang.Json.stringify(data);\n            req.setRequestData(data);\n          }\n        }\n      }\n    },\n\n    /**\n     * Abort action.\n     *\n     * @param varargs {String|Number} Action of which all invocations to abort\n     *  (when string), or a single invocation of an action to abort (when number)\n     */\n    abort(varargs) {\n      if (qx.lang.Type.isNumber(varargs)) {\n        var id = varargs;\n        var post = qx.core.ObjectRegistry.getPostId();\n        var req = qx.core.ObjectRegistry.fromHashCode(id + post);\n        if (req) {\n          req.abort();\n        }\n      } else {\n        var action = varargs;\n        var reqs = this.__requests[action];\n        if (this.__requests[action]) {\n          reqs.forEach(function (req) {\n            req.abort();\n          });\n        }\n      }\n    },\n\n    /**\n     * Resend request associated to action.\n     *\n     * Replays parameters given when action was invoked originally.\n     *\n     * @param action {String} Action to refresh.\n     */\n    refresh(action) {\n      this.invoke(action, this.__routes[action].params);\n    },\n\n    /**\n     * Periodically invoke action.\n     *\n     * Replays parameters given when action was invoked originally. When the\n     * action was not yet invoked and requires parameters, parameters must be\n     * given.\n     *\n     * Please note that IE tends to cache overly aggressive. One work-around is\n     * to disable caching on the client side by configuring the request with\n     * <code>setCache(false)</code>. If you control the server, a better\n     * work-around is to include appropriate headers to explicitly control\n     * caching. This way you still avoid requests that can be correctly answered\n     * from cache (e.g. when nothing has changed since the last poll). Please\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\n     * XMLHttpRequest Caching Test</a> for available options.\n     *\n     * @lint ignoreUnused(intervalListener)\n     *\n     * @param action {String} Action to poll.\n     * @param interval {Number} Interval in ms.\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\n     *   invoke a call immediately.\n     */\n    poll(action, interval, params, immediately) {\n      // Dispose timer previously created for action\n      if (this.__pollTimers[action]) {\n        this.stopPollByAction(action);\n      }\n\n      // Fallback to previous params\n      if (typeof params == \"undefined\") {\n        params = this.__routes[action].params;\n      }\n\n      // Invoke immediately\n      if (immediately) {\n        this.invoke(action, params);\n      }\n\n      var intervalListener = (function (scope) {\n        return function () {\n          var req = scope.__requests[action][0];\n          if (!immediately && !req) {\n            scope.invoke(action, params);\n            return;\n          }\n          if (req.isDone() || req.isDisposed()) {\n            scope.refresh(action);\n          }\n        };\n      })(this);\n\n      this._startPoll(action, intervalListener, interval);\n    },\n\n    /**\n     * Start a poll process.\n     *\n     * @param action {String} Action to poll.\n     * @param listener {Function} The function to repeatedly execute at the given interval.\n     * @param interval {Number} Interval in ms.\n     */\n    _startPoll(action, listener, interval) {\n      this.__pollTimers[action] = {\n        id: window.setInterval(listener, interval),\n        interval: interval,\n        listener: listener\n      };\n    },\n\n    /**\n     * Stops a poll process by the associated action.\n     *\n     * @param action {String} Action to poll.\n     */\n    stopPollByAction(action) {\n      if (action in this.__pollTimers) {\n        var intervalId = this.__pollTimers[action].id;\n        window.clearInterval(intervalId);\n      }\n    },\n\n    /**\n     * Restarts a poll process by the associated action.\n     *\n     * @param action {String} Action to poll.\n     */\n    restartPollByAction(action) {\n      if (action in this.__pollTimers) {\n        var timer = this.__pollTimers[action];\n        this.stopPollByAction(action);\n        this._startPoll(action, timer.listener, timer.interval);\n      }\n    },\n\n    /**\n     * Long-poll action.\n     *\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\n     * server signals new data. The server determines when new data is available,\n     * while the client keeps open a request. Requires configuration on the\n     * server side. Basically, the server must not close a connection until\n     * new data is available. For a high level introduction to long-polling,\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\n     * Ajax with long polling</a>.\n     *\n     * Uses {@link #refresh} internally. Make sure you understand the\n     * implications of IE's tendency to cache overly aggressive.\n     *\n     * Note no interval is given on the client side.\n     *\n     * @lint ignoreUnused(longPollHandler)\n     *\n     * @param action {String} Action to poll.\n     * @return {String} Id of handler responsible for long-polling. To stop\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\n     */\n    longPoll(action) {\n      var res = this,\n        lastResponse, // Keep track of last response\n        immediateResponseCount = 0; // Count immediate responses\n\n      // Throttle to prevent high load on server and client\n      function throttle() {\n        var isImmediateResponse =\n          lastResponse && new Date() - lastResponse < res._getThrottleLimit();\n\n        if (isImmediateResponse) {\n          immediateResponseCount += 1;\n          if (immediateResponseCount > res._getThrottleCount()) {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              qx.Bootstrap.debug(\n                \"Received successful response more than \" +\n                  res._getThrottleCount() +\n                  \" times subsequently, each within \" +\n                  res._getThrottleLimit() +\n                  \" ms. Throttling.\"\n              );\n            }\n            return true;\n          }\n        }\n\n        // Reset counter on delayed response\n        if (!isImmediateResponse) {\n          immediateResponseCount = 0;\n        }\n\n        return false;\n      }\n\n      var handlerId = (this.__longPollHandlers[action] = this.addListener(\n        action + \"Success\",\n        function longPollHandler() {\n          if (res.isDisposed()) {\n            return;\n          }\n\n          if (!throttle()) {\n            lastResponse = new Date();\n            res.refresh(action);\n          }\n        }\n      ));\n\n      this.invoke(action);\n      return handlerId;\n    },\n\n    /**\n     * Get request configuration for action and parameters.\n     *\n     * This is were placeholders are replaced with parameters.\n     *\n     * @param action {String} Action associated to request.\n     * @param params {Map} Parameters to embed in request.\n     * @return {Map} Map of configuration settings. Has the properties\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\n     */\n    _getRequestConfig(action, params) {\n      var route = this.__routes[action];\n\n      // Not modify original params\n      var params = qx.lang.Object.clone(params);\n\n      if (!qx.lang.Type.isArray(route)) {\n        throw new Error(\"No route for action \" + action);\n      }\n\n      var method = route[0],\n        url = this.__baseUrl !== null ? this.__baseUrl + route[1] : route[1],\n        check = route[2],\n        placeholders = qx.bom.rest.Resource.placeholdersFromUrl(url);\n\n      params = params || {};\n\n      placeholders.forEach(function (placeholder) {\n        // Placeholder part of template and default value\n        var re = new RegExp(\"{\" + placeholder + \"=?(\\\\w+)?}\"),\n          defaultValue = url.match(re)[1];\n\n        // Fill in default or empty string when missing\n        if (typeof params[placeholder] === \"undefined\") {\n          if (defaultValue) {\n            params[placeholder] = defaultValue;\n          } else {\n            params[placeholder] = \"\";\n          }\n        }\n\n        url = url.replace(re, params[placeholder]);\n      });\n\n      return { method: method, url: url, check: check };\n    },\n\n    /**\n     * Override to adjust the throttle limit.\n     * @return {Integer} Throttle limit in milliseconds\n     */\n    _getThrottleLimit() {\n      return qx.bom.rest.Resource.POLL_THROTTLE_LIMIT;\n    },\n\n    /**\n     * Override to adjust the throttle count.\n     * @return {Integer} Throttle count\n     */\n    _getThrottleCount() {\n      return qx.bom.rest.Resource.POLL_THROTTLE_COUNT;\n    },\n\n    /**\n     * Map actions from description.\n     *\n     * Allows to decoratively define routes.\n     *\n     * @param description {Map} Map that defines the routes.\n     */\n    __mapFromDescription(description) {\n      Object.keys(description).forEach(function (action) {\n        var route = description[action],\n          method = route.method,\n          url = route.url,\n          check = route.check;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertString(\n            method,\n            \"Method must be string for route '\" + action + \"'\"\n          );\n\n          qx.core.Assert.assertString(\n            url,\n            \"URL must be string for route '\" + action + \"'\"\n          );\n        }\n\n        this.map(action, method, url, check);\n      }, this);\n    },\n\n    /**\n     * Declare event at runtime.\n     *\n     * @param type {String} Type of event.\n     */\n    __declareEvent(type) {\n      if (!this.constructor.$$events) {\n        this.constructor.$$events = {};\n      }\n\n      if (!this.constructor.$$events[type]) {\n        this.constructor.$$events[type] = \"qx.bom.rest.Resource\";\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DISPOSER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns true if the object is disposed.\n     *\n     * @return {Boolean} Whether the object has been disposed\n     */\n    isDisposed() {\n      return this.$$disposed || false;\n    },\n\n    /**\n     * Dispose this object\n     *\n     */\n    dispose() {\n      // Check first\n      if (this.$$disposed) {\n        return;\n      }\n\n      // Mark as disposed (directly, not at end, to omit recursions)\n      this.$$disposed = true;\n\n      // Debug output\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 2) {\n          qx.Bootstrap.debug(\n            this,\n            \"Disposing \" + this.classname + \"[\" + this.toHashCode() + \"]\"\n          );\n        }\n      }\n\n      this.destruct();\n\n      // Additional checks\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 0) {\n          var key, value;\n          for (key in this) {\n            value = this[key];\n\n            // Check for Objects but respect values attached to the prototype itself\n            if (\n              value !== null &&\n              typeof value === \"object\" &&\n              !qx.Bootstrap.isString(value)\n            ) {\n              // Check prototype value\n              // undefined is the best, but null may be used as a placeholder for\n              // private variables (hint: checks in qx.Class.define). We accept both.\n              if (this.constructor.prototype[key] != null) {\n                continue;\n              }\n\n              var ff2 = navigator.userAgent.indexOf(\"rv:1.8.1\") != -1;\n              var ie6 = navigator.userAgent.indexOf(\"MSIE 6.0\") != -1;\n              // keep the old behavior for IE6 and FF2\n              if (ff2 || ie6) {\n                if (\n                  (qx.core.Object && value instanceof qx.core.Object) ||\n                  qx.core.Environment.get(\"qx.debug.dispose.level\") > 1\n                ) {\n                  qx.Bootstrap.warn(\n                    this,\n                    \"Missing destruct definition for '\" +\n                      key +\n                      \"' in \" +\n                      this.classname +\n                      \"[\" +\n                      this.toHashCode() +\n                      \"]: \" +\n                      value\n                  );\n\n                  delete this[key];\n                }\n              } else {\n                if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 1) {\n                  qx.Bootstrap.warn(\n                    this,\n                    \"Missing destruct definition for '\" +\n                      key +\n                      \"' in \" +\n                      this.classname +\n                      \"[\" +\n                      this.toHashCode() +\n                      \"]: \" +\n                      value\n                  );\n\n                  delete this[key];\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Destructs the Resource.\n     *\n     * All created requests, routes and pollTimers will be disposed.\n     */\n    destruct() {\n      var action;\n\n      for (action in this.__requests) {\n        if (this.__requests[action]) {\n          this.__requests[action].forEach(function (req) {\n            req.dispose();\n          });\n        }\n      }\n\n      if (this.__pollTimers) {\n        for (action in this.__pollTimers) {\n          this.stopPollByAction(action);\n        }\n      }\n\n      if (this.__longPollHandlers) {\n        for (action in this.__longPollHandlers) {\n          var id = this.__longPollHandlers[action];\n          this.removeListenerById(id);\n        }\n      }\n\n      this.__requests = this.__routes = this.__pollTimers = null;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,sBAApB,EAA4C;IAC1CC,MAAM,EAAEL,EAAE,CAACM,KAAH,CAASC,OADyB;IAE1CC,SAAS,EAAE,CAACR,EAAE,CAACS,IAAH,CAAQC,WAAT,CAF+B;;IAI1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAb0C,qBAahCC,WAbgC,EAanB;MACrB,KAAKC,SAAL,GAAkB,EAAlB;MACA,KAAKC,SAAL,GAAgB,EAAhB;MACA,KAAKC,SAAL,GAAoB,EAApB;MACA,KAAKC,SAAL,GAA0B,EAA1B;;MAEA,IAAI;QACF,IAAI,OAAOJ,WAAP,KAAuB,WAA3B,EAAwC;UAItC,KAAKK,SAAL,CAA0BL,WAA1B;QACD;MACF,CAPD,CAOE,OAAOM,CAAP,EAAU;QACV,KAAKC,OAAL;QACA,MAAMD,CAAN;MACD;IACF,CA9ByC;IAgC1CE,MAAM,EAAE;MACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,sBATH;;MAWN;AACJ;AACA;AACA;AACA;AACA;MACIC,aAAa,EAAE,sBAjBT;;MAmBN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAE,sBA3BD;;MA6BN;AACJ;AACA;AACA;AACA;MACIC,WAAW,EAAE,sBAlCP;;MAoCN;AACJ;AACA;MACIC,IAAI,EAAE,sBAvCA;;MAyCN;AACJ;AACA;AACA;AACA;AACA;MACIC,UAAU,EA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"
}