{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__ids",
    "iPod",
    "iPad",
    "iPhone",
    "PSP",
    "XBOX",
    "Xbox",
    "getName",
    "str",
    "key",
    "bom",
    "client",
    "Device",
    "push",
    "reg",
    "RegExp",
    "join",
    "replace",
    "match",
    "exec",
    "navigator",
    "userAgent",
    "getType",
    "detectDeviceType",
    "userAgentString",
    "detectTabletDevice",
    "detectMobileDevice",
    "test",
    "iPadOS13Up",
    "platform",
    "maxTouchPoints",
    "isIE10Tablet",
    "isCommonTablet",
    "getDevicePixelRatio",
    "window",
    "devicePixelRatio",
    "getTouch",
    "msMaxTouchPoints",
    "defer",
    "core",
    "Environment",
    "add"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/client/Device.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The class is responsible for device detection. This is specially useful\n * if you are on a mobile device.\n *\n * This class is used by {@link qx.core.Environment} and should not be used\n * directly. Please check its class comment for details how to use it.\n *\n * @internal\n */\nqx.Bootstrap.define(\"qx.bom.client.Device\", {\n  statics: {\n    /** Maps user agent names to device IDs */\n    __ids: {\n      \"Windows Phone\": \"iemobile\",\n      iPod: \"ipod\",\n      iPad: \"ipad\",\n      iPhone: \"iphone\",\n      PSP: \"psp\",\n      \"PLAYSTATION 3\": \"ps3\",\n      \"Nintendo Wii\": \"wii\",\n      \"Nintendo DS\": \"ds\",\n      XBOX: \"xbox\",\n      Xbox: \"xbox\"\n    },\n\n    /**\n     * Returns the name of the current device if detectable. It falls back to\n     * <code>pc</code> if the detection for other devices fails.\n     *\n     * @internal\n     * @return {String} The string of the device found.\n     */\n    getName() {\n      var str = [];\n      for (var key in qx.bom.client.Device.__ids) {\n        str.push(key);\n      }\n      var reg = new RegExp(\"(\" + str.join(\"|\").replace(/\\./g, \".\") + \")\", \"g\");\n      var match = reg.exec(navigator.userAgent);\n\n      if (match && match[1]) {\n        return qx.bom.client.Device.__ids[match[1]];\n      }\n\n      return \"pc\";\n    },\n\n    /**\n     * Determines on what type of device the application is running.\n     * Valid values are: \"mobile\", \"tablet\" or \"desktop\".\n     * @return {String} The device type name of determined device.\n     */\n    getType() {\n      return qx.bom.client.Device.detectDeviceType(navigator.userAgent);\n    },\n\n    /**\n     * Detects the device type, based on given userAgentString.\n     *\n     * @param userAgentString {String} userAgent parameter, needed for decision.\n     * @return {String} The device type name of determined device: \"mobile\",\"desktop\",\"tablet\"\n     */\n    detectDeviceType(userAgentString) {\n      if (qx.bom.client.Device.detectTabletDevice(userAgentString)) {\n        return \"tablet\";\n      } else if (qx.bom.client.Device.detectMobileDevice(userAgentString)) {\n        return \"mobile\";\n      }\n\n      return \"desktop\";\n    },\n\n    /**\n     * Detects if a device is a mobile phone. (Tablets excluded.)\n     * @param userAgentString {String} userAgent parameter, needed for decision.\n     * @return {Boolean} Flag which indicates whether it is a mobile device.\n     */\n    detectMobileDevice(userAgentString) {\n      return /android.+mobile|ip(hone|od)|bada\\/|blackberry|BB10|maemo|opera m(ob|in)i|fennec|NetFront|phone|psp|symbian|IEMobile|windows (ce|phone)|xda/i.test(\n        userAgentString\n      );\n    },\n\n    /**\n     * Detects if a device is a tablet device.\n     * @param userAgentString {String} userAgent parameter, needed for decision.\n     * @return {Boolean} Flag which indicates whether it is a tablet device.\n     */\n    detectTabletDevice(userAgentString) {\n      var iPadOS13Up =\n        navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1;\n      var isIE10Tablet =\n        /MSIE 10/i.test(userAgentString) &&\n        /ARM/i.test(userAgentString) &&\n        !/windows phone/i.test(userAgentString);\n      var isCommonTablet =\n        !/android.+mobile|Tablet PC/i.test(userAgentString) &&\n        /Android|ipad|tablet|playbook|silk|kindle|psp/i.test(userAgentString);\n\n      return isIE10Tablet || isCommonTablet || iPadOS13Up;\n    },\n\n    /**\n     * Detects the device's pixel ratio. Returns 1 if detection is not possible.\n     *\n     * @return {Number} The device's pixel ratio\n     */\n    getDevicePixelRatio() {\n      if (typeof window.devicePixelRatio !== \"undefined\") {\n        return window.devicePixelRatio;\n      }\n\n      return 1;\n    },\n\n    /**\n     * Detects if either touch events or pointer events are supported.\n     * Additionally it checks if touch is enabled for pointer events.\n     *\n     * @return {Boolean} <code>true</code>, if the device supports touch\n     */\n    getTouch() {\n      return (\n        \"ontouchstart\" in window ||\n        window.navigator.maxTouchPoints > 0 ||\n        window.navigator.msMaxTouchPoints > 0\n      );\n    }\n  },\n\n  defer(statics) {\n    qx.core.Environment.add(\"device.name\", statics.getName);\n    qx.core.Environment.add(\"device.touch\", statics.getTouch);\n    qx.core.Environment.add(\"device.type\", statics.getType);\n    qx.core.Environment.add(\"device.pixelRatio\", statics.getDevicePixelRatio);\n  }\n});\n"
  ],
  "mappings": "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"
}