{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__ids",
    "iPod",
    "iPad",
    "iPhone",
    "PSP",
    "XBOX",
    "Xbox",
    "getName",
    "str",
    "key",
    "bom",
    "client",
    "Device",
    "push",
    "reg",
    "RegExp",
    "join",
    "replace",
    "match",
    "exec",
    "navigator",
    "userAgent",
    "getType",
    "detectDeviceType",
    "userAgentString",
    "detectTabletDevice",
    "detectMobileDevice",
    "test",
    "iPadOS13Up",
    "platform",
    "maxTouchPoints",
    "isIE10Tablet",
    "isCommonTablet",
    "getDevicePixelRatio",
    "window",
    "devicePixelRatio",
    "getTouch",
    "msMaxTouchPoints",
    "defer",
    "core",
    "Environment",
    "add"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/client/Device.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The class is responsible for device detection. This is specially useful\r\n * if you are on a mobile device.\r\n *\r\n * This class is used by {@link qx.core.Environment} and should not be used\r\n * directly. Please check its class comment for details how to use it.\r\n *\r\n * @internal\r\n */\r\nqx.Bootstrap.define(\"qx.bom.client.Device\", {\r\n  statics: {\r\n    /** Maps user agent names to device IDs */\r\n    __ids: {\r\n      \"Windows Phone\": \"iemobile\",\r\n      iPod: \"ipod\",\r\n      iPad: \"ipad\",\r\n      iPhone: \"iphone\",\r\n      PSP: \"psp\",\r\n      \"PLAYSTATION 3\": \"ps3\",\r\n      \"Nintendo Wii\": \"wii\",\r\n      \"Nintendo DS\": \"ds\",\r\n      XBOX: \"xbox\",\r\n      Xbox: \"xbox\"\r\n    },\r\n\r\n    /**\r\n     * Returns the name of the current device if detectable. It falls back to\r\n     * <code>pc</code> if the detection for other devices fails.\r\n     *\r\n     * @internal\r\n     * @return {String} The string of the device found.\r\n     */\r\n    getName() {\r\n      var str = [];\r\n      for (var key in qx.bom.client.Device.__ids) {\r\n        str.push(key);\r\n      }\r\n      var reg = new RegExp(\"(\" + str.join(\"|\").replace(/\\./g, \".\") + \")\", \"g\");\r\n      var match = reg.exec(navigator.userAgent);\r\n\r\n      if (match && match[1]) {\r\n        return qx.bom.client.Device.__ids[match[1]];\r\n      }\r\n\r\n      return \"pc\";\r\n    },\r\n\r\n    /**\r\n     * Determines on what type of device the application is running.\r\n     * Valid values are: \"mobile\", \"tablet\" or \"desktop\".\r\n     * @return {String} The device type name of determined device.\r\n     */\r\n    getType() {\r\n      return qx.bom.client.Device.detectDeviceType(navigator.userAgent);\r\n    },\r\n\r\n    /**\r\n     * Detects the device type, based on given userAgentString.\r\n     *\r\n     * @param userAgentString {String} userAgent parameter, needed for decision.\r\n     * @return {String} The device type name of determined device: \"mobile\",\"desktop\",\"tablet\"\r\n     */\r\n    detectDeviceType(userAgentString) {\r\n      if (qx.bom.client.Device.detectTabletDevice(userAgentString)) {\r\n        return \"tablet\";\r\n      } else if (qx.bom.client.Device.detectMobileDevice(userAgentString)) {\r\n        return \"mobile\";\r\n      }\r\n\r\n      return \"desktop\";\r\n    },\r\n\r\n    /**\r\n     * Detects if a device is a mobile phone. (Tablets excluded.)\r\n     * @param userAgentString {String} userAgent parameter, needed for decision.\r\n     * @return {Boolean} Flag which indicates whether it is a mobile device.\r\n     */\r\n    detectMobileDevice(userAgentString) {\r\n      return /android.+mobile|ip(hone|od)|bada\\/|blackberry|BB10|maemo|opera m(ob|in)i|fennec|NetFront|phone|psp|symbian|IEMobile|windows (ce|phone)|xda/i.test(\r\n        userAgentString\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Detects if a device is a tablet device.\r\n     * @param userAgentString {String} userAgent parameter, needed for decision.\r\n     * @return {Boolean} Flag which indicates whether it is a tablet device.\r\n     */\r\n    detectTabletDevice(userAgentString) {\r\n      var iPadOS13Up =\r\n        navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1;\r\n      var isIE10Tablet =\r\n        /MSIE 10/i.test(userAgentString) &&\r\n        /ARM/i.test(userAgentString) &&\r\n        !/windows phone/i.test(userAgentString);\r\n      var isCommonTablet =\r\n        !/android.+mobile|Tablet PC/i.test(userAgentString) &&\r\n        /Android|ipad|tablet|playbook|silk|kindle|psp/i.test(userAgentString);\r\n\r\n      return isIE10Tablet || isCommonTablet || iPadOS13Up;\r\n    },\r\n\r\n    /**\r\n     * Detects the device's pixel ratio. Returns 1 if detection is not possible.\r\n     *\r\n     * @return {Number} The device's pixel ratio\r\n     */\r\n    getDevicePixelRatio() {\r\n      if (typeof window.devicePixelRatio !== \"undefined\") {\r\n        return window.devicePixelRatio;\r\n      }\r\n\r\n      return 1;\r\n    },\r\n\r\n    /**\r\n     * Detects if either touch events or pointer events are supported.\r\n     * Additionally it checks if touch is enabled for pointer events.\r\n     *\r\n     * @return {Boolean} <code>true</code>, if the device supports touch\r\n     */\r\n    getTouch() {\r\n      return (\r\n        \"ontouchstart\" in window ||\r\n        window.navigator.maxTouchPoints > 0 ||\r\n        window.navigator.msMaxTouchPoints > 0\r\n      );\r\n    }\r\n  },\r\n\r\n  defer(statics) {\r\n    qx.core.Environment.add(\"device.name\", statics.getName);\r\n    qx.core.Environment.add(\"device.touch\", statics.getTouch);\r\n    qx.core.Environment.add(\"device.type\", statics.getType);\r\n    qx.core.Environment.add(\"device.pixelRatio\", statics.getDevicePixelRatio);\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}