{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "getName",
    "process",
    "platform",
    "MAP",
    "win32",
    "darwin",
    "linux",
    "aix",
    "freebsd",
    "openbsd",
    "sunos",
    "android",
    "navigator",
    "input",
    "agent",
    "userAgent",
    "indexOf",
    "__ids",
    "Win98",
    "Win95",
    "getVersion",
    "version",
    "bom",
    "client",
    "OperatingSystem",
    "__getVersionForDesktopOs",
    "__getVersionForMobileOs",
    "str",
    "key",
    "push",
    "reg",
    "RegExp",
    "join",
    "replace",
    "match",
    "exec",
    "windows",
    "iOs",
    "windowsVersionRegExp",
    "windowsMatch",
    "androidVersionRegExp",
    "androidMatch",
    "iOsVersionRegExp",
    "iOsMatch",
    "defer",
    "core",
    "Environment",
    "add"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/client/OperatingSystem.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Sebastian Fastner (fastner)\n\n************************************************************************ */\n/**\n * This class is responsible for checking the operating systems name.\n *\n * This class is used by {@link qx.core.Environment} and should not be used\n * directly. Please check its class comment for details how to use it.\n *\n * @internal\n * @ignore(process.*)\n */\nqx.Bootstrap.define(\"qx.bom.client.OperatingSystem\", {\n  statics: {\n    /**\n     * Checks for the name of the operating system.\n     * @return {String} The name of the operating system.\n     * @internal\n     * @ignore(process.*)\n     *\n     */\n    getName() {\n      if (typeof process != \"undefined\" && process.platform) {\n        const MAP = {\n          win32: \"win\",\n          darwin: \"osx\",\n          linux: \"linux\",\n          aix: \"unix\",\n          freebsd: \"unix\",\n          openbsd: \"unix\",\n          sunos: \"unix\",\n          android: \"android\"\n        };\n\n        return MAP[process.platform] || \"\";\n      }\n      if (!navigator) {\n        return \"\";\n      }\n      var input = navigator.platform || \"\";\n      var agent = navigator.userAgent || \"\";\n\n      if (\n        input.indexOf(\"Windows\") != -1 ||\n        input.indexOf(\"Win32\") != -1 ||\n        input.indexOf(\"Win64\") != -1 ||\n        agent.indexOf(\"Windows Phone\") != -1\n      ) {\n        return \"win\";\n      } else if (\n        input.indexOf(\"Macintosh\") != -1 ||\n        input.indexOf(\"MacPPC\") != -1 ||\n        input.indexOf(\"MacIntel\") != -1 ||\n        input.indexOf(\"Mac OS X\") != -1\n      ) {\n        return \"osx\";\n      } else if (agent.indexOf(\"RIM Tablet OS\") != -1) {\n        return \"rim_tabletos\";\n      } else if (agent.indexOf(\"webOS\") != -1) {\n        return \"webos\";\n      } else if (\n        input.indexOf(\"iPod\") != -1 ||\n        input.indexOf(\"iPhone\") != -1 ||\n        input.indexOf(\"iPad\") != -1\n      ) {\n        return \"ios\";\n      } else if (agent.indexOf(\"Android\") != -1) {\n        return \"android\";\n      } else if (input.indexOf(\"Linux\") != -1) {\n        return \"linux\";\n      } else if (\n        input.indexOf(\"X11\") != -1 ||\n        input.indexOf(\"BSD\") != -1 ||\n        input.indexOf(\"Darwin\") != -1\n      ) {\n        return \"unix\";\n      } else if (input.indexOf(\"SymbianOS\") != -1) {\n        return \"symbian\";\n      } else if (input.indexOf(\"BlackBerry\") != -1) {\n        return \"blackberry\";\n      }\n\n      // don't know\n      return \"\";\n    },\n\n    /** Maps user agent names to system IDs */\n    __ids: {\n      // Windows\n      \"Windows NT 10.0\": \"10\",\n      \"Windows NT 6.3\": \"8.1\",\n      \"Windows NT 6.2\": \"8\",\n      \"Windows NT 6.1\": \"7\",\n      \"Windows NT 6.0\": \"vista\",\n      \"Windows NT 5.2\": \"2003\",\n      \"Windows NT 5.1\": \"xp\",\n      \"Windows NT 5.0\": \"2000\",\n      \"Windows 2000\": \"2000\",\n      \"Windows NT 4.0\": \"nt4\",\n\n      \"Win 9x 4.90\": \"me\",\n      \"Windows CE\": \"ce\",\n      \"Windows 98\": \"98\",\n      Win98: \"98\",\n      \"Windows 95\": \"95\",\n      Win95: \"95\",\n\n      // OS X\n      \"Mac OS X 10_15\": \"10.15\",\n      \"Mac OS X 10_14\": \"10.14\",\n      \"Mac OS X 10_13\": \"10.13\",\n      \"Mac OS X 10.13\": \"10.13\",\n      \"Mac OS X 10_12\": \"10.12\",\n      \"Mac OS X 10.12\": \"10.12\",\n      \"Mac OS X 10_11\": \"10.11\",\n      \"Mac OS X 10.11\": \"10.11\",\n      \"Mac OS X 10_10\": \"10.10\",\n      \"Mac OS X 10.10\": \"10.10\",\n      \"Mac OS X 10_9\": \"10.9\",\n      \"Mac OS X 10.9\": \"10.9\",\n      \"Mac OS X 10_8\": \"10.8\",\n      \"Mac OS X 10.8\": \"10.8\",\n      \"Mac OS X 10_7\": \"10.7\",\n      \"Mac OS X 10.7\": \"10.7\",\n      \"Mac OS X 10_6\": \"10.6\",\n      \"Mac OS X 10.6\": \"10.6\",\n      \"Mac OS X 10_5\": \"10.5\",\n      \"Mac OS X 10.5\": \"10.5\",\n      \"Mac OS X 10_4\": \"10.4\",\n      \"Mac OS X 10.4\": \"10.4\",\n      \"Mac OS X 10_3\": \"10.3\",\n      \"Mac OS X 10.3\": \"10.3\",\n      \"Mac OS X 10_2\": \"10.2\",\n      \"Mac OS X 10.2\": \"10.2\",\n      \"Mac OS X 10_1\": \"10.1\",\n      \"Mac OS X 10.1\": \"10.1\",\n      \"Mac OS X 10_0\": \"10.0\",\n      \"Mac OS X 10.0\": \"10.0\"\n    },\n\n    /**\n     * Checks for the version of the operating system using the internal map.\n     *\n     * @internal\n     * @return {String} The version as strin or an empty string if the version\n     *   could not be detected.\n     */\n    getVersion() {\n      var version = qx.bom.client.OperatingSystem.__getVersionForDesktopOs(\n        navigator.userAgent\n      );\n\n      if (version == null) {\n        version = qx.bom.client.OperatingSystem.__getVersionForMobileOs(\n          navigator.userAgent\n        );\n      }\n\n      if (version != null) {\n        return version;\n      } else {\n        return \"\";\n      }\n    },\n\n    /**\n     * Detect OS version for desktop devices\n     * @param userAgent {String} userAgent parameter, needed for detection.\n     * @return {String} version number as string or null.\n     */\n    __getVersionForDesktopOs(userAgent) {\n      var str = [];\n      for (var key in qx.bom.client.OperatingSystem.__ids) {\n        str.push(key);\n      }\n\n      var reg = new RegExp(\"(\" + str.join(\"|\").replace(/\\./g, \".\") + \")\", \"g\");\n      var match = reg.exec(userAgent);\n\n      if (match && match[1]) {\n        return qx.bom.client.OperatingSystem.__ids[match[1]];\n      }\n\n      return null;\n    },\n\n    /**\n     * Detect OS version for mobile devices\n     * @param userAgent {String} userAgent parameter, needed for detection.\n     * @return {String} version number as string or null.\n     */\n    __getVersionForMobileOs(userAgent) {\n      var windows = userAgent.indexOf(\"Windows Phone\") != -1;\n      var android = userAgent.indexOf(\"Android\") != -1;\n      var iOs = userAgent.match(/(iPad|iPhone|iPod)/i) ? true : false;\n\n      if (windows) {\n        var windowsVersionRegExp = new RegExp(/Windows Phone (\\d+(?:\\.\\d+)+)/i);\n        var windowsMatch = windowsVersionRegExp.exec(userAgent);\n\n        if (windowsMatch && windowsMatch[1]) {\n          return windowsMatch[1];\n        }\n      } else if (android) {\n        var androidVersionRegExp = new RegExp(/ Android (\\d+(?:\\.\\d+)+)/i);\n        var androidMatch = androidVersionRegExp.exec(userAgent);\n\n        if (androidMatch && androidMatch[1]) {\n          return androidMatch[1];\n        }\n      } else if (iOs) {\n        var iOsVersionRegExp = new RegExp(\n          /(CPU|iPhone|iPod) OS (\\d+)_(\\d+)(?:_(\\d+))*\\s+/\n        );\n\n        var iOsMatch = iOsVersionRegExp.exec(userAgent);\n\n        if (iOsMatch && iOsMatch[2] && iOsMatch[3]) {\n          if (iOsMatch[4]) {\n            return iOsMatch[2] + \".\" + iOsMatch[3] + \".\" + iOsMatch[4];\n          } else {\n            return iOsMatch[2] + \".\" + iOsMatch[3];\n          }\n        }\n      }\n\n      return null;\n    }\n  },\n\n  defer(statics) {\n    qx.core.Environment.add(\"os.name\", statics.getName);\n    qx.core.Environment.add(\"os.version\", statics.getVersion);\n  }\n});\n"
  ],
  "mappings": "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"
}