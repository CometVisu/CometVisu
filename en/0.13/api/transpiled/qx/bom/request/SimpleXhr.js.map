{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "event",
    "Emitter",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "url",
    "method",
    "undefined",
    "setUrl",
    "useCaching",
    "setMethod",
    "_transport",
    "_registerTransportListener",
    "_createTransport",
    "ObjectRegistry",
    "register",
    "__requestHeaders",
    "__parser",
    "_createResponseParser",
    "members",
    "setRequestHeader",
    "key",
    "value",
    "getRequestHeader",
    "getResponseHeader",
    "header",
    "getAllResponseHeaders",
    "lang",
    "Type",
    "isString",
    "__url",
    "getUrl",
    "util",
    "Request",
    "isMethod",
    "__method",
    "getMethod",
    "setRequestData",
    "data",
    "isObject",
    "indexOf",
    "getClass",
    "__requestData",
    "getRequestData",
    "getResponse",
    "__response",
    "responseXML",
    "responseText",
    "getTransport",
    "setParser",
    "parser",
    "setTimeout",
    "millis",
    "isNumber",
    "__timeout",
    "getTimeout",
    "isBoolean",
    "__cache",
    "isCaching",
    "isDone",
    "readyState",
    "bom",
    "request",
    "Xhr",
    "DONE",
    "toHashCode",
    "$$hash",
    "isDisposed",
    "__disposed",
    "send",
    "curTimeout",
    "hasRequestData",
    "hasCacheControlHeader",
    "hasOwnProperty",
    "isBodyForMethodAllowed",
    "methodAllowsRequestBody",
    "curContentType",
    "serializedData",
    "_serializeData",
    "Uri",
    "appendParamsToUrl",
    "nocache",
    "Date",
    "valueOf",
    "timeout",
    "open",
    "abort",
    "dispose",
    "transport",
    "onreadystatechange",
    "Function",
    "bind",
    "_onReadyStateChange",
    "onloadend",
    "_onLoadEnd",
    "ontimeout",
    "_onTimeout",
    "onerror",
    "_onError",
    "onabort",
    "_onAbort",
    "onprogress",
    "_onProgress",
    "ResponseParser",
    "_setResponse",
    "response",
    "contentType",
    "isPost",
    "isJson",
    "test",
    "isArray",
    "Json",
    "stringify",
    "toParameter",
    "addListenerOnce",
    "name",
    "listener",
    "ctx",
    "once",
    "addListener",
    "_emitter",
    "on",
    "Environment",
    "get",
    "debug",
    "__onReadyStateDone",
    "status",
    "isSuccessful",
    "parse",
    "emit",
    "e",
    "SimpleXhr"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/request/SimpleXhr.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * This class is internal because it's tailored to {@link qx.io.rest.Resource}\n * which needs more functionality than {@link qx.bom.request.Xhr} provides.\n * The usage of {@link qx.io.request.Xhr} isn't possible either due to it's qx.Class nature.\n *\n * For alternatives to this class have a look at:\n *\n * * \"qx.bom.request.Xhr\" (low level, cross-browser XHR abstraction compatible with spec)\n * * \"qx.io.request.Xhr\" (high level XHR abstraction)\n *\n * A wrapper of {@link qx.bom.request.Xhr} which offers:\n *\n * * set/get HTTP method, URL, request data and headers\n * * retrieve the parsed response as object (content-type recognition)\n * * more fine-grained events such as success, fail, ...\n * * supports hash code for request identification\n *\n * It does *not* comply the interface defined by {@link qx.bom.request.IRequest}.\n *\n * <div class=\"desktop\">\n * Example:\n *\n * <pre class=\"javascript\">\n *  var req = new qx.bom.request.SimpleXhr(\"/some/path/file.json\");\n *  req.setRequestData({\"a\":\"b\"});\n *  req.once(\"success\", function successHandler() {\n *    var response = req.getResponse();\n *  }, this);\n *  req.once(\"fail\", function successHandler() {\n *    var response = req.getResponse();\n *  }, this);\n *  req.send();\n * </pre>\n * </div>\n *\n * @internal\n */\nqx.Bootstrap.define(\"qx.bom.request.SimpleXhr\", {\n  extend: qx.event.Emitter,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   * @param method {String?\"GET\"} The HTTP method.\n   */\n  construct(url, method) {\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    this.useCaching(true);\n    this.setMethod(method !== undefined ? method : \"GET\");\n    this._transport = this._registerTransportListener(this._createTransport());\n\n    qx.core.ObjectRegistry.register(this);\n\n    this.__requestHeaders = {};\n    this.__parser = this._createResponseParser();\n  },\n\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets a request header.\n     *\n     * @param key {String} Key of the header.\n     * @param value {String} Value of the header.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setRequestHeader(key, value) {\n      this.__requestHeaders[key] = value;\n      return this;\n    },\n\n    /**\n     * Gets a request header.\n     *\n     * @param key {String} Key of the header.\n     * @return {String} The value of the header.\n     */\n    getRequestHeader(key) {\n      return this.__requestHeaders[key];\n    },\n\n    /**\n     * Returns a single response header\n     *\n     * @param header {String} Name of the header to get.\n     * @return {String} Response header\n     */\n    getResponseHeader(header) {\n      return this._transport.getResponseHeader(header);\n    },\n\n    /**\n     * Returns all response headers\n     * @return {String} String of response headers\n     */\n    getAllResponseHeaders() {\n      return this._transport.getAllResponseHeaders();\n    },\n\n    /**\n     * Sets the URL.\n     *\n     * @param url {String} URL to be requested.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setUrl(url) {\n      if (qx.lang.Type.isString(url)) {\n        this.__url = url;\n      }\n      return this;\n    },\n\n    /**\n     * Gets the URL.\n     *\n     * @return {String} URL to be requested.\n     */\n    getUrl() {\n      return this.__url;\n    },\n\n    /**\n     * Sets the HTTP-Method.\n     *\n     * @param method {String} The method.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setMethod(method) {\n      if (qx.util.Request.isMethod(method)) {\n        this.__method = method;\n      }\n      return this;\n    },\n\n    /**\n     * Gets the HTTP-Method.\n     *\n     * @return {String} The method.\n     */\n    getMethod() {\n      return this.__method;\n    },\n\n    /**\n     * Sets the request data to be send as part of the request.\n     *\n     * The request data is transparently included as URL query parameters or embedded in the\n     * request body as form data.\n     *\n     * @param data {String|Object} The request data.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setRequestData(data) {\n      if (\n        qx.lang.Type.isString(data) ||\n        qx.lang.Type.isObject(data) ||\n        [\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(\n          qx.lang.Type.getClass(data)\n        ) !== -1\n      ) {\n        this.__requestData = data;\n      }\n      return this;\n    },\n\n    /**\n     * Gets the request data.\n     *\n     * @return {String} The request data.\n     */\n    getRequestData() {\n      return this.__requestData;\n    },\n\n    /**\n     * Gets parsed response.\n     *\n     * If problems occurred an empty string (\"\") is more likely to be returned (instead of null).\n     *\n     * @return {String|null} The parsed response of the request.\n     */\n    getResponse() {\n      if (this.__response !== null) {\n        return this.__response;\n      } else {\n        return this._transport.responseXML !== null\n          ? this._transport.responseXML\n          : this._transport.responseText;\n      }\n    },\n\n    /**\n     * Gets low-level transport.\n     *\n     * Note: To be used with caution!\n     *\n     * This method can be used to query the transport directly,\n     * but should be used with caution. Especially, it\n     * is not advisable to call any destructive methods\n     * such as <code>open</code> or <code>send</code>.\n     *\n     * @return {Object} An instance of a class found in\n     *  <code>qx.bom.request.*</code>\n     */\n    // This method mainly exists so that some methods found in the\n    // low-level transport can be deliberately omitted here,\n    // but still be accessed should it be absolutely necessary.\n    //\n    // Valid use cases include to query the transportâ€™s responseXML\n    // property if performance is critical and any extra parsing\n    // should be avoided at all costs.\n    //\n    getTransport() {\n      return this._transport;\n    },\n\n    /**\n     * Sets (i.e. override) the parser for the response parsing.\n     *\n     * @see qx.util.ResponseParser#setParser\n     *\n     * @param parser {String|Function}\n     * @return {Function} The parser function\n     */\n    setParser(parser) {\n      return this.__parser.setParser(parser);\n    },\n\n    /**\n     * Sets the timout limit in milliseconds.\n     *\n     * @param millis {Number} limit in milliseconds.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    setTimeout(millis) {\n      if (qx.lang.Type.isNumber(millis)) {\n        this.__timeout = millis;\n      }\n      return this;\n    },\n\n    /**\n     * The current timeout in milliseconds.\n     *\n     * @return {Number} The current timeout in milliseconds.\n     */\n    getTimeout() {\n      return this.__timeout;\n    },\n\n    /**\n     * Whether to allow request to be answered from cache.\n     *\n     * Allowed values:\n     *\n     * * <code>true</code>: Allow caching (Default)\n     * * <code>false</code>: Prohibit caching. Appends 'nocache' parameter to URL.\n     *\n     * Consider setting a Cache-Control header instead. A requestâ€™s Cache-Control\n     * header may contain a number of directives controlling the behavior of\n     * any caches in between client and origin server and allows therefore a more\n     * fine grained control over caching. If such a header is provided, the setting\n     * of setCache() will be ignored.\n     *\n     * * <code>\"no-cache\"</code>: Force caches to submit request in order to\n     * validate the freshness of the representation. Note that the requested\n     * resource may still be served from cache if the representation is\n     * considered fresh. Use this directive to ensure freshness but save\n     * bandwidth when possible.\n     * * <code>\"no-store\"</code>: Do not keep a copy of the representation under\n     * any conditions.\n     *\n     * See <a href=\"http://www.mnot.net/cache_docs/#CACHE-CONTROL\">\n     * Caching tutorial</a> for an excellent introduction to Caching in general.\n     * Refer to the corresponding section in the\n     * <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9\">\n     * HTTP 1.1 specification</a> for more details and advanced directives.\n     *\n     * It is recommended to choose an appropriate Cache-Control directive rather\n     * than prohibit caching using the nocache parameter.\n     *\n     * @param value {Boolean}\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    useCaching(value) {\n      if (qx.lang.Type.isBoolean(value)) {\n        this.__cache = value;\n      }\n      return this;\n    },\n\n    /**\n     * Whether requests are cached.\n     *\n     * @return {Boolean} Whether requests are cached.\n     */\n    isCaching() {\n      return this.__cache;\n    },\n\n    /**\n     * Whether request completed (is done).\n     * @return {Boolean} Whether request is completed.\n     */\n\n    isDone() {\n      return this._transport.readyState === qx.bom.request.Xhr.DONE;\n    },\n\n    /**\n     * Returns unique hash code of object.\n     *\n     * @return {Integer} unique hash code of the object\n     */\n    toHashCode() {\n      return this.$$hash;\n    },\n\n    /**\n     * Returns true if the object is disposed.\n     *\n     * @return {Boolean} Whether the object has been disposed\n     */\n    isDisposed() {\n      return !!this.__disposed;\n    },\n\n    /**\n     * Sends request.\n     *\n     * Relies on set before:\n     * * a HTTP method\n     * * an URL\n     * * optional request headers\n     * * optional request data\n     */\n    send() {\n      var curTimeout = this.getTimeout(),\n        hasRequestData = this.getRequestData() !== null,\n        hasCacheControlHeader =\n          this.__requestHeaders.hasOwnProperty(\"Cache-Control\"),\n        isBodyForMethodAllowed = qx.util.Request.methodAllowsRequestBody(\n          this.getMethod()\n        ),\n        curContentType = this.getRequestHeader(\"Content-Type\"),\n        serializedData = this._serializeData(\n          this.getRequestData(),\n          curContentType\n        );\n\n      // add GET params if needed\n      if (this.getMethod() === \"GET\" && hasRequestData) {\n        this.setUrl(\n          qx.util.Uri.appendParamsToUrl(this.getUrl(), serializedData)\n        );\n      }\n\n      // cache prevention\n      if (this.isCaching() === false && !hasCacheControlHeader) {\n        // Make sure URL cannot be served from cache and new request is made\n        this.setUrl(\n          qx.util.Uri.appendParamsToUrl(this.getUrl(), {\n            nocache: new Date().valueOf()\n          })\n        );\n      }\n\n      // set timeout\n      if (curTimeout) {\n        this._transport.timeout = curTimeout;\n      }\n\n      // initialize request\n      this._transport.open(this.getMethod(), this.getUrl(), true);\n\n      // set all previously stored headers on initialized request\n      for (var key in this.__requestHeaders) {\n        this._transport.setRequestHeader(key, this.__requestHeaders[key]);\n      }\n\n      // send\n      if (!isBodyForMethodAllowed) {\n        // GET & HEAD\n        this._transport.send();\n      } else {\n        // POST & PUT ...\n        if (\n          typeof curContentType === \"undefined\" &&\n          [\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(\n            qx.Bootstrap.getClass(serializedData)\n          ) === -1\n        ) {\n          // by default, set content-type urlencoded for requests with body\n          this._transport.setRequestHeader(\n            \"Content-Type\",\n            \"application/x-www-form-urlencoded\"\n          );\n        }\n\n        this._transport.send(serializedData);\n      }\n    },\n\n    /**\n     * Aborts request.\n     *\n     * Cancels any network activity.\n     * @return {qx.bom.request.SimpleXhr} Self for chaining.\n     */\n    abort() {\n      this._transport.abort();\n      return this;\n    },\n\n    /**\n     * Disposes object and wrapped transport.\n     * @return {Boolean} <code>true</code> if the object was successfully disposed\n     */\n    dispose() {\n      if (this._transport.dispose()) {\n        this.__parser = null;\n        this.__disposed = true;\n        return true;\n      }\n      return false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Holds transport.\n     */\n    _transport: null,\n\n    /**\n     * Creates XHR transport.\n     *\n     * May be overridden to change type of resource.\n     * @return {qx.bom.request.IRequest} Transport.\n     */\n    _createTransport() {\n      return new qx.bom.request.Xhr();\n    },\n\n    /**\n     * Registers common listeners on given transport.\n     *\n     * @param transport {qx.bom.request.IRequest} Transport.\n     * @return {qx.bom.request.IRequest} Transport.\n     */\n    _registerTransportListener(transport) {\n      transport.onreadystatechange = qx.lang.Function.bind(\n        this._onReadyStateChange,\n        this\n      );\n\n      transport.onloadend = qx.lang.Function.bind(this._onLoadEnd, this);\n      transport.ontimeout = qx.lang.Function.bind(this._onTimeout, this);\n      transport.onerror = qx.lang.Function.bind(this._onError, this);\n      transport.onabort = qx.lang.Function.bind(this._onAbort, this);\n      transport.onprogress = qx.lang.Function.bind(this._onProgress, this);\n      return transport;\n    },\n\n    /**\n     * Creates response parser.\n     *\n     * @return {qx.util.ResponseParser} parser.\n     */\n    _createResponseParser() {\n      return new qx.util.ResponseParser();\n    },\n\n    /**\n     * Sets the response.\n     *\n     * @param response {String} The parsed response of the request.\n     */\n    _setResponse(response) {\n      this.__response = response;\n    },\n\n    /**\n     * Serializes data.\n     *\n     * @param data {String|Map} Data to serialize.\n     * @param contentType {String?} Content-Type which influences the serialization.\n     * @return {String|null} Serialized data.\n     */\n    _serializeData(data, contentType) {\n      var isPost = this.getMethod() === \"POST\",\n        isJson = /application\\/.*\\+?json/.test(contentType);\n\n      if (!data) {\n        return null;\n      }\n\n      if (qx.lang.Type.isString(data)) {\n        return data;\n      }\n\n      if (\n        isJson &&\n        (qx.lang.Type.isObject(data) || qx.lang.Type.isArray(data))\n      ) {\n        return qx.lang.Json.stringify(data);\n      }\n\n      if (qx.lang.Type.isObject(data)) {\n        return qx.util.Uri.toParameter(data, isPost);\n      }\n\n      if (\n        [\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(\n          qx.Bootstrap.getClass(data)\n        ) !== -1\n      ) {\n        return data;\n      }\n\n      return null;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * {Array} Request headers.\n     */\n    __requestHeaders: null,\n    /**\n     * {Object} Request data (i.e. body).\n     */\n    __requestData: null,\n    /**\n     * {String} HTTP method to use for request.\n     */\n    __method: \"\",\n    /**\n     * {String} Requested URL.\n     */\n    __url: \"\",\n    /**\n     * {Object} Response data.\n     */\n    __response: null,\n    /**\n     * {Function} Parser.\n     */\n    __parser: null,\n    /**\n     * {Boolean} Whether caching will be enabled.\n     */\n    __cache: null,\n    /**\n     * {Number} The current timeout in milliseconds.\n     */\n    __timeout: null,\n    /**\n     * {Boolean} Whether object has been disposed.\n     */\n    __disposed: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an event listener for the given event name which is executed only once.\n     *\n     * @param name {String} The name of the event to listen to.\n     * @param listener {Function} The function to execute when the event is fired\n     * @param ctx {var?} The context of the listener.\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    addListenerOnce(name, listener, ctx) {\n      this.once(name, listener, ctx);\n      return this;\n    },\n\n    /**\n     * Adds an event listener for the given event name.\n     *\n     * @param name {String} The name of the event to listen to.\n     * @param listener {Function} The function to execute when the event is fired\n     * @param ctx {var?} The context of the listener.\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    addListener(name, listener, ctx) {\n      this._transport._emitter.on(name, listener, ctx);\n      return this;\n    },\n\n    /**\n     * Handles \"readyStateChange\" event.\n     */\n    _onReadyStateChange() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        qx.Bootstrap.debug(\"Fire readyState: \" + this._transport.readyState);\n      }\n\n      if (this.isDone()) {\n        this.__onReadyStateDone();\n      }\n    },\n\n    /**\n     * Called internally when readyState is DONE.\n     */\n    __onReadyStateDone() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        qx.Bootstrap.debug(\n          \"Request completed with HTTP status: \" + this._transport.status\n        );\n      }\n\n      var response = this._transport.responseText;\n      var contentType = this._transport.getResponseHeader(\"Content-Type\");\n\n      // Successful HTTP status\n      if (qx.util.Request.isSuccessful(this._transport.status)) {\n        // Parse response\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          qx.Bootstrap.debug(\"Response is of type: '\" + contentType + \"'\");\n        }\n\n        this._setResponse(this.__parser.parse(response, contentType));\n\n        this.emit(\"success\");\n\n        // Erroneous HTTP status\n      } else {\n        try {\n          this._setResponse(this.__parser.parse(response, contentType));\n        } catch (e) {\n          // ignore if it does not work\n        }\n\n        // A remote error failure\n        if (this._transport.status !== 0) {\n          this.emit(\"fail\");\n        }\n      }\n    },\n\n    /**\n     * Handles \"loadEnd\" event.\n     */\n    _onLoadEnd() {\n      this.emit(\"loadEnd\");\n    },\n\n    /**\n     * Handles \"abort\" event.\n     */\n    _onAbort() {\n      this.emit(\"abort\");\n    },\n\n    /**\n     * Handles \"timeout\" event.\n     */\n    _onTimeout() {\n      this.emit(\"timeout\");\n\n      // A network error failure\n      this.emit(\"fail\");\n    },\n\n    /**\n     * Handles \"error\" event.\n     */\n    _onError() {\n      this.emit(\"error\");\n\n      // A network error failure\n      this.emit(\"fail\");\n    },\n\n    /**\n     * Handles \"error\" event.\n     */\n    _onProgress() {\n      this.emit(\"progress\");\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}