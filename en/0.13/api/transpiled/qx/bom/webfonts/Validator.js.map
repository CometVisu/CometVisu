{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "fontFamily",
    "comparisonString",
    "fontWeight",
    "fontStyle",
    "setComparisonString",
    "setFontWeight",
    "setFontStyle",
    "setFontFamily",
    "__requestedHelpers",
    "_getRequestedHelpers",
    "__promiseValid",
    "Promise",
    "statics",
    "COMPARISON_FONTS",
    "sans",
    "serif",
    "HELPER_CSS",
    "position",
    "margin",
    "padding",
    "top",
    "left",
    "fontSize",
    "width",
    "height",
    "lineHeight",
    "fontVariant",
    "visibility",
    "COMPARISON_STRING",
    "__defaultSizes",
    "__defaultHelpers",
    "removeDefaultHelperElements",
    "defaultHelpers",
    "bom",
    "webfonts",
    "Validator",
    "prop",
    "document",
    "body",
    "removeChild",
    "properties",
    "nullable",
    "init",
    "apply",
    "check",
    "timeout",
    "events",
    "changeStatus",
    "members",
    "__checkTimer",
    "__checkStarted",
    "validate",
    "Date",
    "getTime",
    "restart",
    "event",
    "Timer",
    "addListener",
    "__onTimerInterval",
    "once",
    "start",
    "isValid",
    "_reset",
    "elem",
    "_isFontValid",
    "__init",
    "style",
    "requestedSans",
    "element",
    "Dimension",
    "getWidth",
    "requestedSerif",
    "cls",
    "fontsSans",
    "getFontFamily",
    "concat",
    "fontsSerif",
    "_getHelperElement",
    "getComparisonString",
    "styleMap",
    "lang",
    "clone",
    "join",
    "getFontWeight",
    "getFontStyle",
    "createElement",
    "innerHTML",
    "Style",
    "setStyles",
    "appendChild",
    "_applyFontFamily",
    "value",
    "old",
    "_applyFontWeight",
    "_applyFontStyle",
    "setValidImpl",
    "stop",
    "resolve",
    "fireDataEvent",
    "family",
    "valid",
    "Environment",
    "get",
    "parseFloat",
    "setTimeout",
    "now",
    "getTimeout",
    "destruct",
    "removeListener",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/webfonts/Validator.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/**\n * Checks whether a given font is available on the document and fires events\n * accordingly.\n *\n * This class does not need to be disposed, unless you want to abort the validation\n * early\n */\nqx.Class.define(\"qx.bom.webfonts.Validator\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param fontFamily {String} The name of the font to be verified\n   * @param comparisonString {String?} String to be used to detect whether a font was loaded or not\n   * @param fontWeight {String?} the weight of the font to be verified\n   * @param fontStyle {String?} the style of the font to be verified\n   * whether the font has loaded properly\n   */\n  construct(fontFamily, comparisonString, fontWeight, fontStyle) {\n    super();\n\n    if (comparisonString) {\n      this.setComparisonString(comparisonString);\n    }\n\n    if (fontWeight) {\n      this.setFontWeight(fontWeight);\n    }\n    if (fontStyle) {\n      this.setFontStyle(fontStyle);\n    }\n    if (fontFamily) {\n      this.setFontFamily(fontFamily);\n      this.__requestedHelpers = this._getRequestedHelpers();\n    }\n    this.__promiseValid = new qx.Promise();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Sets of serif and sans-serif fonts to be used for size comparisons.\n     * At least one of these fonts should be present on any system.\n     */\n    COMPARISON_FONTS: {\n      sans: [\"Arial\", \"Helvetica\", \"sans-serif\"],\n      serif: [\"Times New Roman\", \"Georgia\", \"serif\"]\n    },\n\n    /**\n     * Map of common CSS attributes to be used for all  size comparison elements\n     */\n    HELPER_CSS: {\n      position: \"absolute\",\n      margin: \"0\",\n      padding: \"0\",\n      top: \"-1000px\",\n      left: \"-1000px\",\n      fontSize: \"350px\",\n      width: \"auto\",\n      height: \"auto\",\n      lineHeight: \"normal\",\n      fontVariant: \"normal\",\n      visibility: \"hidden\"\n    },\n\n    /**\n     * The string to be used in the size comparison elements. This is the default string\n     * which is used for the {@link #COMPARISON_FONTS} and the font to be validated. It\n     * can be overridden for the font to be validated using the {@link #comparisonString}\n     * property.\n     */\n    COMPARISON_STRING: \"WEei\",\n    __defaultSizes: null,\n    __defaultHelpers: null,\n\n    /**\n     * Removes the two common helper elements used for all size comparisons from\n     * the DOM\n     */\n    removeDefaultHelperElements() {\n      var defaultHelpers = qx.bom.webfonts.Validator.__defaultHelpers;\n      if (defaultHelpers) {\n        for (var prop in defaultHelpers) {\n          document.body.removeChild(defaultHelpers[prop]);\n        }\n      }\n      delete qx.bom.webfonts.Validator.__defaultHelpers;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The font-family this validator should check\n     */\n    fontFamily: {\n      nullable: true,\n      init: null,\n      apply: \"_applyFontFamily\"\n    },\n\n    /** The font weight to check */\n    fontWeight: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyFontWeight\"\n    },\n\n    /** The font style to check */\n    fontStyle: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyFontStyle\"\n    },\n\n    /**\n     * Comparison string used to check whether the font has loaded or not.\n     */\n    comparisonString: {\n      nullable: true,\n      init: null\n    },\n\n    /**\n     * Time in milliseconds from the beginning of the check until it is assumed\n     * that a font is not available\n     */\n    timeout: {\n      check: \"Integer\",\n      init: 5000\n    }\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when the status of a web font has been determined. The event data\n     * is a map with the keys \"family\" (the font-family name) and \"valid\"\n     * (Boolean).\n     */\n    changeStatus: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __requestedHelpers: null,\n    __checkTimer: null,\n    __checkStarted: null,\n    __promiseValid: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Validates the font\n     */\n    validate() {\n      this.__checkStarted = new Date().getTime();\n\n      if (this.__checkTimer) {\n        this.__checkTimer.restart();\n      } else {\n        this.__checkTimer = new qx.event.Timer(100);\n        this.__checkTimer.addListener(\"interval\", this.__onTimerInterval, this);\n        // Give the browser a chance to render the new elements\n        qx.event.Timer.once(\n          function () {\n            this.__checkTimer.start();\n          },\n          this,\n          0\n        );\n      }\n    },\n\n    /**\n     * Waits for the font to become invalid or valid\n     *\n     * @returns {Boolean} whether valid or not\n     */\n    async isValid() {\n      return await this.__promiseValid;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Removes the helper elements from the DOM\n     */\n    _reset() {\n      if (this.__requestedHelpers) {\n        for (var prop in this.__requestedHelpers) {\n          var elem = this.__requestedHelpers[prop];\n          document.body.removeChild(elem);\n        }\n        this.__requestedHelpers = null;\n      }\n    },\n\n    /**\n     * Checks if the font is available by comparing the widths of the elements\n     * using the generic fonts to the widths of the elements using the font to\n     * be validated\n     *\n     * @return {Boolean} Whether or not the font caused the elements to differ\n     * in size\n     */\n    _isFontValid() {\n      if (!qx.bom.webfonts.Validator.__defaultSizes) {\n        this.__init();\n      }\n\n      if (!this.__requestedHelpers) {\n        this.__requestedHelpers = this._getRequestedHelpers();\n      }\n\n      // force rerendering for chrome\n      this.__requestedHelpers.sans.style.visibility = \"visible\";\n      this.__requestedHelpers.sans.style.visibility = \"hidden\";\n      this.__requestedHelpers.serif.style.visibility = \"visible\";\n      this.__requestedHelpers.serif.style.visibility = \"hidden\";\n\n      var requestedSans = qx.bom.element.Dimension.getWidth(\n        this.__requestedHelpers.sans\n      );\n\n      var requestedSerif = qx.bom.element.Dimension.getWidth(\n        this.__requestedHelpers.serif\n      );\n\n      var cls = qx.bom.webfonts.Validator;\n      if (\n        requestedSans !== cls.__defaultSizes.sans ||\n        requestedSerif !== cls.__defaultSizes.serif\n      ) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Creates the two helper elements styled with the font to be checked\n     *\n     * @return {Map} A map with the keys <pre>sans</pre> and <pre>serif</pre>\n     * and the created span elements as values\n     */\n    _getRequestedHelpers() {\n      var fontsSans = [this.getFontFamily()].concat(\n        qx.bom.webfonts.Validator.COMPARISON_FONTS.sans\n      );\n\n      var fontsSerif = [this.getFontFamily()].concat(\n        qx.bom.webfonts.Validator.COMPARISON_FONTS.serif\n      );\n\n      return {\n        sans: this._getHelperElement(fontsSans, this.getComparisonString()),\n        serif: this._getHelperElement(fontsSerif, this.getComparisonString())\n      };\n    },\n\n    /**\n     * Creates a span element with the comparison text (either {@link #COMPARISON_STRING} or\n     * {@link #comparisonString}) and styled with the default CSS ({@link #HELPER_CSS}) plus\n     * the given font-family value and appends it to the DOM\n     *\n     * @param fontFamily {String} font-family string\n     * @param comparisonString {String?} String to be used to detect whether a font was loaded or not\n     * @return {Element} the created DOM element\n     */\n    _getHelperElement(fontFamily, comparisonString) {\n      var styleMap = qx.lang.Object.clone(qx.bom.webfonts.Validator.HELPER_CSS);\n      if (fontFamily) {\n        if (styleMap.fontFamily) {\n          styleMap.fontFamily += \",\" + fontFamily.join(\",\");\n        } else {\n          styleMap.fontFamily = fontFamily.join(\",\");\n        }\n      }\n      if (this.getFontWeight()) {\n        styleMap.fontWeight = this.getFontWeight();\n      }\n      if (this.getFontStyle()) {\n        styleMap.fontStyle = this.getFontStyle();\n      }\n\n      var elem = document.createElement(\"span\");\n      elem.innerHTML =\n        comparisonString || qx.bom.webfonts.Validator.COMPARISON_STRING;\n      qx.bom.element.Style.setStyles(elem, styleMap);\n      document.body.appendChild(elem);\n      return elem;\n    },\n\n    // property apply\n    _applyFontFamily(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    // property apply\n    _applyFontWeight(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    // property apply\n    _applyFontStyle(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Creates the default helper elements and gets their widths\n     */\n    __init() {\n      var cls = qx.bom.webfonts.Validator;\n      if (!cls.__defaultHelpers) {\n        cls.__defaultHelpers = {\n          sans: this._getHelperElement(cls.COMPARISON_FONTS.sans),\n          serif: this._getHelperElement(cls.COMPARISON_FONTS.serif)\n        };\n      }\n\n      cls.__defaultSizes = {\n        sans: qx.bom.element.Dimension.getWidth(cls.__defaultHelpers.sans),\n        serif: qx.bom.element.Dimension.getWidth(cls.__defaultHelpers.serif)\n      };\n    },\n\n    /**\n     * Triggers helper element size comparison and fires a ({@link #changeStatus})\n     * event with the result.\n     */\n    __onTimerInterval() {\n      if (this._isFontValid()) {\n        const setValidImpl = () => {\n          this.__checkTimer.stop();\n          this._reset();\n          this.__promiseValid.resolve(true);\n          this.fireDataEvent(\"changeStatus\", {\n            family: this.getFontFamily(),\n            valid: true\n          });\n        };\n\n        // safari has trouble resizing, adding it again fixed the issue [BUG #8786]\n        if (\n          qx.core.Environment.get(\"browser.name\") == \"safari\" &&\n          parseFloat(qx.core.Environment.get(\"browser.version\")) >= 8\n        ) {\n          setTimeout(setValidImpl, 100);\n        } else {\n          setValidImpl();\n        }\n      } else {\n        var now = new Date().getTime();\n        if (now - this.__checkStarted >= this.getTimeout()) {\n          this.__checkTimer.stop();\n          this._reset();\n          this.__promiseValid.resolve(false);\n          this.fireDataEvent(\"changeStatus\", {\n            family: this.getFontFamily(),\n            valid: false\n          });\n        }\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._reset();\n    this.__checkTimer.stop();\n    this.__checkTimer.removeListener(\"interval\", this.__onTimerInterval, this);\n    this._disposeObjects(\"__checkTimer\");\n  }\n});\n"
  ],
  "mappings": "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"
}