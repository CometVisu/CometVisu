{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "fontFamily",
    "comparisonString",
    "fontWeight",
    "fontStyle",
    "constructor",
    "call",
    "setComparisonString",
    "setFontWeight",
    "setFontStyle",
    "setFontFamily",
    "__requestedHelpers",
    "_getRequestedHelpers",
    "statics",
    "COMPARISON_FONTS",
    "sans",
    "serif",
    "HELPER_CSS",
    "position",
    "margin",
    "padding",
    "top",
    "left",
    "fontSize",
    "width",
    "height",
    "lineHeight",
    "fontVariant",
    "visibility",
    "COMPARISON_STRING",
    "__defaultSizes",
    "__defaultHelpers",
    "removeDefaultHelperElements",
    "defaultHelpers",
    "bom",
    "webfonts",
    "Validator",
    "prop",
    "document",
    "body",
    "removeChild",
    "properties",
    "nullable",
    "init",
    "apply",
    "check",
    "timeout",
    "events",
    "changeStatus",
    "members",
    "__checkTimer",
    "__checkStarted",
    "validate",
    "Date",
    "getTime",
    "restart",
    "event",
    "Timer",
    "addListener",
    "__onTimerInterval",
    "once",
    "start",
    "_reset",
    "elem",
    "_isFontValid",
    "__init",
    "style",
    "requestedSans",
    "element",
    "Dimension",
    "getWidth",
    "requestedSerif",
    "cls",
    "fontsSans",
    "getFontFamily",
    "concat",
    "fontsSerif",
    "_getHelperElement",
    "getComparisonString",
    "styleMap",
    "lang",
    "clone",
    "join",
    "getFontWeight",
    "getFontStyle",
    "createElement",
    "innerHTML",
    "Style",
    "setStyles",
    "appendChild",
    "_applyFontFamily",
    "value",
    "old",
    "_applyFontWeight",
    "_applyFontStyle",
    "__P_153_6",
    "__P_153_5",
    "stop",
    "fireDataEvent",
    "family",
    "valid",
    "now",
    "getTimeout",
    "destruct",
    "removeListener",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/webfonts/Validator.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/**\n * Checks whether a given font is available on the document and fires events\n * accordingly.\n *\n * This class does not need to be disposed, unless you want to abort the validation\n * early\n */\nqx.Class.define(\"qx.bom.webfonts.Validator\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param fontFamily {String} The name of the font to be verified\n   * @param comparisonString {String?} String to be used to detect whether a font was loaded or not\n   * @param fontWeight {String?} the weight of the font to be verified\n   * @param fontStyle {String?} the style of the font to be verified\n   * whether the font has loaded properly\n   */\n  construct(fontFamily, comparisonString, fontWeight, fontStyle) {\n    super();\n\n    if (comparisonString) {\n      this.setComparisonString(comparisonString);\n    }\n\n    if (fontWeight) {\n      this.setFontWeight(fontWeight);\n    }\n    if (fontStyle) {\n      this.setFontStyle(fontStyle);\n    }\n    if (fontFamily) {\n      this.setFontFamily(fontFamily);\n      this.__requestedHelpers = this._getRequestedHelpers();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Sets of serif and sans-serif fonts to be used for size comparisons.\n     * At least one of these fonts should be present on any system.\n     */\n    COMPARISON_FONTS: {\n      sans: [\"Arial\", \"Helvetica\", \"sans-serif\"],\n      serif: [\"Times New Roman\", \"Georgia\", \"serif\"]\n    },\n\n    /**\n     * Map of common CSS attributes to be used for all  size comparison elements\n     */\n    HELPER_CSS: {\n      position: \"absolute\",\n      margin: \"0\",\n      padding: \"0\",\n      top: \"-1000px\",\n      left: \"-1000px\",\n      fontSize: \"350px\",\n      width: \"auto\",\n      height: \"auto\",\n      lineHeight: \"normal\",\n      fontVariant: \"normal\",\n      visibility: \"hidden\"\n    },\n\n    /**\n     * The string to be used in the size comparison elements. This is the default string\n     * which is used for the {@link #COMPARISON_FONTS} and the font to be validated. It\n     * can be overridden for the font to be validated using the {@link #comparisonString}\n     * property.\n     */\n    COMPARISON_STRING: \"WEei\",\n    __defaultSizes: null,\n    __defaultHelpers: null,\n\n    /**\n     * Removes the two common helper elements used for all size comparisons from\n     * the DOM\n     */\n    removeDefaultHelperElements() {\n      var defaultHelpers = qx.bom.webfonts.Validator.__defaultHelpers;\n      if (defaultHelpers) {\n        for (var prop in defaultHelpers) {\n          document.body.removeChild(defaultHelpers[prop]);\n        }\n      }\n      delete qx.bom.webfonts.Validator.__defaultHelpers;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * The font-family this validator should check\n     */\n    fontFamily: {\n      nullable: true,\n      init: null,\n      apply: \"_applyFontFamily\"\n    },\n\n    /** The font weight to check */\n    fontWeight: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyFontWeight\"\n    },\n\n    /** The font style to check */\n    fontStyle: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyFontStyle\"\n    },\n\n    /**\n     * Comparison string used to check whether the font has loaded or not.\n     */\n    comparisonString: {\n      nullable: true,\n      init: null\n    },\n\n    /**\n     * Time in milliseconds from the beginning of the check until it is assumed\n     * that a font is not available\n     */\n    timeout: {\n      check: \"Integer\",\n      init: 5000\n    }\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when the status of a web font has been determined. The event data\n     * is a map with the keys \"family\" (the font-family name) and \"valid\"\n     * (Boolean).\n     */\n    changeStatus: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __requestedHelpers: null,\n    __checkTimer: null,\n    __checkStarted: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Validates the font\n     */\n    validate() {\n      this.__checkStarted = new Date().getTime();\n\n      if (this.__checkTimer) {\n        this.__checkTimer.restart();\n      } else {\n        this.__checkTimer = new qx.event.Timer(100);\n        this.__checkTimer.addListener(\"interval\", this.__onTimerInterval, this);\n        // Give the browser a chance to render the new elements\n        qx.event.Timer.once(\n          function () {\n            this.__checkTimer.start();\n          },\n          this,\n          0\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Removes the helper elements from the DOM\n     */\n    _reset() {\n      if (this.__requestedHelpers) {\n        for (var prop in this.__requestedHelpers) {\n          var elem = this.__requestedHelpers[prop];\n          document.body.removeChild(elem);\n        }\n        this.__requestedHelpers = null;\n      }\n    },\n\n    /**\n     * Checks if the font is available by comparing the widths of the elements\n     * using the generic fonts to the widths of the elements using the font to\n     * be validated\n     *\n     * @return {Boolean} Whether or not the font caused the elements to differ\n     * in size\n     */\n    _isFontValid() {\n      if (!qx.bom.webfonts.Validator.__defaultSizes) {\n        this.__init();\n      }\n\n      if (!this.__requestedHelpers) {\n        this.__requestedHelpers = this._getRequestedHelpers();\n      }\n\n      // force rerendering for chrome\n      this.__requestedHelpers.sans.style.visibility = \"visible\";\n      this.__requestedHelpers.sans.style.visibility = \"hidden\";\n      this.__requestedHelpers.serif.style.visibility = \"visible\";\n      this.__requestedHelpers.serif.style.visibility = \"hidden\";\n\n      var requestedSans = qx.bom.element.Dimension.getWidth(\n        this.__requestedHelpers.sans\n      );\n\n      var requestedSerif = qx.bom.element.Dimension.getWidth(\n        this.__requestedHelpers.serif\n      );\n\n      var cls = qx.bom.webfonts.Validator;\n      if (\n        requestedSans !== cls.__defaultSizes.sans ||\n        requestedSerif !== cls.__defaultSizes.serif\n      ) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * Creates the two helper elements styled with the font to be checked\n     *\n     * @return {Map} A map with the keys <pre>sans</pre> and <pre>serif</pre>\n     * and the created span elements as values\n     */\n    _getRequestedHelpers() {\n      var fontsSans = [this.getFontFamily()].concat(\n        qx.bom.webfonts.Validator.COMPARISON_FONTS.sans\n      );\n\n      var fontsSerif = [this.getFontFamily()].concat(\n        qx.bom.webfonts.Validator.COMPARISON_FONTS.serif\n      );\n\n      return {\n        sans: this._getHelperElement(fontsSans, this.getComparisonString()),\n        serif: this._getHelperElement(fontsSerif, this.getComparisonString())\n      };\n    },\n\n    /**\n     * Creates a span element with the comparison text (either {@link #COMPARISON_STRING} or\n     * {@link #comparisonString}) and styled with the default CSS ({@link #HELPER_CSS}) plus\n     * the given font-family value and appends it to the DOM\n     *\n     * @param fontFamily {String} font-family string\n     * @param comparisonString {String?} String to be used to detect whether a font was loaded or not\n     * @return {Element} the created DOM element\n     */\n    _getHelperElement(fontFamily, comparisonString) {\n      var styleMap = qx.lang.Object.clone(qx.bom.webfonts.Validator.HELPER_CSS);\n      if (fontFamily) {\n        if (styleMap.fontFamily) {\n          styleMap.fontFamily += \",\" + fontFamily.join(\",\");\n        } else {\n          styleMap.fontFamily = fontFamily.join(\",\");\n        }\n      }\n      if (this.getFontWeight()) {\n        styleMap.fontWeight = this.getFontWeight();\n      }\n      if (this.getFontStyle()) {\n        styleMap.fontStyle = this.getFontStyle();\n      }\n\n      var elem = document.createElement(\"span\");\n      elem.innerHTML =\n        comparisonString || qx.bom.webfonts.Validator.COMPARISON_STRING;\n      qx.bom.element.Style.setStyles(elem, styleMap);\n      document.body.appendChild(elem);\n      return elem;\n    },\n\n    // property apply\n    _applyFontFamily(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    // property apply\n    _applyFontWeight(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    // property apply\n    _applyFontStyle(value, old) {\n      if (value !== old) {\n        this._reset();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Creates the default helper elements and gets their widths\n     */\n    __init() {\n      var cls = qx.bom.webfonts.Validator;\n      if (!cls.__defaultHelpers) {\n        cls.__defaultHelpers = {\n          sans: this._getHelperElement(cls.COMPARISON_FONTS.sans),\n          serif: this._getHelperElement(cls.COMPARISON_FONTS.serif)\n        };\n      }\n\n      cls.__defaultSizes = {\n        sans: qx.bom.element.Dimension.getWidth(cls.__defaultHelpers.sans),\n        serif: qx.bom.element.Dimension.getWidth(cls.__defaultHelpers.serif)\n      };\n    },\n\n    /**\n     * Triggers helper element size comparison and fires a ({@link #changeStatus})\n     * event with the result.\n     */\n    __onTimerInterval() {\n      if (this._isFontValid()) {\n        this.__checkTimer.stop();\n        this._reset();\n        this.fireDataEvent(\"changeStatus\", {\n          family: this.getFontFamily(),\n          valid: true\n        });\n      } else {\n        var now = new Date().getTime();\n        if (now - this.__checkStarted >= this.getTimeout()) {\n          this.__checkTimer.stop();\n          this._reset();\n          this.fireDataEvent(\"changeStatus\", {\n            family: this.getFontFamily(),\n            valid: false\n          });\n        }\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._reset();\n    this.__checkTimer.stop();\n    this.__checkTimer.removeListener(\"interval\", this.__onTimerInterval, this);\n    this._disposeObjects(\"__checkTimer\");\n  }\n});\n"
  ],
  "mappings": "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"
}