{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "fontFamily",
    "setFontFamily",
    "properties",
    "check",
    "fontFaces",
    "nullable",
    "apply",
    "css",
    "comparisonString",
    "init",
    "version",
    "value",
    "test",
    "members",
    "__fontFacesQueue",
    "__fontFacesCreatedPromise",
    "load",
    "getCss",
    "forEach",
    "url",
    "match",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "getVersion",
    "indexOf",
    "bom",
    "webfonts",
    "WebFontLoader",
    "__loadStylesheet",
    "getFontFaces",
    "fontFace",
    "paths",
    "map",
    "path",
    "lang",
    "Array",
    "clone",
    "Promise",
    "__dequeueFontFaces",
    "promiseLoaded",
    "pop",
    "__addFontFace",
    "length",
    "resolve",
    "Environment",
    "get",
    "parseInt",
    "setTimeout",
    "getFontFamily",
    "fontLookupKey",
    "createFontLookupKey",
    "fontWeight",
    "fontStyle",
    "__addedFontFaces",
    "__styleSheet",
    "styleSheet",
    "Stylesheet",
    "createElement",
    "sourcesMap",
    "MATCH_FORMAT",
    "RegExp",
    "getPreferredFormats",
    "join",
    "fontFaceSrcRules",
    "i",
    "exec",
    "fontFormat",
    "push",
    "format",
    "sort",
    "a",
    "b",
    "strSources",
    "rule",
    "cssText",
    "__fixCssText",
    "insertRule",
    "cssRules",
    "ex",
    "_applyFontFaces",
    "old",
    "families",
    "l",
    "familyName",
    "_quoteFontFamily",
    "family",
    "replace",
    "statics",
    "FONT_FORMATS",
    "VALIDATION_TIMEOUT",
    "__preferredFormats",
    "__loadedStylesheets",
    "__loaders",
    "getLoader",
    "name",
    "create",
    "loader",
    "includeFile",
    "lookupKey",
    "__getSourcesMap",
    "sources",
    "formats",
    "reg",
    "type",
    "preferredFormats",
    "browser",
    "browserVersion",
    "os",
    "osVersion"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/webfonts/WebFontLoader.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/**\n * Loads web fonts\n */\nqx.Class.define(\"qx.bom.webfonts.WebFontLoader\", {\n  extend: qx.core.Object,\n\n  construct(fontFamily) {\n    super();\n    this.setFontFamily(fontFamily);\n  },\n\n  properties: {\n    /** The font name that this font is known by */\n    fontFamily: {\n      check: \"String\"\n    },\n\n    /** The fontFaces which need to be defined */\n    fontFaces: {\n      nullable: true,\n      apply: \"_applyFontFaces\"\n    },\n\n    /** CSS urls or paths which need to be loaded */\n    css: {\n      nullable: true,\n      check: \"Array\"\n    },\n\n    /**\n     * Characters that are used to test if the font has loaded properly. These\n     * default to \"WEei\" in `qx.bom.webfont.Validator` and can be overridden\n     * for certain cases like icon fonts that do not provide the predefined\n     * characters.\n     */\n    comparisonString: {\n      check: \"String\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * Version identifier that is appended to the URL to be loaded. Fonts\n     * that are defined thru themes may be managed by the resource manager.\n     * In this case updated fonts persist due to aggressive fontface caching\n     * of some browsers. To get around this, set the `version` property to\n     * the version of your font. It will be appended to the CSS URL and forces\n     * the browser to re-validate.\n     *\n     * The version needs to be URL friendly, so only characters, numbers,\n     * dash and dots are allowed here.\n     */\n    version: {\n      check(value) {\n        return (\n          value === null ||\n          (typeof value === \"string\" && /^[a-zA-Z0-9.-]+$/.test(value))\n        );\n      },\n      init: null,\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __fontFacesQueue: null,\n    __fontFacesCreatedPromise: null,\n\n    /**\n     * Called to load the font details into the browser\n     */\n    async load() {\n      (this.getCss() || []).forEach(url => {\n        if (!url.match(/^https?:/)) {\n          url = qx.util.ResourceManager.getInstance().toUri(url);\n        }\n        if (this.getVersion()) {\n          url += url.indexOf(\"?\") < 0 ? \"?\" : \"&\";\n          url += this.getVersion();\n        }\n        qx.bom.webfonts.WebFontLoader.__loadStylesheet(url);\n      });\n      let fontFaces = this.getFontFaces();\n      if (fontFaces) {\n        fontFaces.forEach(fontFace => {\n          if (fontFace.paths) {\n            fontFace.paths = fontFace.paths.map(path => {\n              if (!path.match(/^https?:/)) {\n                path = qx.util.ResourceManager.getInstance().toUri(path);\n              }\n              if (this.getVersion()) {\n                path += path.indexOf(\"?\") < 0 ? \"?\" : \"&\";\n                path += this.getVersion();\n              }\n              return path;\n            });\n          }\n        });\n        this.__fontFacesQueue = qx.lang.Array.clone(fontFaces);\n        this.__fontFacesCreatedPromise = new qx.Promise();\n      }\n      this.__dequeueFontFaces();\n    },\n\n    async promiseLoaded() {\n      return await this.__fontFacesCreatedPromise;\n    },\n\n    /**\n     * Adds the font faces in __fontFacesQueue\n     */\n    __dequeueFontFaces() {\n      if (this.__fontFacesQueue == null) {\n        return;\n      }\n      let fontFace = this.__fontFacesQueue.pop();\n\n      this.__addFontFace(fontFace);\n\n      if (this.__fontFacesQueue.length == 0) {\n        this.__fontFacesQueue = null;\n        this.__fontFacesCreatedPromise.resolve(true);\n      }\n\n      if (\n        qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n        (parseInt(qx.core.Environment.get(\"engine.version\")) < 9 ||\n          qx.core.Environment.get(\"browser.documentmode\") < 9)\n      ) {\n        // old IEs need a break in between adding @font-face rules\n        setTimeout(() => this.__dequeueFontFaces(), 100);\n      } else {\n        this.__dequeueFontFaces();\n      }\n    },\n\n    /**\n     * Adds a font face definition to the browser\n     *\n     * @param {*} fontFace - POJO of from the array in Manifest.json\n     * @returns\n     */\n    __addFontFace(fontFace) {\n      let fontFamily = fontFace.fontFamily || this.getFontFamily();\n      let fontLookupKey = qx.bom.webfonts.WebFontLoader.createFontLookupKey(\n        fontFamily,\n        fontFace.fontWeight || \"normal\",\n        fontFace.fontStyle || \"normal\"\n      );\n\n      if (qx.bom.webfonts.WebFontLoader.__addedFontFaces[fontLookupKey]) {\n        return;\n      }\n\n      if (!qx.bom.webfonts.WebFontLoader.__styleSheet) {\n        let styleSheet = qx.bom.Stylesheet.createElement();\n        qx.bom.webfonts.WebFontLoader.__styleSheet = styleSheet;\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          styleSheet.ownerNode.setAttribute(\n            \"data-qx-created-by\",\n            qx.bom.webfonts.WebFontLoader.classname\n          );\n        }\n      }\n\n      let sourcesMap = {};\n      const MATCH_FORMAT = new RegExp(\n        \".(\" +\n          qx.bom.webfonts.WebFontLoader.getPreferredFormats().join(\"|\") +\n          \")\"\n      );\n\n      /*\n       * When compiling a `@font-face` rule, note that the first \"src:\" must never specify a format\n       * and that EOT must go first if there is one\n       */\n\n      let fontFaceSrcRules = [];\n      for (let i = 0; i < fontFace.paths.length; i++) {\n        let match = MATCH_FORMAT.exec(fontFace.paths[i]);\n        if (!match) {\n          continue;\n        }\n\n        let fontFormat = match[1];\n        let url = fontFace.paths[i];\n        if (this.getVersion()) {\n          url += \"?\" + this.getVersion();\n        }\n\n        fontFaceSrcRules.push({\n          url: url,\n          format: fontFormat\n        });\n\n        if (fontFormat == \"eot\") {\n          fontFaceSrcRules.push({\n            url: url + \"?#iefix'\",\n            format: \"embedded-opentype\"\n          });\n        }\n      }\n      fontFaceSrcRules = fontFaceSrcRules.sort((a, b) => {\n        a.fontFormat == \"embedded-opentype\" ? -1 : 0;\n      });\n\n      let strSources = \"\";\n      for (let i = 0; i < fontFaceSrcRules.length; i++) {\n        strSources += \"src: url('\" + fontFaceSrcRules[i].url + \"')\";\n        if (i > 0) {\n          strSources += \" format('\" + fontFaceSrcRules[i].format + \"')\";\n        }\n        strSources += \";\";\n      }\n\n      let rule = \"font-family: \" + fontFamily + \";\\n\";\n      rule += strSources + \"\\n\";\n      rule += \"font-style: \" + (fontFace.fontStyle || \"normal\") + \";\\n\";\n      rule += \"font-weight: \" + (fontFace.fontWeight || \"normal\") + \";\\n\";\n\n      rule = \"@font-face {\\n\" + rule + \"}\\n\";\n\n      let styleSheet = qx.bom.webfonts.WebFontLoader.__styleSheet;\n      try {\n        if (\n          qx.core.Environment.get(\"browser.name\") == \"ie\" &&\n          qx.core.Environment.get(\"browser.documentmode\") < 9\n        ) {\n          let cssText = qx.bom.webfonts.WebFontLoader.__fixCssText(\n            styleSheet.cssText\n          );\n\n          cssText += rule;\n          styleSheet.cssText = cssText;\n        } else {\n          styleSheet.insertRule(rule, styleSheet.cssRules.length);\n        }\n      } catch (ex) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.warn(\"Error while adding @font-face rule:\", ex.message);\n          return;\n        }\n      }\n\n      qx.bom.webfonts.WebFontLoader.__addedFontFaces[fontLookupKey] = true;\n    },\n\n    // property apply\n    _applyFontFaces(fontFaces, old) {\n      var families = [];\n\n      for (var i = 0, l = fontFaces.length; i < l; i++) {\n        let fontFace = fontFaces[i];\n        var familyName = this._quoteFontFamily(\n          fontFace.family || this.getFontFamily()\n        );\n\n        if (families.indexOf(familyName) < 0) {\n          families.push(familyName);\n        }\n      }\n    },\n\n    /**\n     * Makes sure font-family names containing spaces are properly quoted\n     *\n     * @param familyName {String} A font-family CSS value\n     * @return {String} The quoted family name\n     */\n    _quoteFontFamily(familyName) {\n      return familyName.replace(/[\"']/g, \"\");\n    }\n  },\n\n  statics: {\n    /**\n     * List of known font definition formats (i.e. file extensions). Used to\n     * identify the type of each font file configured for a web font.\n     */\n    FONT_FORMATS: [\"eot\", \"woff2\", \"woff\", \"ttf\", \"svg\"],\n\n    /**\n     * Timeout (in ms) to wait before deciding that a web font was not loaded.\n     */\n    VALIDATION_TIMEOUT: 5000,\n\n    /** @type{String[]} array of supported font formats, most preferred first */\n    __preferredFormats: null,\n\n    /** */\n    __loadedStylesheets: {},\n    __addedFontFaces: {},\n\n    /** Loader instances indexed by font family name */\n    __loaders: {},\n\n    /**\n     * Gets/creates a loader\n     *\n     * @param {String} name font family name\n     * @param {Boolean?} create whether to create one if one does not exist (default to false)\n     * @returns\n     */\n    getLoader(name, create) {\n      let loader = qx.bom.webfonts.WebFontLoader.__loaders[name];\n      if (!loader && create) {\n        loader = qx.bom.webfonts.WebFontLoader.__loaders[name] =\n          new qx.bom.webfonts.WebFontLoader(name);\n      }\n      return loader;\n    },\n\n    /**\n     * Adds a stylesheet, once per url\n     *\n     * @param {String} url\n     */\n    __loadStylesheet(url) {\n      if (qx.bom.webfonts.WebFontLoader.__loadedStylesheets[url]) {\n        return;\n      }\n\n      qx.bom.Stylesheet.includeFile(url);\n      qx.bom.webfonts.WebFontLoader.__loadedStylesheets[url] = true;\n    },\n\n    /**\n     * Creates a lookup key to index the created fonts.\n     * @param familyName {String} font-family name\n     * @param fontWeight {String} the font-weight.\n     * @param fontStyle {String} the font-style.\n     * @return {string} the font lookup key\n     */\n    createFontLookupKey(familyName, fontWeight, fontStyle) {\n      var lookupKey =\n        familyName +\n        \"_\" +\n        (fontWeight ? fontWeight : \"normal\") +\n        \"_\" +\n        (fontStyle ? fontStyle : \"normal\");\n      return lookupKey;\n    },\n\n    /**\n     * Uses a naive regExp match to determine the format of each defined source\n     * file for a webFont. Returns a map with the format names as keys and the\n     * corresponding source URLs as values.\n     *\n     * @param sources {String[]} Array of source URLs\n     * @return {Map} Map of formats and URLs\n     */\n    __getSourcesMap(sources) {\n      var formats = qx.bom.webfonts.WebFontLoader.FONT_FORMATS;\n      var sourcesMap = {};\n      var reg = new RegExp(\".(\" + formats.join(\"|\") + \")\");\n      for (var i = 0, l = sources.length; i < l; i++) {\n        var match = reg.exec(sources[i]);\n        if (match) {\n          var type = match[1];\n          sourcesMap[type] = sources[i];\n        }\n      }\n      return sourcesMap;\n    },\n\n    /**\n     * Returns the preferred font format(s) for the currently used browser. Some\n     * browsers support multiple formats, e.g. WOFF and TTF or WOFF and EOT. In\n     * those cases, WOFF is considered the preferred format.\n     *\n     * @return {String[]} List of supported font formats ordered by preference\n     * or empty Array if none could be determined\n     */\n    getPreferredFormats() {\n      if (qx.bom.webfonts.WebFontLoader.__preferredFormats) {\n        return qx.bom.webfonts.WebFontLoader.__preferredFormats;\n      }\n\n      var preferredFormats = [];\n      var browser = qx.core.Environment.get(\"browser.name\");\n      var browserVersion = qx.core.Environment.get(\"browser.version\");\n      var os = qx.core.Environment.get(\"os.name\");\n      var osVersion = qx.core.Environment.get(\"os.version\");\n\n      if (\n        (browser == \"edge\" && browserVersion >= 14) ||\n        (browser == \"firefox\" && browserVersion >= 69) ||\n        (browser == \"chrome\" && browserVersion >= 36)\n      ) {\n        preferredFormats.push(\"woff2\");\n      }\n\n      if (\n        (browser == \"ie\" &&\n          qx.core.Environment.get(\"browser.documentmode\") >= 9) ||\n        (browser == \"edge\" && browserVersion >= 12) ||\n        (browser == \"firefox\" && browserVersion >= 3.6) ||\n        (browser == \"chrome\" && browserVersion >= 6)\n      ) {\n        preferredFormats.push(\"woff\");\n      }\n\n      if (\n        (browser == \"edge\" && browserVersion >= 12) ||\n        (browser == \"opera\" && browserVersion >= 10) ||\n        (browser == \"safari\" && browserVersion >= 3.1) ||\n        (browser == \"firefox\" && browserVersion >= 3.5) ||\n        (browser == \"chrome\" && browserVersion >= 4) ||\n        (browser == \"mobile safari\" && os == \"ios\" && osVersion >= 4.2)\n      ) {\n        preferredFormats.push(\"ttf\");\n      }\n\n      if (browser == \"ie\" && browserVersion >= 4) {\n        preferredFormats.push(\"eot\");\n      }\n\n      if (browser == \"mobileSafari\" && os == \"ios\" && osVersion >= 4.1) {\n        preferredFormats.push(\"svg\");\n      }\n\n      return (qx.bom.webfonts.WebFontLoader.__preferredFormats =\n        preferredFormats);\n    },\n\n    /**\n     * IE 6 and 7 omit the trailing quote after the format name when\n     * querying cssText. This needs to be fixed before cssText is replaced\n     * or all rules will be invalid and no web fonts will work any more.\n     *\n     * @param cssText {String} CSS text\n     * @return {String} Fixed CSS text\n     */\n    __fixCssText(cssText) {\n      return cssText\n        .replace(\"'eot)\", \"'eot')\")\n        .replace(\"('embedded-opentype)\", \"('embedded-opentype')\");\n    }\n  }\n});\n"
  ],
  "mappings": ";;+CACA,oJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EADAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,+BAAhB,EAAiD;IAC/CC,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MAD+B;IAG/CC,SAH+C,qBAGrCC,UAHqC,EAGzB;MACpB;MACA,KAAKC,aAAL,CAAmBD,UAAnB;IACD,CAN8C;IAQ/CE,UAAU,EAAE;MACV;MACAF,UAAU,EAAE;QACVG,KAAK,EAAE;MADG,CAFF;;MAMV;MACAC,SAAS,EAAE;QACTC,QAAQ,EAAE,IADD;QAETC,KAAK,EAAE;MAFE,CAPD;;MAYV;MACAC,GAAG,EAAE;QACHF,QAAQ,EAAE,IADP;QAEHF,KAAK,EAAE;MAFJ,CAbK;;MAkBV;AACJ;AACA;AACA;AACA;AACA;MACIK,gBAAgB,EAAE;QAChBL,KAAK,EAAE,QADS;QAEhBM,IAAI,EAAE,IAFU;QAGhBJ,QAAQ,EAAE;MAHM,CAxBR;;MA8BV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,OAAO,EAAE;QACPP,KADO,iBACDQ,KADC,EACM;UACX,OACEA,KAAK,KAAK,IAAV,IACC,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,mBAAmBC,IAAnB,CAAwBD,KAAxB,CAFhC;QAID,CANM;QAOPF,IAAI,EAAE,IAPC;QAQPJ,QAAQ,EAAE;MARH;IAzCC,CARmC;;IA6D/C;AACF;AACA;AACA;AACA;IAEEQ,OAAO,EAAE;MACPC,SAAgB,EAAE,IADX;MAEPC,SAAyB,EAAE,IAFpB;;MAIP;AACJ;AACA;MACUC,IAPC,kBAOM;QAAA;;QAAA;UAAA;UAAA;YAAA;cAAA;gBACX,CAAC,KAAI,CAACC,MAAL,MAAiB,EAAlB,EAAsBC,OAAtB,CAA8B,UAAAC,GAAG,EAAI;kBACnC,IAAI,CAACA,GAAG,CAACC,KAAJ,CAAU,UAAV,CAAL,EAA4B;oBAC1BD,GAAG,GAAG7B,EAAE,CAAC+B,IAAH,CAAQC,eAAR,CAAwBC,WAAxB,GAAsCC,KAAtC,CAA4CL,GAA5C,CAAN;kBACD;;kBACD,IAAI,KAAI,CAACM,UAAL,EAAJ,EAAuB;oBACrBN,GAAG,IAAIA,GAAG,CAACO,OAAJ,CAAY,GAAZ,IAAmB,CAAnB,GAAuB,GAAvB,GAA6B,GAApC;oBACAP,GAAG,IAAI,KAAI,CAACM,UAAL,EAAP;kBACD;;kBACDnC,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BC,SAA9B,CAA+CX,GAA/C;gBACD,CATD;gBAUIf,SAXO,GAWK,KAAI,CAAC2B,YAAL,EAXL;;gBAYX,IAAI3B,SAAJ,EAAe;kBACbA,SAAS,CAACc,OAAV,CAAkB,UAAAc,QAAQ,EAAI;oBAC5B,IAAIA,QAAQ,CAACC,KAAb,EAAoB;sBAClBD,QAAQ,CAACC,KAAT,GAAiBD,QAAQ,CAACC,KAAT,CAAeC,GAAf,CAAmB,UAAAC,IAAI,EAAI;wBAC1C,IAAI,CAACA,IAAI,CAACf,KAAL,CAAW,UAAX,CAAL,EAA6B;0BAC3Be,IAAI,GAAG7C,EAAE,CAAC+B,IAAH,CAAQC,eAAR,CAAwBC,WAAxB,GAAsCC,KAAtC,CAA4CW,IAA5C,CAAP;wBACD;;wBACD,IAAI,KAAI,CAACV,UAAL,EAAJ,EAAuB;0BACrBU,IAAI,IAAIA,IAAI,CAACT,OAAL,CAAa,GAAb,IAAoB,CAApB,GAAwB,GAAxB,GAA8B,GAAtC;0BACAS,IAAI,IAAI,KAAI,CAACV,UAAL,EAAR;wBACD;;wBACD,OAAOU,IAAP;sBACD,CATgB,CAAjB;oBAUD;kBACF,CAbD;kBAcA,KAAI,CAACrB,SAAL,GAAwBxB,EAAE,CAAC8C,IAAH,CAAQC,KAAR,CAAcC,KAAd,CAAoBlC,SAApB,CAAxB;kBACA,KAAI,CAACW,SAAL,GAAiC,IAAIzB,EAAE,CAACiD,OAAP,EAAjC;gBACD;;gBACD,KAAI,CAACC,SAAL;;cA9BW;cAAA;gBAAA;YAAA;UAAA;QAAA;MA+BZ,CAtCM;MAwCDC,aAxCC,2BAwCe;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACP,MAAI,CAAC1B,SADE;;cAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAErB,CA1CM;;MA4CP;AACJ;AACA;MACIyB,SA/CO,uBA+Cc;QAAA;;QACnB,IAAI,KAAK1B,SAAL,IAAyB,IAA7B,EAAmC;UACjC;QACD;;QACD,IAAIkB,QAAQ,GAAG,KAAKlB,SAAL,CAAsB4B,GAAtB,EAAf;;QAEA,KAAKC,SAAL,CAAmBX,QAAnB;;QAEA,IAAI,KAAKlB,SAAL,CAAsB8B,MAAtB,IAAgC,CAApC,EAAuC;UACrC,KAAK9B,SAAL,GAAwB,IAAxB;;UACA,KAAKC,SAAL,CAA+B8B,OAA/B,CAAuC,IAAvC;QACD;;QAED,IACEvD,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,QAA1C,KACCC,QAAQ,CAAC1D,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,gBAAxB,CAAD,CAAR,GAAsD,CAAtD,IACCzD,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,IAAkD,CAFpD,CADF,EAIE;UACA;UACAE,UAAU,CAAC;YAAA,OAAM,MAAI,CAACT,SAAL,EAAN;UAAA,CAAD,EAAkC,GAAlC,CAAV;QACD,CAPD,MAOO;UACL,KAAKA,SAAL;QACD;MACF,CAtEM;;MAwEP;AACJ;AACA;AACA;AACA;AACA;MACIG,SA9EO,qBA8EOX,QA9EP,EA8EiB;QACtB,IAAIhC,UAAU,GAAGgC,QAAQ,CAAChC,UAAT,IAAuB,KAAKkD,aAAL,EAAxC;QACA,IAAIC,aAAa,GAAG7D,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BuB,mBAA9B,CAClBpD,UADkB,EAElBgC,QAAQ,CAACqB,UAAT,IAAuB,QAFL,EAGlBrB,QAAQ,CAACsB,SAAT,IAAsB,QAHJ,CAApB;;QAMA,IAAIhE,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B0B,SAA9B,CAA+CJ,aAA/C,CAAJ,EAAmE;UACjE;QACD;;QAED,IAAI,CAAC7D,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B2B,SAAnC,EAAiD;UAC/C,IAAIC,WAAU,GAAGnE,EAAE,CAACqC,GAAH,CAAO+B,UAAP,CAAkBC,aAAlB,EAAjB;;UACArE,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B2B,SAA9B,GAA6CC,WAA7C;QAOD;;QAED,IAAIG,UAAU,GAAG,EAAjB;QACA,IAAMC,YAAY,GAAG,IAAIC,MAAJ,CACnB,OACExE,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BkC,mBAA9B,GAAoDC,IAApD,CAAyD,GAAzD,CADF,GAEE,GAHiB,CAArB;QAMA;AACN;AACA;AACA;;QAEM,IAAIC,gBAAgB,GAAG,EAAvB;;QACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlC,QAAQ,CAACC,KAAT,CAAeW,MAAnC,EAA2CsB,CAAC,EAA5C,EAAgD;UAC9C,IAAI9C,KAAK,GAAGyC,YAAY,CAACM,IAAb,CAAkBnC,QAAQ,CAACC,KAAT,CAAeiC,CAAf,CAAlB,CAAZ;;UACA,IAAI,CAAC9C,KAAL,EAAY;YACV;UACD;;UAED,IAAIgD,UAAU,GAAGhD,KAAK,CAAC,CAAD,CAAtB;UACA,IAAID,GAAG,GAAGa,QAAQ,CAACC,KAAT,CAAeiC,CAAf,CAAV;;UACA,IAAI,KAAKzC,UAAL,EAAJ,EAAuB;YACrBN,GAAG,IAAI,MAAM,KAAKM,UAAL,EAAb;UACD;;UAEDwC,gBAAgB,CAACI,IAAjB,CAAsB;YACpBlD,GAAG,EAAEA,GADe;YAEpBmD,MAAM,EAAEF;UAFY,CAAtB;;UAKA,IAAIA,UAAU,IAAI,KAAlB,EAAyB;YACvBH,gBAAgB,CAACI,IAAjB,CAAsB;cACpBlD,GAAG,EAAEA,GAAG,GAAG,UADS;cAEpBmD,MAAM,EAAE;YAFY,CAAtB;UAID;QACF;;QACDL,gBAAgB,GAAGA,gBAAgB,CAACM,IAAjB,CAAsB,UAACC,CAAD,EAAIC,CAAJ,EAAU;UACjDD,CAAC,CAACJ,UAAF,IAAgB,mBAAhB,GAAsC,CAAC,CAAvC,GAA2C,CAA3C;QACD,CAFkB,CAAnB;QAIA,IAAIM,UAAU,GAAG,EAAjB;;QACA,KAAK,IAAIR,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGD,gBAAgB,CAACrB,MAArC,EAA6CsB,GAAC,EAA9C,EAAkD;UAChDQ,UAAU,IAAI,eAAeT,gBAAgB,CAACC,GAAD,CAAhB,CAAoB/C,GAAnC,GAAyC,IAAvD;;UACA,IAAI+C,GAAC,GAAG,CAAR,EAAW;YACTQ,UAAU,IAAI,cAAcT,gBAAgB,CAACC,GAAD,CAAhB,CAAoBI,MAAlC,GAA2C,IAAzD;UACD;;UACDI,UAAU,IAAI,GAAd;QACD;;QAED,IAAIC,IAAI,GAAG,kBAAkB3E,UAAlB,GAA+B,KAA1C;QACA2E,IAAI,IAAID,UAAU,GAAG,IAArB;QACAC,IAAI,IAAI,kBAAkB3C,QAAQ,CAACsB,SAAT,IAAsB,QAAxC,IAAoD,KAA5D;QACAqB,IAAI,IAAI,mBAAmB3C,QAAQ,CAACqB,UAAT,IAAuB,QAA1C,IAAsD,KAA9D;QAEAsB,IAAI,GAAG,mBAAmBA,IAAnB,GAA0B,KAAjC;QAEA,IAAIlB,UAAU,GAAGnE,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B2B,SAA/C;;QACA,IAAI;UACF,IACElE,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,cAAxB,KAA2C,IAA3C,IACAzD,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,IAAkD,CAFpD,EAGE;YACA,IAAI6B,OAAO,GAAGtF,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BgD,SAA9B,CACZpB,UAAU,CAACmB,OADC,CAAd;;YAIAA,OAAO,IAAID,IAAX;YACAlB,UAAU,CAACmB,OAAX,GAAqBA,OAArB;UACD,CAVD,MAUO;YACLnB,UAAU,CAACqB,UAAX,CAAsBH,IAAtB,EAA4BlB,UAAU,CAACsB,QAAX,CAAoBnC,MAAhD;UACD;QACF,CAdD,CAcE,OAAOoC,EAAP,EAAW,CAKZ;;QAED1F,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B0B,SAA9B,CAA+CJ,aAA/C,IAAgE,IAAhE;MACD,CArLM;MAuLP;MACA8B,eAxLO,2BAwLS7E,SAxLT,EAwLoB8E,GAxLpB,EAwLyB;QAC9B,IAAIC,QAAQ,GAAG,EAAf;;QAEA,KAAK,IAAIjB,CAAC,GAAG,CAAR,EAAWkB,CAAC,GAAGhF,SAAS,CAACwC,MAA9B,EAAsCsB,CAAC,GAAGkB,CAA1C,EAA6ClB,CAAC,EAA9C,EAAkD;UAChD,IAAIlC,QAAQ,GAAG5B,SAAS,CAAC8D,CAAD,CAAxB;;UACA,IAAImB,UAAU,GAAG,KAAKC,gBAAL,CACftD,QAAQ,CAACuD,MAAT,IAAmB,KAAKrC,aAAL,EADJ,CAAjB;;UAIA,IAAIiC,QAAQ,CAACzD,OAAT,CAAiB2D,UAAjB,IAA+B,CAAnC,EAAsC;YACpCF,QAAQ,CAACd,IAAT,CAAcgB,UAAd;UACD;QACF;MACF,CArMM;;MAuMP;AACJ;AACA;AACA;AACA;AACA;MACIC,gBA7MO,4BA6MUD,UA7MV,EA6MsB;QAC3B,OAAOA,UAAU,CAACG,OAAX,CAAmB,OAAnB,EAA4B,EAA5B,CAAP;MACD;IA/MM,CAnEsC;IAqR/CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;MACIC,YAAY,EAAE,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,KAAzB,EAAgC,KAAhC,CALP;;MAOP;AACJ;AACA;MACIC,kBAAkB,EAAE,IAVb;;MAYP;MACAC,SAAkB,EAAE,IAbb;;MAeP;MACAC,SAAmB,EAAE,EAhBd;MAiBPtC,SAAgB,EAAE,EAjBX;;MAmBP;MACAuC,UAAS,EAAE,EApBJ;;MAsBP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,SA7BO,qBA6BGC,IA7BH,EA6BSC,MA7BT,EA6BiB;QACtB,IAAIC,MAAM,GAAG5G,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BiE,UAA9B,CAAwCE,IAAxC,CAAb;;QACA,IAAI,CAACE,MAAD,IAAWD,MAAf,EAAuB;UACrBC,MAAM,GAAG5G,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BiE,UAA9B,CAAwCE,IAAxC,IACP,IAAI1G,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAApB,CAAkCmE,IAAlC,CADF;QAED;;QACD,OAAOE,MAAP;MACD,CApCM;;MAsCP;AACJ;AACA;AACA;AACA;MACIpE,SA3CO,qBA2CUX,GA3CV,EA2Ce;QACpB,IAAI7B,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BgE,SAA9B,CAAkD1E,GAAlD,CAAJ,EAA4D;UAC1D;QACD;;QAED7B,EAAE,CAACqC,GAAH,CAAO+B,UAAP,CAAkByC,WAAlB,CAA8BhF,GAA9B;QACA7B,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BgE,SAA9B,CAAkD1E,GAAlD,IAAyD,IAAzD;MACD,CAlDM;;MAoDP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIiC,mBA3DO,+BA2DaiC,UA3Db,EA2DyBhC,UA3DzB,EA2DqCC,SA3DrC,EA2DgD;QACrD,IAAI8C,SAAS,GACXf,UAAU,GACV,GADA,IAEChC,UAAU,GAAGA,UAAH,GAAgB,QAF3B,IAGA,GAHA,IAICC,SAAS,GAAGA,SAAH,GAAe,QAJzB,CADF;QAMA,OAAO8C,SAAP;MACD,CAnEM;;MAqEP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UA7EO,sBA6ESC,OA7ET,EA6EkB;QACvB,IAAIC,OAAO,GAAGjH,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B6D,YAA5C;QACA,IAAI9B,UAAU,GAAG,EAAjB;QACA,IAAI4C,GAAG,GAAG,IAAI1C,MAAJ,CAAW,OAAOyC,OAAO,CAACvC,IAAR,CAAa,GAAb,CAAP,GAA2B,GAAtC,CAAV;;QACA,KAAK,IAAIE,CAAC,GAAG,CAAR,EAAWkB,CAAC,GAAGkB,OAAO,CAAC1D,MAA5B,EAAoCsB,CAAC,GAAGkB,CAAxC,EAA2ClB,CAAC,EAA5C,EAAgD;UAC9C,IAAI9C,KAAK,GAAGoF,GAAG,CAACrC,IAAJ,CAASmC,OAAO,CAACpC,CAAD,CAAhB,CAAZ;;UACA,IAAI9C,KAAJ,EAAW;YACT,IAAIqF,IAAI,GAAGrF,KAAK,CAAC,CAAD,CAAhB;YACAwC,UAAU,CAAC6C,IAAD,CAAV,GAAmBH,OAAO,CAACpC,CAAD,CAA1B;UACD;QACF;;QACD,OAAON,UAAP;MACD,CAzFM;;MA2FP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,mBAnGO,iCAmGe;QACpB,IAAIzE,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B+D,SAAlC,EAAsD;UACpD,OAAOtG,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B+D,SAArC;QACD;;QAED,IAAIc,gBAAgB,GAAG,EAAvB;QACA,IAAIC,OAAO,GAAGrH,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,cAAxB,CAAd;QACA,IAAI6D,cAAc,GAAGtH,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,CAArB;QACA,IAAI8D,EAAE,GAAGvH,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,SAAxB,CAAT;QACA,IAAI+D,SAAS,GAAGxH,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,YAAxB,CAAhB;;QAEA,IACG4D,OAAO,IAAI,MAAX,IAAqBC,cAAc,IAAI,EAAxC,IACCD,OAAO,IAAI,SAAX,IAAwBC,cAAc,IAAI,EAD3C,IAECD,OAAO,IAAI,QAAX,IAAuBC,cAAc,IAAI,EAH5C,EAIE;UACAF,gBAAgB,CAACrC,IAAjB,CAAsB,OAAtB;QACD;;QAED,IACGsC,OAAO,IAAI,IAAX,IACCrH,EAAE,CAACO,IAAH,CAAQiD,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,KAAmD,CADrD,IAEC4D,OAAO,IAAI,MAAX,IAAqBC,cAAc,IAAI,EAFxC,IAGCD,OAAO,IAAI,SAAX,IAAwBC,cAAc,IAAI,GAH3C,IAICD,OAAO,IAAI,QAAX,IAAuBC,cAAc,IAAI,CAL5C,EAME;UACAF,gBAAgB,CAACrC,IAAjB,CAAsB,MAAtB;QACD;;QAED,IACGsC,OAAO,IAAI,MAAX,IAAqBC,cAAc,IAAI,EAAxC,IACCD,OAAO,IAAI,OAAX,IAAsBC,cAAc,IAAI,EADzC,IAECD,OAAO,IAAI,QAAX,IAAuBC,cAAc,IAAI,GAF1C,IAGCD,OAAO,IAAI,SAAX,IAAwBC,cAAc,IAAI,GAH3C,IAICD,OAAO,IAAI,QAAX,IAAuBC,cAAc,IAAI,CAJ1C,IAKCD,OAAO,IAAI,eAAX,IAA8BE,EAAE,IAAI,KAApC,IAA6CC,SAAS,IAAI,GAN7D,EAOE;UACAJ,gBAAgB,CAACrC,IAAjB,CAAsB,KAAtB;QACD;;QAED,IAAIsC,OAAO,IAAI,IAAX,IAAmBC,cAAc,IAAI,CAAzC,EAA4C;UAC1CF,gBAAgB,CAACrC,IAAjB,CAAsB,KAAtB;QACD;;QAED,IAAIsC,OAAO,IAAI,cAAX,IAA6BE,EAAE,IAAI,KAAnC,IAA4CC,SAAS,IAAI,GAA7D,EAAkE;UAChEJ,gBAAgB,CAACrC,IAAjB,CAAsB,KAAtB;QACD;;QAED,OAAQ/E,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8B+D,SAA9B,GACNc,gBADF;MAED,CArJM;;MAuJP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACI7B,SA/JO,qBA+JMD,OA/JN,EA+Je;QACpB,OAAOA,OAAO,CACXY,OADI,CACI,OADJ,EACa,QADb,EAEJA,OAFI,CAEI,sBAFJ,EAE4B,uBAF5B,CAAP;MAGD;IAnKM;EArRsC,CAAjD;EAlBAlG,EAAE,CAACqC,GAAH,CAAOC,QAAP,CAAgBC,aAAhB,CAA8BpC,aAA9B,GAA8CA,aAA9C"
}