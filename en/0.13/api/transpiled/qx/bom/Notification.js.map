{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "getNotification",
    "window",
    "Notification",
    "undefined",
    "construct",
    "constructor",
    "call",
    "__notifications",
    "events",
    "appear",
    "click",
    "close",
    "members",
    "__lastId",
    "show",
    "title",
    "message",
    "icon",
    "expire",
    "tag",
    "bom",
    "permission",
    "_show",
    "that",
    "requestPermission",
    "lang",
    "locale",
    "Manager",
    "getInstance",
    "getLocale",
    "replace",
    "rm",
    "util",
    "ResourceManager",
    "source",
    "AliasManager",
    "resolve",
    "has",
    "toUri",
    "Environment",
    "get",
    "notification",
    "body",
    "onshow",
    "fireDataEvent",
    "onclose",
    "onclick",
    "onerror",
    "event",
    "Timer",
    "once",
    "request",
    "getPermission",
    "defer",
    "add"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Notification.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2014 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   Authors:\r\n     * Cajus Pollmeier (cajus)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This class offers a constant API over the Notification Spec:\r\n * http://www.w3.org/TR/notifications/\r\n *\r\n * It forwards all the browsers support if supported.\r\n *\r\n * *Example*\r\n *\r\n * <pre class=\"javascript\">\r\n * var notifications = qx.bom.Notification.getInstance();\r\n *\r\n * var button = new qx.ui.form.Button(\"Notify me!\");\r\n * button.addListener(\"execute\", function() {\r\n *   notifications.show(\"Information\", \"Hey there!\", \"icon/64/status/dialog-information.png\", 5000);\r\n * });\r\n *\r\n * // Enable button if supported\r\n * button.setEnabled(qx.core.Environment.get(\"html.notification\"));\r\n *\r\n * </pre>\r\n *\r\n * **Note**\r\n *\r\n * A notification can only be sent if the user allows these notifications to\r\n * be shown. <code>qx.bom.Notification</code> automatically tries to\r\n * trigger a browser dialog which asks the user for permission.\r\n *\r\n * But there is a restriction: the dialog will only show up if it is triggered\r\n * by code that is running inside a request handler for an interactive browser\r\n * event like a mouse click or a keyboard interaction.\r\n *\r\n * For real life applications this means that you may add a <code>request()</code>\r\n * call i.e. to your applications login button to let the browser ask for\r\n * permission initially. After that happened and the user decided to\r\n * accept these notifications, they can be sent any time without the\r\n * need to be inside of event handlers.\r\n *\r\n * @ignore(Notification.requestPermission,Notification,Notification.permission)\r\n */\r\nqx.Class.define(\"qx.bom.Notification\", {\r\n  extend: qx.core.Object,\r\n  type: \"singleton\",\r\n\r\n  /*\r\n  *****************************************************************************\r\n     STATICS\r\n  *****************************************************************************\r\n  */\r\n\r\n  statics: {\r\n    /**\r\n     * Whether the client supports the desktop notification API.\r\n     *\r\n     * @internal\r\n     * @return {Boolean} <code>true</code> if notification API is supported\r\n     */\r\n    getNotification() {\r\n      return window.Notification !== undefined;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * This is a singleton. Use <code>getInstance()</code> to get an instance.\r\n   */\r\n  construct() {\r\n    super();\r\n    this.__notifications = {};\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /**\r\n     * Event fired when a notification with data <code>tag</code> appeared.\r\n     */\r\n    appear: \"Data\",\r\n\r\n    /**\r\n     * Event fired when a notification with data <code>tag</code> has been\r\n     * clicked by the user.\r\n     */\r\n    click: \"Data\",\r\n\r\n    /**\r\n     * Event fired when a notification with data <code>tag</code> has been\r\n     * closed. This may happen either interactively or due to a timeout\r\n     * defined by the instance displaying the notification.\r\n     */\r\n    close: \"Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __notifications: null,\r\n    __lastId: 0,\r\n\r\n    /**\r\n     * Display a desktop notification using a _title_, _message_ and _icon_.\r\n     *\r\n     * @param title {String} The notification title\r\n     * @param message {String} The message body\r\n     * @param icon {String} Resource string or icon URL\r\n     * @param expire {Number} Number of milliseconds after the message is\r\n     *                     automatically destroyed. Leave empty for no\r\n     *                     timeout. Note that some notification systems\r\n     *                     tend to remove timeout-less messages after some\r\n     *                     time.\r\n     * @param tag {String} Multiple messages with the same tag replace each\r\n     *                     other. Leave blank for automatic tag handling.\r\n     * @return {String} Notification tag\r\n     */\r\n    show(title, message, icon, expire, tag) {\r\n      if (qx.bom.Notification.getNotification()) {\r\n        // Generate unique tag to be able to identify the\r\n        // notification later on.\r\n        if (tag !== undefined) {\r\n          tag = \"id\" + this.__lastId++;\r\n        }\r\n\r\n        // If we've the permission already, just send it\r\n        if (Notification.permission == \"granted\") {\r\n          this._show(tag, title, message, icon, expire);\r\n\r\n          // We've not asked for permission yet. Lets do it.\r\n        } else if (Notification.permission != \"denied\") {\r\n          var that = this;\r\n          Notification.requestPermission(function (permission) {\r\n            if (Notification.permission === undefined) {\r\n              Notification.permission = permission;\r\n            }\r\n\r\n            if (permission == \"granted\") {\r\n              that._show(tag, title, message, icon, expire);\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      return tag === undefined ? null : tag;\r\n    },\r\n\r\n    /**\r\n     * Display a desktop notification using a _title_, _message_ and _icon_.\r\n     *\r\n     * @internal\r\n     * @param tag {String} Notification tag\r\n     * @param title {String} The notification title\r\n     * @param message {String} The message body\r\n     * @param icon {String} Resource string or icon URL\r\n     * @param expire {Unsigned} Number of milliseconds after the message is\r\n     *                     automatically destroyed. Leave empty for no\r\n     *                     timeout. Note that some notification systems\r\n     *                     tend to remove timeout-less messages after some\r\n     *                     time.\r\n     */\r\n    _show(tag, title, message, icon, expire) {\r\n      var lang = qx.locale.Manager.getInstance()\r\n        .getLocale()\r\n        .replace(/_.*$/, \"\");\r\n\r\n      // Resolve icon path if needed and possible\r\n      if (icon) {\r\n        var rm = qx.util.ResourceManager.getInstance();\r\n        var source = qx.util.AliasManager.getInstance().resolve(icon);\r\n        if (rm.has(source)) {\r\n          icon = rm.toUri(source);\r\n        }\r\n\r\n        // old versions of firefox did not display the notification if\r\n        // an icon was specified, so we disable the icon for firefox\r\n        // < version 46\r\n        if (\r\n          qx.core.Environment.get(\"engine.name\") == \"gecko\" &&\r\n          qx.core.Environment.get(\"browser.version\") < 46\r\n        ) {\r\n          icon = undefined;\r\n        }\r\n      }\r\n\r\n      var notification = new Notification(title, {\r\n        body: message,\r\n        tag: tag,\r\n        icon: icon,\r\n        lang: lang\r\n      });\r\n\r\n      var that = this;\r\n      notification.onshow = function () {\r\n        that.__notifications[tag] = notification;\r\n        that.fireDataEvent(\"appear\", tag);\r\n      };\r\n      notification.onclose = function () {\r\n        that.fireDataEvent(\"close\", tag);\r\n        if (that.__notifications[tag]) {\r\n          that.__notifications[tag] = null;\r\n          delete that.__notifications[tag];\r\n        }\r\n      };\r\n      notification.onclick = function () {\r\n        that.fireDataEvent(\"click\", tag);\r\n        if (that.__notifications[tag]) {\r\n          that.__notifications[tag] = null;\r\n          delete that.__notifications[tag];\r\n        }\r\n      };\r\n      notification.onerror = function () {\r\n        that.fireDataEvent(\"error\", tag);\r\n        if (that.__notifications[tag]) {\r\n          that.__notifications[tag] = null;\r\n          delete that.__notifications[tag];\r\n        }\r\n      };\r\n\r\n      // Install expire timer if exists\r\n      if (expire) {\r\n        qx.event.Timer.once(\r\n          function () {\r\n            notification.close();\r\n          },\r\n          this,\r\n          expire\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Actively close an active notification.\r\n     *\r\n     * @param tag {String} Notification tag\r\n     */\r\n    close(tag) {\r\n      if (this.__notifications[tag]) {\r\n        this.__notifications[tag].close();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Tell the browser to request permission to display notifications.\r\n     *\r\n     * **Note:**\r\n     *\r\n     * This needs to be called from within an interactive event handler.\r\n     */\r\n    request() {\r\n      if (qx.bom.Notification.getNotification()) {\r\n        Notification.requestPermission(function (permission) {\r\n          if (Notification.permission === undefined) {\r\n            Notification.permission = permission;\r\n          }\r\n        });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Check if we've the permission to send notifications.\r\n     *\r\n     * @return {String} Returns either \"default\", \"denied\" or \"granted\". \"default\"\r\n     *                  indicates that we need to call <code>request()</code>  before\r\n     *                  a notification can be sent.\r\n     */\r\n    getPermission() {\r\n      return qx.bom.Notification.getNotification()\r\n        ? Notification.permission\r\n        : \"denied\";\r\n    }\r\n  },\r\n\r\n  defer(statics) {\r\n    qx.core.Environment.add(\"html.notification\", statics.getNotification);\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,qBAAqB,EAAE;IACrCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,IAAI,EAAE,WAAW;IAEjB;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,eAAe,WAAAA,gBAAA,EAAG;QAChB,OAAOC,MAAM,CAACC,YAAY,KAAKC,SAAS;MAC1C;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;IACEC,SAAS,WAAAA,UAAA,EAAG;MACVf,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAQ,WAAA,CAAAC,IAAA;MACA,IAAI,CAACC,SAAe,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,MAAM,EAAE;MACN;AACJ;AACA;MACIC,MAAM,EAAE,MAAM;MAEd;AACJ;AACA;AACA;MACIC,KAAK,EAAE,MAAM;MAEb;AACJ;AACA;AACA;AACA;MACIC,KAAK,EAAE;IACT,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPL,SAAe,EAAE,IAAI;MACrBM,SAAQ,EAAE,CAAC;MAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAE;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"
}