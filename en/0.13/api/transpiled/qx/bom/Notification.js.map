{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "getNotification",
    "window",
    "Notification",
    "undefined",
    "construct",
    "__notifications",
    "events",
    "appear",
    "click",
    "close",
    "members",
    "__lastId",
    "show",
    "title",
    "message",
    "icon",
    "expire",
    "tag",
    "bom",
    "permission",
    "_show",
    "that",
    "requestPermission",
    "lang",
    "locale",
    "Manager",
    "getInstance",
    "getLocale",
    "replace",
    "rm",
    "util",
    "ResourceManager",
    "source",
    "AliasManager",
    "resolve",
    "has",
    "toUri",
    "Environment",
    "get",
    "notification",
    "body",
    "onshow",
    "fireDataEvent",
    "onclose",
    "onclick",
    "onerror",
    "event",
    "Timer",
    "once",
    "request",
    "getPermission",
    "defer",
    "add"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Notification.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   Authors:\n     * Cajus Pollmeier (cajus)\n\n************************************************************************ */\n\n/**\n * This class offers a constant API over the Notification Spec:\n * http://www.w3.org/TR/notifications/\n *\n * It forwards all the browsers support if supported.\n *\n * *Example*\n *\n * <pre class=\"javascript\">\n * var notifications = qx.bom.Notification.getInstance();\n *\n * var button = new qx.ui.form.Button(\"Notify me!\");\n * button.addListener(\"execute\", function() {\n *   notifications.show(\"Information\", \"Hey there!\", \"icon/64/status/dialog-information.png\", 5000);\n * });\n *\n * // Enable button if supported\n * button.setEnabled(qx.core.Environment.get(\"html.notification\"));\n *\n * </pre>\n *\n * **Note**\n *\n * A notification can only be sent if the user allows these notifications to\n * be shown. <code>qx.bom.Notification</code> automatically tries to\n * trigger a browser dialog which asks the user for permission.\n *\n * But there is a restriction: the dialog will only show up if it is triggered\n * by code that is running inside a request handler for an interactive browser\n * event like a mouse click or a keyboard interaction.\n *\n * For real life applications this means that you may add a <code>request()</code>\n * call i.e. to your applications login button to let the browser ask for\n * permission initially. After that happened and the user decided to\n * accept these notifications, they can be sent any time without the\n * need to be inside of event handlers.\n *\n * @ignore(Notification.requestPermission,Notification,Notification.permission)\n */\nqx.Class.define(\"qx.bom.Notification\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Whether the client supports the desktop notification API.\n     *\n     * @internal\n     * @return {Boolean} <code>true</code> if notification API is supported\n     */\n    getNotification() {\n      return window.Notification !== undefined;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * This is a singleton. Use <code>getInstance()</code> to get an instance.\n   */\n  construct() {\n    super();\n    this.__notifications = {};\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Event fired when a notification with data <code>tag</code> appeared.\n     */\n    appear: \"Data\",\n\n    /**\n     * Event fired when a notification with data <code>tag</code> has been\n     * clicked by the user.\n     */\n    click: \"Data\",\n\n    /**\n     * Event fired when a notification with data <code>tag</code> has been\n     * closed. This may happen either interactively or due to a timeout\n     * defined by the instance displaying the notification.\n     */\n    close: \"Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __notifications: null,\n    __lastId: 0,\n\n    /**\n     * Display a desktop notification using a _title_, _message_ and _icon_.\n     *\n     * @param title {String} The notification title\n     * @param message {String} The message body\n     * @param icon {String} Resource string or icon URL\n     * @param expire {Number} Number of milliseconds after the message is\n     *                     automatically destroyed. Leave empty for no\n     *                     timeout. Note that some notification systems\n     *                     tend to remove timeout-less messages after some\n     *                     time.\n     * @param tag {String} Multiple messages with the same tag replace each\n     *                     other. Leave blank for automatic tag handling.\n     * @return {String} Notification tag\n     */\n    show(title, message, icon, expire, tag) {\n      if (qx.bom.Notification.getNotification()) {\n        // Generate unique tag to be able to identify the\n        // notification later on.\n        if (tag !== undefined) {\n          tag = \"id\" + this.__lastId++;\n        }\n\n        // If we've the permission already, just send it\n        if (Notification.permission == \"granted\") {\n          this._show(tag, title, message, icon, expire);\n\n          // We've not asked for permission yet. Lets do it.\n        } else if (Notification.permission != \"denied\") {\n          var that = this;\n          Notification.requestPermission(function (permission) {\n            if (Notification.permission === undefined) {\n              Notification.permission = permission;\n            }\n\n            if (permission == \"granted\") {\n              that._show(tag, title, message, icon, expire);\n            }\n          });\n        }\n      }\n\n      return tag === undefined ? null : tag;\n    },\n\n    /**\n     * Display a desktop notification using a _title_, _message_ and _icon_.\n     *\n     * @internal\n     * @param tag {String} Notification tag\n     * @param title {String} The notification title\n     * @param message {String} The message body\n     * @param icon {String} Resource string or icon URL\n     * @param expire {Unsigned} Number of milliseconds after the message is\n     *                     automatically destroyed. Leave empty for no\n     *                     timeout. Note that some notification systems\n     *                     tend to remove timeout-less messages after some\n     *                     time.\n     */\n    _show(tag, title, message, icon, expire) {\n      var lang = qx.locale.Manager.getInstance()\n        .getLocale()\n        .replace(/_.*$/, \"\");\n\n      // Resolve icon path if needed and possible\n      if (icon) {\n        var rm = qx.util.ResourceManager.getInstance();\n        var source = qx.util.AliasManager.getInstance().resolve(icon);\n        if (rm.has(source)) {\n          icon = rm.toUri(source);\n        }\n\n        // old versions of firefox did not display the notification if\n        // an icon was specified, so we disable the icon for firefox\n        // < version 46\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"gecko\" &&\n          qx.core.Environment.get(\"browser.version\") < 46\n        ) {\n          icon = undefined;\n        }\n      }\n\n      var notification = new Notification(title, {\n        body: message,\n        tag: tag,\n        icon: icon,\n        lang: lang\n      });\n\n      var that = this;\n      notification.onshow = function () {\n        that.__notifications[tag] = notification;\n        that.fireDataEvent(\"appear\", tag);\n      };\n      notification.onclose = function () {\n        that.fireDataEvent(\"close\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n      notification.onclick = function () {\n        that.fireDataEvent(\"click\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n      notification.onerror = function () {\n        that.fireDataEvent(\"error\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n\n      // Install expire timer if exists\n      if (expire) {\n        qx.event.Timer.once(\n          function () {\n            notification.close();\n          },\n          this,\n          expire\n        );\n      }\n    },\n\n    /**\n     * Actively close an active notification.\n     *\n     * @param tag {String} Notification tag\n     */\n    close(tag) {\n      if (this.__notifications[tag]) {\n        this.__notifications[tag].close();\n      }\n    },\n\n    /**\n     * Tell the browser to request permission to display notifications.\n     *\n     * **Note:**\n     *\n     * This needs to be called from within an interactive event handler.\n     */\n    request() {\n      if (qx.bom.Notification.getNotification()) {\n        Notification.requestPermission(function (permission) {\n          if (Notification.permission === undefined) {\n            Notification.permission = permission;\n          }\n        });\n      }\n    },\n\n    /**\n     * Check if we've the permission to send notifications.\n     *\n     * @return {String} Returns either \"default\", \"denied\" or \"granted\". \"default\"\n     *                  indicates that we need to call <code>request()</code>  before\n     *                  a notification can be sent.\n     */\n    getPermission() {\n      return qx.bom.Notification.getNotification()\n        ? Notification.permission\n        : \"denied\";\n    }\n  },\n\n  defer(statics) {\n    qx.core.Environment.add(\"html.notification\", statics.getNotification);\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,qBAAqB,EAAE;IACrCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,IAAI,EAAE,WAAW;IAEjB;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,eAAe,6BAAG;QAChB,OAAOC,MAAM,CAACC,YAAY,KAAKC,SAAS;MAC1C;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;IACEC,SAAS,uBAAG;MACV;MACA,IAAI,CAACC,SAAe,GAAG,CAAC,CAAC;IAC3B,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,MAAM,EAAE;MACN;AACJ;AACA;MACIC,MAAM,EAAE,MAAM;MAEd;AACJ;AACA;AACA;MACIC,KAAK,EAAE,MAAM;MAEb;AACJ;AACA;AACA;AACA;MACIC,KAAK,EAAE;IACT,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPL,SAAe,EAAE,IAAI;MACrBM,SAAQ,EAAE,CAAC;MAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,gBAACC,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAE;QACtC,IAAI5B,EAAE,CAAC6B,GAAG,CAAChB,YAAY,CAACF,eAAe,EAAE,EAAE;UACzC;UACA;UA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"
}