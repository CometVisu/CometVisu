{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/bom/Notification.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "getNotification",
    "window",
    "Notification",
    "undefined",
    "construct",
    "__notifications",
    "events",
    "members",
    "__lastId",
    "show",
    "title",
    "message",
    "icon",
    "expire",
    "tag",
    "bom",
    "permission",
    "_show",
    "that",
    "requestPermission",
    "lang",
    "locale",
    "Manager",
    "getInstance",
    "getLocale",
    "replace",
    "rm",
    "util",
    "ResourceManager",
    "source",
    "AliasManager",
    "resolve",
    "has",
    "toUri",
    "Environment",
    "get",
    "notification",
    "body",
    "onshow",
    "fireDataEvent",
    "onclose",
    "onclick",
    "onerror",
    "event",
    "Timer",
    "once",
    "close",
    "request",
    "getPermission",
    "defer",
    "add"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,qBAAhB,EAAuC;AAErCC,IAAAA,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MAFqB;AAGrCC,IAAAA,IAAI,EAAE,WAH+B;;AAKrC;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EAAG;AAER;AACJ;AACA;AACA;AACA;AACA;AACIC,MAAAA,eAAe,EAAG,2BAAW;AAC3B,eAAOC,MAAM,CAACC,YAAP,KAAwBC,SAA/B;AACD;AAVO,KAX2B;;AA0BrC;AACF;AACA;AACA;AACA;;AAEE;AACF;AACA;AACEC,IAAAA,SAAS,EAAG,qBAAW;AACrB;AACC,WAAKC,SAAL,GAAuB,EAAvB;AACF,KAtCoC;;AAyCrC;AACF;AACA;AACA;AACA;AAEEC,IAAAA,MAAM,EAAG;AAEP;AACJ;AACA;AACI,gBAAW,MALJ;;AAOP;AACJ;AACA;AACA;AACI,eAAU,MAXH;;AAaP;AACJ;AACA;AACA;AACA;AACI,eAAU;AAlBH,KA/C4B;;AAqErC;AACF;AACA;AACA;AACA;AAEEC,IAAAA,OAAO,EAAE;AACPF,MAAAA,SAAe,EAAG,IADX;AAEPG,MAAAA,SAAQ,EAAG,CAFJ;;AAKP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,IAAI,EAAG,cAASC,KAAT,EAAgBC,OAAhB,EAAyBC,IAAzB,EAA+BC,MAA/B,EAAuCC,GAAvC,EAA4C;AACjD,YAAIzB,EAAE,CAAC0B,GAAH,CAAOb,YAAP,CAAoBF,eAApB,EAAJ,EAA2C;AAEzC;AACA;AACA,cAAIc,GAAG,KAAKX,SAAZ,EAAuB;AACrBW,YAAAA,GAAG,GAAG,OAAQ,KAAKN,SAAL,EAAd;AACD,WANwC,CAQzC;;;AACA,cAAIN,YAAY,CAACc,UAAb,IAA2B,SAA/B,EAA0C;AACxC,iBAAKC,KAAL,CAAWH,GAAX,EAAgBJ,KAAhB,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,MAAtC,EADwC,CAG1C;;AACC,WAJD,MAIO,IAAIX,YAAY,CAACc,UAAb,IAA2B,QAA/B,EAAyC;AAE9C,gBAAIE,IAAI,GAAG,IAAX;AACAhB,YAAAA,YAAY,CAACiB,iBAAb,CAA+B,UAAUH,UAAV,EAAsB;AACnD,kBAAId,YAAY,CAACc,UAAb,KAA4Bb,SAAhC,EAA2C;AACzCD,gBAAAA,YAAY,CAACc,UAAb,GAA0BA,UAA1B;AACD;;AAED,kBAAIA,UAAU,IAAI,SAAlB,EAA6B;AAC3BE,gBAAAA,IAAI,CAACD,KAAL,CAAWH,GAAX,EAAgBJ,KAAhB,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,MAAtC;AACD;AACF,aARD;AASD;AAEF;;AAED,eAAOC,GAAG,KAAKX,SAAR,GAAoB,IAApB,GAA2BW,GAAlC;AACD,OAnDM;;AAsDP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIG,MAAAA,KAAK,EAAG,eAASH,GAAT,EAAcJ,KAAd,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoCC,MAApC,EAA4C;AAClD,YAAIO,IAAI,GAAG/B,EAAE,CAACgC,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCC,SAAhC,GAA4CC,OAA5C,CAAoD,MAApD,EAA4D,EAA5D,CAAX,CADkD,CAGlD;;AACA,YAAIb,IAAJ,EAAU;AACR,cAAIc,EAAE,GAAGrC,EAAE,CAACsC,IAAH,CAAQC,eAAR,CAAwBL,WAAxB,EAAT;AACA,cAAIM,MAAM,GAAGxC,EAAE,CAACsC,IAAH,CAAQG,YAAR,CAAqBP,WAArB,GAAmCQ,OAAnC,CAA2CnB,IAA3C,CAAb;;AACA,cAAIc,EAAE,CAACM,GAAH,CAAOH,MAAP,CAAJ,EAAoB;AAClBjB,YAAAA,IAAI,GAAGc,EAAE,CAACO,KAAH,CAASJ,MAAT,CAAP;AACD,WALO,CAOR;AACA;AACA;;;AACA,cAAIxC,EAAE,CAACO,IAAH,CAAQsC,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,OAA1C,IACA9C,EAAE,CAACO,IAAH,CAAQsC,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,IAA6C,EADjD,EACqD;AACnDvB,YAAAA,IAAI,GAAGT,SAAP;AACD;AACF;;AAED,YAAIiC,YAAY,GAAG,IAAIlC,YAAJ,CAAiBQ,KAAjB,EAAwB;AACzC2B,UAAAA,IAAI,EAAE1B,OADmC;AAEzCG,UAAAA,GAAG,EAAEA,GAFoC;AAGzCF,UAAAA,IAAI,EAAEA,IAHmC;AAIzCQ,UAAAA,IAAI,EAAEA;AAJmC,SAAxB,CAAnB;AAMA,YAAIF,IAAI,GAAG,IAAX;;AACAkB,QAAAA,YAAY,CAACE,MAAb,GAAsB,YAAW;AAC/BpB,UAAAA,IAAI,CAACb,SAAL,CAAqBS,GAArB,IAA4BsB,YAA5B;AACAlB,UAAAA,IAAI,CAACqB,aAAL,CAAmB,QAAnB,EAA6BzB,GAA7B;AACD,SAHD;;AAIAsB,QAAAA,YAAY,CAACI,OAAb,GAAuB,YAAW;AAChCtB,UAAAA,IAAI,CAACqB,aAAL,CAAmB,OAAnB,EAA4BzB,GAA5B;;AACA,cAAII,IAAI,CAACb,SAAL,CAAqBS,GAArB,CAAJ,EAA+B;AAC7BI,YAAAA,IAAI,CAACb,SAAL,CAAqBS,GAArB,IAA4B,IAA5B;AACA,mBAAOI,IAAI,CAACb,SAAL,CAAqBS,GAArB,CAAP;AACD;AACF,SAND;;AAOAsB,QAAAA,YAAY,CAACK,OAAb,GAAuB,YAAW;AAChCvB,UAAAA,IAAI,CAACqB,aAAL,CAAmB,OAAnB,EAA4BzB,GAA5B;;AACA,cAAII,IAAI,CAACb,SAAL,CAAqBS,GAArB,CAAJ,EAA+B;AAC7BI,YAAAA,IAAI,CAACb,SAAL,CAAqBS,GAArB,IAA4B,IAA5B;AACA,mBAAOI,IAAI,CAACb,SAAL,CAAqBS,GAArB,CAAP;AACD;AACF,SAND;;AAOAsB,QAAAA,YAAY,CAACM,OAAb,GAAuB,YAAW;AAChCxB,UAAAA,IAAI,CAACqB,aAAL,CAAmB,OAAnB,EAA4BzB,GAA5B;;AACA,cAAII,IAAI,CAACb,SAAL,CAAqBS,GAArB,CAAJ,EAA+B;AAC7BI,YAAAA,IAAI,CAACb,SAAL,CAAqBS,GAArB,IAA4B,IAA5B;AACA,mBAAOI,IAAI,CAACb,SAAL,CAAqBS,GAArB,CAAP;AACD;AACF,SAND,CA7CkD,CAqDlD;;;AACA,YAAID,MAAJ,EAAY;AACVxB,UAAAA,EAAE,CAACsD,KAAH,CAASC,KAAT,CAAeC,IAAf,CAAoB,YAAW;AAC7BT,YAAAA,YAAY,CAACU,KAAb;AACD,WAFD,EAEG,IAFH,EAESjC,MAFT;AAGD;AACF,OA/HM;;AAkIP;AACJ;AACA;AACA;AACA;AACIiC,MAAAA,KAAK,EAAG,eAAShC,GAAT,EAAc;AACpB,YAAI,KAAKT,SAAL,CAAqBS,GAArB,CAAJ,EAA+B;AAC7B,eAAKT,SAAL,CAAqBS,GAArB,EAA0BgC,KAA1B;AACD;AACF,OA3IM;;AA8IP;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,MAAAA,OAAO,EAAG,mBAAW;AACnB,YAAI1D,EAAE,CAAC0B,GAAH,CAAOb,YAAP,CAAoBF,eAApB,EAAJ,EAA2C;AACzCE,UAAAA,YAAY,CAACiB,iBAAb,CAA+B,UAAUH,UAAV,EAAsB;AACnD,gBAAId,YAAY,CAACc,UAAb,KAA4Bb,SAAhC,EAA2C;AACzCD,cAAAA,YAAY,CAACc,UAAb,GAA0BA,UAA1B;AACD;AACF,WAJD;AAKD;AACF,OA7JM;;AAgKP;AACJ;AACA;AACA;AACA;AACA;AACA;AACIgC,MAAAA,aAAa,EAAG,yBAAW;AACxB,eAAO3D,EAAE,CAAC0B,GAAH,CAAOb,YAAP,CAAoBF,eAApB,KAAwCE,YAAY,CAACc,UAArD,GAAkE,QAAzE;AACF;AAzKM,KA3E4B;AAyPrCiC,IAAAA,KAAK,EAAG,eAAUlD,OAAV,EAAmB;AACzBV,MAAAA,EAAE,CAACO,IAAH,CAAQsC,WAAR,CAAoBgB,GAApB,CAAwB,mBAAxB,EAA6CnD,OAAO,CAACC,eAArD;AACD;AA3PoC,GAAvC;AArDAX,EAAAA,EAAE,CAAC0B,GAAH,CAAOb,YAAP,CAAoBV,aAApB,GAAoCA,aAApC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   Authors:\n     * Cajus Pollmeier (cajus)\n\n************************************************************************ */\n\n/**\n * This class offers a constant API over the Notification Spec:\n * http://www.w3.org/TR/notifications/\n *\n * It forwards all the browsers support if supported.\n *\n * *Example*\n *\n * <pre class=\"javascript\">\n * var notifications = qx.bom.Notification.getInstance();\n *\n * var button = new qx.ui.form.Button(\"Notify me!\");\n * button.addListener(\"execute\", function() {\n *   notifications.show(\"Information\", \"Hey there!\", \"icon/64/status/dialog-information.png\", 5000);\n * });\n *\n * // Enable button if supported\n * button.setEnabled(qx.core.Environment.get(\"html.notification\"));\n *\n * </pre>\n *\n * **Note**\n *\n * A notification can only be sent if the user allows these notifications to\n * be shown. <code>qx.bom.Notification</code> automatically tries to\n * trigger a browser dialog which asks the user for permission.\n *\n * But there is a restriction: the dialog will only show up if it is triggered\n * by code that is running inside a request handler for an interactive browser\n * event like a mouse click or a keyboard interaction.\n *\n * For real life applications this means that you may add a <code>request()</code>\n * call i.e. to your applications login button to let the browser ask for\n * permission initially. After that happened and the user decided to\n * accept these notifications, they can be sent any time without the\n * need to be inside of event handlers.\n *\n * @ignore(Notification.requestPermission,Notification,Notification.permission)\n */\nqx.Class.define(\"qx.bom.Notification\", {\n\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics : {\n\n    /**\n     * Whether the client supports the desktop notification API.\n     *\n     * @internal\n     * @return {Boolean} <code>true</code> if notification API is supported\n     */\n    getNotification : function() {\n      return window.Notification !== undefined;\n    }\n\n  },\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * This is a singleton. Use <code>getInstance()</code> to get an instance.\n   */\n  construct : function() {\n    this.base(arguments);\n     this.__notifications = {};\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events : {\n\n    /**\n     * Event fired when a notification with data <code>tag</code> appeared.\n     */\n    \"appear\" : \"Data\",\n\n    /**\n     * Event fired when a notification with data <code>tag</code> has been\n     * clicked by the user.\n     */\n    \"click\" : \"Data\",\n\n    /**\n     * Event fired when a notification with data <code>tag</code> has been\n     * closed. This may happen either interactively or due to a timeout\n     * defined by the instance displaying the notification.\n     */\n    \"close\" : \"Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __notifications : null,\n    __lastId : 0,\n\n\n    /**\n     * Display a desktop notification using a _title_, _message_ and _icon_.\n     *\n     * @param title {String} The notification title\n     * @param message {String} The message body\n     * @param icon {String} Resource string or icon URL\n     * @param expire {Number} Number of milliseconds after the message is\n     *                     automatically destroyed. Leave empty for no\n     *                     timeout. Note that some notification systems\n     *                     tend to remove timeout-less messages after some\n     *                     time.\n     * @param tag {String} Multiple messages with the same tag replace each\n     *                     other. Leave blank for automatic tag handling.\n     * @return {String} Notification tag\n     */\n    show : function(title, message, icon, expire, tag) {\n      if (qx.bom.Notification.getNotification()) {\n\n        // Generate unique tag to be able to identify the\n        // notification later on.\n        if (tag !== undefined) {\n          tag = \"id\" + (this.__lastId++);\n        }\n\n        // If we've the permission already, just send it\n        if (Notification.permission == \"granted\") {\n          this._show(tag, title, message, icon, expire);\n\n        // We've not asked for permission yet. Lets do it.\n        } else if (Notification.permission != \"denied\") {\n\n          var that = this;\n          Notification.requestPermission(function (permission) {\n            if (Notification.permission === undefined) {\n              Notification.permission = permission;\n            }\n\n            if (permission == \"granted\") {\n              that._show(tag, title, message, icon, expire);\n            }\n          });\n        }\n\n      }\n\n      return tag === undefined ? null : tag;\n    },\n\n\n    /**\n     * Display a desktop notification using a _title_, _message_ and _icon_.\n     *\n     * @internal\n     * @param tag {String} Notification tag\n     * @param title {String} The notification title\n     * @param message {String} The message body\n     * @param icon {String} Resource string or icon URL\n     * @param expire {Unsigned} Number of milliseconds after the message is\n     *                     automatically destroyed. Leave empty for no\n     *                     timeout. Note that some notification systems\n     *                     tend to remove timeout-less messages after some\n     *                     time.\n     */\n    _show : function(tag, title, message, icon, expire) {\n      var lang = qx.locale.Manager.getInstance().getLocale().replace(/_.*$/, \"\");\n\n      // Resolve icon path if needed and possible\n      if (icon) {\n        var rm = qx.util.ResourceManager.getInstance();\n        var source = qx.util.AliasManager.getInstance().resolve(icon);\n        if (rm.has(source)) {\n          icon = rm.toUri(source);\n        }\n\n        // old versions of firefox did not display the notification if\n        // an icon was specified, so we disable the icon for firefox\n        // < version 46\n        if (qx.core.Environment.get(\"engine.name\") == \"gecko\" &&\n            qx.core.Environment.get(\"browser.version\") < 46) {\n          icon = undefined;\n        }\n      }\n\n      var notification = new Notification(title, {\n        body: message,\n        tag: tag,\n        icon: icon,\n        lang: lang\n      });\n      var that = this;\n      notification.onshow = function() {\n        that.__notifications[tag] = notification;\n        that.fireDataEvent(\"appear\", tag);\n      };\n      notification.onclose = function() {\n        that.fireDataEvent(\"close\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n      notification.onclick = function() {\n        that.fireDataEvent(\"click\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n      notification.onerror = function() {\n        that.fireDataEvent(\"error\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n\n      // Install expire timer if exists\n      if (expire) {\n        qx.event.Timer.once(function() {\n          notification.close();\n        }, this, expire);\n      }\n    },\n\n\n    /**\n     * Actively close an active notification.\n     *\n     * @param tag {String} Notification tag\n     */\n    close : function(tag) {\n      if (this.__notifications[tag]) {\n        this.__notifications[tag].close();\n      }\n    },\n\n\n    /**\n     * Tell the browser to request permission to display notifications.\n     *\n     * **Note:**\n     *\n     * This needs to be called from within an interactive event handler.\n     */\n    request : function() {\n      if (qx.bom.Notification.getNotification()) {\n        Notification.requestPermission(function (permission) {\n          if (Notification.permission === undefined) {\n            Notification.permission = permission;\n          }\n        });\n      }\n    },\n\n\n    /**\n     * Check if we've the permission to send notifications.\n     *\n     * @return {String} Returns either \"default\", \"denied\" or \"granted\". \"default\"\n     *                  indicates that we need to call <code>request()</code>  before\n     *                  a notification can be sent.\n     */\n    getPermission : function() {\n       return qx.bom.Notification.getNotification() ? Notification.permission : \"denied\";\n    }\n\n  },\n\n\n  defer : function (statics) {\n    qx.core.Environment.add(\"html.notification\", statics.getNotification);\n  }\n});\n"
  ]
}