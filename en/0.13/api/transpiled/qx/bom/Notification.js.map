{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "getNotification",
    "window",
    "Notification",
    "undefined",
    "construct",
    "__notifications",
    "events",
    "appear",
    "click",
    "close",
    "members",
    "__lastId",
    "show",
    "title",
    "message",
    "icon",
    "expire",
    "tag",
    "bom",
    "permission",
    "_show",
    "that",
    "requestPermission",
    "lang",
    "locale",
    "Manager",
    "getInstance",
    "getLocale",
    "replace",
    "rm",
    "util",
    "ResourceManager",
    "source",
    "AliasManager",
    "resolve",
    "has",
    "toUri",
    "Environment",
    "get",
    "notification",
    "body",
    "onshow",
    "fireDataEvent",
    "onclose",
    "onclick",
    "onerror",
    "event",
    "Timer",
    "once",
    "request",
    "getPermission",
    "defer",
    "add"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/Notification.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   Authors:\n     * Cajus Pollmeier (cajus)\n\n************************************************************************ */\n\n/**\n * This class offers a constant API over the Notification Spec:\n * http://www.w3.org/TR/notifications/\n *\n * It forwards all the browsers support if supported.\n *\n * *Example*\n *\n * <pre class=\"javascript\">\n * var notifications = qx.bom.Notification.getInstance();\n *\n * var button = new qx.ui.form.Button(\"Notify me!\");\n * button.addListener(\"execute\", function() {\n *   notifications.show(\"Information\", \"Hey there!\", \"icon/64/status/dialog-information.png\", 5000);\n * });\n *\n * // Enable button if supported\n * button.setEnabled(qx.core.Environment.get(\"html.notification\"));\n *\n * </pre>\n *\n * **Note**\n *\n * A notification can only be sent if the user allows these notifications to\n * be shown. <code>qx.bom.Notification</code> automatically tries to\n * trigger a browser dialog which asks the user for permission.\n *\n * But there is a restriction: the dialog will only show up if it is triggered\n * by code that is running inside a request handler for an interactive browser\n * event like a mouse click or a keyboard interaction.\n *\n * For real life applications this means that you may add a <code>request()</code>\n * call i.e. to your applications login button to let the browser ask for\n * permission initially. After that happened and the user decided to\n * accept these notifications, they can be sent any time without the\n * need to be inside of event handlers.\n *\n * @ignore(Notification.requestPermission,Notification,Notification.permission)\n */\nqx.Class.define(\"qx.bom.Notification\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Whether the client supports the desktop notification API.\n     *\n     * @internal\n     * @return {Boolean} <code>true</code> if notification API is supported\n     */\n    getNotification() {\n      return window.Notification !== undefined;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * This is a singleton. Use <code>getInstance()</code> to get an instance.\n   */\n  construct() {\n    super();\n    this.__notifications = {};\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Event fired when a notification with data <code>tag</code> appeared.\n     */\n    appear: \"Data\",\n\n    /**\n     * Event fired when a notification with data <code>tag</code> has been\n     * clicked by the user.\n     */\n    click: \"Data\",\n\n    /**\n     * Event fired when a notification with data <code>tag</code> has been\n     * closed. This may happen either interactively or due to a timeout\n     * defined by the instance displaying the notification.\n     */\n    close: \"Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __notifications: null,\n    __lastId: 0,\n\n    /**\n     * Display a desktop notification using a _title_, _message_ and _icon_.\n     *\n     * @param title {String} The notification title\n     * @param message {String} The message body\n     * @param icon {String} Resource string or icon URL\n     * @param expire {Number} Number of milliseconds after the message is\n     *                     automatically destroyed. Leave empty for no\n     *                     timeout. Note that some notification systems\n     *                     tend to remove timeout-less messages after some\n     *                     time.\n     * @param tag {String} Multiple messages with the same tag replace each\n     *                     other. Leave blank for automatic tag handling.\n     * @return {String} Notification tag\n     */\n    show(title, message, icon, expire, tag) {\n      if (qx.bom.Notification.getNotification()) {\n        // Generate unique tag to be able to identify the\n        // notification later on.\n        if (tag !== undefined) {\n          tag = \"id\" + this.__lastId++;\n        }\n\n        // If we've the permission already, just send it\n        if (Notification.permission == \"granted\") {\n          this._show(tag, title, message, icon, expire);\n\n          // We've not asked for permission yet. Lets do it.\n        } else if (Notification.permission != \"denied\") {\n          var that = this;\n          Notification.requestPermission(function (permission) {\n            if (Notification.permission === undefined) {\n              Notification.permission = permission;\n            }\n\n            if (permission == \"granted\") {\n              that._show(tag, title, message, icon, expire);\n            }\n          });\n        }\n      }\n\n      return tag === undefined ? null : tag;\n    },\n\n    /**\n     * Display a desktop notification using a _title_, _message_ and _icon_.\n     *\n     * @internal\n     * @param tag {String} Notification tag\n     * @param title {String} The notification title\n     * @param message {String} The message body\n     * @param icon {String} Resource string or icon URL\n     * @param expire {Unsigned} Number of milliseconds after the message is\n     *                     automatically destroyed. Leave empty for no\n     *                     timeout. Note that some notification systems\n     *                     tend to remove timeout-less messages after some\n     *                     time.\n     */\n    _show(tag, title, message, icon, expire) {\n      var lang = qx.locale.Manager.getInstance()\n        .getLocale()\n        .replace(/_.*$/, \"\");\n\n      // Resolve icon path if needed and possible\n      if (icon) {\n        var rm = qx.util.ResourceManager.getInstance();\n        var source = qx.util.AliasManager.getInstance().resolve(icon);\n        if (rm.has(source)) {\n          icon = rm.toUri(source);\n        }\n\n        // old versions of firefox did not display the notification if\n        // an icon was specified, so we disable the icon for firefox\n        // < version 46\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"gecko\" &&\n          qx.core.Environment.get(\"browser.version\") < 46\n        ) {\n          icon = undefined;\n        }\n      }\n\n      var notification = new Notification(title, {\n        body: message,\n        tag: tag,\n        icon: icon,\n        lang: lang\n      });\n\n      var that = this;\n      notification.onshow = function () {\n        that.__notifications[tag] = notification;\n        that.fireDataEvent(\"appear\", tag);\n      };\n      notification.onclose = function () {\n        that.fireDataEvent(\"close\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n      notification.onclick = function () {\n        that.fireDataEvent(\"click\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n      notification.onerror = function () {\n        that.fireDataEvent(\"error\", tag);\n        if (that.__notifications[tag]) {\n          that.__notifications[tag] = null;\n          delete that.__notifications[tag];\n        }\n      };\n\n      // Install expire timer if exists\n      if (expire) {\n        qx.event.Timer.once(\n          function () {\n            notification.close();\n          },\n          this,\n          expire\n        );\n      }\n    },\n\n    /**\n     * Actively close an active notification.\n     *\n     * @param tag {String} Notification tag\n     */\n    close(tag) {\n      if (this.__notifications[tag]) {\n        this.__notifications[tag].close();\n      }\n    },\n\n    /**\n     * Tell the browser to request permission to display notifications.\n     *\n     * **Note:**\n     *\n     * This needs to be called from within an interactive event handler.\n     */\n    request() {\n      if (qx.bom.Notification.getNotification()) {\n        Notification.requestPermission(function (permission) {\n          if (Notification.permission === undefined) {\n            Notification.permission = permission;\n          }\n        });\n      }\n    },\n\n    /**\n     * Check if we've the permission to send notifications.\n     *\n     * @return {String} Returns either \"default\", \"denied\" or \"granted\". \"default\"\n     *                  indicates that we need to call <code>request()</code>  before\n     *                  a notification can be sent.\n     */\n    getPermission() {\n      return qx.bom.Notification.getNotification()\n        ? Notification.permission\n        : \"denied\";\n    }\n  },\n\n  defer(statics) {\n    qx.core.Environment.add(\"html.notification\", statics.getNotification);\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,qBAAhB,EAAuC;IACrCC,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADqB;IAErCC,IAAI,EAAE,WAF+B;;IAIrC;AACF;AACA;AACA;AACA;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,eAPO,6BAOW;QAChB,OAAOC,MAAM,CAACC,YAAP,KAAwBC,SAA/B;MACD;IATM,CAV4B;;IAsBrC;AACF;AACA;AACA;AACA;;IAEE;AACF;AACA;IACEC,SA/BqC,uBA+BzB;MACV;MACA,KAAKC,SAAL,GAAuB,EAAvB;IACD,CAlCoC;;IAoCrC;AACF;AACA;AACA;AACA;IAEEC,MAAM,EAAE;MACN;AACJ;AACA;MACIC,MAAM,EAAE,MAJF;;MAMN;AACJ;AACA;AACA;MACIC,KAAK,EAAE,MAVD;;MAYN;AACJ;AACA;AACA;AACA;MACIC,KAAK,EAAE;IAjBD,CA1C6B;;IA8DrC;AACF;AACA;AACA;AACA;IAEEC,OAAO,EAAE;MACPL,SAAe,EAAE,IADV;MAEPM,SAAQ,EAAE,CAFH;;MAIP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAnBO,gBAmBFC,KAnBE,EAmBKC,OAnBL,EAmBcC,IAnBd,EAmBoBC,MAnBpB,EAmB4BC,GAnB5B,EAmBiC;QACtC,IAAI5B,EAAE,CAAC6B,GAAH,CAAOhB,YAAP,CAAoBF,eAApB,EAAJ,EAA2C;UACzC;UACA;UACA,IAAIiB,GAAG,KAAKd,SAAZ,EAAuB;YACrBc,GAAG,GAAG,OAAO,KAAKN,SAAL,EAAb;UACD,CALwC,CAOzC;;;UACA,IAAIT,YAAY,CAACiB,UAAb,IAA2B,SAA/B,EAA0C;YACxC,KAAKC,KAAL,CAAWH,GAAX,EAAgBJ,KAAhB,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,MAAtC,EADwC,CAGxC;;UACD,CAJD,MAIO,IAAId,YAAY,CAACiB,UAAb,IAA2B,QAA/B,EAAyC;YAC9C,IAAIE,IAAI,GAAG,IAAX;YACAnB,YAAY,CAACoB,iBAAb,CAA+B,UAAUH,UAAV,EAAsB;cACnD,IAAIjB,YAAY,CAACiB,UAAb,KAA4BhB,SAAhC,EAA2C;gBACzCD,YAAY,CAACiB,UAAb,GAA0BA,UAA1B;cACD;;cAED,IAAIA,UAAU,IAAI,SAAlB,EAA6B;gBAC3BE,IAAI,CAACD,KAAL,CAAWH,GAAX,EAAgBJ,KAAhB,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,MAAtC;cACD;YACF,CARD;UASD;QACF;;QAED,OAAOC,GAAG,KAAKd,SAAR,GAAoB,IAApB,GAA2Bc,GAAlC;MACD,CA/CM;;MAiDP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,KA/DO,iBA+DDH,GA/DC,EA+DIJ,KA/DJ,EA+DWC,OA/DX,EA+DoBC,IA/DpB,EA+D0BC,MA/D1B,EA+DkC;QACvC,IAAIO,IAAI,GAAGlC,EAAE,CAACmC,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GACRC,SADQ,GAERC,OAFQ,CAEA,MAFA,EAEQ,EAFR,CAAX,CADuC,CAKvC;;QACA,IAAIb,IAAJ,EAAU;UACR,IAAIc,EAAE,GAAGxC,EAAE,CAACyC,IAAH,CAAQC,eAAR,CAAwBL,WAAxB,EAAT;UACA,IAAIM,MAAM,GAAG3C,EAAE,CAACyC,IAAH,CAAQG,YAAR,CAAqBP,WAArB,GAAmCQ,OAAnC,CAA2CnB,IAA3C,CAAb;;UACA,IAAIc,EAAE,CAACM,GAAH,CAAOH,MAAP,CAAJ,EAAoB;YAClBjB,IAAI,GAAGc,EAAE,CAACO,KAAH,CAASJ,MAAT,CAAP;UACD,CALO,CAOR;UACA;UACA;;;UACA,IACE3C,EAAE,CAACO,IAAH,CAAQyC,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,OAA1C,IACAjD,EAAE,CAACO,IAAH,CAAQyC,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,IAA6C,EAF/C,EAGE;YACAvB,IAAI,GAAGZ,SAAP;UACD;QACF;;QAED,IAAIoC,YAAY,GAAG,IAAIrC,YAAJ,CAAiBW,KAAjB,EAAwB;UACzC2B,IAAI,EAAE1B,OADmC;UAEzCG,GAAG,EAAEA,GAFoC;UAGzCF,IAAI,EAAEA,IAHmC;UAIzCQ,IAAI,EAAEA;QAJmC,CAAxB,CAAnB;QAOA,IAAIF,IAAI,GAAG,IAAX;;QACAkB,YAAY,CAACE,MAAb,GAAsB,YAAY;UAChCpB,IAAI,CAAChB,SAAL,CAAqBY,GAArB,IAA4BsB,YAA5B;UACAlB,IAAI,CAACqB,aAAL,CAAmB,QAAnB,EAA6BzB,GAA7B;QACD,CAHD;;QAIAsB,YAAY,CAACI,OAAb,GAAuB,YAAY;UACjCtB,IAAI,CAACqB,aAAL,CAAmB,OAAnB,EAA4BzB,GAA5B;;UACA,IAAII,IAAI,CAAChB,SAAL,CAAqBY,GAArB,CAAJ,EAA+B;YAC7BI,IAAI,CAAChB,SAAL,CAAqBY,GAArB,IAA4B,IAA5B;YACA,OAAOI,IAAI,CAAChB,SAAL,CAAqBY,GAArB,CAAP;UACD;QACF,CAND;;QAOAsB,YAAY,CAACK,OAAb,GAAuB,YAAY;UACjCvB,IAAI,CAACqB,aAAL,CAAmB,OAAnB,EAA4BzB,GAA5B;;UACA,IAAII,IAAI,CAAChB,SAAL,CAAqBY,GAArB,CAAJ,EAA+B;YAC7BI,IAAI,CAAChB,SAAL,CAAqBY,GAArB,IAA4B,IAA5B;YACA,OAAOI,IAAI,CAAChB,SAAL,CAAqBY,GAArB,CAAP;UACD;QACF,CAND;;QAOAsB,YAAY,CAACM,OAAb,GAAuB,YAAY;UACjCxB,IAAI,CAACqB,aAAL,CAAmB,OAAnB,EAA4BzB,GAA5B;;UACA,IAAII,IAAI,CAAChB,SAAL,CAAqBY,GAArB,CAAJ,EAA+B;YAC7BI,IAAI,CAAChB,SAAL,CAAqBY,GAArB,IAA4B,IAA5B;YACA,OAAOI,IAAI,CAAChB,SAAL,CAAqBY,GAArB,CAAP;UACD;QACF,CAND,CAlDuC,CA0DvC;;;QACA,IAAID,MAAJ,EAAY;UACV3B,EAAE,CAACyD,KAAH,CAASC,KAAT,CAAeC,IAAf,CACE,YAAY;YACVT,YAAY,CAAC9B,KAAb;UACD,CAHH,EAIE,IAJF,EAKEO,MALF;QAOD;MACF,CAnIM;;MAqIP;AACJ;AACA;AACA;AACA;MACIP,KA1IO,iBA0IDQ,GA1IC,EA0II;QACT,IAAI,KAAKZ,SAAL,CAAqBY,GAArB,CAAJ,EAA+B;UAC7B,KAAKZ,SAAL,CAAqBY,GAArB,EAA0BR,KAA1B;QACD;MACF,CA9IM;;MAgJP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIwC,OAvJO,qBAuJG;QACR,IAAI5D,EAAE,CAAC6B,GAAH,CAAOhB,YAAP,CAAoBF,eAApB,EAAJ,EAA2C;UACzCE,YAAY,CAACoB,iBAAb,CAA+B,UAAUH,UAAV,EAAsB;YACnD,IAAIjB,YAAY,CAACiB,UAAb,KAA4BhB,SAAhC,EAA2C;cACzCD,YAAY,CAACiB,UAAb,GAA0BA,UAA1B;YACD;UACF,CAJD;QAKD;MACF,CA/JM;;MAiKP;AACJ;AACA;AACA;AACA;AACA;AACA;MACI+B,aAxKO,2BAwKS;QACd,OAAO7D,EAAE,CAAC6B,GAAH,CAAOhB,YAAP,CAAoBF,eAApB,KACHE,YAAY,CAACiB,UADV,GAEH,QAFJ;MAGD;IA5KM,CApE4B;IAmPrCgC,KAnPqC,iBAmP/BpD,OAnP+B,EAmPtB;MACbV,EAAE,CAACO,IAAH,CAAQyC,WAAR,CAAoBe,GAApB,CAAwB,mBAAxB,EAA6CrD,OAAO,CAACC,eAArD;IACD;EArPoC,CAAvC;EArDAX,EAAE,CAAC6B,GAAH,CAAOhB,YAAP,CAAoBV,aAApB,GAAoCA,aAApC"
}