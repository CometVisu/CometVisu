{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "getWidth",
    "element",
    "rect",
    "getBoundingClientRect",
    "Math",
    "round",
    "right",
    "left",
    "getHeight",
    "bottom",
    "top",
    "getSize",
    "width",
    "height",
    "getOuterHeight",
    "includeMargins",
    "marginTop",
    "parseInt",
    "document",
    "defaultView",
    "getComputedStyle",
    "getPropertyValue",
    "marginBottom",
    "offsetHeight",
    "getOuterWidth",
    "marginLeft",
    "marginRight",
    "offsetWidth",
    "getOuterSize",
    "__hiddenScrollbars",
    "visible",
    "hidden",
    "getContentWidth",
    "Style",
    "bom",
    "overflowX",
    "get",
    "paddingLeft",
    "paddingRight",
    "contentWidth",
    "clientWidth",
    "core",
    "Environment",
    "dom",
    "Node",
    "isBlockNode",
    "scrollWidth",
    "max",
    "getContentHeight",
    "overflowY",
    "paddingTop",
    "paddingBottom",
    "clientHeight",
    "scrollHeight",
    "getContentSize",
    "Dimension"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/element/Dimension.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Contains support for calculating dimensions of HTML elements.\n *\n * We differ between the box (or border) size which is available via\n * {@link #getWidth} and {@link #getHeight} and the content or scroll\n * sizes which are available via {@link #getContentWidth} and\n * {@link #getContentHeight}.\n */\nqx.Bootstrap.define(\"qx.bom.element.Dimension\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Returns the rendered width of the given element.\n     *\n     * This is the visible width of the object, which need not to be identical\n     * to the width configured via CSS. This highly depends on the current\n     * box-sizing for the document and maybe even for the element.\n     *\n     * @signature function(element)\n     * @param element {Element} element to query\n     * @return {Integer} width of the element\n     */\n    getWidth(element) {\n      var rect = element.getBoundingClientRect();\n      return Math.round(rect.right - rect.left);\n    },\n\n    /**\n     * Returns the rendered height of the given element.\n     *\n     * This is the visible height of the object, which need not to be identical\n     * to the height configured via CSS. This highly depends on the current\n     * box-sizing for the document and maybe even for the element.\n     *\n     * @signature function(element)\n     * @param element {Element} element to query\n     * @return {Integer} height of the element\n     */\n    getHeight(element) {\n      var rect = element.getBoundingClientRect();\n      return Math.round(rect.bottom - rect.top);\n    },\n\n    /**\n     * Returns the rendered size of the given element.\n     *\n     * @param element {Element} element to query\n     * @return {Map} map containing the width and height of the element\n     */\n    getSize(element) {\n      return {\n        width: this.getWidth(element),\n        height: this.getHeight(element)\n      };\n    },\n\n    /**\n     * Returns the outer height of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Integer} the height of the element\n     */\n    getOuterHeight(element, includeMargins) {\n      if (includeMargins) {\n        let marginTop = parseInt(\n          document.defaultView\n            .getComputedStyle(element, \"\")\n            .getPropertyValue(\"margin-top\"),\n          10\n        );\n\n        let marginBottom = parseInt(\n          document.defaultView\n            .getComputedStyle(element, \"\")\n            .getPropertyValue(\"margin-bottom\"),\n          10\n        );\n\n        return element.offsetHeight + marginTop + marginBottom;\n      }\n      return element.offsetHeight;\n    },\n\n    /**\n     * Returns the outer width of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Integer} the width of the element\n     */\n    getOuterWidth(element, includeMargins) {\n      if (includeMargins) {\n        let marginLeft = parseInt(\n          document.defaultView\n            .getComputedStyle(element, \"\")\n            .getPropertyValue(\"margin-left\"),\n          10\n        );\n\n        let marginRight = parseInt(\n          document.defaultView\n            .getComputedStyle(element, \"\")\n            .getPropertyValue(\"margin-right\"),\n          10\n        );\n\n        return element.offsetWidth + marginLeft + marginRight;\n      }\n      return element.offsetWidth;\n    },\n\n    /**\n     * Returns the outer size of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Map} map containing the width and height of the element\n     */\n    getOuterSize(element, includeMargins) {\n      return {\n        width: this.getOuterWidth(element, includeMargins),\n        height: this.getOuterHeight(element, includeMargins)\n      };\n    },\n\n    /** @type {Map} Contains all overflow values where scrollbars are invisible */\n    __hiddenScrollbars: {\n      visible: true,\n      hidden: true\n    },\n\n    /**\n     * Returns the content width.\n     *\n     * The content width is basically the maximum\n     * width used or the maximum width which can be used by the content. This\n     * excludes all kind of styles of the element like borders, paddings, margins,\n     * and even scrollbars.\n     *\n     * Please note that with visible scrollbars the content width returned\n     * may be larger than the box width returned via {@link #getWidth}.\n     *\n     * @param element {Element} element to query\n     * @return {Integer} Computed content width\n     */\n    getContentWidth(element) {\n      var Style = qx.bom.element.Style;\n\n      var overflowX = qx.bom.element.Style.get(element, \"overflowX\");\n      var paddingLeft = parseInt(\n        Style.get(element, \"paddingLeft\") || \"0px\",\n        10\n      );\n\n      var paddingRight = parseInt(\n        Style.get(element, \"paddingRight\") || \"0px\",\n        10\n      );\n\n      if (this.__hiddenScrollbars[overflowX]) {\n        var contentWidth = element.clientWidth;\n\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"opera\" ||\n          qx.dom.Node.isBlockNode(element)\n        ) {\n          contentWidth = contentWidth - paddingLeft - paddingRight;\n        }\n\n        // IE seems to return 0 on clientWidth if the element is 0px\n        // in height so we use the offsetWidth instead\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n          if (contentWidth === 0 && element.offsetHeight === 0) {\n            return element.offsetWidth;\n          }\n        }\n\n        return contentWidth;\n      } else {\n        if (element.clientWidth >= element.scrollWidth) {\n          // Scrollbars visible, but not needed? We need to substract both paddings\n          return (\n            Math.max(element.clientWidth, element.scrollWidth) -\n            paddingLeft -\n            paddingRight\n          );\n        } else {\n          // Scrollbars visible and needed. We just remove the left padding,\n          // as the right padding is not respected in rendering.\n          var width = element.scrollWidth - paddingLeft;\n\n          // IE renders the paddingRight as well with scrollbars on\n          if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n            width -= paddingRight;\n          }\n\n          return width;\n        }\n      }\n    },\n\n    /**\n     * Returns the content height.\n     *\n     * The content height is basically the maximum\n     * height used or the maximum height which can be used by the content. This\n     * excludes all kind of styles of the element like borders, paddings, margins,\n     * and even scrollbars.\n     *\n     * Please note that with visible scrollbars the content height returned\n     * may be larger than the box height returned via {@link #getHeight}.\n     *\n     * @param element {Element} element to query\n     * @return {Integer} Computed content height\n     */\n    getContentHeight(element) {\n      var Style = qx.bom.element.Style;\n\n      var overflowY = qx.bom.element.Style.get(element, \"overflowY\");\n      var paddingTop = parseInt(Style.get(element, \"paddingTop\") || \"0px\", 10);\n      var paddingBottom = parseInt(\n        Style.get(element, \"paddingBottom\") || \"0px\",\n        10\n      );\n\n      if (this.__hiddenScrollbars[overflowY]) {\n        return element.clientHeight - paddingTop - paddingBottom;\n      } else {\n        if (element.clientHeight >= element.scrollHeight) {\n          // Scrollbars visible, but not needed? We need to substract both paddings\n          return (\n            Math.max(element.clientHeight, element.scrollHeight) -\n            paddingTop -\n            paddingBottom\n          );\n        } else {\n          // Scrollbars visible and needed. We just remove the top padding,\n          // as the bottom padding is not respected in rendering.\n          return element.scrollHeight - paddingTop;\n        }\n      }\n    },\n\n    /**\n     * Returns the rendered content size of the given element.\n     *\n     * @param element {Element} element to query\n     * @return {Map} map containing the content width and height of the element\n     */\n    getContentSize(element) {\n      return {\n        width: this.getContentWidth(element),\n        height: this.getContentHeight(element)\n      };\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}