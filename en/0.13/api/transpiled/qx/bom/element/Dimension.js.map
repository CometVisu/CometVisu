{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "getWidth",
    "element",
    "rect",
    "getBoundingClientRect",
    "Math",
    "round",
    "right",
    "left",
    "getHeight",
    "bottom",
    "top",
    "getSize",
    "width",
    "height",
    "getOuterHeight",
    "includeMargins",
    "marginTop",
    "parseInt",
    "document",
    "defaultView",
    "getComputedStyle",
    "getPropertyValue",
    "marginBottom",
    "offsetHeight",
    "getOuterWidth",
    "marginLeft",
    "marginRight",
    "offsetWidth",
    "getOuterSize",
    "__hiddenScrollbars",
    "visible",
    "hidden",
    "getContentWidth",
    "Style",
    "bom",
    "overflowX",
    "get",
    "paddingLeft",
    "paddingRight",
    "contentWidth",
    "clientWidth",
    "core",
    "Environment",
    "dom",
    "Node",
    "isBlockNode",
    "scrollWidth",
    "max",
    "getContentHeight",
    "overflowY",
    "paddingTop",
    "paddingBottom",
    "clientHeight",
    "scrollHeight",
    "getContentSize",
    "Dimension"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/element/Dimension.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Contains support for calculating dimensions of HTML elements.\n *\n * We differ between the box (or border) size which is available via\n * {@link #getWidth} and {@link #getHeight} and the content or scroll\n * sizes which are available via {@link #getContentWidth} and\n * {@link #getContentHeight}.\n */\nqx.Bootstrap.define(\"qx.bom.element.Dimension\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Returns the rendered width of the given element.\n     *\n     * This is the visible width of the object, which need not to be identical\n     * to the width configured via CSS. This highly depends on the current\n     * box-sizing for the document and maybe even for the element.\n     *\n     * @signature function(element)\n     * @param element {Element} element to query\n     * @return {Integer} width of the element\n     */\n    getWidth(element) {\n      var rect = element.getBoundingClientRect();\n      return Math.round(rect.right - rect.left);\n    },\n\n    /**\n     * Returns the rendered height of the given element.\n     *\n     * This is the visible height of the object, which need not to be identical\n     * to the height configured via CSS. This highly depends on the current\n     * box-sizing for the document and maybe even for the element.\n     *\n     * @signature function(element)\n     * @param element {Element} element to query\n     * @return {Integer} height of the element\n     */\n    getHeight(element) {\n      var rect = element.getBoundingClientRect();\n      return Math.round(rect.bottom - rect.top);\n    },\n\n    /**\n     * Returns the rendered size of the given element.\n     *\n     * @param element {Element} element to query\n     * @return {Map} map containing the width and height of the element\n     */\n    getSize(element) {\n      return {\n        width: this.getWidth(element),\n        height: this.getHeight(element)\n      };\n    },\n\n    /**\n     * Returns the outer height of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Integer} the height of the element\n     */\n    getOuterHeight(element, includeMargins) {\n      if (includeMargins) {\n        let marginTop = parseInt(\n          document.defaultView\n            .getComputedStyle(element, \"\")\n            .getPropertyValue(\"margin-top\"),\n          10\n        );\n\n        let marginBottom = parseInt(\n          document.defaultView\n            .getComputedStyle(element, \"\")\n            .getPropertyValue(\"margin-bottom\"),\n          10\n        );\n\n        return element.offsetHeight + marginTop + marginBottom;\n      }\n      return element.offsetHeight;\n    },\n\n    /**\n     * Returns the outer width of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Integer} the width of the element\n     */\n    getOuterWidth(element, includeMargins) {\n      if (includeMargins) {\n        let marginLeft = parseInt(\n          document.defaultView\n            .getComputedStyle(element, \"\")\n            .getPropertyValue(\"margin-left\"),\n          10\n        );\n\n        let marginRight = parseInt(\n          document.defaultView\n            .getComputedStyle(element, \"\")\n            .getPropertyValue(\"margin-right\"),\n          10\n        );\n\n        return element.offsetWidth + marginLeft + marginRight;\n      }\n      return element.offsetWidth;\n    },\n\n    /**\n     * Returns the outer size of the given element, including height, vertical padding, and vertical borders\n     *\n     * @param element {Element} element to query\n     * @param includeMargins {Boolean?} whether to include margins in teh\n     * @return {Map} map containing the width and height of the element\n     */\n    getOuterSize(element, includeMargins) {\n      return {\n        width: this.getOuterWidth(element, includeMargins),\n        height: this.getOuterHeight(element, includeMargins)\n      };\n    },\n\n    /** @type {Map} Contains all overflow values where scrollbars are invisible */\n    __hiddenScrollbars: {\n      visible: true,\n      hidden: true\n    },\n\n    /**\n     * Returns the content width.\n     *\n     * The content width is basically the maximum\n     * width used or the maximum width which can be used by the content. This\n     * excludes all kind of styles of the element like borders, paddings, margins,\n     * and even scrollbars.\n     *\n     * Please note that with visible scrollbars the content width returned\n     * may be larger than the box width returned via {@link #getWidth}.\n     *\n     * @param element {Element} element to query\n     * @return {Integer} Computed content width\n     */\n    getContentWidth(element) {\n      var Style = qx.bom.element.Style;\n\n      var overflowX = qx.bom.element.Style.get(element, \"overflowX\");\n      var paddingLeft = parseInt(\n        Style.get(element, \"paddingLeft\") || \"0px\",\n        10\n      );\n\n      var paddingRight = parseInt(\n        Style.get(element, \"paddingRight\") || \"0px\",\n        10\n      );\n\n      if (this.__hiddenScrollbars[overflowX]) {\n        var contentWidth = element.clientWidth;\n\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"opera\" ||\n          qx.dom.Node.isBlockNode(element)\n        ) {\n          contentWidth = contentWidth - paddingLeft - paddingRight;\n        }\n\n        // IE seems to return 0 on clientWidth if the element is 0px\n        // in height so we use the offsetWidth instead\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n          if (contentWidth === 0 && element.offsetHeight === 0) {\n            return element.offsetWidth;\n          }\n        }\n\n        return contentWidth;\n      } else {\n        if (element.clientWidth >= element.scrollWidth) {\n          // Scrollbars visible, but not needed? We need to substract both paddings\n          return (\n            Math.max(element.clientWidth, element.scrollWidth) -\n            paddingLeft -\n            paddingRight\n          );\n        } else {\n          // Scrollbars visible and needed. We just remove the left padding,\n          // as the right padding is not respected in rendering.\n          var width = element.scrollWidth - paddingLeft;\n\n          // IE renders the paddingRight as well with scrollbars on\n          if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n            width -= paddingRight;\n          }\n\n          return width;\n        }\n      }\n    },\n\n    /**\n     * Returns the content height.\n     *\n     * The content height is basically the maximum\n     * height used or the maximum height which can be used by the content. This\n     * excludes all kind of styles of the element like borders, paddings, margins,\n     * and even scrollbars.\n     *\n     * Please note that with visible scrollbars the content height returned\n     * may be larger than the box height returned via {@link #getHeight}.\n     *\n     * @param element {Element} element to query\n     * @return {Integer} Computed content height\n     */\n    getContentHeight(element) {\n      var Style = qx.bom.element.Style;\n\n      var overflowY = qx.bom.element.Style.get(element, \"overflowY\");\n      var paddingTop = parseInt(Style.get(element, \"paddingTop\") || \"0px\", 10);\n      var paddingBottom = parseInt(\n        Style.get(element, \"paddingBottom\") || \"0px\",\n        10\n      );\n\n      if (this.__hiddenScrollbars[overflowY]) {\n        return element.clientHeight - paddingTop - paddingBottom;\n      } else {\n        if (element.clientHeight >= element.scrollHeight) {\n          // Scrollbars visible, but not needed? We need to substract both paddings\n          return (\n            Math.max(element.clientHeight, element.scrollHeight) -\n            paddingTop -\n            paddingBottom\n          );\n        } else {\n          // Scrollbars visible and needed. We just remove the top padding,\n          // as the bottom padding is not respected in rendering.\n          return element.scrollHeight - paddingTop;\n        }\n      }\n    },\n\n    /**\n     * Returns the rendered content size of the given element.\n     *\n     * @param element {Element} element to query\n     * @return {Map} map containing the content width and height of the element\n     */\n    getContentSize(element) {\n      return {\n        width: this.getContentWidth(element),\n        height: this.getContentHeight(element)\n      };\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}