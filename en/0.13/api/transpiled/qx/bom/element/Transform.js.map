{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__cssKeys",
    "core",
    "Environment",
    "get",
    "transform",
    "el",
    "transforms",
    "transformCss",
    "getTransformValue",
    "style",
    "translate",
    "value",
    "scale",
    "rotate",
    "skew",
    "getCss",
    "bom",
    "Style",
    "getCssName",
    "setOrigin",
    "getOrigin",
    "setStyle",
    "getStyle",
    "setPerspective",
    "getPerspective",
    "setPerspectiveOrigin",
    "getPerspectiveOrigin",
    "valueX",
    "valueY",
    "setBackfaceVisibility",
    "getBackfaceVisibility",
    "properties3d",
    "property",
    "params",
    "isArray",
    "length",
    "indexOf",
    "_compute3dProperty",
    "_computeAxisProperties",
    "trim",
    "cssValue",
    "i",
    "join",
    "dimensions",
    "element",
    "Transform"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/element/Transform.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This class is responsible for applying CSS3 transforms to plain DOM elements.\n * The implementation is mostly a cross browser wrapper for applying the\n * transforms.\n * The API is keep to the spec as close as possible.\n *\n * http://www.w3.org/TR/css3-3d-transforms/\n */\nqx.Bootstrap.define(\"qx.bom.element.Transform\", {\n  statics: {\n    /** Internal storage of the CSS names */\n    __cssKeys: qx.core.Environment.get(\"css.transform\"),\n\n    /**\n     * Method to apply multiple transforms at once to the given element. It\n     * takes a map containing the transforms you want to apply plus the values\n     * e.g.<code>{scale: 2, rotate: \"5deg\"}</code>.\n     * The values can be either singular, which means a single value will\n     * be added to the CSS. If you give an array, the values will be split up\n     * and each array entry will be used for the X, Y or Z dimension in that\n     * order e.g. <code>{scale: [2, 0.5]}</code> will result in a element\n     * double the size in X direction and half the size in Y direction.\n     * The values can be either singular, which means a single value will\n     * be added to the CSS. If you give an array, the values will be join to\n     * a string.\n     * 3d suffixed properties will be taken for translate and scale if they are\n     * available and an array with three values is given.\n     * Make sure your browser supports all transformations you apply.\n     *\n     * @param el {Element} The element to apply the transformation.\n     * @param transforms {Map} The map containing the transforms and value.\n     */\n    transform(el, transforms) {\n      var transformCss = this.getTransformValue(transforms);\n      if (this.__cssKeys != null) {\n        var style = this.__cssKeys[\"name\"];\n        el.style[style] = transformCss;\n      }\n    },\n\n    /**\n     * Translates the given element by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     * @param el {Element} The element to apply the transformation.\n     * @param value {String|Array} The value to translate e.g. <code>\"10px\"</code>.\n     */\n    translate(el, value) {\n      this.transform(el, { translate: value });\n    },\n\n    /**\n     * Scales the given element by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     * @param el {Element} The element to apply the transformation.\n     * @param value {Number|Array} The value to scale.\n     */\n    scale(el, value) {\n      this.transform(el, { scale: value });\n    },\n\n    /**\n     * Rotates the given element by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     * @param el {Element} The element to apply the transformation.\n     * @param value {String|Array} The value to rotate e.g. <code>\"90deg\"</code>.\n     */\n    rotate(el, value) {\n      this.transform(el, { rotate: value });\n    },\n\n    /**\n     * Skews the given element by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     * @param el {Element} The element to apply the transformation.\n     * @param value {String|Array} The value to skew e.g. <code>\"90deg\"</code>.\n     */\n    skew(el, value) {\n      this.transform(el, { skew: value });\n    },\n\n    /**\n     * Converts the given map to a string which could be added to a css\n     * stylesheet.\n     * @param transforms {Map} The transforms map. For a detailed description,\n     * take a look at the {@link #transform} method.\n     * @return {String} The CSS value.\n     */\n    getCss(transforms) {\n      var transformCss = this.getTransformValue(transforms);\n      if (this.__cssKeys != null) {\n        var style = this.__cssKeys[\"name\"];\n        return qx.bom.Style.getCssName(style) + \":\" + transformCss + \";\";\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the transform-origin property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {String} CSS position values like <code>50% 50%</code> or\n     *   <code>left top</code>.\n     */\n    setOrigin(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"origin\"]] = value;\n      }\n    },\n\n    /**\n     * Returns the transform-origin property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\n     * @param el {Element} The dom element to read the property.\n     * @return {String} The set property, e.g. <code>50% 50%</code>\n     */\n    getOrigin(el) {\n      if (this.__cssKeys != null) {\n        return el.style[this.__cssKeys[\"origin\"]];\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the transform-style property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {String} Either <code>flat</code> or <code>preserve-3d</code>.\n     */\n    setStyle(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"style\"]] = value;\n      }\n    },\n\n    /**\n     * Returns the transform-style property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\n     * @param el {Element} The dom element to read the property.\n     * @return {String} The set property, either <code>flat</code> or\n     *   <code>preserve-3d</code>.\n     */\n    getStyle(el) {\n      if (this.__cssKeys != null) {\n        return el.style[this.__cssKeys[\"style\"]];\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the perspective property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {Number} The perspective layer. Numbers between 100\n     *   and 5000 give the best results.\n     */\n    setPerspective(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"perspective\"]] = value + \"px\";\n      }\n    },\n\n    /**\n     * Returns the perspective property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property\n     * @param el {Element} The dom element to read the property.\n     * @return {String} The set property, e.g. <code>500</code>\n     */\n    getPerspective(el) {\n      if (this.__cssKeys != null) {\n        return el.style[this.__cssKeys[\"perspective\"]];\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the perspective-origin property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {String} CSS position values like <code>50% 50%</code> or\n     *   <code>left top</code>.\n     */\n    setPerspectiveOrigin(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"perspective-origin\"]] = value;\n      }\n    },\n\n    /**\n     * Returns the perspective-origin property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\n     * @param el {Element} The dom element to read the property.\n     * @return {String} The set property, e.g. <code>50% 50%</code>\n     */\n    getPerspectiveOrigin(el) {\n      if (this.__cssKeys != null) {\n        var value = el.style[this.__cssKeys[\"perspective-origin\"]];\n        if (value != \"\") {\n          return value;\n        } else {\n          var valueX = el.style[this.__cssKeys[\"perspective-origin\"] + \"X\"];\n          var valueY = el.style[this.__cssKeys[\"perspective-origin\"] + \"Y\"];\n          if (valueX != \"\") {\n            return valueX + \" \" + valueY;\n          }\n        }\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the backface-visibility property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\n     * @param el {Element} The dom element to set the property.\n     * @param value {Boolean} <code>true</code> if the backface should be visible.\n     */\n    setBackfaceVisibility(el, value) {\n      if (this.__cssKeys != null) {\n        el.style[this.__cssKeys[\"backface-visibility\"]] = value\n          ? \"visible\"\n          : \"hidden\";\n      }\n    },\n\n    /**\n     * Returns the backface-visibility property of the given element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\n     * @param el {Element} The dom element to read the property.\n     * @return {Boolean} <code>true</code>, if the backface is visible.\n     */\n    getBackfaceVisibility(el) {\n      if (this.__cssKeys != null) {\n        return el.style[this.__cssKeys[\"backface-visibility\"]] == \"visible\";\n      }\n      return true;\n    },\n\n    /**\n     * Converts the given transforms map to a valid CSS string.\n     *\n     * @param transforms {Map} A map containing the transforms.\n     * @return {String} The CSS transforms.\n     */\n    getTransformValue(transforms) {\n      var value = \"\";\n      var properties3d = [\"translate\", \"scale\"];\n\n      for (var property in transforms) {\n        var params = transforms[property];\n\n        // if an array is given\n        if (qx.Bootstrap.isArray(params)) {\n          // use 3d properties for translate and scale if all 3 parameter are given\n          if (\n            params.length === 3 &&\n            properties3d.indexOf(property) > -1 &&\n            qx.core.Environment.get(\"css.transform.3d\")\n          ) {\n            value += this._compute3dProperty(property, params);\n          }\n\n          // use axis related properties\n          else {\n            value += this._computeAxisProperties(property, params);\n          }\n\n          // case for single values given\n        } else {\n          // single value case\n          value += property + \"(\" + params + \") \";\n        }\n      }\n\n      return value.trim();\n    },\n\n    /**\n     * Helper function to create 3d property.\n     *\n     * @param property {String} Property of transform, e.g. translate\n     * @param params {Array} Array with three values, each one stands for an axis.\n     *\n     * @return {String} Computed property and its value\n     */\n    _compute3dProperty(property, params) {\n      var cssValue = \"\";\n      property += \"3d\";\n\n      for (var i = 0; i < params.length; i++) {\n        if (params[i] == null) {\n          params[i] = 0;\n        }\n      }\n\n      cssValue += property + \"(\" + params.join(\", \") + \") \";\n\n      return cssValue;\n    },\n\n    /**\n     * Helper function to create axis related properties.\n     *\n     * @param property {String} Property of transform, e.g. rotate\n     * @param params {Array} Array with values, each one stands for an axis.\n     *\n     * @return {String} Computed property and its value\n     */\n    _computeAxisProperties(property, params) {\n      var value = \"\";\n      var dimensions = [\"X\", \"Y\", \"Z\"];\n      for (var i = 0; i < params.length; i++) {\n        if (\n          params[i] == null ||\n          (i == 2 && !qx.core.Environment.get(\"css.transform.3d\"))\n        ) {\n          continue;\n        }\n        value += property + dimensions[i] + \"(\";\n        value += params[i];\n        value += \") \";\n      }\n\n      return value;\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}