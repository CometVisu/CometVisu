{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "compile",
    "map",
    "left",
    "top",
    "width",
    "height",
    "right",
    "bottom",
    "get",
    "element",
    "mode",
    "clip",
    "bom",
    "Style",
    "trim",
    "test",
    "result",
    "RegExp",
    "$1",
    "split",
    "parseInt",
    "Error",
    "set",
    "style",
    "reset",
    "Clip"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/element/Clip.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Contains methods to control and query the element's clip property\n *\n * @require(qx.lang.normalize.String)\n */\nqx.Bootstrap.define(\"qx.bom.element.Clip\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Compiles the given clipping into a CSS compatible string. This\n     * is a simple square which describes the visible area of an DOM element.\n     * Changing the clipping does not change the dimensions of\n     * an element.\n     *\n     * @param map {Map}  Map which contains <code>left</code>, <code>top</code>\n     *   <code>width</code> and <code>height</code> of the clipped area.\n     * @return {String} CSS compatible string\n     */\n    compile(map) {\n      if (!map) {\n        return \"clip:auto;\";\n      }\n\n      var left = map.left;\n      var top = map.top;\n      var width = map.width;\n      var height = map.height;\n\n      var right, bottom;\n\n      if (left == null) {\n        right = width == null ? \"auto\" : width + \"px\";\n        left = \"auto\";\n      } else {\n        right = width == null ? \"auto\" : left + width + \"px\";\n        left = left + \"px\";\n      }\n\n      if (top == null) {\n        bottom = height == null ? \"auto\" : height + \"px\";\n        top = \"auto\";\n      } else {\n        bottom = height == null ? \"auto\" : top + height + \"px\";\n        top = top + \"px\";\n      }\n\n      return (\n        \"clip:rect(\" + top + \",\" + right + \",\" + bottom + \",\" + left + \");\"\n      );\n    },\n\n    /**\n     * Gets the clipping of the given element.\n     *\n     * @param element {Element} DOM element to query\n     * @param mode {Number} Choose one of the modes {@link qx.bom.element.Style#COMPUTED_MODE},\n     *   {@link qx.bom.element.Style#CASCADED_MODE}, {@link qx.bom.element.Style#LOCAL_MODE}.\n     *   The computed mode is the default one.\n     * @return {Map} Map which contains <code>left</code>, <code>top</code>\n     *   <code>width</code> and <code>height</code> of the clipped area.\n     *   Each one could be null or any integer value.\n     */\n    get(element, mode) {\n      var clip = qx.bom.element.Style.get(element, \"clip\", mode, false);\n\n      var left, top, width, height;\n      var right, bottom;\n\n      if (typeof clip === \"string\" && clip !== \"auto\" && clip !== \"\") {\n        clip = clip.trim();\n\n        // Do not use \"global\" here. This will break Firefox because of\n        // an issue that the lastIndex will not be reset on separate calls.\n        if (/\\((.*)\\)/.test(clip)) {\n          var result = RegExp.$1;\n\n          // Process result\n          // Some browsers store values space-separated, others comma-separated.\n          // Handle both cases by means of feature-detection.\n          if (/,/.test(result)) {\n            var split = result.split(\",\");\n          } else {\n            var split = result.split(\" \");\n          }\n\n          top = split[0].trim();\n          right = split[1].trim();\n          bottom = split[2].trim();\n          left = split[3].trim();\n\n          // Normalize \"auto\" to null\n          if (left === \"auto\") {\n            left = null;\n          }\n\n          if (top === \"auto\") {\n            top = null;\n          }\n\n          if (right === \"auto\") {\n            right = null;\n          }\n\n          if (bottom === \"auto\") {\n            bottom = null;\n          }\n\n          // Convert to integer values\n          if (top != null) {\n            top = parseInt(top, 10);\n          }\n\n          if (right != null) {\n            right = parseInt(right, 10);\n          }\n\n          if (bottom != null) {\n            bottom = parseInt(bottom, 10);\n          }\n\n          if (left != null) {\n            left = parseInt(left, 10);\n          }\n\n          // Compute width and height\n          if (right != null && left != null) {\n            width = right - left;\n          } else if (right != null) {\n            width = right;\n          }\n\n          if (bottom != null && top != null) {\n            height = bottom - top;\n          } else if (bottom != null) {\n            height = bottom;\n          }\n        } else {\n          throw new Error(\"Could not parse clip string: \" + clip);\n        }\n      }\n\n      // Return map when any value is available.\n      return {\n        left: left || null,\n        top: top || null,\n        width: width || null,\n        height: height || null\n      };\n    },\n\n    /**\n     * Sets the clipping of the given element. This is a simple\n     * square which describes the visible area of an DOM element.\n     * Changing the clipping does not change the dimensions of\n     * an element.\n     *\n     * @param element {Element} DOM element to modify\n     * @param map {Map} A map with one or more of these available keys:\n     *   <code>left</code>, <code>top</code>, <code>width</code>, <code>height</code>.\n     */\n    set(element, map) {\n      if (!map) {\n        element.style.clip = \"rect(auto,auto,auto,auto)\";\n        return;\n      }\n\n      var left = map.left;\n      var top = map.top;\n      var width = map.width;\n      var height = map.height;\n\n      var right, bottom;\n\n      if (left == null) {\n        right = width == null ? \"auto\" : width + \"px\";\n        left = \"auto\";\n      } else {\n        right = width == null ? \"auto\" : left + width + \"px\";\n        left = left + \"px\";\n      }\n\n      if (top == null) {\n        bottom = height == null ? \"auto\" : height + \"px\";\n        top = \"auto\";\n      } else {\n        bottom = height == null ? \"auto\" : top + height + \"px\";\n        top = top + \"px\";\n      }\n\n      element.style.clip =\n        \"rect(\" + top + \",\" + right + \",\" + bottom + \",\" + left + \")\";\n    },\n\n    /**\n     * Resets the clipping of the given DOM element.\n     *\n     * @param element {Element} DOM element to modify\n     */\n    reset(element) {\n      element.style.clip = \"rect(auto, auto, auto, auto)\";\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}