{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__maxStepTime",
    "__units",
    "__transitionKeys",
    "scale",
    "rotate",
    "skew",
    "translate",
    "animate",
    "el",
    "desc",
    "duration",
    "_animate",
    "animateReverse",
    "reverse",
    "$$animation",
    "lang",
    "Object",
    "clone",
    "undefined",
    "keyFrames",
    "keys",
    "__getOrderedKeys",
    "stepTime",
    "__getStepTime",
    "steps",
    "parseInt",
    "__normalizeKeyFrames",
    "delta",
    "__calculateDelta",
    "timing",
    "handle",
    "bom",
    "element",
    "AnimationHandle",
    "jsAnimation",
    "i",
    "initValues",
    "repeatSteps",
    "__applyRepeat",
    "repeat",
    "delay",
    "self",
    "delayId",
    "window",
    "setTimeout",
    "play",
    "__P_140_5",
    "units",
    "percent",
    "name",
    "prefixed",
    "Style",
    "getPropertyName",
    "prefixedName",
    "getCssName",
    "item",
    "__getUnit",
    "frame",
    "style",
    "getComputedStyle",
    "indexOf",
    "__normalizeKeyFrameTransforms",
    "__P_140_9",
    "transforms",
    "transformStyle",
    "Transform",
    "getCss",
    "split",
    "length",
    "replace",
    "__P_140_6",
    "Array",
    "keyIndex",
    "last",
    "next",
    "stepsToNext",
    "Math",
    "floor",
    "calculationIndex",
    "nItem",
    "isArray",
    "j",
    "x",
    "__getNextValue",
    "charAt",
    "value0",
    "util",
    "ColorUtil",
    "cssStringToRgb",
    "value1",
    "stepValue",
    "range",
    "timingX",
    "AnimationFrame",
    "calculateTiming",
    "rgbToHexString",
    "isNaN",
    "parseFloat",
    "__P_140_8",
    "substring",
    "__P_140_10",
    "nextItem",
    "lastItem",
    "emit",
    "id",
    "setInterval",
    "values",
    "get",
    "String",
    "camelCase",
    "AnimationJs",
    "__applyStyles",
    "alternate",
    "stop",
    "animationId",
    "pause",
    "clearInterval",
    "clearTimeout",
    "keep",
    "stopped",
    "ended",
    "__P_140_7",
    "Number",
    "MAX_VALUE",
    "__P_140_11",
    "styles",
    "key",
    "set",
    "__P_140_4",
    "minDiff",
    "min",
    "round",
    "__P_140_3",
    "sort",
    "a",
    "b"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/element/AnimationJs.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This class offers the same API as the CSS3 animation layer in\n * {@link qx.bom.element.AnimationCss} but uses JavaScript to fake the behavior.\n *\n * {@link qx.bom.element.Animation} is the class, which takes care of the\n * feature detection for CSS animations and decides which implementation\n * (CSS or JavaScript) should be used. Most likely, this implementation should\n * be the one to use.\n *\n * @ignore(qx.bom.element.Style.*)\n * @use(qx.bom.element.AnimationJs#play)\n */\nqx.Bootstrap.define(\"qx.bom.element.AnimationJs\", {\n  statics: {\n    /**\n     * The maximal time a frame should take.\n     */\n    __maxStepTime: 30,\n\n    /**\n     * The supported CSS units.\n     */\n    __units: [\"%\", \"in\", \"cm\", \"mm\", \"em\", \"ex\", \"pt\", \"pc\", \"px\"],\n\n    /** The used keys for transforms. */\n    __transitionKeys: {\n      scale: true,\n      rotate: true,\n      skew: true,\n      translate: true\n    },\n\n    /**\n     * This is the main function to start the animation. For further details,\n     * take a look at the documentation of the wrapper\n     * {@link qx.bom.element.Animation}.\n     * @param el {Element} The element to animate.\n     * @param desc {Map} Animation description.\n     * @param duration {Integer?} The duration of the animation which will\n     *   override the duration given in the description.\n     * @return {qx.bom.element.AnimationHandle} The handle.\n     */\n    animate(el, desc, duration) {\n      return this._animate(el, desc, duration, false);\n    },\n\n    /**\n     * This is the main function to start the animation in reversed mode.\n     * For further details, take a look at the documentation of the wrapper\n     * {@link qx.bom.element.Animation}.\n     * @param el {Element} The element to animate.\n     * @param desc {Map} Animation description.\n     * @param duration {Integer?} The duration of the animation which will\n     *   override the duration given in the description.\n     * @return {qx.bom.element.AnimationHandle} The handle.\n     */\n    animateReverse(el, desc, duration) {\n      return this._animate(el, desc, duration, true);\n    },\n\n    /**\n     * Helper to start the animation, either in reversed order or not.\n     *\n     * @param el {Element} The element to animate.\n     * @param desc {Map} Animation description.\n     * @param duration {Integer?} The duration of the animation which will\n     *   override the duration given in the description.\n     * @param reverse {Boolean} <code>true</code>, if the animation should be\n     *   reversed.\n     * @return {qx.bom.element.AnimationHandle} The handle.\n     */\n    _animate(el, desc, duration, reverse) {\n      // stop if an animation is already running\n      if (el.$$animation) {\n        return el.$$animation;\n      }\n\n      desc = qx.lang.Object.clone(desc, true);\n\n      if (duration == undefined) {\n        duration = desc.duration;\n      }\n\n      var keyFrames = desc.keyFrames;\n\n      var keys = this.__getOrderedKeys(keyFrames);\n      var stepTime = this.__getStepTime(duration, keys);\n      var steps = parseInt(duration / stepTime, 10);\n\n      this.__normalizeKeyFrames(keyFrames, el);\n\n      var delta = this.__calculateDelta(\n        steps,\n        stepTime,\n        keys,\n        keyFrames,\n        duration,\n        desc.timing\n      );\n\n      var handle = new qx.bom.element.AnimationHandle();\n      handle.jsAnimation = true;\n\n      if (reverse) {\n        delta.reverse();\n        handle.reverse = true;\n      }\n\n      handle.desc = desc;\n      handle.el = el;\n      handle.delta = delta;\n      handle.stepTime = stepTime;\n      handle.steps = steps;\n      el.$$animation = handle;\n\n      handle.i = 0;\n      handle.initValues = {};\n      handle.repeatSteps = this.__applyRepeat(steps, desc.repeat);\n\n      var delay = desc.delay || 0;\n      var self = this;\n      handle.delayId = window.setTimeout(function () {\n        handle.delayId = null;\n        self.play(handle);\n      }, delay);\n      return handle;\n    },\n\n    /**\n     * Try to normalize the keyFrames by adding the default / set values of the\n     * element.\n     * @param keyFrames {Map} The map of key frames.\n     * @param el {Element} The element to animate.\n     */\n    __normalizeKeyFrames(keyFrames, el) {\n      // collect all possible keys and its units\n      var units = {};\n      for (var percent in keyFrames) {\n        for (var name in keyFrames[percent]) {\n          // prefixed key calculation\n          var prefixed = qx.bom.Style.getPropertyName(name);\n          if (prefixed && prefixed != name) {\n            var prefixedName = qx.bom.Style.getCssName(prefixed);\n            keyFrames[percent][prefixedName] = keyFrames[percent][name];\n            delete keyFrames[percent][name];\n            name = prefixedName;\n          }\n          // check for the available units\n          if (units[name] == undefined) {\n            var item = keyFrames[percent][name];\n            if (typeof item == \"string\") {\n              units[name] = this.__getUnit(item);\n            } else {\n              units[name] = \"\";\n            }\n          }\n        }\n      }\n      // add all missing keys\n      for (var percent in keyFrames) {\n        var frame = keyFrames[percent];\n        for (var name in units) {\n          if (frame[name] == undefined) {\n            if (name in el.style) {\n              // get the computed style if possible\n              if (window.getComputedStyle) {\n                frame[name] = window.getComputedStyle(el, null)[name];\n              } else {\n                frame[name] = el.style[name];\n              }\n            } else {\n              frame[name] = el[name];\n            }\n            // if its a unit we know, set 0 as fallback\n            if (frame[name] === \"\" && this.__units.indexOf(units[name]) != -1) {\n              frame[name] = \"0\" + units[name];\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Checks for transform keys and returns a cloned frame\n     * with the right transform style set.\n     * @param frame {Map} A single key frame of the description.\n     * @return {Map} A modified clone of the given frame.\n     */\n    __normalizeKeyFrameTransforms(frame) {\n      frame = qx.lang.Object.clone(frame);\n      var transforms;\n      for (var name in frame) {\n        if (name in this.__transitionKeys) {\n          if (!transforms) {\n            transforms = {};\n          }\n          transforms[name] = frame[name];\n          delete frame[name];\n        }\n      }\n      if (transforms) {\n        var transformStyle =\n          qx.bom.element.Transform.getCss(transforms).split(\":\");\n        if (transformStyle.length > 1) {\n          frame[transformStyle[0]] = transformStyle[1].replace(\";\", \"\");\n        }\n      }\n      return frame;\n    },\n\n    /**\n     * Precalculation of the delta which will be applied during the animation.\n     * The whole deltas will be calculated prior to the animation and stored\n     * in a single array. This method takes care of that calculation.\n     *\n     * @param steps {Integer} The amount of steps to take to the end of the\n     *   animation.\n     * @param stepTime {Integer} The amount of milliseconds each step takes.\n     * @param keys {Array} Ordered list of keys in the key frames map.\n     * @param keyFrames {Map} The map of key frames.\n     * @param duration {Integer} Time in milliseconds the animation should take.\n     * @param timing {String} The given timing function.\n     * @return {Array} An array containing the animation deltas.\n     */\n    __calculateDelta(steps, stepTime, keys, keyFrames, duration, timing) {\n      var delta = new Array(steps);\n\n      var keyIndex = 1;\n      delta[0] = this.__normalizeKeyFrameTransforms(keyFrames[0]);\n      var last = keyFrames[0];\n      var next = keyFrames[keys[keyIndex]];\n      var stepsToNext = Math.floor(\n        keys[keyIndex] / ((stepTime / duration) * 100)\n      );\n\n      var calculationIndex = 1; // is used as counter for the timing calculation\n      // for every step\n      for (var i = 1; i < delta.length; i++) {\n        // switch key frames if we crossed a percent border\n        if (((i * stepTime) / duration) * 100 > keys[keyIndex]) {\n          last = next;\n          keyIndex++;\n          next = keyFrames[keys[keyIndex]];\n          stepsToNext =\n            Math.floor(keys[keyIndex] / ((stepTime / duration) * 100)) -\n            stepsToNext;\n          calculationIndex = 1;\n        }\n\n        delta[i] = {};\n\n        var transforms;\n        // for every property\n        for (var name in next) {\n          var nItem = next[name] + \"\";\n\n          // transform values\n          if (name in this.__transitionKeys) {\n            if (!transforms) {\n              transforms = {};\n            }\n\n            if (qx.Bootstrap.isArray(last[name])) {\n              if (!qx.Bootstrap.isArray(next[name])) {\n                next[name] = [next[name]];\n              }\n              transforms[name] = [];\n              for (var j = 0; j < next[name].length; j++) {\n                var item = next[name][j] + \"\";\n                var x = calculationIndex / stepsToNext;\n                transforms[name][j] = this.__getNextValue(\n                  item,\n                  last[name],\n                  timing,\n                  x\n                );\n              }\n            } else {\n              var x = calculationIndex / stepsToNext;\n              transforms[name] = this.__getNextValue(\n                nItem,\n                last[name],\n                timing,\n                x\n              );\n            }\n\n            // color values\n          } else if (nItem.charAt(0) == \"#\") {\n            // get the two values from the frames as RGB arrays\n            var value0 = qx.util.ColorUtil.cssStringToRgb(last[name]);\n            var value1 = qx.util.ColorUtil.cssStringToRgb(nItem);\n            var stepValue = [];\n            // calculate every color channel\n            for (var j = 0; j < value0.length; j++) {\n              var range = value0[j] - value1[j];\n              var x = calculationIndex / stepsToNext;\n              var timingX = qx.bom.AnimationFrame.calculateTiming(timing, x);\n              stepValue[j] = parseInt(value0[j] - range * timingX, 10);\n            }\n\n            delta[i][name] = qx.util.ColorUtil.rgbToHexString(stepValue);\n          } else if (!isNaN(parseFloat(nItem))) {\n            var x = calculationIndex / stepsToNext;\n            delta[i][name] = this.__getNextValue(nItem, last[name], timing, x);\n          } else {\n            delta[i][name] = last[name] + \"\";\n          }\n        }\n        // save all transformations in the delta values\n        if (transforms) {\n          var transformStyle =\n            qx.bom.element.Transform.getCss(transforms).split(\":\");\n          if (transformStyle.length > 1) {\n            delta[i][transformStyle[0]] = transformStyle[1].replace(\";\", \"\");\n          }\n        }\n\n        calculationIndex++;\n      }\n      // make sure the last key frame is right\n      delta[delta.length - 1] = this.__normalizeKeyFrameTransforms(\n        keyFrames[100]\n      );\n\n      return delta;\n    },\n\n    /**\n     * Ties to parse out the unit of the given value.\n     *\n     * @param item {String} A CSS value including its unit.\n     * @return {String} The unit of the given value.\n     */\n    __getUnit(item) {\n      return item.substring((parseFloat(item) + \"\").length, item.length);\n    },\n\n    /**\n     * Returns the next value based on the given arguments.\n     *\n     * @param nextItem {String} The CSS value of the next frame\n     * @param lastItem {String} The CSS value of the last frame\n     * @param timing {String} The timing used for the calculation\n     * @param x {Number} The x position of the animation on the time axis\n     * @return {String} The calculated value including its unit.\n     */\n    __getNextValue(nextItem, lastItem, timing, x) {\n      var range = parseFloat(nextItem) - parseFloat(lastItem);\n      return (\n        parseFloat(lastItem) +\n        range * qx.bom.AnimationFrame.calculateTiming(timing, x) +\n        this.__getUnit(nextItem)\n      );\n    },\n\n    /**\n     * Internal helper for the {@link qx.bom.element.AnimationHandle} to play\n     * the animation.\n     * @internal\n     * @param handle {qx.bom.element.AnimationHandle} The hand which\n     *   represents the animation.\n     * @return {qx.bom.element.AnimationHandle} The handle for chaining.\n     */\n    play(handle) {\n      handle.emit(\"start\", handle.el);\n      var id = window.setInterval(function () {\n        handle.repeatSteps--;\n        var values = handle.delta[handle.i % handle.steps];\n        // save the init values\n        if (handle.i === 0) {\n          for (var name in values) {\n            if (handle.initValues[name] === undefined) {\n              // animate element property\n              if (handle.el[name] !== undefined) {\n                handle.initValues[name] = handle.el[name];\n              }\n              // animate CSS property\n              else if (qx.bom.element.Style) {\n                handle.initValues[name] = qx.bom.element.Style.get(\n                  handle.el,\n                  qx.lang.String.camelCase(name)\n                );\n              } else {\n                handle.initValues[name] =\n                  handle.el.style[qx.lang.String.camelCase(name)];\n              }\n            }\n          }\n        }\n        qx.bom.element.AnimationJs.__applyStyles(handle.el, values);\n\n        handle.i++;\n        // iteration condition\n        if (handle.i % handle.steps == 0) {\n          handle.emit(\"iteration\", handle.el);\n          if (handle.desc.alternate) {\n            handle.delta.reverse();\n          }\n        }\n        // end condition\n        if (handle.repeatSteps < 0) {\n          qx.bom.element.AnimationJs.stop(handle);\n        }\n      }, handle.stepTime);\n\n      handle.animationId = id;\n\n      return handle;\n    },\n\n    /**\n     * Internal helper for the {@link qx.bom.element.AnimationHandle} to pause\n     * the animation.\n     * @internal\n     * @param handle {qx.bom.element.AnimationHandle} The hand which\n     *   represents the animation.\n     * @return {qx.bom.element.AnimationHandle} The handle for chaining.\n     */\n\n    pause(handle) {\n      // stop the interval\n      window.clearInterval(handle.animationId);\n      handle.animationId = null;\n\n      return handle;\n    },\n\n    /**\n     * Internal helper for the {@link qx.bom.element.AnimationHandle} to stop\n     * the animation.\n     * @internal\n     * @param handle {qx.bom.element.AnimationHandle} The hand which\n     *   represents the animation.\n     * @return {qx.bom.element.AnimationHandle} The handle for chaining.\n     */\n    stop(handle) {\n      var desc = handle.desc;\n      var el = handle.el;\n      var initValues = handle.initValues;\n      if (handle.animationId) {\n        window.clearInterval(handle.animationId);\n      }\n\n      // clear the delay if the animation has not been started\n      if (handle.delayId) {\n        window.clearTimeout(handle.delayId);\n      }\n\n      // check if animation is already stopped\n      if (el == undefined) {\n        return handle;\n      }\n\n      // if we should keep a frame\n      var keep = desc.keep;\n      if (keep != undefined && !handle.stopped) {\n        if (\n          handle.reverse ||\n          (desc.alternate && desc.repeat && desc.repeat % 2 == 0)\n        ) {\n          keep = 100 - keep;\n        }\n        this.__applyStyles(\n          el,\n          this.__normalizeKeyFrameTransforms(desc.keyFrames[keep])\n        );\n      } else {\n        this.__applyStyles(el, initValues);\n      }\n\n      el.$$animation = null;\n      handle.el = null;\n      handle.ended = true;\n      handle.animationId = null;\n\n      handle.emit(\"end\", el);\n\n      return handle;\n    },\n\n    /**\n     * Takes care of the repeat key of the description.\n     * @param steps {Integer} The number of steps one iteration would take.\n     * @param repeat {Integer|String} It can be either a number how often the\n     * animation should be repeated or the string 'infinite'.\n     * @return {Integer} The number of steps to animate.\n     */\n    __applyRepeat(steps, repeat) {\n      if (repeat == undefined) {\n        return steps;\n      }\n      if (repeat == \"infinite\") {\n        return Number.MAX_VALUE;\n      }\n      return steps * repeat;\n    },\n\n    /**\n     * Central method to apply css styles and element properties.\n     * @param el {Element} The DOM element to apply the styles.\n     * @param styles {Map} A map containing styles and values.\n     */\n    __applyStyles(el, styles) {\n      for (var key in styles) {\n        // ignore undefined values (might be a bad detection)\n        if (styles[key] === undefined) {\n          continue;\n        }\n\n        // apply element property value - only if a CSS property\n        // is *not* available\n        if (typeof el.style[key] === \"undefined\" && key in el) {\n          el[key] = styles[key];\n          continue;\n        }\n\n        var name = qx.bom.Style.getPropertyName(key) || key;\n        if (qx.bom.element.Style) {\n          qx.bom.element.Style.set(el, name, styles[key]);\n        } else {\n          el.style[name] = styles[key];\n        }\n      }\n    },\n\n    /**\n     * Dynamic calculation of the steps time considering a max step time.\n     * @param duration {Number} The duration of the animation.\n     * @param keys {Array} An array containing the ordered set of key frame keys.\n     * @return {Integer} The best suited step time.\n     */\n    __getStepTime(duration, keys) {\n      // get min difference\n      var minDiff = 100;\n      for (var i = 0; i < keys.length - 1; i++) {\n        minDiff = Math.min(minDiff, keys[i + 1] - keys[i]);\n      }\n\n      var stepTime = (duration * minDiff) / 100;\n      while (stepTime > this.__maxStepTime) {\n        stepTime = stepTime / 2;\n      }\n      return Math.round(stepTime);\n    },\n\n    /**\n     * Helper which returns the ordered keys of the key frame map.\n     * @param keyFrames {Map} The map of key frames.\n     * @return {Array} An ordered list of keys.\n     */\n    __getOrderedKeys(keyFrames) {\n      var keys = Object.keys(keyFrames);\n      for (var i = 0; i < keys.length; i++) {\n        keys[i] = parseInt(keys[i], 10);\n      }\n      keys.sort(function (a, b) {\n        return a - b;\n      });\n      return keys;\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}