{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "TIMEOUT",
    "REMAINING",
    "request",
    "callback",
    "context",
    "timeout",
    "cb",
    "deadline",
    "call",
    "Environment",
    "get",
    "window",
    "requestIdleCallback",
    "started",
    "Date",
    "getTime",
    "timeRemaining",
    "now",
    "Math",
    "max",
    "bom",
    "IdleCallback",
    "didTimeout",
    "setTimeout",
    "cancel",
    "handle",
    "cancelIdleCallback",
    "clearTimeout"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/bom/IdleCallback.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2016 GONICUS GmbH, Germany, http://www.gonicus.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Cajus Pollmeier (cajus)\n\n************************************************************************ */\n\n/**\n * This is a cross browser wrapper for requestIdleCallback. For further\n * information about the feature, take a look at spec:\n * https://www.w3.org/TR/requestidlecallback/\n *\n * Here is a sample usage:\n * <pre class='javascript'>var cb = function(deadline) {\n *   while (deadline.timeRemaining() > 0) {\n *     // ... do some last tasks\n *   }\n * };\n *\n * qx.bom.IdleCallback.request(cb, this);\n * </pre>\n */\nqx.Bootstrap.define(\"qx.bom.IdleCallback\", {\n  extend: qx.core.Object,\n\n  statics: {\n    /**\n     * The default time in ms the setTimeout() fallback implementation uses. There is no\n     * way to detect if the browser has some spare IDLE time, it defaults to zero - meaning\n     * that the callback will be called as soon as possible.\n     */\n    TIMEOUT: 0,\n\n    /**\n     * The default remaining time in ms the timeout fallback implementation uses. Since we\n     * cannot know how much time is available, this is a hard coded time bucket available\n     * for actions done in the callback.\n     */\n    REMAINING: 250,\n\n    /**\n     * Request for an IDLE callback. If the native <code>requestIdleCallback</code>\n     * method is supported, it will be used. Otherwise, we use timeouts with a\n     * 30ms delay. The HighResolutionTime will be used if supported but the time given\n     * to the callback will still be a timestamp starting at 1 January 1970 00:00:00 UTC.\n     *\n     * @param callback {Function} The callback function which will get a deadline\n     *   object. It contains a <code>timeRemaining()</code> call which returns the\n     *   remaining milliseconds and the <code>didTimeout</code> flag which indicates\n     *   whether the callback was fired due to a timeout. The latter is always false\n     *   in case of the emulation.\n     * @param context {var} The context of the callback.\n     * @param timeout {Number} Timeout in milliseconds.\n     * @return {Number} Handle for that request\n     */\n    request(callback, context, timeout) {\n      var cb = function (deadline) {\n        return callback.call(context, deadline);\n      };\n\n      if (qx.core.Environment.get(\"client.idle\")) {\n        return window.requestIdleCallback(cb, timeout);\n      } else {\n        var deadline = {\n          started: new Date().getTime(),\n\n          timeRemaining() {\n            var now = new Date().getTime();\n            return Math.max(\n              qx.bom.IdleCallback.REMAINING - (now - this.started),\n              0\n            );\n          },\n\n          didTimeout: false\n        };\n\n        // make sure to use an indirection because setTimeout passes a\n        // number as first argument as well\n        return window.setTimeout(function () {\n          cb(deadline);\n        }, qx.bom.IdleCallback.TIMEOUT);\n      }\n    },\n\n    /**\n     * Cancel a requested IDLE callback.\n     *\n     * @param handle {Number} Handle acquired by <code>qx.bom.IdleCallback.request()</code>.\n     */\n    cancel(handle) {\n      if (qx.core.Environment.get(\"client.idle\")) {\n        window.cancelIdleCallback(handle);\n      } else {\n        window.clearTimeout(handle);\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,qBAAqB,EAAE;IACzCC,MAAM,EAAEL,EAAE,CAACM,IAAI,CAACC,MAAM;IAEtBC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;MACIC,OAAO,EAAE,CAAC;MAEV;AACJ;AACA;AACA;AACA;MACIC,SAAS,EAAE,GAAG;MAEd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,mBAACC,QAAQ,EAAEC,OAAO,EAAEC,OAAO,EAAE;QAClC,IAAIC,EAAE,GAAG,SAALA,EAAE,CAAaC,QAAQ,EAAE;UAC3B,OAAOJ,QAAQ,CAACK,IAAI,CAACJ,OAAO,EAAEG,QAAQ,CAAC;QACzC,CAAC;QAED,IAAIhB,EAAE,CAACM,IAAI,CAACY,WAAW,CAACC,GAAG,CAAC,aAAa,CAAC,EAAE;UAC1C,OAAOC,MAAM,CAACC,mBAAmB,CAACN,EAAE,EAAED,OAAO,CAAC;QAChD,CAAC,MAAM;UACL,IAAIE,QAAQ,GAAG;YACbM,OAAO,EAAE,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;YAE7BC,aAAa,2BAAG;cACd,IAAIC,GAAG,GAAG,IAAIH,IAAI,EAAE,CAACC,OAAO,EAAE;cAC9B,OAAOG,IAAI,CAACC,GAAG,CACb5B,EAAE,CAAC6B,GAAG,CAACC,YAAY,CAACpB,SAAS,IAAIgB,GAAG,GAAG,IAAI,CAACJ,OAAO,CAAC,EACpD,CAAC,CACF;YACH,CAAC;YAEDS,UAAU,EAAE;UACd,CAAC;;UAED;UACA;UACA,OAAOX,MAAM,CAACY,UAAU,CAAC,YAAY;YACnCjB,EAAE,CAACC,QAAQ,CAAC;UACd,CAAC,EAAEhB,EAAE,CAAC6B,GAAG,CAACC,YAAY,CAACrB,OAAO,CAAC;QACjC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIwB,MAAM,kBAACC,MAAM,EAAE;QACb,IAAIlC,EAAE,CAACM,IAAI,CAACY,WAAW,CAACC,GAAG,CAAC,aAAa,CAAC,EAAE;UAC1CC,MAAM,CAACe,kBAAkB,CAACD,MAAM,CAAC;QACnC,CAAC,MAAM;UACLd,MAAM,CAACgB,YAAY,CAACF,MAAM,CAAC;QAC7B;MACF;IACF;EACF,CAAC,CAAC;EA7GFlC,EAAE,CAAC6B,GAAG,CAACC,YAAY,CAAC3B,aAAa,GAAGA,aAAa;AAAC"
}