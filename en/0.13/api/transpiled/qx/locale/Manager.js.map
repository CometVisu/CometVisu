{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "__translations",
    "$$translations",
    "__locales",
    "$$locales",
    "initLocale",
    "__clientLocale",
    "getLocale",
    "statics",
    "tr",
    "messageId",
    "varargs",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "locale",
    "Manager",
    "getInstance",
    "translate",
    "trn",
    "singularMessageId",
    "pluralMessageId",
    "count",
    "splice",
    "trc",
    "hint",
    "trnc",
    "marktr",
    "properties",
    "check",
    "apply",
    "event",
    "init",
    "Environment",
    "get",
    "variant",
    "members",
    "__defaultLocale",
    "__locale",
    "__language",
    "getLanguage",
    "getTerritory",
    "split",
    "getAvailableLocales",
    "includeNonloaded",
    "locales",
    "push",
    "__extractLanguage",
    "language",
    "pos",
    "indexOf",
    "substring",
    "_applyLocale",
    "value",
    "old",
    "addTranslation",
    "languageCode",
    "translationMap",
    "catalog",
    "key",
    "addLocale",
    "localeCode",
    "localeMap",
    "__lookupAndExpand",
    "localize",
    "txt",
    "length",
    "translatedArgs",
    "i",
    "arg",
    "String",
    "format",
    "LocalizedString"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/locale/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The qx.locale.Manager provides static translation methods (like tr()) and\n * general locale information.\n *\n * @require(qx.event.dispatch.Direct)\n * @require(qx.locale.LocalizedString)\n * @require(qx.bom.client.Locale)\n *\n * Note: \"translating\" the empty string, e.g. tr(\"\") will return the header\n * of the respective .po file. See also https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html#PO-Files\n *\n * @cldr()\n */\n\nqx.Class.define(\"qx.locale.Manager\", {\n  type: \"singleton\",\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    this.__translations = qx.$$translations || {};\n    this.__locales = qx.$$locales || {};\n\n    this.initLocale();\n    this.__clientLocale = this.getLocale();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Translate a message\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String|LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    tr(messageId, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments, 1);\n\n      return qx.locale.Manager.getInstance().translate(messageId, args);\n    },\n\n    /**\n     * Translate a plural message\n     *\n     * Depending on the third argument the plural or the singular form is chosen.\n     *\n     * @param singularMessageId {String} message id of the singular form (may contain format strings)\n     * @param pluralMessageId {String} message id of the plural form (may contain format strings)\n     * @param count {Integer} singular form if equals 1, otherwise plural\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String|LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trn(singularMessageId, pluralMessageId, count, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 3);\n\n      // assumes \"Two forms, singular used for one only\" (seems to be the most common form)\n      // (http://www.gnu.org/software/gettext/manual/html_node/gettext_150.html#Plural-forms)\n      // closely related with bug #745\n      if (count != 1) {\n        return qx.locale.Manager.getInstance().translate(pluralMessageId, args);\n      } else {\n        return qx.locale.Manager.getInstance().translate(\n          singularMessageId,\n          args\n        );\n      }\n    },\n\n    /**\n     * Translate a message with translation hint (from developer addressed to translator).\n     *\n     * @param hint {String} hint for the translator of the message. Will be included in the .po file.\n     * @param messageId {String} message id (may contain format strings)\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String|LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trc(hint, messageId, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 2);\n\n      return qx.locale.Manager.getInstance().translate(messageId, args);\n    },\n\n    /**\n     * Translate a plural message with translation hint (from developer addressed to translator).\n     *\n     * Depending on the third argument the plural or the singular form is chosen.\n     *\n     * @param hint {String} hint for the translator of the message. Will be included in the .po file.\n     * @param singularMessageId {String} message id of the singular form (may contain format strings)\n     * @param pluralMessageId {String} message id of the plural form (may contain format strings)\n     * @param count {Integer} singular form if equals 1, otherwise plural\n     * @param varargs {Object} variable number of arguments applied to the format string\n     * @return {String|LocalizedString} The translated message or localized string\n     * @see qx.lang.String.format\n     */\n    trnc(hint, singularMessageId, pluralMessageId, count, varargs) {\n      var args = qx.lang.Array.fromArguments(arguments);\n      args.splice(0, 4);\n\n      // see trn()\n      if (count != 1) {\n        return qx.locale.Manager.getInstance().translate(pluralMessageId, args);\n      } else {\n        return qx.locale.Manager.getInstance().translate(\n          singularMessageId,\n          args\n        );\n      }\n    },\n\n    /**\n     * Mark the message for translation but return the original message.\n     *\n     * @param messageId {String} the message ID\n     * @return {String} messageId\n     */\n    marktr(messageId) {\n      return messageId;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** current locale. locale is an language code like de, de_AT, en, en_GB, fr, ... */\n    locale: {\n      check: \"String\",\n      apply: \"_applyLocale\",\n      event: \"changeLocale\",\n      init: (function () {\n        var locale = qx.core.Environment.get(\"locale\");\n        if (!locale || locale === \"\") {\n          return qx.core.Environment.get(\"locale.default\");\n        }\n        var variant = qx.core.Environment.get(\"locale.variant\");\n        if (variant !== \"\") {\n          locale += \"_\" + variant;\n        }\n        return locale;\n      })()\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __defaultLocale: qx.core.Environment.get(\"locale.default\"),\n    __locale: null,\n    __language: null,\n    __translations: null,\n    __locales: null,\n    __clientLocale: null,\n\n    /**\n     * Get the language code of the current locale\n     *\n     * This is the first part of a locale definition. The language for \"de_DE\" would be \"de\"\n     *\n     * @return {String} language code\n     */\n    getLanguage() {\n      return this.__language;\n    },\n\n    /**\n     * Get the territory code of the current locale\n     *\n     * This is the second part of a locale definition. The territory for \"de_DE\" would be \"DE\"\n     *\n     * @return {String} territory code\n     */\n    getTerritory() {\n      return this.getLocale().split(\"_\")[1] || \"\";\n    },\n\n    /**\n     * Return the available application locales\n     *\n     * This corresponds to the LOCALES setting in config.json. Without argument,\n     * it only returns the currently loaded locales, with an argument of true\n     * all locales that went into the build. This is particularly interesting if\n     * locales were generated as dedicated I18N parts, and have to be loaded\n     * explicitly before being available.\n     *\n     * @param includeNonloaded {Boolean?null} include locales not yet loaded\n     * @return {String[]} array of available locales\n     */\n    getAvailableLocales(includeNonloaded) {\n      var locales = [];\n\n      for (var locale in this.__locales) {\n        if (locale != this.__defaultLocale) {\n          if (this.__locales[locale] === null && !includeNonloaded) {\n            continue; // skip not yet loaded locales\n          }\n          locales.push(locale);\n        }\n      }\n\n      return locales;\n    },\n\n    /**\n     * Extract the language part from a locale.\n     *\n     * @param locale {String} locale to be used\n     * @return {String} language\n     */\n    __extractLanguage(locale) {\n      var language;\n      if (locale == null) {\n        return null;\n      }\n      var pos = locale.indexOf(\"_\");\n\n      if (pos == -1) {\n        language = locale;\n      } else {\n        language = locale.substring(0, pos);\n      }\n\n      return language;\n    },\n\n    // property apply\n    _applyLocale(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!(value in this.__locales || value == this.__clientLocale)) {\n          qx.log.Logger.warn(\"Locale: \" + value + \" not available.\");\n        }\n      }\n\n      this.__locale = value;\n      this.__language = this.__extractLanguage(value);\n    },\n\n    /**\n     * Add a translation to the translation manager.\n     *\n     * If <code>languageCode</code> already exists, its map will be updated with\n     * <code>translationMap</code> (new keys will be added, existing keys will be\n     * overwritten).\n     *\n     * @param languageCode {String} language code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>\n     * @param translationMap {Map} mapping of message identifiers to message strings in the target\n     *                             language, e.g. <i>{\"greeting_short\" : \"Hello\"}</i>. Plural forms\n     *                             are separate keys.\n     */\n    addTranslation(languageCode, translationMap) {\n      var catalog = this.__translations;\n      if (catalog[languageCode]) {\n        for (var key in translationMap) {\n          catalog[languageCode][key] = translationMap[key];\n        }\n      } else {\n        catalog[languageCode] = translationMap;\n      }\n    },\n\n    /**\n     * Add a localization to the localization manager.\n     *\n     * If <code>localeCode</code> already exists, its map will be updated with\n     * <code>localeMap</code> (new keys will be added, existing keys will be overwritten).\n     *\n     * @param localeCode {String} locale code of the translation like <i>de, de_AT, en, en_GB, fr, ...</i>\n     * @param localeMap {Map} mapping of locale keys to the target locale values, e.g.\n     *                        <i>{\"cldr_date_format_short\" : \"M/d/yy\"}</i>.\n     */\n    addLocale(localeCode, localeMap) {\n      var catalog = this.__locales;\n      if (catalog[localeCode]) {\n        for (var key in localeMap) {\n          catalog[localeCode][key] = localeMap[key];\n        }\n      } else {\n        catalog[localeCode] = localeMap;\n      }\n    },\n\n    /**\n     * Translate a message using the current locale and apply format string to the arguments.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String|LocalizedString} translated message or localized string\n     */\n    translate(messageId, args, locale) {\n      var catalog = this.__translations;\n      return this.__lookupAndExpand(catalog, messageId, args, locale);\n    },\n\n    /**\n     * Provide localization (CLDR) data.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String|LocalizedString} translated message or localized string\n     */\n    localize(messageId, args, locale) {\n      var catalog = this.__locales;\n      return this.__lookupAndExpand(catalog, messageId, args, locale);\n    },\n\n    /**\n     * Look up an I18N key in a catalog and expand format strings.\n     *\n     * Implements the lookup chain locale (e.g. en_US) -> language (e.g. en) ->\n     * default locale (e.g. C). Localizes the arguments if possible and splices\n     * them into the message. If qx.dynlocale is on, returns a {@link\n     * LocalizedString}.\n     *\n     * @param catalog {Map} map of I18N keys and their values\n     * @param messageId {String} message id (may contain format strings)\n     * @param args {Object[]} array of objects, which are inserted into the format string\n     * @param locale {String ? #locale} locale to be used; if not given, defaults to the value of {@link #locale}\n     * @return {String|LocalizedString} translated message or localized string\n     */\n    __lookupAndExpand(catalog, messageId, args, locale) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertObject(catalog);\n        this.assertString(messageId);\n        this.assertArray(args);\n      }\n      var txt;\n\n      if (!catalog) {\n        return messageId;\n      }\n\n      if (locale) {\n        var language = this.__extractLanguage(locale);\n      } else {\n        locale = this.__locale;\n        language = this.__language;\n      }\n\n      // e.g. DE_at\n      if (!txt && catalog[locale]) {\n        txt = catalog[locale][messageId];\n      }\n\n      // e.g. DE\n      if (!txt && catalog[language]) {\n        txt = catalog[language][messageId];\n      }\n\n      // C\n      if (!txt && catalog[this.__defaultLocale]) {\n        txt = catalog[this.__defaultLocale][messageId];\n      }\n\n      if (!txt) {\n        txt = messageId;\n      }\n\n      if (args.length > 0) {\n        var translatedArgs = [];\n        for (var i = 0; i < args.length; i++) {\n          var arg = args[i];\n          if (arg && arg.translate) {\n            translatedArgs[i] = arg.translate();\n          } else {\n            translatedArgs[i] = arg;\n          }\n        }\n        txt = qx.lang.String.format(txt, translatedArgs);\n      }\n\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\n        txt = new qx.locale.LocalizedString(\n          txt,\n          messageId,\n          args,\n          catalog === this.__locales\n        );\n      }\n\n      return txt;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EAAqC;IACnCC,IAAI,EAAE,WAD6B;IAEnCC,MAAM,EAAEP,EAAE,CAACQ,IAAH,CAAQC,MAFmB;;IAInC;AACF;AACA;AACA;AACA;IAEEC,SAVmC,uBAUvB;MACV;MAEA,KAAKC,SAAL,GAAsBX,EAAE,CAACY,cAAH,IAAqB,EAA3C;MACA,KAAKC,SAAL,GAAiBb,EAAE,CAACc,SAAH,IAAgB,EAAjC;MAEA,KAAKC,UAAL;MACA,KAAKC,SAAL,GAAsB,KAAKC,SAAL,EAAtB;IACD,CAlBkC;;IAoBnC;AACF;AACA;AACA;AACA;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,EATO,cASJC,SATI,EASOC,OATP,EASgB;QACrB,IAAIC,IAAI,GAAGtB,EAAE,CAACuB,IAAH,CAAQC,KAAR,CAAcC,aAAd,CAA4BC,SAA5B,EAAuC,CAAvC,CAAX;QAEA,OAAO1B,EAAE,CAAC2B,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCC,SAAhC,CAA0CV,SAA1C,EAAqDE,IAArD,CAAP;MACD,CAbM;;MAeP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIS,GA3BO,eA2BHC,iBA3BG,EA2BgBC,eA3BhB,EA2BiCC,KA3BjC,EA2BwCb,OA3BxC,EA2BiD;QACtD,IAAIC,IAAI,GAAGtB,EAAE,CAACuB,IAAH,CAAQC,KAAR,CAAcC,aAAd,CAA4BC,SAA5B,CAAX;QACAJ,IAAI,CAACa,MAAL,CAAY,CAAZ,EAAe,CAAf,EAFsD,CAItD;QACA;QACA;;QACA,IAAID,KAAK,IAAI,CAAb,EAAgB;UACd,OAAOlC,EAAE,CAAC2B,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCC,SAAhC,CAA0CG,eAA1C,EAA2DX,IAA3D,CAAP;QACD,CAFD,MAEO;UACL,OAAOtB,EAAE,CAAC2B,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCC,SAAhC,CACLE,iBADK,EAELV,IAFK,CAAP;QAID;MACF,CA1CM;;MA4CP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIc,GArDO,eAqDHC,IArDG,EAqDGjB,SArDH,EAqDcC,OArDd,EAqDuB;QAC5B,IAAIC,IAAI,GAAGtB,EAAE,CAACuB,IAAH,CAAQC,KAAR,CAAcC,aAAd,CAA4BC,SAA5B,CAAX;QACAJ,IAAI,CAACa,MAAL,CAAY,CAAZ,EAAe,CAAf;QAEA,OAAOnC,EAAE,CAAC2B,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCC,SAAhC,CAA0CV,SAA1C,EAAqDE,IAArD,CAAP;MACD,CA1DM;;MA4DP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIgB,IAzEO,gBAyEFD,IAzEE,EAyEIL,iBAzEJ,EAyEuBC,eAzEvB,EAyEwCC,KAzExC,EAyE+Cb,OAzE/C,EAyEwD;QAC7D,IAAIC,IAAI,GAAGtB,EAAE,CAACuB,IAAH,CAAQC,KAAR,CAAcC,aAAd,CAA4BC,SAA5B,CAAX;QACAJ,IAAI,CAACa,MAAL,CAAY,CAAZ,EAAe,CAAf,EAF6D,CAI7D;;QACA,IAAID,KAAK,IAAI,CAAb,EAAgB;UACd,OAAOlC,EAAE,CAAC2B,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCC,SAAhC,CAA0CG,eAA1C,EAA2DX,IAA3D,CAAP;QACD,CAFD,MAEO;UACL,OAAOtB,EAAE,CAAC2B,MAAH,CAAUC,OAAV,CAAkBC,WAAlB,GAAgCC,SAAhC,CACLE,iBADK,EAELV,IAFK,CAAP;QAID;MACF,CAtFM;;MAwFP;AACJ;AACA;AACA;AACA;AACA;MACIiB,MA9FO,kBA8FAnB,SA9FA,EA8FW;QAChB,OAAOA,SAAP;MACD;IAhGM,CA1B0B;;IA6HnC;AACF;AACA;AACA;AACA;IAEEoB,UAAU,EAAE;MACV;MACAb,MAAM,EAAE;QACNc,KAAK,EAAE,QADD;QAENC,KAAK,EAAE,cAFD;QAGNC,KAAK,EAAE,cAHD;QAINC,IAAI,EAAG,YAAY;UACjB,IAAIjB,MAAM,GAAG3B,EAAE,CAACQ,IAAH,CAAQqC,WAAR,CAAoBC,GAApB,CAAwB,QAAxB,CAAb;;UACA,IAAI,CAACnB,MAAD,IAAWA,MAAM,KAAK,EAA1B,EAA8B;YAC5B,OAAO3B,EAAE,CAACQ,IAAH,CAAQqC,WAAR,CAAoBC,GAApB,CAAwB,gBAAxB,CAAP;UACD;;UACD,IAAIC,OAAO,GAAG/C,EAAE,CAACQ,IAAH,CAAQqC,WAAR,CAAoBC,GAApB,CAAwB,gBAAxB,CAAd;;UACA,IAAIC,OAAO,KAAK,EAAhB,EAAoB;YAClBpB,MAAM,IAAI,MAAMoB,OAAhB;UACD;;UACD,OAAOpB,MAAP;QACD,CAVK;MAJA;IAFE,CAnIuB;;IAuJnC;AACF;AACA;AACA;AACA;IAEEqB,OAAO,EAAE;MACPC,SAAe,EAAEjD,EAAE,CAACQ,IAAH,CAAQqC,WAAR,CAAoBC,GAApB,CAAwB,gBAAxB,CADV;MAEPI,SAAQ,EAAE,IAFH;MAGPC,SAAU,EAAE,IAHL;MAIPxC,SAAc,EAAE,IAJT;MAKPE,SAAS,EAAE,IALJ;MAMPG,SAAc,EAAE,IANT;;MAQP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIoC,WAfO,yBAeO;QACZ,OAAO,KAAKD,SAAZ;MACD,CAjBM;;MAmBP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIE,YA1BO,0BA0BQ;QACb,OAAO,KAAKpC,SAAL,GAAiBqC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,KAAkC,EAAzC;MACD,CA5BM;;MA8BP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,mBA1CO,+BA0CaC,gBA1Cb,EA0C+B;QACpC,IAAIC,OAAO,GAAG,EAAd;;QAEA,KAAK,IAAI9B,MAAT,IAAmB,KAAKd,SAAxB,EAAmC;UACjC,IAAIc,MAAM,IAAI,KAAKsB,SAAnB,EAAoC;YAClC,IAAI,KAAKpC,SAAL,CAAec,MAAf,MAA2B,IAA3B,IAAmC,CAAC6B,gBAAxC,EAA0D;cACxD,SADwD,CAC9C;YACX;;YACDC,OAAO,CAACC,IAAR,CAAa/B,MAAb;UACD;QACF;;QAED,OAAO8B,OAAP;MACD,CAvDM;;MAyDP;AACJ;AACA;AACA;AACA;AACA;MACIE,SA/DO,qBA+DWhC,MA/DX,EA+DmB;QACxB,IAAIiC,QAAJ;;QACA,IAAIjC,MAAM,IAAI,IAAd,EAAoB;UAClB,OAAO,IAAP;QACD;;QACD,IAAIkC,GAAG,GAAGlC,MAAM,CAACmC,OAAP,CAAe,GAAf,CAAV;;QAEA,IAAID,GAAG,IAAI,CAAC,CAAZ,EAAe;UACbD,QAAQ,GAAGjC,MAAX;QACD,CAFD,MAEO;UACLiC,QAAQ,GAAGjC,MAAM,CAACoC,SAAP,CAAiB,CAAjB,EAAoBF,GAApB,CAAX;QACD;;QAED,OAAOD,QAAP;MACD,CA7EM;MA+EP;MACAI,YAhFO,wBAgFMC,KAhFN,EAgFaC,GAhFb,EAgFkB;QAOvB,KAAKhB,SAAL,GAAgBe,KAAhB;QACA,KAAKd,SAAL,GAAkB,KAAKQ,SAAL,CAAuBM,KAAvB,CAAlB;MACD,CAzFM;;MA2FP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,cAvGO,0BAuGQC,YAvGR,EAuGsBC,cAvGtB,EAuGsC;QAC3C,IAAIC,OAAO,GAAG,KAAK3D,SAAnB;;QACA,IAAI2D,OAAO,CAACF,YAAD,CAAX,EAA2B;UACzB,KAAK,IAAIG,GAAT,IAAgBF,cAAhB,EAAgC;YAC9BC,OAAO,CAACF,YAAD,CAAP,CAAsBG,GAAtB,IAA6BF,cAAc,CAACE,GAAD,CAA3C;UACD;QACF,CAJD,MAIO;UACLD,OAAO,CAACF,YAAD,CAAP,GAAwBC,cAAxB;QACD;MACF,CAhHM;;MAkHP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,SA5HO,qBA4HGC,UA5HH,EA4HeC,SA5Hf,EA4H0B;QAC/B,IAAIJ,OAAO,GAAG,KAAKzD,SAAnB;;QACA,IAAIyD,OAAO,CAACG,UAAD,CAAX,EAAyB;UACvB,KAAK,IAAIF,GAAT,IAAgBG,SAAhB,EAA2B;YACzBJ,OAAO,CAACG,UAAD,CAAP,CAAoBF,GAApB,IAA2BG,SAAS,CAACH,GAAD,CAApC;UACD;QACF,CAJD,MAIO;UACLD,OAAO,CAACG,UAAD,CAAP,GAAsBC,SAAtB;QACD;MACF,CArIM;;MAuIP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACI5C,SApJO,qBAoJGV,SApJH,EAoJcE,IApJd,EAoJoBK,MApJpB,EAoJ4B;QACjC,IAAI2C,OAAO,GAAG,KAAK3D,SAAnB;QACA,OAAO,KAAKgE,SAAL,CAAuBL,OAAvB,EAAgClD,SAAhC,EAA2CE,IAA3C,EAAiDK,MAAjD,CAAP;MACD,CAvJM;;MAyJP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIiD,QAtKO,oBAsKExD,SAtKF,EAsKaE,IAtKb,EAsKmBK,MAtKnB,EAsK2B;QAChC,IAAI2C,OAAO,GAAG,KAAKzD,SAAnB;QACA,OAAO,KAAK8D,SAAL,CAAuBL,OAAvB,EAAgClD,SAAhC,EAA2CE,IAA3C,EAAiDK,MAAjD,CAAP;MACD,CAzKM;;MA2KP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIgD,SAzLO,qBAyLWL,OAzLX,EAyLoBlD,SAzLpB,EAyL+BE,IAzL/B,EAyLqCK,MAzLrC,EAyL6C;QAMlD,IAAIkD,GAAJ;;QAEA,IAAI,CAACP,OAAL,EAAc;UACZ,OAAOlD,SAAP;QACD;;QAED,IAAIO,MAAJ,EAAY;UACV,IAAIiC,QAAQ,GAAG,KAAKD,SAAL,CAAuBhC,MAAvB,CAAf;QACD,CAFD,MAEO;UACLA,MAAM,GAAG,KAAKuB,SAAd;UACAU,QAAQ,GAAG,KAAKT,SAAhB;QACD,CAjBiD,CAmBlD;;;QACA,IAAI,CAAC0B,GAAD,IAAQP,OAAO,CAAC3C,MAAD,CAAnB,EAA6B;UAC3BkD,GAAG,GAAGP,OAAO,CAAC3C,MAAD,CAAP,CAAgBP,SAAhB,CAAN;QACD,CAtBiD,CAwBlD;;;QACA,IAAI,CAACyD,GAAD,IAAQP,OAAO,CAACV,QAAD,CAAnB,EAA+B;UAC7BiB,GAAG,GAAGP,OAAO,CAACV,QAAD,CAAP,CAAkBxC,SAAlB,CAAN;QACD,CA3BiD,CA6BlD;;;QACA,IAAI,CAACyD,GAAD,IAAQP,OAAO,CAAC,KAAKrB,SAAN,CAAnB,EAA2C;UACzC4B,GAAG,GAAGP,OAAO,CAAC,KAAKrB,SAAN,CAAP,CAA8B7B,SAA9B,CAAN;QACD;;QAED,IAAI,CAACyD,GAAL,EAAU;UACRA,GAAG,GAAGzD,SAAN;QACD;;QAED,IAAIE,IAAI,CAACwD,MAAL,GAAc,CAAlB,EAAqB;UACnB,IAAIC,cAAc,GAAG,EAArB;;UACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1D,IAAI,CAACwD,MAAzB,EAAiCE,CAAC,EAAlC,EAAsC;YACpC,IAAIC,GAAG,GAAG3D,IAAI,CAAC0D,CAAD,CAAd;;YACA,IAAIC,GAAG,IAAIA,GAAG,CAACnD,SAAf,EAA0B;cACxBiD,cAAc,CAACC,CAAD,CAAd,GAAoBC,GAAG,CAACnD,SAAJ,EAApB;YACD,CAFD,MAEO;cACLiD,cAAc,CAACC,CAAD,CAAd,GAAoBC,GAApB;YACD;UACF;;UACDJ,GAAG,GAAG7E,EAAE,CAACuB,IAAH,CAAQ2D,MAAR,CAAeC,MAAf,CAAsBN,GAAtB,EAA2BE,cAA3B,CAAN;QACD;;QAE4C;UAC3CF,GAAG,GAAG,IAAI7E,EAAE,CAAC2B,MAAH,CAAUyD,eAAd,CACJP,GADI,EAEJzD,SAFI,EAGJE,IAHI,EAIJgD,OAAO,KAAK,KAAKzD,SAJb,CAAN;QAMD;QAED,OAAOgE,GAAP;MACD;IAtPM;EA7J0B,CAArC;EAlCA7E,EAAE,CAAC2B,MAAH,CAAUC,OAAV,CAAkBzB,aAAlB,GAAkCA,aAAlC"
}