{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__mgr",
    "locale",
    "Manager",
    "getInstance",
    "getAmMarker",
    "localize",
    "getPmMarker",
    "getDayNames",
    "length",
    "context",
    "withFallback",
    "days",
    "names",
    "i",
    "key",
    "push",
    "__localizeWithFallback",
    "getDayName",
    "day",
    "getMonthNames",
    "getMonthName",
    "month",
    "getDateFormat",
    "size",
    "getDateTimeFormat",
    "canonical",
    "fallback",
    "localizedFormat",
    "getTimeFormat",
    "Date",
    "Error",
    "getWeekStart",
    "weekStart",
    "MV",
    "AE",
    "AF",
    "BH",
    "DJ",
    "DZ",
    "EG",
    "ER",
    "ET",
    "IQ",
    "IR",
    "JO",
    "KE",
    "KW",
    "LB",
    "LY",
    "MA",
    "OM",
    "QA",
    "SA",
    "SD",
    "SO",
    "TN",
    "YE",
    "AS",
    "AU",
    "AZ",
    "BW",
    "CA",
    "CN",
    "FO",
    "GE",
    "GL",
    "GU",
    "HK",
    "IE",
    "IL",
    "IS",
    "JM",
    "JP",
    "KG",
    "KR",
    "LA",
    "MH",
    "MN",
    "MO",
    "MP",
    "MT",
    "NZ",
    "PH",
    "PK",
    "SG",
    "TH",
    "TT",
    "TW",
    "UM",
    "US",
    "UZ",
    "VI",
    "ZA",
    "ZW",
    "MW",
    "NG",
    "TJ",
    "territory",
    "_getTerritory",
    "getWeekendStart",
    "weekendStart",
    "SY",
    "IN",
    "getWeekendEnd",
    "weekendEnd",
    "isWeekend",
    "split",
    "getTerritory",
    "getLanguage",
    "toUpperCase",
    "fallbackContext",
    "localizedString",
    "newKey",
    "replace"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/locale/Date.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Static class that provides localized date information (like names of week\n * days, AM/PM markers, start of week, etc.).\n *\n * @cldr()\n */\nqx.Class.define(\"qx.locale.Date\", {\n  statics: {\n    /**\n     * Reference to the locale manager.\n     *\n     * @internal\n     */\n    __mgr: qx.locale.Manager.getInstance(),\n\n    /**\n     * Get AM marker for time definitions\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} translated AM marker.\n     */\n    getAmMarker(locale) {\n      return this.__mgr.localize(\"cldr_am\", [], locale);\n    },\n\n    /**\n     * Get PM marker for time definitions\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} translated PM marker.\n     */\n    getPmMarker(locale) {\n      return this.__mgr.localize(\"cldr_pm\", [], locale);\n    },\n\n    /**\n     * Return localized names of day names\n     *\n     * @param length {String} format of the day names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the day\n     * @return {String[]} array of localized day names starting with sunday.\n     */\n    getDayNames(length, locale, context, withFallback) {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var days = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\n\n      var names = [];\n\n      for (var i = 0; i < days.length; i++) {\n        var key = \"cldr_day_\" + context + \"_\" + length + \"_\" + days[i];\n        names.push(\n          withFallback\n            ? this.__localizeWithFallback(\n                context,\n                context === \"format\" ? \"stand-alone\" : \"format\",\n                key,\n                locale\n              )\n            : this.__mgr.localize(key, [], locale)\n        );\n      }\n\n      return names;\n    },\n\n    /**\n     * Return localized name of a week day name\n     *\n     * @param length {String} format of the day name.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param day {Integer} day number. 0=sunday, 1=monday, ...\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the day\n     * @return {String} localized day name\n     */\n    getDayName(length, day, locale, context, withFallback) {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInteger(day);\n        qx.core.Assert.assertInRange(day, 0, 6);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var days = [\"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\"];\n\n      var key = \"cldr_day_\" + context + \"_\" + length + \"_\" + days[day];\n      return withFallback\n        ? this.__localizeWithFallback(\n            context,\n            context === \"format\" ? \"stand-alone\" : \"format\",\n            key,\n            locale\n          )\n        : this.__mgr.localize(key, [], locale);\n    },\n\n    /**\n     * Return localized names of month names\n     *\n     * @param length {String} format of the month names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the month\n     * @return {String[]} array of localized month names starting with january.\n     */\n    getMonthNames(length, locale, context, withFallback) {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var names = [];\n\n      for (var i = 0; i < 12; i++) {\n        var key = \"cldr_month_\" + context + \"_\" + length + \"_\" + (i + 1);\n        names.push(\n          withFallback\n            ? this.__localizeWithFallback(\n                context,\n                context === \"format\" ? \"stand-alone\" : \"format\",\n                key,\n                locale\n              )\n            : this.__mgr.localize(key, [], locale)\n        );\n      }\n\n      return names;\n    },\n\n    /**\n     * Return localized name of a month\n     *\n     * @param length {String} format of the month names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param month {Integer} index of the month. 0=january, 1=february, ...\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the month\n     * @return {String} localized month name\n     */\n    getMonthName(length, month, locale, context, withFallback) {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var key = \"cldr_month_\" + context + \"_\" + length + \"_\" + (month + 1);\n      return withFallback\n        ? this.__localizeWithFallback(\n            context,\n            context === \"format\" ? \"stand-alone\" : \"format\",\n            key,\n            locale\n          )\n        : this.__mgr.localize(key, [], locale);\n    },\n\n    /**\n     * Return localized date format string to be used with {@link qx.util.format.DateFormat}.\n     *\n     * @param size {String} format of the date format.\n     *      Possible values: \"short\", \"medium\", \"long\", \"full\"\n     * @param locale {String?} optional locale to be used\n     * @return {String} localized date format string\n     */\n    getDateFormat(size, locale) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(size, [\"short\", \"medium\", \"long\", \"full\"]);\n      }\n\n      var key = \"cldr_date_format_\" + size;\n      return this.__mgr.localize(key, [], locale);\n    },\n\n    /**\n     * Try to localize a date/time format string. For format string possibilities see\n     * <a href=\"http://cldr.unicode.org/translation/date-time\">Date/Time Symbol reference</a>\n     * at CLDR - Unicode Common Locale Data Repository.\n     *\n     * If no localization is available take the fallback format string.\n     *\n     * @param canonical {String} format string containing only field information, and in a canonical order.\n     *       Examples are \"yyyyMMMM\" for year + full month, or \"MMMd\" for abbreviated month + day.\n     * @param fallback {String} fallback format string if no localized version is found\n     * @param locale {String} optional locale to be used\n     * @return {String} best matching format string\n     */\n    getDateTimeFormat(canonical, fallback, locale) {\n      var key = \"cldr_date_time_format_\" + canonical;\n      var localizedFormat = this.__mgr.localize(key, [], locale);\n\n      if (localizedFormat == key) {\n        localizedFormat = fallback;\n      }\n\n      return localizedFormat;\n    },\n\n    /**\n     * Return localized time format string to be used with {@link qx.util.format.DateFormat}.\n     *\n     * @param size {String} format of the time pattern.\n     *      Possible values: \"short\", \"medium\", \"long\", \"full\"\n     * @param locale {String} optional locale to be used\n     * @return {String} localized time format string\n     */\n    getTimeFormat(size, locale) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(size, [\"short\", \"medium\", \"long\", \"full\"]);\n      }\n\n      var key = \"cldr_time_format_\" + size;\n      var localizedFormat = this.__mgr.localize(key, [], locale);\n\n      if (localizedFormat != key) {\n        return localizedFormat;\n      }\n\n      switch (size) {\n        case \"short\":\n        case \"medium\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmm\", \"HH:mm\");\n\n        case \"long\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmmss\", \"HH:mm:ss\");\n\n        case \"full\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmmsszz\", \"HH:mm:ss zz\");\n\n        default:\n          throw new Error(\"This case should never happen.\");\n      }\n    },\n\n    /**\n     * Return the day the week starts with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the first day of the week. 0=sunday, 1=monday, ...\n     */\n    getWeekStart(locale) {\n      var weekStart = {\n        // default is monday\n        MV: 5, // friday\n        AE: 6, // saturday\n        AF: 6,\n        BH: 6,\n        DJ: 6,\n        DZ: 6,\n        EG: 6,\n        ER: 6,\n        ET: 6,\n        IQ: 6,\n        IR: 6,\n        JO: 6,\n        KE: 6,\n        KW: 6,\n        LB: 6,\n        LY: 6,\n        MA: 6,\n        OM: 6,\n        QA: 6,\n        SA: 6,\n        SD: 6,\n        SO: 6,\n        TN: 6,\n        YE: 6,\n        AS: 0, // sunday\n        AU: 0,\n        AZ: 0,\n        BW: 0,\n        CA: 0,\n        CN: 0,\n        FO: 0,\n        GE: 0,\n        GL: 0,\n        GU: 0,\n        HK: 0,\n        IE: 0,\n        IL: 0,\n        IS: 0,\n        JM: 0,\n        JP: 0,\n        KG: 0,\n        KR: 0,\n        LA: 0,\n        MH: 0,\n        MN: 0,\n        MO: 0,\n        MP: 0,\n        MT: 0,\n        NZ: 0,\n        PH: 0,\n        PK: 0,\n        SG: 0,\n        TH: 0,\n        TT: 0,\n        TW: 0,\n        UM: 0,\n        US: 0,\n        UZ: 0,\n        VI: 0,\n        ZA: 0,\n        ZW: 0,\n        MW: 0,\n        NG: 0,\n        TJ: 0\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is monday\n      return weekStart[territory] != null ? weekStart[territory] : 1;\n    },\n\n    /**\n     * Return the day the weekend starts with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the first day of the weekend. 0=sunday, 1=monday, ...\n     */\n    getWeekendStart(locale) {\n      var weekendStart = {\n        // default is saturday\n        EG: 5, // friday\n        IL: 5,\n        SY: 5,\n        IN: 0, // sunday\n        AE: 4, // thursday\n        BH: 4,\n        DZ: 4,\n        IQ: 4,\n        JO: 4,\n        KW: 4,\n        LB: 4,\n        LY: 4,\n        MA: 4,\n        OM: 4,\n        QA: 4,\n        SA: 4,\n        SD: 4,\n        TN: 4,\n        YE: 4\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is saturday\n      return weekendStart[territory] != null ? weekendStart[territory] : 6;\n    },\n\n    /**\n     * Return the day the weekend ends with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the last day of the weekend. 0=sunday, 1=monday, ...\n     */\n    getWeekendEnd(locale) {\n      var weekendEnd = {\n        // default is sunday\n        AE: 5, // friday\n        BH: 5,\n        DZ: 5,\n        IQ: 5,\n        JO: 5,\n        KW: 5,\n        LB: 5,\n        LY: 5,\n        MA: 5,\n        OM: 5,\n        QA: 5,\n        SA: 5,\n        SD: 5,\n        TN: 5,\n        YE: 5,\n        AF: 5,\n        IR: 5,\n        EG: 6, // saturday\n        IL: 6,\n        SY: 6\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is sunday\n      return weekendEnd[territory] != null ? weekendEnd[territory] : 0;\n    },\n\n    /**\n     * Returns whether a certain day of week belongs to the week end.\n     *\n     * @param day {Integer} index of the day. 0=sunday, 1=monday, ...\n     * @param locale {String} optional locale to be used\n     * @return {Boolean} whether the given day is a weekend day\n     */\n    isWeekend(day, locale) {\n      var weekendStart = qx.locale.Date.getWeekendStart(locale);\n      var weekendEnd = qx.locale.Date.getWeekendEnd(locale);\n\n      if (weekendEnd > weekendStart) {\n        return day >= weekendStart && day <= weekendEnd;\n      } else {\n        return day >= weekendStart || day <= weekendEnd;\n      }\n    },\n\n    /**\n     * Extract the territory part from a locale\n     *\n     * @param locale {String} the locale\n     * @return {String} territory\n     */\n    _getTerritory(locale) {\n      if (locale) {\n        var territory = locale.split(\"_\")[1] || locale;\n      } else {\n        territory = this.__mgr.getTerritory() || this.__mgr.getLanguage();\n      }\n\n      return territory.toUpperCase();\n    },\n\n    /**\n     * Provide localization (CLDR) data with fallback between \"format\" and \"stand-alone\" contexts.\n     * It is used in {@link #getDayName} and {@link #getMonthName} methods.\n     *\n     * @param context {String} intended context.\n     *       Possible values: \"format\", \"stand-alone\".\n     * @param fallbackContext {String} the context used in case no localization is found for the key.\n     * @param key {String} message id (may contain format strings)\n     * @param locale {String} the locale\n     * @return {String} localized name for the key\n     *\n     */\n    __localizeWithFallback(context, fallbackContext, key, locale) {\n      var localizedString = this.__mgr.localize(key, [], locale);\n      if (localizedString == key) {\n        var newKey = key.replace(\n          \"_\" + context + \"_\",\n          \"_\" + fallbackContext + \"_\"\n        );\n\n        return this.__mgr.localize(newKey, [], locale);\n      } else {\n        return localizedString;\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}