{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "util",
    "RingBuffer",
    "construct",
    "maxMessages",
    "setMaxMessages",
    "members",
    "setMaxEntries",
    "getMaxMessages",
    "getMaxEntries",
    "process",
    "entry",
    "addEntry",
    "getAllLogEvents",
    "getAllEntries",
    "retrieveLogEvents",
    "count",
    "startingFromMark",
    "getEntries",
    "clearHistory",
    "clear",
    "log",
    "appender"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/log/appender/RingBuffer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Carsten Lergenmueller (carstenl)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * An appender that writes all messages to a memory container. The messages\r\n * can be retrieved later, f. i. when an error dialog pops up and the question\r\n * arises what actions have caused the error.\r\n *\r\n * A mark feature also exists which can be used to remember a point in time.\r\n * When retrieving log events, it is possible to get only those events\r\n * after the marked time. This is useful if data from the buffer is extracted\r\n * and f. i. sent to a logging system. Whenever this happens, a mark() call\r\n * can be used so that the next extraction will only get new data.\r\n */\r\nqx.Bootstrap.define(\"qx.log.appender.RingBuffer\", {\r\n  extend: qx.util.RingBuffer,\r\n\r\n  /**\r\n   * @param maxMessages {Integer?50} Maximum number of messages in the buffer\r\n   */\r\n  construct(maxMessages) {\r\n    this.setMaxMessages(maxMessages || 50);\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * Set the maximum number of messages to hold. If null the number of\r\n     * messages is not limited.\r\n     *\r\n     * Warning: Changing this property will clear the events logged so far.\r\n     *\r\n     * @param maxMessages {Integer} the maximum number of messages to hold\r\n     */\r\n    setMaxMessages(maxMessages) {\r\n      this.setMaxEntries(maxMessages);\r\n    },\r\n\r\n    /**\r\n     * Get the maximum number of messages to hold\r\n     *\r\n     * @return {Integer} the maximum number of messages\r\n     */\r\n    getMaxMessages() {\r\n      return this.getMaxEntries();\r\n    },\r\n\r\n    /**\r\n     * Processes a single log entry\r\n     *\r\n     * @param entry {Map} The entry to process\r\n     */\r\n    process(entry) {\r\n      this.addEntry(entry);\r\n    },\r\n\r\n    /**\r\n     * Returns all stored log events\r\n     *\r\n     * @return {Array} array of stored log events\r\n     */\r\n    getAllLogEvents() {\r\n      return this.getAllEntries();\r\n    },\r\n\r\n    /**\r\n     * Returns log events which have been logged previously.\r\n     *\r\n     * @param count {Integer} The number of events to retrieve. If there are\r\n     *    more events than the given count, the oldest ones will not be returned.\r\n     *\r\n     * @param startingFromMark {Boolean ? false} If true, only entries since the last call to mark()\r\n     *                                           will be returned\r\n     * @return {Array} array of stored log events\r\n     */\r\n    retrieveLogEvents(count, startingFromMark) {\r\n      return this.getEntries(count, startingFromMark);\r\n    },\r\n\r\n    /**\r\n     * Clears the log history\r\n     */\r\n    clearHistory() {\r\n      this.clear();\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,4BAA4B,EAAE;IAChDC,MAAM,EAAEL,EAAE,CAACM,IAAI,CAACC,UAAU;IAE1B;AACF;AACA;IACEC,SAAS,WAAAA,UAACC,WAAW,EAAE;MACrB,IAAI,CAACC,cAAc,CAACD,WAAW,IAAI,EAAE,CAAC;IACxC,CAAC;IAEDE,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACID,cAAc,WAAAA,eAACD,WAAW,EAAE;QAC1B,IAAI,CAACG,aAAa,CAACH,WAAW,CAAC;MACjC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACII,cAAc,WAAAA,eAAA,EAAG;QACf,OAAO,IAAI,CAACC,aAAa,CAAC,CAAC;MAC7B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAACC,KAAK,EAAE;QACb,IAAI,CAACC,QAAQ,CAACD,KAAK,CAAC;MACtB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIE,eAAe,WAAAA,gBAAA,EAAG;QAChB,OAAO,IAAI,CAACC,aAAa,CAAC,CAAC;MAC7B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,iBAAiB,WAAAA,kBAACC,KAAK,EAAEC,gBAAgB,EAAE;QACzC,OAAO,IAAI,CAACC,UAAU,CAACF,KAAK,EAAEC,gBAAgB,CAAC;MACjD,CAAC;MAED;AACJ;AACA;MACIE,YAAY,WAAAA,aAAA,EAAG;QACb,IAAI,CAACC,KAAK,CAAC,CAAC;MACd;IACF;EACF,CAAC,CAAC;EAtGFzB,EAAE,CAAC0B,GAAG,CAACC,QAAQ,CAACpB,UAAU,CAACJ,aAAa,GAAGA,aAAa;AAAC"
}