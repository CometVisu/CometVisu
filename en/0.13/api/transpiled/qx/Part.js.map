{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "loader",
    "bootPackageKey",
    "parts",
    "boot",
    "__loader",
    "__partListners",
    "__packageListeners",
    "__packageClosureListeners",
    "__packages",
    "key",
    "packages",
    "pkg",
    "io",
    "part",
    "Package",
    "__decodeUris",
    "uris",
    "__parts",
    "closureParts",
    "name",
    "pkgKeys",
    "i",
    "length",
    "push",
    "ClosurePart",
    "Part",
    "statics",
    "TIMEOUT",
    "getInstance",
    "$$instance",
    "$$loader",
    "require",
    "partNames",
    "callback",
    "self",
    "preload",
    "$$notifyLoad",
    "id",
    "closure",
    "saveClosure",
    "members",
    "addToPackage",
    "getId",
    "Error",
    "listeners",
    "getParts",
    "window",
    "isString",
    "undefined",
    "registeredPartNames",
    "keys",
    "join",
    "partsLoaded",
    "onLoad",
    "states",
    "getReadyState",
    "call",
    "load",
    "partsPreloaded",
    "__getUris",
    "__P_93_7",
    "decodeUris",
    "addPartListener",
    "getName",
    "onpart",
    "notifyPartResult",
    "addPackageListener",
    "notifyPackageResult"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/Part.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The part loader knows about all generated packages and parts.\n *\n * It contains functionality to load parts.\n */\nqx.Bootstrap.define(\"qx.Part\", {\n  // !! Careful when editing this file. Do not extend the dependencies !!\n\n  /**\n   * @param loader {Object} The data structure from the boot script about all\n   *   known parts and packages. Usually <code>qx.$$loader</code>.\n   */\n  construct(loader) {\n    // assert: boot part has a single package\n    var bootPackageKey = loader.parts[loader.boot][0];\n\n    this.__loader = loader;\n\n    // initialize the pseudo event listener maps\n    this.__partListners = {};\n    this.__packageListeners = {};\n    this.__packageClosureListeners = {};\n\n    // create the packages\n    this.__packages = {};\n    for (var key in loader.packages) {\n      var pkg = new qx.io.part.Package(\n        this.__decodeUris(loader.packages[key].uris),\n        key,\n        key == bootPackageKey\n      );\n\n      this.__packages[key] = pkg;\n    }\n\n    // create the parts\n    this.__parts = {};\n    var parts = loader.parts;\n    var closureParts = loader.closureParts || {};\n\n    for (var name in parts) {\n      var pkgKeys = parts[name];\n      var packages = [];\n      for (var i = 0; i < pkgKeys.length; i++) {\n        packages.push(this.__packages[pkgKeys[i]]);\n      }\n\n      // check for closure loading\n      if (closureParts[name]) {\n        var part = new qx.io.part.ClosurePart(name, packages, this);\n      } else {\n        var part = new qx.io.part.Part(name, packages, this);\n      }\n\n      this.__parts[name] = part;\n    }\n  },\n\n  statics: {\n    /**\n     * Default timeout in ms for the error handling of the closure loading.\n     */\n    TIMEOUT: 7500,\n\n    /**\n     * Get the default part loader instance\n     *\n     * @return {qx.Part} the default part loader\n     */\n    getInstance() {\n      if (!this.$$instance) {\n        this.$$instance = new this(qx.$$loader);\n      }\n      return this.$$instance;\n    },\n\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String[]} List of parts names to load as defined in the\n     *    config file at compile time.\n     * @param callback {Function} Function to execute on completion\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require(partNames, callback, self) {\n      this.getInstance().require(partNames, callback, self);\n    },\n\n    /**\n     * Preloads one or more closure parts but does not execute them. This means\n     * the closure (the whole code of the part) is already loaded but not\n     * executed so you can't use the classes in the the part after a preload.\n     * If you want to execute them, just use the regular {@link #require}\n     * function.\n     *\n     * @param partNames {String[]} List of parts names to preload as defined\n     *   in the config file at compile time.\n     */\n    preload(partNames) {\n      this.getInstance().preload(partNames);\n    },\n\n    /**\n     * Loaded closure packages have to call this method to indicate\n     * successful loading and to get their closure stored.\n     *\n     * @param id {String} The id of the package.\n     * @param closure {Function} The wrapped code of the package.\n     */\n    $$notifyLoad(id, closure) {\n      this.getInstance().saveClosure(id, closure);\n    }\n  },\n\n  members: {\n    __loader: null,\n    __packages: null,\n    __parts: null,\n    __packageClosureListeners: null,\n\n    /**\n     * This method is only for testing purposes! Don't use it!\n     *\n     * @internal\n     * @param pkg {qx.io.part.Package} The package to add to the internal\n     *   registry of packages.\n     */\n    addToPackage(pkg) {\n      this.__packages[pkg.getId()] = pkg;\n    },\n\n    /**\n     * Internal helper method to save the closure and notify that the load.\n     *\n     * @internal\n     * @param id {String} The hash of the package.\n     * @param closure {Function} The code of the package wrappen into a closure.\n     */\n    saveClosure(id, closure) {\n      // search for the package\n      var pkg = this.__packages[id];\n\n      // error if no package could be found\n      if (!pkg) {\n        throw new Error(\"Package not available: \" + id);\n      }\n\n      // save the closure in the package itself\n      pkg.saveClosure(closure);\n\n      // call the listeners\n      var listeners = this.__packageClosureListeners[id];\n      if (!listeners) {\n        return;\n      }\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i](\"complete\", id);\n      }\n      // get rid of all closure package listeners for that package\n      this.__packageClosureListeners[id] = [];\n    },\n\n    /**\n     * Internal method for testing purposes which returns the internal parts\n     * store.\n     *\n     * @internal\n     * @return {Array} An array of parts.\n     */\n    getParts() {\n      return this.__parts;\n    },\n\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String|String[]} List of parts names to load as defined\n     *   in the config file at compile time. The method also accepts a single\n     *   string as parameter to only load one part.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require(partNames, callback, self) {\n      var callback = callback || function () {};\n      var self = self || window;\n\n      if (qx.Bootstrap.isString(partNames)) {\n        partNames = [partNames];\n      }\n\n      var parts = [];\n      for (var i = 0; i < partNames.length; i++) {\n        var part = this.__parts[partNames[i]];\n        if (part === undefined) {\n          var registeredPartNames = qx.Bootstrap.keys(this.getParts());\n          throw new Error(\n            'Part \"' +\n              partNames[i] +\n              '\" not found in parts (' +\n              registeredPartNames.join(\", \") +\n              \")\"\n          );\n        } else {\n          parts.push(part);\n        }\n      }\n\n      var partsLoaded = 0;\n      var onLoad = function () {\n        partsLoaded += 1;\n        // done?\n        if (partsLoaded >= parts.length) {\n          // gather the ready states of the parts\n          var states = [];\n          for (var i = 0; i < parts.length; i++) {\n            states.push(parts[i].getReadyState());\n          }\n          callback.call(self, states);\n        }\n      };\n\n      for (var i = 0; i < parts.length; i++) {\n        parts[i].load(onLoad, this);\n      }\n    },\n\n    /**\n     * Preloader for the given part.\n     *\n     * @param partNames {String} The hash of the part to preload.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    preload(partNames, callback, self) {\n      if (qx.Bootstrap.isString(partNames)) {\n        partNames = [partNames];\n      }\n\n      var partsPreloaded = 0;\n      for (var i = 0; i < partNames.length; i++) {\n        this.__parts[partNames[i]].preload(function () {\n          partsPreloaded++;\n\n          if (partsPreloaded >= partNames.length) {\n            // gather the ready states of the parts\n            var states = [];\n            for (var i = 0; i < partNames.length; i++) {\n              states.push(this.__parts[partNames[i]].getReadyState());\n            }\n            if (callback) {\n              callback.call(self, states);\n            }\n          }\n        }, this);\n      }\n    },\n\n    /**\n     * Get the URI lists of all packages\n     *\n     * @return {String[][]} Array of URI lists for each package\n     */\n    __getUris() {\n      var packages = this.__loader.packages;\n      var uris = [];\n      for (var key in packages) {\n        uris.push(this.__decodeUris(packages[key].uris));\n      }\n      return uris;\n    },\n\n    /**\n     * Decodes a list of source URIs. The function is defined in the loader\n     * script.\n     *\n     * @signature function(compressedUris)\n     * @param compressedUris {String[]} Array of compressed URIs\n     * @return {String[]} decompressed URIs\n     */\n    __decodeUris: qx.$$loader.decodeUris,\n\n    /*\n    ---------------------------------------------------------------------------\n      PART\n    ---------------------------------------------------------------------------\n    */\n\n    __partListners: null,\n\n    /**\n     * Register callback, which is called after the given part has been loaded\n     * or fails with an error. After the call the listener is removed.\n     *\n     * @internal\n     *\n     * @param part {Object} Part to load\n     * @param callback {Object} the listener\n     */\n    addPartListener(part, callback) {\n      var key = part.getName();\n      if (!this.__partListners[key]) {\n        this.__partListners[key] = [];\n      }\n      this.__partListners[key].push(callback);\n    },\n\n    /**\n     * If defined this method is called after each part load.\n     */\n    onpart: null,\n\n    /**\n     * This method is called after a part has been loaded or failed to load.\n     * It calls all listeners for this part.\n     *\n     * @internal\n     * @param part {Object} The loaded part\n     */\n    notifyPartResult(part) {\n      var key = part.getName();\n\n      var listeners = this.__partListners[key];\n      if (listeners) {\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i](part.getReadyState());\n        }\n        this.__partListners[key] = [];\n      }\n\n      if (typeof this.onpart === \"function\") {\n        this.onpart(part);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PACKAGE\n    ---------------------------------------------------------------------------\n    */\n\n    __packageListeners: null,\n\n    /**\n     * Register callback, which is called after the given package has been loaded\n     * or fails with an error. After the call the listener is removed.\n     *\n     * @internal\n     *\n     * @param pkg {Object} Package to load\n     * @param callback {Object} the listener\n     */\n    addPackageListener(pkg, callback) {\n      var key = pkg.getId();\n      if (!this.__packageListeners[key]) {\n        this.__packageListeners[key] = [];\n      }\n      this.__packageListeners[key].push(callback);\n    },\n\n    /**\n     * This method is called after a packages has been loaded or failed to load.\n     * It calls all listeners for this package.\n     *\n     * @internal\n     * @param pkg {Object} The loaded package\n     */\n    notifyPackageResult(pkg) {\n      var key = pkg.getId();\n\n      var listeners = this.__packageListeners[key];\n      if (!listeners) {\n        return;\n      }\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i](pkg.getReadyState());\n      }\n      this.__packageListeners[key] = [];\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}