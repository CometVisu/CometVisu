{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "loader",
    "bootPackageKey",
    "parts",
    "boot",
    "__loader",
    "__partListners",
    "__packageListeners",
    "__packageClosureListeners",
    "__packages",
    "key",
    "packages",
    "pkg",
    "io",
    "part",
    "Package",
    "__decodeUris",
    "uris",
    "__parts",
    "closureParts",
    "name",
    "pkgKeys",
    "i",
    "length",
    "push",
    "ClosurePart",
    "Part",
    "statics",
    "TIMEOUT",
    "getInstance",
    "$$instance",
    "$$loader",
    "require",
    "partNames",
    "callback",
    "self",
    "preload",
    "$$notifyLoad",
    "id",
    "closure",
    "saveClosure",
    "members",
    "addToPackage",
    "getId",
    "Error",
    "listeners",
    "getParts",
    "window",
    "isString",
    "undefined",
    "registeredPartNames",
    "keys",
    "join",
    "partsLoaded",
    "onLoad",
    "states",
    "getReadyState",
    "call",
    "load",
    "partsPreloaded",
    "__getUris",
    "decodeUris",
    "addPartListener",
    "getName",
    "onpart",
    "notifyPartResult",
    "addPackageListener",
    "notifyPackageResult"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/Part.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The part loader knows about all generated packages and parts.\n *\n * It contains functionality to load parts.\n */\nqx.Bootstrap.define(\"qx.Part\", {\n  // !! Careful when editing this file. Do not extend the dependencies !!\n\n  /**\n   * @param loader {Object} The data structure from the boot script about all\n   *   known parts and packages. Usually <code>qx.$$loader</code>.\n   */\n  construct(loader) {\n    // assert: boot part has a single package\n    var bootPackageKey = loader.parts[loader.boot][0];\n\n    this.__loader = loader;\n\n    // initialize the pseudo event listener maps\n    this.__partListners = {};\n    this.__packageListeners = {};\n    this.__packageClosureListeners = {};\n\n    // create the packages\n    this.__packages = {};\n    for (var key in loader.packages) {\n      var pkg = new qx.io.part.Package(\n        this.__decodeUris(loader.packages[key].uris),\n        key,\n        key == bootPackageKey\n      );\n\n      this.__packages[key] = pkg;\n    }\n\n    // create the parts\n    this.__parts = {};\n    var parts = loader.parts;\n    var closureParts = loader.closureParts || {};\n\n    for (var name in parts) {\n      var pkgKeys = parts[name];\n      var packages = [];\n      for (var i = 0; i < pkgKeys.length; i++) {\n        packages.push(this.__packages[pkgKeys[i]]);\n      }\n\n      // check for closure loading\n      if (closureParts[name]) {\n        var part = new qx.io.part.ClosurePart(name, packages, this);\n      } else {\n        var part = new qx.io.part.Part(name, packages, this);\n      }\n\n      this.__parts[name] = part;\n    }\n  },\n\n  statics: {\n    /**\n     * Default timeout in ms for the error handling of the closure loading.\n     */\n    TIMEOUT: 7500,\n\n    /**\n     * Get the default part loader instance\n     *\n     * @return {qx.Part} the default part loader\n     */\n    getInstance() {\n      if (!this.$$instance) {\n        this.$$instance = new this(qx.$$loader);\n      }\n      return this.$$instance;\n    },\n\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String[]} List of parts names to load as defined in the\n     *    config file at compile time.\n     * @param callback {Function} Function to execute on completion\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require(partNames, callback, self) {\n      this.getInstance().require(partNames, callback, self);\n    },\n\n    /**\n     * Preloads one or more closure parts but does not execute them. This means\n     * the closure (the whole code of the part) is already loaded but not\n     * executed so you can't use the classes in the the part after a preload.\n     * If you want to execute them, just use the regular {@link #require}\n     * function.\n     *\n     * @param partNames {String[]} List of parts names to preload as defined\n     *   in the config file at compile time.\n     */\n    preload(partNames) {\n      this.getInstance().preload(partNames);\n    },\n\n    /**\n     * Loaded closure packages have to call this method to indicate\n     * successful loading and to get their closure stored.\n     *\n     * @param id {String} The id of the package.\n     * @param closure {Function} The wrapped code of the package.\n     */\n    $$notifyLoad(id, closure) {\n      this.getInstance().saveClosure(id, closure);\n    }\n  },\n\n  members: {\n    __loader: null,\n    __packages: null,\n    __parts: null,\n    __packageClosureListeners: null,\n\n    /**\n     * This method is only for testing purposes! Don't use it!\n     *\n     * @internal\n     * @param pkg {qx.io.part.Package} The package to add to the internal\n     *   registry of packages.\n     */\n    addToPackage(pkg) {\n      this.__packages[pkg.getId()] = pkg;\n    },\n\n    /**\n     * Internal helper method to save the closure and notify that the load.\n     *\n     * @internal\n     * @param id {String} The hash of the package.\n     * @param closure {Function} The code of the package wrappen into a closure.\n     */\n    saveClosure(id, closure) {\n      // search for the package\n      var pkg = this.__packages[id];\n\n      // error if no package could be found\n      if (!pkg) {\n        throw new Error(\"Package not available: \" + id);\n      }\n\n      // save the closure in the package itself\n      pkg.saveClosure(closure);\n\n      // call the listeners\n      var listeners = this.__packageClosureListeners[id];\n      if (!listeners) {\n        return;\n      }\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i](\"complete\", id);\n      }\n      // get rid of all closure package listeners for that package\n      this.__packageClosureListeners[id] = [];\n    },\n\n    /**\n     * Internal method for testing purposes which returns the internal parts\n     * store.\n     *\n     * @internal\n     * @return {Array} An array of parts.\n     */\n    getParts() {\n      return this.__parts;\n    },\n\n    /**\n     * Loads one or more parts asynchronously. The callback is called after all\n     * parts and their dependencies are fully loaded. If the parts are already\n     * loaded the callback is called immediately.\n     *\n     * @param partNames {String|String[]} List of parts names to load as defined\n     *   in the config file at compile time. The method also accepts a single\n     *   string as parameter to only load one part.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    require(partNames, callback, self) {\n      var callback = callback || function () {};\n      var self = self || window;\n\n      if (qx.Bootstrap.isString(partNames)) {\n        partNames = [partNames];\n      }\n\n      var parts = [];\n      for (var i = 0; i < partNames.length; i++) {\n        var part = this.__parts[partNames[i]];\n        if (part === undefined) {\n          var registeredPartNames = qx.Bootstrap.keys(this.getParts());\n          throw new Error(\n            'Part \"' +\n              partNames[i] +\n              '\" not found in parts (' +\n              registeredPartNames.join(\", \") +\n              \")\"\n          );\n        } else {\n          parts.push(part);\n        }\n      }\n\n      var partsLoaded = 0;\n      var onLoad = function () {\n        partsLoaded += 1;\n        // done?\n        if (partsLoaded >= parts.length) {\n          // gather the ready states of the parts\n          var states = [];\n          for (var i = 0; i < parts.length; i++) {\n            states.push(parts[i].getReadyState());\n          }\n          callback.call(self, states);\n        }\n      };\n\n      for (var i = 0; i < parts.length; i++) {\n        parts[i].load(onLoad, this);\n      }\n    },\n\n    /**\n     * Preloader for the given part.\n     *\n     * @param partNames {String} The hash of the part to preload.\n     * @param callback {Function} Function to execute on completion.\n     *   The function has one parameter which is an array of ready states of\n     *   the parts specified in the partNames argument.\n     * @param self {Object?window} Context to execute the given function in\n     */\n    preload(partNames, callback, self) {\n      if (qx.Bootstrap.isString(partNames)) {\n        partNames = [partNames];\n      }\n\n      var partsPreloaded = 0;\n      for (var i = 0; i < partNames.length; i++) {\n        this.__parts[partNames[i]].preload(function () {\n          partsPreloaded++;\n\n          if (partsPreloaded >= partNames.length) {\n            // gather the ready states of the parts\n            var states = [];\n            for (var i = 0; i < partNames.length; i++) {\n              states.push(this.__parts[partNames[i]].getReadyState());\n            }\n            if (callback) {\n              callback.call(self, states);\n            }\n          }\n        }, this);\n      }\n    },\n\n    /**\n     * Get the URI lists of all packages\n     *\n     * @return {String[][]} Array of URI lists for each package\n     */\n    __getUris() {\n      var packages = this.__loader.packages;\n      var uris = [];\n      for (var key in packages) {\n        uris.push(this.__decodeUris(packages[key].uris));\n      }\n      return uris;\n    },\n\n    /**\n     * Decodes a list of source URIs. The function is defined in the loader\n     * script.\n     *\n     * @signature function(compressedUris)\n     * @param compressedUris {String[]} Array of compressed URIs\n     * @return {String[]} decompressed URIs\n     */\n    __decodeUris: qx.$$loader.decodeUris,\n\n    /*\n    ---------------------------------------------------------------------------\n      PART\n    ---------------------------------------------------------------------------\n    */\n\n    __partListners: null,\n\n    /**\n     * Register callback, which is called after the given part has been loaded\n     * or fails with an error. After the call the listener is removed.\n     *\n     * @internal\n     *\n     * @param part {Object} Part to load\n     * @param callback {Object} the listener\n     */\n    addPartListener(part, callback) {\n      var key = part.getName();\n      if (!this.__partListners[key]) {\n        this.__partListners[key] = [];\n      }\n      this.__partListners[key].push(callback);\n    },\n\n    /**\n     * If defined this method is called after each part load.\n     */\n    onpart: null,\n\n    /**\n     * This method is called after a part has been loaded or failed to load.\n     * It calls all listeners for this part.\n     *\n     * @internal\n     * @param part {Object} The loaded part\n     */\n    notifyPartResult(part) {\n      var key = part.getName();\n\n      var listeners = this.__partListners[key];\n      if (listeners) {\n        for (var i = 0; i < listeners.length; i++) {\n          listeners[i](part.getReadyState());\n        }\n        this.__partListners[key] = [];\n      }\n\n      if (typeof this.onpart === \"function\") {\n        this.onpart(part);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PACKAGE\n    ---------------------------------------------------------------------------\n    */\n\n    __packageListeners: null,\n\n    /**\n     * Register callback, which is called after the given package has been loaded\n     * or fails with an error. After the call the listener is removed.\n     *\n     * @internal\n     *\n     * @param pkg {Object} Package to load\n     * @param callback {Object} the listener\n     */\n    addPackageListener(pkg, callback) {\n      var key = pkg.getId();\n      if (!this.__packageListeners[key]) {\n        this.__packageListeners[key] = [];\n      }\n      this.__packageListeners[key].push(callback);\n    },\n\n    /**\n     * This method is called after a packages has been loaded or failed to load.\n     * It calls all listeners for this package.\n     *\n     * @internal\n     * @param pkg {Object} The loaded package\n     */\n    notifyPackageResult(pkg) {\n      var key = pkg.getId();\n\n      var listeners = this.__packageListeners[key];\n      if (!listeners) {\n        return;\n      }\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i](pkg.getReadyState());\n      }\n      this.__packageListeners[key] = [];\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}