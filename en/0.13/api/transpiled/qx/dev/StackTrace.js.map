{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "FILENAME_TO_CLASSNAME",
    "FORMAT_STACKTRACE",
    "getStackTrace",
    "trace",
    "Error",
    "ex",
    "dev",
    "StackTrace",
    "hasEnvironmentCheck",
    "core",
    "Environment",
    "get",
    "errorTrace",
    "getStackTraceFromError",
    "callerTrace",
    "getStackTraceFromCaller",
    "arguments",
    "lang",
    "Array",
    "removeAt",
    "length",
    "i",
    "Math",
    "min",
    "callerCall",
    "indexOf",
    "methodName",
    "callerArr",
    "split",
    "mO",
    "exec",
    "pop",
    "callerClassName",
    "join",
    "errorCall",
    "errorArr",
    "errorClassName",
    "lineNumber",
    "columnNumber",
    "className",
    "Class",
    "getByName",
    "line",
    "args",
    "isStrictMode",
    "fcn",
    "Function",
    "getCaller",
    "knownFunction",
    "fcnName",
    "getName",
    "push",
    "caller",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "error",
    "lineRe",
    "hit",
    "fileName",
    "url",
    "traceProp",
    "stack",
    "__fileNameToClassName",
    "__formatStackTrace",
    "fileReParens",
    "fileRe",
    "fileMatch",
    "stacktrace",
    "message",
    "traceString",
    "trim",
    "lines",
    "reResult",
    "match",
    "sourceURL",
    "convertedName",
    "Type",
    "isString",
    "__fileNameToClassNameDefault",
    "scriptDir",
    "jsPos",
    "paramPos",
    "substring",
    "replace",
    "isArray",
    "defer",
    "bom",
    "client",
    "EcmaScript"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/StackTrace.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Methods to get information about the JavaScript call stack.\n *\n * @require(qx.lang.normalize.String)\n * @ignore(qx.bom.client.EcmaScript.*)\n * @ignore(qx.bom.client)\n * @ignore(qx.bom)\n * @ignore(qx.Class.*)\n */\nqx.Bootstrap.define(\"qx.dev.StackTrace\", {\n  statics: {\n    /**\n     * Optional user-defined function to convert source file names into readable\n     * class names. Will be called with the source file name extracted from the\n     * browser's stack trace information as the only argument. The returned\n     * string is used in the output of {@link #getStackTraceFromError}\n     */\n    FILENAME_TO_CLASSNAME: null,\n\n    /**\n     * Optional user-defined formatting function for stack trace information.\n     * Will be called by with an array of strings representing the calls in the\n     * stack trace. {@link #getStackTraceFromError} will return the output of\n     * this function. Must return an array of strings.\n     */\n    FORMAT_STACKTRACE: null,\n\n    /**\n     * Get a stack trace of the current position in the code.\n     *\n     * Browser compatibility:\n     * <ul>\n     *   <li>In new versions of Gecko, WebKit and Opera, the output of\n     *   {@link #getStackTraceFromError} and {@link #getStackTraceFromCaller} is\n     *   combined to generate the richest trace, including line numbers.</li>\n     *   <li>For Internet Explorer (and other engines that do not provide stack\n     *    traces), {@link #getStackTraceFromCaller} is used</li>\n     * </ul>\n     *\n     * @return {String[]} Stack trace of the current position in the code. Each line in the array\n     *     represents one call in the stack trace.\n     */\n    getStackTrace() {\n      var trace = [];\n      try {\n        throw new Error();\n      } catch (ex) {\n        if (\n          qx.dev.StackTrace.hasEnvironmentCheck &&\n          qx.core.Environment.get(\"ecmascript.error.stacktrace\")\n        ) {\n          var errorTrace = qx.dev.StackTrace.getStackTraceFromError(ex);\n          var callerTrace =\n            qx.dev.StackTrace.getStackTraceFromCaller(arguments);\n          qx.lang.Array.removeAt(errorTrace, 0);\n\n          trace =\n            callerTrace.length > errorTrace.length ? callerTrace : errorTrace;\n          for (\n            var i = 0;\n            i < Math.min(callerTrace.length, errorTrace.length);\n            i++\n          ) {\n            var callerCall = callerTrace[i];\n            if (callerCall.indexOf(\"anonymous\") >= 0) {\n              continue;\n            }\n\n            var methodName = null;\n            var callerArr = callerCall.split(\".\");\n            var mO = /(.*?)\\(/.exec(callerArr[callerArr.length - 1]);\n            if (mO && mO.length == 2) {\n              methodName = mO[1];\n              callerArr.pop();\n            }\n            if (callerArr[callerArr.length - 1] == \"prototype\") {\n              callerArr.pop();\n            }\n            var callerClassName = callerArr.join(\".\");\n\n            var errorCall = errorTrace[i];\n            var errorArr = errorCall.split(\":\");\n            var errorClassName = errorArr[0];\n            var lineNumber = errorArr[1];\n            var columnNumber;\n            if (errorArr[2]) {\n              columnNumber = errorArr[2];\n            }\n\n            var className = null;\n            if (qx.Class && qx.Class.getByName(errorClassName)) {\n              className = errorClassName;\n            } else {\n              className = callerClassName;\n            }\n            var line = className;\n            if (methodName) {\n              line += \".\" + methodName;\n            }\n            line += \":\" + lineNumber;\n            if (columnNumber) {\n              line += \":\" + columnNumber;\n            }\n            trace[i] = line;\n          }\n        } else {\n          trace = this.getStackTraceFromCaller(arguments);\n        }\n      }\n\n      return trace;\n    },\n\n    /**\n     * Get a stack trace from the arguments special variable using the\n     * <code>caller</code> property.\n     *\n     * This methods returns class/mixin and function names of each step\n     * in the call stack.\n     *\n     * Recursion is not supported.\n     *\n     * @param args {arguments} arguments variable.\n     * @return {String[]} Stack trace of caller of the function the arguments variable belongs to.\n     *     Each line in the array represents one call in the stack trace.\n     * @signature function(args)\n     */\n    getStackTraceFromCaller(args) {\n      var isStrictMode = function () {\n        return typeof this == \"undefined\";\n      };\n\n      var trace = [];\n      var fcn = null;\n      if (!isStrictMode()) {\n        try {\n          fcn = qx.lang.Function.getCaller(args);\n        } catch (ex) {\n          // Nothing\n        }\n      }\n      var knownFunction = {};\n      while (fcn) {\n        var fcnName = qx.lang.Function.getName(fcn);\n        trace.push(fcnName);\n\n        try {\n          fcn = fcn.caller;\n        } catch (ex) {\n          break;\n        }\n\n        if (!fcn) {\n          break;\n        }\n\n        // avoid infinite recursion\n        var hash = qx.core.ObjectRegistry.toHashCode(fcn);\n        if (knownFunction[hash]) {\n          trace.push(\"...\");\n          break;\n        }\n        knownFunction[hash] = fcn;\n      }\n      return trace;\n    },\n\n    /**\n     * Try to get a stack trace from an Error object. Mozilla sets the field\n     * <code>stack</code> for Error objects thrown using <code>throw new Error()</code>.\n     * From this field it is possible to get a stack trace from the position\n     * the exception was thrown at.\n     *\n     * This will get the JavaScript file names and the line numbers of each call.\n     * The file names are converted into qooxdoo class names if possible (customizable\n     * via {@link #FILENAME_TO_CLASSNAME}).\n     *\n     * The stack trace can be custom formatted using {@link #FORMAT_STACKTRACE}.\n     *\n     * This works reliably in Gecko-based browsers. Later Opera versions and\n     * Chrome also provide a useful stack trace. For Safari, only the class or\n     * file name and line number where the error occurred are returned.\n     * IE 6/7/8/9 does not attach any stack information to error objects so an\n     * empty array is returned.\n     *\n     * @param error {Error} Error exception instance.\n     * @return {String[]} Stack trace of the exception. Each line in the array\n     *     represents one call in the stack trace.\n     */\n    getStackTraceFromError(error) {\n      var trace = [];\n      var lineRe, hit, className, lineNumber, columnNumber, fileName, url;\n\n      var traceProp = qx.dev.StackTrace.hasEnvironmentCheck\n        ? qx.core.Environment.get(\"ecmascript.error.stacktrace\")\n        : null;\n\n      if (traceProp === \"stack\") {\n        if (!error.stack) {\n          return trace;\n        }\n        // Gecko style, e.g. \"()@http://localhost:8080/webcomponent-test-SNAPSHOT/webcomponent/js/com/ptvag/webcomponent/common/log/Logger:253\"\n        lineRe = /@(.+):(\\d+)$/gm;\n\n        while ((hit = lineRe.exec(error.stack)) != null) {\n          url = hit[1];\n          lineNumber = hit[2];\n\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber);\n        }\n\n        if (trace.length > 0) {\n          return this.__formatStackTrace(trace);\n        }\n        /*\n         * Chrome trace info comes in three flavors:\n         * at [jsObject].function (fileUrl:line:char)\n         * at [jsObject].function() [as something] (fileUrl:line:char)\n         * at fileUrl:line:char\n         */\n        lineRe = /at (.*)/gm;\n        var fileReParens = /(\\(\\) \\[as [^\\]]+\\]\\s)?\\((.*?)(:[\\d:]+)\\)/;\n        var fileRe = /(.*?)(:[\\d:]+$)/;\n        while ((hit = lineRe.exec(error.stack)) != null) {\n          var fileMatch = fileReParens.exec(hit[1]);\n          if (fileMatch) {\n            className = this.__fileNameToClassName(fileMatch[2]);\n            trace.push(className + fileMatch[3]);\n          } else {\n            fileMatch = fileRe.exec(hit[1]);\n            if (fileMatch) {\n              className = this.__fileNameToClassName(fileMatch[1]);\n              trace.push(className + fileMatch[2]);\n            } else {\n              trace.push(hit[1]);\n            }\n          }\n        }\n      } else if (traceProp === \"stacktrace\") {\n        // Opera\n        var stacktrace = error.stacktrace;\n        if (!stacktrace) {\n          return trace;\n        }\n        if (stacktrace.indexOf(\"Error created at\") >= 0) {\n          stacktrace = stacktrace.split(\"Error created at\")[0];\n        }\n\n        // new Opera style (10.6+)\n        lineRe =\n          /line\\ (\\d+?),\\ column\\ (\\d+?)\\ in\\ (?:.*?)\\ in\\ (.*?):[^\\/]/gm;\n        while ((hit = lineRe.exec(stacktrace)) != null) {\n          lineNumber = hit[1];\n          columnNumber = hit[2];\n          url = hit[3];\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber + \":\" + columnNumber);\n        }\n\n        if (trace.length > 0) {\n          return this.__formatStackTrace(trace);\n        }\n\n        // older Opera style\n        lineRe = /Line\\ (\\d+?)\\ of\\ linked\\ script\\ (.*?)$/gm;\n        while ((hit = lineRe.exec(stacktrace)) != null) {\n          lineNumber = hit[1];\n          url = hit[2];\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber);\n        }\n      } else if (error.message && error.message.indexOf(\"Backtrace:\") >= 0) {\n        // Some old Opera versions append the trace to the message property\n        var traceString = error.message.split(\"Backtrace:\")[1].trim();\n        var lines = traceString.split(\"\\n\");\n        for (var i = 0; i < lines.length; i++) {\n          var reResult = lines[i].match(/\\s*Line ([0-9]+) of.* (\\S.*)/);\n          if (reResult && reResult.length >= 2) {\n            lineNumber = reResult[1];\n            fileName = this.__fileNameToClassName(reResult[2]);\n            trace.push(fileName + \":\" + lineNumber);\n          }\n        }\n      } else if (error.sourceURL && error.line) {\n        // Safari\n        trace.push(\n          this.__fileNameToClassName(error.sourceURL) + \":\" + error.line\n        );\n      }\n\n      return this.__formatStackTrace(trace);\n    },\n\n    /**\n     * Converts the URL of a JavaScript file to a class name using either a\n     * user-defined ({@link #FILENAME_TO_CLASSNAME}) or default\n     * ({@link #__fileNameToClassNameDefault}) converter\n     *\n     * @param fileName {String} URL of the JavaScript file\n     * @return {String} Result of the conversion\n     */\n    __fileNameToClassName(fileName) {\n      if (typeof qx.dev.StackTrace.FILENAME_TO_CLASSNAME == \"function\") {\n        var convertedName = qx.dev.StackTrace.FILENAME_TO_CLASSNAME(fileName);\n        if (\n          qx.core.Environment.get(\"qx.debug\") &&\n          !qx.lang.Type.isString(convertedName)\n        ) {\n          throw new Error(\"FILENAME_TO_CLASSNAME must return a string!\");\n        }\n        return convertedName;\n      }\n\n      return qx.dev.StackTrace.__fileNameToClassNameDefault(fileName);\n    },\n\n    /**\n     * Converts the URL of a JavaScript file to a class name if the file is\n     * named using the qooxdoo naming conventions.\n     *\n     * @param fileName {String} URL of the JavaScript file\n     * @return {String} class name of the file if conversion was possible.\n     * Otherwise the fileName is returned unmodified.\n     */\n    __fileNameToClassNameDefault(fileName) {\n      var scriptDir = \"/source/class/\";\n      var jsPos = fileName.indexOf(scriptDir);\n      if (jsPos < 0) {\n        scriptDir = \"/transpiled/\";\n        jsPos = fileName.indexOf(scriptDir);\n      }\n      var paramPos = fileName.indexOf(\"?\");\n      if (paramPos >= 0) {\n        fileName = fileName.substring(0, paramPos);\n      }\n      var className =\n        jsPos == -1\n          ? fileName\n          : fileName\n              .substring(jsPos + scriptDir.length)\n              .replace(/\\//g, \".\")\n              .replace(/\\.js$/, \"\");\n      return className;\n    },\n\n    /**\n     * Runs the given stack trace array through the formatter function\n     * ({@link #FORMAT_STACKTRACE}) if available and returns it. Otherwise, the\n     * original array is returned\n     *\n     * @param trace {String[]} Stack trace information\n     * @return {String[]} Formatted stack trace info\n     */\n    __formatStackTrace(trace) {\n      if (typeof qx.dev.StackTrace.FORMAT_STACKTRACE == \"function\") {\n        trace = qx.dev.StackTrace.FORMAT_STACKTRACE(trace);\n        // Can't use qx.core.Assert here since it throws an AssertionError which\n        // calls getStackTrace in its constructor, leading to infinite recursion\n        if (\n          qx.core.Environment.get(\"qx.debug\") &&\n          !qx.lang.Type.isArray(trace)\n        ) {\n          throw new Error(\"FORMAT_STACKTRACE must return an array of strings!\");\n        }\n      }\n      return trace;\n    }\n  },\n\n  defer(statics) {\n    // This is necessary to avoid an infinite loop when logging the absence\n    // of the \"ecmascript.error.stacktrace\" environment key.\n    statics.hasEnvironmentCheck =\n      qx.bom &&\n      qx.bom.client &&\n      qx.bom.client.EcmaScript &&\n      qx.bom.client.EcmaScript.getStackTrace;\n  }\n});\n"
  ],
  "mappings": "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"
}