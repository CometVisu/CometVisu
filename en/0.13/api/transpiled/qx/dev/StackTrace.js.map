{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "FILENAME_TO_CLASSNAME",
    "FORMAT_STACKTRACE",
    "getStackTrace",
    "trace",
    "Error",
    "ex",
    "dev",
    "StackTrace",
    "hasEnvironmentCheck",
    "core",
    "Environment",
    "get",
    "errorTrace",
    "getStackTraceFromError",
    "callerTrace",
    "getStackTraceFromCaller",
    "arguments",
    "lang",
    "Array",
    "removeAt",
    "length",
    "i",
    "Math",
    "min",
    "callerCall",
    "indexOf",
    "methodName",
    "callerArr",
    "split",
    "mO",
    "exec",
    "pop",
    "callerClassName",
    "join",
    "errorCall",
    "errorArr",
    "errorClassName",
    "lineNumber",
    "columnNumber",
    "className",
    "Class",
    "getByName",
    "line",
    "args",
    "isStrictMode",
    "fcn",
    "Function",
    "getCaller",
    "knownFunction",
    "fcnName",
    "getName",
    "push",
    "caller",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "error",
    "lineRe",
    "hit",
    "fileName",
    "url",
    "traceProp",
    "stack",
    "__fileNameToClassName",
    "__formatStackTrace",
    "fileReParens",
    "fileRe",
    "fileMatch",
    "stacktrace",
    "message",
    "traceString",
    "trim",
    "lines",
    "reResult",
    "match",
    "sourceURL",
    "convertedName",
    "Type",
    "isString",
    "__fileNameToClassNameDefault",
    "scriptDir",
    "jsPos",
    "paramPos",
    "substring",
    "replace",
    "isArray",
    "defer",
    "bom",
    "client",
    "EcmaScript"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/StackTrace.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Methods to get information about the JavaScript call stack.\n *\n * @require(qx.lang.normalize.String)\n * @ignore(qx.bom.client.EcmaScript.*)\n * @ignore(qx.bom.client)\n * @ignore(qx.bom)\n * @ignore(qx.Class.*)\n */\nqx.Bootstrap.define(\"qx.dev.StackTrace\", {\n  statics: {\n    /**\n     * Optional user-defined function to convert source file names into readable\n     * class names. Will be called with the source file name extracted from the\n     * browser's stack trace information as the only argument. The returned\n     * string is used in the output of {@link #getStackTraceFromError}\n     */\n    FILENAME_TO_CLASSNAME: null,\n\n    /**\n     * Optional user-defined formatting function for stack trace information.\n     * Will be called by with an array of strings representing the calls in the\n     * stack trace. {@link #getStackTraceFromError} will return the output of\n     * this function. Must return an array of strings.\n     */\n    FORMAT_STACKTRACE: null,\n\n    /**\n     * Get a stack trace of the current position in the code.\n     *\n     * Browser compatibility:\n     * <ul>\n     *   <li>In new versions of Gecko, WebKit and Opera, the output of\n     *   {@link #getStackTraceFromError} and {@link #getStackTraceFromCaller} is\n     *   combined to generate the richest trace, including line numbers.</li>\n     *   <li>For Internet Explorer (and other engines that do not provide stack\n     *    traces), {@link #getStackTraceFromCaller} is used</li>\n     * </ul>\n     *\n     * @return {String[]} Stack trace of the current position in the code. Each line in the array\n     *     represents one call in the stack trace.\n     */\n    getStackTrace() {\n      var trace = [];\n      try {\n        throw new Error();\n      } catch (ex) {\n        if (\n          qx.dev.StackTrace.hasEnvironmentCheck &&\n          qx.core.Environment.get(\"ecmascript.error.stacktrace\")\n        ) {\n          var errorTrace = qx.dev.StackTrace.getStackTraceFromError(ex);\n          var callerTrace =\n            qx.dev.StackTrace.getStackTraceFromCaller(arguments);\n          qx.lang.Array.removeAt(errorTrace, 0);\n\n          trace =\n            callerTrace.length > errorTrace.length ? callerTrace : errorTrace;\n          for (\n            var i = 0;\n            i < Math.min(callerTrace.length, errorTrace.length);\n            i++\n          ) {\n            var callerCall = callerTrace[i];\n            if (callerCall.indexOf(\"anonymous\") >= 0) {\n              continue;\n            }\n\n            var methodName = null;\n            var callerArr = callerCall.split(\".\");\n            var mO = /(.*?)\\(/.exec(callerArr[callerArr.length - 1]);\n            if (mO && mO.length == 2) {\n              methodName = mO[1];\n              callerArr.pop();\n            }\n            if (callerArr[callerArr.length - 1] == \"prototype\") {\n              callerArr.pop();\n            }\n            var callerClassName = callerArr.join(\".\");\n\n            var errorCall = errorTrace[i];\n            var errorArr = errorCall.split(\":\");\n            var errorClassName = errorArr[0];\n            var lineNumber = errorArr[1];\n            var columnNumber;\n            if (errorArr[2]) {\n              columnNumber = errorArr[2];\n            }\n\n            var className = null;\n            if (qx.Class && qx.Class.getByName(errorClassName)) {\n              className = errorClassName;\n            } else {\n              className = callerClassName;\n            }\n            var line = className;\n            if (methodName) {\n              line += \".\" + methodName;\n            }\n            line += \":\" + lineNumber;\n            if (columnNumber) {\n              line += \":\" + columnNumber;\n            }\n            trace[i] = line;\n          }\n        } else {\n          trace = this.getStackTraceFromCaller(arguments);\n        }\n      }\n\n      return trace;\n    },\n\n    /**\n     * Get a stack trace from the arguments special variable using the\n     * <code>caller</code> property.\n     *\n     * This methods returns class/mixin and function names of each step\n     * in the call stack.\n     *\n     * Recursion is not supported.\n     *\n     * @param args {arguments} arguments variable.\n     * @return {String[]} Stack trace of caller of the function the arguments variable belongs to.\n     *     Each line in the array represents one call in the stack trace.\n     * @signature function(args)\n     */\n    getStackTraceFromCaller(args) {\n      var isStrictMode = function () {\n        return typeof this == \"undefined\";\n      };\n\n      var trace = [];\n      var fcn = null;\n      if (!isStrictMode()) {\n        try {\n          fcn = qx.lang.Function.getCaller(args);\n        } catch (ex) {\n          // Nothing\n        }\n      }\n      var knownFunction = {};\n      while (fcn) {\n        var fcnName = qx.lang.Function.getName(fcn);\n        trace.push(fcnName);\n\n        try {\n          fcn = fcn.caller;\n        } catch (ex) {\n          break;\n        }\n\n        if (!fcn) {\n          break;\n        }\n\n        // avoid infinite recursion\n        var hash = qx.core.ObjectRegistry.toHashCode(fcn);\n        if (knownFunction[hash]) {\n          trace.push(\"...\");\n          break;\n        }\n        knownFunction[hash] = fcn;\n      }\n      return trace;\n    },\n\n    /**\n     * Try to get a stack trace from an Error object. Mozilla sets the field\n     * <code>stack</code> for Error objects thrown using <code>throw new Error()</code>.\n     * From this field it is possible to get a stack trace from the position\n     * the exception was thrown at.\n     *\n     * This will get the JavaScript file names and the line numbers of each call.\n     * The file names are converted into qooxdoo class names if possible (customizable\n     * via {@link #FILENAME_TO_CLASSNAME}).\n     *\n     * The stack trace can be custom formatted using {@link #FORMAT_STACKTRACE}.\n     *\n     * This works reliably in Gecko-based browsers. Later Opera versions and\n     * Chrome also provide a useful stack trace. For Safari, only the class or\n     * file name and line number where the error occurred are returned.\n     * IE 6/7/8/9 does not attach any stack information to error objects so an\n     * empty array is returned.\n     *\n     * @param error {Error} Error exception instance.\n     * @return {String[]} Stack trace of the exception. Each line in the array\n     *     represents one call in the stack trace.\n     */\n    getStackTraceFromError(error) {\n      var trace = [];\n      var lineRe, hit, className, lineNumber, columnNumber, fileName, url;\n\n      var traceProp = qx.dev.StackTrace.hasEnvironmentCheck\n        ? qx.core.Environment.get(\"ecmascript.error.stacktrace\")\n        : null;\n\n      if (traceProp === \"stack\") {\n        if (!error.stack) {\n          return trace;\n        }\n        // Gecko style, e.g. \"()@http://localhost:8080/webcomponent-test-SNAPSHOT/webcomponent/js/com/ptvag/webcomponent/common/log/Logger:253\"\n        lineRe = /@(.+):(\\d+)$/gm;\n\n        while ((hit = lineRe.exec(error.stack)) != null) {\n          url = hit[1];\n          lineNumber = hit[2];\n\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber);\n        }\n\n        if (trace.length > 0) {\n          return this.__formatStackTrace(trace);\n        }\n        /*\n         * Chrome trace info comes in three flavors:\n         * at [jsObject].function (fileUrl:line:char)\n         * at [jsObject].function() [as something] (fileUrl:line:char)\n         * at fileUrl:line:char\n         */\n        lineRe = /at (.*)/gm;\n        var fileReParens = /(\\(\\) \\[as [^\\]]+\\]\\s)?\\((.*?)(:[\\d:]+)\\)/;\n        var fileRe = /(.*?)(:[\\d:]+$)/;\n        while ((hit = lineRe.exec(error.stack)) != null) {\n          var fileMatch = fileReParens.exec(hit[1]);\n          if (fileMatch) {\n            className = this.__fileNameToClassName(fileMatch[2]);\n            trace.push(className + fileMatch[3]);\n          } else {\n            fileMatch = fileRe.exec(hit[1]);\n            if (fileMatch) {\n              className = this.__fileNameToClassName(fileMatch[1]);\n              trace.push(className + fileMatch[2]);\n            } else {\n              trace.push(hit[1]);\n            }\n          }\n        }\n      } else if (traceProp === \"stacktrace\") {\n        // Opera\n        var stacktrace = error.stacktrace;\n        if (!stacktrace) {\n          return trace;\n        }\n        if (stacktrace.indexOf(\"Error created at\") >= 0) {\n          stacktrace = stacktrace.split(\"Error created at\")[0];\n        }\n\n        // new Opera style (10.6+)\n        lineRe =\n          /line\\ (\\d+?),\\ column\\ (\\d+?)\\ in\\ (?:.*?)\\ in\\ (.*?):[^\\/]/gm;\n        while ((hit = lineRe.exec(stacktrace)) != null) {\n          lineNumber = hit[1];\n          columnNumber = hit[2];\n          url = hit[3];\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber + \":\" + columnNumber);\n        }\n\n        if (trace.length > 0) {\n          return this.__formatStackTrace(trace);\n        }\n\n        // older Opera style\n        lineRe = /Line\\ (\\d+?)\\ of\\ linked\\ script\\ (.*?)$/gm;\n        while ((hit = lineRe.exec(stacktrace)) != null) {\n          lineNumber = hit[1];\n          url = hit[2];\n          className = this.__fileNameToClassName(url);\n          trace.push(className + \":\" + lineNumber);\n        }\n      } else if (error.message && error.message.indexOf(\"Backtrace:\") >= 0) {\n        // Some old Opera versions append the trace to the message property\n        var traceString = error.message.split(\"Backtrace:\")[1].trim();\n        var lines = traceString.split(\"\\n\");\n        for (var i = 0; i < lines.length; i++) {\n          var reResult = lines[i].match(/\\s*Line ([0-9]+) of.* (\\S.*)/);\n          if (reResult && reResult.length >= 2) {\n            lineNumber = reResult[1];\n            fileName = this.__fileNameToClassName(reResult[2]);\n            trace.push(fileName + \":\" + lineNumber);\n          }\n        }\n      } else if (error.sourceURL && error.line) {\n        // Safari\n        trace.push(\n          this.__fileNameToClassName(error.sourceURL) + \":\" + error.line\n        );\n      }\n\n      return this.__formatStackTrace(trace);\n    },\n\n    /**\n     * Converts the URL of a JavaScript file to a class name using either a\n     * user-defined ({@link #FILENAME_TO_CLASSNAME}) or default\n     * ({@link #__fileNameToClassNameDefault}) converter\n     *\n     * @param fileName {String} URL of the JavaScript file\n     * @return {String} Result of the conversion\n     */\n    __fileNameToClassName(fileName) {\n      if (typeof qx.dev.StackTrace.FILENAME_TO_CLASSNAME == \"function\") {\n        var convertedName = qx.dev.StackTrace.FILENAME_TO_CLASSNAME(fileName);\n        if (\n          qx.core.Environment.get(\"qx.debug\") &&\n          !qx.lang.Type.isString(convertedName)\n        ) {\n          throw new Error(\"FILENAME_TO_CLASSNAME must return a string!\");\n        }\n        return convertedName;\n      }\n\n      return qx.dev.StackTrace.__fileNameToClassNameDefault(fileName);\n    },\n\n    /**\n     * Converts the URL of a JavaScript file to a class name if the file is\n     * named using the qooxdoo naming conventions.\n     *\n     * @param fileName {String} URL of the JavaScript file\n     * @return {String} class name of the file if conversion was possible.\n     * Otherwise the fileName is returned unmodified.\n     */\n    __fileNameToClassNameDefault(fileName) {\n      var scriptDir = \"/source/class/\";\n      var jsPos = fileName.indexOf(scriptDir);\n      if (jsPos < 0) {\n        scriptDir = \"/transpiled/\";\n        jsPos = fileName.indexOf(scriptDir);\n      }\n      var paramPos = fileName.indexOf(\"?\");\n      if (paramPos >= 0) {\n        fileName = fileName.substring(0, paramPos);\n      }\n      var className =\n        jsPos == -1\n          ? fileName\n          : fileName\n              .substring(jsPos + scriptDir.length)\n              .replace(/\\//g, \".\")\n              .replace(/\\.js$/, \"\");\n      return className;\n    },\n\n    /**\n     * Runs the given stack trace array through the formatter function\n     * ({@link #FORMAT_STACKTRACE}) if available and returns it. Otherwise, the\n     * original array is returned\n     *\n     * @param trace {String[]} Stack trace information\n     * @return {String[]} Formatted stack trace info\n     */\n    __formatStackTrace(trace) {\n      if (typeof qx.dev.StackTrace.FORMAT_STACKTRACE == \"function\") {\n        trace = qx.dev.StackTrace.FORMAT_STACKTRACE(trace);\n        // Can't use qx.core.Assert here since it throws an AssertionError which\n        // calls getStackTrace in its constructor, leading to infinite recursion\n        if (\n          qx.core.Environment.get(\"qx.debug\") &&\n          !qx.lang.Type.isArray(trace)\n        ) {\n          throw new Error(\"FORMAT_STACKTRACE must return an array of strings!\");\n        }\n      }\n      return trace;\n    }\n  },\n\n  defer(statics) {\n    // This is necessary to avoid an infinite loop when logging the absence\n    // of the \"ecmascript.error.stacktrace\" environment key.\n    statics.hasEnvironmentCheck =\n      qx.bom &&\n      qx.bom.client &&\n      qx.bom.client.EcmaScript &&\n      qx.bom.client.EcmaScript.getStackTrace;\n  }\n});\n"
  ],
  "mappings": "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"
}