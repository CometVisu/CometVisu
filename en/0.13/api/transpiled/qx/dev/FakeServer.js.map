{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "construct",
    "clazz",
    "dev",
    "FakeServer",
    "$$allowconstruct",
    "msg",
    "Error",
    "getFakeServer",
    "__responses",
    "statics",
    "$$instance",
    "getInstance",
    "members",
    "__sinon",
    "__fakeServer",
    "__filter",
    "configure",
    "responseData",
    "forEach",
    "item",
    "urlRegExp",
    "url",
    "RegExp",
    "_getRegExp",
    "response",
    "method",
    "hasResponse",
    "i",
    "l",
    "length",
    "old",
    "push",
    "respondWith",
    "bind",
    "filter",
    "__getCombinedFilter",
    "addFilter",
    "FakeXMLHttpRequest",
    "removeFilter",
    "lang",
    "Array",
    "remove",
    "filters",
    "removeResponse",
    "toString",
    "responses",
    "sinon",
    "unit",
    "Sinon",
    "getSinon",
    "useFilters",
    "useFakeServer",
    "autoRespond",
    "restore",
    "pattern",
    "replace",
    "async",
    "username",
    "password",
    "filterMethod",
    "regExp",
    "test",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/FakeServer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * A wrapper around Sinon.JS's FakeXMLHttpRequest and FakeServer features that\n * allows quick and simple configuration of mock HTTP backends for testing and\n * development.\n * Automatically creates URL filtering rules to ensure that only configured\n * requests are faked while others will be processed normally by the browser's\n * XHR implementation.\n *\n * The following example shows how to configure mock responses for two different\n * requests:\n * <pre class=\"javascript\">\n *   var responseData = [\n *     {\n *       method: \"GET\",\n *       url: /\\/api\\/resource\\/\\d+/,\n *       response : function(request) {\n *         var status = 200;\n *         var headers = { \"Content-Type\": \"application/json\" };\n *         var responseData = {\n *           description: \"Mock REST response for resource \" + request.url\n *         };\n *         var body = qx.lang.Json.stringify(responseData);\n *         request.respond(status, headers, body);\n *       }\n *     },\n *     {\n *       method: \"GET\",\n *       url: \"/users/{userId}\",\n *       response: [\n *         200,\n *         { \"Content-Type\": \"application/json\" },\n *         qx.lang.Json.stringify({userId: 'someUser'})\n *       ]\n *     }\n *   ];\n *\n *   qx.dev.FakeServer.getInstance().configure(responseData);\n * </pre>\n */\nqx.Bootstrap.define(\"qx.dev.FakeServer\", {\n  extend: Object,\n\n  construct() {\n    var clazz = qx.dev.FakeServer;\n\n    if (!clazz.$$allowconstruct) {\n      var msg =\n        clazz +\n        \" is a singleton! It is not possible to instantiate it directly.\" +\n        \"Use the static getInstance() method instead.\";\n      throw new Error(msg);\n    }\n\n    this.getFakeServer();\n    this.__responses = [];\n  },\n\n  statics: {\n    $$instance: null,\n    $$allowconstruct: false,\n\n    /**\n     * Helper method to handle singletons\n     *\n     * @internal\n     * @return {Object} The singleton instance\n     */\n    getInstance() {\n      if (!this.$$instance) {\n        this.$$allowconstruct = true;\n        this.$$instance = new this();\n        delete this.$$allowconstruct;\n      }\n\n      return this.$$instance;\n    }\n  },\n\n  members: {\n    __sinon: null,\n    __fakeServer: null,\n    __responses: null,\n    __filter: null,\n\n    /**\n     * Configures a set of fake HTTP responses. Each response is defined as a map\n     * that must provide the following keys:\n     * <ul>\n     *   <li><code>method</code> HTTP method to respond to, e.g. <code>PUT</code></li>\n     *   <li><code>url</code> URL used to match requests to fake responses. Can be\n     *   a RegExp or a String. REST-style parameter placeholders in curly braces\n     *   will be replaced with wildcards, e.g. the string \"/resource/{resourceId}\"\n     *   is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n     *   <li><code>response</code> This can be either:\n     *     <ul>\n     *       <li>a string: This will be the response body, status code will be 200</li>\n     *       <li>an array containing the status code, a map of response headers and\n     *         the response text, e.g. <code>[200, { \"Content-Type\": \"text/html\" }, \"OK\"]</code>\n     *       </li>\n     *       <li>a function: This will be called with a FakeXMLHttpRequest object as\n     *       the only argument. Its <code>respond</code> method must be called to send a response.\n     *       See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n     *       </li>\n     *     </ul>\n     *   </li>\n     * </ul>\n     *\n     * @param responseData {Map[]} An array of response description maps.\n     */\n    configure(responseData) {\n      responseData.forEach(\n        function (item) {\n          var urlRegExp =\n            item.url instanceof RegExp ? item.url : this._getRegExp(item.url);\n          var response = [item.method, urlRegExp];\n          var hasResponse = false;\n          for (var i = 0, l = this.__responses.length; i < l; i++) {\n            var old = this.__responses[i];\n            hasResponse = old[0] == response[0] && old[1] == response[1];\n          }\n          if (!hasResponse) {\n            this.__responses.push(response);\n          }\n          this.respondWith(item.method, urlRegExp, item.response);\n        }.bind(this)\n      );\n\n      var filter = (this.__filter = this.__getCombinedFilter());\n      this.addFilter(filter);\n    },\n\n    /**\n     * Adds a URL filtering function to decide whether a request should be handled\n     * by the FakeServer or passed to the regular XMLHttp implementation.\n     * See <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\n     * for details.\n     *\n     * @param filter {Function} URL filter function. Will be called with the\n     * following arguments: <code>method</code>, <code>url</code>, <code>async</code>,\n     * <code>username</code>, <code>password</code>. Must return <code>true</code>\n     * if the request should not be faked.\n     */\n    addFilter(filter) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertFunction(filter);\n      }\n\n      this.__sinon.FakeXMLHttpRequest.addFilter(filter);\n    },\n\n    /**\n     * Remove a filter that was added with {@link #addFilter}\n     * @param filter {Function} filter function to remove\n     */\n    removeFilter(filter) {\n      qx.lang.Array.remove(this.__sinon.FakeXMLHttpRequest.filters, filter);\n    },\n\n    /**\n     * Removes a response that was configured with {@link #configure}\n     * @param method {String} HTTP method of the response\n     * @param url {String|RegExp} URL of the response\n     */\n    removeResponse(method, url) {\n      qx.lang.Array.remove(\n        this.__sinon.FakeXMLHttpRequest.filters,\n        this.__filter\n      );\n\n      var urlRegExp = url instanceof RegExp ? url : this._getRegExp(url);\n      this.__responses = this.__responses.filter(function (response) {\n        return (\n          response[0] != method ||\n          response[1].toString() != urlRegExp.toString()\n        );\n      });\n      this.__fakeServer.responses = this.__fakeServer.responses.filter(\n        function (response) {\n          return (\n            response.method != method ||\n            response.url.toString() != urlRegExp.toString()\n          );\n        }\n      );\n\n      this.removeFilter(this.__filter);\n      this.__filter = this.__getCombinedFilter();\n      this.addFilter(this.__filter);\n    },\n\n    /**\n     * Defines a fake XHR response to a matching request.\n     *\n     * @param method {String} HTTP method to respond to, e.g. \"GET\"\n     * @param urlRegExp {RegExp} Request URL must match match this expression\n     * @param response {Function|Array|String} Response to send. See\n     * <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.\n     */\n    respondWith(method, urlRegExp, response) {\n      this.getFakeServer().respondWith(method, urlRegExp, response);\n    },\n\n    /**\n     * Creates and configures a FakeServer if necessary and returns it.\n     * @return {Object} FakeServer object\n     */\n\n    getFakeServer() {\n      if (!this.__fakeServer) {\n        var sinon = (this.__sinon = qx.dev.unit.Sinon.getSinon());\n        sinon.FakeXMLHttpRequest.useFilters = true;\n        this.__fakeServer = sinon.useFakeServer();\n        this.__fakeServer.autoRespond = true;\n      }\n      return this.__fakeServer;\n    },\n\n    /**\n     * Stops the FakeServer and removes all configured responses and/or filters.\n     */\n    restore() {\n      this.__responses = [];\n      this.removeFilter(this.__filter);\n      this.__filter = null;\n      this.__fakeServer.restore();\n      this.__fakeServer = null;\n    },\n\n    /**\n     * Returns a RegExp using the given pattern. Curly brackets and anything\n     * between are replaced with wildcards (.*?)\n     *\n     * @param pattern {String} RegExp pattern\n     * @return {RegExp} Regular Expression\n     */\n    _getRegExp(pattern) {\n      pattern = pattern.replace(/\\{[^\\/]*?\\}/g, \".*?\");\n      return new RegExp(pattern);\n    },\n\n    /**\n     * Returns a filter function that ensures only requests matching configured\n     * fake responses will be intercepted.\n     * @return {Function} filter function\n     */\n    __getCombinedFilter() {\n      var responses = this.__responses;\n      return function (method, url, async, username, password) {\n        for (var i = 0, l = responses.length; i < l; i++) {\n          var filterMethod = responses[i][0];\n          var regExp = responses[i][1];\n          if (method == filterMethod && regExp.test(url)) {\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n  },\n\n  destruct() {\n    this.restore();\n    this.__fakeServer = this.__sinon = null;\n  }\n});\n"
  ],
  "mappings": "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"
}