{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "construct",
    "clazz",
    "dev",
    "FakeServer",
    "$$allowconstruct",
    "msg",
    "Error",
    "getFakeServer",
    "__responses",
    "statics",
    "$$instance",
    "getInstance",
    "members",
    "__sinon",
    "__fakeServer",
    "__filter",
    "configure",
    "responseData",
    "forEach",
    "item",
    "urlRegExp",
    "url",
    "RegExp",
    "_getRegExp",
    "response",
    "method",
    "hasResponse",
    "i",
    "l",
    "length",
    "old",
    "push",
    "respondWith",
    "bind",
    "filter",
    "__getCombinedFilter",
    "addFilter",
    "FakeXMLHttpRequest",
    "removeFilter",
    "lang",
    "Array",
    "remove",
    "filters",
    "removeResponse",
    "toString",
    "responses",
    "sinon",
    "unit",
    "Sinon",
    "getSinon",
    "useFilters",
    "useFakeServer",
    "autoRespond",
    "restore",
    "pattern",
    "replace",
    "__P_193_4",
    "async",
    "username",
    "password",
    "filterMethod",
    "regExp",
    "test",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/FakeServer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Daniel Wagner (danielwagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A wrapper around Sinon.JS's FakeXMLHttpRequest and FakeServer features that\r\n * allows quick and simple configuration of mock HTTP backends for testing and\r\n * development.\r\n * Automatically creates URL filtering rules to ensure that only configured\r\n * requests are faked while others will be processed normally by the browser's\r\n * XHR implementation.\r\n *\r\n * The following example shows how to configure mock responses for two different\r\n * requests:\r\n * <pre class=\"javascript\">\r\n *   var responseData = [\r\n *     {\r\n *       method: \"GET\",\r\n *       url: /\\/api\\/resource\\/\\d+/,\r\n *       response : function(request) {\r\n *         var status = 200;\r\n *         var headers = { \"Content-Type\": \"application/json\" };\r\n *         var responseData = {\r\n *           description: \"Mock REST response for resource \" + request.url\r\n *         };\r\n *         var body = qx.lang.Json.stringify(responseData);\r\n *         request.respond(status, headers, body);\r\n *       }\r\n *     },\r\n *     {\r\n *       method: \"GET\",\r\n *       url: \"/users/{userId}\",\r\n *       response: [\r\n *         200,\r\n *         { \"Content-Type\": \"application/json\" },\r\n *         qx.lang.Json.stringify({userId: 'someUser'})\r\n *       ]\r\n *     }\r\n *   ];\r\n *\r\n *   qx.dev.FakeServer.getInstance().configure(responseData);\r\n * </pre>\r\n */\r\nqx.Bootstrap.define(\"qx.dev.FakeServer\", {\r\n  extend: Object,\r\n\r\n  construct() {\r\n    var clazz = qx.dev.FakeServer;\r\n\r\n    if (!clazz.$$allowconstruct) {\r\n      var msg =\r\n        clazz +\r\n        \" is a singleton! It is not possible to instantiate it directly.\" +\r\n        \"Use the static getInstance() method instead.\";\r\n      throw new Error(msg);\r\n    }\r\n\r\n    this.getFakeServer();\r\n    this.__responses = [];\r\n  },\r\n\r\n  statics: {\r\n    $$instance: null,\r\n    $$allowconstruct: false,\r\n\r\n    /**\r\n     * Helper method to handle singletons\r\n     *\r\n     * @internal\r\n     * @return {Object} The singleton instance\r\n     */\r\n    getInstance() {\r\n      if (!this.$$instance) {\r\n        this.$$allowconstruct = true;\r\n        this.$$instance = new this();\r\n        delete this.$$allowconstruct;\r\n      }\r\n\r\n      return this.$$instance;\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __sinon: null,\r\n    __fakeServer: null,\r\n    __responses: null,\r\n    __filter: null,\r\n\r\n    /**\r\n     * Configures a set of fake HTTP responses. Each response is defined as a map\r\n     * that must provide the following keys:\r\n     * <ul>\r\n     *   <li><code>method</code> HTTP method to respond to, e.g. <code>PUT</code></li>\r\n     *   <li><code>url</code> URL used to match requests to fake responses. Can be\r\n     *   a RegExp or a String. REST-style parameter placeholders in curly braces\r\n     *   will be replaced with wildcards, e.g. the string \"/resource/{resourceId}\"\r\n     *   is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\r\n     *   <li><code>response</code> This can be either:\r\n     *     <ul>\r\n     *       <li>a string: This will be the response body, status code will be 200</li>\r\n     *       <li>an array containing the status code, a map of response headers and\r\n     *         the response text, e.g. <code>[200, { \"Content-Type\": \"text/html\" }, \"OK\"]</code>\r\n     *       </li>\r\n     *       <li>a function: This will be called with a FakeXMLHttpRequest object as\r\n     *       the only argument. Its <code>respond</code> method must be called to send a response.\r\n     *       See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\r\n     *       </li>\r\n     *     </ul>\r\n     *   </li>\r\n     * </ul>\r\n     *\r\n     * @param responseData {Map[]} An array of response description maps.\r\n     */\r\n    configure(responseData) {\r\n      responseData.forEach(\r\n        function (item) {\r\n          var urlRegExp =\r\n            item.url instanceof RegExp ? item.url : this._getRegExp(item.url);\r\n          var response = [item.method, urlRegExp];\r\n          var hasResponse = false;\r\n          for (var i = 0, l = this.__responses.length; i < l; i++) {\r\n            var old = this.__responses[i];\r\n            hasResponse = old[0] == response[0] && old[1] == response[1];\r\n          }\r\n          if (!hasResponse) {\r\n            this.__responses.push(response);\r\n          }\r\n          this.respondWith(item.method, urlRegExp, item.response);\r\n        }.bind(this)\r\n      );\r\n\r\n      var filter = (this.__filter = this.__getCombinedFilter());\r\n      this.addFilter(filter);\r\n    },\r\n\r\n    /**\r\n     * Adds a URL filtering function to decide whether a request should be handled\r\n     * by the FakeServer or passed to the regular XMLHttp implementation.\r\n     * See <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\r\n     * for details.\r\n     *\r\n     * @param filter {Function} URL filter function. Will be called with the\r\n     * following arguments: <code>method</code>, <code>url</code>, <code>async</code>,\r\n     * <code>username</code>, <code>password</code>. Must return <code>true</code>\r\n     * if the request should not be faked.\r\n     */\r\n    addFilter(filter) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        qx.core.Assert.assertFunction(filter);\r\n      }\r\n\r\n      this.__sinon.FakeXMLHttpRequest.addFilter(filter);\r\n    },\r\n\r\n    /**\r\n     * Remove a filter that was added with {@link #addFilter}\r\n     * @param filter {Function} filter function to remove\r\n     */\r\n    removeFilter(filter) {\r\n      qx.lang.Array.remove(this.__sinon.FakeXMLHttpRequest.filters, filter);\r\n    },\r\n\r\n    /**\r\n     * Removes a response that was configured with {@link #configure}\r\n     * @param method {String} HTTP method of the response\r\n     * @param url {String|RegExp} URL of the response\r\n     */\r\n    removeResponse(method, url) {\r\n      qx.lang.Array.remove(\r\n        this.__sinon.FakeXMLHttpRequest.filters,\r\n        this.__filter\r\n      );\r\n\r\n      var urlRegExp = url instanceof RegExp ? url : this._getRegExp(url);\r\n      this.__responses = this.__responses.filter(function (response) {\r\n        return (\r\n          response[0] != method ||\r\n          response[1].toString() != urlRegExp.toString()\r\n        );\r\n      });\r\n      this.__fakeServer.responses = this.__fakeServer.responses.filter(\r\n        function (response) {\r\n          return (\r\n            response.method != method ||\r\n            response.url.toString() != urlRegExp.toString()\r\n          );\r\n        }\r\n      );\r\n\r\n      this.removeFilter(this.__filter);\r\n      this.__filter = this.__getCombinedFilter();\r\n      this.addFilter(this.__filter);\r\n    },\r\n\r\n    /**\r\n     * Defines a fake XHR response to a matching request.\r\n     *\r\n     * @param method {String} HTTP method to respond to, e.g. \"GET\"\r\n     * @param urlRegExp {RegExp} Request URL must match match this expression\r\n     * @param response {Function|Array|String} Response to send. See\r\n     * <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.\r\n     */\r\n    respondWith(method, urlRegExp, response) {\r\n      this.getFakeServer().respondWith(method, urlRegExp, response);\r\n    },\r\n\r\n    /**\r\n     * Creates and configures a FakeServer if necessary and returns it.\r\n     * @return {Object} FakeServer object\r\n     */\r\n\r\n    getFakeServer() {\r\n      if (!this.__fakeServer) {\r\n        var sinon = (this.__sinon = qx.dev.unit.Sinon.getSinon());\r\n        sinon.FakeXMLHttpRequest.useFilters = true;\r\n        this.__fakeServer = sinon.useFakeServer();\r\n        this.__fakeServer.autoRespond = true;\r\n      }\r\n      return this.__fakeServer;\r\n    },\r\n\r\n    /**\r\n     * Stops the FakeServer and removes all configured responses and/or filters.\r\n     */\r\n    restore() {\r\n      this.__responses = [];\r\n      this.removeFilter(this.__filter);\r\n      this.__filter = null;\r\n      this.__fakeServer.restore();\r\n      this.__fakeServer = null;\r\n    },\r\n\r\n    /**\r\n     * Returns a RegExp using the given pattern. Curly brackets and anything\r\n     * between are replaced with wildcards (.*?)\r\n     *\r\n     * @param pattern {String} RegExp pattern\r\n     * @return {RegExp} Regular Expression\r\n     */\r\n    _getRegExp(pattern) {\r\n      pattern = pattern.replace(/\\{[^\\/]*?\\}/g, \".*?\");\r\n      return new RegExp(pattern);\r\n    },\r\n\r\n    /**\r\n     * Returns a filter function that ensures only requests matching configured\r\n     * fake responses will be intercepted.\r\n     * @return {Function} filter function\r\n     */\r\n    __getCombinedFilter() {\r\n      var responses = this.__responses;\r\n      return function (method, url, async, username, password) {\r\n        for (var i = 0, l = responses.length; i < l; i++) {\r\n          var filterMethod = responses[i][0];\r\n          var regExp = responses[i][1];\r\n          if (method == filterMethod && regExp.test(url)) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      };\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this.restore();\r\n    this.__fakeServer = this.__sinon = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,mBAAmB,EAAE;IACvCC,MAAM,EAAEC,MAAM;IAEdC,SAAS,WAAAA,UAAA,EAAG;MACV,IAAIC,KAAK,GAAGR,EAAE,CAACS,GAAG,CAACC,UAAU;MAE7B,IAAI,CAACF,KAAK,CAACG,gBAAgB,EAAE;QAC3B,IAAIC,GAAG,GACLJ,KAAK,GACL,iEAAiE,GACjE,8CAA8C;QAChD,MAAM,IAAIK,KAAK,CAACD,GAAG,CAAC;MACtB;MAEA,IAAI,CAACE,aAAa,CAAC,CAAC;MACpB,IAAI,CAACC,SAAW,GAAG,EAAE;IACvB,CAAC;IAEDC,OAAO,EAAE;MACPC,UAAU,EAAE,IAAI;MAChBN,gBAAgB,EAAE,KAAK;MAEvB;AACJ;AACA;AACA;AACA;AACA;MACIO,WAAW,WAAAA,YAAA,EAAG;QACZ,IAAI,CAAC,IAAI,CAACD,UAAU,EAAE;UACpB,IAAI,CAACN,gBAAgB,GAAG,IAAI;UAC5B,IAAI,CAACM,UAAU,GAAG,IAAI,IAAI,CAAC,CAAC;UAC5B,OAAO,IAAI,CAACN,gBAAgB;QAC9B;QAEA,OAAO,IAAI,CAACM,UAAU;MACxB;IACF,CAAC;IAEDE,OAAO,EAAE;MACPC,SAAO,EAAE,IAAI;MACbC,SAAY,EAAE,IAAI;MAClBN,SAAW,EAAE,IAAI;MACjBO,SAAQ,EAAE,IAAI;MAEd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,WAAAA,UAACC,YAAY,EAAE;QACtBA,YAAY,CAACC,OAAO,CAClB,UAAUC,IAAI,EAAE;UACd,IAAIC,SAAS,GACXD,IAAI,CAACE,GAAG,YAAYC,MAAM,GAAGH,IAAI,CAACE,GAAG,GAAG,IAAI,CAACE,UAAU,CAACJ,IAAI,CAACE,GAAG,CAAC;UACnE,IAAIG,QAAQ,GAAG,CAACL,IAAI,CAACM,MAAM,EAAEL,SAAS,CAAC;UACvC,IAAIM,WAAW,GAAG,KAAK;UACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACpB,SAAW,CAACqB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;YACvD,IAAIG,GAAG,GAAG,IAAI,CAACtB,SAAW,CAACmB,CAAC,CAAC;YAC7BD,WAAW,GAAGI,GAAG,CAAC,CAAC,CAAC,IAAIN,QAAQ,CAAC,CAAC,CAAC,IAAIM,GAAG,CAAC,CAAC,CAAC,IAAIN,QAAQ,CAAC,CAAC,CAAC;UAC9D;UACA,IAAI,CAACE,WAAW,EAAE;YAChB,IAAI,CAAClB,SAAW,CAACuB,IAAI,CAACP,QAAQ,CAAC;UACjC;UACA,IAAI,CAACQ,WAAW,CAACb,IAAI,CAACM,MAAM,EAAEL,SAAS,EAAED,IAAI,CAACK,QAAQ,CAAC;QACzD,CAAC,CAACS,IAAI,CAAC,IAAI,CACb,CAAC;QAED,IAAIC,MAAM,GAAI,IAAI,CAACnB,SAAQ,GAAG,IAAI,CAACoB,SAAmB,CAAC,CAAE;QACzD,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC;MACxB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,SAAS,WAAAA,UAACF,MAAM,EAAE;QAKhB,IAAI,CAACrB,SAAO,CAACwB,kBAAkB,CAACD,SAAS,CAACF,MAAM,CAAC;MACnD,CAAC;MAED;AACJ;AACA;AACA;MACII,YAAY,WAAAA,aAACJ,MAAM,EAAE;QACnBzC,EAAE,CAAC8C,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,IAAI,CAAC5B,SAAO,CAACwB,kBAAkB,CAACK,OAAO,EAAER,MAAM,CAAC;MACvE,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIS,cAAc,WAAAA,eAAClB,MAAM,EAAEJ,GAAG,EAAE;QAC1B5B,EAAE,CAAC8C,IAAI,CAACC,KAAK,CAACC,MAAM,CAClB,IAAI,CAAC5B,SAAO,CAACwB,kBAAkB,CAACK,OAAO,EACvC,IAAI,CAAC3B,SACP,CAAC;QAED,IAAIK,SAAS,GAAGC,GAAG,YAAYC,MAAM,GAAGD,GAAG,GAAG,IAAI,CAACE,UAAU,CAACF,GAAG,CAAC;QAClE,IAAI,CAACb,SAAW,GAAG,IAAI,CAACA,SAAW,CAAC0B,MAAM,CAAC,UAAUV,QAAQ,EAAE;UAC7D,OACEA,QAAQ,CAAC,CAAC,CAAC,IAAIC,MAAM,IACrBD,QAAQ,CAAC,CAAC,CAAC,CAACoB,QAAQ,CAAC,CAAC,IAAIxB,SAAS,CAACwB,QAAQ,CAAC,CAAC;QAElD,CAAC,CAAC;QACF,IAAI,CAAC9B,SAAY,CAAC+B,SAAS,GAAG,IAAI,CAAC/B,SAAY,CAAC+B,SAAS,CAACX,MAAM,CAC9D,UAAUV,QAAQ,EAAE;UAClB,OACEA,QAAQ,CAACC,MAAM,IAAIA,MAAM,IACzBD,QAAQ,CAACH,GAAG,CAACuB,QAAQ,CAAC,CAAC,IAAIxB,SAAS,CAACwB,QAAQ,CAAC,CAAC;QAEnD,CACF,CAAC;QAED,IAAI,CAACN,YAAY,CAAC,IAAI,CAACvB,SAAQ,CAAC;QAChC,IAAI,CAACA,SAAQ,GAAG,IAAI,CAACoB,SAAmB,CAAC,CAAC;QAC1C,IAAI,CAACC,SAAS,CAAC,IAAI,CAACrB,SAAQ,CAAC;MAC/B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIiB,WAAW,WAAAA,YAACP,MAAM,EAAEL,SAAS,EAAEI,QAAQ,EAAE;QACvC,IAAI,CAACjB,aAAa,CAAC,CAAC,CAACyB,WAAW,CAACP,MAAM,EAAEL,SAAS,EAAEI,QAAQ,CAAC;MAC/D,CAAC;MAED;AACJ;AACA;AACA;MAEIjB,aAAa,WAAAA,cAAA,EAAG;QACd,IAAI,CAAC,IAAI,CAACO,SAAY,EAAE;UACtB,IAAIgC,KAAK,GAAI,IAAI,CAACjC,SAAO,GAAGpB,EAAE,CAACS,GAAG,CAAC6C,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,CAAE;UACzDH,KAAK,CAACT,kBAAkB,CAACa,UAAU,GAAG,IAAI;UAC1C,IAAI,CAACpC,SAAY,GAAGgC,KAAK,CAACK,aAAa,CAAC,CAAC;UACzC,IAAI,CAACrC,SAAY,CAACsC,WAAW,GAAG,IAAI;QACtC;QACA,OAAO,IAAI,CAACtC,SAAY;MAC1B,CAAC;MAED;AACJ;AACA;MACIuC,OAAO,WAAAA,QAAA,EAAG;QACR,IAAI,CAAC7C,SAAW,GAAG,EAAE;QACrB,IAAI,CAAC8B,YAAY,CAAC,IAAI,CAACvB,SAAQ,CAAC;QAChC,IAAI,CAACA,SAAQ,GAAG,IAAI;QACpB,IAAI,CAACD,SAAY,CAACuC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAACvC,SAAY,GAAG,IAAI;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIS,UAAU,WAAAA,WAAC+B,OAAO,EAAE;QAClBA,OAAO,GAAGA,OAAO,CAACC,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC;QAChD,OAAO,IAAIjC,MAAM,CAACgC,OAAO,CAAC;MAC5B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACInB,SAAmB,WAAAqB,UAAA,EAAG;QACpB,IAAIX,SAAS,GAAG,IAAI,CAACrC,SAAW;QAChC,OAAO,UAAUiB,MAAM,EAAEJ,GAAG,EAAEoC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;UACvD,KAAK,IAAIhC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGiB,SAAS,CAAChB,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;YAChD,IAAIiC,YAAY,GAAGf,SAAS,CAAClB,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,IAAIkC,MAAM,GAAGhB,SAAS,CAAClB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAIF,MAAM,IAAImC,YAAY,IAAIC,MAAM,CAACC,IAAI,CAACzC,GAAG,CAAC,EAAE;cAC9C,OAAO,KAAK;YACd;UACF;UACA,OAAO,IAAI;QACb,CAAC;MACH;IACF,CAAC;IAED0C,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACV,OAAO,CAAC,CAAC;MACd,IAAI,CAACvC,SAAY,GAAG,IAAI,CAACD,SAAO,GAAG,IAAI;IACzC;EACF,CAAC,CAAC;EA1RFpB,EAAE,CAACS,GAAG,CAACC,UAAU,CAACP,aAAa,GAAGA,aAAa;AAAC"
}