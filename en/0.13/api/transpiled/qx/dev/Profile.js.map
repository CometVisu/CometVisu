{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__profileData",
    "__callStack",
    "__doProfile",
    "__callOverhead",
    "undefined",
    "__calibrateCount",
    "start",
    "splice",
    "length",
    "stop",
    "getProfileData",
    "showResults",
    "maxLength",
    "normalizeProfileData",
    "data",
    "Object",
    "values",
    "sort",
    "a",
    "b",
    "calibratedOwnTime",
    "slice",
    "str",
    "i",
    "profData",
    "name",
    "push",
    "type",
    "toPrecision",
    "callCount",
    "win",
    "window",
    "open",
    "doc",
    "document",
    "write",
    "join",
    "close",
    "__calibrate",
    "__P_194_5",
    "count",
    "fcn",
    "code",
    "eval",
    "Date",
    "end",
    "profTime",
    "plainTime",
    "__calibrateHelper",
    "__P_194_6",
    "key",
    "profileData",
    "Math",
    "max",
    "ownTime",
    "subRoutineCalls",
    "calibratedAvgTime",
    "profileBefore",
    "fullName",
    "args",
    "me",
    "dev",
    "Profile",
    "callData",
    "subRoutineTime",
    "startTime",
    "profileAfter",
    "returnValue",
    "endTime",
    "pop",
    "totalTime",
    "lastCall",
    "fcnKey",
    "functionData",
    "defer"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/Profile.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * qooxdoo profiler.\r\n *\r\n * All functions of qooxdoo classes (constructors, members, statics) can be profiled\r\n * using this class.\r\n *\r\n * To enable profiling this class must be loaded <b>before</b> <code>qx.Class</code> is\r\n * loaded. This can be achieved by making <code>qx.core.Aspect</code> and\r\n * <code>qx.dev.Profile</code> a load time dependency of <code>qx.Class</code>.\r\n * Further more the variant <code>qx.aspects</code> must be set to <code>on</code>.\r\n */\r\nqx.Bootstrap.define(\"qx.dev.Profile\", {\r\n  statics: {\r\n    /**\r\n     * Storage for profiling data\r\n     *\r\n     * @internal\r\n     */\r\n    __profileData: {},\r\n\r\n    /**\r\n     * Array for call stack-like data types.\r\n     *\r\n     * @internal\r\n     */\r\n    __callStack: [],\r\n\r\n    /**\r\n     * Flag marking profiler run.\r\n     *\r\n     * @internal\r\n     */\r\n    __doProfile: true,\r\n\r\n    /**\r\n     * Profiler execution time. Subtracted for more accurate calculations.\r\n     *\r\n     * @internal\r\n     */\r\n    __callOverhead: undefined,\r\n\r\n    /**\r\n     * Amount of times to run calculation of profiler overhead.\r\n     *\r\n     * @internal\r\n     */\r\n    __calibrateCount: 4000,\r\n\r\n    /**\r\n     * Clear profiling data and start profiling.\r\n     */\r\n    start() {\r\n      this.__doProfile = true;\r\n      this.__profileData = {};\r\n      this.__callStack.splice(0, this.__callStack.length - 2);\r\n    },\r\n\r\n    /**\r\n     * Stop profiling.\r\n     */\r\n    stop() {\r\n      this.__doProfile = false;\r\n    },\r\n\r\n    /**\r\n     * Return the profiling data as JSON data structure.\r\n     *\r\n     * Example:\r\n     * <pre class=\"javascript\">\r\n     * {\r\n     *   \"qx.core.ObjectRegistry.toHashCode (static)\":{\r\n     *     *     \"totalTime\":3,\r\n     *     \"ownTime\":3,\r\n     *     \"callCount\":218,\r\n     *     \"subRoutineCalls\":0,\r\n     *     \"name\":\"qx.core.ObjectRegistry.toHashCode\",\r\n     *     \"type\":\"static\"\r\n     *   },\r\n     *   \"qx.core.Object.addListener (member)\":{\r\n     *     \"totalTime\":19,\r\n     *     \"ownTime\":12,\r\n     *     \"callCount\":59,\r\n     *     \"subRoutineCalls\":251,\r\n     *     \"name\":\"qx.core.Object.addListener\",\r\n     *     \"type\":\"member\"\r\n     *   },\r\n     *   \"qx.ui.table.cellrenderer.Default (constructor)\":{\r\n     *     \"totalTime\":2,\r\n     *     \"ownTime\":1,\r\n     *     \"callCount\":1,\r\n     *     \"subRoutineCalls\":4,\r\n     *     \"name\":\"qx.ui.table.cellrenderer.Default\",\r\n     *     \"type\":\"constructor\"\r\n     *   }\r\n     * }\r\n     * </pre>\r\n     *\r\n     * @return {Map} The current profiling data.\r\n     */\r\n    getProfileData() {\r\n      return this.__profileData;\r\n    },\r\n\r\n    /**\r\n     * Show profiling results in a popup window. The results are sorted by the\r\n     * function's own time.\r\n     *\r\n     * @param maxLength {Integer?100} maximum number of entries to display.\r\n     */\r\n    showResults(maxLength) {\r\n      this.stop();\r\n      this.normalizeProfileData();\r\n\r\n      var data = Object.values(this.__profileData);\r\n      data = data.sort(function (a, b) {\r\n        return a.calibratedOwnTime < b.calibratedOwnTime ? 1 : -1;\r\n      });\r\n\r\n      data = data.slice(0, maxLength || 100);\r\n\r\n      var str = [\r\n        \"<table><tr><th>Name</th><th>Type</th><th>Own time</th><th>Avg time</th><th>calls</th></tr>\"\r\n      ];\r\n\r\n      for (var i = 0; i < data.length; i++) {\r\n        var profData = data[i];\r\n        if (profData.name == \"qx.core.Aspect.__calibrateHelper\") {\r\n          continue;\r\n        }\r\n        str.push(\"<tr><td>\");\r\n        str.push(profData.name, \"()\");\r\n        str.push(\"</td><td>\");\r\n        str.push(profData.type);\r\n        str.push(\"</td><td>\");\r\n        str.push(profData.calibratedOwnTime.toPrecision(3));\r\n        str.push(\"ms</td><td>\");\r\n        str.push(\r\n          (profData.calibratedOwnTime / profData.callCount).toPrecision(3)\r\n        );\r\n\r\n        str.push(\"ms</td><td>\");\r\n        str.push(profData.callCount);\r\n        str.push(\"</td></tr>\");\r\n      }\r\n\r\n      str.push(\"</table>\");\r\n\r\n      var win = window.open(\"about:blank\", \"profileLog\");\r\n      var doc = win.document;\r\n\r\n      doc.open();\r\n      doc.write(\r\n        \"<html><head><style type='text/css'>body{font-family:monospace;font-size:11px;background:white;color:black;}</style></head><body>\"\r\n      );\r\n\r\n      doc.write(str.join(\"\"));\r\n      doc.write(\"</body></html>\");\r\n      doc.close();\r\n    },\r\n\r\n    /**\r\n     * Measure the overhead of calling a wrapped function vs. calling an\r\n     * unwrapped function.\r\n     *\r\n     * @lint ignoreDeprecated(eval)\r\n     *\r\n     * @param count {Integer} Number of iterations to measure.\r\n     * @return {Number} Overhead of a wrapped function call in milliseconds.\r\n     */\r\n    __calibrate(count) {\r\n      // we use eval to unroll the loop because we don't want to measure the loop overhead.\r\n\r\n      // Measure wrapped function\r\n      var fcn;\r\n      var code = [\r\n        \"var fcn = function(){ var fcn=qx.dev.Profile.__calibrateHelper;\"\r\n      ];\r\n\r\n      for (var i = 0; i < count; i++) {\r\n        code.push(\"fcn();\");\r\n      }\r\n      code.push(\"};\");\r\n      eval(code.join(\"\"));\r\n      var start = new Date();\r\n      fcn();\r\n      var end = new Date();\r\n      var profTime = end - start;\r\n\r\n      // Measure unwrapped function\r\n      var code = [\r\n        \"var plainFunc = function() {};\",\r\n        \"var fcn = function(){ var fcn=plainFunc;\"\r\n      ];\r\n\r\n      for (var i = 0; i < count; i++) {\r\n        code.push(\"fcn();\");\r\n      }\r\n      code.push(\"};\");\r\n      eval(code.join(\"\"));\r\n\r\n      var start = new Date();\r\n      fcn();\r\n      var end = new Date();\r\n      var plainTime = end - start;\r\n\r\n      // Compute per call overhead\r\n      return (profTime - plainTime) / count;\r\n    },\r\n\r\n    /**\r\n     * Helper to measure overhead.\r\n     */\r\n    __calibrateHelper() {},\r\n\r\n    /**\r\n     * Normalize profiling data by subtracting the overhead of wrapping from the\r\n     * function's own time.\r\n     */\r\n    normalizeProfileData() {\r\n      if (this.__callOverhead == undefined) {\r\n        this.__callOverhead = this.__calibrate(this.__calibrateCount);\r\n      }\r\n\r\n      for (var key in this.__profileData) {\r\n        var profileData = this.__profileData[key];\r\n\r\n        profileData.calibratedOwnTime = Math.max(\r\n          profileData.ownTime -\r\n            profileData.subRoutineCalls * this.__callOverhead,\r\n          0\r\n        );\r\n\r\n        profileData.calibratedAvgTime =\r\n          profileData.calibratedOwnTime / profileData.callCount;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * This function will be called before each function call. (Start timing)\r\n     *\r\n     * @param fullName {String} Full name of the function including the class name.\r\n     * @param fcn {Function} Function to time.\r\n     * @param type {String} Function type as in parameter with same name to\r\n     *                      {@link qx.core.Aspect#addAdvice}\r\n     * @param args {arguments} The arguments passed to the wrapped function\r\n     */\r\n    profileBefore(fullName, fcn, type, args) {\r\n      var me = qx.dev.Profile;\r\n\r\n      if (!me.__doProfile) {\r\n        return;\r\n      }\r\n\r\n      var callData = {\r\n        subRoutineTime: 0,\r\n        subRoutineCalls: 0\r\n      };\r\n\r\n      me.__callStack.push(callData);\r\n      callData.startTime = new Date();\r\n    },\r\n\r\n    /**\r\n     * This function will be called after each function call. (Stop timing)\r\n     *\r\n     * @param fullName {String} Full name of the function including the class name.\r\n     * @param fcn {Function} Function to time.\r\n     * @param type {String} Function type as in parameter with same name to\r\n     *                      {@link qx.core.Aspect#addAdvice}\r\n     * @param args {arguments} The arguments passed to the wrapped function\r\n     * @param returnValue {var} return value of the wrapped function.\r\n     */\r\n    profileAfter(fullName, fcn, type, args, returnValue) {\r\n      var me = qx.dev.Profile;\r\n      if (!me.__doProfile) {\r\n        return;\r\n      }\r\n\r\n      var endTime = new Date();\r\n      var callData = me.__callStack.pop();\r\n      var totalTime = endTime - callData.startTime;\r\n      var ownTime = totalTime - callData.subRoutineTime;\r\n\r\n      if (me.__callStack.length > 0) {\r\n        var lastCall = me.__callStack[me.__callStack.length - 1];\r\n        lastCall.subRoutineTime += totalTime;\r\n        lastCall.subRoutineCalls += 1;\r\n      }\r\n\r\n      var fcnKey = fullName + \" (\" + type + \")\";\r\n\r\n      if (me.__profileData[fcnKey] === undefined) {\r\n        me.__profileData[fcnKey] = {\r\n          totalTime: 0,\r\n          ownTime: 0,\r\n          callCount: 0,\r\n          subRoutineCalls: 0,\r\n          name: fullName,\r\n          type: type\r\n        };\r\n      }\r\n\r\n      var functionData = me.__profileData[fcnKey];\r\n      functionData.totalTime += totalTime;\r\n      functionData.ownTime += ownTime;\r\n      functionData.callCount += 1;\r\n      functionData.subRoutineCalls += callData.subRoutineCalls;\r\n    }\r\n  },\r\n\r\n  defer(statics) {\r\n    if (qx.core.Environment.get(\"qx.aspects\")) {\r\n      // Inform user\r\n      qx.Bootstrap.debug(\"Enable global profiling...\");\r\n\r\n      // Add advices for profiling\r\n      qx.core.Aspect.addAdvice(statics.profileBefore, \"before\");\r\n      qx.core.Aspect.addAdvice(statics.profileAfter, \"after\");\r\n\r\n      statics.__calibrateHelper = qx.core.Aspect.wrap(\r\n        \"qx.dev.Profile.__calibrateHelper\",\r\n        statics.__calibrateHelper,\r\n        \"static\"\r\n      );\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,gBAAgB,EAAE;IACpCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;MACIC,SAAa,EAAE,CAAC,CAAC;MAEjB;AACJ;AACA;AACA;AACA;MACIC,SAAW,EAAE,EAAE;MAEf;AACJ;AACA;AACA;AACA;MACIC,SAAW,EAAE,IAAI;MAEjB;AACJ;AACA;AACA;AACA;MACIC,SAAc,EAAEC,SAAS;MAEzB;AACJ;AACA;AACA;AACA;MACIC,SAAgB,EAAE,IAAI;MAEtB;AACJ;AACA;MACIC,KAAK,WAAAA,MAAA,EAAG;QACN,IAAI,CAACJ,SAAW,GAAG,IAAI;QACvB,IAAI,CAACF,SAAa,GAAG,CAAC,CAAC;QACvB,IAAI,CAACC,SAAW,CAACM,MAAM,CAAC,CAAC,EAAE,IAAI,CAACN,SAAW,CAACO,MAAM,GAAG,CAAC,CAAC;MACzD,CAAC;MAED;AACJ;AACA;MACIC,IAAI,WAAAA,KAAA,EAAG;QACL,IAAI,CAACP,SAAW,GAAG,KAAK;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIQ,cAAc,WAAAA,eAAA,EAAG;QACf,OAAO,IAAI,CAACV,SAAa;MAC3B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIW,WAAW,WAAAA,YAACC,SAAS,EAAE;QACrB,IAAI,CAACH,IAAI,CAAC,CAAC;QACX,IAAI,CAACI,oBAAoB,CAAC,CAAC;QAE3B,IAAIC,IAAI,GAAGC,MAAM,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"
}