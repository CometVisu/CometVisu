{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "suite",
    "check",
    "nullable",
    "init",
    "members",
    "_getClassNameFromUrl",
    "params",
    "window",
    "location",
    "search",
    "className",
    "match",
    "setTestNamespace",
    "namespace",
    "dev",
    "unit",
    "TestSuite",
    "add",
    "setSuite",
    "runJsUnit",
    "testResult",
    "JsUnitTestResult",
    "getSuite",
    "run",
    "exportToJsUnit",
    "runStandAlone",
    "TestResult",
    "addListener",
    "e",
    "ex",
    "getData",
    "exception",
    "test",
    "error",
    "getFullName",
    "message",
    "getComment",
    "getStackTrace",
    "join",
    "getTestDescriptions",
    "desc",
    "classes",
    "getTestClasses",
    "i",
    "length",
    "cls",
    "clsDesc",
    "classname",
    "getName",
    "tests",
    "methods",
    "getTestMethods",
    "j",
    "push",
    "lang",
    "Json",
    "stringify",
    "runTests",
    "methodName",
    "runTestsFromNamespace",
    "namespaceName",
    "indexOf",
    "MTestLoader"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MTestLoader.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * This mixin contains the methods needed to implement a loader that will\n * create a suite of unit tests from a given namespace and run it directly or\n * provide the necessary information to a more advanced runner application\n */\nqx.Mixin.define(\"qx.dev.unit.MTestLoader\", {\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The test suite */\n    suite: {\n      check: \"qx.dev.unit.TestSuite\",\n      nullable: true,\n      init: null\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Parses the url parameters and tries to find the classes to test.\n     * The pattern is like <code>index.html?testclass=qx.test</code>\n     *\n     * @return {String} the class/namespace to test\n     */\n    _getClassNameFromUrl() {\n      var params = window.location.search;\n      var className = params.match(/[\\?&]testclass=([A-Za-z0-9_\\.]+)/);\n\n      if (className) {\n        className = className[1];\n      } else {\n        className = \"__unknown_class__\";\n      }\n\n      return className;\n    },\n\n    /**\n     * Sets the top level namespace of the test cases to test. All classes\n     * below this namespace extending {@link TestCase} will be tested.\n     *\n     * @param namespace {Object} Namespace to add\n     */\n    setTestNamespace(namespace) {\n      var suite = new qx.dev.unit.TestSuite();\n      suite.add(namespace);\n      this.setSuite(suite);\n    },\n\n    /**\n     * Run all tests and export the results to JSUnit\n     */\n    runJsUnit() {\n      var testResult = new qx.dev.unit.JsUnitTestResult();\n      this.getSuite().run(testResult);\n      testResult.exportToJsUnit();\n    },\n\n    /**\n     * Run tests as standalone application\n     */\n    runStandAlone() {\n      var testResult = new qx.dev.unit.TestResult();\n\n      testResult.addListener(\"failure\", e => {\n        var ex = e.getData()[0].exception;\n        var test = e.getData()[0].test;\n        this.error(\n          \"Test '\" +\n            test.getFullName() +\n            \"' failed: \" +\n            ex.message +\n            \" - \" +\n            ex.getComment()\n        );\n\n        if (ex.getStackTrace) {\n          this.error(\"Stack trace: \" + ex.getStackTrace().join(\"\\n\"));\n        }\n      });\n\n      testResult.addListener(\"error\", e => {\n        var ex = e.getData()[0].exception;\n        var test = e.getData()[0].test;\n        this.error(\n          \"The test '\" + test.getFullName() + \"' had an error: \" + ex,\n          ex\n        );\n      });\n\n      this.getSuite().run(testResult);\n    },\n\n    /**\n     * Get a list of test descriptions\n     *\n     * @return {String} A description of all tests.\n     */\n    getTestDescriptions() {\n      var desc = [];\n      var classes = this.getSuite().getTestClasses();\n\n      for (var i = 0; i < classes.length; i++) {\n        var cls = classes[i];\n        var clsDesc = {};\n        clsDesc.classname = cls.getName();\n        clsDesc.tests = [];\n        var methods = cls.getTestMethods();\n\n        for (var j = 0; j < methods.length; j++) {\n          clsDesc.tests.push(methods[j].getName());\n        }\n\n        desc.push(clsDesc);\n      }\n\n      return qx.lang.Json.stringify(desc);\n    },\n\n    /**\n     * Runs exactly one test from the test suite\n     *\n     * @param testResult {qx.dev.unit.TestResult} the result logger\n     * @param className {String} Name of the test class\n     * @param methodName {String} Name of the test method\n     */\n    runTests(testResult, className, methodName) {\n      var classes = this.getSuite().getTestClasses();\n\n      for (var i = 0; i < classes.length; i++) {\n        if (className == classes[i].getName()) {\n          var methods = classes[i].getTestMethods();\n\n          for (var j = 0; j < methods.length; j++) {\n            if (methodName && methods[j].getName() != methodName) {\n              continue;\n            }\n\n            methods[j].run(testResult);\n          }\n\n          return;\n        }\n      }\n    },\n\n    /**\n     * Runs all tests inside of the given namespace\n     *\n     * @param testResult {qx.dev.unit.TestResult} the result logger\n     * @param namespaceName {String} Namespace of the tests to run\n     */\n    runTestsFromNamespace(testResult, namespaceName) {\n      var classes = this.getSuite().getTestClasses();\n\n      for (var i = 0; i < classes.length; i++) {\n        if (classes[i].getName().indexOf(namespaceName) == 0) {\n          classes[i].run(testResult);\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}