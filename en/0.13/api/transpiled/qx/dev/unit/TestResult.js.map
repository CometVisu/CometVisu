{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "events",
    "startTest",
    "endTest",
    "error",
    "failure",
    "wait",
    "skip",
    "endMeasurement",
    "statics",
    "run",
    "testResult",
    "test",
    "testFunction",
    "members",
    "_timeout",
    "self",
    "resume",
    "_this",
    "testClass",
    "getTestClass",
    "hasListener",
    "addListener",
    "ev",
    "exception",
    "getData",
    "fireDataEvent",
    "getFullName",
    "qxEx",
    "type",
    "BaseError",
    "_createError",
    "undefined",
    "stop",
    "dispose",
    "setUp",
    "ex",
    "dev",
    "unit",
    "AsyncWrapper",
    "getDelay",
    "that",
    "defaultTimeoutFunction",
    "AssertionError",
    "timeoutFunc",
    "getDeferredFunction",
    "context",
    "getContext",
    "window",
    "event",
    "Timer",
    "once",
    "tearDown",
    "except",
    "classname",
    "message",
    "DEFAULTMESSAGE",
    "returnValue",
    "call",
    "MeasurementResult",
    "eventName",
    "exceptions",
    "errors",
    "i",
    "l",
    "length",
    "push",
    "__wrapAddListener",
    "__P_195_0",
    "_addedListeners",
    "Registration",
    "addListenerOriginal",
    "target",
    "listener",
    "capture",
    "listenerId",
    "store",
    "indexOf",
    "__removeListeners",
    "__P_195_1",
    "listeners",
    "id",
    "removeListenerById",
    "specificTearDown",
    "lang",
    "String",
    "firstUp",
    "getName",
    "doAutoDispose",
    "Debug",
    "disposeProfilingActive",
    "testName",
    "undisposed",
    "stopDisposeProfiling",
    "trace",
    "stackTrace",
    "join",
    "top",
    "log",
    "Logger",
    "warn",
    "object",
    "toHashCode",
    "destruct",
    "TestResult"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/TestResult.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Daniel Wagner (d_wagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The test result class runs the test functions and fires events depending on\r\n * the result of the test run.\r\n */\r\nqx.Class.define(\"qx.dev.unit.TestResult\", {\r\n  extend: qx.core.Object,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /**\r\n     * Fired before the test is started\r\n     *\r\n     * Event data: The test {@link qx.dev.unit.TestFunction}\r\n     */\r\n    startTest: \"qx.event.type.Data\",\r\n\r\n    /** Fired after the test has finished\r\n     *\r\n     * Event data: The test {@link qx.dev.unit.TestFunction}\r\n     */\r\n    endTest: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired if the test raised an {@link qx.core.AssertionError}\r\n     *\r\n     * Event data: The test {@link qx.dev.unit.TestFunction}\r\n     */\r\n    error: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired if the test failed with a different exception\r\n     *\r\n     * Event data: The test {@link qx.dev.unit.TestFunction}\r\n     */\r\n    failure: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired if an asynchronous test sets a timeout\r\n     *\r\n     * Event data: The test {@link qx.dev.unit.TestFunction}\r\n     */\r\n    wait: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired if the test was skipped, e.g. because a requirement was not met.\r\n     *\r\n     * Event data: The test {@link qx.dev.unit.TestFunction}\r\n     */\r\n    skip: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired if a performance test returned results.\r\n     *\r\n     * Event data: The test {@link qx.dev.unit.TestFunction}\r\n     */\r\n    endMeasurement: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     STATICS\r\n  *****************************************************************************\r\n  */\r\n\r\n  statics: {\r\n    /**\r\n     * Run a test function using a given test result\r\n     *\r\n     * @param testResult {qx.dev.unit.TestResult} The test result to use to run the test\r\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\r\n     * @param testFunction {var} The test function\r\n     */\r\n    run(testResult, test, testFunction) {\r\n      testResult.run(test, testFunction);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    _timeout: null,\r\n\r\n    /**\r\n     * Run the test\r\n     *\r\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\r\n     * @param testFunction {Function} The test function\r\n     * @param self {Object?} The context in which to run the test function\r\n     * @param resume {Boolean?} Resume a currently waiting test\r\n     *\r\n     * @return {var} The return value of the test function\r\n     */\r\n    run(test, testFunction, self, resume) {\r\n      if (!this._timeout) {\r\n        this._timeout = {};\r\n      }\r\n\r\n      var testClass = test.getTestClass();\r\n      if (!testClass.hasListener(\"assertionFailed\")) {\r\n        testClass.addListener(\"assertionFailed\", ev => {\r\n          var error = [\r\n            {\r\n              exception: ev.getData(),\r\n              test: test\r\n            }\r\n          ];\r\n\r\n          this.fireDataEvent(\"failure\", error);\r\n        });\r\n      }\r\n\r\n      if (resume && !this._timeout[test.getFullName()]) {\r\n        this._timeout[test.getFullName()] = \"failed\";\r\n        var qxEx = new qx.type.BaseError(\r\n          \"Error in asynchronous test\",\r\n          \"resume() called before wait()\"\r\n        );\r\n\r\n        this._createError(\"failure\", [qxEx], test);\r\n        this.fireDataEvent(\"endTest\", test);\r\n        return undefined;\r\n      }\r\n\r\n      this.fireDataEvent(\"startTest\", test);\r\n\r\n      if (qx.core.Environment.get(\"qx.debug.dispose\")) {\r\n        qx.dev.Debug.startDisposeProfiling();\r\n      }\r\n\r\n      if (this._timeout[test.getFullName()]) {\r\n        if (this._timeout[test.getFullName()] !== \"failed\") {\r\n          this._timeout[test.getFullName()].stop();\r\n          this._timeout[test.getFullName()].dispose();\r\n        }\r\n        delete this._timeout[test.getFullName()];\r\n      } else {\r\n        try {\r\n          test.setUp();\r\n        } catch (ex) {\r\n          if (ex instanceof qx.dev.unit.AsyncWrapper) {\r\n            if (this._timeout[test.getFullName()]) {\r\n              // Do nothing if there's already a timeout for this test\r\n              return;\r\n            }\r\n\r\n            if (ex.getDelay()) {\r\n              var that = this;\r\n              var defaultTimeoutFunction = function () {\r\n                throw new qx.core.AssertionError(\r\n                  \"Asynchronous Test Error in setUp\",\r\n                  \"Timeout of \" +\r\n                    ex.getDelay() +\r\n                    \" ms reached before resume() was called.\"\r\n                );\r\n              };\r\n              var timeoutFunc = ex.getDeferredFunction()\r\n                ? ex.getDeferredFunction()\r\n                : defaultTimeoutFunction;\r\n              var context = ex.getContext() ? ex.getContext() : window;\r\n              this._timeout[test.getFullName()] = qx.event.Timer.once(\r\n                function () {\r\n                  this.run(test, timeoutFunc, context);\r\n                },\r\n                that,\r\n                ex.getDelay()\r\n              );\r\n\r\n              this.fireDataEvent(\"wait\", test);\r\n            }\r\n            return undefined;\r\n          } else {\r\n            try {\r\n              this.tearDown(test);\r\n            } catch (except) {\r\n              /* Any exceptions here are likely caused by setUp having failed\r\n               previously, so we'll ignore them. */\r\n            }\r\n\r\n            if (ex.classname == \"qx.dev.unit.RequirementError\") {\r\n              this._createError(\"skip\", [ex], test);\r\n              this.fireDataEvent(\"endTest\", test);\r\n            } else {\r\n              if (\r\n                ex instanceof qx.type.BaseError &&\r\n                ex.message == qx.type.BaseError.DEFAULTMESSAGE\r\n              ) {\r\n                ex.message = \"setUp failed\";\r\n              } else {\r\n                ex.message = \"setUp failed: \" + ex.message;\r\n              }\r\n              this._createError(\"error\", [ex], test);\r\n              this.fireDataEvent(\"endTest\", test);\r\n            }\r\n\r\n            return undefined;\r\n          }\r\n        }\r\n      }\r\n\r\n      var returnValue;\r\n\r\n      try {\r\n        returnValue = testFunction.call(self || window);\r\n      } catch (ex) {\r\n        var error = true;\r\n        if (ex instanceof qx.dev.unit.AsyncWrapper) {\r\n          if (this._timeout[test.getFullName()]) {\r\n            // Do nothing if there's already a timeout for this test\r\n            return;\r\n          }\r\n\r\n          if (ex.getDelay()) {\r\n            var that = this;\r\n            var defaultTimeoutFunction = function () {\r\n              throw new qx.core.AssertionError(\r\n                \"Asynchronous Test Error\",\r\n                \"Timeout of \" +\r\n                  ex.getDelay() +\r\n                  \" ms reached before resume() was called.\"\r\n              );\r\n            };\r\n            var timeoutFunc = ex.getDeferredFunction()\r\n              ? ex.getDeferredFunction()\r\n              : defaultTimeoutFunction;\r\n            var context = ex.getContext() ? ex.getContext() : window;\r\n            this._timeout[test.getFullName()] = qx.event.Timer.once(\r\n              function () {\r\n                this.run(test, timeoutFunc, context);\r\n              },\r\n              that,\r\n              ex.getDelay()\r\n            );\r\n\r\n            this.fireDataEvent(\"wait\", test);\r\n          }\r\n        } else if (ex instanceof qx.dev.unit.MeasurementResult) {\r\n          error = false;\r\n          this._createError(\"endMeasurement\", [ex], test);\r\n        } else {\r\n          try {\r\n            this.tearDown(test);\r\n          } catch (except) {}\r\n          if (ex.classname == \"qx.core.AssertionError\") {\r\n            this._createError(\"failure\", [ex], test);\r\n            this.fireDataEvent(\"endTest\", test);\r\n          } else if (ex.classname == \"qx.dev.unit.RequirementError\") {\r\n            this._createError(\"skip\", [ex], test);\r\n            this.fireDataEvent(\"endTest\", test);\r\n          } else {\r\n            this._createError(\"error\", [ex], test);\r\n            this.fireDataEvent(\"endTest\", test);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!error) {\r\n        try {\r\n          this.tearDown(test);\r\n          this.fireDataEvent(\"endTest\", test);\r\n        } catch (ex) {\r\n          if (\r\n            ex instanceof qx.type.BaseError &&\r\n            ex.message == qx.type.BaseError.DEFAULTMESSAGE\r\n          ) {\r\n            ex.message = \"tearDown failed\";\r\n          } else {\r\n            ex.message = \"tearDown failed: \" + ex.message;\r\n          }\r\n\r\n          this._createError(\"error\", [ex], test);\r\n          this.fireDataEvent(\"endTest\", test);\r\n        }\r\n      }\r\n\r\n      /*\r\n      if (!this._timeout[test.getFullName()]) {\r\n        this.__removeListeners(test.getTestClass()[test.getName()]);\r\n      }\r\n      */\r\n\r\n      return returnValue;\r\n    },\r\n\r\n    /**\r\n     * Fire an error event\r\n     *\r\n     * @param eventName {String} Name of the event\r\n     * @param exceptions {Error[]} The exception(s), which caused the test to fail\r\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\r\n     */\r\n    _createError(eventName, exceptions, test) {\r\n      var errors = [];\r\n      for (var i = 0, l = exceptions.length; i < l; i++) {\r\n        // WebKit and Opera\r\n        errors.push({\r\n          exception: exceptions[i],\r\n          test: test\r\n        });\r\n      }\r\n\r\n      this.fireDataEvent(eventName, errors);\r\n    },\r\n\r\n    /**\r\n     * Wraps the AUT's qx.event.Registration.addListener function so that it\r\n     * stores references to all added listeners in an array attached to the\r\n     * current test function. This is done so that any listeners left over after\r\n     * test execution can be removed to make sure they don't influence other\r\n     * tests.\r\n     *\r\n     * @param testFunction {qx.dev.unit.TestFunction} The current test\r\n     */\r\n    __wrapAddListener(testFunction) {\r\n      testFunction._addedListeners = [];\r\n      if (!qx.event.Registration.addListenerOriginal) {\r\n        qx.event.Registration.addListenerOriginal =\r\n          qx.event.Registration.addListener;\r\n        qx.event.Registration.addListener = function (\r\n          target,\r\n          type,\r\n          listener,\r\n          self,\r\n          capture\r\n        ) {\r\n          var listenerId = qx.event.Registration.addListenerOriginal(\r\n            target,\r\n            type,\r\n            listener,\r\n            self,\r\n            capture\r\n          );\r\n\r\n          var store = true;\r\n          if (\r\n            (target.classname &&\r\n              target.classname.indexOf(\"testrunner.unit\") == 0) ||\r\n            (self &&\r\n              self.classname &&\r\n              self.classname.indexOf(\"testrunner.unit\") == 0)\r\n          ) {\r\n            store = false;\r\n          }\r\n          if (store) {\r\n            testFunction._addedListeners.push([target, listenerId]);\r\n          }\r\n          return listenerId;\r\n        };\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Removes any listeners left over after a test's run.\r\n     *\r\n     * @param testFunction {qx.dev.unit.TestFunction} The current test\r\n     */\r\n    __removeListeners(testFunction) {\r\n      // remove listeners added during test execution\r\n      if (testFunction._addedListeners) {\r\n        var listeners = testFunction._addedListeners;\r\n        for (var i = 0, l = listeners.length; i < l; i++) {\r\n          var target = listeners[i][0];\r\n          var id = listeners[i][1];\r\n          try {\r\n            qx.event.Registration.removeListenerById(target, id);\r\n          } catch (ex) {}\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Calls the generic tearDown method on the test class, then the specific\r\n     * tearDown for the test, if one is defined.\r\n     *\r\n     * @param test {Object} The test object (first argument of {@link #run})\r\n     */\r\n    tearDown(test) {\r\n      test.tearDown();\r\n      var testClass = test.getTestClass();\r\n      var specificTearDown =\r\n        \"tearDown\" + qx.lang.String.firstUp(test.getName());\r\n      if (testClass[specificTearDown]) {\r\n        testClass[specificTearDown]();\r\n      }\r\n      testClass.doAutoDispose();\r\n\r\n      if (\r\n        qx.core.Environment.get(\"qx.debug.dispose\") &&\r\n        qx.dev.Debug.disposeProfilingActive\r\n      ) {\r\n        var testName = test.getFullName();\r\n        var undisposed = qx.dev.Debug.stopDisposeProfiling();\r\n        for (var i = 0; i < undisposed.length; i++) {\r\n          var trace;\r\n          if (undisposed[i].stackTrace) {\r\n            trace = undisposed[i].stackTrace.join(\"\\n\");\r\n          }\r\n          window.top.qx.log.Logger.warn(\r\n            \"Undisposed object in \" +\r\n              testName +\r\n              \": \" +\r\n              undisposed[i].object.classname +\r\n              \"[\" +\r\n              undisposed[i].object.toHashCode() +\r\n              \"]\" +\r\n              \"\\n\" +\r\n              trace\r\n          );\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this._timeout = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}