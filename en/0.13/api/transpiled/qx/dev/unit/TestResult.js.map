{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "events",
    "startTest",
    "endTest",
    "error",
    "failure",
    "wait",
    "skip",
    "endMeasurement",
    "statics",
    "run",
    "testResult",
    "test",
    "testFunction",
    "members",
    "_timeout",
    "self",
    "resume",
    "testClass",
    "getTestClass",
    "hasListener",
    "addListener",
    "ev",
    "exception",
    "getData",
    "fireDataEvent",
    "getFullName",
    "qxEx",
    "type",
    "BaseError",
    "_createError",
    "undefined",
    "stop",
    "dispose",
    "setUp",
    "ex",
    "dev",
    "unit",
    "AsyncWrapper",
    "getDelay",
    "that",
    "defaultTimeoutFunction",
    "AssertionError",
    "timeoutFunc",
    "getDeferredFunction",
    "context",
    "getContext",
    "window",
    "event",
    "Timer",
    "once",
    "tearDown",
    "except",
    "classname",
    "message",
    "DEFAULTMESSAGE",
    "returnValue",
    "call",
    "MeasurementResult",
    "eventName",
    "exceptions",
    "errors",
    "i",
    "l",
    "length",
    "push",
    "__wrapAddListener",
    "_addedListeners",
    "Registration",
    "addListenerOriginal",
    "target",
    "listener",
    "capture",
    "listenerId",
    "store",
    "indexOf",
    "__removeListeners",
    "listeners",
    "id",
    "removeListenerById",
    "specificTearDown",
    "lang",
    "String",
    "firstUp",
    "getName",
    "doAutoDispose",
    "Debug",
    "disposeProfilingActive",
    "testName",
    "undisposed",
    "stopDisposeProfiling",
    "trace",
    "stackTrace",
    "join",
    "top",
    "log",
    "Logger",
    "warn",
    "object",
    "toHashCode",
    "destruct",
    "TestResult"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/TestResult.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * The test result class runs the test functions and fires events depending on\n * the result of the test run.\n */\nqx.Class.define(\"qx.dev.unit.TestResult\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired before the test is started\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    startTest: \"qx.event.type.Data\",\n\n    /** Fired after the test has finished\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    endTest: \"qx.event.type.Data\",\n\n    /**\n     * Fired if the test raised an {@link qx.core.AssertionError}\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    error: \"qx.event.type.Data\",\n\n    /**\n     * Fired if the test failed with a different exception\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    failure: \"qx.event.type.Data\",\n\n    /**\n     * Fired if an asynchronous test sets a timeout\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    wait: \"qx.event.type.Data\",\n\n    /**\n     * Fired if the test was skipped, e.g. because a requirement was not met.\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    skip: \"qx.event.type.Data\",\n\n    /**\n     * Fired if a performance test returned results.\n     *\n     * Event data: The test {@link qx.dev.unit.TestFunction}\n     */\n    endMeasurement: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * Run a test function using a given test result\n     *\n     * @param testResult {qx.dev.unit.TestResult} The test result to use to run the test\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\n     * @param testFunction {var} The test function\n     */\n    run(testResult, test, testFunction) {\n      testResult.run(test, testFunction);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    _timeout: null,\n\n    /**\n     * Run the test\n     *\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\n     * @param testFunction {Function} The test function\n     * @param self {Object?} The context in which to run the test function\n     * @param resume {Boolean?} Resume a currently waiting test\n     *\n     * @return {var} The return value of the test function\n     */\n    run(test, testFunction, self, resume) {\n      if (!this._timeout) {\n        this._timeout = {};\n      }\n\n      var testClass = test.getTestClass();\n      if (!testClass.hasListener(\"assertionFailed\")) {\n        testClass.addListener(\"assertionFailed\", ev => {\n          var error = [\n            {\n              exception: ev.getData(),\n              test: test\n            }\n          ];\n\n          this.fireDataEvent(\"failure\", error);\n        });\n      }\n\n      if (resume && !this._timeout[test.getFullName()]) {\n        this._timeout[test.getFullName()] = \"failed\";\n        var qxEx = new qx.type.BaseError(\n          \"Error in asynchronous test\",\n          \"resume() called before wait()\"\n        );\n\n        this._createError(\"failure\", [qxEx], test);\n        this.fireDataEvent(\"endTest\", test);\n        return undefined;\n      }\n\n      this.fireDataEvent(\"startTest\", test);\n\n      if (qx.core.Environment.get(\"qx.debug.dispose\")) {\n        qx.dev.Debug.startDisposeProfiling();\n      }\n\n      if (this._timeout[test.getFullName()]) {\n        if (this._timeout[test.getFullName()] !== \"failed\") {\n          this._timeout[test.getFullName()].stop();\n          this._timeout[test.getFullName()].dispose();\n        }\n        delete this._timeout[test.getFullName()];\n      } else {\n        try {\n          test.setUp();\n        } catch (ex) {\n          if (ex instanceof qx.dev.unit.AsyncWrapper) {\n            if (this._timeout[test.getFullName()]) {\n              // Do nothing if there's already a timeout for this test\n              return;\n            }\n\n            if (ex.getDelay()) {\n              var that = this;\n              var defaultTimeoutFunction = function () {\n                throw new qx.core.AssertionError(\n                  \"Asynchronous Test Error in setUp\",\n                  \"Timeout of \" +\n                    ex.getDelay() +\n                    \" ms reached before resume() was called.\"\n                );\n              };\n              var timeoutFunc = ex.getDeferredFunction()\n                ? ex.getDeferredFunction()\n                : defaultTimeoutFunction;\n              var context = ex.getContext() ? ex.getContext() : window;\n              this._timeout[test.getFullName()] = qx.event.Timer.once(\n                function () {\n                  this.run(test, timeoutFunc, context);\n                },\n                that,\n                ex.getDelay()\n              );\n\n              this.fireDataEvent(\"wait\", test);\n            }\n            return undefined;\n          } else {\n            try {\n              this.tearDown(test);\n            } catch (except) {\n              /* Any exceptions here are likely caused by setUp having failed\n               previously, so we'll ignore them. */\n            }\n\n            if (ex.classname == \"qx.dev.unit.RequirementError\") {\n              this._createError(\"skip\", [ex], test);\n              this.fireDataEvent(\"endTest\", test);\n            } else {\n              if (\n                ex instanceof qx.type.BaseError &&\n                ex.message == qx.type.BaseError.DEFAULTMESSAGE\n              ) {\n                ex.message = \"setUp failed\";\n              } else {\n                ex.message = \"setUp failed: \" + ex.message;\n              }\n              this._createError(\"error\", [ex], test);\n              this.fireDataEvent(\"endTest\", test);\n            }\n\n            return undefined;\n          }\n        }\n      }\n\n      var returnValue;\n\n      try {\n        returnValue = testFunction.call(self || window);\n      } catch (ex) {\n        var error = true;\n        if (ex instanceof qx.dev.unit.AsyncWrapper) {\n          if (this._timeout[test.getFullName()]) {\n            // Do nothing if there's already a timeout for this test\n            return;\n          }\n\n          if (ex.getDelay()) {\n            var that = this;\n            var defaultTimeoutFunction = function () {\n              throw new qx.core.AssertionError(\n                \"Asynchronous Test Error\",\n                \"Timeout of \" +\n                  ex.getDelay() +\n                  \" ms reached before resume() was called.\"\n              );\n            };\n            var timeoutFunc = ex.getDeferredFunction()\n              ? ex.getDeferredFunction()\n              : defaultTimeoutFunction;\n            var context = ex.getContext() ? ex.getContext() : window;\n            this._timeout[test.getFullName()] = qx.event.Timer.once(\n              function () {\n                this.run(test, timeoutFunc, context);\n              },\n              that,\n              ex.getDelay()\n            );\n\n            this.fireDataEvent(\"wait\", test);\n          }\n        } else if (ex instanceof qx.dev.unit.MeasurementResult) {\n          error = false;\n          this._createError(\"endMeasurement\", [ex], test);\n        } else {\n          try {\n            this.tearDown(test);\n          } catch (except) {}\n          if (ex.classname == \"qx.core.AssertionError\") {\n            this._createError(\"failure\", [ex], test);\n            this.fireDataEvent(\"endTest\", test);\n          } else if (ex.classname == \"qx.dev.unit.RequirementError\") {\n            this._createError(\"skip\", [ex], test);\n            this.fireDataEvent(\"endTest\", test);\n          } else {\n            this._createError(\"error\", [ex], test);\n            this.fireDataEvent(\"endTest\", test);\n          }\n        }\n      }\n\n      if (!error) {\n        try {\n          this.tearDown(test);\n          this.fireDataEvent(\"endTest\", test);\n        } catch (ex) {\n          if (\n            ex instanceof qx.type.BaseError &&\n            ex.message == qx.type.BaseError.DEFAULTMESSAGE\n          ) {\n            ex.message = \"tearDown failed\";\n          } else {\n            ex.message = \"tearDown failed: \" + ex.message;\n          }\n\n          this._createError(\"error\", [ex], test);\n          this.fireDataEvent(\"endTest\", test);\n        }\n      }\n\n      /*\n      if (!this._timeout[test.getFullName()]) {\n        this.__removeListeners(test.getTestClass()[test.getName()]);\n      }\n      */\n\n      return returnValue;\n    },\n\n    /**\n     * Fire an error event\n     *\n     * @param eventName {String} Name of the event\n     * @param exceptions {Error[]} The exception(s), which caused the test to fail\n     * @param test {qx.dev.unit.TestSuite|qx.dev.unit.TestFunction} The test\n     */\n    _createError(eventName, exceptions, test) {\n      var errors = [];\n      for (var i = 0, l = exceptions.length; i < l; i++) {\n        // WebKit and Opera\n        errors.push({\n          exception: exceptions[i],\n          test: test\n        });\n      }\n\n      this.fireDataEvent(eventName, errors);\n    },\n\n    /**\n     * Wraps the AUT's qx.event.Registration.addListener function so that it\n     * stores references to all added listeners in an array attached to the\n     * current test function. This is done so that any listeners left over after\n     * test execution can be removed to make sure they don't influence other\n     * tests.\n     *\n     * @param testFunction {qx.dev.unit.TestFunction} The current test\n     */\n    __wrapAddListener(testFunction) {\n      testFunction._addedListeners = [];\n      if (!qx.event.Registration.addListenerOriginal) {\n        qx.event.Registration.addListenerOriginal =\n          qx.event.Registration.addListener;\n        qx.event.Registration.addListener = function (\n          target,\n          type,\n          listener,\n          self,\n          capture\n        ) {\n          var listenerId = qx.event.Registration.addListenerOriginal(\n            target,\n            type,\n            listener,\n            self,\n            capture\n          );\n\n          var store = true;\n          if (\n            (target.classname &&\n              target.classname.indexOf(\"testrunner.unit\") == 0) ||\n            (self &&\n              self.classname &&\n              self.classname.indexOf(\"testrunner.unit\") == 0)\n          ) {\n            store = false;\n          }\n          if (store) {\n            testFunction._addedListeners.push([target, listenerId]);\n          }\n          return listenerId;\n        };\n      }\n    },\n\n    /**\n     * Removes any listeners left over after a test's run.\n     *\n     * @param testFunction {qx.dev.unit.TestFunction} The current test\n     */\n    __removeListeners(testFunction) {\n      // remove listeners added during test execution\n      if (testFunction._addedListeners) {\n        var listeners = testFunction._addedListeners;\n        for (var i = 0, l = listeners.length; i < l; i++) {\n          var target = listeners[i][0];\n          var id = listeners[i][1];\n          try {\n            qx.event.Registration.removeListenerById(target, id);\n          } catch (ex) {}\n        }\n      }\n    },\n\n    /**\n     * Calls the generic tearDown method on the test class, then the specific\n     * tearDown for the test, if one is defined.\n     *\n     * @param test {Object} The test object (first argument of {@link #run})\n     */\n    tearDown(test) {\n      test.tearDown();\n      var testClass = test.getTestClass();\n      var specificTearDown =\n        \"tearDown\" + qx.lang.String.firstUp(test.getName());\n      if (testClass[specificTearDown]) {\n        testClass[specificTearDown]();\n      }\n      testClass.doAutoDispose();\n\n      if (\n        qx.core.Environment.get(\"qx.debug.dispose\") &&\n        qx.dev.Debug.disposeProfilingActive\n      ) {\n        var testName = test.getFullName();\n        var undisposed = qx.dev.Debug.stopDisposeProfiling();\n        for (var i = 0; i < undisposed.length; i++) {\n          var trace;\n          if (undisposed[i].stackTrace) {\n            trace = undisposed[i].stackTrace.join(\"\\n\");\n          }\n          window.top.qx.log.Logger.warn(\n            \"Undisposed object in \" +\n              testName +\n              \": \" +\n              undisposed[i].object.classname +\n              \"[\" +\n              undisposed[i].object.toHashCode() +\n              \"]\" +\n              \"\\n\" +\n              trace\n          );\n        }\n      }\n    }\n  },\n\n  destruct() {\n    this._timeout = null;\n  }\n});\n"
  ],
  "mappings": "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"
}