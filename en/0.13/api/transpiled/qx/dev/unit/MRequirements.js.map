{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "include",
    "dev",
    "unit",
    "MRequirementsBasic",
    "statics",
    "__hasPhp",
    "members",
    "hasHttp",
    "document",
    "location",
    "protocol",
    "indexOf",
    "hasPhp",
    "MRequirements",
    "url",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "req",
    "bom",
    "request",
    "Xhr",
    "onload",
    "lang",
    "Function",
    "bind",
    "Json",
    "parse",
    "responseText",
    "ex",
    "onerror",
    "abort",
    "open",
    "send",
    "hasGuiApp",
    "core",
    "Init",
    "getApplication",
    "application",
    "Standalone",
    "hasInlineApp",
    "Inline",
    "hasNativeApp",
    "Native",
    "hasChrome",
    "Environment",
    "get",
    "hasFirefox",
    "hasGecko",
    "hasIe",
    "hasMshtml",
    "hasOpera",
    "hasWebkit",
    "hasNoOsx",
    "hasNoWin7",
    "isWin7",
    "hasNoWin10",
    "isWin10",
    "hasNoChromeOnLinux",
    "hasAsyncFunctions"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MRequirements.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/* *********************************************************************\n ************************************************************************ */\n\n/**\n * Common requirement checks for unit tests. Example:\n *\n * <pre class=\"javascript\">\n * testBackend : function()\n * {\n *   this.require([\"http\", \"php\"]); // test will be skipped unless all conditions are met\n *   // test code goes here\n * }\n * </pre>\n *\n * @use(feature-checks)\n * @ignore(qx.application.Standalone)\n * @ignore(qx.application.Inline)\n * @ignore(qx.application.Native)\n *\n * @asset(qx/test/xmlhttp/php_version.php)\n */\nqx.Mixin.define(\"qx.dev.unit.MRequirements\", {\n  include: [qx.dev.unit.MRequirementsBasic],\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n  statics: {\n    /** @type {Boolean} Result of {@link #hasPhp}. Stored as class member to avoid\n     * repeating the check. */\n    __hasPhp: null\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    /**\n     * Checks if the application has been loaded over HTTP.\n     *\n     * @return {Boolean} <code>true</code> if HTTP is currently used\n     */\n    hasHttp() {\n      return document.location.protocol.indexOf(\"http\") == 0;\n    },\n\n    /**\n     * Checks if the server supports PHP.\n     *\n     * @return {Boolean} <code>true</code> if PHP is supported by the backend\n     */\n    hasPhp() {\n      if (qx.dev.unit.MRequirements.__hasPhp != null) {\n        return qx.dev.unit.MRequirements.__hasPhp;\n      }\n\n      var url = qx.util.ResourceManager.getInstance().toUri(\n        \"qx/test/xmlhttp/php_version.php\"\n      );\n\n      var req = new qx.bom.request.Xhr();\n\n      req.onload = qx.lang.Function.bind(function () {\n        try {\n          qx.lang.Json.parse(req.responseText);\n          qx.dev.unit.MRequirements.__hasPhp = true;\n        } catch (ex) {\n          qx.dev.unit.MRequirements.__hasPhp = false;\n        }\n      }, this);\n\n      req.onerror = req.abort = qx.lang.Function.bind(function () {\n        qx.dev.unit.MRequirements.__hasPhp = false;\n      }, this);\n\n      req.open(\"POST\", url, false);\n      try {\n        req.send();\n      } catch (ex) {\n        qx.dev.unit.MRequirements.__hasPhp = false;\n      }\n\n      return qx.dev.unit.MRequirements.__hasPhp;\n    },\n\n    /**\n     * Checks if the application extends qx.application.Standalone\n     *\n     * @return {Boolean} <code>true</code> if the application is a standalone (GUI)\n     * application\n     */\n    hasGuiApp() {\n      try {\n        return (\n          qx.core.Init.getApplication() instanceof qx.application.Standalone\n        );\n      } catch (ex) {\n        return false;\n      }\n    },\n\n    /**\n     * Checks if the application extends qx.application.Inline\n     *\n     * @return {Boolean} <code>true</code> if the application is an inline application\n     */\n    hasInlineApp() {\n      try {\n        return qx.core.Init.getApplication() instanceof qx.application.Inline;\n      } catch (ex) {\n        return false;\n      }\n    },\n\n    /**\n     * Checks if the application extends qx.application.Native\n     *\n     * @return {Boolean} <code>true</code> if the application is a native application\n     */\n    hasNativeApp() {\n      try {\n        return qx.core.Init.getApplication() instanceof qx.application.Native;\n      } catch (ex) {\n        return false;\n      }\n    },\n\n    /**\n     * Checks if the application is running in Google Chrome\n     *\n     * @return {Boolean} <code>true</code> if the browser is Google Chrome\n     */\n    hasChrome() {\n      return qx.core.Environment.get(\"browser.name\") === \"chrome\";\n    },\n\n    /**\n     * Checks if the application is running in Firefox\n     *\n     * @return {Boolean} <code>true</code> if the browser is Firefox\n     */\n    hasFirefox() {\n      return qx.core.Environment.get(\"browser.name\") === \"firefox\";\n    },\n\n    /**\n     * Checks if the application is running in a browser using the Gecko engine\n     *\n     * @return {Boolean} <code>true</code> if the browser engine is Mozilla Gecko\n     */\n    hasGecko() {\n      return qx.core.Environment.get(\"engine.name\") == \"gecko\";\n    },\n\n    /**\n     * Checks if the application is running in Internet Explorer\n     *\n     * @return {Boolean} <code>true</code> if the browser is Internet Explorer\n     */\n    hasIe() {\n      return qx.core.Environment.get(\"browser.name\") === \"ie\";\n    },\n\n    /**\n     * Checks if the application is running in a browser using the MSHTML engine\n     *\n     * @return {Boolean} <code>true</code> if the browser engine is MSHTML\n     */\n    hasMshtml() {\n      return qx.core.Environment.get(\"engine.name\") == \"mshtml\";\n    },\n\n    /**\n     * Checks if the application is running in a browser using the Opera engine\n     *\n     * @return {Boolean} <code>true</code> if the browser engine is Opera\n     */\n    hasOpera() {\n      return qx.core.Environment.get(\"engine.name\") == \"opera\";\n    },\n\n    /**\n     * Checks if the application is running in a browser using the Webkit engine\n     *\n     * @return {Boolean} <code>true</code> if the browser engine is Webkit\n     */\n    hasWebkit() {\n      return qx.core.Environment.get(\"engine.name\") == \"webkit\";\n    },\n\n    /**\n     * Checks if the application is NOT running on OS X\n     *\n     * @return {Boolean} <code>true</code> if the operating system is NOT OX X\n     */\n    hasNoOsx() {\n      return qx.core.Environment.get(\"os.name\") === \"osx\" ? false : true;\n    },\n\n    /**\n     * Checks if the application is running on Windows 7\n     *\n     * @return {Boolean} <code>false</code> if operating system is Windows 7\n     */\n    hasNoWin7() {\n      var isWin7 =\n        qx.core.Environment.get(\"os.name\") === \"win\" &&\n        qx.core.Environment.get(\"os.version\") === \"7\";\n      return isWin7 ? false : true;\n    },\n\n    /**\n     * Checks if the application is running on Windows 10\n     *\n     * @return {Boolean} <code>false</code> if operating system is Windows 10\n     */\n    hasNoWin10() {\n      var isWin10 =\n        qx.core.Environment.get(\"os.name\") === \"win\" &&\n        qx.core.Environment.get(\"os.version\") === \"10\";\n      return isWin10 ? false : true;\n    },\n\n    /**\n     * Checks if the application is not running in a Google Chrome browser on Linux\n     *\n     * @return {Boolean} <code>true</code> if the browser is not Google Chrome on Linux\n     */\n    hasNoChromeOnLinux() {\n      return qx.core.Environment.get(\"browser.name\") === \"chrome\" &&\n        qx.core.Environment.get(\"os.name\") === \"linux\"\n        ? false\n        : true;\n    },\n\n    /**\n     * Checks if the application is running on a client supporting async functions\n     *\n     * @return {Boolean} <code>true</code> if the client supports async functions\n     */\n    hasAsyncFunctions() {\n      return qx.core.Environment.get(\"ecmascript.function.async\");\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}