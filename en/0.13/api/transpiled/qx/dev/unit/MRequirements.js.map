{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "include",
    "dev",
    "unit",
    "MRequirementsBasic",
    "statics",
    "__hasPhp",
    "members",
    "hasHttp",
    "document",
    "location",
    "protocol",
    "indexOf",
    "hasPhp",
    "MRequirements",
    "url",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "req",
    "bom",
    "request",
    "Xhr",
    "onload",
    "lang",
    "Function",
    "bind",
    "Json",
    "parse",
    "responseText",
    "ex",
    "onerror",
    "abort",
    "open",
    "send",
    "hasGuiApp",
    "core",
    "Init",
    "getApplication",
    "application",
    "Standalone",
    "hasInlineApp",
    "Inline",
    "hasNativeApp",
    "Native",
    "hasChrome",
    "Environment",
    "get",
    "hasFirefox",
    "hasGecko",
    "hasIe",
    "hasMshtml",
    "hasOpera",
    "hasWebkit",
    "hasNoOsx",
    "hasNoWin7",
    "isWin7",
    "hasNoWin10",
    "isWin10",
    "hasNoChromeOnLinux",
    "hasAsyncFunctions"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MRequirements.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Daniel Wagner (danielwagner)\r\n\r\n************************************************************************ */\r\n\r\n/* *********************************************************************\r\n ************************************************************************ */\r\n\r\n/**\r\n * Common requirement checks for unit tests. Example:\r\n *\r\n * <pre class=\"javascript\">\r\n * testBackend : function()\r\n * {\r\n *   this.require([\"http\", \"php\"]); // test will be skipped unless all conditions are met\r\n *   // test code goes here\r\n * }\r\n * </pre>\r\n *\r\n * @use(feature-checks)\r\n * @ignore(qx.application.Standalone)\r\n * @ignore(qx.application.Inline)\r\n * @ignore(qx.application.Native)\r\n *\r\n * @asset(qx/test/xmlhttp/php_version.php)\r\n */\r\nqx.Mixin.define(\"qx.dev.unit.MRequirements\", {\r\n  include: [qx.dev.unit.MRequirementsBasic],\r\n\r\n  /*\r\n  *****************************************************************************\r\n     STATICS\r\n  *****************************************************************************\r\n  */\r\n  statics: {\r\n    /** @type {Boolean} Result of {@link #hasPhp}. Stored as class member to avoid\r\n     * repeating the check. */\r\n    __hasPhp: null\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n  members: {\r\n    /**\r\n     * Checks if the application has been loaded over HTTP.\r\n     *\r\n     * @return {Boolean} <code>true</code> if HTTP is currently used\r\n     */\r\n    hasHttp() {\r\n      return document.location.protocol.indexOf(\"http\") == 0;\r\n    },\r\n\r\n    /**\r\n     * Checks if the server supports PHP.\r\n     *\r\n     * @return {Boolean} <code>true</code> if PHP is supported by the backend\r\n     */\r\n    hasPhp() {\r\n      if (qx.dev.unit.MRequirements.__hasPhp != null) {\r\n        return qx.dev.unit.MRequirements.__hasPhp;\r\n      }\r\n\r\n      var url = qx.util.ResourceManager.getInstance().toUri(\r\n        \"qx/test/xmlhttp/php_version.php\"\r\n      );\r\n\r\n      var req = new qx.bom.request.Xhr();\r\n\r\n      req.onload = qx.lang.Function.bind(function () {\r\n        try {\r\n          qx.lang.Json.parse(req.responseText);\r\n          qx.dev.unit.MRequirements.__hasPhp = true;\r\n        } catch (ex) {\r\n          qx.dev.unit.MRequirements.__hasPhp = false;\r\n        }\r\n      }, this);\r\n\r\n      req.onerror = req.abort = qx.lang.Function.bind(function () {\r\n        qx.dev.unit.MRequirements.__hasPhp = false;\r\n      }, this);\r\n\r\n      req.open(\"POST\", url, false);\r\n      try {\r\n        req.send();\r\n      } catch (ex) {\r\n        qx.dev.unit.MRequirements.__hasPhp = false;\r\n      }\r\n\r\n      return qx.dev.unit.MRequirements.__hasPhp;\r\n    },\r\n\r\n    /**\r\n     * Checks if the application extends qx.application.Standalone\r\n     *\r\n     * @return {Boolean} <code>true</code> if the application is a standalone (GUI)\r\n     * application\r\n     */\r\n    hasGuiApp() {\r\n      try {\r\n        return (\r\n          qx.core.Init.getApplication() instanceof qx.application.Standalone\r\n        );\r\n      } catch (ex) {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Checks if the application extends qx.application.Inline\r\n     *\r\n     * @return {Boolean} <code>true</code> if the application is an inline application\r\n     */\r\n    hasInlineApp() {\r\n      try {\r\n        return qx.core.Init.getApplication() instanceof qx.application.Inline;\r\n      } catch (ex) {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Checks if the application extends qx.application.Native\r\n     *\r\n     * @return {Boolean} <code>true</code> if the application is a native application\r\n     */\r\n    hasNativeApp() {\r\n      try {\r\n        return qx.core.Init.getApplication() instanceof qx.application.Native;\r\n      } catch (ex) {\r\n        return false;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running in Google Chrome\r\n     *\r\n     * @return {Boolean} <code>true</code> if the browser is Google Chrome\r\n     */\r\n    hasChrome() {\r\n      return qx.core.Environment.get(\"browser.name\") === \"chrome\";\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running in Firefox\r\n     *\r\n     * @return {Boolean} <code>true</code> if the browser is Firefox\r\n     */\r\n    hasFirefox() {\r\n      return qx.core.Environment.get(\"browser.name\") === \"firefox\";\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running in a browser using the Gecko engine\r\n     *\r\n     * @return {Boolean} <code>true</code> if the browser engine is Mozilla Gecko\r\n     */\r\n    hasGecko() {\r\n      return qx.core.Environment.get(\"engine.name\") == \"gecko\";\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running in Internet Explorer\r\n     *\r\n     * @return {Boolean} <code>true</code> if the browser is Internet Explorer\r\n     */\r\n    hasIe() {\r\n      return qx.core.Environment.get(\"browser.name\") === \"ie\";\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running in a browser using the MSHTML engine\r\n     *\r\n     * @return {Boolean} <code>true</code> if the browser engine is MSHTML\r\n     */\r\n    hasMshtml() {\r\n      return qx.core.Environment.get(\"engine.name\") == \"mshtml\";\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running in a browser using the Opera engine\r\n     *\r\n     * @return {Boolean} <code>true</code> if the browser engine is Opera\r\n     */\r\n    hasOpera() {\r\n      return qx.core.Environment.get(\"engine.name\") == \"opera\";\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running in a browser using the Webkit engine\r\n     *\r\n     * @return {Boolean} <code>true</code> if the browser engine is Webkit\r\n     */\r\n    hasWebkit() {\r\n      return qx.core.Environment.get(\"engine.name\") == \"webkit\";\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is NOT running on OS X\r\n     *\r\n     * @return {Boolean} <code>true</code> if the operating system is NOT OX X\r\n     */\r\n    hasNoOsx() {\r\n      return qx.core.Environment.get(\"os.name\") === \"osx\" ? false : true;\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running on Windows 7\r\n     *\r\n     * @return {Boolean} <code>false</code> if operating system is Windows 7\r\n     */\r\n    hasNoWin7() {\r\n      var isWin7 =\r\n        qx.core.Environment.get(\"os.name\") === \"win\" &&\r\n        qx.core.Environment.get(\"os.version\") === \"7\";\r\n      return isWin7 ? false : true;\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running on Windows 10\r\n     *\r\n     * @return {Boolean} <code>false</code> if operating system is Windows 10\r\n     */\r\n    hasNoWin10() {\r\n      var isWin10 =\r\n        qx.core.Environment.get(\"os.name\") === \"win\" &&\r\n        qx.core.Environment.get(\"os.version\") === \"10\";\r\n      return isWin10 ? false : true;\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is not running in a Google Chrome browser on Linux\r\n     *\r\n     * @return {Boolean} <code>true</code> if the browser is not Google Chrome on Linux\r\n     */\r\n    hasNoChromeOnLinux() {\r\n      return qx.core.Environment.get(\"browser.name\") === \"chrome\" &&\r\n        qx.core.Environment.get(\"os.name\") === \"linux\"\r\n        ? false\r\n        : true;\r\n    },\r\n\r\n    /**\r\n     * Checks if the application is running on a client supporting async functions\r\n     *\r\n     * @return {Boolean} <code>true</code> if the client supports async functions\r\n     */\r\n    hasAsyncFunctions() {\r\n      return qx.core.Environment.get(\"ecmascript.function.async\");\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}