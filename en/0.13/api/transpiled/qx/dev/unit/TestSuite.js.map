{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "AbstractTestSuite",
    "construct",
    "testClassOrNamespace",
    "constructor",
    "call",
    "_tests",
    "add",
    "members",
    "lang",
    "Type",
    "isString",
    "evalTestClassOrNamespace",
    "window",
    "eval",
    "addFail",
    "isFunction",
    "addTestClass",
    "isObject",
    "addTestNamespace",
    "namespace",
    "classname",
    "isSubClassOf",
    "TestCase",
    "$$classtype",
    "Array",
    "key",
    "clazz",
    "push",
    "TestClass",
    "getTestClasses",
    "classes",
    "i",
    "length",
    "test",
    "TestSuite"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/TestSuite.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A TestSuite is a collection of test functions, classes and other test suites,\n * which should be run together.\n */\nqx.Class.define(\"qx.dev.unit.TestSuite\", {\n  extend: qx.dev.unit.AbstractTestSuite,\n\n  /**\n   * @param testClassOrNamespace {var} Either a string with the name of the test\n   *    class or test namespace or a reference to the test class or namespace.\n   *    All test in the given class/namespace will be added to the suite.\n   */\n  construct(testClassOrNamespace) {\n    super();\n\n    this._tests = [];\n\n    if (testClassOrNamespace) {\n      this.add(testClassOrNamespace);\n    }\n  },\n\n  members: {\n    /**\n     * Add a test class or namespace to the suite\n     *\n     * @lint ignoreDeprecated(alert, eval)\n     *\n     * @param testClassOrNamespace {var} Either a string with the name of the test\n     *    class or test namespace or a reference to the test class or namespace.\n     *    All test in the given class/namespace will be added to the suite.\n     */\n    add(testClassOrNamespace) {\n      // This try-block is needed to avoid errors (e.g. \"too much recursion\")\n      //      try\n      //      {\n      if (qx.lang.Type.isString(testClassOrNamespace)) {\n        var evalTestClassOrNamespace = window.eval(testClassOrNamespace);\n\n        if (!evalTestClassOrNamespace) {\n          this.addFail(\n            testClassOrNamespace,\n            \"The class/namespace '\" + testClassOrNamespace + \"' is undefined!\"\n          );\n        }\n\n        testClassOrNamespace = evalTestClassOrNamespace;\n      }\n\n      if (qx.lang.Type.isFunction(testClassOrNamespace)) {\n        this.addTestClass(testClassOrNamespace);\n      } else if (qx.lang.Type.isObject(testClassOrNamespace)) {\n        this.addTestNamespace(testClassOrNamespace);\n      } else {\n        this.addFail(\n          \"existsCheck\",\n          \"Unknown test class '\" + testClassOrNamespace + \"'!\"\n        );\n\n        return;\n      }\n      //      }\n      //      catch (ex)\n      //      {\n      //        window.alert(\"An error occurred while adding test classes/namespaces\\nPlease try a different test file.\");\n      //      }\n    },\n\n    /**\n     * Add all tests from the given namespace to the suite\n     *\n     * @param namespace {Object} The topmost namespace of the tests classes to add.\n     */\n    addTestNamespace(namespace) {\n      if (qx.lang.Type.isFunction(namespace) && namespace.classname) {\n        if (qx.Class.isSubClassOf(namespace, qx.dev.unit.TestCase)) {\n          if (namespace.$$classtype !== \"abstract\") {\n            this.addTestClass(namespace);\n          }\n          return;\n        }\n      } else if (\n        qx.lang.Type.isObject(namespace) &&\n        !(namespace instanceof Array)\n      ) {\n        for (var key in namespace) {\n          this.addTestNamespace(namespace[key]);\n        }\n      }\n    },\n\n    /**\n     * Add a test class to the suite\n     *\n     * @param clazz {Class} The test class to add\n     */\n    addTestClass(clazz) {\n      this._tests.push(new qx.dev.unit.TestClass(clazz));\n    },\n\n    /**\n     * Get a list of all test classes in the suite\n     *\n     * @return {Class[]} A list of all test classes in the suite\n     */\n    getTestClasses() {\n      var classes = [];\n\n      for (var i = 0; i < this._tests.length; i++) {\n        var test = this._tests[i];\n\n        if (test instanceof qx.dev.unit.TestClass) {\n          classes.push(test);\n        }\n      }\n\n      return classes;\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}