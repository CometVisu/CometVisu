{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "sinon",
    "__getSinon",
    "__exposeAssertions",
    "__sandbox",
    "createSandbox",
    "members",
    "__fakeXhr",
    "temp",
    "assert",
    "expose",
    "includeFail",
    "method",
    "dev",
    "unit",
    "Sinon",
    "getSinon",
    "spy",
    "function_or_object",
    "apply",
    "arguments",
    "stub",
    "object",
    "func",
    "res",
    "bind",
    "lang",
    "Type",
    "isFunction",
    "callsFake",
    "mock",
    "useFakeXMLHttpRequest",
    "useFakeServer",
    "getRequests",
    "requests",
    "getServer",
    "server",
    "getSandbox",
    "deepStub",
    "__getOwnProperties",
    "forEach",
    "prop",
    "__stubProperty",
    "shallowStub",
    "targetClazz",
    "propsToExclude",
    "indexOf",
    "injectStub",
    "property",
    "customStub",
    "returns",
    "revealMock",
    "customObject",
    "source",
    "__deepClone",
    "obj",
    "clone",
    "clazz",
    "constructor",
    "clazzes",
    "properties",
    "superclass",
    "push",
    "length",
    "found",
    "some",
    "prototype",
    "hasOwnProperty",
    "MMock"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MMock.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n/**\n *\n * Provides test spies, stubs and mocks as well as custom assertions.\n *\n * Here is a simple example:\n *\n * <pre class=\"javascript\">\n *\n * // Test\n * qx&#046;Class.define(\"qx.test.Klass\",\n * {\n *   extend : qx.dev.unit.TestCase,\n *\n *   include : qx.dev.unit.MMock,\n *\n *   members :\n *   {\n *     \"test: doSpecial on condition xyz\": function() {\n *       // Set-Up\n *       var obj = new qx.Klass();\n *\n *       // Wraps obj.doSpecial in a spy function and\n *       // replaces the original method with this spy.\n *       this.spy(obj, \"doSpecial\");\n *\n *       // Run code that is expected to fulfill condition\n *       obj.onCondition(\"xyz\");\n *\n *       // Assert that spy was called\n *       this.assertCalled(obj.doSpecial);\n *     },\n *\n *     tearDown: function() {\n *       // Restore all stubs, spies and overridden host objects.\n *       //\n *       // It is a good idea to always run this in the <code>tearDown()</code>\n *       // method, especially when overwriting global or host objects.\n *       this.getSandbox().restore();\n *     }\n *   }\n * });\n *\n * // Implementation\n * qx&#046;Class.define(\"qx.Klass\",\n * {\n *   extend : qx.core.Object,\n *\n *   members :\n *   {\n *     onCondition: function(condition) {\n *\n *       // Complex code determining mustDoSpecial\n *       // by examining condition passed\n *\n *       if (mustDoSpecial) {\n *         this.doSpecial();\n *       }\n *     },\n *\n *     doSpecial: function() {\n *\n *     }\n *   }\n * });\n *\n * </pre>\n *\n * This mixin provides assertions such as assertCalled() that work\n * with spies and stubs. Besides offering a compact way to express expectations,\n * those assertions have the advantage that meaningful error messages can be\n * generated.\n *\n * For full list of assertions see http://sinonjs.org/docs/#assertions.\n * Note that sinon.assert.xyz() translates as assertXyz().\n *\n */\nqx.Mixin.define(\"qx.dev.unit.MMock\", {\n  construct() {\n    var sinon = this.__getSinon();\n    this.__exposeAssertions();\n    this.__sandbox = sinon.createSandbox();\n  },\n\n  members: {\n    __sandbox: null,\n\n    __fakeXhr: null,\n\n    /**\n     * Expose Sinon.JS assertions. Provides methods such\n     * as assertCalled(), assertCalledWith().\n     * (http://sinonjs.org/docs/#assert-expose)\n     * Does not override existing assertion methods.\n     * @ignore(sinon.assert.expose)\n     */\n    __exposeAssertions() {\n      var temp = {};\n      sinon.assert.expose(temp, { includeFail: false });\n      for (var method in temp) {\n        if (!this[method]) {\n          this[method] = temp[method];\n        }\n      }\n    },\n\n    /**\n     * Get the Sinon.JS object.\n     *\n     * @return {Object}\n     * @internal\n     */\n    __getSinon() {\n      return qx.dev.unit.Sinon.getSinon();\n    },\n\n    /**\n     * Test spies allow introspection on how a function is used\n     * throughout the system under test.\n     *\n     * * spy()\n     *   Creates an anonymous function that records arguments,\n     *   this value, exceptions and return values for all calls.\n     *\n     * * spy(func)\n     *   Spies on the provided function\n     *\n     * * spy(object, \"method\")\n     *   Creates a spy for object.method and replaces the original method\n     *   with the spy. The spy acts exactly like the original method in all cases.\n     *   The original method can be restored by calling object.method.restore().\n     *   The returned spy is the function object which replaced the original method.\n     *   spy === object.method.\n     *\n     * * spy.withArgs(arg1[, arg2, ...])\n     *   Creates a spy that only records calls when the received arguments matches those\n     *   passed to <code>withArgs</code>.\n     *\n     * A spy has a rich interface to introspect how the wrapped function was used:\n     *\n     * * spy.withArgs(arg1[, arg2, ...]);\n     * * spy.callCount\n     * * spy.called\n     * * spy.calledOnce\n     * * spy.calledTwice\n     * * spy.calledThrice\n     * * spy.firstCall\n     * * spy.secondCall\n     * * spy.thirdCall\n     * * spy.lastCall\n     * * spy.calledBefore(anotherSpy)\n     * * spy.calledAfter(anotherSpy)\n     * * spy.calledOn(obj)\n     * * spy.alwaysCalledOn(obj)\n     * * spy.calledWith(arg1, arg2, ...)\n     * * spy.alwaysCalledWith(arg1, arg2, ...)\n     * * spy.calledWithExactly(arg1, arg2, ...)\n     * * spy.alwaysCalledWithExactly(arg1, arg2, ...)\n     * * spy.calledWithMatch(arg1, arg2, ...);\n     * * spy.alwaysCalledWithMatch(arg1, arg2, ...);\n     * * spy.calledWithNew();\n     * * spy.neverCalledWith(arg1, arg2, ...);\n     * * spy.neverCalledWithMatch(arg1, arg2, ...);\n     * * spy.threw()\n     * * spy.threw(\"TypeError\")\n     * * spy.threw(obj)\n     * * spy.alwaysThrew()\n     * * spy.alwaysThrew(\"TypeError\")\n     * * spy.alwaysThrew(obj)\n     * * spy.returned(obj)\n     * * spy.alwaysReturned(obj)\n     * * spy.getCall(n)\n     * * spy.thisValues\n     * * spy.args\n     * * spy.exceptions\n     * * spy.returnValues\n     * * spy.reset()\n     * * spy.printf(\"format string\", [arg1, arg2, ...])\n     *\n     * See http://sinonjs.org/docs/#spies.\n     *\n     * Note: Spies are transparently added to a sandbox. To restore\n     * the original function for all spies run <code>this.getSandbox().restore()</code>\n     * in your <code>tearDown()</code> method.\n     *\n     * @param function_or_object {Function|Object} Spies on the\n     *   provided function or object.\n     * @param method {String?null} The method to spy upon if an object was given.\n     * @return {Function} The wrapped function enhanced with properties and methods\n     *   that allow for introspection. See http://sinonjs.org/docs/#spies.\n     */\n    spy(function_or_object, method) {\n      return this.__sandbox.spy.apply(this.__sandbox, arguments);\n    },\n\n    /**\n     * Test stubs are functions (spies) with pre-programmed behavior.\n     *\n     * * stub()\n     *   Creates an anonymous stub function\n     *\n     * * stub(object, \"method\")\n     *   Replaces object.method with a stub function. The original function\n     *   can be restored by calling object.method.restore() (or stub.restore()).\n     *   An exception is thrown if the property is not already a function,\n     *   to help avoid typos when stubbing methods.\n     *\n     * * stub(obj)\n     *   Stubs all the object's methods.\n     *\n     * * stub.withArgs(arg1[, arg2, ...])\n     *   Stubs the method only for the provided arguments. Can be used to create\n     *   a stub that acts differently in response to different arguments.\n     *\n     * A stub has the interface of a spy in addition to methods that allow to define behaviour:\n     *\n     * * stub.returns(obj)\n     * * stub.throws()\n     * * stub.throws(\"TypeError\")\n     * * stub.throws(obj)\n     * * stub.callsArg(index)\n     * * stub.callsArg(0)\n     * * stub.callsArgWith(index, arg1, arg2, ...)\n     *\n     * See http://sinonjs.org/docs/#stubs.\n     *\n     * Note: Stubs are transparently added to a sandbox. To restore\n     * the original function for all stubs run <code>this.getSandbox().restore()</code>\n     * in your <code>tearDown()</code> method.\n     *\n     * @param object {Object?null} Object to stub. Creates an anonymous stub function\n     *   if not given.\n     * @param  method {String?null} Replaces object.method with a stub function.\n     *   An exception is thrown if the property is not already a function, to\n     *   help avoid typos when stubbing methods.\n     * @return {Function} A stub. Has the interface of a spy in addition to methods\n     *   that allow to define behaviour. See http://sinonjs.org/docs/#stubs.\n     *\n     */\n    stub(object, method, func) {\n      let res = this.__sandbox.stub.bind(this.__sandbox)(object, method);\n      if (func && qx.lang.Type.isFunction(func)) {\n        res = res.callsFake(func);\n      }\n      return res;\n    },\n\n    /**\n     * Mocks are slightly different from spies and stubs in that you mock an\n     * object, and then set an expectation on one or more of its objects.\n     *\n     * * var mock = mock(obj)\n     *   Creates a mock for the provided object. Does not change the object, but\n     *   returns a mock object to set expectations on the object's methods.\n     *\n     * * var expectation = mock.expects(\"method\")\n     *   Overrides obj.method with a mock function and returns an expectation\n     *   object. Expectations implement both the spy and stub interface plus\n     *   the methods described below.\n     *\n     * Set expectations with following methods. All methods return the expectation\n     * itself, meaning expectations can be chained.\n     *\n     * * expectation.atLeast(number);\n     * * expectation.atMost(number);\n     * * expectation.never();\n     * * expectation.once();\n     * * expectation.twice();\n     * * expectation.thrice();\n     * * expectation.exactly(number);\n     * * expectation.withArgs(arg1, arg2, ...);\n     * * expectation.withExactArgs(arg1, arg2, ...);\n     * * expectation.on(obj);\n     * * expectation.verify();\n     *\n     * See http://sinonjs.org/docs/#mocks.\n     *\n     * @param object {Object} The object to create a mock of.\n     * @return {Function} A mock to set expectations on. See http://sinonjs.org/docs/#mocks.\n     */\n    mock(object) {\n      var sinon = this.__getSinon();\n      return sinon.mock.apply(sinon, arguments);\n    },\n\n    /**\n     * Replace the native XMLHttpRequest object in browsers that support it with\n     * a custom implementation which does not send actual requests.\n     *\n     * Note: The fake XHR is transparently added to a sandbox. To restore\n     * the original host method run <code>this.getSandbox().restore()</code>\n     * in your <code>tearDown()</code> method.\n     *\n     * See http://sinonjs.org/docs/#useFakeXMLHttpRequest.\n     *\n     * @return {Object}\n     */\n    useFakeXMLHttpRequest() {\n      return (this.__fakeXhr = this.__sandbox.useFakeServer());\n    },\n\n    /**\n     * Get requests made with faked XHR or server.\n     *\n     * Each request can be queried for url, method, requestHeaders,\n     * status and more.\n     *\n     * See http://sinonjs.org/docs/#FakeXMLHttpRequest.\n     *\n     * @return {Array} Array of faked requests.\n     */\n    getRequests() {\n      return this.__fakeXhr.requests;\n    },\n\n    /**\n     * As {@link #useFakeXMLHttpRequest}, but additionally provides a high-level\n     * API to setup server responses. To setup responses, use the server\n     * returned by {@link #getServer}.\n     *\n     * See http://sinonjs.org/docs/#server.\n     *\n     * Note: The fake server is transparently added to a sandbox. To restore\n     * the original host method run <code>this.getSandbox().restore()</code>\n     * in your <code>tearDown()</code> method.\n     *\n     * @return {Object}\n     */\n    useFakeServer() {\n      return (this.__fakeXhr = this.__sandbox.useFakeServer());\n    },\n\n    /**\n     * Get fake server created by {@link #useFakeServer}.\n     *\n     * @return {Object} Fake server.\n     */\n    getServer() {\n      return this.__sandbox.server;\n    },\n\n    /**\n     * Get sandbox.\n     *\n     * The sandbox holds all stubs and mocks. Run <code>this.getSandbox().restore()</code>\n     * to restore all mock objects.\n     *\n     * @return {Object}\n     *        Sandbox object.\n     */\n    getSandbox() {\n      return this.__sandbox;\n    },\n\n    /**\n     *\n     * Returns a deep copied, API-identical stubbed out clone of the given\n     * object.\n     *\n     * In contrast to the shallow {@link #stub}, also stubs out properties that\n     * belong to the prototype chain.\n     *\n     * @param object {Object} Object to stub deeply.\n     * @return {Object} A stub.\n     */\n    deepStub(object) {\n      this.__getOwnProperties(object).forEach(function (prop) {\n        this.__stubProperty(object, prop);\n      }, this);\n\n      return object;\n    },\n\n    /**\n     *\n     * Shallowly stub all methods (except excluded) that belong to classes found in inheritance\n     * chain up to (but including) the given class.\n     *\n     * @param object {Object} Object to stub shallowly.\n     * @param targetClazz {Object} Class which marks the end of the chain.\n     * @param propsToExclude {Array} Array with properties which shouldn't be stubbed.\n     * @return {Object} A stub.\n     */\n    shallowStub(object, targetClazz, propsToExclude) {\n      this.__getOwnProperties(object, targetClazz).forEach(function (prop) {\n        if (propsToExclude && propsToExclude.indexOf(prop) >= 0) {\n          // don't stub excluded prop\n          return;\n        }\n        this.__stubProperty(object, prop);\n      }, this);\n\n      return object;\n    },\n\n    /**\n     *\n     * Changes the given factory (e.g. a constructor) to return a stub. The\n     * method itself returns this stub.\n     *\n     * By default, the stub returned by the changed factory is the object built\n     * by the original factory, but deeply stubbed (see {@link #deepStub}).\n     * Alternatively, a custom stub may be given explicitly that is used instead.\n     *\n     * @param object {Object} Namespace to hold factory, e.g. qx.html.\n     * @param property {String} Property as string that functions as\n     *  constructor, e.g. \"Element\".\n     * @param customStub {Object?} Stub to inject.\n     * @return {Object} Injected stub.\n     */\n    injectStub(object, property, customStub) {\n      var stub = customStub || this.deepStub(new object[property]());\n\n      this.stub(object, property).returns(stub);\n      return stub;\n    },\n\n    /**\n     * Changes the given factory (e.g. a constructor) to make a mock of the\n     * object returned. The method itself returns this mock.\n     *\n     * By default, the object returned by the changed factory (that a mock is\n     * made of) is a deep copied, API-identical clone of the object built by the\n     * original factory. Alternatively, the object returned can be given\n     * explicitly.\n     *\n     * @param object {Object} Namespace to hold factory, e.g. qx.html.\n     * @param property {String} Property as string that functions as\n     *  constructor, e.g. \"Element\".\n     * @param customObject {Object?} Object to inject.\n     * @return {Object} Mock of the object built.\n     */\n    revealMock(object, property, customObject) {\n      var source = customObject || this.__deepClone(new object[property]());\n\n      this.stub(object, property).returns(source);\n      return this.mock(source);\n    },\n\n    /**\n     * Deep clone object by copying properties from prototype.\n     *\n     * @param obj {Object} Object to prepare (that is, clone).\n     * @return {Object} Prepared (deeply cloned) object.\n     */\n    __deepClone(obj) {\n      var clone = {};\n\n      // Copy from prototype\n      for (var prop in obj) {\n        clone[prop] = obj[prop];\n      }\n\n      return clone;\n    },\n\n    /**\n     * Get the object’s own properties.\n     *\n     * @param object {Object} Object to analyze.\n     * @param targetClazz {Object} Class which marks the end of the chain.\n     * @return {Array} Array of the object’s own properties.\n     */\n    __getOwnProperties(object, targetClazz) {\n      var clazz = object.constructor,\n        clazzes = [],\n        properties = [];\n\n      // Find classes in inheritance chain up to targetClazz\n      if (targetClazz) {\n        while (clazz.superclass) {\n          clazzes.push(clazz);\n          clazz = clazz.superclass;\n          if (clazz == targetClazz.superclass) {\n            break;\n          }\n        }\n      }\n\n      // Check if property is own in one of the classes in chain\n      for (var prop in object) {\n        if (clazzes.length) {\n          var found = clazzes.some(function (clazz) {\n            return clazz.prototype.hasOwnProperty(prop);\n          });\n          if (!found) {\n            continue;\n          }\n        }\n\n        properties.push(prop);\n      }\n\n      return properties;\n    },\n\n    /**\n     * Safely stub property.\n     *\n     * @param object {Object} Object to stub.\n     * @param prop {String} Property to stub.\n     */\n    __stubProperty(object, prop) {\n      // Leave constructor and properties intact\n      if (prop === \"constructor\" || typeof object[prop] !== \"function\") {\n        return;\n      }\n\n      this.stub(object, prop);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,SAAS,uBAAG;MACV,IAAIC,KAAK,GAAG,IAAI,CAACC,SAAU,EAAE;MAC7B,IAAI,CAACC,SAAkB,EAAE;MACzB,IAAI,CAACC,SAAS,GAAGH,KAAK,CAACI,aAAa,EAAE;IACxC,CAAC;IAEDC,OAAO,EAAE;MACPF,SAAS,EAAE,IAAI;MAEfG,SAAS,EAAE,IAAI;MAEf;AACJ;AACA;AACA;AACA;AACA;AACA;MACIJ,SAAkB,uBAAG;QACnB,IAAIK,IAAI,GAAG,CAAC,CAAC;QACbP,KAAK,CAACQ,MAAM,CAACC,MAAM,CAACF,IAAI,EAAE;UAAEG,WAAW,EAAE;QAAM,CAAC,CAAC;QACjD,KAAK,IAAIC,MAAM,IAAIJ,IAAI,EAAE;UACvB,IAAI,CAAC,IAAI,CAACI,MAAM,CAAC,EAAE;YACjB,IAAI,CAACA,MAAM,CAAC,GAAGJ,IAAI,CAACI,MAAM,CAAC;UAC7B;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIV,SAAU,uBAAG;QACX,OAAOR,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,EAAE;MACrC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,GAAG,eAACC,kBAAkB,EAAEN,MAAM,EAAE;QAC9B,OAAO,IAAI,CAACR,SAAS,CAACa,GAAG,CAACE,KAAK,CAAC,IAAI,CAACf,SAAS,EAAEgB,SAAS,CAAC;MAC5D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,gBAACC,MAAM,EAAEV,MAAM,EAAEW,IAAI,EAAE;QACzB,IAAIC,GAAG,GAAG,IAAI,CAACpB,SAAS,CAACiB,IAAI,CAACI,IAAI,CAAC,IAAI,CAACrB,SAAS,CAAC,CAACkB,MAAM,EAAEV,MAAM,CAAC;QAClE,IAAIW,IAAI,IAAI7B,EAAE,CAACgC,IAAI,CAACC,IAAI,CAACC,UAAU,CAACL,IAAI,CAAC,EAAE;UACzCC,GAAG,GAAGA,GAAG,CAACK,SAAS,CAACN,IAAI,CAAC;QAC3B;QACA,OAAOC,GAAG;MACZ,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"
}