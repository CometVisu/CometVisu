{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "sinon",
    "__getSinon",
    "__exposeAssertions",
    "__sandbox",
    "createSandbox",
    "members",
    "__fakeXhr",
    "__P_189_1",
    "temp",
    "assert",
    "expose",
    "includeFail",
    "method",
    "__P_189_0",
    "dev",
    "unit",
    "Sinon",
    "getSinon",
    "spy",
    "function_or_object",
    "apply",
    "arguments",
    "stub",
    "object",
    "func",
    "res",
    "bind",
    "lang",
    "Type",
    "isFunction",
    "callsFake",
    "mock",
    "useFakeXMLHttpRequest",
    "useFakeServer",
    "getRequests",
    "requests",
    "getServer",
    "server",
    "getSandbox",
    "deepStub",
    "__getOwnProperties",
    "forEach",
    "prop",
    "__stubProperty",
    "shallowStub",
    "targetClazz",
    "propsToExclude",
    "indexOf",
    "injectStub",
    "property",
    "customStub",
    "returns",
    "revealMock",
    "customObject",
    "source",
    "__deepClone",
    "__P_189_6",
    "obj",
    "clone",
    "__P_189_4",
    "clazz",
    "constructor",
    "clazzes",
    "properties",
    "superclass",
    "push",
    "length",
    "found",
    "some",
    "prototype",
    "hasOwnProperty",
    "__P_189_5",
    "MMock"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MMock.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Tristan Koch (tristankoch)\r\n\r\n************************************************************************ */\r\n/**\r\n *\r\n * Provides test spies, stubs and mocks as well as custom assertions.\r\n *\r\n * Here is a simple example:\r\n *\r\n * <pre class=\"javascript\">\r\n *\r\n * // Test\r\n * qx&#046;Class.define(\"qx.test.Klass\",\r\n * {\r\n *   extend : qx.dev.unit.TestCase,\r\n *\r\n *   include : qx.dev.unit.MMock,\r\n *\r\n *   members :\r\n *   {\r\n *     \"test: doSpecial on condition xyz\": function() {\r\n *       // Set-Up\r\n *       var obj = new qx.Klass();\r\n *\r\n *       // Wraps obj.doSpecial in a spy function and\r\n *       // replaces the original method with this spy.\r\n *       this.spy(obj, \"doSpecial\");\r\n *\r\n *       // Run code that is expected to fulfill condition\r\n *       obj.onCondition(\"xyz\");\r\n *\r\n *       // Assert that spy was called\r\n *       this.assertCalled(obj.doSpecial);\r\n *     },\r\n *\r\n *     tearDown: function() {\r\n *       // Restore all stubs, spies and overridden host objects.\r\n *       //\r\n *       // It is a good idea to always run this in the <code>tearDown()</code>\r\n *       // method, especially when overwriting global or host objects.\r\n *       this.getSandbox().restore();\r\n *     }\r\n *   }\r\n * });\r\n *\r\n * // Implementation\r\n * qx&#046;Class.define(\"qx.Klass\",\r\n * {\r\n *   extend : qx.core.Object,\r\n *\r\n *   members :\r\n *   {\r\n *     onCondition: function(condition) {\r\n *\r\n *       // Complex code determining mustDoSpecial\r\n *       // by examining condition passed\r\n *\r\n *       if (mustDoSpecial) {\r\n *         this.doSpecial();\r\n *       }\r\n *     },\r\n *\r\n *     doSpecial: function() {\r\n *\r\n *     }\r\n *   }\r\n * });\r\n *\r\n * </pre>\r\n *\r\n * This mixin provides assertions such as assertCalled() that work\r\n * with spies and stubs. Besides offering a compact way to express expectations,\r\n * those assertions have the advantage that meaningful error messages can be\r\n * generated.\r\n *\r\n * For full list of assertions see http://sinonjs.org/docs/#assertions.\r\n * Note that sinon.assert.xyz() translates as assertXyz().\r\n *\r\n */\r\nqx.Mixin.define(\"qx.dev.unit.MMock\", {\r\n  construct() {\r\n    var sinon = this.__getSinon();\r\n    this.__exposeAssertions();\r\n    this.__sandbox = sinon.createSandbox();\r\n  },\r\n\r\n  members: {\r\n    __sandbox: null,\r\n\r\n    __fakeXhr: null,\r\n\r\n    /**\r\n     * Expose Sinon.JS assertions. Provides methods such\r\n     * as assertCalled(), assertCalledWith().\r\n     * (http://sinonjs.org/docs/#assert-expose)\r\n     * Does not override existing assertion methods.\r\n     * @ignore(sinon.assert.expose)\r\n     */\r\n    __exposeAssertions() {\r\n      var temp = {};\r\n      sinon.assert.expose(temp, { includeFail: false });\r\n      for (var method in temp) {\r\n        if (!this[method]) {\r\n          this[method] = temp[method];\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get the Sinon.JS object.\r\n     *\r\n     * @return {Object}\r\n     * @internal\r\n     */\r\n    __getSinon() {\r\n      return qx.dev.unit.Sinon.getSinon();\r\n    },\r\n\r\n    /**\r\n     * Test spies allow introspection on how a function is used\r\n     * throughout the system under test.\r\n     *\r\n     * * spy()\r\n     *   Creates an anonymous function that records arguments,\r\n     *   this value, exceptions and return values for all calls.\r\n     *\r\n     * * spy(func)\r\n     *   Spies on the provided function\r\n     *\r\n     * * spy(object, \"method\")\r\n     *   Creates a spy for object.method and replaces the original method\r\n     *   with the spy. The spy acts exactly like the original method in all cases.\r\n     *   The original method can be restored by calling object.method.restore().\r\n     *   The returned spy is the function object which replaced the original method.\r\n     *   spy === object.method.\r\n     *\r\n     * * spy.withArgs(arg1[, arg2, ...])\r\n     *   Creates a spy that only records calls when the received arguments matches those\r\n     *   passed to <code>withArgs</code>.\r\n     *\r\n     * A spy has a rich interface to introspect how the wrapped function was used:\r\n     *\r\n     * * spy.withArgs(arg1[, arg2, ...]);\r\n     * * spy.callCount\r\n     * * spy.called\r\n     * * spy.calledOnce\r\n     * * spy.calledTwice\r\n     * * spy.calledThrice\r\n     * * spy.firstCall\r\n     * * spy.secondCall\r\n     * * spy.thirdCall\r\n     * * spy.lastCall\r\n     * * spy.calledBefore(anotherSpy)\r\n     * * spy.calledAfter(anotherSpy)\r\n     * * spy.calledOn(obj)\r\n     * * spy.alwaysCalledOn(obj)\r\n     * * spy.calledWith(arg1, arg2, ...)\r\n     * * spy.alwaysCalledWith(arg1, arg2, ...)\r\n     * * spy.calledWithExactly(arg1, arg2, ...)\r\n     * * spy.alwaysCalledWithExactly(arg1, arg2, ...)\r\n     * * spy.calledWithMatch(arg1, arg2, ...);\r\n     * * spy.alwaysCalledWithMatch(arg1, arg2, ...);\r\n     * * spy.calledWithNew();\r\n     * * spy.neverCalledWith(arg1, arg2, ...);\r\n     * * spy.neverCalledWithMatch(arg1, arg2, ...);\r\n     * * spy.threw()\r\n     * * spy.threw(\"TypeError\")\r\n     * * spy.threw(obj)\r\n     * * spy.alwaysThrew()\r\n     * * spy.alwaysThrew(\"TypeError\")\r\n     * * spy.alwaysThrew(obj)\r\n     * * spy.returned(obj)\r\n     * * spy.alwaysReturned(obj)\r\n     * * spy.getCall(n)\r\n     * * spy.thisValues\r\n     * * spy.args\r\n     * * spy.exceptions\r\n     * * spy.returnValues\r\n     * * spy.reset()\r\n     * * spy.printf(\"format string\", [arg1, arg2, ...])\r\n     *\r\n     * See http://sinonjs.org/docs/#spies.\r\n     *\r\n     * Note: Spies are transparently added to a sandbox. To restore\r\n     * the original function for all spies run <code>this.getSandbox().restore()</code>\r\n     * in your <code>tearDown()</code> method.\r\n     *\r\n     * @param function_or_object {Function|Object} Spies on the\r\n     *   provided function or object.\r\n     * @param method {String?null} The method to spy upon if an object was given.\r\n     * @return {Function} The wrapped function enhanced with properties and methods\r\n     *   that allow for introspection. See http://sinonjs.org/docs/#spies.\r\n     */\r\n    spy(function_or_object, method) {\r\n      return this.__sandbox.spy.apply(this.__sandbox, arguments);\r\n    },\r\n\r\n    /**\r\n     * Test stubs are functions (spies) with pre-programmed behavior.\r\n     *\r\n     * * stub()\r\n     *   Creates an anonymous stub function\r\n     *\r\n     * * stub(object, \"method\")\r\n     *   Replaces object.method with a stub function. The original function\r\n     *   can be restored by calling object.method.restore() (or stub.restore()).\r\n     *   An exception is thrown if the property is not already a function,\r\n     *   to help avoid typos when stubbing methods.\r\n     *\r\n     * * stub(obj)\r\n     *   Stubs all the object's methods.\r\n     *\r\n     * * stub.withArgs(arg1[, arg2, ...])\r\n     *   Stubs the method only for the provided arguments. Can be used to create\r\n     *   a stub that acts differently in response to different arguments.\r\n     *\r\n     * A stub has the interface of a spy in addition to methods that allow to define behaviour:\r\n     *\r\n     * * stub.returns(obj)\r\n     * * stub.throws()\r\n     * * stub.throws(\"TypeError\")\r\n     * * stub.throws(obj)\r\n     * * stub.callsArg(index)\r\n     * * stub.callsArg(0)\r\n     * * stub.callsArgWith(index, arg1, arg2, ...)\r\n     *\r\n     * See http://sinonjs.org/docs/#stubs.\r\n     *\r\n     * Note: Stubs are transparently added to a sandbox. To restore\r\n     * the original function for all stubs run <code>this.getSandbox().restore()</code>\r\n     * in your <code>tearDown()</code> method.\r\n     *\r\n     * @param object {Object?null} Object to stub. Creates an anonymous stub function\r\n     *   if not given.\r\n     * @param  method {String?null} Replaces object.method with a stub function.\r\n     *   An exception is thrown if the property is not already a function, to\r\n     *   help avoid typos when stubbing methods.\r\n     * @return {Function} A stub. Has the interface of a spy in addition to methods\r\n     *   that allow to define behaviour. See http://sinonjs.org/docs/#stubs.\r\n     *\r\n     */\r\n    stub(object, method, func) {\r\n      let res = this.__sandbox.stub.bind(this.__sandbox)(object, method);\r\n      if (func && qx.lang.Type.isFunction(func)) {\r\n        res = res.callsFake(func);\r\n      }\r\n      return res;\r\n    },\r\n\r\n    /**\r\n     * Mocks are slightly different from spies and stubs in that you mock an\r\n     * object, and then set an expectation on one or more of its objects.\r\n     *\r\n     * * var mock = mock(obj)\r\n     *   Creates a mock for the provided object. Does not change the object, but\r\n     *   returns a mock object to set expectations on the object's methods.\r\n     *\r\n     * * var expectation = mock.expects(\"method\")\r\n     *   Overrides obj.method with a mock function and returns an expectation\r\n     *   object. Expectations implement both the spy and stub interface plus\r\n     *   the methods described below.\r\n     *\r\n     * Set expectations with following methods. All methods return the expectation\r\n     * itself, meaning expectations can be chained.\r\n     *\r\n     * * expectation.atLeast(number);\r\n     * * expectation.atMost(number);\r\n     * * expectation.never();\r\n     * * expectation.once();\r\n     * * expectation.twice();\r\n     * * expectation.thrice();\r\n     * * expectation.exactly(number);\r\n     * * expectation.withArgs(arg1, arg2, ...);\r\n     * * expectation.withExactArgs(arg1, arg2, ...);\r\n     * * expectation.on(obj);\r\n     * * expectation.verify();\r\n     *\r\n     * See http://sinonjs.org/docs/#mocks.\r\n     *\r\n     * @param object {Object} The object to create a mock of.\r\n     * @return {Function} A mock to set expectations on. See http://sinonjs.org/docs/#mocks.\r\n     */\r\n    mock(object) {\r\n      var sinon = this.__getSinon();\r\n      return sinon.mock.apply(sinon, arguments);\r\n    },\r\n\r\n    /**\r\n     * Replace the native XMLHttpRequest object in browsers that support it with\r\n     * a custom implementation which does not send actual requests.\r\n     *\r\n     * Note: The fake XHR is transparently added to a sandbox. To restore\r\n     * the original host method run <code>this.getSandbox().restore()</code>\r\n     * in your <code>tearDown()</code> method.\r\n     *\r\n     * See http://sinonjs.org/docs/#useFakeXMLHttpRequest.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    useFakeXMLHttpRequest() {\r\n      return (this.__fakeXhr = this.__sandbox.useFakeServer());\r\n    },\r\n\r\n    /**\r\n     * Get requests made with faked XHR or server.\r\n     *\r\n     * Each request can be queried for url, method, requestHeaders,\r\n     * status and more.\r\n     *\r\n     * See http://sinonjs.org/docs/#FakeXMLHttpRequest.\r\n     *\r\n     * @return {Array} Array of faked requests.\r\n     */\r\n    getRequests() {\r\n      return this.__fakeXhr.requests;\r\n    },\r\n\r\n    /**\r\n     * As {@link #useFakeXMLHttpRequest}, but additionally provides a high-level\r\n     * API to setup server responses. To setup responses, use the server\r\n     * returned by {@link #getServer}.\r\n     *\r\n     * See http://sinonjs.org/docs/#server.\r\n     *\r\n     * Note: The fake server is transparently added to a sandbox. To restore\r\n     * the original host method run <code>this.getSandbox().restore()</code>\r\n     * in your <code>tearDown()</code> method.\r\n     *\r\n     * @return {Object}\r\n     */\r\n    useFakeServer() {\r\n      return (this.__fakeXhr = this.__sandbox.useFakeServer());\r\n    },\r\n\r\n    /**\r\n     * Get fake server created by {@link #useFakeServer}.\r\n     *\r\n     * @return {Object} Fake server.\r\n     */\r\n    getServer() {\r\n      return this.__sandbox.server;\r\n    },\r\n\r\n    /**\r\n     * Get sandbox.\r\n     *\r\n     * The sandbox holds all stubs and mocks. Run <code>this.getSandbox().restore()</code>\r\n     * to restore all mock objects.\r\n     *\r\n     * @return {Object}\r\n     *        Sandbox object.\r\n     */\r\n    getSandbox() {\r\n      return this.__sandbox;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * Returns a deep copied, API-identical stubbed out clone of the given\r\n     * object.\r\n     *\r\n     * In contrast to the shallow {@link #stub}, also stubs out properties that\r\n     * belong to the prototype chain.\r\n     *\r\n     * @param object {Object} Object to stub deeply.\r\n     * @return {Object} A stub.\r\n     */\r\n    deepStub(object) {\r\n      this.__getOwnProperties(object).forEach(function (prop) {\r\n        this.__stubProperty(object, prop);\r\n      }, this);\r\n\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * Shallowly stub all methods (except excluded) that belong to classes found in inheritance\r\n     * chain up to (but including) the given class.\r\n     *\r\n     * @param object {Object} Object to stub shallowly.\r\n     * @param targetClazz {Object} Class which marks the end of the chain.\r\n     * @param propsToExclude {Array} Array with properties which shouldn't be stubbed.\r\n     * @return {Object} A stub.\r\n     */\r\n    shallowStub(object, targetClazz, propsToExclude) {\r\n      this.__getOwnProperties(object, targetClazz).forEach(function (prop) {\r\n        if (propsToExclude && propsToExclude.indexOf(prop) >= 0) {\r\n          // don't stub excluded prop\r\n          return;\r\n        }\r\n        this.__stubProperty(object, prop);\r\n      }, this);\r\n\r\n      return object;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * Changes the given factory (e.g. a constructor) to return a stub. The\r\n     * method itself returns this stub.\r\n     *\r\n     * By default, the stub returned by the changed factory is the object built\r\n     * by the original factory, but deeply stubbed (see {@link #deepStub}).\r\n     * Alternatively, a custom stub may be given explicitly that is used instead.\r\n     *\r\n     * @param object {Object} Namespace to hold factory, e.g. qx.html.\r\n     * @param property {String} Property as string that functions as\r\n     *  constructor, e.g. \"Element\".\r\n     * @param customStub {Object?} Stub to inject.\r\n     * @return {Object} Injected stub.\r\n     */\r\n    injectStub(object, property, customStub) {\r\n      var stub = customStub || this.deepStub(new object[property]());\r\n\r\n      this.stub(object, property).returns(stub);\r\n      return stub;\r\n    },\r\n\r\n    /**\r\n     * Changes the given factory (e.g. a constructor) to make a mock of the\r\n     * object returned. The method itself returns this mock.\r\n     *\r\n     * By default, the object returned by the changed factory (that a mock is\r\n     * made of) is a deep copied, API-identical clone of the object built by the\r\n     * original factory. Alternatively, the object returned can be given\r\n     * explicitly.\r\n     *\r\n     * @param object {Object} Namespace to hold factory, e.g. qx.html.\r\n     * @param property {String} Property as string that functions as\r\n     *  constructor, e.g. \"Element\".\r\n     * @param customObject {Object?} Object to inject.\r\n     * @return {Object} Mock of the object built.\r\n     */\r\n    revealMock(object, property, customObject) {\r\n      var source = customObject || this.__deepClone(new object[property]());\r\n\r\n      this.stub(object, property).returns(source);\r\n      return this.mock(source);\r\n    },\r\n\r\n    /**\r\n     * Deep clone object by copying properties from prototype.\r\n     *\r\n     * @param obj {Object} Object to prepare (that is, clone).\r\n     * @return {Object} Prepared (deeply cloned) object.\r\n     */\r\n    __deepClone(obj) {\r\n      var clone = {};\r\n\r\n      // Copy from prototype\r\n      for (var prop in obj) {\r\n        clone[prop] = obj[prop];\r\n      }\r\n\r\n      return clone;\r\n    },\r\n\r\n    /**\r\n     * Get the object’s own properties.\r\n     *\r\n     * @param object {Object} Object to analyze.\r\n     * @param targetClazz {Object} Class which marks the end of the chain.\r\n     * @return {Array} Array of the object’s own properties.\r\n     */\r\n    __getOwnProperties(object, targetClazz) {\r\n      var clazz = object.constructor,\r\n        clazzes = [],\r\n        properties = [];\r\n\r\n      // Find classes in inheritance chain up to targetClazz\r\n      if (targetClazz) {\r\n        while (clazz.superclass) {\r\n          clazzes.push(clazz);\r\n          clazz = clazz.superclass;\r\n          if (clazz == targetClazz.superclass) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Check if property is own in one of the classes in chain\r\n      for (var prop in object) {\r\n        if (clazzes.length) {\r\n          var found = clazzes.some(function (clazz) {\r\n            return clazz.prototype.hasOwnProperty(prop);\r\n          });\r\n          if (!found) {\r\n            continue;\r\n          }\r\n        }\r\n\r\n        properties.push(prop);\r\n      }\r\n\r\n      return properties;\r\n    },\r\n\r\n    /**\r\n     * Safely stub property.\r\n     *\r\n     * @param object {Object} Object to stub.\r\n     * @param prop {String} Property to stub.\r\n     */\r\n    __stubProperty(object, prop) {\r\n      // Leave constructor and properties intact\r\n      if (prop === \"constructor\" || typeof object[prop] !== \"function\") {\r\n        return;\r\n      }\r\n\r\n      this.stub(object, prop);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,SAAS,WAAAA,UAAA,EAAG;MACV,IAAIC,KAAK,GAAG,IAAI,CAACC,SAAU,CAAC,CAAC;MAC7B,IAAI,CAACC,SAAkB,CAAC,CAAC;MACzB,IAAI,CAACC,SAAS,GAAGH,KAAK,CAACI,aAAa,CAAC,CAAC;IACxC,CAAC;IAEDC,OAAO,EAAE;MACPF,SAAS,EAAE,IAAI;MAEfG,SAAS,EAAE,IAAI;MAEf;AACJ;AACA;AACA;AACA;AACA;AACA;MACIJ,SAAkB,WAAAK,UAAA,EAAG;QACnB,IAAIC,IAAI,GAAG,CAAC,CAAC;QACbR,KAAK,CAACS,MAAM,CAACC,MAAM,CAACF,IAAI,EAAE;UAAEG,WAAW,EAAE;QAAM,CAAC,CAAC;QACjD,KAAK,IAAIC,MAAM,IAAIJ,IAAI,EAAE;UACvB,IAAI,CAAC,IAAI,CAACI,MAAM,CAAC,EAAE;YACjB,IAAI,CAACA,MAAM,CAAC,GAAGJ,IAAI,CAACI,MAAM,CAAC;UAC7B;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIX,SAAU,WAAAY,UAAA,EAAG;QACX,OAAOpB,EAAE,CAACqB,GAAG,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,CAAC;MACrC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,GAAG,WAAAA,IAACC,kBAAkB,EAAEP,MAAM,EAAE;QAC9B,OAAO,IAAI,CAACT,SAAS,CAACe,GAAG,CAACE,KAAK,CAAC,IAAI,CAACjB,SAAS,EAAEkB,SAAS,CAAC;MAC5D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,MAAM,EAAEX,MAAM,EAAEY,IAAI,EAAE;QACzB,IAAIC,GAAG,GAAG,IAAI,CAACtB,SAAS,CAACmB,IAAI,CAACI,IAAI,CAAC,IAAI,CAACvB,SAAS,CAAC,CAACoB,MAAM,EAAEX,MAAM,CAAC;QAClE,IAAIY,IAAI,IAAI/B,EAAE,CAACkC,IAAI,CAACC,IAAI,CAACC,UAAU,CAACL,IAAI,CAAC,EAAE;UACzCC,GAAG,GAAGA,GAAG,CAACK,SAAS,CAACN,IAAI,CAAC;QAC3B;QACA,OAAOC,GAAG;MACZ,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"
}