{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "MAssert",
    "events",
    "assertionFailed",
    "properties",
    "testResult",
    "init",
    "testFunc",
    "members",
    "__autoDispose",
    "isDebugOn",
    "hasDebug",
    "wait",
    "delay",
    "deferredFunction",
    "context",
    "dev",
    "unit",
    "AsyncWrapper",
    "resume",
    "self",
    "getTestResult",
    "run",
    "getTestFunc",
    "resumeSetUp",
    "func",
    "inst",
    "method",
    "getName",
    "ex",
    "resumeHandler",
    "that",
    "args",
    "lang",
    "Array",
    "fromArguments",
    "arguments",
    "bind",
    "apply",
    "concat",
    "skip",
    "message",
    "RequirementError",
    "addAutoDispose",
    "obj",
    "push",
    "doAutoDispose",
    "forEach",
    "isDisposed",
    "ui",
    "Widget",
    "destroy",
    "dispose",
    "TestCase"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/TestCase.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Daniel Wagner (d_wagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Base class for all unit tests.\r\n */\r\nqx.Class.define(\"qx.dev.unit.TestCase\", {\r\n  extend: qx.core.Object,\r\n  include: [qx.core.MAssert],\r\n\r\n  events: {\r\n    /**\r\n     * This event can be fired by assertion functions instead of throwing a\r\n     * {@link qx.core.AssertionError}, ensuring that any code defined after the\r\n     * assertion call will still run.\r\n     *\r\n     * Event data: The {@link qx.core.AssertionError}\r\n     */\r\n    assertionFailed: \"qx.event.type.Data\"\r\n  },\r\n\r\n  properties: {\r\n    /** The TestResult instance that runs the test */\r\n    testResult: {\r\n      init: null\r\n    },\r\n\r\n    /** The test currently running */\r\n    testFunc: {\r\n      init: null\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __autoDispose: null,\r\n\r\n    /**\r\n     * Whether If debugging code is enabled. (i.e. the setting\r\n     * <code>qx.debug</code> has the value <code>on</code>.)\r\n     *\r\n     * @return {Boolean} Whether debugging is enabled\r\n     */\r\n    isDebugOn() {\r\n      return qx.core.Environment.get(\"qx.debug\") ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks if qx.debug set\r\n     * used by this.require[\"debug\"]\r\n     */\r\n    hasDebug() {\r\n      return qx.core.Environment.get(\"qx.debug\");\r\n    },\r\n\r\n    /**\r\n     * Instruct the test to wait. Used for asynchronous tests.\r\n     *\r\n     * @param delay {Integer?5000} Amount of time in milliseconds to wait.\r\n     * @param deferredFunction {Function?false} Optional function to run after\r\n     * timeout has expired.\r\n     * @param context {Object?window} Optional execution context for\r\n     * deferredFunction\r\n     */\r\n    wait(delay, deferredFunction, context) {\r\n      throw new qx.dev.unit.AsyncWrapper(delay, deferredFunction, context);\r\n    },\r\n\r\n    /**\r\n     * Cancel a timeout started with <code>wait()</code> and run the given\r\n     * function. Used for asynchronous tests, e.g. in a listener's callback\r\n     * function.\r\n     *\r\n     * *Important*\r\n     *\r\n     * The used *deferredFunction* is the last function which is executed before\r\n     * the whole test case is disposed. But you are able to use a new\r\n     * <code>wait()</code> / <code>resume()</code> pair in the call sequence of the deferred function.\r\n     *\r\n     * @param deferredFunction {Function?} Function to run\r\n     * @param self {Object?} reference to the ‘this’ variable inside the\r\n     * callback. By default the test instance is used.\r\n     *\r\n     * @return {var} The return value of the deferred function\r\n     */\r\n    resume(deferredFunction, self) {\r\n      return this.getTestResult().run(\r\n        this.getTestFunc(),\r\n        deferredFunction || function () {},\r\n        self || this,\r\n        true\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Cancel a timeout started with <code>wait()</code> in setUp() and run the test\r\n     * function. Used for asynchronous setUp of tests.\r\n     *\r\n     * @return {var} The return value of the testRun\r\n     */\r\n    resumeSetUp() {\r\n      var func = this.getTestFunc();\r\n      var inst = this;\r\n      var method = func.getName();\r\n\r\n      return this.getTestResult().run(\r\n        func,\r\n        function () {\r\n          try {\r\n            inst[method]();\r\n          } catch (ex) {\r\n            throw ex;\r\n          }\r\n        },\r\n        this,\r\n        true\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Cancel a timeout started with <code>wait()</code> and return a function,\r\n     * which calls {@link #resume}. This function is useful\r\n     * to wrap an event handler or callback function within the resume call sequence.\r\n     * It provides the deferred function with all parameters from original caller.\r\n     *<pre>\r\n     * obj.addListener(\"appear\", this.resumeHandler(function(e){\r\n     *   // do some nice\r\n     * }));\r\n     *\r\n     * this.wait();\r\n     *</pre>\r\n     *\r\n     * @param deferredFunction {Function} Function to run as event handler or callback\r\n     * @param self {Object?} reference to the ‘this’ variable inside the\r\n     *        callback. By default the test instance is used.\r\n     * @return {Function} Wrapper function which runs resume with deferred function\r\n     */\r\n    resumeHandler(deferredFunction, self) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertFunction(\r\n          deferredFunction,\r\n          \"First parameter of resumeHandler() must be a function!\"\r\n        );\r\n      }\r\n\r\n      var func = deferredFunction;\r\n      var that = this;\r\n\r\n      return function () {\r\n        // bind arguments to deferŕedFunction\r\n        var args = qx.lang.Array.fromArguments(arguments);\r\n\r\n        return that.resume(\r\n          func.bind.apply(func, [self || this].concat(args)),\r\n          self\r\n        );\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Skip this test. Any code after a call to this method will not be executed.\r\n     *\r\n     * @param message {String|null} Optional message (reason why the test was skipped)\r\n     */\r\n    skip(message) {\r\n      throw new qx.dev.unit.RequirementError(null, message || \"Called skip()\");\r\n    },\r\n\r\n    /**\r\n     * Add an object to the auto dispose list. This can be cleared manually or will\r\n     * be flushed when the test case is disposed.\r\n     *\r\n     * @param obj {qx.core.Object} Object to be automatically disposed.\r\n     */\r\n    addAutoDispose(obj) {\r\n      if (!this.__autoDispose) {\r\n        this.__autoDispose = [];\r\n      }\r\n      this.__autoDispose.push(obj);\r\n    },\r\n\r\n    /**\r\n     * Dispose all objects that got registered for auto disposal.\r\n     */\r\n    doAutoDispose() {\r\n      if (this.__autoDispose) {\r\n        this.__autoDispose.forEach(function (obj) {\r\n          if (!obj.isDisposed()) {\r\n            if (obj instanceof qx.ui.core.Widget) {\r\n              obj.destroy();\r\n            } else if (obj instanceof qx.core.Object) {\r\n              obj.dispose();\r\n            }\r\n          }\r\n        });\r\n        this.__autoDispose = null;\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}