{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "testCase",
    "methodName",
    "testFunction",
    "setTestFunction",
    "setClassName",
    "classname",
    "setTestClass",
    "setName",
    "properties",
    "check",
    "name",
    "className",
    "init",
    "testClass",
    "members",
    "run",
    "testResult",
    "inst",
    "getTestClass",
    "method",
    "getName",
    "set",
    "testFunc",
    "constructor",
    "ex",
    "then",
    "resume",
    "wait",
    "setUp",
    "lang",
    "Type",
    "isFunction",
    "tearDown",
    "getFullName",
    "getClassName",
    "join",
    "dev",
    "unit",
    "TestFunction"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/TestFunction.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Daniel Wagner (d_wagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Wrapper object for a method containing unit test code.\r\n */\r\nqx.Class.define(\"qx.dev.unit.TestFunction\", {\r\n  extend: qx.core.Object,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * There are two ways to define a test function. First by passing a class\r\n   * and a method name to the constructor or second by giving a the method\r\n   * directly.\r\n   *\r\n   * @param testCase {qx.dev.unit.TestCase?null} The test class, which contains the test method\r\n   * @param methodName {String?null} The name of the method\r\n   * @param testFunction {Function?null} A reference to a test function. If this\r\n   *    parameter is set the other parameters are ignored.\r\n   */\r\n  construct(testCase, methodName, testFunction) {\r\n    if (testFunction) {\r\n      this.setTestFunction(testFunction);\r\n    }\r\n\r\n    if (testCase) {\r\n      this.setClassName(testCase.classname);\r\n      this.setTestClass(testCase);\r\n    }\r\n\r\n    this.setName(methodName);\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /** The test function */\r\n    testFunction: { check: \"Function\" },\r\n\r\n    /** Name of the test */\r\n    name: { check: \"String\" },\r\n\r\n    /** Name of the class containing the test */\r\n    className: {\r\n      check: \"String\",\r\n      init: \"\"\r\n    },\r\n\r\n    /** The test class */\r\n    testClass: {\r\n      check: \"qx.dev.unit.TestCase\",\r\n      init: null\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Runs the test and logs the test result to a {@link TestResult} instance,\r\n     *\r\n     * @param testResult {qx.dev.unit.TestResult} The class used to log the test result.\r\n     */\r\n    run(testResult) {\r\n      var inst = this.getTestClass();\r\n      var method = this.getName();\r\n\r\n      inst.set({\r\n        testFunc: this,\r\n        testResult: testResult\r\n      });\r\n\r\n      testResult.run(this, function () {\r\n        switch (inst[method].constructor.name) {\r\n          case \"Function\":\r\n            try {\r\n              inst[method]();\r\n            } catch (ex) {\r\n              throw ex;\r\n            }\r\n            break;\r\n          case \"AsyncFunction\":\r\n            inst[method]()\r\n              .then(function () {\r\n                inst.resume();\r\n              })\r\n              .catch(function (ex) {\r\n                inst.resume(function () {\r\n                  throw ex;\r\n                });\r\n              });\r\n\r\n            inst.wait();\r\n        }\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Call the test class' <code>setUp</code> method.\r\n     */\r\n    setUp() {\r\n      var inst = this.getTestClass();\r\n      if (qx.lang.Type.isFunction(inst.setUp)) {\r\n        inst.setUp();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Call the test class' <code>tearDown</code> method.\r\n     */\r\n    tearDown() {\r\n      var inst = this.getTestClass();\r\n      if (qx.lang.Type.isFunction(inst.tearDown)) {\r\n        inst.tearDown();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get the full name of the test.\r\n     *\r\n     * @return {String} The test's full name\r\n     */\r\n    getFullName() {\r\n      return [this.getClassName(), this.getName()].join(\":\");\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}