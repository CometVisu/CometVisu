{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/TestFunction.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "testCase",
    "methodName",
    "testFunction",
    "setTestFunction",
    "setClassName",
    "classname",
    "setTestClass",
    "setName",
    "properties",
    "check",
    "name",
    "className",
    "init",
    "testClass",
    "members",
    "run",
    "testResult",
    "inst",
    "getTestClass",
    "method",
    "getName",
    "set",
    "testFunc",
    "constructor",
    "ex",
    "then",
    "resume",
    "wait",
    "setUp",
    "lang",
    "Type",
    "isFunction",
    "tearDown",
    "getFullName",
    "getClassName",
    "join",
    "dev",
    "unit",
    "TestFunction"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * Wrapper object for a method containing unit test code.\n */\nqx.Class.define(\"qx.dev.unit.TestFunction\",\n{\n  extend : qx.core.Object,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * There are two ways to define a test function. First by passing a class\n   * and a method name to the constructor or second by giving a the method\n   * directly.\n   *\n   * @param testCase {qx.dev.unit.TestCase?null} The test class, which contains the test method\n   * @param methodName {String?null} The name of the method\n   * @param testFunction {Function?null} A reference to a test function. If this\n   *    parameter is set the other parameters are ignored.\n   */\n  construct : function(testCase, methodName, testFunction)\n  {\n    if (testFunction) {\n      this.setTestFunction(testFunction);\n    }\n\n    if (testCase) {\n      this.setClassName(testCase.classname);\n      this.setTestClass(testCase);\n    }\n\n    this.setName(methodName);\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The test function */\n    testFunction : { check : \"Function\" },\n\n    /** Name of the test */\n    name : { check : \"String\" },\n\n    /** Name of the class containing the test */\n    className :\n    {\n      check : \"String\",\n      init  : \"\"\n    },\n\n    /** The test class */\n    testClass :\n    {\n      check : \"qx.dev.unit.TestCase\",\n      init : null\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    /**\n     * Runs the test and logs the test result to a {@link TestResult} instance,\n     *\n     * @param testResult {qx.dev.unit.TestResult} The class used to log the test result.\n     */\n    run : function(testResult)\n    {\n      var inst = this.getTestClass();\n      var method = this.getName();\n\n      inst.set({\n        testFunc: this,\n        testResult: testResult\n      });\n\n      testResult.run(this, function() {\n        switch (inst[method].constructor.name) {\n          case \"Function\":\n            try {\n              inst[method]();\n            } catch (ex) {\n              throw ex;\n            }\n            break;\n          case \"AsyncFunction\":\n            inst[method]()\n            .then(\n              function(){\n                inst.resume()\n              }\n            )\n            .catch(\n              function(ex){\n                inst.resume(function(){ throw ex });\n              }\n            );\n            inst.wait();\n        }\n      });\n\n    },\n\n    /**\n     * Call the test class' <code>setUp</code> method.\n     */\n    setUp : function()\n    {\n      var inst = this.getTestClass();\n      if (qx.lang.Type.isFunction(inst.setUp)) {\n        inst.setUp();\n      }\n    },\n\n    /**\n     * Call the test class' <code>tearDown</code> method.\n     */\n    tearDown : function()\n    {\n      var inst = this.getTestClass();\n      if (qx.lang.Type.isFunction(inst.tearDown)) {\n        inst.tearDown();\n      }\n    },\n\n\n    /**\n     * Get the full name of the test.\n     *\n     * @return {String} The test's full name\n     */\n    getFullName : function() {\n      return [ this.getClassName(), this.getName() ].join(\":\");\n    }\n  }\n});\n"
  ]
}