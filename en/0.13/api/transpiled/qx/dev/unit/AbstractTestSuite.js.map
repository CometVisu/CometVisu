{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "constructor",
    "call",
    "_tests",
    "members",
    "addTestFunction",
    "name",
    "fcn",
    "push",
    "dev",
    "unit",
    "TestFunction",
    "addTestMethod",
    "testCase",
    "functionName",
    "addFail",
    "message",
    "fail",
    "run",
    "testResult",
    "i",
    "length",
    "getTestMethods",
    "methods",
    "test",
    "destruct",
    "_disposeArray",
    "AbstractTestSuite"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/AbstractTestSuite.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A TestSuite is a collection of test functions, classes and other test suites,\n * which should be run together.\n */\nqx.Class.define(\"qx.dev.unit.AbstractTestSuite\", {\n  extend: qx.core.Object,\n  type: \"abstract\",\n\n  construct() {\n    super();\n    this._tests = [];\n  },\n\n  members: {\n    _tests: null,\n\n    /**\n     * Add a single function to test\n     *\n     * @param name {String} Name of the function\n     * @param fcn {Function} The test function\n     */\n    addTestFunction(name, fcn) {\n      this._tests.push(new qx.dev.unit.TestFunction(null, name, fcn));\n    },\n\n    /**\n     * Add a method from a class as test to the suite\n     *\n     * @param testCase {qx.dev.unit.TestCase} The class containing the test method\n     * @param functionName {String} The name of the test method\n     */\n    addTestMethod(testCase, functionName) {\n      this._tests.push(new qx.dev.unit.TestFunction(testCase, functionName));\n    },\n\n    /**\n     * Add a test function to the suite, which fails.\n     *\n     * @param functionName {String} Name of the function\n     * @param message {String} The fail message\n     */\n    addFail(functionName, message) {\n      this.addTestFunction(functionName, function () {\n        this.fail(message);\n      });\n    },\n\n    /**\n     * Run all tests using the given test result\n     *\n     * @param testResult {qx.dev.unit.TestResult} Test result class, which runs the tests.\n     */\n    run(testResult) {\n      for (var i = 0; i < this._tests.length; i++) {\n        this._tests[i].run(testResult);\n      }\n    },\n\n    /**\n     * Get a list of all test methods in the suite\n     *\n     * @return {Function[]} A list of all test methods in the suite\n     */\n    getTestMethods() {\n      var methods = [];\n\n      for (var i = 0; i < this._tests.length; i++) {\n        var test = this._tests[i];\n\n        if (test instanceof qx.dev.unit.TestFunction) {\n          methods.push(test);\n        }\n      }\n\n      return methods;\n    }\n  },\n\n  destruct() {\n    this._disposeArray(\"_tests\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,+BAA+B,EAAE;IAC/CC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,IAAI,EAAE,UAAU;IAEhBC,SAAS,WAAAA,UAAA,EAAG;MACVV,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAG,WAAA,CAAAC,IAAA;MACA,IAAI,CAACC,MAAM,GAAG,EAAE;IAClB,CAAC;IAEDC,OAAO,EAAE;MACPD,MAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;MACIE,eAAe,WAAAA,gBAACC,IAAI,EAAEC,GAAG,EAAE;QACzB,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,IAAIlB,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACC,YAAY,CAAC,IAAI,EAAEL,IAAI,EAAEC,GAAG,CAAC,CAAC;MACjE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIK,aAAa,WAAAA,cAACC,QAAQ,EAAEC,YAAY,EAAE;QACpC,IAAI,CAACX,MAAM,CAACK,IAAI,CAAC,IAAIlB,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACC,YAAY,CAACE,QAAQ,EAAEC,YAAY,CAAC,CAAC;MACxE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAACD,YAAY,EAAEE,OAAO,EAAE;QAC7B,IAAI,CAACX,eAAe,CAACS,YAAY,EAAE,YAAY;UAC7C,IAAI,CAACG,IAAI,CAACD,OAAO,CAAC;QACpB,CAAC,CAAC;MACJ,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIE,GAAG,WAAAA,IAACC,UAAU,EAAE;QACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,MAAM,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;UAC3C,IAAI,CAACjB,MAAM,CAACiB,CAAC,CAAC,CAACF,GAAG,CAACC,UAAU,CAAC;QAChC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIG,cAAc,WAAAA,eAAA,EAAG;QACf,IAAIC,OAAO,GAAG,EAAE;QAEhB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,MAAM,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;UAC3C,IAAII,IAAI,GAAG,IAAI,CAACrB,MAAM,CAACiB,CAAC,CAAC;UAEzB,IAAII,IAAI,YAAYlC,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACC,YAAY,EAAE;YAC5CY,OAAO,CAACf,IAAI,CAACgB,IAAI,CAAC;UACpB;QACF;QAEA,OAAOD,OAAO;MAChB;IACF,CAAC;IAEDE,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC9B;EACF,CAAC,CAAC;EApGFpC,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACiB,iBAAiB,CAAClC,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}