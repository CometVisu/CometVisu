{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "constructor",
    "call",
    "_tests",
    "members",
    "addTestFunction",
    "name",
    "fcn",
    "push",
    "dev",
    "unit",
    "TestFunction",
    "addTestMethod",
    "testCase",
    "functionName",
    "addFail",
    "message",
    "fail",
    "run",
    "testResult",
    "i",
    "length",
    "getTestMethods",
    "methods",
    "test",
    "destruct",
    "_disposeArray",
    "AbstractTestSuite"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/AbstractTestSuite.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A TestSuite is a collection of test functions, classes and other test suites,\r\n * which should be run together.\r\n */\r\nqx.Class.define(\"qx.dev.unit.AbstractTestSuite\", {\r\n  extend: qx.core.Object,\r\n  type: \"abstract\",\r\n\r\n  construct() {\r\n    super();\r\n    this._tests = [];\r\n  },\r\n\r\n  members: {\r\n    _tests: null,\r\n\r\n    /**\r\n     * Add a single function to test\r\n     *\r\n     * @param name {String} Name of the function\r\n     * @param fcn {Function} The test function\r\n     */\r\n    addTestFunction(name, fcn) {\r\n      this._tests.push(new qx.dev.unit.TestFunction(null, name, fcn));\r\n    },\r\n\r\n    /**\r\n     * Add a method from a class as test to the suite\r\n     *\r\n     * @param testCase {qx.dev.unit.TestCase} The class containing the test method\r\n     * @param functionName {String} The name of the test method\r\n     */\r\n    addTestMethod(testCase, functionName) {\r\n      this._tests.push(new qx.dev.unit.TestFunction(testCase, functionName));\r\n    },\r\n\r\n    /**\r\n     * Add a test function to the suite, which fails.\r\n     *\r\n     * @param functionName {String} Name of the function\r\n     * @param message {String} The fail message\r\n     */\r\n    addFail(functionName, message) {\r\n      this.addTestFunction(functionName, function () {\r\n        this.fail(message);\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Run all tests using the given test result\r\n     *\r\n     * @param testResult {qx.dev.unit.TestResult} Test result class, which runs the tests.\r\n     */\r\n    run(testResult) {\r\n      for (var i = 0; i < this._tests.length; i++) {\r\n        this._tests[i].run(testResult);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get a list of all test methods in the suite\r\n     *\r\n     * @return {Function[]} A list of all test methods in the suite\r\n     */\r\n    getTestMethods() {\r\n      var methods = [];\r\n\r\n      for (var i = 0; i < this._tests.length; i++) {\r\n        var test = this._tests[i];\r\n\r\n        if (test instanceof qx.dev.unit.TestFunction) {\r\n          methods.push(test);\r\n        }\r\n      }\r\n\r\n      return methods;\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this._disposeArray(\"_tests\");\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,+BAA+B,EAAE;IAC/CC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,IAAI,EAAE,UAAU;IAEhBC,SAAS,WAAAA,UAAA,EAAG;MACVV,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAG,WAAA,CAAAC,IAAA;MACA,IAAI,CAACC,MAAM,GAAG,EAAE;IAClB,CAAC;IAEDC,OAAO,EAAE;MACPD,MAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;MACIE,eAAe,WAAAA,gBAACC,IAAI,EAAEC,GAAG,EAAE;QACzB,IAAI,CAACJ,MAAM,CAACK,IAAI,CAAC,IAAIlB,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACC,YAAY,CAAC,IAAI,EAAEL,IAAI,EAAEC,GAAG,CAAC,CAAC;MACjE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIK,aAAa,WAAAA,cAACC,QAAQ,EAAEC,YAAY,EAAE;QACpC,IAAI,CAACX,MAAM,CAACK,IAAI,CAAC,IAAIlB,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACC,YAAY,CAACE,QAAQ,EAAEC,YAAY,CAAC,CAAC;MACxE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAACD,YAAY,EAAEE,OAAO,EAAE;QAC7B,IAAI,CAACX,eAAe,CAACS,YAAY,EAAE,YAAY;UAC7C,IAAI,CAACG,IAAI,CAACD,OAAO,CAAC;QACpB,CAAC,CAAC;MACJ,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIE,GAAG,WAAAA,IAACC,UAAU,EAAE;QACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,MAAM,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;UAC3C,IAAI,CAACjB,MAAM,CAACiB,CAAC,CAAC,CAACF,GAAG,CAACC,UAAU,CAAC;QAChC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIG,cAAc,WAAAA,eAAA,EAAG;QACf,IAAIC,OAAO,GAAG,EAAE;QAEhB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,MAAM,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;UAC3C,IAAII,IAAI,GAAG,IAAI,CAACrB,MAAM,CAACiB,CAAC,CAAC;UAEzB,IAAII,IAAI,YAAYlC,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACC,YAAY,EAAE;YAC5CY,OAAO,CAACf,IAAI,CAACgB,IAAI,CAAC;UACpB;QACF;QAEA,OAAOD,OAAO;MAChB;IACF,CAAC;IAEDE,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC9B;EACF,CAAC,CAAC;EApGFpC,EAAE,CAACmB,GAAG,CAACC,IAAI,CAACiB,iBAAiB,CAAClC,aAAa,GAAGA,aAAa;AAAC"
}