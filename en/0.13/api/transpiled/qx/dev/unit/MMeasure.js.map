{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "measureRepeated",
    "msg",
    "callback",
    "finalize",
    "iterations",
    "displayIterations",
    "measure",
    "i",
    "measureIterations",
    "prepare",
    "time",
    "testTime",
    "startIter",
    "Date",
    "now",
    "maxTime",
    "profilingEnabled",
    "window",
    "top",
    "core",
    "Init",
    "getApplication",
    "runner",
    "view",
    "getNativeProfiling",
    "ex",
    "profilingActive",
    "console",
    "profile",
    "profileEnd",
    "start",
    "end",
    "renderStart",
    "self",
    "setTimeout",
    "resume",
    "renderTime",
    "log",
    "call",
    "wait",
    "ownTime",
    "dev",
    "unit",
    "MeasurementResult",
    "MMeasure"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MMeasure.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Measures JavaScript execution and rendering time for singular or repeated\n * operations.\n */\nqx.Mixin.define(\"qx.dev.unit.MMeasure\", {\n  members: {\n    /**\n     * Repeatedly runs code and measures execution and rendering times\n     *\n     * @param msg {String} Description of the measured operation\n     * @param callback {Function} Callback containing the code to be measured\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param iterations {Number} Number of times to execute the callback\n     * @param displayIterations {Number?} Iterations to be displayed instead of\n     * <code>iterations</code>\n     */\n    measureRepeated(msg, callback, finalize, iterations, displayIterations) {\n      this.measure(\n        msg,\n        function () {\n          var i = iterations;\n          while (i--) {\n            callback(i);\n          }\n        },\n        finalize,\n        displayIterations || iterations\n      );\n    },\n\n    /**\n     * Repeatedly runs code for a given amount of time and measures completed\n     * iterations\n     *\n     * @param msg {String} Description of the measured operation\n     * @param prepare {Function} A function that will be called before every\n     * iteration. Its execution time is not included in the measurement\n     * @param callback {Function} Callback containing the code to be measured.\n     * Must return the number of completed iterations.\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param time {Number} Amount of time in milliseconds\n     */\n    measureIterations(msg, prepare, callback, finalize, time) {\n      this.measure(\n        msg,\n        function () {\n          var i = 0;\n          var testTime = 0;\n          while (testTime < time) {\n            if (prepare) {\n              prepare();\n            }\n            var startIter = Date.now();\n            callback(i);\n            testTime += Date.now() - startIter;\n            i++;\n          }\n          return i;\n        },\n        finalize,\n        null,\n        time\n      );\n    },\n\n    /**\n     * Executes a given callback function once and measures JavaScript execution\n     * and rendering time\n     *\n     * @param msg {String} Description of the measured operation\n     * @param callback {Function} Callback containing the code to be measured\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param displayIterations {Number?} Iterations to be displayed instead of\n     * <code>iterations</code>\n     * @param maxTime {Number?} Maximum amount of time the test will run. Only used\n     * for {@link #measureIterations}. If undefined, the test will be aborted after\n     * ten seconds.\n     */\n    measure(msg, callback, finalize, displayIterations, maxTime) {\n      // profiling\n      var profilingEnabled;\n      try {\n        profilingEnabled =\n          window.top.qx.core.Init.getApplication().runner.view.getNativeProfiling();\n      } catch (ex) {\n        profilingEnabled = false;\n      }\n\n      var profilingActive =\n        profilingEnabled &&\n        console &&\n        console.profile &&\n        typeof console.profile == \"function\" &&\n        console.profileEnd &&\n        typeof console.profileEnd == \"function\";\n\n      if (profilingActive) {\n        console.profile(msg);\n      }\n\n      var start = Date.now();\n      var iterations = callback();\n      var end = Date.now();\n\n      // profiling\n      if (profilingActive) {\n        console.profileEnd(msg);\n      }\n\n      var time = end - start;\n\n      var renderStart = Date.now();\n\n      var self = this;\n      setTimeout(function () {\n        self.resume(function () {\n          var renderTime = Date.now() - renderStart;\n          self.log(\n            msg,\n            iterations || displayIterations,\n            maxTime || time,\n            renderTime\n          );\n\n          finalize.call(self);\n        });\n      }, 0);\n\n      this.wait(maxTime ? maxTime + 5000 : 10000);\n    },\n\n    /**\n     * Logs a single measurement result\n     *\n     * @param msg {String} Description of the measured operation\n     * @param iterations {Number} Number of iterations\n     * @param ownTime {Number} JavaScript execution time in ms\n     * @param renderTime {Number} Dom rendering time in ms\n     */\n    log(msg, iterations, ownTime, renderTime) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.debug(\n          [\n            msg,\n            \"Iterations: \" + iterations,\n            \"Time: \" + ownTime + \"ms\",\n            \"Render time: \" + renderTime + \"ms\"\n          ].join(\"; \")\n        );\n      }\n\n      throw new qx.dev.unit.MeasurementResult(\n        msg,\n        iterations,\n        ownTime,\n        renderTime\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}