{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "measureRepeated",
    "msg",
    "callback",
    "finalize",
    "iterations",
    "displayIterations",
    "measure",
    "i",
    "measureIterations",
    "prepare",
    "time",
    "testTime",
    "startIter",
    "Date",
    "now",
    "maxTime",
    "profilingEnabled",
    "window",
    "top",
    "core",
    "Init",
    "getApplication",
    "runner",
    "view",
    "getNativeProfiling",
    "ex",
    "profilingActive",
    "console",
    "profile",
    "profileEnd",
    "start",
    "end",
    "renderStart",
    "self",
    "setTimeout",
    "resume",
    "renderTime",
    "log",
    "call",
    "wait",
    "ownTime",
    "dev",
    "unit",
    "MeasurementResult",
    "MMeasure"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MMeasure.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Measures JavaScript execution and rendering time for singular or repeated\n * operations.\n */\nqx.Mixin.define(\"qx.dev.unit.MMeasure\", {\n  members: {\n    /**\n     * Repeatedly runs code and measures execution and rendering times\n     *\n     * @param msg {String} Description of the measured operation\n     * @param callback {Function} Callback containing the code to be measured\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param iterations {Number} Number of times to execute the callback\n     * @param displayIterations {Number?} Iterations to be displayed instead of\n     * <code>iterations</code>\n     */\n    measureRepeated(msg, callback, finalize, iterations, displayIterations) {\n      this.measure(\n        msg,\n        function () {\n          var i = iterations;\n          while (i--) {\n            callback(i);\n          }\n        },\n        finalize,\n        displayIterations || iterations\n      );\n    },\n\n    /**\n     * Repeatedly runs code for a given amount of time and measures completed\n     * iterations\n     *\n     * @param msg {String} Description of the measured operation\n     * @param prepare {Function} A function that will be called before every\n     * iteration. Its execution time is not included in the measurement\n     * @param callback {Function} Callback containing the code to be measured.\n     * Must return the number of completed iterations.\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param time {Number} Amount of time in milliseconds\n     */\n    measureIterations(msg, prepare, callback, finalize, time) {\n      this.measure(\n        msg,\n        function () {\n          var i = 0;\n          var testTime = 0;\n          while (testTime < time) {\n            if (prepare) {\n              prepare();\n            }\n            var startIter = Date.now();\n            callback(i);\n            testTime += Date.now() - startIter;\n            i++;\n          }\n          return i;\n        },\n        finalize,\n        null,\n        time\n      );\n    },\n\n    /**\n     * Executes a given callback function once and measures JavaScript execution\n     * and rendering time\n     *\n     * @param msg {String} Description of the measured operation\n     * @param callback {Function} Callback containing the code to be measured\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param displayIterations {Number?} Iterations to be displayed instead of\n     * <code>iterations</code>\n     * @param maxTime {Number?} Maximum amount of time the test will run. Only used\n     * for {@link #measureIterations}. If undefined, the test will be aborted after\n     * ten seconds.\n     */\n    measure(msg, callback, finalize, displayIterations, maxTime) {\n      // profiling\n      var profilingEnabled;\n      try {\n        profilingEnabled =\n          window.top.qx.core.Init.getApplication().runner.view.getNativeProfiling();\n      } catch (ex) {\n        profilingEnabled = false;\n      }\n\n      var profilingActive =\n        profilingEnabled &&\n        console &&\n        console.profile &&\n        typeof console.profile == \"function\" &&\n        console.profileEnd &&\n        typeof console.profileEnd == \"function\";\n\n      if (profilingActive) {\n        console.profile(msg);\n      }\n\n      var start = Date.now();\n      var iterations = callback();\n      var end = Date.now();\n\n      // profiling\n      if (profilingActive) {\n        console.profileEnd(msg);\n      }\n\n      var time = end - start;\n\n      var renderStart = Date.now();\n\n      var self = this;\n      setTimeout(function () {\n        self.resume(function () {\n          var renderTime = Date.now() - renderStart;\n          self.log(\n            msg,\n            iterations || displayIterations,\n            maxTime || time,\n            renderTime\n          );\n\n          finalize.call(self);\n        });\n      }, 0);\n\n      this.wait(maxTime ? maxTime + 5000 : 10000);\n    },\n\n    /**\n     * Logs a single measurement result\n     *\n     * @param msg {String} Description of the measured operation\n     * @param iterations {Number} Number of iterations\n     * @param ownTime {Number} JavaScript execution time in ms\n     * @param renderTime {Number} Dom rendering time in ms\n     */\n    log(msg, iterations, ownTime, renderTime) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.debug(\n          [\n            msg,\n            \"Iterations: \" + iterations,\n            \"Time: \" + ownTime + \"ms\",\n            \"Render time: \" + renderTime + \"ms\"\n          ].join(\"; \")\n        );\n      }\n\n      throw new qx.dev.unit.MeasurementResult(\n        msg,\n        iterations,\n        ownTime,\n        renderTime\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}