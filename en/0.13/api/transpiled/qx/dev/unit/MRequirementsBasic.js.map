{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "require",
    "featureList",
    "i",
    "l",
    "length",
    "feature",
    "hasMethodName",
    "lang",
    "String",
    "capitalize",
    "dev",
    "unit",
    "RequirementError",
    "core",
    "Environment",
    "getChecks",
    "envValue",
    "get",
    "Error",
    "getAsyncChecks",
    "MRequirementsBasic"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MRequirementsBasic.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Daniel Wagner (danielwagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Adds support for verification of infrastructure requirements to unit test\r\n * classes.\r\n */\r\nqx.Mixin.define(\"qx.dev.unit.MRequirementsBasic\", {\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n  members: {\r\n    /**\r\n     * Verifies a list of infrastructure requirements by checking for\r\n     * corresponding \"has\" methods. If no such method was found,\r\n     * {@link qx.core.Environment} will be checked for a key matching the given\r\n     * feature name. Note that asynchronous environment checks are not supported!\r\n     *\r\n     * @throws {qx.dev.unit.RequirementError} if any requirement check returned\r\n     *   <code>false</code>\r\n     * @throws {Error} if no valid check was found for a feature.\r\n     *\r\n     * @param featureList {String[]} List of infrastructure requirements\r\n     * @lint environmentNonLiteralKey(feature)\r\n     */\r\n    require(featureList) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        qx.core.Assert.assertArray(featureList);\r\n      }\r\n\r\n      for (var i = 0, l = featureList.length; i < l; i++) {\r\n        var feature = featureList[i];\r\n        var hasMethodName = \"has\" + qx.lang.String.capitalize(feature);\r\n\r\n        if (this[hasMethodName]) {\r\n          if (this[hasMethodName]() === true) {\r\n            continue;\r\n          } else {\r\n            throw new qx.dev.unit.RequirementError(feature);\r\n          }\r\n        }\r\n\r\n        if (qx.core.Environment.getChecks()[feature]) {\r\n          var envValue = qx.core.Environment.get(feature);\r\n          if (envValue === true) {\r\n            continue;\r\n          }\r\n          if (envValue === false) {\r\n            throw new qx.dev.unit.RequirementError(feature);\r\n          } else {\r\n            throw new Error(\r\n              \"The Environment key \" +\r\n                feature +\r\n                \" cannot be used\" +\r\n                \" as a Test Requirement since its value is not boolean!\"\r\n            );\r\n          }\r\n        }\r\n\r\n        if (qx.core.Environment.getAsyncChecks()[feature]) {\r\n          throw new Error(\r\n            \"Unable to verify requirement \" +\r\n              feature +\r\n              \": \" +\r\n              \"Asynchronous environment checks are not supported!\"\r\n          );\r\n        }\r\n\r\n        throw new Error(\r\n          'Unable to verify requirement: No method \"' +\r\n            hasMethodName +\r\n            '\" or valid Environment key \"' +\r\n            feature +\r\n            '\" found'\r\n        );\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,gCAAgC,EAAE;IAChD;AACF;AACA;AACA;AACA;IACEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAACC,WAAW,EAAE;QAKnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,WAAW,CAACG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAClD,IAAIG,OAAO,GAAGJ,WAAW,CAACC,CAAC,CAAC;UAC5B,IAAII,aAAa,GAAG,KAAK,GAAGb,EAAE,CAACc,IAAI,CAACC,MAAM,CAACC,UAAU,CAACJ,OAAO,CAAC;UAE9D,IAAI,IAAI,CAACC,aAAa,CAAC,EAAE;YACvB,IAAI,IAAI,CAACA,aAAa,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;cAClC;YACF,CAAC,MAAM;cACL,MAAM,IAAIb,EAAE,CAACiB,GAAG,CAACC,IAAI,CAACC,gBAAgB,CAACP,OAAO,CAAC;YACjD;UACF;UAEA,IAAIZ,EAAE,CAACoB,IAAI,CAACC,WAAW,CAACC,SAAS,CAAC,CAAC,CAACV,OAAO,CAAC,EAAE;YAC5C,IAAIW,QAAQ,GAAGvB,EAAE,CAACoB,IAAI,CAACC,WAAW,CAACG,GAAG,CAACZ,OAAO,CAAC;YAC/C,IAAIW,QAAQ,KAAK,IAAI,EAAE;cACrB;YACF;YACA,IAAIA,QAAQ,KAAK,KAAK,EAAE;cACtB,MAAM,IAAIvB,EAAE,CAACiB,GAAG,CAACC,IAAI,CAACC,gBAAgB,CAACP,OAAO,CAAC;YACjD,CAAC,MAAM;cACL,MAAM,IAAIa,KAAK,CACb,sBAAsB,GACpBb,OAAO,GACP,iBAAiB,GACjB,wDACJ,CAAC;YACH;UACF;UAEA,IAAIZ,EAAE,CAACoB,IAAI,CAACC,WAAW,CAACK,cAAc,CAAC,CAAC,CAACd,OAAO,CAAC,EAAE;YACjD,MAAM,IAAIa,KAAK,CACb,+BAA+B,GAC7Bb,OAAO,GACP,IAAI,GACJ,oDACJ,CAAC;UACH;UAEA,MAAM,IAAIa,KAAK,CACb,2CAA2C,GACzCZ,aAAa,GACb,8BAA8B,GAC9BD,OAAO,GACP,SACJ,CAAC;QACH;MACF;IACF;EACF,CAAC,CAAC;EA/FFZ,EAAE,CAACiB,GAAG,CAACC,IAAI,CAACS,kBAAkB,CAACxB,aAAa,GAAGA,aAAa;AAAC"
}