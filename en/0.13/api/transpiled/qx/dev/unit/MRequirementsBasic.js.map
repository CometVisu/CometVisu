{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "require",
    "featureList",
    "i",
    "l",
    "length",
    "feature",
    "hasMethodName",
    "lang",
    "String",
    "capitalize",
    "dev",
    "unit",
    "RequirementError",
    "core",
    "Environment",
    "getChecks",
    "envValue",
    "get",
    "Error",
    "getAsyncChecks",
    "MRequirementsBasic"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/MRequirementsBasic.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Adds support for verification of infrastructure requirements to unit test\n * classes.\n */\nqx.Mixin.define(\"qx.dev.unit.MRequirementsBasic\", {\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    /**\n     * Verifies a list of infrastructure requirements by checking for\n     * corresponding \"has\" methods. If no such method was found,\n     * {@link qx.core.Environment} will be checked for a key matching the given\n     * feature name. Note that asynchronous environment checks are not supported!\n     *\n     * @throws {qx.dev.unit.RequirementError} if any requirement check returned\n     *   <code>false</code>\n     * @throws {Error} if no valid check was found for a feature.\n     *\n     * @param featureList {String[]} List of infrastructure requirements\n     * @lint environmentNonLiteralKey(feature)\n     */\n    require(featureList) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertArray(featureList);\n      }\n\n      for (var i = 0, l = featureList.length; i < l; i++) {\n        var feature = featureList[i];\n        var hasMethodName = \"has\" + qx.lang.String.capitalize(feature);\n\n        if (this[hasMethodName]) {\n          if (this[hasMethodName]() === true) {\n            continue;\n          } else {\n            throw new qx.dev.unit.RequirementError(feature);\n          }\n        }\n\n        if (qx.core.Environment.getChecks()[feature]) {\n          var envValue = qx.core.Environment.get(feature);\n          if (envValue === true) {\n            continue;\n          }\n          if (envValue === false) {\n            throw new qx.dev.unit.RequirementError(feature);\n          } else {\n            throw new Error(\n              \"The Environment key \" +\n                feature +\n                \" cannot be used\" +\n                \" as a Test Requirement since its value is not boolean!\"\n            );\n          }\n        }\n\n        if (qx.core.Environment.getAsyncChecks()[feature]) {\n          throw new Error(\n            \"Unable to verify requirement \" +\n              feature +\n              \": \" +\n              \"Asynchronous environment checks are not supported!\"\n          );\n        }\n\n        throw new Error(\n          'Unable to verify requirement: No method \"' +\n            hasMethodName +\n            '\" or valid Environment key \"' +\n            feature +\n            '\" found'\n        );\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,gCAAgC,EAAE;IAChD;AACF;AACA;AACA;AACA;IACEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,mBAACC,WAAW,EAAE;QAKnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,WAAW,CAACG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAClD,IAAIG,OAAO,GAAGJ,WAAW,CAACC,CAAC,CAAC;UAC5B,IAAII,aAAa,GAAG,KAAK,GAAGb,EAAE,CAACc,IAAI,CAACC,MAAM,CAACC,UAAU,CAACJ,OAAO,CAAC;UAE9D,IAAI,IAAI,CAACC,aAAa,CAAC,EAAE;YACvB,IAAI,IAAI,CAACA,aAAa,CAAC,EAAE,KAAK,IAAI,EAAE;cAClC;YACF,CAAC,MAAM;cACL,MAAM,IAAIb,EAAE,CAACiB,GAAG,CAACC,IAAI,CAACC,gBAAgB,CAACP,OAAO,CAAC;YACjD;UACF;UAEA,IAAIZ,EAAE,CAACoB,IAAI,CAACC,WAAW,CAACC,SAAS,EAAE,CAACV,OAAO,CAAC,EAAE;YAC5C,IAAIW,QAAQ,GAAGvB,EAAE,CAACoB,IAAI,CAACC,WAAW,CAACG,GAAG,CAACZ,OAAO,CAAC;YAC/C,IAAIW,QAAQ,KAAK,IAAI,EAAE;cACrB;YACF;YACA,IAAIA,QAAQ,KAAK,KAAK,EAAE;cACtB,MAAM,IAAIvB,EAAE,CAACiB,GAAG,CAACC,IAAI,CAACC,gBAAgB,CAACP,OAAO,CAAC;YACjD,CAAC,MAAM;cACL,MAAM,IAAIa,KAAK,CACb,sBAAsB,GACpBb,OAAO,GACP,iBAAiB,GACjB,wDAAwD,CAC3D;YACH;UACF;UAEA,IAAIZ,EAAE,CAACoB,IAAI,CAACC,WAAW,CAACK,cAAc,EAAE,CAACd,OAAO,CAAC,EAAE;YACjD,MAAM,IAAIa,KAAK,CACb,+BAA+B,GAC7Bb,OAAO,GACP,IAAI,GACJ,oDAAoD,CACvD;UACH;UAEA,MAAM,IAAIa,KAAK,CACb,2CAA2C,GACzCZ,aAAa,GACb,8BAA8B,GAC9BD,OAAO,GACP,SAAS,CACZ;QACH;MACF;IACF;EACF,CAAC,CAAC;EA/FFZ,EAAE,CAACiB,GAAG,CAACC,IAAI,CAACS,kBAAkB,CAACxB,aAAa,GAAGA,aAAa;AAAC"
}