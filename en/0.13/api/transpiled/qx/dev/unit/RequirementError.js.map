{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "Error",
    "construct",
    "requirement",
    "message",
    "__message",
    "__requirement",
    "inst",
    "call",
    "stack",
    "stacktrace",
    "members",
    "getRequirement",
    "toString",
    "msg",
    "dev",
    "unit",
    "RequirementError"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dev/unit/RequirementError.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * This error is thrown by the unit test class if an infrastructure requirement\n * is not met. The unit testing framework should skip the test and visually mark\n * the test as not having been executed.\n */\nqx.Class.define(\"qx.dev.unit.RequirementError\", {\n  extend: Error,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param requirement {String?} The requirement ID, e.g. \"SSL\"\n   * @param message {String?} Optional error message\n   */\n  construct(requirement, message) {\n    this.__message = message || \"Requirement not met\";\n    this.__requirement = requirement;\n\n    var inst = Error.call(this, this.__message);\n    // map stack trace properties since they're not added by Error's constructor\n    if (inst.stack) {\n      this.stack = inst.stack;\n    }\n    if (inst.stacktrace) {\n      this.stacktrace = inst.stacktrace;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  members: {\n    __message: null,\n    __requirement: null,\n\n    /**\n     * Returns the ID of the requirement that was not satisfied.\n     *\n     * @return {String} The requirement ID\n     */\n    getRequirement() {\n      return this.__requirement;\n    },\n\n    /**\n     * Returns a string representation of the error.\n     *\n     * @return {String} Error message\n     */\n    toString() {\n      var msg = this.__message;\n      if (this.__requirement) {\n        msg += \": \" + this.__requirement;\n      }\n      return msg;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,8BAAhB,EAAgD;IAC9CC,MAAM,EAAEC,KADsC;;IAG9C;AACF;AACA;AACA;AACA;;IAEE;AACF;AACA;AACA;IACEC,SAb8C,qBAapCC,WAboC,EAavBC,OAbuB,EAad;MAC9B,KAAKC,SAAL,GAAiBD,OAAO,IAAI,qBAA5B;MACA,KAAKE,SAAL,GAAqBH,WAArB;MAEA,IAAII,IAAI,GAAGN,KAAK,CAACO,IAAN,CAAW,IAAX,EAAiB,KAAKH,SAAtB,CAAX,CAJ8B,CAK9B;;MACA,IAAIE,IAAI,CAACE,KAAT,EAAgB;QACd,KAAKA,KAAL,GAAaF,IAAI,CAACE,KAAlB;MACD;;MACD,IAAIF,IAAI,CAACG,UAAT,EAAqB;QACnB,KAAKA,UAAL,GAAkBH,IAAI,CAACG,UAAvB;MACD;IACF,CAzB6C;;IA2B9C;AACF;AACA;AACA;AACA;IACEC,OAAO,EAAE;MACPN,SAAS,EAAE,IADJ;MAEPC,SAAa,EAAE,IAFR;;MAIP;AACJ;AACA;AACA;AACA;MACIM,cATO,4BASU;QACf,OAAO,KAAKN,SAAZ;MACD,CAXM;;MAaP;AACJ;AACA;AACA;AACA;MACIO,QAlBO,sBAkBI;QACT,IAAIC,GAAG,GAAG,KAAKT,SAAf;;QACA,IAAI,KAAKC,SAAT,EAAwB;UACtBQ,GAAG,IAAI,OAAO,KAAKR,SAAnB;QACD;;QACD,OAAOQ,GAAP;MACD;IAxBM;EAhCqC,CAAhD;EAvBApB,EAAE,CAACqB,GAAH,CAAOC,IAAP,CAAYC,gBAAZ,CAA6BpB,aAA7B,GAA6CA,aAA7C"
}