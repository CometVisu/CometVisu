{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "url",
    "delegate",
    "_marshaler",
    "data",
    "marshal",
    "Json",
    "_delegate",
    "setUrl",
    "events",
    "loaded",
    "parseError",
    "error",
    "properties",
    "model",
    "nullable",
    "event",
    "state",
    "check",
    "init",
    "apply",
    "members",
    "__request",
    "_applyUrl",
    "value",
    "old",
    "util",
    "AliasManager",
    "getInstance",
    "resolve",
    "ResourceManager",
    "toUri",
    "_createRequest",
    "_getRequest",
    "_setRequest",
    "request",
    "dispose",
    "req",
    "io",
    "Xhr",
    "setAccept",
    "setParser",
    "addListener",
    "_onSuccess",
    "_onParseError",
    "del",
    "lang",
    "Type",
    "isFunction",
    "configureRequest",
    "_onChangePhase",
    "_onFail",
    "send",
    "ev",
    "requestPhase",
    "getData",
    "requestPhaseToStorePhase",
    "opened",
    "sent",
    "loading",
    "success",
    "abort",
    "timeout",
    "statusError",
    "setState",
    "getTarget",
    "fireDataEvent",
    "isDisposed",
    "getResponse",
    "manipulateData",
    "toClass",
    "oldModel",
    "getModel",
    "setModel",
    "toModel",
    "reload",
    "getUrl",
    "destruct",
    "_disposeObjects",
    "_disposeSingletonObjects",
    "store"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/store/Json.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * The JSON data store is responsible for fetching data from an url. The type\n * of the data has to be json.\n *\n * The loaded data will be parsed and saved in qooxdoo objects. Every value\n * of the loaded data will be stored in a qooxdoo property. The model classes\n * for the data will be created automatically.\n *\n * For the fetching itself it uses the {@link qx.io.request.Xhr} class and\n * for parsing the loaded javascript objects into qooxdoo objects, the\n * {@link qx.data.marshal.Json} class will be used.\n *\n * Please note that if you\n *\n * * upgrade from qooxdoo 1.4 or lower\n * * choose not to force the old transport\n * * use a delegate with qx.data.store.IStoreDelegate#configureRequest\n *\n * you probably need to change the implementation of your delegate to configure\n * the {@link qx.io.request.Xhr} request.\n *\n * This class only needs to be disposed if you want to abort any current I/O\n * request\n *\n */\nqx.Class.define(\"qx.data.store.Json\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param url {String|null} The url where to find the data. The store starts\n   *   loading as soon as the URL is give. If you want to change some details\n   *   concerning the request, add null here and set the URL as soon as\n   *   everything is set up.\n   * @param delegate {Object?null} The delegate containing one of the methods\n   *   specified in {@link qx.data.store.IStoreDelegate}.\n   */\n  construct(url, delegate) {\n    super();\n\n    // store the marshaler and the delegate\n    this._marshaler = new qx.data.marshal.Json(delegate);\n    this._delegate = delegate;\n\n    if (url != null) {\n      this.setUrl(url);\n    }\n  },\n\n  events: {\n    /**\n     * Data event fired after the model has been created. The data will be the\n     * created model.\n     */\n    loaded: \"qx.event.type.Data\",\n\n    /**\n     * Fired when a parse error (i.e. broken JSON) occurred\n     * during the load. The data contains a hash of the original\n     * response and the parser error (exception object).\n     */\n    parseError: \"qx.event.type.Data\",\n\n    /**\n     * Fired when an error (aborted, timeout or failed) occurred\n     * during the load. The data contains the response of the request.\n     * If you want more details, use the {@link #changeState} event.\n     */\n    error: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /**\n     * Property for holding the loaded model instance.\n     */\n    model: {\n      nullable: true,\n      event: \"changeModel\"\n    },\n\n    /**\n     * The state of the request as an url. If you want to check if the request\n     * did it’s job, use, the {@link #changeState} event and check for one of the\n     * listed values.\n     */\n    state: {\n      check: [\n        \"configured\",\n        \"queued\",\n        \"sending\",\n        \"receiving\",\n        \"completed\",\n        \"aborted\",\n        \"timeout\",\n        \"failed\"\n      ],\n\n      init: \"configured\",\n      event: \"changeState\"\n    },\n\n    /**\n     * The url where the request should go to.\n     */\n    url: {\n      check: \"String\",\n      apply: \"_applyUrl\",\n      event: \"changeUrl\",\n      nullable: true\n    }\n  },\n\n  members: {\n    _marshaler: null,\n    _delegate: null,\n\n    __request: null,\n\n    // apply function\n    _applyUrl(value, old) {\n      if (value != null) {\n        // take care of the resource management\n        value = qx.util.AliasManager.getInstance().resolve(value);\n        value = qx.util.ResourceManager.getInstance().toUri(value);\n\n        this._createRequest(value);\n      }\n    },\n\n    /**\n     * Get request\n     *\n     * @return {Object} The request.\n     */\n    _getRequest() {\n      return this.__request;\n    },\n\n    /**\n     * Set request.\n     *\n     * @param request {Object} The request.\n     */\n    _setRequest(request) {\n      this.__request = request;\n    },\n\n    /**\n     * Creates and sends a GET request with the given url.\n     *\n     * Listeners will be added to respond to the request’s \"success\",\n     * \"changePhase\" and \"fail\" event.\n     *\n     * @param url {String} The url for the request.\n     */\n    _createRequest(url) {\n      // dispose old request\n      if (this.__request) {\n        this.__request.dispose();\n        this.__request = null;\n      }\n\n      var req = new qx.io.request.Xhr(url);\n      this._setRequest(req);\n\n      // request json representation\n      req.setAccept(\"application/json\");\n\n      // parse as json no matter what content type is returned\n      req.setParser(\"json\");\n\n      // register the internal event before the user has the change to\n      // register its own event in the delegate\n      req.addListener(\"success\", this._onSuccess, this);\n      req.addListener(\"parseError\", this._onParseError, this);\n\n      // check for the request configuration hook\n      var del = this._delegate;\n      if (del && qx.lang.Type.isFunction(del.configureRequest)) {\n        this._delegate.configureRequest(req);\n      }\n\n      // map request phase to it’s own phase\n      req.addListener(\"changePhase\", this._onChangePhase, this);\n\n      // add failed, aborted and timeout listeners\n      req.addListener(\"fail\", this._onFail, this);\n\n      req.send();\n    },\n\n    /**\n     * Handler called when request phase changes.\n     *\n     * Sets the store’s state.\n     *\n     * @param ev {qx.event.type.Data} The request’s changePhase event.\n     */\n    _onChangePhase(ev) {\n      var requestPhase = ev.getData(),\n        requestPhaseToStorePhase = {},\n        state;\n\n      requestPhaseToStorePhase = {\n        opened: \"configured\",\n        sent: \"sending\",\n        loading: \"receiving\",\n        success: \"completed\",\n        abort: \"aborted\",\n        timeout: \"timeout\",\n        statusError: \"failed\"\n      };\n\n      state = requestPhaseToStorePhase[requestPhase];\n      if (state) {\n        this.setState(state);\n      }\n    },\n\n    /**\n     * Handler called when not completing the request successfully.\n     *\n     * @param ev {qx.event.type.Event} The request’s fail event.\n     */\n    _onFail(ev) {\n      var req = ev.getTarget();\n      this.fireDataEvent(\"error\", req);\n    },\n\n    /**\n     * Handler called when not completing the request successfully because\n     * of parse errors.\n     *\n     * @param ev {qx.event.type.Data} Hash map containing the original 'request'\n     *                                and the original parser 'error' exception object.\n     */\n    _onParseError(ev) {\n      this.fireDataEvent(\"parseError\", ev.getData());\n    },\n\n    /**\n     * Handler for the completion of the requests. It invokes the creation of\n     * the needed classes and instances for the fetched data using\n     * {@link qx.data.marshal.Json}.\n     *\n     * @param ev {qx.event.type.Event} The request’s success event.\n     */\n    _onSuccess(ev) {\n      if (this.isDisposed()) {\n        return;\n      }\n\n      var req = ev.getTarget(),\n        data = req.getResponse();\n\n      // check for the data manipulation hook\n      var del = this._delegate;\n      if (del && qx.lang.Type.isFunction(del.manipulateData)) {\n        data = this._delegate.manipulateData(data);\n      }\n\n      // create the class\n      this._marshaler.toClass(data, true);\n\n      var oldModel = this.getModel();\n\n      // set the initial data\n      this.setModel(this._marshaler.toModel(data));\n\n      // get rid of the old model\n      if (oldModel && oldModel.dispose) {\n        oldModel.dispose();\n      }\n\n      // fire complete event\n      this.fireDataEvent(\"loaded\", this.getModel());\n\n      // get rid of the request object\n      if (this.__request) {\n        this.__request.dispose();\n        this.__request = null;\n      }\n    },\n\n    /**\n     * Reloads the data with the url set in the {@link #url} property.\n     */\n    reload() {\n      var url = this.getUrl();\n      if (url != null) {\n        this._createRequest(url);\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct() {\n    if (this.__request != null) {\n      this._disposeObjects(\"__request\");\n    }\n\n    // The marshaler internally uses the singleton pattern\n    // (constructor.$$instance.\n    this._disposeSingletonObjects(\"_marshaler\");\n    this._delegate = null;\n  }\n});\n"
  ],
  "mappings": "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"
}