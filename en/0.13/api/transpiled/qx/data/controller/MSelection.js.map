{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "Class",
    "hasProperty",
    "constructor",
    "Error",
    "getSelection",
    "__ownSelection",
    "data",
    "Array",
    "setSelection",
    "properties",
    "selection",
    "check",
    "event",
    "apply",
    "init",
    "events",
    "changeSelection",
    "changeValue",
    "members",
    "_modifingSelection",
    "__selectionListenerId",
    "__selectionArrayListenerId",
    "setValue",
    "resetSelection",
    "getValue",
    "resetValue",
    "_applySelection",
    "value",
    "old",
    "undefined",
    "removeListenerById",
    "addListener",
    "__changeSelectionArray",
    "_updateSelection",
    "__P_175_3",
    "_changeTargetSelection",
    "getTarget",
    "__targetSupportsMultiSelection",
    "__targetSupportsSingleSelection",
    "_inSelectionModification",
    "targetSelection",
    "spliceArgs",
    "getLength",
    "i",
    "length",
    "model",
    "getModel",
    "push",
    "splice",
    "dispose",
    "fireDataEvent",
    "_addChangeTargetListener",
    "_startSelectionModification",
    "getItem",
    "selectable",
    "__getSelectableForModel",
    "targetSelectionItems",
    "includes",
    "item",
    "__selectItem",
    "_endSelectionModification",
    "__P_175_4",
    "targetClass",
    "implementsInterface",
    "ui",
    "core",
    "IMultiSelection",
    "__P_175_5",
    "ISingleSelection",
    "__P_175_7",
    "addToSelection",
    "__P_175_6",
    "children",
    "getSelectables",
    "destruct",
    "controller",
    "MSelection"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/MSelection.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Mixin for the selection in the data binding controller.\r\n * It contains an selection property which can be manipulated.\r\n * Remember to call the method {@link #_addChangeTargetListener} on every\r\n * change of the target.\r\n * It is also important that the elements stored in the target e.g. ListItems\r\n * do have the corresponding model stored as user data under the \"model\" key.\r\n */\r\nqx.Mixin.define(\"qx.data.controller.MSelection\", {\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  construct() {\r\n    // check for a target property\r\n    if (!qx.Class.hasProperty(this.constructor, \"target\")) {\r\n      throw new Error(\"Target property is needed.\");\r\n    }\r\n\r\n    // create a default selection array\r\n    if (this.getSelection() == null) {\r\n      this.__ownSelection = new qx.data.Array();\r\n      this.setSelection(this.__ownSelection);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * Data array containing the selected model objects. This property can be\r\n     * manipulated directly which means that a push to the selection will also\r\n     * select the corresponding element in the target.\r\n     */\r\n    selection: {\r\n      check: \"qx.data.Array\",\r\n      event: \"changeSelection\",\r\n      apply: \"_applySelection\",\r\n      init: null\r\n    }\r\n  },\r\n\r\n  events: {\r\n    /**\r\n     * This event is fired as soon as the content of the selection property changes, but\r\n     * this is not equal to the change of the selection of the widget. If the selection\r\n     * of the widget changes, the content of the array stored in the selection property\r\n     * changes. This means you have to listen to the change event of the selection array\r\n     * to get an event as soon as the user changes the selected item.\r\n     * <pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>\r\n     */\r\n    changeSelection: \"qx.event.type.Data\",\r\n\r\n    /** Fires after the value was modified */\r\n    changeValue: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    // private members //\r\n    // set the semaphore-like variable for the selection change\r\n    _modifingSelection: 0,\r\n    __selectionListenerId: null,\r\n    __selectionArrayListenerId: null,\r\n    __ownSelection: null,\r\n\r\n    /**\r\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\r\n     *\r\n     * @param selection {qx.data.IListData|null} List data to select as value.\r\n     * @return {null} The status of this operation.\r\n     */\r\n    setValue(selection) {\r\n      if (null === selection) {\r\n        this.resetSelection();\r\n      } else {\r\n        this.setSelection(selection);\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\r\n     *\r\n     * @return {qx.data.IListData} The current selection.\r\n     */\r\n    getValue() {\r\n      return this.getSelection();\r\n    },\r\n\r\n    /**\r\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\r\n     */\r\n    resetValue() {\r\n      this.resetSelection();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       APPLY METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Apply-method for setting a new selection array. Only the change listener\r\n     * will be removed from the old array and added to the new.\r\n     *\r\n     * @param value {qx.data.Array} The new data array for the selection.\r\n     * @param old {qx.data.Array|null} The old data array for the selection.\r\n     */\r\n    _applySelection(value, old) {\r\n      // remove the old listener if necessary\r\n      if (this.__selectionArrayListenerId != undefined && old != undefined) {\r\n        old.removeListenerById(this.__selectionArrayListenerId);\r\n        this.__selectionArrayListenerId = null;\r\n      }\r\n      // add a new change listener to the changeArray\r\n      if (value) {\r\n        this.__selectionArrayListenerId = value.addListener(\r\n          \"change\",\r\n          this.__changeSelectionArray,\r\n          this\r\n        );\r\n      }\r\n\r\n      // apply the new selection\r\n      this._updateSelection();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Event handler for the change of the data array holding the selection.\r\n     * If a change is in the selection array, the selection update will be\r\n     * invoked.\r\n     */\r\n    __changeSelectionArray() {\r\n      this._updateSelection();\r\n    },\r\n\r\n    /**\r\n     * Event handler for a change in the target selection.\r\n     * If the selection in the target has changed, the selected model objects\r\n     * will be found and added to the selection array.\r\n     */\r\n    _changeTargetSelection() {\r\n      // dont do anything without a target\r\n      if (this.getTarget() == null) {\r\n        return;\r\n      }\r\n\r\n      // if a selection API is supported\r\n      if (\r\n        !this.__targetSupportsMultiSelection() &&\r\n        !this.__targetSupportsSingleSelection()\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // if __changeSelectionArray is currently working, do nothing\r\n      if (this._inSelectionModification()) {\r\n        return;\r\n      }\r\n\r\n      // get both selections\r\n      var targetSelection = this.getTarget().getSelection();\r\n      var selection = this.getSelection();\r\n      if (selection == null) {\r\n        selection = new qx.data.Array();\r\n        this.__ownSelection = selection;\r\n        this.setSelection(selection);\r\n      }\r\n\r\n      // go through the target selection\r\n      var spliceArgs = [0, selection.getLength()];\r\n      for (var i = 0; i < targetSelection.length; i++) {\r\n        var model = targetSelection[i].getModel();\r\n        if (model !== null) {\r\n          spliceArgs.push(model);\r\n        }\r\n      }\r\n      // use splice to ensure a correct change event [BUG #4728]\r\n      selection.splice.apply(selection, spliceArgs).dispose();\r\n\r\n      // fire the change event manually\r\n      this.fireDataEvent(\"changeSelection\", this.getSelection());\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       SELECTION\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Helper method which should be called by the classes including this\r\n     * Mixin when the target changes.\r\n     *\r\n     * @param value {qx.ui.core.Widget|null} The new target.\r\n     * @param old {qx.ui.core.Widget|null} The old target.\r\n     */\r\n    _addChangeTargetListener(value, old) {\r\n      // remove the old selection listener\r\n      if (this.__selectionListenerId != undefined && old != undefined) {\r\n        old.removeListenerById(this.__selectionListenerId);\r\n      }\r\n\r\n      if (value != null) {\r\n        // if a selection API is supported\r\n        if (\r\n          this.__targetSupportsMultiSelection() ||\r\n          this.__targetSupportsSingleSelection()\r\n        ) {\r\n          // add a new selection listener\r\n          this.__selectionListenerId = value.addListener(\r\n            \"changeSelection\",\r\n            this._changeTargetSelection,\r\n            this\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Method for updating the selection. It checks for the case of single or\r\n     * multi selection and after that checks if the selection in the selection\r\n     * array is the same as in the target widget.\r\n     */\r\n    _updateSelection() {\r\n      // do not update if no target is given\r\n      if (!this.getTarget() || !this.getSelection()) {\r\n        return;\r\n      }\r\n      // mark the change process in a flag\r\n      this._startSelectionModification();\r\n\r\n      // if its a multi selection target\r\n      if (this.__targetSupportsMultiSelection()) {\r\n        var targetSelection = [];\r\n        // go through the selection array\r\n        for (var i = 0; i < this.getSelection().length; i++) {\r\n          // store each item\r\n          var model = this.getSelection().getItem(i);\r\n          var selectable = this.__getSelectableForModel(model);\r\n          if (selectable != null) {\r\n            targetSelection.push(selectable);\r\n          }\r\n        }\r\n        this.getTarget().setSelection(targetSelection);\r\n\r\n        // get the selection of the target\r\n        targetSelection = this.getTarget().getSelection();\r\n        // get all items selected in the list\r\n        var targetSelectionItems = [];\r\n        for (var i = 0; i < targetSelection.length; i++) {\r\n          targetSelectionItems[i] = targetSelection[i].getModel();\r\n        }\r\n\r\n        // go through the controller selection\r\n        for (var i = this.getSelection().length - 1; i >= 0; i--) {\r\n          // if the item in the controller selection is not selected in the list\r\n          if (!targetSelectionItems.includes(this.getSelection().getItem(i))) {\r\n            // remove the current element and get rid of the return array\r\n            this.getSelection().splice(i, 1).dispose();\r\n          }\r\n        }\r\n\r\n        // if its a single selection target\r\n      } else if (this.__targetSupportsSingleSelection()) {\r\n        // get the model which should be selected\r\n        var item = this.getSelection().getItem(this.getSelection().length - 1);\r\n        if (item !== undefined) {\r\n          // select the last selected item (old selection will be removed anyway)\r\n          this.__selectItem(item);\r\n          // remove the other items from the selection data array and get\r\n          // rid of the return array\r\n          this.getSelection()\r\n            .splice(0, this.getSelection().getLength() - 1)\r\n            .dispose();\r\n        } else {\r\n          // if there is no item to select (e.g. new model set [BUG #4125]),\r\n          // reset the selection\r\n          this.getTarget().resetSelection();\r\n        }\r\n      }\r\n\r\n      // reset the changing flag\r\n      this._endSelectionModification();\r\n      this.fireDataEvent(\"changeValue\", this.getSelection());\r\n    },\r\n\r\n    /**\r\n     * Helper-method returning true, if the target supports multi selection.\r\n     * @return {Boolean} true, if the target supports multi selection.\r\n     */\r\n    __targetSupportsMultiSelection() {\r\n      var targetClass = this.getTarget().constructor;\r\n      return qx.Class.implementsInterface(\r\n        targetClass,\r\n        qx.ui.core.IMultiSelection\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Helper-method returning true, if the target supports single selection.\r\n     * @return {Boolean} true, if the target supports single selection.\r\n     */\r\n    __targetSupportsSingleSelection() {\r\n      var targetClass = this.getTarget().constructor;\r\n      return qx.Class.implementsInterface(\r\n        targetClass,\r\n        qx.ui.core.ISingleSelection\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Internal helper for selecting an item in the target. The item to select\r\n     * is defined by a given model item.\r\n     *\r\n     * @param item {qx.core.Object} A model element.\r\n     */\r\n    __selectItem(item) {\r\n      var selectable = this.__getSelectableForModel(item);\r\n      // if no selectable could be found, just return\r\n      if (selectable == null) {\r\n        return;\r\n      }\r\n      // if the target is multi selection able\r\n      if (this.__targetSupportsMultiSelection()) {\r\n        // select the item in the target\r\n        this.getTarget().addToSelection(selectable);\r\n        // if the target is single selection able\r\n      } else if (this.__targetSupportsSingleSelection()) {\r\n        this.getTarget().setSelection([selectable]);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the list item storing the given model in its model property.\r\n     *\r\n     * @param model {var} The representing model of a selectable.\r\n     * @return {Object|null} List item or <code>null</code> if none was found\r\n     */\r\n    __getSelectableForModel(model) {\r\n      // get all list items\r\n      var children = this.getTarget().getSelectables(true);\r\n\r\n      // go through all children and search for the child to select\r\n      for (var i = 0; i < children.length; i++) {\r\n        if (children[i].getModel() == model) {\r\n          return children[i];\r\n        }\r\n      }\r\n      // if no selectable was found\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Helper-Method signaling that currently the selection of the target is\r\n     * in change. That will block the change of the internal selection.\r\n     * {@link #_endSelectionModification}\r\n     */\r\n    _startSelectionModification() {\r\n      this._modifingSelection++;\r\n    },\r\n\r\n    /**\r\n     * Helper-Method signaling that the internal changing of the targets\r\n     * selection is over.\r\n     * {@link #_startSelectionModification}\r\n     */\r\n    _endSelectionModification() {\r\n      this._modifingSelection > 0 ? this._modifingSelection-- : null;\r\n    },\r\n\r\n    /**\r\n     * Helper-Method for checking the state of the selection modification.\r\n     * {@link #_startSelectionModification}\r\n     * {@link #_endSelectionModification}\r\n     * @return {Boolean} <code>true</code> if selection modification is active\r\n     */\r\n    _inSelectionModification() {\r\n      return this._modifingSelection > 0;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    if (this.__ownSelection) {\r\n      this.__ownSelection.dispose();\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}