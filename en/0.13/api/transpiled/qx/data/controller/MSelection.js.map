{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "Class",
    "hasProperty",
    "constructor",
    "Error",
    "getSelection",
    "__ownSelection",
    "data",
    "Array",
    "setSelection",
    "properties",
    "selection",
    "check",
    "event",
    "apply",
    "init",
    "events",
    "changeSelection",
    "changeValue",
    "members",
    "_modifingSelection",
    "__selectionListenerId",
    "__selectionArrayListenerId",
    "setValue",
    "resetSelection",
    "getValue",
    "resetValue",
    "_applySelection",
    "value",
    "old",
    "undefined",
    "removeListenerById",
    "addListener",
    "__changeSelectionArray",
    "_updateSelection",
    "_changeTargetSelection",
    "getTarget",
    "__targetSupportsMultiSelection",
    "__targetSupportsSingleSelection",
    "_inSelectionModification",
    "targetSelection",
    "spliceArgs",
    "getLength",
    "i",
    "length",
    "model",
    "getModel",
    "push",
    "splice",
    "dispose",
    "fireDataEvent",
    "_addChangeTargetListener",
    "_startSelectionModification",
    "getItem",
    "selectable",
    "__getSelectableForModel",
    "targetSelectionItems",
    "includes",
    "item",
    "__selectItem",
    "_endSelectionModification",
    "targetClass",
    "implementsInterface",
    "ui",
    "core",
    "IMultiSelection",
    "ISingleSelection",
    "addToSelection",
    "children",
    "getSelectables",
    "destruct",
    "controller",
    "MSelection"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/MSelection.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Mixin for the selection in the data binding controller.\n * It contains an selection property which can be manipulated.\n * Remember to call the method {@link #_addChangeTargetListener} on every\n * change of the target.\n * It is also important that the elements stored in the target e.g. ListItems\n * do have the corresponding model stored as user data under the \"model\" key.\n */\nqx.Mixin.define(\"qx.data.controller.MSelection\", {\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    // check for a target property\n    if (!qx.Class.hasProperty(this.constructor, \"target\")) {\n      throw new Error(\"Target property is needed.\");\n    }\n\n    // create a default selection array\n    if (this.getSelection() == null) {\n      this.__ownSelection = new qx.data.Array();\n      this.setSelection(this.__ownSelection);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Data array containing the selected model objects. This property can be\n     * manipulated directly which means that a push to the selection will also\n     * select the corresponding element in the target.\n     */\n    selection: {\n      check: \"qx.data.Array\",\n      event: \"changeSelection\",\n      apply: \"_applySelection\",\n      init: null\n    }\n  },\n\n  events: {\n    /**\n     * This event is fired as soon as the content of the selection property changes, but\n     * this is not equal to the change of the selection of the widget. If the selection\n     * of the widget changes, the content of the array stored in the selection property\n     * changes. This means you have to listen to the change event of the selection array\n     * to get an event as soon as the user changes the selected item.\n     * <pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>\n     */\n    changeSelection: \"qx.event.type.Data\",\n\n    /** Fires after the value was modified */\n    changeValue: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // private members //\n    // set the semaphore-like variable for the selection change\n    _modifingSelection: 0,\n    __selectionListenerId: null,\n    __selectionArrayListenerId: null,\n    __ownSelection: null,\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param selection {qx.data.IListData|null} List data to select as value.\n     * @return {null} The status of this operation.\n     */\n    setValue(selection) {\n      if (null === selection) {\n        this.resetSelection();\n      } else {\n        this.setSelection(selection);\n      }\n\n      return null;\n    },\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @return {qx.data.IListData} The current selection.\n     */\n    getValue() {\n      return this.getSelection();\n    },\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue() {\n      this.resetSelection();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Apply-method for setting a new selection array. Only the change listener\n     * will be removed from the old array and added to the new.\n     *\n     * @param value {qx.data.Array} The new data array for the selection.\n     * @param old {qx.data.Array|null} The old data array for the selection.\n     */\n    _applySelection(value, old) {\n      // remove the old listener if necessary\n      if (this.__selectionArrayListenerId != undefined && old != undefined) {\n        old.removeListenerById(this.__selectionArrayListenerId);\n        this.__selectionArrayListenerId = null;\n      }\n      // add a new change listener to the changeArray\n      if (value) {\n        this.__selectionArrayListenerId = value.addListener(\n          \"change\",\n          this.__changeSelectionArray,\n          this\n        );\n      }\n\n      // apply the new selection\n      this._updateSelection();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Event handler for the change of the data array holding the selection.\n     * If a change is in the selection array, the selection update will be\n     * invoked.\n     */\n    __changeSelectionArray() {\n      this._updateSelection();\n    },\n\n    /**\n     * Event handler for a change in the target selection.\n     * If the selection in the target has changed, the selected model objects\n     * will be found and added to the selection array.\n     */\n    _changeTargetSelection() {\n      // dont do anything without a target\n      if (this.getTarget() == null) {\n        return;\n      }\n\n      // if a selection API is supported\n      if (\n        !this.__targetSupportsMultiSelection() &&\n        !this.__targetSupportsSingleSelection()\n      ) {\n        return;\n      }\n\n      // if __changeSelectionArray is currently working, do nothing\n      if (this._inSelectionModification()) {\n        return;\n      }\n\n      // get both selections\n      var targetSelection = this.getTarget().getSelection();\n      var selection = this.getSelection();\n      if (selection == null) {\n        selection = new qx.data.Array();\n        this.__ownSelection = selection;\n        this.setSelection(selection);\n      }\n\n      // go through the target selection\n      var spliceArgs = [0, selection.getLength()];\n      for (var i = 0; i < targetSelection.length; i++) {\n        var model = targetSelection[i].getModel();\n        if (model !== null) {\n          spliceArgs.push(model);\n        }\n      }\n      // use splice to ensure a correct change event [BUG #4728]\n      selection.splice.apply(selection, spliceArgs).dispose();\n\n      // fire the change event manually\n      this.fireDataEvent(\"changeSelection\", this.getSelection());\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       SELECTION\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method which should be called by the classes including this\n     * Mixin when the target changes.\n     *\n     * @param value {qx.ui.core.Widget|null} The new target.\n     * @param old {qx.ui.core.Widget|null} The old target.\n     */\n    _addChangeTargetListener(value, old) {\n      // remove the old selection listener\n      if (this.__selectionListenerId != undefined && old != undefined) {\n        old.removeListenerById(this.__selectionListenerId);\n      }\n\n      if (value != null) {\n        // if a selection API is supported\n        if (\n          this.__targetSupportsMultiSelection() ||\n          this.__targetSupportsSingleSelection()\n        ) {\n          // add a new selection listener\n          this.__selectionListenerId = value.addListener(\n            \"changeSelection\",\n            this._changeTargetSelection,\n            this\n          );\n        }\n      }\n    },\n\n    /**\n     * Method for updating the selection. It checks for the case of single or\n     * multi selection and after that checks if the selection in the selection\n     * array is the same as in the target widget.\n     */\n    _updateSelection() {\n      // do not update if no target is given\n      if (!this.getTarget() || !this.getSelection()) {\n        return;\n      }\n      // mark the change process in a flag\n      this._startSelectionModification();\n\n      // if its a multi selection target\n      if (this.__targetSupportsMultiSelection()) {\n        var targetSelection = [];\n        // go through the selection array\n        for (var i = 0; i < this.getSelection().length; i++) {\n          // store each item\n          var model = this.getSelection().getItem(i);\n          var selectable = this.__getSelectableForModel(model);\n          if (selectable != null) {\n            targetSelection.push(selectable);\n          }\n        }\n        this.getTarget().setSelection(targetSelection);\n\n        // get the selection of the target\n        targetSelection = this.getTarget().getSelection();\n        // get all items selected in the list\n        var targetSelectionItems = [];\n        for (var i = 0; i < targetSelection.length; i++) {\n          targetSelectionItems[i] = targetSelection[i].getModel();\n        }\n\n        // go through the controller selection\n        for (var i = this.getSelection().length - 1; i >= 0; i--) {\n          // if the item in the controller selection is not selected in the list\n          if (!targetSelectionItems.includes(this.getSelection().getItem(i))) {\n            // remove the current element and get rid of the return array\n            this.getSelection().splice(i, 1).dispose();\n          }\n        }\n\n        // if its a single selection target\n      } else if (this.__targetSupportsSingleSelection()) {\n        // get the model which should be selected\n        var item = this.getSelection().getItem(this.getSelection().length - 1);\n        if (item !== undefined) {\n          // select the last selected item (old selection will be removed anyway)\n          this.__selectItem(item);\n          // remove the other items from the selection data array and get\n          // rid of the return array\n          this.getSelection()\n            .splice(0, this.getSelection().getLength() - 1)\n            .dispose();\n        } else {\n          // if there is no item to select (e.g. new model set [BUG #4125]),\n          // reset the selection\n          this.getTarget().resetSelection();\n        }\n      }\n\n      // reset the changing flag\n      this._endSelectionModification();\n      this.fireDataEvent(\"changeValue\", this.getSelection());\n    },\n\n    /**\n     * Helper-method returning true, if the target supports multi selection.\n     * @return {Boolean} true, if the target supports multi selection.\n     */\n    __targetSupportsMultiSelection() {\n      var targetClass = this.getTarget().constructor;\n      return qx.Class.implementsInterface(\n        targetClass,\n        qx.ui.core.IMultiSelection\n      );\n    },\n\n    /**\n     * Helper-method returning true, if the target supports single selection.\n     * @return {Boolean} true, if the target supports single selection.\n     */\n    __targetSupportsSingleSelection() {\n      var targetClass = this.getTarget().constructor;\n      return qx.Class.implementsInterface(\n        targetClass,\n        qx.ui.core.ISingleSelection\n      );\n    },\n\n    /**\n     * Internal helper for selecting an item in the target. The item to select\n     * is defined by a given model item.\n     *\n     * @param item {qx.core.Object} A model element.\n     */\n    __selectItem(item) {\n      var selectable = this.__getSelectableForModel(item);\n      // if no selectable could be found, just return\n      if (selectable == null) {\n        return;\n      }\n      // if the target is multi selection able\n      if (this.__targetSupportsMultiSelection()) {\n        // select the item in the target\n        this.getTarget().addToSelection(selectable);\n        // if the target is single selection able\n      } else if (this.__targetSupportsSingleSelection()) {\n        this.getTarget().setSelection([selectable]);\n      }\n    },\n\n    /**\n     * Returns the list item storing the given model in its model property.\n     *\n     * @param model {var} The representing model of a selectable.\n     * @return {Object|null} List item or <code>null</code> if none was found\n     */\n    __getSelectableForModel(model) {\n      // get all list items\n      var children = this.getTarget().getSelectables(true);\n\n      // go through all children and search for the child to select\n      for (var i = 0; i < children.length; i++) {\n        if (children[i].getModel() == model) {\n          return children[i];\n        }\n      }\n      // if no selectable was found\n      return null;\n    },\n\n    /**\n     * Helper-Method signaling that currently the selection of the target is\n     * in change. That will block the change of the internal selection.\n     * {@link #_endSelectionModification}\n     */\n    _startSelectionModification() {\n      this._modifingSelection++;\n    },\n\n    /**\n     * Helper-Method signaling that the internal changing of the targets\n     * selection is over.\n     * {@link #_startSelectionModification}\n     */\n    _endSelectionModification() {\n      this._modifingSelection > 0 ? this._modifingSelection-- : null;\n    },\n\n    /**\n     * Helper-Method for checking the state of the selection modification.\n     * {@link #_startSelectionModification}\n     * {@link #_endSelectionModification}\n     * @return {Boolean} <code>true</code> if selection modification is active\n     */\n    _inSelectionModification() {\n      return this._modifingSelection > 0;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    if (this.__ownSelection) {\n      this.__ownSelection.dispose();\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}