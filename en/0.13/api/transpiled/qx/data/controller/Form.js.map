{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "model",
    "target",
    "selfUpdate",
    "constructor",
    "call",
    "_selfUpdate",
    "__bindingOptions",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "members",
    "__objectController",
    "addBindingOptions",
    "name",
    "model2target",
    "target2model",
    "getModel",
    "getTarget",
    "item",
    "getItems",
    "targetProperty",
    "__isModelSelectable",
    "removeTarget",
    "addTarget",
    "createModel",
    "includeBubbleEvents",
    "Error",
    "items",
    "data",
    "names",
    "split",
    "currentData",
    "i",
    "length",
    "clazz",
    "itemValue",
    "hasInterface",
    "ui",
    "ISingleSelection",
    "getModelSelection",
    "getItem",
    "getValue",
    "converter",
    "marshal",
    "Json",
    "updateModel",
    "sourceProperty",
    "options",
    "SingleValueBinding",
    "updateTarget",
    "_applyTarget",
    "value",
    "old",
    "__tearDownBinding",
    "__setUpBinding",
    "_applyModel",
    "getValidationManager",
    "reset",
    "__P_181_4",
    "controller",
    "ex",
    "redefineResetter",
    "__P_181_3",
    "oldTarget",
    "__P_181_2",
    "form",
    "IModelSelection",
    "destruct",
    "dispose",
    "Form"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Form.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * <h2>Form Controller</h2>\n *\n * *General idea*\n *\n * The form controller is responsible for connecting a form with a model. If no\n * model is given, a model can be created. This created model will fit exactly\n * to the given form and can be used for serialization. All the connections\n * between the form items and the model are handled by an internal\n * {@link qx.data.controller.Object}.\n *\n * *Features*\n *\n * * Connect a form to a model (bidirectional)\n * * Create a model for a given form\n *\n * *Usage*\n *\n * The controller only works if both a controller and a model are set.\n * Creating a model will automatically set the created model.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n */\nqx.Class.define(\"qx.data.controller.Form\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param model {qx.core.Object | null} The model to bind the target to. The\n   *   given object will be set as {@link #model} property.\n   * @param target {qx.ui.form.Form | null} The form which contains the form\n   *   items. The given form will be set as {@link #target} property.\n   * @param selfUpdate {Boolean?false} If set to true, you need to call the\n   *   {@link #updateModel} method to get the data in the form to the model.\n   *   Otherwise, the data will be synced automatically on every change of\n   *   the form.\n   */\n  construct(model, target, selfUpdate) {\n    super();\n\n    this._selfUpdate = !!selfUpdate;\n    this.__bindingOptions = {};\n\n    if (model != null) {\n      this.setModel(model);\n    }\n\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n  properties: {\n    /** Data object containing the data which should be shown in the target. */\n    model: {\n      check: \"qx.core.Object\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n    /** The target widget which should show the data. */\n    target: {\n      check: \"qx.ui.form.Form\",\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      nullable: true,\n      init: null,\n      dereference: true\n    }\n  },\n\n  members: {\n    __objectController: null,\n    __bindingOptions: null,\n\n    /**\n     * The form controller uses for setting up the bindings the fundamental\n     * binding layer, the {@link qx.data.SingleValueBinding}. To achieve a\n     * binding in both directions, two bindings are needed. With this method,\n     * you have the opportunity to set the options used for the bindings.\n     *\n     * @param name {String} The name of the form item for which the options\n     *   should be used.\n     * @param model2target {Map} Options map used for the binding from model\n     *   to target. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     * @param target2model {Map} Options map used for the binding from target\n     *   to model. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     */\n    addBindingOptions(name, model2target, target2model) {\n      this.__bindingOptions[name] = [model2target, target2model];\n\n      // return if not both, model and target are given\n      if (this.getModel() == null || this.getTarget() == null) {\n        return;\n      }\n\n      // renew the affected binding\n      var item = this.getTarget().getItems()[name];\n      var targetProperty = this.__isModelSelectable(item)\n        ? \"modelSelection[0]\"\n        : \"value\";\n\n      // remove the binding\n      this.__objectController.removeTarget(item, targetProperty, name);\n      // set up the new binding with the options\n      this.__objectController.addTarget(\n        item,\n        targetProperty,\n        name,\n        !this._selfUpdate,\n        model2target,\n        target2model\n      );\n    },\n\n    /**\n     * Creates and sets a model using the {@link qx.data.marshal.Json} object.\n     * Remember that this method can only work if the form is set. The created\n     * model will fit exactly that form. Changing the form or adding an item to\n     * the form will need a new model creation.\n     *\n     * @param includeBubbleEvents {Boolean} Whether the model should support\n     *   the bubbling of change events or not.\n     * @return {qx.core.Object} The created model.\n     */\n    createModel(includeBubbleEvents) {\n      var target = this.getTarget();\n\n      // throw an error if no target is set\n      if (target == null) {\n        throw new Error(\"No target is set.\");\n      }\n\n      var items = target.getItems();\n      var data = {};\n      for (var name in items) {\n        var names = name.split(\".\");\n        var currentData = data;\n        for (var i = 0; i < names.length; i++) {\n          // if its the last item\n          if (i + 1 == names.length) {\n            // check if the target is a selection\n            var clazz = items[name].constructor;\n            var itemValue = null;\n            if (qx.Class.hasInterface(clazz, qx.ui.core.ISingleSelection)) {\n              // use the first element of the selection because passed to the\n              // marshaler (and its single selection anyway) [BUG #3541]\n              itemValue = items[name].getModelSelection().getItem(0) || null;\n            } else {\n              itemValue = items[name].getValue();\n            }\n            // call the converter if available [BUG #4382]\n            if (this.__bindingOptions[name] && this.__bindingOptions[name][1]) {\n              itemValue = this.__bindingOptions[name][1].converter(itemValue);\n            }\n            currentData[names[i]] = itemValue;\n          } else {\n            // if its not the last element, check if the object exists\n            if (!currentData[names[i]]) {\n              currentData[names[i]] = {};\n            }\n            currentData = currentData[names[i]];\n          }\n        }\n      }\n\n      var model = qx.data.marshal.Json.createModel(data, includeBubbleEvents);\n      this.setModel(model);\n\n      return model;\n    },\n\n    /**\n     * Responsible for syncing the data from entered in the form to the model.\n     * Please keep in mind that this method only works if you create the form\n     * controller with <code>selfUpdate</code> parameter set to true. Otherwise,\n     * this method will do nothing because updates will be synced automatically\n     * on every change.\n     */\n    updateModel() {\n      // only do stuff if self update is enabled and a model or target is set\n      if (!this._selfUpdate || !this.getModel() || !this.getTarget()) {\n        return;\n      }\n\n      var items = this.getTarget().getItems();\n      for (var name in items) {\n        var item = items[name];\n        var sourceProperty = this.__isModelSelectable(item)\n          ? \"modelSelection[0]\"\n          : \"value\";\n\n        var options = this.__bindingOptions[name];\n        options = options && this.__bindingOptions[name][1];\n\n        qx.data.SingleValueBinding.updateTarget(\n          item,\n          sourceProperty,\n          this.getModel(),\n          name,\n          options\n        );\n      }\n    },\n\n    // apply method\n    _applyTarget(value, old) {\n      // if an old target is given, remove the binding\n      if (old != null) {\n        this.__tearDownBinding(old);\n      }\n\n      // do nothing if no target is set\n      if (this.getModel() == null) {\n        return;\n      }\n\n      // target and model are available\n      if (value != null) {\n        this.__setUpBinding();\n      }\n    },\n\n    // apply method\n    _applyModel(value, old) {\n      // set the model to null to reset all items before removing them\n      if (this.__objectController != null && value == null) {\n        this.__objectController.setModel(null);\n      }\n\n      // first, get rid off all bindings (avoids wrong data population)\n      if (this.__objectController != null && this.getTarget() != null) {\n        var items = this.getTarget().getItems();\n        for (var name in items) {\n          var item = items[name];\n          var targetProperty = this.__isModelSelectable(item)\n            ? \"modelSelection[0]\"\n            : \"value\";\n          this.__objectController.removeTarget(item, targetProperty, name);\n        }\n      }\n\n      // set the model of the object controller if available\n      if (this.__objectController != null) {\n        this.__objectController.setModel(value);\n      }\n\n      // do nothing is no target is set\n      if (this.getTarget() == null) {\n        return;\n      } else {\n        // if form was validated with errors and model changes\n        // the errors should be cleared see #8977\n        this.getTarget().getValidationManager().reset();\n      }\n\n      // model and target are available\n      if (value != null) {\n        this.__setUpBinding();\n      }\n    },\n\n    /**\n     * Internal helper for setting up the bindings using\n     * {@link qx.data.controller.Object#addTarget}. All bindings are set\n     * up bidirectional.\n     */\n    __setUpBinding() {\n      // create the object controller\n      if (this.__objectController == null) {\n        this.__objectController = new qx.data.controller.Object(\n          this.getModel()\n        );\n      }\n\n      // get the form items\n      var items = this.getTarget().getItems();\n\n      // connect all items\n      for (var name in items) {\n        var item = items[name];\n        var targetProperty = this.__isModelSelectable(item)\n          ? \"modelSelection[0]\"\n          : \"value\";\n        var options = this.__bindingOptions[name];\n\n        // try to bind all given items in the form\n        try {\n          if (options == null) {\n            this.__objectController.addTarget(\n              item,\n              targetProperty,\n              name,\n              !this._selfUpdate\n            );\n          } else {\n            this.__objectController.addTarget(\n              item,\n              targetProperty,\n              name,\n              !this._selfUpdate,\n              options[0],\n              options[1]\n            );\n          }\n          // ignore not working items\n        } catch (ex) {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            this.warn(\n              \"Could not bind property \" +\n                name +\n                \" of \" +\n                this.getModel() +\n                \":\\n\" +\n                ex.stack\n            );\n          }\n        }\n      }\n      // make sure the initial values of the model are taken for resetting [BUG #5874]\n      this.getTarget().redefineResetter();\n    },\n\n    /**\n     * Internal helper for removing all set up bindings using\n     * {@link qx.data.controller.Object#removeTarget}.\n     *\n     * @param oldTarget {qx.ui.form.Form} The form which has been removed.\n     */\n    __tearDownBinding(oldTarget) {\n      // do nothing if the object controller has not been created\n      if (this.__objectController == null) {\n        return;\n      }\n\n      // get the items\n      var items = oldTarget.getItems();\n\n      // disconnect all items\n      for (var name in items) {\n        var item = items[name];\n        var targetProperty = this.__isModelSelectable(item)\n          ? \"modelSelection[0]\"\n          : \"value\";\n        this.__objectController.removeTarget(item, targetProperty, name);\n      }\n    },\n\n    /**\n     * Returns whether the given item implements\n     * {@link qx.ui.core.ISingleSelection} and\n     * {@link qx.ui.form.IModelSelection}.\n     *\n     * @param item {qx.ui.form.IForm} The form item to check.\n     *\n     * @return {Boolean} true, if given item fits.\n     */\n    __isModelSelectable(item) {\n      return (\n        qx.Class.hasInterface(item.constructor, qx.ui.core.ISingleSelection) &&\n        qx.Class.hasInterface(item.constructor, qx.ui.form.IModelSelection)\n      );\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct() {\n    // dispose the object controller because the bindings need to be removed\n    if (this.__objectController) {\n      this.__objectController.dispose();\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}