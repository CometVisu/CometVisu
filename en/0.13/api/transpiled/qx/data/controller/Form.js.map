{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "model",
    "target",
    "selfUpdate",
    "_selfUpdate",
    "__bindingOptions",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "members",
    "__objectController",
    "addBindingOptions",
    "name",
    "model2target",
    "target2model",
    "getModel",
    "getTarget",
    "item",
    "getItems",
    "targetProperty",
    "__isModelSelectable",
    "removeTarget",
    "addTarget",
    "createModel",
    "includeBubbleEvents",
    "Error",
    "items",
    "data",
    "names",
    "split",
    "currentData",
    "i",
    "length",
    "clazz",
    "constructor",
    "itemValue",
    "hasInterface",
    "ui",
    "ISingleSelection",
    "getModelSelection",
    "getItem",
    "getValue",
    "converter",
    "marshal",
    "Json",
    "updateModel",
    "sourceProperty",
    "options",
    "SingleValueBinding",
    "updateTarget",
    "_applyTarget",
    "value",
    "old",
    "__tearDownBinding",
    "__setUpBinding",
    "_applyModel",
    "getValidationManager",
    "reset",
    "controller",
    "ex",
    "redefineResetter",
    "oldTarget",
    "form",
    "IModelSelection",
    "destruct",
    "dispose",
    "Form"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Form.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * <h2>Form Controller</h2>\n *\n * *General idea*\n *\n * The form controller is responsible for connecting a form with a model. If no\n * model is given, a model can be created. This created model will fit exactly\n * to the given form and can be used for serialization. All the connections\n * between the form items and the model are handled by an internal\n * {@link qx.data.controller.Object}.\n *\n * *Features*\n *\n * * Connect a form to a model (bidirectional)\n * * Create a model for a given form\n *\n * *Usage*\n *\n * The controller only works if both a controller and a model are set.\n * Creating a model will automatically set the created model.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n */\nqx.Class.define(\"qx.data.controller.Form\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param model {qx.core.Object | null} The model to bind the target to. The\n   *   given object will be set as {@link #model} property.\n   * @param target {qx.ui.form.Form | null} The form which contains the form\n   *   items. The given form will be set as {@link #target} property.\n   * @param selfUpdate {Boolean?false} If set to true, you need to call the\n   *   {@link #updateModel} method to get the data in the form to the model.\n   *   Otherwise, the data will be synced automatically on every change of\n   *   the form.\n   */\n  construct(model, target, selfUpdate) {\n    super();\n\n    this._selfUpdate = !!selfUpdate;\n    this.__bindingOptions = {};\n\n    if (model != null) {\n      this.setModel(model);\n    }\n\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n  properties: {\n    /** Data object containing the data which should be shown in the target. */\n    model: {\n      check: \"qx.core.Object\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n    /** The target widget which should show the data. */\n    target: {\n      check: \"qx.ui.form.Form\",\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      nullable: true,\n      init: null,\n      dereference: true\n    }\n  },\n\n  members: {\n    __objectController: null,\n    __bindingOptions: null,\n\n    /**\n     * The form controller uses for setting up the bindings the fundamental\n     * binding layer, the {@link qx.data.SingleValueBinding}. To achieve a\n     * binding in both directions, two bindings are needed. With this method,\n     * you have the opportunity to set the options used for the bindings.\n     *\n     * @param name {String} The name of the form item for which the options\n     *   should be used.\n     * @param model2target {Map} Options map used for the binding from model\n     *   to target. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     * @param target2model {Map} Options map used for the binding from target\n     *   to model. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     */\n    addBindingOptions(name, model2target, target2model) {\n      this.__bindingOptions[name] = [model2target, target2model];\n\n      // return if not both, model and target are given\n      if (this.getModel() == null || this.getTarget() == null) {\n        return;\n      }\n\n      // renew the affected binding\n      var item = this.getTarget().getItems()[name];\n      var targetProperty = this.__isModelSelectable(item)\n        ? \"modelSelection[0]\"\n        : \"value\";\n\n      // remove the binding\n      this.__objectController.removeTarget(item, targetProperty, name);\n      // set up the new binding with the options\n      this.__objectController.addTarget(\n        item,\n        targetProperty,\n        name,\n        !this._selfUpdate,\n        model2target,\n        target2model\n      );\n    },\n\n    /**\n     * Creates and sets a model using the {@link qx.data.marshal.Json} object.\n     * Remember that this method can only work if the form is set. The created\n     * model will fit exactly that form. Changing the form or adding an item to\n     * the form will need a new model creation.\n     *\n     * @param includeBubbleEvents {Boolean} Whether the model should support\n     *   the bubbling of change events or not.\n     * @return {qx.core.Object} The created model.\n     */\n    createModel(includeBubbleEvents) {\n      var target = this.getTarget();\n\n      // throw an error if no target is set\n      if (target == null) {\n        throw new Error(\"No target is set.\");\n      }\n\n      var items = target.getItems();\n      var data = {};\n      for (var name in items) {\n        var names = name.split(\".\");\n        var currentData = data;\n        for (var i = 0; i < names.length; i++) {\n          // if its the last item\n          if (i + 1 == names.length) {\n            // check if the target is a selection\n            var clazz = items[name].constructor;\n            var itemValue = null;\n            if (qx.Class.hasInterface(clazz, qx.ui.core.ISingleSelection)) {\n              // use the first element of the selection because passed to the\n              // marshaler (and its single selection anyway) [BUG #3541]\n              itemValue = items[name].getModelSelection().getItem(0) || null;\n            } else {\n              itemValue = items[name].getValue();\n            }\n            // call the converter if available [BUG #4382]\n            if (this.__bindingOptions[name] && this.__bindingOptions[name][1]) {\n              itemValue = this.__bindingOptions[name][1].converter(itemValue);\n            }\n            currentData[names[i]] = itemValue;\n          } else {\n            // if its not the last element, check if the object exists\n            if (!currentData[names[i]]) {\n              currentData[names[i]] = {};\n            }\n            currentData = currentData[names[i]];\n          }\n        }\n      }\n\n      var model = qx.data.marshal.Json.createModel(data, includeBubbleEvents);\n      this.setModel(model);\n\n      return model;\n    },\n\n    /**\n     * Responsible for syncing the data from entered in the form to the model.\n     * Please keep in mind that this method only works if you create the form\n     * controller with <code>selfUpdate</code> parameter set to true. Otherwise,\n     * this method will do nothing because updates will be synced automatically\n     * on every change.\n     */\n    updateModel() {\n      // only do stuff if self update is enabled and a model or target is set\n      if (!this._selfUpdate || !this.getModel() || !this.getTarget()) {\n        return;\n      }\n\n      var items = this.getTarget().getItems();\n      for (var name in items) {\n        var item = items[name];\n        var sourceProperty = this.__isModelSelectable(item)\n          ? \"modelSelection[0]\"\n          : \"value\";\n\n        var options = this.__bindingOptions[name];\n        options = options && this.__bindingOptions[name][1];\n\n        qx.data.SingleValueBinding.updateTarget(\n          item,\n          sourceProperty,\n          this.getModel(),\n          name,\n          options\n        );\n      }\n    },\n\n    // apply method\n    _applyTarget(value, old) {\n      // if an old target is given, remove the binding\n      if (old != null) {\n        this.__tearDownBinding(old);\n      }\n\n      // do nothing if no target is set\n      if (this.getModel() == null) {\n        return;\n      }\n\n      // target and model are available\n      if (value != null) {\n        this.__setUpBinding();\n      }\n    },\n\n    // apply method\n    _applyModel(value, old) {\n      // set the model to null to reset all items before removing them\n      if (this.__objectController != null && value == null) {\n        this.__objectController.setModel(null);\n      }\n\n      // first, get rid off all bindings (avoids wrong data population)\n      if (this.__objectController != null && this.getTarget() != null) {\n        var items = this.getTarget().getItems();\n        for (var name in items) {\n          var item = items[name];\n          var targetProperty = this.__isModelSelectable(item)\n            ? \"modelSelection[0]\"\n            : \"value\";\n          this.__objectController.removeTarget(item, targetProperty, name);\n        }\n      }\n\n      // set the model of the object controller if available\n      if (this.__objectController != null) {\n        this.__objectController.setModel(value);\n      }\n\n      // do nothing is no target is set\n      if (this.getTarget() == null) {\n        return;\n      } else {\n        // if form was validated with errors and model changes\n        // the errors should be cleared see #8977\n        this.getTarget().getValidationManager().reset();\n      }\n\n      // model and target are available\n      if (value != null) {\n        this.__setUpBinding();\n      }\n    },\n\n    /**\n     * Internal helper for setting up the bindings using\n     * {@link qx.data.controller.Object#addTarget}. All bindings are set\n     * up bidirectional.\n     */\n    __setUpBinding() {\n      // create the object controller\n      if (this.__objectController == null) {\n        this.__objectController = new qx.data.controller.Object(\n          this.getModel()\n        );\n      }\n\n      // get the form items\n      var items = this.getTarget().getItems();\n\n      // connect all items\n      for (var name in items) {\n        var item = items[name];\n        var targetProperty = this.__isModelSelectable(item)\n          ? \"modelSelection[0]\"\n          : \"value\";\n        var options = this.__bindingOptions[name];\n\n        // try to bind all given items in the form\n        try {\n          if (options == null) {\n            this.__objectController.addTarget(\n              item,\n              targetProperty,\n              name,\n              !this._selfUpdate\n            );\n          } else {\n            this.__objectController.addTarget(\n              item,\n              targetProperty,\n              name,\n              !this._selfUpdate,\n              options[0],\n              options[1]\n            );\n          }\n          // ignore not working items\n        } catch (ex) {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            this.warn(\n              \"Could not bind property \" +\n                name +\n                \" of \" +\n                this.getModel() +\n                \":\\n\" +\n                ex.stack\n            );\n          }\n        }\n      }\n      // make sure the initial values of the model are taken for resetting [BUG #5874]\n      this.getTarget().redefineResetter();\n    },\n\n    /**\n     * Internal helper for removing all set up bindings using\n     * {@link qx.data.controller.Object#removeTarget}.\n     *\n     * @param oldTarget {qx.ui.form.Form} The form which has been removed.\n     */\n    __tearDownBinding(oldTarget) {\n      // do nothing if the object controller has not been created\n      if (this.__objectController == null) {\n        return;\n      }\n\n      // get the items\n      var items = oldTarget.getItems();\n\n      // disconnect all items\n      for (var name in items) {\n        var item = items[name];\n        var targetProperty = this.__isModelSelectable(item)\n          ? \"modelSelection[0]\"\n          : \"value\";\n        this.__objectController.removeTarget(item, targetProperty, name);\n      }\n    },\n\n    /**\n     * Returns whether the given item implements\n     * {@link qx.ui.core.ISingleSelection} and\n     * {@link qx.ui.form.IModelSelection}.\n     *\n     * @param item {qx.ui.form.IForm} The form item to check.\n     *\n     * @return {Boolean} true, if given item fits.\n     */\n    __isModelSelectable(item) {\n      return (\n        qx.Class.hasInterface(item.constructor, qx.ui.core.ISingleSelection) &&\n        qx.Class.hasInterface(item.constructor, qx.ui.form.IModelSelection)\n      );\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct() {\n    // dispose the object controller because the bindings need to be removed\n    if (this.__objectController) {\n      this.__objectController.dispose();\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}