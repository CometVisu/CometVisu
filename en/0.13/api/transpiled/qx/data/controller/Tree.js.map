{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "controller",
    "MSelection",
    "implement",
    "ISelection",
    "construct",
    "model",
    "target",
    "childPath",
    "labelPath",
    "constructor",
    "call",
    "__bindings",
    "__boundProperties",
    "__childrenRef",
    "a",
    "setChildPath",
    "setLabelPath",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "delegate",
    "members",
    "__oldChildrenPath",
    "_applyDelegate",
    "value",
    "old",
    "_setConfigureItem",
    "_setCreateItem",
    "_setBindItem",
    "_applyIconOptions",
    "__renewBindings",
    "_applyLabelOptions",
    "_applyTarget",
    "undefined",
    "__emptyTarget",
    "getModel",
    "__buildTree",
    "_addChangeTargetListener",
    "_applyModel",
    "_applyChildPath",
    "_applyIconPath",
    "_applyLabelPath",
    "__changeModelChildren",
    "__P_177_7",
    "ev",
    "children",
    "getTarget",
    "ObjectRegistry",
    "register",
    "treeNode",
    "toHashCode",
    "modelNode",
    "__updateTreeChildren",
    "_updateSelection",
    "__changeChildrenArray",
    "__P_177_9",
    "e",
    "getData",
    "oldChildren",
    "getOldData",
    "oldRef",
    "removeListenerById",
    "changeListenerId",
    "debug",
    "changeChildernListenerId",
    "property",
    "getPropertyDefinition",
    "getChildPath",
    "eventName",
    "addListener",
    "_createItem",
    "getDelegate",
    "createItem",
    "item",
    "ui",
    "tree",
    "TreeFolder",
    "configureItem",
    "__P_177_6",
    "getLabelPath",
    "bindItem",
    "rootNode",
    "__addBinding",
    "setRoot",
    "__P_177_8",
    "lang",
    "String",
    "firstUp",
    "i",
    "length",
    "getChildren",
    "getItem",
    "j",
    "oldIndex",
    "currentNode",
    "isSelected",
    "wasSelected",
    "removeAt",
    "addAt",
    "addToSelection",
    "treeFolder",
    "__removeFolder",
    "__P_177_5",
    "root",
    "getRoot",
    "__removeAllFolders",
    "__removeBinding",
    "destroy",
    "b",
    "__P_177_12",
    "node",
    "__P_177_11",
    "childrenGetterName",
    "remove",
    "bindProperty",
    "sourcePath",
    "targetPath",
    "options",
    "targetWidget",
    "id",
    "bind",
    "storage",
    "Error",
    "reverseId",
    "includes",
    "push",
    "bindPropertyReverse",
    "sourceWidget",
    "bindDefaultProperties",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "__P_177_4",
    "firstProp",
    "key",
    "hash",
    "fromHashCode",
    "__P_177_10",
    "__P_177_13",
    "bindingsMap",
    "removeBinding",
    "getItems",
    "_startSelectionModification",
    "_endSelectionModification",
    "destruct",
    "isDisposed",
    "Tree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Tree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * <h2>Tree Controller</h2>\r\n *\r\n * *General idea*\r\n *\r\n * The tree controller is the controller made for the {@link qx.ui.tree.Tree}\r\n * widget in qooxdoo. Therefore, it is responsible for creating and adding the\r\n * tree folders to the tree given as target.\r\n *\r\n * *Features*\r\n *\r\n * * Synchronize the model and the target\r\n * * Label and icon are bindable\r\n * * Takes care of the selection\r\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\r\n *\r\n * *Usage*\r\n *\r\n * As model, you can use every qooxdoo widget structure having one property,\r\n * which is a data array holding the children of the current node. There can\r\n * be as many additional as you like.\r\n * You need to specify a model, a target, a child path and a label path to\r\n * make the controller work.\r\n *\r\n * *Cross reference*\r\n *\r\n * * If you want to bind single values, use {@link qx.data.controller.Object}\r\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\r\n * * If you want to bin a form widget, use {@link qx.data.controller.Form}\r\n */\r\nqx.Class.define(\"qx.data.controller.Tree\", {\r\n  extend: qx.core.Object,\r\n  include: qx.data.controller.MSelection,\r\n  implement: [qx.data.controller.ISelection],\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param model {qx.core.Object?null} The root element of the model, which holds\r\n   *   the data.\r\n   *\r\n   * @param target {qx.ui.tree.Tree?null} The target widgets which should be a tree.\r\n   *\r\n   * @param childPath {String?null} The name of the property in the model, which\r\n   *   holds the data array containing the children.\r\n   *\r\n   * @param labelPath {String?null} The name of the property in the model,\r\n   *   which holds the value to be displayed as the label of the tree items.\r\n   */\r\n  construct(model, target, childPath, labelPath) {\r\n    super();\r\n\r\n    // internal bindings reference\r\n    this.__bindings = {};\r\n    this.__boundProperties = [];\r\n\r\n    // reference to the child\r\n    this.__childrenRef = { a: 1 };\r\n\r\n    if (childPath != null) {\r\n      this.setChildPath(childPath);\r\n    }\r\n    if (labelPath != null) {\r\n      this.setLabelPath(labelPath);\r\n    }\r\n    if (model != null) {\r\n      this.setModel(model);\r\n    }\r\n    if (target != null) {\r\n      this.setTarget(target);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /** The root element of the data. */\r\n    model: {\r\n      check: \"qx.core.Object\",\r\n      apply: \"_applyModel\",\r\n      event: \"changeModel\",\r\n      nullable: true,\r\n      dereference: true\r\n    },\r\n\r\n    /** The tree to bind the data to. */\r\n    target: {\r\n      apply: \"_applyTarget\",\r\n      event: \"changeTarget\",\r\n      init: null,\r\n      nullable: true,\r\n      dereference: true\r\n    },\r\n\r\n    /** The name of the property, where the children are stored in the model. */\r\n    childPath: {\r\n      check: \"String\",\r\n      apply: \"_applyChildPath\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The name of the property, where the value for the tree folders label\r\n     * is stored in the model classes.\r\n     */\r\n    labelPath: {\r\n      check: \"String\",\r\n      apply: \"_applyLabelPath\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The name of the property, where the source for the tree folders icon\r\n     * is stored in the model classes.\r\n     */\r\n    iconPath: {\r\n      check: \"String\",\r\n      apply: \"_applyIconPath\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * A map containing the options for the label binding. The possible keys\r\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\r\n     */\r\n    labelOptions: {\r\n      apply: \"_applyLabelOptions\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * A map containing the options for the icon binding. The possible keys\r\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\r\n     */\r\n    iconOptions: {\r\n      apply: \"_applyIconOptions\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * Delegation object, which can have one ore more function defined by the\r\n     * {@link IControllerDelegate} interface.\r\n     */\r\n    delegate: {\r\n      apply: \"_applyDelegate\",\r\n      init: null,\r\n      nullable: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    // private members\r\n    __childrenRef: null,\r\n    __bindings: null,\r\n    __boundProperties: null,\r\n    __oldChildrenPath: null,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       APPLY METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * If a new delegate is set, it applies the stored configuration for the\r\n     * tree folder to the already created folders once.\r\n     *\r\n     * @param value {qx.core.Object|null} The new delegate.\r\n     * @param old {qx.core.Object|null} The old delegate.\r\n     */\r\n    _applyDelegate(value, old) {\r\n      this._setConfigureItem(value, old);\r\n      this._setCreateItem(value, old);\r\n      this._setBindItem(value, old);\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called after the icon options had been\r\n     * changed. This method will invoke a renewing of all bindings.\r\n     *\r\n     * @param value {Map|null} The new options map.\r\n     * @param old {Map|null} The old options map.\r\n     */\r\n    _applyIconOptions(value, old) {\r\n      this.__renewBindings();\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called after the label options had been\r\n     * changed. This method will invoke a renewing of all bindings.\r\n     *\r\n     * @param value {Map|null} The new options map.\r\n     * @param old {Map|null} The old options map.\r\n     */\r\n    _applyLabelOptions(value, old) {\r\n      this.__renewBindings();\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called after the target had been\r\n     * changed. This method will clean up the old tree and will initially\r\n     * build up the new tree containing the data from the model.\r\n     *\r\n     * @param value {qx.ui.tree.Tree|null} The new tree.\r\n     * @param old {qx.ui.tree.Tree|null} The old tree.\r\n     */\r\n    _applyTarget(value, old) {\r\n      // if there was an old target\r\n      if (old != undefined) {\r\n        this.__emptyTarget(old);\r\n      }\r\n\r\n      // if a model is set\r\n      if (this.getModel() != null) {\r\n        // build up the tree\r\n        this.__buildTree();\r\n      }\r\n\r\n      // add a listener for the target change\r\n      this._addChangeTargetListener(value, old);\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called after the model had been\r\n     * changed. This method invoke a new building of the tree.\r\n     *\r\n     * @param value {qx.core.Object|null} The new tree.\r\n     * @param old {qx.core.Object|null} The old tree.\r\n     */\r\n    _applyModel(value, old) {\r\n      this.__buildTree();\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called after the child path had been\r\n     * changed. This method invoke a new building of the tree.\r\n     *\r\n     * @param value {String|null} The new path to the children property.\r\n     * @param old {String|null} The old path to the children property.\r\n     */\r\n    _applyChildPath(value, old) {\r\n      // save the old name because it is needed to remove the old bindings\r\n      this.__oldChildrenPath = old;\r\n      this.__buildTree();\r\n      // reset the old name\r\n      this.__oldChildrenPath = null;\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called after the icon path had been\r\n     * changed. This method invoke a new building of the tree.\r\n     *\r\n     * @param value {String|null} The new path to the icon property.\r\n     * @param old {String|null} The old path or the icon property.\r\n     */\r\n    _applyIconPath(value, old) {\r\n      this.__renewBindings();\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called after the label path had been\r\n     * changed. This method invoke a new building of the tree.\r\n     *\r\n     * @param value {String|null} The new path to the label property.\r\n     * @param old {String|null} The old path of the label property.\r\n     */\r\n    _applyLabelPath(value, old) {\r\n      this.__buildTree();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Handler function handling the change of a length of a children array.\r\n     * This method invokes a rebuild of the corresponding subtree.\r\n     *\r\n     * @param ev {qx.event.type.Event} The changeLength event of a data array.\r\n     */\r\n    __changeModelChildren(ev) {\r\n      // get the stored data\r\n      var children = ev.getTarget();\r\n      qx.core.ObjectRegistry.register(children);\r\n      var treeNode = this.__childrenRef[children.toHashCode()].treeNode;\r\n      var modelNode = this.__childrenRef[children.toHashCode()].modelNode;\r\n      // update the subtree\r\n      this.__updateTreeChildren(treeNode, modelNode);\r\n\r\n      // update the selection in case a selected element has been removed\r\n      this._updateSelection();\r\n    },\r\n\r\n    /**\r\n     * Handler function taking care of the changes of the children array itself.\r\n     *\r\n     * @param e {qx.event.type.Data} Change event for the children property.\r\n     */\r\n    __changeChildrenArray(e) {\r\n      var children = e.getData();\r\n      var oldChildren = e.getOldData();\r\n\r\n      // get the old ref and delete it\r\n      var oldRef = this.__childrenRef[oldChildren.toHashCode()];\r\n      oldChildren.removeListenerById(oldRef.changeListenerId);\r\n      this.debug(\r\n        \"1: removing children=\" +\r\n          oldChildren.toHashCode() +\r\n          \" from this=\" +\r\n          this.toHashCode()\r\n      );\r\n\r\n      delete this.__childrenRef[oldChildren.toHashCode()];\r\n      // remove the old change listener for the children\r\n      oldRef.modelNode.removeListenerById(oldRef.changeChildernListenerId);\r\n\r\n      // add a new change listener\r\n      var modelNode = oldRef.modelNode;\r\n      var property = qx.Class.getPropertyDefinition(\r\n        oldRef.modelNode.constructor,\r\n        this.getChildPath()\r\n      );\r\n\r\n      var eventName = property.event;\r\n      var changeChildernListenerId = modelNode.addListener(\r\n        eventName,\r\n        this.__changeChildrenArray,\r\n        this\r\n      );\r\n\r\n      // add the new ref\r\n      var treeNode = oldRef.treeNode;\r\n      this.debug(\r\n        \"1: adding children=\" +\r\n          children.toHashCode() +\r\n          \" to this=\" +\r\n          this.toHashCode()\r\n      );\r\n\r\n      this.__childrenRef[children.toHashCode()] = {\r\n        modelNode: modelNode,\r\n        treeNode: treeNode,\r\n        changeListenerId: oldRef.changeListenerId,\r\n        changeChildernListenerId: changeChildernListenerId\r\n      };\r\n\r\n      // update the subtree\r\n      this.__updateTreeChildren(treeNode, modelNode);\r\n\r\n      // update the selection in case a selected element has been removed\r\n      this._updateSelection();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       ITEM HANDLING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Creates a TreeFolder and delegates the configure method if a delegate is\r\n     * set and the needed function (configureItem) is available.\r\n     *\r\n     * @return {qx.ui.tree.core.AbstractTreeItem} The created and configured TreeFolder.\r\n     */\r\n    _createItem() {\r\n      var delegate = this.getDelegate();\r\n      // check if a delegate and a create method is set\r\n      if (delegate != null && delegate.createItem != null) {\r\n        var item = delegate.createItem();\r\n      } else {\r\n        var item = new qx.ui.tree.TreeFolder();\r\n      }\r\n\r\n      // check if a delegate is set and if the configure function is available\r\n      if (delegate != null && delegate.configureItem != null) {\r\n        delegate.configureItem(item);\r\n      }\r\n      return item;\r\n    },\r\n\r\n    /**\r\n     * Internal helper function to build up the tree corresponding to the data\r\n     * stored in the model. This function creates the root node and hands the\r\n     * recursive creation of all subtrees to the {#__updateTreeChildren}\r\n     * function.\r\n     */\r\n    __buildTree() {\r\n      // only fill the target if there is a target, its known how to\r\n      // access the children and what needs to be displayed as label\r\n      if (this.getTarget() == null || this.getChildPath() == null) {\r\n        return;\r\n      }\r\n\r\n      // check for the binding knowledge\r\n      if (\r\n        (this.getLabelPath() == null && this.getDelegate() == null) ||\r\n        (this.getLabelPath() == null &&\r\n          this.getDelegate() != null &&\r\n          this.getDelegate().bindItem == null)\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      // Clean the target completely\r\n      this.__emptyTarget();\r\n\r\n      // only build up a new tree if a model is given\r\n      if (this.getModel() != null) {\r\n        // create a new root node\r\n        var rootNode = this._createItem();\r\n        rootNode.setModel(this.getModel());\r\n        // bind the root node\r\n        this.__addBinding(this.getModel(), rootNode);\r\n        this.__updateTreeChildren(rootNode, this.getModel());\r\n        // assign the new root once the tree has been built\r\n        this.getTarget().setRoot(rootNode);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Main method building up the tree folders corresponding to the given\r\n     * model node. The new created subtree will be added to the given tree node.\r\n     *\r\n     * @param rootNode {qx.ui.tree.TreeFolder} The tree folder to add the new\r\n     *   created subtree.\r\n     *\r\n     * @param modelNode {qx.core.Object} The model nodes which represent the\r\n     *   data in the current subtree.\r\n     */\r\n    __updateTreeChildren(rootNode, modelNode) {\r\n      // ignore items which don't have children\r\n      if (\r\n        modelNode[\"get\" + qx.lang.String.firstUp(this.getChildPath())] ==\r\n        undefined\r\n      ) {\r\n        return;\r\n      }\r\n      // get all children of the current model node\r\n      var children =\r\n        modelNode[\"get\" + qx.lang.String.firstUp(this.getChildPath())]();\r\n\r\n      // store the children reference\r\n      if (this.__childrenRef[children.toHashCode()] == undefined) {\r\n        // add the listener for the change\r\n        var changeListenerId = children.addListener(\r\n          \"change\",\r\n          this.__changeModelChildren,\r\n          this\r\n        );\r\n\r\n        // add a listener for the change of the children array itself\r\n        var property = qx.Class.getPropertyDefinition(\r\n          modelNode.constructor,\r\n          this.getChildPath()\r\n        );\r\n\r\n        var eventName = property.event;\r\n        var changeChildernListenerId = modelNode.addListener(\r\n          eventName,\r\n          this.__changeChildrenArray,\r\n          this\r\n        );\r\n\r\n        this.debug(\r\n          \"2: adding children=\" +\r\n            children.toHashCode() +\r\n            \" to this=\" +\r\n            this.toHashCode()\r\n        );\r\n\r\n        this.__childrenRef[children.toHashCode()] = {\r\n          modelNode: modelNode,\r\n          treeNode: rootNode,\r\n          changeListenerId: changeListenerId,\r\n          changeChildernListenerId: changeChildernListenerId\r\n        };\r\n      }\r\n\r\n      // go threw all children in the model\r\n      for (var i = 0; i < children.length; i++) {\r\n        // if there is no node in the tree or the current node does not fit\r\n        if (\r\n          rootNode.getChildren()[i] == null ||\r\n          children.getItem(i) != rootNode.getChildren()[i].getModel()\r\n        ) {\r\n          //check if the node was just moved\r\n          for (var j = i; j < rootNode.getChildren().length; j++) {\r\n            if (rootNode.getChildren()[j].getModel() === children.getItem(i)) {\r\n              var oldIndex = j;\r\n              break;\r\n            }\r\n          }\r\n          // if it is in the tree\r\n          if (oldIndex != undefined) {\r\n            // get the corresponding node\r\n            var currentNode = rootNode.getChildren()[oldIndex];\r\n            // check if it is selected\r\n            if (this.getTarget().isSelected(currentNode)) {\r\n              var wasSelected = true;\r\n            }\r\n            // remove the item at its old place (will remove the selection)\r\n            rootNode.removeAt(oldIndex);\r\n            // add the node at the current position\r\n            rootNode.addAt(currentNode, i);\r\n            // select it again if it was selected\r\n            if (wasSelected) {\r\n              this.getTarget().addToSelection(currentNode);\r\n            }\r\n\r\n            // if the node is new\r\n          } else {\r\n            // add the child node\r\n            var treeNode = this._createItem();\r\n            treeNode.setModel(children.getItem(i));\r\n            rootNode.addAt(treeNode, i);\r\n            this.__addBinding(children.getItem(i), treeNode);\r\n\r\n            // add all children recursive\r\n            this.__updateTreeChildren(treeNode, children.getItem(i));\r\n          }\r\n        }\r\n      }\r\n      // remove the rest of the tree items if they exist\r\n      for (\r\n        var i = rootNode.getChildren().length - 1;\r\n        i >= children.length;\r\n        i--\r\n      ) {\r\n        var treeFolder = rootNode.getChildren()[i];\r\n        this.__removeFolder(treeFolder, rootNode);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Removes all folders and bindings for the current set target.\r\n     * @param tree {qx.ui.tree.Tree} The tree to empty.\r\n     */\r\n    __emptyTarget(tree) {\r\n      if (tree == null) {\r\n        tree = this.getTarget();\r\n      }\r\n      // only do something if a tree is set\r\n      if (tree == null) {\r\n        return;\r\n      }\r\n      // remove the root node\r\n      var root = tree.getRoot();\r\n      if (root != null) {\r\n        tree.setRoot(null);\r\n        this.__removeAllFolders(root);\r\n        var model = root.getModel();\r\n        if (model) {\r\n          this.__removeBinding(model);\r\n        }\r\n        root.destroy();\r\n        this.debug(\"erasing all children from this=\" + this.toHashCode());\r\n        this.__childrenRef = { b: 2 };\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Removes all child folders of the given tree node. Also removes all\r\n     * bindings for the removed folders.\r\n     *\r\n     * @param node {qx.ui.tree.core.AbstractTreeItem} The used tree folder.\r\n     */\r\n    __removeAllFolders(node) {\r\n      var children = node.getChildren() || [];\r\n      // remove all subchildren\r\n      for (var i = children.length - 1; i >= 0; i--) {\r\n        if (children[i].getChildren().length > 0) {\r\n          this.__removeAllFolders(children[i]);\r\n        }\r\n        this.__removeFolder(children[i], node);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Internal helper method removing the given folder form the given root\r\n     * node. All set bindings will be removed and the old tree folder will be\r\n     * destroyed.\r\n     *\r\n     * @param treeFolder {qx.ui.tree.core.AbstractTreeItem} The folder to remove.\r\n     * @param rootNode {qx.ui.tree.core.AbstractTreeItem} The folder holding the\r\n     *   treeFolder.\r\n     */\r\n    __removeFolder(treeFolder, rootNode) {\r\n      // get the model\r\n      var model = treeFolder.getModel();\r\n      var childPath = this.__oldChildrenPath || this.getChildPath();\r\n      var childrenGetterName = \"get\" + qx.lang.String.firstUp(childPath);\r\n\r\n      // if the model does have a child path\r\n      if (model[childrenGetterName] != undefined) {\r\n        // remove the old children listener\r\n        var children = model[childrenGetterName]();\r\n        this.debug(\r\n          \"2: removing children=\" +\r\n            children.toHashCode() +\r\n            \" from this=\" +\r\n            this.toHashCode()\r\n        );\r\n\r\n        var oldRef = this.__childrenRef[children.toHashCode()];\r\n        children.removeListenerById(oldRef.changeListenerId);\r\n        model.removeListenerById(oldRef.changeChildernListenerId);\r\n        // also remove all its children [BUG #4296]\r\n        this.__removeAllFolders(treeFolder);\r\n\r\n        // delete the model reference\r\n        delete this.__childrenRef[children.toHashCode()];\r\n      }\r\n      // get the binding and remove it\r\n      this.__removeBinding(model);\r\n      // remove the folder from the tree\r\n      rootNode.remove(treeFolder);\r\n      // get rid of the old tree folder\r\n      treeFolder.destroy();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       BINDING STUFF\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Helper method for binding a given property from the model to the target\r\n     * widget.\r\n     * This method should only be called in the\r\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\r\n     * implemented by the {@link #delegate} property.\r\n     *\r\n     * @param sourcePath {String | null} The path to the property in the model.\r\n     *   If you use an empty string, the whole model item will be bound.\r\n     * @param targetPath {String} The name of the property in the target\r\n     *   widget.\r\n     * @param options {Map | null} The options to use by\r\n     *  {@link qx.data.SingleValueBinding#bind} for the binding.\r\n     * @param targetWidget {qx.ui.tree.core.AbstractTreeItem} The target widget.\r\n     * @param modelNode {var} The model node which should be bound to the target.\r\n     */\r\n    bindProperty(sourcePath, targetPath, options, targetWidget, modelNode) {\r\n      // set up the binding\r\n      var id = modelNode.bind(sourcePath, targetWidget, targetPath, options);\r\n      // check for the storage for the references\r\n      if (this.__bindings[targetPath] == null) {\r\n        this.__bindings[targetPath] = {};\r\n      }\r\n      // store the binding reference\r\n      var storage = this.__bindings[targetPath];\r\n      qx.core.ObjectRegistry.register(modelNode);\r\n      if (storage[modelNode.toHashCode()]) {\r\n        if (storage[modelNode.toHashCode()].id) {\r\n          throw new Error(\r\n            \"Can not bind the same target property '\" + targetPath + \"' twice.\"\r\n          );\r\n        }\r\n        storage[modelNode.toHashCode()].id = id;\r\n      } else {\r\n        storage[modelNode.toHashCode()] = {\r\n          id: id,\r\n          reverseId: null,\r\n          treeNode: targetWidget\r\n        };\r\n      }\r\n\r\n      // save the bound property\r\n      if (!this.__boundProperties.includes(targetPath)) {\r\n        this.__boundProperties.push(targetPath);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper method for binding a given property from the target widget to\r\n     * the model.\r\n     * This method should only be called in the\r\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\r\n     * implemented by the {@link #delegate} property.\r\n     *\r\n     * @param targetPath {String | null} The path to the property in the model.\r\n     * @param sourcePath {String} The name of the property in the target\r\n     *   widget.\r\n     * @param options {Map | null} The options to use by\r\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\r\n     * @param sourceWidget {qx.ui.tree.core.AbstractTreeItem} The source widget.\r\n     * @param modelNode {var} The model node which should be bound to the target.\r\n     */\r\n    bindPropertyReverse(\r\n      targetPath,\r\n      sourcePath,\r\n      options,\r\n      sourceWidget,\r\n      modelNode\r\n    ) {\r\n      // set up the binding\r\n      var id = sourceWidget.bind(sourcePath, modelNode, targetPath, options);\r\n\r\n      // check for the storage for the references\r\n      if (this.__bindings[sourcePath] == null) {\r\n        this.__bindings[sourcePath] = {};\r\n      }\r\n      // check if there is already a stored item\r\n      var storage = this.__bindings[sourcePath];\r\n      qx.core.ObjectRegistry.register(modelNode);\r\n      if (storage[modelNode.toHashCode()]) {\r\n        if (storage[modelNode.toHashCode()].reverseId) {\r\n          throw new Error(\r\n            \"Can not reverse bind the same target property '\" +\r\n              targetPath +\r\n              \"' twice.\"\r\n          );\r\n        }\r\n        storage[modelNode.toHashCode()].reverseId = id;\r\n      } else {\r\n        storage[modelNode.toHashCode()] = {\r\n          id: null,\r\n          reverseId: id,\r\n          treeNode: sourceWidget\r\n        };\r\n      }\r\n\r\n      // save the bound property\r\n      if (!this.__boundProperties.includes(sourcePath)) {\r\n        this.__boundProperties.push(sourcePath);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper method for binding the default properties (label and icon) from\r\n     * the model to the target widget.\r\n     *\r\n     * This method should only be called in the\r\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\r\n     * implemented by the {@link #delegate} property.\r\n     *\r\n     * @param treeNode {qx.ui.tree.core.AbstractTreeItem} The tree node\r\n     *   corresponding to the model node.\r\n     * @param modelNode {qx.core.Object} The model node holding the data.\r\n     */\r\n    bindDefaultProperties(treeNode, modelNode) {\r\n      // label binding\r\n      this.bindProperty(\r\n        this.getLabelPath(),\r\n        \"label\",\r\n        this.getLabelOptions(),\r\n        treeNode,\r\n        modelNode\r\n      );\r\n\r\n      // icon binding\r\n      if (this.getIconPath() != null) {\r\n        this.bindProperty(\r\n          this.getIconPath(),\r\n          \"icon\",\r\n          this.getIconOptions(),\r\n          treeNode,\r\n          modelNode\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper method renewing all bindings with the currently saved options and\r\n     * paths.\r\n     */\r\n    __renewBindings() {\r\n      // get the first bound property\r\n      var firstProp;\r\n      for (var key in this.__bindings) {\r\n        firstProp = key;\r\n        break;\r\n      }\r\n      // go through all stored bindings for that property\r\n      // (should have all the same amount of entries and tree nodes)\r\n      for (var hash in this.__bindings[firstProp]) {\r\n        // get the data\r\n        var treeNode = this.__bindings[firstProp][hash].treeNode;\r\n        var modelNode = qx.core.ObjectRegistry.fromHashCode(hash);\r\n        // remove the old bindings\r\n        this.__removeBinding(modelNode);\r\n        // add the new bindings\r\n        this.__addBinding(modelNode, treeNode);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Internal helper method adding the right bindings from the given\r\n     * modelNode to the given treeNode.\r\n     *\r\n     * @param modelNode {qx.core.Object} The model node holding the data.\r\n     * @param treeNode {qx.ui.tree.TreeFolder} The corresponding tree folder\r\n     *   to the model node.\r\n     */\r\n    __addBinding(modelNode, treeNode) {\r\n      var delegate = this.getDelegate();\r\n      // if a delegate for creating the binding is given, use it\r\n      if (delegate != null && delegate.bindItem != null) {\r\n        delegate.bindItem(this, treeNode, modelNode);\r\n\r\n        // otherwise, try to bind the listItem by default\r\n      } else {\r\n        this.bindDefaultProperties(treeNode, modelNode);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Internal helper method for removing bindings for a given model node.\r\n     *\r\n     * @param modelNode {qx.core.Object} the model node for which the bindings\r\n     *   should be removed.\r\n     */\r\n    __removeBinding(modelNode) {\r\n      for (var i = 0; i < this.__boundProperties.length; i++) {\r\n        var property = this.__boundProperties[i];\r\n        var bindingsMap = this.__bindings[property][modelNode.toHashCode()];\r\n        if (bindingsMap != null) {\r\n          if (bindingsMap.id) {\r\n            modelNode.removeBinding(bindingsMap.id);\r\n            bindingsMap.id = null;\r\n          }\r\n          if (bindingsMap.reverseId) {\r\n            bindingsMap.treeNode.removeBinding(bindingsMap.reverseId);\r\n            bindingsMap.reverseId = null;\r\n          }\r\n          delete this.__bindings[property][modelNode.toHashCode()];\r\n        }\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       DELEGATE HELPER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Helper method for applying the delegate It checks if a configureItem\r\n     * is set end invokes the initial process to apply the given function.\r\n     *\r\n     * @param value {Object} The new delegate.\r\n     * @param old {Object} The old delegate.\r\n     */\r\n    _setConfigureItem(value, old) {\r\n      if (\r\n        value != null &&\r\n        value.configureItem != null &&\r\n        this.getTarget() != null &&\r\n        this.getModel() != null\r\n      ) {\r\n        var children = this.getTarget().getRoot().getItems(true, true, false);\r\n        for (var i = 0; i < children.length; i++) {\r\n          value.configureItem(children[i]);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper method for applying the delegate. It checks if a createItem\r\n     * is set and invokes the initial process to apply the given function.\r\n     *\r\n     * @param value {Object} The new delegate.\r\n     * @param old {Object} The old delegate.\r\n     */\r\n    _setCreateItem(value, old) {\r\n      // do nothing if no tree can be build\r\n      if (this.getTarget() == null || this.getModel() == null) {\r\n        return;\r\n      }\r\n      // do nothing if no delegate function is set\r\n      if (value == null || value.createItem == null) {\r\n        return;\r\n      }\r\n      // do nothing it the delegate function has not changed\r\n      if (\r\n        old &&\r\n        old.createItem &&\r\n        value &&\r\n        value.createItem &&\r\n        old.createItem == value.createItem\r\n      ) {\r\n        return;\r\n      }\r\n      this._startSelectionModification();\r\n\r\n      this.__emptyTarget();\r\n      this.__buildTree();\r\n\r\n      this._endSelectionModification();\r\n      this._updateSelection();\r\n    },\r\n\r\n    /**\r\n     * Helper method for applying the delegate It checks if a bindItem\r\n     * is set end invokes the initial process to apply the given function.\r\n     *\r\n     * @param value {Object} The new delegate.\r\n     * @param old {Object} The old delegate.\r\n     */\r\n    _setBindItem(value, old) {\r\n      // if a new bindItem function is set\r\n      if (value != null && value.bindItem != null) {\r\n        // do nothing if the bindItem function did not change\r\n        if (\r\n          old != null &&\r\n          old.bindItem != null &&\r\n          value.bindItem == old.bindItem\r\n        ) {\r\n          return;\r\n        }\r\n        this.__buildTree();\r\n      }\r\n    }\r\n  },\r\n\r\n  /*\r\n   *****************************************************************************\r\n      DESTRUCTOR\r\n   *****************************************************************************\r\n   */\r\n\r\n  destruct() {\r\n    if (this.getTarget() && !this.getTarget().isDisposed()) {\r\n      this.setTarget(null);\r\n    }\r\n    if (this.getModel() != null && !this.getModel().isDisposed()) {\r\n      this.setModel(null);\r\n    }\r\n    this.__bindings = this.__childrenRef = this.__boundProperties = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}