{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "controller",
    "MSelection",
    "implement",
    "ISelection",
    "construct",
    "model",
    "target",
    "childPath",
    "labelPath",
    "constructor",
    "call",
    "__bindings",
    "__boundProperties",
    "__childrenRef",
    "a",
    "setChildPath",
    "setLabelPath",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "delegate",
    "members",
    "__oldChildrenPath",
    "_applyDelegate",
    "value",
    "old",
    "_setConfigureItem",
    "_setCreateItem",
    "_setBindItem",
    "_applyIconOptions",
    "__renewBindings",
    "_applyLabelOptions",
    "_applyTarget",
    "undefined",
    "__emptyTarget",
    "getModel",
    "__buildTree",
    "_addChangeTargetListener",
    "_applyModel",
    "_applyChildPath",
    "_applyIconPath",
    "_applyLabelPath",
    "__changeModelChildren",
    "__P_177_7",
    "ev",
    "children",
    "getTarget",
    "ObjectRegistry",
    "register",
    "treeNode",
    "toHashCode",
    "modelNode",
    "__updateTreeChildren",
    "_updateSelection",
    "__changeChildrenArray",
    "__P_177_9",
    "e",
    "getData",
    "oldChildren",
    "getOldData",
    "oldRef",
    "removeListenerById",
    "changeListenerId",
    "debug",
    "changeChildernListenerId",
    "property",
    "getPropertyDefinition",
    "getChildPath",
    "eventName",
    "addListener",
    "_createItem",
    "getDelegate",
    "createItem",
    "item",
    "ui",
    "tree",
    "TreeFolder",
    "configureItem",
    "__P_177_6",
    "getLabelPath",
    "bindItem",
    "rootNode",
    "__addBinding",
    "setRoot",
    "__P_177_8",
    "lang",
    "String",
    "firstUp",
    "i",
    "length",
    "getChildren",
    "getItem",
    "j",
    "oldIndex",
    "currentNode",
    "isSelected",
    "wasSelected",
    "removeAt",
    "addAt",
    "addToSelection",
    "treeFolder",
    "__removeFolder",
    "__P_177_5",
    "root",
    "getRoot",
    "__removeAllFolders",
    "__removeBinding",
    "destroy",
    "b",
    "__P_177_12",
    "node",
    "__P_177_11",
    "childrenGetterName",
    "remove",
    "bindProperty",
    "sourcePath",
    "targetPath",
    "options",
    "targetWidget",
    "id",
    "bind",
    "storage",
    "Error",
    "reverseId",
    "includes",
    "push",
    "bindPropertyReverse",
    "sourceWidget",
    "bindDefaultProperties",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "__P_177_4",
    "firstProp",
    "key",
    "hash",
    "fromHashCode",
    "__P_177_10",
    "__P_177_13",
    "bindingsMap",
    "removeBinding",
    "getItems",
    "_startSelectionModification",
    "_endSelectionModification",
    "destruct",
    "isDisposed",
    "Tree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Tree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * <h2>Tree Controller</h2>\n *\n * *General idea*\n *\n * The tree controller is the controller made for the {@link qx.ui.tree.Tree}\n * widget in qooxdoo. Therefore, it is responsible for creating and adding the\n * tree folders to the tree given as target.\n *\n * *Features*\n *\n * * Synchronize the model and the target\n * * Label and icon are bindable\n * * Takes care of the selection\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n *\n * *Usage*\n *\n * As model, you can use every qooxdoo widget structure having one property,\n * which is a data array holding the children of the current node. There can\n * be as many additional as you like.\n * You need to specify a model, a target, a child path and a label path to\n * make the controller work.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bin a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.Tree\", {\n  extend: qx.core.Object,\n  include: qx.data.controller.MSelection,\n  implement: [qx.data.controller.ISelection],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.core.Object?null} The root element of the model, which holds\n   *   the data.\n   *\n   * @param target {qx.ui.tree.Tree?null} The target widgets which should be a tree.\n   *\n   * @param childPath {String?null} The name of the property in the model, which\n   *   holds the data array containing the children.\n   *\n   * @param labelPath {String?null} The name of the property in the model,\n   *   which holds the value to be displayed as the label of the tree items.\n   */\n  construct(model, target, childPath, labelPath) {\n    super();\n\n    // internal bindings reference\n    this.__bindings = {};\n    this.__boundProperties = [];\n\n    // reference to the child\n    this.__childrenRef = { a: 1 };\n\n    if (childPath != null) {\n      this.setChildPath(childPath);\n    }\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n    if (model != null) {\n      this.setModel(model);\n    }\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The root element of the data. */\n    model: {\n      check: \"qx.core.Object\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n    /** The tree to bind the data to. */\n    target: {\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      init: null,\n      nullable: true,\n      dereference: true\n    },\n\n    /** The name of the property, where the children are stored in the model. */\n    childPath: {\n      check: \"String\",\n      apply: \"_applyChildPath\",\n      nullable: true\n    },\n\n    /**\n     * The name of the property, where the value for the tree folders label\n     * is stored in the model classes.\n     */\n    labelPath: {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n    /**\n     * The name of the property, where the source for the tree folders icon\n     * is stored in the model classes.\n     */\n    iconPath: {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions: {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions: {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n    /**\n     * Delegation object, which can have one ore more function defined by the\n     * {@link IControllerDelegate} interface.\n     */\n    delegate: {\n      apply: \"_applyDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // private members\n    __childrenRef: null,\n    __bindings: null,\n    __boundProperties: null,\n    __oldChildrenPath: null,\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * If a new delegate is set, it applies the stored configuration for the\n     * tree folder to the already created folders once.\n     *\n     * @param value {qx.core.Object|null} The new delegate.\n     * @param old {qx.core.Object|null} The old delegate.\n     */\n    _applyDelegate(value, old) {\n      this._setConfigureItem(value, old);\n      this._setCreateItem(value, old);\n      this._setBindItem(value, old);\n    },\n\n    /**\n     * Apply-method which will be called after the icon options had been\n     * changed. This method will invoke a renewing of all bindings.\n     *\n     * @param value {Map|null} The new options map.\n     * @param old {Map|null} The old options map.\n     */\n    _applyIconOptions(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called after the label options had been\n     * changed. This method will invoke a renewing of all bindings.\n     *\n     * @param value {Map|null} The new options map.\n     * @param old {Map|null} The old options map.\n     */\n    _applyLabelOptions(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called after the target had been\n     * changed. This method will clean up the old tree and will initially\n     * build up the new tree containing the data from the model.\n     *\n     * @param value {qx.ui.tree.Tree|null} The new tree.\n     * @param old {qx.ui.tree.Tree|null} The old tree.\n     */\n    _applyTarget(value, old) {\n      // if there was an old target\n      if (old != undefined) {\n        this.__emptyTarget(old);\n      }\n\n      // if a model is set\n      if (this.getModel() != null) {\n        // build up the tree\n        this.__buildTree();\n      }\n\n      // add a listener for the target change\n      this._addChangeTargetListener(value, old);\n    },\n\n    /**\n     * Apply-method which will be called after the model had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {qx.core.Object|null} The new tree.\n     * @param old {qx.core.Object|null} The old tree.\n     */\n    _applyModel(value, old) {\n      this.__buildTree();\n    },\n\n    /**\n     * Apply-method which will be called after the child path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the children property.\n     * @param old {String|null} The old path to the children property.\n     */\n    _applyChildPath(value, old) {\n      // save the old name because it is needed to remove the old bindings\n      this.__oldChildrenPath = old;\n      this.__buildTree();\n      // reset the old name\n      this.__oldChildrenPath = null;\n    },\n\n    /**\n     * Apply-method which will be called after the icon path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the icon property.\n     * @param old {String|null} The old path or the icon property.\n     */\n    _applyIconPath(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called after the label path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the label property.\n     * @param old {String|null} The old path of the label property.\n     */\n    _applyLabelPath(value, old) {\n      this.__buildTree();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Handler function handling the change of a length of a children array.\n     * This method invokes a rebuild of the corresponding subtree.\n     *\n     * @param ev {qx.event.type.Event} The changeLength event of a data array.\n     */\n    __changeModelChildren(ev) {\n      // get the stored data\n      var children = ev.getTarget();\n      qx.core.ObjectRegistry.register(children);\n      var treeNode = this.__childrenRef[children.toHashCode()].treeNode;\n      var modelNode = this.__childrenRef[children.toHashCode()].modelNode;\n      // update the subtree\n      this.__updateTreeChildren(treeNode, modelNode);\n\n      // update the selection in case a selected element has been removed\n      this._updateSelection();\n    },\n\n    /**\n     * Handler function taking care of the changes of the children array itself.\n     *\n     * @param e {qx.event.type.Data} Change event for the children property.\n     */\n    __changeChildrenArray(e) {\n      var children = e.getData();\n      var oldChildren = e.getOldData();\n\n      // get the old ref and delete it\n      var oldRef = this.__childrenRef[oldChildren.toHashCode()];\n      oldChildren.removeListenerById(oldRef.changeListenerId);\n      this.debug(\n        \"1: removing children=\" +\n          oldChildren.toHashCode() +\n          \" from this=\" +\n          this.toHashCode()\n      );\n\n      delete this.__childrenRef[oldChildren.toHashCode()];\n      // remove the old change listener for the children\n      oldRef.modelNode.removeListenerById(oldRef.changeChildernListenerId);\n\n      // add a new change listener\n      var modelNode = oldRef.modelNode;\n      var property = qx.Class.getPropertyDefinition(\n        oldRef.modelNode.constructor,\n        this.getChildPath()\n      );\n\n      var eventName = property.event;\n      var changeChildernListenerId = modelNode.addListener(\n        eventName,\n        this.__changeChildrenArray,\n        this\n      );\n\n      // add the new ref\n      var treeNode = oldRef.treeNode;\n      this.debug(\n        \"1: adding children=\" +\n          children.toHashCode() +\n          \" to this=\" +\n          this.toHashCode()\n      );\n\n      this.__childrenRef[children.toHashCode()] = {\n        modelNode: modelNode,\n        treeNode: treeNode,\n        changeListenerId: oldRef.changeListenerId,\n        changeChildernListenerId: changeChildernListenerId\n      };\n\n      // update the subtree\n      this.__updateTreeChildren(treeNode, modelNode);\n\n      // update the selection in case a selected element has been removed\n      this._updateSelection();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       ITEM HANDLING\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Creates a TreeFolder and delegates the configure method if a delegate is\n     * set and the needed function (configureItem) is available.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem} The created and configured TreeFolder.\n     */\n    _createItem() {\n      var delegate = this.getDelegate();\n      // check if a delegate and a create method is set\n      if (delegate != null && delegate.createItem != null) {\n        var item = delegate.createItem();\n      } else {\n        var item = new qx.ui.tree.TreeFolder();\n      }\n\n      // check if a delegate is set and if the configure function is available\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n      return item;\n    },\n\n    /**\n     * Internal helper function to build up the tree corresponding to the data\n     * stored in the model. This function creates the root node and hands the\n     * recursive creation of all subtrees to the {#__updateTreeChildren}\n     * function.\n     */\n    __buildTree() {\n      // only fill the target if there is a target, its known how to\n      // access the children and what needs to be displayed as label\n      if (this.getTarget() == null || this.getChildPath() == null) {\n        return;\n      }\n\n      // check for the binding knowledge\n      if (\n        (this.getLabelPath() == null && this.getDelegate() == null) ||\n        (this.getLabelPath() == null &&\n          this.getDelegate() != null &&\n          this.getDelegate().bindItem == null)\n      ) {\n        return;\n      }\n\n      // Clean the target completely\n      this.__emptyTarget();\n\n      // only build up a new tree if a model is given\n      if (this.getModel() != null) {\n        // create a new root node\n        var rootNode = this._createItem();\n        rootNode.setModel(this.getModel());\n        // bind the root node\n        this.__addBinding(this.getModel(), rootNode);\n        this.__updateTreeChildren(rootNode, this.getModel());\n        // assign the new root once the tree has been built\n        this.getTarget().setRoot(rootNode);\n      }\n    },\n\n    /**\n     * Main method building up the tree folders corresponding to the given\n     * model node. The new created subtree will be added to the given tree node.\n     *\n     * @param rootNode {qx.ui.tree.TreeFolder} The tree folder to add the new\n     *   created subtree.\n     *\n     * @param modelNode {qx.core.Object} The model nodes which represent the\n     *   data in the current subtree.\n     */\n    __updateTreeChildren(rootNode, modelNode) {\n      // ignore items which don't have children\n      if (\n        modelNode[\"get\" + qx.lang.String.firstUp(this.getChildPath())] ==\n        undefined\n      ) {\n        return;\n      }\n      // get all children of the current model node\n      var children =\n        modelNode[\"get\" + qx.lang.String.firstUp(this.getChildPath())]();\n\n      // store the children reference\n      if (this.__childrenRef[children.toHashCode()] == undefined) {\n        // add the listener for the change\n        var changeListenerId = children.addListener(\n          \"change\",\n          this.__changeModelChildren,\n          this\n        );\n\n        // add a listener for the change of the children array itself\n        var property = qx.Class.getPropertyDefinition(\n          modelNode.constructor,\n          this.getChildPath()\n        );\n\n        var eventName = property.event;\n        var changeChildernListenerId = modelNode.addListener(\n          eventName,\n          this.__changeChildrenArray,\n          this\n        );\n\n        this.debug(\n          \"2: adding children=\" +\n            children.toHashCode() +\n            \" to this=\" +\n            this.toHashCode()\n        );\n\n        this.__childrenRef[children.toHashCode()] = {\n          modelNode: modelNode,\n          treeNode: rootNode,\n          changeListenerId: changeListenerId,\n          changeChildernListenerId: changeChildernListenerId\n        };\n      }\n\n      // go threw all children in the model\n      for (var i = 0; i < children.length; i++) {\n        // if there is no node in the tree or the current node does not fit\n        if (\n          rootNode.getChildren()[i] == null ||\n          children.getItem(i) != rootNode.getChildren()[i].getModel()\n        ) {\n          //check if the node was just moved\n          for (var j = i; j < rootNode.getChildren().length; j++) {\n            if (rootNode.getChildren()[j].getModel() === children.getItem(i)) {\n              var oldIndex = j;\n              break;\n            }\n          }\n          // if it is in the tree\n          if (oldIndex != undefined) {\n            // get the corresponding node\n            var currentNode = rootNode.getChildren()[oldIndex];\n            // check if it is selected\n            if (this.getTarget().isSelected(currentNode)) {\n              var wasSelected = true;\n            }\n            // remove the item at its old place (will remove the selection)\n            rootNode.removeAt(oldIndex);\n            // add the node at the current position\n            rootNode.addAt(currentNode, i);\n            // select it again if it was selected\n            if (wasSelected) {\n              this.getTarget().addToSelection(currentNode);\n            }\n\n            // if the node is new\n          } else {\n            // add the child node\n            var treeNode = this._createItem();\n            treeNode.setModel(children.getItem(i));\n            rootNode.addAt(treeNode, i);\n            this.__addBinding(children.getItem(i), treeNode);\n\n            // add all children recursive\n            this.__updateTreeChildren(treeNode, children.getItem(i));\n          }\n        }\n      }\n      // remove the rest of the tree items if they exist\n      for (\n        var i = rootNode.getChildren().length - 1;\n        i >= children.length;\n        i--\n      ) {\n        var treeFolder = rootNode.getChildren()[i];\n        this.__removeFolder(treeFolder, rootNode);\n      }\n    },\n\n    /**\n     * Removes all folders and bindings for the current set target.\n     * @param tree {qx.ui.tree.Tree} The tree to empty.\n     */\n    __emptyTarget(tree) {\n      if (tree == null) {\n        tree = this.getTarget();\n      }\n      // only do something if a tree is set\n      if (tree == null) {\n        return;\n      }\n      // remove the root node\n      var root = tree.getRoot();\n      if (root != null) {\n        tree.setRoot(null);\n        this.__removeAllFolders(root);\n        var model = root.getModel();\n        if (model) {\n          this.__removeBinding(model);\n        }\n        root.destroy();\n        this.debug(\"erasing all children from this=\" + this.toHashCode());\n        this.__childrenRef = { b: 2 };\n      }\n    },\n\n    /**\n     * Removes all child folders of the given tree node. Also removes all\n     * bindings for the removed folders.\n     *\n     * @param node {qx.ui.tree.core.AbstractTreeItem} The used tree folder.\n     */\n    __removeAllFolders(node) {\n      var children = node.getChildren() || [];\n      // remove all subchildren\n      for (var i = children.length - 1; i >= 0; i--) {\n        if (children[i].getChildren().length > 0) {\n          this.__removeAllFolders(children[i]);\n        }\n        this.__removeFolder(children[i], node);\n      }\n    },\n\n    /**\n     * Internal helper method removing the given folder form the given root\n     * node. All set bindings will be removed and the old tree folder will be\n     * destroyed.\n     *\n     * @param treeFolder {qx.ui.tree.core.AbstractTreeItem} The folder to remove.\n     * @param rootNode {qx.ui.tree.core.AbstractTreeItem} The folder holding the\n     *   treeFolder.\n     */\n    __removeFolder(treeFolder, rootNode) {\n      // get the model\n      var model = treeFolder.getModel();\n      var childPath = this.__oldChildrenPath || this.getChildPath();\n      var childrenGetterName = \"get\" + qx.lang.String.firstUp(childPath);\n\n      // if the model does have a child path\n      if (model[childrenGetterName] != undefined) {\n        // remove the old children listener\n        var children = model[childrenGetterName]();\n        this.debug(\n          \"2: removing children=\" +\n            children.toHashCode() +\n            \" from this=\" +\n            this.toHashCode()\n        );\n\n        var oldRef = this.__childrenRef[children.toHashCode()];\n        children.removeListenerById(oldRef.changeListenerId);\n        model.removeListenerById(oldRef.changeChildernListenerId);\n        // also remove all its children [BUG #4296]\n        this.__removeAllFolders(treeFolder);\n\n        // delete the model reference\n        delete this.__childrenRef[children.toHashCode()];\n      }\n      // get the binding and remove it\n      this.__removeBinding(model);\n      // remove the folder from the tree\n      rootNode.remove(treeFolder);\n      // get rid of the old tree folder\n      treeFolder.destroy();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       BINDING STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for binding a given property from the model to the target\n     * widget.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetPath {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options to use by\n     *  {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param targetWidget {qx.ui.tree.core.AbstractTreeItem} The target widget.\n     * @param modelNode {var} The model node which should be bound to the target.\n     */\n    bindProperty(sourcePath, targetPath, options, targetWidget, modelNode) {\n      // set up the binding\n      var id = modelNode.bind(sourcePath, targetWidget, targetPath, options);\n      // check for the storage for the references\n      if (this.__bindings[targetPath] == null) {\n        this.__bindings[targetPath] = {};\n      }\n      // store the binding reference\n      var storage = this.__bindings[targetPath];\n      qx.core.ObjectRegistry.register(modelNode);\n      if (storage[modelNode.toHashCode()]) {\n        if (storage[modelNode.toHashCode()].id) {\n          throw new Error(\n            \"Can not bind the same target property '\" + targetPath + \"' twice.\"\n          );\n        }\n        storage[modelNode.toHashCode()].id = id;\n      } else {\n        storage[modelNode.toHashCode()] = {\n          id: id,\n          reverseId: null,\n          treeNode: targetWidget\n        };\n      }\n\n      // save the bound property\n      if (!this.__boundProperties.includes(targetPath)) {\n        this.__boundProperties.push(targetPath);\n      }\n    },\n\n    /**\n     * Helper method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourcePath {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options to use by\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param sourceWidget {qx.ui.tree.core.AbstractTreeItem} The source widget.\n     * @param modelNode {var} The model node which should be bound to the target.\n     */\n    bindPropertyReverse(\n      targetPath,\n      sourcePath,\n      options,\n      sourceWidget,\n      modelNode\n    ) {\n      // set up the binding\n      var id = sourceWidget.bind(sourcePath, modelNode, targetPath, options);\n\n      // check for the storage for the references\n      if (this.__bindings[sourcePath] == null) {\n        this.__bindings[sourcePath] = {};\n      }\n      // check if there is already a stored item\n      var storage = this.__bindings[sourcePath];\n      qx.core.ObjectRegistry.register(modelNode);\n      if (storage[modelNode.toHashCode()]) {\n        if (storage[modelNode.toHashCode()].reverseId) {\n          throw new Error(\n            \"Can not reverse bind the same target property '\" +\n              targetPath +\n              \"' twice.\"\n          );\n        }\n        storage[modelNode.toHashCode()].reverseId = id;\n      } else {\n        storage[modelNode.toHashCode()] = {\n          id: null,\n          reverseId: id,\n          treeNode: sourceWidget\n        };\n      }\n\n      // save the bound property\n      if (!this.__boundProperties.includes(sourcePath)) {\n        this.__boundProperties.push(sourcePath);\n      }\n    },\n\n    /**\n     * Helper method for binding the default properties (label and icon) from\n     * the model to the target widget.\n     *\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param treeNode {qx.ui.tree.core.AbstractTreeItem} The tree node\n     *   corresponding to the model node.\n     * @param modelNode {qx.core.Object} The model node holding the data.\n     */\n    bindDefaultProperties(treeNode, modelNode) {\n      // label binding\n      this.bindProperty(\n        this.getLabelPath(),\n        \"label\",\n        this.getLabelOptions(),\n        treeNode,\n        modelNode\n      );\n\n      // icon binding\n      if (this.getIconPath() != null) {\n        this.bindProperty(\n          this.getIconPath(),\n          \"icon\",\n          this.getIconOptions(),\n          treeNode,\n          modelNode\n        );\n      }\n    },\n\n    /**\n     * Helper method renewing all bindings with the currently saved options and\n     * paths.\n     */\n    __renewBindings() {\n      // get the first bound property\n      var firstProp;\n      for (var key in this.__bindings) {\n        firstProp = key;\n        break;\n      }\n      // go through all stored bindings for that property\n      // (should have all the same amount of entries and tree nodes)\n      for (var hash in this.__bindings[firstProp]) {\n        // get the data\n        var treeNode = this.__bindings[firstProp][hash].treeNode;\n        var modelNode = qx.core.ObjectRegistry.fromHashCode(hash);\n        // remove the old bindings\n        this.__removeBinding(modelNode);\n        // add the new bindings\n        this.__addBinding(modelNode, treeNode);\n      }\n    },\n\n    /**\n     * Internal helper method adding the right bindings from the given\n     * modelNode to the given treeNode.\n     *\n     * @param modelNode {qx.core.Object} The model node holding the data.\n     * @param treeNode {qx.ui.tree.TreeFolder} The corresponding tree folder\n     *   to the model node.\n     */\n    __addBinding(modelNode, treeNode) {\n      var delegate = this.getDelegate();\n      // if a delegate for creating the binding is given, use it\n      if (delegate != null && delegate.bindItem != null) {\n        delegate.bindItem(this, treeNode, modelNode);\n\n        // otherwise, try to bind the listItem by default\n      } else {\n        this.bindDefaultProperties(treeNode, modelNode);\n      }\n    },\n\n    /**\n     * Internal helper method for removing bindings for a given model node.\n     *\n     * @param modelNode {qx.core.Object} the model node for which the bindings\n     *   should be removed.\n     */\n    __removeBinding(modelNode) {\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        var property = this.__boundProperties[i];\n        var bindingsMap = this.__bindings[property][modelNode.toHashCode()];\n        if (bindingsMap != null) {\n          if (bindingsMap.id) {\n            modelNode.removeBinding(bindingsMap.id);\n            bindingsMap.id = null;\n          }\n          if (bindingsMap.reverseId) {\n            bindingsMap.treeNode.removeBinding(bindingsMap.reverseId);\n            bindingsMap.reverseId = null;\n          }\n          delete this.__bindings[property][modelNode.toHashCode()];\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       DELEGATE HELPER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for applying the delegate It checks if a configureItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setConfigureItem(value, old) {\n      if (\n        value != null &&\n        value.configureItem != null &&\n        this.getTarget() != null &&\n        this.getModel() != null\n      ) {\n        var children = this.getTarget().getRoot().getItems(true, true, false);\n        for (var i = 0; i < children.length; i++) {\n          value.configureItem(children[i]);\n        }\n      }\n    },\n\n    /**\n     * Helper method for applying the delegate. It checks if a createItem\n     * is set and invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setCreateItem(value, old) {\n      // do nothing if no tree can be build\n      if (this.getTarget() == null || this.getModel() == null) {\n        return;\n      }\n      // do nothing if no delegate function is set\n      if (value == null || value.createItem == null) {\n        return;\n      }\n      // do nothing it the delegate function has not changed\n      if (\n        old &&\n        old.createItem &&\n        value &&\n        value.createItem &&\n        old.createItem == value.createItem\n      ) {\n        return;\n      }\n      this._startSelectionModification();\n\n      this.__emptyTarget();\n      this.__buildTree();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n    /**\n     * Helper method for applying the delegate It checks if a bindItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setBindItem(value, old) {\n      // if a new bindItem function is set\n      if (value != null && value.bindItem != null) {\n        // do nothing if the bindItem function did not change\n        if (\n          old != null &&\n          old.bindItem != null &&\n          value.bindItem == old.bindItem\n        ) {\n          return;\n        }\n        this.__buildTree();\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct() {\n    if (this.getTarget() && !this.getTarget().isDisposed()) {\n      this.setTarget(null);\n    }\n    if (this.getModel() != null && !this.getModel().isDisposed()) {\n      this.setModel(null);\n    }\n    this.__bindings = this.__childrenRef = this.__boundProperties = null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,yBAAyB,EAAE;IACzCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,OAAO,EAAET,EAAE,CAACU,IAAI,CAACC,UAAU,CAACC,UAAU;IACtCC,SAAS,EAAE,CAACb,EAAE,CAACU,IAAI,CAACC,UAAU,CAACG,UAAU,CAAC;IAE1C;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAEC,SAAS,EAAE;MAC7CnB,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAY,WAAA,CAAAC,IAAA;;MAEA;MACA,IAAI,CAACC,SAAU,GAAG,CAAC,CAAC;MACpB,IAAI,CAACC,SAAiB,GAAG,EAAE;;MAE3B;MACA,IAAI,CAACC,SAAa,GAAG;QAAEC,CAAC,EAAE;MAAE,CAAC;MAE7B,IAAIP,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACQ,YAAY,CAACR,SAAS,CAAC;MAC9B;MACA,IAAIC,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACQ,YAAY,CAACR,SAAS,CAAC;MAC9B;MACA,IAAIH,KAAK,IAAI,IAAI,EAAE;QACjB,IAAI,CAACY,QAAQ,CAACZ,KAAK,CAAC;MACtB;MACA,IAAIC,MAAM,IAAI,IAAI,EAAE;QAClB,IAAI,CAACY,SAAS,CAACZ,MAAM,CAAC;MACxB;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEa,UAAU,EAAE;MACV;MACAd,KAAK,EAAE;QACLe,KAAK,EAAE,gBAAgB;QACvBC,KAAK,EAAE,aAAa;QACpBC,KAAK,EAAE,aAAa;QACpBC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;MACf,CAAC;MAED;MACAlB,MAAM,EAAE;QACNe,KAAK,EAAE,cAAc;QACrBC,KAAK,EAAE,cAAc;QACrBG,IAAI,EAAE,IAAI;QACVF,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;MACf,CAAC;MAED;MACAjB,SAAS,EAAE;QACTa,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE,iBAAiB;QACxBE,QAAQ,EAAE;MACZ,CAAC;MAED;AACJ;AACA;AACA;MACIf,SAAS,EAAE;QACTY,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE,iBAAiB;QACxBE,QAAQ,EAAE;MACZ,CAAC;MAED;AACJ;AACA;AACA;MACIG,QAAQ,EAAE;QACRN,KAAK,EAAE,QAAQ;QACfC,KAAK,EAAE,gBAAgB;QACvBE,QAAQ,EAAE;MACZ,CAAC;MAED;AACJ;AACA;AACA;MACII,YAAY,EAAE;QACZN,KAAK,EAAE,oBAAoB;QAC3BE,QAAQ,EAAE;MACZ,CAAC;MAED;AACJ;AACA;AACA;MACIK,WAAW,EAAE;QACXP,KAAK,EAAE,mBAAmB;QAC1BE,QAAQ,EAAE;MACZ,CAAC;MAED;AACJ;AACA;AACA;MACIM,QAAQ,EAAE;QACRR,KAAK,EAAE,gBAAgB;QACvBI,IAAI,EAAE,IAAI;QACVF,QAAQ,EAAE;MACZ;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEO,OAAO,EAAE;MACP;MACAjB,SAAa,EAAE,IAAI;MACnBF,SAAU,EAAE,IAAI;MAChBC,SAAiB,EAAE,IAAI;MACvBmB,SAAiB,EAAE,IAAI;MAEvB;AACJ;AACA;AACA;AACA;MACI;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,cAAc,WAAAA,eAACC,KAAK,EAAEC,GAAG,EAAE;QACzB,IAAI,CAACC,iBAAiB,CAACF,KAAK,EAAEC,GAAG,CAAC;QAClC,IAAI,CAACE,cAAc,CAACH,KAAK,EAAEC,GAAG,CAAC;QAC/B,IAAI,CAACG,YAAY,CAACJ,KAAK,EAAEC,GAAG,CAAC;MAC/B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACII,iBAAiB,WAAAA,kBAACL,KAAK,EAAEC,GAAG,EAAE;QAC5B,IAAI,CAACK,SAAe,EAAE;MACxB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,kBAAkB,WAAAA,mBAACP,KAAK,EAAEC,GAAG,EAAE;QAC7B,IAAI,CAACK,SAAe,EAAE;MACxB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,YAAY,WAAAA,aAACR,KAAK,EAAEC,GAAG,EAAE;QACvB;QACA,IAAIA,GAAG,IAAIQ,SAAS,EAAE;UACpB,IAAI,CAACC,SAAa,CAACT,GAAG,CAAC;QACzB;;QAEA;QACA,IAAI,IAAI,CAACU,QAAQ,EAAE,IAAI,IAAI,EAAE;UAC3B;UACA,IAAI,CAACC,SAAW,EAAE;QACpB;;QAEA;QACA,IAAI,CAACC,wBAAwB,CAACb,KAAK,EAAEC,GAAG,CAAC;MAC3C,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIa,WAAW,WAAAA,YAACd,KAAK,EAAEC,GAAG,EAAE;QACtB,IAAI,CAACW,SAAW,EAAE;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIG,eAAe,WAAAA,gBAACf,KAAK,EAAEC,GAAG,EAAE;QAC1B;QACA,IAAI,CAACH,SAAiB,GAAGG,GAAG;QAC5B,IAAI,CAACW,SAAW,EAAE;QAClB;QACA,IAAI,CAACd,SAAiB,GAAG,IAAI;MAC/B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIkB,cAAc,WAAAA,eAAChB,KAAK,EAAEC,GAAG,EAAE;QACzB,IAAI,CAACK,SAAe,EAAE;MACxB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIW,eAAe,WAAAA,gBAACjB,KAAK,EAAEC,GAAG,EAAE;QAC1B,IAAI,CAACW,SAAW,EAAE;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACI;AACJ;AACA;AACA;AACA;AACA;MACIM,SAAqB,WAAAC,UAACC,EAAE,EAAE;QACxB;QACA,IAAIC,QAAQ,GAAGD,EAAE,CAACE,SAAS,EAAE;QAC7BlE,EAAE,CAACO,IAAI,CAAC4D,cAAc,CAACC,QAAQ,CAACH,QAAQ,CAAC;QACzC,IAAII,QAAQ,GAAG,IAAI,CAAC7C,SAAa,CAACyC,QAAQ,CAACK,UAAU,EAAE,CAAC,CAACD,QAAQ;QACjE,IAAIE,SAAS,GAAG,IAAI,CAAC/C,SAAa,CAACyC,QAAQ,CAACK,UAAU,EAAE,CAAC,CAACC,SAAS;QACnE;QACA,IAAI,CAACC,SAAoB,CAACH,QAAQ,EAAEE,SAAS,CAAC;;QAE9C;QACA,IAAI,CAACE,gBAAgB,EAAE;MACzB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,SAAqB,WAAAC,UAACC,CAAC,EAAE;QACvB,IAAIX,QAAQ,GAAGW,CAAC,CAACC,OAAO,EAAE;QAC1B,IAAIC,WAAW,GAAGF,CAAC,CAACG,UAAU,EAAE;;QAEhC;QACA,IAAIC,MAAM,GAAG,IAAI,CAACxD,SAAa,CAACsD,WAAW,CAACR,UAAU,EAAE,CAAC;QACzDQ,WAAW,CAACG,kBAAkB,CAACD,MAAM,CAACE,gBAAgB,CAAC;QACvD,IAAI,CAACC,KAAK,CACR,uBAAuB,GACrBL,WAAW,CAACR,UAAU,EAAE,GACxB,aAAa,GACb,IAAI,CAACA,UAAU,EAAE,CACpB;QAED,OAAO,IAAI,CAAC9C,SAAa,CAACsD,WAAW,CAACR,UAAU,EAAE,CAAC;QACnD;QACAU,MAAM,CAACT,SAAS,CAACU,kBAAkB,CAACD,MAAM,CAACI,wBAAwB,CAAC;;QAEpE;QACA,IAAIb,SAAS,GAAGS,MAAM,CAACT,SAAS;QAChC,IAAIc,QAAQ,GAAGrF,EAAE,CAACI,KAAK,CAACkF,qBAAqB,CAC3CN,MAAM,CAACT,SAAS,CAACnD,WAAW,EAC5B,IAAI,CAACmE,YAAY,EAAE,CACpB;QAED,IAAIC,SAAS,GAAGH,QAAQ,CAACpD,KAAK;QAC9B,IAAImD,wBAAwB,GAAGb,SAAS,CAACkB,WAAW,CAClDD,SAAS,EACT,IAAI,CAACd,SAAqB,EAC1B,IAAI,CACL;;QAED;QACA,IAAIL,QAAQ,GAAGW,MAAM,CAACX,QAAQ;QAC9B,IAAI,CAACc,KAAK,CACR,qBAAqB,GACnBlB,QAAQ,CAACK,UAAU,EAAE,GACrB,WAAW,GACX,IAAI,CAACA,UAAU,EAAE,CACpB;QAED,IAAI,CAAC9C,SAAa,CAACyC,QAAQ,CAACK,UAAU,EAAE,CAAC,GAAG;UAC1CC,SAAS,EAAEA,SAAS;UACpBF,QAAQ,EAAEA,QAAQ;UAClBa,gBAAgB,EAAEF,MAAM,CAACE,gBAAgB;UACzCE,wBAAwB,EAAEA;QAC5B,CAAC;;QAED;QACA,IAAI,CAACZ,SAAoB,CAACH,QAAQ,EAAEE,SAAS,CAAC;;QAE9C;QACA,IAAI,CAACE,gBAAgB,EAAE;MACzB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACI;AACJ;AACA;AACA;AACA;AACA;MACIiB,WAAW,WAAAA,YAAA,EAAG;QACZ,IAAIlD,QAAQ,GAAG,IAAI,CAACmD,WAAW,EAAE;QACjC;QACA,IAAInD,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAACoD,UAAU,IAAI,IAAI,EAAE;UACnD,IAAIC,IAAI,GAAGrD,QAAQ,CAACoD,UAAU,EAAE;QAClC,CAAC,MAAM;UACL,IAAIC,IAAI,GAAG,IAAI7F,EAAE,CAAC8F,EAAE,CAACC,IAAI,CAACC,UAAU,EAAE;QACxC;;QAEA;QACA,IAAIxD,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAACyD,aAAa,IAAI,IAAI,EAAE;UACtDzD,QAAQ,CAACyD,aAAa,CAACJ,IAAI,CAAC;QAC9B;QACA,OAAOA,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIrC,SAAW,WAAA0C,UAAA,EAAG;QACZ;QACA;QACA,IAAI,IAAI,CAAChC,SAAS,EAAE,IAAI,IAAI,IAAI,IAAI,CAACqB,YAAY,EAAE,IAAI,IAAI,EAAE;UAC3D;QACF;;QAEA;QACA,IACG,IAAI,CAACY,YAAY,EAAE,IAAI,IAAI,IAAI,IAAI,CAACR,WAAW,EAAE,IAAI,IAAI,IACzD,IAAI,CAACQ,YAAY,EAAE,IAAI,IAAI,IAC1B,IAAI,CAACR,WAAW,EAAE,IAAI,IAAI,IAC1B,IAAI,CAACA,WAAW,EAAE,CAACS,QAAQ,IAAI,IAAK,EACtC;UACA;QACF;;QAEA;QACA,IAAI,CAAC9C,SAAa,EAAE;;QAEpB;QACA,IAAI,IAAI,CAACC,QAAQ,EAAE,IAAI,IAAI,EAAE;UAC3B;UACA,IAAI8C,QAAQ,GAAG,IAAI,CAACX,WAAW,EAAE;UACjCW,QAAQ,CAACzE,QAAQ,CAAC,IAAI,CAAC2B,QAAQ,EAAE,CAAC;UAClC;UACA,IAAI,CAAC+C,UAAY,CAAC,IAAI,CAAC/C,QAAQ,EAAE,EAAE8C,QAAQ,CAAC;UAC5C,IAAI,CAAC7B,SAAoB,CAAC6B,QAAQ,EAAE,IAAI,CAAC9C,QAAQ,EAAE,CAAC;UACpD;UACA,IAAI,CAACW,SAAS,EAAE,CAACqC,OAAO,CAACF,QAAQ,CAAC;QACpC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACI7B,SAAoB,WAAAgC,UAACH,QAAQ,EAAE9B,SAAS,EAAE;QACxC;QACA,IACEA,SAAS,CAAC,KAAK,GAAGvE,EAAE,CAACyG,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,IAAI,CAACpB,YAAY,EAAE,CAAC,CAAC,IAC9DlC,SAAS,EACT;UACA;QACF;QACA;QACA,IAAIY,QAAQ,GACVM,SAAS,CAAC,KAAK,GAAGvE,EAAE,CAACyG,IAAI,CAACC,MAAM,CAACC,OAAO,CAAC,IAAI,CAACpB,YAAY,EAAE,CAAC,CAAC,EAAE;;QAElE;QACA,IAAI,IAAI,CAAC/D,SAAa,CAACyC,QAAQ,CAACK,UAAU,EAAE,CAAC,IAAIjB,SAAS,EAAE;UAC1D;UACA,IAAI6B,gBAAgB,GAAGjB,QAAQ,CAACwB,WAAW,CACzC,QAAQ,EACR,IAAI,CAAC3B,SAAqB,EAC1B,IAAI,CACL;;UAED;UACA,IAAIuB,QAAQ,GAAGrF,EAAE,CAACI,KAAK,CAACkF,qBAAqB,CAC3Cf,SAAS,CAACnD,WAAW,EACrB,IAAI,CAACmE,YAAY,EAAE,CACpB;UAED,IAAIC,SAAS,GAAGH,QAAQ,CAACpD,KAAK;UAC9B,IAAImD,wBAAwB,GAAGb,SAAS,CAACkB,WAAW,CAClDD,SAAS,EACT,IAAI,CAACd,SAAqB,EAC1B,IAAI,CACL;UAED,IAAI,CAACS,KAAK,CACR,qBAAqB,GACnBlB,QAAQ,CAACK,UAAU,EAAE,GACrB,WAAW,GACX,IAAI,CAACA,UAAU,EAAE,CACpB;UAED,IAAI,CAAC9C,SAAa,CAACyC,QAAQ,CAACK,UAAU,EAAE,CAAC,GAAG;YAC1CC,SAAS,EAAEA,SAAS;YACpBF,QAAQ,EAAEgC,QAAQ;YAClBnB,gBAAgB,EAAEA,gBAAgB;YAClCE,wBAAwB,EAAEA;UAC5B,CAAC;QACH;;QAEA;QACA,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3C,QAAQ,CAAC4C,MAAM,EAAED,CAAC,EAAE,EAAE;UACxC;UACA,IACEP,QAAQ,CAACS,WAAW,EAAE,CAACF,CAAC,CAAC,IAAI,IAAI,IACjC3C,QAAQ,CAAC8C,OAAO,CAACH,CAAC,CAAC,IAAIP,QAAQ,CAACS,WAAW,EAAE,CAACF,CAAC,CAAC,CAACrD,QAAQ,EAAE,EAC3D;YACA;YACA,KAAK,IAAIyD,CAAC,GAAGJ,CAAC,EAAEI,CAAC,GAAGX,QAAQ,CAACS,WAAW,EAAE,CAACD,MAAM,EAAEG,CAAC,EAAE,EAAE;cACtD,IAAIX,QAAQ,CAACS,WAAW,EAAE,CAACE,CAAC,CAAC,CAACzD,QAAQ,EAAE,KAAKU,QAAQ,CAAC8C,OAAO,CAACH,CAAC,CAAC,EAAE;gBAChE,IAAIK,QAAQ,GAAGD,CAAC;gBAChB;cACF;YACF;YACA;YACA,IAAIC,QAAQ,IAAI5D,SAAS,EAAE;cACzB;cACA,IAAI6D,WAAW,GAAGb,QAAQ,CAACS,WAAW,EAAE,CAACG,QAAQ,CAAC;cAClD;cACA,IAAI,IAAI,CAAC/C,SAAS,EAAE,CAACiD,UAAU,CAACD,WAAW,CAAC,EAAE;gBAC5C,IAAIE,WAAW,GAAG,IAAI;cACxB;cACA;cACAf,QAAQ,CAACgB,QAAQ,CAACJ,QAAQ,CAAC;cAC3B;cACAZ,QAAQ,CAACiB,KAAK,CAACJ,WAAW,EAAEN,CAAC,CAAC;cAC9B;cACA,IAAIQ,WAAW,EAAE;gBACf,IAAI,CAAClD,SAAS,EAAE,CAACqD,cAAc,CAACL,WAAW,CAAC;cAC9C;;cAEA;YACF,CAAC,MAAM;cACL;cACA,IAAI7C,QAAQ,GAAG,IAAI,CAACqB,WAAW,EAAE;cACjCrB,QAAQ,CAACzC,QAAQ,CAACqC,QAAQ,CAAC8C,OAAO,CAACH,CAAC,CAAC,CAAC;cACtCP,QAAQ,CAACiB,KAAK,CAACjD,QAAQ,EAAEuC,CAAC,CAAC;cAC3B,IAAI,CAACN,UAAY,CAACrC,QAAQ,CAAC8C,OAAO,CAACH,CAAC,CAAC,EAAEvC,QAAQ,CAAC;;cAEhD;cACA,IAAI,CAACG,SAAoB,CAACH,QAAQ,EAAEJ,QAAQ,CAAC8C,OAAO,CAACH,CAAC,CAAC,CAAC;YAC1D;UACF;QACF;QACA;QACA,KACE,IAAIA,CAAC,GAAGP,QAAQ,CAACS,WAAW,EAAE,CAACD,MAAM,GAAG,CAAC,EACzCD,CAAC,IAAI3C,QAAQ,CAAC4C,MAAM,EACpBD,CAAC,EAAE,EACH;UACA,IAAIY,UAAU,GAAGnB,QAAQ,CAACS,WAAW,EAAE,CAACF,CAAC,CAAC;UAC1C,IAAI,CAACa,UAAc,CAACD,UAAU,EAAEnB,QAAQ,CAAC;QAC3C;MACF,CAAC;MAED;AACJ;AACA;AACA;MACI/C,SAAa,WAAAoE,UAAC3B,IAAI,EAAE;QAClB,IAAIA,IAAI,IAAI,IAAI,EAAE;UAChBA,IAAI,GAAG,IAAI,CAAC7B,SAAS,EAAE;QACzB;QACA;QACA,IAAI6B,IAAI,IAAI,IAAI,EAAE;UAChB;QACF;QACA;QACA,IAAI4B,IAAI,GAAG5B,IAAI,CAAC6B,OAAO,EAAE;QACzB,IAAID,IAAI,IAAI,IAAI,EAAE;UAChB5B,IAAI,CAACQ,OAAO,CAAC,IAAI,CAAC;UAClB,IAAI,CAACsB,UAAkB,CAACF,IAAI,CAAC;UAC7B,IAAI3G,KAAK,GAAG2G,IAAI,CAACpE,QAAQ,EAAE;UAC3B,IAAIvC,KAAK,EAAE;YACT,IAAI,CAAC8G,UAAe,CAAC9G,KAAK,CAAC;UAC7B;UACA2G,IAAI,CAACI,OAAO,EAAE;UACd,IAAI,CAAC5C,KAAK,CAAC,iCAAiC,GAAG,IAAI,CAACb,UAAU,EAAE,CAAC;UACjE,IAAI,CAAC9C,SAAa,GAAG;YAAEwG,CAAC,EAAE;UAAE,CAAC;QAC/B;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIH,UAAkB,WAAAI,WAACC,IAAI,EAAE;QACvB,IAAIjE,QAAQ,GAAGiE,IAAI,CAACpB,WAAW,EAAE,IAAI,EAAE;QACvC;QACA,KAAK,IAAIF,CAAC,GAAG3C,QAAQ,CAAC4C,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC7C,IAAI3C,QAAQ,CAAC2C,CAAC,CAAC,CAACE,WAAW,EAAE,CAACD,MAAM,GAAG,CAAC,EAAE;YACxC,IAAI,CAACgB,UAAkB,CAAC5D,QAAQ,CAAC2C,CAAC,CAAC,CAAC;UACtC;UACA,IAAI,CAACa,UAAc,CAACxD,QAAQ,CAAC2C,CAAC,CAAC,EAAEsB,IAAI,CAAC;QACxC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIT,UAAc,WAAAU,WAACX,UAAU,EAAEnB,QAAQ,EAAE;QACnC;QACA,IAAIrF,KAAK,GAAGwG,UAAU,CAACjE,QAAQ,EAAE;QACjC,IAAIrC,SAAS,GAAG,IAAI,CAACwB,SAAiB,IAAI,IAAI,CAAC6C,YAAY,EAAE;QAC7D,IAAI6C,kBAAkB,GAAG,KAAK,GAAGpI,EAAE,CAACyG,IAAI,CAACC,MAAM,CAACC,OAAO,CAACzF,SAAS,CAAC;;QAElE;QACA,IAAIF,KAAK,CAACoH,kBAAkB,CAAC,IAAI/E,SAAS,EAAE;UAC1C;UACA,IAAIY,QAAQ,GAAGjD,KAAK,CAACoH,kBAAkB,CAAC,EAAE;UAC1C,IAAI,CAACjD,KAAK,CACR,uBAAuB,GACrBlB,QAAQ,CAACK,UAAU,EAAE,GACrB,aAAa,GACb,IAAI,CAACA,UAAU,EAAE,CACpB;UAED,IAAIU,MAAM,GAAG,IAAI,CAACxD,SAAa,CAACyC,QAAQ,CAACK,UAAU,EAAE,CAAC;UACtDL,QAAQ,CAACgB,kBAAkB,CAACD,MAAM,CAACE,gBAAgB,CAAC;UACpDlE,KAAK,CAACiE,kBAAkB,CAACD,MAAM,CAACI,wBAAwB,CAAC;UACzD;UACA,IAAI,CAACyC,UAAkB,CAACL,UAAU,CAAC;;UAEnC;UACA,OAAO,IAAI,CAAChG,SAAa,CAACyC,QAAQ,CAACK,UAAU,EAAE,CAAC;QAClD;QACA;QACA,IAAI,CAACwD,UAAe,CAAC9G,KAAK,CAAC;QAC3B;QACAqF,QAAQ,CAACgC,MAAM,CAACb,UAAU,CAAC;QAC3B;QACAA,UAAU,CAACO,OAAO,EAAE;MACtB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIO,YAAY,WAAAA,aAACC,UAAU,EAAEC,UAAU,EAAEC,OAAO,EAAEC,YAAY,EAAEnE,SAAS,EAAE;QACrE;QACA,IAAIoE,EAAE,GAAGpE,SAAS,CAACqE,IAAI,CAACL,UAAU,EAAEG,YAAY,EAAEF,UAAU,EAAEC,OAAO,CAAC;QACtE;QACA,IAAI,IAAI,CAACnH,SAAU,CAACkH,UAAU,CAAC,IAAI,IAAI,EAAE;UACvC,IAAI,CAAClH,SAAU,CAACkH,UAAU,CAAC,GAAG,CAAC,CAAC;QAClC;QACA;QACA,IAAIK,OAAO,GAAG,IAAI,CAACvH,SAAU,CAACkH,UAAU,CAAC;QACzCxI,EAAE,CAACO,IAAI,CAAC4D,cAAc,CAACC,QAAQ,CAACG,SAAS,CAAC;QAC1C,IAAIsE,OAAO,CAACtE,SAAS,CAACD,UAAU,EAAE,CAAC,EAAE;UACnC,IAAIuE,OAAO,CAACtE,SAAS,CAACD,UAAU,EAAE,CAAC,CAACqE,EAAE,EAAE;YACtC,MAAM,IAAIG,KAAK,CACb,yCAAyC,GAAGN,UAAU,GAAG,UAAU,CACpE;UACH;UACAK,OAAO,CAACtE,SAAS,CAACD,UAAU,EAAE,CAAC,CAACqE,EAAE,GAAGA,EAAE;QACzC,CAAC,MAAM;UACLE,OAAO,CAACtE,SAAS,CAACD,UAAU,EAAE,CAAC,GAAG;YAChCqE,EAAE,EAAEA,EAAE;YACNI,SAAS,EAAE,IAAI;YACf1E,QAAQ,EAAEqE;UACZ,CAAC;QACH;;QAEA;QACA,IAAI,CAAC,IAAI,CAACnH,SAAiB,CAACyH,QAAQ,CAACR,UAAU,CAAC,EAAE;UAChD,IAAI,CAACjH,SAAiB,CAAC0H,IAAI,CAACT,UAAU,CAAC;QACzC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIU,mBAAmB,WAAAA,oBACjBV,UAAU,EACVD,UAAU,EACVE,OAAO,EACPU,YAAY,EACZ5E,SAAS,EACT;QACA;QACA,IAAIoE,EAAE,GAAGQ,YAAY,CAACP,IAAI,CAACL,UAAU,EAAEhE,SAAS,EAAEiE,UAAU,EAAEC,OAAO,CAAC;;QAEtE;QACA,IAAI,IAAI,CAACnH,SAAU,CAACiH,UAAU,CAAC,IAAI,IAAI,EAAE;UACvC,IAAI,CAACjH,SAAU,CAACiH,UAAU,CAAC,GAAG,CAAC,CAAC;QAClC;QACA;QACA,IAAIM,OAAO,GAAG,IAAI,CAACvH,SAAU,CAACiH,UAAU,CAAC;QACzCvI,EAAE,CAACO,IAAI,CAAC4D,cAAc,CAACC,QAAQ,CAACG,SAAS,CAAC;QAC1C,IAAIsE,OAAO,CAACtE,SAAS,CAACD,UAAU,EAAE,CAAC,EAAE;UACnC,IAAIuE,OAAO,CAACtE,SAAS,CAACD,UAAU,EAAE,CAAC,CAACyE,SAAS,EAAE;YAC7C,MAAM,IAAID,KAAK,CACb,iDAAiD,GAC/CN,UAAU,GACV,UAAU,CACb;UACH;UACAK,OAAO,CAACtE,SAAS,CAACD,UAAU,EAAE,CAAC,CAACyE,SAAS,GAAGJ,EAAE;QAChD,CAAC,MAAM;UACLE,OAAO,CAACtE,SAAS,CAACD,UAAU,EAAE,CAAC,GAAG;YAChCqE,EAAE,EAAE,IAAI;YACRI,SAAS,EAAEJ,EAAE;YACbtE,QAAQ,EAAE8E;UACZ,CAAC;QACH;;QAEA;QACA,IAAI,CAAC,IAAI,CAAC5H,SAAiB,CAACyH,QAAQ,CAACT,UAAU,CAAC,EAAE;UAChD,IAAI,CAAChH,SAAiB,CAAC0H,IAAI,CAACV,UAAU,CAAC;QACzC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIa,qBAAqB,WAAAA,sBAAC/E,QAAQ,EAAEE,SAAS,EAAE;QACzC;QACA,IAAI,CAAC+D,YAAY,CACf,IAAI,CAACnC,YAAY,EAAE,EACnB,OAAO,EACP,IAAI,CAACkD,eAAe,EAAE,EACtBhF,QAAQ,EACRE,SAAS,CACV;;QAED;QACA,IAAI,IAAI,CAAC+E,WAAW,EAAE,IAAI,IAAI,EAAE;UAC9B,IAAI,CAAChB,YAAY,CACf,IAAI,CAACgB,WAAW,EAAE,EAClB,MAAM,EACN,IAAI,CAACC,cAAc,EAAE,EACrBlF,QAAQ,EACRE,SAAS,CACV;QACH;MACF,CAAC;MAED;AACJ;AACA;AACA;MACIrB,SAAe,WAAAsG,UAAA,EAAG;QAChB;QACA,IAAIC,SAAS;QACb,KAAK,IAAIC,GAAG,IAAI,IAAI,CAACpI,SAAU,EAAE;UAC/BmI,SAAS,GAAGC,GAAG;UACf;QACF;QACA;QACA;QACA,KAAK,IAAIC,IAAI,IAAI,IAAI,CAACrI,SAAU,CAACmI,SAAS,CAAC,EAAE;UAC3C;UACA,IAAIpF,QAAQ,GAAG,IAAI,CAAC/C,SAAU,CAACmI,SAAS,CAAC,CAACE,IAAI,CAAC,CAACtF,QAAQ;UACxD,IAAIE,SAAS,GAAGvE,EAAE,CAACO,IAAI,CAAC4D,cAAc,CAACyF,YAAY,CAACD,IAAI,CAAC;UACzD;UACA,IAAI,CAAC7B,UAAe,CAACvD,SAAS,CAAC;UAC/B;UACA,IAAI,CAAC+B,UAAY,CAAC/B,SAAS,EAAEF,QAAQ,CAAC;QACxC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIiC,UAAY,WAAAuD,WAACtF,SAAS,EAAEF,QAAQ,EAAE;QAChC,IAAI7B,QAAQ,GAAG,IAAI,CAACmD,WAAW,EAAE;QACjC;QACA,IAAInD,QAAQ,IAAI,IAAI,IAAIA,QAAQ,CAAC4D,QAAQ,IAAI,IAAI,EAAE;UACjD5D,QAAQ,CAAC4D,QAAQ,CAAC,IAAI,EAAE/B,QAAQ,EAAEE,SAAS,CAAC;;UAE5C;QACF,CAAC,MAAM;UACL,IAAI,CAAC6E,qBAAqB,CAAC/E,QAAQ,EAAEE,SAAS,CAAC;QACjD;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIuD,UAAe,WAAAgC,WAACvF,SAAS,EAAE;QACzB,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACrF,SAAiB,CAACsF,MAAM,EAAED,CAAC,EAAE,EAAE;UACtD,IAAIvB,QAAQ,GAAG,IAAI,CAAC9D,SAAiB,CAACqF,CAAC,CAAC;UACxC,IAAImD,WAAW,GAAG,IAAI,CAACzI,SAAU,CAAC+D,QAAQ,CAAC,CAACd,SAAS,CAACD,UAAU,EAAE,CAAC;UACnE,IAAIyF,WAAW,IAAI,IAAI,EAAE;YACvB,IAAIA,WAAW,CAACpB,EAAE,EAAE;cAClBpE,SAAS,CAACyF,aAAa,CAACD,WAAW,CAACpB,EAAE,CAAC;cACvCoB,WAAW,CAACpB,EAAE,GAAG,IAAI;YACvB;YACA,IAAIoB,WAAW,CAAChB,SAAS,EAAE;cACzBgB,WAAW,CAAC1F,QAAQ,CAAC2F,aAAa,CAACD,WAAW,CAAChB,SAAS,CAAC;cACzDgB,WAAW,CAAChB,SAAS,GAAG,IAAI;YAC9B;YACA,OAAO,IAAI,CAACzH,SAAU,CAAC+D,QAAQ,CAAC,CAACd,SAAS,CAACD,UAAU,EAAE,CAAC;UAC1D;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACI;AACJ;AACA;AACA;AACA;AACA;AACA;MACIxB,iBAAiB,WAAAA,kBAACF,KAAK,EAAEC,GAAG,EAAE;QAC5B,IACED,KAAK,IAAI,IAAI,IACbA,KAAK,CAACqD,aAAa,IAAI,IAAI,IAC3B,IAAI,CAAC/B,SAAS,EAAE,IAAI,IAAI,IACxB,IAAI,CAACX,QAAQ,EAAE,IAAI,IAAI,EACvB;UACA,IAAIU,QAAQ,GAAG,IAAI,CAACC,SAAS,EAAE,CAAC0D,OAAO,EAAE,CAACqC,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;UACrE,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3C,QAAQ,CAAC4C,MAAM,EAAED,CAAC,EAAE,EAAE;YACxChE,KAAK,CAACqD,aAAa,CAAChC,QAAQ,CAAC2C,CAAC,CAAC,CAAC;UAClC;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACI7D,cAAc,WAAAA,eAACH,KAAK,EAAEC,GAAG,EAAE;QACzB;QACA,IAAI,IAAI,CAACqB,SAAS,EAAE,IAAI,IAAI,IAAI,IAAI,CAACX,QAAQ,EAAE,IAAI,IAAI,EAAE;UACvD;QACF;QACA;QACA,IAAIX,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACgD,UAAU,IAAI,IAAI,EAAE;UAC7C;QACF;QACA;QACA,IACE/C,GAAG,IACHA,GAAG,CAAC+C,UAAU,IACdhD,KAAK,IACLA,KAAK,CAACgD,UAAU,IAChB/C,GAAG,CAAC+C,UAAU,IAAIhD,KAAK,CAACgD,UAAU,EAClC;UACA;QACF;QACA,IAAI,CAACsE,2BAA2B,EAAE;QAElC,IAAI,CAAC5G,SAAa,EAAE;QACpB,IAAI,CAACE,SAAW,EAAE;QAElB,IAAI,CAAC2G,yBAAyB,EAAE;QAChC,IAAI,CAAC1F,gBAAgB,EAAE;MACzB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIzB,YAAY,WAAAA,aAACJ,KAAK,EAAEC,GAAG,EAAE;QACvB;QACA,IAAID,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACwD,QAAQ,IAAI,IAAI,EAAE;UAC3C;UACA,IACEvD,GAAG,IAAI,IAAI,IACXA,GAAG,CAACuD,QAAQ,IAAI,IAAI,IACpBxD,KAAK,CAACwD,QAAQ,IAAIvD,GAAG,CAACuD,QAAQ,EAC9B;YACA;UACF;UACA,IAAI,CAAC5C,SAAW,EAAE;QACpB;MACF;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEE4G,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,IAAI,CAAClG,SAAS,EAAE,IAAI,CAAC,IAAI,CAACA,SAAS,EAAE,CAACmG,UAAU,EAAE,EAAE;QACtD,IAAI,CAACxI,SAAS,CAAC,IAAI,CAAC;MACtB;MACA,IAAI,IAAI,CAAC0B,QAAQ,EAAE,IAAI,IAAI,IAAI,CAAC,IAAI,CAACA,QAAQ,EAAE,CAAC8G,UAAU,EAAE,EAAE;QAC5D,IAAI,CAACzI,QAAQ,CAAC,IAAI,CAAC;MACrB;MACA,IAAI,CAACN,SAAU,GAAG,IAAI,CAACE,SAAa,GAAG,IAAI,CAACD,SAAiB,GAAG,IAAI;IACtE;EACF,CAAC,CAAC;EAh8BFvB,EAAE,CAACU,IAAI,CAACC,UAAU,CAAC2J,IAAI,CAACnK,aAAa,GAAGA,aAAa;AAAC"
}