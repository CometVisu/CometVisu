{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Tree.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "controller",
    "MSelection",
    "implement",
    "ISelection",
    "construct",
    "model",
    "target",
    "childPath",
    "labelPath",
    "__bindings",
    "__boundProperties",
    "__childrenRef",
    "a",
    "setChildPath",
    "setLabelPath",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "delegate",
    "members",
    "__oldChildrenPath",
    "_applyDelegate",
    "value",
    "old",
    "_setConfigureItem",
    "_setCreateItem",
    "_setBindItem",
    "_applyIconOptions",
    "__renewBindings",
    "_applyLabelOptions",
    "_applyTarget",
    "undefined",
    "__emptyTarget",
    "getModel",
    "__buildTree",
    "_addChangeTargetListener",
    "_applyModel",
    "_applyChildPath",
    "_applyIconPath",
    "_applyLabelPath",
    "__changeModelChildren",
    "ev",
    "children",
    "getTarget",
    "ObjectRegistry",
    "register",
    "treeNode",
    "toHashCode",
    "modelNode",
    "__updateTreeChildren",
    "_updateSelection",
    "__changeChildrenArray",
    "e",
    "getData",
    "oldChildren",
    "getOldData",
    "oldRef",
    "removeListenerById",
    "changeListenerId",
    "debug",
    "changeChildernListenerId",
    "property",
    "getPropertyDefinition",
    "constructor",
    "getChildPath",
    "eventName",
    "addListener",
    "_createItem",
    "getDelegate",
    "createItem",
    "item",
    "ui",
    "tree",
    "TreeFolder",
    "configureItem",
    "getLabelPath",
    "bindItem",
    "rootNode",
    "__addBinding",
    "setRoot",
    "lang",
    "String",
    "firstUp",
    "i",
    "length",
    "getChildren",
    "getItem",
    "j",
    "oldIndex",
    "currentNode",
    "isSelected",
    "wasSelected",
    "removeAt",
    "addAt",
    "addToSelection",
    "treeFolder",
    "__removeFolder",
    "root",
    "getRoot",
    "__removeAllFolders",
    "__removeBinding",
    "destroy",
    "b",
    "node",
    "childrenGetterName",
    "remove",
    "bindProperty",
    "sourcePath",
    "targetPath",
    "options",
    "targetWidget",
    "id",
    "bind",
    "storage",
    "Error",
    "reverseId",
    "includes",
    "push",
    "bindPropertyReverse",
    "sourceWidget",
    "bindDefaultProperties",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "firstProp",
    "key",
    "hash",
    "fromHashCode",
    "bindingsMap",
    "removeBinding",
    "getItems",
    "_startSelectionModification",
    "_endSelectionModification",
    "destruct",
    "isDisposed",
    "Tree"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * <h2>Tree Controller</h2>\n *\n * *General idea*\n *\n * The tree controller is the controller made for the {@link qx.ui.tree.Tree}\n * widget in qooxdoo. Therefore, it is responsible for creating and adding the\n * tree folders to the tree given as target.\n *\n * *Features*\n *\n * * Synchronize the model and the target\n * * Label and icon are bindable\n * * Takes care of the selection\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n *\n * *Usage*\n *\n * As model, you can use every qooxdoo widget structure having one property,\n * which is a data array holding the children of the current node. There can\n * be as many additional as you like.\n * You need to specify a model, a target, a child path and a label path to\n * make the controller work.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bin a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.Tree\",\n{\n  extend : qx.core.Object,\n  include: qx.data.controller.MSelection,\n  implement : [ qx.data.controller.ISelection ],\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.core.Object?null} The root element of the model, which holds\n   *   the data.\n   *\n   * @param target {qx.ui.tree.Tree?null} The target widgets which should be a tree.\n   *\n   * @param childPath {String?null} The name of the property in the model, which\n   *   holds the data array containing the children.\n   *\n   * @param labelPath {String?null} The name of the property in the model,\n   *   which holds the value to be displayed as the label of the tree items.\n   */\n  construct : function(model, target, childPath, labelPath)  {\n    this.base(arguments);\n\n    // internal bindings reference\n    this.__bindings = {};\n    this.__boundProperties = [];\n\n    // reference to the child\n    this.__childrenRef = { a:1 };\n\n    if (childPath != null) {\n      this.setChildPath(childPath);\n    }\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n    if (model != null) {\n      this.setModel(model);\n    }\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The root element of the data. */\n    model :\n    {\n      check: \"qx.core.Object\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n\n    /** The tree to bind the data to. */\n    target :\n    {\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      init: null,\n      nullable: true,\n      dereference: true\n    },\n\n\n    /** The name of the property, where the children are stored in the model. */\n    childPath :\n    {\n      check: \"String\",\n      apply: \"_applyChildPath\",\n      nullable: true\n    },\n\n\n    /**\n     * The name of the property, where the value for the tree folders label\n     * is stored in the model classes.\n     */\n    labelPath :\n    {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n\n    /**\n     * The name of the property, where the source for the tree folders icon\n     * is stored in the model classes.\n     */\n    iconPath :\n    {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions :\n    {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions :\n    {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * Delegation object, which can have one ore more function defined by the\n     * {@link IControllerDelegate} interface.\n     */\n    delegate :\n    {\n      apply: \"_applyDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // private members\n    __childrenRef : null,\n    __bindings : null,\n    __boundProperties : null,\n    __oldChildrenPath : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * If a new delegate is set, it applies the stored configuration for the\n     * tree folder to the already created folders once.\n     *\n     * @param value {qx.core.Object|null} The new delegate.\n     * @param old {qx.core.Object|null} The old delegate.\n     */\n    _applyDelegate: function(value, old) {\n      this._setConfigureItem(value, old);\n      this._setCreateItem(value, old);\n      this._setBindItem(value, old);\n    },\n\n\n    /**\n     * Apply-method which will be called after the icon options had been\n     * changed. This method will invoke a renewing of all bindings.\n     *\n     * @param value {Map|null} The new options map.\n     * @param old {Map|null} The old options map.\n     */\n    _applyIconOptions: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called after the label options had been\n     * changed. This method will invoke a renewing of all bindings.\n     *\n     * @param value {Map|null} The new options map.\n     * @param old {Map|null} The old options map.\n     */\n    _applyLabelOptions: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called after the target had been\n     * changed. This method will clean up the old tree and will initially\n     * build up the new tree containing the data from the model.\n     *\n     * @param value {qx.ui.tree.Tree|null} The new tree.\n     * @param old {qx.ui.tree.Tree|null} The old tree.\n     */\n    _applyTarget: function(value, old) {\n      // if there was an old target\n      if (old != undefined) {\n        this.__emptyTarget(old);\n      }\n\n      // if a model is set\n      if (this.getModel() != null) {\n        // build up the tree\n        this.__buildTree();\n      }\n\n      // add a listener for the target change\n      this._addChangeTargetListener(value, old);\n    },\n\n\n    /**\n     * Apply-method which will be called after the model had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {qx.core.Object|null} The new tree.\n     * @param old {qx.core.Object|null} The old tree.\n     */\n    _applyModel: function(value, old) {\n      this.__buildTree();\n    },\n\n\n    /**\n     * Apply-method which will be called after the child path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the children property.\n     * @param old {String|null} The old path to the children property.\n     */\n    _applyChildPath: function(value, old) {\n      // save the old name because it is needed to remove the old bindings\n      this.__oldChildrenPath = old;\n      this.__buildTree();\n      // reset the old name\n      this.__oldChildrenPath = null;\n    },\n\n\n    /**\n     * Apply-method which will be called after the icon path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the icon property.\n     * @param old {String|null} The old path or the icon property.\n     */\n    _applyIconPath: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called after the label path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the label property.\n     * @param old {String|null} The old path of the label property.\n     */\n    _applyLabelPath: function(value, old) {\n      this.__buildTree();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Handler function handling the change of a length of a children array.\n     * This method invokes a rebuild of the corresponding subtree.\n     *\n     * @param ev {qx.event.type.Event} The changeLength event of a data array.\n     */\n    __changeModelChildren: function(ev) {\n      // get the stored data\n      var children =  ev.getTarget();\n      qx.core.ObjectRegistry.register(children);\n      var treeNode = this.__childrenRef[children.toHashCode()].treeNode;\n      var modelNode = this.__childrenRef[children.toHashCode()].modelNode;\n      // update the subtree\n      this.__updateTreeChildren(treeNode, modelNode);\n\n      // update the selection in case a selected element has been removed\n      this._updateSelection();\n    },\n\n\n    /**\n     * Handler function taking care of the changes of the children array itself.\n     *\n     * @param e {qx.event.type.Data} Change event for the children property.\n     */\n    __changeChildrenArray: function(e) {\n      var children = e.getData();\n      var oldChildren = e.getOldData();\n\n      // get the old ref and delete it\n      var oldRef = this.__childrenRef[oldChildren.toHashCode()];\n      oldChildren.removeListenerById(oldRef.changeListenerId);\n      this.debug(\"1: removing children=\"+ oldChildren.toHashCode() + \" from this=\" + this.toHashCode());\n      delete this.__childrenRef[oldChildren.toHashCode()];\n      // remove the old change listener for the children\n      oldRef.modelNode.removeListenerById(oldRef.changeChildernListenerId);\n\n      // add a new change listener\n      var modelNode = oldRef.modelNode;\n      var property = qx.Class.getPropertyDefinition(\n        oldRef.modelNode.constructor, this.getChildPath()\n      );\n      var eventName = property.event;\n      var changeChildernListenerId = modelNode.addListener(\n        eventName, this.__changeChildrenArray, this\n      );\n\n      // add the new ref\n      var treeNode = oldRef.treeNode;\n      this.debug(\"1: adding children=\"+ children.toHashCode() + \" to this=\" + this.toHashCode());\n      this.__childrenRef[children.toHashCode()] =\n      {\n        modelNode: modelNode,\n        treeNode: treeNode,\n        changeListenerId: oldRef.changeListenerId,\n        changeChildernListenerId : changeChildernListenerId\n      };\n\n      // update the subtree\n      this.__updateTreeChildren(treeNode, modelNode);\n\n      // update the selection in case a selected element has been removed\n      this._updateSelection();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       ITEM HANDLING\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Creates a TreeFolder and delegates the configure method if a delegate is\n     * set and the needed function (configureItem) is available.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem} The created and configured TreeFolder.\n     */\n    _createItem: function() {\n      var delegate = this.getDelegate();\n      // check if a delegate and a create method is set\n      if (delegate != null && delegate.createItem != null) {\n        var item = delegate.createItem();\n      } else {\n        var item = new qx.ui.tree.TreeFolder();\n      }\n\n      // check if a delegate is set and if the configure function is available\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n      return item;\n    },\n\n\n    /**\n     * Internal helper function to build up the tree corresponding to the data\n     * stored in the model. This function creates the root node and hands the\n     * recursive creation of all subtrees to the {#__updateTreeChildren}\n     * function.\n     */\n    __buildTree: function() {\n      // only fill the target if there is a target, its known how to\n      // access the children and what needs to be displayed as label\n      if (this.getTarget() == null || this.getChildPath() == null) {\n        return;\n      }\n\n      // check for the binding knowledge\n      if (\n        (this.getLabelPath() == null && this.getDelegate() == null)\n        || (this.getLabelPath() == null && this.getDelegate() != null && this.getDelegate().bindItem == null)\n      ) {\n        return;\n      }\n\n      // Clean the target completely\n      this.__emptyTarget();\n\n      // only build up a new tree if a model is given\n      if (this.getModel() != null) {\n        // create a new root node\n        var rootNode = this._createItem();\n        rootNode.setModel(this.getModel());\n        // bind the root node\n        this.__addBinding(this.getModel(), rootNode);\n        this.__updateTreeChildren(rootNode, this.getModel());\n        // assign the new root once the tree has been built\n        this.getTarget().setRoot(rootNode);\n      }\n    },\n\n\n    /**\n     * Main method building up the tree folders corresponding to the given\n     * model node. The new created subtree will be added to the given tree node.\n     *\n     * @param rootNode {qx.ui.tree.TreeFolder} The tree folder to add the new\n     *   created subtree.\n     *\n     * @param modelNode {qx.core.Object} The model nodes which represent the\n     *   data in the current subtree.\n     */\n    __updateTreeChildren: function(rootNode, modelNode) {\n      // ignore items which don't have children\n      if (modelNode[\"get\" + qx.lang.String.firstUp(this.getChildPath())] == undefined) {\n        return;\n      }\n      // get all children of the current model node\n      var children =\n        modelNode[\"get\" + qx.lang.String.firstUp(this.getChildPath())]();\n\n      // store the children reference\n      if (this.__childrenRef[children.toHashCode()] == undefined) {\n        // add the listener for the change\n        var changeListenerId = children.addListener(\n          \"change\", this.__changeModelChildren, this\n        );\n        // add a listener for the change of the children array itself\n        var property = qx.Class.getPropertyDefinition(\n          modelNode.constructor, this.getChildPath()\n        );\n        var eventName = property.event;\n        var changeChildernListenerId = modelNode.addListener(\n          eventName, this.__changeChildrenArray, this\n        );\n        this.debug(\"2: adding children=\"+ children.toHashCode() + \" to this=\" + this.toHashCode());\n        this.__childrenRef[children.toHashCode()] =\n        {\n          modelNode: modelNode,\n          treeNode: rootNode,\n          changeListenerId: changeListenerId,\n          changeChildernListenerId : changeChildernListenerId\n        };\n      }\n\n      // go threw all children in the model\n      for (var i = 0; i < children.length; i++) {\n        // if there is no node in the tree or the current node does not fit\n        if (rootNode.getChildren()[i] == null || children.getItem(i) != rootNode.getChildren()[i].getModel())\n        {\n          //check if the node was just moved\n          for (var j = i; j < rootNode.getChildren().length; j++) {\n            if (rootNode.getChildren()[j].getModel() === children.getItem(i)) {\n              var oldIndex = j;\n              break;\n            }\n          }\n          // if it is in the tree\n          if (oldIndex != undefined) {\n            // get the corresponding node\n            var currentNode = rootNode.getChildren()[oldIndex];\n            // check if it is selected\n            if (this.getTarget().isSelected(currentNode)) {\n              var wasSelected = true;\n            }\n            // remove the item at its old place (will remove the selection)\n            rootNode.removeAt(oldIndex);\n            // add the node at the current position\n            rootNode.addAt(currentNode, i);\n            // select it again if it was selected\n            if (wasSelected) {\n              this.getTarget().addToSelection(currentNode);\n            }\n\n          // if the node is new\n          } else {\n            // add the child node\n            var treeNode = this._createItem();\n            treeNode.setModel(children.getItem(i));\n            rootNode.addAt(treeNode, i);\n            this.__addBinding(children.getItem(i), treeNode);\n\n            // add all children recursive\n            this.__updateTreeChildren(treeNode, children.getItem(i));\n          }\n        }\n      }\n      // remove the rest of the tree items if they exist\n      for (var i = rootNode.getChildren().length -1; i >= children.length; i--) {\n        var treeFolder = rootNode.getChildren()[i];\n        this.__removeFolder(treeFolder, rootNode);\n      }\n    },\n\n\n    /**\n     * Removes all folders and bindings for the current set target.\n     * @param tree {qx.ui.tree.Tree} The tree to empty.\n     */\n    __emptyTarget: function(tree) {\n      if (tree == null) {\n        tree = this.getTarget();\n      }\n      // only do something if a tree is set\n      if (tree == null) {\n        return;\n      }\n      // remove the root node\n      var root = tree.getRoot();\n      if (root != null) {\n        tree.setRoot(null);\n        this.__removeAllFolders(root);\n        var model = root.getModel();\n        if (model) {\n          this.__removeBinding(model);\n        }\n        root.destroy();\n        this.debug(\"erasing all children from this=\" + this.toHashCode());\n        this.__childrenRef = { b: 2};\n      }\n    },\n\n\n    /**\n     * Removes all child folders of the given tree node. Also removes all\n     * bindings for the removed folders.\n     *\n     * @param node {qx.ui.tree.core.AbstractTreeItem} The used tree folder.\n     */\n    __removeAllFolders: function(node) {\n      var children = node.getChildren() || [];\n      // remove all subchildren\n      for (var i = children.length - 1; i >= 0; i--) {\n        if (children[i].getChildren().length > 0) {\n          this.__removeAllFolders(children[i]);\n        }\n        this.__removeFolder(children[i], node);\n      }\n    },\n\n\n    /**\n     * Internal helper method removing the given folder form the given root\n     * node. All set bindings will be removed and the old tree folder will be\n     * destroyed.\n     *\n     * @param treeFolder {qx.ui.tree.core.AbstractTreeItem} The folder to remove.\n     * @param rootNode {qx.ui.tree.core.AbstractTreeItem} The folder holding the\n     *   treeFolder.\n     */\n    __removeFolder: function(treeFolder, rootNode) {\n      // get the model\n      var model = treeFolder.getModel();\n      var childPath = this.__oldChildrenPath || this.getChildPath();\n      var childrenGetterName = \"get\" + qx.lang.String.firstUp(childPath);\n\n      // if the model does have a child path\n      if (model[childrenGetterName] != undefined)\n      {\n        // remove the old children listener\n        var children = model[childrenGetterName]();\n      \tthis.debug(\"2: removing children=\"+ children.toHashCode() + \" from this=\" + this.toHashCode());\n        var oldRef = this.__childrenRef[children.toHashCode()];\n        children.removeListenerById(oldRef.changeListenerId);\n        model.removeListenerById(oldRef.changeChildernListenerId);\n        // also remove all its children [BUG #4296]\n        this.__removeAllFolders(treeFolder);\n\n        // delete the model reference\n        delete this.__childrenRef[children.toHashCode()];\n      }\n      // get the binding and remove it\n      this.__removeBinding(model);\n      // remove the folder from the tree\n      rootNode.remove(treeFolder);\n      // get rid of the old tree folder\n      treeFolder.destroy();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       BINDING STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for binding a given property from the model to the target\n     * widget.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetPath {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options to use by\n     *  {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param targetWidget {qx.ui.tree.core.AbstractTreeItem} The target widget.\n     * @param modelNode {var} The model node which should be bound to the target.\n     */\n    bindProperty: function(sourcePath, targetPath, options, targetWidget, modelNode) {\n      // set up the binding\n      var id = modelNode.bind(sourcePath, targetWidget, targetPath, options);\n      // check for the storage for the references\n      if (this.__bindings[targetPath] == null) {\n        this.__bindings[targetPath] = {};\n      }\n      // store the binding reference\n      var storage = this.__bindings[targetPath];\n      qx.core.ObjectRegistry.register(modelNode);\n      if (storage[modelNode.toHashCode()]) {\n        if (storage[modelNode.toHashCode()].id) {\n          throw new Error(\n            \"Can not bind the same target property '\" + targetPath + \"' twice.\"\n          );\n        }\n        storage[modelNode.toHashCode()].id = id;\n      } else {\n        storage[modelNode.toHashCode()] = {\n          id: id,\n          reverseId: null,\n          treeNode: targetWidget\n        };\n      }\n\n      // save the bound property\n      if (!this.__boundProperties.includes(targetPath)) {\n        this.__boundProperties.push(targetPath);\n      }\n    },\n\n\n    /**\n     * Helper method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourcePath {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options to use by\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param sourceWidget {qx.ui.tree.core.AbstractTreeItem} The source widget.\n     * @param modelNode {var} The model node which should be bound to the target.\n     */\n    bindPropertyReverse : function(\n      targetPath, sourcePath, options, sourceWidget, modelNode\n    )\n    {\n      // set up the binding\n      var id = sourceWidget.bind(sourcePath, modelNode, targetPath, options);\n\n      // check for the storage for the references\n      if (this.__bindings[sourcePath] == null) {\n        this.__bindings[sourcePath] = {};\n      }\n      // check if there is already a stored item\n      var storage = this.__bindings[sourcePath];\n      qx.core.ObjectRegistry.register(modelNode);\n      if (storage[modelNode.toHashCode()]) {\n        if (storage[modelNode.toHashCode()].reverseId) {\n          throw new Error(\n            \"Can not reverse bind the same target property '\" + targetPath + \"' twice.\"\n          );\n        }\n        storage[modelNode.toHashCode()].reverseId = id;\n      } else {\n        storage[modelNode.toHashCode()] = {\n          id: null,\n          reverseId: id,\n          treeNode: sourceWidget\n        };\n      }\n\n      // save the bound property\n      if (!this.__boundProperties.includes(sourcePath)) {\n        this.__boundProperties.push(sourcePath);\n      }\n    },\n\n\n    /**\n     * Helper method for binding the default properties (label and icon) from\n     * the model to the target widget.\n     *\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param treeNode {qx.ui.tree.core.AbstractTreeItem} The tree node\n     *   corresponding to the model node.\n     * @param modelNode {qx.core.Object} The model node holding the data.\n     */\n    bindDefaultProperties : function(treeNode, modelNode)\n    {\n      // label binding\n      this.bindProperty(this.getLabelPath(), \"label\", this.getLabelOptions(), treeNode, modelNode);\n\n      // icon binding\n      if (this.getIconPath() != null) {\n        this.bindProperty(this.getIconPath(), \"icon\", this.getIconOptions(), treeNode, modelNode);\n      }\n    },\n\n\n    /**\n     * Helper method renewing all bindings with the currently saved options and\n     * paths.\n     */\n    __renewBindings: function() {\n      // get the first bound property\n      var firstProp;\n      for (var key in this.__bindings) {\n        firstProp = key;\n        break;\n      }\n      // go through all stored bindings for that property\n      // (should have all the same amount of entries and tree nodes)\n      for (var hash in this.__bindings[firstProp]) {\n        // get the data\n        var treeNode = this.__bindings[firstProp][hash].treeNode;\n        var modelNode = qx.core.ObjectRegistry.fromHashCode(hash);\n        // remove the old bindings\n        this.__removeBinding(modelNode);\n        // add the new bindings\n        this.__addBinding(modelNode, treeNode);\n      }\n    },\n\n\n    /**\n     * Internal helper method adding the right bindings from the given\n     * modelNode to the given treeNode.\n     *\n     * @param modelNode {qx.core.Object} The model node holding the data.\n     * @param treeNode {qx.ui.tree.TreeFolder} The corresponding tree folder\n     *   to the model node.\n     */\n    __addBinding: function(modelNode, treeNode) {\n      var delegate = this.getDelegate();\n      // if a delegate for creating the binding is given, use it\n      if (delegate != null && delegate.bindItem != null) {\n        delegate.bindItem(this, treeNode, modelNode);\n\n      // otherwise, try to bind the listItem by default\n      } else {\n        this.bindDefaultProperties(treeNode, modelNode);\n      }\n    },\n\n\n    /**\n     * Internal helper method for removing bindings for a given model node.\n     *\n     * @param modelNode {qx.core.Object} the model node for which the bindings\n     *   should be removed.\n     */\n    __removeBinding: function(modelNode) {\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        var property = this.__boundProperties[i];\n        var bindingsMap = this.__bindings[property][modelNode.toHashCode()];\n        if (bindingsMap != null) {\n          if (bindingsMap.id) {\n            modelNode.removeBinding(bindingsMap.id);\n            bindingsMap.id = null;\n          }\n          if (bindingsMap.reverseId) {\n            bindingsMap.treeNode.removeBinding(bindingsMap.reverseId);\n            bindingsMap.reverseId = null;\n          }\n          delete this.__bindings[property][modelNode.toHashCode()];\n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       DELEGATE HELPER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for applying the delegate It checks if a configureItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setConfigureItem: function(value, old) {\n      if (\n        value != null && value.configureItem != null &&\n        this.getTarget() != null && this.getModel() != null\n      ) {\n        var children = this.getTarget().getRoot().getItems(true, true, false);\n        for (var i = 0; i < children.length; i++) {\n          value.configureItem(children[i]);\n        }\n      }\n    },\n\n\n    /**\n     * Helper method for applying the delegate. It checks if a createItem\n     * is set and invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setCreateItem: function(value, old) {\n      // do nothing if no tree can be build\n      if (this.getTarget() == null || this.getModel() == null) {\n        return;\n      }\n      // do nothing if no delegate function is set\n      if (value == null || value.createItem == null) {\n        return;\n      }\n      // do nothing it the delegate function has not changed\n      if (old && old.createItem && value && value.createItem && old.createItem == value.createItem) {\n        return;\n      }\n      this._startSelectionModification();\n\n      this.__emptyTarget();\n      this.__buildTree();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n\n    /**\n     * Helper method for applying the delegate It checks if a bindItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setBindItem: function(value, old) {\n      // if a new bindItem function is set\n      if (value != null && value.bindItem != null) {\n        // do nothing if the bindItem function did not change\n        if (old != null && old.bindItem != null && value.bindItem == old.bindItem) {\n          return;\n        }\n        this.__buildTree();\n      }\n    }\n  },\n\n\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n   destruct : function() {\n  \t if (this.getTarget() && !this.getTarget().isDisposed()) {\n  \t\t this.setTarget(null);\n  \t }\n     if (this.getModel() != null && !this.getModel().isDisposed()) {\n    \t this.setModel(null);\n     }\n     this.__bindings = this.__childrenRef = this.__boundProperties = null;\n   }\n});\n"
  ]
}