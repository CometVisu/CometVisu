{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "controller",
    "MSelection",
    "implement",
    "ISelection",
    "construct",
    "model",
    "target",
    "childPath",
    "labelPath",
    "__bindings",
    "__boundProperties",
    "__childrenRef",
    "a",
    "setChildPath",
    "setLabelPath",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "delegate",
    "members",
    "__oldChildrenPath",
    "_applyDelegate",
    "value",
    "old",
    "_setConfigureItem",
    "_setCreateItem",
    "_setBindItem",
    "_applyIconOptions",
    "__renewBindings",
    "_applyLabelOptions",
    "_applyTarget",
    "undefined",
    "__emptyTarget",
    "getModel",
    "__buildTree",
    "_addChangeTargetListener",
    "_applyModel",
    "_applyChildPath",
    "_applyIconPath",
    "_applyLabelPath",
    "__changeModelChildren",
    "ev",
    "children",
    "getTarget",
    "ObjectRegistry",
    "register",
    "treeNode",
    "toHashCode",
    "modelNode",
    "__updateTreeChildren",
    "_updateSelection",
    "__changeChildrenArray",
    "e",
    "getData",
    "oldChildren",
    "getOldData",
    "oldRef",
    "removeListenerById",
    "changeListenerId",
    "debug",
    "changeChildernListenerId",
    "property",
    "getPropertyDefinition",
    "constructor",
    "getChildPath",
    "eventName",
    "addListener",
    "_createItem",
    "getDelegate",
    "createItem",
    "item",
    "ui",
    "tree",
    "TreeFolder",
    "configureItem",
    "getLabelPath",
    "bindItem",
    "rootNode",
    "__addBinding",
    "setRoot",
    "lang",
    "String",
    "firstUp",
    "i",
    "length",
    "getChildren",
    "getItem",
    "j",
    "oldIndex",
    "currentNode",
    "isSelected",
    "wasSelected",
    "removeAt",
    "addAt",
    "addToSelection",
    "treeFolder",
    "__removeFolder",
    "root",
    "getRoot",
    "__removeAllFolders",
    "__removeBinding",
    "destroy",
    "b",
    "node",
    "childrenGetterName",
    "remove",
    "bindProperty",
    "sourcePath",
    "targetPath",
    "options",
    "targetWidget",
    "id",
    "bind",
    "storage",
    "Error",
    "reverseId",
    "includes",
    "push",
    "bindPropertyReverse",
    "sourceWidget",
    "bindDefaultProperties",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "firstProp",
    "key",
    "hash",
    "fromHashCode",
    "bindingsMap",
    "removeBinding",
    "getItems",
    "_startSelectionModification",
    "_endSelectionModification",
    "destruct",
    "isDisposed",
    "Tree"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Tree.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * <h2>Tree Controller</h2>\n *\n * *General idea*\n *\n * The tree controller is the controller made for the {@link qx.ui.tree.Tree}\n * widget in qooxdoo. Therefore, it is responsible for creating and adding the\n * tree folders to the tree given as target.\n *\n * *Features*\n *\n * * Synchronize the model and the target\n * * Label and icon are bindable\n * * Takes care of the selection\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n *\n * *Usage*\n *\n * As model, you can use every qooxdoo widget structure having one property,\n * which is a data array holding the children of the current node. There can\n * be as many additional as you like.\n * You need to specify a model, a target, a child path and a label path to\n * make the controller work.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bin a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.Tree\", {\n  extend: qx.core.Object,\n  include: qx.data.controller.MSelection,\n  implement: [qx.data.controller.ISelection],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.core.Object?null} The root element of the model, which holds\n   *   the data.\n   *\n   * @param target {qx.ui.tree.Tree?null} The target widgets which should be a tree.\n   *\n   * @param childPath {String?null} The name of the property in the model, which\n   *   holds the data array containing the children.\n   *\n   * @param labelPath {String?null} The name of the property in the model,\n   *   which holds the value to be displayed as the label of the tree items.\n   */\n  construct(model, target, childPath, labelPath) {\n    super();\n\n    // internal bindings reference\n    this.__bindings = {};\n    this.__boundProperties = [];\n\n    // reference to the child\n    this.__childrenRef = { a: 1 };\n\n    if (childPath != null) {\n      this.setChildPath(childPath);\n    }\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n    if (model != null) {\n      this.setModel(model);\n    }\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The root element of the data. */\n    model: {\n      check: \"qx.core.Object\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n    /** The tree to bind the data to. */\n    target: {\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      init: null,\n      nullable: true,\n      dereference: true\n    },\n\n    /** The name of the property, where the children are stored in the model. */\n    childPath: {\n      check: \"String\",\n      apply: \"_applyChildPath\",\n      nullable: true\n    },\n\n    /**\n     * The name of the property, where the value for the tree folders label\n     * is stored in the model classes.\n     */\n    labelPath: {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n    /**\n     * The name of the property, where the source for the tree folders icon\n     * is stored in the model classes.\n     */\n    iconPath: {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions: {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions: {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n    /**\n     * Delegation object, which can have one ore more function defined by the\n     * {@link IControllerDelegate} interface.\n     */\n    delegate: {\n      apply: \"_applyDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // private members\n    __childrenRef: null,\n    __bindings: null,\n    __boundProperties: null,\n    __oldChildrenPath: null,\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * If a new delegate is set, it applies the stored configuration for the\n     * tree folder to the already created folders once.\n     *\n     * @param value {qx.core.Object|null} The new delegate.\n     * @param old {qx.core.Object|null} The old delegate.\n     */\n    _applyDelegate(value, old) {\n      this._setConfigureItem(value, old);\n      this._setCreateItem(value, old);\n      this._setBindItem(value, old);\n    },\n\n    /**\n     * Apply-method which will be called after the icon options had been\n     * changed. This method will invoke a renewing of all bindings.\n     *\n     * @param value {Map|null} The new options map.\n     * @param old {Map|null} The old options map.\n     */\n    _applyIconOptions(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called after the label options had been\n     * changed. This method will invoke a renewing of all bindings.\n     *\n     * @param value {Map|null} The new options map.\n     * @param old {Map|null} The old options map.\n     */\n    _applyLabelOptions(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called after the target had been\n     * changed. This method will clean up the old tree and will initially\n     * build up the new tree containing the data from the model.\n     *\n     * @param value {qx.ui.tree.Tree|null} The new tree.\n     * @param old {qx.ui.tree.Tree|null} The old tree.\n     */\n    _applyTarget(value, old) {\n      // if there was an old target\n      if (old != undefined) {\n        this.__emptyTarget(old);\n      }\n\n      // if a model is set\n      if (this.getModel() != null) {\n        // build up the tree\n        this.__buildTree();\n      }\n\n      // add a listener for the target change\n      this._addChangeTargetListener(value, old);\n    },\n\n    /**\n     * Apply-method which will be called after the model had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {qx.core.Object|null} The new tree.\n     * @param old {qx.core.Object|null} The old tree.\n     */\n    _applyModel(value, old) {\n      this.__buildTree();\n    },\n\n    /**\n     * Apply-method which will be called after the child path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the children property.\n     * @param old {String|null} The old path to the children property.\n     */\n    _applyChildPath(value, old) {\n      // save the old name because it is needed to remove the old bindings\n      this.__oldChildrenPath = old;\n      this.__buildTree();\n      // reset the old name\n      this.__oldChildrenPath = null;\n    },\n\n    /**\n     * Apply-method which will be called after the icon path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the icon property.\n     * @param old {String|null} The old path or the icon property.\n     */\n    _applyIconPath(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called after the label path had been\n     * changed. This method invoke a new building of the tree.\n     *\n     * @param value {String|null} The new path to the label property.\n     * @param old {String|null} The old path of the label property.\n     */\n    _applyLabelPath(value, old) {\n      this.__buildTree();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Handler function handling the change of a length of a children array.\n     * This method invokes a rebuild of the corresponding subtree.\n     *\n     * @param ev {qx.event.type.Event} The changeLength event of a data array.\n     */\n    __changeModelChildren(ev) {\n      // get the stored data\n      var children = ev.getTarget();\n      qx.core.ObjectRegistry.register(children);\n      var treeNode = this.__childrenRef[children.toHashCode()].treeNode;\n      var modelNode = this.__childrenRef[children.toHashCode()].modelNode;\n      // update the subtree\n      this.__updateTreeChildren(treeNode, modelNode);\n\n      // update the selection in case a selected element has been removed\n      this._updateSelection();\n    },\n\n    /**\n     * Handler function taking care of the changes of the children array itself.\n     *\n     * @param e {qx.event.type.Data} Change event for the children property.\n     */\n    __changeChildrenArray(e) {\n      var children = e.getData();\n      var oldChildren = e.getOldData();\n\n      // get the old ref and delete it\n      var oldRef = this.__childrenRef[oldChildren.toHashCode()];\n      oldChildren.removeListenerById(oldRef.changeListenerId);\n      this.debug(\n        \"1: removing children=\" +\n          oldChildren.toHashCode() +\n          \" from this=\" +\n          this.toHashCode()\n      );\n\n      delete this.__childrenRef[oldChildren.toHashCode()];\n      // remove the old change listener for the children\n      oldRef.modelNode.removeListenerById(oldRef.changeChildernListenerId);\n\n      // add a new change listener\n      var modelNode = oldRef.modelNode;\n      var property = qx.Class.getPropertyDefinition(\n        oldRef.modelNode.constructor,\n        this.getChildPath()\n      );\n\n      var eventName = property.event;\n      var changeChildernListenerId = modelNode.addListener(\n        eventName,\n        this.__changeChildrenArray,\n        this\n      );\n\n      // add the new ref\n      var treeNode = oldRef.treeNode;\n      this.debug(\n        \"1: adding children=\" +\n          children.toHashCode() +\n          \" to this=\" +\n          this.toHashCode()\n      );\n\n      this.__childrenRef[children.toHashCode()] = {\n        modelNode: modelNode,\n        treeNode: treeNode,\n        changeListenerId: oldRef.changeListenerId,\n        changeChildernListenerId: changeChildernListenerId\n      };\n\n      // update the subtree\n      this.__updateTreeChildren(treeNode, modelNode);\n\n      // update the selection in case a selected element has been removed\n      this._updateSelection();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       ITEM HANDLING\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Creates a TreeFolder and delegates the configure method if a delegate is\n     * set and the needed function (configureItem) is available.\n     *\n     * @return {qx.ui.tree.core.AbstractTreeItem} The created and configured TreeFolder.\n     */\n    _createItem() {\n      var delegate = this.getDelegate();\n      // check if a delegate and a create method is set\n      if (delegate != null && delegate.createItem != null) {\n        var item = delegate.createItem();\n      } else {\n        var item = new qx.ui.tree.TreeFolder();\n      }\n\n      // check if a delegate is set and if the configure function is available\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n      return item;\n    },\n\n    /**\n     * Internal helper function to build up the tree corresponding to the data\n     * stored in the model. This function creates the root node and hands the\n     * recursive creation of all subtrees to the {#__updateTreeChildren}\n     * function.\n     */\n    __buildTree() {\n      // only fill the target if there is a target, its known how to\n      // access the children and what needs to be displayed as label\n      if (this.getTarget() == null || this.getChildPath() == null) {\n        return;\n      }\n\n      // check for the binding knowledge\n      if (\n        (this.getLabelPath() == null && this.getDelegate() == null) ||\n        (this.getLabelPath() == null &&\n          this.getDelegate() != null &&\n          this.getDelegate().bindItem == null)\n      ) {\n        return;\n      }\n\n      // Clean the target completely\n      this.__emptyTarget();\n\n      // only build up a new tree if a model is given\n      if (this.getModel() != null) {\n        // create a new root node\n        var rootNode = this._createItem();\n        rootNode.setModel(this.getModel());\n        // bind the root node\n        this.__addBinding(this.getModel(), rootNode);\n        this.__updateTreeChildren(rootNode, this.getModel());\n        // assign the new root once the tree has been built\n        this.getTarget().setRoot(rootNode);\n      }\n    },\n\n    /**\n     * Main method building up the tree folders corresponding to the given\n     * model node. The new created subtree will be added to the given tree node.\n     *\n     * @param rootNode {qx.ui.tree.TreeFolder} The tree folder to add the new\n     *   created subtree.\n     *\n     * @param modelNode {qx.core.Object} The model nodes which represent the\n     *   data in the current subtree.\n     */\n    __updateTreeChildren(rootNode, modelNode) {\n      // ignore items which don't have children\n      if (\n        modelNode[\"get\" + qx.lang.String.firstUp(this.getChildPath())] ==\n        undefined\n      ) {\n        return;\n      }\n      // get all children of the current model node\n      var children =\n        modelNode[\"get\" + qx.lang.String.firstUp(this.getChildPath())]();\n\n      // store the children reference\n      if (this.__childrenRef[children.toHashCode()] == undefined) {\n        // add the listener for the change\n        var changeListenerId = children.addListener(\n          \"change\",\n          this.__changeModelChildren,\n          this\n        );\n\n        // add a listener for the change of the children array itself\n        var property = qx.Class.getPropertyDefinition(\n          modelNode.constructor,\n          this.getChildPath()\n        );\n\n        var eventName = property.event;\n        var changeChildernListenerId = modelNode.addListener(\n          eventName,\n          this.__changeChildrenArray,\n          this\n        );\n\n        this.debug(\n          \"2: adding children=\" +\n            children.toHashCode() +\n            \" to this=\" +\n            this.toHashCode()\n        );\n\n        this.__childrenRef[children.toHashCode()] = {\n          modelNode: modelNode,\n          treeNode: rootNode,\n          changeListenerId: changeListenerId,\n          changeChildernListenerId: changeChildernListenerId\n        };\n      }\n\n      // go threw all children in the model\n      for (var i = 0; i < children.length; i++) {\n        // if there is no node in the tree or the current node does not fit\n        if (\n          rootNode.getChildren()[i] == null ||\n          children.getItem(i) != rootNode.getChildren()[i].getModel()\n        ) {\n          //check if the node was just moved\n          for (var j = i; j < rootNode.getChildren().length; j++) {\n            if (rootNode.getChildren()[j].getModel() === children.getItem(i)) {\n              var oldIndex = j;\n              break;\n            }\n          }\n          // if it is in the tree\n          if (oldIndex != undefined) {\n            // get the corresponding node\n            var currentNode = rootNode.getChildren()[oldIndex];\n            // check if it is selected\n            if (this.getTarget().isSelected(currentNode)) {\n              var wasSelected = true;\n            }\n            // remove the item at its old place (will remove the selection)\n            rootNode.removeAt(oldIndex);\n            // add the node at the current position\n            rootNode.addAt(currentNode, i);\n            // select it again if it was selected\n            if (wasSelected) {\n              this.getTarget().addToSelection(currentNode);\n            }\n\n            // if the node is new\n          } else {\n            // add the child node\n            var treeNode = this._createItem();\n            treeNode.setModel(children.getItem(i));\n            rootNode.addAt(treeNode, i);\n            this.__addBinding(children.getItem(i), treeNode);\n\n            // add all children recursive\n            this.__updateTreeChildren(treeNode, children.getItem(i));\n          }\n        }\n      }\n      // remove the rest of the tree items if they exist\n      for (\n        var i = rootNode.getChildren().length - 1;\n        i >= children.length;\n        i--\n      ) {\n        var treeFolder = rootNode.getChildren()[i];\n        this.__removeFolder(treeFolder, rootNode);\n      }\n    },\n\n    /**\n     * Removes all folders and bindings for the current set target.\n     * @param tree {qx.ui.tree.Tree} The tree to empty.\n     */\n    __emptyTarget(tree) {\n      if (tree == null) {\n        tree = this.getTarget();\n      }\n      // only do something if a tree is set\n      if (tree == null) {\n        return;\n      }\n      // remove the root node\n      var root = tree.getRoot();\n      if (root != null) {\n        tree.setRoot(null);\n        this.__removeAllFolders(root);\n        var model = root.getModel();\n        if (model) {\n          this.__removeBinding(model);\n        }\n        root.destroy();\n        this.debug(\"erasing all children from this=\" + this.toHashCode());\n        this.__childrenRef = { b: 2 };\n      }\n    },\n\n    /**\n     * Removes all child folders of the given tree node. Also removes all\n     * bindings for the removed folders.\n     *\n     * @param node {qx.ui.tree.core.AbstractTreeItem} The used tree folder.\n     */\n    __removeAllFolders(node) {\n      var children = node.getChildren() || [];\n      // remove all subchildren\n      for (var i = children.length - 1; i >= 0; i--) {\n        if (children[i].getChildren().length > 0) {\n          this.__removeAllFolders(children[i]);\n        }\n        this.__removeFolder(children[i], node);\n      }\n    },\n\n    /**\n     * Internal helper method removing the given folder form the given root\n     * node. All set bindings will be removed and the old tree folder will be\n     * destroyed.\n     *\n     * @param treeFolder {qx.ui.tree.core.AbstractTreeItem} The folder to remove.\n     * @param rootNode {qx.ui.tree.core.AbstractTreeItem} The folder holding the\n     *   treeFolder.\n     */\n    __removeFolder(treeFolder, rootNode) {\n      // get the model\n      var model = treeFolder.getModel();\n      var childPath = this.__oldChildrenPath || this.getChildPath();\n      var childrenGetterName = \"get\" + qx.lang.String.firstUp(childPath);\n\n      // if the model does have a child path\n      if (model[childrenGetterName] != undefined) {\n        // remove the old children listener\n        var children = model[childrenGetterName]();\n        this.debug(\n          \"2: removing children=\" +\n            children.toHashCode() +\n            \" from this=\" +\n            this.toHashCode()\n        );\n\n        var oldRef = this.__childrenRef[children.toHashCode()];\n        children.removeListenerById(oldRef.changeListenerId);\n        model.removeListenerById(oldRef.changeChildernListenerId);\n        // also remove all its children [BUG #4296]\n        this.__removeAllFolders(treeFolder);\n\n        // delete the model reference\n        delete this.__childrenRef[children.toHashCode()];\n      }\n      // get the binding and remove it\n      this.__removeBinding(model);\n      // remove the folder from the tree\n      rootNode.remove(treeFolder);\n      // get rid of the old tree folder\n      treeFolder.destroy();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       BINDING STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for binding a given property from the model to the target\n     * widget.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetPath {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options to use by\n     *  {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param targetWidget {qx.ui.tree.core.AbstractTreeItem} The target widget.\n     * @param modelNode {var} The model node which should be bound to the target.\n     */\n    bindProperty(sourcePath, targetPath, options, targetWidget, modelNode) {\n      // set up the binding\n      var id = modelNode.bind(sourcePath, targetWidget, targetPath, options);\n      // check for the storage for the references\n      if (this.__bindings[targetPath] == null) {\n        this.__bindings[targetPath] = {};\n      }\n      // store the binding reference\n      var storage = this.__bindings[targetPath];\n      qx.core.ObjectRegistry.register(modelNode);\n      if (storage[modelNode.toHashCode()]) {\n        if (storage[modelNode.toHashCode()].id) {\n          throw new Error(\n            \"Can not bind the same target property '\" + targetPath + \"' twice.\"\n          );\n        }\n        storage[modelNode.toHashCode()].id = id;\n      } else {\n        storage[modelNode.toHashCode()] = {\n          id: id,\n          reverseId: null,\n          treeNode: targetWidget\n        };\n      }\n\n      // save the bound property\n      if (!this.__boundProperties.includes(targetPath)) {\n        this.__boundProperties.push(targetPath);\n      }\n    },\n\n    /**\n     * Helper method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourcePath {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options to use by\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param sourceWidget {qx.ui.tree.core.AbstractTreeItem} The source widget.\n     * @param modelNode {var} The model node which should be bound to the target.\n     */\n    bindPropertyReverse(\n      targetPath,\n      sourcePath,\n      options,\n      sourceWidget,\n      modelNode\n    ) {\n      // set up the binding\n      var id = sourceWidget.bind(sourcePath, modelNode, targetPath, options);\n\n      // check for the storage for the references\n      if (this.__bindings[sourcePath] == null) {\n        this.__bindings[sourcePath] = {};\n      }\n      // check if there is already a stored item\n      var storage = this.__bindings[sourcePath];\n      qx.core.ObjectRegistry.register(modelNode);\n      if (storage[modelNode.toHashCode()]) {\n        if (storage[modelNode.toHashCode()].reverseId) {\n          throw new Error(\n            \"Can not reverse bind the same target property '\" +\n              targetPath +\n              \"' twice.\"\n          );\n        }\n        storage[modelNode.toHashCode()].reverseId = id;\n      } else {\n        storage[modelNode.toHashCode()] = {\n          id: null,\n          reverseId: id,\n          treeNode: sourceWidget\n        };\n      }\n\n      // save the bound property\n      if (!this.__boundProperties.includes(sourcePath)) {\n        this.__boundProperties.push(sourcePath);\n      }\n    },\n\n    /**\n     * Helper method for binding the default properties (label and icon) from\n     * the model to the target widget.\n     *\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param treeNode {qx.ui.tree.core.AbstractTreeItem} The tree node\n     *   corresponding to the model node.\n     * @param modelNode {qx.core.Object} The model node holding the data.\n     */\n    bindDefaultProperties(treeNode, modelNode) {\n      // label binding\n      this.bindProperty(\n        this.getLabelPath(),\n        \"label\",\n        this.getLabelOptions(),\n        treeNode,\n        modelNode\n      );\n\n      // icon binding\n      if (this.getIconPath() != null) {\n        this.bindProperty(\n          this.getIconPath(),\n          \"icon\",\n          this.getIconOptions(),\n          treeNode,\n          modelNode\n        );\n      }\n    },\n\n    /**\n     * Helper method renewing all bindings with the currently saved options and\n     * paths.\n     */\n    __renewBindings() {\n      // get the first bound property\n      var firstProp;\n      for (var key in this.__bindings) {\n        firstProp = key;\n        break;\n      }\n      // go through all stored bindings for that property\n      // (should have all the same amount of entries and tree nodes)\n      for (var hash in this.__bindings[firstProp]) {\n        // get the data\n        var treeNode = this.__bindings[firstProp][hash].treeNode;\n        var modelNode = qx.core.ObjectRegistry.fromHashCode(hash);\n        // remove the old bindings\n        this.__removeBinding(modelNode);\n        // add the new bindings\n        this.__addBinding(modelNode, treeNode);\n      }\n    },\n\n    /**\n     * Internal helper method adding the right bindings from the given\n     * modelNode to the given treeNode.\n     *\n     * @param modelNode {qx.core.Object} The model node holding the data.\n     * @param treeNode {qx.ui.tree.TreeFolder} The corresponding tree folder\n     *   to the model node.\n     */\n    __addBinding(modelNode, treeNode) {\n      var delegate = this.getDelegate();\n      // if a delegate for creating the binding is given, use it\n      if (delegate != null && delegate.bindItem != null) {\n        delegate.bindItem(this, treeNode, modelNode);\n\n        // otherwise, try to bind the listItem by default\n      } else {\n        this.bindDefaultProperties(treeNode, modelNode);\n      }\n    },\n\n    /**\n     * Internal helper method for removing bindings for a given model node.\n     *\n     * @param modelNode {qx.core.Object} the model node for which the bindings\n     *   should be removed.\n     */\n    __removeBinding(modelNode) {\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        var property = this.__boundProperties[i];\n        var bindingsMap = this.__bindings[property][modelNode.toHashCode()];\n        if (bindingsMap != null) {\n          if (bindingsMap.id) {\n            modelNode.removeBinding(bindingsMap.id);\n            bindingsMap.id = null;\n          }\n          if (bindingsMap.reverseId) {\n            bindingsMap.treeNode.removeBinding(bindingsMap.reverseId);\n            bindingsMap.reverseId = null;\n          }\n          delete this.__bindings[property][modelNode.toHashCode()];\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       DELEGATE HELPER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for applying the delegate It checks if a configureItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setConfigureItem(value, old) {\n      if (\n        value != null &&\n        value.configureItem != null &&\n        this.getTarget() != null &&\n        this.getModel() != null\n      ) {\n        var children = this.getTarget().getRoot().getItems(true, true, false);\n        for (var i = 0; i < children.length; i++) {\n          value.configureItem(children[i]);\n        }\n      }\n    },\n\n    /**\n     * Helper method for applying the delegate. It checks if a createItem\n     * is set and invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setCreateItem(value, old) {\n      // do nothing if no tree can be build\n      if (this.getTarget() == null || this.getModel() == null) {\n        return;\n      }\n      // do nothing if no delegate function is set\n      if (value == null || value.createItem == null) {\n        return;\n      }\n      // do nothing it the delegate function has not changed\n      if (\n        old &&\n        old.createItem &&\n        value &&\n        value.createItem &&\n        old.createItem == value.createItem\n      ) {\n        return;\n      }\n      this._startSelectionModification();\n\n      this.__emptyTarget();\n      this.__buildTree();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n    /**\n     * Helper method for applying the delegate It checks if a bindItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setBindItem(value, old) {\n      // if a new bindItem function is set\n      if (value != null && value.bindItem != null) {\n        // do nothing if the bindItem function did not change\n        if (\n          old != null &&\n          old.bindItem != null &&\n          value.bindItem == old.bindItem\n        ) {\n          return;\n        }\n        this.__buildTree();\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct() {\n    if (this.getTarget() && !this.getTarget().isDisposed()) {\n      this.setTarget(null);\n    }\n    if (this.getModel() != null && !this.getModel().isDisposed()) {\n      this.setModel(null);\n    }\n    this.__bindings = this.__childrenRef = this.__boundProperties = null;\n  }\n});\n"
  ],
  "mappings": "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"
}