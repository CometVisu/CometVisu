{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "data",
    "controller",
    "List",
    "construct",
    "model",
    "widget",
    "path",
    "constructor",
    "call",
    "setChecked",
    "Array",
    "setModel",
    "properties",
    "checked",
    "init",
    "nullable",
    "check",
    "event",
    "apply",
    "checkedLabelPath",
    "checkedIconPath",
    "checkedLabelOptions",
    "checkedIconOptions",
    "members",
    "_applyChecked",
    "value",
    "oldValue",
    "removeListener",
    "__onCheckedChange",
    "addListener",
    "_updateChecked",
    "_createItem",
    "delegate",
    "getDelegate",
    "item",
    "createItem",
    "ui",
    "form",
    "CheckBox",
    "configureItem",
    "__P_172_1",
    "evt",
    "getData",
    "type",
    "update",
    "CheckedList",
    "superclass",
    "prototype",
    "_setFilter",
    "old",
    "__syncModelChecked",
    "core",
    "queue",
    "Widget",
    "add",
    "syncWidget",
    "_applyModel",
    "getLength",
    "getChecked",
    "removeAll",
    "_applyTarget",
    "__onTargetCheckedChange",
    "supportsEvent",
    "__onTargetAttachResultsTag",
    "__onTargetDetachResultsTag",
    "__P_172_3",
    "__inUpdateChecked",
    "target",
    "getTarget",
    "replacement",
    "forEach",
    "itemModel",
    "getModel",
    "push",
    "replace",
    "__P_172_4",
    "_evt$getData",
    "tagWidget",
    "setUserData",
    "classname",
    "__attachTag",
    "__P_172_5",
    "_evt$getData2",
    "__detachTag",
    "__updateTags",
    "__P_172_0",
    "_this",
    "getUserData",
    "__P_172_7",
    "bindData",
    "getCheckedLabelPath",
    "checkedLabelId",
    "bind",
    "getCheckedLabelOptions",
    "getCheckedIconPath",
    "checkedIconId",
    "getCheckedIconOptions",
    "__P_172_8",
    "removeListenerById",
    "children",
    "toUncheck",
    "getChildren",
    "hash",
    "toHashCode",
    "getValue",
    "toRemove",
    "setValue",
    "Object",
    "values",
    "remove"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/CheckedList.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2021-2021 Zenesis Limited https://www.zenesis.com\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * John Spackman (github.com/johnspackman)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Extension of `qx.data.controller.List` which adds support for `qx.ui.form.CheckedList`\r\n * and `qx.ui.form.CheckedSelectBox`.\r\n *\r\n * The principal is that the underlying `List` controller implementation has a model which\r\n * is the complete array of items that can be selected, and that array is used to populate\r\n * the UI widget (ie as normal).\r\n *\r\n * The `checked` psuedo property in this `CheckedList` controller relates to the checked\r\n * property of the UI widget.\r\n */\r\nqx.Class.define(\"qx.data.controller.CheckedList\", {\r\n  extend: qx.data.controller.List,\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param model {qx.data.Array?null} the model array\r\n   * @param widget {qx.ui.core.Widget?null} the widget target\r\n   * @param path {String} the path in the model for the caption\r\n   */\r\n  construct(model, widget, path) {\r\n    super(null, widget, path);\r\n    this.setChecked(new qx.data.Array());\r\n    if (model) {\r\n      this.setModel(model);\r\n    }\r\n  },\r\n\r\n  properties: {\r\n    checked: {\r\n      init: null,\r\n      nullable: true,\r\n      check: \"qx.data.Array\",\r\n      event: \"changeChecked\",\r\n      apply: \"_applyChecked\"\r\n    },\r\n\r\n    /**\r\n     * The path to the property which holds the information that should be\r\n     * shown as a label for a tag for a checked item. This is only needed if\r\n     * used with a CheckedSelectBox, and only if live updates of the label\r\n     * are required.\r\n     */\r\n    checkedLabelPath: {\r\n      check: \"String\",\r\n      apply: \"__updateTags\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The path to the property which holds the information that should be\r\n     * shown as an icon for a tag for a checked item. This is only needed if\r\n     * used with a CheckedSelectBox, and only if live updates of the label\r\n     * are required.\r\n     */\r\n    checkedIconPath: {\r\n      check: \"String\",\r\n      apply: \"__updateTags\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * A map containing the options for the checkedLabel binding. The possible keys\r\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\r\n     */\r\n    checkedLabelOptions: {\r\n      apply: \"__updateTags\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * A map containing the options for the checked icon binding. The possible keys\r\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\r\n     */\r\n    checkedIconOptions: {\r\n      apply: \"__updateTags\",\r\n      nullable: true\r\n    }\r\n  },\r\n\r\n  members: {\r\n    _applyChecked(value, oldValue) {\r\n      if (oldValue) {\r\n        oldValue.removeListener(\"change\", this.__onCheckedChange, this);\r\n      }\r\n      if (value) {\r\n        value.addListener(\"change\", this.__onCheckedChange, this);\r\n      }\r\n      this._updateChecked();\r\n    },\r\n\r\n    /**\r\n     * @Override\r\n     */\r\n    _createItem() {\r\n      var delegate = this.getDelegate();\r\n      var item;\r\n\r\n      // check if a delegate and a create method is set\r\n      if (delegate != null && delegate.createItem != null) {\r\n        item = delegate.createItem();\r\n      } else {\r\n        item = new qx.ui.form.CheckBox();\r\n      }\r\n\r\n      // if there is a configure method, invoke it\r\n      if (delegate != null && delegate.configureItem != null) {\r\n        delegate.configureItem(item);\r\n      }\r\n\r\n      return item;\r\n    },\r\n\r\n    /**\r\n     * Event handler for changes to the checked array\r\n     *\r\n     * @param evt {qx.event.type.Data} the event\r\n     */\r\n    __onCheckedChange(evt) {\r\n      let data = evt.getData();\r\n      if (data.type == \"order\") {\r\n        return;\r\n      }\r\n      this._updateChecked();\r\n    },\r\n\r\n    /**\r\n     * @Override\r\n     */\r\n    update() {\r\n      super.update();\r\n      this._updateChecked();\r\n    },\r\n\r\n    /**\r\n     * @Override\r\n     */\r\n    _setFilter(value, old) {\r\n      super._setFilter(value, old);\r\n      this.__syncModelChecked = true;\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    /**\r\n     * @Override\r\n     */\r\n    syncWidget() {\r\n      super.syncWidget();\r\n      if (this.__syncModelChecked) {\r\n        this._updateChecked();\r\n      }\r\n      this.__syncModelChecked = null;\r\n    },\r\n\r\n    /**\r\n     * @Override\r\n     */\r\n    _applyModel(value, oldValue) {\r\n      if (!value || !value.getLength()) {\r\n        let checked = this.getChecked();\r\n        if (checked) {\r\n          checked.removeAll();\r\n        }\r\n      }\r\n      super._applyModel(value, oldValue);\r\n      this._updateChecked();\r\n    },\r\n\r\n    /**\r\n     * @Override\r\n     */\r\n    _applyTarget(value, oldValue) {\r\n      super._applyTarget(value, oldValue);\r\n      if (oldValue) {\r\n        oldValue.removeListener(\r\n          \"changeChecked\",\r\n          this.__onTargetCheckedChange,\r\n          this\r\n        );\r\n\r\n        if (qx.Class.supportsEvent(oldValue.constructor, \"attachResultsTag\")) {\r\n          oldValue.removeListener(\r\n            \"attachResultsTag\",\r\n            this.__onTargetAttachResultsTag,\r\n            this\r\n          );\r\n\r\n          oldValue.removeListener(\r\n            \"detachResultsTag\",\r\n            this.__onTargetDetachResultsTag,\r\n            this\r\n          );\r\n        }\r\n      }\r\n      if (value) {\r\n        value.addListener(\"changeChecked\", this.__onTargetCheckedChange, this);\r\n        if (qx.Class.supportsEvent(value.constructor, \"attachResultsTag\")) {\r\n          value.addListener(\r\n            \"attachResultsTag\",\r\n            this.__onTargetAttachResultsTag,\r\n            this\r\n          );\r\n\r\n          value.addListener(\r\n            \"detachResultsTag\",\r\n            this.__onTargetDetachResultsTag,\r\n            this\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler for changes in the target widget's `checked` property\r\n     */\r\n    __onTargetCheckedChange(evt) {\r\n      if (this.__inUpdateChecked) {\r\n        return;\r\n      }\r\n      let target = this.getTarget();\r\n      let replacement = [];\r\n      target.getChecked().forEach(item => {\r\n        let itemModel = item.getModel();\r\n        if (itemModel) {\r\n          replacement.push(itemModel);\r\n        }\r\n      });\r\n      let checked = this.getChecked();\r\n      if (checked) {\r\n        checked.replace(replacement);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler for changes in the target widget's `attachResults` property\r\n     */\r\n    __onTargetAttachResultsTag(evt) {\r\n      let { tagWidget, item } = evt.getData();\r\n      item.setUserData(this.classname + \".tagWidget\", tagWidget);\r\n      this.__attachTag(tagWidget, item);\r\n    },\r\n\r\n    /**\r\n     * Event handler for changes in the target widget's `detachResults` property\r\n     */\r\n    __onTargetDetachResultsTag(evt) {\r\n      let { tagWidget, item } = evt.getData();\r\n      this.__detachTag(tagWidget, item);\r\n      item.setUserData(this.classname + \".tagWidget\", null);\r\n    },\r\n\r\n    /**\r\n     * Updates all tags in the target widget\r\n     */\r\n    __updateTags() {\r\n      let target = this.getTarget();\r\n      if (!target) {\r\n        return;\r\n      }\r\n      target.getChecked().forEach(item => {\r\n        let tagWidget = item.getUserData(this.classname + \".tagWidget\");\r\n        this.__detachTag(tagWidget, item);\r\n        this.__attachTag(tagWidget, item);\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Attaches a single tag; used to bind to the tag so that live updates to the underlying model are reflected in tag names\r\n     *\r\n     * @param tagWidget {qx.ui.core.Widget} the widget which is the tag\r\n     * @param item {qx.ui.core.Widget} the list item that lists the model item that this tag is for\r\n     */\r\n    __attachTag(tagWidget, item) {\r\n      let itemModel = item.getModel();\r\n      let bindData = {};\r\n      if (this.getCheckedLabelPath()) {\r\n        bindData.checkedLabelId = itemModel.bind(\r\n          this.getCheckedLabelPath(),\r\n          tagWidget,\r\n          \"label\",\r\n          this.getCheckedLabelOptions()\r\n        );\r\n      }\r\n      if (this.getCheckedIconPath()) {\r\n        bindData.checkedIconId = itemModel.bind(\r\n          this.getCheckedIconPath(),\r\n          tagWidget,\r\n          \"label\",\r\n          this.getCheckedIconOptions()\r\n        );\r\n      }\r\n      itemModel.setUserData(this.classname + \".bindData\", bindData);\r\n    },\r\n\r\n    /**\r\n     * Detaches a single tag, inverse of `__attachTag`\r\n     *\r\n     * @param tagWidget {qx.ui.core.Widget} the widget which is the tag\r\n     * @param item {qx.ui.core.Widget} the list item that lists the model item that this tag is for\r\n     */\r\n    __detachTag(tagWidget, item) {\r\n      let itemModel = item.getModel();\r\n      let bindData = itemModel.getUserData(this.classname + \".bindData\");\r\n      if (bindData) {\r\n        if (bindData.checkedLabelId) {\r\n          itemModel.removeListenerById(bindData.checkedLabelId);\r\n        }\r\n        if (bindData.checkedIconId) {\r\n          itemModel.removeListenerById(bindData.checkedIconId);\r\n        }\r\n        itemModel.setUserData(this.classname + \".bindData\", null);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Updates the checked widget items to match the array of checked model items\r\n     */\r\n    _updateChecked() {\r\n      let target = this.getTarget();\r\n      if (!target) {\r\n        return;\r\n      }\r\n\r\n      if (this.__inUpdateChecked) {\r\n        return;\r\n      }\r\n      this.__inUpdateChecked = true;\r\n      try {\r\n        // Maps of the widget item, indexed by the hashcode of the model item\r\n        let children = {};\r\n        let toUncheck = {};\r\n\r\n        target.getChildren().forEach(item => {\r\n          let itemModel = item.getModel();\r\n          if (itemModel) {\r\n            let hash = itemModel.toHashCode();\r\n            children[hash] = item;\r\n            if (item.getValue()) {\r\n              toUncheck[hash] = item;\r\n            }\r\n          }\r\n        });\r\n\r\n        let toRemove = [];\r\n        let checked = this.getChecked();\r\n        if (checked) {\r\n          checked.forEach(itemModel => {\r\n            let hash = itemModel.toHashCode();\r\n            if (itemModel) {\r\n              delete toUncheck[hash];\r\n              if (children[hash]) {\r\n                children[hash].setValue(true);\r\n              } else {\r\n                toRemove.push(itemModel);\r\n              }\r\n            }\r\n          });\r\n          Object.values(toUncheck).forEach(item => item.setValue(false));\r\n          toRemove.forEach(item => checked.remove(item));\r\n        }\r\n      } finally {\r\n        this.__inUpdateChecked = false;\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}