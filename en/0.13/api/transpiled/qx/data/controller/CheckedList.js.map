{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "data",
    "controller",
    "List",
    "construct",
    "model",
    "widget",
    "path",
    "setChecked",
    "Array",
    "setModel",
    "properties",
    "checked",
    "init",
    "nullable",
    "check",
    "event",
    "apply",
    "checkedLabelPath",
    "checkedIconPath",
    "checkedLabelOptions",
    "checkedIconOptions",
    "members",
    "_applyChecked",
    "value",
    "oldValue",
    "removeListener",
    "__onCheckedChange",
    "addListener",
    "_updateChecked",
    "_createItem",
    "delegate",
    "getDelegate",
    "item",
    "createItem",
    "ui",
    "form",
    "CheckBox",
    "configureItem",
    "evt",
    "getData",
    "type",
    "update",
    "_setFilter",
    "old",
    "__syncModelChecked",
    "core",
    "queue",
    "Widget",
    "add",
    "syncWidget",
    "_applyModel",
    "getLength",
    "getChecked",
    "removeAll",
    "_applyTarget",
    "__onTargetCheckedChange",
    "supportsEvent",
    "constructor",
    "__onTargetAttachResultsTag",
    "__onTargetDetachResultsTag",
    "__inUpdateChecked",
    "target",
    "getTarget",
    "replacement",
    "forEach",
    "itemModel",
    "getModel",
    "push",
    "replace",
    "tagWidget",
    "setUserData",
    "classname",
    "__attachTag",
    "__detachTag",
    "__updateTags",
    "getUserData",
    "bindData",
    "getCheckedLabelPath",
    "checkedLabelId",
    "bind",
    "getCheckedLabelOptions",
    "getCheckedIconPath",
    "checkedIconId",
    "getCheckedIconOptions",
    "removeListenerById",
    "children",
    "toUncheck",
    "getChildren",
    "hash",
    "toHashCode",
    "getValue",
    "toRemove",
    "setValue",
    "Object",
    "values",
    "remove",
    "CheckedList"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/CheckedList.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2021-2021 Zenesis Limited https://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (github.com/johnspackman)\n\n************************************************************************ */\n\n/**\n * Extension of `qx.data.controller.List` which adds support for `qx.ui.form.CheckedList`\n * and `qx.ui.form.CheckedSelectBox`.\n *\n * The principal is that the underlying `List` controller implementation has a model which\n * is the complete array of items that can be selected, and that array is used to populate\n * the UI widget (ie as normal).\n *\n * The `checked` psuedo property in this `CheckedList` controller relates to the checked\n * property of the UI widget.\n */\nqx.Class.define(\"qx.data.controller.CheckedList\", {\n  extend: qx.data.controller.List,\n\n  /**\n   * Constructor\n   *\n   * @param model {qx.data.Array?null} the model array\n   * @param widget {qx.ui.core.Widget?null} the widget target\n   * @param path {String} the path in the model for the caption\n   */\n  construct(model, widget, path) {\n    super(null, widget, path);\n    this.setChecked(new qx.data.Array());\n    if (model) {\n      this.setModel(model);\n    }\n  },\n\n  properties: {\n    checked: {\n      init: null,\n      nullable: true,\n      check: \"qx.data.Array\",\n      event: \"changeChecked\",\n      apply: \"_applyChecked\"\n    },\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as a label for a tag for a checked item. This is only needed if\n     * used with a CheckedSelectBox, and only if live updates of the label\n     * are required.\n     */\n    checkedLabelPath: {\n      check: \"String\",\n      apply: \"__updateTags\",\n      nullable: true\n    },\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon for a tag for a checked item. This is only needed if\n     * used with a CheckedSelectBox, and only if live updates of the label\n     * are required.\n     */\n    checkedIconPath: {\n      check: \"String\",\n      apply: \"__updateTags\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the checkedLabel binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    checkedLabelOptions: {\n      apply: \"__updateTags\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the checked icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    checkedIconOptions: {\n      apply: \"__updateTags\",\n      nullable: true\n    }\n  },\n\n  members: {\n    _applyChecked(value, oldValue) {\n      if (oldValue) {\n        oldValue.removeListener(\"change\", this.__onCheckedChange, this);\n      }\n      if (value) {\n        value.addListener(\"change\", this.__onCheckedChange, this);\n      }\n      this._updateChecked();\n    },\n\n    /**\n     * @Override\n     */\n    _createItem() {\n      var delegate = this.getDelegate();\n      var item;\n\n      // check if a delegate and a create method is set\n      if (delegate != null && delegate.createItem != null) {\n        item = delegate.createItem();\n      } else {\n        item = new qx.ui.form.CheckBox();\n      }\n\n      // if there is a configure method, invoke it\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n\n      return item;\n    },\n\n    /**\n     * Event handler for changes to the checked array\n     *\n     * @param evt {qx.event.type.Data} the event\n     */\n    __onCheckedChange(evt) {\n      let data = evt.getData();\n      if (data.type == \"order\") {\n        return;\n      }\n      this._updateChecked();\n    },\n\n    /**\n     * @Override\n     */\n    update() {\n      super.update();\n      this._updateChecked();\n    },\n\n    /**\n     * @Override\n     */\n    _setFilter(value, old) {\n      super._setFilter(value, old);\n      this.__syncModelChecked = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /**\n     * @Override\n     */\n    syncWidget() {\n      super.syncWidget();\n      if (this.__syncModelChecked) {\n        this._updateChecked();\n      }\n      this.__syncModelChecked = null;\n    },\n\n    /**\n     * @Override\n     */\n    _applyModel(value, oldValue) {\n      if (!value || !value.getLength()) {\n        let checked = this.getChecked();\n        if (checked) {\n          checked.removeAll();\n        }\n      }\n      super._applyModel(value, oldValue);\n      this._updateChecked();\n    },\n\n    /**\n     * @Override\n     */\n    _applyTarget(value, oldValue) {\n      super._applyTarget(value, oldValue);\n      if (oldValue) {\n        oldValue.removeListener(\n          \"changeChecked\",\n          this.__onTargetCheckedChange,\n          this\n        );\n\n        if (qx.Class.supportsEvent(oldValue.constructor, \"attachResultsTag\")) {\n          oldValue.removeListener(\n            \"attachResultsTag\",\n            this.__onTargetAttachResultsTag,\n            this\n          );\n\n          oldValue.removeListener(\n            \"detachResultsTag\",\n            this.__onTargetDetachResultsTag,\n            this\n          );\n        }\n      }\n      if (value) {\n        value.addListener(\"changeChecked\", this.__onTargetCheckedChange, this);\n        if (qx.Class.supportsEvent(value.constructor, \"attachResultsTag\")) {\n          value.addListener(\n            \"attachResultsTag\",\n            this.__onTargetAttachResultsTag,\n            this\n          );\n\n          value.addListener(\n            \"detachResultsTag\",\n            this.__onTargetDetachResultsTag,\n            this\n          );\n        }\n      }\n    },\n\n    /**\n     * Event handler for changes in the target widget's `checked` property\n     */\n    __onTargetCheckedChange(evt) {\n      if (this.__inUpdateChecked) {\n        return;\n      }\n      let target = this.getTarget();\n      let replacement = [];\n      target.getChecked().forEach(item => {\n        let itemModel = item.getModel();\n        if (itemModel) {\n          replacement.push(itemModel);\n        }\n      });\n      let checked = this.getChecked();\n      if (checked) {\n        checked.replace(replacement);\n      }\n    },\n\n    /**\n     * Event handler for changes in the target widget's `attachResults` property\n     */\n    __onTargetAttachResultsTag(evt) {\n      let { tagWidget, item } = evt.getData();\n      item.setUserData(this.classname + \".tagWidget\", tagWidget);\n      this.__attachTag(tagWidget, item);\n    },\n\n    /**\n     * Event handler for changes in the target widget's `detachResults` property\n     */\n    __onTargetDetachResultsTag(evt) {\n      let { tagWidget, item } = evt.getData();\n      this.__detachTag(tagWidget, item);\n      item.setUserData(this.classname + \".tagWidget\", null);\n    },\n\n    /**\n     * Updates all tags in the target widget\n     */\n    __updateTags() {\n      let target = this.getTarget();\n      if (!target) {\n        return;\n      }\n      target.getChecked().forEach(item => {\n        let tagWidget = item.getUserData(this.classname + \".tagWidget\");\n        this.__detachTag(tagWidget, item);\n        this.__attachTag(tagWidget, item);\n      });\n    },\n\n    /**\n     * Attaches a single tag; used to bind to the tag so that live updates to the underlying model are reflected in tag names\n     *\n     * @param tagWidget {qx.ui.core.Widget} the widget which is the tag\n     * @param item {qx.ui.core.Widget} the list item that lists the model item that this tag is for\n     */\n    __attachTag(tagWidget, item) {\n      let itemModel = item.getModel();\n      let bindData = {};\n      if (this.getCheckedLabelPath()) {\n        bindData.checkedLabelId = itemModel.bind(\n          this.getCheckedLabelPath(),\n          tagWidget,\n          \"label\",\n          this.getCheckedLabelOptions()\n        );\n      }\n      if (this.getCheckedIconPath()) {\n        bindData.checkedIconId = itemModel.bind(\n          this.getCheckedIconPath(),\n          tagWidget,\n          \"label\",\n          this.getCheckedIconOptions()\n        );\n      }\n      itemModel.setUserData(this.classname + \".bindData\", bindData);\n    },\n\n    /**\n     * Detaches a single tag, inverse of `__attachTag`\n     *\n     * @param tagWidget {qx.ui.core.Widget} the widget which is the tag\n     * @param item {qx.ui.core.Widget} the list item that lists the model item that this tag is for\n     */\n    __detachTag(tagWidget, item) {\n      let itemModel = item.getModel();\n      let bindData = itemModel.getUserData(this.classname + \".bindData\");\n      if (bindData) {\n        if (bindData.checkedLabelId) {\n          itemModel.removeListenerById(bindData.checkedLabelId);\n        }\n        if (bindData.checkedIconId) {\n          itemModel.removeListenerById(bindData.checkedIconId);\n        }\n        itemModel.setUserData(this.classname + \".bindData\", null);\n      }\n    },\n\n    /**\n     * Updates the checked widget items to match the array of checked model items\n     */\n    _updateChecked() {\n      let target = this.getTarget();\n      if (!target) {\n        return;\n      }\n\n      if (this.__inUpdateChecked) {\n        return;\n      }\n      this.__inUpdateChecked = true;\n      try {\n        // Maps of the widget item, indexed by the hashcode of the model item\n        let children = {};\n        let toUncheck = {};\n\n        target.getChildren().forEach(item => {\n          let itemModel = item.getModel();\n          if (itemModel) {\n            let hash = itemModel.toHashCode();\n            children[hash] = item;\n            if (item.getValue()) {\n              toUncheck[hash] = item;\n            }\n          }\n        });\n\n        let toRemove = [];\n        let checked = this.getChecked();\n        if (checked) {\n          checked.forEach(itemModel => {\n            let hash = itemModel.toHashCode();\n            if (itemModel) {\n              delete toUncheck[hash];\n              if (children[hash]) {\n                children[hash].setValue(true);\n              } else {\n                toRemove.push(itemModel);\n              }\n            }\n          });\n          Object.values(toUncheck).forEach(item => item.setValue(false));\n          toRemove.forEach(item => checked.remove(item));\n        }\n      } finally {\n        this.__inUpdateChecked = false;\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}