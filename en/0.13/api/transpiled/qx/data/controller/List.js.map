{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "controller",
    "MSelection",
    "implement",
    "ISelection",
    "construct",
    "model",
    "target",
    "labelPath",
    "__lookupTable",
    "__boundProperties",
    "__boundPropertiesReverse",
    "__onUpdate",
    "setLabelPath",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "delegate",
    "allowNull",
    "nullValueTitle",
    "nullValueIcon",
    "members",
    "__changeModelListenerId",
    "__syncTargetSelection",
    "__syncModelSelection",
    "update",
    "__changeModelLength",
    "__renewBindings",
    "_updateSelection",
    "_applyDelegate",
    "value",
    "old",
    "_setConfigureItem",
    "_setFilter",
    "_setCreateItem",
    "_setBindItem",
    "_applyIconOptions",
    "_applyLabelOptions",
    "_applyIconPath",
    "_applyLabelPath",
    "_applyAllowNull",
    "oldValue",
    "__refreshModel",
    "_applyNullValueTitle",
    "_applyNullValueIcon",
    "getModel",
    "getTarget",
    "_applyModel",
    "undefined",
    "removeListenerById",
    "getSelection",
    "length",
    "splice",
    "dispose",
    "addListener",
    "__changeModel",
    "__buildUpLookupTable",
    "_changeTargetSelection",
    "ui",
    "queue",
    "Widget",
    "add",
    "getChildren",
    "i",
    "__removeItem",
    "_applyTarget",
    "_addChangeTargetListener",
    "removed",
    "removeAll",
    "destroy",
    "removeAllBindings",
    "__addItem",
    "__lookup",
    "__inChangeModel",
    "syncWidget",
    "newLength",
    "currentLength",
    "j",
    "__moveChangeListenerAtTheEnd",
    "_createItem",
    "getDelegate",
    "createItem",
    "item",
    "form",
    "ListItem",
    "configureItem",
    "index",
    "listItem",
    "_bindListItem",
    "_startSelectionModification",
    "children",
    "oldItem",
    "_removeBindingsFrom",
    "removeAt",
    "_endSelectionModification",
    "getVisibleModels",
    "visibleModels",
    "items",
    "push",
    "Array",
    "setLabel",
    "getNullValueTitle",
    "setIcon",
    "getNullValueIcon",
    "bindItem",
    "bindDefaultProperties",
    "bindProperty",
    "getLabelPath",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "sourcePath",
    "targetProperty",
    "options",
    "targetWidget",
    "lang",
    "clone",
    "onUpdate",
    "Function",
    "bind",
    "_onBindingSet",
    "ignoreConverter",
    "bindPath",
    "id",
    "setUserData",
    "includes",
    "bindPropertyReverse",
    "targetPath",
    "sourceWidget",
    "targetBindPath",
    "sourceObject",
    "targetObject",
    "_inSelectionModification",
    "getUserData",
    "removeBinding",
    "l",
    "filter",
    "__removeFilter",
    "oldTable",
    "tempItem",
    "listItems",
    "isAllowNull",
    "getLength",
    "getItem",
    "destruct",
    "remove",
    "List"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/List.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * <h2>List Controller</h2>\n *\n * *General idea*\n * The list controller is responsible for synchronizing every list like widget\n * with a data array. It does not matter if the array contains atomic values\n * like strings of complete objects where one property holds the value for\n * the label and another property holds the icon url. You can even use converters\n * that make the label show a text corresponding to the icon, by binding both\n * label and icon to the same model property and converting one of them.\n *\n * *Features*\n *\n * * Synchronize the model and the target\n * * Label and icon are bindable\n * * Takes care of the selection\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n *\n * *Usage*\n *\n * As model, only {@link qx.data.Array}s do work. The currently supported\n * targets are\n *\n * * {@link qx.ui.form.SelectBox}\n * * {@link qx.ui.form.List}\n * * {@link qx.ui.form.ComboBox}\n *\n * All the properties like model, target or any property path is bindable.\n * Especially the model is nice to bind to another selection for example.\n * The controller itself can only work if it has a model and a target set. The\n * rest of the properties may be empty.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.List\", {\n  extend: qx.core.Object,\n  include: qx.data.controller.MSelection,\n  implement: qx.data.controller.ISelection,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.data.Array?null} The array containing the data.\n   *\n   * @param target {qx.ui.core.Widget?null} The widget which should show the\n   *   ListItems.\n   *\n   * @param labelPath {String?null} If the model contains objects, the labelPath\n   *   is the path reference to the property in these objects which should be\n   *   shown as label.\n   */\n  construct(model, target, labelPath) {\n    super();\n\n    // lookup table for filtering and sorting\n    this.__lookupTable = [];\n\n    // register for bound target properties and onUpdate methods\n    // from the binding options\n    this.__boundProperties = [];\n    this.__boundPropertiesReverse = [];\n    this.__onUpdate = {};\n\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n    if (model != null) {\n      this.setModel(model);\n    }\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** Data array containing the data which should be shown in the list. */\n    model: {\n      check: \"qx.data.IListData\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n    /** The target widget which should show the data. */\n    target: {\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      nullable: true,\n      init: null,\n      dereference: true\n    },\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as a label. This is only needed if objects are stored in the model.\n     */\n    labelPath: {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon. This is only needed if objects are stored in the model\n     * and if the icon should be shown.\n     */\n    iconPath: {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions: {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions: {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link IControllerDelegate} interface.\n     */\n    delegate: {\n      apply: \"_applyDelegate\",\n      event: \"changeDelegate\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * Whether a special \"null\" value is included in the list\n     */\n    allowNull: {\n      apply: \"_applyAllowNull\",\n      event: \"changeAllowNull\",\n      init: false,\n      nullable: false,\n      check: \"Boolean\"\n    },\n\n    /**\n     * Title for the special null value entry\n     */\n    nullValueTitle: {\n      apply: \"_applyNullValueTitle\",\n      event: \"changeNullValueTitle\",\n      init: null,\n      nullable: true,\n      check: \"String\"\n    },\n\n    /**\n     * Icon for the special null value entry\n     */\n    nullValueIcon: {\n      apply: \"_applyNullValueIcon\",\n      event: \"changeNullValueIcon\",\n      init: null,\n      nullable: true,\n      check: \"String\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // private members\n    __changeModelListenerId: null,\n    __lookupTable: null,\n    __onUpdate: null,\n    __boundProperties: null,\n    __boundPropertiesReverse: null,\n    __syncTargetSelection: null,\n    __syncModelSelection: null,\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Updates the filter and the target. This could be used if the filter\n     * uses an additional parameter which changes the filter result.\n     */\n    update() {\n      this.__changeModelLength();\n      this.__renewBindings();\n\n      this._updateSelection();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * If a new delegate is set, it applies the stored configuration for the\n     * list items to the already created list items once.\n     *\n     * @param value {qx.core.Object|null} The new delegate.\n     * @param old {qx.core.Object|null} The old delegate.\n     */\n    _applyDelegate(value, old) {\n      this._setConfigureItem(value, old);\n      this._setFilter(value, old);\n      this._setCreateItem(value, old);\n      this._setBindItem(value, old);\n    },\n\n    /**\n     * Apply-method which will be called if the icon options has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {Map|null} The new icon options.\n     * @param old {Map|null} The old icon options.\n     */\n    _applyIconOptions(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFalse(\n          value && !qx.lang.Type.isObject(value),\n          \"expecting an object\"\n        );\n\n        this.assertTrue(\n          !!value.converter ||\n            !!value.onUpdate ||\n            !!value.onSetFail ||\n            !!value.ignoreConverter\n        );\n      }\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called if the label options has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {Map|null} The new label options.\n     * @param old {Map|null} The old label options.\n     */\n    _applyLabelOptions(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFalse(\n          value && !qx.lang.Type.isObject(value),\n          \"expecting an object\"\n        );\n\n        this.assertTrue(\n          !!value.converter ||\n            !!value.onUpdate ||\n            !!value.onSetFail ||\n            !!value.ignoreConverter\n        );\n      }\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called if the icon path has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {String|null} The new icon path.\n     * @param old {String|null} The old icon path.\n     */\n    _applyIconPath(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply-method which will be called if the label path has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {String|null} The new label path.\n     * @param old {String|null} The old label path.\n     */\n    _applyLabelPath(value, old) {\n      this.__renewBindings();\n    },\n\n    /**\n     * Apply method for the `allowNull` property\n     */\n    _applyAllowNull(value, oldValue) {\n      this.__refreshModel();\n    },\n\n    /**\n     * Apply method for the `allowNull` property\n     */\n    _applyNullValueTitle(value, oldValue) {\n      this.__refreshModel();\n    },\n\n    /**\n     * Apply method for the `allowNull` property\n     */\n    _applyNullValueIcon(value, oldValue) {\n      this.__refreshModel();\n    },\n\n    /**\n     * Refreshes the model, uses when the model and target are not changing but the appearance\n     * and bindings may need to be updated\n     */\n    __refreshModel() {\n      if (this.getModel() && this.getTarget()) {\n        this.update();\n      }\n    },\n\n    /**\n     * Apply-method which will be called if the model has been changed. It\n     * removes all the listeners from the old model and adds the needed\n     * listeners to the new model. It also invokes the initial filling of the\n     * target widgets if there is a target set.\n     *\n     * @param value {qx.data.Array|null} The new model array.\n     * @param old {qx.data.Array|null} The old model array.\n     */\n    _applyModel(value, old) {\n      // remove the old listener\n      if (old != undefined) {\n        if (this.__changeModelListenerId != undefined) {\n          old.removeListenerById(this.__changeModelListenerId);\n        }\n      }\n\n      // erase the selection if there is something selected\n      if (this.getSelection() != undefined && this.getSelection().length > 0) {\n        this.getSelection().splice(0, this.getSelection().length).dispose();\n      }\n\n      // if a model is set\n      if (value != null) {\n        // add a new listener\n        this.__changeModelListenerId = value.addListener(\n          \"change\",\n          this.__changeModel,\n          this\n        );\n\n        // renew the index lookup table\n        this.__buildUpLookupTable();\n        // check for the new length\n        this.__changeModelLength();\n\n        // as we only change the labels of the items, the selection change event\n        // may be missing so we invoke it here\n        if (old == null) {\n          this._changeTargetSelection();\n        } else {\n          // update the selection asynchronously\n          this.__syncTargetSelection = true;\n          qx.ui.core.queue.Widget.add(this);\n        }\n      } else {\n        var target = this.getTarget();\n        // if the model is set to null, we should remove all items in the target\n        if (target != null) {\n          // we need to remove the bindings too so use the controller method\n          // for removing items\n          var length = target.getChildren().length;\n          for (var i = 0; i < length; i++) {\n            this.__removeItem();\n          }\n        }\n      }\n    },\n\n    /**\n     * Apply-method which will be called if the target has been changed.\n     * When the target changes, every binding needs to be reset and the old\n     * target needs to be cleaned up. If there is a model, the target will be\n     * filled with the data of the model.\n     *\n     * @param value {qx.ui.core.Widget|null} The new target.\n     * @param old {qx.ui.core.Widget|null} The old target.\n     */\n    _applyTarget(value, old) {\n      // add a listener for the target change\n      this._addChangeTargetListener(value, old);\n\n      // if there was an old target\n      if (old != undefined) {\n        // remove all element of the old target\n        var removed = old.removeAll();\n        for (var i = 0; i < removed.length; i++) {\n          removed[i].destroy();\n        }\n        // remove all bindings\n        this.removeAllBindings();\n      }\n\n      if (value != null) {\n        if (this.getModel() != null) {\n          // add a binding for all elements in the model\n          for (var i = 0; i < this.__lookupTable.length; i++) {\n            this.__addItem(this.__lookup(i));\n          }\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Event handler for the change event of the model. If the model changes,\n     * Only the selection needs to be changed. The change of the data will\n     * be done by the binding.\n     */\n    __inChangeModel: false,\n\n    /**\n     * Event handler for the changeModel of the model. Updates the controller.\n     */\n    __changeModel() {\n      if (this.__inChangeModel) {\n        return;\n      }\n\n      this.__inChangeModel = true;\n      // need an asynchronous selection update because the bindings have to be\n      // executed to update the selection probably (using the widget queue)\n      // this.__syncTargetSelection = true;\n      this.__syncModelSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n\n      // update on filtered lists... (bindings need to be renewed)\n      this.update();\n      this.__inChangeModel = false;\n    },\n\n    /**\n     * Internal method used to sync the selection. The controller uses the\n     * widget queue to schedule the selection update. An asynchronous handling of\n     * the selection is needed because the bindings (event listeners for the\n     * binding) need to be executed before the selection is updated.\n     * @internal\n     */\n    syncWidget() {\n      if (this.__syncTargetSelection) {\n        this._changeTargetSelection();\n      }\n      if (this.__syncModelSelection) {\n        this._updateSelection();\n      }\n      this.__syncModelSelection = this.__syncTargetSelection = null;\n    },\n\n    /**\n     * Event handler for the changeLength of the model. If the length changes\n     * of the model, either ListItems need to be removed or added to the target.\n     */\n    __changeModelLength() {\n      // only do something if there is a target\n      if (this.getTarget() == null) {\n        return;\n      }\n\n      // build up the look up table\n      this.__buildUpLookupTable();\n\n      // get the length\n      var newLength = this.__lookupTable.length;\n      var currentLength = this.getTarget().getChildren().length;\n\n      // if there are more item\n      if (newLength > currentLength) {\n        // add the new elements\n        for (var j = currentLength; j < newLength; j++) {\n          this.__addItem(this.__lookup(j));\n        }\n        // if there are less elements\n      } else if (newLength < currentLength) {\n        // remove the unnecessary items\n        for (var j = currentLength; j > newLength; j--) {\n          this.__removeItem();\n        }\n      }\n\n      // build up the look up table\n      this.__buildUpLookupTable();\n\n      // sync the target selection in case someone deleted a item in\n      // selection mode \"one\" [BUG #4839]\n      this.__syncTargetSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /**\n     * Helper method which removes and adds the change listener of the\n     * controller to the model. This is sometimes necessary to ensure that the\n     * listener of the controller is executed as the last listener of the chain.\n     */\n    __moveChangeListenerAtTheEnd() {\n      var model = this.getModel();\n      // it can be that the bindings has been reset without the model so\n      // maybe there is no model in some scenarios\n      if (model != null) {\n        model.removeListenerById(this.__changeModelListenerId);\n        this.__changeModelListenerId = model.addListener(\n          \"change\",\n          this.__changeModel,\n          this\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       ITEM HANDLING\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Creates a ListItem and delegates the configure method if a delegate is\n     * set and the needed function (configureItem) is available.\n     *\n     * @return {qx.ui.form.ListItem} The created and configured ListItem.\n     */\n    _createItem() {\n      var delegate = this.getDelegate();\n      // check if a delegate and a create method is set\n      if (delegate != null && delegate.createItem != null) {\n        var item = delegate.createItem();\n      } else {\n        var item = new qx.ui.form.ListItem();\n      }\n\n      // if there is a configure method, invoke it\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n      return item;\n    },\n\n    /**\n     * Internal helper to add ListItems to the target including the creation\n     * of the binding.\n     *\n     * @param index {Number} The index of the item to add.\n     */\n    __addItem(index) {\n      // create a new ListItem\n      var listItem = this._createItem();\n      // set up the binding\n      this._bindListItem(listItem, index);\n      // add the ListItem to the target\n      this.getTarget().add(listItem);\n    },\n\n    /**\n     * Internal helper to remove ListItems from the target. Also the binding\n     * will be removed properly.\n     */\n    __removeItem() {\n      this._startSelectionModification();\n      var children = this.getTarget().getChildren();\n      // get the last binding id\n      var index = children.length - 1;\n      // get the item\n      var oldItem = children[index];\n      this._removeBindingsFrom(oldItem);\n      // remove the item\n      this.getTarget().removeAt(index);\n      oldItem.destroy();\n      this._endSelectionModification();\n    },\n\n    /**\n     * Returns all models currently visible by the list. This method is only\n     * useful if you use the filter via the {@link #delegate}.\n     *\n     * @return {qx.data.Array} A new data array container all the models\n     *   which representation items are currently visible.\n     */\n    getVisibleModels() {\n      var visibleModels = [];\n      var target = this.getTarget();\n      if (target != null) {\n        var items = target.getChildren();\n        for (var i = 0; i < items.length; i++) {\n          visibleModels.push(items[i].getModel());\n        }\n      }\n\n      return new qx.data.Array(visibleModels);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       BINDING STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Sets up the binding for the given ListItem and index.\n     *\n     * @param item {qx.ui.form.ListItem} The internally created and used\n     *   ListItem.\n     * @param index {Number} The index of the ListItem.\n     */\n    _bindListItem(item, index) {\n      // -1 is the special, \"null\" value item.  Nothing to bind, just fix the display and model\n      if (index < 0) {\n        item.setLabel(this.getNullValueTitle() || \"\");\n        item.setIcon(this.getNullValueIcon());\n        item.setModel(null);\n        return;\n      }\n      var delegate = this.getDelegate();\n      // if a delegate for creating the binding is given, use it\n      if (delegate != null && delegate.bindItem != null) {\n        delegate.bindItem(this, item, index);\n        // otherwise, try to bind the listItem by default\n      } else {\n        this.bindDefaultProperties(item, index);\n      }\n    },\n\n    /**\n     * Helper-Method for binding the default properties (label, icon and model)\n     * from the model to the target widget.\n     *\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param item {qx.ui.form.ListItem} The internally created and used\n     *   ListItem.\n     * @param index {Number} The index of the ListItem.\n     */\n    bindDefaultProperties(item, index) {\n      // model\n      this.bindProperty(\"\", \"model\", null, item, index);\n\n      // label\n      this.bindProperty(\n        this.getLabelPath(),\n        \"label\",\n        this.getLabelOptions(),\n        item,\n        index\n      );\n\n      // if the iconPath is set\n      if (this.getIconPath() != null) {\n        this.bindProperty(\n          this.getIconPath(),\n          \"icon\",\n          this.getIconOptions(),\n          item,\n          index\n        );\n      }\n    },\n\n    /**\n     * Helper-Method for binding a given property from the model to the target\n     * widget.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetProperty {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options used by\n     *   {@link qx.data.SingleValueBinding#bind} to use for the binding.\n     * @param targetWidget {qx.ui.core.Widget} The target widget.\n     * @param index {Number} The index of the current binding.\n     */\n    bindProperty(sourcePath, targetProperty, options, targetWidget, index) {\n      // create the options for the binding containing the old options\n      // including the old onUpdate function\n      if (options != null) {\n        var options = qx.lang.Object.clone(options);\n        this.__onUpdate[targetProperty] = options.onUpdate;\n        delete options.onUpdate;\n      } else {\n        options = {};\n        this.__onUpdate[targetProperty] = null;\n      }\n      options.onUpdate = qx.lang.Function.bind(this._onBindingSet, this, index);\n      options.ignoreConverter = \"model\";\n\n      // build up the path for the binding\n      var bindPath = \"model[\" + index + \"]\";\n      if (sourcePath != null && sourcePath != \"\") {\n        bindPath += \".\" + sourcePath;\n      }\n      // create the binding\n      var id = this.bind(bindPath, targetWidget, targetProperty, options);\n      targetWidget.setUserData(targetProperty + \"BindingId\", id);\n\n      // save the bound property\n      if (!this.__boundProperties.includes(targetProperty)) {\n        this.__boundProperties.push(targetProperty);\n      }\n    },\n\n    /**\n     * Helper-Method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourcePath {String} The name of the property in the target.\n     * @param options {Map | null} The options to use by\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param sourceWidget {qx.ui.core.Widget} The source widget.\n     * @param index {Number} The index of the current binding.\n     */\n    bindPropertyReverse(targetPath, sourcePath, options, sourceWidget, index) {\n      // build up the path for the binding\n      var targetBindPath = \"model[\" + index + \"]\";\n      if (targetPath != null && targetPath != \"\") {\n        targetBindPath += \".\" + targetPath;\n      }\n      // create the binding\n      var id = sourceWidget.bind(sourcePath, this, targetBindPath, options);\n      sourceWidget.setUserData(targetPath + \"ReverseBindingId\", id);\n\n      // save the bound property\n      if (!this.__boundPropertiesReverse.includes(targetPath)) {\n        this.__boundPropertiesReverse.push(targetPath);\n      }\n    },\n\n    /**\n     * Method which will be called on the invoke of every binding. It takes\n     * care of the selection on the change of the binding.\n     *\n     * @param index {Number} The index of the current binding.\n     * @param sourceObject {qx.core.Object} The source object of the binding.\n     * @param targetObject {qx.core.Object} The target object of the binding.\n     */\n    _onBindingSet(index, sourceObject, targetObject) {\n      // ignore the binding set if the model is already set to null\n      if (this.getModel() == null || this._inSelectionModification()) {\n        return;\n      }\n\n      // go through all bound target properties\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        // if there is an onUpdate for one of it, invoke it\n        if (this.__onUpdate[this.__boundProperties[i]] != null) {\n          this.__onUpdate[this.__boundProperties[i]]();\n        }\n      }\n    },\n\n    /**\n     * Internal helper method to remove the binding of the given item.\n     *\n     * @param item {Number} The item of which the binding which should\n     *   be removed.\n     */\n    _removeBindingsFrom(item) {\n      // go through all bound target properties\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        // get the binding id and remove it, if possible\n        var id = item.getUserData(this.__boundProperties[i] + \"BindingId\");\n        if (id != null) {\n          this.removeBinding(id);\n          item.setUserData(this.__boundProperties[i] + \"BindingId\", null);\n        }\n      }\n      // go through all reverse bound properties\n      for (var i = 0; i < this.__boundPropertiesReverse.length; i++) {\n        // get the binding id and remove it, if possible\n        var id = item.getUserData(\n          this.__boundPropertiesReverse[i] + \"ReverseBindingId\"\n        );\n\n        if (id != null) {\n          item.removeBinding(id);\n          item.getUserData(\n            this.__boundPropertiesReverse[i] + \"ReverseBindingId\",\n            null\n          );\n        }\n      }\n    },\n\n    /**\n     * Internal helper method to renew all set bindings.\n     */\n    __renewBindings() {\n      // ignore, if no target is set (startup)\n      if (this.getTarget() == null || this.getModel() == null) {\n        return;\n      }\n\n      // get all children of the target\n      var items = this.getTarget().getChildren();\n      // go through all items\n      for (var i = 0; i < items.length; i++) {\n        this._removeBindingsFrom(items[i]);\n        // add the new binding\n        this._bindListItem(items[i], this.__lookup(i));\n      }\n\n      // move the controllers change handler for the model to the end of the\n      // listeners queue\n      this.__moveChangeListenerAtTheEnd();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       DELEGATE HELPER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for applying the delegate It checks if a configureItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setConfigureItem(value, old) {\n      if (\n        value != null &&\n        value.configureItem != null &&\n        this.getTarget() != null\n      ) {\n        var children = this.getTarget().getChildren();\n        for (var i = 0; i < children.length; i++) {\n          value.configureItem(children[i]);\n        }\n      }\n    },\n\n    /**\n     * Helper method for applying the delegate It checks if a bindItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setBindItem(value, old) {\n      // if a new bindItem function is set\n      if (value != null && value.bindItem != null) {\n        // do nothing if the bindItem function did not change\n        if (\n          old != null &&\n          old.bindItem != null &&\n          value.bindItem == old.bindItem\n        ) {\n          return;\n        }\n        this.__renewBindings();\n      }\n    },\n\n    /**\n     * Helper method for applying the delegate It checks if a createItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setCreateItem(value, old) {\n      if (\n        this.getTarget() == null ||\n        this.getModel() == null ||\n        value == null ||\n        value.createItem == null\n      ) {\n        return;\n      }\n      this._startSelectionModification();\n\n      // remove all bindings\n      var children = this.getTarget().getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._removeBindingsFrom(children[i]);\n      }\n\n      // remove all elements of the target\n      var removed = this.getTarget().removeAll();\n      for (var i = 0; i < removed.length; i++) {\n        removed[i].destroy();\n      }\n\n      // update\n      this.update();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n    /**\n     * Apply-Method for setting the filter. It removes all bindings,\n     * check if the length has changed and adds or removes the items in the\n     * target. After that, the bindings will be set up again and the selection\n     * will be updated.\n     *\n     * @param value {Function|null} The new filter function.\n     * @param old {Function|null} The old filter function.\n     */\n    _setFilter(value, old) {\n      // update the filter if it has been removed\n      if (\n        (value == null || value.filter == null) &&\n        old != null &&\n        old.filter != null\n      ) {\n        this.__removeFilter();\n      }\n\n      // check if it is necessary to do anything\n      if (\n        this.getTarget() == null ||\n        this.getModel() == null ||\n        value == null ||\n        value.filter == null\n      ) {\n        return;\n      }\n      // if yes, continue\n\n      this._startSelectionModification();\n\n      // remove all bindings\n      var children = this.getTarget().getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._removeBindingsFrom(children[i]);\n      }\n\n      // store the old lookup table\n      var oldTable = this.__lookupTable;\n      // generate a new lookup table\n      this.__buildUpLookupTable();\n\n      // if there are lesser items\n      if (oldTable.length > this.__lookupTable.length) {\n        // remove the unnecessary items\n        for (var j = oldTable.length; j > this.__lookupTable.length; j--) {\n          this.getTarget()\n            .removeAt(j - 1)\n            .destroy();\n        }\n        // if there are more items\n      } else if (oldTable.length < this.__lookupTable.length) {\n        // add the new elements\n        for (var j = oldTable.length; j < this.__lookupTable.length; j++) {\n          var tempItem = this._createItem();\n          this.getTarget().add(tempItem);\n        }\n      }\n\n      // bind every list item again\n      var listItems = this.getTarget().getChildren();\n      for (var i = 0; i < listItems.length; i++) {\n        this._bindListItem(listItems[i], this.__lookup(i));\n      }\n\n      // move the controllers change handler for the model to the end of the\n      // listeners queue\n      this.__moveChangeListenerAtTheEnd();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n    /**\n     * This helper is responsible for removing the filter and setting the\n     * controller to a valid state without a filtering.\n     */\n    __removeFilter() {\n      // renew the index lookup table\n      this.__buildUpLookupTable();\n      // check for the new length\n      this.__changeModelLength();\n      // renew the bindings\n      this.__renewBindings();\n\n      // need an asynchronous selection update because the bindings have to be\n      // executed to update the selection probably (using the widget queue)\n      this.__syncModelSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       LOOKUP STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper-Method which builds up the index lookup for the filter feature.\n     * If no filter is set, the lookup table will be a 1:1 mapping.\n     */\n    __buildUpLookupTable() {\n      var model = this.getModel();\n      if (model == null) {\n        return;\n      }\n      var delegate = this.getDelegate();\n      if (delegate != null) {\n        var filter = delegate.filter;\n      }\n\n      this.__lookupTable = [];\n\n      // -1 is a special lookup value, to represent the \"null\" option\n      if (this.isAllowNull()) {\n        this.__lookupTable.push(-1);\n      }\n      for (var i = 0; i < model.getLength(); i++) {\n        if (filter == null || filter(model.getItem(i))) {\n          this.__lookupTable.push(i);\n        }\n      }\n    },\n\n    /**\n     * Function for accessing the lookup table.\n     *\n     * @param index {Integer} The index of the lookup table.\n     * @return {Number} Item index from lookup table\n     */\n    __lookup(index) {\n      return this.__lookupTable[index];\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct() {\n    this.__lookupTable = this.__onUpdate = this.__boundProperties = null;\n    this.__boundPropertiesReverse = null;\n\n    // remove yourself from the widget queue\n    qx.ui.core.queue.Widget.remove(this);\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,yBAAyB,EAAE;IACzCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,OAAO,EAAET,EAAE,CAACU,IAAI,CAACC,UAAU,CAACC,UAAU;IACtCC,SAAS,EAAEb,EAAE,CAACU,IAAI,CAACC,UAAU,CAACG,UAAU;IAExC;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,qBAACC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAE;MAClC;;MAEA;MACA,IAAI,CAACC,SAAa,GAAG,EAAE;;MAEvB;MACA;MACA,IAAI,CAACC,SAAiB,GAAG,EAAE;MAC3B,IAAI,CAACC,SAAwB,GAAG,EAAE;MAClC,IAAI,CAACC,SAAU,GAAG,CAAC,CAAC;MAEpB,IAAIJ,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACK,YAAY,CAACL,SAAS,CAAC;MAC9B;MACA,IAAIF,KAAK,IAAI,IAAI,EAAE;QACjB,IAAI,CAACQ,QAAQ,CAACR,KAAK,CAAC;MACtB;MACA,IAAIC,MAAM,IAAI,IAAI,EAAE;QAClB,IAAI,CAACQ,SAAS,CAACR,MAAM,CAAC;MACxB;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEES,UAAU,EAAE;MACV;MACAV,KAAK,EAAE;QACLW,KAAK,EAAE,mBAAmB;QAC1BC,KAAK,EAAE,aAAa;QACpBC,KAAK,E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"
}