{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/data/controller/List.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "controller",
    "MSelection",
    "implement",
    "ISelection",
    "construct",
    "model",
    "target",
    "labelPath",
    "__lookupTable",
    "__boundProperties",
    "__boundPropertiesReverse",
    "__onUpdate",
    "setLabelPath",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "delegate",
    "allowNull",
    "nullValueTitle",
    "nullValueIcon",
    "members",
    "__changeModelListenerId",
    "__syncTargetSelection",
    "__syncModelSelection",
    "update",
    "__changeModelLength",
    "__renewBindings",
    "_updateSelection",
    "_applyDelegate",
    "value",
    "old",
    "_setConfigureItem",
    "_setFilter",
    "_setCreateItem",
    "_setBindItem",
    "_applyIconOptions",
    "_applyLabelOptions",
    "_applyIconPath",
    "_applyLabelPath",
    "_applyAllowNull",
    "oldValue",
    "__refreshModel",
    "_applyNullValueTitle",
    "_applyNullValueIcon",
    "getModel",
    "getTarget",
    "_applyModel",
    "undefined",
    "removeListenerById",
    "getSelection",
    "length",
    "splice",
    "dispose",
    "addListener",
    "__changeModel",
    "__buildUpLookupTable",
    "_changeTargetSelection",
    "ui",
    "queue",
    "Widget",
    "add",
    "getChildren",
    "i",
    "__removeItem",
    "_applyTarget",
    "_addChangeTargetListener",
    "removed",
    "removeAll",
    "destroy",
    "removeAllBindings",
    "__addItem",
    "__lookup",
    "__inChangeModel",
    "syncWidget",
    "newLength",
    "currentLength",
    "j",
    "__moveChangeListenerAtTheEnd",
    "_createItem",
    "getDelegate",
    "createItem",
    "item",
    "form",
    "ListItem",
    "configureItem",
    "index",
    "listItem",
    "_bindListItem",
    "_startSelectionModification",
    "children",
    "oldItem",
    "_removeBindingsFrom",
    "removeAt",
    "_endSelectionModification",
    "getVisibleModels",
    "visibleModels",
    "items",
    "push",
    "Array",
    "setLabel",
    "getNullValueTitle",
    "setIcon",
    "getNullValueIcon",
    "bindItem",
    "bindDefaultProperties",
    "bindProperty",
    "getLabelPath",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "sourcePath",
    "targetProperty",
    "options",
    "targetWidget",
    "lang",
    "clone",
    "onUpdate",
    "Function",
    "bind",
    "_onBindingSet",
    "ignoreConverter",
    "bindPath",
    "id",
    "setUserData",
    "includes",
    "bindPropertyReverse",
    "targetPath",
    "sourceWidget",
    "targetBindPath",
    "sourceObject",
    "targetObject",
    "_inSelectionModification",
    "getUserData",
    "removeBinding",
    "l",
    "filter",
    "__removeFilter",
    "oldTable",
    "tempItem",
    "listItems",
    "isAllowNull",
    "getLength",
    "getItem",
    "destruct",
    "remove",
    "List"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n\n/**\n * <h2>List Controller</h2>\n *\n * *General idea*\n * The list controller is responsible for synchronizing every list like widget\n * with a data array. It does not matter if the array contains atomic values\n * like strings of complete objects where one property holds the value for\n * the label and another property holds the icon url. You can even use converters\n * that make the label show a text corresponding to the icon, by binding both\n * label and icon to the same model property and converting one of them.\n *\n * *Features*\n *\n * * Synchronize the model and the target\n * * Label and icon are bindable\n * * Takes care of the selection\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\n *\n * *Usage*\n *\n * As model, only {@link qx.data.Array}s do work. The currently supported\n * targets are\n *\n * * {@link qx.ui.form.SelectBox}\n * * {@link qx.ui.form.List}\n * * {@link qx.ui.form.ComboBox}\n *\n * All the properties like model, target or any property path is bindable.\n * Especially the model is nice to bind to another selection for example.\n * The controller itself can only work if it has a model and a target set. The\n * rest of the properties may be empty.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.List\",\n{\n  extend : qx.core.Object,\n  include: qx.data.controller.MSelection,\n  implement : qx.data.controller.ISelection,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.data.Array?null} The array containing the data.\n   *\n   * @param target {qx.ui.core.Widget?null} The widget which should show the\n   *   ListItems.\n   *\n   * @param labelPath {String?null} If the model contains objects, the labelPath\n   *   is the path reference to the property in these objects which should be\n   *   shown as label.\n   */\n  construct : function(model, target, labelPath)\n  {\n    this.base(arguments);\n\n    // lookup table for filtering and sorting\n    this.__lookupTable = [];\n\n    // register for bound target properties and onUpdate methods\n    // from the binding options\n    this.__boundProperties = [];\n    this.__boundPropertiesReverse = [];\n    this.__onUpdate = {};\n\n    if (labelPath != null) {\n      this.setLabelPath(labelPath);\n    }\n    if (model != null) {\n      this.setModel(model);\n    }\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Data array containing the data which should be shown in the list. */\n    model :\n    {\n      check: \"qx.data.IListData\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n\n    /** The target widget which should show the data. */\n    target :\n    {\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      nullable: true,\n      init: null,\n      dereference: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as a label. This is only needed if objects are stored in the model.\n     */\n    labelPath :\n    {\n      check: \"String\",\n      apply: \"_applyLabelPath\",\n      nullable: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon. This is only needed if objects are stored in the model\n     * and if the icon should be shown.\n     */\n    iconPath :\n    {\n      check: \"String\",\n      apply: \"_applyIconPath\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions :\n    {\n      apply: \"_applyLabelOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions :\n    {\n      apply: \"_applyIconOptions\",\n      nullable: true\n    },\n\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link IControllerDelegate} interface.\n     */\n    delegate :\n    {\n      apply: \"_applyDelegate\",\n      event: \"changeDelegate\",\n      init: null,\n      nullable: true\n    },\n    \n    /**\n     * Whether a special \"null\" value is included in the list\n     */\n    allowNull :\n    {\n      apply: \"_applyAllowNull\",\n      event: \"changeAllowNull\",\n      init: false,\n      nullable: false,\n      check: \"Boolean\"\n    },\n    \n    /**\n     * Title for the special null value entry\n     */\n    nullValueTitle:\n    {\n      apply: \"_applyNullValueTitle\",\n      event: \"changeNullValueTitle\",\n      init: null,\n      nullable: true,\n      check: \"String\"\n    },\n    \n    /**\n     * Icon for the special null value entry\n     */\n    nullValueIcon:\n    {\n      apply: \"_applyNullValueIcon\",\n      event: \"changeNullValueIcon\",\n      init: null,\n      nullable: true,\n      check: \"String\"\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // private members\n    __changeModelListenerId : null,\n    __lookupTable : null,\n    __onUpdate : null,\n    __boundProperties : null,\n    __boundPropertiesReverse : null,\n    __syncTargetSelection : null,\n    __syncModelSelection : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Updates the filter and the target. This could be used if the filter\n     * uses an additional parameter which changes the filter result.\n     */\n    update: function() {\n      this.__changeModelLength();\n      this.__renewBindings();\n\n      this._updateSelection();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * If a new delegate is set, it applies the stored configuration for the\n     * list items to the already created list items once.\n     *\n     * @param value {qx.core.Object|null} The new delegate.\n     * @param old {qx.core.Object|null} The old delegate.\n     */\n    _applyDelegate: function(value, old) {\n      this._setConfigureItem(value, old);\n      this._setFilter(value, old);\n      this._setCreateItem(value, old);\n      this._setBindItem(value, old);\n    },\n\n\n    /**\n     * Apply-method which will be called if the icon options has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {Map|null} The new icon options.\n     * @param old {Map|null} The old icon options.\n     */\n    _applyIconOptions: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called if the label options has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {Map|null} The new label options.\n     * @param old {Map|null} The old label options.\n     */\n    _applyLabelOptions: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called if the icon path has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {String|null} The new icon path.\n     * @param old {String|null} The old icon path.\n     */\n    _applyIconPath: function(value, old) {\n      this.__renewBindings();\n    },\n\n\n    /**\n     * Apply-method which will be called if the label path has been changed.\n     * It invokes a renewing of all set bindings.\n     *\n     * @param value {String|null} The new label path.\n     * @param old {String|null} The old label path.\n     */\n    _applyLabelPath: function(value, old) {\n      this.__renewBindings();\n    },\n\n    \n    /**\n     * Apply method for the `allowNull` property \n     */\n    _applyAllowNull: function(value, oldValue) {\n      this.__refreshModel();\n    },\n    \n    /**\n     * Apply method for the `allowNull` property \n     */\n    _applyNullValueTitle: function(value, oldValue) {\n      this.__refreshModel();\n    },\n    \n    /**\n     * Apply method for the `allowNull` property \n     */\n    _applyNullValueIcon: function(value, oldValue) {\n      this.__refreshModel();\n    },\n\n    /**\n     * Refreshes the model, uses when the model and target are not changing but the appearance\n     * and bindings may need to be updated\n     */\n    __refreshModel: function() {\n      if (this.getModel() && this.getTarget()) {\n        this.update();\n      }\n    },\n\n\n    /**\n     * Apply-method which will be called if the model has been changed. It\n     * removes all the listeners from the old model and adds the needed\n     * listeners to the new model. It also invokes the initial filling of the\n     * target widgets if there is a target set.\n     *\n     * @param value {qx.data.Array|null} The new model array.\n     * @param old {qx.data.Array|null} The old model array.\n     */\n    _applyModel: function(value, old) {\n      // remove the old listener\n      if (old != undefined) {\n        if (this.__changeModelListenerId != undefined) {\n          old.removeListenerById(this.__changeModelListenerId);\n        }\n      }\n\n      // erase the selection if there is something selected\n      if (this.getSelection() != undefined && this.getSelection().length > 0) {\n        this.getSelection().splice(0, this.getSelection().length).dispose();\n      }\n\n      // if a model is set\n      if (value != null) {\n        // add a new listener\n        this.__changeModelListenerId =\n          value.addListener(\"change\", this.__changeModel, this);\n\n        // renew the index lookup table\n        this.__buildUpLookupTable();\n        // check for the new length\n        this.__changeModelLength();\n\n        // as we only change the labels of the items, the selection change event\n        // may be missing so we invoke it here\n        if (old == null) {\n          this._changeTargetSelection();\n        } else {\n          // update the selection asynchronously\n          this.__syncTargetSelection = true;\n          qx.ui.core.queue.Widget.add(this);\n        }\n      } else {\n        var target = this.getTarget();\n        // if the model is set to null, we should remove all items in the target\n        if (target != null) {\n          // we need to remove the bindings too so use the controller method\n          // for removing items\n          var length = target.getChildren().length;\n          for (var i = 0; i < length; i++) {\n            this.__removeItem();\n          };\n        }\n      }\n    },\n\n\n    /**\n     * Apply-method which will be called if the target has been changed.\n     * When the target changes, every binding needs to be reset and the old\n     * target needs to be cleaned up. If there is a model, the target will be\n     * filled with the data of the model.\n     *\n     * @param value {qx.ui.core.Widget|null} The new target.\n     * @param old {qx.ui.core.Widget|null} The old target.\n     */\n    _applyTarget: function(value, old) {\n      // add a listener for the target change\n      this._addChangeTargetListener(value, old);\n\n      // if there was an old target\n      if (old != undefined) {\n        // remove all element of the old target\n        var removed = old.removeAll();\n        for (var i=0; i<removed.length; i++) {\n          removed[i].destroy();\n        }\n        // remove all bindings\n        this.removeAllBindings();\n      }\n\n      if (value != null) {\n        if (this.getModel() != null) {\n          // add a binding for all elements in the model\n          for (var i = 0; i < this.__lookupTable.length; i++) {\n            this.__addItem(this.__lookup(i));\n          }\n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Event handler for the change event of the model. If the model changes,\n     * Only the selection needs to be changed. The change of the data will\n     * be done by the binding.\n     */\n    __inChangeModel: false,\n\n    /**\n     * Event handler for the changeModel of the model. Updates the controller.\n     */\n    __changeModel: function() {\n      if (this.__inChangeModel) {\n        return;\n      }\n\n      this.__inChangeModel = true;\n      // need an asynchronous selection update because the bindings have to be\n      // executed to update the selection probably (using the widget queue)\n      // this.__syncTargetSelection = true;\n      this.__syncModelSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n\n      // update on filtered lists... (bindings need to be renewed)\n      this.update();\n      this.__inChangeModel = false;\n    },\n\n\n    /**\n     * Internal method used to sync the selection. The controller uses the\n     * widget queue to schedule the selection update. An asynchronous handling of\n     * the selection is needed because the bindings (event listeners for the\n     * binding) need to be executed before the selection is updated.\n     * @internal\n     */\n    syncWidget : function()\n    {\n      if (this.__syncTargetSelection) {\n        this._changeTargetSelection();\n      }\n      if (this.__syncModelSelection) {\n        this._updateSelection();\n      }\n      this.__syncModelSelection = this.__syncTargetSelection = null;\n    },\n\n\n    /**\n     * Event handler for the changeLength of the model. If the length changes\n     * of the model, either ListItems need to be removed or added to the target.\n     */\n    __changeModelLength: function() {\n      // only do something if there is a target\n      if (this.getTarget() == null) {\n        return;\n      }\n\n      // build up the look up table\n      this.__buildUpLookupTable();\n\n      // get the length\n      var newLength = this.__lookupTable.length;\n      var currentLength = this.getTarget().getChildren().length;\n\n      // if there are more item\n      if (newLength > currentLength) {\n        // add the new elements\n        for (var j = currentLength; j < newLength; j++) {\n          this.__addItem(this.__lookup(j));\n        }\n      // if there are less elements\n      } else if (newLength < currentLength) {\n        // remove the unnecessary items\n        for (var j = currentLength; j > newLength; j--) {\n          this.__removeItem();\n        }\n      }\n\n      // build up the look up table\n      this.__buildUpLookupTable();\n\n      // sync the target selection in case someone deleted a item in\n      // selection mode \"one\" [BUG #4839]\n      this.__syncTargetSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /**\n     * Helper method which removes and adds the change listener of the\n     * controller to the model. This is sometimes necessary to ensure that the\n     * listener of the controller is executed as the last listener of the chain.\n     */\n    __moveChangeListenerAtTheEnd : function() {\n      var model = this.getModel();\n      // it can be that the bindings has been reset without the model so\n      // maybe there is no model in some scenarios\n      if (model != null) {\n        model.removeListenerById(this.__changeModelListenerId);\n        this.__changeModelListenerId =\n          model.addListener(\"change\", this.__changeModel, this);\n      }\n\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       ITEM HANDLING\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Creates a ListItem and delegates the configure method if a delegate is\n     * set and the needed function (configureItem) is available.\n     *\n     * @return {qx.ui.form.ListItem} The created and configured ListItem.\n     */\n    _createItem: function() {\n      var delegate = this.getDelegate();\n      // check if a delegate and a create method is set\n      if (delegate != null && delegate.createItem != null) {\n        var item = delegate.createItem();\n      } else {\n        var item = new qx.ui.form.ListItem();\n      }\n\n      // if there is a configure method, invoke it\n      if (delegate != null && delegate.configureItem != null) {\n        delegate.configureItem(item);\n      }\n      return item;\n    },\n\n\n    /**\n     * Internal helper to add ListItems to the target including the creation\n     * of the binding.\n     *\n     * @param index {Number} The index of the item to add.\n     */\n    __addItem: function(index) {\n      // create a new ListItem\n      var listItem = this._createItem();\n      // set up the binding\n      this._bindListItem(listItem, index);\n      // add the ListItem to the target\n      this.getTarget().add(listItem);\n    },\n\n\n    /**\n     * Internal helper to remove ListItems from the target. Also the binding\n     * will be removed properly.\n     */\n    __removeItem: function() {\n      this._startSelectionModification();\n      var children = this.getTarget().getChildren();\n      // get the last binding id\n      var index = children.length - 1;\n      // get the item\n      var oldItem = children[index];\n      this._removeBindingsFrom(oldItem);\n      // remove the item\n      this.getTarget().removeAt(index);\n      oldItem.destroy();\n      this._endSelectionModification();\n    },\n\n\n    /**\n     * Returns all models currently visible by the list. This method is only\n     * useful if you use the filter via the {@link #delegate}.\n     *\n     * @return {qx.data.Array} A new data array container all the models\n     *   which representation items are currently visible.\n     */\n    getVisibleModels : function()\n    {\n      var visibleModels = [];\n      var target = this.getTarget();\n      if (target != null) {\n        var items = target.getChildren();\n        for (var i = 0; i < items.length; i++) {\n          visibleModels.push(items[i].getModel());\n        };\n      }\n\n      return new qx.data.Array(visibleModels);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       BINDING STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Sets up the binding for the given ListItem and index.\n     *\n     * @param item {qx.ui.form.ListItem} The internally created and used\n     *   ListItem.\n     * @param index {Number} The index of the ListItem.\n     */\n    _bindListItem: function(item, index) {\n      // -1 is the special, \"null\" value item.  Nothing to bind, just fix the display and model\n      if (index < 0) {\n        item.setLabel(this.getNullValueTitle()||\"\");\n        item.setIcon(this.getNullValueIcon());\n        item.setModel(null);\n        return;\n      }\n      var delegate = this.getDelegate();\n      // if a delegate for creating the binding is given, use it\n      if (delegate != null && delegate.bindItem != null) {\n        delegate.bindItem(this, item, index);\n      // otherwise, try to bind the listItem by default\n      } else {\n        this.bindDefaultProperties(item, index);\n      }\n    },\n\n\n    /**\n     * Helper-Method for binding the default properties (label, icon and model)\n     * from the model to the target widget.\n     *\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param item {qx.ui.form.ListItem} The internally created and used\n     *   ListItem.\n     * @param index {Number} The index of the ListItem.\n     */\n    bindDefaultProperties : function(item, index)\n    {\n      // model\n      this.bindProperty(\n        \"\", \"model\", null, item, index\n      );\n\n      // label\n      this.bindProperty(\n        this.getLabelPath(), \"label\", this.getLabelOptions(), item, index\n      );\n\n      // if the iconPath is set\n      if (this.getIconPath() != null) {\n        this.bindProperty(\n          this.getIconPath(), \"icon\", this.getIconOptions(), item, index\n        );\n      }\n    },\n\n\n    /**\n     * Helper-Method for binding a given property from the model to the target\n     * widget.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetProperty {String} The name of the property in the target\n     *   widget.\n     * @param options {Map | null} The options used by\n     *   {@link qx.data.SingleValueBinding#bind} to use for the binding.\n     * @param targetWidget {qx.ui.core.Widget} The target widget.\n     * @param index {Number} The index of the current binding.\n     */\n    bindProperty: function(sourcePath, targetProperty, options, targetWidget, index) {\n      // create the options for the binding containing the old options\n      // including the old onUpdate function\n      if (options != null) {\n        var options = qx.lang.Object.clone(options);\n        this.__onUpdate[targetProperty] = options.onUpdate;\n        delete options.onUpdate;\n      } else {\n        options = {};\n        this.__onUpdate[targetProperty] = null;\n      }\n      options.onUpdate =  qx.lang.Function.bind(this._onBindingSet, this, index);\n      options.ignoreConverter = \"model\";\n\n      // build up the path for the binding\n      var bindPath = \"model[\" + index + \"]\";\n      if (sourcePath != null && sourcePath != \"\") {\n        bindPath += \".\" + sourcePath;\n      }\n      // create the binding\n      var id = this.bind(bindPath, targetWidget, targetProperty, options);\n      targetWidget.setUserData(targetProperty + \"BindingId\", id);\n\n      // save the bound property\n      if (!this.__boundProperties.includes(targetProperty)) {\n        this.__boundProperties.push(targetProperty);\n      }\n    },\n\n\n    /**\n     * Helper-Method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\n     * implemented by the {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourcePath {String} The name of the property in the target.\n     * @param options {Map | null} The options to use by\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\n     * @param sourceWidget {qx.ui.core.Widget} The source widget.\n     * @param index {Number} The index of the current binding.\n     */\n    bindPropertyReverse: function(\n      targetPath, sourcePath, options, sourceWidget, index\n    ) {\n      // build up the path for the binding\n      var targetBindPath = \"model[\" + index + \"]\";\n      if (targetPath != null && targetPath != \"\") {\n        targetBindPath += \".\" + targetPath;\n      }\n      // create the binding\n      var id = sourceWidget.bind(sourcePath, this, targetBindPath, options);\n      sourceWidget.setUserData(targetPath + \"ReverseBindingId\", id);\n\n      // save the bound property\n      if (!this.__boundPropertiesReverse.includes(targetPath)) {\n        this.__boundPropertiesReverse.push(targetPath);\n      }\n    },\n\n\n    /**\n     * Method which will be called on the invoke of every binding. It takes\n     * care of the selection on the change of the binding.\n     *\n     * @param index {Number} The index of the current binding.\n     * @param sourceObject {qx.core.Object} The source object of the binding.\n     * @param targetObject {qx.core.Object} The target object of the binding.\n     */\n    _onBindingSet: function(index, sourceObject, targetObject) {\n      // ignore the binding set if the model is already set to null\n      if (this.getModel() == null || this._inSelectionModification()) {\n        return;\n      }\n\n      // go through all bound target properties\n      for (var i = 0; i < this.__boundProperties.length; i++) {\n        // if there is an onUpdate for one of it, invoke it\n        if (this.__onUpdate[this.__boundProperties[i]] != null) {\n          this.__onUpdate[this.__boundProperties[i]]();\n        }\n      }\n    },\n\n\n    /**\n     * Internal helper method to remove the binding of the given item.\n     *\n     * @param item {Number} The item of which the binding which should\n     *   be removed.\n     */\n    _removeBindingsFrom: function(item) {\n      // go through all bound target properties\n      for (var  i = 0; i < this.__boundProperties.length; i++) {\n        // get the binding id and remove it, if possible\n        var id = item.getUserData(this.__boundProperties[i] + \"BindingId\");\n        if (id != null) {\n          this.removeBinding(id);\n          item.setUserData(this.__boundProperties[i] + \"BindingId\", null);\n        }\n      }\n      // go through all reverse bound properties\n      for (var i = 0; i < this.__boundPropertiesReverse.length; i++) {\n        // get the binding id and remove it, if possible\n        var id = item.getUserData(this.__boundPropertiesReverse[i] + \"ReverseBindingId\");\n        if (id != null) {\n          item.removeBinding(id);\n          item.getUserData(this.__boundPropertiesReverse[i] + \"ReverseBindingId\", null);\n        }\n      };\n    },\n\n\n    /**\n     * Internal helper method to renew all set bindings.\n     */\n    __renewBindings: function() {\n      // ignore, if no target is set (startup)\n      if (this.getTarget() == null || this.getModel() == null) {\n        return;\n      }\n\n      // get all children of the target\n      var items = this.getTarget().getChildren();\n      // go through all items\n      for (var i = 0; i < items.length; i++) {\n        this._removeBindingsFrom(items[i]);\n        // add the new binding\n        this._bindListItem(items[i], this.__lookup(i));\n      }\n\n      // move the controllers change handler for the model to the end of the\n      // listeners queue\n      this.__moveChangeListenerAtTheEnd();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       DELEGATE HELPER\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper method for applying the delegate It checks if a configureItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setConfigureItem: function(value, old) {\n      if (value != null && value.configureItem != null && this.getTarget() != null) {\n        var children = this.getTarget().getChildren();\n        for (var i = 0; i < children.length; i++) {\n          value.configureItem(children[i]);\n        }\n      }\n    },\n\n\n    /**\n     * Helper method for applying the delegate It checks if a bindItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setBindItem: function(value, old) {\n      // if a new bindItem function is set\n      if (value != null && value.bindItem != null) {\n        // do nothing if the bindItem function did not change\n        if (old != null && old.bindItem != null && value.bindItem == old.bindItem) {\n          return;\n        }\n        this.__renewBindings();\n      }\n    },\n\n\n    /**\n     * Helper method for applying the delegate It checks if a createItem\n     * is set end invokes the initial process to apply the given function.\n     *\n     * @param value {Object} The new delegate.\n     * @param old {Object} The old delegate.\n     */\n    _setCreateItem: function(value, old) {\n      if (\n        this.getTarget() == null ||\n        this.getModel() == null ||\n        value == null ||\n        value.createItem == null\n      ) {\n        return;\n      }\n      this._startSelectionModification();\n\n      // remove all bindings\n      var children = this.getTarget().getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._removeBindingsFrom(children[i]);\n      }\n\n      // remove all elements of the target\n      var removed = this.getTarget().removeAll();\n      for (var i=0; i<removed.length; i++) {\n        removed[i].destroy();\n      }\n\n      // update\n      this.update();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n\n    /**\n     * Apply-Method for setting the filter. It removes all bindings,\n     * check if the length has changed and adds or removes the items in the\n     * target. After that, the bindings will be set up again and the selection\n     * will be updated.\n     *\n     * @param value {Function|null} The new filter function.\n     * @param old {Function|null} The old filter function.\n     */\n    _setFilter: function(value, old) {\n      // update the filter if it has been removed\n      if ((value == null || value.filter == null) &&\n          (old != null && old.filter != null)) {\n        this.__removeFilter();\n      }\n\n      // check if it is necessary to do anything\n      if (\n        this.getTarget() == null ||\n        this.getModel() == null ||\n        value == null ||\n        value.filter == null\n      ) {\n        return;\n      }\n      // if yes, continue\n\n      this._startSelectionModification();\n\n      // remove all bindings\n      var children = this.getTarget().getChildren();\n      for (var i = 0, l = children.length; i < l; i++) {\n        this._removeBindingsFrom(children[i]);\n      }\n\n      // store the old lookup table\n      var oldTable = this.__lookupTable;\n      // generate a new lookup table\n      this.__buildUpLookupTable();\n\n      // if there are lesser items\n      if (oldTable.length > this.__lookupTable.length) {\n        // remove the unnecessary items\n        for (var j = oldTable.length; j > this.__lookupTable.length; j--) {\n          this.getTarget().removeAt(j - 1).destroy();\n        }\n      // if there are more items\n      } else if (oldTable.length < this.__lookupTable.length) {\n        // add the new elements\n        for (var j = oldTable.length; j < this.__lookupTable.length; j++) {\n          var tempItem = this._createItem();\n          this.getTarget().add(tempItem);\n        }\n      }\n\n      // bind every list item again\n      var listItems = this.getTarget().getChildren();\n      for (var i = 0; i < listItems.length; i++) {\n        this._bindListItem(listItems[i], this.__lookup(i));\n      }\n\n      // move the controllers change handler for the model to the end of the\n      // listeners queue\n      this.__moveChangeListenerAtTheEnd();\n\n      this._endSelectionModification();\n      this._updateSelection();\n    },\n\n\n    /**\n     * This helper is responsible for removing the filter and setting the\n     * controller to a valid state without a filtering.\n     */\n    __removeFilter : function()\n    {\n      // renew the index lookup table\n      this.__buildUpLookupTable();\n      // check for the new length\n      this.__changeModelLength();\n      // renew the bindings\n      this.__renewBindings();\n\n      // need an asynchronous selection update because the bindings have to be\n      // executed to update the selection probably (using the widget queue)\n      this.__syncModelSelection = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       LOOKUP STUFF\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper-Method which builds up the index lookup for the filter feature.\n     * If no filter is set, the lookup table will be a 1:1 mapping.\n     */\n    __buildUpLookupTable: function() {\n      var model = this.getModel();\n      if (model == null) {\n        return;\n      }\n      var delegate = this.getDelegate();\n      if (delegate != null) {\n        var filter = delegate.filter;\n      }\n\n      this.__lookupTable = [];\n      \n      // -1 is a special lookup value, to represent the \"null\" option \n      if (this.isAllowNull()) {\n        this.__lookupTable.push(-1);\n      }\n      for (var i = 0; i < model.getLength(); i++) {\n        if (filter == null || filter(model.getItem(i))) {\n          this.__lookupTable.push(i);\n        }\n      }\n    },\n\n\n    /**\n     * Function for accessing the lookup table.\n     *\n     * @param index {Integer} The index of the lookup table.\n     * @return {Number} Item index from lookup table\n     */\n    __lookup: function(index) {\n      return this.__lookupTable[index];\n    }\n  },\n\n\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n   destruct : function() {\n     this.__lookupTable = this.__onUpdate = this.__boundProperties = null;\n     this.__boundPropertiesReverse = null;\n\n     // remove yourself from the widget queue\n     qx.ui.core.queue.Widget.remove(this);\n   }\n});\n"
  ]
}