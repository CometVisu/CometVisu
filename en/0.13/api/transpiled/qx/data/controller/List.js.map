{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "include",
    "data",
    "controller",
    "MSelection",
    "implement",
    "ISelection",
    "construct",
    "model",
    "target",
    "labelPath",
    "constructor",
    "call",
    "__lookupTable",
    "__boundProperties",
    "__boundPropertiesReverse",
    "__onUpdate",
    "setLabelPath",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "delegate",
    "allowNull",
    "nullValueTitle",
    "nullValueIcon",
    "members",
    "__changeModelListenerId",
    "__syncTargetSelection",
    "__syncModelSelection",
    "update",
    "__changeModelLength",
    "__renewBindings",
    "_updateSelection",
    "_applyDelegate",
    "value",
    "old",
    "_setConfigureItem",
    "_setFilter",
    "_setCreateItem",
    "_setBindItem",
    "_applyIconOptions",
    "_applyLabelOptions",
    "_applyIconPath",
    "_applyLabelPath",
    "_applyAllowNull",
    "oldValue",
    "__refreshModel",
    "_applyNullValueTitle",
    "_applyNullValueIcon",
    "__P_174_9",
    "getModel",
    "getTarget",
    "_applyModel",
    "undefined",
    "removeListenerById",
    "getSelection",
    "length",
    "splice",
    "dispose",
    "addListener",
    "__changeModel",
    "__buildUpLookupTable",
    "_changeTargetSelection",
    "ui",
    "queue",
    "Widget",
    "add",
    "getChildren",
    "i",
    "__removeItem",
    "_applyTarget",
    "_addChangeTargetListener",
    "removed",
    "removeAll",
    "destroy",
    "removeAllBindings",
    "__addItem",
    "__lookup",
    "__inChangeModel",
    "__P_174_10",
    "syncWidget",
    "__P_174_7",
    "newLength",
    "currentLength",
    "j",
    "__moveChangeListenerAtTheEnd",
    "__P_174_16",
    "_createItem",
    "getDelegate",
    "createItem",
    "item",
    "form",
    "ListItem",
    "configureItem",
    "__P_174_13",
    "index",
    "listItem",
    "_bindListItem",
    "__P_174_12",
    "_startSelectionModification",
    "children",
    "oldItem",
    "_removeBindingsFrom",
    "removeAt",
    "_endSelectionModification",
    "getVisibleModels",
    "visibleModels",
    "items",
    "push",
    "Array",
    "setLabel",
    "getNullValueTitle",
    "setIcon",
    "getNullValueIcon",
    "bindItem",
    "bindDefaultProperties",
    "bindProperty",
    "getLabelPath",
    "getLabelOptions",
    "getIconPath",
    "getIconOptions",
    "sourcePath",
    "targetProperty",
    "options",
    "targetWidget",
    "lang",
    "clone",
    "onUpdate",
    "Function",
    "bind",
    "_onBindingSet",
    "ignoreConverter",
    "bindPath",
    "id",
    "setUserData",
    "includes",
    "bindPropertyReverse",
    "targetPath",
    "sourceWidget",
    "targetBindPath",
    "sourceObject",
    "targetObject",
    "_inSelectionModification",
    "getUserData",
    "removeBinding",
    "__P_174_8",
    "l",
    "filter",
    "__removeFilter",
    "oldTable",
    "tempItem",
    "listItems",
    "__P_174_17",
    "__P_174_11",
    "isAllowNull",
    "getLength",
    "getItem",
    "__P_174_14",
    "destruct",
    "remove",
    "List"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/List.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * <h2>List Controller</h2>\r\n *\r\n * *General idea*\r\n * The list controller is responsible for synchronizing every list like widget\r\n * with a data array. It does not matter if the array contains atomic values\r\n * like strings of complete objects where one property holds the value for\r\n * the label and another property holds the icon url. You can even use converters\r\n * that make the label show a text corresponding to the icon, by binding both\r\n * label and icon to the same model property and converting one of them.\r\n *\r\n * *Features*\r\n *\r\n * * Synchronize the model and the target\r\n * * Label and icon are bindable\r\n * * Takes care of the selection\r\n * * Passes on the options used by {@link qx.data.SingleValueBinding#bind}\r\n *\r\n * *Usage*\r\n *\r\n * As model, only {@link qx.data.Array}s do work. The currently supported\r\n * targets are\r\n *\r\n * * {@link qx.ui.form.SelectBox}\r\n * * {@link qx.ui.form.List}\r\n * * {@link qx.ui.form.ComboBox}\r\n *\r\n * All the properties like model, target or any property path is bindable.\r\n * Especially the model is nice to bind to another selection for example.\r\n * The controller itself can only work if it has a model and a target set. The\r\n * rest of the properties may be empty.\r\n *\r\n * *Cross reference*\r\n *\r\n * * If you want to bind single values, use {@link qx.data.controller.Object}\r\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\r\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\r\n */\r\nqx.Class.define(\"qx.data.controller.List\", {\r\n  extend: qx.core.Object,\r\n  include: qx.data.controller.MSelection,\r\n  implement: qx.data.controller.ISelection,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param model {qx.data.Array?null} The array containing the data.\r\n   *\r\n   * @param target {qx.ui.core.Widget?null} The widget which should show the\r\n   *   ListItems.\r\n   *\r\n   * @param labelPath {String?null} If the model contains objects, the labelPath\r\n   *   is the path reference to the property in these objects which should be\r\n   *   shown as label.\r\n   */\r\n  construct(model, target, labelPath) {\r\n    super();\r\n\r\n    // lookup table for filtering and sorting\r\n    this.__lookupTable = [];\r\n\r\n    // register for bound target properties and onUpdate methods\r\n    // from the binding options\r\n    this.__boundProperties = [];\r\n    this.__boundPropertiesReverse = [];\r\n    this.__onUpdate = {};\r\n\r\n    if (labelPath != null) {\r\n      this.setLabelPath(labelPath);\r\n    }\r\n    if (model != null) {\r\n      this.setModel(model);\r\n    }\r\n    if (target != null) {\r\n      this.setTarget(target);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /** Data array containing the data which should be shown in the list. */\r\n    model: {\r\n      check: \"qx.data.IListData\",\r\n      apply: \"_applyModel\",\r\n      event: \"changeModel\",\r\n      nullable: true,\r\n      dereference: true\r\n    },\r\n\r\n    /** The target widget which should show the data. */\r\n    target: {\r\n      apply: \"_applyTarget\",\r\n      event: \"changeTarget\",\r\n      nullable: true,\r\n      init: null,\r\n      dereference: true\r\n    },\r\n\r\n    /**\r\n     * The path to the property which holds the information that should be\r\n     * shown as a label. This is only needed if objects are stored in the model.\r\n     */\r\n    labelPath: {\r\n      check: \"String\",\r\n      apply: \"_applyLabelPath\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The path to the property which holds the information that should be\r\n     * shown as an icon. This is only needed if objects are stored in the model\r\n     * and if the icon should be shown.\r\n     */\r\n    iconPath: {\r\n      check: \"String\",\r\n      apply: \"_applyIconPath\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * A map containing the options for the label binding. The possible keys\r\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\r\n     */\r\n    labelOptions: {\r\n      apply: \"_applyLabelOptions\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * A map containing the options for the icon binding. The possible keys\r\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\r\n     */\r\n    iconOptions: {\r\n      apply: \"_applyIconOptions\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * Delegation object, which can have one or more functions defined by the\r\n     * {@link IControllerDelegate} interface.\r\n     */\r\n    delegate: {\r\n      apply: \"_applyDelegate\",\r\n      event: \"changeDelegate\",\r\n      init: null,\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * Whether a special \"null\" value is included in the list\r\n     */\r\n    allowNull: {\r\n      apply: \"_applyAllowNull\",\r\n      event: \"changeAllowNull\",\r\n      init: false,\r\n      nullable: false,\r\n      check: \"Boolean\"\r\n    },\r\n\r\n    /**\r\n     * Title for the special null value entry\r\n     */\r\n    nullValueTitle: {\r\n      apply: \"_applyNullValueTitle\",\r\n      event: \"changeNullValueTitle\",\r\n      init: null,\r\n      nullable: true,\r\n      check: \"String\"\r\n    },\r\n\r\n    /**\r\n     * Icon for the special null value entry\r\n     */\r\n    nullValueIcon: {\r\n      apply: \"_applyNullValueIcon\",\r\n      event: \"changeNullValueIcon\",\r\n      init: null,\r\n      nullable: true,\r\n      check: \"String\"\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    // private members\r\n    __changeModelListenerId: null,\r\n    __lookupTable: null,\r\n    __onUpdate: null,\r\n    __boundProperties: null,\r\n    __boundPropertiesReverse: null,\r\n    __syncTargetSelection: null,\r\n    __syncModelSelection: null,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       PUBLIC API\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Updates the filter and the target. This could be used if the filter\r\n     * uses an additional parameter which changes the filter result.\r\n     */\r\n    update() {\r\n      this.__changeModelLength();\r\n      this.__renewBindings();\r\n\r\n      this._updateSelection();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       APPLY METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * If a new delegate is set, it applies the stored configuration for the\r\n     * list items to the already created list items once.\r\n     *\r\n     * @param value {qx.core.Object|null} The new delegate.\r\n     * @param old {qx.core.Object|null} The old delegate.\r\n     */\r\n    _applyDelegate(value, old) {\r\n      this._setConfigureItem(value, old);\r\n      this._setFilter(value, old);\r\n      this._setCreateItem(value, old);\r\n      this._setBindItem(value, old);\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called if the icon options has been changed.\r\n     * It invokes a renewing of all set bindings.\r\n     *\r\n     * @param value {Map|null} The new icon options.\r\n     * @param old {Map|null} The old icon options.\r\n     */\r\n    _applyIconOptions(value, old) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertFalse(\r\n          value && !qx.lang.Type.isObject(value),\r\n          \"expecting an object\"\r\n        );\r\n\r\n        this.assertTrue(\r\n          !!value.converter ||\r\n            !!value.onUpdate ||\r\n            !!value.onSetFail ||\r\n            !!value.ignoreConverter\r\n        );\r\n      }\r\n      this.__renewBindings();\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called if the label options has been changed.\r\n     * It invokes a renewing of all set bindings.\r\n     *\r\n     * @param value {Map|null} The new label options.\r\n     * @param old {Map|null} The old label options.\r\n     */\r\n    _applyLabelOptions(value, old) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertFalse(\r\n          value && !qx.lang.Type.isObject(value),\r\n          \"expecting an object\"\r\n        );\r\n\r\n        this.assertTrue(\r\n          !!value.converter ||\r\n            !!value.onUpdate ||\r\n            !!value.onSetFail ||\r\n            !!value.ignoreConverter\r\n        );\r\n      }\r\n      this.__renewBindings();\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called if the icon path has been changed.\r\n     * It invokes a renewing of all set bindings.\r\n     *\r\n     * @param value {String|null} The new icon path.\r\n     * @param old {String|null} The old icon path.\r\n     */\r\n    _applyIconPath(value, old) {\r\n      this.__renewBindings();\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called if the label path has been changed.\r\n     * It invokes a renewing of all set bindings.\r\n     *\r\n     * @param value {String|null} The new label path.\r\n     * @param old {String|null} The old label path.\r\n     */\r\n    _applyLabelPath(value, old) {\r\n      this.__renewBindings();\r\n    },\r\n\r\n    /**\r\n     * Apply method for the `allowNull` property\r\n     */\r\n    _applyAllowNull(value, oldValue) {\r\n      this.__refreshModel();\r\n    },\r\n\r\n    /**\r\n     * Apply method for the `allowNull` property\r\n     */\r\n    _applyNullValueTitle(value, oldValue) {\r\n      this.__refreshModel();\r\n    },\r\n\r\n    /**\r\n     * Apply method for the `allowNull` property\r\n     */\r\n    _applyNullValueIcon(value, oldValue) {\r\n      this.__refreshModel();\r\n    },\r\n\r\n    /**\r\n     * Refreshes the model, uses when the model and target are not changing but the appearance\r\n     * and bindings may need to be updated\r\n     */\r\n    __refreshModel() {\r\n      if (this.getModel() && this.getTarget()) {\r\n        this.update();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called if the model has been changed. It\r\n     * removes all the listeners from the old model and adds the needed\r\n     * listeners to the new model. It also invokes the initial filling of the\r\n     * target widgets if there is a target set.\r\n     *\r\n     * @param value {qx.data.Array|null} The new model array.\r\n     * @param old {qx.data.Array|null} The old model array.\r\n     */\r\n    _applyModel(value, old) {\r\n      // remove the old listener\r\n      if (old != undefined) {\r\n        if (this.__changeModelListenerId != undefined) {\r\n          old.removeListenerById(this.__changeModelListenerId);\r\n        }\r\n      }\r\n\r\n      // erase the selection if there is something selected\r\n      if (this.getSelection() != undefined && this.getSelection().length > 0) {\r\n        this.getSelection().splice(0, this.getSelection().length).dispose();\r\n      }\r\n\r\n      // if a model is set\r\n      if (value != null) {\r\n        // add a new listener\r\n        this.__changeModelListenerId = value.addListener(\r\n          \"change\",\r\n          this.__changeModel,\r\n          this\r\n        );\r\n\r\n        // renew the index lookup table\r\n        this.__buildUpLookupTable();\r\n        // check for the new length\r\n        this.__changeModelLength();\r\n\r\n        // as we only change the labels of the items, the selection change event\r\n        // may be missing so we invoke it here\r\n        if (old == null) {\r\n          this._changeTargetSelection();\r\n        } else {\r\n          // update the selection asynchronously\r\n          this.__syncTargetSelection = true;\r\n          qx.ui.core.queue.Widget.add(this);\r\n        }\r\n      } else {\r\n        var target = this.getTarget();\r\n        // if the model is set to null, we should remove all items in the target\r\n        if (target != null) {\r\n          // we need to remove the bindings too so use the controller method\r\n          // for removing items\r\n          var length = target.getChildren().length;\r\n          for (var i = 0; i < length; i++) {\r\n            this.__removeItem();\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Apply-method which will be called if the target has been changed.\r\n     * When the target changes, every binding needs to be reset and the old\r\n     * target needs to be cleaned up. If there is a model, the target will be\r\n     * filled with the data of the model.\r\n     *\r\n     * @param value {qx.ui.core.Widget|null} The new target.\r\n     * @param old {qx.ui.core.Widget|null} The old target.\r\n     */\r\n    _applyTarget(value, old) {\r\n      // add a listener for the target change\r\n      this._addChangeTargetListener(value, old);\r\n\r\n      // if there was an old target\r\n      if (old != undefined) {\r\n        // remove all element of the old target\r\n        var removed = old.removeAll();\r\n        for (var i = 0; i < removed.length; i++) {\r\n          removed[i].destroy();\r\n        }\r\n        // remove all bindings\r\n        this.removeAllBindings();\r\n      }\r\n\r\n      if (value != null) {\r\n        if (this.getModel() != null) {\r\n          // add a binding for all elements in the model\r\n          for (var i = 0; i < this.__lookupTable.length; i++) {\r\n            this.__addItem(this.__lookup(i));\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Event handler for the change event of the model. If the model changes,\r\n     * Only the selection needs to be changed. The change of the data will\r\n     * be done by the binding.\r\n     */\r\n    __inChangeModel: false,\r\n\r\n    /**\r\n     * Event handler for the changeModel of the model. Updates the controller.\r\n     */\r\n    __changeModel() {\r\n      if (this.__inChangeModel) {\r\n        return;\r\n      }\r\n\r\n      this.__inChangeModel = true;\r\n      // need an asynchronous selection update because the bindings have to be\r\n      // executed to update the selection probably (using the widget queue)\r\n      // this.__syncTargetSelection = true;\r\n      this.__syncModelSelection = true;\r\n      qx.ui.core.queue.Widget.add(this);\r\n\r\n      // update on filtered lists... (bindings need to be renewed)\r\n      this.update();\r\n      this.__inChangeModel = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method used to sync the selection. The controller uses the\r\n     * widget queue to schedule the selection update. An asynchronous handling of\r\n     * the selection is needed because the bindings (event listeners for the\r\n     * binding) need to be executed before the selection is updated.\r\n     * @internal\r\n     */\r\n    syncWidget() {\r\n      if (this.__syncTargetSelection) {\r\n        this._changeTargetSelection();\r\n      }\r\n      if (this.__syncModelSelection) {\r\n        this._updateSelection();\r\n      }\r\n      this.__syncModelSelection = this.__syncTargetSelection = null;\r\n    },\r\n\r\n    /**\r\n     * Event handler for the changeLength of the model. If the length changes\r\n     * of the model, either ListItems need to be removed or added to the target.\r\n     */\r\n    __changeModelLength() {\r\n      // only do something if there is a target\r\n      if (this.getTarget() == null) {\r\n        return;\r\n      }\r\n\r\n      // build up the look up table\r\n      this.__buildUpLookupTable();\r\n\r\n      // get the length\r\n      var newLength = this.__lookupTable.length;\r\n      var currentLength = this.getTarget().getChildren().length;\r\n\r\n      // if there are more item\r\n      if (newLength > currentLength) {\r\n        // add the new elements\r\n        for (var j = currentLength; j < newLength; j++) {\r\n          this.__addItem(this.__lookup(j));\r\n        }\r\n        // if there are less elements\r\n      } else if (newLength < currentLength) {\r\n        // remove the unnecessary items\r\n        for (var j = currentLength; j > newLength; j--) {\r\n          this.__removeItem();\r\n        }\r\n      }\r\n\r\n      // build up the look up table\r\n      this.__buildUpLookupTable();\r\n\r\n      // sync the target selection in case someone deleted a item in\r\n      // selection mode \"one\" [BUG #4839]\r\n      this.__syncTargetSelection = true;\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    /**\r\n     * Helper method which removes and adds the change listener of the\r\n     * controller to the model. This is sometimes necessary to ensure that the\r\n     * listener of the controller is executed as the last listener of the chain.\r\n     */\r\n    __moveChangeListenerAtTheEnd() {\r\n      var model = this.getModel();\r\n      // it can be that the bindings has been reset without the model so\r\n      // maybe there is no model in some scenarios\r\n      if (model != null) {\r\n        model.removeListenerById(this.__changeModelListenerId);\r\n        this.__changeModelListenerId = model.addListener(\r\n          \"change\",\r\n          this.__changeModel,\r\n          this\r\n        );\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       ITEM HANDLING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Creates a ListItem and delegates the configure method if a delegate is\r\n     * set and the needed function (configureItem) is available.\r\n     *\r\n     * @return {qx.ui.form.ListItem} The created and configured ListItem.\r\n     */\r\n    _createItem() {\r\n      var delegate = this.getDelegate();\r\n      // check if a delegate and a create method is set\r\n      if (delegate != null && delegate.createItem != null) {\r\n        var item = delegate.createItem();\r\n      } else {\r\n        var item = new qx.ui.form.ListItem();\r\n      }\r\n\r\n      // if there is a configure method, invoke it\r\n      if (delegate != null && delegate.configureItem != null) {\r\n        delegate.configureItem(item);\r\n      }\r\n      return item;\r\n    },\r\n\r\n    /**\r\n     * Internal helper to add ListItems to the target including the creation\r\n     * of the binding.\r\n     *\r\n     * @param index {Number} The index of the item to add.\r\n     */\r\n    __addItem(index) {\r\n      // create a new ListItem\r\n      var listItem = this._createItem();\r\n      // set up the binding\r\n      this._bindListItem(listItem, index);\r\n      // add the ListItem to the target\r\n      this.getTarget().add(listItem);\r\n    },\r\n\r\n    /**\r\n     * Internal helper to remove ListItems from the target. Also the binding\r\n     * will be removed properly.\r\n     */\r\n    __removeItem() {\r\n      this._startSelectionModification();\r\n      var children = this.getTarget().getChildren();\r\n      // get the last binding id\r\n      var index = children.length - 1;\r\n      // get the item\r\n      var oldItem = children[index];\r\n      this._removeBindingsFrom(oldItem);\r\n      // remove the item\r\n      this.getTarget().removeAt(index);\r\n      oldItem.destroy();\r\n      this._endSelectionModification();\r\n    },\r\n\r\n    /**\r\n     * Returns all models currently visible by the list. This method is only\r\n     * useful if you use the filter via the {@link #delegate}.\r\n     *\r\n     * @return {qx.data.Array} A new data array container all the models\r\n     *   which representation items are currently visible.\r\n     */\r\n    getVisibleModels() {\r\n      var visibleModels = [];\r\n      var target = this.getTarget();\r\n      if (target != null) {\r\n        var items = target.getChildren();\r\n        for (var i = 0; i < items.length; i++) {\r\n          visibleModels.push(items[i].getModel());\r\n        }\r\n      }\r\n\r\n      return new qx.data.Array(visibleModels);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       BINDING STUFF\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Sets up the binding for the given ListItem and index.\r\n     *\r\n     * @param item {qx.ui.form.ListItem} The internally created and used\r\n     *   ListItem.\r\n     * @param index {Number} The index of the ListItem.\r\n     */\r\n    _bindListItem(item, index) {\r\n      // -1 is the special, \"null\" value item.  Nothing to bind, just fix the display and model\r\n      if (index < 0) {\r\n        item.setLabel(this.getNullValueTitle() || \"\");\r\n        item.setIcon(this.getNullValueIcon());\r\n        item.setModel(null);\r\n        return;\r\n      }\r\n      var delegate = this.getDelegate();\r\n      // if a delegate for creating the binding is given, use it\r\n      if (delegate != null && delegate.bindItem != null) {\r\n        delegate.bindItem(this, item, index);\r\n        // otherwise, try to bind the listItem by default\r\n      } else {\r\n        this.bindDefaultProperties(item, index);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper-Method for binding the default properties (label, icon and model)\r\n     * from the model to the target widget.\r\n     *\r\n     * This method should only be called in the\r\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\r\n     * implemented by the {@link #delegate} property.\r\n     *\r\n     * @param item {qx.ui.form.ListItem} The internally created and used\r\n     *   ListItem.\r\n     * @param index {Number} The index of the ListItem.\r\n     */\r\n    bindDefaultProperties(item, index) {\r\n      // model\r\n      this.bindProperty(\"\", \"model\", null, item, index);\r\n\r\n      // label\r\n      this.bindProperty(\r\n        this.getLabelPath(),\r\n        \"label\",\r\n        this.getLabelOptions(),\r\n        item,\r\n        index\r\n      );\r\n\r\n      // if the iconPath is set\r\n      if (this.getIconPath() != null) {\r\n        this.bindProperty(\r\n          this.getIconPath(),\r\n          \"icon\",\r\n          this.getIconOptions(),\r\n          item,\r\n          index\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper-Method for binding a given property from the model to the target\r\n     * widget.\r\n     * This method should only be called in the\r\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\r\n     * implemented by the {@link #delegate} property.\r\n     *\r\n     * @param sourcePath {String | null} The path to the property in the model.\r\n     *   If you use an empty string, the whole model item will be bound.\r\n     * @param targetProperty {String} The name of the property in the target\r\n     *   widget.\r\n     * @param options {Map | null} The options used by\r\n     *   {@link qx.data.SingleValueBinding#bind} to use for the binding.\r\n     * @param targetWidget {qx.ui.core.Widget} The target widget.\r\n     * @param index {Number} The index of the current binding.\r\n     */\r\n    bindProperty(sourcePath, targetProperty, options, targetWidget, index) {\r\n      // create the options for the binding containing the old options\r\n      // including the old onUpdate function\r\n      if (options != null) {\r\n        var options = qx.lang.Object.clone(options);\r\n        this.__onUpdate[targetProperty] = options.onUpdate;\r\n        delete options.onUpdate;\r\n      } else {\r\n        options = {};\r\n        this.__onUpdate[targetProperty] = null;\r\n      }\r\n      options.onUpdate = qx.lang.Function.bind(this._onBindingSet, this, index);\r\n      options.ignoreConverter = \"model\";\r\n\r\n      // build up the path for the binding\r\n      var bindPath = \"model[\" + index + \"]\";\r\n      if (sourcePath != null && sourcePath != \"\") {\r\n        bindPath += \".\" + sourcePath;\r\n      }\r\n      // create the binding\r\n      var id = this.bind(bindPath, targetWidget, targetProperty, options);\r\n      targetWidget.setUserData(targetProperty + \"BindingId\", id);\r\n\r\n      // save the bound property\r\n      if (!this.__boundProperties.includes(targetProperty)) {\r\n        this.__boundProperties.push(targetProperty);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper-Method for binding a given property from the target widget to\r\n     * the model.\r\n     * This method should only be called in the\r\n     * {@link qx.data.controller.IControllerDelegate#bindItem} function\r\n     * implemented by the {@link #delegate} property.\r\n     *\r\n     * @param targetPath {String | null} The path to the property in the model.\r\n     * @param sourcePath {String} The name of the property in the target.\r\n     * @param options {Map | null} The options to use by\r\n     *   {@link qx.data.SingleValueBinding#bind} for the binding.\r\n     * @param sourceWidget {qx.ui.core.Widget} The source widget.\r\n     * @param index {Number} The index of the current binding.\r\n     */\r\n    bindPropertyReverse(targetPath, sourcePath, options, sourceWidget, index) {\r\n      // build up the path for the binding\r\n      var targetBindPath = \"model[\" + index + \"]\";\r\n      if (targetPath != null && targetPath != \"\") {\r\n        targetBindPath += \".\" + targetPath;\r\n      }\r\n      // create the binding\r\n      var id = sourceWidget.bind(sourcePath, this, targetBindPath, options);\r\n      sourceWidget.setUserData(targetPath + \"ReverseBindingId\", id);\r\n\r\n      // save the bound property\r\n      if (!this.__boundPropertiesReverse.includes(targetPath)) {\r\n        this.__boundPropertiesReverse.push(targetPath);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Method which will be called on the invoke of every binding. It takes\r\n     * care of the selection on the change of the binding.\r\n     *\r\n     * @param index {Number} The index of the current binding.\r\n     * @param sourceObject {qx.core.Object} The source object of the binding.\r\n     * @param targetObject {qx.core.Object} The target object of the binding.\r\n     */\r\n    _onBindingSet(index, sourceObject, targetObject) {\r\n      // ignore the binding set if the model is already set to null\r\n      if (this.getModel() == null || this._inSelectionModification()) {\r\n        return;\r\n      }\r\n\r\n      // go through all bound target properties\r\n      for (var i = 0; i < this.__boundProperties.length; i++) {\r\n        // if there is an onUpdate for one of it, invoke it\r\n        if (this.__onUpdate[this.__boundProperties[i]] != null) {\r\n          this.__onUpdate[this.__boundProperties[i]]();\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Internal helper method to remove the binding of the given item.\r\n     *\r\n     * @param item {Number} The item of which the binding which should\r\n     *   be removed.\r\n     */\r\n    _removeBindingsFrom(item) {\r\n      // go through all bound target properties\r\n      for (var i = 0; i < this.__boundProperties.length; i++) {\r\n        // get the binding id and remove it, if possible\r\n        var id = item.getUserData(this.__boundProperties[i] + \"BindingId\");\r\n        if (id != null) {\r\n          this.removeBinding(id);\r\n          item.setUserData(this.__boundProperties[i] + \"BindingId\", null);\r\n        }\r\n      }\r\n      // go through all reverse bound properties\r\n      for (var i = 0; i < this.__boundPropertiesReverse.length; i++) {\r\n        // get the binding id and remove it, if possible\r\n        var id = item.getUserData(\r\n          this.__boundPropertiesReverse[i] + \"ReverseBindingId\"\r\n        );\r\n\r\n        if (id != null) {\r\n          item.removeBinding(id);\r\n          item.getUserData(\r\n            this.__boundPropertiesReverse[i] + \"ReverseBindingId\",\r\n            null\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Internal helper method to renew all set bindings.\r\n     */\r\n    __renewBindings() {\r\n      // ignore, if no target is set (startup)\r\n      if (this.getTarget() == null || this.getModel() == null) {\r\n        return;\r\n      }\r\n\r\n      // get all children of the target\r\n      var items = this.getTarget().getChildren();\r\n      // go through all items\r\n      for (var i = 0; i < items.length; i++) {\r\n        this._removeBindingsFrom(items[i]);\r\n        // add the new binding\r\n        this._bindListItem(items[i], this.__lookup(i));\r\n      }\r\n\r\n      // move the controllers change handler for the model to the end of the\r\n      // listeners queue\r\n      this.__moveChangeListenerAtTheEnd();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       DELEGATE HELPER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Helper method for applying the delegate It checks if a configureItem\r\n     * is set end invokes the initial process to apply the given function.\r\n     *\r\n     * @param value {Object} The new delegate.\r\n     * @param old {Object} The old delegate.\r\n     */\r\n    _setConfigureItem(value, old) {\r\n      if (\r\n        value != null &&\r\n        value.configureItem != null &&\r\n        this.getTarget() != null\r\n      ) {\r\n        var children = this.getTarget().getChildren();\r\n        for (var i = 0; i < children.length; i++) {\r\n          value.configureItem(children[i]);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper method for applying the delegate It checks if a bindItem\r\n     * is set end invokes the initial process to apply the given function.\r\n     *\r\n     * @param value {Object} The new delegate.\r\n     * @param old {Object} The old delegate.\r\n     */\r\n    _setBindItem(value, old) {\r\n      // if a new bindItem function is set\r\n      if (value != null && value.bindItem != null) {\r\n        // do nothing if the bindItem function did not change\r\n        if (\r\n          old != null &&\r\n          old.bindItem != null &&\r\n          value.bindItem == old.bindItem\r\n        ) {\r\n          return;\r\n        }\r\n        this.__renewBindings();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper method for applying the delegate It checks if a createItem\r\n     * is set end invokes the initial process to apply the given function.\r\n     *\r\n     * @param value {Object} The new delegate.\r\n     * @param old {Object} The old delegate.\r\n     */\r\n    _setCreateItem(value, old) {\r\n      if (\r\n        this.getTarget() == null ||\r\n        this.getModel() == null ||\r\n        value == null ||\r\n        value.createItem == null\r\n      ) {\r\n        return;\r\n      }\r\n      this._startSelectionModification();\r\n\r\n      // remove all bindings\r\n      var children = this.getTarget().getChildren();\r\n      for (var i = 0, l = children.length; i < l; i++) {\r\n        this._removeBindingsFrom(children[i]);\r\n      }\r\n\r\n      // remove all elements of the target\r\n      var removed = this.getTarget().removeAll();\r\n      for (var i = 0; i < removed.length; i++) {\r\n        removed[i].destroy();\r\n      }\r\n\r\n      // update\r\n      this.update();\r\n\r\n      this._endSelectionModification();\r\n      this._updateSelection();\r\n    },\r\n\r\n    /**\r\n     * Apply-Method for setting the filter. It removes all bindings,\r\n     * check if the length has changed and adds or removes the items in the\r\n     * target. After that, the bindings will be set up again and the selection\r\n     * will be updated.\r\n     *\r\n     * @param value {Function|null} The new filter function.\r\n     * @param old {Function|null} The old filter function.\r\n     */\r\n    _setFilter(value, old) {\r\n      // update the filter if it has been removed\r\n      if (\r\n        (value == null || value.filter == null) &&\r\n        old != null &&\r\n        old.filter != null\r\n      ) {\r\n        this.__removeFilter();\r\n      }\r\n\r\n      // check if it is necessary to do anything\r\n      if (\r\n        this.getTarget() == null ||\r\n        this.getModel() == null ||\r\n        value == null ||\r\n        value.filter == null\r\n      ) {\r\n        return;\r\n      }\r\n      // if yes, continue\r\n\r\n      this._startSelectionModification();\r\n\r\n      // remove all bindings\r\n      var children = this.getTarget().getChildren();\r\n      for (var i = 0, l = children.length; i < l; i++) {\r\n        this._removeBindingsFrom(children[i]);\r\n      }\r\n\r\n      // store the old lookup table\r\n      var oldTable = this.__lookupTable;\r\n      // generate a new lookup table\r\n      this.__buildUpLookupTable();\r\n\r\n      // if there are lesser items\r\n      if (oldTable.length > this.__lookupTable.length) {\r\n        // remove the unnecessary items\r\n        for (var j = oldTable.length; j > this.__lookupTable.length; j--) {\r\n          this.getTarget()\r\n            .removeAt(j - 1)\r\n            .destroy();\r\n        }\r\n        // if there are more items\r\n      } else if (oldTable.length < this.__lookupTable.length) {\r\n        // add the new elements\r\n        for (var j = oldTable.length; j < this.__lookupTable.length; j++) {\r\n          var tempItem = this._createItem();\r\n          this.getTarget().add(tempItem);\r\n        }\r\n      }\r\n\r\n      // bind every list item again\r\n      var listItems = this.getTarget().getChildren();\r\n      for (var i = 0; i < listItems.length; i++) {\r\n        this._bindListItem(listItems[i], this.__lookup(i));\r\n      }\r\n\r\n      // move the controllers change handler for the model to the end of the\r\n      // listeners queue\r\n      this.__moveChangeListenerAtTheEnd();\r\n\r\n      this._endSelectionModification();\r\n      this._updateSelection();\r\n    },\r\n\r\n    /**\r\n     * This helper is responsible for removing the filter and setting the\r\n     * controller to a valid state without a filtering.\r\n     */\r\n    __removeFilter() {\r\n      // renew the index lookup table\r\n      this.__buildUpLookupTable();\r\n      // check for the new length\r\n      this.__changeModelLength();\r\n      // renew the bindings\r\n      this.__renewBindings();\r\n\r\n      // need an asynchronous selection update because the bindings have to be\r\n      // executed to update the selection probably (using the widget queue)\r\n      this.__syncModelSelection = true;\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n       LOOKUP STUFF\r\n    ---------------------------------------------------------------------------\r\n    */\r\n    /**\r\n     * Helper-Method which builds up the index lookup for the filter feature.\r\n     * If no filter is set, the lookup table will be a 1:1 mapping.\r\n     */\r\n    __buildUpLookupTable() {\r\n      var model = this.getModel();\r\n      if (model == null) {\r\n        return;\r\n      }\r\n      var delegate = this.getDelegate();\r\n      if (delegate != null) {\r\n        var filter = delegate.filter;\r\n      }\r\n\r\n      this.__lookupTable = [];\r\n\r\n      // -1 is a special lookup value, to represent the \"null\" option\r\n      if (this.isAllowNull()) {\r\n        this.__lookupTable.push(-1);\r\n      }\r\n      for (var i = 0; i < model.getLength(); i++) {\r\n        if (filter == null || filter(model.getItem(i))) {\r\n          this.__lookupTable.push(i);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Function for accessing the lookup table.\r\n     *\r\n     * @param index {Integer} The index of the lookup table.\r\n     * @return {Number} Item index from lookup table\r\n     */\r\n    __lookup(index) {\r\n      return this.__lookupTable[index];\r\n    }\r\n  },\r\n\r\n  /*\r\n   *****************************************************************************\r\n      DESTRUCTOR\r\n   *****************************************************************************\r\n   */\r\n\r\n  destruct() {\r\n    this.__lookupTable = this.__onUpdate = this.__boundProperties = null;\r\n    this.__boundPropertiesReverse = null;\r\n\r\n    // remove yourself from the widget queue\r\n    qx.ui.core.queue.Widget.remove(this);\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,yBAAyB,EAAE;IACzCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IACtBC,OAAO,EAAET,EAAE,CAACU,IAAI,CAACC,UAAU,CAACC,UAAU;IACtCC,SAAS,EAAEb,EAAE,CAACU,IAAI,CAACC,UAAU,CAACG,UAAU;IAExC;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,KAAK,EAAEC,MAAM,EAAEC,SAAS,EAAE;MAClClB,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAW,WAAA,CAAAC,IAAA;;MAEA;MACA,IAAI,CAACC,SAAa,GAAG,EAAE;;MAEvB;MACA;MACA,IAAI,CAACC,SAAiB,GAAG,EAAE;MAC3B,IAAI,CAACC,SAAwB,GAAG,EAAE;MAClC,IAAI,CAACC,SAAU,GAAG,CAAC,CAAC;MAEpB,IAAIN,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACO,YAAY,CAACP,SAAS,CAAC;MAC9B;MACA,IAAIF,KAAK,IAAI,IAAI,EAAE;QACjB,IAAI,CAACU,QAAQ,CAACV,KAAK,CAAC;MACtB;MACA,IAAIC,MAAM,IAAI,IAAI,EAAE;QAClB,IAAI,CAACU,SAAS,CAACV,MAAM,CAAC;MACxB;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEW,UAAU,EAAE;MACV;MACAZ,KAAK,EAAE;QA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"
}