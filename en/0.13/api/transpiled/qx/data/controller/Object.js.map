{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "model",
    "__bindings",
    "__targets",
    "setModel",
    "properties",
    "check",
    "event",
    "apply",
    "nullable",
    "dereference",
    "members",
    "_applyModel",
    "value",
    "old",
    "i",
    "length",
    "targetObject",
    "targetProperty",
    "sourceProperty",
    "bidirectional",
    "options",
    "reverseOptions",
    "undefined",
    "isDisposed",
    "__removeTargetFrom",
    "__addTarget",
    "ObjectRegistry",
    "inShutDown",
    "indexOf",
    "lang",
    "String",
    "firstUp",
    "open",
    "index",
    "parseInt",
    "substring",
    "targetArray",
    "setItem",
    "addTarget",
    "push",
    "getModel",
    "id",
    "bind",
    "idReverse",
    "targetHash",
    "toHashCode",
    "removeTarget",
    "splice",
    "sourceObject",
    "currentListing",
    "removeBinding",
    "destruct",
    "data",
    "controller"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Object.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * <h2>Object Controller</h2>\n *\n * *General idea*\n *\n * The idea of the object controller is to make the binding of one model object\n * containing one or more properties as easy as possible. Therefore the\n * controller can take a model as property. Every property in that model can be\n * bound to one or more target properties. The binding will be for\n * atomic types only like Numbers, Strings, ...\n *\n * *Features*\n *\n * * Manages the bindings between the model properties and the different targets\n * * No need for the user to take care of the binding ids\n * * Can create an bidirectional binding (read- / write-binding)\n * * Handles the change of the model which means adding the old targets\n *\n * *Usage*\n *\n * The controller only can work if a model is set. If the model property is\n * null, the controller is not working. But it can be null on any time.\n *\n * *Cross reference*\n *\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.Object\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.core.Object?null} The model for the model property.\n   */\n  construct(model) {\n    super();\n\n    // create a map for all created binding ids\n    this.__bindings = {};\n    // create an array to store all current targets\n    this.__targets = [];\n\n    if (model != null) {\n      this.setModel(model);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The model object which does have the properties for the binding. */\n    model: {\n      check: \"qx.core.Object\",\n      event: \"changeModel\",\n      apply: \"_applyModel\",\n      nullable: true,\n      dereference: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // private members\n    __targets: null,\n    __bindings: null,\n\n    /**\n     * Apply-method which will be called if a new model has been set.\n     * All bindings will be moved to the new model.\n     *\n     * @param value {qx.core.Object|null} The new model.\n     * @param old {qx.core.Object|null} The old model.\n     */\n    _applyModel(value, old) {\n      // for every target\n      for (var i = 0; i < this.__targets.length; i++) {\n        // get the properties\n        var targetObject = this.__targets[i][0];\n        var targetProperty = this.__targets[i][1];\n        var sourceProperty = this.__targets[i][2];\n        var bidirectional = this.__targets[i][3];\n        var options = this.__targets[i][4];\n        var reverseOptions = this.__targets[i][5];\n\n        // remove it from the old if possible\n        if (old != undefined && !old.isDisposed()) {\n          this.__removeTargetFrom(\n            targetObject,\n            targetProperty,\n            sourceProperty,\n            old\n          );\n        }\n\n        // add it to the new if available\n        if (value != undefined) {\n          this.__addTarget(\n            targetObject,\n            targetProperty,\n            sourceProperty,\n            bidirectional,\n            options,\n            reverseOptions\n          );\n        } else {\n          // in shutdown situations, it may be that something is already\n          // disposed [BUG #4343]\n          if (targetObject.isDisposed() || qx.core.ObjectRegistry.inShutDown) {\n            continue;\n          }\n          // if the model is null, reset the current target\n          if (targetProperty.indexOf(\"[\") == -1) {\n            targetObject[\"reset\" + qx.lang.String.firstUp(targetProperty)]();\n          } else {\n            var open = targetProperty.indexOf(\"[\");\n            var index = parseInt(\n              targetProperty.substring(open + 1, targetProperty.length - 1),\n              10\n            );\n\n            targetProperty = targetProperty.substring(0, open);\n            var targetArray =\n              targetObject[\"get\" + qx.lang.String.firstUp(targetProperty)]();\n            if (index == \"last\") {\n              index = targetArray.length;\n            }\n            if (targetArray) {\n              targetArray.setItem(index, null);\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Adds a new target to the controller. After adding the target, the given\n     * property of the model will be bound to the targets property.\n     *\n     * @param targetObject {qx.core.Object} The object on which the property\n     *   should be bound.\n     *\n     * @param targetProperty {String} The property to which the binding should\n     *   go.\n     *\n     * @param sourceProperty {String} The name of the property in the model.\n     *\n     * @param bidirectional {Boolean?false} Signals if the binding should also work\n     *   in the reverse direction, from the target to source.\n     *\n     * @param options {Map?null} The options Map used by the binding from source\n     *   to target. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     *\n     * @param reverseOptions {Map?null} The options used by the binding in the\n     *   reverse direction. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     */\n    addTarget(\n      targetObject,\n      targetProperty,\n      sourceProperty,\n      bidirectional,\n      options,\n      reverseOptions\n    ) {\n      // store the added target\n      this.__targets.push([\n        targetObject,\n        targetProperty,\n        sourceProperty,\n        bidirectional,\n        options,\n        reverseOptions\n      ]);\n\n      // delegate the adding\n      this.__addTarget(\n        targetObject,\n        targetProperty,\n        sourceProperty,\n        bidirectional,\n        options,\n        reverseOptions\n      );\n    },\n\n    /**\n     * Does the work for {@link #addTarget} but without saving the target\n     * to the internal target registry.\n     *\n     * @param targetObject {qx.core.Object} The object on which the property\n     *   should be bound.\n     *\n     * @param targetProperty {String} The property to which the binding should\n     *   go.\n     *\n     * @param sourceProperty {String} The name of the property in the model.\n     *\n     * @param bidirectional {Boolean?false} Signals if the binding should also work\n     *   in the reverse direction, from the target to source.\n     *\n     * @param options {Map?null} The options Map used by the binding from source\n     *   to target. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     *\n     * @param reverseOptions {Map?null} The options used by the binding in the\n     *   reverse direction. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     */\n    __addTarget(\n      targetObject,\n      targetProperty,\n      sourceProperty,\n      bidirectional,\n      options,\n      reverseOptions\n    ) {\n      // do nothing if no model is set\n      if (this.getModel() == null) {\n        return;\n      }\n\n      // create the binding\n      var id = this.getModel().bind(\n        sourceProperty,\n        targetObject,\n        targetProperty,\n        options\n      );\n\n      // create the reverse binding if necessary\n      var idReverse = null;\n      if (bidirectional) {\n        idReverse = targetObject.bind(\n          targetProperty,\n          this.getModel(),\n          sourceProperty,\n          reverseOptions\n        );\n      }\n\n      // save the binding\n      var targetHash = targetObject.toHashCode();\n      if (this.__bindings[targetHash] == undefined) {\n        this.__bindings[targetHash] = [];\n      }\n      this.__bindings[targetHash].push([\n        id,\n        idReverse,\n        targetProperty,\n        sourceProperty,\n        options,\n        reverseOptions\n      ]);\n    },\n\n    /**\n     * Removes the target identified by the three properties.\n     *\n     * @param targetObject {qx.core.Object} The target object on which the\n     *   binding exist.\n     *\n     * @param targetProperty {String} The targets property name used by the\n     *   adding of the target.\n     *\n     * @param sourceProperty {String} The name of the property of the model.\n     */\n    removeTarget(targetObject, targetProperty, sourceProperty) {\n      this.__removeTargetFrom(\n        targetObject,\n        targetProperty,\n        sourceProperty,\n        this.getModel()\n      );\n\n      // delete the target in the targets reference\n      for (var i = 0; i < this.__targets.length; i++) {\n        if (\n          this.__targets[i][0] == targetObject &&\n          this.__targets[i][1] == targetProperty &&\n          this.__targets[i][2] == sourceProperty\n        ) {\n          this.__targets.splice(i, 1);\n        }\n      }\n    },\n\n    /**\n     * Does the work for {@link #removeTarget} but without removing the target\n     * from the internal registry.\n     *\n     * @param targetObject {qx.core.Object} The target object on which the\n     *   binding exist.\n     *\n     * @param targetProperty {String} The targets property name used by the\n     *   adding of the target.\n     *\n     * @param sourceProperty {String} The name of the property of the model.\n     *\n     * @param sourceObject {String} The source object from which the binding\n     *   comes.\n     */\n    __removeTargetFrom(\n      targetObject,\n      targetProperty,\n      sourceProperty,\n      sourceObject\n    ) {\n      // check for not fitting targetObjects\n      if (!(targetObject instanceof qx.core.Object)) {\n        // just do nothing\n        return;\n      }\n\n      var currentListing = this.__bindings[targetObject.toHashCode()];\n      // if no binding is stored\n      if (currentListing == undefined || currentListing.length == 0) {\n        return;\n      }\n\n      // go threw all listings for the object\n      for (var i = 0; i < currentListing.length; i++) {\n        // if it is the listing\n        if (\n          currentListing[i][2] == targetProperty &&\n          currentListing[i][3] == sourceProperty\n        ) {\n          // remove the binding\n          var id = currentListing[i][0];\n          sourceObject.removeBinding(id);\n          // check for the reverse binding\n          if (currentListing[i][1] != null) {\n            targetObject.removeBinding(currentListing[i][1]);\n          }\n          // delete the entry and return\n          currentListing.splice(i, 1);\n          return;\n        }\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct() {\n    // set the model to null to get the bindings removed\n    if (this.getModel() != null && !this.getModel().isDisposed()) {\n      this.setModel(null);\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}