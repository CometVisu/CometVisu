{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "model",
    "constructor",
    "call",
    "__bindings",
    "__targets",
    "setModel",
    "properties",
    "check",
    "event",
    "apply",
    "nullable",
    "dereference",
    "members",
    "_applyModel",
    "value",
    "old",
    "i",
    "length",
    "targetObject",
    "targetProperty",
    "sourceProperty",
    "bidirectional",
    "options",
    "reverseOptions",
    "undefined",
    "isDisposed",
    "__removeTargetFrom",
    "__addTarget",
    "ObjectRegistry",
    "inShutDown",
    "indexOf",
    "lang",
    "String",
    "firstUp",
    "open",
    "index",
    "parseInt",
    "substring",
    "targetArray",
    "setItem",
    "addTarget",
    "push",
    "__P_176_3",
    "getModel",
    "id",
    "bind",
    "idReverse",
    "targetHash",
    "toHashCode",
    "removeTarget",
    "splice",
    "__P_176_2",
    "sourceObject",
    "currentListing",
    "removeBinding",
    "destruct",
    "data",
    "controller"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Object.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * <h2>Object Controller</h2>\n *\n * *General idea*\n *\n * The idea of the object controller is to make the binding of one model object\n * containing one or more properties as easy as possible. Therefore the\n * controller can take a model as property. Every property in that model can be\n * bound to one or more target properties. The binding will be for\n * atomic types only like Numbers, Strings, ...\n *\n * *Features*\n *\n * * Manages the bindings between the model properties and the different targets\n * * No need for the user to take care of the binding ids\n * * Can create an bidirectional binding (read- / write-binding)\n * * Handles the change of the model which means adding the old targets\n *\n * *Usage*\n *\n * The controller only can work if a model is set. If the model property is\n * null, the controller is not working. But it can be null on any time.\n *\n * *Cross reference*\n *\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\n */\nqx.Class.define(\"qx.data.controller.Object\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param model {qx.core.Object?null} The model for the model property.\n   */\n  construct(model) {\n    super();\n\n    // create a map for all created binding ids\n    this.__bindings = {};\n    // create an array to store all current targets\n    this.__targets = [];\n\n    if (model != null) {\n      this.setModel(model);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The model object which does have the properties for the binding. */\n    model: {\n      check: \"qx.core.Object\",\n      event: \"changeModel\",\n      apply: \"_applyModel\",\n      nullable: true,\n      dereference: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    // private members\n    __targets: null,\n    __bindings: null,\n\n    /**\n     * Apply-method which will be called if a new model has been set.\n     * All bindings will be moved to the new model.\n     *\n     * @param value {qx.core.Object|null} The new model.\n     * @param old {qx.core.Object|null} The old model.\n     */\n    _applyModel(value, old) {\n      // for every target\n      for (var i = 0; i < this.__targets.length; i++) {\n        // get the properties\n        var targetObject = this.__targets[i][0];\n        var targetProperty = this.__targets[i][1];\n        var sourceProperty = this.__targets[i][2];\n        var bidirectional = this.__targets[i][3];\n        var options = this.__targets[i][4];\n        var reverseOptions = this.__targets[i][5];\n\n        // remove it from the old if possible\n        if (old != undefined && !old.isDisposed()) {\n          this.__removeTargetFrom(\n            targetObject,\n            targetProperty,\n            sourceProperty,\n            old\n          );\n        }\n\n        // add it to the new if available\n        if (value != undefined) {\n          this.__addTarget(\n            targetObject,\n            targetProperty,\n            sourceProperty,\n            bidirectional,\n            options,\n            reverseOptions\n          );\n        } else {\n          // in shutdown situations, it may be that something is already\n          // disposed [BUG #4343]\n          if (targetObject.isDisposed() || qx.core.ObjectRegistry.inShutDown) {\n            continue;\n          }\n          // if the model is null, reset the current target\n          if (targetProperty.indexOf(\"[\") == -1) {\n            targetObject[\"reset\" + qx.lang.String.firstUp(targetProperty)]();\n          } else {\n            var open = targetProperty.indexOf(\"[\");\n            var index = parseInt(\n              targetProperty.substring(open + 1, targetProperty.length - 1),\n              10\n            );\n\n            targetProperty = targetProperty.substring(0, open);\n            var targetArray =\n              targetObject[\"get\" + qx.lang.String.firstUp(targetProperty)]();\n            if (index == \"last\") {\n              index = targetArray.length;\n            }\n            if (targetArray) {\n              targetArray.setItem(index, null);\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Adds a new target to the controller. After adding the target, the given\n     * property of the model will be bound to the targets property.\n     *\n     * @param targetObject {qx.core.Object} The object on which the property\n     *   should be bound.\n     *\n     * @param targetProperty {String} The property to which the binding should\n     *   go.\n     *\n     * @param sourceProperty {String} The name of the property in the model.\n     *\n     * @param bidirectional {Boolean?false} Signals if the binding should also work\n     *   in the reverse direction, from the target to source.\n     *\n     * @param options {Map?null} The options Map used by the binding from source\n     *   to target. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     *\n     * @param reverseOptions {Map?null} The options used by the binding in the\n     *   reverse direction. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     */\n    addTarget(\n      targetObject,\n      targetProperty,\n      sourceProperty,\n      bidirectional,\n      options,\n      reverseOptions\n    ) {\n      // store the added target\n      this.__targets.push([\n        targetObject,\n        targetProperty,\n        sourceProperty,\n        bidirectional,\n        options,\n        reverseOptions\n      ]);\n\n      // delegate the adding\n      this.__addTarget(\n        targetObject,\n        targetProperty,\n        sourceProperty,\n        bidirectional,\n        options,\n        reverseOptions\n      );\n    },\n\n    /**\n     * Does the work for {@link #addTarget} but without saving the target\n     * to the internal target registry.\n     *\n     * @param targetObject {qx.core.Object} The object on which the property\n     *   should be bound.\n     *\n     * @param targetProperty {String} The property to which the binding should\n     *   go.\n     *\n     * @param sourceProperty {String} The name of the property in the model.\n     *\n     * @param bidirectional {Boolean?false} Signals if the binding should also work\n     *   in the reverse direction, from the target to source.\n     *\n     * @param options {Map?null} The options Map used by the binding from source\n     *   to target. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     *\n     * @param reverseOptions {Map?null} The options used by the binding in the\n     *   reverse direction. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     */\n    __addTarget(\n      targetObject,\n      targetProperty,\n      sourceProperty,\n      bidirectional,\n      options,\n      reverseOptions\n    ) {\n      // do nothing if no model is set\n      if (this.getModel() == null) {\n        return;\n      }\n\n      // create the binding\n      var id = this.getModel().bind(\n        sourceProperty,\n        targetObject,\n        targetProperty,\n        options\n      );\n\n      // create the reverse binding if necessary\n      var idReverse = null;\n      if (bidirectional) {\n        idReverse = targetObject.bind(\n          targetProperty,\n          this.getModel(),\n          sourceProperty,\n          reverseOptions\n        );\n      }\n\n      // save the binding\n      var targetHash = targetObject.toHashCode();\n      if (this.__bindings[targetHash] == undefined) {\n        this.__bindings[targetHash] = [];\n      }\n      this.__bindings[targetHash].push([\n        id,\n        idReverse,\n        targetProperty,\n        sourceProperty,\n        options,\n        reverseOptions\n      ]);\n    },\n\n    /**\n     * Removes the target identified by the three properties.\n     *\n     * @param targetObject {qx.core.Object} The target object on which the\n     *   binding exist.\n     *\n     * @param targetProperty {String} The targets property name used by the\n     *   adding of the target.\n     *\n     * @param sourceProperty {String} The name of the property of the model.\n     */\n    removeTarget(targetObject, targetProperty, sourceProperty) {\n      this.__removeTargetFrom(\n        targetObject,\n        targetProperty,\n        sourceProperty,\n        this.getModel()\n      );\n\n      // delete the target in the targets reference\n      for (var i = 0; i < this.__targets.length; i++) {\n        if (\n          this.__targets[i][0] == targetObject &&\n          this.__targets[i][1] == targetProperty &&\n          this.__targets[i][2] == sourceProperty\n        ) {\n          this.__targets.splice(i, 1);\n        }\n      }\n    },\n\n    /**\n     * Does the work for {@link #removeTarget} but without removing the target\n     * from the internal registry.\n     *\n     * @param targetObject {qx.core.Object} The target object on which the\n     *   binding exist.\n     *\n     * @param targetProperty {String} The targets property name used by the\n     *   adding of the target.\n     *\n     * @param sourceProperty {String} The name of the property of the model.\n     *\n     * @param sourceObject {String} The source object from which the binding\n     *   comes.\n     */\n    __removeTargetFrom(\n      targetObject,\n      targetProperty,\n      sourceProperty,\n      sourceObject\n    ) {\n      // check for not fitting targetObjects\n      if (!(targetObject instanceof qx.core.Object)) {\n        // just do nothing\n        return;\n      }\n\n      var currentListing = this.__bindings[targetObject.toHashCode()];\n      // if no binding is stored\n      if (currentListing == undefined || currentListing.length == 0) {\n        return;\n      }\n\n      // go threw all listings for the object\n      for (var i = 0; i < currentListing.length; i++) {\n        // if it is the listing\n        if (\n          currentListing[i][2] == targetProperty &&\n          currentListing[i][3] == sourceProperty\n        ) {\n          // remove the binding\n          var id = currentListing[i][0];\n          sourceObject.removeBinding(id);\n          // check for the reverse binding\n          if (currentListing[i][1] != null) {\n            targetObject.removeBinding(currentListing[i][1]);\n          }\n          // delete the entry and return\n          currentListing.splice(i, 1);\n          return;\n        }\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct() {\n    // set the model to null to get the bindings removed\n    if (this.getModel() != null && !this.getModel().isDisposed()) {\n      this.setModel(null);\n    }\n  }\n});\n"
  ],
  "mappings": "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pB,YAAY,CAAC,KAAK,GAAG5B,EAAE,CAACyC,IAAI,CAACC,MAAM,CAACC,OAAO,CAACd,cAAc,CAAC,CAAC,EAAE;cAChE,IAAIgB,KAAK,IAAI,MAAM,EAAE;gBACnBA,KAAK,GAAGG,WAAW,CAACrB,MAAM;cAC5B;cACA,IAAIqB,WAAW,EAAE;gBACfA,WAAW,CAACC,OAAO,CAACJ,KAAK,EAAE,IAAI,CAAC;cAClC;YACF;UACF;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,SAAS,WAAAA,UACPtB,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,cAAc,EACd;QACA;QACA,IAAI,CAACnB,SAAS,CAACqC,IAAI,CAAC,CAClBvB,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,cAAc,CACf,CAAC;;QAEF;QACA,IAAI,CAACI,SAAW,CACdT,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,cAAc,CACf;MACH,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,SAAW,WAAAe,UACTxB,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,cAAc,EACd;QACA;QACA,IAAI,IAAI,CAACoB,QAAQ,EAAE,IAAI,IAAI,EAAE;UAC3B;QACF;;QAEA;QACA,IAAIC,EAAE,GAAG,IAAI,CAACD,QAAQ,EAAE,CAACE,IAAI,CAC3BzB,cAAc,EACdF,YAAY,EACZC,cAAc,EACdG,OAAO,CACR;;QAED;QACA,IAAIwB,SAAS,GAAG,IAAI;QACpB,IAAIzB,aAAa,EAAE;UACjByB,SAAS,GAAG5B,YAAY,CAAC2B,IAAI,CAC3B1B,cAAc,EACd,IAAI,CAACwB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"
}