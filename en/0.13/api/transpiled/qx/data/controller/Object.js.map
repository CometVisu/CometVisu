{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "model",
    "constructor",
    "call",
    "__bindings",
    "__targets",
    "setModel",
    "properties",
    "check",
    "event",
    "apply",
    "nullable",
    "dereference",
    "members",
    "_applyModel",
    "value",
    "old",
    "i",
    "length",
    "targetObject",
    "targetProperty",
    "sourceProperty",
    "bidirectional",
    "options",
    "reverseOptions",
    "undefined",
    "isDisposed",
    "__removeTargetFrom",
    "__addTarget",
    "ObjectRegistry",
    "inShutDown",
    "indexOf",
    "lang",
    "String",
    "firstUp",
    "open",
    "index",
    "parseInt",
    "substring",
    "targetArray",
    "setItem",
    "addTarget",
    "push",
    "__P_176_3",
    "getModel",
    "id",
    "bind",
    "idReverse",
    "targetHash",
    "toHashCode",
    "removeTarget",
    "splice",
    "__P_176_2",
    "sourceObject",
    "currentListing",
    "removeBinding",
    "destruct",
    "data",
    "controller"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/controller/Object.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * <h2>Object Controller</h2>\r\n *\r\n * *General idea*\r\n *\r\n * The idea of the object controller is to make the binding of one model object\r\n * containing one or more properties as easy as possible. Therefore the\r\n * controller can take a model as property. Every property in that model can be\r\n * bound to one or more target properties. The binding will be for\r\n * atomic types only like Numbers, Strings, ...\r\n *\r\n * *Features*\r\n *\r\n * * Manages the bindings between the model properties and the different targets\r\n * * No need for the user to take care of the binding ids\r\n * * Can create an bidirectional binding (read- / write-binding)\r\n * * Handles the change of the model which means adding the old targets\r\n *\r\n * *Usage*\r\n *\r\n * The controller only can work if a model is set. If the model property is\r\n * null, the controller is not working. But it can be null on any time.\r\n *\r\n * *Cross reference*\r\n *\r\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\r\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\r\n * * If you want to bind a form widget, use {@link qx.data.controller.Form}\r\n */\r\nqx.Class.define(\"qx.data.controller.Object\", {\r\n  extend: qx.core.Object,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param model {qx.core.Object?null} The model for the model property.\r\n   */\r\n  construct(model) {\r\n    super();\r\n\r\n    // create a map for all created binding ids\r\n    this.__bindings = {};\r\n    // create an array to store all current targets\r\n    this.__targets = [];\r\n\r\n    if (model != null) {\r\n      this.setModel(model);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /** The model object which does have the properties for the binding. */\r\n    model: {\r\n      check: \"qx.core.Object\",\r\n      event: \"changeModel\",\r\n      apply: \"_applyModel\",\r\n      nullable: true,\r\n      dereference: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    // private members\r\n    __targets: null,\r\n    __bindings: null,\r\n\r\n    /**\r\n     * Apply-method which will be called if a new model has been set.\r\n     * All bindings will be moved to the new model.\r\n     *\r\n     * @param value {qx.core.Object|null} The new model.\r\n     * @param old {qx.core.Object|null} The old model.\r\n     */\r\n    _applyModel(value, old) {\r\n      // for every target\r\n      for (var i = 0; i < this.__targets.length; i++) {\r\n        // get the properties\r\n        var targetObject = this.__targets[i][0];\r\n        var targetProperty = this.__targets[i][1];\r\n        var sourceProperty = this.__targets[i][2];\r\n        var bidirectional = this.__targets[i][3];\r\n        var options = this.__targets[i][4];\r\n        var reverseOptions = this.__targets[i][5];\r\n\r\n        // remove it from the old if possible\r\n        if (old != undefined && !old.isDisposed()) {\r\n          this.__removeTargetFrom(\r\n            targetObject,\r\n            targetProperty,\r\n            sourceProperty,\r\n            old\r\n          );\r\n        }\r\n\r\n        // add it to the new if available\r\n        if (value != undefined) {\r\n          this.__addTarget(\r\n            targetObject,\r\n            targetProperty,\r\n            sourceProperty,\r\n            bidirectional,\r\n            options,\r\n            reverseOptions\r\n          );\r\n        } else {\r\n          // in shutdown situations, it may be that something is already\r\n          // disposed [BUG #4343]\r\n          if (targetObject.isDisposed() || qx.core.ObjectRegistry.inShutDown) {\r\n            continue;\r\n          }\r\n          // if the model is null, reset the current target\r\n          if (targetProperty.indexOf(\"[\") == -1) {\r\n            targetObject[\"reset\" + qx.lang.String.firstUp(targetProperty)]();\r\n          } else {\r\n            var open = targetProperty.indexOf(\"[\");\r\n            var index = parseInt(\r\n              targetProperty.substring(open + 1, targetProperty.length - 1),\r\n              10\r\n            );\r\n\r\n            targetProperty = targetProperty.substring(0, open);\r\n            var targetArray =\r\n              targetObject[\"get\" + qx.lang.String.firstUp(targetProperty)]();\r\n            if (index == \"last\") {\r\n              index = targetArray.length;\r\n            }\r\n            if (targetArray) {\r\n              targetArray.setItem(index, null);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Adds a new target to the controller. After adding the target, the given\r\n     * property of the model will be bound to the targets property.\r\n     *\r\n     * @param targetObject {qx.core.Object} The object on which the property\r\n     *   should be bound.\r\n     *\r\n     * @param targetProperty {String} The property to which the binding should\r\n     *   go.\r\n     *\r\n     * @param sourceProperty {String} The name of the property in the model.\r\n     *\r\n     * @param bidirectional {Boolean?false} Signals if the binding should also work\r\n     *   in the reverse direction, from the target to source.\r\n     *\r\n     * @param options {Map?null} The options Map used by the binding from source\r\n     *   to target. The possible options can be found in the\r\n     *   {@link qx.data.SingleValueBinding} class.\r\n     *\r\n     * @param reverseOptions {Map?null} The options used by the binding in the\r\n     *   reverse direction. The possible options can be found in the\r\n     *   {@link qx.data.SingleValueBinding} class.\r\n     */\r\n    addTarget(\r\n      targetObject,\r\n      targetProperty,\r\n      sourceProperty,\r\n      bidirectional,\r\n      options,\r\n      reverseOptions\r\n    ) {\r\n      // store the added target\r\n      this.__targets.push([\r\n        targetObject,\r\n        targetProperty,\r\n        sourceProperty,\r\n        bidirectional,\r\n        options,\r\n        reverseOptions\r\n      ]);\r\n\r\n      // delegate the adding\r\n      this.__addTarget(\r\n        targetObject,\r\n        targetProperty,\r\n        sourceProperty,\r\n        bidirectional,\r\n        options,\r\n        reverseOptions\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Does the work for {@link #addTarget} but without saving the target\r\n     * to the internal target registry.\r\n     *\r\n     * @param targetObject {qx.core.Object} The object on which the property\r\n     *   should be bound.\r\n     *\r\n     * @param targetProperty {String} The property to which the binding should\r\n     *   go.\r\n     *\r\n     * @param sourceProperty {String} The name of the property in the model.\r\n     *\r\n     * @param bidirectional {Boolean?false} Signals if the binding should also work\r\n     *   in the reverse direction, from the target to source.\r\n     *\r\n     * @param options {Map?null} The options Map used by the binding from source\r\n     *   to target. The possible options can be found in the\r\n     *   {@link qx.data.SingleValueBinding} class.\r\n     *\r\n     * @param reverseOptions {Map?null} The options used by the binding in the\r\n     *   reverse direction. The possible options can be found in the\r\n     *   {@link qx.data.SingleValueBinding} class.\r\n     */\r\n    __addTarget(\r\n      targetObject,\r\n      targetProperty,\r\n      sourceProperty,\r\n      bidirectional,\r\n      options,\r\n      reverseOptions\r\n    ) {\r\n      // do nothing if no model is set\r\n      if (this.getModel() == null) {\r\n        return;\r\n      }\r\n\r\n      // create the binding\r\n      var id = this.getModel().bind(\r\n        sourceProperty,\r\n        targetObject,\r\n        targetProperty,\r\n        options\r\n      );\r\n\r\n      // create the reverse binding if necessary\r\n      var idReverse = null;\r\n      if (bidirectional) {\r\n        idReverse = targetObject.bind(\r\n          targetProperty,\r\n          this.getModel(),\r\n          sourceProperty,\r\n          reverseOptions\r\n        );\r\n      }\r\n\r\n      // save the binding\r\n      var targetHash = targetObject.toHashCode();\r\n      if (this.__bindings[targetHash] == undefined) {\r\n        this.__bindings[targetHash] = [];\r\n      }\r\n      this.__bindings[targetHash].push([\r\n        id,\r\n        idReverse,\r\n        targetProperty,\r\n        sourceProperty,\r\n        options,\r\n        reverseOptions\r\n      ]);\r\n    },\r\n\r\n    /**\r\n     * Removes the target identified by the three properties.\r\n     *\r\n     * @param targetObject {qx.core.Object} The target object on which the\r\n     *   binding exist.\r\n     *\r\n     * @param targetProperty {String} The targets property name used by the\r\n     *   adding of the target.\r\n     *\r\n     * @param sourceProperty {String} The name of the property of the model.\r\n     */\r\n    removeTarget(targetObject, targetProperty, sourceProperty) {\r\n      this.__removeTargetFrom(\r\n        targetObject,\r\n        targetProperty,\r\n        sourceProperty,\r\n        this.getModel()\r\n      );\r\n\r\n      // delete the target in the targets reference\r\n      for (var i = 0; i < this.__targets.length; i++) {\r\n        if (\r\n          this.__targets[i][0] == targetObject &&\r\n          this.__targets[i][1] == targetProperty &&\r\n          this.__targets[i][2] == sourceProperty\r\n        ) {\r\n          this.__targets.splice(i, 1);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Does the work for {@link #removeTarget} but without removing the target\r\n     * from the internal registry.\r\n     *\r\n     * @param targetObject {qx.core.Object} The target object on which the\r\n     *   binding exist.\r\n     *\r\n     * @param targetProperty {String} The targets property name used by the\r\n     *   adding of the target.\r\n     *\r\n     * @param sourceProperty {String} The name of the property of the model.\r\n     *\r\n     * @param sourceObject {String} The source object from which the binding\r\n     *   comes.\r\n     */\r\n    __removeTargetFrom(\r\n      targetObject,\r\n      targetProperty,\r\n      sourceProperty,\r\n      sourceObject\r\n    ) {\r\n      // check for not fitting targetObjects\r\n      if (!(targetObject instanceof qx.core.Object)) {\r\n        // just do nothing\r\n        return;\r\n      }\r\n\r\n      var currentListing = this.__bindings[targetObject.toHashCode()];\r\n      // if no binding is stored\r\n      if (currentListing == undefined || currentListing.length == 0) {\r\n        return;\r\n      }\r\n\r\n      // go threw all listings for the object\r\n      for (var i = 0; i < currentListing.length; i++) {\r\n        // if it is the listing\r\n        if (\r\n          currentListing[i][2] == targetProperty &&\r\n          currentListing[i][3] == sourceProperty\r\n        ) {\r\n          // remove the binding\r\n          var id = currentListing[i][0];\r\n          sourceObject.removeBinding(id);\r\n          // check for the reverse binding\r\n          if (currentListing[i][1] != null) {\r\n            targetObject.removeBinding(currentListing[i][1]);\r\n          }\r\n          // delete the entry and return\r\n          currentListing.splice(i, 1);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  /*\r\n   *****************************************************************************\r\n      DESTRUCT\r\n   *****************************************************************************\r\n   */\r\n\r\n  destruct() {\r\n    // set the model to null to get the bindings removed\r\n    if (this.getModel() != null && !this.getModel().isDisposed()) {\r\n      this.setModel(null);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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IAAII,WAAW,GACbpB,YAAY,CAAC,KAAK,GAAG5B,EAAE,CAACyC,IAAI,CAACC,MAAM,CAACC,OAAO,CAACd,cAAc,CAAC,CAAC,CAAC,CAAC;cAChE,IAAIgB,KAAK,IAAI,MAAM,EAAE;gBACnBA,KAAK,GAAGG,WAAW,CAACrB,MAAM;cAC5B;cACA,IAAIqB,WAAW,EAAE;gBACfA,WAAW,CAACC,OAAO,CAACJ,KAAK,EAAE,IAAI,CAAC;cAClC;YACF;UACF;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,SAAS,WAAAA,UACPtB,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,cAAc,EACd;QACA;QACA,IAAI,CAACnB,SAAS,CAACqC,IAAI,CAAC,CAClBvB,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,cAAc,CACf,CAAC;;QAEF;QACA,IAAI,CAACI,SAAW,CACdT,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,cACF,CAAC;MACH,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,SAAW,WAAAe,UACTxB,YAAY,EACZC,cAAc,EACdC,cAAc,EACdC,aAAa,EACbC,OAAO,EACPC,cAAc,EACd;QACA;QACA,IAAI,IAAI,CAACoB,QAAQ,CAAC,CAAC,IAAI,IAAI,EAAE;UAC3B;QACF;;QAEA;QACA,IAAIC,EAAE,GAAG,IAAI,CAACD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAC3BzB,cAAc,EACdF,YAAY,EACZC,cAAc,EACdG,OACF,CAAC;;QAED;QACA,IAAIwB,SAAS,GAAG,IAAI;QACpB,IAAIzB,aAAa,EAAE;UACjByB,SAAS,GAAG5B,YAAY,CAAC2B,IAAI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"
}