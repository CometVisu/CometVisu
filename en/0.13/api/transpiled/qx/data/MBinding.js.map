{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "bind",
    "sourcePropertyChain",
    "targetObject",
    "targetProperty",
    "options",
    "data",
    "SingleValueBinding",
    "bindAsync",
    "core",
    "Environment",
    "select",
    "_true",
    "id",
    "initialPromise",
    "then",
    "Promise",
    "resolve",
    "_false",
    "removeBinding",
    "removeBindingFromObject",
    "removeRelatedBindings",
    "relatedObject",
    "removeAllBindings",
    "removeAllBindingsForObject",
    "getBindings",
    "getAllBindingsForObject",
    "destruct",
    "$$hash",
    "$$discardedHashCode",
    "MBinding"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/MBinding.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This mixin is forwarding the static methods of\n * {@link qx.data.SingleValueBinding} to the instance including the mixin.\n * The source object will be <code>this</code>.\n */\nqx.Mixin.define(\"qx.data.MBinding\", {\n  members: {\n    /**\n     * The bind method delegates the call to the\n     * {@link qx.data.SingleValueBinding#bind} function. As source, the current\n     * object (this) will be used.\n     *\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetProperty {String?\"value\"} The property name of the target object,\n     *   defaults to \"value\".\n     * @param options {Map?null} A map containing the options. See\n     *   {@link qx.data.SingleValueBinding#bind} for more\n     *   information.\n     *\n     * @return {var} Returns the internal id for that binding. This can be used\n     *   for referencing the binding e.g. for removing. This is not an atomic\n     *   id so you can't you use it as a hash-map index.\n     *\n     * @throws {qx.core.AssertionError} If the event is no data event or\n     *   there is no property definition for object and property (source and\n     *   target).\n     */\n    bind(sourcePropertyChain, targetObject, targetProperty, options) {\n      return qx.data.SingleValueBinding.bind(\n        this,\n        sourcePropertyChain,\n        targetObject,\n        targetProperty || \"value\",\n        options\n      );\n    },\n\n    /**\n     * The bind method delegates the call to the\n     * {@link qx.data.SingleValueBinding#bind} function. As source, the current\n     * object (this) will be used.\n     *\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetProperty {String?\"value\"} The property name of the target object,\n     *   defaults to \"value\".\n     * @param options {Map?} A map containing the options. See\n     *   {@link qx.data.SingleValueBinding#bind} for more\n     *   information.\n     *\n     * @return {qx.Promise} A promise which is resolved when the initial value\n     * \t has been set on the target.  Note that this does NOT resolve when subsequent\n     *   values are returned.  The promise value is the internal id for that binding.\n     *   The id can be used for referencing the binding e.g. for removing. This is not\n     *   an atomic id so you can't you use it as a hash-map index.\n     *\n     * @throws {qx.core.AssertionError} If the event is no data event or\n     *   there is no property definition for object and property (source and\n     *   target).\n     */\n    bindAsync: qx.core.Environment.select(\"qx.promise\", {\n      true(sourcePropertyChain, targetObject, targetProperty, options) {\n        var id = qx.data.SingleValueBinding.bind(\n          this,\n          sourcePropertyChain,\n          targetObject,\n          targetProperty || \"value\",\n          options\n        );\n\n        if (id.initialPromise) {\n          return id.initialPromise.then(function () {\n            id.initialPromise = null;\n            return id;\n          });\n        } else {\n          return qx.Promise.resolve(id);\n        }\n      },\n      false(sourcePropertyChain, targetObject, targetProperty, options) {\n        return this.bind(\n          sourcePropertyChain,\n          targetObject,\n          targetProperty,\n          options\n        );\n      }\n    }),\n\n    /**\n     * Removes the binding with the given id from the current object. The\n     * id has to be the id returned by any of the bind functions.\n     *\n     * @param id {var} The id of the binding.\n     * @throws {Error} If the binding could not be found.\n     */\n    removeBinding(id) {\n      qx.data.SingleValueBinding.removeBindingFromObject(this, id);\n    },\n\n    /**\n     * Removes all bindings between the object and the related one.\n     *\n     * @param relatedObject {qx.core.Object} The object of which related\n     *   bindings should be removed.\n     * @throws {Error} If one of the bindings listed internally can not be\n     *   removed.\n     */\n    removeRelatedBindings(relatedObject) {\n      qx.data.SingleValueBinding.removeRelatedBindings(this, relatedObject);\n    },\n\n    /**\n     * Removes all bindings from the object.\n     *\n     * @throws {qx.core.AssertionError} If the object is not in the internal\n     *   registry of the bindings.\n     * @throws {Error} If one of the bindings listed internally can not be\n     *   removed.\n     */\n    removeAllBindings() {\n      qx.data.SingleValueBinding.removeAllBindingsForObject(this);\n    },\n\n    /**\n     * Returns an array which lists all bindings for the object.\n     *\n     * @return {Array} An array of binding informations. Every binding\n     *   information is an array itself containing id, sourceObject, sourceEvent,\n     *   targetObject and targetProperty in that order.\n     */\n    getBindings() {\n      return qx.data.SingleValueBinding.getAllBindingsForObject(this);\n    }\n  },\n\n  destruct() {\n    // restore the object hash for disposing the bindings\n    this.$$hash = this.$$discardedHashCode;\n    this.removeAllBindings();\n    delete this.$$hash;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kBAAkB,EAAE;IAClCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,mBAAmB,EAAEC,YAAY,EAAEC,cAAc,EAAEC,OAAO,EAAE;QAC/D,OAAOX,EAAE,CAACY,IAAI,CAACC,kBAAkB,CAACN,IAAI,CACpC,IAAI,EACJC,mBAAmB,EACnBC,YAAY,EACZC,cAAc,IAAI,OAAO,EACzBC,OACF,CAAC;MACH,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,SAAS,EAAEd,EAAE,CAACe,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC,YAAY,EAAE;QAAA,iBAAAC,MAC7CV,mBAAmB,EAAEC,YAAY,EAAEC,cAAc,EAAEC,OAAO,EAAE;UAC/D,IAAIQ,EAAE,GAAGnB,EAAE,CAACY,IAAI,CAACC,kBAAkB,CAACN,IAAI,CACtC,IAAI,EACJC,mBAAmB,EACnBC,YAAY,EACZC,cAAc,IAAI,OAAO,EACzBC,OACF,CAAC;UAED,IAAIQ,EAAE,CAACC,cAAc,EAAE;YACrB,OAAOD,EAAE,CAACC,cAAc,CAACC,IAAI,CAAC,YAAY;cACxCF,EAAE,CAACC,cAAc,GAAG,IAAI;cACxB,OAAOD,EAAE;YACX,CAAC,CAAC;UACJ,CAAC,MAAM;YACL,OAAOnB,EAAE,CAACsB,OAAO,CAACC,OAAO,CAACJ,EAAE,CAAC;UAC/B;QACF,CAAC;QAAA,kBAAAK,OACKhB,mBAAmB,EAAEC,YAAY,EAAEC,cAAc,EAAEC,OAAO,EAAE;UAChE,OAAO,IAAI,CAACJ,IAAI,CACdC,mBAAmB,EACnBC,YAAY,EACZC,cAAc,EACdC,OACF,CAAC;QACH;MACF,CAAC,CAAC;MAEF;AACJ;AACA;AACA;AACA;AACA;AACA;MACIc,aAAa,WAAAA,cAACN,EAAE,EAAE;QAChBnB,EAAE,CAACY,IAAI,CAACC,kBAAkB,CAACa,uBAAuB,CAAC,IAAI,EAAEP,EAAE,CAAC;MAC9D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIQ,qBAAqB,WAAAA,sBAACC,aAAa,EAAE;QACnC5B,EAAE,CAACY,IAAI,CAACC,kBAAkB,CAACc,qBAAqB,CAAC,IAAI,EAAEC,aAAa,CAAC;MACvE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,iBAAiB,WAAAA,kBAAA,EAAG;QAClB7B,EAAE,CAACY,IAAI,CAACC,kBAAkB,CAACiB,0BAA0B,CAAC,IAAI,CAAC;MAC7D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO/B,EAAE,CAACY,IAAI,CAACC,kBAAkB,CAACmB,uBAAuB,CAAC,IAAI,CAAC;MACjE;IACF,CAAC;IAEDC,QAAQ,WAAAA,SAAA,EAAG;MACT;MACA,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,mBAAmB;MACtC,IAAI,CAACN,iBAAiB,CAAC,CAAC;MACxB,OAAO,IAAI,CAACK,MAAM;IACpB;EACF,CAAC,CAAC;EArKFlC,EAAE,CAACY,IAAI,CAACwB,QAAQ,CAACjC,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}