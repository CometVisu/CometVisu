{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "bind",
    "sourcePropertyChain",
    "targetObject",
    "targetProperty",
    "options",
    "data",
    "SingleValueBinding",
    "bindAsync",
    "core",
    "Environment",
    "select",
    "_true",
    "id",
    "initialPromise",
    "then",
    "Promise",
    "resolve",
    "_false",
    "removeBinding",
    "removeBindingFromObject",
    "removeRelatedBindings",
    "relatedObject",
    "removeAllBindings",
    "removeAllBindingsForObject",
    "getBindings",
    "getAllBindingsForObject",
    "destruct",
    "$$hash",
    "$$discardedHashCode",
    "MBinding"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/MBinding.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This mixin is forwarding the static methods of\r\n * {@link qx.data.SingleValueBinding} to the instance including the mixin.\r\n * The source object will be <code>this</code>.\r\n */\r\nqx.Mixin.define(\"qx.data.MBinding\", {\r\n  members: {\r\n    /**\r\n     * The bind method delegates the call to the\r\n     * {@link qx.data.SingleValueBinding#bind} function. As source, the current\r\n     * object (this) will be used.\r\n     *\r\n     * @param sourcePropertyChain {String} The property chain which represents\r\n     *   the source property.\r\n     * @param targetObject {qx.core.Object} The object which the source should\r\n     *   be bind to.\r\n     * @param targetProperty {String?\"value\"} The property name of the target object,\r\n     *   defaults to \"value\".\r\n     * @param options {Map?null} A map containing the options. See\r\n     *   {@link qx.data.SingleValueBinding#bind} for more\r\n     *   information.\r\n     *\r\n     * @return {var} Returns the internal id for that binding. This can be used\r\n     *   for referencing the binding e.g. for removing. This is not an atomic\r\n     *   id so you can't you use it as a hash-map index.\r\n     *\r\n     * @throws {qx.core.AssertionError} If the event is no data event or\r\n     *   there is no property definition for object and property (source and\r\n     *   target).\r\n     */\r\n    bind(sourcePropertyChain, targetObject, targetProperty, options) {\r\n      return qx.data.SingleValueBinding.bind(\r\n        this,\r\n        sourcePropertyChain,\r\n        targetObject,\r\n        targetProperty || \"value\",\r\n        options\r\n      );\r\n    },\r\n\r\n    /**\r\n     * The bind method delegates the call to the\r\n     * {@link qx.data.SingleValueBinding#bind} function. As source, the current\r\n     * object (this) will be used.\r\n     *\r\n     * @param sourcePropertyChain {String} The property chain which represents\r\n     *   the source property.\r\n     * @param targetObject {qx.core.Object} The object which the source should\r\n     *   be bind to.\r\n     * @param targetProperty {String?\"value\"} The property name of the target object,\r\n     *   defaults to \"value\".\r\n     * @param options {Map} A map containing the options. See\r\n     *   {@link qx.data.SingleValueBinding#bind} for more\r\n     *   information.\r\n     *\r\n     * @return {qx.Promise} A promise which is resolved when the initial value\r\n     * \t has been set on the target.  Note that this does NOT resolve when subsequent\r\n     *   values are returned.  The promise value is the internal id for that binding.\r\n     *   The id can be used for referencing the binding e.g. for removing. This is not\r\n     *   an atomic id so you can't you use it as a hash-map index.\r\n     *\r\n     * @throws {qx.core.AssertionError} If the event is no data event or\r\n     *   there is no property definition for object and property (source and\r\n     *   target).\r\n     */\r\n    bindAsync: qx.core.Environment.select(\"qx.promise\", {\r\n      true(sourcePropertyChain, targetObject, targetProperty, options) {\r\n        var id = qx.data.SingleValueBinding.bind(\r\n          this,\r\n          sourcePropertyChain,\r\n          targetObject,\r\n          targetProperty || \"value\",\r\n          options\r\n        );\r\n\r\n        if (id.initialPromise) {\r\n          return id.initialPromise.then(function () {\r\n            id.initialPromise = null;\r\n            return id;\r\n          });\r\n        } else {\r\n          return qx.Promise.resolve(id);\r\n        }\r\n      },\r\n      false(sourcePropertyChain, targetObject, targetProperty, options) {\r\n        return this.bind(\r\n          sourcePropertyChain,\r\n          targetObject,\r\n          targetProperty,\r\n          options\r\n        );\r\n      }\r\n    }),\r\n\r\n    /**\r\n     * Removes the binding with the given id from the current object. The\r\n     * id has to be the id returned by any of the bind functions.\r\n     *\r\n     * @param id {var} The id of the binding.\r\n     * @throws {Error} If the binding could not be found.\r\n     */\r\n    removeBinding(id) {\r\n      qx.data.SingleValueBinding.removeBindingFromObject(this, id);\r\n    },\r\n\r\n    /**\r\n     * Removes all bindings between the object and the related one.\r\n     *\r\n     * @param relatedObject {qx.core.Object} The object of which related\r\n     *   bindings should be removed.\r\n     * @throws {Error} If one of the bindings listed internally can not be\r\n     *   removed.\r\n     */\r\n    removeRelatedBindings(relatedObject) {\r\n      qx.data.SingleValueBinding.removeRelatedBindings(this, relatedObject);\r\n    },\r\n\r\n    /**\r\n     * Removes all bindings from the object.\r\n     *\r\n     * @throws {qx.core.AssertionError} If the object is not in the internal\r\n     *   registry of the bindings.\r\n     * @throws {Error} If one of the bindings listed internally can not be\r\n     *   removed.\r\n     */\r\n    removeAllBindings() {\r\n      qx.data.SingleValueBinding.removeAllBindingsForObject(this);\r\n    },\r\n\r\n    /**\r\n     * Returns an array which lists all bindings for the object.\r\n     *\r\n     * @return {Array} An array of binding informations. Every binding\r\n     *   information is an array itself containing id, sourceObject, sourceEvent,\r\n     *   targetObject and targetProperty in that order.\r\n     */\r\n    getBindings() {\r\n      return qx.data.SingleValueBinding.getAllBindingsForObject(this);\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    // restore the object hash for disposing the bindings\r\n    this.$$hash = this.$$discardedHashCode;\r\n    this.removeAllBindings();\r\n    delete this.$$hash;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}