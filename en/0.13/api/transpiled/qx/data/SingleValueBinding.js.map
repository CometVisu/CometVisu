{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__bindings",
    "__bindingsByTarget",
    "bind",
    "sourceObject",
    "sourcePropertyChain",
    "targetObject",
    "targetPropertyChain",
    "options",
    "targetListenerMap",
    "__setUpTargetBinding",
    "propertyNames",
    "split",
    "arrayIndexValues",
    "__checkForArrayInPropertyChain",
    "sources",
    "listeners",
    "listenerIds",
    "eventNames",
    "source",
    "initialPromise",
    "i",
    "length",
    "propertyName",
    "push",
    "eventName",
    "__getEventNameForProperty",
    "core",
    "AssertionError",
    "Object",
    "hasProperty",
    "constructor",
    "log",
    "Logger",
    "warn",
    "__setInitialValue",
    "undefined",
    "itemIndex",
    "currentValue",
    "getItem",
    "__bindEventToProperty",
    "lang",
    "String",
    "firstUp",
    "context",
    "index",
    "listener",
    "Function",
    "__chainListener",
    "addListener",
    "ex",
    "removeListenerById",
    "targets",
    "targetIds",
    "id",
    "type",
    "targetListenerIds",
    "__storeBinding",
    "__P_171_7",
    "onUpdate",
    "j",
    "converter",
    "ignoreConverter",
    "currentSourceChain",
    "slice",
    "join",
    "match",
    "RegExp",
    "__setTargetValue",
    "__resetTargetValue",
    "implementsInterface",
    "data",
    "IListData",
    "__P_171_2",
    "target",
    "firstUpPropName",
    "currentIndex",
    "getLength",
    "SingleValueBinding",
    "updateTarget",
    "value",
    "resolvePropertyChain",
    "__convertValue",
    "o",
    "propertyChain",
    "properties",
    "__getPropertyChainArray",
    "__getTargetFromChain",
    "__P_171_4",
    "__getEventForProperty",
    "supportsEvent",
    "__P_171_10",
    "lastProperty",
    "__getArrayIndex",
    "__P_171_9",
    "setItem",
    "__P_171_15",
    "arrayExp",
    "arrayMatch",
    "__P_171_12",
    "replace",
    "filter",
    "prop",
    "__P_171_13",
    "targetProperties",
    "property",
    "arrIndex",
    "__P_171_5",
    "result",
    "e",
    "ValidationError",
    "onSetFail",
    "__P_171_3",
    "name",
    "endsWith",
    "arrayIndex",
    "substring",
    "indexOf",
    "Error",
    "isNaN",
    "parseInt",
    "splice",
    "__P_171_6",
    "sourceEvent",
    "targetProperty",
    "bindListener",
    "start",
    "getData",
    "end",
    "__P_171_8",
    "hash",
    "toHashCode",
    "binding",
    "__P_171_11",
    "model",
    "getModel",
    "lastIndexOf",
    "propertieDefinition",
    "getPropertyDefinition",
    "check",
    "__defaultConversion",
    "__P_171_14",
    "sourceProperty",
    "event",
    "__P_171_16",
    "targetCheck",
    "dataType",
    "Type",
    "getClass",
    "parseFloat",
    "removeBindingFromObject",
    "error",
    "classname",
    "bindings",
    "getAllBindingsForObject",
    "Array",
    "remove",
    "removeAllBindingsForObject",
    "object",
    "removeRelatedBindings",
    "relatedObject",
    "sourceBindings",
    "targetBindings",
    "clone",
    "unique",
    "concat",
    "removeAllBindings",
    "ObjectRegistry",
    "fromHashCode",
    "getAllBindings",
    "showBindingInLog",
    "message",
    "debug",
    "showAllBindingsInLog"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/SingleValueBinding.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Single-value binding is a core component of the data binding package.\n */\nqx.Class.define(\"qx.data.SingleValueBinding\", {\n  statics: {\n    /** internal reference for all bindings indexed by source object */\n    __bindings: {},\n\n    /** internal reference for all bindings indexed by target object */\n    __bindingsByTarget: {},\n\n    /**\n     * The function is responsible for binding a source objects property to\n     * a target objects property. Both properties have to have the usual qooxdoo\n     * getter and setter. The source property also needs to fire change-events\n     * on every change of its value.\n     * Please keep in mind, that this binding is unidirectional. If you need\n     * a binding in both directions, you have to use two of this bindings.\n     *\n     * It's also possible to bind some kind of a hierarchy as a source. This\n     * means that you can separate the source properties with a dot and bind\n     * by that the object referenced to this property chain.\n     * Example with an object 'a' which has object 'b' stored in its 'child'\n     * property. Object b has a string property named abc:\n     * <pre><code>\n     * qx.data.SingleValueBinding.bind(a, \"child.abc\", textfield, \"value\");\n     * </code></pre>\n     * In that case, if the property abc of b changes, the textfield will\n     * automatically contain the new value. Also if the child of a changes, the\n     * new value (abc of the new child) will be in the textfield.\n     *\n     * There is also a possibility of binding an array. Therefore the array\n     * {@link qx.data.IListData} is needed because this array has change events\n     * which the native does not. Imagine a qooxdoo object a which has a\n     * children property containing an array holding more of its own kind.\n     * Every object has a name property as a string.\n     * <pre>\n     * var svb = qx.data.SingleValueBinding;\n     * // bind the first child's name of 'a' to a textfield\n     * svb.bind(a, \"children[0].name\", textfield, \"value\");\n     * // bind the last child's name of 'a' to a textfield\n     * svb.bind(a, \"children[last].name\", textfield2, \"value\");\n     * // also deeper bindings are possible\n     * svb.bind(a, \"children[0].children[0].name\", textfield3, \"value\");\n     * </pre>\n     *\n     * As you can see in this example, the abc property of a's b will be bound\n     * to the textfield. If now the value of b changed or even the a will get a\n     * new b, the binding still shows the right value.\n     *\n     * @param sourceObject {qx.core.Object} The source of the binding.\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetPropertyChain {String} The property chain to the target\n     *   object.\n     * @param options {Map?null} A map containing the options.\n     *   <li>converter: A converter function which takes four parameters\n     *       and should return the converted value.\n     *       <ol>\n     *         <li>The data to convert</li>\n     *         <li>The corresponding model object, which is only set in case of the use of an controller.</li>\n     *         <li>The source object for the binding</li>\n     *         <li>The target object.</li>\n     *       </ol>\n     *       If no conversion has been done, the given value should be returned.\n     *       e.g. a number to boolean converter\n     *       <code>function(data, model, source, target) {return data > 100;}</code>\n     *   </li>\n     *   <li>onUpdate: A callback function can be given here. This method will be\n     *       called if the binding was updated successful. There will be\n     *       three parameter you do get in that method call.\n     *       <ol>\n     *         <li>The source object</li>\n     *         <li>The target object</li>\n     *         <li>The data</li>\n     *       </ol>\n     *       Here is a sample: <code>onUpdate : function(source, target, data) {...}</code>\n     *   </li>\n     *   <li>onSetFail: A callback function can be given here. This method will\n     *       be called if the set of the value fails.\n     *   </li>\n     *   <li>ignoreConverter: A string which will be matched using the current\n     *       property chain. If it matches, the converter will not be called.\n     *   </li>\n     *\n     * @return {var} Returns the internal id for that binding. This can be used\n     *   for referencing the binding or e.g. for removing. This is not an atomic\n     *   id so you can't you use it as a hash-map index.\n     *\n     * @throws {qx.core.AssertionError} If the event is no data event or\n     *   there is no property definition for object and property (source and\n     *   target).\n     */\n    bind(\n      sourceObject,\n      sourcePropertyChain,\n      targetObject,\n      targetPropertyChain,\n      options\n    ) {\n      // check for the arguments\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertObject(sourceObject, \"sourceObject\");\n        qx.core.Assert.assertString(sourcePropertyChain, \"sourcePropertyChain\");\n        qx.core.Assert.assertObject(targetObject, \"targetObject\");\n        qx.core.Assert.assertString(targetPropertyChain, \"targetPropertyChain\");\n      }\n\n      // set up the target binding\n      var targetListenerMap = this.__setUpTargetBinding(\n        sourceObject,\n        sourcePropertyChain,\n        targetObject,\n        targetPropertyChain,\n        options\n      );\n\n      // get the property names\n      var propertyNames = sourcePropertyChain.split(\".\");\n\n      // stuff that's needed to store for the listener function\n      var arrayIndexValues = this.__checkForArrayInPropertyChain(propertyNames);\n      var sources = [];\n      var listeners = [];\n      var listenerIds = [];\n      var eventNames = [];\n      var source = sourceObject;\n      var initialPromise = null;\n\n      // add a try catch to make it possible to remove the listeners of the\n      // chain in case the loop breaks after some listeners already added.\n      try {\n        // go through all property names\n        for (var i = 0; i < propertyNames.length; i++) {\n          var propertyName = propertyNames[i];\n\n          // check for the array\n          if (arrayIndexValues[i] !== \"\") {\n            // push the array change event\n            eventNames.push(\"change\");\n          } else {\n            var eventName = this.__getEventNameForProperty(\n              source,\n              propertyName\n            );\n\n            if (!eventName) {\n              if (i == 0) {\n                // the root property can not change --> error\n                throw new qx.core.AssertionError(\n                  \"Binding property \" +\n                    propertyName +\n                    \" of object \" +\n                    source +\n                    \" not possible: No event available. Full property chain: \" +\n                    sourcePropertyChain\n                );\n              }\n\n              if (\n                source instanceof qx.core.Object &&\n                qx.Class.hasProperty(source.constructor, propertyName)\n              ) {\n                qx.log.Logger.warn(\n                  \"Binding property \" +\n                    propertyName +\n                    \" of object \" +\n                    source +\n                    \" not possible: No event available. Full property chain: \" +\n                    sourcePropertyChain\n                );\n              }\n\n              // call the converter if no event could be found on binding creation\n              initialPromise = this.__setInitialValue(\n                undefined,\n                targetObject,\n                targetPropertyChain,\n                options,\n                sourceObject\n              );\n\n              break;\n            }\n            eventNames.push(eventName);\n          }\n\n          // save the current source\n          sources[i] = source;\n\n          // check for the last property\n          if (i == propertyNames.length - 1) {\n            // if it is an array, set the initial value and bind the event\n            if (arrayIndexValues[i] !== \"\") {\n              // get the current value\n              var itemIndex =\n                arrayIndexValues[i] === \"last\"\n                  ? source.length - 1\n                  : arrayIndexValues[i];\n              var currentValue = source.getItem(itemIndex);\n\n              // set the initial value\n              initialPromise = this.__setInitialValue(\n                currentValue,\n                targetObject,\n                targetPropertyChain,\n                options,\n                sourceObject\n              );\n\n              // bind the event\n              listenerIds[i] = this.__bindEventToProperty(\n                source,\n                eventNames[i],\n                targetObject,\n                targetPropertyChain,\n                options,\n                arrayIndexValues[i]\n              );\n            } else {\n              // try to set the initial value\n              if (\n                propertyNames[i] != null &&\n                source[\"get\" + qx.lang.String.firstUp(propertyNames[i])] != null\n              ) {\n                var currentValue =\n                  source[\"get\" + qx.lang.String.firstUp(propertyNames[i])]();\n                initialPromise = this.__setInitialValue(\n                  currentValue,\n                  targetObject,\n                  targetPropertyChain,\n                  options,\n                  sourceObject\n                );\n              }\n              // bind the property\n              listenerIds[i] = this.__bindEventToProperty(\n                source,\n                eventNames[i],\n                targetObject,\n                targetPropertyChain,\n                options\n              );\n            }\n\n            // if its not the last property\n          } else {\n            // create the context for the listener\n            var context = {\n              index: i,\n              propertyNames: propertyNames,\n              sources: sources,\n              listenerIds: listenerIds,\n              arrayIndexValues: arrayIndexValues,\n              targetObject: targetObject,\n              targetPropertyChain: targetPropertyChain,\n              options: options,\n              listeners: listeners\n            };\n\n            // create a listener\n            var listener = qx.lang.Function.bind(\n              this.__chainListener,\n              this,\n              context\n            );\n\n            // store the listener for further processing\n            listeners.push(listener);\n\n            // add the chaining listener\n            listenerIds[i] = source.addListener(eventNames[i], listener);\n          }\n\n          // get and store the next source\n          if (\n            source[\"get\" + qx.lang.String.firstUp(propertyNames[i])] == null\n          ) {\n            source = undefined;\n          } else if (arrayIndexValues[i] !== \"\") {\n            var itemIndex =\n              arrayIndexValues[i] === \"last\"\n                ? source.length - 1\n                : arrayIndexValues[i];\n            source =\n              source[\"get\" + qx.lang.String.firstUp(propertyNames[i])](\n                itemIndex\n              );\n          } else {\n            source = source[\"get\" + qx.lang.String.firstUp(propertyNames[i])]();\n            // the value should be undefined if we can not find the last part of the property chain\n            if (source === null && propertyNames.length - 1 != i) {\n              source = undefined;\n            }\n          }\n          if (!source) {\n            // call the converter if no source could be found on binding creation\n            this.__setInitialValue(\n              source,\n              targetObject,\n              targetPropertyChain,\n              options,\n              sourceObject\n            );\n\n            break;\n          }\n        }\n      } catch (ex) {\n        // remove the already added listener\n        // go through all added listeners (source)\n\n        for (var i = 0; i < sources.length; i++) {\n          // check if a source is available\n          if (sources[i] && listenerIds[i]) {\n            sources[i].removeListenerById(listenerIds[i]);\n          }\n        }\n        var targets = targetListenerMap.targets;\n        var targetIds = targetListenerMap.listenerIds;\n        // go through all added listeners (target)\n        for (var i = 0; i < targets.length; i++) {\n          // check if a target is available\n          if (targets[i] && targetIds[i]) {\n            targets[i].removeListenerById(targetIds[i]);\n          }\n        }\n\n        throw ex;\n      }\n\n      // create the id map\n      var id = {\n        type: \"deepBinding\",\n        listenerIds: listenerIds,\n        sources: sources,\n        targetListenerIds: targetListenerMap.listenerIds,\n        targets: targetListenerMap.targets,\n        initialPromise: initialPromise\n      };\n\n      // store the bindings\n      this.__storeBinding(\n        id,\n        sourceObject,\n        sourcePropertyChain,\n        targetObject,\n        targetPropertyChain\n      );\n\n      return id;\n    },\n\n    /**\n     * Event listener for the chaining of the properties.\n     *\n     * @param context {Map} The current context for the listener.\n     */\n    __chainListener(context) {\n      // invoke the onUpdate method\n      if (context.options && context.options.onUpdate) {\n        context.options.onUpdate(\n          context.sources[context.index],\n          context.targetObject\n        );\n      }\n\n      // delete all listener after the current one\n      for (var j = context.index + 1; j < context.propertyNames.length; j++) {\n        // remove the old sources\n        var source = context.sources[j];\n        context.sources[j] = null;\n        if (!source) {\n          continue;\n        }\n\n        // remove the listeners\n        source.removeListenerById(context.listenerIds[j]);\n      }\n\n      // get the current source\n      var source = context.sources[context.index];\n      // add new once after the current one\n      for (var j = context.index + 1; j < context.propertyNames.length; j++) {\n        // get and store the new source\n        if (context.arrayIndexValues[j - 1] !== \"\") {\n          source = source[\n            \"get\" + qx.lang.String.firstUp(context.propertyNames[j - 1])\n          ](context.arrayIndexValues[j - 1]);\n        } else {\n          source =\n            source[\n              \"get\" + qx.lang.String.firstUp(context.propertyNames[j - 1])\n            ]();\n        }\n        context.sources[j] = source;\n        // reset the target object if no new source could be found\n        if (!source) {\n          // use the converter if the property chain breaks [BUG# 6880]\n          if (context.options && context.options.converter) {\n            var ignoreConverter = false;\n            // take care of the ignore pattern used for the controller\n            if (context.options.ignoreConverter) {\n              // the current property chain as string\n              var currentSourceChain = context.propertyNames\n                .slice(0, j)\n                .join(\".\");\n              // match for the current pattern given in the options\n              var match = currentSourceChain.match(\n                new RegExp(\"^\" + context.options.ignoreConverter)\n              );\n\n              ignoreConverter = match ? match.length > 0 : false;\n            }\n\n            if (!ignoreConverter) {\n              this.__setTargetValue(\n                context.targetObject,\n                context.targetPropertyChain,\n                context.options.converter()\n              );\n            } else {\n              this.__resetTargetValue(\n                context.targetObject,\n                context.targetPropertyChain\n              );\n            }\n          } else {\n            this.__resetTargetValue(\n              context.targetObject,\n              context.targetPropertyChain\n            );\n          }\n\n          break;\n        }\n\n        // if its the last property\n        if (j == context.propertyNames.length - 1) {\n          // if its an array\n          if (\n            qx.Class.implementsInterface(source, qx.data.IListData) &&\n            context.arrayIndexValues[j] !== \"\"\n          ) {\n            // set the initial value\n            var itemIndex =\n              context.arrayIndexValues[j] === \"last\"\n                ? source.length - 1\n                : context.arrayIndexValues[j];\n            var currentValue = source.getItem(itemIndex);\n            this.__setInitialValue(\n              currentValue,\n              context.targetObject,\n              context.targetPropertyChain,\n              context.options,\n              context.sources[context.index]\n            );\n\n            // bind the item event to the new target\n            context.listenerIds[j] = this.__bindEventToProperty(\n              source,\n              \"change\",\n              context.targetObject,\n              context.targetPropertyChain,\n              context.options,\n              context.arrayIndexValues[j]\n            );\n          } else {\n            if (\n              context.propertyNames[j] != null &&\n              source[\n                \"get\" + qx.lang.String.firstUp(context.propertyNames[j])\n              ] != null\n            ) {\n              var currentValue =\n                source[\n                  \"get\" + qx.lang.String.firstUp(context.propertyNames[j])\n                ]();\n\n              this.__setInitialValue(\n                currentValue,\n                context.targetObject,\n                context.targetPropertyChain,\n                context.options,\n                context.sources[context.index]\n              );\n            }\n            var eventName = this.__getEventNameForProperty(\n              source,\n              context.propertyNames[j]\n            );\n\n            if (!eventName) {\n              context.sources[j] = null;\n              this.__resetTargetValue(\n                context.targetObject,\n                context.targetPropertyChain\n              );\n\n              return;\n            }\n            // bind the last property to the new target\n            context.listenerIds[j] = this.__bindEventToProperty(\n              source,\n              eventName,\n              context.targetObject,\n              context.targetPropertyChain,\n              context.options\n            );\n          }\n        } else {\n          // check if a listener already created\n          if (context.listeners[j] == null) {\n            var listener = qx.lang.Function.bind(\n              this.__chainListener,\n              this,\n              context\n            );\n\n            // store the listener for further processing\n            context.listeners.push(listener);\n          }\n          // add a new listener\n          if (qx.Class.implementsInterface(source, qx.data.IListData)) {\n            var eventName = \"change\";\n          } else {\n            var eventName = this.__getEventNameForProperty(\n              source,\n              context.propertyNames[j]\n            );\n          }\n\n          if (!eventName) {\n            context.sources[j] = null;\n            this.__resetTargetValue(\n              context.targetObject,\n              context.targetPropertyChain\n            );\n\n            return;\n          }\n          context.listenerIds[j] = source.addListener(\n            eventName,\n            context.listeners[j]\n          );\n        }\n      }\n    },\n\n    /**\n     * Internal helper for setting up the listening to the changes on the\n     * target side of the binding. Only works if the target property is a\n     * property chain\n     *\n     * @param sourceObject {qx.core.Object} The source of the binding.\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetPropertyChain {String} The property name of the target\n     *   object.\n     * @param options {Map} The options map perhaps containing the user defined\n     *   converter.\n     * @return {var} A map containing the listener ids and the targets.\n     */\n    __setUpTargetBinding(\n      sourceObject,\n      sourcePropertyChain,\n      targetObject,\n      targetPropertyChain,\n      options\n    ) {\n      // get the property names\n      var propertyNames = targetPropertyChain.split(\".\");\n\n      var arrayIndexValues = this.__checkForArrayInPropertyChain(propertyNames);\n      var targets = [];\n      var listeners = [];\n      var listenerIds = [];\n      var eventNames = [];\n      var target = targetObject;\n\n      // go through all property names\n      for (var i = 0; i < propertyNames.length - 1; i++) {\n        // check for the array\n        if (arrayIndexValues[i] !== \"\") {\n          // push the array change event\n          eventNames.push(\"change\");\n        } else {\n          var eventName = this.__getEventNameForProperty(\n            target,\n            propertyNames[i]\n          );\n\n          if (!eventName) {\n            // if the event names could not be terminated,\n            // just ignore the target chain listening\n            break;\n          }\n          eventNames.push(eventName);\n        }\n\n        // save the current source\n        targets[i] = target;\n\n        // create a listener\n        var listener = function () {\n          // delete all listener after the current one\n          for (var j = i + 1; j < propertyNames.length - 1; j++) {\n            // remove the old sources\n            var target = targets[j];\n            targets[j] = null;\n            if (!target) {\n              continue;\n            }\n\n            // remove the listeners\n            target.removeListenerById(listenerIds[j]);\n          }\n\n          // get the current target\n          var target = targets[i];\n          // add new once after the current one\n          for (var j = i + 1; j < propertyNames.length - 1; j++) {\n            var firstUpPropName = qx.lang.String.firstUp(propertyNames[j - 1]);\n            // get and store the new target\n            if (arrayIndexValues[j - 1] !== \"\") {\n              var currentIndex =\n                arrayIndexValues[j - 1] === \"last\"\n                  ? target.getLength() - 1\n                  : arrayIndexValues[j - 1];\n              target = target[\"get\" + firstUpPropName](currentIndex);\n            } else {\n              target = target[\"get\" + firstUpPropName]();\n            }\n            targets[j] = target;\n            if (!target) {\n              break;\n            }\n\n            // check if a listener already created\n            if (listeners[j] == null) {\n              // store the listener for further processing\n              listeners.push(listener);\n            }\n\n            // add a new listener\n            if (qx.Class.implementsInterface(target, qx.data.IListData)) {\n              var eventName = \"change\";\n            } else {\n              var eventName =\n                qx.data.SingleValueBinding.__getEventNameForProperty(\n                  target,\n                  propertyNames[j]\n                );\n\n              if (!eventName) {\n                // if the event name could not be terminated,\n                // ignore the rest\n                break;\n              }\n            }\n\n            listenerIds[j] = target.addListener(eventName, listeners[j]);\n          }\n\n          qx.data.SingleValueBinding.updateTarget(\n            sourceObject,\n            sourcePropertyChain,\n            targetObject,\n            targetPropertyChain,\n            options\n          );\n        };\n\n        // store the listener for further processing\n        listeners.push(listener);\n\n        // add the chaining listener\n        listenerIds[i] = target.addListener(eventNames[i], listener);\n\n        var firstUpPropName = qx.lang.String.firstUp(propertyNames[i]);\n        // get and store the next target\n        if (target[\"get\" + firstUpPropName] == null) {\n          target = null;\n        } else if (arrayIndexValues[i] !== \"\") {\n          target = target[\"get\" + firstUpPropName](arrayIndexValues[i]);\n        } else {\n          target = target[\"get\" + firstUpPropName]();\n        }\n        if (!target) {\n          break;\n        }\n      }\n\n      return { listenerIds: listenerIds, targets: targets };\n    },\n\n    /**\n     * Helper for updating the target. Gets the current set data from the source\n     * and set that on the target.\n     *\n     * @param sourceObject {qx.core.Object} The source of the binding.\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetPropertyChain {String} The property name of the target\n     *   object.\n     * @param options {Map} The options map perhaps containing the user defined\n     *   converter.\n     *\n     * @internal\n     */\n    updateTarget(\n      sourceObject,\n      sourcePropertyChain,\n      targetObject,\n      targetPropertyChain,\n      options\n    ) {\n      var value = this.resolvePropertyChain(sourceObject, sourcePropertyChain);\n\n      // convert the data before setting\n      value = qx.data.SingleValueBinding.__convertValue(\n        value,\n        targetObject,\n        targetPropertyChain,\n        options,\n        sourceObject\n      );\n\n      this.__setTargetValue(targetObject, targetPropertyChain, value);\n    },\n\n    /**\n     * Internal helper for getting the current set value at the property chain.\n     *\n     * @param o {qx.core.Object} The source of the binding.\n     * @param propertyChain {String} The property chain which represents\n     *   the source property.\n     * @return {var?undefined} Returns the set value if defined.\n     */\n    resolvePropertyChain(o, propertyChain) {\n      var properties = this.__getPropertyChainArray(propertyChain);\n      return this.__getTargetFromChain(o, properties, properties.length);\n    },\n\n    /**\n     * Tries to return a fitting event name to the given source object and\n     * property name. First, it assumes that the property name is a real property\n     * and therefore it checks the property definition for the event. The second\n     * possibility is to check if there is an event with the given name. The\n     * third and last possibility checked is if there is an event which is named\n     * change + propertyName. If this three possibilities fail, an error will be\n     * thrown.\n     *\n     * @param source {qx.core.Object} The source where the property is stored.\n     * @param propertyName {String} The name of the property.\n     * @return {String|null} The name of the corresponding event or null.\n     */\n    __getEventNameForProperty(source, propertyName) {\n      // get the current event name from the property definition\n      var eventName = this.__getEventForProperty(source, propertyName);\n      // if no event name could be found\n      if (eventName == null) {\n        // check if the propertyName is the event name\n        if (qx.Class.supportsEvent(source.constructor, propertyName)) {\n          eventName = propertyName;\n          // check if the change + propertyName is the event name\n        } else if (\n          qx.Class.supportsEvent(\n            source.constructor,\n            \"change\" + qx.lang.String.firstUp(propertyName)\n          )\n        ) {\n          eventName = \"change\" + qx.lang.String.firstUp(propertyName);\n        } else {\n          return null;\n        }\n      }\n      return eventName;\n    },\n\n    /**\n     * Resets the value of the given target after resolving the target property\n     * chain.\n     *\n     * @param targetObject {qx.core.Object} The object where the property chain\n     *   starts.\n     * @param targetPropertyChain {String} The names of the properties,\n     *   separated with a dot.\n     */\n    __resetTargetValue(targetObject, targetPropertyChain) {\n      // get the last target object of the chain\n      var properties = this.__getPropertyChainArray(targetPropertyChain);\n      var target = this.__getTargetFromChain(targetObject, properties);\n      if (target != null) {\n        // get the name of the last property\n        var lastProperty = properties[properties.length - 1];\n        // check for an array and set the value to null\n        var index = this.__getArrayIndex(lastProperty);\n        if (index) {\n          this.__setTargetValue(targetObject, targetPropertyChain, null);\n          return;\n        }\n\n        // try to reset the property\n        if (\n          target[\"reset\" + qx.lang.String.firstUp(lastProperty)] != undefined\n        ) {\n          target[\"reset\" + qx.lang.String.firstUp(lastProperty)]();\n        } else {\n          // fallback if no resetter is given (see bug #2456)\n          if (\n            typeof target[\"set\" + qx.lang.String.firstUp(lastProperty)] !=\n            \"function\"\n          ) {\n            throw new qx.core.AssertionError(\n              \"No setter for '\" + lastProperty + \"' on target \" + target + \".\"\n            );\n          }\n          target[\"set\" + qx.lang.String.firstUp(lastProperty)](null);\n        }\n      }\n    },\n\n    /**\n     * Sets the given value to the given target after resolving the\n     * target property chain.\n     *\n     * @param targetObject {qx.core.Object} The object where the property chain\n     *   starts.\n     * @param targetPropertyChain {String} The names of the properties,\n     *   separated with a dot.\n     * @param value {var} The value to set.\n     */\n    __setTargetValue(targetObject, targetPropertyChain, value) {\n      // get the last target object of the chain\n      var properties = this.__getPropertyChainArray(targetPropertyChain);\n      var target = this.__getTargetFromChain(targetObject, properties);\n      if (target) {\n        // get the name of the last property\n        var lastProperty = properties[properties.length - 1];\n\n        // check for array notation\n        var index = this.__getArrayIndex(lastProperty);\n        if (index) {\n          if (index === \"last\") {\n            // check for the 'last' notation\n            index = target.length - 1;\n          }\n          target.setItem(index, value);\n        } else {\n          if (\n            typeof target[\"set\" + qx.lang.String.firstUp(lastProperty)] !=\n            \"function\"\n          ) {\n            throw new qx.core.AssertionError(\n              \"No setter for '\" + lastProperty + \"' on target \" + target + \".\"\n            );\n          }\n          return target[\"set\" + qx.lang.String.firstUp(lastProperty)](value);\n        }\n      }\n    },\n\n    /**\n     * Returns the index from a property using bracket notation, e.g.\n     * \"[42]\" returns \"42\", \"[last]\" returns \"last\"\n     *\n     * @param propertyName {String} A property name\n     * @return {String|null} Array index or null if the property name does\n     * not use bracket notation\n     */\n    __getArrayIndex(propertyName) {\n      var arrayExp = /^\\[(\\d+|last)\\]$/;\n      var arrayMatch = propertyName.match(arrayExp);\n      if (arrayMatch) {\n        return arrayMatch[1];\n      }\n      return null;\n    },\n\n    /**\n     * Converts a property chain string into a list of properties and/or\n     * array indexes\n     * @param targetPropertyChain {String} property chain\n     * @return {String[]} Array of property names\n     */\n    __getPropertyChainArray(targetPropertyChain) {\n      // split properties (dot notation) and array indexes (bracket notation)\n      return targetPropertyChain\n        .replace(/\\[/g, \".[\")\n        .split(\".\")\n        .filter(function (prop) {\n          return prop !== \"\";\n        });\n    },\n\n    /**\n     * Helper-Function resolving the object on which the last property of the\n     * chain should be set.\n     *\n     * @param targetObject {qx.core.Object} The object where the property chain\n     *   starts.\n     * @param targetProperties {String[]} Array containing the names of the properties\n     * @param index {Number?} The array index of the last property to be considered.\n     * Default: The last item's index\n     * @return {qx.core.Object|null} The object on which the last property\n     *   should be set.\n     */\n    __getTargetFromChain(targetObject, targetProperties, index) {\n      index = index || targetProperties.length - 1;\n      var target = targetObject;\n\n      for (var i = 0; target !== null && i < index; i++) {\n        try {\n          var property = targetProperties[i];\n\n          // array notation\n          var arrIndex = this.__getArrayIndex(property);\n          if (arrIndex) {\n            if (arrIndex === \"last\") {\n              // check for the 'last' notation\n              arrIndex = target.length - 1;\n            }\n            target = target.getItem(arrIndex);\n          } else {\n            target = target[\"get\" + qx.lang.String.firstUp(property)]();\n          }\n        } catch (ex) {\n          return null;\n        }\n      }\n      return target;\n    },\n\n    /**\n     * Set the given value to the target property. This method is used for\n     * initially set the value.\n     *\n     * @param value {var} The value to set.\n     * @param targetObject {qx.core.Object} The object which contains the target\n     *   property.\n     * @param targetPropertyChain {String} The name of the target property in the\n     *   target object.\n     * @param options {Map} The options map perhaps containing the user defined\n     *   converter.\n     * @param sourceObject {qx.core.Object} The source object of the binding (\n     *   used for the onUpdate callback).\n     */\n    __setInitialValue(\n      value,\n      targetObject,\n      targetPropertyChain,\n      options,\n      sourceObject\n    ) {\n      // first convert the initial value\n      value = this.__convertValue(\n        value,\n        targetObject,\n        targetPropertyChain,\n        options,\n        sourceObject\n      );\n\n      // check if the converted value is undefined\n      if (value === undefined) {\n        this.__resetTargetValue(targetObject, targetPropertyChain);\n      }\n      // only set the initial value if one is given (may be null)\n      if (value !== undefined) {\n        try {\n          var result = this.__setTargetValue(\n            targetObject,\n            targetPropertyChain,\n            value\n          );\n\n          // tell the user that the setter was invoked probably\n          if (options && options.onUpdate) {\n            options.onUpdate(sourceObject, targetObject, value);\n          }\n          return result;\n        } catch (e) {\n          if (!(e instanceof qx.core.ValidationError)) {\n            throw e;\n          }\n\n          if (options && options.onSetFail) {\n            options.onSetFail(e);\n          } else {\n            qx.log.Logger.warn(\n              \"Failed so set value \" +\n                value +\n                \" on \" +\n                targetObject +\n                \". Error message: \" +\n                e\n            );\n          }\n        }\n      }\n    },\n\n    /**\n     * Checks for an array element in the given property names and adapts the\n     * arrays to fit the algorithm.\n     *\n     * @param propertyNames {Array} The array containing the property names.\n     *   Attention, this method can change this parameter!!!\n     * @return {Array} An array containing the values of the array properties\n     *   corresponding to the property names.\n     */\n    __checkForArrayInPropertyChain(propertyNames) {\n      // array for the values of the array properties\n      var arrayIndexValues = [];\n\n      // go through all properties and check for array notations\n      for (var i = 0; i < propertyNames.length; i++) {\n        var name = propertyNames[i];\n        // if its an array property in the chain\n        if (name.endsWith(\"]\")) {\n          // get the inner value of the array notation\n          var arrayIndex = name.substring(\n            name.indexOf(\"[\") + 1,\n            name.indexOf(\"]\")\n          );\n\n          // check the arrayIndex\n          if (name.indexOf(\"]\") != name.length - 1) {\n            throw new Error(\n              \"Please use only one array at a time: \" + name + \" does not work.\"\n            );\n          }\n          if (arrayIndex !== \"last\") {\n            if (arrayIndex == \"\" || isNaN(parseInt(arrayIndex, 10))) {\n              throw new Error(\n                \"No number or 'last' value has been given\" +\n                  \" in an array binding: \" +\n                  name +\n                  \" does not work.\"\n              );\n            }\n          }\n\n          // if a property is in front of the array notation\n          if (name.indexOf(\"[\") != 0) {\n            // store the property name without the array notation\n            propertyNames[i] = name.substring(0, name.indexOf(\"[\"));\n            // store the values in the array for the current iteration\n            arrayIndexValues[i] = \"\";\n            // store the properties for the next iteration (the item of the array)\n            arrayIndexValues[i + 1] = arrayIndex;\n            propertyNames.splice(i + 1, 0, \"item\");\n            // skip the next iteration. its the array item and its already set\n            i++;\n            // it the array notation is the beginning\n          } else {\n            // store the array index and override the entry in the property names\n            arrayIndexValues[i] = arrayIndex;\n            propertyNames.splice(i, 1, \"item\");\n          }\n        } else {\n          arrayIndexValues[i] = \"\";\n        }\n      }\n\n      return arrayIndexValues;\n    },\n\n    /**\n     * Internal helper method which is actually doing all bindings. That means\n     * that an event listener will be added to the source object which listens\n     * to the given event and invokes an set on the target property on the\n     * targetObject.\n     * This method does not store the binding in the internal reference store\n     * so it should NOT be used from outside this class. For an outside usage,\n     * use {@link #bind}.\n     *\n     * @param sourceObject {qx.core.Object} The source of the binding.\n     * @param sourceEvent {String} The event of the source object which could\n     *   be the change event in common but has to be an\n     *   {@link qx.event.type.Data} event.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetProperty {String} The property name of the target object.\n     * @param options {Map} A map containing the options. See\n     *   {@link #bind} for more information.\n     * @param arrayIndex {String} The index of the given array if its an array\n     *   to bind.\n     *\n     * @return {var} Returns the internal id for that binding. This can be used\n     *   for referencing the binding or e.g. for removing. This is not an atomic\n     *   id so you can't you use it as a hash-map index. It's the id which will\n     *   be returned by the {@link qx.core.Object#addListener} method.\n     * @throws {qx.core.AssertionError} If the event is no data event or\n     *   there is no property definition for the target object and target\n     *   property.\n     */\n    __bindEventToProperty(\n      sourceObject,\n      sourceEvent,\n      targetObject,\n      targetProperty,\n      options,\n      arrayIndex\n    ) {\n      // checks\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        // check for the data event\n        var eventType = qx.Class.getEventType(\n          sourceObject.constructor,\n          sourceEvent\n        );\n\n        qx.core.Assert.assertEquals(\n          \"qx.event.type.Data\",\n          eventType,\n          sourceEvent +\n            \" is not an data (qx.event.type.Data) event on \" +\n            sourceObject +\n            \".\"\n        );\n      }\n\n      var bindListener = function (arrayIndex, e) {\n        // if an array value is given\n        if (arrayIndex !== \"\") {\n          //check if its the \"last\" value\n          if (arrayIndex === \"last\") {\n            arrayIndex = sourceObject.length - 1;\n          }\n\n          // get the data of the array\n          var data = sourceObject.getItem(arrayIndex);\n\n          // reset the target if the data is not set\n          if (data === undefined) {\n            qx.data.SingleValueBinding.__resetTargetValue(\n              targetObject,\n              targetProperty\n            );\n          }\n\n          // only do something if the current array has been changed\n          var start = e.getData().start;\n          var end = e.getData().end;\n          if (arrayIndex < start || arrayIndex > end) {\n            return;\n          }\n        } else {\n          // get the data out of the event\n          var data = e.getData();\n        }\n\n        // debug message\n        if (qx.core.Environment.get(\"qx.debug.databinding\")) {\n          qx.log.Logger.debug(\n            \"Binding executed from \" +\n              sourceObject +\n              \" by \" +\n              sourceEvent +\n              \" to \" +\n              targetObject +\n              \" (\" +\n              targetProperty +\n              \")\"\n          );\n\n          qx.log.Logger.debug(\"Data before conversion: \" + data);\n        }\n\n        // convert the data\n        data = qx.data.SingleValueBinding.__convertValue(\n          data,\n          targetObject,\n          targetProperty,\n          options,\n          sourceObject\n        );\n\n        // debug message\n        if (qx.core.Environment.get(\"qx.debug.databinding\")) {\n          qx.log.Logger.debug(\"Data after conversion: \" + data);\n        }\n\n        // try to set the value\n        var result;\n        try {\n          if (data !== undefined) {\n            result = qx.data.SingleValueBinding.__setTargetValue(\n              targetObject,\n              targetProperty,\n              data\n            );\n          } else {\n            result = qx.data.SingleValueBinding.__resetTargetValue(\n              targetObject,\n              targetProperty\n            );\n          }\n\n          // tell the user that the setter was invoked probably\n          if (options && options.onUpdate) {\n            options.onUpdate(sourceObject, targetObject, data);\n          }\n        } catch (ex) {\n          if (!(ex instanceof qx.core.ValidationError)) {\n            throw ex;\n          }\n\n          if (options && options.onSetFail) {\n            options.onSetFail(ex);\n          } else {\n            qx.log.Logger.warn(\n              \"Failed so set value \" +\n                data +\n                \" on \" +\n                targetObject +\n                \". Error message: \" +\n                ex\n            );\n          }\n        }\n        return result;\n      };\n\n      // check if an array index is given\n      if (!arrayIndex) {\n        // if not, signal it a s an empty string\n        arrayIndex = \"\";\n      }\n      // bind the listener function (make the array index in the listener available)\n      bindListener = qx.lang.Function.bind(\n        bindListener,\n        sourceObject,\n        arrayIndex\n      );\n\n      // add the listener\n      var id = sourceObject.addListener(sourceEvent, bindListener);\n\n      return id;\n    },\n\n    /**\n     * This method stores the given value as a binding in the internal structure\n     * of all bindings.\n     *\n     * @param id {var} The listener id of the id for a deeper binding.\n     * @param sourceObject {qx.core.Object} The source Object of the binding.\n     * @param sourceEvent {String} The name of the source event.\n     * @param targetObject {qx.core.Object} The target object.\n     * @param targetProperty {String} The name of the property on the target\n     *   object.\n     */\n    __storeBinding(\n      id,\n      sourceObject,\n      sourceEvent,\n      targetObject,\n      targetProperty\n    ) {\n      var hash;\n\n      // add the listener id to the internal registry\n      hash = sourceObject.toHashCode();\n      if (this.__bindings[hash] === undefined) {\n        this.__bindings[hash] = [];\n      }\n\n      var binding = [\n        id,\n        sourceObject,\n        sourceEvent,\n        targetObject,\n        targetProperty\n      ];\n\n      this.__bindings[hash].push(binding);\n\n      // add same binding data indexed by target object\n      hash = targetObject.toHashCode();\n      if (this.__bindingsByTarget[hash] === undefined) {\n        this.__bindingsByTarget[hash] = [];\n      }\n      this.__bindingsByTarget[hash].push(binding);\n    },\n\n    /**\n     * This method takes the given value, checks if the user has given a\n     * converter and converts the value to its target type. If no converter is\n     * given by the user, the {@link #__defaultConversion} will try to convert\n     * the value.\n     *\n     * @param value {var} The value which possibly should be converted.\n     * @param targetObject {qx.core.Object} The target object.\n     * @param targetPropertyChain {String} The property name of the target object.\n     * @param options {Map} The options map which can includes the converter.\n     *   For a detailed information on the map, take a look at\n     *   {@link #bind}.\n     * @param sourceObject {qx.core.Object} The source object for the binding.\n     *\n     * @return {var} The converted value. If no conversion has been done, the\n     *   value property will be returned.\n     * @throws {qx.core.AssertionError} If there is no property definition\n     *   of the given target object and target property.\n     */\n    __convertValue(\n      value,\n      targetObject,\n      targetPropertyChain,\n      options,\n      sourceObject\n    ) {\n      // do the conversion given by the user\n      if (options && options.converter) {\n        var model;\n        if (targetObject.getModel) {\n          model = targetObject.getModel();\n        }\n        return options.converter(value, model, sourceObject, targetObject);\n        // try default conversion\n      } else {\n        var properties = this.__getPropertyChainArray(targetPropertyChain);\n        var target = this.__getTargetFromChain(targetObject, properties);\n        var lastProperty = targetPropertyChain.substring(\n          targetPropertyChain.lastIndexOf(\".\") + 1,\n          targetPropertyChain.length\n        );\n\n        // if no target is currently available, return the original value\n        if (target == null) {\n          return value;\n        }\n\n        var propertieDefinition = qx.Class.getPropertyDefinition(\n          target.constructor,\n          lastProperty\n        );\n\n        var check =\n          propertieDefinition == null ? \"\" : propertieDefinition.check;\n        return this.__defaultConversion(value, check);\n      }\n    },\n\n    /**\n     * Helper method which tries to figure out if the given property on the\n     * given object does have a change event and if returns the name of it.\n     *\n     * @param sourceObject {qx.core.Object} The object to check.\n     * @param sourceProperty {String} The name of the property.\n     *\n     * @return {String} The name of the change event.\n     * @throws {qx.core.AssertionError} If there is no property definition of\n     *   the given object property pair.\n     */\n    __getEventForProperty(sourceObject, sourceProperty) {\n      // get the event name\n      var propertieDefinition = qx.Class.getPropertyDefinition(\n        sourceObject.constructor,\n        sourceProperty\n      );\n\n      if (propertieDefinition == null) {\n        return null;\n      }\n      return propertieDefinition.event;\n    },\n\n    /**\n     * Tries to convert the data to the type given in the targetCheck argument.\n     *\n     * @param data {var} The data to convert.\n     * @param targetCheck {String} The value of the check property. That usually\n     *   contains the target type.\n     * @return {Integer|String|Float} The converted data\n     */\n    __defaultConversion(data, targetCheck) {\n      var dataType = qx.lang.Type.getClass(data);\n\n      // to integer\n      if (\n        (dataType == \"Number\" || dataType == \"String\") &&\n        (targetCheck == \"Integer\" || targetCheck == \"PositiveInteger\")\n      ) {\n        data = parseInt(data, 10);\n      }\n\n      // to string\n      if (\n        (dataType == \"Boolean\" || dataType == \"Number\" || dataType == \"Date\") &&\n        targetCheck == \"String\"\n      ) {\n        data = data + \"\";\n      }\n\n      // to float\n      if (\n        (dataType == \"Number\" || dataType == \"String\") &&\n        (targetCheck == \"Number\" || targetCheck == \"PositiveNumber\")\n      ) {\n        data = parseFloat(data);\n      }\n\n      return data;\n    },\n\n    /**\n     * Removes the binding with the given id from the given sourceObject. The\n     * id has to be the id returned by any of the bind functions.\n     *\n     * @param sourceObject {qx.core.Object} The source object of the binding.\n     * @param id {var} The id of the binding.\n     * @throws {Error} If the binding could not be found.\n     */\n    removeBindingFromObject(sourceObject, id) {\n      // check for a deep binding\n      if (id.type == \"deepBinding\") {\n        // go through all added listeners (source)\n        for (var i = 0; i < id.sources.length; i++) {\n          // check if a source is available\n          if (id.sources[i]) {\n            if (id.listenerIds[i]) {\n              id.sources[i].removeListenerById(id.listenerIds[i]);\n            }\n            // If the listener id is not available, it is most likely\n            // caused by some hidden error situation.\n            // At least an error message should be displayed\n            else {\n              sourceObject.error(\n                \"Could not remove deep bindings. Binding id for \" +\n                  id.sources[i].classname +\n                  \" could not be found!\"\n              );\n            }\n          }\n        }\n        // go through all added listeners (target)\n        for (var i = 0; i < id.targets.length; i++) {\n          // check if a target is available\n          if (id.targets[i]) {\n            if (id.targetListenerIds[i]) {\n              id.targets[i].removeListenerById(id.targetListenerIds[i]);\n            }\n            // If the target listener id is not available, it is most likely\n            // caused by some hidden error situation.\n            // At least an error message should be displayed\n            else {\n              sourceObject.error(\n                \"Could not remove target listener. Listener id for target \" +\n                  id.targets[i].classname +\n                  \" could not be found!\"\n              );\n            }\n          }\n        }\n      } else {\n        // remove the listener\n        sourceObject.removeListenerById(id);\n      }\n\n      // remove the id from the internal reference system\n      var bindings = this.getAllBindingsForObject(sourceObject);\n      // check if the binding exists\n      if (bindings != undefined) {\n        for (var i = 0; i < bindings.length; i++) {\n          if (bindings[i][0] == id) {\n            // remove binding data from internal reference indexed by target object\n            var target = bindings[i][3];\n            if (this.__bindingsByTarget[target.toHashCode()]) {\n              qx.lang.Array.remove(\n                this.__bindingsByTarget[target.toHashCode()],\n                bindings[i]\n              );\n            }\n\n            // remove binding data from internal reference indexed by source object\n            var source = bindings[i][1];\n            if (this.__bindings[source.toHashCode()]) {\n              qx.lang.Array.remove(\n                this.__bindings[source.toHashCode()],\n                bindings[i]\n              );\n            }\n            return;\n          }\n        }\n      }\n      throw new Error(\"Binding could not be found!\");\n    },\n\n    /**\n     * Removes all bindings for the given object.\n     *\n     * @param object {qx.core.Object} The object of which the bindings should be\n     *   removed.\n     * @throws {qx.core.AssertionError} If the object is not in the internal\n     *   registry of the bindings.\n     * @throws {Error} If one of the bindings listed internally can not be\n     *   removed.\n     */\n    removeAllBindingsForObject(object) {\n      // check for the null value\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertNotNull(\n          object,\n          \"Can not remove the bindings for null object!\"\n        );\n      }\n\n      // get the bindings\n      var bindings = this.getAllBindingsForObject(object);\n      if (bindings != undefined) {\n        // remove every binding with the removeBindingFromObject function\n        for (var i = bindings.length - 1; i >= 0; i--) {\n          this.removeBindingFromObject(object, bindings[i][0]);\n        }\n      }\n\n      var hash = object.toHashCode();\n      delete this.__bindings[hash];\n      delete this.__bindingsByTarget[hash];\n    },\n\n    /**\n     * Removes all bindings between given objects.\n     *\n     * @param object {qx.core.Object} The object of which the bindings should be\n     *   removed.\n     * @param relatedObject {qx.core.Object} The object of which related\n     *   bindings should be removed.\n     * @throws {qx.core.AssertionError} If the object is not in the internal\n     *   registry of the bindings.\n     * @throws {Error} If one of the bindings listed internally can not be\n     *   removed.\n     */\n    removeRelatedBindings(object, relatedObject) {\n      // check for the null value\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertNotNull(\n          object,\n          \"Can not remove the bindings for null object!\"\n        );\n\n        qx.core.Assert.assertNotNull(\n          relatedObject,\n          \"Can not remove the bindings for null object!\"\n        );\n      }\n\n      // get the bindings\n      var bindings = this.getAllBindingsForObject(object);\n      if (bindings != undefined) {\n        // remove every binding with the removeBindingFromObject function\n        for (var i = bindings.length - 1; i >= 0; i--) {\n          var source = bindings[i][1];\n          var target = bindings[i][3];\n          if (source === relatedObject || target === relatedObject) {\n            this.removeBindingFromObject(object, bindings[i][0]);\n          }\n        }\n      }\n    },\n\n    /**\n     * Returns an array which lists all bindings.\n     *\n     * @param object {qx.core.Object} The object of which the bindings should\n     *   be returned.\n     *\n     * @return {Array} An array of binding informations. Every binding\n     *   information is an array itself containing id, sourceObject,\n     *   sourceEvent, targetObject and targetProperty in that order.\n     */\n    getAllBindingsForObject(object) {\n      var hash = object.toHashCode();\n\n      // get all bindings of object as source\n      var sourceBindings = this.__bindings[hash];\n\n      // get all bindings of object as target\n      var targetBindings = this.__bindingsByTarget[hash];\n\n      if (!sourceBindings && !targetBindings) {\n        return [];\n      }\n      if (!sourceBindings) {\n        return qx.lang.Array.clone(targetBindings);\n      }\n      if (!targetBindings) {\n        return qx.lang.Array.clone(sourceBindings);\n      }\n\n      return qx.lang.Array.unique(sourceBindings.concat(targetBindings));\n    },\n\n    /**\n     * Removes all binding in the whole application. After that not a single\n     * binding is left.\n     * @deprecated {6.0} dispose and destructors are deprecated because of automatic memory management; this\n     * will only work for objects explicitly registered with ObjectRegistry.register\n     */\n    removeAllBindings() {\n      // go through all registered objects\n      for (var hash in this.__bindings) {\n        var object = qx.core.ObjectRegistry.fromHashCode(hash);\n        // check for the object, perhaps its already deleted\n        if (object == null) {\n          delete this.__bindings[hash];\n          continue;\n        }\n        this.removeAllBindingsForObject(object);\n      }\n      // reset the bindings map\n      this.__bindings = {};\n    },\n\n    /**\n     * Returns a map containing for every bound object an array of data binding\n     * information. The key of the map is the hash code of the bound objects.\n     * Every binding is represented by an array containing id, sourceObject,\n     * sourceEvent, targetObject and targetProperty.\n     *\n     * @return {Map} Map containing all bindings.\n     */\n    getAllBindings() {\n      return this.__bindings;\n    },\n\n    /**\n     * Debug function which shows some valuable information about the given\n     * binding in console. For that it uses {@link qx.log.Logger}.\n     *\n     * @param object {qx.core.Object} the source of the binding.\n     * @param id {var} The id of the binding.\n     */\n    showBindingInLog(object, id) {\n      var binding;\n      // go through all bindings of the given object\n      for (var i = 0; i < this.__bindings[object.toHashCode()].length; i++) {\n        // the first array item is the id\n        if (this.__bindings[object.toHashCode()][i][0] == id) {\n          binding = this.__bindings[object.toHashCode()][i];\n          break;\n        }\n      }\n\n      if (binding === undefined) {\n        var message = \"Binding does not exist!\";\n      } else {\n        var message =\n          \"Binding from '\" +\n          binding[1] +\n          \"' (\" +\n          binding[2] +\n          \") to the object '\" +\n          binding[3] +\n          \"' (\" +\n          binding[4] +\n          \").\";\n      }\n\n      qx.log.Logger.debug(message);\n    },\n\n    /**\n     * Debug function which shows all bindings in the log console. To get only\n     * one binding in the console use {@link #showBindingInLog}\n     * @deprecated {6.0} qx.core.ObjectRegistry no longer stores most objects\n     */\n    showAllBindingsInLog() {\n      // go through all objects in the registry\n      for (var hash in this.__bindings) {\n        var object = qx.core.ObjectRegistry.fromHashCode(hash);\n        if (object) {\n          for (var i = 0; i < this.__bindings[hash].length; i++) {\n            this.showBindingInLog(object, this.__bindings[hash][i][0]);\n          }\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,4BAA4B,EAAE;IAC5CC,OAAO,EAAE;MACP;MACAC,SAAU,EAAE,CAAC,CAAC;MAEd;MACAC,SAAkB,EAAE,CAAC,CAAC;MAEtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KACFC,YAAY,EACZC,mBAAmB,EACnBC,YAAY,EACZC,mBAAmB,EACnBC,OAAO,EACP;QACA;;QAQA;QACA,IAAIC,iBAAiB,GAAG,IAAI,CAACC,SAAoB,CAC/CN,YAAY,EACZC,mBAAmB,EACnBC,YAAY,EACZC,mBAAmB,EACnBC,OAAO,CACR;;QAED;QACA,IAAIG,aAAa,GAAGN,mBAAmB,CAACO,KAAK,CAAC,GAAG,CAAC;;QAElD;QACA,IAAIC,gBAAgB,GAAG,IAAI,CAACC,SAA8B,CAACH,aAAa,CAAC;QACzE,IAAII,OAAO,GAAG,EAAE;QAChB,IAAIC,SAAS,GAAG,EAAE;QAClB,IAAIC,WAAW,GAAG,EAAE;QACpB,IAAIC,UAAU,GAAG,EAAE;QACnB,IAAIC,MAAM,GAAGf,YAAY;QACzB,IAAIgB,cAA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"
}