{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "ignore",
    "properties",
    "parentProperty",
    "depth",
    "getPropertyMapping",
    "property",
    "getModelClass",
    "object",
    "getModelSuperClass",
    "getModelMixins",
    "getValidationRule",
    "propertyName",
    "getArrayClass",
    "getJsonHash",
    "data",
    "includeBubbleEvents",
    "marshal",
    "IMarshalerDelegate"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/data/marshal/IMarshalerDelegate.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Objects, which are used as delegates for a data binding marshaler may\r\n * implement any of the methods described in this interface. The delegate does\r\n * not need implement all of the methods of this interface. If a method is not\r\n * implemented the marshaler provides a default implementation.\r\n *\r\n * Note: This interface is meant to document the delegate but should not be\r\n * listed in the <code>implement</code> key of a class unless all methods are\r\n * really implemented.\r\n */\r\nqx.Interface.define(\"qx.data.marshal.IMarshalerDelegate\", {\r\n  members: {\r\n    /**\r\n     * Gives the possibility to ignore parts of the marshaled data and store the\r\n     * original data.\r\n     *\r\n     * @param properties {String} A sorted order of propertynames\r\n     *   separated by \".\r\n     * @param parentProperty {String|null} If there is a named parent property, the\r\n     *   name is given here. This might be null in case of the root data.\r\n     * @param depth {Number} The depth level of the data.\r\n     * @return {Boolean} <code>true</code> if the set should be ignored\r\n     */\r\n    ignore(properties, parentProperty, depth) {},\r\n\r\n    /**\r\n     * Gives the possibility to change the names given in the data to convert\r\n     * to something different.\r\n     *\r\n     * @param property {String} The name of the property from the data source.\r\n     * @param properties {String} A sorted order of propertynames\r\n     *   separated by \".\r\n     * @return {String} The new property name which should be used for that property in\r\n     *   the model.\r\n     */\r\n    getPropertyMapping(property, properties) {},\r\n\r\n    /**\r\n     * Determines the user defined class for the given properties string.\r\n     * This class could contain additional methods but needs to have the\r\n     * properties with the given names. Also every property needs to have a\r\n     * change event.\r\n     *\r\n     * If this method is implemented, you have to add the superclass and mixins\r\n     * yourself to the returned class. This means that the methods\r\n     * {@link #getModelSuperClass} and {@link #getModelMixins} will not be\r\n     * called for the corresponding class.\r\n     *\r\n     * @param properties {String} A sorted order of propertynames\r\n     *   separated by \".\r\n     * @param object {Map} The object for which an class is needed.\r\n     * @param parentProperty {String|null} If there is a named parent property, the\r\n     *   name is given here. This might be null in case of the root data.\r\n     * @param depth {Number} The depth level of the data.\r\n     * @return {Class|null} Returns the class containing the properties\r\n     *   corresponding to the given hash of the properties. If <code>null</code>\r\n     *   will be returned, the marshaler will create a class.\r\n     */\r\n    getModelClass(properties, object, parentProperty, depth) {},\r\n\r\n    /**\r\n     * Returns the class which the created model class uses as superclass.\r\n     *\r\n     * @param properties {String} A sorted order of propertynames\r\n     *   separated by \".\r\n     * @param parentProperty {String|null} If there is a named parent property, the\r\n     *   name is given here. This might be null in case of the root data.\r\n     * @param depth {Number} The depth level of the data.\r\n     * @return {Class|null} Returns the class which should be used as superclass\r\n     *   corresponding to the given hash of the properties. If <code>null</code>\r\n     *   will be returned, {@link qx.core.Object} will be used as superclass.\r\n     */\r\n    getModelSuperClass(properties, parentProperty, depth) {},\r\n\r\n    /**\r\n     * Returns the mixins which should be included to the class, created by the\r\n     * marshaler and identified by the given properties string.\r\n     *\r\n     * @param properties {String} A sorted order of propertynames\r\n     *   separated by \".\r\n     * @param parentProperty {String|null} If there is a named parent property, the\r\n     *   name is given here. This might be null in case of the root data.\r\n     * @param depth {Number} The depth level of the data.\r\n     * @return {Array|Mixin|null} Returns an array of mixins or a single mixin which\r\n     *   will be included into the given class identified by the properties\r\n     *   given in the parameter. If <code>null</code> will be returned, no mixin\r\n     *   will be included.\r\n     */\r\n    getModelMixins(properties, parentProperty, depth) {},\r\n\r\n    /**\r\n     * Returns the validation rules which should be added to the created class\r\n     * for the given property. This method will be called for every property.\r\n     *\r\n     * @param properties {String} A sorted order of propertynames\r\n     *   separated by \".\r\n     * @param propertyName {String} The name of the current property.\r\n     * @return {Function|null} If you want to have a validation rule for the\r\n     *   current property, you should return a validation function which will\r\n     *   be included into the property definition as validator.\r\n     *   {@link qx.core.Property} for more details.\r\n     */\r\n    getValidationRule(properties, propertyName) {},\r\n\r\n    /**\r\n     * Returns the array class which should be used by the marshaler. The passed\r\n     * parameters can be used to determine the array class. The return array class\r\n     * must implement the {@link qx.data.IListData} interface.\r\n     *\r\n     * @param parentProperty {String|null} If there is a named parent property, the\r\n     *   name is given here. This might be null in case of the root data.\r\n     * @param depth {Number} The depth level of the data.\r\n     * @return {Class|null} Returns the class which should be used as array class.\r\n     *   If <code>null</code> will be returned, {@link qx.data.Array} will be used as array class.\r\n     */\r\n    getArrayClass(parentProperty, depth) {},\r\n\r\n    /**\r\n     * Converts a given object into a hash which will be used to identify the\r\n     * classes under the namespace <code>qx.data.model</code>.\r\n     *\r\n     * @param data {Object} The JavaScript object from which the hash is\r\n     *   required.\r\n     * @param includeBubbleEvents {Boolean?false} Whether the model should\r\n     *   support the bubbling of change events or not.\r\n     * @return {String} The hash representation of the given JavaScript object.\r\n     */\r\n    getJsonHash(data, includeBubbleEvents) {}\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,oCAAoC,EAAE;IACxDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,WAAAA,OAACC,UAAU,EAAEC,cAAc,EAAEC,KAAK,EAAE,CAAC,CAAC;MAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,kBAAkB,WAAAA,mBAACC,QAAQ,EAAEJ,UAAU,EAAE,CAAC,CAAC;MAE3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,aAAa,WAAAA,cAACL,UAAU,EAAEM,MAAM,EAAEL,cAAc,EAAEC,KAAK,EAAE,CAAC,CAAC;MAE3D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,kBAAkB,WAAAA,mBAACP,UAAU,EAAEC,cAAc,EAAEC,KAAK,EAAE,CAAC,CAAC;MAExD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIM,cAAc,WAAAA,eAACR,UAAU,EAAEC,cAAc,EAAEC,KAAK,EAAE,CAAC,CAAC;MAEpD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIO,iBAAiB,WAAAA,kBAACT,UAAU,EAAEU,YAAY,EAAE,CAAC,CAAC;MAE9C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aAAa,WAAAA,cAACV,cAAc,EAAEC,KAAK,EAAE,CAAC,CAAC;MAEvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIU,WAAW,WAAAA,YAACC,IAAI,EAAEC,mBAAmB,EAAE,CAAC;IAC1C;EACF,CAAC,CAAC;EApJFtB,EAAE,CAACqB,IAAI,CAACE,OAAO,CAACC,kBAAkB,CAACrB,aAAa,GAAGA,aAAa;AAAC"
}