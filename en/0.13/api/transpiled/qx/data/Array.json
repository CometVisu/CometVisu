{
  "className": "qx.data.Array",
  "packageName": "qx.data",
  "name": "Array",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.data.IListData"
  ],
  "mixins": [
    "qx.data.marshal.MEventBubbling"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0,
        "index": 1015
      },
      "end": {
        "line": 1137,
        "column": 3,
        "index": 34229
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The data array is a special array used in the data binding context of\n qooxdoo. It does not extend the native array of JavaScript but its a wrapper\n for it. All the native methods are included in the implementation and it\n also fires events if the content or the length of the array changes in\n any way. Also the <code>.length</code> property is available on the array.\n This class does not need to be disposed, unless you set the autoDisposeItems\n property to true and want the items to be disposed.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 46,
        "column": 2,
        "index": 1676
      },
      "end": {
        "line": 86,
        "column": 3,
        "index": 2856
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Creates a new instance of an array.</p>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "param {var} The parameter can be some types.<br/>\n   Without a parameter a new blank array will be created.<br/>\n   If there is more than one parameter is given, the parameter will be\n   added directly to the new array.<br/>\n   If the parameter is a number, a new Array with the given length will be\n   created.<br/>\n   If the parameter is a JavaScript array, a new array containing the given\n   elements will be created.",
          "paramName": "param",
          "description": " The parameter can be some types.<br/>\n   Without a parameter a new blank array will be created.<br/>\n   If there is more than one parameter is given, the parameter will be\n   added directly to the new array.<br/>\n   If the parameter is a number, a new Array with the given length will be\n   created.<br/>\n   If the parameter is a JavaScript array, a new array containing the given\n   elements will be created.",
          "type": "var"
        }
      ]
    }
  },
  "properties": {
    "autoDisposeItems": {
      "location": {
        "start": {
          "line": 99,
          "column": 4,
          "index": 3240
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 3307
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Flag to set the dispose behavior of the array. If the property is set to\n <code>true</code>, the array will dispose its content on dispose, too.</p>"
          }
        ]
      },
      "name": "autoDisposeItems",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "events": {
    "change": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 4048
        },
        "end": {
          "line": 122,
          "column": 32,
          "index": 4076
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The change event which will be fired if there is a change in the array.\n The data contains a map with five key value pairs:\n <li>start: The start index of the change.</li>\n <li>end: The end index of the change.</li>\n <li>type: The type of the change as a String. This can be 'add',\n 'remove', 'order' or 'add/remove'</li>\n <li>added: The items which has been added (as a JavaScript array)</li>\n <li>removed: The items which has been removed (as a JavaScript array)</li></p>"
          }
        ]
      },
      "name": "change",
      "type": "qx.event.type.Data"
    },
    "changeLength": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 4194
        },
        "end": {
          "line": 128,
          "column": 38,
          "index": 4228
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The changeLength event will be fired every time the length of the\n array changes.</p>"
          }
        ]
      },
      "name": "changeLength",
      "type": "qx.event.type.Data"
    },
    "changeBubble": {
      "type": "event",
      "name": "changeBubble",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The change event which will be fired on every change in the model no\n matter what property changes. This event bubbles so the root model will\n fire a change event on every change of its children properties too.\n Note that properties are required to call\n {@link #_applyEventPropagation} on apply for changes to be tracked as\n desired. It is already taken care of that properties created with the\n {@link qx.data.marshal.Json} marshaler call this method.\n The data will contain a map with the following four keys\n   <li>value: The new value of the property</li>\n   <li>old: The old value of the property.</li>\n   <li>name: The name of the property changed including its parent\n     properties separated by dots.</li>\n   <li>item: The item which has the changed property.</li>\n Due to that, the <code>getOldData</code> method will always return null\n because the old data is contained in the map.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__array": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4275
        },
        "end": {
          "line": 133,
          "column": 17,
          "index": 4288
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "private"
    },
    "concat": {
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 4613
        },
        "end": {
          "line": 152,
          "column": 5,
          "index": 4865
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Concatenates the current and the given array into a new one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {qx.data.Array|Array} The javaScript array which should be concatenated\n   to the current array.",
            "paramName": "array",
            "description": " The javaScript array which should be concatenated\n   to the current array.",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array containing the values of both former\n   arrays.",
            "type": "qx.data.Array",
            "description": " A new array containing the values of both former\n   arrays."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "join": {
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 5162
        },
        "end": {
          "line": 165,
          "column": 5,
          "index": 5228
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the array as a string using the given connector string to\n connect the values.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "connector {String} the string which should be used to past in\n  between of the array values.",
            "paramName": "connector",
            "description": " the string which should be used to past in\n  between of the array values.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The array as a string.",
            "type": "String",
            "description": " The array as a string."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "pop": {
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 5406
        },
        "end": {
          "line": 200,
          "column": 5,
          "index": 6025
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes and returns the last element of the array.\n An change event will be fired.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The last element of the array.",
            "type": "var",
            "description": " The last element of the array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "push": {
      "location": {
        "start": {
          "line": 210,
          "column": 4,
          "index": 6303
        },
        "end": {
          "line": 240,
          "column": 5,
          "index": 7118
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds an element at the end of the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} Multiple elements. Every element will be added to\n   the end of the array. An change event will be fired.",
            "paramName": "varargs",
            "description": " Multiple elements. Every element will be added to\n   the end of the array. An change event will be fired.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The new length of the array.",
            "type": "Number",
            "description": " The new length of the array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reverse": {
      "location": {
        "start": {
          "line": 245,
          "column": 4,
          "index": 7212
        },
        "end": {
          "line": 276,
          "column": 5,
          "index": 7861
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reverses the order of the array. An change event will be fired.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "shift": {
      "location": {
        "start": {
          "line": 284,
          "column": 4,
          "index": 8038
        },
        "end": {
          "line": 320,
          "column": 5,
          "index": 8889
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes the first element of the array and returns it. An change event\n will be fired.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the former first element.",
            "type": "var",
            "description": " the former first element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slice": {
      "location": {
        "start": {
          "line": 332,
          "column": 4,
          "index": 9323
        },
        "end": {
          "line": 334,
          "column": 5,
          "index": 9408
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a new array based on the range specified by the parameters.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {Number} The start index.",
            "paramName": "from",
            "description": " The start index.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "to {Number?null} The zero-based end index. <code>slice</code> extracts\n   up to but not including <code>to</code>. If omitted, slice extracts to the\n   end of the array.",
            "paramName": "to",
            "description": " The zero-based end index. <code>slice</code> extracts\n   up to but not including <code>to</code>. If omitted, slice extracts to the\n   end of the array.",
            "optional": true,
            "defaultValue": "null",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array containing the given range of values.",
            "type": "qx.data.Array",
            "description": " A new array containing the given range of values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "splice": {
      "location": {
        "start": {
          "line": 349,
          "column": 4,
          "index": 10068
        },
        "end": {
          "line": 443,
          "column": 5,
          "index": 13012
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Method to remove and add new elements to the array. A change event\n will be fired for every removal or addition unless the array is\n identical before and after splicing.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startIndex {Integer} The index where the splice should start",
            "paramName": "startIndex",
            "description": " The index where the splice should start",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "amount {Integer} Defines number of elements which will be removed\n   at the given position.",
            "paramName": "amount",
            "description": " Defines number of elements which will be removed\n   at the given position.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {var} All following parameters will be added at the given\n   position to the array.",
            "paramName": "varargs",
            "description": " All following parameters will be added at the given\n   position to the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} An data array containing the removed elements.\n   Keep in to dispose this one, even if you don't use it!",
            "type": "qx.data.Array",
            "description": " An data array containing the removed elements.\n   Keep in to dispose this one, even if you don't use it!"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "replace": {
      "location": {
        "start": {
          "line": 452,
          "column": 4,
          "index": 13321
        },
        "end": {
          "line": 462,
          "column": 5,
          "index": 13589
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Efficiently replaces the array with the contents of src; this will suppress the\n change event if the array contents are the same, and will make sure that only\n one change event is fired</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "src {qx.data.Array|Array} the new value to set the array to",
            "paramName": "src",
            "description": " the new value to set the array to",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sort": {
      "location": {
        "start": {
          "line": 472,
          "column": 4,
          "index": 13931
        },
        "end": {
          "line": 508,
          "column": 5,
          "index": 14761
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sorts the array. If a function is given, this will be used to\n compare the items. <code>changeBubble</code> event will only be fired,\n if sorting result differs from original array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} A compare function comparing two parameters and\n   should return a number.",
            "paramName": "func",
            "description": " A compare function comparing two parameters and\n   should return a number.",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unshift": {
      "location": {
        "start": {
          "line": 517,
          "column": 4,
          "index": 15041
        },
        "end": {
          "line": 547,
          "column": 5,
          "index": 15828
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds the given items to the beginning of the array. For every element,\n a change event will be fired.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} As many elements as you want to add to the beginning.",
            "paramName": "varargs",
            "description": " As many elements as you want to add to the beginning.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The new length of the array",
            "type": "Integer",
            "description": " The new length of the array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toArray": {
      "location": {
        "start": {
          "line": 557,
          "column": 4,
          "index": 16158
        },
        "end": {
          "line": 559,
          "column": 5,
          "index": 16202
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the list data as native array. Beware of the fact that the\n internal representation will be returned and any manipulation of that\n can cause a misbehavior of the array. This method should only be used for\n debugging purposes.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The native array.",
            "type": "qx.data.Array",
            "description": " The native array."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "getItem": {
      "location": {
        "start": {
          "line": 569,
          "column": 4,
          "index": 16471
        },
        "end": {
          "line": 571,
          "column": 5,
          "index": 16527
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replacement function for the getting of the array value.\n array[0] should be array.getItem(0).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index requested of the array element.",
            "paramName": "index",
            "description": " The index requested of the array element.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The element at the given index.",
            "type": "var",
            "description": " The element at the given index."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "setItem": {
      "location": {
        "start": {
          "line": 582,
          "column": 4,
          "index": 16909
        },
        "end": {
          "line": 617,
          "column": 5,
          "index": 17790
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Replacement function for the setting of an array value.\n array[0] = \"a\" should be array.setItem(0, \"a\").\n A change event will be fired if the value changes. Setting the same\n value again will not lead to a change event.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index of the array element.",
            "paramName": "index",
            "description": " The index of the array element.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "item {var} The new item to set.",
            "paramName": "item",
            "description": " The new item to set.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "getLength": {
      "location": {
        "start": {
          "line": 625,
          "column": 4,
          "index": 17966
        },
        "end": {
          "line": 627,
          "column": 5,
          "index": 18011
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This method returns the current length stored under .length on each\n array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The current length of the array.",
            "type": "Number",
            "description": " The current length of the array."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "indexOf": {
      "location": {
        "start": {
          "line": 636,
          "column": 4,
          "index": 18279
        },
        "end": {
          "line": 638,
          "column": 5,
          "index": 18341
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the index of the item in the array. If the item is not in the\n array, -1 will be returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item of which the index should be returned.",
            "paramName": "item",
            "description": " The item of which the index should be returned.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The Index of the given item.",
            "type": "Number",
            "description": " The Index of the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "lastIndexOf": {
      "location": {
        "start": {
          "line": 647,
          "column": 4,
          "index": 18614
        },
        "end": {
          "line": 649,
          "column": 5,
          "index": 18684
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the last index of the item in the array. If the item is not in the\n array, -1 will be returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item of which the index should be returned.",
            "paramName": "item",
            "description": " The item of which the index should be returned.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The Index of the given item.",
            "type": "Number",
            "description": " The Index of the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 675,
          "column": 4,
          "index": 19437
        },
        "end": {
          "line": 677,
          "column": 5,
          "index": 19493
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if the given item is in the current array.</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use the include method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item which is possibly in the array.",
            "paramName": "item",
            "description": " The item which is possibly in the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the array contains the given item.",
            "type": "Boolean",
            "description": " true, if the array contains the given item."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "includes": {
      "location": {
        "start": {
          "line": 685,
          "column": 4,
          "index": 19714
        },
        "end": {
          "line": 687,
          "column": 5,
          "index": 19784
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check if the given item is in the current array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item which is possibly in the array.",
            "paramName": "item",
            "description": " The item which is possibly in the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the array contains the given item.",
            "type": "Boolean",
            "description": " true, if the array contains the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "copy": {
      "location": {
        "start": {
          "line": 694,
          "column": 4,
          "index": 19896
        },
        "end": {
          "line": 696,
          "column": 5,
          "index": 19938
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Return a copy of the given arr</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} copy of this",
            "type": "qx.data.Array",
            "description": " copy of this"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAt": {
      "location": {
        "start": {
          "line": 704,
          "column": 4,
          "index": 20127
        },
        "end": {
          "line": 706,
          "column": 5,
          "index": 20201
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element at a given position.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Position where to insert the item.",
            "paramName": "index",
            "description": " Position where to insert the item.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "item {var} The element to insert.",
            "paramName": "item",
            "description": " The element to insert.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertBefore": {
      "location": {
        "start": {
          "line": 714,
          "column": 4,
          "index": 20398
        },
        "end": {
          "line": 722,
          "column": 5,
          "index": 20593
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an item into the array before a given item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "before {var} Insert item before this object.",
            "paramName": "before",
            "description": " Insert item before this object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "item {var} The item to be inserted.",
            "paramName": "item",
            "description": " The item to be inserted.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAfter": {
      "location": {
        "start": {
          "line": 730,
          "column": 4,
          "index": 20788
        },
        "end": {
          "line": 738,
          "column": 5,
          "index": 21012
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Insert an element into the array after a given item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "after {var} Insert item after this object.",
            "paramName": "after",
            "description": " Insert item after this object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "item {var} Object to be inserted.",
            "paramName": "item",
            "description": " Object to be inserted.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAt": {
      "location": {
        "start": {
          "line": 746,
          "column": 4,
          "index": 21204
        },
        "end": {
          "line": 751,
          "column": 5,
          "index": 21363
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove an element from the array at the given index.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to be removed.",
            "paramName": "index",
            "description": " Index of the item to be removed.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed item.",
            "type": "var",
            "description": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAll": {
      "location": {
        "start": {
          "line": 758,
          "column": 4,
          "index": 21507
        },
        "end": {
          "line": 800,
          "column": 5,
          "index": 22445
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove all elements from the array.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} A native array containing the removed elements.",
            "type": "qx.data.Array",
            "description": " A native array containing the removed elements."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "append": {
      "location": {
        "start": {
          "line": 809,
          "column": 4,
          "index": 22670
        },
        "end": {
          "line": 855,
          "column": 5,
          "index": 23910
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Append the items of the given array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array|qx.data.IListData} The items of this array will\n be appended.",
            "paramName": "array",
            "description": " The items of this array will\n be appended.",
            "type": [
              "Array",
              "qx.data.IListData"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the argument is not an array.",
            "type": "Error",
            "description": " if the argument is not an array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 862,
          "column": 4,
          "index": 24085
        },
        "end": {
          "line": 867,
          "column": 5,
          "index": 24238
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all elements which are listed in the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array} the elements of this array will be excluded from this one",
            "paramName": "array",
            "description": " the elements of this array will be excluded from this one",
            "type": "qx.data.Array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 875,
          "column": 4,
          "index": 24397
        },
        "end": {
          "line": 882,
          "column": 5,
          "index": 24551
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove the given item.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} Item to be removed from the array.",
            "paramName": "item",
            "description": " Item to be removed from the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed item.",
            "type": "var",
            "description": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "equals": {
      "location": {
        "start": {
          "line": 891,
          "column": 4,
          "index": 24819
        },
        "end": {
          "line": 904,
          "column": 5,
          "index": 25115
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the given array has the same content as this.\n Checks only the equality of the arrays' content.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {qx.data.Array} The array to check.",
            "paramName": "array",
            "description": " The array to check.",
            "type": "qx.data.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the two arrays are equal.",
            "type": "Boolean",
            "description": " Whether the two arrays are equal."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sum": {
      "location": {
        "start": {
          "line": 912,
          "column": 4,
          "index": 25280
        },
        "end": {
          "line": 919,
          "column": 5,
          "index": 25426
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the sum of all values in the array. Supports\n numeric values only.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The sum of all values.",
            "type": "Number",
            "description": " The sum of all values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "max": {
      "location": {
        "start": {
          "line": 928,
          "column": 4,
          "index": 25646
        },
        "end": {
          "line": 938,
          "column": 5,
          "index": 25888
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the highest value in the given array.\n Supports numeric values only.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number|null} The highest of all values or undefined if the\n   array is empty.",
            "type": "Number|null",
            "description": " The highest of all values or undefined if the\n   array is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "min": {
      "location": {
        "start": {
          "line": 947,
          "column": 4,
          "index": 26100
        },
        "end": {
          "line": 957,
          "column": 5,
          "index": 26342
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the lowest value in the array. Supports\n numeric values only.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number|null} The lowest of all values or undefined\n   if the array is empty.",
            "type": "Number|null",
            "description": " The lowest of all values or undefined\n   if the array is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 967,
          "column": 4,
          "index": 26712
        },
        "end": {
          "line": 971,
          "column": 5,
          "index": 26855
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Invokes the given function for every item in the array.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The function which will be call for every\n   item in the array. It will be invoked with three parameters:\n   the item, the index and the array itself.",
            "paramName": "callback",
            "description": " The function which will be call for every\n   item in the array. It will be invoked with three parameters:\n   the item, the index and the array itself.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {var?} The context in which the callback will be invoked.",
            "paramName": "context",
            "description": " The context in which the callback will be invoked.",
            "optional": true,
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 991,
          "column": 4,
          "index": 27834
        },
        "end": {
          "line": 993,
          "column": 5,
          "index": 27933
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new array with all elements that pass the test implemented by\n the provided function. It returns a new data array instance so make sure\n to think about disposing it.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array instance containing only the items\n  which passed the test.",
            "type": "qx.data.Array",
            "description": " A new array instance containing only the items\n  which passed the test."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 1007,
          "column": 4,
          "index": 28692
        },
        "end": {
          "line": 1009,
          "column": 5,
          "index": 28785
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Creates a new array with the results of calling a provided function on every\n element in this array. It returns a new data array instance so make sure\n to think about disposing it.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The mapping function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The mapping function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array instance containing the new created items.",
            "type": "qx.data.Array",
            "description": " A new array instance containing the new created items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "find": {
      "location": {
        "start": {
          "line": 1022,
          "column": 4,
          "index": 29422
        },
        "end": {
          "line": 1024,
          "column": 5,
          "index": 29498
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Finds the first matching element in the array which passes the test implemented by the\n provided function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var|undefined} The found item.",
            "type": "var|undefined",
            "description": " The found item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 1037,
          "column": 4,
          "index": 30160
        },
        "end": {
          "line": 1039,
          "column": 5,
          "index": 30236
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether any element in the array passes the test implemented by the\n provided function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if any element passed the test function.",
            "type": "Boolean",
            "description": " <code>true</code>, if any element passed the test function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "every": {
      "location": {
        "start": {
          "line": 1052,
          "column": 4,
          "index": 30902
        },
        "end": {
          "line": 1054,
          "column": 5,
          "index": 30980
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Tests whether every element in the array passes the test implemented by the\n provided function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\n   item in the array. The function will have three arguments.\n   <li><code>item</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if every element passed the test function.",
            "type": "Boolean",
            "description": " <code>true</code>, if every element passed the test function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduce": {
      "location": {
        "start": {
          "line": 1069,
          "column": 4,
          "index": 31790
        },
        "end": {
          "line": 1071,
          "column": 5,
          "index": 31880
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply a function against an accumulator and each value of the array\n (from left-to-right) as to reduce it to a single value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The accumulator function, which will be\n   executed for every item in the array. The function will have four arguments.\n   <li><code>previousItem</code>: the previous item</li>\n   <li><code>currentItem</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The accumulator function, which will be\n   executed for every item in the array. The function will have four arguments.\n   <li><code>previousItem</code>: the previous item</li>\n   <li><code>currentItem</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initValue {var?undefined} Object to use as the first argument to the first\n   call of the callback.",
            "paramName": "initValue",
            "description": " Object to use as the first argument to the first\n   call of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The returned value of the last accumulator call.",
            "type": "var",
            "description": " The returned value of the last accumulator call."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduceRight": {
      "location": {
        "start": {
          "line": 1086,
          "column": 4,
          "index": 32690
        },
        "end": {
          "line": 1088,
          "column": 5,
          "index": 32790
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply a function against an accumulator and each value of the array\n (from right-to-left) as to reduce it to a single value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The accumulator function, which will be\n   executed for every item in the array. The function will have four arguments.\n   <li><code>previousItem</code>: the previous item</li>\n   <li><code>currentItem</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The accumulator function, which will be\n   executed for every item in the array. The function will have four arguments.\n   <li><code>previousItem</code>: the previous item</li>\n   <li><code>currentItem</code>: the current item in the array</li>\n   <li><code>index</code>: the index of the current item</li>\n   <li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initValue {var?undefined} Object to use as the first argument to the first\n   call of the callback.",
            "paramName": "initValue",
            "description": " Object to use as the first argument to the first\n   call of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The returned value of the last accumulator call.",
            "type": "var",
            "description": " The returned value of the last accumulator call."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__updateLength": {
      "location": {
        "start": {
          "line": 1100,
          "column": 4,
          "index": 33186
        },
        "end": {
          "line": 1104,
          "column": 5,
          "index": 33352
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal function which updates the length property of the array.\n Every time the length will be updated, a {@link #changeLength} data\n event will be fired.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateEventPropagation": {
      "location": {
        "start": {
          "line": 1111,
          "column": 4,
          "index": 33521
        },
        "end": {
          "line": 1115,
          "column": 5,
          "index": 33685
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper to update the event propagation for a range of items.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {Number} Start index.",
            "paramName": "from",
            "description": " Start index.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "to {Number} End index.",
            "paramName": "to",
            "description": " End index.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyEventPropagation": {
      "type": "function",
      "name": "_applyEventPropagation",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Apply function for every property created with the\n {@link qx.data.marshal.Json} marshaler. It fires and\n {@link #changeBubble} event on every change. It also adds the chaining\n listener if possible which is necessary for the bubbling of the events.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      }
    },
    "_registerEventChaining": {
      "type": "function",
      "name": "_registerEventChaining",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Registers for the given parameters the changeBubble listener, if\n possible. It also removes the old listener, if an old item with\n a changeBubble event is given.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      }
    },
    "__changePropertyListener": {
      "type": "function",
      "name": "__changePropertyListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Listener responsible for formating the name and firing the change event\n for the changed property.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the former properties.",
            "paramName": "name",
            "description": " The name of the former properties.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The date event fired by the property\n   change.",
            "paramName": "e",
            "description": " The date event fired by the property\n   change.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getAutoDisposeItems": {
      "type": "function",
      "name": "getAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoDisposeItems"
          }
        ]
      }
    },
    "isAutoDisposeItems": {
      "type": "function",
      "name": "isAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoDisposeItems"
          }
        ]
      }
    },
    "setAutoDisposeItems": {
      "type": "function",
      "name": "setAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for autoDisposeItems"
          }
        ]
      }
    },
    "resetAutoDisposeItems": {
      "type": "function",
      "name": "resetAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoDisposeItems</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1124,
        "column": 2,
        "index": 33884
      },
      "end": {
        "line": 1136,
        "column": 3,
        "index": 34225
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}