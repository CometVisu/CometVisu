{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "type",
    "BaseError",
    "construct",
    "comment",
    "failMessage",
    "call",
    "__trace",
    "dev",
    "StackTrace",
    "getStackTrace",
    "members",
    "core",
    "AssertionError"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/core/AssertionError.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Assertion errors are thrown if an assertion in {@link qx.core.Assert}\r\n * fails.\r\n */\r\nqx.Bootstrap.define(\"qx.core.AssertionError\", {\r\n  extend: qx.type.BaseError,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param comment {String} Comment passed to the assertion call\r\n   * @param failMessage {String} Fail message provided by the assertion\r\n   */\r\n  construct(comment, failMessage) {\r\n    qx.type.BaseError.call(this, comment, failMessage);\r\n    this.__trace = qx.dev.StackTrace.getStackTrace();\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __trace: null,\r\n\r\n    /**\r\n     * Stack trace of the error\r\n     *\r\n     * @return {String[]} The stack trace of the location the exception was thrown\r\n     */\r\n    getStackTrace() {\r\n      return this.__trace;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,wBAAwB,EAAE;IAC5CC,MAAM,EAAEL,EAAE,CAACM,IAAI,CAACC,SAAS;IAEzB;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,OAAO,EAAEC,WAAW,EAAE;MAC9BV,EAAE,CAACM,IAAI,CAACC,SAAS,CAACI,IAAI,CAAC,IAAI,EAAEF,OAAO,EAAEC,WAAW,CAAC;MAClD,IAAI,CAACE,SAAO,GAAGZ,EAAE,CAACa,GAAG,CAACC,UAAU,CAACC,aAAa,CAAC,CAAC;IAClD,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPJ,SAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;MACIG,aAAa,WAAAA,cAAA,EAAG;QACd,OAAO,IAAI,CAACH,SAAO;MACrB;IACF;EACF,CAAC,CAAC;EA1DFZ,EAAE,CAACiB,IAAI,CAACC,cAAc,CAACf,aAAa,GAAGA,aAAa;AAAC"
}