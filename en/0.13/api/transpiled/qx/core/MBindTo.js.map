{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "bindTo",
    "func",
    "varargs",
    "lang",
    "Function",
    "create",
    "self",
    "args",
    "arguments",
    "length",
    "Array",
    "fromArguments",
    "core",
    "MBindTo"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/core/MBindTo.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   Copyright:\r\n     2009-2010 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Mixin to add a bindTo method to a class, making it easy to bind a function\r\n * to an object instance for use in lieu of calls to static method\r\n * qx.lang.Function.bind().\r\n *\r\n * The easiest (but not necessarily most efficient) way to use this mixin is\r\n * to include it in qx.core.Object by adding this line some place in the\r\n * application code (typically in main()):\r\n *\r\n * <pre>\r\n *   qx.Class.include(qx.core.Object, qx.core.MBindTo);\r\n * </pre>\r\n *\r\n * If object footprint (memory use) is of significant concern, that may be a\r\n * bit excessive since every object which is a descendent of qx.core.Object\r\n * will have the methods defined in the mixin. Instead, if a certain class\r\n * will have many functions bound to it (of particular use for callback\r\n * functions), qx.Class.include() could be used to include this mixin in that\r\n * class instead of in qx.core.Object.\r\n *\r\n * Alternatively, that class may be subclassed, and the 'include' key of the\r\n * class configuration could be used to always include this mixin in the\r\n * subclass. e.g.\r\n *\r\n * <pre>\r\n *   qx.Class.define(\"custom.Table\",\r\n *   {\r\n *     extend  : qx.ui.table.Table,\r\n *     include : [ qx.core.MBindTo ]\r\n *   });\r\n * </pre>\r\n */\r\nqx.Mixin.define(\"qx.core.MBindTo\", {\r\n  members: {\r\n    /**\r\n     * Bind a function to this object\r\n     *\r\n     * @param func {Function}\r\n     *   The function to be bound\r\n     *\r\n     * @param varargs {var?}\r\n     *   Optional arguments to be passed to the function.\r\n     *\r\n     * @return {Function}\r\n     *   A wrapped version of the function that binds 'this' to the\r\n     *   user-provided function.\r\n     */\r\n    bindTo(func, varargs) {\r\n      return qx.lang.Function.create(func, {\r\n        self: this,\r\n        args:\r\n          arguments.length > 1\r\n            ? qx.lang.Array.fromArguments(arguments, 1)\r\n            : null\r\n      });\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,iBAAiB,EAAE;IACjCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,WAAAA,OAACC,IAAI,EAAEC,OAAO,EAAE;QACpB,OAAOT,EAAE,CAACU,IAAI,CAACC,QAAQ,CAACC,MAAM,CAACJ,IAAI,EAAE;UACnCK,IAAI,EAAE,IAAI;UACVC,IAAI,EACFC,SAAS,CAACC,MAAM,GAAG,CAAC,GAChBhB,EAAE,CAACU,IAAI,CAACO,KAAK,CAACC,aAAa,CAACH,SAAS,EAAE,CAAC,CAAC,GACzC;QACR,CAAC,CAAC;MACJ;IACF;EACF,CAAC,CAAC;EAvEFf,EAAE,CAACmB,IAAI,CAACC,OAAO,CAACjB,aAAa,GAAGA,aAAa;AAAC"
}