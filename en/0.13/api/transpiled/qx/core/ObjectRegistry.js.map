{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "inShutDown",
    "__registry",
    "__nextHash",
    "__postId",
    "__stackTraces",
    "register",
    "obj",
    "registry",
    "hash",
    "core",
    "ObjectRegistry",
    "toHashCode",
    "unregister",
    "$$hash",
    "clearHashCode",
    "createHashCode",
    "String",
    "$$discardedHashCode",
    "ex",
    "removeAttribute",
    "fromHashCode",
    "suppressWarnings",
    "log",
    "Logger",
    "warn",
    "hasHashCode",
    "shutdown",
    "hashes",
    "push",
    "sort",
    "a",
    "b",
    "parseInt",
    "i",
    "l",
    "length",
    "dispose",
    "error",
    "toString",
    "debug",
    "getRegistry",
    "getNextHash",
    "getPostId",
    "getStackTraces",
    "defer",
    "window",
    "top",
    "frames"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/core/ObjectRegistry.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Registration for all instances of qooxdoo classes. Mainly\n * used to manage them for the final shutdown sequence and to\n * use weak references when connecting widgets to DOM nodes etc.\n *\n * @ignore(qx.dev, qx.dev.Debug.*)\n */\nqx.Bootstrap.define(\"qx.core.ObjectRegistry\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /**\n     * @type {Boolean} Whether the application is in the shutdown phase\n     * @deprecated {6.0} shutdown is not a valid mechanism to terminate apps\n     * */\n    inShutDown: false,\n\n    /** @type {Map} Internal data structure to store objects */\n    __registry: {},\n\n    /** @type {Integer} Next new hash code. */\n    __nextHash: 0,\n\n    /** @type {String} Post id for hash code creation. */\n    __postId: \"\",\n\n    /** @type {Map} Object hashes to stack traces (for dispose profiling only) */\n    __stackTraces: {},\n\n    /**\n     * Registers an object into the database. This adds a hashcode\n     * to the object (if not already done before) and stores it under\n     * this hashcode. You can access this object later using the hashcode\n     * by calling {@link #fromHashCode}.\n     *\n     * All registered objects are automatically disposed on application\n     * shutdown. Each registered object must at least have a method\n     * called <code>dispose</code>.\n     *\n     * @param obj {Object} Any object with a dispose() method\n     */\n    register(obj) {\n      var registry = this.__registry;\n      if (!registry) {\n        return;\n      }\n\n      var hash = qx.core.ObjectRegistry.toHashCode(obj);\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (!obj.dispose) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      registry[hash] = obj;\n    },\n\n    /**\n     * Removes the given object from the database.\n     *\n     * @param obj {Object} Any previously registered object\n     */\n    unregister(obj) {\n      var hash = obj.$$hash;\n      if (hash == null) {\n        return;\n      }\n\n      var registry = this.__registry;\n      if (registry && registry[hash]) {\n        delete registry[hash];\n      }\n\n      this.clearHashCode(obj);\n    },\n\n    /**\n     * Returns an unique identifier for the given object. If such an identifier\n     * does not yet exist, create it.\n     *\n     * @param obj {Object} the object to get the hashcode for\n     * @return {String} unique identifier for the given object\n     */\n    toHashCode(obj) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (obj == null) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      var hash = obj.$$hash;\n      if (hash != null) {\n        return hash;\n      }\n\n      // Create new hash code\n      hash = this.createHashCode();\n\n      // Store\n      obj.$$hash = hash;\n\n      if (qx.core.Environment.get(\"qx.debug.dispose\")) {\n        if (qx.dev && qx.dev.Debug && qx.dev.Debug.disposeProfilingActive) {\n          this.__stackTraces[hash] = qx.dev.StackTrace.getStackTrace();\n        }\n      }\n\n      return obj.$$hash;\n    },\n\n    /**\n     * Creates a hash code\n     *\n     * @return {String}\n     */\n    createHashCode() {\n      var hash = String(this.__nextHash++ + this.__postId);\n      return hash;\n    },\n\n    /**\n     * Clears the unique identifier on the given object.\n     *\n     * @param obj {Object} the object to clear the hashcode for\n     */\n    clearHashCode(obj) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (obj == null) {\n          throw new Error(\"Invalid object: \" + obj);\n        }\n      }\n\n      var hash = obj.$$hash;\n      if (hash != null) {\n        // Delete the hash code\n        try {\n          obj.$$discardedHashCode = hash;\n          delete obj.$$hash;\n        } catch (ex) {\n          // IE has trouble directly removing the hash\n          // but it's ok with using removeAttribute\n          if (obj.removeAttribute) {\n            obj.removeAttribute(\"$$hash\");\n          }\n        }\n      }\n    },\n\n    /**\n     * Get an object instance by its hash code as returned by {@link #toHashCode}.\n     * If the object is already disposed or the hashCode is invalid,\n     * <code>null</code> is returned.\n     *\n     * @param hash {String} The object's hash code.\n     * @param suppressWarnings {Boolean?} if true warnings are suppressed; default is false\n     * @return {qx.core.Object} The corresponding object or <code>null</code>.\n     */\n    fromHashCode(hash, suppressWarnings) {\n      var obj = this.__registry[hash] || null;\n      if (!obj && !suppressWarnings) {\n        qx.log.Logger.warn(\n          this,\n          \"Object with hash code \" +\n            hash +\n            \" does not exist (since Qooxdoo 6.0 fromHashCode requires that you explicitly register objects with qx.core.ObjectRegistry.register)\"\n        );\n      }\n      return obj;\n    },\n\n    /**\n     * Detects whether an object instance is indexed by its hash code as returned by {@link #toHashCode}.\n     * Unlike {@link #fromHashCode} this does not output warnings if the object does not exist\n     *\n     * @param hash {String} The object's hash code.\n     * @return {qx.core.Object} The corresponding object or <code>null</code>.\n     */\n    hasHashCode(hash) {\n      return !!this.__registry[hash];\n    },\n\n    /**\n     * Disposing all registered object and cleaning up registry. This is\n     * automatically executed at application shutdown.\n     *\n     * @deprecated {6.0} shutdown is not a valid means to clean up because destruction order\n     * is not defined and dispose()/destructors are deprecated in favour of automatic\n     * garbage collection\n     */\n    shutdown() {\n      this.inShutDown = true;\n\n      var registry = this.__registry;\n      var hashes = [];\n\n      for (var hash in registry) {\n        hashes.push(hash);\n      }\n\n      // sort the objects! Remove the objecs created at startup\n      // as late as possible\n      hashes.sort(function (a, b) {\n        return parseInt(b, 10) - parseInt(a, 10);\n      });\n\n      var obj,\n        i = 0,\n        l = hashes.length;\n      while (true) {\n        try {\n          for (; i < l; i++) {\n            hash = hashes[i];\n            obj = registry[hash];\n\n            if (obj && obj.dispose) {\n              obj.dispose();\n            }\n          }\n        } catch (ex) {\n          qx.Bootstrap.error(\n            this,\n            \"Could not dispose object \" + obj.toString() + \": \" + ex,\n            ex\n          );\n\n          if (i !== l) {\n            i++;\n            continue;\n          }\n        }\n\n        break;\n      }\n\n      qx.Bootstrap.debug(this, \"Disposed \" + l + \" objects\");\n\n      delete this.__registry;\n    },\n\n    /**\n     * Returns the object registry.\n     *\n     * @return {Object} The registry\n     */\n    getRegistry() {\n      return this.__registry;\n    },\n\n    /**\n     * Returns the next hash code that will be used.\n     *\n     * @return {Integer} The next hash code\n     * @internal\n     */\n    getNextHash() {\n      return this.__nextHash;\n    },\n\n    /**\n     * Returns the postfix that identifies the current iframe\n     *\n     * @return {Integer} The next hash code\n     * @internal\n     */\n    getPostId() {\n      return this.__postId;\n    },\n\n    /**\n     * Returns the map of stack traces recorded when objects are registered\n     * (for dispose profiling)\n     * @return {Map} Map: object hash codes to stack traces\n     * @internal\n     */\n    getStackTraces() {\n      return this.__stackTraces;\n    }\n  },\n\n  defer(statics) {\n    if (window && window.top) {\n      var frames = window.top.frames;\n      for (var i = 0; i < frames.length; i++) {\n        if (frames[i] === window) {\n          statics.__postId = \"-\" + (i + 1);\n          return;\n        }\n      }\n    }\n    statics.__postId = \"-0\";\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,wBAApB,EAA8C;IAC5C;AACF;AACA;AACA;AACA;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;MACIC,UAAU,EAAE,KALL;;MAOP;MACAC,SAAU,EAAE,EARL;;MAUP;MACAC,SAAU,EAAE,CAXL;;MAaP;MACAC,SAAQ,EAAE,EAdH;;MAgBP;MACAC,SAAa,EAAE,EAjBR;;MAmBP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QA/BO,oBA+BEC,GA/BF,EA+BO;QACZ,IAAIC,QAAQ,GAAG,KAAKN,SAApB;;QACA,IAAI,CAACM,QAAL,EAAe;UACb;QACD;;QAED,IAAIC,IAAI,GAAGd,EAAE,CAACe,IAAH,CAAQC,cAAR,CAAuBC,UAAvB,CAAkCL,GAAlC,CAAX;QAQAC,QAAQ,CAACC,IAAD,CAAR,GAAiBF,GAAjB;MACD,CA9CM;;MAgDP;AACJ;AACA;AACA;AACA;MACIM,UArDO,sBAqDIN,GArDJ,EAqDS;QACd,IAAIE,IAAI,GAAGF,GAAG,CAACO,MAAf;;QACA,IAAIL,IAAI,IAAI,IAAZ,EAAkB;UAChB;QACD;;QAED,IAAID,QAAQ,GAAG,KAAKN,SAApB;;QACA,IAAIM,QAAQ,IAAIA,QAAQ,CAACC,IAAD,CAAxB,EAAgC;UAC9B,OAAOD,QAAQ,CAACC,IAAD,CAAf;QACD;;QAED,KAAKM,aAAL,CAAmBR,GAAnB;MACD,CAjEM;;MAmEP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIK,UA1EO,sBA0EIL,GA1EJ,EA0ES;QAOd,IAAIE,IAAI,GAAGF,GAAG,CAACO,MAAf;;QACA,IAAIL,IAAI,IAAI,IAAZ,EAAkB;UAChB,OAAOA,IAAP;QACD,CAVa,CAYd;;;QACAA,IAAI,GAAG,KAAKO,cAAL,EAAP,CAbc,CAed;;QACAT,GAAG,CAACO,MAAJ,GAAaL,IAAb;QAQA,OAAOF,GAAG,CAACO,MAAX;MACD,CAnGM;;MAqGP;AACJ;AACA;AACA;AACA;MACIE,cA1GO,4BA0GU;QACf,IAAIP,IAAI,GAAGQ,MAAM,CAAC,KAAKd,SAAL,KAAoB,KAAKC,SAA1B,CAAjB;QACA,OAAOK,IAAP;MACD,CA7GM;;MA+GP;AACJ;AACA;AACA;AACA;MACIM,aApHO,yBAoHOR,GApHP,EAoHY;QAOjB,IAAIE,IAAI,GAAGF,GAAG,CAACO,MAAf;;QACA,IAAIL,IAAI,IAAI,IAAZ,EAAkB;UAChB;UACA,IAAI;YACFF,GAAG,CAACW,mBAAJ,GAA0BT,IAA1B;YACA,OAAOF,GAAG,CAACO,MAAX;UACD,CAHD,CAGE,OAAOK,EAAP,EAAW;YACX;YACA;YACA,IAAIZ,GAAG,CAACa,eAAR,EAAyB;cACvBb,GAAG,CAACa,eAAJ,CAAoB,QAApB;YACD;UACF;QACF;MACF,CAzIM;;MA2IP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,YApJO,wBAoJMZ,IApJN,EAoJYa,gBApJZ,EAoJ8B;QACnC,IAAIf,GAAG,GAAG,KAAKL,SAAL,CAAgBO,IAAhB,KAAyB,IAAnC;;QACA,IAAI,CAACF,GAAD,IAAQ,CAACe,gBAAb,EAA+B;UAC7B3B,EAAE,CAAC4B,GAAH,CAAOC,MAAP,CAAcC,IAAd,CACE,IADF,EAEE,2BACEhB,IADF,GAEE,qIAJJ;QAMD;;QACD,OAAOF,GAAP;MACD,CA/JM;;MAiKP;AACJ;AACA;AACA;AACA;AACA;AACA;MACImB,WAxKO,uBAwKKjB,IAxKL,EAwKW;QAChB,OAAO,CAAC,CAAC,KAAKP,SAAL,CAAgBO,IAAhB,CAAT;MACD,CA1KM;;MA4KP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIkB,QApLO,sBAoLI;QACT,KAAK1B,UAAL,GAAkB,IAAlB;QAEA,IAAIO,QAAQ,GAAG,KAAKN,SAApB;QACA,IAAI0B,MAAM,GAAG,EAAb;;QAEA,KAAK,IAAInB,IAAT,IAAiBD,QAAjB,EAA2B;UACzBoB,MAAM,CAACC,IAAP,CAAYpB,IAAZ;QACD,CARQ,CAUT;QACA;;;QACAmB,MAAM,CAACE,IAAP,CAAY,UAAUC,CAAV,EAAaC,CAAb,EAAgB;UAC1B,OAAOC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAR,GAAkBC,QAAQ,CAACF,CAAD,EAAI,EAAJ,CAAjC;QACD,CAFD;QAIA,IAAIxB,GAAJ;QAAA,IACE2B,CAAC,GAAG,CADN;QAAA,IAEEC,CAAC,GAAGP,MAAM,CAACQ,MAFb;;QAGA,OAAO,IAAP,EAAa;UACX,IAAI;YACF,OAAOF,CAAC,GAAGC,CAAX,EAAcD,CAAC,EAAf,EAAmB;cACjBzB,IAAI,GAAGmB,MAAM,CAACM,CAAD,CAAb;cACA3B,GAAG,GAAGC,QAAQ,CAACC,IAAD,CAAd;;cAEA,IAAIF,GAAG,IAAIA,GAAG,CAAC8B,OAAf,EAAwB;gBACtB9B,GAAG,CAAC8B,OAAJ;cACD;YACF;UACF,CATD,CASE,OAAOlB,EAAP,EAAW;YACXxB,EAAE,CAACC,SAAH,CAAa0C,KAAb,CACE,IADF,EAEE,8BAA8B/B,GAAG,CAACgC,QAAJ,EAA9B,GAA+C,IAA/C,GAAsDpB,EAFxD,EAGEA,EAHF;;YAMA,IAAIe,CAAC,KAAKC,CAAV,EAAa;cACXD,CAAC;cACD;YACD;UACF;;UAED;QACD;;QAEDvC,EAAE,CAACC,SAAH,CAAa4C,KAAb,CAAmB,IAAnB,EAAyB,cAAcL,CAAd,GAAkB,UAA3C;QAEA,OAAO,KAAKjC,SAAZ;MACD,CApOM;;MAsOP;AACJ;AACA;AACA;AACA;MACIuC,WA3OO,yBA2OO;QACZ,OAAO,KAAKvC,SAAZ;MACD,CA7OM;;MA+OP;AACJ;AACA;AACA;AACA;AACA;MACIwC,WArPO,yBAqPO;QACZ,OAAO,KAAKvC,SAAZ;MACD,CAvPM;;MAyPP;AACJ;AACA;AACA;AACA;AACA;MACIwC,SA/PO,uBA+PK;QACV,OAAO,KAAKvC,SAAZ;MACD,CAjQM;;MAmQP;AACJ;AACA;AACA;AACA;AACA;MACIwC,cAzQO,4BAyQU;QACf,OAAO,KAAKvC,SAAZ;MACD;IA3QM,CAPmC;IAqR5CwC,KArR4C,iBAqRtC7C,OArRsC,EAqR7B;MACb,IAAI8C,MAAM,IAAIA,MAAM,CAACC,GAArB,EAA0B;QACxB,IAAIC,MAAM,GAAGF,MAAM,CAACC,GAAP,CAAWC,MAAxB;;QACA,KAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,MAAM,CAACZ,MAA3B,EAAmCF,CAAC,EAApC,EAAwC;UACtC,IAAIc,MAAM,CAACd,CAAD,CAAN,KAAcY,MAAlB,EAA0B;YACxB9C,OAAO,CAACI,SAAR,GAAmB,OAAO8B,CAAC,GAAG,CAAX,CAAnB;YACA;UACD;QACF;MACF;;MACDlC,OAAO,CAACI,SAAR,GAAmB,IAAnB;IACD;EAhS2C,CAA9C;EAzBAT,EAAE,CAACe,IAAH,CAAQC,cAAR,CAAuBb,aAAvB,GAAuCA,aAAvC"
}