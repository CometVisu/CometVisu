{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "ELEMENT",
    "ATTRIBUTE",
    "TEXT",
    "CDATA_SECTION",
    "ENTITY_REFERENCE",
    "ENTITY",
    "PROCESSING_INSTRUCTION",
    "COMMENT",
    "DOCUMENT",
    "DOCUMENT_TYPE",
    "DOCUMENT_FRAGMENT",
    "NOTATION",
    "getDocument",
    "node",
    "nodeType",
    "ownerDocument",
    "document",
    "getWindow",
    "defaultView",
    "parentWindow",
    "getDocumentElement",
    "documentElement",
    "getBodyElement",
    "body",
    "isNode",
    "isElement",
    "isDocument",
    "isDocumentFragment",
    "isText",
    "isWindow",
    "obj",
    "history",
    "location",
    "isNodeName",
    "nodeName",
    "toLowerCase",
    "dom",
    "Node",
    "getName",
    "getText",
    "i",
    "a",
    "nodes",
    "childNodes",
    "length",
    "join",
    "nodeValue",
    "isBlockNode",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dom/Node.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Basic node creation and type detection\n */\nqx.Bootstrap.define(\"qx.dom.Node\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n      NODE TYPES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} Node type:\n     *\n     * * ELEMENT\n     * * ATTRIBUTE\n     * * TEXT\n     * * CDATA_SECTION\n     * * ENTITY_REFERENCE\n     * * ENTITY\n     * * PROCESSING_INSTRUCTION\n     * * COMMENT\n     * * DOCUMENT\n     * * DOCUMENT_TYPE\n     * * DOCUMENT_FRAGMENT\n     * * NOTATION\n     */\n    ELEMENT: 1,\n    ATTRIBUTE: 2,\n    TEXT: 3,\n    CDATA_SECTION: 4,\n    ENTITY_REFERENCE: 5,\n    ENTITY: 6,\n    PROCESSING_INSTRUCTION: 7,\n    COMMENT: 8,\n    DOCUMENT: 9,\n    DOCUMENT_TYPE: 10,\n    DOCUMENT_FRAGMENT: 11,\n    NOTATION: 12,\n\n    /*\n    ---------------------------------------------------------------------------\n      DOCUMENT ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the owner document of the given node\n     *\n     * @param node {Node|Document|Window} the node which should be tested\n     * @return {Document|null} The document of the given DOM node\n     */\n    getDocument(node) {\n      return node.nodeType === this.DOCUMENT\n        ? node // is document already\n        : node.ownerDocument || // is DOM node\n            node.document; // is window\n    },\n\n    /**\n     * Returns the DOM2 <code>defaultView</code> (window).\n     *\n     * @param node {Node|Document|Window} node to inspect\n     * @return {Window} the <code>defaultView</code> of the given node\n     */\n    getWindow(node) {\n      // is a window already\n      if (node.nodeType == null) {\n        return node;\n      }\n\n      // jump to document\n      if (node.nodeType !== this.DOCUMENT) {\n        node = node.ownerDocument;\n      }\n\n      // jump to window\n      return node.defaultView || node.parentWindow;\n    },\n\n    /**\n     * Returns the document element. (Logical root node)\n     *\n     * This is a convenience attribute that allows direct access to the child\n     * node that is the root element of the document. For HTML documents,\n     * this is the element with the tagName \"HTML\".\n     *\n     * @param node {Node|Document|Window} node to inspect\n     * @return {Element} document element of the given node\n     */\n    getDocumentElement(node) {\n      return this.getDocument(node).documentElement;\n    },\n\n    /**\n     * Returns the body element. (Visual root node)\n     *\n     * This normally only makes sense for HTML documents. It returns\n     * the content area of the HTML document.\n     *\n     * @param node {Node|Document|Window} node to inspect\n     * @return {Element} document body of the given node\n     */\n    getBodyElement(node) {\n      return this.getDocument(node).body;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      TYPE TESTS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether the given object is a DOM node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true if the node is a DOM node\n     */\n    isNode(node) {\n      return !!(node && node.nodeType != null);\n    },\n\n    /**\n     * Whether the given object is a DOM element node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true if the node is a DOM element\n     */\n    isElement(node) {\n      return !!(node && node.nodeType === this.ELEMENT);\n    },\n\n    /**\n     * Whether the given object is a DOM document node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true when the node is a DOM document\n     */\n    isDocument(node) {\n      return !!(node && node.nodeType === this.DOCUMENT);\n    },\n\n    /**\n     * Whether the given object is a DOM document fragment node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true when the node is a DOM document fragment\n     */\n    isDocumentFragment(node) {\n      return !!(node && node.nodeType === this.DOCUMENT_FRAGMENT);\n    },\n\n    /**\n     * Whether the given object is a DOM text node\n     *\n     * @param node {Node} the node which should be tested\n     * @return {Boolean} true if the node is a DOM text node\n     */\n    isText(node) {\n      return !!(node && node.nodeType === this.TEXT);\n    },\n\n    /**\n     * Check whether the given object is a browser window object.\n     *\n     * @param obj {Object} the object which should be tested\n     * @return {Boolean} true if the object is a window object\n     */\n    isWindow(obj) {\n      return !!(obj && obj.history && obj.location && obj.document);\n    },\n\n    /**\n     * Whether the node has the given node name\n     *\n     * @param node {Node} the node\n     * @param nodeName {String} the node name to check for\n     * @return {Boolean} Whether the node has the given node name\n     */\n    isNodeName(node, nodeName) {\n      if (!nodeName || !node || !node.nodeName) {\n        return false;\n      }\n\n      return nodeName.toLowerCase() == qx.dom.Node.getName(node);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      UTILITIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get the node name as lower case string\n     *\n     * @param node {Node} the node\n     * @return {String} the node name\n     */\n    getName(node) {\n      if (!node || !node.nodeName) {\n        return null;\n      }\n\n      return node.nodeName.toLowerCase();\n    },\n\n    /**\n     * Returns the text content of an node where the node may be of node type\n     * NODE_ELEMENT, NODE_ATTRIBUTE, NODE_TEXT or NODE_CDATA\n     *\n     * @param node {Node} the node from where the search should start.\n     *     If the node has subnodes the text contents are recursively retreived and joined.\n     * @return {String} the joined text content of the given node or null if not appropriate.\n     * @signature function(node)\n     */\n    getText(node) {\n      if (!node || !node.nodeType) {\n        return null;\n      }\n\n      switch (node.nodeType) {\n        case 1: // NODE_ELEMENT\n          var i,\n            a = [],\n            nodes = node.childNodes,\n            length = nodes.length;\n          for (i = 0; i < length; i++) {\n            a[i] = this.getText(nodes[i]);\n          }\n\n          return a.join(\"\");\n\n        case 2: // NODE_ATTRIBUTE\n        case 3: // NODE_TEXT\n        case 4: // CDATA\n          return node.nodeValue;\n      }\n\n      return null;\n    },\n\n    /**\n     * Checks if the given node is a block node\n     *\n     * @param node {Node} Node\n     * @return {Boolean} whether it is a block node\n     */\n    isBlockNode(node) {\n      if (!qx.dom.Node.isElement(node)) {\n        return false;\n      }\n\n      node = qx.dom.Node.getName(node);\n\n      return /^(body|form|textarea|fieldset|ul|ol|dl|dt|dd|li|div|hr|p|h[1-6]|quote|pre|table|thead|tbody|tfoot|tr|td|th|iframe|address|blockquote)$/.test(\n        node\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}