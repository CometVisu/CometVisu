{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "ELEMENT",
    "ATTRIBUTE",
    "TEXT",
    "CDATA_SECTION",
    "ENTITY_REFERENCE",
    "ENTITY",
    "PROCESSING_INSTRUCTION",
    "COMMENT",
    "DOCUMENT",
    "DOCUMENT_TYPE",
    "DOCUMENT_FRAGMENT",
    "NOTATION",
    "getDocument",
    "node",
    "nodeType",
    "ownerDocument",
    "document",
    "getWindow",
    "defaultView",
    "parentWindow",
    "getDocumentElement",
    "documentElement",
    "getBodyElement",
    "body",
    "isNode",
    "isElement",
    "isDocument",
    "isDocumentFragment",
    "isText",
    "isWindow",
    "obj",
    "history",
    "location",
    "isNodeName",
    "nodeName",
    "toLowerCase",
    "dom",
    "Node",
    "getName",
    "getText",
    "i",
    "a",
    "nodes",
    "childNodes",
    "length",
    "join",
    "nodeValue",
    "isBlockNode",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/dom/Node.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Basic node creation and type detection\r\n */\r\nqx.Bootstrap.define(\"qx.dom.Node\", {\r\n  /*\r\n  *****************************************************************************\r\n     STATICS\r\n  *****************************************************************************\r\n  */\r\n\r\n  statics: {\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      NODE TYPES\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * @type {Map} Node type:\r\n     *\r\n     * * ELEMENT\r\n     * * ATTRIBUTE\r\n     * * TEXT\r\n     * * CDATA_SECTION\r\n     * * ENTITY_REFERENCE\r\n     * * ENTITY\r\n     * * PROCESSING_INSTRUCTION\r\n     * * COMMENT\r\n     * * DOCUMENT\r\n     * * DOCUMENT_TYPE\r\n     * * DOCUMENT_FRAGMENT\r\n     * * NOTATION\r\n     */\r\n    ELEMENT: 1,\r\n    ATTRIBUTE: 2,\r\n    TEXT: 3,\r\n    CDATA_SECTION: 4,\r\n    ENTITY_REFERENCE: 5,\r\n    ENTITY: 6,\r\n    PROCESSING_INSTRUCTION: 7,\r\n    COMMENT: 8,\r\n    DOCUMENT: 9,\r\n    DOCUMENT_TYPE: 10,\r\n    DOCUMENT_FRAGMENT: 11,\r\n    NOTATION: 12,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      DOCUMENT ACCESS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Returns the owner document of the given node\r\n     *\r\n     * @param node {Node|Document|Window} the node which should be tested\r\n     * @return {Document|null} The document of the given DOM node\r\n     */\r\n    getDocument(node) {\r\n      return node.nodeType === this.DOCUMENT\r\n        ? node // is document already\r\n        : node.ownerDocument || // is DOM node\r\n            node.document; // is window\r\n    },\r\n\r\n    /**\r\n     * Returns the DOM2 <code>defaultView</code> (window).\r\n     *\r\n     * @param node {Node|Document|Window} node to inspect\r\n     * @return {Window} the <code>defaultView</code> of the given node\r\n     */\r\n    getWindow(node) {\r\n      // is a window already\r\n      if (node.nodeType == null) {\r\n        return node;\r\n      }\r\n\r\n      // jump to document\r\n      if (node.nodeType !== this.DOCUMENT) {\r\n        node = node.ownerDocument;\r\n      }\r\n\r\n      // jump to window\r\n      return node.defaultView || node.parentWindow;\r\n    },\r\n\r\n    /**\r\n     * Returns the document element. (Logical root node)\r\n     *\r\n     * This is a convenience attribute that allows direct access to the child\r\n     * node that is the root element of the document. For HTML documents,\r\n     * this is the element with the tagName \"HTML\".\r\n     *\r\n     * @param node {Node|Document|Window} node to inspect\r\n     * @return {Element} document element of the given node\r\n     */\r\n    getDocumentElement(node) {\r\n      return this.getDocument(node).documentElement;\r\n    },\r\n\r\n    /**\r\n     * Returns the body element. (Visual root node)\r\n     *\r\n     * This normally only makes sense for HTML documents. It returns\r\n     * the content area of the HTML document.\r\n     *\r\n     * @param node {Node|Document|Window} node to inspect\r\n     * @return {Element} document body of the given node\r\n     */\r\n    getBodyElement(node) {\r\n      return this.getDocument(node).body;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      TYPE TESTS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Whether the given object is a DOM node\r\n     *\r\n     * @param node {Node} the node which should be tested\r\n     * @return {Boolean} true if the node is a DOM node\r\n     */\r\n    isNode(node) {\r\n      return !!(node && node.nodeType != null);\r\n    },\r\n\r\n    /**\r\n     * Whether the given object is a DOM element node\r\n     *\r\n     * @param node {Node} the node which should be tested\r\n     * @return {Boolean} true if the node is a DOM element\r\n     */\r\n    isElement(node) {\r\n      return !!(node && node.nodeType === this.ELEMENT);\r\n    },\r\n\r\n    /**\r\n     * Whether the given object is a DOM document node\r\n     *\r\n     * @param node {Node} the node which should be tested\r\n     * @return {Boolean} true when the node is a DOM document\r\n     */\r\n    isDocument(node) {\r\n      return !!(node && node.nodeType === this.DOCUMENT);\r\n    },\r\n\r\n    /**\r\n     * Whether the given object is a DOM document fragment node\r\n     *\r\n     * @param node {Node} the node which should be tested\r\n     * @return {Boolean} true when the node is a DOM document fragment\r\n     */\r\n    isDocumentFragment(node) {\r\n      return !!(node && node.nodeType === this.DOCUMENT_FRAGMENT);\r\n    },\r\n\r\n    /**\r\n     * Whether the given object is a DOM text node\r\n     *\r\n     * @param node {Node} the node which should be tested\r\n     * @return {Boolean} true if the node is a DOM text node\r\n     */\r\n    isText(node) {\r\n      return !!(node && node.nodeType === this.TEXT);\r\n    },\r\n\r\n    /**\r\n     * Check whether the given object is a browser window object.\r\n     *\r\n     * @param obj {Object} the object which should be tested\r\n     * @return {Boolean} true if the object is a window object\r\n     */\r\n    isWindow(obj) {\r\n      return !!(obj && obj.history && obj.location && obj.document);\r\n    },\r\n\r\n    /**\r\n     * Whether the node has the given node name\r\n     *\r\n     * @param node {Node} the node\r\n     * @param nodeName {String} the node name to check for\r\n     * @return {Boolean} Whether the node has the given node name\r\n     */\r\n    isNodeName(node, nodeName) {\r\n      if (!nodeName || !node || !node.nodeName) {\r\n        return false;\r\n      }\r\n\r\n      return nodeName.toLowerCase() == qx.dom.Node.getName(node);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      UTILITIES\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Get the node name as lower case string\r\n     *\r\n     * @param node {Node} the node\r\n     * @return {String} the node name\r\n     */\r\n    getName(node) {\r\n      if (!node || !node.nodeName) {\r\n        return null;\r\n      }\r\n\r\n      return node.nodeName.toLowerCase();\r\n    },\r\n\r\n    /**\r\n     * Returns the text content of an node where the node may be of node type\r\n     * NODE_ELEMENT, NODE_ATTRIBUTE, NODE_TEXT or NODE_CDATA\r\n     *\r\n     * @param node {Node} the node from where the search should start.\r\n     *     If the node has subnodes the text contents are recursively retreived and joined.\r\n     * @return {String} the joined text content of the given node or null if not appropriate.\r\n     * @signature function(node)\r\n     */\r\n    getText(node) {\r\n      if (!node || !node.nodeType) {\r\n        return null;\r\n      }\r\n\r\n      switch (node.nodeType) {\r\n        case 1: // NODE_ELEMENT\r\n          var i,\r\n            a = [],\r\n            nodes = node.childNodes,\r\n            length = nodes.length;\r\n          for (i = 0; i < length; i++) {\r\n            a[i] = this.getText(nodes[i]);\r\n          }\r\n\r\n          return a.join(\"\");\r\n\r\n        case 2: // NODE_ATTRIBUTE\r\n        case 3: // NODE_TEXT\r\n        case 4: // CDATA\r\n          return node.nodeValue;\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given node is a block node\r\n     *\r\n     * @param node {Node} Node\r\n     * @return {Boolean} whether it is a block node\r\n     */\r\n    isBlockNode(node) {\r\n      if (!qx.dom.Node.isElement(node)) {\r\n        return false;\r\n      }\r\n\r\n      node = qx.dom.Node.getName(node);\r\n\r\n      return /^(body|form|textarea|fieldset|ul|ol|dl|dt|dd|li|div|hr|p|h[1-6]|quote|pre|table|thead|tbody|tfoot|tr|td|th|iframe|address|blockquote)$/.test(\r\n        node\r\n      );\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}