{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "Object",
    "construct",
    "txt",
    "__txt",
    "length",
    "members",
    "$$isString",
    "toString",
    "charAt",
    "valueOf",
    "charCodeAt",
    "concat",
    "indexOf",
    "lastIndexOf",
    "match",
    "replace",
    "search",
    "slice",
    "split",
    "substr",
    "substring",
    "toLowerCase",
    "toUpperCase",
    "toHashCode",
    "core",
    "ObjectRegistry",
    "toLocaleLowerCase",
    "toLocaleUpperCase",
    "base",
    "args",
    "varags",
    "prototype",
    "apply",
    "arguments",
    "defer",
    "statics",
    "mappedFunctions",
    "i",
    "l",
    "String",
    "type",
    "BaseString"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/type/BaseString.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Jonathan Wei√ü (jonathan_rass)\r\n\r\n   ======================================================================\r\n\r\n     This class uses documentation of the native String methods from the MDC\r\n     documentation of Mozilla.\r\n\r\n     License:\r\n       CC Attribution-Sharealike License:\r\n       http://creativecommons.org/licenses/by-sa/2.5/\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This class emulates the built-in JavaScript String class. It can be used as\r\n * base class for classes, which need to derive from String.\r\n *\r\n * Instances of this class can be used in any place a JavaScript string can.\r\n */\r\nqx.Class.define(\"qx.type.BaseString\", {\r\n  extend: Object,\r\n\r\n  /**\r\n   * @param txt {String?\"\"} Initialize with this string\r\n   */\r\n  construct(txt) {\r\n    var txt = txt || \"\";\r\n\r\n    // no base call needed\r\n\r\n    this.__txt = txt;\r\n    this.length = txt.length;\r\n  },\r\n\r\n  members: {\r\n    $$isString: true,\r\n    length: 0,\r\n    __txt: null,\r\n\r\n    /**\r\n     * Returns a string representing the specified object.\r\n     *\r\n     * The valueOf method of String returns the primitive value of a String\r\n     * object as a string data type.\r\n     * This method is usually called internally by JavaScript and not\r\n     * explicitly in code.\r\n     *\r\n     * @return {String} A new string containing the string value.\r\n     */\r\n    toString() {\r\n      return this.__txt;\r\n    },\r\n\r\n    /**\r\n     *  Returns the specified character from a string.\r\n     *\r\n     * Characters in a string are indexed from left to right. The index of the\r\n     * first character is 0, and the index of the last character in a string\r\n     * called stringName is stringName.length - 1. If the index you supply is\r\n     * out of range, JavaScript returns an empty string.\r\n     *\r\n     * @signature function(index)\r\n     * @param index {Integer} An integer between 0 and 1 less than the length\r\n     *   of the string.\r\n     * @return {String} The character.\r\n     */\r\n    charAt: null,\r\n\r\n    /**\r\n     * Returns the primitive value of a String object.\r\n     *\r\n     * The valueOf method of String returns the primitive value of a String\r\n     * object as a string data type.\r\n     * This method is usually called internally by JavaScript and not\r\n     * explicitly in code.\r\n     *\r\n     * @signature function()\r\n     * @return {String} A new string containing the primitive value.\r\n     */\r\n    valueOf: null,\r\n\r\n    /**\r\n     * Returns a number indicating the Unicode value of the character at the given index.\r\n     *\r\n     * @signature function(index)\r\n     * @param index {Integer} An integer greater than 0 and less than the length\r\n     *   of the string; if it is not a number, it defaults to 0.\r\n     * @return {Integer} The number.\r\n     */\r\n    charCodeAt: null,\r\n\r\n    /**\r\n     * Combines the text of two or more strings and returns a new string.\r\n     * Changes to the text in one string do not affect the other string.\r\n     *\r\n     * @signature function(stringN)\r\n     * @param stringN {String} One or more strings to be combined.\r\n     * @return {String} The combined string.\r\n     */\r\n    concat: null,\r\n\r\n    /**\r\n     * Returns the index within the calling String object of the first\r\n     * occurrence of the specified value, starting the search at fromIndex,\r\n     * returns -1 if the value is not found.\r\n     *\r\n     * @signature function(index, offset)\r\n     * @param index {String} A string representing the value to search for.\r\n     * @param offset {Integer?0} The location within the calling string to start\r\n     *   the search from. It can be any integer between 0 and the length of the\r\n     *   string. The default value is 0.\r\n     * @return {Integer} The index or -1.\r\n     */\r\n    indexOf: null,\r\n\r\n    /**\r\n     * Returns the index within the calling String object of the last occurrence\r\n     * of the specified value, or -1 if not found. The calling string is\r\n     * searched backward, starting at fromIndex.\r\n     *\r\n     * @signature function(index, offset)\r\n     * @param index {String} A string representing the value to search for.\r\n     * @param offset {Integer?0} The location within the calling string to start\r\n     *   the search from, indexed from left to right. It can be any integer\r\n     *   between 0 and the length of the string. The default value is the length\r\n     *    of the string.\r\n     * @return {Integer} The index or -1.\r\n     */\r\n    lastIndexOf: null,\r\n\r\n    /**\r\n     * Used to retrieve the matches when matching a string against a regular\r\n     * expression.\r\n     *\r\n     * If the regular expression does not include the g flag, returns the same\r\n     * result as regexp.exec(string). If the regular expression includes the g\r\n     * flag, the method returns an Array containing all matches.\r\n     *\r\n     * @signature function(regexp)\r\n     * @param regexp {Object} A regular expression object. If a non-RegExp object\r\n     *  obj is passed, it is implicitly converted to a RegExp by using\r\n     *   new RegExp(obj).\r\n     * @return {Object} The matching RegExp object or an array containing all\r\n     *   matches.\r\n     */\r\n    match: null,\r\n\r\n    /**\r\n     * Finds a match between a regular expression and a string, and replaces the\r\n     * matched substring with a new substring.\r\n     *\r\n     * @signature function(regexp, aFunction)\r\n     * @param regexp {Object} A RegExp object. The match is replaced by the\r\n     *   return value of parameter #2. Or a String that is to be replaced by\r\n     *   newSubStr.\r\n     * @param aFunction {Function} A function to be invoked to create the new\r\n     *   substring (to put in place of the substring received from parameter\r\n     *   #1).\r\n     * @return {String} The new substring.\r\n     */\r\n    replace: null,\r\n\r\n    /**\r\n     * Executes the search for a match between a regular expression and this\r\n     * String object.\r\n     *\r\n     * If successful, search returns the index of the regular expression inside\r\n     * the string. Otherwise, it returns -1.\r\n     *\r\n     * @signature function(regexp)\r\n     * @param regexp {Object} A regular expression object. If a non-RegExp object\r\n     *  obj is passed, it is implicitly converted to a RegExp by using\r\n     *   new RegExp(obj).\r\n     * @return {Object} The matching RegExp object or -1.\r\n     *   matches.\r\n     */\r\n    search: null,\r\n\r\n    /**\r\n     * Extracts a section of a string and returns a new string.\r\n     *\r\n     * Slice extracts the text from one string and returns a new string. Changes\r\n     * to the text in one string do not affect the other string.\r\n     * As a negative index, endSlice indicates an offset from the end of the\r\n     * string.\r\n     *\r\n     * @signature function(beginslice, endSlice)\r\n     * @param beginslice {Integer} The zero-based index at which to begin\r\n     *   extraction.\r\n     * @param endSlice {Integer?null} The zero-based index at which to end\r\n     *   extraction. If omitted, slice extracts to the end of the string.\r\n     * @return {String} The extracted string.\r\n     */\r\n    slice: null,\r\n\r\n    /**\r\n     * Splits a String object into an array of strings by separating the string\r\n     * into substrings.\r\n     *\r\n     * When found, separator is removed from the string and the substrings are\r\n     * returned in an array. If separator is omitted, the array contains one\r\n     * element consisting of the entire string.\r\n     *\r\n     * If separator is a regular expression that contains capturing parentheses,\r\n     * then each time separator is matched the results (including any undefined\r\n     * results) of the capturing parentheses are spliced into the output array.\r\n     * However, not all browsers support this capability.\r\n     *\r\n     * Note: When the string is empty, split returns an array containing one\r\n     *\r\n     * @signature function(separator, limit)\r\n     * @param separator {String?null} Specifies the character to use for\r\n     *   separating the string. The separator is treated as a string or a regular\r\n     *   expression. If separator is omitted, the array returned contains one\r\n     *   element consisting of the entire string.\r\n     * @param limit {Integer?null} Integer specifying a limit on the number of\r\n     *   splits to be found.\r\n     * @return {Array} The Array containing substrings.\r\n     */\r\n    split: null,\r\n\r\n    /**\r\n     * Returns the characters in a string beginning at the specified location\r\n     * through the specified number of characters.\r\n     *\r\n     * Start is a character index. The index of the first character is 0, and the\r\n     * index of the last character is 1 less than the length of the string. substr\r\n     *  begins extracting characters at start and collects length characters\r\n     * (unless it reaches the end of the string first, in which case it will\r\n     * return fewer).\r\n     * If start is positive and is greater than or equal to the length of the\r\n     * string, substr returns an empty string.\r\n     *\r\n     * @signature function(start, length)\r\n     * @param start {Integer} Location at which to begin extracting characters\r\n     *   (an integer between 0 and one less than the length of the string).\r\n     * @param length {Integer?null} The number of characters to extract.\r\n     * @return {String} The substring.\r\n     */\r\n    substr: null,\r\n\r\n    /**\r\n     * Returns a subset of a String object.\r\n     *\r\n     * substring extracts characters from indexA up to but not including indexB.\r\n     * In particular:\r\n     * If indexA equals indexB, substring returns an empty string.\r\n     * If indexB is omitted, substring extracts characters to the end of the\r\n     * string.\r\n     * If either argument is less than 0 or is NaN, it is treated as if it were\r\n     * 0.\r\n     * If either argument is greater than stringName.length, it is treated as if\r\n     * it were stringName.length.\r\n     * If indexA is larger than indexB, then the effect of substring is as if\r\n     * the two arguments were swapped; for example, str.substring(1, 0) == str.substring(0, 1).\r\n     *\r\n     * @signature function(indexA, indexB)\r\n     * @param indexA {Integer} An integer between 0 and one less than the\r\n     *   length of the string.\r\n     * @param indexB {Integer?null} (optional) An integer between 0 and the\r\n     *   length of the string.\r\n     * @return {String} The subset.\r\n     */\r\n    substring: null,\r\n\r\n    /**\r\n     * Returns the calling string value converted to lowercase.\r\n     * The toLowerCase method returns the value of the string converted to\r\n     * lowercase. toLowerCase does not affect the value of the string itself.\r\n     *\r\n     * @signature function()\r\n     * @return {String} The new string.\r\n     */\r\n    toLowerCase: null,\r\n\r\n    /**\r\n     * Returns the calling string value converted to uppercase.\r\n     * The toUpperCase method returns the value of the string converted to\r\n     * uppercase. toUpperCase does not affect the value of the string itself.\r\n     *\r\n     * @signature function()\r\n     * @return {String} The new string.\r\n     */\r\n    toUpperCase: null,\r\n\r\n    /**\r\n     * Return unique hash code of object\r\n     *\r\n     * @return {Integer} unique hash code of the object\r\n     */\r\n    toHashCode() {\r\n      return qx.core.ObjectRegistry.toHashCode(this);\r\n    },\r\n\r\n    /**\r\n     * The characters within a string are converted to lower case while\r\n     * respecting the current locale.\r\n     *\r\n     * The toLowerCase method returns the value of the string converted to\r\n     * lowercase. toLowerCase does not affect the value of the string itself.\r\n     *\r\n     * @signature function()\r\n     * @return {String} The new string.\r\n     */\r\n    toLocaleLowerCase: null,\r\n\r\n    /**\r\n     * The characters within a string are converted to upper case while\r\n     * respecting the current locale.\r\n     * The toUpperCase method returns the value of the string converted to\r\n     * uppercase. toUpperCase does not affect the value of the string itself.\r\n     *\r\n     * @signature function()\r\n     * @return {String} The new string.\r\n     */\r\n    toLocaleUpperCase: null,\r\n\r\n    /**\r\n     * Call the same method of the super class.\r\n     *\r\n     * @param args {arguments} the arguments variable of the calling method\r\n     * @param varags {var} variable number of arguments passed to the overwritten function\r\n     * @return {var} the return value of the method of the base class.\r\n     */\r\n    base(args, varags) {\r\n      return qx.core.Object.prototype.base.apply(this, arguments);\r\n    }\r\n  },\r\n\r\n  /*\r\n   *****************************************************************************\r\n      DEFER\r\n   *****************************************************************************\r\n   */\r\n\r\n  defer(statics, members) {\r\n    // add asserts into each debug build\r\n    if (qx.core.Environment.get(\"qx.debug\")) {\r\n      qx.Class.include(statics, qx.core.MAssert);\r\n    }\r\n\r\n    var mappedFunctions = [\r\n      \"charAt\",\r\n      \"charCodeAt\",\r\n      \"concat\",\r\n      \"indexOf\",\r\n      \"lastIndexOf\",\r\n      \"match\",\r\n      \"replace\",\r\n      \"search\",\r\n      \"slice\",\r\n      \"split\",\r\n      \"substr\",\r\n      \"substring\",\r\n      \"toLowerCase\",\r\n      \"toUpperCase\",\r\n      \"toLocaleLowerCase\",\r\n      \"toLocaleUpperCase\",\r\n      \"trim\",\r\n      \"codePointAt\"\r\n    ];\r\n\r\n    // feature/bug detection:\r\n    // Some older Firefox version (<2) break if valueOf is overridden\r\n    members.valueOf = members.toString;\r\n    if (new statics(\"\").valueOf() == null) {\r\n      delete members.valueOf;\r\n    }\r\n\r\n    for (var i = 0, l = mappedFunctions.length; i < l; i++) {\r\n      members[mappedFunctions[i]] = String.prototype[mappedFunctions[i]];\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,oBAAoB,EAAE;IACpCC,MAAM,EAAEC,MAAM;IAEd;AACF;AACA;IACEC,SAAS,WAAAA,UAACC,GAAG,EAAE;MACb,IAAIA,GAAG,GAAGA,GAAG,IAAI,EAAE;;MAEnB;;MAEA,IAAI,CAACC,SAAK,GAAGD,GAAG;MAChB,IAAI,CAACE,MAAM,GAAGF,GAAG,CAACE,MAAM;IAC1B,CAAC;IAEDC,OAAO,EAAE;MACPC,UAAU,EAAE,IAAI;MAChBF,MAAM,EAAE,CAAC;MACTD,SAAK,EAAE,IAAI;MAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,QAAQ,WAAAA,SAAA,EAAG;QACT,OAAO,IAAI,CAACJ,SAAK;MACnB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,MAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,EAAE,IAAI;MAEhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,EAAE,IAAI;MAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAE,IAAI;MAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAE,IAAI;MAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAE,IAAI;MAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,EAAE,IAAI;MAEf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,EAAE,IAAI;MAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,EAAE,IAAI;MAEjB;AACJ;AACA;AACA;AACA;MACIC,UAAU,WAAAA,WAAA,EAAG;QACX,OAAO9B,EAAE,CAAC+B,IAAI,CAACC,cAAc,CAACF,UAAU,CAAC,IAAI,CAAC;MAChD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,iBAAiB,EAAE,IAAI;MAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,iBAAiB,EAAE,IAAI;MAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,IAAI,EAAEC,MAAM,EAAE;QACjB,OAAOrC,EAAE,CAAC+B,IAAI,CAACxB,MAAM,CAAC+B,SAAS,CAACH,IAAI,CAACI,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MAC7D;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEEC,KAAK,WAAAA,MAACC,OAAO,EAAE9B,OAAO,EAAE;MACtB;;MAKA,IAAI+B,eAAe,GAAG,CACpB,QAAQ,EACR,YAAY,EACZ,QAAQ,EACR,SAAS,EACT,aAAa,EACb,OAAO,EACP,SAAS,EACT,QAAQ,EACR,OAAO,EACP,OAAO,EACP,QAAQ,EACR,WAAW,EACX,aAAa,EACb,aAAa,EACb,mBAAmB,EACnB,mBAAmB,EACnB,MAAM,EACN,aAAa,CACd;;MAED;MACA;MACA/B,OAAO,CAACI,OAAO,GAAGJ,OAAO,CAACE,QAAQ;MAClC,IAAI,IAAI4B,OAAO,CAAC,EAAE,CAAC,CAAC1B,OAAO,CAAC,CAAC,IAAI,IAAI,EAAE;QACrC,OAAOJ,OAAO,CAACI,OAAO;MACxB;MAEA,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,eAAe,CAAChC,MAAM,EAAEiC,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;QACtDhC,OAAO,CAAC+B,eAAe,CAACC,CAAC,CAAC,CAAC,GAAGE,MAAM,CAACR,SAAS,CAACK,eAAe,CAACC,CAAC,CAAC,CAAC;MACpE;IACF;EACF,CAAC,CAAC;EApYF5C,EAAE,CAAC+C,IAAI,CAACC,UAAU,CAAC7C,aAAa,GAAGA,aAAa;AAAC"
}