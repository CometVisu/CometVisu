{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Array",
    "construct",
    "length_or_items",
    "members",
    "toArray",
    "valueOf",
    "pop",
    "push",
    "reverse",
    "shift",
    "sort",
    "splice",
    "unshift",
    "concat",
    "join",
    "slice",
    "toString",
    "indexOf",
    "lastIndexOf",
    "forEach",
    "filter",
    "map",
    "some",
    "every",
    "createStackConstructor",
    "stack",
    "core",
    "Environment",
    "get",
    "Stack",
    "prototype",
    "length",
    "$$isArray",
    "args",
    "split",
    "constructor",
    "i",
    "arguments",
    "copy",
    "call",
    "apply",
    "toLocaleString",
    "ret",
    "PseudoArray",
    "type",
    "BaseArray"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/type/BaseArray.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n   ======================================================================\r\n\r\n   This class uses ideas and code snippets presented at\r\n   http://webreflection.blogspot.com/2008/05/habemus-array-unlocked-length-in-ie8.html\r\n   http://webreflection.blogspot.com/2008/05/stack-and-arrayobject-how-to-create.html\r\n\r\n   Author:\r\n     Andrea Giammarchi\r\n\r\n   License:\r\n     MIT: http://www.opensource.org/licenses/mit-license.php\r\n\r\n   ======================================================================\r\n\r\n   This class uses documentation of the native Array methods from the MDC\r\n   documentation of Mozilla.\r\n\r\n   License:\r\n     CC Attribution-Sharealike License:\r\n     http://creativecommons.org/licenses/by-sa/2.5/\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This class is the common superclass for most array classes in\r\n * qooxdoo. It supports all of the shiny 1.6 JavaScript array features\r\n * like <code>forEach</code> and <code>map</code>.\r\n *\r\n * This class may be instantiated instead of the native Array if\r\n * one wants to work with a feature-unified Array instead of the native\r\n * one. This class uses native features whereever possible but fills\r\n * all missing implementations with custom ones.\r\n *\r\n * Through the ability to extend from this class one could add even\r\n * more utility features on top of it.\r\n *\r\n * @require(qx.bom.client.Engine)\r\n * @require(qx.lang.normalize.Array)\r\n */\r\nqx.Bootstrap.define(\"qx.type.BaseArray\", {\r\n  extend: Array,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * Creates a new Array with the given length or the listed elements.\r\n   *\r\n   * <pre class=\"javascript\">\r\n   * var arr1 = new qx.type.BaseArray(arrayLength);\r\n   * var arr2 = new qx.type.BaseArray(item0, item1, ..., itemN);\r\n   * </pre>\r\n   *\r\n   * * <code>arrayLength</code>: The initial length of the array. You can access\r\n   * this value using the length property. If the value specified is not a\r\n   * number, an array of length 1 is created, with the first element having\r\n   * the specified value. The maximum length allowed for an\r\n   * array is 2^32-1, i.e. 4,294,967,295.\r\n   * * <code>itemN</code>:  A value for the element in that position in the\r\n   * array. When this form is used, the array is initialized with the specified\r\n   * values as its elements, and the array's length property is set to the\r\n   * number of arguments.\r\n   *\r\n   * @param length_or_items {Integer|var?null} The initial length of the array\r\n   *        OR an argument list of values.\r\n   */\r\n  construct(length_or_items) {},\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Converts a base array to a native Array\r\n     *\r\n     * @signature function()\r\n     * @return {Array} The native array\r\n     */\r\n    toArray: null,\r\n\r\n    /**\r\n     * Returns the current number of items stored in the Array\r\n     *\r\n     * @signature function()\r\n     * @return {Integer} number of items\r\n     */\r\n    valueOf: null,\r\n\r\n    /**\r\n     * Removes the last element from an array and returns that element.\r\n     *\r\n     * This method modifies the array.\r\n     *\r\n     * @signature function()\r\n     * @return {var} The last element of the array.\r\n     */\r\n    pop: null,\r\n\r\n    /**\r\n     * Adds one or more elements to the end of an array and returns the new length of the array.\r\n     *\r\n     * This method modifies the array.\r\n     *\r\n     * @signature function(varargs)\r\n     * @param varargs {var} The elements to add to the end of the array.\r\n     * @return {Integer} The new array's length\r\n     */\r\n    push: null,\r\n\r\n    /**\r\n     * Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.\r\n     *\r\n     * This method modifies the array.\r\n     *\r\n     * @signature function()\r\n     * @return {Array} Returns the modified array (works in place)\r\n     */\r\n    reverse: null,\r\n\r\n    /**\r\n     * Removes the first element from an array and returns that element.\r\n     *\r\n     * This method modifies the array.\r\n     *\r\n     * @signature function()\r\n     * @return {var} The first element of the array.\r\n     */\r\n    shift: null,\r\n\r\n    /**\r\n     * Sorts the elements of an array.\r\n     *\r\n     * This method modifies the array.\r\n     *\r\n     * @signature function(compareFunction)\r\n     * @param compareFunction {Function?null} Specifies a function that defines the sort order. If omitted,\r\n     *   the array is sorted lexicographically (in dictionary order) according to the string conversion of each element.\r\n     * @return {Array} Returns the modified array (works in place)\r\n     */\r\n    sort: null,\r\n\r\n    /**\r\n     * Adds and/or removes elements from an array.\r\n     *\r\n     * @signature function(index, howMany, varargs)\r\n     * @param index {Integer} Index at which to start changing the array. If negative, will begin\r\n     *   that many elements from the end.\r\n     * @param howMany {Integer} An integer indicating the number of old array elements to remove.\r\n     *   If <code>howMany</code> is 0, no elements are removed. In this case, you should specify\r\n     *   at least one new element.\r\n     * @param varargs {var?null} The elements to add to the array. If you don't specify any elements,\r\n     *   splice simply removes elements from the array.\r\n     * @return {qx.type.BaseArray} New array with the removed elements.\r\n     */\r\n    splice: null,\r\n\r\n    /**\r\n     * Adds one or more elements to the front of an array and returns the new length of the array.\r\n     *\r\n     * This method modifies the array.\r\n     *\r\n     * @signature function(varargs)\r\n     * @param varargs {var} The elements to add to the front of the array.\r\n     * @return {Integer} The new array's length\r\n     */\r\n    unshift: null,\r\n\r\n    /**\r\n     * Returns a new array comprised of this array joined with other array(s) and/or value(s).\r\n     *\r\n     * This method does not modify the array and returns a modified copy of the original.\r\n     *\r\n     * @signature function(varargs)\r\n     * @param varargs {Array|var} Arrays and/or values to concatenate to the resulting array.\r\n     * @return {qx.type.BaseArray} New array built of the given arrays or values.\r\n     */\r\n    concat: null,\r\n\r\n    /**\r\n     * Joins all elements of an array into a string.\r\n     *\r\n     * @signature function(separator)\r\n     * @param separator {String} Specifies a string to separate each element of the array. The separator is\r\n     *   converted to a string if necessary. If omitted, the array elements are separated with a comma.\r\n     * @return {String} The stringified values of all elements divided by the given separator.\r\n     */\r\n    join: null,\r\n\r\n    /**\r\n     * Extracts a section of an array and returns a new array.\r\n     *\r\n     * @signature function(begin, end)\r\n     * @param begin {Integer} Zero-based index at which to begin extraction. As a negative index, start indicates\r\n     *   an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element\r\n     *   in the sequence.\r\n     * @param end {Integer?length} Zero-based index at which to end extraction. slice extracts up to but not including end.\r\n     *   <code>slice(1,4)</code> extracts the second element through the fourth element (elements indexed 1, 2, and 3).\r\n     *   As a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\r\n     *   If end is omitted, slice extracts to the end of the sequence.\r\n     * @return {qx.type.BaseArray} An new array which contains a copy of the given region.\r\n     */\r\n    slice: null,\r\n\r\n    /**\r\n     * Returns a string representing the array and its elements. Overrides the Object.prototype.toString method.\r\n     *\r\n     * @signature function()\r\n     * @return {String} The string representation of the array.\r\n     */\r\n    toString: null,\r\n\r\n    /**\r\n     * Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.\r\n     *\r\n     * @signature function(searchElement, fromIndex)\r\n     * @param searchElement {var} Element to locate in the array.\r\n     * @param fromIndex {Integer?0} The index at which to begin the search. Defaults to 0, i.e. the\r\n     *   whole array will be searched. If the index is greater than or equal to the length of the\r\n     *   array, -1 is returned, i.e. the array will not be searched. If negative, it is taken as\r\n     *   the offset from the end of the array. Note that even when the index is negative, the array\r\n     *   is still searched from front to back. If the calculated index is less than 0, the whole\r\n     *   array will be searched.\r\n     * @return {Integer} The index of the given element\r\n     */\r\n    indexOf: null,\r\n\r\n    /**\r\n     * Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\r\n     *\r\n     * @signature function(searchElement, fromIndex)\r\n     * @param searchElement {var} Element to locate in the array.\r\n     * @param fromIndex {Integer?length} The index at which to start searching backwards. Defaults to\r\n     *   the array's length, i.e. the whole array will be searched. If the index is greater than\r\n     *   or equal to the length of the array, the whole array will be searched. If negative, it\r\n     *   is taken as the offset from the end of the array. Note that even when the index is\r\n     *   negative, the array is still searched from back to front. If the calculated index is\r\n     *   less than 0, -1 is returned, i.e. the array will not be searched.\r\n     * @return {Integer} The index of the given element\r\n     */\r\n    lastIndexOf: null,\r\n\r\n    /**\r\n     * Executes a provided function once per array element.\r\n     *\r\n     * <code>forEach</code> executes the provided function (<code>callback</code>) once for each\r\n     * element present in the array.  <code>callback</code> is invoked only for indexes of the array\r\n     * which have assigned values; it is not invoked for indexes which have been deleted or which\r\n     * have never been assigned values.\r\n     *\r\n     * <code>callback</code> is invoked with three arguments: the value of the element, the index\r\n     * of the element, and the Array object being traversed.\r\n     *\r\n     * If a <code>obj</code> parameter is provided to <code>forEach</code>, it will be used\r\n     * as the <code>this</code> for each invocation of the <code>callback</code>.  If it is not\r\n     * provided, or is <code>null</code>, the global object associated with <code>callback</code>\r\n     * is used instead.\r\n     *\r\n     * <code>forEach</code> does not mutate the array on which it is called.\r\n     *\r\n     * The range of elements processed by <code>forEach</code> is set before the first invocation of\r\n     * <code>callback</code>.  Elements which are appended to the array after the call to\r\n     * <code>forEach</code> begins will not be visited by <code>callback</code>. If existing elements\r\n     * of the array are changed, or deleted, their value as passed to <code>callback</code> will be\r\n     * the value at the time <code>forEach</code> visits them; elements that are deleted are not visited.\r\n     *\r\n     * @signature function(callback, obj)\r\n     * @param callback {Function} Function to execute for each element.\r\n     * @param obj {Object} Object to use as this when executing callback.\r\n     */\r\n    forEach: null,\r\n\r\n    /**\r\n     * Creates a new array with all elements that pass the test implemented by the provided\r\n     * function.\r\n     *\r\n     * <code>filter</code> calls a provided <code>callback</code> function once for each\r\n     * element in an array, and constructs a new array of all the values for which\r\n     * <code>callback</code> returns a true value.  <code>callback</code> is invoked only\r\n     * for indexes of the array which have assigned values; it is not invoked for indexes\r\n     * which have been deleted or which have never been assigned values.  Array elements which\r\n     * do not pass the <code>callback</code> test are simply skipped, and are not included\r\n     * in the new array.\r\n     *\r\n     * <code>callback</code> is invoked with three arguments: the value of the element, the\r\n     * index of the element, and the Array object being traversed.\r\n     *\r\n     * If a <code>obj</code> parameter is provided to <code>filter</code>, it will\r\n     * be used as the <code>this</code> for each invocation of the <code>callback</code>.\r\n     * If it is not provided, or is <code>null</code>, the global object associated with\r\n     * <code>callback</code> is used instead.\r\n     *\r\n     * <code>filter</code> does not mutate the array on which it is called. The range of\r\n     * elements processed by <code>filter</code> is set before the first invocation of\r\n     * <code>callback</code>. Elements which are appended to the array after the call to\r\n     * <code>filter</code> begins will not be visited by <code>callback</code>. If existing\r\n     * elements of the array are changed, or deleted, their value as passed to <code>callback</code>\r\n     * will be the value at the time <code>filter</code> visits them; elements that are deleted\r\n     * are not visited.\r\n     *\r\n     * @signature function(callback, obj)\r\n     * @param callback {Function} Function to test each element of the array.\r\n     * @param obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.\r\n     * @return {qx.type.BaseArray} The newly created array with all matching elements\r\n     */\r\n    filter: null,\r\n\r\n    /**\r\n     * Creates a new array with the results of calling a provided function on every element in this array.\r\n     *\r\n     * <code>map</code> calls a provided <code>callback</code> function once for each element in an array,\r\n     * in order, and constructs a new array from the results.  <code>callback</code> is invoked only for\r\n     * indexes of the array which have assigned values; it is not invoked for indexes which have been\r\n     * deleted or which have never been assigned values.\r\n     *\r\n     * <code>callback</code> is invoked with three arguments: the value of the element, the index of the\r\n     * element, and the Array object being traversed.\r\n     *\r\n     * If a <code>obj</code> parameter is provided to <code>map</code>, it will be used as the\r\n     * <code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\r\n     * <code>null</code>, the global object associated with <code>callback</code> is used instead.\r\n     *\r\n     * <code>map</code> does not mutate the array on which it is called.\r\n     *\r\n     * The range of elements processed by <code>map</code> is set before the first invocation of\r\n     * <code>callback</code>. Elements which are appended to the array after the call to <code>map</code>\r\n     * begins will not be visited by <code>callback</code>.  If existing elements of the array are changed,\r\n     * or deleted, their value as passed to <code>callback</code> will be the value at the time\r\n     * <code>map</code> visits them; elements that are deleted are not visited.\r\n     *\r\n     * @signature function(callback, obj)\r\n     * @param callback {Function} Function produce an element of the new Array from an element of the current one.\r\n     * @param obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.\r\n     * @return {qx.type.BaseArray} A new array which contains the return values of every item executed through the given function\r\n     */\r\n    map: null,\r\n\r\n    /**\r\n     * Tests whether some element in the array passes the test implemented by the provided function.\r\n     *\r\n     * <code>some</code> executes the <code>callback</code> function once for each element present in\r\n     * the array until it finds one where <code>callback</code> returns a true value. If such an element\r\n     * is found, <code>some</code> immediately returns <code>true</code>. Otherwise, <code>some</code>\r\n     * returns <code>false</code>. <code>callback</code> is invoked only for indexes of the array which\r\n     * have assigned values; it is not invoked for indexes which have been deleted or which have never\r\n     * been assigned values.\r\n     *\r\n     * <code>callback</code> is invoked with three arguments: the value of the element, the index of the\r\n     * element, and the Array object being traversed.\r\n     *\r\n     * If a <code>obj</code> parameter is provided to <code>some</code>, it will be used as the\r\n     * <code>this</code> for each invocation of the <code>callback</code>. If it is not provided, or is\r\n     * <code>null</code>, the global object associated with <code>callback</code> is used instead.\r\n     *\r\n     * <code>some</code> does not mutate the array on which it is called.\r\n     *\r\n     * The range of elements processed by <code>some</code> is set before the first invocation of\r\n     * <code>callback</code>.  Elements that are appended to the array after the call to <code>some</code>\r\n     * begins will not be visited by <code>callback</code>. If an existing, unvisited element of the array\r\n     * is changed by <code>callback</code>, its value passed to the visiting <code>callback</code> will\r\n     * be the value at the time that <code>some</code> visits that element's index; elements that are\r\n     * deleted are not visited.\r\n     *\r\n     * @signature function(callback, obj)\r\n     * @param callback {Function} Function to test for each element.\r\n     * @param obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.\r\n     * @return {Boolean} Whether at least one elements passed the test\r\n     */\r\n    some: null,\r\n\r\n    /**\r\n     * Tests whether all elements in the array pass the test implemented by the provided function.\r\n     *\r\n     * <code>every</code> executes the provided <code>callback</code> function once for each element\r\n     * present in the array until it finds one where <code>callback</code> returns a false value. If\r\n     * such an element is found, the <code>every</code> method immediately returns <code>false</code>.\r\n     * Otherwise, if <code>callback</code> returned a true value for all elements, <code>every</code>\r\n     * will return <code>true</code>.  <code>callback</code> is invoked only for indexes of the array\r\n     * which have assigned values; it is not invoked for indexes which have been deleted or which have\r\n     * never been assigned values.\r\n     *\r\n     * <code>callback</code> is invoked with three arguments: the value of the element, the index of\r\n     * the element, and the Array object being traversed.\r\n     *\r\n     * If a <code>obj</code> parameter is provided to <code>every</code>, it will be used as\r\n     * the <code>this</code> for each invocation of the <code>callback</code>. If it is not provided,\r\n     * or is <code>null</code>, the global object associated with <code>callback</code> is used instead.\r\n     *\r\n     * <code>every</code> does not mutate the array on which it is called. The range of elements processed\r\n     * by <code>every</code> is set before the first invocation of <code>callback</code>. Elements which\r\n     * are appended to the array after the call to <code>every</code> begins will not be visited by\r\n     * <code>callback</code>.  If existing elements of the array are changed, their value as passed\r\n     * to <code>callback</code> will be the value at the time <code>every</code> visits them; elements\r\n     * that are deleted are not visited.\r\n     *\r\n     * @signature function(callback, obj)\r\n     * @param callback {Function} Function to test for each element.\r\n     * @param obj {Object} Object to use as <code>this</code> when executing <code>callback</code>.\r\n     * @return {Boolean} Whether all elements passed the test\r\n     */\r\n    every: null\r\n  }\r\n});\r\n\r\n(function () {\r\n  function createStackConstructor(stack) {\r\n    // In IE don't inherit from Array but use an empty object as prototype\r\n    // and copy the methods from Array\r\n    if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\r\n      Stack.prototype = {\r\n        length: 0,\r\n        $$isArray: true\r\n      };\r\n\r\n      var args = \"pop.push.reverse.shift.sort.splice.unshift.join.slice\".split(\r\n        \".\"\r\n      );\r\n\r\n      for (var length = args.length; length; ) {\r\n        Stack.prototype[args[--length]] = Array.prototype[args[length]];\r\n      }\r\n    }\r\n\r\n    // Remember Array's slice method\r\n    var slice = Array.prototype.slice;\r\n\r\n    // Fix \"concat\" method\r\n    Stack.prototype.concat = function () {\r\n      var constructor = this.slice(0);\r\n\r\n      for (var i = 0, length = arguments.length; i < length; i++) {\r\n        var copy;\r\n\r\n        if (arguments[i] instanceof Stack) {\r\n          copy = slice.call(arguments[i], 0);\r\n        } else if (arguments[i] instanceof Array) {\r\n          copy = arguments[i];\r\n        } else {\r\n          copy = [arguments[i]];\r\n        }\r\n\r\n        constructor.push.apply(constructor, copy);\r\n      }\r\n\r\n      return constructor;\r\n    };\r\n\r\n    // Fix \"toString\" method\r\n    Stack.prototype.toString = function () {\r\n      return slice.call(this, 0).toString();\r\n    };\r\n\r\n    // Fix \"toLocaleString\"\r\n    Stack.prototype.toLocaleString = function () {\r\n      return slice.call(this, 0).toLocaleString();\r\n    };\r\n\r\n    // Fix constructor\r\n    Stack.prototype.constructor = Stack;\r\n\r\n    // Add JS 1.6 Array features\r\n    Stack.prototype.indexOf = Array.prototype.indexOf;\r\n    Stack.prototype.lastIndexOf = Array.prototype.lastIndexOf;\r\n    Stack.prototype.forEach = Array.prototype.forEach;\r\n    Stack.prototype.some = Array.prototype.some;\r\n    Stack.prototype.every = Array.prototype.every;\r\n\r\n    var filter = Array.prototype.filter;\r\n    var map = Array.prototype.map;\r\n\r\n    // Fix methods which generates a new instance\r\n    // to return an instance of the same class\r\n    Stack.prototype.filter = function () {\r\n      var ret = new this.constructor();\r\n      ret.push.apply(ret, filter.apply(this, arguments));\r\n      return ret;\r\n    };\r\n\r\n    Stack.prototype.map = function () {\r\n      var ret = new this.constructor();\r\n      ret.push.apply(ret, map.apply(this, arguments));\r\n      return ret;\r\n    };\r\n\r\n    Stack.prototype.slice = function () {\r\n      var ret = new this.constructor();\r\n      ret.push.apply(ret, Array.prototype.slice.apply(this, arguments));\r\n      return ret;\r\n    };\r\n\r\n    Stack.prototype.splice = function () {\r\n      var ret = new this.constructor();\r\n      ret.push.apply(ret, Array.prototype.splice.apply(this, arguments));\r\n      return ret;\r\n    };\r\n\r\n    // Add new \"toArray\" method for convert a base array to a native Array\r\n    Stack.prototype.toArray = function () {\r\n      return Array.prototype.slice.call(this, 0);\r\n    };\r\n\r\n    // Add valueOf() to return the length\r\n    Stack.prototype.valueOf = function () {\r\n      return this.length;\r\n    };\r\n\r\n    // Return final class\r\n    return Stack;\r\n  }\r\n\r\n  function Stack(length) {\r\n    if (arguments.length === 1 && typeof length === \"number\") {\r\n      this.length =\r\n        -1 < length && length === length >> 0.5 ? length : this.push(length);\r\n    } else if (arguments.length) {\r\n      this.push.apply(this, arguments);\r\n    }\r\n  }\r\n\r\n  function PseudoArray() {}\r\n  PseudoArray.prototype = [];\r\n  Stack.prototype = new PseudoArray();\r\n  Stack.prototype.length = 0;\r\n\r\n  qx.type.BaseArray = createStackConstructor(Stack);\r\n})();\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,mBAAmB,EAAE;IACvCC,MAAM,EAAEC,KAAK;IAEb;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,eAAe,EAAE,CAAC,CAAC;IAE7B;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,GAAG,EAAE,IAAI;MAET;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,EAAE,IAAI;MAEV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAE,IAAI;MAEX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,EAAE,IAAI;MAEV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE,IAAI;MAEZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,EAAE,IAAI;MAEV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAE,IAAI;MAEX;AACJ;AACA;AACA;AACA;AACA;MACIC,QAAQ,EAAE,IAAI;MAEd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,EAAE,IAAI;MAEjB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE,IAAI;MAEbsBAAsBA,CAACC,KAAK,EAAE;MACrC;MACA;MACA,IAAI/B,EAAE,CAACgC,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,aAAa,CAAC,IAAI,QAAQ,EAAE;QACtDC,KAAK,CAACC,SAAS,GAAG;UAChBC,MAAM,EAAE,CAAC;UACTC,SAAS,EAAE;QACb,CAAC;QAED,IAAIC,IAAI,GAAG,uDAAuD,CAACC,KAAK,CACtE,GACF,CAAC;QAED,KAAK,IAAIH,MAAM,GAAGE,IAAI,CAACF,MAAM,EAAEA,MAAM,GAAI;UACvCF,KAAK,CAACC,SAAS,CAACG,IAAI,CAAC,EAAEF,MAAM,CAAC,CAAC,GAAG/B,KAAK,CAAC8B,SAAS,CAACG,IAAI,CAACF,MAAM,CAAC,CAAC;QACjE;MACF;;MAEA;MACA,IAAIhB,KAAK,GAAGf,KAAK,CAAC8B,SAAS,CAACf,KAAK;;MAEjC;MACAc,KAAK,CAACC,SAAS,CAACjB,MAAM,GAAG,YAAY;QACnC,IAAIsB,WAAW,GAAG,IAAI,CAACpB,KAAK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"
}