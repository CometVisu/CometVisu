{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "type",
    "BaseArray",
    "construct",
    "length_or_items",
    "apply",
    "arguments",
    "members",
    "clone",
    "prototype",
    "concat",
    "insertAt",
    "obj",
    "i",
    "splice",
    "insertBefore",
    "obj2",
    "indexOf",
    "push",
    "insertAfter",
    "length",
    "removeAt",
    "removeAll",
    "append",
    "arr",
    "arg",
    "__toPlainArray",
    "Array",
    "prepend",
    "remove",
    "contains"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/type/Array.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * An extended array class which adds a lot of often used\n * convenience methods to the regular array like <code>remove</code> or\n * <code>contains</code>.\n */\nqx.Class.define(\"qx.type.Array\", {\n  extend: qx.type.BaseArray,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a new Array with the given length or the listed items.\n   *\n   * <pre class=\"javascript\">\n   * var arr1 = new qx.type.Array(length);\n   * var arr2 = new qx.type.Array(elem0, elem1, ..., elemN);\n   * </pre>\n   *\n   * * <code>length</code>: The initial length of the array.\n   * * <code>item1, item2. .. itemN</code>:  the items that will make up the newly created array\n   *\n   * @param length_or_items {Integer|var?null} The initial size of the collection\n   *        OR an argument list of elements.\n   */\n  construct(length_or_items) {\n    qx.type.BaseArray.apply(this, arguments);\n  },\n\n  members: {\n    /**\n     * Returns a clone of the array. Primitive values are copied.\n     * Others are referenced.\n     *\n     * @return {Array} Cloned array instance\n     * @signature function()\n     */\n    clone: qx.type.BaseArray.prototype.concat,\n\n    /**\n     * Insert an element at a given position\n     *\n     * @param obj {var} the element to insert\n     * @param i {Integer} position where to insert the element into the arr\n     * @return {Array} the array\n     */\n    insertAt(obj, i) {\n      this.splice(i, 0, obj);\n      return this;\n    },\n\n    /**\n     * Insert an element before a given second element\n     *\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 before this object\n     * @return {Array} the array\n     */\n    insertBefore(obj, obj2) {\n      var i = this.indexOf(obj2);\n\n      if (i == -1) {\n        this.push(obj);\n      } else {\n        this.splice(i, 0, obj);\n      }\n\n      return this;\n    },\n\n    /**\n     * Insert an element after a given second element\n     *\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 after this object\n     * @return {Array} the array\n     */\n    insertAfter(obj, obj2) {\n      var i = this.indexOf(obj2);\n\n      if (i == -1 || i == this.length - 1) {\n        this.push(obj);\n      } else {\n        this.splice(i + 1, 0, obj);\n      }\n\n      return this;\n    },\n\n    /**\n     * Remove an element at the given index\n     *\n     * @param i {Integer} index of the element to be removed\n     * @return {var} The removed element.\n     */\n    removeAt(i) {\n      return this.splice(i, 1)[0];\n    },\n\n    /**\n     * Remove all elements\n     *\n     * @return {Array} empty array\n     */\n    removeAll() {\n      this.length = 0;\n      return this;\n    },\n\n    /**\n     * Append the elements of the given array\n     *\n     * @param arr {Array} the elements of this array will be appended to other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    append(arr) {\n      var arg = this.__toPlainArray(arr);\n      Array.prototype.push.apply(this, arg);\n      return this;\n    },\n\n    /**\n     * Prepend the elements of the given array.\n     *\n     * @param arr {Array} The elements of this array will be prepended to other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    prepend(arr) {\n      var arg = this.__toPlainArray(arr);\n      Array.prototype.splice.apply(this, [0, 0].concat(arg));\n      return this;\n    },\n\n    /**\n     * Helper which checks for the given element and converts that to a\n     * native array if necessary.\n     *\n     * @param arr {Array} Native or qx.type.BaseArray to convert.\n     * @return {Array} A native array.\n     */\n    __toPlainArray(arr) {\n      // this check is important because Opera throws an uncatchable error if\n      // apply is called without an arr as second argument.\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertArray(arr, \"The parameter must be an array.\");\n      }\n\n      var arg = arr;\n      // concat needs a plain array as argument [BUG #4488]\n      if (arr instanceof qx.type.BaseArray) {\n        arg = [];\n        for (var i = 0; i < arr.length; i++) {\n          arg[i] = arr[i];\n        }\n      }\n      return arg;\n    },\n\n    /**\n     * Remove an element\n     *\n     * @param obj {var} element to be removed from the array\n     * @return {var} the removed element\n     */\n    remove(obj) {\n      var i = this.indexOf(obj);\n      if (i != -1) {\n        this.splice(i, 1);\n        return obj;\n      }\n    },\n\n    /**\n     * Whether the array contains the given element\n     *\n     * @param obj {var} object to look for\n     * @return {Boolean} whether the array contains the element\n     */\n    contains(obj) {\n      return this.indexOf(obj) !== -1;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}