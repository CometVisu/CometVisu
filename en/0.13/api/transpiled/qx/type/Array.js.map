{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "type",
    "BaseArray",
    "construct",
    "length_or_items",
    "apply",
    "arguments",
    "members",
    "clone",
    "prototype",
    "concat",
    "insertAt",
    "obj",
    "i",
    "splice",
    "insertBefore",
    "obj2",
    "indexOf",
    "push",
    "insertAfter",
    "length",
    "removeAt",
    "removeAll",
    "append",
    "arr",
    "arg",
    "__toPlainArray",
    "Array",
    "prepend",
    "__P_295_0",
    "remove",
    "contains"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/type/Array.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * An extended array class which adds a lot of often used\r\n * convenience methods to the regular array like <code>remove</code> or\r\n * <code>contains</code>.\r\n */\r\nqx.Class.define(\"qx.type.Array\", {\r\n  extend: qx.type.BaseArray,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * Creates a new Array with the given length or the listed items.\r\n   *\r\n   * <pre class=\"javascript\">\r\n   * var arr1 = new qx.type.Array(length);\r\n   * var arr2 = new qx.type.Array(elem0, elem1, ..., elemN);\r\n   * </pre>\r\n   *\r\n   * * <code>length</code>: The initial length of the array.\r\n   * * <code>item1, item2. .. itemN</code>:  the items that will make up the newly created array\r\n   *\r\n   * @param length_or_items {Integer|var?null} The initial size of the collection\r\n   *        OR an argument list of elements.\r\n   */\r\n  construct(length_or_items) {\r\n    qx.type.BaseArray.apply(this, arguments);\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * Returns a clone of the array. Primitive values are copied.\r\n     * Others are referenced.\r\n     *\r\n     * @return {Array} Cloned array instance\r\n     * @signature function()\r\n     */\r\n    clone: qx.type.BaseArray.prototype.concat,\r\n\r\n    /**\r\n     * Insert an element at a given position\r\n     *\r\n     * @param obj {var} the element to insert\r\n     * @param i {Integer} position where to insert the element into the arr\r\n     * @return {Array} the array\r\n     */\r\n    insertAt(obj, i) {\r\n      this.splice(i, 0, obj);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Insert an element before a given second element\r\n     *\r\n     * @param obj {var} object to be inserted\r\n     * @param obj2 {var} insert obj1 before this object\r\n     * @return {Array} the array\r\n     */\r\n    insertBefore(obj, obj2) {\r\n      var i = this.indexOf(obj2);\r\n\r\n      if (i == -1) {\r\n        this.push(obj);\r\n      } else {\r\n        this.splice(i, 0, obj);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Insert an element after a given second element\r\n     *\r\n     * @param obj {var} object to be inserted\r\n     * @param obj2 {var} insert obj1 after this object\r\n     * @return {Array} the array\r\n     */\r\n    insertAfter(obj, obj2) {\r\n      var i = this.indexOf(obj2);\r\n\r\n      if (i == -1 || i == this.length - 1) {\r\n        this.push(obj);\r\n      } else {\r\n        this.splice(i + 1, 0, obj);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Remove an element at the given index\r\n     *\r\n     * @param i {Integer} index of the element to be removed\r\n     * @return {var} The removed element.\r\n     */\r\n    removeAt(i) {\r\n      return this.splice(i, 1)[0];\r\n    },\r\n\r\n    /**\r\n     * Remove all elements\r\n     *\r\n     * @return {Array} empty array\r\n     */\r\n    removeAll() {\r\n      this.length = 0;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Append the elements of the given array\r\n     *\r\n     * @param arr {Array} the elements of this array will be appended to other one\r\n     * @return {Array} The modified array.\r\n     * @throws {Error} if one of the arguments is not an array\r\n     */\r\n    append(arr) {\r\n      var arg = this.__toPlainArray(arr);\r\n      Array.prototype.push.apply(this, arg);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Prepend the elements of the given array.\r\n     *\r\n     * @param arr {Array} The elements of this array will be prepended to other one\r\n     * @return {Array} The modified array.\r\n     * @throws {Error} if one of the arguments is not an array\r\n     */\r\n    prepend(arr) {\r\n      var arg = this.__toPlainArray(arr);\r\n      Array.prototype.splice.apply(this, [0, 0].concat(arg));\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Helper which checks for the given element and converts that to a\r\n     * native array if necessary.\r\n     *\r\n     * @param arr {Array} Native or qx.type.BaseArray to convert.\r\n     * @return {Array} A native array.\r\n     */\r\n    __toPlainArray(arr) {\r\n      // this check is important because Opera throws an uncatchable error if\r\n      // apply is called without an arr as second argument.\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        qx.core.Assert.assertArray(arr, \"The parameter must be an array.\");\r\n      }\r\n\r\n      var arg = arr;\r\n      // concat needs a plain array as argument [BUG #4488]\r\n      if (arr instanceof qx.type.BaseArray) {\r\n        arg = [];\r\n        for (var i = 0; i < arr.length; i++) {\r\n          arg[i] = arr[i];\r\n        }\r\n      }\r\n      return arg;\r\n    },\r\n\r\n    /**\r\n     * Remove an element\r\n     *\r\n     * @param obj {var} element to be removed from the array\r\n     * @return {var} the removed element\r\n     */\r\n    remove(obj) {\r\n      var i = this.indexOf(obj);\r\n      if (i != -1) {\r\n        this.splice(i, 1);\r\n        return obj;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Whether the array contains the given element\r\n     *\r\n     * @param obj {var} object to look for\r\n     * @return {Boolean} whether the array contains the element\r\n     */\r\n    contains(obj) {\r\n      return this.indexOf(obj) !== -1;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}