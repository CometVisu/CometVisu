{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Error",
    "construct",
    "comment",
    "failMessage",
    "inst",
    "call",
    "stack",
    "stacktrace",
    "__comment",
    "message",
    "type",
    "BaseError",
    "DEFAULTMESSAGE",
    "statics",
    "members",
    "__sTrace",
    "getComment",
    "toString"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/type/BaseError.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n   qooxdoo - the new era of web development\n   http://qooxdoo.org\n   Copyright:\n    2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n   License:\n    MIT: https://opensource.org/licenses/MIT\n    See the LICENSE file in the project's top-level directory for details.\n   Authors:\n    * Fabian Jakobs (fjakobs)\n    * Martin Wittemann (martinwittemann)\n************************************************************************ */\n\n/**\n * This class is the common super class for all error classes in qooxdoo.\n *\n * It has a comment and a fail message as members. The toString method returns\n * the comment and the fail message separated by a colon.\n */\nqx.Bootstrap.define(\"qx.type.BaseError\", {\n  extend: Error,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param comment {String} Comment passed to the assertion call\n   * @param failMessage {String} Fail message provided by the assertion\n   */\n  construct(comment, failMessage) {\n    var inst = Error.call(this, failMessage);\n    // map stack trace properties since they're not added by Error's constructor\n    if (inst.stack) {\n      this.stack = inst.stack;\n    }\n    if (inst.stacktrace) {\n      this.stacktrace = inst.stacktrace;\n    }\n\n    this.__comment = comment || \"\";\n    // opera 10 crashes if the message is an empty string!!!?!?!\n    this.message = failMessage || qx.type.BaseError.DEFAULTMESSAGE;\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n  statics: {\n    DEFAULTMESSAGE: \"error\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __sTrace: null,\n    __comment: null,\n\n    /** @type {String} Fail message provided by the assertion */\n    message: null,\n\n    /**\n     * Comment passed to the assertion call\n     *\n     * @return {String} The comment passed to the assertion call\n     */\n    getComment() {\n      return this.__comment;\n    },\n\n    /**\n     * Get the error message\n     *\n     * @return {String} The error message\n     */\n    toString() {\n      return this.__comment + (this.message ? \": \" + this.message : \"\");\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,mBAAmB,EAAE;IACvCC,MAAM,EAAEC,KAAK;IAEb;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,OAAO,EAAEC,WAAW,EAAE;MAC9B,IAAIC,IAAI,GAAGJ,KAAK,CAACK,IAAI,CAAC,IAAI,EAAEF,WAAW,CAAC;MACxC;MACA,IAAIC,IAAI,CAACE,KAAK,EAAE;QACd,IAAI,CAACA,KAAK,GAAGF,IAAI,CAACE,KAAK;MACzB;MACA,IAAIF,IAAI,CAACG,UAAU,EAAE;QACnB,IAAI,CAACA,UAAU,GAAGH,IAAI,CAACG,UAAU;MACnC;MAEA,IAAI,CAACC,SAAS,GAAGN,OAAO,IAAI,EAAE;MAC9B;MACA,IAAI,CAACO,OAAO,GAAGN,WAAW,IAAIT,EAAE,CAACgB,IAAI,CAACC,SAAS,CAACC,cAAc;IAChE,CAAC;IAED;AACF;AACA;AACA;AACA;IACEC,OAAO,EAAE;MACPD,cAAc,EAAE;IAClB,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEE,OAAO,EAAE;MACPC,SAAQ,EAAE,IAAI;MACdP,SAAS,EAAE,IAAI;MAEf;MACAC,OAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;MACIO,UAAU,WAAAA,WAAA,EAAG;QACX,OAAO,IAAI,CAACR,SAAS;MACvB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIS,QAAQ,WAAAA,SAAA,EAAG;QACT,OAAO,IAAI,CAACT,SAAS,IAAI,IAAI,CAACC,OAAO,GAAG,IAAI,GAAG,IAAI,CAACA,OAAO,GAAG,EAAE,CAAC;MACnE;IACF;EACF,CAAC,CAAC;EAvFFf,EAAE,CAACgB,IAAI,CAACC,SAAS,CAACd,aAAa,GAAGA,aAAa;AAAC"
}