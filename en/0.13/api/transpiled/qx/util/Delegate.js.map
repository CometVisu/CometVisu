{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "getMethod",
    "delegate",
    "specificMethod",
    "util",
    "Delegate",
    "containsMethod",
    "lang",
    "Function",
    "bind",
    "Type",
    "isObject",
    "isFunction"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/Delegate.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Methods to work with the delegate pattern.\n */\nqx.Class.define(\"qx.util.Delegate\", {\n  statics: {\n    /**\n     * Returns the delegate method given my its name.\n     *\n     * @param delegate {Object} The delegate object to check the method.\n     * @param specificMethod {String} The name of the delegate method.\n     * @return {Function|null} The requested method or null, if no method is set.\n     */\n    getMethod(delegate, specificMethod) {\n      if (qx.util.Delegate.containsMethod(delegate, specificMethod)) {\n        return qx.lang.Function.bind(delegate[specificMethod], delegate);\n      }\n\n      return null;\n    },\n\n    /**\n     * Checks, if the given delegate is valid or if a specific method is given.\n     *\n     * @param delegate {Object} The delegate object.\n     * @param specificMethod {String} The name of the method to search for.\n     * @return {Boolean} True, if everything was ok.\n     */\n    containsMethod(delegate, specificMethod) {\n      var Type = qx.lang.Type;\n\n      if (Type.isObject(delegate)) {\n        return Type.isFunction(delegate[specificMethod]);\n      }\n\n      return false;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,kBAAhB,EAAoC;IAClCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,SARO,qBAQGC,QARH,EAQaC,cARb,EAQ6B;QAClC,IAAIT,EAAE,CAACU,IAAH,CAAQC,QAAR,CAAiBC,cAAjB,CAAgCJ,QAAhC,EAA0CC,cAA1C,CAAJ,EAA+D;UAC7D,OAAOT,EAAE,CAACa,IAAH,CAAQC,QAAR,CAAiBC,IAAjB,CAAsBP,QAAQ,CAACC,cAAD,CAA9B,EAAgDD,QAAhD,CAAP;QACD;;QAED,OAAO,IAAP;MACD,CAdM;;MAgBP;AACJ;AACA;AACA;AACA;AACA;AACA;MACII,cAvBO,0BAuBQJ,QAvBR,EAuBkBC,cAvBlB,EAuBkC;QACvC,IAAIO,IAAI,GAAGhB,EAAE,CAACa,IAAH,CAAQG,IAAnB;;QAEA,IAAIA,IAAI,CAACC,QAAL,CAAcT,QAAd,CAAJ,EAA6B;UAC3B,OAAOQ,IAAI,CAACE,UAAL,CAAgBV,QAAQ,CAACC,cAAD,CAAxB,CAAP;QACD;;QAED,OAAO,KAAP;MACD;IA/BM;EADyB,CAApC;EAtBAT,EAAE,CAACU,IAAH,CAAQC,QAAR,CAAiBR,aAAjB,GAAiCA,aAAjC"
}