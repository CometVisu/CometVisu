{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "number",
    "errorMessage",
    "value",
    "util",
    "Validate",
    "checkNumber",
    "formItem",
    "locale",
    "Manager",
    "tr",
    "bom",
    "String",
    "escape",
    "Number",
    "isFinite",
    "core",
    "ValidationError",
    "email",
    "checkEmail",
    "reg",
    "test",
    "string",
    "checkString",
    "url",
    "checkUrl",
    "color",
    "checkColor",
    "ColorUtil",
    "stringToRgb",
    "e",
    "message",
    "range",
    "from",
    "to",
    "inArray",
    "array",
    "indexOf",
    "regExp"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/Validate.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\n\n/**\n * This static class contains a set of default validators.\n * These validators are listed twice\n * <ul>\n *   <li>number</li>\n *   <li>email</li>\n *   <li>string</li>\n *   <li>url</li>\n *   <li>color</li>\n * </ul>\n * All these validators don't need an input so the listed function just return a\n * method fitting for the use in the property system.\n * The methods with the check prefix are the returned methods and can be used in\n * other contexts without the property system.\n *\n * There are three more validators\n * <ul>\n *   <li>range</li>\n *   <li>inArray</li>\n *   <li>regExp</li>\n * </ul>\n * These methods do need some addition parameters to specify the validator. So\n * there is no check function which you can use in other contexts because the\n * check function for the validation is created based on the given parameter.\n *\n * *Example usage for a property*\n *\n * <code>validate: qx.util.Validate.number()</code>\n * <br>\n * <code>validate: qx.util.Validate.range(0, 100)</code>\n *\n * Because the methods without the check prefix return a validation method,\n * the function must be called at the property definition. So don't forget the\n * ending brackets for those methods without parameters!\n * For the correct usage, take an additional look at the documentation of the\n * {@link qx.core.Property} class.\n */\nqx.Class.define(\"qx.util.Validate\", {\n  statics: {\n    /**\n     * Returns the function that checks for a number.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkNumber} Function.\n     */\n    number(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkNumber(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is a number.\n     * If not, an ValidationError will be thrown.\n     * If you want to use the number check in a property definition,\n     * use the {@link #number} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?undefined} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not a\n     *    finite number\n     */\n    checkNumber(value, formItem, errorMessage) {\n      errorMessage =\n        errorMessage ||\n        qx.locale.Manager.tr(\n          \"%1 is not a number.\",\n          value ? qx.bom.String.escape(value + \"\") : value\n        );\n\n      if (\n        (typeof value !== \"number\" && !(value instanceof Number)) ||\n        !isFinite(value)\n      ) {\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\n      }\n    },\n\n    /**\n     * Returns the function that checks for an email address.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkEmail} Function.\n     */\n    email(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkEmail(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is an email address.\n     * If not, an ValidationError will be thrown.\n     * If you want to use the email check in a property definition,\n     * use the {@link #email} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?null} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not\n     *    a valid email address.\n     */\n    checkEmail(value, formItem, errorMessage) {\n      errorMessage =\n        errorMessage ||\n        qx.locale.Manager.tr(\n          \"'%1' is not an email address.\",\n          value ? qx.bom.String.escape(value + \"\") : \"\"\n        );\n\n      var reg = /^([A-Za-z0-9_\\-.+])+@([A-Za-z0-9_\\-.])+\\.([A-Za-z]{2,})$/;\n      if (reg.test(value) === false) {\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\n      }\n    },\n\n    /**\n     * Returns the function that checks for a string.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkString} Function.\n     */\n    string(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkString(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is a string.\n     * If not, an ValidationError will be thrown.\n     * If you want to use the string check in a property definition,\n     * use the {@link #string} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?null} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not a string.\n     */\n    checkString(value, formItem, errorMessage) {\n      errorMessage =\n        errorMessage ||\n        qx.locale.Manager.tr(\n          \"%1 is not a string.\",\n          value ? qx.bom.String.escape(value + \"\") : value\n        );\n\n      if (typeof value !== \"string\" && !(value instanceof String)) {\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\n      }\n    },\n\n    /**\n     * Returns the function that checks for an url.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkUrl} Function.\n     */\n    url(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkUrl(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is an url.\n     * If not, an ValidationError will be thrown.\n     * If you want to use the url check in a property definition,\n     * use the {@link #url} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?null} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not an url.\n     */\n    checkUrl(value, formItem, errorMessage) {\n      errorMessage =\n        errorMessage ||\n        qx.locale.Manager.tr(\n          \"%1 is not an url.\",\n          value ? qx.bom.String.escape(value + \"\") : value\n        );\n\n      var reg =\n        /([A-Za-z0-9])+:\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n      if (!reg.test(value)) {\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\n      }\n    },\n\n    /**\n     * Returns the function that checks for a color.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkColor} Function.\n     */\n    color(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkColor(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is a color.\n     * If not, an ValidationError will be thrown. The check itself will be\n     * delegated to the {@link qx.util.ColorUtil#stringToRgb} method.\n     * If you want to use the color check in a property definition,\n     * use the {@link #color} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?null} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not a color.\n     */\n    checkColor(value, formItem, errorMessage) {\n      try {\n        qx.util.ColorUtil.stringToRgb(value);\n      } catch (e) {\n        var message =\n          errorMessage ||\n          qx.locale.Manager.tr(\n            \"%1 is not a color! %2\",\n            value ? qx.bom.String.escape(value + \"\") : value,\n            e\n          );\n\n        throw new qx.core.ValidationError(\"Validation Error\", message);\n      }\n    },\n\n    /**\n     * Returns a function that checks if the number is in the given range.\n     * The range includes the border values.\n     * A range from 1 to 2 accepts the values 1 equally as everything up to 2\n     * including the 2.\n     * If the value given to the returned function is out of the range, a\n     * ValidationError will be thrown.\n     *\n     * @param from {Number} The lower border of the range.\n     * @param to {Number} The upper border of the range.\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} A function taking one parameter (value).\n     */\n    range(from, to, errorMessage) {\n      return function (value) {\n        var message =\n          errorMessage ||\n          qx.locale.Manager.tr(\n            \"%1 is not in the range from [%2, %3].\",\n            value ? qx.bom.String.escape(value + \"\") : value,\n            from,\n            to\n          );\n\n        if (value < from || value > to) {\n          throw new qx.core.ValidationError(\"Validation Error\", message);\n        }\n      };\n    },\n\n    /**\n     * Returns a function that checks if the given value is in the array.\n     * If the value given to the returned function is not in the array, a\n     * ValidationError will be thrown.\n     *\n     * @param array {Array} The array holding the possibilities.\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} A function taking one parameter (value).\n     */\n    inArray(array, errorMessage) {\n      return function (value) {\n        var message =\n          errorMessage ||\n          qx.locale.Manager.tr(\n            \"%1 is not in %2\",\n            value ? qx.bom.String.escape(value + \"\") : value,\n            array\n          );\n\n        if (array.indexOf(value) === -1) {\n          throw new qx.core.ValidationError(\"Validation Error\", message);\n        }\n      };\n    },\n\n    /**\n     * Returns a function that checks if the given value fits the RegExp.\n     * For testing, the function uses the RegExp.test function.\n     * If the value given to the returned function does not fit the RegExp, a\n     * ValidationError will be thrown.\n     * incoming\n     * @param reg {RegExp} The RegExp for the check.\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} A function taking one parameter (value).\n     */\n    regExp(reg, errorMessage) {\n      return function (value) {\n        var message =\n          errorMessage ||\n          qx.locale.Manager.tr(\n            \"%1 does not fit %2.\",\n            value ? qx.bom.String.escape(value + \"\") : value,\n            reg\n          );\n\n        if (!reg.test(value)) {\n          throw new qx.core.ValidationError(\"Validation Error\", message);\n        }\n      };\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}