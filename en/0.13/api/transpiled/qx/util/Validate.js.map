{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "number",
    "errorMessage",
    "value",
    "util",
    "Validate",
    "checkNumber",
    "formItem",
    "locale",
    "Manager",
    "tr",
    "bom",
    "String",
    "escape",
    "Number",
    "isFinite",
    "core",
    "ValidationError",
    "email",
    "checkEmail",
    "reg",
    "test",
    "string",
    "checkString",
    "url",
    "checkUrl",
    "color",
    "checkColor",
    "ColorUtil",
    "stringToRgb",
    "e",
    "message",
    "range",
    "from",
    "to",
    "inArray",
    "array",
    "indexOf",
    "regExp"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/Validate.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n     * Adrian Olaru (adrianolaru)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This static class contains a set of default validators.\r\n * These validators are listed twice\r\n * <ul>\r\n *   <li>number</li>\r\n *   <li>email</li>\r\n *   <li>string</li>\r\n *   <li>url</li>\r\n *   <li>color</li>\r\n * </ul>\r\n * All these validators don't need an input so the listed function just return a\r\n * method fitting for the use in the property system.\r\n * The methods with the check prefix are the returned methods and can be used in\r\n * other contexts without the property system.\r\n *\r\n * There are three more validators\r\n * <ul>\r\n *   <li>range</li>\r\n *   <li>inArray</li>\r\n *   <li>regExp</li>\r\n * </ul>\r\n * These methods do need some addition parameters to specify the validator. So\r\n * there is no check function which you can use in other contexts because the\r\n * check function for the validation is created based on the given parameter.\r\n *\r\n * *Example usage for a property*\r\n *\r\n * <code>validate: qx.util.Validate.number()</code>\r\n * <br>\r\n * <code>validate: qx.util.Validate.range(0, 100)</code>\r\n *\r\n * Because the methods without the check prefix return a validation method,\r\n * the function must be called at the property definition. So don't forget the\r\n * ending brackets for those methods without parameters!\r\n * For the correct usage, take an additional look at the documentation of the\r\n * {@link qx.core.Property} class.\r\n */\r\nqx.Class.define(\"qx.util.Validate\", {\r\n  statics: {\r\n    /**\r\n     * Returns the function that checks for a number.\r\n     *\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @return {Function} The {@link #checkNumber} Function.\r\n     */\r\n    number(errorMessage) {\r\n      return function (value) {\r\n        qx.util.Validate.checkNumber(value, null, errorMessage);\r\n      };\r\n    },\r\n\r\n    /**\r\n     * The function checks the incoming value to see if it is a number.\r\n     * If not, an ValidationError will be thrown.\r\n     * If you want to use the number check in a property definition,\r\n     * use the {@link #number} method.\r\n     *\r\n     * @param value {var} The value to check.\r\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\r\n     *   {@link qx.ui.form.Form}.\r\n     * @param errorMessage {String?undefined} Custom error message.\r\n     * @throws {qx.core.ValidationError} If the value parameter is not a\r\n     *    finite number\r\n     */\r\n    checkNumber(value, formItem, errorMessage) {\r\n      errorMessage =\r\n        errorMessage ||\r\n        qx.locale.Manager.tr(\r\n          \"%1 is not a number.\",\r\n          value ? qx.bom.String.escape(value + \"\") : value\r\n        );\r\n\r\n      if (\r\n        (typeof value !== \"number\" && !(value instanceof Number)) ||\r\n        !isFinite(value)\r\n      ) {\r\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the function that checks for an email address.\r\n     *\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @return {Function} The {@link #checkEmail} Function.\r\n     */\r\n    email(errorMessage) {\r\n      return function (value) {\r\n        qx.util.Validate.checkEmail(value, null, errorMessage);\r\n      };\r\n    },\r\n\r\n    /**\r\n     * The function checks the incoming value to see if it is an email address.\r\n     * If not, an ValidationError will be thrown.\r\n     * If you want to use the email check in a property definition,\r\n     * use the {@link #email} method.\r\n     *\r\n     * @param value {var} The value to check.\r\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\r\n     *   {@link qx.ui.form.Form}.\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @throws {qx.core.ValidationError} If the value parameter is not\r\n     *    a valid email address.\r\n     */\r\n    checkEmail(value, formItem, errorMessage) {\r\n      errorMessage =\r\n        errorMessage ||\r\n        qx.locale.Manager.tr(\r\n          \"'%1' is not an email address.\",\r\n          value ? qx.bom.String.escape(value + \"\") : \"\"\r\n        );\r\n\r\n      var reg = /^([A-Za-z0-9_\\-.+])+@([A-Za-z0-9_\\-.])+\\.([A-Za-z]{2,})$/;\r\n      if (reg.test(value) === false) {\r\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the function that checks for a string.\r\n     *\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @return {Function} The {@link #checkString} Function.\r\n     */\r\n    string(errorMessage) {\r\n      return function (value) {\r\n        qx.util.Validate.checkString(value, null, errorMessage);\r\n      };\r\n    },\r\n\r\n    /**\r\n     * The function checks the incoming value to see if it is a string.\r\n     * If not, an ValidationError will be thrown.\r\n     * If you want to use the string check in a property definition,\r\n     * use the {@link #string} method.\r\n     *\r\n     * @param value {var} The value to check.\r\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\r\n     *   {@link qx.ui.form.Form}.\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @throws {qx.core.ValidationError} If the value parameter is not a string.\r\n     */\r\n    checkString(value, formItem, errorMessage) {\r\n      errorMessage =\r\n        errorMessage ||\r\n        qx.locale.Manager.tr(\r\n          \"%1 is not a string.\",\r\n          value ? qx.bom.String.escape(value + \"\") : value\r\n        );\r\n\r\n      if (typeof value !== \"string\" && !(value instanceof String)) {\r\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the function that checks for an url.\r\n     *\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @return {Function} The {@link #checkUrl} Function.\r\n     */\r\n    url(errorMessage) {\r\n      return function (value) {\r\n        qx.util.Validate.checkUrl(value, null, errorMessage);\r\n      };\r\n    },\r\n\r\n    /**\r\n     * The function checks the incoming value to see if it is an url.\r\n     * If not, an ValidationError will be thrown.\r\n     * If you want to use the url check in a property definition,\r\n     * use the {@link #url} method.\r\n     *\r\n     * @param value {var} The value to check.\r\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\r\n     *   {@link qx.ui.form.Form}.\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @throws {qx.core.ValidationError} If the value parameter is not an url.\r\n     */\r\n    checkUrl(value, formItem, errorMessage) {\r\n      errorMessage =\r\n        errorMessage ||\r\n        qx.locale.Manager.tr(\r\n          \"%1 is not an url.\",\r\n          value ? qx.bom.String.escape(value + \"\") : value\r\n        );\r\n\r\n      var reg =\r\n        /([A-Za-z0-9])+:\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\r\n      if (!reg.test(value)) {\r\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the function that checks for a color.\r\n     *\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @return {Function} The {@link #checkColor} Function.\r\n     */\r\n    color(errorMessage) {\r\n      return function (value) {\r\n        qx.util.Validate.checkColor(value, null, errorMessage);\r\n      };\r\n    },\r\n\r\n    /**\r\n     * The function checks the incoming value to see if it is a color.\r\n     * If not, an ValidationError will be thrown. The check itself will be\r\n     * delegated to the {@link qx.util.ColorUtil#stringToRgb} method.\r\n     * If you want to use the color check in a property definition,\r\n     * use the {@link #color} method.\r\n     *\r\n     * @param value {var} The value to check.\r\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\r\n     *   {@link qx.ui.form.Form}.\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @throws {qx.core.ValidationError} If the value parameter is not a color.\r\n     */\r\n    checkColor(value, formItem, errorMessage) {\r\n      try {\r\n        qx.util.ColorUtil.stringToRgb(value);\r\n      } catch (e) {\r\n        var message =\r\n          errorMessage ||\r\n          qx.locale.Manager.tr(\r\n            \"%1 is not a color! %2\",\r\n            value ? qx.bom.String.escape(value + \"\") : value,\r\n            e\r\n          );\r\n\r\n        throw new qx.core.ValidationError(\"Validation Error\", message);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns a function that checks if the number is in the given range.\r\n     * The range includes the border values.\r\n     * A range from 1 to 2 accepts the values 1 equally as everything up to 2\r\n     * including the 2.\r\n     * If the value given to the returned function is out of the range, a\r\n     * ValidationError will be thrown.\r\n     *\r\n     * @param from {Number} The lower border of the range.\r\n     * @param to {Number} The upper border of the range.\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @return {Function} A function taking one parameter (value).\r\n     */\r\n    range(from, to, errorMessage) {\r\n      return function (value) {\r\n        var message =\r\n          errorMessage ||\r\n          qx.locale.Manager.tr(\r\n            \"%1 is not in the range from [%2, %3].\",\r\n            value ? qx.bom.String.escape(value + \"\") : value,\r\n            from,\r\n            to\r\n          );\r\n\r\n        if (value < from || value > to) {\r\n          throw new qx.core.ValidationError(\"Validation Error\", message);\r\n        }\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Returns a function that checks if the given value is in the array.\r\n     * If the value given to the returned function is not in the array, a\r\n     * ValidationError will be thrown.\r\n     *\r\n     * @param array {Array} The array holding the possibilities.\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @return {Function} A function taking one parameter (value).\r\n     */\r\n    inArray(array, errorMessage) {\r\n      return function (value) {\r\n        var message =\r\n          errorMessage ||\r\n          qx.locale.Manager.tr(\r\n            \"%1 is not in %2\",\r\n            value ? qx.bom.String.escape(value + \"\") : value,\r\n            array\r\n          );\r\n\r\n        if (array.indexOf(value) === -1) {\r\n          throw new qx.core.ValidationError(\"Validation Error\", message);\r\n        }\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Returns a function that checks if the given value fits the RegExp.\r\n     * For testing, the function uses the RegExp.test function.\r\n     * If the value given to the returned function does not fit the RegExp, a\r\n     * ValidationError will be thrown.\r\n     * incoming\r\n     * @param reg {RegExp} The RegExp for the check.\r\n     * @param errorMessage {String?null} Custom error message.\r\n     * @return {Function} A function taking one parameter (value).\r\n     */\r\n    regExp(reg, errorMessage) {\r\n      return function (value) {\r\n        var message =\r\n          errorMessage ||\r\n          qx.locale.Manager.tr(\r\n            \"%1 does not fit %2.\",\r\n            value ? qx.bom.String.escape(value + \"\") : value,\r\n            reg\r\n          );\r\n\r\n        if (!reg.test(value)) {\r\n          throw new qx.core.ValidationError(\"Validation Error\", message);\r\n        }\r\n      };\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kBAAkB,EAAE;IAClCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,MAAM,WAAAA,OAACC,YAAY,EAAE;QACnB,OAAO,UAAUC,KAAK,EAAE;UACtBT,EAAE,CAACU,IAAI,CAACC,QAAQ,CAACC,WAAW,CAACH,KAAK,EAAE,IAAI,EAAED,YAAY,CAAC;QACzD,CAAC;MACH,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,WAAW,WAAAA,YAACH,KAAK,EAAEI,QAAQ,EAAEL,YAAY,EAAE;QACzCA,YAAY,GACVA,YAAY,IACZR,EAAE,CAACc,MAAM,CAACC,OAAO,CAACC,EAAE,CAClB,qBAAqB,EACrBP,KAAK,GAAGT,EAAE,CAACiB,GAAG,CAACC,MAAM,CAACC,MAAM,CAACV,KAAK,GAAG,EAAE,CAAC,GAAGA,KAC7C,CAAC;QAEH,IACG,OAAOA,KAAK,KAAK,QAAQ,IAAI,EAAEA,KAAK,YAAYW,MAAM,CAAC,IACxD,CAACC,QAAQ,CAACZ,KAAK,CAAC,EAChB;UACA,MAAM,IAAIT,EAAE,CAACsB,IAAI,CAACC,eAAe,CAAC,kBAAkB,EAAEf,YAAY,CAAC;QACrE;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIgB,KAAK,WAAAA,MAAChB,YAAY,EAAE;QAClB,OAAO,UAAUC,KAAK,EAAE;UACtBT,EAAE,CAACU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"
}