{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "number",
    "errorMessage",
    "value",
    "util",
    "Validate",
    "checkNumber",
    "formItem",
    "locale",
    "Manager",
    "tr",
    "bom",
    "String",
    "escape",
    "Number",
    "isFinite",
    "core",
    "ValidationError",
    "email",
    "checkEmail",
    "reg",
    "test",
    "string",
    "checkString",
    "url",
    "checkUrl",
    "color",
    "checkColor",
    "ColorUtil",
    "stringToRgb",
    "e",
    "message",
    "range",
    "from",
    "to",
    "inArray",
    "array",
    "indexOf",
    "regExp"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/Validate.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\n\n/**\n * This static class contains a set of default validators.\n * These validators are listed twice\n * <ul>\n *   <li>number</li>\n *   <li>email</li>\n *   <li>string</li>\n *   <li>url</li>\n *   <li>color</li>\n * </ul>\n * All these validators don't need an input so the listed function just return a\n * method fitting for the use in the property system.\n * The methods with the check prefix are the returned methods and can be used in\n * other contexts without the property system.\n *\n * There are three more validators\n * <ul>\n *   <li>range</li>\n *   <li>inArray</li>\n *   <li>regExp</li>\n * </ul>\n * These methods do need some addition parameters to specify the validator. So\n * there is no check function which you can use in other contexts because the\n * check function for the validation is created based on the given parameter.\n *\n * *Example usage for a property*\n *\n * <code>validate: qx.util.Validate.number()</code>\n * <br>\n * <code>validate: qx.util.Validate.range(0, 100)</code>\n *\n * Because the methods without the check prefix return a validation method,\n * the function must be called at the property definition. So don't forget the\n * ending brackets for those methods without parameters!\n * For the correct usage, take an additional look at the documentation of the\n * {@link qx.core.Property} class.\n */\nqx.Class.define(\"qx.util.Validate\", {\n  statics: {\n    /**\n     * Returns the function that checks for a number.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkNumber} Function.\n     */\n    number(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkNumber(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is a number.\n     * If not, an ValidationError will be thrown.\n     * If you want to use the number check in a property definition,\n     * use the {@link #number} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?undefined} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not a\n     *    finite number\n     */\n    checkNumber(value, formItem, errorMessage) {\n      errorMessage =\n        errorMessage ||\n        qx.locale.Manager.tr(\n          \"%1 is not a number.\",\n          value ? qx.bom.String.escape(value + \"\") : value\n        );\n\n      if (\n        (typeof value !== \"number\" && !(value instanceof Number)) ||\n        !isFinite(value)\n      ) {\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\n      }\n    },\n\n    /**\n     * Returns the function that checks for an email address.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkEmail} Function.\n     */\n    email(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkEmail(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is an email address.\n     * If not, an ValidationError will be thrown.\n     * If you want to use the email check in a property definition,\n     * use the {@link #email} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?null} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not\n     *    a valid email address.\n     */\n    checkEmail(value, formItem, errorMessage) {\n      errorMessage =\n        errorMessage ||\n        qx.locale.Manager.tr(\n          \"'%1' is not an email address.\",\n          value ? qx.bom.String.escape(value + \"\") : \"\"\n        );\n\n      var reg = /^([A-Za-z0-9_\\-.+])+@([A-Za-z0-9_\\-.])+\\.([A-Za-z]{2,})$/;\n      if (reg.test(value) === false) {\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\n      }\n    },\n\n    /**\n     * Returns the function that checks for a string.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkString} Function.\n     */\n    string(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkString(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is a string.\n     * If not, an ValidationError will be thrown.\n     * If you want to use the string check in a property definition,\n     * use the {@link #string} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?null} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not a string.\n     */\n    checkString(value, formItem, errorMessage) {\n      errorMessage =\n        errorMessage ||\n        qx.locale.Manager.tr(\n          \"%1 is not a string.\",\n          value ? qx.bom.String.escape(value + \"\") : value\n        );\n\n      if (typeof value !== \"string\" && !(value instanceof String)) {\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\n      }\n    },\n\n    /**\n     * Returns the function that checks for an url.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkUrl} Function.\n     */\n    url(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkUrl(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is an url.\n     * If not, an ValidationError will be thrown.\n     * If you want to use the url check in a property definition,\n     * use the {@link #url} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?null} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not an url.\n     */\n    checkUrl(value, formItem, errorMessage) {\n      errorMessage =\n        errorMessage ||\n        qx.locale.Manager.tr(\n          \"%1 is not an url.\",\n          value ? qx.bom.String.escape(value + \"\") : value\n        );\n\n      var reg =\n        /([A-Za-z0-9])+:\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n      if (!reg.test(value)) {\n        throw new qx.core.ValidationError(\"Validation Error\", errorMessage);\n      }\n    },\n\n    /**\n     * Returns the function that checks for a color.\n     *\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} The {@link #checkColor} Function.\n     */\n    color(errorMessage) {\n      return function (value) {\n        qx.util.Validate.checkColor(value, null, errorMessage);\n      };\n    },\n\n    /**\n     * The function checks the incoming value to see if it is a color.\n     * If not, an ValidationError will be thrown. The check itself will be\n     * delegated to the {@link qx.util.ColorUtil#stringToRgb} method.\n     * If you want to use the color check in a property definition,\n     * use the {@link #color} method.\n     *\n     * @param value {var} The value to check.\n     * @param formItem {qx.ui.form.IForm} The form item to check if used in a\n     *   {@link qx.ui.form.Form}.\n     * @param errorMessage {String?null} Custom error message.\n     * @throws {qx.core.ValidationError} If the value parameter is not a color.\n     */\n    checkColor(value, formItem, errorMessage) {\n      try {\n        qx.util.ColorUtil.stringToRgb(value);\n      } catch (e) {\n        var message =\n          errorMessage ||\n          qx.locale.Manager.tr(\n            \"%1 is not a color! %2\",\n            value ? qx.bom.String.escape(value + \"\") : value,\n            e\n          );\n\n        throw new qx.core.ValidationError(\"Validation Error\", message);\n      }\n    },\n\n    /**\n     * Returns a function that checks if the number is in the given range.\n     * The range includes the border values.\n     * A range from 1 to 2 accepts the values 1 equally as everything up to 2\n     * including the 2.\n     * If the value given to the returned function is out of the range, a\n     * ValidationError will be thrown.\n     *\n     * @param from {Number} The lower border of the range.\n     * @param to {Number} The upper border of the range.\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} A function taking one parameter (value).\n     */\n    range(from, to, errorMessage) {\n      return function (value) {\n        var message =\n          errorMessage ||\n          qx.locale.Manager.tr(\n            \"%1 is not in the range from [%2, %3].\",\n            value ? qx.bom.String.escape(value + \"\") : value,\n            from,\n            to\n          );\n\n        if (value < from || value > to) {\n          throw new qx.core.ValidationError(\"Validation Error\", message);\n        }\n      };\n    },\n\n    /**\n     * Returns a function that checks if the given value is in the array.\n     * If the value given to the returned function is not in the array, a\n     * ValidationError will be thrown.\n     *\n     * @param array {Array} The array holding the possibilities.\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} A function taking one parameter (value).\n     */\n    inArray(array, errorMessage) {\n      return function (value) {\n        var message =\n          errorMessage ||\n          qx.locale.Manager.tr(\n            \"%1 is not in %2\",\n            value ? qx.bom.String.escape(value + \"\") : value,\n            array\n          );\n\n        if (array.indexOf(value) === -1) {\n          throw new qx.core.ValidationError(\"Validation Error\", message);\n        }\n      };\n    },\n\n    /**\n     * Returns a function that checks if the given value fits the RegExp.\n     * For testing, the function uses the RegExp.test function.\n     * If the value given to the returned function does not fit the RegExp, a\n     * ValidationError will be thrown.\n     * incoming\n     * @param reg {RegExp} The RegExp for the check.\n     * @param errorMessage {String?null} Custom error message.\n     * @return {Function} A function taking one parameter (value).\n     */\n    regExp(reg, errorMessage) {\n      return function (value) {\n        var message =\n          errorMessage ||\n          qx.locale.Manager.tr(\n            \"%1 does not fit %2.\",\n            value ? qx.bom.String.escape(value + \"\") : value,\n            reg\n          );\n\n        if (!reg.test(value)) {\n          throw new qx.core.ValidationError(\"Validation Error\", message);\n        }\n      };\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kBAAkB,EAAE;IAClCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,MAAM,kBAACC,YAAY,EAAE;QACnB,OAAO,UAAUC,KAAK,EAAE;UACtBT,EAAE,CAACU,IAAI,CAACC,QAAQ,CAACC,WAAW,CAACH,KAAK,EAAE,IAAI,EAAED,YAAY,CAAC;QACzD,CAAC;MACH,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,WAAW,uBAACH,KAAK,EAAEI,QAAQ,EAAEL,YAAY,EAAE;QACzCA,YAAY,GACVA,YAAY,IACZR,EAAE,CAACc,MAAM,CAACC,OAAO,CAACC,EAAE,CAClB,qBAAqB,EACrBP,KAAK,GAAGT,EAAE,CAACiB,GAAG,CAACC,MAAM,CAACC,MAAM,CAACV,KAAK,GAAG,EAAE,CAAC,GAAGA,KAAK,CACjD;QAEH,IACG,OAAOA,KAAK,KAAK,QAAQ,IAAI,EAAEA,KAAK,YAAYW,MAAM,CAAC,IACxD,CAACC,QAAQ,CAACZ,KAAK,CAAC,EAChB;UACA,MAAM,IAAIT,EAAE,CAACsB,IAAI,CAACC,eAAe,CAAC,kBAAkB,EAAEf,YAAY,CAAC;QACrE;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIgB,KAAK,iBAAChB,YAAY,EAAE;QAClB,OAAO,UAAUC,KAAK,EAAE;UACtBT,EAAE,CAACU,IAAI,CAACC,QAA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"
}