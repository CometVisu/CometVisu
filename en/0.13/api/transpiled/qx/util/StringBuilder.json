{
  "className": "qx.util.StringBuilder",
  "packageName": "qx.util",
  "name": "StringBuilder",
  "superClass": "qx.type.BaseArray",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0,
        "index": 971
      },
      "end": {
        "line": 125,
        "column": 3,
        "index": 3291
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>A string builder class\n += operator is faster in Firefox and Opera.\n Array push/join is faster in Internet Explorer\n Even with this wrapper, which costs some time, this is\n faster in Firefox than the alternative Array concat in\n all browsers (which is in relation to IE's performance issues\n only marginal). The IE performance loss caused by this\n wrapper is not relevant.\n So this class seems to be the best compromise to handle\n string concatenation.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 59,
        "column": 2,
        "index": 1904
      },
      "end": {
        "line": 61,
        "column": 3,
        "index": 1982
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Creates a new StringBuilder with the given length or as a concatenation of the given arguments substrings.\n </p>\n<pre class=\"javascript\">\n var sb1 = new qx.util.StringBuilder(length);\n var sb2 = new qx.util.StringBuilder(item0, item1, ..., itemN);\n </pre>\n<ul>\n<li><code>length</code>: The initial length of the StringBuilder.</li>\n<li><code>itemN</code>:  A substring that will make up the newly created StringBuilder.\nThe StringBuilder's length property is set to the number of arguments.</li>\n</ul>"
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "length_or_items {Integer|var?null} The initial length of the StringBuilder\n        OR an argument list of values.",
          "paramName": "length_or_items",
          "description": " The initial length of the StringBuilder\n        OR an argument list of values.",
          "optional": true,
          "defaultValue": "null",
          "type": [
            "Integer",
            "var"
          ]
        }
      ]
    }
  },
  "members": {
    "clear": {
      "location": {
        "start": {
          "line": 74,
          "column": 4,
          "index": 2235
        },
        "end": {
          "line": 76,
          "column": 5,
          "index": 2273
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all content</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "get": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2383
        },
        "end": {
          "line": 85,
          "column": 5,
          "index": 2424
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the concatted strings.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Concatted strings",
            "type": "String",
            "description": " Concatted strings"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "add": {
      "location": {
        "start": {
          "line": 93,
          "column": 4,
          "index": 2603
        },
        "end": {
          "line": 93,
          "column": 13,
          "index": 2612
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Adds new strings. Supports multiple arguments.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(varargs)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {String} The separate strings to add",
            "paramName": "varargs",
            "description": " The separate strings to add",
            "type": "String"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "isEmpty": {
      "location": {
        "start": {
          "line": 100,
          "column": 4,
          "index": 2754
        },
        "end": {
          "line": 102,
          "column": 5,
          "index": 2803
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether the string builder is empty</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> when the builder is empty",
            "type": "Boolean",
            "description": " <code>true</code> when the builder is empty"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "size": {
      "location": {
        "start": {
          "line": 109,
          "column": 4,
          "index": 2915
        },
        "end": {
          "line": 111,
          "column": 5,
          "index": 2964
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the size of the strings</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The string length",
            "type": "Integer",
            "description": " The string length"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 120,
        "column": 2,
        "index": 3155
      },
      "end": {
        "line": 124,
        "column": 3,
        "index": 3287
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}