{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "type",
    "BaseArray",
    "construct",
    "length_or_items",
    "apply",
    "arguments",
    "members",
    "clear",
    "length",
    "get",
    "join",
    "add",
    "isEmpty",
    "size",
    "defer",
    "statics",
    "push",
    "toString",
    "valueOf",
    "util",
    "StringBuilder"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/StringBuilder.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A string builder class\r\n *\r\n * += operator is faster in Firefox and Opera.\r\n * Array push/join is faster in Internet Explorer\r\n *\r\n * Even with this wrapper, which costs some time, this is\r\n * faster in Firefox than the alternative Array concat in\r\n * all browsers (which is in relation to IE's performance issues\r\n * only marginal). The IE performance loss caused by this\r\n * wrapper is not relevant.\r\n *\r\n * So this class seems to be the best compromise to handle\r\n * string concatenation.\r\n */\r\nqx.Class.define(\"qx.util.StringBuilder\", {\r\n  extend: qx.type.BaseArray,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * Creates a new StringBuilder with the given length or as a concatenation of the given arguments substrings.\r\n   *\r\n   * <pre class=\"javascript\">\r\n   * var sb1 = new qx.util.StringBuilder(length);\r\n   * var sb2 = new qx.util.StringBuilder(item0, item1, ..., itemN);\r\n   * </pre>\r\n   *\r\n   *\r\n   * * <code>length</code>: The initial length of the StringBuilder.\r\n   * * <code>itemN</code>:  A substring that will make up the newly created StringBuilder.\r\n   * The StringBuilder's length property is set to the number of arguments.\r\n   *\r\n   * @param length_or_items {Integer|var?null} The initial length of the StringBuilder\r\n   *        OR an argument list of values.\r\n   */\r\n  construct(length_or_items) {\r\n    qx.type.BaseArray.apply(this, arguments);\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n    MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Removes all content\r\n     *\r\n     */\r\n    clear() {\r\n      this.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Returns the concatted strings.\r\n     *\r\n     * @return {String} Concatted strings\r\n     */\r\n    get() {\r\n      return this.join(\"\");\r\n    },\r\n\r\n    /**\r\n     * Adds new strings. Supports multiple arguments.\r\n     *\r\n     * @signature function(varargs)\r\n     * @param varargs {String} The separate strings to add\r\n     */\r\n    add: null,\r\n\r\n    /**\r\n     * Whether the string builder is empty\r\n     *\r\n     * @return {Boolean} <code>true</code> when the builder is empty\r\n     */\r\n    isEmpty() {\r\n      return this.length === 0;\r\n    },\r\n\r\n    /**\r\n     * Returns the size of the strings\r\n     *\r\n     * @return {Integer} The string length\r\n     */\r\n    size() {\r\n      return this.join(\"\").length;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DEFER\r\n  *****************************************************************************\r\n  */\r\n\r\n  defer(statics, members) {\r\n    members.add = members.push;\r\n    members.toString = members.get;\r\n    members.valueOf = members.get;\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,uBAAuB,EAAE;IACvCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,SAAS;IAEzB;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,eAAe,EAAE;MACzBV,EAAE,CAACO,IAAI,CAACC,SAAS,CAACG,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC1C,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;MACIC,KAAK,WAAAA,MAAA,EAAG;QACN,IAAI,CAACC,MAAM,GAAG,CAAC;MACjB,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,GAAG,WAAAA,IAAA,EAAG;QACJ,OAAO,IAAI,CAACC,IAAI,CAAC,EAAE,CAAC;MACtB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,GAAG,EAAE,IAAI;MAET;AACJ;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAAA,EAAG;QACR,OAAO,IAAI,CAACJ,MAAM,KAAK,CAAC;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIK,IAAI,WAAAA,KAAA,EAAG;QACL,OAAO,IAAI,CAACH,IAAI,CAAC,EAAE,CAAC,CAACF,MAAM;MAC7B;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEEM,KAAK,WAAAA,MAACC,OAAO,EAAET,OAAO,EAAE;MACtBA,OAAO,CAACK,GAAG,GAAGL,OAAO,CAACU,IAAI;MAC1BV,OAAO,CAACW,QAAQ,GAAGX,OAAO,CAACG,GAAG;MAC9BH,OAAO,CAACY,OAAO,GAAGZ,OAAO,CAACG,GAAG;IAC/B;EACF,CAAC,CAAC;EA5HFhB,EAAE,CAAC0B,IAAI,CAACC,aAAa,CAACxB,aAAa,GAAGA,aAAa;AAAC"
}