{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "implement",
    "IDisposable",
    "construct",
    "__calls",
    "__timeoutWrapper",
    "lang",
    "Function",
    "bind",
    "__timeout",
    "__hasCalls",
    "members",
    "__timeoutId",
    "__currentQueue",
    "schedule",
    "deferredCall",
    "window",
    "setTimeout",
    "callKey",
    "toHashCode",
    "refreshTimeout",
    "cancel",
    "isEmpty",
    "clearTimeout",
    "event",
    "GlobalError",
    "observeMethod",
    "clone",
    "key",
    "call",
    "destruct",
    "util",
    "DeferredCallManager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/DeferredCallManager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class manages the timer used for deferred calls. All\n * {@link qx.util.DeferredCall} instances use the single timer from this class.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.util.DeferredCallManager\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    this.__calls = {};\n    this.__timeoutWrapper = qx.lang.Function.bind(this.__timeout, this);\n    this.__hasCalls = false;\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __timeoutId: null,\n    __currentQueue: null,\n    __calls: null,\n    __hasCalls: null,\n    __timeoutWrapper: null,\n\n    /**\n     * Schedule a deferred call\n     *\n     * @param deferredCall {qx.util.DeferredCall} The call to schedule\n     */\n    schedule(deferredCall) {\n      if (this.__timeoutId == null) {\n        this.__timeoutId = window.setTimeout(this.__timeoutWrapper, 0);\n      }\n\n      var callKey = deferredCall.toHashCode();\n\n      // the flush is currently running and the call is already\n      // scheduled\n      if (this.__currentQueue && this.__currentQueue[callKey]) {\n        return;\n      }\n\n      this.__calls[callKey] = deferredCall;\n      this.__hasCalls = true;\n    },\n\n    /**\n     * Refresh the timeout if the current one is not active anymore.\n     * This is a very special case which can happen in unit tests using\n     * fakeTimers, which overrides the window.setTimeout function (amongst others)\n     * after restoring the sinon sandbox the timeout must be refreshed otherwise\n     * DeferredCalls would never fire.\n     */\n    refreshTimeout() {\n      if (this.__timeoutId !== null) {\n        this.__timeoutId = window.setTimeout(this.__timeoutWrapper, 0);\n      }\n    },\n\n    /**\n     * Cancel a scheduled deferred call\n     *\n     * @param deferredCall {qx.util.DeferredCall} The call to schedule\n     */\n    cancel(deferredCall) {\n      var callKey = deferredCall.toHashCode();\n\n      // the flush is currently running and the call is already\n      // scheduled -> remove it from the current queue\n      if (this.__currentQueue && this.__currentQueue[callKey]) {\n        this.__currentQueue[callKey] = null;\n        return;\n      }\n\n      delete this.__calls[callKey];\n\n      // stop timer if no other calls are waiting\n      if (qx.lang.Object.isEmpty(this.__calls) && this.__timeoutId != null) {\n        window.clearTimeout(this.__timeoutId);\n        this.__timeoutId = null;\n      }\n    },\n\n    /**\n     * Helper function for the timer.\n     *\n     * @signature function()\n     */\n    __timeout: qx.event.GlobalError.observeMethod(function () {\n      this.__timeoutId = null;\n\n      // the queue may change while doing the flush so we work on a copy of\n      // the queue and loop while the queue has any entries.\n      while (this.__hasCalls) {\n        this.__currentQueue = qx.lang.Object.clone(this.__calls);\n        this.__calls = {};\n        this.__hasCalls = false;\n\n        for (var key in this.__currentQueue) {\n          var call = this.__currentQueue[key];\n          if (call) {\n            this.__currentQueue[key] = null;\n            call.call();\n          }\n        }\n      }\n\n      this.__currentQueue = null;\n    })\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    if (this.__timeoutId != null) {\n      window.clearTimeout(this.__timeoutId);\n    }\n    this.__timeoutWrapper = this.__calls = null;\n  }\n});\n"
  ],
  "mappings": "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"
}