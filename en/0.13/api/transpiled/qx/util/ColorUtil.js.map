{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "REGEXP",
    "hexShort",
    "hexLong",
    "hex3",
    "hex6",
    "rgb",
    "rgba",
    "SYSTEM",
    "activeborder",
    "activecaption",
    "appworkspace",
    "background",
    "buttonface",
    "buttonhighlight",
    "buttonshadow",
    "buttontext",
    "captiontext",
    "graytext",
    "highlight",
    "highlighttext",
    "inactiveborder",
    "inactivecaption",
    "inactivecaptiontext",
    "infobackground",
    "infotext",
    "menu",
    "menutext",
    "scrollbar",
    "threeddarkshadow",
    "threedface",
    "threedhighlight",
    "threedlightshadow",
    "threedshadow",
    "window",
    "windowframe",
    "windowtext",
    "NAMED",
    "black",
    "silver",
    "gray",
    "white",
    "maroon",
    "red",
    "purple",
    "fuchsia",
    "green",
    "lime",
    "olive",
    "yellow",
    "navy",
    "blue",
    "teal",
    "aqua",
    "transparent",
    "magenta",
    "orange",
    "brown",
    "isNamedColor",
    "value",
    "undefined",
    "isSystemColor",
    "supportsThemes",
    "Class",
    "isDefined",
    "isThemedColor",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "isDynamic",
    "stringToRgb",
    "str",
    "resolveDynamic",
    "cssStringToRgb",
    "color",
    "concat",
    "Error",
    "isRgbaString",
    "__rgbaStringToRgb",
    "isRgbString",
    "__rgbStringToRgb",
    "ishexShortString",
    "__hexShortStringToRgb",
    "ishexLongString",
    "__hexLongStringToRgb",
    "length",
    "pop",
    "stringToRgbString",
    "rgbToRgbString",
    "map",
    "v",
    "Math",
    "round",
    "join",
    "rgbToHexString",
    "lang",
    "String",
    "pad",
    "toString",
    "toUpperCase",
    "isValidPropertyValue",
    "isCssString",
    "test",
    "isHex3String",
    "isHex6String",
    "__P_500_1",
    "parseInt",
    "RegExp",
    "$1",
    "$2",
    "$3",
    "__P_500_0",
    "alpha",
    "parseFloat",
    "$4",
    "__P_500_2",
    "__hex3StringToRgb",
    "__P_500_4",
    "__hex6StringToRgb",
    "__P_500_5",
    "$5",
    "$6",
    "__P_500_3",
    "hex3StringToRgb",
    "hex3StringToHex6String",
    "hex6StringToRgb",
    "hexStringToRgb",
    "rgbToHsb",
    "hue",
    "saturation",
    "brightness",
    "cmax",
    "cmin",
    "redc",
    "greenc",
    "bluec",
    "hsbToRgb",
    "hsb",
    "i",
    "f",
    "p",
    "r",
    "t",
    "tov",
    "floor",
    "rgbToHsl",
    "g",
    "b",
    "a",
    "max",
    "n",
    "min",
    "abs",
    "h",
    "hslToRgb",
    "hsl",
    "s",
    "l",
    "k",
    "randomColor",
    "random",
    "__tuner",
    "__P_500_6",
    "tuneMap",
    "tuner",
    "hue_tuner",
    "key",
    "forEach",
    "scale",
    "scaleMap",
    "adjust",
    "adjustMap",
    "offset",
    "luminance",
    "lum",
    "c",
    "pow",
    "contrast",
    "back",
    "front",
    "bl",
    "fl",
    "chooseContrastingColor",
    "threshold",
    "dark",
    "light",
    "util",
    "ColorUtil",
    "yiq"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ColorUtil.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Christian Hagendorn (cs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Methods to convert colors between different color spaces.\r\n *\r\n * @ignore(qx.theme.*)\r\n * @ignore(qx.Class)\r\n * @ignore(qx.Class.*)\r\n */\r\nqx.Bootstrap.define(\"qx.util.ColorUtil\", {\r\n  statics: {\r\n    /**\r\n     * Regular expressions for color strings\r\n     */\r\n    REGEXP: {\r\n      hexShort: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?$/,\r\n      hexLong:\r\n        /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?$/,\r\n      hex3: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/,\r\n      hex6: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/,\r\n      rgb: /^rgb\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*\\)$/,\r\n      rgba: /^rgba\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,2}[0-9]*)\\s*\\)$/\r\n    },\r\n\r\n    /**\r\n     * CSS3 system color names.\r\n     */\r\n    SYSTEM: {\r\n      activeborder: true,\r\n      activecaption: true,\r\n      appworkspace: true,\r\n      background: true,\r\n      buttonface: true,\r\n      buttonhighlight: true,\r\n      buttonshadow: true,\r\n      buttontext: true,\r\n      captiontext: true,\r\n      graytext: true,\r\n      highlight: true,\r\n      highlighttext: true,\r\n      inactiveborder: true,\r\n      inactivecaption: true,\r\n      inactivecaptiontext: true,\r\n      infobackground: true,\r\n      infotext: true,\r\n      menu: true,\r\n      menutext: true,\r\n      scrollbar: true,\r\n      threeddarkshadow: true,\r\n      threedface: true,\r\n      threedhighlight: true,\r\n      threedlightshadow: true,\r\n      threedshadow: true,\r\n      window: true,\r\n      windowframe: true,\r\n      windowtext: true\r\n    },\r\n\r\n    /**\r\n     * Named colors, only the 16 basic colors plus the following ones:\r\n     * transparent, grey, magenta, orange and brown\r\n     */\r\n    NAMED: {\r\n      black: [0, 0, 0],\r\n      silver: [192, 192, 192],\r\n      gray: [128, 128, 128],\r\n      white: [255, 255, 255],\r\n      maroon: [128, 0, 0],\r\n      red: [255, 0, 0],\r\n      purple: [128, 0, 128],\r\n      fuchsia: [255, 0, 255],\r\n      green: [0, 128, 0],\r\n      lime: [0, 255, 0],\r\n      olive: [128, 128, 0],\r\n      yellow: [255, 255, 0],\r\n      navy: [0, 0, 128],\r\n      blue: [0, 0, 255],\r\n      teal: [0, 128, 128],\r\n      aqua: [0, 255, 255],\r\n\r\n      // Additional values\r\n      transparent: [-1, -1, -1],\r\n      magenta: [255, 0, 255], // alias for fuchsia\r\n      orange: [255, 165, 0],\r\n      brown: [165, 42, 42]\r\n    },\r\n\r\n    /**\r\n     * Whether the incoming value is a named color.\r\n     *\r\n     * @param value {String} the color value to test\r\n     * @return {Boolean} true if the color is a named color\r\n     */\r\n    isNamedColor(value) {\r\n      return this.NAMED[value] !== undefined;\r\n    },\r\n\r\n    /**\r\n     * Whether the incoming value is a system color.\r\n     *\r\n     * @param value {String} the color value to test\r\n     * @return {Boolean} true if the color is a system color\r\n     */\r\n    isSystemColor(value) {\r\n      return this.SYSTEM[value] !== undefined;\r\n    },\r\n\r\n    /**\r\n     * Whether the color theme manager is loaded. Generally\r\n     * part of the GUI of qooxdoo.\r\n     *\r\n     * @return {Boolean} <code>true</code> when color theme support is ready.\r\n     **/\r\n    supportsThemes() {\r\n      if (qx.Class) {\r\n        return qx.Class.isDefined(\"qx.theme.manager.Color\");\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Whether the incoming value is a themed color.\r\n     *\r\n     * @param value {String} the color value to test\r\n     * @return {Boolean} true if the color is a themed color\r\n     */\r\n    isThemedColor(value) {\r\n      if (!this.supportsThemes()) {\r\n        return false;\r\n      }\r\n\r\n      if (qx.theme && qx.theme.manager && qx.theme.manager.Color) {\r\n        return qx.theme.manager.Color.getInstance().isDynamic(value);\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Try to convert an incoming string to an RGBA array.\r\n     * Supports themed, named and system colors, but also RGBA strings,\r\n     * hex[3468] values.\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Array} returns an array of red, green, blue and optional alpha on a successful transformation\r\n     * @throws {Error} if the string could not be parsed\r\n     */\r\n    stringToRgb(str) {\r\n      if (this.supportsThemes() && this.isThemedColor(str)) {\r\n        str = qx.theme.manager.Color.getInstance().resolveDynamic(str);\r\n      }\r\n      return this.cssStringToRgb(str);\r\n    },\r\n\r\n    /**\r\n     * Try to convert an incoming string to an RGB array with optional alpha.\r\n     * Support named colors, RGB strings, RGBA strings, hex[3468] values.\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Array} returns an array of red, green, blue on a successful transformation\r\n     * @throws {Error} if the string could not be parsed\r\n     */\r\n    cssStringToRgb(str) {\r\n      var color;\r\n      if (this.isNamedColor(str)) {\r\n        color = this.NAMED[str].concat();\r\n      } else if (this.isSystemColor(str)) {\r\n        throw new Error(\"Could not convert system colors to RGB: \" + str);\r\n      } else if (this.isRgbaString(str)) {\r\n        color = this.__rgbaStringToRgb(str);\r\n      } else if (this.isRgbString(str)) {\r\n        color = this.__rgbStringToRgb();\r\n      } else if (this.ishexShortString(str)) {\r\n        color = this.__hexShortStringToRgb();\r\n      } else if (this.ishexLongString(str)) {\r\n        color = this.__hexLongStringToRgb();\r\n      }\r\n      if (color) {\r\n        // don't mention alpha if the color is opaque\r\n        if (color.length === 3 && color[3] == 1) {\r\n          color.pop();\r\n        }\r\n        return color;\r\n      }\r\n      throw new Error(\"Could not parse color: \" + str);\r\n    },\r\n\r\n    /**\r\n     * Try to convert an incoming string to an RGB string, which can be used\r\n     * for all color properties.\r\n     * Supports themed, named and system colors, but also RGB strings,\r\n     * hexShort and hexLong values.\r\n     *\r\n     * @param str {String} any string\r\n     * @return {String} a RGB string\r\n     * @throws {Error} if the string could not be parsed\r\n     */\r\n    stringToRgbString(str) {\r\n      return this.rgbToRgbString(this.stringToRgb(str));\r\n    },\r\n\r\n    /**\r\n     * Converts a RGB array to an RGB string\r\n     *\r\n     * @param rgb {Array} an array with red, green and blue values and optionally\r\n     * an alpha value\r\n     * @return {String} an RGB string\r\n     */\r\n    rgbToRgbString(rgb) {\r\n      return (\r\n        \"rgb\" +\r\n        (rgb.length === 4 ? \"a\" : \"\") +\r\n        \"(\" +\r\n        rgb\r\n          .map(function (v) {\r\n            return Math.round(v * 1000) / 1000;\r\n          })\r\n          .join(\",\") +\r\n        \")\"\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Converts a RGB array to a hex[68] string\r\n     *\r\n     * @param rgb {Array} an array with red, green, blue and optional alpha\r\n     * @return {String} a hex[68] string (#xxxxxx)\r\n     */\r\n    rgbToHexString(rgb) {\r\n      return (\r\n        \"#\" +\r\n        qx.lang.String.pad(rgb[0].toString(16).toUpperCase(), 2) +\r\n        qx.lang.String.pad(rgb[1].toString(16).toUpperCase(), 2) +\r\n        qx.lang.String.pad(rgb[2].toString(16).toUpperCase(), 2) +\r\n        (rgb.length === 4 && rgb[3] !== 1\r\n          ? qx.lang.String.pad(\r\n              Math.round(rgb[3] * 255)\r\n                .toString(16)\r\n                .toUpperCase(),\r\n              2\r\n            )\r\n          : \"\")\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Detects if a string is a valid qooxdoo color\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Boolean} true when the incoming value is a valid qooxdoo color\r\n     */\r\n    isValidPropertyValue(str) {\r\n      return (\r\n        this.isThemedColor(str) ||\r\n        this.isNamedColor(str) ||\r\n        this.ishexShortString(str) ||\r\n        this.ishexLongString(str) ||\r\n        this.isRgbString(str) ||\r\n        this.isRgbaString(str)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Detects if a string is a valid CSS color string\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Boolean} true when the incoming value is a valid CSS color string\r\n     */\r\n    isCssString(str) {\r\n      return (\r\n        this.isSystemColor(str) ||\r\n        this.isNamedColor(str) ||\r\n        this.ishexShortString(str) ||\r\n        this.ishexLongString(str) ||\r\n        this.isRgbString(str) ||\r\n        this.isRgbaString(str)\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Detects if a string is a valid hexShort string\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Boolean} true when the incoming value is a valid hexShort string\r\n     */\r\n    ishexShortString(str) {\r\n      return this.REGEXP.hexShort.test(str);\r\n    },\r\n    /**\r\n     * Detects if a string is a valid hex3 string\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Boolean} true when the incoming value is a valid hex3 string\r\n     */\r\n    isHex3String(str) {\r\n      return this.REGEXP.hex3.test(str);\r\n    },\r\n\r\n    /**\r\n     * Detects if a string is a valid hex6 string\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Boolean} true when the incoming value is a valid hex6 string\r\n     */\r\n    isHex6String(str) {\r\n      return this.REGEXP.hex6.test(str);\r\n    },\r\n\r\n    /**\r\n     * Detects if a string is a valid hex6/8 string\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Boolean} true when the incoming value is a valid hex8 string\r\n     */\r\n    ishexLongString(str) {\r\n      return this.REGEXP.hexLong.test(str);\r\n    },\r\n\r\n    /**\r\n     * Detects if a string is a valid RGB string\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Boolean} true when the incoming value is a valid RGB string\r\n     */\r\n    isRgbString(str) {\r\n      return this.REGEXP.rgb.test(str);\r\n    },\r\n\r\n    /**\r\n     * Detects if a string is a valid RGBA string\r\n     *\r\n     * @param str {String} any string\r\n     * @return {Boolean} true when the incoming value is a valid RGBA string\r\n     */\r\n    isRgbaString(str) {\r\n      return this.REGEXP.rgba.test(str);\r\n    },\r\n\r\n    /**\r\n     * Converts a regexp object match of a rgb string to an RGBA array.\r\n     *\r\n     * @return {Array} an array with red, green, blue\r\n     */\r\n    __rgbStringToRgb() {\r\n      var red = parseInt(RegExp.$1, 10);\r\n      var green = parseInt(RegExp.$2, 10);\r\n      var blue = parseInt(RegExp.$3, 10);\r\n\r\n      return [red, green, blue];\r\n    },\r\n\r\n    /**\r\n     * Converts a regexp object match of a rgba string to an RGB array.\r\n     *\r\n     * @return {Array} an array with red, green, blue\r\n     */\r\n    __rgbaStringToRgb() {\r\n      var red = parseInt(RegExp.$1, 10);\r\n      var green = parseInt(RegExp.$2, 10);\r\n      var blue = parseInt(RegExp.$3, 10);\r\n      var alpha = parseFloat(RegExp.$4, 10);\r\n\r\n      if (red === 0 && (green === 0) & (blue === 0) && alpha === 0) {\r\n        // this is the (pre-alpha) representation of transparency\r\n        // in qooxdoo\r\n        return [-1, -1, -1];\r\n      }\r\n\r\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\r\n    },\r\n\r\n    /**\r\n     * Converts a regexp object match of a hexShort string to an RGB array.\r\n     *\r\n     * @return {Array} an array with red, green, blue\r\n     */\r\n    __hexShortStringToRgb() {\r\n      var red = parseInt(RegExp.$1, 16) * 17;\r\n      var green = parseInt(RegExp.$2, 16) * 17;\r\n      var blue = parseInt(RegExp.$3, 16) * 17;\r\n      var alpha =\r\n        Math.round((parseInt(RegExp.$4 || \"f\", 16) / 15) * 1000) / 1000;\r\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\r\n    },\r\n\r\n    /**\r\n     * Converts a regexp object match of a hex3 string to an RGB array.\r\n     *\r\n     * @return {Array} an array with red, green, blue\r\n     */\r\n    __hex3StringToRgb() {\r\n      var red = parseInt(RegExp.$1, 16) * 17;\r\n      var green = parseInt(RegExp.$2, 16) * 17;\r\n      var blue = parseInt(RegExp.$3, 16) * 17;\r\n\r\n      return [red, green, blue];\r\n    },\r\n\r\n    /**\r\n     * Converts a regexp object match of a hex6 string to an RGB array.\r\n     *\r\n     * @return {Array} an array with red, green, blue\r\n     */\r\n    __hex6StringToRgb() {\r\n      var red = parseInt(RegExp.$1, 16) * 16 + parseInt(RegExp.$2, 16);\r\n      var green = parseInt(RegExp.$3, 16) * 16 + parseInt(RegExp.$4, 16);\r\n      var blue = parseInt(RegExp.$5, 16) * 16 + parseInt(RegExp.$6, 16);\r\n\r\n      return [red, green, blue];\r\n    },\r\n\r\n    /**\r\n     * Converts a regexp object match of a hexLong string to an RGB array.\r\n     *\r\n     * @return {Array} an array with red, green, blue\r\n     */\r\n    __hexLongStringToRgb() {\r\n      var red = parseInt(RegExp.$1, 16);\r\n      var green = parseInt(RegExp.$2, 16);\r\n      var blue = parseInt(RegExp.$3, 16);\r\n      var alpha =\r\n        Math.round((parseInt(RegExp.$4 || \"ff\", 16) / 255) * 1000) / 1000;\r\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\r\n    },\r\n\r\n    /**\r\n     * Converts a hex3 string to an RGB array\r\n     *\r\n     * @param value {String} a hex3 (#xxx) string\r\n     * @return {Array} an array with red, green, blue\r\n     */\r\n    hex3StringToRgb(value) {\r\n      if (this.isHex3String(value)) {\r\n        return this.__hex3StringToRgb(value);\r\n      }\r\n\r\n      throw new Error(\"Invalid hex3 value: \" + value);\r\n    },\r\n\r\n    /**\r\n     * Converts a hex3 (#xxx) string to a hex6 (#xxxxxx) string.\r\n     *\r\n     * @param value {String} a hex3 (#xxx) string\r\n     * @return {String} The hex6 (#xxxxxx) string or the passed value when the\r\n     *   passed value is not an hex3 (#xxx) value.\r\n     */\r\n    hex3StringToHex6String(value) {\r\n      if (this.isHex3String(value)) {\r\n        return this.rgbToHexString(this.hex3StringToRgb(value));\r\n      }\r\n      return value;\r\n    },\r\n\r\n    /**\r\n     * Converts a hex6 string to an RGB array\r\n     *\r\n     * @param value {String} a hex6 (#xxxxxx) string\r\n     * @return {Array} an array with red, green, blue\r\n     */\r\n    hex6StringToRgb(value) {\r\n      if (this.isHex6String(value)) {\r\n        return this.__hex6StringToRgb(value);\r\n      }\r\n\r\n      throw new Error(\"Invalid hex6 value: \" + value);\r\n    },\r\n\r\n    /**\r\n     * Converts a hex string to an RGB array\r\n     *\r\n     * @param value {String} a hexShort (#rgb/#rgba) or hexLong (#rrggbb/#rrggbbaa) string\r\n     * @return {Array} an array with red, green, blue and alpha\r\n     */\r\n    hexStringToRgb(value) {\r\n      if (this.ishexShortString(value)) {\r\n        return this.__hexShortStringToRgb(value);\r\n      }\r\n\r\n      if (this.ishexLongString(value)) {\r\n        return this.__hexLongStringToRgb(value);\r\n      }\r\n\r\n      throw new Error(\"Invalid hex value: \" + value);\r\n    },\r\n\r\n    /**\r\n     * Convert RGB colors to HSB/HSV\r\n     *\r\n     * @param rgb {Number[]} red, blue and green as array\r\n     * @return {Array} an array with hue, saturation and brightness/value\r\n     */\r\n    rgbToHsb(rgb) {\r\n      var hue, saturation, brightness;\r\n\r\n      var red = rgb[0];\r\n      var green = rgb[1];\r\n      var blue = rgb[2];\r\n\r\n      var cmax = red > green ? red : green;\r\n\r\n      if (blue > cmax) {\r\n        cmax = blue;\r\n      }\r\n\r\n      var cmin = red < green ? red : green;\r\n\r\n      if (blue < cmin) {\r\n        cmin = blue;\r\n      }\r\n\r\n      brightness = cmax / 255.0;\r\n\r\n      if (cmax != 0) {\r\n        saturation = (cmax - cmin) / cmax;\r\n      } else {\r\n        saturation = 0;\r\n      }\r\n\r\n      if (saturation == 0) {\r\n        hue = 0;\r\n      } else {\r\n        var redc = (cmax - red) / (cmax - cmin);\r\n        var greenc = (cmax - green) / (cmax - cmin);\r\n        var bluec = (cmax - blue) / (cmax - cmin);\r\n\r\n        if (red == cmax) {\r\n          hue = bluec - greenc;\r\n        } else if (green == cmax) {\r\n          hue = 2.0 + redc - bluec;\r\n        } else {\r\n          hue = 4.0 + greenc - redc;\r\n        }\r\n\r\n        hue = hue / 6.0;\r\n\r\n        if (hue < 0) {\r\n          hue = hue + 1.0;\r\n        }\r\n      }\r\n\r\n      return [\r\n        Math.round(hue * 360),\r\n        Math.round(saturation * 100),\r\n        Math.round(brightness * 100)\r\n      ];\r\n    },\r\n\r\n    /**\r\n     * Convert HSB/HSV colors to RGB\r\n     *\r\n     * @param hsb {Number[]} an array with hue, saturation and brightness/value\r\n     * @return {Integer[]} an array with red, green, blue\r\n     */\r\n    hsbToRgb(hsb) {\r\n      var i, f, p, r, t;\r\n\r\n      var hue = hsb[0] / 360;\r\n      var saturation = hsb[1] / 100;\r\n      var brightness = hsb[2] / 100;\r\n\r\n      if (hue >= 1.0) {\r\n        hue %= 1.0;\r\n      }\r\n\r\n      if (saturation > 1.0) {\r\n        saturation = 1.0;\r\n      }\r\n\r\n      if (brightness > 1.0) {\r\n        brightness = 1.0;\r\n      }\r\n\r\n      var tov = Math.floor(255 * brightness);\r\n      var rgb = {};\r\n\r\n      if (saturation == 0.0) {\r\n        rgb.red = rgb.green = rgb.blue = tov;\r\n      } else {\r\n        hue *= 6.0;\r\n\r\n        i = Math.floor(hue);\r\n\r\n        f = hue - i;\r\n\r\n        p = Math.floor(tov * (1.0 - saturation));\r\n        r = Math.floor(tov * (1.0 - saturation * f));\r\n        t = Math.floor(tov * (1.0 - saturation * (1.0 - f)));\r\n\r\n        switch (i) {\r\n          case 0:\r\n            rgb.red = tov;\r\n            rgb.green = t;\r\n            rgb.blue = p;\r\n            break;\r\n\r\n          case 1:\r\n            rgb.red = r;\r\n            rgb.green = tov;\r\n            rgb.blue = p;\r\n            break;\r\n\r\n          case 2:\r\n            rgb.red = p;\r\n            rgb.green = tov;\r\n            rgb.blue = t;\r\n            break;\r\n\r\n          case 3:\r\n            rgb.red = p;\r\n            rgb.green = r;\r\n            rgb.blue = tov;\r\n            break;\r\n\r\n          case 4:\r\n            rgb.red = t;\r\n            rgb.green = p;\r\n            rgb.blue = tov;\r\n            break;\r\n\r\n          case 5:\r\n            rgb.red = tov;\r\n            rgb.green = p;\r\n            rgb.blue = r;\r\n            break;\r\n        }\r\n      }\r\n\r\n      return [rgb.red, rgb.green, rgb.blue];\r\n    },\r\n\r\n    /**\r\n     * Convert RGB colors to HSL\r\n     *\r\n     * @param rgb {Number[]} red, blue and green as array\r\n     * @return {Array} an array with hue, saturation and lightness\r\n     */\r\n    rgbToHsl(rgb) {\r\n      var r = rgb[0] / 255;\r\n      var g = rgb[1] / 255;\r\n      var b = rgb[2] / 255;\r\n      // implementation from\r\n      // https://stackoverflow.com/questions/2348597/why-doesnt-this-javascript-rgb-to-hsl-code-work/54071699#54071699\r\n      var a = Math.max(r, g, b);\r\n      var n = a - Math.min(r, g, b);\r\n      var f = 1 - Math.abs(a + a - n - 1);\r\n      var h =\r\n        n &&\r\n        (a == r ? (g - b) / n : a == g ? 2 + (b - r) / n : 4 + (r - g) / n);\r\n      return [\r\n        60 * (h < 0 ? h + 6 : h),\r\n        100 * (f ? n / f : 0),\r\n        (100 * (a + a - n)) / 2\r\n      ];\r\n    },\r\n    /**\r\n     * Convert HSL colors to RGB\r\n     *\r\n     * @param hsl {Number[]} an array with hue, saturation and lightness\r\n     * @return {Integer[]} an array with red, green, blue\r\n     */\r\n    hslToRgb(hsl) {\r\n      var h = hsl[0];\r\n      var s = hsl[1] / 100;\r\n      var l = hsl[2] / 100;\r\n      // implementation from\r\n      // https://stackoverflow.com/questions/36721830/convert-hsl-to-rgb-and-hex/54014428#54014428\r\n      var a = s * Math.min(l, 1 - l);\r\n      var f = function (n) {\r\n        var k = (n + h / 30) % 12;\r\n        return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n      };\r\n      return [f(0), f(8), f(4)].map(function (v) {\r\n        return Math.round(v * 2550) / 10;\r\n      });\r\n    },\r\n    /**\r\n     * Creates a random color.\r\n     *\r\n     * @return {String} a valid qooxdoo/CSS rgb color string.\r\n     */\r\n    randomColor() {\r\n      var r = Math.round(Math.random() * 255);\r\n      var g = Math.round(Math.random() * 255);\r\n      var b = Math.round(Math.random() * 255);\r\n\r\n      return this.rgbToRgbString([r, g, b]);\r\n    },\r\n\r\n    /**\r\n     * Tune a color string according to the tuneMap\r\n     *\r\n     * @param color {String} a valid qooxdoo/CSS rgb color string\r\n     * @param scaleMap {Map}  as described above\r\n     * @param tuner {Function}  function\r\n     * @param hue_tuner {Function}  function\r\n     * @return {String} a valid CSS rgb color string.*\r\n     */\r\n    __tuner(color, tuneMap, tuner, hue_tuner) {\r\n      var rgba = this.stringToRgb(color);\r\n      for (var key in tuneMap) {\r\n        if (tuneMap[key] == 0) {\r\n          continue;\r\n        }\r\n        switch (key) {\r\n          case \"red\":\r\n            rgba[0] = tuner(rgba[0], tuneMap[key], 255);\r\n            break;\r\n          case \"green\":\r\n            rgba[1] = tuner(rgba[1], tuneMap[key], 255);\r\n            break;\r\n          case \"blue\":\r\n            rgba[2] = tuner(rgba[2], tuneMap[key], 255);\r\n            break;\r\n          case \"alpha\":\r\n            rgba[3] = tuner(rgba[3] || 1, tuneMap[key], 1);\r\n            break;\r\n          case \"hue\":\r\n            if (hue_tuner) {\r\n              var hsb = this.rgbToHsb(rgba);\r\n              hsb[0] = hue_tuner(hsb[0], tuneMap[key]);\r\n              var rgb = this.hsbToRgb(hsb);\r\n              rgb[3] = rgba[3];\r\n              rgba = rgb;\r\n            } else {\r\n              throw new Error(\"Invalid key in map: \" + key);\r\n            }\r\n            break;\r\n          case \"saturation\":\r\n            var hsb = this.rgbToHsb(rgba);\r\n            hsb[1] = tuner(hsb[1], tuneMap[key], 100);\r\n            rgb = this.hsbToRgb(hsb);\r\n            rgb[3] = rgba[3];\r\n            rgba = rgb;\r\n            break;\r\n          case \"brightness\":\r\n            var hsb = this.rgbToHsb(rgba);\r\n            hsb[2] = tuner(hsb[2], tuneMap[key], 100);\r\n            rgb = this.hsbToRgb(hsb);\r\n            rgb[3] = rgba[3];\r\n            rgba = rgb;\r\n            break;\r\n          case \"lightness\":\r\n            var hsl = this.rgbToHsl(rgba);\r\n            hsl[2] = tuner(hsl[2], tuneMap[key], 100);\r\n            rgb = this.hslToRgb(hsl);\r\n            rgb[3] = rgba[3];\r\n            rgba = rgb;\r\n            break;\r\n          default:\r\n            throw new Error(\"Invalid key in tune map: \" + key);\r\n        }\r\n      }\r\n      if (rgba.length === 4) {\r\n        if (rgba[3] === undefined || rgba[3] >= 1) {\r\n          rgba.pop();\r\n        } else if (rgba[3] < 0) {\r\n          rgba[3] = 0;\r\n        }\r\n      }\r\n      [0, 1, 2].forEach(function (i) {\r\n        if (rgba[i] < 0) {\r\n          rgba[i] = 0;\r\n          return;\r\n        }\r\n        if (rgba[i] > 255) {\r\n          rgba[i] = 255;\r\n          return;\r\n        }\r\n      });\r\n      return this.rgbToRgbString(rgba);\r\n    },\r\n    /**\r\n     * Scale\r\n     *\r\n     * Scale the given properties of the input color according to the\r\n     * configuration given in the `scaleMap`. Each key argument must point to a\r\n     * number between -100% and 100% (inclusive). This indicates how far the\r\n     * corresponding property should be moved from its original position\r\n     * towards the maximum (if the argument is positive) or the minimum (if the\r\n     * argument is negative). This means that, for example, `lightness: \"50%\"`\r\n     * will make all colors 50% closer to maximum lightness without making them\r\n     * fully white.\r\n     *\r\n     * Supported keys are:\r\n     * `red`, `green`, `blue`, `alpha`, `saturation`,\r\n     * `brightness`, `value`, `lightness`.\r\n     *\r\n     * @param color {String}  a valid qooxdoo/CSS rgb color string\r\n     * @param scaleMap {Map}  as described above\r\n     * @return {String} a valid CSS rgb color string.\r\n     */\r\n\r\n    scale(color, scaleMap) {\r\n      return this.__tuner(color, scaleMap, function (value, scale, max) {\r\n        if (value > max) {\r\n          value = max;\r\n        }\r\n        if (scale > 0) {\r\n          if (scale > 100) {\r\n            scale = 100;\r\n          }\r\n          return value + ((max - value) * scale) / 100;\r\n        }\r\n        // scale < 0\r\n        if (scale < -100) {\r\n          scale = -100;\r\n        }\r\n        return value + (value * scale) / 100;\r\n      });\r\n    },\r\n    /**\r\n     * Adjust\r\n     *\r\n     * Increases or decreases one or more properties of the input color\r\n     * by fixed amounts according to the configuration given in the\r\n     * `adjustMap`. The value of the corresponding key is added to the\r\n     * original value and the final result is adjusted to stay within legal\r\n     * bounds. Hue values can go full circle.a1\r\n     *\r\n     * Supported keys are:\r\n     * `red`, `green`, `blue`, `alpha`, `hue`, `saturation`, `brightness`,\r\n     * `lightness`\r\n     *\r\n     * @param color {String} a valid qooxdoo/CSS rgb color string\r\n     * @param scaleMap {Map} as described above\r\n     * @return {String} a valid CSS rgb color string.\r\n     */\r\n    adjust(color, adjustMap) {\r\n      return this.__tuner(\r\n        color,\r\n        adjustMap,\r\n        function (value, offset, max) {\r\n          value += offset;\r\n          if (value > max) {\r\n            return max;\r\n          }\r\n          if (value < 0) {\r\n            return 0;\r\n          }\r\n          return value;\r\n        },\r\n        function (value, offset) {\r\n          value += offset;\r\n          while (value >= 360) {\r\n            value -= 360;\r\n          }\r\n          while (value < 0) {\r\n            value += 360;\r\n          }\r\n          return value;\r\n        }\r\n      );\r\n    },\r\n    /**\r\n     * RgbToLuminance\r\n     *\r\n     * Calculate the [luminance](https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests) of the given rgb color.\r\n     *\r\n     * @param color {String} a valid qooxdoo/CSS rgb color string\r\n     * @return {Number} luminance\r\n     */\r\n    luminance(color) {\r\n      var rgb = this.stringToRgb(color);\r\n      var lum = function (i) {\r\n        var c = rgb[i] / 255;\r\n        return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\r\n      };\r\n      return 0.2126 * lum(0) + 0.7152 * lum(1) + 0.0722 * lum(2);\r\n    },\r\n    /**\r\n     * contrast\r\n     *\r\n     * Calculate the contrast of two given rgb colors.\r\n     *\r\n     * @param back {String} a valid qooxdoo/CSS rgb color string\r\n     * @param front {String} a valid qooxdoo/CSS rgb color string\r\n     * @return {Number} contrast\r\n     */\r\n    contrast(back, front) {\r\n      var bl = this.luminance(back) + 0.05;\r\n      var fl = this.luminance(front) + 0.5;\r\n      return Math.max(bl, fl) / Math.min(bl, fl);\r\n    },\r\n\r\n    /**\r\n     * Picks a contrasting color\r\n     *\r\n     * @param rgb {Number[]|String} the color, either as a string or as an RGB array of 3 numbers\r\n     * @param threshold {Number?} the threshold between light and dark outputs, where the range is 0-255, defaults to 128\r\n     * @param dark {String?} the colour to use for \"dark\", defaults to black\r\n     * @param light {String?} the colour to use for \"light\", defaults to white\r\n     * @return {String} colour string\r\n     */\r\n    chooseContrastingColor(rgb, threshold, dark, light) {\r\n      if (typeof rgb == \"string\") {\r\n        rgb = qx.util.ColorUtil.stringToRgb(rgb);\r\n      }\r\n      var r = rgb[0];\r\n      var g = rgb[1];\r\n      var b = rgb[2];\r\n      if (!threshold) {\r\n        threshold = 128;\r\n      }\r\n\r\n      // Combine into the YIQ color space (which gives us a handy scale we can use with a threshold)\r\n      var yiq = (r * 299 + g * 587 + b * 114) / 1000;\r\n\r\n      return yiq >= threshold ? dark || \"#000\" : light || \"#fff\";\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}