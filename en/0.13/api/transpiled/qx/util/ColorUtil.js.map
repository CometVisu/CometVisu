{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "REGEXP",
    "hexShort",
    "hexLong",
    "hex3",
    "hex6",
    "rgb",
    "rgba",
    "SYSTEM",
    "activeborder",
    "activecaption",
    "appworkspace",
    "background",
    "buttonface",
    "buttonhighlight",
    "buttonshadow",
    "buttontext",
    "captiontext",
    "graytext",
    "highlight",
    "highlighttext",
    "inactiveborder",
    "inactivecaption",
    "inactivecaptiontext",
    "infobackground",
    "infotext",
    "menu",
    "menutext",
    "scrollbar",
    "threeddarkshadow",
    "threedface",
    "threedhighlight",
    "threedlightshadow",
    "threedshadow",
    "window",
    "windowframe",
    "windowtext",
    "NAMED",
    "black",
    "silver",
    "gray",
    "white",
    "maroon",
    "red",
    "purple",
    "fuchsia",
    "green",
    "lime",
    "olive",
    "yellow",
    "navy",
    "blue",
    "teal",
    "aqua",
    "transparent",
    "magenta",
    "orange",
    "brown",
    "isNamedColor",
    "value",
    "undefined",
    "isSystemColor",
    "supportsThemes",
    "Class",
    "isDefined",
    "isThemedColor",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "isDynamic",
    "stringToRgb",
    "str",
    "resolveDynamic",
    "cssStringToRgb",
    "color",
    "concat",
    "Error",
    "isRgbaString",
    "__rgbaStringToRgb",
    "isRgbString",
    "__rgbStringToRgb",
    "ishexShortString",
    "__hexShortStringToRgb",
    "ishexLongString",
    "__hexLongStringToRgb",
    "length",
    "pop",
    "stringToRgbString",
    "rgbToRgbString",
    "map",
    "v",
    "Math",
    "round",
    "join",
    "rgbToHexString",
    "lang",
    "String",
    "pad",
    "toString",
    "toUpperCase",
    "isValidPropertyValue",
    "isCssString",
    "test",
    "isHex3String",
    "isHex6String",
    "parseInt",
    "RegExp",
    "$1",
    "$2",
    "$3",
    "alpha",
    "parseFloat",
    "$4",
    "__hex3StringToRgb",
    "__hex6StringToRgb",
    "$5",
    "$6",
    "hex3StringToRgb",
    "hex3StringToHex6String",
    "hex6StringToRgb",
    "hexStringToRgb",
    "rgbToHsb",
    "hue",
    "saturation",
    "brightness",
    "cmax",
    "cmin",
    "redc",
    "greenc",
    "bluec",
    "hsbToRgb",
    "hsb",
    "i",
    "f",
    "p",
    "r",
    "t",
    "tov",
    "floor",
    "rgbToHsl",
    "g",
    "b",
    "a",
    "max",
    "n",
    "min",
    "abs",
    "h",
    "hslToRgb",
    "hsl",
    "s",
    "l",
    "k",
    "randomColor",
    "random",
    "__tuner",
    "tuneMap",
    "tuner",
    "hue_tuner",
    "key",
    "forEach",
    "scale",
    "scaleMap",
    "adjust",
    "adjustMap",
    "offset",
    "luminance",
    "lum",
    "c",
    "pow",
    "contrast",
    "back",
    "front",
    "bl",
    "fl",
    "chooseContrastingColor",
    "threshold",
    "dark",
    "light",
    "util",
    "ColorUtil",
    "yiq"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ColorUtil.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Christian Hagendorn (cs)\n\n************************************************************************ */\n\n/**\n * Methods to convert colors between different color spaces.\n *\n * @ignore(qx.theme.*)\n * @ignore(qx.Class)\n * @ignore(qx.Class.*)\n */\nqx.Bootstrap.define(\"qx.util.ColorUtil\", {\n  statics: {\n    /**\n     * Regular expressions for color strings\n     */\n    REGEXP: {\n      hexShort: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?$/,\n      hexLong:\n        /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?$/,\n      hex3: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/,\n      hex6: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/,\n      rgb: /^rgb\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*\\)$/,\n      rgba: /^rgba\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,2}[0-9]*)\\s*\\)$/\n    },\n\n    /**\n     * CSS3 system color names.\n     */\n    SYSTEM: {\n      activeborder: true,\n      activecaption: true,\n      appworkspace: true,\n      background: true,\n      buttonface: true,\n      buttonhighlight: true,\n      buttonshadow: true,\n      buttontext: true,\n      captiontext: true,\n      graytext: true,\n      highlight: true,\n      highlighttext: true,\n      inactiveborder: true,\n      inactivecaption: true,\n      inactivecaptiontext: true,\n      infobackground: true,\n      infotext: true,\n      menu: true,\n      menutext: true,\n      scrollbar: true,\n      threeddarkshadow: true,\n      threedface: true,\n      threedhighlight: true,\n      threedlightshadow: true,\n      threedshadow: true,\n      window: true,\n      windowframe: true,\n      windowtext: true\n    },\n\n    /**\n     * Named colors, only the 16 basic colors plus the following ones:\n     * transparent, grey, magenta, orange and brown\n     */\n    NAMED: {\n      black: [0, 0, 0],\n      silver: [192, 192, 192],\n      gray: [128, 128, 128],\n      white: [255, 255, 255],\n      maroon: [128, 0, 0],\n      red: [255, 0, 0],\n      purple: [128, 0, 128],\n      fuchsia: [255, 0, 255],\n      green: [0, 128, 0],\n      lime: [0, 255, 0],\n      olive: [128, 128, 0],\n      yellow: [255, 255, 0],\n      navy: [0, 0, 128],\n      blue: [0, 0, 255],\n      teal: [0, 128, 128],\n      aqua: [0, 255, 255],\n\n      // Additional values\n      transparent: [-1, -1, -1],\n      magenta: [255, 0, 255], // alias for fuchsia\n      orange: [255, 165, 0],\n      brown: [165, 42, 42]\n    },\n\n    /**\n     * Whether the incoming value is a named color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a named color\n     */\n    isNamedColor(value) {\n      return this.NAMED[value] !== undefined;\n    },\n\n    /**\n     * Whether the incoming value is a system color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a system color\n     */\n    isSystemColor(value) {\n      return this.SYSTEM[value] !== undefined;\n    },\n\n    /**\n     * Whether the color theme manager is loaded. Generally\n     * part of the GUI of qooxdoo.\n     *\n     * @return {Boolean} <code>true</code> when color theme support is ready.\n     **/\n    supportsThemes() {\n      if (qx.Class) {\n        return qx.Class.isDefined(\"qx.theme.manager.Color\");\n      }\n      return false;\n    },\n\n    /**\n     * Whether the incoming value is a themed color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a themed color\n     */\n    isThemedColor(value) {\n      if (!this.supportsThemes()) {\n        return false;\n      }\n\n      if (qx.theme && qx.theme.manager && qx.theme.manager.Color) {\n        return qx.theme.manager.Color.getInstance().isDynamic(value);\n      }\n      return false;\n    },\n\n    /**\n     * Try to convert an incoming string to an RGBA array.\n     * Supports themed, named and system colors, but also RGBA strings,\n     * hex[3468] values.\n     *\n     * @param str {String} any string\n     * @return {Array} returns an array of red, green, blue and optional alpha on a successful transformation\n     * @throws {Error} if the string could not be parsed\n     */\n    stringToRgb(str) {\n      if (this.supportsThemes() && this.isThemedColor(str)) {\n        str = qx.theme.manager.Color.getInstance().resolveDynamic(str);\n      }\n      return this.cssStringToRgb(str);\n    },\n\n    /**\n     * Try to convert an incoming string to an RGB array with optional alpha.\n     * Support named colors, RGB strings, RGBA strings, hex[3468] values.\n     *\n     * @param str {String} any string\n     * @return {Array} returns an array of red, green, blue on a successful transformation\n     * @throws {Error} if the string could not be parsed\n     */\n    cssStringToRgb(str) {\n      var color;\n      if (this.isNamedColor(str)) {\n        color = this.NAMED[str].concat();\n      } else if (this.isSystemColor(str)) {\n        throw new Error(\"Could not convert system colors to RGB: \" + str);\n      } else if (this.isRgbaString(str)) {\n        color = this.__rgbaStringToRgb(str);\n      } else if (this.isRgbString(str)) {\n        color = this.__rgbStringToRgb();\n      } else if (this.ishexShortString(str)) {\n        color = this.__hexShortStringToRgb();\n      } else if (this.ishexLongString(str)) {\n        color = this.__hexLongStringToRgb();\n      }\n      if (color) {\n        // don't mention alpha if the color is opaque\n        if (color.length === 3 && color[3] == 1) {\n          color.pop();\n        }\n        return color;\n      }\n      throw new Error(\"Could not parse color: \" + str);\n    },\n\n    /**\n     * Try to convert an incoming string to an RGB string, which can be used\n     * for all color properties.\n     * Supports themed, named and system colors, but also RGB strings,\n     * hexShort and hexLong values.\n     *\n     * @param str {String} any string\n     * @return {String} a RGB string\n     * @throws {Error} if the string could not be parsed\n     */\n    stringToRgbString(str) {\n      return this.rgbToRgbString(this.stringToRgb(str));\n    },\n\n    /**\n     * Converts a RGB array to an RGB string\n     *\n     * @param rgb {Array} an array with red, green and blue values and optionally\n     * an alpha value\n     * @return {String} an RGB string\n     */\n    rgbToRgbString(rgb) {\n      return (\n        \"rgb\" +\n        (rgb.length === 4 ? \"a\" : \"\") +\n        \"(\" +\n        rgb\n          .map(function (v) {\n            return Math.round(v * 1000) / 1000;\n          })\n          .join(\",\") +\n        \")\"\n      );\n    },\n\n    /**\n     * Converts a RGB array to a hex[68] string\n     *\n     * @param rgb {Array} an array with red, green, blue and optional alpha\n     * @return {String} a hex[68] string (#xxxxxx)\n     */\n    rgbToHexString(rgb) {\n      return (\n        \"#\" +\n        qx.lang.String.pad(rgb[0].toString(16).toUpperCase(), 2) +\n        qx.lang.String.pad(rgb[1].toString(16).toUpperCase(), 2) +\n        qx.lang.String.pad(rgb[2].toString(16).toUpperCase(), 2) +\n        (rgb.length === 4 && rgb[3] !== 1\n          ? qx.lang.String.pad(\n              Math.round(rgb[3] * 255)\n                .toString(16)\n                .toUpperCase(),\n              2\n            )\n          : \"\")\n      );\n    },\n\n    /**\n     * Detects if a string is a valid qooxdoo color\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid qooxdoo color\n     */\n    isValidPropertyValue(str) {\n      return (\n        this.isThemedColor(str) ||\n        this.isNamedColor(str) ||\n        this.ishexShortString(str) ||\n        this.ishexLongString(str) ||\n        this.isRgbString(str) ||\n        this.isRgbaString(str)\n      );\n    },\n\n    /**\n     * Detects if a string is a valid CSS color string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid CSS color string\n     */\n    isCssString(str) {\n      return (\n        this.isSystemColor(str) ||\n        this.isNamedColor(str) ||\n        this.ishexShortString(str) ||\n        this.ishexLongString(str) ||\n        this.isRgbString(str) ||\n        this.isRgbaString(str)\n      );\n    },\n\n    /**\n     * Detects if a string is a valid hexShort string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hexShort string\n     */\n    ishexShortString(str) {\n      return this.REGEXP.hexShort.test(str);\n    },\n    /**\n     * Detects if a string is a valid hex3 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex3 string\n     */\n    isHex3String(str) {\n      return this.REGEXP.hex3.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid hex6 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex6 string\n     */\n    isHex6String(str) {\n      return this.REGEXP.hex6.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid hex6/8 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex8 string\n     */\n    ishexLongString(str) {\n      return this.REGEXP.hexLong.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid RGB string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid RGB string\n     */\n    isRgbString(str) {\n      return this.REGEXP.rgb.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid RGBA string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid RGBA string\n     */\n    isRgbaString(str) {\n      return this.REGEXP.rgba.test(str);\n    },\n\n    /**\n     * Converts a regexp object match of a rgb string to an RGBA array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __rgbStringToRgb() {\n      var red = parseInt(RegExp.$1, 10);\n      var green = parseInt(RegExp.$2, 10);\n      var blue = parseInt(RegExp.$3, 10);\n\n      return [red, green, blue];\n    },\n\n    /**\n     * Converts a regexp object match of a rgba string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __rgbaStringToRgb() {\n      var red = parseInt(RegExp.$1, 10);\n      var green = parseInt(RegExp.$2, 10);\n      var blue = parseInt(RegExp.$3, 10);\n      var alpha = parseFloat(RegExp.$4, 10);\n\n      if (red === 0 && (green === 0) & (blue === 0) && alpha === 0) {\n        // this is the (pre-alpha) representation of transparency\n        // in qooxdoo\n        return [-1, -1, -1];\n      }\n\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\n    },\n\n    /**\n     * Converts a regexp object match of a hexShort string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hexShortStringToRgb() {\n      var red = parseInt(RegExp.$1, 16) * 17;\n      var green = parseInt(RegExp.$2, 16) * 17;\n      var blue = parseInt(RegExp.$3, 16) * 17;\n      var alpha =\n        Math.round((parseInt(RegExp.$4 || \"f\", 16) / 15) * 1000) / 1000;\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\n    },\n\n    /**\n     * Converts a regexp object match of a hex3 string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hex3StringToRgb() {\n      var red = parseInt(RegExp.$1, 16) * 17;\n      var green = parseInt(RegExp.$2, 16) * 17;\n      var blue = parseInt(RegExp.$3, 16) * 17;\n\n      return [red, green, blue];\n    },\n\n    /**\n     * Converts a regexp object match of a hex6 string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hex6StringToRgb() {\n      var red = parseInt(RegExp.$1, 16) * 16 + parseInt(RegExp.$2, 16);\n      var green = parseInt(RegExp.$3, 16) * 16 + parseInt(RegExp.$4, 16);\n      var blue = parseInt(RegExp.$5, 16) * 16 + parseInt(RegExp.$6, 16);\n\n      return [red, green, blue];\n    },\n\n    /**\n     * Converts a regexp object match of a hexLong string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hexLongStringToRgb() {\n      var red = parseInt(RegExp.$1, 16);\n      var green = parseInt(RegExp.$2, 16);\n      var blue = parseInt(RegExp.$3, 16);\n      var alpha =\n        Math.round((parseInt(RegExp.$4 || \"ff\", 16) / 255) * 1000) / 1000;\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\n    },\n\n    /**\n     * Converts a hex3 string to an RGB array\n     *\n     * @param value {String} a hex3 (#xxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hex3StringToRgb(value) {\n      if (this.isHex3String(value)) {\n        return this.__hex3StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex3 value: \" + value);\n    },\n\n    /**\n     * Converts a hex3 (#xxx) string to a hex6 (#xxxxxx) string.\n     *\n     * @param value {String} a hex3 (#xxx) string\n     * @return {String} The hex6 (#xxxxxx) string or the passed value when the\n     *   passed value is not an hex3 (#xxx) value.\n     */\n    hex3StringToHex6String(value) {\n      if (this.isHex3String(value)) {\n        return this.rgbToHexString(this.hex3StringToRgb(value));\n      }\n      return value;\n    },\n\n    /**\n     * Converts a hex6 string to an RGB array\n     *\n     * @param value {String} a hex6 (#xxxxxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hex6StringToRgb(value) {\n      if (this.isHex6String(value)) {\n        return this.__hex6StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex6 value: \" + value);\n    },\n\n    /**\n     * Converts a hex string to an RGB array\n     *\n     * @param value {String} a hexShort (#rgb/#rgba) or hexLong (#rrggbb/#rrggbbaa) string\n     * @return {Array} an array with red, green, blue and alpha\n     */\n    hexStringToRgb(value) {\n      if (this.ishexShortString(value)) {\n        return this.__hexShortStringToRgb(value);\n      }\n\n      if (this.ishexLongString(value)) {\n        return this.__hexLongStringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex value: \" + value);\n    },\n\n    /**\n     * Convert RGB colors to HSB/HSV\n     *\n     * @param rgb {Number[]} red, blue and green as array\n     * @return {Array} an array with hue, saturation and brightness/value\n     */\n    rgbToHsb(rgb) {\n      var hue, saturation, brightness;\n\n      var red = rgb[0];\n      var green = rgb[1];\n      var blue = rgb[2];\n\n      var cmax = red > green ? red : green;\n\n      if (blue > cmax) {\n        cmax = blue;\n      }\n\n      var cmin = red < green ? red : green;\n\n      if (blue < cmin) {\n        cmin = blue;\n      }\n\n      brightness = cmax / 255.0;\n\n      if (cmax != 0) {\n        saturation = (cmax - cmin) / cmax;\n      } else {\n        saturation = 0;\n      }\n\n      if (saturation == 0) {\n        hue = 0;\n      } else {\n        var redc = (cmax - red) / (cmax - cmin);\n        var greenc = (cmax - green) / (cmax - cmin);\n        var bluec = (cmax - blue) / (cmax - cmin);\n\n        if (red == cmax) {\n          hue = bluec - greenc;\n        } else if (green == cmax) {\n          hue = 2.0 + redc - bluec;\n        } else {\n          hue = 4.0 + greenc - redc;\n        }\n\n        hue = hue / 6.0;\n\n        if (hue < 0) {\n          hue = hue + 1.0;\n        }\n      }\n\n      return [\n        Math.round(hue * 360),\n        Math.round(saturation * 100),\n        Math.round(brightness * 100)\n      ];\n    },\n\n    /**\n     * Convert HSB/HSV colors to RGB\n     *\n     * @param hsb {Number[]} an array with hue, saturation and brightness/value\n     * @return {Integer[]} an array with red, green, blue\n     */\n    hsbToRgb(hsb) {\n      var i, f, p, r, t;\n\n      var hue = hsb[0] / 360;\n      var saturation = hsb[1] / 100;\n      var brightness = hsb[2] / 100;\n\n      if (hue >= 1.0) {\n        hue %= 1.0;\n      }\n\n      if (saturation > 1.0) {\n        saturation = 1.0;\n      }\n\n      if (brightness > 1.0) {\n        brightness = 1.0;\n      }\n\n      var tov = Math.floor(255 * brightness);\n      var rgb = {};\n\n      if (saturation == 0.0) {\n        rgb.red = rgb.green = rgb.blue = tov;\n      } else {\n        hue *= 6.0;\n\n        i = Math.floor(hue);\n\n        f = hue - i;\n\n        p = Math.floor(tov * (1.0 - saturation));\n        r = Math.floor(tov * (1.0 - saturation * f));\n        t = Math.floor(tov * (1.0 - saturation * (1.0 - f)));\n\n        switch (i) {\n          case 0:\n            rgb.red = tov;\n            rgb.green = t;\n            rgb.blue = p;\n            break;\n\n          case 1:\n            rgb.red = r;\n            rgb.green = tov;\n            rgb.blue = p;\n            break;\n\n          case 2:\n            rgb.red = p;\n            rgb.green = tov;\n            rgb.blue = t;\n            break;\n\n          case 3:\n            rgb.red = p;\n            rgb.green = r;\n            rgb.blue = tov;\n            break;\n\n          case 4:\n            rgb.red = t;\n            rgb.green = p;\n            rgb.blue = tov;\n            break;\n\n          case 5:\n            rgb.red = tov;\n            rgb.green = p;\n            rgb.blue = r;\n            break;\n        }\n      }\n\n      return [rgb.red, rgb.green, rgb.blue];\n    },\n\n    /**\n     * Convert RGB colors to HSL\n     *\n     * @param rgb {Number[]} red, blue and green as array\n     * @return {Array} an array with hue, saturation and lightness\n     */\n    rgbToHsl(rgb) {\n      var r = rgb[0] / 255;\n      var g = rgb[1] / 255;\n      var b = rgb[2] / 255;\n      // implementation from\n      // https://stackoverflow.com/questions/2348597/why-doesnt-this-javascript-rgb-to-hsl-code-work/54071699#54071699\n      var a = Math.max(r, g, b);\n      var n = a - Math.min(r, g, b);\n      var f = 1 - Math.abs(a + a - n - 1);\n      var h =\n        n &&\n        (a == r ? (g - b) / n : a == g ? 2 + (b - r) / n : 4 + (r - g) / n);\n      return [\n        60 * (h < 0 ? h + 6 : h),\n        100 * (f ? n / f : 0),\n        (100 * (a + a - n)) / 2\n      ];\n    },\n    /**\n     * Convert HSL colors to RGB\n     *\n     * @param hsl {Number[]} an array with hue, saturation and lightness\n     * @return {Integer[]} an array with red, green, blue\n     */\n    hslToRgb(hsl) {\n      var h = hsl[0];\n      var s = hsl[1] / 100;\n      var l = hsl[2] / 100;\n      // implementation from\n      // https://stackoverflow.com/questions/36721830/convert-hsl-to-rgb-and-hex/54014428#54014428\n      var a = s * Math.min(l, 1 - l);\n      var f = function (n) {\n        var k = (n + h / 30) % 12;\n        return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n      };\n      return [f(0), f(8), f(4)].map(function (v) {\n        return Math.round(v * 2550) / 10;\n      });\n    },\n    /**\n     * Creates a random color.\n     *\n     * @return {String} a valid qooxdoo/CSS rgb color string.\n     */\n    randomColor() {\n      var r = Math.round(Math.random() * 255);\n      var g = Math.round(Math.random() * 255);\n      var b = Math.round(Math.random() * 255);\n\n      return this.rgbToRgbString([r, g, b]);\n    },\n\n    /**\n     * Tune a color string according to the tuneMap\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map}  as described above\n     * @param tuner {Function}  function\n     * @param hue_tuner {Function}  function\n     * @return {String} a valid CSS rgb color string.*\n     */\n    __tuner(color, tuneMap, tuner, hue_tuner) {\n      var rgba = this.stringToRgb(color);\n      for (var key in tuneMap) {\n        if (tuneMap[key] == 0) {\n          continue;\n        }\n        switch (key) {\n          case \"red\":\n            rgba[0] = tuner(rgba[0], tuneMap[key], 255);\n            break;\n          case \"green\":\n            rgba[1] = tuner(rgba[1], tuneMap[key], 255);\n            break;\n          case \"blue\":\n            rgba[2] = tuner(rgba[2], tuneMap[key], 255);\n            break;\n          case \"alpha\":\n            rgba[3] = tuner(rgba[3] || 1, tuneMap[key], 1);\n            break;\n          case \"hue\":\n            if (hue_tuner) {\n              var hsb = this.rgbToHsb(rgba);\n              hsb[0] = hue_tuner(hsb[0], tuneMap[key]);\n              var rgb = this.hsbToRgb(hsb);\n              rgb[3] = rgba[3];\n              rgba = rgb;\n            } else {\n              throw new Error(\"Invalid key in map: \" + key);\n            }\n            break;\n          case \"saturation\":\n            var hsb = this.rgbToHsb(rgba);\n            hsb[1] = tuner(hsb[1], tuneMap[key], 100);\n            rgb = this.hsbToRgb(hsb);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          case \"brightness\":\n            var hsb = this.rgbToHsb(rgba);\n            hsb[2] = tuner(hsb[2], tuneMap[key], 100);\n            rgb = this.hsbToRgb(hsb);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          case \"lightness\":\n            var hsl = this.rgbToHsl(rgba);\n            hsl[2] = tuner(hsl[2], tuneMap[key], 100);\n            rgb = this.hslToRgb(hsl);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          default:\n            throw new Error(\"Invalid key in tune map: \" + key);\n        }\n      }\n      if (rgba.length === 4) {\n        if (rgba[3] === undefined || rgba[3] >= 1) {\n          rgba.pop();\n        } else if (rgba[3] < 0) {\n          rgba[3] = 0;\n        }\n      }\n      [0, 1, 2].forEach(function (i) {\n        if (rgba[i] < 0) {\n          rgba[i] = 0;\n          return;\n        }\n        if (rgba[i] > 255) {\n          rgba[i] = 255;\n          return;\n        }\n      });\n      return this.rgbToRgbString(rgba);\n    },\n    /**\n     * Scale\n     *\n     * Scale the given properties of the input color according to the\n     * configuration given in the `scaleMap`. Each key argument must point to a\n     * number between -100% and 100% (inclusive). This indicates how far the\n     * corresponding property should be moved from its original position\n     * towards the maximum (if the argument is positive) or the minimum (if the\n     * argument is negative). This means that, for example, `lightness: \"50%\"`\n     * will make all colors 50% closer to maximum lightness without making them\n     * fully white.\n     *\n     * Supported keys are:\n     * `red`, `green`, `blue`, `alpha`, `saturation`,\n     * `brightness`, `value`, `lightness`.\n     *\n     * @param color {String}  a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map}  as described above\n     * @return {String} a valid CSS rgb color string.\n     */\n\n    scale(color, scaleMap) {\n      return this.__tuner(color, scaleMap, function (value, scale, max) {\n        if (value > max) {\n          value = max;\n        }\n        if (scale > 0) {\n          if (scale > 100) {\n            scale = 100;\n          }\n          return value + ((max - value) * scale) / 100;\n        }\n        // scale < 0\n        if (scale < -100) {\n          scale = -100;\n        }\n        return value + (value * scale) / 100;\n      });\n    },\n    /**\n     * Adjust\n     *\n     * Increases or decreases one or more properties of the input color\n     * by fixed amounts according to the configuration given in the\n     * `adjustMap`. The value of the corresponding key is added to the\n     * original value and the final result is adjusted to stay within legal\n     * bounds. Hue values can go full circle.a1\n     *\n     * Supported keys are:\n     * `red`, `green`, `blue`, `alpha`, `hue`, `saturation`, `brightness`,\n     * `lightness`\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map} as described above\n     * @return {String} a valid CSS rgb color string.\n     */\n    adjust(color, adjustMap) {\n      return this.__tuner(\n        color,\n        adjustMap,\n        function (value, offset, max) {\n          value += offset;\n          if (value > max) {\n            return max;\n          }\n          if (value < 0) {\n            return 0;\n          }\n          return value;\n        },\n        function (value, offset) {\n          value += offset;\n          while (value >= 360) {\n            value -= 360;\n          }\n          while (value < 0) {\n            value += 360;\n          }\n          return value;\n        }\n      );\n    },\n    /**\n     * RgbToLuminance\n     *\n     * Calculate the [luminance](https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests) of the given rgb color.\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @return {Number} luminance\n     */\n    luminance(color) {\n      var rgb = this.stringToRgb(color);\n      var lum = function (i) {\n        var c = rgb[i] / 255;\n        return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n      };\n      return 0.2126 * lum(0) + 0.7152 * lum(1) + 0.0722 * lum(2);\n    },\n    /**\n     * contrast\n     *\n     * Calculate the contrast of two given rgb colors.\n     *\n     * @param back {String} a valid qooxdoo/CSS rgb color string\n     * @param front {String} a valid qooxdoo/CSS rgb color string\n     * @return {Number} contrast\n     */\n    contrast(back, front) {\n      var bl = this.luminance(back) + 0.05;\n      var fl = this.luminance(front) + 0.5;\n      return Math.max(bl, fl) / Math.min(bl, fl);\n    },\n\n    /**\n     * Picks a contrasting color\n     *\n     * @param rgb {Number[]|String} the color, either as a string or as an RGB array of 3 numbers\n     * @param threshold {Number?} the threshold between light and dark outputs, where the range is 0-255, defaults to 128\n     * @param dark {String?} the colour to use for \"dark\", defaults to black\n     * @param light {String?} the colour to use for \"light\", defaults to white\n     * @return {String} colour string\n     */\n    chooseContrastingColor(rgb, threshold, dark, light) {\n      if (typeof rgb == \"string\") {\n        rgb = qx.util.ColorUtil.stringToRgb(rgb);\n      }\n      var r = rgb[0];\n      var g = rgb[1];\n      var b = rgb[2];\n      if (!threshold) {\n        threshold = 128;\n      }\n\n      // Combine into the YIQ color space (which gives us a handy scale we can use with a threshold)\n      var yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n      return yiq >= threshold ? dark || \"#000\" : light || \"#fff\";\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}