{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "REGEXP",
    "hexShort",
    "hexLong",
    "hex3",
    "hex6",
    "rgb",
    "rgba",
    "SYSTEM",
    "activeborder",
    "activecaption",
    "appworkspace",
    "background",
    "buttonface",
    "buttonhighlight",
    "buttonshadow",
    "buttontext",
    "captiontext",
    "graytext",
    "highlight",
    "highlighttext",
    "inactiveborder",
    "inactivecaption",
    "inactivecaptiontext",
    "infobackground",
    "infotext",
    "menu",
    "menutext",
    "scrollbar",
    "threeddarkshadow",
    "threedface",
    "threedhighlight",
    "threedlightshadow",
    "threedshadow",
    "window",
    "windowframe",
    "windowtext",
    "NAMED",
    "black",
    "silver",
    "gray",
    "white",
    "maroon",
    "red",
    "purple",
    "fuchsia",
    "green",
    "lime",
    "olive",
    "yellow",
    "navy",
    "blue",
    "teal",
    "aqua",
    "transparent",
    "magenta",
    "orange",
    "brown",
    "isNamedColor",
    "value",
    "undefined",
    "isSystemColor",
    "supportsThemes",
    "Class",
    "isDefined",
    "isThemedColor",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "isDynamic",
    "stringToRgb",
    "str",
    "resolveDynamic",
    "cssStringToRgb",
    "color",
    "concat",
    "Error",
    "isRgbaString",
    "__rgbaStringToRgb",
    "isRgbString",
    "__rgbStringToRgb",
    "ishexShortString",
    "__hexShortStringToRgb",
    "ishexLongString",
    "__hexLongStringToRgb",
    "length",
    "pop",
    "stringToRgbString",
    "rgbToRgbString",
    "map",
    "v",
    "Math",
    "round",
    "join",
    "rgbToHexString",
    "lang",
    "String",
    "pad",
    "toString",
    "toUpperCase",
    "isValidPropertyValue",
    "isCssString",
    "test",
    "isHex3String",
    "isHex6String",
    "parseInt",
    "RegExp",
    "$1",
    "$2",
    "$3",
    "alpha",
    "parseFloat",
    "$4",
    "__hex3StringToRgb",
    "__hex6StringToRgb",
    "$5",
    "$6",
    "hex3StringToRgb",
    "hex3StringToHex6String",
    "hex6StringToRgb",
    "hexStringToRgb",
    "rgbToHsb",
    "hue",
    "saturation",
    "brightness",
    "cmax",
    "cmin",
    "redc",
    "greenc",
    "bluec",
    "hsbToRgb",
    "hsb",
    "i",
    "f",
    "p",
    "r",
    "t",
    "tov",
    "floor",
    "rgbToHsl",
    "g",
    "b",
    "a",
    "max",
    "n",
    "min",
    "abs",
    "h",
    "hslToRgb",
    "hsl",
    "s",
    "l",
    "k",
    "randomColor",
    "random",
    "__tuner",
    "tuneMap",
    "tuner",
    "hue_tuner",
    "key",
    "forEach",
    "scale",
    "scaleMap",
    "adjust",
    "adjustMap",
    "offset",
    "luminance",
    "lum",
    "c",
    "pow",
    "contrast",
    "back",
    "front",
    "bl",
    "fl",
    "chooseContrastingColor",
    "threshold",
    "dark",
    "light",
    "util",
    "ColorUtil",
    "yiq"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ColorUtil.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Christian Hagendorn (cs)\n\n************************************************************************ */\n\n/**\n * Methods to convert colors between different color spaces.\n *\n * @ignore(qx.theme.*)\n * @ignore(qx.Class)\n * @ignore(qx.Class.*)\n */\nqx.Bootstrap.define(\"qx.util.ColorUtil\", {\n  statics: {\n    /**\n     * Regular expressions for color strings\n     */\n    REGEXP: {\n      hexShort: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])?$/,\n      hexLong:\n        /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?$/,\n      hex3: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/,\n      hex6: /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/,\n      rgb: /^rgb\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*\\)$/,\n      rgba: /^rgba\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,2}[0-9]*)\\s*\\)$/\n    },\n\n    /**\n     * CSS3 system color names.\n     */\n    SYSTEM: {\n      activeborder: true,\n      activecaption: true,\n      appworkspace: true,\n      background: true,\n      buttonface: true,\n      buttonhighlight: true,\n      buttonshadow: true,\n      buttontext: true,\n      captiontext: true,\n      graytext: true,\n      highlight: true,\n      highlighttext: true,\n      inactiveborder: true,\n      inactivecaption: true,\n      inactivecaptiontext: true,\n      infobackground: true,\n      infotext: true,\n      menu: true,\n      menutext: true,\n      scrollbar: true,\n      threeddarkshadow: true,\n      threedface: true,\n      threedhighlight: true,\n      threedlightshadow: true,\n      threedshadow: true,\n      window: true,\n      windowframe: true,\n      windowtext: true\n    },\n\n    /**\n     * Named colors, only the 16 basic colors plus the following ones:\n     * transparent, grey, magenta, orange and brown\n     */\n    NAMED: {\n      black: [0, 0, 0],\n      silver: [192, 192, 192],\n      gray: [128, 128, 128],\n      white: [255, 255, 255],\n      maroon: [128, 0, 0],\n      red: [255, 0, 0],\n      purple: [128, 0, 128],\n      fuchsia: [255, 0, 255],\n      green: [0, 128, 0],\n      lime: [0, 255, 0],\n      olive: [128, 128, 0],\n      yellow: [255, 255, 0],\n      navy: [0, 0, 128],\n      blue: [0, 0, 255],\n      teal: [0, 128, 128],\n      aqua: [0, 255, 255],\n\n      // Additional values\n      transparent: [-1, -1, -1],\n      magenta: [255, 0, 255], // alias for fuchsia\n      orange: [255, 165, 0],\n      brown: [165, 42, 42]\n    },\n\n    /**\n     * Whether the incoming value is a named color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a named color\n     */\n    isNamedColor(value) {\n      return this.NAMED[value] !== undefined;\n    },\n\n    /**\n     * Whether the incoming value is a system color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a system color\n     */\n    isSystemColor(value) {\n      return this.SYSTEM[value] !== undefined;\n    },\n\n    /**\n     * Whether the color theme manager is loaded. Generally\n     * part of the GUI of qooxdoo.\n     *\n     * @return {Boolean} <code>true</code> when color theme support is ready.\n     **/\n    supportsThemes() {\n      if (qx.Class) {\n        return qx.Class.isDefined(\"qx.theme.manager.Color\");\n      }\n      return false;\n    },\n\n    /**\n     * Whether the incoming value is a themed color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a themed color\n     */\n    isThemedColor(value) {\n      if (!this.supportsThemes()) {\n        return false;\n      }\n\n      if (qx.theme && qx.theme.manager && qx.theme.manager.Color) {\n        return qx.theme.manager.Color.getInstance().isDynamic(value);\n      }\n      return false;\n    },\n\n    /**\n     * Try to convert an incoming string to an RGBA array.\n     * Supports themed, named and system colors, but also RGBA strings,\n     * hex[3468] values.\n     *\n     * @param str {String} any string\n     * @return {Array} returns an array of red, green, blue and optional alpha on a successful transformation\n     * @throws {Error} if the string could not be parsed\n     */\n    stringToRgb(str) {\n      if (this.supportsThemes() && this.isThemedColor(str)) {\n        str = qx.theme.manager.Color.getInstance().resolveDynamic(str);\n      }\n      return this.cssStringToRgb(str);\n    },\n\n    /**\n     * Try to convert an incoming string to an RGB array with optional alpha.\n     * Support named colors, RGB strings, RGBA strings, hex[3468] values.\n     *\n     * @param str {String} any string\n     * @return {Array} returns an array of red, green, blue on a successful transformation\n     * @throws {Error} if the string could not be parsed\n     */\n    cssStringToRgb(str) {\n      var color;\n      if (this.isNamedColor(str)) {\n        color = this.NAMED[str].concat();\n      } else if (this.isSystemColor(str)) {\n        throw new Error(\"Could not convert system colors to RGB: \" + str);\n      } else if (this.isRgbaString(str)) {\n        color = this.__rgbaStringToRgb(str);\n      } else if (this.isRgbString(str)) {\n        color = this.__rgbStringToRgb();\n      } else if (this.ishexShortString(str)) {\n        color = this.__hexShortStringToRgb();\n      } else if (this.ishexLongString(str)) {\n        color = this.__hexLongStringToRgb();\n      }\n      if (color) {\n        // don't mention alpha if the color is opaque\n        if (color.length === 3 && color[3] == 1) {\n          color.pop();\n        }\n        return color;\n      }\n      throw new Error(\"Could not parse color: \" + str);\n    },\n\n    /**\n     * Try to convert an incoming string to an RGB string, which can be used\n     * for all color properties.\n     * Supports themed, named and system colors, but also RGB strings,\n     * hexShort and hexLong values.\n     *\n     * @param str {String} any string\n     * @return {String} a RGB string\n     * @throws {Error} if the string could not be parsed\n     */\n    stringToRgbString(str) {\n      return this.rgbToRgbString(this.stringToRgb(str));\n    },\n\n    /**\n     * Converts a RGB array to an RGB string\n     *\n     * @param rgb {Array} an array with red, green and blue values and optionally\n     * an alpha value\n     * @return {String} an RGB string\n     */\n    rgbToRgbString(rgb) {\n      return (\n        \"rgb\" +\n        (rgb.length === 4 ? \"a\" : \"\") +\n        \"(\" +\n        rgb\n          .map(function (v) {\n            return Math.round(v * 1000) / 1000;\n          })\n          .join(\",\") +\n        \")\"\n      );\n    },\n\n    /**\n     * Converts a RGB array to a hex[68] string\n     *\n     * @param rgb {Array} an array with red, green, blue and optional alpha\n     * @return {String} a hex[68] string (#xxxxxx)\n     */\n    rgbToHexString(rgb) {\n      return (\n        \"#\" +\n        qx.lang.String.pad(rgb[0].toString(16).toUpperCase(), 2) +\n        qx.lang.String.pad(rgb[1].toString(16).toUpperCase(), 2) +\n        qx.lang.String.pad(rgb[2].toString(16).toUpperCase(), 2) +\n        (rgb.length === 4 && rgb[3] !== 1\n          ? qx.lang.String.pad(\n              Math.round(rgb[3] * 255)\n                .toString(16)\n                .toUpperCase(),\n              2\n            )\n          : \"\")\n      );\n    },\n\n    /**\n     * Detects if a string is a valid qooxdoo color\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid qooxdoo color\n     */\n    isValidPropertyValue(str) {\n      return (\n        this.isThemedColor(str) ||\n        this.isNamedColor(str) ||\n        this.ishexShortString(str) ||\n        this.ishexLongString(str) ||\n        this.isRgbString(str) ||\n        this.isRgbaString(str)\n      );\n    },\n\n    /**\n     * Detects if a string is a valid CSS color string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid CSS color string\n     */\n    isCssString(str) {\n      return (\n        this.isSystemColor(str) ||\n        this.isNamedColor(str) ||\n        this.ishexShortString(str) ||\n        this.ishexLongString(str) ||\n        this.isRgbString(str) ||\n        this.isRgbaString(str)\n      );\n    },\n\n    /**\n     * Detects if a string is a valid hexShort string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hexShort string\n     */\n    ishexShortString(str) {\n      return this.REGEXP.hexShort.test(str);\n    },\n    /**\n     * Detects if a string is a valid hex3 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex3 string\n     */\n    isHex3String(str) {\n      return this.REGEXP.hex3.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid hex6 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex6 string\n     */\n    isHex6String(str) {\n      return this.REGEXP.hex6.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid hex6/8 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex8 string\n     */\n    ishexLongString(str) {\n      return this.REGEXP.hexLong.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid RGB string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid RGB string\n     */\n    isRgbString(str) {\n      return this.REGEXP.rgb.test(str);\n    },\n\n    /**\n     * Detects if a string is a valid RGBA string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid RGBA string\n     */\n    isRgbaString(str) {\n      return this.REGEXP.rgba.test(str);\n    },\n\n    /**\n     * Converts a regexp object match of a rgb string to an RGBA array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __rgbStringToRgb() {\n      var red = parseInt(RegExp.$1, 10);\n      var green = parseInt(RegExp.$2, 10);\n      var blue = parseInt(RegExp.$3, 10);\n\n      return [red, green, blue];\n    },\n\n    /**\n     * Converts a regexp object match of a rgba string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __rgbaStringToRgb() {\n      var red = parseInt(RegExp.$1, 10);\n      var green = parseInt(RegExp.$2, 10);\n      var blue = parseInt(RegExp.$3, 10);\n      var alpha = parseFloat(RegExp.$4, 10);\n\n      if (red === 0 && (green === 0) & (blue === 0) && alpha === 0) {\n        // this is the (pre-alpha) representation of transparency\n        // in qooxdoo\n        return [-1, -1, -1];\n      }\n\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\n    },\n\n    /**\n     * Converts a regexp object match of a hexShort string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hexShortStringToRgb() {\n      var red = parseInt(RegExp.$1, 16) * 17;\n      var green = parseInt(RegExp.$2, 16) * 17;\n      var blue = parseInt(RegExp.$3, 16) * 17;\n      var alpha =\n        Math.round((parseInt(RegExp.$4 || \"f\", 16) / 15) * 1000) / 1000;\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\n    },\n\n    /**\n     * Converts a regexp object match of a hex3 string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hex3StringToRgb() {\n      var red = parseInt(RegExp.$1, 16) * 17;\n      var green = parseInt(RegExp.$2, 16) * 17;\n      var blue = parseInt(RegExp.$3, 16) * 17;\n\n      return [red, green, blue];\n    },\n\n    /**\n     * Converts a regexp object match of a hex6 string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hex6StringToRgb() {\n      var red = parseInt(RegExp.$1, 16) * 16 + parseInt(RegExp.$2, 16);\n      var green = parseInt(RegExp.$3, 16) * 16 + parseInt(RegExp.$4, 16);\n      var blue = parseInt(RegExp.$5, 16) * 16 + parseInt(RegExp.$6, 16);\n\n      return [red, green, blue];\n    },\n\n    /**\n     * Converts a regexp object match of a hexLong string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hexLongStringToRgb() {\n      var red = parseInt(RegExp.$1, 16);\n      var green = parseInt(RegExp.$2, 16);\n      var blue = parseInt(RegExp.$3, 16);\n      var alpha =\n        Math.round((parseInt(RegExp.$4 || \"ff\", 16) / 255) * 1000) / 1000;\n      return alpha == 1 ? [red, green, blue] : [red, green, blue, alpha];\n    },\n\n    /**\n     * Converts a hex3 string to an RGB array\n     *\n     * @param value {String} a hex3 (#xxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hex3StringToRgb(value) {\n      if (this.isHex3String(value)) {\n        return this.__hex3StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex3 value: \" + value);\n    },\n\n    /**\n     * Converts a hex3 (#xxx) string to a hex6 (#xxxxxx) string.\n     *\n     * @param value {String} a hex3 (#xxx) string\n     * @return {String} The hex6 (#xxxxxx) string or the passed value when the\n     *   passed value is not an hex3 (#xxx) value.\n     */\n    hex3StringToHex6String(value) {\n      if (this.isHex3String(value)) {\n        return this.rgbToHexString(this.hex3StringToRgb(value));\n      }\n      return value;\n    },\n\n    /**\n     * Converts a hex6 string to an RGB array\n     *\n     * @param value {String} a hex6 (#xxxxxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hex6StringToRgb(value) {\n      if (this.isHex6String(value)) {\n        return this.__hex6StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex6 value: \" + value);\n    },\n\n    /**\n     * Converts a hex string to an RGB array\n     *\n     * @param value {String} a hexShort (#rgb/#rgba) or hexLong (#rrggbb/#rrggbbaa) string\n     * @return {Array} an array with red, green, blue and alpha\n     */\n    hexStringToRgb(value) {\n      if (this.ishexShortString(value)) {\n        return this.__hexShortStringToRgb(value);\n      }\n\n      if (this.ishexLongString(value)) {\n        return this.__hexLongStringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex value: \" + value);\n    },\n\n    /**\n     * Convert RGB colors to HSB/HSV\n     *\n     * @param rgb {Number[]} red, blue and green as array\n     * @return {Array} an array with hue, saturation and brightness/value\n     */\n    rgbToHsb(rgb) {\n      var hue, saturation, brightness;\n\n      var red = rgb[0];\n      var green = rgb[1];\n      var blue = rgb[2];\n\n      var cmax = red > green ? red : green;\n\n      if (blue > cmax) {\n        cmax = blue;\n      }\n\n      var cmin = red < green ? red : green;\n\n      if (blue < cmin) {\n        cmin = blue;\n      }\n\n      brightness = cmax / 255.0;\n\n      if (cmax != 0) {\n        saturation = (cmax - cmin) / cmax;\n      } else {\n        saturation = 0;\n      }\n\n      if (saturation == 0) {\n        hue = 0;\n      } else {\n        var redc = (cmax - red) / (cmax - cmin);\n        var greenc = (cmax - green) / (cmax - cmin);\n        var bluec = (cmax - blue) / (cmax - cmin);\n\n        if (red == cmax) {\n          hue = bluec - greenc;\n        } else if (green == cmax) {\n          hue = 2.0 + redc - bluec;\n        } else {\n          hue = 4.0 + greenc - redc;\n        }\n\n        hue = hue / 6.0;\n\n        if (hue < 0) {\n          hue = hue + 1.0;\n        }\n      }\n\n      return [\n        Math.round(hue * 360),\n        Math.round(saturation * 100),\n        Math.round(brightness * 100)\n      ];\n    },\n\n    /**\n     * Convert HSB/HSV colors to RGB\n     *\n     * @param hsb {Number[]} an array with hue, saturation and brightness/value\n     * @return {Integer[]} an array with red, green, blue\n     */\n    hsbToRgb(hsb) {\n      var i, f, p, r, t;\n\n      var hue = hsb[0] / 360;\n      var saturation = hsb[1] / 100;\n      var brightness = hsb[2] / 100;\n\n      if (hue >= 1.0) {\n        hue %= 1.0;\n      }\n\n      if (saturation > 1.0) {\n        saturation = 1.0;\n      }\n\n      if (brightness > 1.0) {\n        brightness = 1.0;\n      }\n\n      var tov = Math.floor(255 * brightness);\n      var rgb = {};\n\n      if (saturation == 0.0) {\n        rgb.red = rgb.green = rgb.blue = tov;\n      } else {\n        hue *= 6.0;\n\n        i = Math.floor(hue);\n\n        f = hue - i;\n\n        p = Math.floor(tov * (1.0 - saturation));\n        r = Math.floor(tov * (1.0 - saturation * f));\n        t = Math.floor(tov * (1.0 - saturation * (1.0 - f)));\n\n        switch (i) {\n          case 0:\n            rgb.red = tov;\n            rgb.green = t;\n            rgb.blue = p;\n            break;\n\n          case 1:\n            rgb.red = r;\n            rgb.green = tov;\n            rgb.blue = p;\n            break;\n\n          case 2:\n            rgb.red = p;\n            rgb.green = tov;\n            rgb.blue = t;\n            break;\n\n          case 3:\n            rgb.red = p;\n            rgb.green = r;\n            rgb.blue = tov;\n            break;\n\n          case 4:\n            rgb.red = t;\n            rgb.green = p;\n            rgb.blue = tov;\n            break;\n\n          case 5:\n            rgb.red = tov;\n            rgb.green = p;\n            rgb.blue = r;\n            break;\n        }\n      }\n\n      return [rgb.red, rgb.green, rgb.blue];\n    },\n\n    /**\n     * Convert RGB colors to HSL\n     *\n     * @param rgb {Number[]} red, blue and green as array\n     * @return {Array} an array with hue, saturation and lightness\n     */\n    rgbToHsl(rgb) {\n      var r = rgb[0] / 255;\n      var g = rgb[1] / 255;\n      var b = rgb[2] / 255;\n      // implementation from\n      // https://stackoverflow.com/questions/2348597/why-doesnt-this-javascript-rgb-to-hsl-code-work/54071699#54071699\n      var a = Math.max(r, g, b);\n      var n = a - Math.min(r, g, b);\n      var f = 1 - Math.abs(a + a - n - 1);\n      var h =\n        n &&\n        (a == r ? (g - b) / n : a == g ? 2 + (b - r) / n : 4 + (r - g) / n);\n      return [\n        60 * (h < 0 ? h + 6 : h),\n        100 * (f ? n / f : 0),\n        (100 * (a + a - n)) / 2\n      ];\n    },\n    /**\n     * Convert HSL colors to RGB\n     *\n     * @param hsl {Number[]} an array with hue, saturation and lightness\n     * @return {Integer[]} an array with red, green, blue\n     */\n    hslToRgb(hsl) {\n      var h = hsl[0];\n      var s = hsl[1] / 100;\n      var l = hsl[2] / 100;\n      // implementation from\n      // https://stackoverflow.com/questions/36721830/convert-hsl-to-rgb-and-hex/54014428#54014428\n      var a = s * Math.min(l, 1 - l);\n      var f = function (n) {\n        var k = (n + h / 30) % 12;\n        return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n      };\n      return [f(0), f(8), f(4)].map(function (v) {\n        return Math.round(v * 2550) / 10;\n      });\n    },\n    /**\n     * Creates a random color.\n     *\n     * @return {String} a valid qooxdoo/CSS rgb color string.\n     */\n    randomColor() {\n      var r = Math.round(Math.random() * 255);\n      var g = Math.round(Math.random() * 255);\n      var b = Math.round(Math.random() * 255);\n\n      return this.rgbToRgbString([r, g, b]);\n    },\n\n    /**\n     * Tune a color string according to the tuneMap\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map}  as described above\n     * @param tuner {Function}  function\n     * @param hue_tuner {Function}  function\n     * @return {String} a valid CSS rgb color string.*\n     */\n    __tuner(color, tuneMap, tuner, hue_tuner) {\n      var rgba = this.stringToRgb(color);\n      for (var key in tuneMap) {\n        if (tuneMap[key] == 0) {\n          continue;\n        }\n        switch (key) {\n          case \"red\":\n            rgba[0] = tuner(rgba[0], tuneMap[key], 255);\n            break;\n          case \"green\":\n            rgba[1] = tuner(rgba[1], tuneMap[key], 255);\n            break;\n          case \"blue\":\n            rgba[2] = tuner(rgba[2], tuneMap[key], 255);\n            break;\n          case \"alpha\":\n            rgba[3] = tuner(rgba[3] || 1, tuneMap[key], 1);\n            break;\n          case \"hue\":\n            if (hue_tuner) {\n              var hsb = this.rgbToHsb(rgba);\n              hsb[0] = hue_tuner(hsb[0], tuneMap[key]);\n              var rgb = this.hsbToRgb(hsb);\n              rgb[3] = rgba[3];\n              rgba = rgb;\n            } else {\n              throw new Error(\"Invalid key in map: \" + key);\n            }\n            break;\n          case \"saturation\":\n            var hsb = this.rgbToHsb(rgba);\n            hsb[1] = tuner(hsb[1], tuneMap[key], 100);\n            rgb = this.hsbToRgb(hsb);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          case \"brightness\":\n            var hsb = this.rgbToHsb(rgba);\n            hsb[2] = tuner(hsb[2], tuneMap[key], 100);\n            rgb = this.hsbToRgb(hsb);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          case \"lightness\":\n            var hsl = this.rgbToHsl(rgba);\n            hsl[2] = tuner(hsl[2], tuneMap[key], 100);\n            rgb = this.hslToRgb(hsl);\n            rgb[3] = rgba[3];\n            rgba = rgb;\n            break;\n          default:\n            throw new Error(\"Invalid key in tune map: \" + key);\n        }\n      }\n      if (rgba.length === 4) {\n        if (rgba[3] === undefined || rgba[3] >= 1) {\n          rgba.pop();\n        } else if (rgba[3] < 0) {\n          rgba[3] = 0;\n        }\n      }\n      [0, 1, 2].forEach(function (i) {\n        if (rgba[i] < 0) {\n          rgba[i] = 0;\n          return;\n        }\n        if (rgba[i] > 255) {\n          rgba[i] = 255;\n          return;\n        }\n      });\n      return this.rgbToRgbString(rgba);\n    },\n    /**\n     * Scale\n     *\n     * Scale the given properties of the input color according to the\n     * configuration given in the `scaleMap`. Each key argument must point to a\n     * number between -100% and 100% (inclusive). This indicates how far the\n     * corresponding property should be moved from its original position\n     * towards the maximum (if the argument is positive) or the minimum (if the\n     * argument is negative). This means that, for example, `lightness: \"50%\"`\n     * will make all colors 50% closer to maximum lightness without making them\n     * fully white.\n     *\n     * Supported keys are:\n     * `red`, `green`, `blue`, `alpha`, `saturation`,\n     * `brightness`, `value`, `lightness`.\n     *\n     * @param color {String}  a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map}  as described above\n     * @return {String} a valid CSS rgb color string.\n     */\n\n    scale(color, scaleMap) {\n      return this.__tuner(color, scaleMap, function (value, scale, max) {\n        if (value > max) {\n          value = max;\n        }\n        if (scale > 0) {\n          if (scale > 100) {\n            scale = 100;\n          }\n          return value + ((max - value) * scale) / 100;\n        }\n        // scale < 0\n        if (scale < -100) {\n          scale = -100;\n        }\n        return value + (value * scale) / 100;\n      });\n    },\n    /**\n     * Adjust\n     *\n     * Increases or decreases one or more properties of the input color\n     * by fixed amounts according to the configuration given in the\n     * `adjustMap`. The value of the corresponding key is added to the\n     * original value and the final result is adjusted to stay within legal\n     * bounds. Hue values can go full circle.a1\n     *\n     * Supported keys are:\n     * `red`, `green`, `blue`, `alpha`, `hue`, `saturation`, `brightness`,\n     * `lightness`\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @param scaleMap {Map} as described above\n     * @return {String} a valid CSS rgb color string.\n     */\n    adjust(color, adjustMap) {\n      return this.__tuner(\n        color,\n        adjustMap,\n        function (value, offset, max) {\n          value += offset;\n          if (value > max) {\n            return max;\n          }\n          if (value < 0) {\n            return 0;\n          }\n          return value;\n        },\n        function (value, offset) {\n          value += offset;\n          while (value >= 360) {\n            value -= 360;\n          }\n          while (value < 0) {\n            value += 360;\n          }\n          return value;\n        }\n      );\n    },\n    /**\n     * RgbToLuminance\n     *\n     * Calculate the [luminance](https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests) of the given rgb color.\n     *\n     * @param color {String} a valid qooxdoo/CSS rgb color string\n     * @return {Number} luminance\n     */\n    luminance(color) {\n      var rgb = this.stringToRgb(color);\n      var lum = function (i) {\n        var c = rgb[i] / 255;\n        return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n      };\n      return 0.2126 * lum(0) + 0.7152 * lum(1) + 0.0722 * lum(2);\n    },\n    /**\n     * contrast\n     *\n     * Calculate the contrast of two given rgb colors.\n     *\n     * @param back {String} a valid qooxdoo/CSS rgb color string\n     * @param front {String} a valid qooxdoo/CSS rgb color string\n     * @return {Number} contrast\n     */\n    contrast(back, front) {\n      var bl = this.luminance(back) + 0.05;\n      var fl = this.luminance(front) + 0.5;\n      return Math.max(bl, fl) / Math.min(bl, fl);\n    },\n\n    /**\n     * Picks a contrasting color\n     *\n     * @param rgb {Number[]|String} the color, either as a string or as an RGB array of 3 numbers\n     * @param threshold {Number?} the threshold between light and dark outputs, where the range is 0-255, defaults to 128\n     * @param dark {String?} the colour to use for \"dark\", defaults to black\n     * @param light {String?} the colour to use for \"light\", defaults to white\n     * @return {String} colour string\n     */\n    chooseContrastingColor(rgb, threshold, dark, light) {\n      if (typeof rgb == \"string\") {\n        rgb = qx.util.ColorUtil.stringToRgb(rgb);\n      }\n      var r = rgb[0];\n      var g = rgb[1];\n      var b = rgb[2];\n      if (!threshold) {\n        threshold = 128;\n      }\n\n      // Combine into the YIQ color space (which gives us a handy scale we can use with a threshold)\n      var yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n      return yiq >= threshold ? dark || \"#000\" : light || \"#fff\";\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}