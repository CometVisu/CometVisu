{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "machineName",
    "setName",
    "__states",
    "__startState",
    "__savedStates",
    "__eventQueue",
    "__blockedEvents",
    "__friendlyToObject",
    "__friendlyToHash",
    "__hashToFriendly",
    "__groupToFriendly",
    "__friendlyToGroups",
    "statics",
    "StateChange",
    "CURRENT_STATE",
    "POP_STATE_STACK",
    "TERMINATE",
    "EventHandling",
    "PREDICATE",
    "BLOCKED",
    "DebugFlags",
    "EVENTS",
    "TRANSITIONS",
    "FUNCTION_DETAIL",
    "OBJECT_NOT_FOUND",
    "events",
    "terminated",
    "properties",
    "name",
    "check",
    "nullable",
    "state",
    "previousState",
    "nextState",
    "maxSavedStates",
    "init",
    "debugFlags",
    "members",
    "__bEventProcessingInProgress",
    "__bTerminated",
    "isTerminated",
    "addState",
    "util",
    "fsm",
    "State",
    "Error",
    "stateName",
    "getName",
    "replaceState",
    "bDispose",
    "oldState",
    "_bNeedDispose",
    "addObject",
    "friendlyName",
    "obj",
    "groupNames",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "i",
    "length",
    "groupName",
    "push",
    "removeObject",
    "objName",
    "bGroupEmpty",
    "getObject",
    "getFriendlyName",
    "getGroupObjects",
    "a",
    "displayAllObjects",
    "debug",
    "_getInternalData",
    "states",
    "startState",
    "eventQueue",
    "blockedEvents",
    "savedStates",
    "friendlyToObject",
    "friendlyToHash",
    "hashToFriendly",
    "groupToFriendly",
    "friendlyToGroups",
    "start",
    "setState",
    "setPreviousState",
    "setNextState",
    "debugFunctions",
    "getDebugFlags",
    "FiniteStateMachine",
    "getAutoActionsBeforeOnentry",
    "getOnentry",
    "getAutoActionsAfterOnentry",
    "pushState",
    "getMaxSavedStates",
    "getState",
    "getPreviousState",
    "popState",
    "pop",
    "postponeEvent",
    "event",
    "unshift",
    "enqueueEvent",
    "bAddAtHead",
    "friendly",
    "getTarget",
    "getType",
    "eventListener",
    "e",
    "clone",
    "__processEvents",
    "fireImmediateEvent",
    "type",
    "target",
    "data",
    "Registration",
    "createEvent",
    "Data",
    "Event",
    "setTarget",
    "scheduleEvent",
    "timeout",
    "Timer",
    "once",
    "__run",
    "dispose",
    "thisState",
    "prevState",
    "currentState",
    "transitions",
    "action",
    "debugEvents",
    "debugTransitions",
    "debugObjectNotFound",
    "getEvents",
    "trans",
    "t",
    "getPredicate",
    "getNextState",
    "getAutoActionsBeforeOntransition",
    "getOntransition",
    "getAutoActionsAfterOntransition",
    "getAutoActionsBeforeOnexit",
    "getOnexit",
    "getAutoActionsAfterOnexit",
    "fireDataEvent",
    "undefined",
    "destruct",
    "_disposeArray"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/fsm/FiniteStateMachine.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006, 2007, 2011 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A finite state machine.\n *\n * See {@link qx.util.fsm.State} for details on creating States,\n * and {@link qx.util.fsm.Transition} for details on creating\n * transitions between states.\n */\nqx.Class.define(\"qx.util.fsm.FiniteStateMachine\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param machineName {String} The name of this finite state machine\n   */\n  construct(machineName) {\n    // Call our superclass' constructor\n    super();\n\n    // Save the machine name\n    this.setName(machineName);\n\n    // Initialize the states object\n    this.__states = {};\n\n    // The first state added will become the start state\n    this.__startState = null;\n\n    // Initialize the saved-states stack\n    this.__savedStates = [];\n\n    // Initialize the pending event queue\n    this.__eventQueue = [];\n\n    // Initialize the blocked events queue\n    this.__blockedEvents = [];\n\n    // Create the friendlyToObject\" object.  Each object has as its property\n    // name, the friendly name of the object; and as its property value, the\n    // object itself.\n    this.__friendlyToObject = {};\n\n    // Create the \"friendlyToHash\" object.  Each object has as its property\n    // name, the friendly name of the object; and as its property value, the\n    // hash code of the object.\n    this.__friendlyToHash = {};\n\n    // Create the \"hashToFriendly\" object.  Each object has as its property\n    // name, the hash code of the object; and as its property value, the\n    // friendly name of the object.\n    this.__hashToFriendly = {};\n\n    // Friendly names can be added to groups, for easy manipulation of\n    // enabling and disabling groups of widgets.  Track which friendly names\n    // are in which group.\n    this.__groupToFriendly = {};\n\n    // We also need to be able to map back from friendly name to the groups it\n    // is in.\n    this.__friendlyToGroups = {};\n  },\n\n  statics: {\n    /**\n     * Constants which may be values of the nextState member in the\n     * transitionInfo parameter of the Transition constructor.\n     */\n    StateChange: {\n      /** When used as a nextState value, means remain in current state */\n      CURRENT_STATE: 1,\n\n      /**\n       * When used as a nextState value, means go to most-recently pushed state\n       */\n      POP_STATE_STACK: 2,\n\n      /** When used as a nextState value, means terminate this state machine */\n      TERMINATE: 3\n    },\n\n    /**\n     * Constants for use in the events member of the transitionInfo parameter\n     * of the Transition constructor.\n     */\n    EventHandling: {\n      /**\n       * This event is handled by this state, but the predicate of a transition\n       * will determine whether to use that transition.\n       */\n      PREDICATE: 1,\n\n      /** Enqueue this event for possible use by the next state */\n      BLOCKED: 2\n    },\n\n    /**\n     * Debug bitmask values.\n     */\n    DebugFlags: {\n      /** Show events */\n      EVENTS: 1,\n\n      /** Show transitions */\n      TRANSITIONS: 2,\n\n      /** Show individual function invocations during transitions */\n      FUNCTION_DETAIL: 4,\n\n      /**\n       * When object friendly names are referenced but not found, show message\n       */\n      OBJECT_NOT_FOUND: 8\n    }\n  },\n\n  events: {\n    /**\n     * Fired when the finite state machine terminates. Data is the last state\n     * before termination.\n     */\n    terminated: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /**\n     * The name of this finite state machine (for debug messages)\n     */\n    name: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The current state of the finite state machine.\n     */\n    state: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The previous state of the finite state machine, i.e. the state from\n     * which we most recently transitioned.  Note that this could be the same\n     * as the current state if a successful transition brought us back to the\n     * same state.\n     */\n    previousState: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The state to which we will be transitioning.  This property is valid\n     * only during a Transition's ontransition function and a State's onexit\n     * function.  At all other times, it is null.\n     */\n    nextState: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The maximum number of states which may pushed onto the state-stack.  It\n     * is generally a poor idea to have very many states saved on a stack.\n     * Following program logic becomes very difficult, and the code can be\n     * highly unmaintainable.  The default should be more than adequate.\n     * You've been warned.\n     */\n    maxSavedStates: {\n      check: \"Number\",\n      init: 2\n    },\n\n    /**\n     * Debug flags, composed of the bitmask values in the DebugFlags constant.\n     *\n     * Set the debug flags from the application by or-ing together bits, akin\n     * to this:\n     *\n     * <pre class='javascript'>\n     * var FSM = qx.util.fsm.FiniteStateMachine;\n     * fsm.setDebugFlags(FSM.DebugFlags.EVENTS |\n     *                   FSM.DebugFlags.TRANSITIONS |\n     *                   FSM.DebugFlags.FUNCTION_DETAIL |\n     *                   FSM.DebugFlags.OBJECT_NOT_FOUND);\n     * </pre>\n     */\n    debugFlags: {\n      check: \"Number\",\n\n      // Default:\n      // (qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS |\n      //  qx.util.fsm.FiniteStateMachine.DebugFlags.TRANSITIONS |\n      //  qx.util.fsm.FiniteStateMachine.DebugFlags.OBJECT_NOT_FOUND)\n      init: 7\n    }\n  },\n\n  members: {\n    __states: null,\n    __startState: null,\n    __eventQueue: null,\n    __blockedEvents: null,\n    __savedStates: null,\n    __friendlyToObject: null,\n    __friendlyToHash: null,\n    __hashToFriendly: null,\n    __groupToFriendly: null,\n    __friendlyToGroups: null,\n    __bEventProcessingInProgress: false,\n    __bTerminated: true,\n\n    /**\n     * Checks whether the finite state machine is terminated or not.\n     *\n     * @return {Boolean} If the finite state machine is terminated.\n     */\n    isTerminated() {\n      return this.__bTerminated;\n    },\n\n    /**\n     * Add a state to the finite state machine.\n     *\n     *\n     * @param state {qx.util.fsm.State}\n     *   An object of class qx.util.fsm.State representing a state which is to\n     *   be a part of this finite state machine.\n     *\n     *\n     * @throws {Error} If the given state is not an instanceof of qx.util.fsm.State.\n     * @throws {Error} If the given state already exists.\n     */\n    addState(state) {\n      // Ensure that we got valid state info\n      if (!state instanceof qx.util.fsm.State) {\n        throw new Error(\n          \"Invalid state: not an instance of \" + \"qx.util.fsm.State\"\n        );\n      }\n\n      // Retrieve the name of this state\n      var stateName = state.getName();\n\n      // Ensure that the state name doesn't already exist\n      if (stateName in this.__states) {\n        throw new Error(\"State \" + stateName + \" already exists\");\n      }\n\n      // Is this the first state being added?\n      if (this.__startState == null) {\n        // Yup.  Save this state as the start state.\n        this.__startState = stateName;\n      }\n\n      // Add the new state object to the finite state machine\n      this.__states[stateName] = state;\n    },\n\n    /**\n     * Replace a state in the finite state machine.  This is useful if\n     * initially \"dummy\" states are created which load the real state table\n     * for a series of operations (and possibly also load the gui associated\n     * with the new states at the same time).  Having portions of the finite\n     * state machine and their associated gui pages loaded at run time can\n     * help prevent long delays at application start-up time.\n     *\n     *\n     * @param state {qx.util.fsm.State}\n     *   An object of class qx.util.fsm.State representing a state which is to\n     *   be a part of this finite state machine.\n     *\n     * @param bDispose {Boolean}\n     *   If <i>true</i>, then dispose the old state object.  If <i>false</i>,\n     *   the old state object is returned for disposing by the caller.\n     *\n     * @return {Object}\n     *   The old state object if it was not disposed; otherwise null.\n     *\n     * @throws {Error} If the given state is not an instanceof of qx.util.fsm.State.\n     */\n    replaceState(state, bDispose) {\n      // Ensure that we got valid state info\n      if (!state instanceof qx.util.fsm.State) {\n        throw new Error(\n          \"Invalid state: not an instance of \" + \"qx.util.fsm.State\"\n        );\n      }\n\n      // Retrieve the name of this state\n      var stateName = state.getName();\n\n      // Save the old state object, so we can return it to be disposed\n      var oldState = this.__states[stateName];\n\n      // Replace the old state with the new state object.\n      this.__states[stateName] = state;\n\n      // Did they request that the old state be disposed?\n      if (bDispose) {\n        // Yup.  Mark it to be disposed.\n        oldState._bNeedDispose = true;\n      }\n\n      return oldState;\n    },\n\n    /**\n     * Add an object (typically a widget) that is to be accessed during state\n     * transitions, to the finite state machine.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name to used for access to the object being added.\n     *\n     * @param obj {Object}\n     *   The object to associate with the specified friendly name\n     *\n     * @param groupNames {Array}\n     *   An optional list of group names of which this object is a member.\n     *\n     */\n    addObject(friendlyName, obj, groupNames) {\n      var hash = qx.core.ObjectRegistry.toHashCode(obj);\n      this.__friendlyToHash[friendlyName] = hash;\n      this.__hashToFriendly[hash] = friendlyName;\n      this.__friendlyToObject[friendlyName] = obj;\n\n      // If no groupNames are specified, we're done.\n      if (!groupNames) {\n        return;\n      }\n\n      // Allow either a single group name or an array of group names.  If the\n      // former, we convert it to the latter to make the subsequent code\n      // simpler.\n      if (typeof groupNames == \"string\") {\n        groupNames = [groupNames];\n      }\n\n      // For each group that this friendly name is to be a member of...\n      for (var i = 0; i < groupNames.length; i++) {\n        var groupName = groupNames[i];\n\n        // If the group name doesn't yet exist...\n        if (!this.__groupToFriendly[groupName]) {\n          // ... then create it.\n          this.__groupToFriendly[groupName] = {};\n        }\n\n        // Add the friendly name to the list of names in this group\n        this.__groupToFriendly[groupName][friendlyName] = true;\n\n        // If the friendly name group mapping doesn't yet exist...\n        if (!this.__friendlyToGroups[friendlyName]) {\n          // ... then create it.\n          this.__friendlyToGroups[friendlyName] = [];\n        }\n\n        // Append this group name to the list of groups this friendly name is\n        // in\n        this.__friendlyToGroups[friendlyName].push(groupName);\n      }\n    },\n\n    /**\n     * Remove an object which had previously been added by {@link #addObject}.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name associated with an object, specifying which object\n     *   is to be removed.\n     *\n     */\n    removeObject(friendlyName) {\n      var hash;\n      var groupName;\n      var objName;\n      var bGroupEmpty;\n\n      hash = this.__friendlyToHash[friendlyName];\n\n      // Delete references to any groups this friendly name was in\n      if (this.__friendlyToGroups[friendlyName]) {\n        for (var i = 0; i < this.__friendlyToGroups[friendlyName].length; i++) {\n          groupName = this.__friendlyToGroups[friendlyName][i];\n          delete this.__groupToFriendly[groupName][friendlyName];\n\n          // Is the group empty now?\n          bGroupEmpty = true;\n          for (objName in this.__groupToFriendly[groupName]) {\n            // The group is not empty. That's all we wanted to know.\n            bGroupEmpty = false;\n            break;\n          }\n\n          // If the group is empty...\n          if (bGroupEmpty) {\n            // ... then we can delete the entire entry\n            delete this.__groupToFriendly[groupName];\n          }\n        }\n\n        delete this.__friendlyToGroups[friendlyName];\n      }\n\n      // Delete the friendly name\n      delete this.__hashToFriendly[hash];\n      delete this.__friendlyToHash[friendlyName];\n      delete this.__friendlyToObject[friendlyName];\n    },\n\n    /**\n     * Retrieve an object previously saved via {@link #addObject}, using its\n     * Friendly Name.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name of the object to be retrieved.\n     *\n     * @return {Object}\n     *   The object which has the specified friendly name, or undefined if no\n     *   object has been associated with that name.\n     */\n    getObject(friendlyName) {\n      return this.__friendlyToObject[friendlyName];\n    },\n\n    /**\n     * Get the friendly name of an object.\n     *\n     *\n     * @param obj {Object}\n     *   The object for which the friendly name is desired\n     *\n     * @return {String}\n     *   If the object has been previously registered via {@link #addObject},\n     *   then the friendly name of the object is returned; otherwise, null.\n     */\n    getFriendlyName(obj) {\n      var hash = obj ? qx.core.ObjectRegistry.toHashCode(obj) : null;\n      return hash ? this.__hashToFriendly[hash] : null;\n    },\n\n    /**\n     * Retrieve the list of objects which have registered, via {@link #addObject}\n     * as being members of the specified group.\n     *\n     *\n     * @param groupName {String}\n     *   The name of the group for which the member list is desired.\n     *\n     * @return {Array}\n     *   An array containing the friendly names of any objects which are\n     *   members of the specified group.  The resultant array may be empty.\n     */\n    getGroupObjects(groupName) {\n      var a = [];\n\n      for (var name in this.__groupToFriendly[groupName]) {\n        a.push(name);\n      }\n\n      return a;\n    },\n\n    /**\n     * Display all of the saved objects and their reverse mappings.\n     *\n     */\n    displayAllObjects() {\n      for (var friendlyName in this.__friendlyToHash) {\n        var hash = this.__friendlyToHash[friendlyName];\n        var obj = this.getObject(friendlyName);\n        this.debug(friendlyName + \" => \" + hash);\n        this.debug(\"  \" + hash + \" => \" + this.__hashToFriendly[hash]);\n        this.debug(\"  \" + friendlyName + \" => \" + this.getObject(friendlyName));\n        this.debug(\n          \"  \" +\n            this.getObject(friendlyName) +\n            \" => \" +\n            this.getFriendlyName(obj)\n        );\n      }\n    },\n\n    /**\n     * Get internal data for debugging\n     *\n     * @return {Map}\n     *   A map containing the following:\n     *     __states\n     *     __startState\n     *     __eventQueue\n     *     __blockedEvents\n     *     __savedStates\n     *     __friendlyToObject\n     *     __friendlyToHash\n     *     __hashToFriendly\n     *     __groupToFriendly\n     *     __friendlyToGroups\n     *     __bEventProcessingInProgress\n     */\n    _getInternalData() {\n      return {\n        states: this.__states,\n        startState: this.__startState,\n        eventQueue: this.__eventQueue,\n        blockedEvents: this.__blockedEvents,\n        savedStates: this.__savedStates,\n        friendlyToObject: this.__friendlyToObject,\n        friendlyToHash: this.__friendlyToHash,\n        hashToFriendly: this.__hashToFriendly,\n        groupToFriendly: this.__groupToFriendly,\n        friendlyToGroups: this.__friendlyToGroups\n      };\n    },\n\n    /**\n     * Start (or restart, after it has terminated) the finite state machine\n     * from the starting state.  The starting state is defined as the first\n     * state added to the finite state machine.\n     *\n     * @throws {Error} If the machine stared with not available state.\n     */\n    start() {\n      this.__bTerminated = false;\n\n      var stateName = this.__startState;\n\n      if (stateName == null) {\n        throw new Error(\"Machine started with no available states\");\n      }\n\n      // Set the start state to be the first state which was added to the\n      // machine\n      this.setState(stateName);\n      this.setPreviousState(null);\n      this.setNextState(null);\n\n      var debugFunctions =\n        this.getDebugFlags() &\n        qx.util.fsm.FiniteStateMachine.DebugFlags.FUNCTION_DETAIL;\n\n      // Run the actionsBeforeOnentry actions for the initial state\n      if (debugFunctions) {\n        this.debug(this.getName() + \"#\" + stateName + \"#actionsBeforeOnentry\");\n      }\n\n      this.__states[stateName].getAutoActionsBeforeOnentry()(this);\n\n      // Run the entry function for the new state, if one is specified\n      if (debugFunctions) {\n        this.debug(this.getName() + \"#\" + stateName + \"#entry\");\n      }\n\n      this.__states[stateName].getOnentry()(this, null);\n\n      // Run the actionsAfterOnentry actions for the initial state\n      if (debugFunctions) {\n        this.debug(this.getName() + \"#\" + stateName + \"#actionsAfterOnentry\");\n      }\n\n      this.__states[stateName].getAutoActionsAfterOnentry()(this);\n    },\n\n    /**\n     * Save the current or previous state on the saved-state stack.  A future\n     * transition can then provide, as its nextState value, the class\n     * constant:\n     *\n     *   <code>\n     *   qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK\n     *   </code>\n     *\n     * which will cause the next state to be whatever is at the top of the\n     * saved-state stack, and remove that top element from the saved-state\n     * stack.\n     *\n     *\n     * @param state {Boolean|String}\n     *   When <i>true</i>, then push the current state onto the stack.  This\n     *   might be used in a transition, before the state has changed.  When\n     *   <i>false</i>, then push the previous state onto the stack.  This\n     *   might be used in an on entry function to save the previous state to\n     *   return to.  If this parameter is a string, it is taken to be the\n     *   name of the state to transition to.\n     *\n     *\n     * @throws {Error} If the saved-state stack is full.\n     */\n    pushState(state) {\n      // See if there's room on the state stack for a new state\n      if (this.__savedStates.length >= this.getMaxSavedStates()) {\n        // Nope.  Programmer error.\n        throw new Error(\"Saved-state stack is full\");\n      }\n\n      if (state === true) {\n        // Push the current state onto the saved-state stack\n        this.__savedStates.push(this.getState());\n      } else if (state) {\n        this.__savedStates.push(state);\n      } else {\n        // Push the previous state onto the saved-state stack\n        this.__savedStates.push(this.getPreviousState());\n      }\n    },\n\n    /**\n     * Pop the saved state stack.\n     *\n     * @return {String|Boolean}\n     *   The name of a state or a boolean flag that had most recently been\n     *   pushed onto the saved-state stack.\n     */\n    popState() {\n      // Is there anything on the saved-state stack?\n      if (this.__savedStates.length == 0) {\n        // Nope. Programmer error.\n        throw new Error(\"Saved-state stack is empty\");\n      }\n\n      return this.__savedStates.pop();\n    },\n\n    /**\n     * Add the specified event to a list of events to be passed to the next\n     * state following state transition.\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   The event to add to the event queue for processing after state change.\n     *\n     */\n    postponeEvent(event) {\n      // Add this event to the blocked event queue, so it will be passed to the\n      // next state upon transition.\n      this.__blockedEvents.unshift(event);\n    },\n\n    /**\n     * Enqueue an event for processing\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   The event to be enqueued\n     *\n     * @param bAddAtHead {Boolean}\n     *   If <i>true</i>, put the event at the head of the queue for immediate\n     *   processing.  If <i>false</i>, place the event at the tail of the\n     *   queue so that it receives in-order processing.\n     *\n     */\n    enqueueEvent(event, bAddAtHead) {\n      // Add the event to the event queue\n      if (bAddAtHead) {\n        // Put event at the head of the queue\n        this.__eventQueue.push(event);\n      } else {\n        // Put event at the tail of the queue\n        this.__eventQueue.unshift(event);\n      }\n\n      if (\n        this.getDebugFlags() & qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS\n      ) {\n        // Individual objects are listed.  Ensure target is a saved object\n        var friendly = this.getFriendlyName(event.getTarget());\n\n        if (bAddAtHead) {\n          this.debug(\n            this.getName() +\n              \": Pushed event: \" +\n              event.getType() +\n              (friendly ? \" on \" + friendly : \"\")\n          );\n        } else {\n          this.debug(\n            this.getName() +\n              \": Queued event: \" +\n              event.getType() +\n              (friendly ? \" on \" + friendly : \"\")\n          );\n        }\n      }\n    },\n\n    /**\n     * Event listener for all event types in the finite state machine\n     *\n     * @param event {qx.event.type.Event} The event that was dispatched.\n     */\n    eventListener(event) {\n      if (this.__bTerminated) {\n        this.debug(\n          this.getName() +\n            \": Cannot listen to event '\" +\n            event.getType() +\n            \"', because the finite state machine is not running.\"\n        );\n\n        return;\n      }\n\n      // Events are enqueued upon receipt.  Some events are then processed\n      // immediately; other events get processed later.  We need to allow the\n      // event dispatcher to free the source event upon our return, so we'll\n      // clone it and enqueue our clone.  The source event can then be\n      // disposed upon our return.\n      var e = event.clone();\n\n      // Enqueue the new event on the tail of the queue\n      this.enqueueEvent(e, false);\n\n      // Process events\n      this.__processEvents();\n    },\n\n    /**\n     * Create an event and send it immediately to the finite state machine.\n     *\n     * @param type {String}\n     *   The type of event, e.g. \"execute\"\n     *\n     * @param target {qx.core.Object}\n     *   The target of the event\n     *\n     * @param data {Object|null}\n     *   The data, if any, to issue in the event.  If this parameter is null\n     *   then a qx.event.type.Event is instantiated.  Otherwise, an event of\n     *   type qx.event.type.Data is instantiated and this data is applied to\n     *   it.\n     *\n     */\n    fireImmediateEvent(type, target, data) {\n      if (this.__bTerminated) {\n        this.debug(\n          this.getName() +\n            \": Cannot listen to event '\" +\n            type +\n            \"', because the finite state machine is not running.\"\n        );\n\n        return;\n      }\n\n      if (data) {\n        var event = qx.event.Registration.createEvent(\n          type,\n          qx.event.type.Data,\n          [data, null, false]\n        );\n      } else {\n        var event = qx.event.Registration.createEvent(\n          type,\n          qx.event.type.Event,\n          [false, false]\n        );\n      }\n      event.setTarget(target);\n      this.eventListener(event);\n    },\n\n    /**\n     * Create and schedule an event to be sent to the finite state machine\n     * \"shortly\".  This allows such things as letting a progress cursor\n     * display prior to handling the event.\n     *\n     * @param type {String}\n     *   The type of event, e.g. \"execute\"\n     *\n     * @param target {qx.core.Object}\n     *   The target of the event\n     *\n     * @param data {Object|null}\n     *   See {@link #fireImmediateEvent} for details.\n     *\n     * @param timeout {Integer|null}\n     *   If provided, this is the number of milliseconds to wait before firing\n     *   the event.  If not provided, a default short interval (on the order\n     *   of 20 milliseconds) is used.\n     *\n     */\n    scheduleEvent(type, target, data, timeout) {\n      qx.event.Timer.once(\n        function () {\n          this.fireImmediateEvent(type, target, data);\n        },\n        this,\n        timeout || 20\n      );\n    },\n\n    /**\n     * Process all of the events on the event queue.\n     *\n     */\n    __processEvents() {\n      // eventListener() can potentially be called while we're processing\n      // events\n      if (this.__bEventProcessingInProgress) {\n        // We were processing already, so don't process concurrently.\n        return;\n      }\n\n      // Track that we're processing events\n      this.__bEventProcessingInProgress = true;\n\n      // Process each of the events on the event queue\n      while (this.__eventQueue.length > 0) {\n        // Pull the next event from the pending event queue\n        var event = this.__eventQueue.pop();\n\n        // Run the finite state machine with this event\n        var bDispose = this.__run(event);\n\n        // If we didn't block (and re-queue) the event, dispose it.\n        if (bDispose) {\n          event.dispose();\n        }\n      }\n\n      // We're no longer processing events\n      this.__bEventProcessingInProgress = false;\n    },\n\n    /**\n     * Run the finite state machine to process a single event.\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   An event that has been dispatched.  The event may be handled (if the\n     *   current state handles this event type), queued (if the current state\n     *   blocks this event type), or discarded (if the current state neither\n     *   handles nor blocks this event type).\n     *\n     * @return {Boolean}\n     *   Whether the event should be disposed.  If it was blocked, we've\n     *   pushed it back onto the event queue, and it should not be disposed.\n     *\n     * @throws {Error} If the explicit transitions does not exist.\n     * @throws {Error} If the transition returns an invalid value.\n     * @throws {Error} If the next step will transit to an nonexistent state.\n     * @throws {Error} If the state stack is empty and the next state is POP_STATE_STACK\n     * @throws {Error} If the next state is invalid.\n     */\n    __run(event) {\n      // For use in generated functions...\n      // State name variables\n      var thisState;\n      var nextState;\n      var prevState;\n\n      // The current State object\n      var currentState;\n\n      // The transitions available in the current State\n      var transitions;\n\n      // Events handled by the current State\n      var e;\n\n      // The action to take place upon receipt of a particular event\n      var action;\n\n      // Get the debug flags\n      var debugFlags = this.getDebugFlags();\n\n      // Allow slightly faster access to determine if debug is enabled\n      var debugEvents =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS;\n      var debugTransitions =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.TRANSITIONS;\n      var debugFunctions =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.FUNCTION_DETAIL;\n      var debugObjectNotFound =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.OBJECT_NOT_FOUND;\n\n      // Individual objects are listed.  Ensure target is a saved object\n      var friendly = this.getFriendlyName(event.getTarget());\n\n      if (debugEvents) {\n        this.debug(\n          this.getName() +\n            \": Process event: \" +\n            event.getType() +\n            (friendly ? \" on \" + friendly : \"\")\n        );\n      }\n\n      // Get the current state name\n      thisState = this.getState();\n\n      // Get the current State object\n      currentState = this.__states[thisState];\n\n      // Get a list of the transitions available from this state\n      transitions = currentState.transitions;\n\n      // Determine how to handle this event\n      e = currentState.getEvents()[event.getType()];\n\n      // See if we actually found this event type\n      if (!e) {\n        if (debugEvents) {\n          this.debug(\n            this.getName() +\n              \": Event '\" +\n              event.getType() +\n              \"'\" +\n              \" not handled.  Ignoring.\"\n          );\n        }\n\n        return true;\n      }\n\n      // We might have found a constant (PREDICATE or BLOCKED) or an object\n      // with each property name being the friendly name of a saved object,\n      // and the property value being one of the constants (PREDICATE or\n      // BLOCKED).\n      if (typeof e == \"object\") {\n        if (!friendly) {\n          // Nope, it doesn't seem so.  Just discard it.\n          if (debugObjectNotFound) {\n            this.debug(\n              this.getName() +\n                \": Could not find friendly name for '\" +\n                event.getType() +\n                \"' on '\" +\n                event.getTarget() +\n                \"'\"\n            );\n          }\n\n          return true;\n        }\n\n        action = e[friendly];\n\n        // Do we handle this event type for the widget from which it\n        // originated?\n        if (!action) {\n          // Nope.\n          if (debugEvents) {\n            this.debug(\n              this.getName() +\n                \": Event '\" +\n                event.getType() +\n                \"'\" +\n                \" not handled for target \" +\n                friendly +\n                \".  Ignoring.\"\n            );\n          }\n\n          return true;\n        }\n      } else {\n        action = e;\n      }\n\n      switch (action) {\n        case qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE:\n          // Process this event.  One of the transitions should handle it.\n          break;\n\n        case qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED:\n          // This event is blocked.  Enqueue it for later, and get outta here.\n          if (debugEvents) {\n            this.debug(\n              this.getName() +\n                \": Event '\" +\n                event.getType() +\n                \"'\" +\n                \" blocked.  Re-queuing.\"\n            );\n          }\n\n          this.__blockedEvents.unshift(event);\n          return false;\n\n        default:\n          // See if we've been given an explicit transition name\n          if (typeof action == \"string\") {\n            // Yup!  Ensure that it exists\n            if (transitions[action]) {\n              // Yup.  Create a transitions object containing only this\n              // transition.\n              var trans = transitions[action];\n              transitions = {};\n              transitions[action] = trans;\n            } else {\n              throw new Error(\n                \"Explicit transition \" + action + \" does not exist\"\n              );\n            }\n\n            break;\n          }\n      }\n\n      // We handle the event.  Try each transition in turn until we find one\n      // that is acceptable.\n      for (var t in transitions) {\n        var trans = transitions[t];\n\n        // Does the predicate allow use of this transition?\n        switch (trans.getPredicate()(this, event)) {\n          case true:\n            // Transition is allowed.  Proceed.\n            break;\n\n          case false:\n            // Transition is not allowed.  Try next transition.\n            continue;\n\n          case null:\n            // Transition indicates not to try further transitions\n            return true;\n\n          default:\n            throw new Error(\n              \"Transition \" +\n                thisState +\n                \":\" +\n                t +\n                \" returned a value other than \" +\n                \"true, false, or null.\"\n            );\n        }\n\n        // We think we can transition to the next state.  Set next state.\n        nextState = trans.getNextState();\n\n        if (typeof nextState == \"string\") {\n          // We found a literal state name.  Ensure it exists.\n          if (!nextState in this.__states) {\n            throw new Error(\n              \"Attempt to transition to nonexistent state \" + nextState\n            );\n          }\n\n          // It exists.  Track it being the next state.\n          this.setNextState(nextState);\n        } else {\n          // If it's not a string, nextState must be a StateChange constant\n          switch (nextState) {\n            case qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE:\n              // They want to remain in the same state.\n              nextState = thisState;\n              this.setNextState(nextState);\n              break;\n\n            case qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK:\n              // Switch to the state at the top of the state stack.\n              if (this.__savedStates.length == 0) {\n                throw new Error(\n                  \"Attempt to transition to POP_STATE_STACK \" +\n                    \"while state stack is empty.\"\n                );\n              }\n\n              // Pop the state stack to retrieve the state to transition to\n              nextState = this.__savedStates.pop();\n              this.setNextState(nextState);\n              break;\n\n            case qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE:\n              // Terminate fsm\n              this.__bTerminated = true;\n              this.setNextState(null);\n              break;\n\n            default:\n              throw new Error(\"Internal error: invalid nextState\");\n          }\n        }\n\n        // Run the actionsBeforeOntransition actions for this transition\n        if (debugFunctions) {\n          this.debug(\n            this.getName() +\n              \"#\" +\n              thisState +\n              \"#\" +\n              t +\n              \"#autoActionsBeforeOntransition\"\n          );\n        }\n\n        trans.getAutoActionsBeforeOntransition()(this);\n\n        // Run the 'ontransition' function\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#\" + t + \"#ontransition\"\n          );\n        }\n\n        trans.getOntransition()(this, event);\n\n        // Run the autoActionsAfterOntransition actions for this transition\n        if (debugFunctions) {\n          this.debug(\n            this.getName() +\n              \"#\" +\n              thisState +\n              \"#\" +\n              t +\n              \"#autoActionsAfterOntransition\"\n          );\n        }\n\n        trans.getAutoActionsAfterOntransition()(this);\n\n        // Run the autoActionsBeforeOnexit actions for the old state\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#autoActionsBeforeOnexit\"\n          );\n        }\n\n        currentState.getAutoActionsBeforeOnexit()(this);\n\n        // Run the exit function for the old state\n        if (debugFunctions) {\n          this.debug(this.getName() + \"#\" + thisState + \"#exit\");\n        }\n\n        currentState.getOnexit()(this, event);\n\n        // Run the autoActionsAfterOnexit actions for the old state\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#autoActionsAfterOnexit\"\n          );\n        }\n\n        currentState.getAutoActionsAfterOnexit()(this);\n\n        // If this state has been replaced and we're supposed to dispose it...\n        if (currentState._bNeedDispose) {\n          // ... then dispose it now that it's no longer in use\n          currentState.dispose();\n        }\n\n        // It the fsm has terminated, stop right here\n        if (this.__bTerminated) {\n          if (debugFunctions) {\n            this.debug(this.getName() + \"#\" + \"TERMINATED\");\n          }\n          this.fireDataEvent(\"terminated\", thisState);\n          return true;\n        }\n\n        // Reset currentState to the new state object\n        currentState = this.__states[this.getNextState()];\n\n        // set previousState and state, and clear nextState, for transition\n        this.setPreviousState(thisState);\n        this.setState(this.getNextState());\n        this.setNextState(null);\n        prevState = thisState;\n        thisState = nextState;\n        nextState = undefined;\n\n        // Run the autoActionsBeforeOnentry actions for the new state\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#autoActionsBeforeOnentry\"\n          );\n        }\n\n        currentState.getAutoActionsBeforeOnentry()(this);\n\n        // Run the entry function for the new state, if one is specified\n        if (debugFunctions) {\n          this.debug(this.getName() + \"#\" + thisState + \"#entry\");\n        }\n\n        currentState.getOnentry()(this, event);\n\n        // Run the autoActionsAfterOnentry actions for the new state\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#autoActionsAfterOnentry\"\n          );\n        }\n\n        currentState.getAutoActionsAfterOnentry()(this);\n\n        // Add any blocked events back onto the pending event queue\n        for (var i = 0; i < this.__blockedEvents.length; i++) {\n          e = this.__blockedEvents.pop();\n          this.__eventQueue.unshift(e);\n        }\n\n        if (debugTransitions) {\n          this.debug(\n            this.getName() +\n              \"#\" +\n              prevState +\n              \" => \" +\n              this.getName() +\n              \"#\" +\n              thisState\n          );\n        }\n\n        // See ya!\n        return true;\n      }\n\n      if (debugTransitions) {\n        this.debug(\n          this.getName() +\n            \"#\" +\n            thisState +\n            \": event '\" +\n            event.getType() +\n            \"'\" +\n            \": no transition found.  No state change.\"\n        );\n      }\n\n      return true;\n    }\n  },\n\n  destruct() {\n    this._disposeArray(\"__eventQueue\");\n    this._disposeArray(\"__blockedEvents\");\n    this.__savedStates = this.__states = null;\n  }\n});\n"
  ],
  "mappings": "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"
}