{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "machineName",
    "constructor",
    "call",
    "setName",
    "__states",
    "__startState",
    "__savedStates",
    "__eventQueue",
    "__blockedEvents",
    "__friendlyToObject",
    "__friendlyToHash",
    "__hashToFriendly",
    "__groupToFriendly",
    "__friendlyToGroups",
    "statics",
    "StateChange",
    "CURRENT_STATE",
    "POP_STATE_STACK",
    "TERMINATE",
    "EventHandling",
    "PREDICATE",
    "BLOCKED",
    "DebugFlags",
    "EVENTS",
    "TRANSITIONS",
    "FUNCTION_DETAIL",
    "OBJECT_NOT_FOUND",
    "events",
    "terminated",
    "properties",
    "name",
    "check",
    "nullable",
    "state",
    "previousState",
    "nextState",
    "maxSavedStates",
    "init",
    "debugFlags",
    "members",
    "__bEventProcessingInProgress",
    "__bTerminated",
    "isTerminated",
    "addState",
    "util",
    "fsm",
    "State",
    "Error",
    "stateName",
    "getName",
    "replaceState",
    "bDispose",
    "oldState",
    "_bNeedDispose",
    "addObject",
    "friendlyName",
    "obj",
    "groupNames",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "i",
    "length",
    "groupName",
    "push",
    "removeObject",
    "objName",
    "bGroupEmpty",
    "getObject",
    "getFriendlyName",
    "getGroupObjects",
    "a",
    "displayAllObjects",
    "debug",
    "_getInternalData",
    "states",
    "startState",
    "eventQueue",
    "blockedEvents",
    "savedStates",
    "friendlyToObject",
    "friendlyToHash",
    "hashToFriendly",
    "groupToFriendly",
    "friendlyToGroups",
    "start",
    "setState",
    "setPreviousState",
    "setNextState",
    "debugFunctions",
    "getDebugFlags",
    "FiniteStateMachine",
    "getAutoActionsBeforeOnentry",
    "getOnentry",
    "getAutoActionsAfterOnentry",
    "pushState",
    "getMaxSavedStates",
    "getState",
    "getPreviousState",
    "popState",
    "pop",
    "postponeEvent",
    "event",
    "unshift",
    "enqueueEvent",
    "bAddAtHead",
    "friendly",
    "getTarget",
    "getType",
    "eventListener",
    "e",
    "clone",
    "__processEvents",
    "fireImmediateEvent",
    "type",
    "target",
    "data",
    "Registration",
    "createEvent",
    "Data",
    "Event",
    "setTarget",
    "scheduleEvent",
    "timeout",
    "Timer",
    "once",
    "__P_516_12",
    "__run",
    "dispose",
    "__P_516_13",
    "thisState",
    "prevState",
    "currentState",
    "transitions",
    "action",
    "debugEvents",
    "debugTransitions",
    "debugObjectNotFound",
    "getEvents",
    "_typeof",
    "trans",
    "t",
    "getPredicate",
    "getNextState",
    "getAutoActionsBeforeOntransition",
    "getOntransition",
    "getAutoActionsAfterOntransition",
    "getAutoActionsBeforeOnexit",
    "getOnexit",
    "getAutoActionsAfterOnexit",
    "fireDataEvent",
    "undefined",
    "destruct",
    "_disposeArray"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/fsm/FiniteStateMachine.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006, 2007, 2011 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A finite state machine.\r\n *\r\n * See {@link qx.util.fsm.State} for details on creating States,\r\n * and {@link qx.util.fsm.Transition} for details on creating\r\n * transitions between states.\r\n */\r\nqx.Class.define(\"qx.util.fsm.FiniteStateMachine\", {\r\n  extend: qx.core.Object,\r\n\r\n  /**\r\n   * @param machineName {String} The name of this finite state machine\r\n   */\r\n  construct(machineName) {\r\n    // Call our superclass' constructor\r\n    super();\r\n\r\n    // Save the machine name\r\n    this.setName(machineName);\r\n\r\n    // Initialize the states object\r\n    this.__states = {};\r\n\r\n    // The first state added will become the start state\r\n    this.__startState = null;\r\n\r\n    // Initialize the saved-states stack\r\n    this.__savedStates = [];\r\n\r\n    // Initialize the pending event queue\r\n    this.__eventQueue = [];\r\n\r\n    // Initialize the blocked events queue\r\n    this.__blockedEvents = [];\r\n\r\n    // Create the friendlyToObject\" object.  Each object has as its property\r\n    // name, the friendly name of the object; and as its property value, the\r\n    // object itself.\r\n    this.__friendlyToObject = {};\r\n\r\n    // Create the \"friendlyToHash\" object.  Each object has as its property\r\n    // name, the friendly name of the object; and as its property value, the\r\n    // hash code of the object.\r\n    this.__friendlyToHash = {};\r\n\r\n    // Create the \"hashToFriendly\" object.  Each object has as its property\r\n    // name, the hash code of the object; and as its property value, the\r\n    // friendly name of the object.\r\n    this.__hashToFriendly = {};\r\n\r\n    // Friendly names can be added to groups, for easy manipulation of\r\n    // enabling and disabling groups of widgets.  Track which friendly names\r\n    // are in which group.\r\n    this.__groupToFriendly = {};\r\n\r\n    // We also need to be able to map back from friendly name to the groups it\r\n    // is in.\r\n    this.__friendlyToGroups = {};\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * Constants which may be values of the nextState member in the\r\n     * transitionInfo parameter of the Transition constructor.\r\n     */\r\n    StateChange: {\r\n      /** When used as a nextState value, means remain in current state */\r\n      CURRENT_STATE: 1,\r\n\r\n      /**\r\n       * When used as a nextState value, means go to most-recently pushed state\r\n       */\r\n      POP_STATE_STACK: 2,\r\n\r\n      /** When used as a nextState value, means terminate this state machine */\r\n      TERMINATE: 3\r\n    },\r\n\r\n    /**\r\n     * Constants for use in the events member of the transitionInfo parameter\r\n     * of the Transition constructor.\r\n     */\r\n    EventHandling: {\r\n      /**\r\n       * This event is handled by this state, but the predicate of a transition\r\n       * will determine whether to use that transition.\r\n       */\r\n      PREDICATE: 1,\r\n\r\n      /** Enqueue this event for possible use by the next state */\r\n      BLOCKED: 2\r\n    },\r\n\r\n    /**\r\n     * Debug bitmask values.\r\n     */\r\n    DebugFlags: {\r\n      /** Show events */\r\n      EVENTS: 1,\r\n\r\n      /** Show transitions */\r\n      TRANSITIONS: 2,\r\n\r\n      /** Show individual function invocations during transitions */\r\n      FUNCTION_DETAIL: 4,\r\n\r\n      /**\r\n       * When object friendly names are referenced but not found, show message\r\n       */\r\n      OBJECT_NOT_FOUND: 8\r\n    }\r\n  },\r\n\r\n  events: {\r\n    /**\r\n     * Fired when the finite state machine terminates. Data is the last state\r\n     * before termination.\r\n     */\r\n    terminated: \"qx.event.type.Data\"\r\n  },\r\n\r\n  properties: {\r\n    /**\r\n     * The name of this finite state machine (for debug messages)\r\n     */\r\n    name: {\r\n      check: \"String\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The current state of the finite state machine.\r\n     */\r\n    state: {\r\n      check: \"String\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The previous state of the finite state machine, i.e. the state from\r\n     * which we most recently transitioned.  Note that this could be the same\r\n     * as the current state if a successful transition brought us back to the\r\n     * same state.\r\n     */\r\n    previousState: {\r\n      check: \"String\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The state to which we will be transitioning.  This property is valid\r\n     * only during a Transition's ontransition function and a State's onexit\r\n     * function.  At all other times, it is null.\r\n     */\r\n    nextState: {\r\n      check: \"String\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The maximum number of states which may pushed onto the state-stack.  It\r\n     * is generally a poor idea to have very many states saved on a stack.\r\n     * Following program logic becomes very difficult, and the code can be\r\n     * highly unmaintainable.  The default should be more than adequate.\r\n     * You've been warned.\r\n     */\r\n    maxSavedStates: {\r\n      check: \"Number\",\r\n      init: 2\r\n    },\r\n\r\n    /**\r\n     * Debug flags, composed of the bitmask values in the DebugFlags constant.\r\n     *\r\n     * Set the debug flags from the application by or-ing together bits, akin\r\n     * to this:\r\n     *\r\n     * <pre class='javascript'>\r\n     * var FSM = qx.util.fsm.FiniteStateMachine;\r\n     * fsm.setDebugFlags(FSM.DebugFlags.EVENTS |\r\n     *                   FSM.DebugFlags.TRANSITIONS |\r\n     *                   FSM.DebugFlags.FUNCTION_DETAIL |\r\n     *                   FSM.DebugFlags.OBJECT_NOT_FOUND);\r\n     * </pre>\r\n     */\r\n    debugFlags: {\r\n      check: \"Number\",\r\n\r\n      // Default:\r\n      // (qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS |\r\n      //  qx.util.fsm.FiniteStateMachine.DebugFlags.TRANSITIONS |\r\n      //  qx.util.fsm.FiniteStateMachine.DebugFlags.OBJECT_NOT_FOUND)\r\n      init: 7\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __states: null,\r\n    __startState: null,\r\n    __eventQueue: null,\r\n    __blockedEvents: null,\r\n    __savedStates: null,\r\n    __friendlyToObject: null,\r\n    __friendlyToHash: null,\r\n    __hashToFriendly: null,\r\n    __groupToFriendly: null,\r\n    __friendlyToGroups: null,\r\n    __bEventProcessingInProgress: false,\r\n    __bTerminated: true,\r\n\r\n    /**\r\n     * Checks whether the finite state machine is terminated or not.\r\n     *\r\n     * @return {Boolean} If the finite state machine is terminated.\r\n     */\r\n    isTerminated() {\r\n      return this.__bTerminated;\r\n    },\r\n\r\n    /**\r\n     * Add a state to the finite state machine.\r\n     *\r\n     *\r\n     * @param state {qx.util.fsm.State}\r\n     *   An object of class qx.util.fsm.State representing a state which is to\r\n     *   be a part of this finite state machine.\r\n     *\r\n     *\r\n     * @throws {Error} If the given state is not an instanceof of qx.util.fsm.State.\r\n     * @throws {Error} If the given state already exists.\r\n     */\r\n    addState(state) {\r\n      // Ensure that we got valid state info\r\n      if (!state instanceof qx.util.fsm.State) {\r\n        throw new Error(\r\n          \"Invalid state: not an instance of \" + \"qx.util.fsm.State\"\r\n        );\r\n      }\r\n\r\n      // Retrieve the name of this state\r\n      var stateName = state.getName();\r\n\r\n      // Ensure that the state name doesn't already exist\r\n      if (stateName in this.__states) {\r\n        throw new Error(\"State \" + stateName + \" already exists\");\r\n      }\r\n\r\n      // Is this the first state being added?\r\n      if (this.__startState == null) {\r\n        // Yup.  Save this state as the start state.\r\n        this.__startState = stateName;\r\n      }\r\n\r\n      // Add the new state object to the finite state machine\r\n      this.__states[stateName] = state;\r\n    },\r\n\r\n    /**\r\n     * Replace a state in the finite state machine.  This is useful if\r\n     * initially \"dummy\" states are created which load the real state table\r\n     * for a series of operations (and possibly also load the gui associated\r\n     * with the new states at the same time).  Having portions of the finite\r\n     * state machine and their associated gui pages loaded at run time can\r\n     * help prevent long delays at application start-up time.\r\n     *\r\n     *\r\n     * @param state {qx.util.fsm.State}\r\n     *   An object of class qx.util.fsm.State representing a state which is to\r\n     *   be a part of this finite state machine.\r\n     *\r\n     * @param bDispose {Boolean}\r\n     *   If <i>true</i>, then dispose the old state object.  If <i>false</i>,\r\n     *   the old state object is returned for disposing by the caller.\r\n     *\r\n     * @return {Object}\r\n     *   The old state object if it was not disposed; otherwise null.\r\n     *\r\n     * @throws {Error} If the given state is not an instanceof of qx.util.fsm.State.\r\n     */\r\n    replaceState(state, bDispose) {\r\n      // Ensure that we got valid state info\r\n      if (!state instanceof qx.util.fsm.State) {\r\n        throw new Error(\r\n          \"Invalid state: not an instance of \" + \"qx.util.fsm.State\"\r\n        );\r\n      }\r\n\r\n      // Retrieve the name of this state\r\n      var stateName = state.getName();\r\n\r\n      // Save the old state object, so we can return it to be disposed\r\n      var oldState = this.__states[stateName];\r\n\r\n      // Replace the old state with the new state object.\r\n      this.__states[stateName] = state;\r\n\r\n      // Did they request that the old state be disposed?\r\n      if (bDispose) {\r\n        // Yup.  Mark it to be disposed.\r\n        oldState._bNeedDispose = true;\r\n      }\r\n\r\n      return oldState;\r\n    },\r\n\r\n    /**\r\n     * Add an object (typically a widget) that is to be accessed during state\r\n     * transitions, to the finite state machine.\r\n     *\r\n     *\r\n     * @param friendlyName {String}\r\n     *   The friendly name to used for access to the object being added.\r\n     *\r\n     * @param obj {Object}\r\n     *   The object to associate with the specified friendly name\r\n     *\r\n     * @param groupNames {Array}\r\n     *   An optional list of group names of which this object is a member.\r\n     *\r\n     */\r\n    addObject(friendlyName, obj, groupNames) {\r\n      var hash = qx.core.ObjectRegistry.toHashCode(obj);\r\n      this.__friendlyToHash[friendlyName] = hash;\r\n      this.__hashToFriendly[hash] = friendlyName;\r\n      this.__friendlyToObject[friendlyName] = obj;\r\n\r\n      // If no groupNames are specified, we're done.\r\n      if (!groupNames) {\r\n        return;\r\n      }\r\n\r\n      // Allow either a single group name or an array of group names.  If the\r\n      // former, we convert it to the latter to make the subsequent code\r\n      // simpler.\r\n      if (typeof groupNames == \"string\") {\r\n        groupNames = [groupNames];\r\n      }\r\n\r\n      // For each group that this friendly name is to be a member of...\r\n      for (var i = 0; i < groupNames.length; i++) {\r\n        var groupName = groupNames[i];\r\n\r\n        // If the group name doesn't yet exist...\r\n        if (!this.__groupToFriendly[groupName]) {\r\n          // ... then create it.\r\n          this.__groupToFriendly[groupName] = {};\r\n        }\r\n\r\n        // Add the friendly name to the list of names in this group\r\n        this.__groupToFriendly[groupName][friendlyName] = true;\r\n\r\n        // If the friendly name group mapping doesn't yet exist...\r\n        if (!this.__friendlyToGroups[friendlyName]) {\r\n          // ... then create it.\r\n          this.__friendlyToGroups[friendlyName] = [];\r\n        }\r\n\r\n        // Append this group name to the list of groups this friendly name is\r\n        // in\r\n        this.__friendlyToGroups[friendlyName].push(groupName);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Remove an object which had previously been added by {@link #addObject}.\r\n     *\r\n     *\r\n     * @param friendlyName {String}\r\n     *   The friendly name associated with an object, specifying which object\r\n     *   is to be removed.\r\n     *\r\n     */\r\n    removeObject(friendlyName) {\r\n      var hash;\r\n      var groupName;\r\n      var objName;\r\n      var bGroupEmpty;\r\n\r\n      hash = this.__friendlyToHash[friendlyName];\r\n\r\n      // Delete references to any groups this friendly name was in\r\n      if (this.__friendlyToGroups[friendlyName]) {\r\n        for (var i = 0; i < this.__friendlyToGroups[friendlyName].length; i++) {\r\n          groupName = this.__friendlyToGroups[friendlyName][i];\r\n          delete this.__groupToFriendly[groupName][friendlyName];\r\n\r\n          // Is the group empty now?\r\n          bGroupEmpty = true;\r\n          for (objName in this.__groupToFriendly[groupName]) {\r\n            // The group is not empty. That's all we wanted to know.\r\n            bGroupEmpty = false;\r\n            break;\r\n          }\r\n\r\n          // If the group is empty...\r\n          if (bGroupEmpty) {\r\n            // ... then we can delete the entire entry\r\n            delete this.__groupToFriendly[groupName];\r\n          }\r\n        }\r\n\r\n        delete this.__friendlyToGroups[friendlyName];\r\n      }\r\n\r\n      // Delete the friendly name\r\n      delete this.__hashToFriendly[hash];\r\n      delete this.__friendlyToHash[friendlyName];\r\n      delete this.__friendlyToObject[friendlyName];\r\n    },\r\n\r\n    /**\r\n     * Retrieve an object previously saved via {@link #addObject}, using its\r\n     * Friendly Name.\r\n     *\r\n     *\r\n     * @param friendlyName {String}\r\n     *   The friendly name of the object to be retrieved.\r\n     *\r\n     * @return {Object}\r\n     *   The object which has the specified friendly name, or undefined if no\r\n     *   object has been associated with that name.\r\n     */\r\n    getObject(friendlyName) {\r\n      return this.__friendlyToObject[friendlyName];\r\n    },\r\n\r\n    /**\r\n     * Get the friendly name of an object.\r\n     *\r\n     *\r\n     * @param obj {Object}\r\n     *   The object for which the friendly name is desired\r\n     *\r\n     * @return {String}\r\n     *   If the object has been previously registered via {@link #addObject},\r\n     *   then the friendly name of the object is returned; otherwise, null.\r\n     */\r\n    getFriendlyName(obj) {\r\n      var hash = obj ? qx.core.ObjectRegistry.toHashCode(obj) : null;\r\n      return hash ? this.__hashToFriendly[hash] : null;\r\n    },\r\n\r\n    /**\r\n     * Retrieve the list of objects which have registered, via {@link #addObject}\r\n     * as being members of the specified group.\r\n     *\r\n     *\r\n     * @param groupName {String}\r\n     *   The name of the group for which the member list is desired.\r\n     *\r\n     * @return {Array}\r\n     *   An array containing the friendly names of any objects which are\r\n     *   members of the specified group.  The resultant array may be empty.\r\n     */\r\n    getGroupObjects(groupName) {\r\n      var a = [];\r\n\r\n      for (var name in this.__groupToFriendly[groupName]) {\r\n        a.push(name);\r\n      }\r\n\r\n      return a;\r\n    },\r\n\r\n    /**\r\n     * Display all of the saved objects and their reverse mappings.\r\n     *\r\n     */\r\n    displayAllObjects() {\r\n      for (var friendlyName in this.__friendlyToHash) {\r\n        var hash = this.__friendlyToHash[friendlyName];\r\n        var obj = this.getObject(friendlyName);\r\n        this.debug(friendlyName + \" => \" + hash);\r\n        this.debug(\"  \" + hash + \" => \" + this.__hashToFriendly[hash]);\r\n        this.debug(\"  \" + friendlyName + \" => \" + this.getObject(friendlyName));\r\n        this.debug(\r\n          \"  \" +\r\n            this.getObject(friendlyName) +\r\n            \" => \" +\r\n            this.getFriendlyName(obj)\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get internal data for debugging\r\n     *\r\n     * @return {Map}\r\n     *   A map containing the following:\r\n     *     __states\r\n     *     __startState\r\n     *     __eventQueue\r\n     *     __blockedEvents\r\n     *     __savedStates\r\n     *     __friendlyToObject\r\n     *     __friendlyToHash\r\n     *     __hashToFriendly\r\n     *     __groupToFriendly\r\n     *     __friendlyToGroups\r\n     *     __bEventProcessingInProgress\r\n     */\r\n    _getInternalData() {\r\n      return {\r\n        states: this.__states,\r\n        startState: this.__startState,\r\n        eventQueue: this.__eventQueue,\r\n        blockedEvents: this.__blockedEvents,\r\n        savedStates: this.__savedStates,\r\n        friendlyToObject: this.__friendlyToObject,\r\n        friendlyToHash: this.__friendlyToHash,\r\n        hashToFriendly: this.__hashToFriendly,\r\n        groupToFriendly: this.__groupToFriendly,\r\n        friendlyToGroups: this.__friendlyToGroups\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Start (or restart, after it has terminated) the finite state machine\r\n     * from the starting state.  The starting state is defined as the first\r\n     * state added to the finite state machine.\r\n     *\r\n     * @throws {Error} If the machine stared with not available state.\r\n     */\r\n    start() {\r\n      this.__bTerminated = false;\r\n\r\n      var stateName = this.__startState;\r\n\r\n      if (stateName == null) {\r\n        throw new Error(\"Machine started with no available states\");\r\n      }\r\n\r\n      // Set the start state to be the first state which was added to the\r\n      // machine\r\n      this.setState(stateName);\r\n      this.setPreviousState(null);\r\n      this.setNextState(null);\r\n\r\n      var debugFunctions =\r\n        this.getDebugFlags() &\r\n        qx.util.fsm.FiniteStateMachine.DebugFlags.FUNCTION_DETAIL;\r\n\r\n      // Run the actionsBeforeOnentry actions for the initial state\r\n      if (debugFunctions) {\r\n        this.debug(this.getName() + \"#\" + stateName + \"#actionsBeforeOnentry\");\r\n      }\r\n\r\n      this.__states[stateName].getAutoActionsBeforeOnentry()(this);\r\n\r\n      // Run the entry function for the new state, if one is specified\r\n      if (debugFunctions) {\r\n        this.debug(this.getName() + \"#\" + stateName + \"#entry\");\r\n      }\r\n\r\n      this.__states[stateName].getOnentry()(this, null);\r\n\r\n      // Run the actionsAfterOnentry actions for the initial state\r\n      if (debugFunctions) {\r\n        this.debug(this.getName() + \"#\" + stateName + \"#actionsAfterOnentry\");\r\n      }\r\n\r\n      this.__states[stateName].getAutoActionsAfterOnentry()(this);\r\n    },\r\n\r\n    /**\r\n     * Save the current or previous state on the saved-state stack.  A future\r\n     * transition can then provide, as its nextState value, the class\r\n     * constant:\r\n     *\r\n     *   <code>\r\n     *   qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK\r\n     *   </code>\r\n     *\r\n     * which will cause the next state to be whatever is at the top of the\r\n     * saved-state stack, and remove that top element from the saved-state\r\n     * stack.\r\n     *\r\n     *\r\n     * @param state {Boolean|String}\r\n     *   When <i>true</i>, then push the current state onto the stack.  This\r\n     *   might be used in a transition, before the state has changed.  When\r\n     *   <i>false</i>, then push the previous state onto the stack.  This\r\n     *   might be used in an on entry function to save the previous state to\r\n     *   return to.  If this parameter is a string, it is taken to be the\r\n     *   name of the state to transition to.\r\n     *\r\n     *\r\n     * @throws {Error} If the saved-state stack is full.\r\n     */\r\n    pushState(state) {\r\n      // See if there's room on the state stack for a new state\r\n      if (this.__savedStates.length >= this.getMaxSavedStates()) {\r\n        // Nope.  Programmer error.\r\n        throw new Error(\"Saved-state stack is full\");\r\n      }\r\n\r\n      if (state === true) {\r\n        // Push the current state onto the saved-state stack\r\n        this.__savedStates.push(this.getState());\r\n      } else if (state) {\r\n        this.__savedStates.push(state);\r\n      } else {\r\n        // Push the previous state onto the saved-state stack\r\n        this.__savedStates.push(this.getPreviousState());\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Pop the saved state stack.\r\n     *\r\n     * @return {String|Boolean}\r\n     *   The name of a state or a boolean flag that had most recently been\r\n     *   pushed onto the saved-state stack.\r\n     */\r\n    popState() {\r\n      // Is there anything on the saved-state stack?\r\n      if (this.__savedStates.length == 0) {\r\n        // Nope. Programmer error.\r\n        throw new Error(\"Saved-state stack is empty\");\r\n      }\r\n\r\n      return this.__savedStates.pop();\r\n    },\r\n\r\n    /**\r\n     * Add the specified event to a list of events to be passed to the next\r\n     * state following state transition.\r\n     *\r\n     *\r\n     * @param event {qx.event.type.Event}\r\n     *   The event to add to the event queue for processing after state change.\r\n     *\r\n     */\r\n    postponeEvent(event) {\r\n      // Add this event to the blocked event queue, so it will be passed to the\r\n      // next state upon transition.\r\n      this.__blockedEvents.unshift(event);\r\n    },\r\n\r\n    /**\r\n     * Enqueue an event for processing\r\n     *\r\n     *\r\n     * @param event {qx.event.type.Event}\r\n     *   The event to be enqueued\r\n     *\r\n     * @param bAddAtHead {Boolean}\r\n     *   If <i>true</i>, put the event at the head of the queue for immediate\r\n     *   processing.  If <i>false</i>, place the event at the tail of the\r\n     *   queue so that it receives in-order processing.\r\n     *\r\n     */\r\n    enqueueEvent(event, bAddAtHead) {\r\n      // Add the event to the event queue\r\n      if (bAddAtHead) {\r\n        // Put event at the head of the queue\r\n        this.__eventQueue.push(event);\r\n      } else {\r\n        // Put event at the tail of the queue\r\n        this.__eventQueue.unshift(event);\r\n      }\r\n\r\n      if (\r\n        this.getDebugFlags() & qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS\r\n      ) {\r\n        // Individual objects are listed.  Ensure target is a saved object\r\n        var friendly = this.getFriendlyName(event.getTarget());\r\n\r\n        if (bAddAtHead) {\r\n          this.debug(\r\n            this.getName() +\r\n              \": Pushed event: \" +\r\n              event.getType() +\r\n              (friendly ? \" on \" + friendly : \"\")\r\n          );\r\n        } else {\r\n          this.debug(\r\n            this.getName() +\r\n              \": Queued event: \" +\r\n              event.getType() +\r\n              (friendly ? \" on \" + friendly : \"\")\r\n          );\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event listener for all event types in the finite state machine\r\n     *\r\n     * @param event {qx.event.type.Event} The event that was dispatched.\r\n     */\r\n    eventListener(event) {\r\n      if (this.__bTerminated) {\r\n        this.debug(\r\n          this.getName() +\r\n            \": Cannot listen to event '\" +\r\n            event.getType() +\r\n            \"', because the finite state machine is not running.\"\r\n        );\r\n\r\n        return;\r\n      }\r\n\r\n      // Events are enqueued upon receipt.  Some events are then processed\r\n      // immediately; other events get processed later.  We need to allow the\r\n      // event dispatcher to free the source event upon our return, so we'll\r\n      // clone it and enqueue our clone.  The source event can then be\r\n      // disposed upon our return.\r\n      var e = event.clone();\r\n\r\n      // Enqueue the new event on the tail of the queue\r\n      this.enqueueEvent(e, false);\r\n\r\n      // Process events\r\n      this.__processEvents();\r\n    },\r\n\r\n    /**\r\n     * Create an event and send it immediately to the finite state machine.\r\n     *\r\n     * @param type {String}\r\n     *   The type of event, e.g. \"execute\"\r\n     *\r\n     * @param target {qx.core.Object}\r\n     *   The target of the event\r\n     *\r\n     * @param data {Object|null}\r\n     *   The data, if any, to issue in the event.  If this parameter is null\r\n     *   then a qx.event.type.Event is instantiated.  Otherwise, an event of\r\n     *   type qx.event.type.Data is instantiated and this data is applied to\r\n     *   it.\r\n     *\r\n     */\r\n    fireImmediateEvent(type, target, data) {\r\n      if (this.__bTerminated) {\r\n        this.debug(\r\n          this.getName() +\r\n            \": Cannot listen to event '\" +\r\n            type +\r\n            \"', because the finite state machine is not running.\"\r\n        );\r\n\r\n        return;\r\n      }\r\n\r\n      if (data) {\r\n        var event = qx.event.Registration.createEvent(\r\n          type,\r\n          qx.event.type.Data,\r\n          [data, null, false]\r\n        );\r\n      } else {\r\n        var event = qx.event.Registration.createEvent(\r\n          type,\r\n          qx.event.type.Event,\r\n          [false, false]\r\n        );\r\n      }\r\n      event.setTarget(target);\r\n      this.eventListener(event);\r\n    },\r\n\r\n    /**\r\n     * Create and schedule an event to be sent to the finite state machine\r\n     * \"shortly\".  This allows such things as letting a progress cursor\r\n     * display prior to handling the event.\r\n     *\r\n     * @param type {String}\r\n     *   The type of event, e.g. \"execute\"\r\n     *\r\n     * @param target {qx.core.Object}\r\n     *   The target of the event\r\n     *\r\n     * @param data {Object|null}\r\n     *   See {@link #fireImmediateEvent} for details.\r\n     *\r\n     * @param timeout {Integer|null}\r\n     *   If provided, this is the number of milliseconds to wait before firing\r\n     *   the event.  If not provided, a default short interval (on the order\r\n     *   of 20 milliseconds) is used.\r\n     *\r\n     */\r\n    scheduleEvent(type, target, data, timeout) {\r\n      qx.event.Timer.once(\r\n        function () {\r\n          this.fireImmediateEvent(type, target, data);\r\n        },\r\n        this,\r\n        timeout || 20\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Process all of the events on the event queue.\r\n     *\r\n     */\r\n    __processEvents() {\r\n      // eventListener() can potentially be called while we're processing\r\n      // events\r\n      if (this.__bEventProcessingInProgress) {\r\n        // We were processing already, so don't process concurrently.\r\n        return;\r\n      }\r\n\r\n      // Track that we're processing events\r\n      this.__bEventProcessingInProgress = true;\r\n\r\n      // Process each of the events on the event queue\r\n      while (this.__eventQueue.length > 0) {\r\n        // Pull the next event from the pending event queue\r\n        var event = this.__eventQueue.pop();\r\n\r\n        // Run the finite state machine with this event\r\n        var bDispose = this.__run(event);\r\n\r\n        // If we didn't block (and re-queue) the event, dispose it.\r\n        if (bDispose) {\r\n          event.dispose();\r\n        }\r\n      }\r\n\r\n      // We're no longer processing events\r\n      this.__bEventProcessingInProgress = false;\r\n    },\r\n\r\n    /**\r\n     * Run the finite state machine to process a single event.\r\n     *\r\n     *\r\n     * @param event {qx.event.type.Event}\r\n     *   An event that has been dispatched.  The event may be handled (if the\r\n     *   current state handles this event type), queued (if the current state\r\n     *   blocks this event type), or discarded (if the current state neither\r\n     *   handles nor blocks this event type).\r\n     *\r\n     * @return {Boolean}\r\n     *   Whether the event should be disposed.  If it was blocked, we've\r\n     *   pushed it back onto the event queue, and it should not be disposed.\r\n     *\r\n     * @throws {Error} If the explicit transitions does not exist.\r\n     * @throws {Error} If the transition returns an invalid value.\r\n     * @throws {Error} If the next step will transit to an nonexistent state.\r\n     * @throws {Error} If the state stack is empty and the next state is POP_STATE_STACK\r\n     * @throws {Error} If the next state is invalid.\r\n     */\r\n    __run(event) {\r\n      // For use in generated functions...\r\n      // State name variables\r\n      var thisState;\r\n      var nextState;\r\n      var prevState;\r\n\r\n      // The current State object\r\n      var currentState;\r\n\r\n      // The transitions available in the current State\r\n      var transitions;\r\n\r\n      // Events handled by the current State\r\n      var e;\r\n\r\n      // The action to take place upon receipt of a particular event\r\n      var action;\r\n\r\n      // Get the debug flags\r\n      var debugFlags = this.getDebugFlags();\r\n\r\n      // Allow slightly faster access to determine if debug is enabled\r\n      var debugEvents =\r\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS;\r\n      var debugTransitions =\r\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.TRANSITIONS;\r\n      var debugFunctions =\r\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.FUNCTION_DETAIL;\r\n      var debugObjectNotFound =\r\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.OBJECT_NOT_FOUND;\r\n\r\n      // Individual objects are listed.  Ensure target is a saved object\r\n      var friendly = this.getFriendlyName(event.getTarget());\r\n\r\n      if (debugEvents) {\r\n        this.debug(\r\n          this.getName() +\r\n            \": Process event: \" +\r\n            event.getType() +\r\n            (friendly ? \" on \" + friendly : \"\")\r\n        );\r\n      }\r\n\r\n      // Get the current state name\r\n      thisState = this.getState();\r\n\r\n      // Get the current State object\r\n      currentState = this.__states[thisState];\r\n\r\n      // Get a list of the transitions available from this state\r\n      transitions = currentState.transitions;\r\n\r\n      // Determine how to handle this event\r\n      e = currentState.getEvents()[event.getType()];\r\n\r\n      // See if we actually found this event type\r\n      if (!e) {\r\n        if (debugEvents) {\r\n          this.debug(\r\n            this.getName() +\r\n              \": Event '\" +\r\n              event.getType() +\r\n              \"'\" +\r\n              \" not handled.  Ignoring.\"\r\n          );\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      // We might have found a constant (PREDICATE or BLOCKED) or an object\r\n      // with each property name being the friendly name of a saved object,\r\n      // and the property value being one of the constants (PREDICATE or\r\n      // BLOCKED).\r\n      if (typeof e == \"object\") {\r\n        if (!friendly) {\r\n          // Nope, it doesn't seem so.  Just discard it.\r\n          if (debugObjectNotFound) {\r\n            this.debug(\r\n              this.getName() +\r\n                \": Could not find friendly name for '\" +\r\n                event.getType() +\r\n                \"' on '\" +\r\n                event.getTarget() +\r\n                \"'\"\r\n            );\r\n          }\r\n\r\n          return true;\r\n        }\r\n\r\n        action = e[friendly];\r\n\r\n        // Do we handle this event type for the widget from which it\r\n        // originated?\r\n        if (!action) {\r\n          // Nope.\r\n          if (debugEvents) {\r\n            this.debug(\r\n              this.getName() +\r\n                \": Event '\" +\r\n                event.getType() +\r\n                \"'\" +\r\n                \" not handled for target \" +\r\n                friendly +\r\n                \".  Ignoring.\"\r\n            );\r\n          }\r\n\r\n          return true;\r\n        }\r\n      } else {\r\n        action = e;\r\n      }\r\n\r\n      switch (action) {\r\n        case qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE:\r\n          // Process this event.  One of the transitions should handle it.\r\n          break;\r\n\r\n        case qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED:\r\n          // This event is blocked.  Enqueue it for later, and get outta here.\r\n          if (debugEvents) {\r\n            this.debug(\r\n              this.getName() +\r\n                \": Event '\" +\r\n                event.getType() +\r\n                \"'\" +\r\n                \" blocked.  Re-queuing.\"\r\n            );\r\n          }\r\n\r\n          this.__blockedEvents.unshift(event);\r\n          return false;\r\n\r\n        default:\r\n          // See if we've been given an explicit transition name\r\n          if (typeof action == \"string\") {\r\n            // Yup!  Ensure that it exists\r\n            if (transitions[action]) {\r\n              // Yup.  Create a transitions object containing only this\r\n              // transition.\r\n              var trans = transitions[action];\r\n              transitions = {};\r\n              transitions[action] = trans;\r\n            } else {\r\n              throw new Error(\r\n                \"Explicit transition \" + action + \" does not exist\"\r\n              );\r\n            }\r\n\r\n            break;\r\n          }\r\n      }\r\n\r\n      // We handle the event.  Try each transition in turn until we find one\r\n      // that is acceptable.\r\n      for (var t in transitions) {\r\n        var trans = transitions[t];\r\n\r\n        // Does the predicate allow use of this transition?\r\n        switch (trans.getPredicate()(this, event)) {\r\n          case true:\r\n            // Transition is allowed.  Proceed.\r\n            break;\r\n\r\n          case false:\r\n            // Transition is not allowed.  Try next transition.\r\n            continue;\r\n\r\n          case null:\r\n            // Transition indicates not to try further transitions\r\n            return true;\r\n\r\n          default:\r\n            throw new Error(\r\n              \"Transition \" +\r\n                thisState +\r\n                \":\" +\r\n                t +\r\n                \" returned a value other than \" +\r\n                \"true, false, or null.\"\r\n            );\r\n        }\r\n\r\n        // We think we can transition to the next state.  Set next state.\r\n        nextState = trans.getNextState();\r\n\r\n        if (typeof nextState == \"string\") {\r\n          // We found a literal state name.  Ensure it exists.\r\n          if (!nextState in this.__states) {\r\n            throw new Error(\r\n              \"Attempt to transition to nonexistent state \" + nextState\r\n            );\r\n          }\r\n\r\n          // It exists.  Track it being the next state.\r\n          this.setNextState(nextState);\r\n        } else {\r\n          // If it's not a string, nextState must be a StateChange constant\r\n          switch (nextState) {\r\n            case qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE:\r\n              // They want to remain in the same state.\r\n              nextState = thisState;\r\n              this.setNextState(nextState);\r\n              break;\r\n\r\n            case qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK:\r\n              // Switch to the state at the top of the state stack.\r\n              if (this.__savedStates.length == 0) {\r\n                throw new Error(\r\n                  \"Attempt to transition to POP_STATE_STACK \" +\r\n                    \"while state stack is empty.\"\r\n                );\r\n              }\r\n\r\n              // Pop the state stack to retrieve the state to transition to\r\n              nextState = this.__savedStates.pop();\r\n              this.setNextState(nextState);\r\n              break;\r\n\r\n            case qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE:\r\n              // Terminate fsm\r\n              this.__bTerminated = true;\r\n              this.setNextState(null);\r\n              break;\r\n\r\n            default:\r\n              throw new Error(\"Internal error: invalid nextState\");\r\n          }\r\n        }\r\n\r\n        // Run the actionsBeforeOntransition actions for this transition\r\n        if (debugFunctions) {\r\n          this.debug(\r\n            this.getName() +\r\n              \"#\" +\r\n              thisState +\r\n              \"#\" +\r\n              t +\r\n              \"#autoActionsBeforeOntransition\"\r\n          );\r\n        }\r\n\r\n        trans.getAutoActionsBeforeOntransition()(this);\r\n\r\n        // Run the 'ontransition' function\r\n        if (debugFunctions) {\r\n          this.debug(\r\n            this.getName() + \"#\" + thisState + \"#\" + t + \"#ontransition\"\r\n          );\r\n        }\r\n\r\n        trans.getOntransition()(this, event);\r\n\r\n        // Run the autoActionsAfterOntransition actions for this transition\r\n        if (debugFunctions) {\r\n          this.debug(\r\n            this.getName() +\r\n              \"#\" +\r\n              thisState +\r\n              \"#\" +\r\n              t +\r\n              \"#autoActionsAfterOntransition\"\r\n          );\r\n        }\r\n\r\n        trans.getAutoActionsAfterOntransition()(this);\r\n\r\n        // Run the autoActionsBeforeOnexit actions for the old state\r\n        if (debugFunctions) {\r\n          this.debug(\r\n            this.getName() + \"#\" + thisState + \"#autoActionsBeforeOnexit\"\r\n          );\r\n        }\r\n\r\n        currentState.getAutoActionsBeforeOnexit()(this);\r\n\r\n        // Run the exit function for the old state\r\n        if (debugFunctions) {\r\n          this.debug(this.getName() + \"#\" + thisState + \"#exit\");\r\n        }\r\n\r\n        currentState.getOnexit()(this, event);\r\n\r\n        // Run the autoActionsAfterOnexit actions for the old state\r\n        if (debugFunctions) {\r\n          this.debug(\r\n            this.getName() + \"#\" + thisState + \"#autoActionsAfterOnexit\"\r\n          );\r\n        }\r\n\r\n        currentState.getAutoActionsAfterOnexit()(this);\r\n\r\n        // If this state has been replaced and we're supposed to dispose it...\r\n        if (currentState._bNeedDispose) {\r\n          // ... then dispose it now that it's no longer in use\r\n          currentState.dispose();\r\n        }\r\n\r\n        // It the fsm has terminated, stop right here\r\n        if (this.__bTerminated) {\r\n          if (debugFunctions) {\r\n            this.debug(this.getName() + \"#\" + \"TERMINATED\");\r\n          }\r\n          this.fireDataEvent(\"terminated\", thisState);\r\n          return true;\r\n        }\r\n\r\n        // Reset currentState to the new state object\r\n        currentState = this.__states[this.getNextState()];\r\n\r\n        // set previousState and state, and clear nextState, for transition\r\n        this.setPreviousState(thisState);\r\n        this.setState(this.getNextState());\r\n        this.setNextState(null);\r\n        prevState = thisState;\r\n        thisState = nextState;\r\n        nextState = undefined;\r\n\r\n        // Run the autoActionsBeforeOnentry actions for the new state\r\n        if (debugFunctions) {\r\n          this.debug(\r\n            this.getName() + \"#\" + thisState + \"#autoActionsBeforeOnentry\"\r\n          );\r\n        }\r\n\r\n        currentState.getAutoActionsBeforeOnentry()(this);\r\n\r\n        // Run the entry function for the new state, if one is specified\r\n        if (debugFunctions) {\r\n          this.debug(this.getName() + \"#\" + thisState + \"#entry\");\r\n        }\r\n\r\n        currentState.getOnentry()(this, event);\r\n\r\n        // Run the autoActionsAfterOnentry actions for the new state\r\n        if (debugFunctions) {\r\n          this.debug(\r\n            this.getName() + \"#\" + thisState + \"#autoActionsAfterOnentry\"\r\n          );\r\n        }\r\n\r\n        currentState.getAutoActionsAfterOnentry()(this);\r\n\r\n        // Add any blocked events back onto the pending event queue\r\n        for (var i = 0; i < this.__blockedEvents.length; i++) {\r\n          e = this.__blockedEvents.pop();\r\n          this.__eventQueue.unshift(e);\r\n        }\r\n\r\n        if (debugTransitions) {\r\n          this.debug(\r\n            this.getName() +\r\n              \"#\" +\r\n              prevState +\r\n              \" => \" +\r\n              this.getName() +\r\n              \"#\" +\r\n              thisState\r\n          );\r\n        }\r\n\r\n        // See ya!\r\n        return true;\r\n      }\r\n\r\n      if (debugTransitions) {\r\n        this.debug(\r\n          this.getName() +\r\n            \"#\" +\r\n            thisState +\r\n            \": event '\" +\r\n            event.getType() +\r\n            \"'\" +\r\n            \": no transition found.  No state change.\"\r\n        );\r\n      }\r\n\r\n      return true;\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this._disposeArray(\"__eventQueue\");\r\n    this._disposeArray(\"__blockedEvents\");\r\n    this.__savedStates = this.__states = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}