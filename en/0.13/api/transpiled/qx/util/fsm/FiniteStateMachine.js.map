{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "machineName",
    "constructor",
    "call",
    "setName",
    "__states",
    "__startState",
    "__savedStates",
    "__eventQueue",
    "__blockedEvents",
    "__friendlyToObject",
    "__friendlyToHash",
    "__hashToFriendly",
    "__groupToFriendly",
    "__friendlyToGroups",
    "statics",
    "StateChange",
    "CURRENT_STATE",
    "POP_STATE_STACK",
    "TERMINATE",
    "EventHandling",
    "PREDICATE",
    "BLOCKED",
    "DebugFlags",
    "EVENTS",
    "TRANSITIONS",
    "FUNCTION_DETAIL",
    "OBJECT_NOT_FOUND",
    "events",
    "terminated",
    "properties",
    "name",
    "check",
    "nullable",
    "state",
    "previousState",
    "nextState",
    "maxSavedStates",
    "init",
    "debugFlags",
    "members",
    "__bEventProcessingInProgress",
    "__bTerminated",
    "isTerminated",
    "addState",
    "util",
    "fsm",
    "State",
    "Error",
    "stateName",
    "getName",
    "replaceState",
    "bDispose",
    "oldState",
    "_bNeedDispose",
    "addObject",
    "friendlyName",
    "obj",
    "groupNames",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "i",
    "length",
    "groupName",
    "push",
    "removeObject",
    "objName",
    "bGroupEmpty",
    "getObject",
    "getFriendlyName",
    "getGroupObjects",
    "a",
    "displayAllObjects",
    "debug",
    "_getInternalData",
    "states",
    "startState",
    "eventQueue",
    "blockedEvents",
    "savedStates",
    "friendlyToObject",
    "friendlyToHash",
    "hashToFriendly",
    "groupToFriendly",
    "friendlyToGroups",
    "start",
    "setState",
    "setPreviousState",
    "setNextState",
    "debugFunctions",
    "getDebugFlags",
    "FiniteStateMachine",
    "getAutoActionsBeforeOnentry",
    "getOnentry",
    "getAutoActionsAfterOnentry",
    "pushState",
    "getMaxSavedStates",
    "getState",
    "getPreviousState",
    "popState",
    "pop",
    "postponeEvent",
    "event",
    "unshift",
    "enqueueEvent",
    "bAddAtHead",
    "friendly",
    "getTarget",
    "getType",
    "eventListener",
    "e",
    "clone",
    "__processEvents",
    "fireImmediateEvent",
    "type",
    "target",
    "data",
    "Registration",
    "createEvent",
    "Data",
    "Event",
    "setTarget",
    "scheduleEvent",
    "timeout",
    "Timer",
    "once",
    "__P_516_12",
    "__run",
    "dispose",
    "__P_516_13",
    "thisState",
    "prevState",
    "currentState",
    "transitions",
    "action",
    "debugEvents",
    "debugTransitions",
    "debugObjectNotFound",
    "getEvents",
    "_typeof",
    "trans",
    "t",
    "getPredicate",
    "getNextState",
    "getAutoActionsBeforeOntransition",
    "getOntransition",
    "getAutoActionsAfterOntransition",
    "getAutoActionsBeforeOnexit",
    "getOnexit",
    "getAutoActionsAfterOnexit",
    "fireDataEvent",
    "undefined",
    "destruct",
    "_disposeArray"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/fsm/FiniteStateMachine.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006, 2007, 2011 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A finite state machine.\n *\n * See {@link qx.util.fsm.State} for details on creating States,\n * and {@link qx.util.fsm.Transition} for details on creating\n * transitions between states.\n */\nqx.Class.define(\"qx.util.fsm.FiniteStateMachine\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param machineName {String} The name of this finite state machine\n   */\n  construct(machineName) {\n    // Call our superclass' constructor\n    super();\n\n    // Save the machine name\n    this.setName(machineName);\n\n    // Initialize the states object\n    this.__states = {};\n\n    // The first state added will become the start state\n    this.__startState = null;\n\n    // Initialize the saved-states stack\n    this.__savedStates = [];\n\n    // Initialize the pending event queue\n    this.__eventQueue = [];\n\n    // Initialize the blocked events queue\n    this.__blockedEvents = [];\n\n    // Create the friendlyToObject\" object.  Each object has as its property\n    // name, the friendly name of the object; and as its property value, the\n    // object itself.\n    this.__friendlyToObject = {};\n\n    // Create the \"friendlyToHash\" object.  Each object has as its property\n    // name, the friendly name of the object; and as its property value, the\n    // hash code of the object.\n    this.__friendlyToHash = {};\n\n    // Create the \"hashToFriendly\" object.  Each object has as its property\n    // name, the hash code of the object; and as its property value, the\n    // friendly name of the object.\n    this.__hashToFriendly = {};\n\n    // Friendly names can be added to groups, for easy manipulation of\n    // enabling and disabling groups of widgets.  Track which friendly names\n    // are in which group.\n    this.__groupToFriendly = {};\n\n    // We also need to be able to map back from friendly name to the groups it\n    // is in.\n    this.__friendlyToGroups = {};\n  },\n\n  statics: {\n    /**\n     * Constants which may be values of the nextState member in the\n     * transitionInfo parameter of the Transition constructor.\n     */\n    StateChange: {\n      /** When used as a nextState value, means remain in current state */\n      CURRENT_STATE: 1,\n\n      /**\n       * When used as a nextState value, means go to most-recently pushed state\n       */\n      POP_STATE_STACK: 2,\n\n      /** When used as a nextState value, means terminate this state machine */\n      TERMINATE: 3\n    },\n\n    /**\n     * Constants for use in the events member of the transitionInfo parameter\n     * of the Transition constructor.\n     */\n    EventHandling: {\n      /**\n       * This event is handled by this state, but the predicate of a transition\n       * will determine whether to use that transition.\n       */\n      PREDICATE: 1,\n\n      /** Enqueue this event for possible use by the next state */\n      BLOCKED: 2\n    },\n\n    /**\n     * Debug bitmask values.\n     */\n    DebugFlags: {\n      /** Show events */\n      EVENTS: 1,\n\n      /** Show transitions */\n      TRANSITIONS: 2,\n\n      /** Show individual function invocations during transitions */\n      FUNCTION_DETAIL: 4,\n\n      /**\n       * When object friendly names are referenced but not found, show message\n       */\n      OBJECT_NOT_FOUND: 8\n    }\n  },\n\n  events: {\n    /**\n     * Fired when the finite state machine terminates. Data is the last state\n     * before termination.\n     */\n    terminated: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /**\n     * The name of this finite state machine (for debug messages)\n     */\n    name: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The current state of the finite state machine.\n     */\n    state: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The previous state of the finite state machine, i.e. the state from\n     * which we most recently transitioned.  Note that this could be the same\n     * as the current state if a successful transition brought us back to the\n     * same state.\n     */\n    previousState: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The state to which we will be transitioning.  This property is valid\n     * only during a Transition's ontransition function and a State's onexit\n     * function.  At all other times, it is null.\n     */\n    nextState: {\n      check: \"String\",\n      nullable: true\n    },\n\n    /**\n     * The maximum number of states which may pushed onto the state-stack.  It\n     * is generally a poor idea to have very many states saved on a stack.\n     * Following program logic becomes very difficult, and the code can be\n     * highly unmaintainable.  The default should be more than adequate.\n     * You've been warned.\n     */\n    maxSavedStates: {\n      check: \"Number\",\n      init: 2\n    },\n\n    /**\n     * Debug flags, composed of the bitmask values in the DebugFlags constant.\n     *\n     * Set the debug flags from the application by or-ing together bits, akin\n     * to this:\n     *\n     * <pre class='javascript'>\n     * var FSM = qx.util.fsm.FiniteStateMachine;\n     * fsm.setDebugFlags(FSM.DebugFlags.EVENTS |\n     *                   FSM.DebugFlags.TRANSITIONS |\n     *                   FSM.DebugFlags.FUNCTION_DETAIL |\n     *                   FSM.DebugFlags.OBJECT_NOT_FOUND);\n     * </pre>\n     */\n    debugFlags: {\n      check: \"Number\",\n\n      // Default:\n      // (qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS |\n      //  qx.util.fsm.FiniteStateMachine.DebugFlags.TRANSITIONS |\n      //  qx.util.fsm.FiniteStateMachine.DebugFlags.OBJECT_NOT_FOUND)\n      init: 7\n    }\n  },\n\n  members: {\n    __states: null,\n    __startState: null,\n    __eventQueue: null,\n    __blockedEvents: null,\n    __savedStates: null,\n    __friendlyToObject: null,\n    __friendlyToHash: null,\n    __hashToFriendly: null,\n    __groupToFriendly: null,\n    __friendlyToGroups: null,\n    __bEventProcessingInProgress: false,\n    __bTerminated: true,\n\n    /**\n     * Checks whether the finite state machine is terminated or not.\n     *\n     * @return {Boolean} If the finite state machine is terminated.\n     */\n    isTerminated() {\n      return this.__bTerminated;\n    },\n\n    /**\n     * Add a state to the finite state machine.\n     *\n     *\n     * @param state {qx.util.fsm.State}\n     *   An object of class qx.util.fsm.State representing a state which is to\n     *   be a part of this finite state machine.\n     *\n     *\n     * @throws {Error} If the given state is not an instanceof of qx.util.fsm.State.\n     * @throws {Error} If the given state already exists.\n     */\n    addState(state) {\n      // Ensure that we got valid state info\n      if (!state instanceof qx.util.fsm.State) {\n        throw new Error(\n          \"Invalid state: not an instance of \" + \"qx.util.fsm.State\"\n        );\n      }\n\n      // Retrieve the name of this state\n      var stateName = state.getName();\n\n      // Ensure that the state name doesn't already exist\n      if (stateName in this.__states) {\n        throw new Error(\"State \" + stateName + \" already exists\");\n      }\n\n      // Is this the first state being added?\n      if (this.__startState == null) {\n        // Yup.  Save this state as the start state.\n        this.__startState = stateName;\n      }\n\n      // Add the new state object to the finite state machine\n      this.__states[stateName] = state;\n    },\n\n    /**\n     * Replace a state in the finite state machine.  This is useful if\n     * initially \"dummy\" states are created which load the real state table\n     * for a series of operations (and possibly also load the gui associated\n     * with the new states at the same time).  Having portions of the finite\n     * state machine and their associated gui pages loaded at run time can\n     * help prevent long delays at application start-up time.\n     *\n     *\n     * @param state {qx.util.fsm.State}\n     *   An object of class qx.util.fsm.State representing a state which is to\n     *   be a part of this finite state machine.\n     *\n     * @param bDispose {Boolean}\n     *   If <i>true</i>, then dispose the old state object.  If <i>false</i>,\n     *   the old state object is returned for disposing by the caller.\n     *\n     * @return {Object}\n     *   The old state object if it was not disposed; otherwise null.\n     *\n     * @throws {Error} If the given state is not an instanceof of qx.util.fsm.State.\n     */\n    replaceState(state, bDispose) {\n      // Ensure that we got valid state info\n      if (!state instanceof qx.util.fsm.State) {\n        throw new Error(\n          \"Invalid state: not an instance of \" + \"qx.util.fsm.State\"\n        );\n      }\n\n      // Retrieve the name of this state\n      var stateName = state.getName();\n\n      // Save the old state object, so we can return it to be disposed\n      var oldState = this.__states[stateName];\n\n      // Replace the old state with the new state object.\n      this.__states[stateName] = state;\n\n      // Did they request that the old state be disposed?\n      if (bDispose) {\n        // Yup.  Mark it to be disposed.\n        oldState._bNeedDispose = true;\n      }\n\n      return oldState;\n    },\n\n    /**\n     * Add an object (typically a widget) that is to be accessed during state\n     * transitions, to the finite state machine.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name to used for access to the object being added.\n     *\n     * @param obj {Object}\n     *   The object to associate with the specified friendly name\n     *\n     * @param groupNames {Array}\n     *   An optional list of group names of which this object is a member.\n     *\n     */\n    addObject(friendlyName, obj, groupNames) {\n      var hash = qx.core.ObjectRegistry.toHashCode(obj);\n      this.__friendlyToHash[friendlyName] = hash;\n      this.__hashToFriendly[hash] = friendlyName;\n      this.__friendlyToObject[friendlyName] = obj;\n\n      // If no groupNames are specified, we're done.\n      if (!groupNames) {\n        return;\n      }\n\n      // Allow either a single group name or an array of group names.  If the\n      // former, we convert it to the latter to make the subsequent code\n      // simpler.\n      if (typeof groupNames == \"string\") {\n        groupNames = [groupNames];\n      }\n\n      // For each group that this friendly name is to be a member of...\n      for (var i = 0; i < groupNames.length; i++) {\n        var groupName = groupNames[i];\n\n        // If the group name doesn't yet exist...\n        if (!this.__groupToFriendly[groupName]) {\n          // ... then create it.\n          this.__groupToFriendly[groupName] = {};\n        }\n\n        // Add the friendly name to the list of names in this group\n        this.__groupToFriendly[groupName][friendlyName] = true;\n\n        // If the friendly name group mapping doesn't yet exist...\n        if (!this.__friendlyToGroups[friendlyName]) {\n          // ... then create it.\n          this.__friendlyToGroups[friendlyName] = [];\n        }\n\n        // Append this group name to the list of groups this friendly name is\n        // in\n        this.__friendlyToGroups[friendlyName].push(groupName);\n      }\n    },\n\n    /**\n     * Remove an object which had previously been added by {@link #addObject}.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name associated with an object, specifying which object\n     *   is to be removed.\n     *\n     */\n    removeObject(friendlyName) {\n      var hash;\n      var groupName;\n      var objName;\n      var bGroupEmpty;\n\n      hash = this.__friendlyToHash[friendlyName];\n\n      // Delete references to any groups this friendly name was in\n      if (this.__friendlyToGroups[friendlyName]) {\n        for (var i = 0; i < this.__friendlyToGroups[friendlyName].length; i++) {\n          groupName = this.__friendlyToGroups[friendlyName][i];\n          delete this.__groupToFriendly[groupName][friendlyName];\n\n          // Is the group empty now?\n          bGroupEmpty = true;\n          for (objName in this.__groupToFriendly[groupName]) {\n            // The group is not empty. That's all we wanted to know.\n            bGroupEmpty = false;\n            break;\n          }\n\n          // If the group is empty...\n          if (bGroupEmpty) {\n            // ... then we can delete the entire entry\n            delete this.__groupToFriendly[groupName];\n          }\n        }\n\n        delete this.__friendlyToGroups[friendlyName];\n      }\n\n      // Delete the friendly name\n      delete this.__hashToFriendly[hash];\n      delete this.__friendlyToHash[friendlyName];\n      delete this.__friendlyToObject[friendlyName];\n    },\n\n    /**\n     * Retrieve an object previously saved via {@link #addObject}, using its\n     * Friendly Name.\n     *\n     *\n     * @param friendlyName {String}\n     *   The friendly name of the object to be retrieved.\n     *\n     * @return {Object}\n     *   The object which has the specified friendly name, or undefined if no\n     *   object has been associated with that name.\n     */\n    getObject(friendlyName) {\n      return this.__friendlyToObject[friendlyName];\n    },\n\n    /**\n     * Get the friendly name of an object.\n     *\n     *\n     * @param obj {Object}\n     *   The object for which the friendly name is desired\n     *\n     * @return {String}\n     *   If the object has been previously registered via {@link #addObject},\n     *   then the friendly name of the object is returned; otherwise, null.\n     */\n    getFriendlyName(obj) {\n      var hash = obj ? qx.core.ObjectRegistry.toHashCode(obj) : null;\n      return hash ? this.__hashToFriendly[hash] : null;\n    },\n\n    /**\n     * Retrieve the list of objects which have registered, via {@link #addObject}\n     * as being members of the specified group.\n     *\n     *\n     * @param groupName {String}\n     *   The name of the group for which the member list is desired.\n     *\n     * @return {Array}\n     *   An array containing the friendly names of any objects which are\n     *   members of the specified group.  The resultant array may be empty.\n     */\n    getGroupObjects(groupName) {\n      var a = [];\n\n      for (var name in this.__groupToFriendly[groupName]) {\n        a.push(name);\n      }\n\n      return a;\n    },\n\n    /**\n     * Display all of the saved objects and their reverse mappings.\n     *\n     */\n    displayAllObjects() {\n      for (var friendlyName in this.__friendlyToHash) {\n        var hash = this.__friendlyToHash[friendlyName];\n        var obj = this.getObject(friendlyName);\n        this.debug(friendlyName + \" => \" + hash);\n        this.debug(\"  \" + hash + \" => \" + this.__hashToFriendly[hash]);\n        this.debug(\"  \" + friendlyName + \" => \" + this.getObject(friendlyName));\n        this.debug(\n          \"  \" +\n            this.getObject(friendlyName) +\n            \" => \" +\n            this.getFriendlyName(obj)\n        );\n      }\n    },\n\n    /**\n     * Get internal data for debugging\n     *\n     * @return {Map}\n     *   A map containing the following:\n     *     __states\n     *     __startState\n     *     __eventQueue\n     *     __blockedEvents\n     *     __savedStates\n     *     __friendlyToObject\n     *     __friendlyToHash\n     *     __hashToFriendly\n     *     __groupToFriendly\n     *     __friendlyToGroups\n     *     __bEventProcessingInProgress\n     */\n    _getInternalData() {\n      return {\n        states: this.__states,\n        startState: this.__startState,\n        eventQueue: this.__eventQueue,\n        blockedEvents: this.__blockedEvents,\n        savedStates: this.__savedStates,\n        friendlyToObject: this.__friendlyToObject,\n        friendlyToHash: this.__friendlyToHash,\n        hashToFriendly: this.__hashToFriendly,\n        groupToFriendly: this.__groupToFriendly,\n        friendlyToGroups: this.__friendlyToGroups\n      };\n    },\n\n    /**\n     * Start (or restart, after it has terminated) the finite state machine\n     * from the starting state.  The starting state is defined as the first\n     * state added to the finite state machine.\n     *\n     * @throws {Error} If the machine stared with not available state.\n     */\n    start() {\n      this.__bTerminated = false;\n\n      var stateName = this.__startState;\n\n      if (stateName == null) {\n        throw new Error(\"Machine started with no available states\");\n      }\n\n      // Set the start state to be the first state which was added to the\n      // machine\n      this.setState(stateName);\n      this.setPreviousState(null);\n      this.setNextState(null);\n\n      var debugFunctions =\n        this.getDebugFlags() &\n        qx.util.fsm.FiniteStateMachine.DebugFlags.FUNCTION_DETAIL;\n\n      // Run the actionsBeforeOnentry actions for the initial state\n      if (debugFunctions) {\n        this.debug(this.getName() + \"#\" + stateName + \"#actionsBeforeOnentry\");\n      }\n\n      this.__states[stateName].getAutoActionsBeforeOnentry()(this);\n\n      // Run the entry function for the new state, if one is specified\n      if (debugFunctions) {\n        this.debug(this.getName() + \"#\" + stateName + \"#entry\");\n      }\n\n      this.__states[stateName].getOnentry()(this, null);\n\n      // Run the actionsAfterOnentry actions for the initial state\n      if (debugFunctions) {\n        this.debug(this.getName() + \"#\" + stateName + \"#actionsAfterOnentry\");\n      }\n\n      this.__states[stateName].getAutoActionsAfterOnentry()(this);\n    },\n\n    /**\n     * Save the current or previous state on the saved-state stack.  A future\n     * transition can then provide, as its nextState value, the class\n     * constant:\n     *\n     *   <code>\n     *   qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK\n     *   </code>\n     *\n     * which will cause the next state to be whatever is at the top of the\n     * saved-state stack, and remove that top element from the saved-state\n     * stack.\n     *\n     *\n     * @param state {Boolean|String}\n     *   When <i>true</i>, then push the current state onto the stack.  This\n     *   might be used in a transition, before the state has changed.  When\n     *   <i>false</i>, then push the previous state onto the stack.  This\n     *   might be used in an on entry function to save the previous state to\n     *   return to.  If this parameter is a string, it is taken to be the\n     *   name of the state to transition to.\n     *\n     *\n     * @throws {Error} If the saved-state stack is full.\n     */\n    pushState(state) {\n      // See if there's room on the state stack for a new state\n      if (this.__savedStates.length >= this.getMaxSavedStates()) {\n        // Nope.  Programmer error.\n        throw new Error(\"Saved-state stack is full\");\n      }\n\n      if (state === true) {\n        // Push the current state onto the saved-state stack\n        this.__savedStates.push(this.getState());\n      } else if (state) {\n        this.__savedStates.push(state);\n      } else {\n        // Push the previous state onto the saved-state stack\n        this.__savedStates.push(this.getPreviousState());\n      }\n    },\n\n    /**\n     * Pop the saved state stack.\n     *\n     * @return {String|Boolean}\n     *   The name of a state or a boolean flag that had most recently been\n     *   pushed onto the saved-state stack.\n     */\n    popState() {\n      // Is there anything on the saved-state stack?\n      if (this.__savedStates.length == 0) {\n        // Nope. Programmer error.\n        throw new Error(\"Saved-state stack is empty\");\n      }\n\n      return this.__savedStates.pop();\n    },\n\n    /**\n     * Add the specified event to a list of events to be passed to the next\n     * state following state transition.\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   The event to add to the event queue for processing after state change.\n     *\n     */\n    postponeEvent(event) {\n      // Add this event to the blocked event queue, so it will be passed to the\n      // next state upon transition.\n      this.__blockedEvents.unshift(event);\n    },\n\n    /**\n     * Enqueue an event for processing\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   The event to be enqueued\n     *\n     * @param bAddAtHead {Boolean}\n     *   If <i>true</i>, put the event at the head of the queue for immediate\n     *   processing.  If <i>false</i>, place the event at the tail of the\n     *   queue so that it receives in-order processing.\n     *\n     */\n    enqueueEvent(event, bAddAtHead) {\n      // Add the event to the event queue\n      if (bAddAtHead) {\n        // Put event at the head of the queue\n        this.__eventQueue.push(event);\n      } else {\n        // Put event at the tail of the queue\n        this.__eventQueue.unshift(event);\n      }\n\n      if (\n        this.getDebugFlags() & qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS\n      ) {\n        // Individual objects are listed.  Ensure target is a saved object\n        var friendly = this.getFriendlyName(event.getTarget());\n\n        if (bAddAtHead) {\n          this.debug(\n            this.getName() +\n              \": Pushed event: \" +\n              event.getType() +\n              (friendly ? \" on \" + friendly : \"\")\n          );\n        } else {\n          this.debug(\n            this.getName() +\n              \": Queued event: \" +\n              event.getType() +\n              (friendly ? \" on \" + friendly : \"\")\n          );\n        }\n      }\n    },\n\n    /**\n     * Event listener for all event types in the finite state machine\n     *\n     * @param event {qx.event.type.Event} The event that was dispatched.\n     */\n    eventListener(event) {\n      if (this.__bTerminated) {\n        this.debug(\n          this.getName() +\n            \": Cannot listen to event '\" +\n            event.getType() +\n            \"', because the finite state machine is not running.\"\n        );\n\n        return;\n      }\n\n      // Events are enqueued upon receipt.  Some events are then processed\n      // immediately; other events get processed later.  We need to allow the\n      // event dispatcher to free the source event upon our return, so we'll\n      // clone it and enqueue our clone.  The source event can then be\n      // disposed upon our return.\n      var e = event.clone();\n\n      // Enqueue the new event on the tail of the queue\n      this.enqueueEvent(e, false);\n\n      // Process events\n      this.__processEvents();\n    },\n\n    /**\n     * Create an event and send it immediately to the finite state machine.\n     *\n     * @param type {String}\n     *   The type of event, e.g. \"execute\"\n     *\n     * @param target {qx.core.Object}\n     *   The target of the event\n     *\n     * @param data {Object|null}\n     *   The data, if any, to issue in the event.  If this parameter is null\n     *   then a qx.event.type.Event is instantiated.  Otherwise, an event of\n     *   type qx.event.type.Data is instantiated and this data is applied to\n     *   it.\n     *\n     */\n    fireImmediateEvent(type, target, data) {\n      if (this.__bTerminated) {\n        this.debug(\n          this.getName() +\n            \": Cannot listen to event '\" +\n            type +\n            \"', because the finite state machine is not running.\"\n        );\n\n        return;\n      }\n\n      if (data) {\n        var event = qx.event.Registration.createEvent(\n          type,\n          qx.event.type.Data,\n          [data, null, false]\n        );\n      } else {\n        var event = qx.event.Registration.createEvent(\n          type,\n          qx.event.type.Event,\n          [false, false]\n        );\n      }\n      event.setTarget(target);\n      this.eventListener(event);\n    },\n\n    /**\n     * Create and schedule an event to be sent to the finite state machine\n     * \"shortly\".  This allows such things as letting a progress cursor\n     * display prior to handling the event.\n     *\n     * @param type {String}\n     *   The type of event, e.g. \"execute\"\n     *\n     * @param target {qx.core.Object}\n     *   The target of the event\n     *\n     * @param data {Object|null}\n     *   See {@link #fireImmediateEvent} for details.\n     *\n     * @param timeout {Integer|null}\n     *   If provided, this is the number of milliseconds to wait before firing\n     *   the event.  If not provided, a default short interval (on the order\n     *   of 20 milliseconds) is used.\n     *\n     */\n    scheduleEvent(type, target, data, timeout) {\n      qx.event.Timer.once(\n        function () {\n          this.fireImmediateEvent(type, target, data);\n        },\n        this,\n        timeout || 20\n      );\n    },\n\n    /**\n     * Process all of the events on the event queue.\n     *\n     */\n    __processEvents() {\n      // eventListener() can potentially be called while we're processing\n      // events\n      if (this.__bEventProcessingInProgress) {\n        // We were processing already, so don't process concurrently.\n        return;\n      }\n\n      // Track that we're processing events\n      this.__bEventProcessingInProgress = true;\n\n      // Process each of the events on the event queue\n      while (this.__eventQueue.length > 0) {\n        // Pull the next event from the pending event queue\n        var event = this.__eventQueue.pop();\n\n        // Run the finite state machine with this event\n        var bDispose = this.__run(event);\n\n        // If we didn't block (and re-queue) the event, dispose it.\n        if (bDispose) {\n          event.dispose();\n        }\n      }\n\n      // We're no longer processing events\n      this.__bEventProcessingInProgress = false;\n    },\n\n    /**\n     * Run the finite state machine to process a single event.\n     *\n     *\n     * @param event {qx.event.type.Event}\n     *   An event that has been dispatched.  The event may be handled (if the\n     *   current state handles this event type), queued (if the current state\n     *   blocks this event type), or discarded (if the current state neither\n     *   handles nor blocks this event type).\n     *\n     * @return {Boolean}\n     *   Whether the event should be disposed.  If it was blocked, we've\n     *   pushed it back onto the event queue, and it should not be disposed.\n     *\n     * @throws {Error} If the explicit transitions does not exist.\n     * @throws {Error} If the transition returns an invalid value.\n     * @throws {Error} If the next step will transit to an nonexistent state.\n     * @throws {Error} If the state stack is empty and the next state is POP_STATE_STACK\n     * @throws {Error} If the next state is invalid.\n     */\n    __run(event) {\n      // For use in generated functions...\n      // State name variables\n      var thisState;\n      var nextState;\n      var prevState;\n\n      // The current State object\n      var currentState;\n\n      // The transitions available in the current State\n      var transitions;\n\n      // Events handled by the current State\n      var e;\n\n      // The action to take place upon receipt of a particular event\n      var action;\n\n      // Get the debug flags\n      var debugFlags = this.getDebugFlags();\n\n      // Allow slightly faster access to determine if debug is enabled\n      var debugEvents =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.EVENTS;\n      var debugTransitions =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.TRANSITIONS;\n      var debugFunctions =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.FUNCTION_DETAIL;\n      var debugObjectNotFound =\n        debugFlags & qx.util.fsm.FiniteStateMachine.DebugFlags.OBJECT_NOT_FOUND;\n\n      // Individual objects are listed.  Ensure target is a saved object\n      var friendly = this.getFriendlyName(event.getTarget());\n\n      if (debugEvents) {\n        this.debug(\n          this.getName() +\n            \": Process event: \" +\n            event.getType() +\n            (friendly ? \" on \" + friendly : \"\")\n        );\n      }\n\n      // Get the current state name\n      thisState = this.getState();\n\n      // Get the current State object\n      currentState = this.__states[thisState];\n\n      // Get a list of the transitions available from this state\n      transitions = currentState.transitions;\n\n      // Determine how to handle this event\n      e = currentState.getEvents()[event.getType()];\n\n      // See if we actually found this event type\n      if (!e) {\n        if (debugEvents) {\n          this.debug(\n            this.getName() +\n              \": Event '\" +\n              event.getType() +\n              \"'\" +\n              \" not handled.  Ignoring.\"\n          );\n        }\n\n        return true;\n      }\n\n      // We might have found a constant (PREDICATE or BLOCKED) or an object\n      // with each property name being the friendly name of a saved object,\n      // and the property value being one of the constants (PREDICATE or\n      // BLOCKED).\n      if (typeof e == \"object\") {\n        if (!friendly) {\n          // Nope, it doesn't seem so.  Just discard it.\n          if (debugObjectNotFound) {\n            this.debug(\n              this.getName() +\n                \": Could not find friendly name for '\" +\n                event.getType() +\n                \"' on '\" +\n                event.getTarget() +\n                \"'\"\n            );\n          }\n\n          return true;\n        }\n\n        action = e[friendly];\n\n        // Do we handle this event type for the widget from which it\n        // originated?\n        if (!action) {\n          // Nope.\n          if (debugEvents) {\n            this.debug(\n              this.getName() +\n                \": Event '\" +\n                event.getType() +\n                \"'\" +\n                \" not handled for target \" +\n                friendly +\n                \".  Ignoring.\"\n            );\n          }\n\n          return true;\n        }\n      } else {\n        action = e;\n      }\n\n      switch (action) {\n        case qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE:\n          // Process this event.  One of the transitions should handle it.\n          break;\n\n        case qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED:\n          // This event is blocked.  Enqueue it for later, and get outta here.\n          if (debugEvents) {\n            this.debug(\n              this.getName() +\n                \": Event '\" +\n                event.getType() +\n                \"'\" +\n                \" blocked.  Re-queuing.\"\n            );\n          }\n\n          this.__blockedEvents.unshift(event);\n          return false;\n\n        default:\n          // See if we've been given an explicit transition name\n          if (typeof action == \"string\") {\n            // Yup!  Ensure that it exists\n            if (transitions[action]) {\n              // Yup.  Create a transitions object containing only this\n              // transition.\n              var trans = transitions[action];\n              transitions = {};\n              transitions[action] = trans;\n            } else {\n              throw new Error(\n                \"Explicit transition \" + action + \" does not exist\"\n              );\n            }\n\n            break;\n          }\n      }\n\n      // We handle the event.  Try each transition in turn until we find one\n      // that is acceptable.\n      for (var t in transitions) {\n        var trans = transitions[t];\n\n        // Does the predicate allow use of this transition?\n        switch (trans.getPredicate()(this, event)) {\n          case true:\n            // Transition is allowed.  Proceed.\n            break;\n\n          case false:\n            // Transition is not allowed.  Try next transition.\n            continue;\n\n          case null:\n            // Transition indicates not to try further transitions\n            return true;\n\n          default:\n            throw new Error(\n              \"Transition \" +\n                thisState +\n                \":\" +\n                t +\n                \" returned a value other than \" +\n                \"true, false, or null.\"\n            );\n        }\n\n        // We think we can transition to the next state.  Set next state.\n        nextState = trans.getNextState();\n\n        if (typeof nextState == \"string\") {\n          // We found a literal state name.  Ensure it exists.\n          if (!nextState in this.__states) {\n            throw new Error(\n              \"Attempt to transition to nonexistent state \" + nextState\n            );\n          }\n\n          // It exists.  Track it being the next state.\n          this.setNextState(nextState);\n        } else {\n          // If it's not a string, nextState must be a StateChange constant\n          switch (nextState) {\n            case qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE:\n              // They want to remain in the same state.\n              nextState = thisState;\n              this.setNextState(nextState);\n              break;\n\n            case qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK:\n              // Switch to the state at the top of the state stack.\n              if (this.__savedStates.length == 0) {\n                throw new Error(\n                  \"Attempt to transition to POP_STATE_STACK \" +\n                    \"while state stack is empty.\"\n                );\n              }\n\n              // Pop the state stack to retrieve the state to transition to\n              nextState = this.__savedStates.pop();\n              this.setNextState(nextState);\n              break;\n\n            case qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE:\n              // Terminate fsm\n              this.__bTerminated = true;\n              this.setNextState(null);\n              break;\n\n            default:\n              throw new Error(\"Internal error: invalid nextState\");\n          }\n        }\n\n        // Run the actionsBeforeOntransition actions for this transition\n        if (debugFunctions) {\n          this.debug(\n            this.getName() +\n              \"#\" +\n              thisState +\n              \"#\" +\n              t +\n              \"#autoActionsBeforeOntransition\"\n          );\n        }\n\n        trans.getAutoActionsBeforeOntransition()(this);\n\n        // Run the 'ontransition' function\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#\" + t + \"#ontransition\"\n          );\n        }\n\n        trans.getOntransition()(this, event);\n\n        // Run the autoActionsAfterOntransition actions for this transition\n        if (debugFunctions) {\n          this.debug(\n            this.getName() +\n              \"#\" +\n              thisState +\n              \"#\" +\n              t +\n              \"#autoActionsAfterOntransition\"\n          );\n        }\n\n        trans.getAutoActionsAfterOntransition()(this);\n\n        // Run the autoActionsBeforeOnexit actions for the old state\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#autoActionsBeforeOnexit\"\n          );\n        }\n\n        currentState.getAutoActionsBeforeOnexit()(this);\n\n        // Run the exit function for the old state\n        if (debugFunctions) {\n          this.debug(this.getName() + \"#\" + thisState + \"#exit\");\n        }\n\n        currentState.getOnexit()(this, event);\n\n        // Run the autoActionsAfterOnexit actions for the old state\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#autoActionsAfterOnexit\"\n          );\n        }\n\n        currentState.getAutoActionsAfterOnexit()(this);\n\n        // If this state has been replaced and we're supposed to dispose it...\n        if (currentState._bNeedDispose) {\n          // ... then dispose it now that it's no longer in use\n          currentState.dispose();\n        }\n\n        // It the fsm has terminated, stop right here\n        if (this.__bTerminated) {\n          if (debugFunctions) {\n            this.debug(this.getName() + \"#\" + \"TERMINATED\");\n          }\n          this.fireDataEvent(\"terminated\", thisState);\n          return true;\n        }\n\n        // Reset currentState to the new state object\n        currentState = this.__states[this.getNextState()];\n\n        // set previousState and state, and clear nextState, for transition\n        this.setPreviousState(thisState);\n        this.setState(this.getNextState());\n        this.setNextState(null);\n        prevState = thisState;\n        thisState = nextState;\n        nextState = undefined;\n\n        // Run the autoActionsBeforeOnentry actions for the new state\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#autoActionsBeforeOnentry\"\n          );\n        }\n\n        currentState.getAutoActionsBeforeOnentry()(this);\n\n        // Run the entry function for the new state, if one is specified\n        if (debugFunctions) {\n          this.debug(this.getName() + \"#\" + thisState + \"#entry\");\n        }\n\n        currentState.getOnentry()(this, event);\n\n        // Run the autoActionsAfterOnentry actions for the new state\n        if (debugFunctions) {\n          this.debug(\n            this.getName() + \"#\" + thisState + \"#autoActionsAfterOnentry\"\n          );\n        }\n\n        currentState.getAutoActionsAfterOnentry()(this);\n\n        // Add any blocked events back onto the pending event queue\n        for (var i = 0; i < this.__blockedEvents.length; i++) {\n          e = this.__blockedEvents.pop();\n          this.__eventQueue.unshift(e);\n        }\n\n        if (debugTransitions) {\n          this.debug(\n            this.getName() +\n              \"#\" +\n              prevState +\n              \" => \" +\n              this.getName() +\n              \"#\" +\n              thisState\n          );\n        }\n\n        // See ya!\n        return true;\n      }\n\n      if (debugTransitions) {\n        this.debug(\n          this.getName() +\n            \"#\" +\n            thisState +\n            \": event '\" +\n            event.getType() +\n            \"'\" +\n            \": no transition found.  No state change.\"\n        );\n      }\n\n      return true;\n    }\n  },\n\n  destruct() {\n    this._disposeArray(\"__eventQueue\");\n    this._disposeArray(\"__blockedEvents\");\n    this.__savedStates = this.__states = null;\n  }\n});\n"
  ],
  "mappings": "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"
}