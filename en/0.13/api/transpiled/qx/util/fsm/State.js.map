{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "stateName",
    "stateInfo",
    "context",
    "setName",
    "Error",
    "window",
    "setUserData",
    "field",
    "setOnentry",
    "__bindIfFunction",
    "setOnexit",
    "setAutoActionsBeforeOnentry",
    "setAutoActionsAfterOnentry",
    "setAutoActionsBeforeOnexit",
    "setAutoActionsAfterOnexit",
    "setEvents",
    "debug",
    "getEvents",
    "transitions",
    "statics",
    "_commonTransformAutoActions",
    "actionType",
    "value",
    "funcFragment",
    "func",
    "param",
    "objectAndGroupList",
    "f",
    "functionRequest",
    "Array",
    "i",
    "length",
    "params",
    "j",
    "a",
    "g",
    "lang",
    "Function",
    "bind",
    "properties",
    "name",
    "transform",
    "nullable",
    "onentry",
    "init",
    "fsm",
    "event",
    "onexit",
    "autoActionsBeforeOnentry",
    "autoActionsAfterOnentry",
    "autoActionsBeforeOnexit",
    "autoActionsAfterOnexit",
    "events",
    "members",
    "__transformName",
    "__transformOnentry",
    "getUserData",
    "__transformOnexit",
    "__transformEvents",
    "e",
    "action",
    "util",
    "FiniteStateMachine",
    "EventHandling",
    "PREDICATE",
    "BLOCKED",
    "action_e",
    "__transformAutoActionsBeforeOnentry",
    "State",
    "__transformAutoActionsAfterOnentry",
    "__transformAutoActionsBeforeOnexit",
    "__transformAutoActionsAfterOnexit",
    "addTransition",
    "trans",
    "Transition",
    "getName"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/fsm/State.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006, 2007, 2011 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Create a new state which may be added to a finite state machine.\n */\nqx.Class.define(\"qx.util.fsm.State\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param stateName {String}\n   *   The name of this state.  This is the name which may be referenced in\n   *   objects of class qx.util.fsm.Transition, when passing of\n   *   the transition's predicate means transition to this state.\n   *\n   * @param stateInfo {Map}\n   *   <pre>\n   *   An object containing any of the following properties:\n   *\n   *     context -\n   *       A context in which all of the following functions should be run.\n   *\n   *     onentry -\n   *       A function which is called upon entry to the state.  Its signature\n   *       is function(fsm, event) and it is saved in the onentry property of\n   *       the state object.  (This function is called after the Transition's\n   *       action function and after the previous state's onexit function.)\n   *\n   *       In the onentry function:\n   *\n   *         fsm -\n   *           The finite state machine object to which this state is attached.\n   *\n   *         event -\n   *           The event that caused the finite state machine to run\n   *\n   *     onexit -\n   *       A function which is called upon exit from the state.  Its signature\n   *       is function(fsm, event) and it is saved in the onexit property of\n   *       the state object.  (This function is called after the Transition's\n   *       action function and before the next state's onentry function.)\n   *\n   *       In the onexit function:\n   *\n   *         fsm -\n   *           The finite state machine object to which this state is attached.\n   *\n   *         event -\n   *           The event that caused the finite state machine to run\n   *\n   *     autoActionsBeforeOnentry -\n   *     autoActionsAfterOnentry -\n   *     autoActionsBeforeOnexit -\n   *     autoActionsAfterOnexit -\n   *       Automatic actions which take place at the time specified by the\n   *       property name.  In all cases, the action takes place immediately\n   *       before or after the specified function.\n   *\n   *       The property value for each of these properties is an object which\n   *       describes some number of functions to invoke on a set of specified\n   *       objects (typically widgets).\n   *\n   *       An example, using autoActionsBeforeOnentry, might look like this:\n   *\n   *       \"autoActionsBeforeOnentry\" :\n   *       {\n   *         // The name of a function.\n   *         \"setEnabled\" :\n   *         [\n   *           {\n   *             // The parameter value, thus \"setEnabled(true);\"\n   *             \"parameters\" : [ true ],\n   *\n   *             // The function would be called on each object:\n   *             //  this.getObject(\"obj1\").setEnabled(true);\n   *             //  this.getObject(\"obj2\").setEnabled(true);\n   *             \"objects\" : [ \"obj1\", \"obj2\" ],\n   *\n   *             // And similarly for each object in each specified group.\n   *             \"groups\"  : [ \"group1\", \"group2\" ]\n   *           }\n   *         ],\n   *\n   *         // The name of another function.\n   *         \"setVisible\" :\n   *         [\n   *           {\n   *             // The parameter value, thus \"setVisible(false);\"\n   *             \"parameters\" : [ false ],\n   *\n   *             // The function would be called on each object and group, as\n   *             // described above.\n   *             \"objects\" : [ \"obj3\", \"obj4\" ],\n   *             \"groups\"  : [ \"group3\", \"group4\" ]\n   *           }\n   *         ]\n   *       };\n   *\n   *     events (required) -\n   *       A description to the finite state machine of how to handle a\n   *       particular event, optionally associated with a specific target\n   *       object on which the event was dispatched.  This should be an object\n   *       containing one property for each event which is either handled or\n   *       blocked.  The property name should be the event name.  The property\n   *       value should be one of:\n   *\n   *         (a) qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE\n   *\n   *         (b) qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\n   *\n   *         (c) a string containing the name of an explicit Transition to use\n   *\n   *         (d) an object where each property name is the Friendly Name of an\n   *             object (meaning that this rule applies if both the event and\n   *             the event's target object's Friendly Name match), and its\n   *             property value is one of (a), (b) or (c), above.\n   *\n   *       This object is saved in the events property of the state object.\n   *\n   *     Additional properties may be provided in stateInfo.  They will not be\n   *     used by the finite state machine, but will be available via\n   *     this.getUserData(\"<propertyName>\") during the state's onentry and\n   *     onexit functions.\n   *   </pre>\n   *\n   * @throws {Error} If the state info is not a valid object.\n   * @throws {Error} If the events object is not provided in new state info.\n   *\n   */\n  construct(stateName, stateInfo) {\n    var context;\n\n    // Call our superclass' constructor\n    super();\n\n    // Save the state name\n    this.setName(stateName);\n\n    // Ensure they passed in an object\n    if (typeof stateInfo != \"object\") {\n      throw new Error(\"State info must be an object\");\n    }\n\n    // If a context was specified, retrieve it.\n    context = stateInfo.context || window;\n\n    // Save it for future use\n    this.setUserData(\"context\", context);\n\n    // Save data from the stateInfo object\n    for (var field in stateInfo) {\n      // If we find one of our properties, call its setter.\n      switch (field) {\n        case \"onentry\":\n          this.setOnentry(this.__bindIfFunction(stateInfo[field], context));\n          break;\n\n        case \"onexit\":\n          this.setOnexit(this.__bindIfFunction(stateInfo[field], context));\n          break;\n\n        case \"autoActionsBeforeOnentry\":\n          this.setAutoActionsBeforeOnentry(stateInfo[field]);\n          break;\n\n        case \"autoActionsAfterOnentry\":\n          this.setAutoActionsAfterOnentry(stateInfo[field]);\n          break;\n\n        case \"autoActionsBeforeOnexit\":\n          this.setAutoActionsBeforeOnexit(stateInfo[field]);\n          break;\n\n        case \"autoActionsAfterOnexit\":\n          this.setAutoActionsAfterOnexit(stateInfo[field]);\n          break;\n\n        case \"events\":\n          this.setEvents(stateInfo[field]);\n          break;\n\n        case \"context\":\n          // already handled\n          break;\n\n        default:\n          // Anything else is user-provided data for their own use.  Save it.\n          this.setUserData(field, stateInfo[field]);\n\n          // Log it in case it was a typo and they intended a built-in field\n          this.debug(\n            \"State \" +\n              stateName +\n              \": \" +\n              \"Adding user-provided field to state: \" +\n              field\n          );\n\n          break;\n      }\n    }\n\n    // Check for required but missing properties\n    if (!this.getEvents()) {\n      throw new Error(\"The events object must be provided in new state info\");\n    }\n\n    // Initialize the transition list\n    this.transitions = {};\n  },\n\n  statics: {\n    /**\n     * Common function for checking the value provided for\n     * auto actions.\n     *\n     * Auto-action property values passed to us look akin to:\n     *\n     *     <pre class='javascript'>\n     *     {\n     *       // The name of a function.\n     *       \"setEnabled\" :\n     *       [\n     *         {\n     *           // The parameter value(s), thus \"setEnabled(true);\"\n     *           \"parameters\"   : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *\n     *       \"setTextColor\" :\n     *       [\n     *         {\n     *           \"parameters\" : [ \"blue\" ]\n     *           \"groups\"     : [ \"group3\", \"group4\" ],\n     *           \"objects\"    : [ \"obj3\", \"obj4\" ]\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     *\n     *\n     * @param actionType {String}\n     *   The name of the action being validated (for debug messages)\n     *\n     * @param value {Object}\n     *   The property value which is being validated\n     *\n     * @param context {Object}\n     *   The object to which the created function should be bound.\n     *\n     * @return {Function}\n     *   Function that implements calls to each of the requested automatic\n     *   actions\n     *\n     * @throws {Error} If the value has an invalid type.\n     * @throws {Error} If the function type is not an array.\n     * @throws {Error} If the function request parameter type is not valid.\n     * @throws {Error} If the function parameters are not valid.\n     * @throws {Error} If 'objects' list is invalid.\n     * @throws {Error} If a name in the 'objects' list is not valid.\n     * @throws {Error} If the 'groups' list is not valid.\n     */\n    _commonTransformAutoActions(actionType, value, context) {\n      // Validate that we received an object property value\n      if (typeof value != \"object\") {\n        throw new Error(\"Invalid \" + actionType + \" value: \" + typeof value);\n      }\n\n      // We'll create a function to do the requested actions.  Initialize the\n      // string into which we'll generate the common fragment added to the\n      // function for each object.\n      var funcFragment;\n\n      // Here, we'll keep the function body.  Initialize a try block.\n      var func = \"try\" + \"{\";\n\n      var param;\n      var objectAndGroupList;\n\n      // Retrieve the function request, e.g.\n      // \"enabled\" :\n      for (var f in value) {\n        // Get the function request value object, e.g.\n        // \"setEnabled\" :\n        // [\n        //   {\n        //     \"parameters\"   : [ true ],\n        //     \"objects\" : [ \"obj1\", \"obj2\" ]\n        //     \"groups\"  : [ \"group1\", \"group2\" ],\n        //   }\n        // ];\n        var functionRequest = value[f];\n\n        // The function request value should be an object\n        if (!functionRequest instanceof Array) {\n          throw new Error(\n            \"Invalid function request type: \" +\n              \"expected array, found \" +\n              typeof functionRequest\n          );\n        }\n\n        // For each function request...\n        for (var i = 0; i < functionRequest.length; i++) {\n          // Retrieve the object and group list object\n          objectAndGroupList = functionRequest[i];\n\n          // The object and group list should be an object, e.g.\n          // {\n          //   \"parameters\"   : [ true ],\n          //   \"objects\" : [ \"obj1\", \"obj2\" ]\n          //   \"groups\"  : [ \"group1\", \"group2\" ],\n          // }\n          if (typeof objectAndGroupList != \"object\") {\n            throw new Error(\n              \"Invalid function request parameter type: \" +\n                \"expected object, found \" +\n                typeof functionRequest[param]\n            );\n          }\n\n          // Retrieve the parameter list\n          var params = objectAndGroupList[\"parameters\"];\n\n          // If it didn't exist, ...\n          if (!params) {\n            // ... use an empty array.\n            params = [];\n          } else {\n            // otherwise, ensure we got an array\n            if (!params instanceof Array) {\n              throw new Error(\n                \"Invalid function parameters: \" +\n                  \"expected array, found \" +\n                  typeof params\n              );\n            }\n          }\n\n          // Create the function to call on each object.  The object on which\n          // the function is called will be prepended later.\n          funcFragment = f + \"(\";\n\n          // For each parameter...\n          for (var j = 0; j < params.length; j++) {\n            // If this isn't the first parameter, add a separator\n            if (j != 0) {\n              funcFragment += \",\";\n            }\n\n            if (typeof params[j] == \"function\") {\n              // If the parameter is a function, arrange for it to be called\n              // at run time.\n              funcFragment += \"(\" + params[j] + \")(fsm)\";\n            } else if (typeof params[j] == \"string\") {\n              // If the parameter is a string, quote it.\n              funcFragment += '\"' + params[j] + '\"';\n            } else {\n              // Otherwise, just add the parameter's literal value\n              funcFragment += params[j];\n            }\n          }\n\n          // Complete the function call\n          funcFragment += \")\";\n\n          // Get the \"objects\" list, e.g.\n          //   \"objects\" : [ \"obj1\", \"obj2\" ]\n          var a = objectAndGroupList[\"objects\"];\n\n          // Was there an \"objects\" list?\n          if (!a) {\n            // Nope.  Simplify code by creating an empty array.\n            a = [];\n          } else if (!a instanceof Array) {\n            throw new Error(\n              \"Invalid 'objects' list: expected array, got \" + typeof a\n            );\n          }\n\n          for (var j = 0; j < a.length; j++) {\n            // Ensure we got a string\n            if (typeof a[j] != \"string\") {\n              throw new Error(\n                \"Invalid friendly name in 'objects' list: \" + a[j]\n              );\n            }\n\n            func += \" fsm.getObject('\" + a[j] + \"').\" + funcFragment + \";\";\n          }\n\n          // Get the \"groups\" list, e.g.\n          //   \"groups\" : [ \"group1, \"group2\" ]\n          var g = objectAndGroupList[\"groups\"];\n\n          // Was a \"groups\" list found?\n          if (g) {\n            // Yup.  Ensure it's an array.\n            if (!g instanceof Array) {\n              throw new Error(\n                \"Invalid 'groups' list: expected array, got \" + typeof g\n              );\n            }\n\n            for (j = 0; j < g.length; j++) {\n              // Arrange to call the function on each object in each group\n              func +=\n                \"  var groupObjects = \" +\n                \"    fsm.getGroupObjects('\" +\n                g[j] +\n                \"');\" +\n                \"  for (var i = 0; i < groupObjects.length; i++)\" +\n                \"  {\" +\n                \"    var objName = groupObjects[i];\" +\n                \"    fsm.getObject(objName).\" +\n                funcFragment +\n                \";\" +\n                \"  }\";\n            }\n          }\n        }\n      }\n\n      // Terminate the try block for function invocations\n      func += \"}\" + \"catch(ex)\" + \"{\" + \"  fsm.debug(ex);\" + \"}\";\n\n      // We've now built the entire body of a function that implements calls\n      // to each of the requested automatic actions.  Create and return the\n      // function, which will become the property value.\n      return qx.lang.Function.bind(new Function(\"fsm\", func), context);\n    }\n  },\n\n  properties: {\n    /**\n     * The name of this state.  This name may be used as a Transition's\n     * nextState value, or an explicit next state in the 'events' handling\n     * list in a State.\n     */\n    name: {\n      transform: \"__transformName\",\n      nullable: true\n    },\n\n    /**\n     * The onentry function for this state.  This is documented in the\n     * constructor, and is typically provided through the constructor's\n     * stateInfo object, but it is also possible (but highly NOT recommended)\n     * to change this dynamically.\n     */\n    onentry: {\n      transform: \"__transformOnentry\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * The onexit function for this state.  This is documented in the\n     * constructor, and is typically provided through the constructor's\n     * stateInfo object, but it is also possible (but highly NOT recommended)\n     * to change this dynamically.\n     */\n    onexit: {\n      transform: \"__transformOnexit\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * Automatic actions to take prior to calling the state's onentry function.\n     *\n     * The value passed to setAutoActionsBeforeOnentry() should like something\n     * akin to:\n     *\n     *     <pre class='javascript'>\n     *     \"autoActionsBeforeOnentry\" :\n     *     {\n     *       // The name of a function.  This would become \"setEnabled(\"\n     *       \"enabled\" :\n     *       [\n     *         {\n     *           // The parameter value, thus \"setEnabled(true);\"\n     *           \"parameters\" : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     */\n    autoActionsBeforeOnentry: {\n      transform: \"__transformAutoActionsBeforeOnentry\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * Automatic actions to take after return from the state's onentry\n     * function.\n     *\n     * The value passed to setAutoActionsAfterOnentry() should like something\n     * akin to:\n     *\n     *     <pre class='javascript'>\n     *     \"autoActionsAfterOnentry\" :\n     *     {\n     *       // The name of a function.  This would become \"setEnabled(\"\n     *       \"enabled\" :\n     *       [\n     *         {\n     *           // The parameter value, thus \"setEnabled(true);\"\n     *           \"parameters\" : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     */\n    autoActionsAfterOnentry: {\n      transform: \"__transformAutoActionsAfterOnentry\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * Automatic actions to take prior to calling the state's onexit function.\n     *\n     * The value passed to setAutoActionsBeforeOnexit() should like something\n     * akin to:\n     *\n     *     <pre class='javascript'>\n     *     \"autoActionsBeforeOnexit\" :\n     *     {\n     *       // The name of a function.  This would become \"setEnabled(\"\n     *       \"enabled\" :\n     *       [\n     *         {\n     *           // The parameter value, thus \"setEnabled(true);\"\n     *           \"parameters\" : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     */\n    autoActionsBeforeOnexit: {\n      transform: \"__transformAutoActionsBeforeOnexit\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * Automatic actions to take after returning from the state's onexit\n     * function.\n     *\n     * The value passed to setAutoActionsAfterOnexit() should like something\n     * akin to:\n     *\n     *     <pre class='javascript'>\n     *     \"autoActionsBeforeOnexit\" :\n     *     {\n     *       // The name of a function.  This would become \"setEnabled(\"\n     *       \"enabled\" :\n     *       [\n     *         {\n     *           // The parameter value, thus \"setEnabled(true);\"\n     *           \"parameters\" : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     */\n    autoActionsAfterOnexit: {\n      transform: \"__transformAutoActionsAfterOnexit\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * The object representing handled and blocked events for this state.\n     * This is documented in the constructor, and is typically provided\n     * through the constructor's stateInfo object, but it is also possible\n     * (but highly NOT recommended) to change this dynamically.\n     */\n    events: {\n      transform: \"__transformEvents\",\n      nullable: true\n    }\n  },\n\n  members: {\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Value passed to setter\n     * @return {var} the final value\n     * @throws {Error} when an invalid value is detected\n     */\n    __transformName(value) {\n      // Ensure that we got a valid state name\n      if (typeof value != \"string\" || value.length < 1) {\n        throw new Error(\"Invalid state name\");\n      }\n\n      return value;\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     * @throws {Error} when an invalid value is detected\n     */\n    __transformOnentry(value) {\n      // Validate the onentry function\n      switch (typeof value) {\n        case \"undefined\":\n          // None provided.  Convert it to a null function\n          return function (fsm, event) {};\n\n        case \"function\":\n          // We're cool.  No changes required\n          return qx.lang.Function.bind(value, this.getUserData(\"context\"));\n\n        default:\n          throw new Error(\"Invalid onentry type: \" + typeof value);\n      }\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     * @throws {Error} when an invalid value is detected\n     */\n    __transformOnexit(value) {\n      // Validate the onexit function\n      switch (typeof value) {\n        case \"undefined\":\n          // None provided.  Convert it to a null function\n          return function (fsm, event) {};\n\n        case \"function\":\n          // We're cool.  No changes required\n          return qx.lang.Function.bind(value, this.getUserData(\"context\"));\n\n        default:\n          throw new Error(\"Invalid onexit type: \" + typeof value);\n      }\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     * @throws {Error} when an invalid value is detected\n     */\n    __transformEvents(value) {\n      // Validate that events is an object\n      if (typeof value != \"object\") {\n        throw new Error(\"events must be an object\");\n      }\n\n      // Confirm that each property is a valid value\n      // The property value should be one of:\n      //\n      // (a) qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE\n      //\n      // (b) qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\n      //\n      // (c) a string containing the name of an explicit Transition to use\n      //\n      // (d) an object where each property name is the Friendly Name of an\n      //     object (meaning that this rule applies if both the event and\n      //     the event's target object's Friendly Name match), and its\n      //     property value is one of (a), (b) or (c), above.\n      for (var e in value) {\n        var action = value[e];\n\n        if (\n          typeof action == \"number\" &&\n          action != qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE &&\n          action != qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\n        ) {\n          throw new Error(\n            \"Invalid numeric value in events object: \" + e + \": \" + action\n          );\n        } else if (typeof action == \"object\") {\n          for (var action_e in action) {\n            if (\n              typeof action[action_e] == \"number\" &&\n              action[action_e] !=\n                qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE &&\n              action[action_e] !=\n                qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\n            ) {\n              throw new Error(\n                \"Invalid numeric value in events object \" +\n                  \"(\" +\n                  e +\n                  \"): \" +\n                  action_e +\n                  \": \" +\n                  action[action_e]\n              );\n            } else if (\n              typeof action[action_e] != \"string\" &&\n              typeof action[action_e] != \"number\"\n            ) {\n              throw new Error(\n                \"Invalid value in events object \" +\n                  \"(\" +\n                  e +\n                  \"): \" +\n                  action_e +\n                  \": \" +\n                  action[action_e]\n              );\n            }\n          }\n        } else if (typeof action != \"string\" && typeof action != \"number\") {\n          throw new Error(\n            \"Invalid value in events object: \" + e + \": \" + value[e]\n          );\n        }\n      }\n\n      // We're cool.  No changes required.\n      return value;\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     */\n    __transformAutoActionsBeforeOnentry(value) {\n      return qx.util.fsm.State._commonTransformAutoActions(\n        \"autoActionsBeforeOnentry\",\n        value,\n        this.getUserData(\"context\")\n      );\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     */\n    __transformAutoActionsAfterOnentry(value) {\n      return qx.util.fsm.State._commonTransformAutoActions(\n        \"autoActionsAfterOnentry\",\n        value,\n        this.getUserData(\"context\")\n      );\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     */\n    __transformAutoActionsBeforeOnexit(value) {\n      return qx.util.fsm.State._commonTransformAutoActions(\n        \"autoActionsBeforeOnexit\",\n        value,\n        this.getUserData(\"context\")\n      );\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     */\n    __transformAutoActionsAfterOnexit(value) {\n      return qx.util.fsm.State._commonTransformAutoActions(\n        \"autoActionsAfterOnexit\",\n        value,\n        this.getUserData(\"context\")\n      );\n    },\n\n    /**\n     * If given a function, bind it to a specified context.\n     *\n     * @param f {Function|var}\n     *   The (possibly) function to be bound to the specified context.\n     *\n     * @param context {Object}\n     *   The context to bind the function to.\n     *\n     * @return {Function}\n     *   If f was a function, the return value is f wrapped such that it will\n     *   be called in the specified context. Otherwise, f is returned\n     *   unaltered.\n     */\n    __bindIfFunction(f, context) {\n      // Is the first parameter a function?\n      if (typeof f == \"function\") {\n        // Yup. Bind it to the specified context.\n        f = qx.lang.Function.bind(f, context);\n      }\n\n      return f;\n    },\n\n    /**\n     * Add a transition to a state\n     *\n     *\n     * @param trans {qx.util.fsm.Transition}\n     *   An object of class qx.util.fsm.Transition representing a transition\n     *   which is to be a part of this state.\n     *\n     */\n    addTransition(trans) {\n      // Ensure that we got valid transition info\n      if (!trans instanceof qx.util.fsm.Transition) {\n        throw new Error(\n          \"Invalid transition: not an instance of \" + \"qx.util.fsm.Transition\"\n        );\n      }\n\n      // Add the new transition object to the state\n      this.transitions[trans.getName()] = trans;\n    }\n  }\n});\n"
  ],
  "mappings": "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E;QACJC,SAAS,EAAE,WADP;QAEJC,QAAQ,EAAE;MAFN,CANI;;MAWV;AACJ;AACA;AACA;AACA;AACA;MACIC,OAAO,EAAE;QACPF,SAAS,EAAE,WADJ;QAEPC,QAAQ,EAAE,IAFH;QAGPE,IAHO,gBAGFC,GAHE,EAGGC,KAHH,EAGU,CAAE;MAHZ,CAjBC;;MAuBV;AACJ;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE;QACNN,SAAS,EAAE,WADL;QAENC,QAAQ,EAAE,IAFJ;QAGNE,IAHM,gBAGDC,GAHC,EAGIC,KAHJ,EAGW,CAAE;MAHb,CA7BE;;MAmCV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,wBAAwB,EAAE;QACxBP,SAAS,EAAE,WADa;QAExBC,QAAQ,EAAE,IAFc;QAGxBE,IAHwB,gBAGnBC,GAHmB,EAGdC,KAHc,EAGP,CAAE;MAHK,CA/DhB;;MAqEV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,uBAAuB,EAAE;QACvBR,SAAS,EAAE,WADY;QAEvBC,QAAQ,EAAE,IAFa;QAGvBE,IAHuB,gBAGlBC,GAHkB,EAGbC,KAHa,EAGN,CAAE;MAHI,CAlGf;;MAwGV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,uBAAuB,EAAE;QACvBT,SAAS,EAAE,WADY;QAEvBC,QAAQ,EAAE,IAFa;QAGvBE,IAHuB,gBAGlBC,GAHkB,EAGbC,KAHa,EAGN,CAAE;MAHI,CApIf;;MA0IV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"
}