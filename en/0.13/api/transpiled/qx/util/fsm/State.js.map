{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "stateName",
    "stateInfo",
    "context",
    "constructor",
    "call",
    "setName",
    "_typeof",
    "Error",
    "window",
    "setUserData",
    "field",
    "setOnentry",
    "__bindIfFunction",
    "setOnexit",
    "setAutoActionsBeforeOnentry",
    "setAutoActionsAfterOnentry",
    "setAutoActionsBeforeOnexit",
    "setAutoActionsAfterOnexit",
    "setEvents",
    "debug",
    "getEvents",
    "transitions",
    "statics",
    "_commonTransformAutoActions",
    "actionType",
    "value",
    "funcFragment",
    "func",
    "param",
    "objectAndGroupList",
    "f",
    "functionRequest",
    "Array",
    "i",
    "length",
    "params",
    "j",
    "a",
    "g",
    "lang",
    "Function",
    "bind",
    "properties",
    "name",
    "transform",
    "nullable",
    "onentry",
    "init",
    "fsm",
    "event",
    "onexit",
    "autoActionsBeforeOnentry",
    "autoActionsAfterOnentry",
    "autoActionsBeforeOnexit",
    "autoActionsAfterOnexit",
    "events",
    "members",
    "__transformName",
    "__P_744_1",
    "__transformOnentry",
    "__P_744_2",
    "getUserData",
    "__transformOnexit",
    "__P_744_3",
    "__transformEvents",
    "__P_744_8",
    "e",
    "action",
    "util",
    "FiniteStateMachine",
    "EventHandling",
    "PREDICATE",
    "BLOCKED",
    "action_e",
    "__transformAutoActionsBeforeOnentry",
    "__P_744_4",
    "State",
    "__transformAutoActionsAfterOnentry",
    "__P_744_5",
    "__transformAutoActionsBeforeOnexit",
    "__P_744_6",
    "__transformAutoActionsAfterOnexit",
    "__P_744_7",
    "__P_744_0",
    "addTransition",
    "trans",
    "Transition",
    "getName"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/fsm/State.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006, 2007, 2011 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Create a new state which may be added to a finite state machine.\n */\nqx.Class.define(\"qx.util.fsm.State\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param stateName {String}\n   *   The name of this state.  This is the name which may be referenced in\n   *   objects of class qx.util.fsm.Transition, when passing of\n   *   the transition's predicate means transition to this state.\n   *\n   * @param stateInfo {Map}\n   *   <pre>\n   *   An object containing any of the following properties:\n   *\n   *     context -\n   *       A context in which all of the following functions should be run.\n   *\n   *     onentry -\n   *       A function which is called upon entry to the state.  Its signature\n   *       is function(fsm, event) and it is saved in the onentry property of\n   *       the state object.  (This function is called after the Transition's\n   *       action function and after the previous state's onexit function.)\n   *\n   *       In the onentry function:\n   *\n   *         fsm -\n   *           The finite state machine object to which this state is attached.\n   *\n   *         event -\n   *           The event that caused the finite state machine to run\n   *\n   *     onexit -\n   *       A function which is called upon exit from the state.  Its signature\n   *       is function(fsm, event) and it is saved in the onexit property of\n   *       the state object.  (This function is called after the Transition's\n   *       action function and before the next state's onentry function.)\n   *\n   *       In the onexit function:\n   *\n   *         fsm -\n   *           The finite state machine object to which this state is attached.\n   *\n   *         event -\n   *           The event that caused the finite state machine to run\n   *\n   *     autoActionsBeforeOnentry -\n   *     autoActionsAfterOnentry -\n   *     autoActionsBeforeOnexit -\n   *     autoActionsAfterOnexit -\n   *       Automatic actions which take place at the time specified by the\n   *       property name.  In all cases, the action takes place immediately\n   *       before or after the specified function.\n   *\n   *       The property value for each of these properties is an object which\n   *       describes some number of functions to invoke on a set of specified\n   *       objects (typically widgets).\n   *\n   *       An example, using autoActionsBeforeOnentry, might look like this:\n   *\n   *       \"autoActionsBeforeOnentry\" :\n   *       {\n   *         // The name of a function.\n   *         \"setEnabled\" :\n   *         [\n   *           {\n   *             // The parameter value, thus \"setEnabled(true);\"\n   *             \"parameters\" : [ true ],\n   *\n   *             // The function would be called on each object:\n   *             //  this.getObject(\"obj1\").setEnabled(true);\n   *             //  this.getObject(\"obj2\").setEnabled(true);\n   *             \"objects\" : [ \"obj1\", \"obj2\" ],\n   *\n   *             // And similarly for each object in each specified group.\n   *             \"groups\"  : [ \"group1\", \"group2\" ]\n   *           }\n   *         ],\n   *\n   *         // The name of another function.\n   *         \"setVisible\" :\n   *         [\n   *           {\n   *             // The parameter value, thus \"setVisible(false);\"\n   *             \"parameters\" : [ false ],\n   *\n   *             // The function would be called on each object and group, as\n   *             // described above.\n   *             \"objects\" : [ \"obj3\", \"obj4\" ],\n   *             \"groups\"  : [ \"group3\", \"group4\" ]\n   *           }\n   *         ]\n   *       };\n   *\n   *     events (required) -\n   *       A description to the finite state machine of how to handle a\n   *       particular event, optionally associated with a specific target\n   *       object on which the event was dispatched.  This should be an object\n   *       containing one property for each event which is either handled or\n   *       blocked.  The property name should be the event name.  The property\n   *       value should be one of:\n   *\n   *         (a) qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE\n   *\n   *         (b) qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\n   *\n   *         (c) a string containing the name of an explicit Transition to use\n   *\n   *         (d) an object where each property name is the Friendly Name of an\n   *             object (meaning that this rule applies if both the event and\n   *             the event's target object's Friendly Name match), and its\n   *             property value is one of (a), (b) or (c), above.\n   *\n   *       This object is saved in the events property of the state object.\n   *\n   *     Additional properties may be provided in stateInfo.  They will not be\n   *     used by the finite state machine, but will be available via\n   *     this.getUserData(\"<propertyName>\") during the state's onentry and\n   *     onexit functions.\n   *   </pre>\n   *\n   * @throws {Error} If the state info is not a valid object.\n   * @throws {Error} If the events object is not provided in new state info.\n   *\n   */\n  construct(stateName, stateInfo) {\n    var context;\n\n    // Call our superclass' constructor\n    super();\n\n    // Save the state name\n    this.setName(stateName);\n\n    // Ensure they passed in an object\n    if (typeof stateInfo != \"object\") {\n      throw new Error(\"State info must be an object\");\n    }\n\n    // If a context was specified, retrieve it.\n    context = stateInfo.context || window;\n\n    // Save it for future use\n    this.setUserData(\"context\", context);\n\n    // Save data from the stateInfo object\n    for (var field in stateInfo) {\n      // If we find one of our properties, call its setter.\n      switch (field) {\n        case \"onentry\":\n          this.setOnentry(this.__bindIfFunction(stateInfo[field], context));\n          break;\n\n        case \"onexit\":\n          this.setOnexit(this.__bindIfFunction(stateInfo[field], context));\n          break;\n\n        case \"autoActionsBeforeOnentry\":\n          this.setAutoActionsBeforeOnentry(stateInfo[field]);\n          break;\n\n        case \"autoActionsAfterOnentry\":\n          this.setAutoActionsAfterOnentry(stateInfo[field]);\n          break;\n\n        case \"autoActionsBeforeOnexit\":\n          this.setAutoActionsBeforeOnexit(stateInfo[field]);\n          break;\n\n        case \"autoActionsAfterOnexit\":\n          this.setAutoActionsAfterOnexit(stateInfo[field]);\n          break;\n\n        case \"events\":\n          this.setEvents(stateInfo[field]);\n          break;\n\n        case \"context\":\n          // already handled\n          break;\n\n        default:\n          // Anything else is user-provided data for their own use.  Save it.\n          this.setUserData(field, stateInfo[field]);\n\n          // Log it in case it was a typo and they intended a built-in field\n          this.debug(\n            \"State \" +\n              stateName +\n              \": \" +\n              \"Adding user-provided field to state: \" +\n              field\n          );\n\n          break;\n      }\n    }\n\n    // Check for required but missing properties\n    if (!this.getEvents()) {\n      throw new Error(\"The events object must be provided in new state info\");\n    }\n\n    // Initialize the transition list\n    this.transitions = {};\n  },\n\n  statics: {\n    /**\n     * Common function for checking the value provided for\n     * auto actions.\n     *\n     * Auto-action property values passed to us look akin to:\n     *\n     *     <pre class='javascript'>\n     *     {\n     *       // The name of a function.\n     *       \"setEnabled\" :\n     *       [\n     *         {\n     *           // The parameter value(s), thus \"setEnabled(true);\"\n     *           \"parameters\"   : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *\n     *       \"setTextColor\" :\n     *       [\n     *         {\n     *           \"parameters\" : [ \"blue\" ]\n     *           \"groups\"     : [ \"group3\", \"group4\" ],\n     *           \"objects\"    : [ \"obj3\", \"obj4\" ]\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     *\n     *\n     * @param actionType {String}\n     *   The name of the action being validated (for debug messages)\n     *\n     * @param value {Object}\n     *   The property value which is being validated\n     *\n     * @param context {Object}\n     *   The object to which the created function should be bound.\n     *\n     * @return {Function}\n     *   Function that implements calls to each of the requested automatic\n     *   actions\n     *\n     * @throws {Error} If the value has an invalid type.\n     * @throws {Error} If the function type is not an array.\n     * @throws {Error} If the function request parameter type is not valid.\n     * @throws {Error} If the function parameters are not valid.\n     * @throws {Error} If 'objects' list is invalid.\n     * @throws {Error} If a name in the 'objects' list is not valid.\n     * @throws {Error} If the 'groups' list is not valid.\n     */\n    _commonTransformAutoActions(actionType, value, context) {\n      // Validate that we received an object property value\n      if (typeof value != \"object\") {\n        throw new Error(\"Invalid \" + actionType + \" value: \" + typeof value);\n      }\n\n      // We'll create a function to do the requested actions.  Initialize the\n      // string into which we'll generate the common fragment added to the\n      // function for each object.\n      var funcFragment;\n\n      // Here, we'll keep the function body.  Initialize a try block.\n      var func = \"try\" + \"{\";\n\n      var param;\n      var objectAndGroupList;\n\n      // Retrieve the function request, e.g.\n      // \"enabled\" :\n      for (var f in value) {\n        // Get the function request value object, e.g.\n        // \"setEnabled\" :\n        // [\n        //   {\n        //     \"parameters\"   : [ true ],\n        //     \"objects\" : [ \"obj1\", \"obj2\" ]\n        //     \"groups\"  : [ \"group1\", \"group2\" ],\n        //   }\n        // ];\n        var functionRequest = value[f];\n\n        // The function request value should be an object\n        if (!functionRequest instanceof Array) {\n          throw new Error(\n            \"Invalid function request type: \" +\n              \"expected array, found \" +\n              typeof functionRequest\n          );\n        }\n\n        // For each function request...\n        for (var i = 0; i < functionRequest.length; i++) {\n          // Retrieve the object and group list object\n          objectAndGroupList = functionRequest[i];\n\n          // The object and group list should be an object, e.g.\n          // {\n          //   \"parameters\"   : [ true ],\n          //   \"objects\" : [ \"obj1\", \"obj2\" ]\n          //   \"groups\"  : [ \"group1\", \"group2\" ],\n          // }\n          if (typeof objectAndGroupList != \"object\") {\n            throw new Error(\n              \"Invalid function request parameter type: \" +\n                \"expected object, found \" +\n                typeof functionRequest[param]\n            );\n          }\n\n          // Retrieve the parameter list\n          var params = objectAndGroupList[\"parameters\"];\n\n          // If it didn't exist, ...\n          if (!params) {\n            // ... use an empty array.\n            params = [];\n          } else {\n            // otherwise, ensure we got an array\n            if (!params instanceof Array) {\n              throw new Error(\n                \"Invalid function parameters: \" +\n                  \"expected array, found \" +\n                  typeof params\n              );\n            }\n          }\n\n          // Create the function to call on each object.  The object on which\n          // the function is called will be prepended later.\n          funcFragment = f + \"(\";\n\n          // For each parameter...\n          for (var j = 0; j < params.length; j++) {\n            // If this isn't the first parameter, add a separator\n            if (j != 0) {\n              funcFragment += \",\";\n            }\n\n            if (typeof params[j] == \"function\") {\n              // If the parameter is a function, arrange for it to be called\n              // at run time.\n              funcFragment += \"(\" + params[j] + \")(fsm)\";\n            } else if (typeof params[j] == \"string\") {\n              // If the parameter is a string, quote it.\n              funcFragment += '\"' + params[j] + '\"';\n            } else {\n              // Otherwise, just add the parameter's literal value\n              funcFragment += params[j];\n            }\n          }\n\n          // Complete the function call\n          funcFragment += \")\";\n\n          // Get the \"objects\" list, e.g.\n          //   \"objects\" : [ \"obj1\", \"obj2\" ]\n          var a = objectAndGroupList[\"objects\"];\n\n          // Was there an \"objects\" list?\n          if (!a) {\n            // Nope.  Simplify code by creating an empty array.\n            a = [];\n          } else if (!a instanceof Array) {\n            throw new Error(\n              \"Invalid 'objects' list: expected array, got \" + typeof a\n            );\n          }\n\n          for (var j = 0; j < a.length; j++) {\n            // Ensure we got a string\n            if (typeof a[j] != \"string\") {\n              throw new Error(\n                \"Invalid friendly name in 'objects' list: \" + a[j]\n              );\n            }\n\n            func += \" fsm.getObject('\" + a[j] + \"').\" + funcFragment + \";\";\n          }\n\n          // Get the \"groups\" list, e.g.\n          //   \"groups\" : [ \"group1, \"group2\" ]\n          var g = objectAndGroupList[\"groups\"];\n\n          // Was a \"groups\" list found?\n          if (g) {\n            // Yup.  Ensure it's an array.\n            if (!g instanceof Array) {\n              throw new Error(\n                \"Invalid 'groups' list: expected array, got \" + typeof g\n              );\n            }\n\n            for (j = 0; j < g.length; j++) {\n              // Arrange to call the function on each object in each group\n              func +=\n                \"  var groupObjects = \" +\n                \"    fsm.getGroupObjects('\" +\n                g[j] +\n                \"');\" +\n                \"  for (var i = 0; i < groupObjects.length; i++)\" +\n                \"  {\" +\n                \"    var objName = groupObjects[i];\" +\n                \"    fsm.getObject(objName).\" +\n                funcFragment +\n                \";\" +\n                \"  }\";\n            }\n          }\n        }\n      }\n\n      // Terminate the try block for function invocations\n      func += \"}\" + \"catch(ex)\" + \"{\" + \"  fsm.debug(ex);\" + \"}\";\n\n      // We've now built the entire body of a function that implements calls\n      // to each of the requested automatic actions.  Create and return the\n      // function, which will become the property value.\n      return qx.lang.Function.bind(new Function(\"fsm\", func), context);\n    }\n  },\n\n  properties: {\n    /**\n     * The name of this state.  This name may be used as a Transition's\n     * nextState value, or an explicit next state in the 'events' handling\n     * list in a State.\n     */\n    name: {\n      transform: \"__transformName\",\n      nullable: true\n    },\n\n    /**\n     * The onentry function for this state.  This is documented in the\n     * constructor, and is typically provided through the constructor's\n     * stateInfo object, but it is also possible (but highly NOT recommended)\n     * to change this dynamically.\n     */\n    onentry: {\n      transform: \"__transformOnentry\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * The onexit function for this state.  This is documented in the\n     * constructor, and is typically provided through the constructor's\n     * stateInfo object, but it is also possible (but highly NOT recommended)\n     * to change this dynamically.\n     */\n    onexit: {\n      transform: \"__transformOnexit\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * Automatic actions to take prior to calling the state's onentry function.\n     *\n     * The value passed to setAutoActionsBeforeOnentry() should like something\n     * akin to:\n     *\n     *     <pre class='javascript'>\n     *     \"autoActionsBeforeOnentry\" :\n     *     {\n     *       // The name of a function.  This would become \"setEnabled(\"\n     *       \"enabled\" :\n     *       [\n     *         {\n     *           // The parameter value, thus \"setEnabled(true);\"\n     *           \"parameters\" : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     */\n    autoActionsBeforeOnentry: {\n      transform: \"__transformAutoActionsBeforeOnentry\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * Automatic actions to take after return from the state's onentry\n     * function.\n     *\n     * The value passed to setAutoActionsAfterOnentry() should like something\n     * akin to:\n     *\n     *     <pre class='javascript'>\n     *     \"autoActionsAfterOnentry\" :\n     *     {\n     *       // The name of a function.  This would become \"setEnabled(\"\n     *       \"enabled\" :\n     *       [\n     *         {\n     *           // The parameter value, thus \"setEnabled(true);\"\n     *           \"parameters\" : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     */\n    autoActionsAfterOnentry: {\n      transform: \"__transformAutoActionsAfterOnentry\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * Automatic actions to take prior to calling the state's onexit function.\n     *\n     * The value passed to setAutoActionsBeforeOnexit() should like something\n     * akin to:\n     *\n     *     <pre class='javascript'>\n     *     \"autoActionsBeforeOnexit\" :\n     *     {\n     *       // The name of a function.  This would become \"setEnabled(\"\n     *       \"enabled\" :\n     *       [\n     *         {\n     *           // The parameter value, thus \"setEnabled(true);\"\n     *           \"parameters\" : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     */\n    autoActionsBeforeOnexit: {\n      transform: \"__transformAutoActionsBeforeOnexit\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * Automatic actions to take after returning from the state's onexit\n     * function.\n     *\n     * The value passed to setAutoActionsAfterOnexit() should like something\n     * akin to:\n     *\n     *     <pre class='javascript'>\n     *     \"autoActionsBeforeOnexit\" :\n     *     {\n     *       // The name of a function.  This would become \"setEnabled(\"\n     *       \"enabled\" :\n     *       [\n     *         {\n     *           // The parameter value, thus \"setEnabled(true);\"\n     *           \"parameters\" : [ true ],\n     *\n     *           // The function would be called on each object:\n     *           //  this.getObject(\"obj1\").setEnabled(true);\n     *           //  this.getObject(\"obj2\").setEnabled(true);\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\n     *\n     *           // And similarly for each object in each specified group.\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\n     *         }\n     *       ];\n     *     };\n     *     </pre>\n     */\n    autoActionsAfterOnexit: {\n      transform: \"__transformAutoActionsAfterOnexit\",\n      nullable: true,\n      init(fsm, event) {}\n    },\n\n    /**\n     * The object representing handled and blocked events for this state.\n     * This is documented in the constructor, and is typically provided\n     * through the constructor's stateInfo object, but it is also possible\n     * (but highly NOT recommended) to change this dynamically.\n     */\n    events: {\n      transform: \"__transformEvents\",\n      nullable: true\n    }\n  },\n\n  members: {\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Value passed to setter\n     * @return {var} the final value\n     * @throws {Error} when an invalid value is detected\n     */\n    __transformName(value) {\n      // Ensure that we got a valid state name\n      if (typeof value != \"string\" || value.length < 1) {\n        throw new Error(\"Invalid state name\");\n      }\n\n      return value;\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     * @throws {Error} when an invalid value is detected\n     */\n    __transformOnentry(value) {\n      // Validate the onentry function\n      switch (typeof value) {\n        case \"undefined\":\n          // None provided.  Convert it to a null function\n          return function (fsm, event) {};\n\n        case \"function\":\n          // We're cool.  No changes required\n          return qx.lang.Function.bind(value, this.getUserData(\"context\"));\n\n        default:\n          throw new Error(\"Invalid onentry type: \" + typeof value);\n      }\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     * @throws {Error} when an invalid value is detected\n     */\n    __transformOnexit(value) {\n      // Validate the onexit function\n      switch (typeof value) {\n        case \"undefined\":\n          // None provided.  Convert it to a null function\n          return function (fsm, event) {};\n\n        case \"function\":\n          // We're cool.  No changes required\n          return qx.lang.Function.bind(value, this.getUserData(\"context\"));\n\n        default:\n          throw new Error(\"Invalid onexit type: \" + typeof value);\n      }\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     * @throws {Error} when an invalid value is detected\n     */\n    __transformEvents(value) {\n      // Validate that events is an object\n      if (typeof value != \"object\") {\n        throw new Error(\"events must be an object\");\n      }\n\n      // Confirm that each property is a valid value\n      // The property value should be one of:\n      //\n      // (a) qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE\n      //\n      // (b) qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\n      //\n      // (c) a string containing the name of an explicit Transition to use\n      //\n      // (d) an object where each property name is the Friendly Name of an\n      //     object (meaning that this rule applies if both the event and\n      //     the event's target object's Friendly Name match), and its\n      //     property value is one of (a), (b) or (c), above.\n      for (var e in value) {\n        var action = value[e];\n\n        if (\n          typeof action == \"number\" &&\n          action != qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE &&\n          action != qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\n        ) {\n          throw new Error(\n            \"Invalid numeric value in events object: \" + e + \": \" + action\n          );\n        } else if (typeof action == \"object\") {\n          for (var action_e in action) {\n            if (\n              typeof action[action_e] == \"number\" &&\n              action[action_e] !=\n                qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE &&\n              action[action_e] !=\n                qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\n            ) {\n              throw new Error(\n                \"Invalid numeric value in events object \" +\n                  \"(\" +\n                  e +\n                  \"): \" +\n                  action_e +\n                  \": \" +\n                  action[action_e]\n              );\n            } else if (\n              typeof action[action_e] != \"string\" &&\n              typeof action[action_e] != \"number\"\n            ) {\n              throw new Error(\n                \"Invalid value in events object \" +\n                  \"(\" +\n                  e +\n                  \"): \" +\n                  action_e +\n                  \": \" +\n                  action[action_e]\n              );\n            }\n          }\n        } else if (typeof action != \"string\" && typeof action != \"number\") {\n          throw new Error(\n            \"Invalid value in events object: \" + e + \": \" + value[e]\n          );\n        }\n      }\n\n      // We're cool.  No changes required.\n      return value;\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     */\n    __transformAutoActionsBeforeOnentry(value) {\n      return qx.util.fsm.State._commonTransformAutoActions(\n        \"autoActionsBeforeOnentry\",\n        value,\n        this.getUserData(\"context\")\n      );\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     */\n    __transformAutoActionsAfterOnentry(value) {\n      return qx.util.fsm.State._commonTransformAutoActions(\n        \"autoActionsAfterOnentry\",\n        value,\n        this.getUserData(\"context\")\n      );\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     */\n    __transformAutoActionsBeforeOnexit(value) {\n      return qx.util.fsm.State._commonTransformAutoActions(\n        \"autoActionsBeforeOnexit\",\n        value,\n        this.getUserData(\"context\")\n      );\n    },\n\n    /**\n     * Internal transform method\n     *\n     * @param value {var} Current value\n     * @return {var} the final value\n     */\n    __transformAutoActionsAfterOnexit(value) {\n      return qx.util.fsm.State._commonTransformAutoActions(\n        \"autoActionsAfterOnexit\",\n        value,\n        this.getUserData(\"context\")\n      );\n    },\n\n    /**\n     * If given a function, bind it to a specified context.\n     *\n     * @param f {Function|var}\n     *   The (possibly) function to be bound to the specified context.\n     *\n     * @param context {Object}\n     *   The context to bind the function to.\n     *\n     * @return {Function}\n     *   If f was a function, the return value is f wrapped such that it will\n     *   be called in the specified context. Otherwise, f is returned\n     *   unaltered.\n     */\n    __bindIfFunction(f, context) {\n      // Is the first parameter a function?\n      if (typeof f == \"function\") {\n        // Yup. Bind it to the specified context.\n        f = qx.lang.Function.bind(f, context);\n      }\n\n      return f;\n    },\n\n    /**\n     * Add a transition to a state\n     *\n     *\n     * @param trans {qx.util.fsm.Transition}\n     *   An object of class qx.util.fsm.Transition representing a transition\n     *   which is to be a part of this state.\n     *\n     */\n    addTransition(trans) {\n      // Ensure that we got valid transition info\n      if (!trans instanceof qx.util.fsm.Transition) {\n        throw new Error(\n          \"Invalid transition: not an instance of \" + \"qx.util.fsm.Transition\"\n        );\n      }\n\n      // Add the new transition object to the state\n      this.transitions[trans.getName()] = trans;\n    }\n  }\n});\n"
  ],
  "mappings": "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A,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE;QACNN,SAAS,EAAE,WAAmB;QAC9BC,QAAQ,EAAE,IAAI;QACdE,IAAI,WAAAA,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,wBAAwB,EAAE;QACxBP,SAAS,EAAE,WAAqC;QAChDC,QAAQ,EAAE,IAAI;QACdE,IAAI,WAAAA,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,uBAAuB,EAAE;QACvBR,SAAS,EAAE,WAAoC;QAC/CC,QAAQ,EAAE,IAAI;QACdE,IAAI,WAAAA,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,uBAAuB,EAAE;QACvBT,SAAS,EAAE,WAAoC;QAC/CC,QAAQ,EAAE,IAAI;QACdE,IAAI,WAAAA,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,sBAAsB,EAAE;QACtBV,SAAS,EAAE,WAAmC;QAC9CC,QAAQ,EAAE,IAAI;QAC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",
  "ignoreList": []
}