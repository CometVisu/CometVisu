{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "stateName",
    "stateInfo",
    "context",
    "constructor",
    "call",
    "setName",
    "_typeof",
    "Error",
    "window",
    "setUserData",
    "field",
    "setOnentry",
    "__bindIfFunction",
    "setOnexit",
    "setAutoActionsBeforeOnentry",
    "setAutoActionsAfterOnentry",
    "setAutoActionsBeforeOnexit",
    "setAutoActionsAfterOnexit",
    "setEvents",
    "debug",
    "getEvents",
    "transitions",
    "statics",
    "_commonTransformAutoActions",
    "actionType",
    "value",
    "funcFragment",
    "func",
    "param",
    "objectAndGroupList",
    "f",
    "functionRequest",
    "Array",
    "i",
    "length",
    "params",
    "j",
    "a",
    "g",
    "lang",
    "Function",
    "bind",
    "properties",
    "name",
    "transform",
    "nullable",
    "onentry",
    "init",
    "fsm",
    "event",
    "onexit",
    "autoActionsBeforeOnentry",
    "autoActionsAfterOnentry",
    "autoActionsBeforeOnexit",
    "autoActionsAfterOnexit",
    "events",
    "members",
    "__transformName",
    "__P_525_1",
    "__transformOnentry",
    "__P_525_2",
    "getUserData",
    "__transformOnexit",
    "__P_525_3",
    "__transformEvents",
    "__P_525_8",
    "e",
    "action",
    "util",
    "FiniteStateMachine",
    "EventHandling",
    "PREDICATE",
    "BLOCKED",
    "action_e",
    "__transformAutoActionsBeforeOnentry",
    "__P_525_4",
    "State",
    "__transformAutoActionsAfterOnentry",
    "__P_525_5",
    "__transformAutoActionsBeforeOnexit",
    "__P_525_6",
    "__transformAutoActionsAfterOnexit",
    "__P_525_7",
    "__P_525_0",
    "addTransition",
    "trans",
    "Transition",
    "getName"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/fsm/State.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006, 2007, 2011 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Create a new state which may be added to a finite state machine.\r\n */\r\nqx.Class.define(\"qx.util.fsm.State\", {\r\n  extend: qx.core.Object,\r\n\r\n  /**\r\n   * @param stateName {String}\r\n   *   The name of this state.  This is the name which may be referenced in\r\n   *   objects of class qx.util.fsm.Transition, when passing of\r\n   *   the transition's predicate means transition to this state.\r\n   *\r\n   * @param stateInfo {Map}\r\n   *   <pre>\r\n   *   An object containing any of the following properties:\r\n   *\r\n   *     context -\r\n   *       A context in which all of the following functions should be run.\r\n   *\r\n   *     onentry -\r\n   *       A function which is called upon entry to the state.  Its signature\r\n   *       is function(fsm, event) and it is saved in the onentry property of\r\n   *       the state object.  (This function is called after the Transition's\r\n   *       action function and after the previous state's onexit function.)\r\n   *\r\n   *       In the onentry function:\r\n   *\r\n   *         fsm -\r\n   *           The finite state machine object to which this state is attached.\r\n   *\r\n   *         event -\r\n   *           The event that caused the finite state machine to run\r\n   *\r\n   *     onexit -\r\n   *       A function which is called upon exit from the state.  Its signature\r\n   *       is function(fsm, event) and it is saved in the onexit property of\r\n   *       the state object.  (This function is called after the Transition's\r\n   *       action function and before the next state's onentry function.)\r\n   *\r\n   *       In the onexit function:\r\n   *\r\n   *         fsm -\r\n   *           The finite state machine object to which this state is attached.\r\n   *\r\n   *         event -\r\n   *           The event that caused the finite state machine to run\r\n   *\r\n   *     autoActionsBeforeOnentry -\r\n   *     autoActionsAfterOnentry -\r\n   *     autoActionsBeforeOnexit -\r\n   *     autoActionsAfterOnexit -\r\n   *       Automatic actions which take place at the time specified by the\r\n   *       property name.  In all cases, the action takes place immediately\r\n   *       before or after the specified function.\r\n   *\r\n   *       The property value for each of these properties is an object which\r\n   *       describes some number of functions to invoke on a set of specified\r\n   *       objects (typically widgets).\r\n   *\r\n   *       An example, using autoActionsBeforeOnentry, might look like this:\r\n   *\r\n   *       \"autoActionsBeforeOnentry\" :\r\n   *       {\r\n   *         // The name of a function.\r\n   *         \"setEnabled\" :\r\n   *         [\r\n   *           {\r\n   *             // The parameter value, thus \"setEnabled(true);\"\r\n   *             \"parameters\" : [ true ],\r\n   *\r\n   *             // The function would be called on each object:\r\n   *             //  this.getObject(\"obj1\").setEnabled(true);\r\n   *             //  this.getObject(\"obj2\").setEnabled(true);\r\n   *             \"objects\" : [ \"obj1\", \"obj2\" ],\r\n   *\r\n   *             // And similarly for each object in each specified group.\r\n   *             \"groups\"  : [ \"group1\", \"group2\" ]\r\n   *           }\r\n   *         ],\r\n   *\r\n   *         // The name of another function.\r\n   *         \"setVisible\" :\r\n   *         [\r\n   *           {\r\n   *             // The parameter value, thus \"setVisible(false);\"\r\n   *             \"parameters\" : [ false ],\r\n   *\r\n   *             // The function would be called on each object and group, as\r\n   *             // described above.\r\n   *             \"objects\" : [ \"obj3\", \"obj4\" ],\r\n   *             \"groups\"  : [ \"group3\", \"group4\" ]\r\n   *           }\r\n   *         ]\r\n   *       };\r\n   *\r\n   *     events (required) -\r\n   *       A description to the finite state machine of how to handle a\r\n   *       particular event, optionally associated with a specific target\r\n   *       object on which the event was dispatched.  This should be an object\r\n   *       containing one property for each event which is either handled or\r\n   *       blocked.  The property name should be the event name.  The property\r\n   *       value should be one of:\r\n   *\r\n   *         (a) qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE\r\n   *\r\n   *         (b) qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\r\n   *\r\n   *         (c) a string containing the name of an explicit Transition to use\r\n   *\r\n   *         (d) an object where each property name is the Friendly Name of an\r\n   *             object (meaning that this rule applies if both the event and\r\n   *             the event's target object's Friendly Name match), and its\r\n   *             property value is one of (a), (b) or (c), above.\r\n   *\r\n   *       This object is saved in the events property of the state object.\r\n   *\r\n   *     Additional properties may be provided in stateInfo.  They will not be\r\n   *     used by the finite state machine, but will be available via\r\n   *     this.getUserData(\"<propertyName>\") during the state's onentry and\r\n   *     onexit functions.\r\n   *   </pre>\r\n   *\r\n   * @throws {Error} If the state info is not a valid object.\r\n   * @throws {Error} If the events object is not provided in new state info.\r\n   *\r\n   */\r\n  construct(stateName, stateInfo) {\r\n    var context;\r\n\r\n    // Call our superclass' constructor\r\n    super();\r\n\r\n    // Save the state name\r\n    this.setName(stateName);\r\n\r\n    // Ensure they passed in an object\r\n    if (typeof stateInfo != \"object\") {\r\n      throw new Error(\"State info must be an object\");\r\n    }\r\n\r\n    // If a context was specified, retrieve it.\r\n    context = stateInfo.context || window;\r\n\r\n    // Save it for future use\r\n    this.setUserData(\"context\", context);\r\n\r\n    // Save data from the stateInfo object\r\n    for (var field in stateInfo) {\r\n      // If we find one of our properties, call its setter.\r\n      switch (field) {\r\n        case \"onentry\":\r\n          this.setOnentry(this.__bindIfFunction(stateInfo[field], context));\r\n          break;\r\n\r\n        case \"onexit\":\r\n          this.setOnexit(this.__bindIfFunction(stateInfo[field], context));\r\n          break;\r\n\r\n        case \"autoActionsBeforeOnentry\":\r\n          this.setAutoActionsBeforeOnentry(stateInfo[field]);\r\n          break;\r\n\r\n        case \"autoActionsAfterOnentry\":\r\n          this.setAutoActionsAfterOnentry(stateInfo[field]);\r\n          break;\r\n\r\n        case \"autoActionsBeforeOnexit\":\r\n          this.setAutoActionsBeforeOnexit(stateInfo[field]);\r\n          break;\r\n\r\n        case \"autoActionsAfterOnexit\":\r\n          this.setAutoActionsAfterOnexit(stateInfo[field]);\r\n          break;\r\n\r\n        case \"events\":\r\n          this.setEvents(stateInfo[field]);\r\n          break;\r\n\r\n        case \"context\":\r\n          // already handled\r\n          break;\r\n\r\n        default:\r\n          // Anything else is user-provided data for their own use.  Save it.\r\n          this.setUserData(field, stateInfo[field]);\r\n\r\n          // Log it in case it was a typo and they intended a built-in field\r\n          this.debug(\r\n            \"State \" +\r\n              stateName +\r\n              \": \" +\r\n              \"Adding user-provided field to state: \" +\r\n              field\r\n          );\r\n\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Check for required but missing properties\r\n    if (!this.getEvents()) {\r\n      throw new Error(\"The events object must be provided in new state info\");\r\n    }\r\n\r\n    // Initialize the transition list\r\n    this.transitions = {};\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * Common function for checking the value provided for\r\n     * auto actions.\r\n     *\r\n     * Auto-action property values passed to us look akin to:\r\n     *\r\n     *     <pre class='javascript'>\r\n     *     {\r\n     *       // The name of a function.\r\n     *       \"setEnabled\" :\r\n     *       [\r\n     *         {\r\n     *           // The parameter value(s), thus \"setEnabled(true);\"\r\n     *           \"parameters\"   : [ true ],\r\n     *\r\n     *           // The function would be called on each object:\r\n     *           //  this.getObject(\"obj1\").setEnabled(true);\r\n     *           //  this.getObject(\"obj2\").setEnabled(true);\r\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\r\n     *\r\n     *           // And similarly for each object in each specified group.\r\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\r\n     *         }\r\n     *       ];\r\n     *\r\n     *       \"setTextColor\" :\r\n     *       [\r\n     *         {\r\n     *           \"parameters\" : [ \"blue\" ]\r\n     *           \"groups\"     : [ \"group3\", \"group4\" ],\r\n     *           \"objects\"    : [ \"obj3\", \"obj4\" ]\r\n     *         }\r\n     *       ];\r\n     *     };\r\n     *     </pre>\r\n     *\r\n     *\r\n     * @param actionType {String}\r\n     *   The name of the action being validated (for debug messages)\r\n     *\r\n     * @param value {Object}\r\n     *   The property value which is being validated\r\n     *\r\n     * @param context {Object}\r\n     *   The object to which the created function should be bound.\r\n     *\r\n     * @return {Function}\r\n     *   Function that implements calls to each of the requested automatic\r\n     *   actions\r\n     *\r\n     * @throws {Error} If the value has an invalid type.\r\n     * @throws {Error} If the function type is not an array.\r\n     * @throws {Error} If the function request parameter type is not valid.\r\n     * @throws {Error} If the function parameters are not valid.\r\n     * @throws {Error} If 'objects' list is invalid.\r\n     * @throws {Error} If a name in the 'objects' list is not valid.\r\n     * @throws {Error} If the 'groups' list is not valid.\r\n     */\r\n    _commonTransformAutoActions(actionType, value, context) {\r\n      // Validate that we received an object property value\r\n      if (typeof value != \"object\") {\r\n        throw new Error(\"Invalid \" + actionType + \" value: \" + typeof value);\r\n      }\r\n\r\n      // We'll create a function to do the requested actions.  Initialize the\r\n      // string into which we'll generate the common fragment added to the\r\n      // function for each object.\r\n      var funcFragment;\r\n\r\n      // Here, we'll keep the function body.  Initialize a try block.\r\n      var func = \"try\" + \"{\";\r\n\r\n      var param;\r\n      var objectAndGroupList;\r\n\r\n      // Retrieve the function request, e.g.\r\n      // \"enabled\" :\r\n      for (var f in value) {\r\n        // Get the function request value object, e.g.\r\n        // \"setEnabled\" :\r\n        // [\r\n        //   {\r\n        //     \"parameters\"   : [ true ],\r\n        //     \"objects\" : [ \"obj1\", \"obj2\" ]\r\n        //     \"groups\"  : [ \"group1\", \"group2\" ],\r\n        //   }\r\n        // ];\r\n        var functionRequest = value[f];\r\n\r\n        // The function request value should be an object\r\n        if (!functionRequest instanceof Array) {\r\n          throw new Error(\r\n            \"Invalid function request type: \" +\r\n              \"expected array, found \" +\r\n              typeof functionRequest\r\n          );\r\n        }\r\n\r\n        // For each function request...\r\n        for (var i = 0; i < functionRequest.length; i++) {\r\n          // Retrieve the object and group list object\r\n          objectAndGroupList = functionRequest[i];\r\n\r\n          // The object and group list should be an object, e.g.\r\n          // {\r\n          //   \"parameters\"   : [ true ],\r\n          //   \"objects\" : [ \"obj1\", \"obj2\" ]\r\n          //   \"groups\"  : [ \"group1\", \"group2\" ],\r\n          // }\r\n          if (typeof objectAndGroupList != \"object\") {\r\n            throw new Error(\r\n              \"Invalid function request parameter type: \" +\r\n                \"expected object, found \" +\r\n                typeof functionRequest[param]\r\n            );\r\n          }\r\n\r\n          // Retrieve the parameter list\r\n          var params = objectAndGroupList[\"parameters\"];\r\n\r\n          // If it didn't exist, ...\r\n          if (!params) {\r\n            // ... use an empty array.\r\n            params = [];\r\n          } else {\r\n            // otherwise, ensure we got an array\r\n            if (!params instanceof Array) {\r\n              throw new Error(\r\n                \"Invalid function parameters: \" +\r\n                  \"expected array, found \" +\r\n                  typeof params\r\n              );\r\n            }\r\n          }\r\n\r\n          // Create the function to call on each object.  The object on which\r\n          // the function is called will be prepended later.\r\n          funcFragment = f + \"(\";\r\n\r\n          // For each parameter...\r\n          for (var j = 0; j < params.length; j++) {\r\n            // If this isn't the first parameter, add a separator\r\n            if (j != 0) {\r\n              funcFragment += \",\";\r\n            }\r\n\r\n            if (typeof params[j] == \"function\") {\r\n              // If the parameter is a function, arrange for it to be called\r\n              // at run time.\r\n              funcFragment += \"(\" + params[j] + \")(fsm)\";\r\n            } else if (typeof params[j] == \"string\") {\r\n              // If the parameter is a string, quote it.\r\n              funcFragment += '\"' + params[j] + '\"';\r\n            } else {\r\n              // Otherwise, just add the parameter's literal value\r\n              funcFragment += params[j];\r\n            }\r\n          }\r\n\r\n          // Complete the function call\r\n          funcFragment += \")\";\r\n\r\n          // Get the \"objects\" list, e.g.\r\n          //   \"objects\" : [ \"obj1\", \"obj2\" ]\r\n          var a = objectAndGroupList[\"objects\"];\r\n\r\n          // Was there an \"objects\" list?\r\n          if (!a) {\r\n            // Nope.  Simplify code by creating an empty array.\r\n            a = [];\r\n          } else if (!a instanceof Array) {\r\n            throw new Error(\r\n              \"Invalid 'objects' list: expected array, got \" + typeof a\r\n            );\r\n          }\r\n\r\n          for (var j = 0; j < a.length; j++) {\r\n            // Ensure we got a string\r\n            if (typeof a[j] != \"string\") {\r\n              throw new Error(\r\n                \"Invalid friendly name in 'objects' list: \" + a[j]\r\n              );\r\n            }\r\n\r\n            func += \" fsm.getObject('\" + a[j] + \"').\" + funcFragment + \";\";\r\n          }\r\n\r\n          // Get the \"groups\" list, e.g.\r\n          //   \"groups\" : [ \"group1, \"group2\" ]\r\n          var g = objectAndGroupList[\"groups\"];\r\n\r\n          // Was a \"groups\" list found?\r\n          if (g) {\r\n            // Yup.  Ensure it's an array.\r\n            if (!g instanceof Array) {\r\n              throw new Error(\r\n                \"Invalid 'groups' list: expected array, got \" + typeof g\r\n              );\r\n            }\r\n\r\n            for (j = 0; j < g.length; j++) {\r\n              // Arrange to call the function on each object in each group\r\n              func +=\r\n                \"  var groupObjects = \" +\r\n                \"    fsm.getGroupObjects('\" +\r\n                g[j] +\r\n                \"');\" +\r\n                \"  for (var i = 0; i < groupObjects.length; i++)\" +\r\n                \"  {\" +\r\n                \"    var objName = groupObjects[i];\" +\r\n                \"    fsm.getObject(objName).\" +\r\n                funcFragment +\r\n                \";\" +\r\n                \"  }\";\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Terminate the try block for function invocations\r\n      func += \"}\" + \"catch(ex)\" + \"{\" + \"  fsm.debug(ex);\" + \"}\";\r\n\r\n      // We've now built the entire body of a function that implements calls\r\n      // to each of the requested automatic actions.  Create and return the\r\n      // function, which will become the property value.\r\n      return qx.lang.Function.bind(new Function(\"fsm\", func), context);\r\n    }\r\n  },\r\n\r\n  properties: {\r\n    /**\r\n     * The name of this state.  This name may be used as a Transition's\r\n     * nextState value, or an explicit next state in the 'events' handling\r\n     * list in a State.\r\n     */\r\n    name: {\r\n      transform: \"__transformName\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The onentry function for this state.  This is documented in the\r\n     * constructor, and is typically provided through the constructor's\r\n     * stateInfo object, but it is also possible (but highly NOT recommended)\r\n     * to change this dynamically.\r\n     */\r\n    onentry: {\r\n      transform: \"__transformOnentry\",\r\n      nullable: true,\r\n      init(fsm, event) {}\r\n    },\r\n\r\n    /**\r\n     * The onexit function for this state.  This is documented in the\r\n     * constructor, and is typically provided through the constructor's\r\n     * stateInfo object, but it is also possible (but highly NOT recommended)\r\n     * to change this dynamically.\r\n     */\r\n    onexit: {\r\n      transform: \"__transformOnexit\",\r\n      nullable: true,\r\n      init(fsm, event) {}\r\n    },\r\n\r\n    /**\r\n     * Automatic actions to take prior to calling the state's onentry function.\r\n     *\r\n     * The value passed to setAutoActionsBeforeOnentry() should like something\r\n     * akin to:\r\n     *\r\n     *     <pre class='javascript'>\r\n     *     \"autoActionsBeforeOnentry\" :\r\n     *     {\r\n     *       // The name of a function.  This would become \"setEnabled(\"\r\n     *       \"enabled\" :\r\n     *       [\r\n     *         {\r\n     *           // The parameter value, thus \"setEnabled(true);\"\r\n     *           \"parameters\" : [ true ],\r\n     *\r\n     *           // The function would be called on each object:\r\n     *           //  this.getObject(\"obj1\").setEnabled(true);\r\n     *           //  this.getObject(\"obj2\").setEnabled(true);\r\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\r\n     *\r\n     *           // And similarly for each object in each specified group.\r\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\r\n     *         }\r\n     *       ];\r\n     *     };\r\n     *     </pre>\r\n     */\r\n    autoActionsBeforeOnentry: {\r\n      transform: \"__transformAutoActionsBeforeOnentry\",\r\n      nullable: true,\r\n      init(fsm, event) {}\r\n    },\r\n\r\n    /**\r\n     * Automatic actions to take after return from the state's onentry\r\n     * function.\r\n     *\r\n     * The value passed to setAutoActionsAfterOnentry() should like something\r\n     * akin to:\r\n     *\r\n     *     <pre class='javascript'>\r\n     *     \"autoActionsAfterOnentry\" :\r\n     *     {\r\n     *       // The name of a function.  This would become \"setEnabled(\"\r\n     *       \"enabled\" :\r\n     *       [\r\n     *         {\r\n     *           // The parameter value, thus \"setEnabled(true);\"\r\n     *           \"parameters\" : [ true ],\r\n     *\r\n     *           // The function would be called on each object:\r\n     *           //  this.getObject(\"obj1\").setEnabled(true);\r\n     *           //  this.getObject(\"obj2\").setEnabled(true);\r\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\r\n     *\r\n     *           // And similarly for each object in each specified group.\r\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\r\n     *         }\r\n     *       ];\r\n     *     };\r\n     *     </pre>\r\n     */\r\n    autoActionsAfterOnentry: {\r\n      transform: \"__transformAutoActionsAfterOnentry\",\r\n      nullable: true,\r\n      init(fsm, event) {}\r\n    },\r\n\r\n    /**\r\n     * Automatic actions to take prior to calling the state's onexit function.\r\n     *\r\n     * The value passed to setAutoActionsBeforeOnexit() should like something\r\n     * akin to:\r\n     *\r\n     *     <pre class='javascript'>\r\n     *     \"autoActionsBeforeOnexit\" :\r\n     *     {\r\n     *       // The name of a function.  This would become \"setEnabled(\"\r\n     *       \"enabled\" :\r\n     *       [\r\n     *         {\r\n     *           // The parameter value, thus \"setEnabled(true);\"\r\n     *           \"parameters\" : [ true ],\r\n     *\r\n     *           // The function would be called on each object:\r\n     *           //  this.getObject(\"obj1\").setEnabled(true);\r\n     *           //  this.getObject(\"obj2\").setEnabled(true);\r\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\r\n     *\r\n     *           // And similarly for each object in each specified group.\r\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\r\n     *         }\r\n     *       ];\r\n     *     };\r\n     *     </pre>\r\n     */\r\n    autoActionsBeforeOnexit: {\r\n      transform: \"__transformAutoActionsBeforeOnexit\",\r\n      nullable: true,\r\n      init(fsm, event) {}\r\n    },\r\n\r\n    /**\r\n     * Automatic actions to take after returning from the state's onexit\r\n     * function.\r\n     *\r\n     * The value passed to setAutoActionsAfterOnexit() should like something\r\n     * akin to:\r\n     *\r\n     *     <pre class='javascript'>\r\n     *     \"autoActionsBeforeOnexit\" :\r\n     *     {\r\n     *       // The name of a function.  This would become \"setEnabled(\"\r\n     *       \"enabled\" :\r\n     *       [\r\n     *         {\r\n     *           // The parameter value, thus \"setEnabled(true);\"\r\n     *           \"parameters\" : [ true ],\r\n     *\r\n     *           // The function would be called on each object:\r\n     *           //  this.getObject(\"obj1\").setEnabled(true);\r\n     *           //  this.getObject(\"obj2\").setEnabled(true);\r\n     *           \"objects\" : [ \"obj1\", \"obj2\" ]\r\n     *\r\n     *           // And similarly for each object in each specified group.\r\n     *           \"groups\"  : [ \"group1\", \"group2\" ],\r\n     *         }\r\n     *       ];\r\n     *     };\r\n     *     </pre>\r\n     */\r\n    autoActionsAfterOnexit: {\r\n      transform: \"__transformAutoActionsAfterOnexit\",\r\n      nullable: true,\r\n      init(fsm, event) {}\r\n    },\r\n\r\n    /**\r\n     * The object representing handled and blocked events for this state.\r\n     * This is documented in the constructor, and is typically provided\r\n     * through the constructor's stateInfo object, but it is also possible\r\n     * (but highly NOT recommended) to change this dynamically.\r\n     */\r\n    events: {\r\n      transform: \"__transformEvents\",\r\n      nullable: true\r\n    }\r\n  },\r\n\r\n  members: {\r\n    /**\r\n     * Internal transform method\r\n     *\r\n     * @param value {var} Value passed to setter\r\n     * @return {var} the final value\r\n     * @throws {Error} when an invalid value is detected\r\n     */\r\n    __transformName(value) {\r\n      // Ensure that we got a valid state name\r\n      if (typeof value != \"string\" || value.length < 1) {\r\n        throw new Error(\"Invalid state name\");\r\n      }\r\n\r\n      return value;\r\n    },\r\n\r\n    /**\r\n     * Internal transform method\r\n     *\r\n     * @param value {var} Current value\r\n     * @return {var} the final value\r\n     * @throws {Error} when an invalid value is detected\r\n     */\r\n    __transformOnentry(value) {\r\n      // Validate the onentry function\r\n      switch (typeof value) {\r\n        case \"undefined\":\r\n          // None provided.  Convert it to a null function\r\n          return function (fsm, event) {};\r\n\r\n        case \"function\":\r\n          // We're cool.  No changes required\r\n          return qx.lang.Function.bind(value, this.getUserData(\"context\"));\r\n\r\n        default:\r\n          throw new Error(\"Invalid onentry type: \" + typeof value);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Internal transform method\r\n     *\r\n     * @param value {var} Current value\r\n     * @return {var} the final value\r\n     * @throws {Error} when an invalid value is detected\r\n     */\r\n    __transformOnexit(value) {\r\n      // Validate the onexit function\r\n      switch (typeof value) {\r\n        case \"undefined\":\r\n          // None provided.  Convert it to a null function\r\n          return function (fsm, event) {};\r\n\r\n        case \"function\":\r\n          // We're cool.  No changes required\r\n          return qx.lang.Function.bind(value, this.getUserData(\"context\"));\r\n\r\n        default:\r\n          throw new Error(\"Invalid onexit type: \" + typeof value);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Internal transform method\r\n     *\r\n     * @param value {var} Current value\r\n     * @return {var} the final value\r\n     * @throws {Error} when an invalid value is detected\r\n     */\r\n    __transformEvents(value) {\r\n      // Validate that events is an object\r\n      if (typeof value != \"object\") {\r\n        throw new Error(\"events must be an object\");\r\n      }\r\n\r\n      // Confirm that each property is a valid value\r\n      // The property value should be one of:\r\n      //\r\n      // (a) qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE\r\n      //\r\n      // (b) qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\r\n      //\r\n      // (c) a string containing the name of an explicit Transition to use\r\n      //\r\n      // (d) an object where each property name is the Friendly Name of an\r\n      //     object (meaning that this rule applies if both the event and\r\n      //     the event's target object's Friendly Name match), and its\r\n      //     property value is one of (a), (b) or (c), above.\r\n      for (var e in value) {\r\n        var action = value[e];\r\n\r\n        if (\r\n          typeof action == \"number\" &&\r\n          action != qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE &&\r\n          action != qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\r\n        ) {\r\n          throw new Error(\r\n            \"Invalid numeric value in events object: \" + e + \": \" + action\r\n          );\r\n        } else if (typeof action == \"object\") {\r\n          for (var action_e in action) {\r\n            if (\r\n              typeof action[action_e] == \"number\" &&\r\n              action[action_e] !=\r\n                qx.util.fsm.FiniteStateMachine.EventHandling.PREDICATE &&\r\n              action[action_e] !=\r\n                qx.util.fsm.FiniteStateMachine.EventHandling.BLOCKED\r\n            ) {\r\n              throw new Error(\r\n                \"Invalid numeric value in events object \" +\r\n                  \"(\" +\r\n                  e +\r\n                  \"): \" +\r\n                  action_e +\r\n                  \": \" +\r\n                  action[action_e]\r\n              );\r\n            } else if (\r\n              typeof action[action_e] != \"string\" &&\r\n              typeof action[action_e] != \"number\"\r\n            ) {\r\n              throw new Error(\r\n                \"Invalid value in events object \" +\r\n                  \"(\" +\r\n                  e +\r\n                  \"): \" +\r\n                  action_e +\r\n                  \": \" +\r\n                  action[action_e]\r\n              );\r\n            }\r\n          }\r\n        } else if (typeof action != \"string\" && typeof action != \"number\") {\r\n          throw new Error(\r\n            \"Invalid value in events object: \" + e + \": \" + value[e]\r\n          );\r\n        }\r\n      }\r\n\r\n      // We're cool.  No changes required.\r\n      return value;\r\n    },\r\n\r\n    /**\r\n     * Internal transform method\r\n     *\r\n     * @param value {var} Current value\r\n     * @return {var} the final value\r\n     */\r\n    __transformAutoActionsBeforeOnentry(value) {\r\n      return qx.util.fsm.State._commonTransformAutoActions(\r\n        \"autoActionsBeforeOnentry\",\r\n        value,\r\n        this.getUserData(\"context\")\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Internal transform method\r\n     *\r\n     * @param value {var} Current value\r\n     * @return {var} the final value\r\n     */\r\n    __transformAutoActionsAfterOnentry(value) {\r\n      return qx.util.fsm.State._commonTransformAutoActions(\r\n        \"autoActionsAfterOnentry\",\r\n        value,\r\n        this.getUserData(\"context\")\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Internal transform method\r\n     *\r\n     * @param value {var} Current value\r\n     * @return {var} the final value\r\n     */\r\n    __transformAutoActionsBeforeOnexit(value) {\r\n      return qx.util.fsm.State._commonTransformAutoActions(\r\n        \"autoActionsBeforeOnexit\",\r\n        value,\r\n        this.getUserData(\"context\")\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Internal transform method\r\n     *\r\n     * @param value {var} Current value\r\n     * @return {var} the final value\r\n     */\r\n    __transformAutoActionsAfterOnexit(value) {\r\n      return qx.util.fsm.State._commonTransformAutoActions(\r\n        \"autoActionsAfterOnexit\",\r\n        value,\r\n        this.getUserData(\"context\")\r\n      );\r\n    },\r\n\r\n    /**\r\n     * If given a function, bind it to a specified context.\r\n     *\r\n     * @param f {Function|var}\r\n     *   The (possibly) function to be bound to the specified context.\r\n     *\r\n     * @param context {Object}\r\n     *   The context to bind the function to.\r\n     *\r\n     * @return {Function}\r\n     *   If f was a function, the return value is f wrapped such that it will\r\n     *   be called in the specified context. Otherwise, f is returned\r\n     *   unaltered.\r\n     */\r\n    __bindIfFunction(f, context) {\r\n      // Is the first parameter a function?\r\n      if (typeof f == \"function\") {\r\n        // Yup. Bind it to the specified context.\r\n        f = qx.lang.Function.bind(f, context);\r\n      }\r\n\r\n      return f;\r\n    },\r\n\r\n    /**\r\n     * Add a transition to a state\r\n     *\r\n     *\r\n     * @param trans {qx.util.fsm.Transition}\r\n     *   An object of class qx.util.fsm.Transition representing a transition\r\n     *   which is to be a part of this state.\r\n     *\r\n     */\r\n    addTransition(trans) {\r\n      // Ensure that we got valid transition info\r\n      if (!trans instanceof qx.util.fsm.Transition) {\r\n        throw new Error(\r\n          \"Invalid transition: not an instance of \" + \"qx.util.fsm.Transition\"\r\n        );\r\n      }\r\n\r\n      // Add the new transition object to the state\r\n      this.transitions[trans.getName()] = trans;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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A,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAE;QACNN,SAAS,EAAE,WAAmB;QAC9BC,QAAQ,EAAE,IAAI;QACdE,IAAI,WAAAA,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,wBAAwB,EAAE;QACxBP,SAAS,EAAE,WAAqC;QAChDC,QAAQ,EAAE,IAAI;QACdE,IAAI,WAAAA,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,uBAAuB,EAAE;QACvBR,SAAS,EAAE,WAAoC;QAC/CC,QAAQ,EAAE,IAAI;QACdE,IAAI,WAAAA,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,uBAAuB,EAAE;QACvBT,SAAS,EAAE,WAAoC;QAC/CC,QAAQ,EAAE,IAAI;QACdE,IAAI,WAAAA,KAACC,GAAG,EAAEC,KAAK,EAAE,CAAC;MACpB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,sBAAsB,EAAE;QACtBV,SAAS,EAAE,WAAmC;QAC9CC,QAAQ,EAAE,IAAI;QAC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"
}