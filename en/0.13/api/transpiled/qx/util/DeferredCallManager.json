{
  "className": "qx.util.DeferredCallManager",
  "packageName": "qx.util",
  "name": "DeferredCallManager",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0,
        "index": 729
      },
      "end": {
        "line": 156,
        "column": 3,
        "index": 4415
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This class manages the timer used for deferred calls. All\n {@link qx.util.DeferredCall} instances use the single timer from this class.\n NOTE: Instances of this class must be disposed of after use</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": true,
  "construct": {
    "location": {
      "start": {
        "line": 38,
        "column": 2,
        "index": 1052
      },
      "end": {
        "line": 42,
        "column": 3,
        "index": 1194
      }
    },
    "jsdoc": {}
  },
  "members": {
    "__timeoutId": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1398
        },
        "end": {
          "line": 51,
          "column": 21,
          "index": 1415
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__currentQueue": {
      "location": {
        "start": {
          "line": 52,
          "column": 4,
          "index": 1421
        },
        "end": {
          "line": 52,
          "column": 24,
          "index": 1441
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__calls": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1447
        },
        "end": {
          "line": 53,
          "column": 17,
          "index": 1460
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__hasCalls": {
      "location": {
        "start": {
          "line": 54,
          "column": 4,
          "index": 1466
        },
        "end": {
          "line": 54,
          "column": 20,
          "index": 1482
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__timeoutWrapper": {
      "location": {
        "start": {
          "line": 55,
          "column": 4,
          "index": 1488
        },
        "end": {
          "line": 55,
          "column": 26,
          "index": 1510
        }
      },
      "type": "variable",
      "access": "private"
    },
    "schedule": {
      "location": {
        "start": {
          "line": 62,
          "column": 4,
          "index": 1643
        },
        "end": {
          "line": 77,
          "column": 5,
          "index": 2087
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Schedule a deferred call</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "deferredCall {qx.util.DeferredCall} The call to schedule",
            "paramName": "deferredCall",
            "description": " The call to schedule",
            "type": "qx.util.DeferredCall"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "refreshTimeout": {
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2454
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2597
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Refresh the timeout if the current one is not active anymore.\n This is a very special case which can happen in unit tests using\n fakeTimers, which overrides the window.setTimeout function (amongst others)\n after restoring the sinon sandbox the timeout must be refreshed otherwise\n DeferredCalls would never fire.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "cancel": {
      "location": {
        "start": {
          "line": 97,
          "column": 4,
          "index": 2738
        },
        "end": {
          "line": 114,
          "column": 5,
          "index": 3321
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cancel a scheduled deferred call</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "deferredCall {qx.util.DeferredCall} The call to schedule",
            "paramName": "deferredCall",
            "description": " The call to schedule",
            "type": "qx.util.DeferredCall"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__timeout": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3418
        },
        "end": {
          "line": 141,
          "column": 6,
          "index": 4063
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper function for the timer.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 150,
        "column": 2,
        "index": 4259
      },
      "end": {
        "line": 155,
        "column": 3,
        "index": 4411
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}