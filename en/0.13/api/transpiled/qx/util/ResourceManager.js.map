{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "constructor",
    "call",
    "statics",
    "__registry",
    "$$resources",
    "__urlPrefix",
    "members",
    "findHighResolutionSource",
    "lowResImgSrc",
    "factor",
    "pixelRatioCandidates",
    "parseFloat",
    "bom",
    "client",
    "Device",
    "getDevicePixelRatio",
    "toFixed",
    "i",
    "length",
    "hiResImgSrc",
    "k",
    "getHighResolutionSource",
    "source",
    "pixelRatio",
    "fileExtIndex",
    "lastIndexOf",
    "pixelRatioIdentifier",
    "candidate",
    "slice",
    "has",
    "getIds",
    "pathfragment",
    "registry",
    "util",
    "ResourceManager",
    "keys",
    "filter",
    "key",
    "indexOf",
    "id",
    "getData",
    "getImageWidth",
    "size",
    "startsWith",
    "part",
    "split",
    "parseInt",
    "entry",
    "width",
    "Math",
    "ceil",
    "getImageHeight",
    "getImageFormat",
    "getCombinedFormat",
    "clippedtype",
    "isclipped",
    "combId",
    "combImg",
    "toUri",
    "lib",
    "urlPrefix",
    "Environment",
    "get",
    "LibraryManager",
    "getInstance",
    "toDataUri",
    "resid",
    "resentry",
    "combined",
    "uri",
    "resstruct",
    "isFontUri",
    "fromFontUriToCharCode",
    "sparts",
    "fontSource",
    "resource",
    "charCode",
    "hexString",
    "match",
    "isNaN",
    "Error",
    "concat",
    "defer",
    "$$libraries",
    "resourceUri",
    "href",
    "baseElements",
    "document",
    "getElementsByTagName",
    "window",
    "location",
    "protocol",
    "host",
    "url",
    "URL",
    "substring",
    "index"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ResourceManager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Contains information about images (size, format, clipping, ...) and\r\n * other resources like CSS files, local data, ...\r\n */\r\nqx.Class.define(\"qx.util.ResourceManager\", {\r\n  extend: qx.core.Object,\r\n  type: \"singleton\",\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  construct() {\r\n    super();\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     STATICS\r\n  *****************************************************************************\r\n  */\r\n\r\n  statics: {\r\n    /** @type {Map} the shared image registry */\r\n    __registry: qx.$$resources || {},\r\n\r\n    /** @type {Map} prefix per library used in HTTPS mode for IE */\r\n    __urlPrefix: {}\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Detects whether there is a high-resolution image available.\r\n     * A high-resolution image is assumed to have the same file name as\r\n     * the parameter source, but with a pixelRatio identifier before the file\r\n     * extension, like \"@2x\".\r\n     * Medium Resolution: \"example.png\", high-resolution: \"example@2x.png\"\r\n     *\r\n     * @param lowResImgSrc {String} source of the low resolution image.\r\n     * @param factor {Number} Factor to find the right image. If not set calculated by getDevicePixelRatio()\r\n     * @return {String|Boolean} If a high-resolution image source.\r\n     */\r\n    findHighResolutionSource(lowResImgSrc, factor) {\r\n      var pixelRatioCandidates = [\"3\", \"2\", \"1.5\"];\r\n\r\n      // Calculate the optimal ratio, based on the rem scale factor of the application and the device pixel ratio.\r\n      if (!factor) {\r\n        factor = parseFloat(\r\n          qx.bom.client.Device.getDevicePixelRatio().toFixed(2)\r\n        );\r\n      }\r\n      if (factor <= 1) {\r\n        return false;\r\n      }\r\n\r\n      var i = pixelRatioCandidates.length;\r\n      while (i > 0 && factor > pixelRatioCandidates[--i]) {}\r\n\r\n      var hiResImgSrc;\r\n      var k;\r\n\r\n      // Search for best img with a higher resolution.\r\n      for (k = i; k >= 0; k--) {\r\n        hiResImgSrc = this.getHighResolutionSource(\r\n          lowResImgSrc,\r\n          pixelRatioCandidates[k]\r\n        );\r\n\r\n        if (hiResImgSrc) {\r\n          return hiResImgSrc;\r\n        }\r\n      }\r\n\r\n      // Search for best img with a lower resolution.\r\n      for (k = i + 1; k < pixelRatioCandidates.length; k++) {\r\n        hiResImgSrc = this.getHighResolutionSource(\r\n          lowResImgSrc,\r\n          pixelRatioCandidates[k]\r\n        );\r\n\r\n        if (hiResImgSrc) {\r\n          return hiResImgSrc;\r\n        }\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Returns the source name for the high-resolution image based on the passed\r\n     * parameters.\r\n     * @param source {String} the source of the medium resolution image.\r\n     * @param pixelRatio {Number} the pixel ratio of the high-resolution image.\r\n     * @return {String} the high-resolution source name or null if no source could be found.\r\n     */\r\n    getHighResolutionSource(source, pixelRatio) {\r\n      var fileExtIndex = source.lastIndexOf(\".\");\r\n      if (fileExtIndex > -1) {\r\n        var pixelRatioIdentifier = \"@\" + pixelRatio + \"x\";\r\n        var candidate =\r\n          source.slice(0, fileExtIndex) +\r\n          pixelRatioIdentifier +\r\n          source.slice(fileExtIndex);\r\n\r\n        if (this.has(candidate)) {\r\n          return candidate;\r\n        }\r\n      }\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Get all known resource IDs.\r\n     *\r\n     * @param pathfragment{String|null|undefined} an optional path fragment to check against with id.indexOf(pathfragment)\r\n     * @return {Array|null} an array containing the IDs or null if the registry is not initialized\r\n     */\r\n    getIds(pathfragment) {\r\n      var registry = this.self(arguments).__registry;\r\n      if (!registry) {\r\n        return null;\r\n      }\r\n      return Object.keys(registry).filter(function (key) {\r\n        return !pathfragment || key.indexOf(pathfragment) != -1;\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Whether the registry has information about the given resource.\r\n     *\r\n     * @param id {String} The resource to get the information for\r\n     * @return {Boolean} <code>true</code> when the resource is known.\r\n     */\r\n    has(id) {\r\n      return !!this.self(arguments).__registry[id];\r\n    },\r\n\r\n    /**\r\n     * Get information about an resource.\r\n     *\r\n     * @param id {String} The resource to get the information for\r\n     * @return {Array} Registered data or <code>null</code>\r\n     */\r\n    getData(id) {\r\n      return this.self(arguments).__registry[id] || null;\r\n    },\r\n\r\n    /**\r\n     * Returns the width of the given resource ID,\r\n     * when it is not a known image <code>0</code> is\r\n     * returned.\r\n     *\r\n     * @param id {String} Resource identifier\r\n     * @return {Integer} The image width, maybe <code>null</code> when the width is unknown\r\n     */\r\n    getImageWidth(id) {\r\n      var size;\r\n      if (id && id.startsWith(\"@\")) {\r\n        var part = id.split(\"/\");\r\n        size = parseInt(part[2], 10);\r\n        if (size) {\r\n          id = part[0] + \"/\" + part[1];\r\n        }\r\n      }\r\n      var entry = this.self(arguments).__registry[id]; // [ width, height, codepoint ]\r\n      if (size && entry) {\r\n        var width = Math.ceil((size / entry[1]) * entry[0]);\r\n        return width;\r\n      }\r\n      return entry ? entry[0] : null;\r\n    },\r\n\r\n    /**\r\n     * Returns the height of the given resource ID,\r\n     * when it is not a known image <code>0</code> is\r\n     * returned.\r\n     *\r\n     * @param id {String} Resource identifier\r\n     * @return {Integer} The image height, maybe <code>null</code> when the height is unknown\r\n     */\r\n    getImageHeight(id) {\r\n      if (id && id.startsWith(\"@\")) {\r\n        var part = id.split(\"/\");\r\n        var size = parseInt(part[2], 10);\r\n        if (size) {\r\n          return size;\r\n        }\r\n      }\r\n      var entry = this.self(arguments).__registry[id];\r\n      return entry ? entry[1] : null;\r\n    },\r\n\r\n    /**\r\n     * Returns the format of the given resource ID,\r\n     * when it is not a known image <code>null</code>\r\n     * is returned.\r\n     *\r\n     * @param id {String} Resource identifier\r\n     * @return {String} File format of the image\r\n     */\r\n    getImageFormat(id) {\r\n      if (id && id.startsWith(\"@\")) {\r\n        return \"font\";\r\n      }\r\n\r\n      var entry = this.self(arguments).__registry[id];\r\n      return entry ? entry[2] : null;\r\n    },\r\n\r\n    /**\r\n     * Returns the format of the combined image (png, gif, ...), if the given\r\n     * resource identifier is an image contained in one, or the empty string\r\n     * otherwise.\r\n     *\r\n     * @param id {String} Resource identifier\r\n     * @return {String} The type of the combined image containing id\r\n     */\r\n    getCombinedFormat(id) {\r\n      var clippedtype = \"\";\r\n      var entry = this.self(arguments).__registry[id];\r\n      var isclipped =\r\n        entry &&\r\n        entry.length > 4 &&\r\n        typeof entry[4] == \"string\" &&\r\n        this.constructor.__registry[entry[4]];\r\n      if (isclipped) {\r\n        var combId = entry[4];\r\n        var combImg = this.constructor.__registry[combId];\r\n        clippedtype = combImg[2];\r\n      }\r\n      return clippedtype;\r\n    },\r\n\r\n    /**\r\n     * Converts the given resource ID to a full qualified URI\r\n     *\r\n     * @param id {String} Resource ID\r\n     * @return {String} Resulting URI\r\n     */\r\n    toUri(id) {\r\n      if (id == null) {\r\n        return id;\r\n      }\r\n\r\n      var entry = this.self(arguments).__registry[id];\r\n      if (!entry) {\r\n        return id;\r\n      }\r\n\r\n      if (typeof entry === \"string\") {\r\n        var lib = entry;\r\n      } else {\r\n        var lib = entry[3];\r\n\r\n        // no lib reference\r\n        // may mean that the image has been registered dynamically\r\n        if (!lib) {\r\n          return id;\r\n        }\r\n      }\r\n\r\n      var urlPrefix = \"\";\r\n      if (\r\n        qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\r\n        qx.core.Environment.get(\"io.ssl\")\r\n      ) {\r\n        urlPrefix = this.self(arguments).__urlPrefix[lib];\r\n      }\r\n\r\n      return (\r\n        urlPrefix +\r\n        qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\") +\r\n        \"/\" +\r\n        id\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Construct a data: URI for an image resource.\r\n     *\r\n     * Constructs a data: URI for a given resource id, if this resource is\r\n     * contained in a base64 combined image. If this is not the case (e.g.\r\n     * because the combined image has not been loaded yet), returns the direct\r\n     * URI to the image file itself.\r\n     *\r\n     * @param resid {String} resource id of the image\r\n     * @return {String} \"data:\" or \"http:\" URI\r\n     */\r\n    toDataUri(resid) {\r\n      var resentry = this.constructor.__registry[resid];\r\n      var combined = resentry ? this.constructor.__registry[resentry[4]] : null;\r\n      var uri;\r\n      if (combined) {\r\n        var resstruct = combined[4][resid];\r\n        uri =\r\n          \"data:image/\" +\r\n          resstruct[\"type\"] +\r\n          \";\" +\r\n          resstruct[\"encoding\"] +\r\n          \",\" +\r\n          resstruct[\"data\"];\r\n      } else {\r\n        uri = this.toUri(resid);\r\n      }\r\n      return uri;\r\n    },\r\n\r\n    /**\r\n     * Checks whether a given resource id for an image is a font handle.\r\n     *\r\n     * @param resid {String} resource id of the image\r\n     * @return {Boolean} True if it's a font URI\r\n     */\r\n    isFontUri(resid) {\r\n      return resid ? resid.startsWith(\"@\") : false;\r\n    },\r\n\r\n    /**\r\n     * Returns the correct char code, ignoring scale postfix.\r\n     *\r\n     * The resource ID can be a ligature name (eg `@FontAwesome/heart` or `@MaterialIcons/home/16`),\r\n     * or a hex character code (eg `@FontAwesome/f004` or `@FontAwesome/f004/16`)\r\n     *\r\n     * @param source {String} resource id of the image\r\n     * @returns charCode of the glyph\r\n     */\r\n    fromFontUriToCharCode(source) {\r\n      var sparts = source.split(\"/\");\r\n      var fontSource = source;\r\n      if (sparts.length > 2) {\r\n        fontSource = sparts[0] + \"/\" + sparts[1];\r\n      }\r\n      var resource = this.getData(fontSource);\r\n      var charCode = null;\r\n      if (resource) {\r\n        charCode = resource[2];\r\n      } else {\r\n        let hexString = source.match(/@([^/]+)\\/(.*)$/)[2];\r\n        if (hexString) {\r\n          charCode = parseInt(hexString, 16);\r\n          if (isNaN(charCode)) {\r\n            charCode = null;\r\n          }\r\n        }\r\n      }\r\n      if (!charCode) {\r\n        throw new Error(`Cannot determine charCode from source: ${source}`);\r\n      }\r\n      return charCode;\r\n    }\r\n  },\r\n\r\n  defer(statics) {\r\n    if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\r\n      // To avoid a \"mixed content\" warning in IE when the application is\r\n      // delivered via HTTPS a prefix has to be added. This will transform the\r\n      // relative URL to an absolute one in IE.\r\n      // Though this warning is only displayed in conjunction with images which\r\n      // are referenced as a CSS \"background-image\", every resource path is\r\n      // changed when the application is served with HTTPS.\r\n      if (qx.core.Environment.get(\"io.ssl\")) {\r\n        for (var lib in qx.$$libraries) {\r\n          var resourceUri;\r\n          if (qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\")) {\r\n            resourceUri = qx.util.LibraryManager.getInstance().get(\r\n              lib,\r\n              \"resourceUri\"\r\n            );\r\n          } else {\r\n            // default for libraries without a resourceUri set\r\n            statics.__urlPrefix[lib] = \"\";\r\n            continue;\r\n          }\r\n\r\n          var href;\r\n          //first check if there is base url set\r\n          var baseElements = document.getElementsByTagName(\"base\");\r\n          if (baseElements.length > 0) {\r\n            href = baseElements[0].href;\r\n          }\r\n\r\n          // It is valid to to begin a URL with \"//\" so this case has to\r\n          // be considered. If the to resolved URL begins with \"//\" the\r\n          // manager prefixes it with \"https:\" to avoid any problems for IE\r\n          if (resourceUri.match(/^\\/\\//) != null) {\r\n            statics.__urlPrefix[lib] = window.location.protocol;\r\n          }\r\n          // If the resourceUri begins with a single slash, include the current\r\n          // hostname\r\n          else if (resourceUri.match(/^\\//) != null) {\r\n            if (href) {\r\n              statics.__urlPrefix[lib] = href;\r\n            } else {\r\n              statics.__urlPrefix[lib] =\r\n                window.location.protocol + \"//\" + window.location.host;\r\n            }\r\n          }\r\n          // If the resolved URL begins with \"./\" the final URL has to be\r\n          // put together using the document.URL property.\r\n          // IMPORTANT: this is only applicable for the source version\r\n          else if (resourceUri.match(/^\\.\\//) != null) {\r\n            var url = document.URL;\r\n            statics.__urlPrefix[lib] = url.substring(\r\n              0,\r\n              url.lastIndexOf(\"/\") + 1\r\n            );\r\n          } else if (resourceUri.match(/^http/) != null) {\r\n            // Let absolute URLs pass through\r\n            statics.__urlPrefix[lib] = \"\";\r\n          } else {\r\n            if (!href) {\r\n              // check for parameters with URLs as value\r\n              var index = window.location.href.indexOf(\"?\");\r\n\r\n              if (index == -1) {\r\n                href = window.location.href;\r\n              } else {\r\n                href = window.location.href.substring(0, index);\r\n              }\r\n            }\r\n\r\n            statics.__urlPrefix[lib] = href.substring(\r\n              0,\r\n              href.lastIndexOf(\"/\") + 1\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}