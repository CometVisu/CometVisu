{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "statics",
    "__registry",
    "$$resources",
    "__urlPrefix",
    "members",
    "findHighResolutionSource",
    "lowResImgSrc",
    "factor",
    "pixelRatioCandidates",
    "parseFloat",
    "bom",
    "client",
    "Device",
    "getDevicePixelRatio",
    "toFixed",
    "i",
    "length",
    "hiResImgSrc",
    "k",
    "getHighResolutionSource",
    "source",
    "pixelRatio",
    "fileExtIndex",
    "lastIndexOf",
    "pixelRatioIdentifier",
    "candidate",
    "slice",
    "has",
    "getIds",
    "pathfragment",
    "registry",
    "keys",
    "filter",
    "key",
    "indexOf",
    "id",
    "getData",
    "getImageWidth",
    "size",
    "startsWith",
    "part",
    "split",
    "parseInt",
    "entry",
    "width",
    "Math",
    "ceil",
    "getImageHeight",
    "getImageFormat",
    "getCombinedFormat",
    "clippedtype",
    "isclipped",
    "constructor",
    "combId",
    "combImg",
    "toUri",
    "lib",
    "urlPrefix",
    "Environment",
    "get",
    "util",
    "LibraryManager",
    "getInstance",
    "toDataUri",
    "resid",
    "resentry",
    "combined",
    "uri",
    "resstruct",
    "isFontUri",
    "fromFontUriToCharCode",
    "sparts",
    "fontSource",
    "resource",
    "charCode",
    "hexString",
    "match",
    "isNaN",
    "Error",
    "defer",
    "$$libraries",
    "resourceUri",
    "href",
    "baseElements",
    "document",
    "getElementsByTagName",
    "window",
    "location",
    "protocol",
    "host",
    "url",
    "URL",
    "substring",
    "index",
    "ResourceManager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ResourceManager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Contains information about images (size, format, clipping, ...) and\n * other resources like CSS files, local data, ...\n */\nqx.Class.define(\"qx.util.ResourceManager\", {\n  extend: qx.core.Object,\n  type: \"singleton\",\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Map} the shared image registry */\n    __registry: qx.$$resources || {},\n\n    /** @type {Map} prefix per library used in HTTPS mode for IE */\n    __urlPrefix: {}\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Detects whether there is a high-resolution image available.\n     * A high-resolution image is assumed to have the same file name as\n     * the parameter source, but with a pixelRatio identifier before the file\n     * extension, like \"@2x\".\n     * Medium Resolution: \"example.png\", high-resolution: \"example@2x.png\"\n     *\n     * @param lowResImgSrc {String} source of the low resolution image.\n     * @param factor {Number} Factor to find the right image. If not set calculated by getDevicePixelRatio()\n     * @return {String|Boolean} If a high-resolution image source.\n     */\n    findHighResolutionSource(lowResImgSrc, factor) {\n      var pixelRatioCandidates = [\"3\", \"2\", \"1.5\"];\n\n      // Calculate the optimal ratio, based on the rem scale factor of the application and the device pixel ratio.\n      if (!factor) {\n        factor = parseFloat(\n          qx.bom.client.Device.getDevicePixelRatio().toFixed(2)\n        );\n      }\n      if (factor <= 1) {\n        return false;\n      }\n\n      var i = pixelRatioCandidates.length;\n      while (i > 0 && factor > pixelRatioCandidates[--i]) {}\n\n      var hiResImgSrc;\n      var k;\n\n      // Search for best img with a higher resolution.\n      for (k = i; k >= 0; k--) {\n        hiResImgSrc = this.getHighResolutionSource(\n          lowResImgSrc,\n          pixelRatioCandidates[k]\n        );\n\n        if (hiResImgSrc) {\n          return hiResImgSrc;\n        }\n      }\n\n      // Search for best img with a lower resolution.\n      for (k = i + 1; k < pixelRatioCandidates.length; k++) {\n        hiResImgSrc = this.getHighResolutionSource(\n          lowResImgSrc,\n          pixelRatioCandidates[k]\n        );\n\n        if (hiResImgSrc) {\n          return hiResImgSrc;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns the source name for the high-resolution image based on the passed\n     * parameters.\n     * @param source {String} the source of the medium resolution image.\n     * @param pixelRatio {Number} the pixel ratio of the high-resolution image.\n     * @return {String} the high-resolution source name or null if no source could be found.\n     */\n    getHighResolutionSource(source, pixelRatio) {\n      var fileExtIndex = source.lastIndexOf(\".\");\n      if (fileExtIndex > -1) {\n        var pixelRatioIdentifier = \"@\" + pixelRatio + \"x\";\n        var candidate =\n          source.slice(0, fileExtIndex) +\n          pixelRatioIdentifier +\n          source.slice(fileExtIndex);\n\n        if (this.has(candidate)) {\n          return candidate;\n        }\n      }\n      return null;\n    },\n\n    /**\n     * Get all known resource IDs.\n     *\n     * @param pathfragment{String|null|undefined} an optional path fragment to check against with id.indexOf(pathfragment)\n     * @return {Array|null} an array containing the IDs or null if the registry is not initialized\n     */\n    getIds(pathfragment) {\n      var registry = this.self(arguments).__registry;\n      if (!registry) {\n        return null;\n      }\n      return Object.keys(registry).filter(function (key) {\n        return !pathfragment || key.indexOf(pathfragment) != -1;\n      });\n    },\n\n    /**\n     * Whether the registry has information about the given resource.\n     *\n     * @param id {String} The resource to get the information for\n     * @return {Boolean} <code>true</code> when the resource is known.\n     */\n    has(id) {\n      return !!this.self(arguments).__registry[id];\n    },\n\n    /**\n     * Get information about an resource.\n     *\n     * @param id {String} The resource to get the information for\n     * @return {Array} Registered data or <code>null</code>\n     */\n    getData(id) {\n      return this.self(arguments).__registry[id] || null;\n    },\n\n    /**\n     * Returns the width of the given resource ID,\n     * when it is not a known image <code>0</code> is\n     * returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {Integer} The image width, maybe <code>null</code> when the width is unknown\n     */\n    getImageWidth(id) {\n      var size;\n      if (id && id.startsWith(\"@\")) {\n        var part = id.split(\"/\");\n        size = parseInt(part[2], 10);\n        if (size) {\n          id = part[0] + \"/\" + part[1];\n        }\n      }\n      var entry = this.self(arguments).__registry[id]; // [ width, height, codepoint ]\n      if (size && entry) {\n        var width = Math.ceil((size / entry[1]) * entry[0]);\n        return width;\n      }\n      return entry ? entry[0] : null;\n    },\n\n    /**\n     * Returns the height of the given resource ID,\n     * when it is not a known image <code>0</code> is\n     * returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {Integer} The image height, maybe <code>null</code> when the height is unknown\n     */\n    getImageHeight(id) {\n      if (id && id.startsWith(\"@\")) {\n        var part = id.split(\"/\");\n        var size = parseInt(part[2], 10);\n        if (size) {\n          return size;\n        }\n      }\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[1] : null;\n    },\n\n    /**\n     * Returns the format of the given resource ID,\n     * when it is not a known image <code>null</code>\n     * is returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {String} File format of the image\n     */\n    getImageFormat(id) {\n      if (id && id.startsWith(\"@\")) {\n        return \"font\";\n      }\n\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[2] : null;\n    },\n\n    /**\n     * Returns the format of the combined image (png, gif, ...), if the given\n     * resource identifier is an image contained in one, or the empty string\n     * otherwise.\n     *\n     * @param id {String} Resource identifier\n     * @return {String} The type of the combined image containing id\n     */\n    getCombinedFormat(id) {\n      var clippedtype = \"\";\n      var entry = this.self(arguments).__registry[id];\n      var isclipped =\n        entry &&\n        entry.length > 4 &&\n        typeof entry[4] == \"string\" &&\n        this.constructor.__registry[entry[4]];\n      if (isclipped) {\n        var combId = entry[4];\n        var combImg = this.constructor.__registry[combId];\n        clippedtype = combImg[2];\n      }\n      return clippedtype;\n    },\n\n    /**\n     * Converts the given resource ID to a full qualified URI\n     *\n     * @param id {String} Resource ID\n     * @return {String} Resulting URI\n     */\n    toUri(id) {\n      if (id == null) {\n        return id;\n      }\n\n      var entry = this.self(arguments).__registry[id];\n      if (!entry) {\n        return id;\n      }\n\n      if (typeof entry === \"string\") {\n        var lib = entry;\n      } else {\n        var lib = entry[3];\n\n        // no lib reference\n        // may mean that the image has been registered dynamically\n        if (!lib) {\n          return id;\n        }\n      }\n\n      var urlPrefix = \"\";\n      if (\n        qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n        qx.core.Environment.get(\"io.ssl\")\n      ) {\n        urlPrefix = this.self(arguments).__urlPrefix[lib];\n      }\n\n      return (\n        urlPrefix +\n        qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\") +\n        \"/\" +\n        id\n      );\n    },\n\n    /**\n     * Construct a data: URI for an image resource.\n     *\n     * Constructs a data: URI for a given resource id, if this resource is\n     * contained in a base64 combined image. If this is not the case (e.g.\n     * because the combined image has not been loaded yet), returns the direct\n     * URI to the image file itself.\n     *\n     * @param resid {String} resource id of the image\n     * @return {String} \"data:\" or \"http:\" URI\n     */\n    toDataUri(resid) {\n      var resentry = this.constructor.__registry[resid];\n      var combined = resentry ? this.constructor.__registry[resentry[4]] : null;\n      var uri;\n      if (combined) {\n        var resstruct = combined[4][resid];\n        uri =\n          \"data:image/\" +\n          resstruct[\"type\"] +\n          \";\" +\n          resstruct[\"encoding\"] +\n          \",\" +\n          resstruct[\"data\"];\n      } else {\n        uri = this.toUri(resid);\n      }\n      return uri;\n    },\n\n    /**\n     * Checks whether a given resource id for an image is a font handle.\n     *\n     * @param resid {String} resource id of the image\n     * @return {Boolean} True if it's a font URI\n     */\n    isFontUri(resid) {\n      return resid ? resid.startsWith(\"@\") : false;\n    },\n\n    /**\n     * Returns the correct char code, ignoring scale postfix.\n     *\n     * The resource ID can be a ligature name (eg `@FontAwesome/heart` or `@MaterialIcons/home/16`),\n     * or a hex character code (eg `@FontAwesome/f004` or `@FontAwesome/f004/16`)\n     *\n     * @param source {String} resource id of the image\n     * @returns charCode of the glyph\n     */\n    fromFontUriToCharCode(source) {\n      var sparts = source.split(\"/\");\n      var fontSource = source;\n      if (sparts.length > 2) {\n        fontSource = sparts[0] + \"/\" + sparts[1];\n      }\n      var resource = this.getData(fontSource);\n      var charCode = null;\n      if (resource) {\n        charCode = resource[2];\n      } else {\n        let hexString = source.match(/@([^/]+)\\/(.*)$/)[2];\n        if (hexString) {\n          charCode = parseInt(hexString, 16);\n          if (isNaN(charCode)) {\n            charCode = null;\n          }\n        }\n      }\n      if (!charCode) {\n        throw new Error(`Cannot determine charCode from source: ${source}`);\n      }\n      return charCode;\n    }\n  },\n\n  defer(statics) {\n    if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n      // To avoid a \"mixed content\" warning in IE when the application is\n      // delivered via HTTPS a prefix has to be added. This will transform the\n      // relative URL to an absolute one in IE.\n      // Though this warning is only displayed in conjunction with images which\n      // are referenced as a CSS \"background-image\", every resource path is\n      // changed when the application is served with HTTPS.\n      if (qx.core.Environment.get(\"io.ssl\")) {\n        for (var lib in qx.$$libraries) {\n          var resourceUri;\n          if (qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\")) {\n            resourceUri = qx.util.LibraryManager.getInstance().get(\n              lib,\n              \"resourceUri\"\n            );\n          } else {\n            // default for libraries without a resourceUri set\n            statics.__urlPrefix[lib] = \"\";\n            continue;\n          }\n\n          var href;\n          //first check if there is base url set\n          var baseElements = document.getElementsByTagName(\"base\");\n          if (baseElements.length > 0) {\n            href = baseElements[0].href;\n          }\n\n          // It is valid to to begin a URL with \"//\" so this case has to\n          // be considered. If the to resolved URL begins with \"//\" the\n          // manager prefixes it with \"https:\" to avoid any problems for IE\n          if (resourceUri.match(/^\\/\\//) != null) {\n            statics.__urlPrefix[lib] = window.location.protocol;\n          }\n          // If the resourceUri begins with a single slash, include the current\n          // hostname\n          else if (resourceUri.match(/^\\//) != null) {\n            if (href) {\n              statics.__urlPrefix[lib] = href;\n            } else {\n              statics.__urlPrefix[lib] =\n                window.location.protocol + \"//\" + window.location.host;\n            }\n          }\n          // If the resolved URL begins with \"./\" the final URL has to be\n          // put together using the document.URL property.\n          // IMPORTANT: this is only applicable for the source version\n          else if (resourceUri.match(/^\\.\\//) != null) {\n            var url = document.URL;\n            statics.__urlPrefix[lib] = url.substring(\n              0,\n              url.lastIndexOf(\"/\") + 1\n            );\n          } else if (resourceUri.match(/^http/) != null) {\n            // Let absolute URLs pass through\n            statics.__urlPrefix[lib] = \"\";\n          } else {\n            if (!href) {\n              // check for parameters with URLs as value\n              var index = window.location.href.indexOf(\"?\");\n\n              if (index == -1) {\n                href = window.location.href;\n              } else {\n                href = window.location.href.substring(0, index);\n              }\n            }\n\n            statics.__urlPrefix[lib] = href.substring(\n              0,\n              href.lastIndexOf(\"/\") + 1\n            );\n          }\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}