{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "util",
    "format",
    "IFormat",
    "IDisposable",
    "construct",
    "locale",
    "constructor",
    "call",
    "arguments",
    "length",
    "lang",
    "Type",
    "isString",
    "setLocale",
    "Error",
    "Manager",
    "getInstance",
    "getLocale",
    "bind",
    "properties",
    "minimumIntegerDigits",
    "check",
    "init",
    "maximumIntegerDigits",
    "nullable",
    "minimumFractionDigits",
    "maximumFractionDigits",
    "groupingUsed",
    "prefix",
    "event",
    "postfix",
    "members",
    "num",
    "isNaN",
    "Infinity",
    "negative",
    "getMaximumFractionDigits",
    "mover",
    "Math",
    "pow",
    "round",
    "integerDigits",
    "String",
    "floor",
    "numStr",
    "integerStr",
    "substring",
    "getMinimumIntegerDigits",
    "getMaximumIntegerDigits",
    "fractionStr",
    "getMinimumFractionDigits",
    "getGroupingUsed",
    "origIntegerStr",
    "groupPos",
    "Number",
    "getGroupSeparator",
    "getPrefix",
    "getPostfix",
    "str",
    "getDecimalSeparator",
    "parse",
    "groupSepEsc",
    "escapeRegexpChars",
    "decimalSepEsc",
    "regex",
    "RegExp",
    "hit",
    "exec",
    "replace",
    "asStr",
    "parseFloat",
    "destruct",
    "removeRelatedBindings",
    "NumberFormat"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/format/NumberFormat.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A formatter and parser for numbers.\r\n *\r\n * NOTE: Instances of this class must be disposed of after use\r\n *\r\n */\r\nqx.Class.define(\"qx.util.format.NumberFormat\", {\r\n  extend: qx.core.Object,\r\n  implement: [qx.util.format.IFormat, qx.core.IDisposable],\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param locale {String} optional locale to be used\r\n   * @throws {Error} If the argument is not a string.\r\n   */\r\n  construct(locale) {\r\n    super();\r\n\r\n    if (arguments.length > 0) {\r\n      if (arguments.length === 1) {\r\n        if (qx.lang.Type.isString(locale)) {\r\n          this.setLocale(locale);\r\n        } else {\r\n          throw new Error(\"Wrong argument type. String is expected.\");\r\n        }\r\n      } else {\r\n        throw new Error(\"Wrong number of arguments.\");\r\n      }\r\n    }\r\n\r\n    if (!locale) {\r\n      this.setLocale(qx.locale.Manager.getInstance().getLocale());\r\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n        qx.locale.Manager.getInstance().bind(\"locale\", this, \"locale\");\r\n      }\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * The minimum number of integer digits (digits before the decimal separator).\r\n     * Missing digits will be filled up with 0 (\"19\" -> \"0019\").\r\n     */\r\n    minimumIntegerDigits: {\r\n      check: \"Number\",\r\n      init: 0\r\n    },\r\n\r\n    /**\r\n     * The maximum number of integer digits (superfluous digits will be cut off\r\n     * (\"1923\" -> \"23\").\r\n     */\r\n    maximumIntegerDigits: {\r\n      check: \"Number\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The minimum number of fraction digits (digits after the decimal separator).\r\n     * Missing digits will be filled up with 0 (\"1.5\" -> \"1.500\")\r\n     */\r\n    minimumFractionDigits: {\r\n      check: \"Number\",\r\n      init: 0\r\n    },\r\n\r\n    /**\r\n     * The maximum number of fraction digits (digits after the decimal separator).\r\n     * Superfluous digits will cause rounding (\"1.8277\" -> \"1.83\")\r\n     */\r\n    maximumFractionDigits: {\r\n      check: \"Number\",\r\n      nullable: true\r\n    },\r\n\r\n    /** Whether thousand groupings should be used {e.g. \"1,432,234.65\"}. */\r\n    groupingUsed: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    },\r\n\r\n    /** The prefix to put before the number {\"EUR \" -> \"EUR 12.31\"}. */\r\n    prefix: {\r\n      check: \"String\",\r\n      init: \"\",\r\n      event: \"changeNumberFormat\"\r\n    },\r\n\r\n    /** Sets the postfix to put after the number {\" %\" -> \"56.13 %\"}. */\r\n    postfix: {\r\n      check: \"String\",\r\n      init: \"\",\r\n      event: \"changeNumberFormat\"\r\n    },\r\n\r\n    /** Locale used */\r\n    locale: {\r\n      check: \"String\",\r\n      init: null,\r\n      event: \"changeLocale\"\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Formats a number.\r\n     *\r\n     * @param num {Number} the number to format.\r\n     * @return {String} the formatted number as a string.\r\n     */\r\n    format(num) {\r\n      // handle special cases\r\n      if (isNaN(num)) {\r\n        return \"NaN\";\r\n      }\r\n\r\n      switch (num) {\r\n        case Infinity:\r\n          return \"Infinity\";\r\n\r\n        case -Infinity:\r\n          return \"-Infinity\";\r\n      }\r\n\r\n      var negative = num < 0;\r\n\r\n      if (negative) {\r\n        num = -num;\r\n      }\r\n\r\n      if (this.getMaximumFractionDigits() != null) {\r\n        // Do the rounding\r\n        var mover = Math.pow(10, this.getMaximumFractionDigits());\r\n        num = Math.round(num * mover) / mover;\r\n      }\r\n\r\n      var integerDigits = String(Math.floor(num)).length;\r\n\r\n      var numStr = \"\" + num;\r\n\r\n      // Prepare the integer part\r\n      var integerStr = numStr.substring(0, integerDigits);\r\n\r\n      while (integerStr.length < this.getMinimumIntegerDigits()) {\r\n        integerStr = \"0\" + integerStr;\r\n      }\r\n\r\n      if (\r\n        this.getMaximumIntegerDigits() != null &&\r\n        integerStr.length > this.getMaximumIntegerDigits()\r\n      ) {\r\n        // NOTE: We cut off even though we did rounding before, because there\r\n        //     may be rounding errors (\"12.24000000000001\" -> \"12.24\")\r\n        integerStr = integerStr.substring(\r\n          integerStr.length - this.getMaximumIntegerDigits()\r\n        );\r\n      }\r\n\r\n      // Prepare the fraction part\r\n      var fractionStr = numStr.substring(integerDigits + 1);\r\n\r\n      while (fractionStr.length < this.getMinimumFractionDigits()) {\r\n        fractionStr += \"0\";\r\n      }\r\n\r\n      if (\r\n        this.getMaximumFractionDigits() != null &&\r\n        fractionStr.length > this.getMaximumFractionDigits()\r\n      ) {\r\n        // We have already rounded -> Just cut off the rest\r\n        fractionStr = fractionStr.substring(0, this.getMaximumFractionDigits());\r\n      }\r\n\r\n      // Add the thousand groupings\r\n      if (this.getGroupingUsed()) {\r\n        var origIntegerStr = integerStr;\r\n        integerStr = \"\";\r\n        var groupPos;\r\n\r\n        for (groupPos = origIntegerStr.length; groupPos > 3; groupPos -= 3) {\r\n          integerStr =\r\n            \"\" +\r\n            qx.locale.Number.getGroupSeparator(this.getLocale()) +\r\n            origIntegerStr.substring(groupPos - 3, groupPos) +\r\n            integerStr;\r\n        }\r\n\r\n        integerStr = origIntegerStr.substring(0, groupPos) + integerStr;\r\n      }\r\n\r\n      // Workaround: prefix and postfix are null even their defaultValue is \"\" and\r\n      //             allowNull is set to false?!?\r\n      var prefix = this.getPrefix() ? this.getPrefix() : \"\";\r\n      var postfix = this.getPostfix() ? this.getPostfix() : \"\";\r\n\r\n      // Assemble the number\r\n      var str = prefix + (negative ? \"-\" : \"\") + integerStr;\r\n\r\n      if (fractionStr.length > 0) {\r\n        str +=\r\n          \"\" +\r\n          qx.locale.Number.getDecimalSeparator(this.getLocale()) +\r\n          fractionStr;\r\n      }\r\n\r\n      str += postfix;\r\n\r\n      return str;\r\n    },\r\n\r\n    /**\r\n     * Parses a number.\r\n     *\r\n     * @param str {String} the string to parse.\r\n     * @return {Double} the number.\r\n     * @throws {Error} If the number string does not match the number format.\r\n     */\r\n    parse(str) {\r\n      // use the escaped separators for regexp\r\n      var groupSepEsc = qx.lang.String.escapeRegexpChars(\r\n        qx.locale.Number.getGroupSeparator(this.getLocale()) + \"\"\r\n      );\r\n\r\n      var decimalSepEsc = qx.lang.String.escapeRegexpChars(\r\n        qx.locale.Number.getDecimalSeparator(this.getLocale()) + \"\"\r\n      );\r\n\r\n      var regex = new RegExp(\r\n        \"^(\" +\r\n          qx.lang.String.escapeRegexpChars(this.getPrefix()) +\r\n          \")?([-+]){0,1}\" +\r\n          \"([0-9]{1,3}(?:\" +\r\n          groupSepEsc +\r\n          \"{0,1}[0-9]{3}){0,}){0,1}\" +\r\n          \"(\" +\r\n          decimalSepEsc +\r\n          \"\\\\d+){0,1}(\" +\r\n          qx.lang.String.escapeRegexpChars(this.getPostfix()) +\r\n          \")?$\"\r\n      );\r\n\r\n      var hit = regex.exec(str);\r\n\r\n      if (hit == null) {\r\n        throw new Error(\r\n          \"Number string '\" + str + \"' does not match the number format\"\r\n        );\r\n      }\r\n\r\n      // hit[1] = potential prefix\r\n      var negative = hit[2] == \"-\";\r\n      var integerStr = hit[3] || \"0\";\r\n      var fractionStr = hit[4];\r\n      // hit[5] = potential postfix\r\n\r\n      // Remove the thousand groupings\r\n      integerStr = integerStr.replace(new RegExp(groupSepEsc, \"g\"), \"\");\r\n\r\n      var asStr = (negative ? \"-\" : \"\") + integerStr;\r\n\r\n      if (fractionStr != null && fractionStr.length != 0) {\r\n        // Remove the leading decimal separator from the fractions string\r\n        fractionStr = fractionStr.replace(new RegExp(decimalSepEsc), \"\");\r\n        asStr += \".\" + fractionStr;\r\n      }\r\n\r\n      return parseFloat(asStr);\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n      qx.locale.Manager.getInstance().removeRelatedBindings(this);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}