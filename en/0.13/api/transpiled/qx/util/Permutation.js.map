{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "permute",
    "options",
    "callback",
    "context",
    "keys",
    "Object",
    "map",
    "indices",
    "i",
    "length",
    "key",
    "_perm",
    "index",
    "ignore",
    "values",
    "call",
    "window",
    "util",
    "Permutation"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/Permutation.js"
  ],
  "sourcesContent": [
    "/**\n * Generate permutations of a map.\n */\nqx.Class.define(\"qx.util.Permutation\", {\n  statics: {\n    /**\n     * The first parameter is a map with array values. This function computes\n     * all combinations of the array values and call the callback for each\n     * combination.\n     *\n     * e.g. a value of\n     * <pre class=\"javascript\">\n     *   {\n     *     a: [1, 2],\n     *     b: [\"a\", \"b\"]\n     *   }\n     * </pre>\n     * would call the callback for each of these maps:\n     * <pre class=\"javascript\">\n     *  { a: 1, b: \"a\" },\n     *  { a: 1, b: \"b\" },\n     *  { a: 2, b: \"a\" },\n     *  { a: 2, b: \"b\" }\n     * </pre>\n     *\n     * @param options {Map} map with array values to generate the permutations of\n     * @param callback {Function} This callback is called for each permuted map\n     * @param context {Object} The callback's <code>this</code> context.\n     */\n    permute(options, callback, context) {\n      var keys = Object.keys(options);\n\n      // init\n      var map = {};\n      var indices = [];\n      for (var i = 0; i < keys.length; i++) {\n        indices[i] = 0;\n        var key = keys[i];\n        map[key] = options[key][0];\n      }\n\n      var _perm = function (index, ignore) {\n        if (index >= keys.length) {\n          return;\n        }\n\n        var key = keys[index];\n        var values = options[key];\n\n        for (var i = 0; i < values.length; i++) {\n          if (ignore !== i) {\n            indices[index] = i;\n            map[key] = values[i];\n            callback.call(context || window, map);\n          }\n          _perm(index + 1, indices[index + 1]);\n        }\n      };\n\n      _perm(0, -1);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,qBAAqB,EAAE;IACrCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAACC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAE;QAClC,IAAIC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,OAAO,CAAC;;QAE/B;QACA,IAAIK,GAAG,GAAG,CAAC,CAAC;QACZ,IAAIC,OAAO,GAAG,EAAE;QAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;UACpCD,OAAO,CAACC,CAAC,CAAC,GAAG,CAAC;UACd,IAAIE,GAAG,GAAGN,IAAI,CAACI,CAAC,CAAC;UACjBF,GAAG,CAACI,GAAG,CAAC,GAAGT,OAAO,CAACS,GAAG,CAAC,CAAC,CAAC,CAAC;QAC5B;QAEA,IAAIC,KAAK,GAAG,SAARA,KAAKA,CAAaC,KAAK,EAAEC,MAAM,EAAE;UACnC,IAAID,KAAK,IAAIR,IAAI,CAACK,MAAM,EAAE;YACxB;UACF;UAEA,IAAIC,GAAG,GAAGN,IAAI,CAACQ,KAAK,CAAC;UACrB,IAAIE,MAAM,GAAGb,OAAO,CAACS,GAAG,CAAC;UAEzB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,MAAM,CAACL,MAAM,EAAED,CAAC,EAAE,EAAE;YACtC,IAAIK,MAAM,KAAKL,CAAC,EAAE;cAChBD,OAAO,CAACK,KAAK,CAAC,GAAGJ,CAAC;cAClBF,GAAG,CAACI,GAAG,CAAC,GAAGI,MAAM,CAACN,CAAC,CAAC;cACpBN,QAAQ,CAACa,IAAI,CAACZ,OAAO,IAAIa,MAAM,EAAEV,GAAG,CAAC;YACvC;YACAK,KAAK,CAACC,KAAK,GAAG,CAAC,EAAEL,OAAO,CAACK,KAAK,GAAG,CAAC,CAAC,CAAC;UACtC;QACF,CAAC;QAEDD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACd;IACF;EACF,CAAC,CAAC;EA9DFlB,EAAE,CAACwB,IAAI,CAACC,WAAW,CAACtB,aAAa,GAAGA,aAAa;AAAC"
}