{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "size",
    "constructor",
    "call",
    "__pool",
    "setSize",
    "properties",
    "check",
    "init",
    "Infinity",
    "members",
    "getObject",
    "clazz",
    "$$disposed",
    "Error",
    "obj",
    "pool",
    "classname",
    "pop",
    "$$pooled",
    "poolObject",
    "length",
    "getSize",
    "destroy",
    "dispose",
    "push",
    "destruct",
    "list",
    "i",
    "l",
    "util",
    "ObjectPool"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ObjectPool.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     Simon Bull\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Simon Bull (sbull)\r\n     * Sebastian Werner (wpbasti)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This class manages pooled Object instances.\r\n *\r\n * It exists mainly to minimize the amount of browser memory usage by reusing\r\n * window instances after they have been closed.  However, it could equally be\r\n * used to pool instances of any type of Object (expect singletons).\r\n *\r\n * It is the client's responsibility to ensure that pooled objects are not\r\n * referenced or used from anywhere else in the application.\r\n */\r\nqx.Class.define(\"qx.util.ObjectPool\", {\r\n  extend: qx.core.Object,\r\n  implement: [qx.core.IDisposable],\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param size {Integer} Size of each class pool\r\n   */\r\n  construct(size) {\r\n    super();\r\n\r\n    this.__pool = {};\r\n\r\n    if (size != null) {\r\n      this.setSize(size);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PROPERTIES\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Number of objects of each class, which are pooled.\r\n     *\r\n     * A size of \"null\" represents an unlimited pool.\r\n     */\r\n    size: {\r\n      check: \"Integer\",\r\n      init: Infinity\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /** @type {Map} Stores arrays of instances for all managed classes */\r\n    __pool: null,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      IMPL\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * This method finds and returns an instance of a requested type in the pool,\r\n     * if there is one.  Note that the pool determines which instance (if any) to\r\n     * return to the client.  The client cannot get a specific instance from the\r\n     * pool.\r\n     *\r\n     * @param clazz {Class} A reference to a class from which an instance should be created.\r\n     * @return {Object} An instance of the requested type. If non existed in the pool a new\r\n     *   one is transparently created and returned.\r\n     */\r\n    getObject(clazz) {\r\n      if (this.$$disposed) {\r\n        return new clazz();\r\n      }\r\n\r\n      if (!clazz) {\r\n        throw new Error(\"Class needs to be defined!\");\r\n      }\r\n\r\n      var obj = null;\r\n      var pool = this.__pool[clazz.classname];\r\n\r\n      if (pool) {\r\n        obj = pool.pop();\r\n      }\r\n\r\n      if (obj) {\r\n        obj.$$pooled = false;\r\n      } else {\r\n        obj = new clazz();\r\n      }\r\n\r\n      return obj;\r\n    },\r\n\r\n    /**\r\n     * This method places an Object in a pool of Objects of its type. Note that\r\n     * once an instance has been pooled, there is no means to get that exact\r\n     * instance back. The instance may be discarded for garbage collection if\r\n     * the pool of its type is already full.\r\n     *\r\n     * It is assumed that no other references exist to this Object, and that it will\r\n     * not be used at all while it is pooled.\r\n     *\r\n     * @param obj {Object} An Object instance to pool.\r\n     */\r\n    poolObject(obj) {\r\n      // Dispose check\r\n      if (!this.__pool) {\r\n        return;\r\n      }\r\n\r\n      var classname = obj.classname;\r\n      var pool = this.__pool[classname];\r\n\r\n      if (obj.$$pooled) {\r\n        throw new Error(\"Object is already pooled: \" + obj);\r\n      }\r\n\r\n      if (!pool) {\r\n        this.__pool[classname] = pool = [];\r\n      }\r\n\r\n      // Check to see whether the pool for this type is already full\r\n      if (pool.length > this.getSize()) {\r\n        // Use enhanced destroy() method instead of simple dispose\r\n        // when available to work together with queues etc.\r\n        if (obj.destroy) {\r\n          obj.destroy();\r\n        } else {\r\n          obj.dispose();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      obj.$$pooled = true;\r\n      pool.push(obj);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    var pool = this.__pool;\r\n    var classname, list, i, l;\r\n\r\n    for (classname in pool) {\r\n      list = pool[classname];\r\n      for (i = 0, l = list.length; i < l; i++) {\r\n        list[i].dispose();\r\n      }\r\n    }\r\n\r\n    delete this.__pool;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}