{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "size",
    "__pool",
    "setSize",
    "properties",
    "check",
    "init",
    "Infinity",
    "members",
    "getObject",
    "clazz",
    "$$disposed",
    "Error",
    "obj",
    "pool",
    "classname",
    "pop",
    "$$pooled",
    "poolObject",
    "length",
    "getSize",
    "destroy",
    "dispose",
    "push",
    "destruct",
    "list",
    "i",
    "l",
    "util",
    "ObjectPool"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ObjectPool.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     Simon Bull\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Simon Bull (sbull)\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * This class manages pooled Object instances.\n *\n * It exists mainly to minimize the amount of browser memory usage by reusing\n * window instances after they have been closed.  However, it could equally be\n * used to pool instances of any type of Object (expect singletons).\n *\n * It is the client's responsibility to ensure that pooled objects are not\n * referenced or used from anywhere else in the application.\n */\nqx.Class.define(\"qx.util.ObjectPool\", {\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param size {Integer} Size of each class pool\n   */\n  construct(size) {\n    super();\n\n    this.__pool = {};\n\n    if (size != null) {\n      this.setSize(size);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Number of objects of each class, which are pooled.\n     *\n     * A size of \"null\" represents an unlimited pool.\n     */\n    size: {\n      check: \"Integer\",\n      init: Infinity\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** @type {Map} Stores arrays of instances for all managed classes */\n    __pool: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      IMPL\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method finds and returns an instance of a requested type in the pool,\n     * if there is one.  Note that the pool determines which instance (if any) to\n     * return to the client.  The client cannot get a specific instance from the\n     * pool.\n     *\n     * @param clazz {Class} A reference to a class from which an instance should be created.\n     * @return {Object} An instance of the requested type. If non existed in the pool a new\n     *   one is transparently created and returned.\n     */\n    getObject(clazz) {\n      if (this.$$disposed) {\n        return new clazz();\n      }\n\n      if (!clazz) {\n        throw new Error(\"Class needs to be defined!\");\n      }\n\n      var obj = null;\n      var pool = this.__pool[clazz.classname];\n\n      if (pool) {\n        obj = pool.pop();\n      }\n\n      if (obj) {\n        obj.$$pooled = false;\n      } else {\n        obj = new clazz();\n      }\n\n      return obj;\n    },\n\n    /**\n     * This method places an Object in a pool of Objects of its type. Note that\n     * once an instance has been pooled, there is no means to get that exact\n     * instance back. The instance may be discarded for garbage collection if\n     * the pool of its type is already full.\n     *\n     * It is assumed that no other references exist to this Object, and that it will\n     * not be used at all while it is pooled.\n     *\n     * @param obj {Object} An Object instance to pool.\n     */\n    poolObject(obj) {\n      // Dispose check\n      if (!this.__pool) {\n        return;\n      }\n\n      var classname = obj.classname;\n      var pool = this.__pool[classname];\n\n      if (obj.$$pooled) {\n        throw new Error(\"Object is already pooled: \" + obj);\n      }\n\n      if (!pool) {\n        this.__pool[classname] = pool = [];\n      }\n\n      // Check to see whether the pool for this type is already full\n      if (pool.length > this.getSize()) {\n        // Use enhanced destroy() method instead of simple dispose\n        // when available to work together with queues etc.\n        if (obj.destroy) {\n          obj.destroy();\n        } else {\n          obj.dispose();\n        }\n\n        return;\n      }\n\n      obj.$$pooled = true;\n      pool.push(obj);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    var pool = this.__pool;\n    var classname, list, i, l;\n\n    for (classname in pool) {\n      list = pool[classname];\n      for (i = 0, l = list.length; i < l; i++) {\n        list[i].dispose();\n      }\n    }\n\n    delete this.__pool;\n  }\n});\n"
  ],
  "mappings": "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"
}