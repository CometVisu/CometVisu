{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "parser",
    "undefined",
    "setParser",
    "statics",
    "PARSER",
    "json",
    "lang",
    "Json",
    "parse",
    "xml",
    "Document",
    "fromString",
    "members",
    "__parser",
    "response",
    "contentType",
    "_getParser",
    "call",
    "util",
    "ResponseParser",
    "contentTypeOrig",
    "contentTypeNormalized",
    "replace",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ResponseParser.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Richard Sternagel (rsternagel)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Parsers for parsing response strings (especially for XHR).\r\n *\r\n * Known parsers are: <code>\"json\"</code> and <code>\"xml\"</code>.\r\n *\r\n * @require(qx.util.ResponseParser#parse)\r\n */\r\nqx.Bootstrap.define(\"qx.util.ResponseParser\", {\r\n  /**\r\n   * @param parser {String|Function} See {@link #setParser}.\r\n   */\r\n  construct(parser) {\r\n    if (parser !== undefined) {\r\n      this.setParser(parser);\r\n    }\r\n  },\r\n\r\n  statics: {\r\n    /**\r\n     * @type {Map} Map of parser functions. Parsers defined here can be\r\n     * referenced symbolically, e.g. with {@link #setParser}.\r\n     *\r\n     * Known parsers are: <code>\"json\"</code> and <code>\"xml\"</code>.\r\n     */\r\n    PARSER: {\r\n      json: qx.lang.Json.parse,\r\n      xml: qx.xml.Document.fromString\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __parser: null,\r\n\r\n    /**\r\n     * Returns given response parsed with parser\r\n     * determined by {@link #_getParser}.\r\n     *\r\n     * @param response {String} response (e.g JSON/XML string)\r\n     * @param contentType {String} contentType (e.g. 'application/json')\r\n     * @return {String|Object} The parsed response of the request.\r\n     */\r\n    parse(response, contentType) {\r\n      var parser = this._getParser(contentType);\r\n\r\n      if (typeof parser === \"function\") {\r\n        if (response !== \"\") {\r\n          return parser.call(this, response);\r\n        }\r\n      }\r\n\r\n      return response;\r\n    },\r\n\r\n    /**\r\n     * Set parser used to parse response once request has\r\n     * completed successfully.\r\n     *\r\n     * Usually, the parser is correctly inferred from the\r\n     * content type of the response. This method allows to force the\r\n     * parser being used, e.g. if the content type returned from\r\n     * the backend is wrong or the response needs special parsing.\r\n     *\r\n     * Parser most typically used can be referenced symbolically.\r\n     * To cover edge cases, a function can be given. When parsing\r\n     * the response, this function is called with the raw response as\r\n     * first argument.\r\n     *\r\n     * @param parser {String|Function}\r\n     *\r\n     * Can be:\r\n     *\r\n     * <ul>\r\n     *   <li>A parser defined in {@link qx.util.ResponseParser#PARSER},\r\n     *       referenced by string.</li>\r\n     *   <li>The function to invoke.\r\n     *       Receives the raw response as argument.</li>\r\n     * </ul>\r\n     *\r\n     * @return {Function} The parser function\r\n     */\r\n    setParser(parser) {\r\n      // Symbolically given known parser\r\n      if (typeof qx.util.ResponseParser.PARSER[parser] === \"function\") {\r\n        return (this.__parser = qx.util.ResponseParser.PARSER[parser]);\r\n      }\r\n\r\n      // If parser is not a symbol, it must be a function\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        qx.core.Assert.assertFunction(parser);\r\n      }\r\n\r\n      return (this.__parser = parser);\r\n    },\r\n\r\n    /**\r\n     * Gets the parser.\r\n     *\r\n     * If not defined explicitly using {@link #setParser},\r\n     * the parser is inferred from the content type.\r\n     *\r\n     * Override this method to extend the list of content types\r\n     * being handled.\r\n     *\r\n     * @param contentType {String}\r\n     * @return {Function|null} The parser function or <code>null</code> if the\r\n     * content type is undetermined.\r\n     *\r\n     */\r\n    _getParser(contentType) {\r\n      var parser = this.__parser,\r\n        contentTypeOrig = \"\",\r\n        contentTypeNormalized = \"\";\r\n\r\n      // Use user-provided parser, if any\r\n      if (parser) {\r\n        return parser;\r\n      }\r\n\r\n      // See http://restpatterns.org/Glossary/MIME_Type\r\n\r\n      contentTypeOrig = contentType || \"\";\r\n\r\n      // Ignore parameters (e.g. the character set)\r\n      contentTypeNormalized = contentTypeOrig.replace(/;.*$/, \"\");\r\n\r\n      if (/^application\\/(\\w|\\.)*\\+?json$/.test(contentTypeNormalized)) {\r\n        parser = qx.util.ResponseParser.PARSER.json;\r\n      }\r\n\r\n      if (/^application\\/xml$/.test(contentTypeNormalized)) {\r\n        parser = qx.util.ResponseParser.PARSER.xml;\r\n      }\r\n\r\n      // Deprecated\r\n      if (/[^\\/]+\\/[^\\+]+\\+xml$/.test(contentTypeOrig)) {\r\n        parser = qx.util.ResponseParser.PARSER.xml;\r\n      }\r\n\r\n      return parser;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}