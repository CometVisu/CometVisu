{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "parser",
    "undefined",
    "setParser",
    "statics",
    "PARSER",
    "json",
    "lang",
    "Json",
    "parse",
    "xml",
    "Document",
    "fromString",
    "members",
    "__parser",
    "response",
    "contentType",
    "_getParser",
    "call",
    "util",
    "ResponseParser",
    "contentTypeOrig",
    "contentTypeNormalized",
    "replace",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/ResponseParser.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Parsers for parsing response strings (especially for XHR).\n *\n * Known parsers are: <code>\"json\"</code> and <code>\"xml\"</code>.\n *\n * @require(qx.util.ResponseParser#parse)\n */\nqx.Bootstrap.define(\"qx.util.ResponseParser\", {\n  /**\n   * @param parser {String|Function} See {@link #setParser}.\n   */\n  construct(parser) {\n    if (parser !== undefined) {\n      this.setParser(parser);\n    }\n  },\n\n  statics: {\n    /**\n     * @type {Map} Map of parser functions. Parsers defined here can be\n     * referenced symbolically, e.g. with {@link #setParser}.\n     *\n     * Known parsers are: <code>\"json\"</code> and <code>\"xml\"</code>.\n     */\n    PARSER: {\n      json: qx.lang.Json.parse,\n      xml: qx.xml.Document.fromString\n    }\n  },\n\n  members: {\n    __parser: null,\n\n    /**\n     * Returns given response parsed with parser\n     * determined by {@link #_getParser}.\n     *\n     * @param response {String} response (e.g JSON/XML string)\n     * @param contentType {String} contentType (e.g. 'application/json')\n     * @return {String|Object} The parsed response of the request.\n     */\n    parse(response, contentType) {\n      var parser = this._getParser(contentType);\n\n      if (typeof parser === \"function\") {\n        if (response !== \"\") {\n          return parser.call(this, response);\n        }\n      }\n\n      return response;\n    },\n\n    /**\n     * Set parser used to parse response once request has\n     * completed successfully.\n     *\n     * Usually, the parser is correctly inferred from the\n     * content type of the response. This method allows to force the\n     * parser being used, e.g. if the content type returned from\n     * the backend is wrong or the response needs special parsing.\n     *\n     * Parser most typically used can be referenced symbolically.\n     * To cover edge cases, a function can be given. When parsing\n     * the response, this function is called with the raw response as\n     * first argument.\n     *\n     * @param parser {String|Function}\n     *\n     * Can be:\n     *\n     * <ul>\n     *   <li>A parser defined in {@link qx.util.ResponseParser#PARSER},\n     *       referenced by string.</li>\n     *   <li>The function to invoke.\n     *       Receives the raw response as argument.</li>\n     * </ul>\n     *\n     * @return {Function} The parser function\n     */\n    setParser(parser) {\n      // Symbolically given known parser\n      if (typeof qx.util.ResponseParser.PARSER[parser] === \"function\") {\n        return (this.__parser = qx.util.ResponseParser.PARSER[parser]);\n      }\n\n      // If parser is not a symbol, it must be a function\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertFunction(parser);\n      }\n\n      return (this.__parser = parser);\n    },\n\n    /**\n     * Gets the parser.\n     *\n     * If not defined explicitly using {@link #setParser},\n     * the parser is inferred from the content type.\n     *\n     * Override this method to extend the list of content types\n     * being handled.\n     *\n     * @param contentType {String}\n     * @return {Function|null} The parser function or <code>null</code> if the\n     * content type is undetermined.\n     *\n     */\n    _getParser(contentType) {\n      var parser = this.__parser,\n        contentTypeOrig = \"\",\n        contentTypeNormalized = \"\";\n\n      // Use user-provided parser, if any\n      if (parser) {\n        return parser;\n      }\n\n      // See http://restpatterns.org/Glossary/MIME_Type\n\n      contentTypeOrig = contentType || \"\";\n\n      // Ignore parameters (e.g. the character set)\n      contentTypeNormalized = contentTypeOrig.replace(/;.*$/, \"\");\n\n      if (/^application\\/(\\w|\\.)*\\+?json$/.test(contentTypeNormalized)) {\n        parser = qx.util.ResponseParser.PARSER.json;\n      }\n\n      if (/^application\\/xml$/.test(contentTypeNormalized)) {\n        parser = qx.util.ResponseParser.PARSER.xml;\n      }\n\n      // Deprecated\n      if (/[^\\/]+\\/[^\\+]+\\+xml$/.test(contentTypeOrig)) {\n        parser = qx.util.ResponseParser.PARSER.xml;\n      }\n\n      return parser;\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}