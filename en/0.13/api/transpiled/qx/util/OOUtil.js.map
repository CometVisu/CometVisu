{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "classIsDefined",
    "name",
    "getByName",
    "undefined",
    "getPropertyDefinition",
    "clazz",
    "$$properties",
    "superclass",
    "hasProperty",
    "util",
    "OOUtil",
    "getEventType",
    "constructor",
    "$$events",
    "supportsEvent",
    "getByInterface",
    "iface",
    "list",
    "i",
    "l",
    "$$implements",
    "$$flatImplements",
    "length",
    "hasInterface",
    "getMixins",
    "$$includes",
    "push",
    "apply",
    "$$flatIncludes"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/OOUtil.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (wittemann)\r\n\r\n************************************************************************ */\r\n/**\r\n * This class is a base class for the OO system defined by Class, Mixin\r\n * and Interface. It contains helper which are basically needed to create the\r\n * Classes which define the OO system.\r\n */\r\nqx.Bootstrap.define(\"qx.util.OOUtil\", {\r\n  statics: {\r\n    /**\r\n     * Whether the given class exists\r\n     *\r\n     * @param name {String} class name to check\r\n     * @return {Boolean} true if class exists\r\n     */\r\n    classIsDefined(name) {\r\n      return qx.Bootstrap.getByName(name) !== undefined;\r\n    },\r\n\r\n    /**\r\n     * Returns the definition of the given property, if not redefined.\r\n     * Returns null if the property does not exist.\r\n     *\r\n     * @param clazz {Class} class to check\r\n     * @param name {String} name of the class to check for\r\n     * @return {Map|null} whether the object support the given event.\r\n     */\r\n    getPropertyDefinition(clazz, name) {\r\n      while (clazz) {\r\n        if (clazz.$$properties && clazz.$$properties[name]) {\r\n          return clazz.$$properties[name];\r\n        }\r\n\r\n        clazz = clazz.superclass;\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Whether a class has the given property\r\n     *\r\n     * @param clazz {Class} class to check\r\n     * @param name {String} name of the property to check for\r\n     * @return {Boolean} whether the class includes the given property.\r\n     */\r\n    hasProperty(clazz, name) {\r\n      return !!qx.util.OOUtil.getPropertyDefinition(clazz, name);\r\n    },\r\n\r\n    /**\r\n     * Returns the event type of the given event. Returns null if\r\n     * the event does not exist.\r\n     *\r\n     * @param clazz {Class} class to check\r\n     * @param name {String} name of the event\r\n     * @return {String|null} Event type of the given event.\r\n     */\r\n    getEventType(clazz, name) {\r\n      var clazz = clazz.constructor;\r\n\r\n      while (clazz.superclass) {\r\n        if (clazz.$$events && clazz.$$events[name] !== undefined) {\r\n          return clazz.$$events[name];\r\n        }\r\n\r\n        clazz = clazz.superclass;\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Whether a class supports the given event type\r\n     *\r\n     * @param clazz {Class} class to check\r\n     * @param name {String} name of the event to check for\r\n     * @return {Boolean} whether the class supports the given event.\r\n     */\r\n    supportsEvent(clazz, name) {\r\n      return !!qx.util.OOUtil.getEventType(clazz, name);\r\n    },\r\n\r\n    /**\r\n     * Returns the class or one of its super classes which contains the\r\n     * declaration of the given interface. Returns null if the interface is not\r\n     * specified anywhere.\r\n     *\r\n     * @param clazz {Class} class to look for the interface\r\n     * @param iface {Interface} interface to look for\r\n     * @return {Class|null} the class which directly implements the given interface\r\n     */\r\n    getByInterface(clazz, iface) {\r\n      var list, i, l;\r\n\r\n      while (clazz) {\r\n        if (clazz.$$implements) {\r\n          list = clazz.$$flatImplements;\r\n\r\n          for (i = 0, l = list.length; i < l; i++) {\r\n            if (list[i] === iface) {\r\n              return clazz;\r\n            }\r\n          }\r\n        }\r\n\r\n        clazz = clazz.superclass;\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Whether a given class or any of its super classes includes a given interface.\r\n     *\r\n     * This function will return \"true\" if the interface was defined\r\n     * in the class declaration ({@link qx.Class#define}) of the class\r\n     * or any of its super classes using the \"implement\"\r\n     * key.\r\n     *\r\n     * @param clazz {Class} class to check\r\n     * @param iface {Interface} the interface to check for\r\n     * @return {Boolean} whether the class includes the interface.\r\n     */\r\n    hasInterface(clazz, iface) {\r\n      return !!qx.util.OOUtil.getByInterface(clazz, iface);\r\n    },\r\n\r\n    /**\r\n     * Returns a list of all mixins available in a given class.\r\n     *\r\n     * @param clazz {Class} class which should be inspected\r\n     * @return {Mixin[]} array of mixins this class uses\r\n     */\r\n    getMixins(clazz) {\r\n      var list = [];\r\n\r\n      while (clazz) {\r\n        if (clazz.$$includes) {\r\n          list.push.apply(list, clazz.$$flatIncludes);\r\n        }\r\n\r\n        clazz = clazz.superclass;\r\n      }\r\n\r\n      return list;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}