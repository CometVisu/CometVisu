{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "OPERATION_DELETE",
    "OPERATION_INSERT",
    "OPERATION_REPLACE",
    "__computeLevenshteinDistance",
    "__P_513_0",
    "dataA",
    "dataB",
    "distance",
    "posA",
    "posB",
    "cost",
    "length",
    "undefined",
    "Math",
    "min",
    "__computeEditOperations",
    "__P_513_1",
    "operations",
    "i",
    "push",
    "operation",
    "pos",
    "old",
    "value",
    "getEditOperations",
    "util",
    "EditDistance"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/EditDistance.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Class to implement different edit distance ideas.\r\n *\r\n * <a href=\"http://en.wikipedia.org/wiki/Edit_distance\">Edit distance on Wikipedia</a>\r\n * <a href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">Levenshtein distance on Wikipedia</a>\r\n */\r\nqx.Class.define(\"qx.util.EditDistance\", {\r\n  statics: {\r\n    OPERATION_DELETE: 1,\r\n    OPERATION_INSERT: 2,\r\n    OPERATION_REPLACE: 3,\r\n\r\n    /**\r\n     * Returns a distant matrix following a concept\r\n     * named Levenshtein distance for two data structures\r\n     *\r\n     * @param dataA {Array} incoming source data\r\n     * @param dataB {Array} incoming target data\r\n     * @return {Integer[][]} outgoing matrix\r\n     */\r\n    __computeLevenshteinDistance(dataA, dataB) {\r\n      // distance is dataA table with dataA.length+1 rows and dataB.length+1 columns\r\n      var distance = [];\r\n\r\n      // posA and posB are used to iterate over str1 and str2\r\n      var posA, posB, cost;\r\n\r\n      for (posA = 0; posA <= dataA.length; posA++) {\r\n        distance[posA] = [];\r\n        distance[posA][0] = posA;\r\n      }\r\n\r\n      for (posB = 1; posB <= dataB.length; posB++) {\r\n        distance[0][posB] = posB;\r\n      }\r\n\r\n      for (posA = 1; posA <= dataA.length; posA++) {\r\n        for (posB = 1; posB <= dataB.length; posB++) {\r\n          cost = dataA[posA - 1] === dataB[posB - 1] ? 0 : 1;\r\n\r\n          if (distance[posA] === undefined) {\r\n            distance[posA] = [];\r\n          }\r\n\r\n          distance[posA][posB] = Math.min(\r\n            distance[posA - 1][posB] + 1, // deletion\r\n            distance[posA][posB - 1] + 1, // insertion\r\n            distance[posA - 1][posB - 1] + cost // substitution\r\n          );\r\n        }\r\n      }\r\n\r\n      return distance;\r\n    },\r\n\r\n    /**\r\n     * Computes the operations needed to transform dataA to dataB.\r\n     *\r\n     * @param distance {Integer[][]} Precomputed matrix for the data fields\r\n     * @param dataA {Array} incoming source data\r\n     * @param dataB {Array} incoming target data\r\n     * @return {Map[]} Array of maps describing the operations needed\r\n     */\r\n    __computeEditOperations(distance, dataA, dataB) {\r\n      var operations = [];\r\n      var posA = dataA.length;\r\n      var posB = dataB.length;\r\n\r\n      if (posA === 0) {\r\n        // insert from begin to end\r\n        // reverted order than in all other cases for optimal performance\r\n        for (var i = 0; i < posB; i++) {\r\n          operations.push({\r\n            operation: this.OPERATION_INSERT,\r\n            pos: i,\r\n            old: null,\r\n            value: dataB[i]\r\n          });\r\n        }\r\n\r\n        return operations;\r\n      }\r\n\r\n      if (posB === 0) {\r\n        // remove from end to begin\r\n        for (var i = posA - 1; i >= 0; i--) {\r\n          operations.push({\r\n            operation: this.OPERATION_DELETE,\r\n            pos: i,\r\n            old: dataA[i],\r\n            value: null\r\n          });\r\n        }\r\n\r\n        return operations;\r\n      }\r\n\r\n      while (posA !== 0 || posB !== 0) {\r\n        if (posA != 0 && distance[posA][posB] == distance[posA - 1][posB] + 1) {\r\n          operations.push({\r\n            operation: this.OPERATION_DELETE,\r\n            pos: posA - 1,\r\n            old: dataA[posA - 1],\r\n            value: null\r\n          });\r\n\r\n          posA -= 1;\r\n        } else if (\r\n          posB != 0 &&\r\n          distance[posA][posB] == distance[posA][posB - 1] + 1\r\n        ) {\r\n          operations.push({\r\n            operation: this.OPERATION_INSERT,\r\n            pos: posA,\r\n            old: null,\r\n            value: dataB[posB - 1]\r\n          });\r\n\r\n          posB -= 1;\r\n        } else {\r\n          if (dataA[posA - 1] !== dataB[posB - 1]) {\r\n            operations.push({\r\n              operation: this.OPERATION_REPLACE,\r\n              pos: posA - 1,\r\n              old: dataA[posA - 1],\r\n              value: dataB[posB - 1]\r\n            });\r\n          }\r\n\r\n          posA -= 1;\r\n          posB -= 1;\r\n        }\r\n      }\r\n\r\n      return operations;\r\n    },\r\n\r\n    /**\r\n     * Returns the operations needed to transform dataA to dataB.\r\n     *\r\n     * @param dataA {Array} incoming source data\r\n     * @param dataB {Array} incoming target data\r\n     * @return {Map[]} Array of maps describing the operations needed\r\n     */\r\n    getEditOperations(dataA, dataB) {\r\n      var distance = this.__computeLevenshteinDistance(dataA, dataB);\r\n      var operations = this.__computeEditOperations(distance, dataA, dataB);\r\n\r\n      return operations;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}