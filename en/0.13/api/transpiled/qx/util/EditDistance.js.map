{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "OPERATION_DELETE",
    "OPERATION_INSERT",
    "OPERATION_REPLACE",
    "__computeLevenshteinDistance",
    "dataA",
    "dataB",
    "distance",
    "posA",
    "posB",
    "cost",
    "length",
    "undefined",
    "Math",
    "min",
    "__computeEditOperations",
    "operations",
    "i",
    "push",
    "operation",
    "pos",
    "old",
    "value",
    "getEditOperations",
    "util",
    "EditDistance"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/EditDistance.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Class to implement different edit distance ideas.\n *\n * <a href=\"http://en.wikipedia.org/wiki/Edit_distance\">Edit distance on Wikipedia</a>\n * <a href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">Levenshtein distance on Wikipedia</a>\n */\nqx.Class.define(\"qx.util.EditDistance\", {\n  statics: {\n    OPERATION_DELETE: 1,\n    OPERATION_INSERT: 2,\n    OPERATION_REPLACE: 3,\n\n    /**\n     * Returns a distant matrix following a concept\n     * named Levenshtein distance for two data structures\n     *\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Integer[][]} outgoing matrix\n     */\n    __computeLevenshteinDistance(dataA, dataB) {\n      // distance is dataA table with dataA.length+1 rows and dataB.length+1 columns\n      var distance = [];\n\n      // posA and posB are used to iterate over str1 and str2\n      var posA, posB, cost;\n\n      for (posA = 0; posA <= dataA.length; posA++) {\n        distance[posA] = [];\n        distance[posA][0] = posA;\n      }\n\n      for (posB = 1; posB <= dataB.length; posB++) {\n        distance[0][posB] = posB;\n      }\n\n      for (posA = 1; posA <= dataA.length; posA++) {\n        for (posB = 1; posB <= dataB.length; posB++) {\n          cost = dataA[posA - 1] === dataB[posB - 1] ? 0 : 1;\n\n          if (distance[posA] === undefined) {\n            distance[posA] = [];\n          }\n\n          distance[posA][posB] = Math.min(\n            distance[posA - 1][posB] + 1, // deletion\n            distance[posA][posB - 1] + 1, // insertion\n            distance[posA - 1][posB - 1] + cost // substitution\n          );\n        }\n      }\n\n      return distance;\n    },\n\n    /**\n     * Computes the operations needed to transform dataA to dataB.\n     *\n     * @param distance {Integer[][]} Precomputed matrix for the data fields\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Map[]} Array of maps describing the operations needed\n     */\n    __computeEditOperations(distance, dataA, dataB) {\n      var operations = [];\n      var posA = dataA.length;\n      var posB = dataB.length;\n\n      if (posA === 0) {\n        // insert from begin to end\n        // reverted order than in all other cases for optimal performance\n        for (var i = 0; i < posB; i++) {\n          operations.push({\n            operation: this.OPERATION_INSERT,\n            pos: i,\n            old: null,\n            value: dataB[i]\n          });\n        }\n\n        return operations;\n      }\n\n      if (posB === 0) {\n        // remove from end to begin\n        for (var i = posA - 1; i >= 0; i--) {\n          operations.push({\n            operation: this.OPERATION_DELETE,\n            pos: i,\n            old: dataA[i],\n            value: null\n          });\n        }\n\n        return operations;\n      }\n\n      while (posA !== 0 || posB !== 0) {\n        if (posA != 0 && distance[posA][posB] == distance[posA - 1][posB] + 1) {\n          operations.push({\n            operation: this.OPERATION_DELETE,\n            pos: posA - 1,\n            old: dataA[posA - 1],\n            value: null\n          });\n\n          posA -= 1;\n        } else if (\n          posB != 0 &&\n          distance[posA][posB] == distance[posA][posB - 1] + 1\n        ) {\n          operations.push({\n            operation: this.OPERATION_INSERT,\n            pos: posA,\n            old: null,\n            value: dataB[posB - 1]\n          });\n\n          posB -= 1;\n        } else {\n          if (dataA[posA - 1] !== dataB[posB - 1]) {\n            operations.push({\n              operation: this.OPERATION_REPLACE,\n              pos: posA - 1,\n              old: dataA[posA - 1],\n              value: dataB[posB - 1]\n            });\n          }\n\n          posA -= 1;\n          posB -= 1;\n        }\n      }\n\n      return operations;\n    },\n\n    /**\n     * Returns the operations needed to transform dataA to dataB.\n     *\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Map[]} Array of maps describing the operations needed\n     */\n    getEditOperations(dataA, dataB) {\n      var distance = this.__computeLevenshteinDistance(dataA, dataB);\n      var operations = this.__computeEditOperations(distance, dataA, dataB);\n\n      return operations;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}