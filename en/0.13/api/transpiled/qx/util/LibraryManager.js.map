{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "__libs",
    "$$libraries",
    "members",
    "has",
    "namespace",
    "util",
    "LibraryManager",
    "getNamespaces",
    "keys",
    "get",
    "key",
    "set",
    "value"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/LibraryManager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Author:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Provides read/write access to library-specific information such as\n * source/resource URIs.\n */\nqx.Class.define(\"qx.util.LibraryManager\", {\n  extend: qx.core.Object,\n\n  type: \"singleton\",\n\n  statics: {\n    /** @type {Map} The libraries used by this application */\n    __libs: qx.$$libraries || {}\n  },\n\n  members: {\n    /**\n     * Checks whether the library with the given namespace is known to the\n     * application.\n     * @param namespace {String} The library's namespace\n     * @return {Boolean} <code>true</code> if the given library is known\n     */\n    has(namespace) {\n      return !!qx.util.LibraryManager.__libs[namespace];\n    },\n\n    /**\n     * The namespaces of all libraries known to the application\n     *\n     * @returns {String[]} the namespaces\n     */\n    getNamespaces() {\n      return Object.keys(qx.util.LibraryManager.__libs);\n    },\n\n    /**\n     * Returns the value of an attribute of the given library\n     * @param namespace {String} The library's namespace\n     * @param key {String} Name of the attribute\n     * @return {var|null} The attribute's value or <code>null</code> if it's not defined\n     */\n    get(namespace, key) {\n      return qx.util.LibraryManager.__libs[namespace][key]\n        ? qx.util.LibraryManager.__libs[namespace][key]\n        : null;\n    },\n\n    /**\n     * Sets an attribute on the given library.\n     *\n     * @param namespace {String} The library's namespace\n     * @param key {String} Name of the attribute\n     * @param value {var} Value of the attribute\n     */\n    set(namespace, key, value) {\n      qx.util.LibraryManager.__libs[namespace][key] = value;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,wBAAwB,EAAE;IACxCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IAEtBC,IAAI,EAAE,WAAW;IAEjBC,OAAO,EAAE;MACP;MACAC,SAAM,EAAEX,EAAE,CAACY,WAAW,IAAI,CAAC;IAC7B,CAAC;IAEDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,GAAG,WAAHA,GAAGA,CAACC,SAAS,EAAE;QACb,OAAO,CAAC,CAACf,EAAE,CAACgB,IAAI,CAACC,cAAc,CAACN,SAAM,CAACI,SAAS,CAAC;MACnD,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIG,aAAa,WAAbA,aAAaA,CAAA,EAAG;QACd,OAAOV,MAAM,CAACW,IAAI,CAACnB,EAAE,CAACgB,IAAI,CAACC,cAAc,CAACN,SAAM,CAAC;MACnD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIS,GAAG,WAAHA,GAAGA,CAACL,SAAS,EAAEM,GAAG,EAAE;QAClB,OAAOrB,EAAE,CAACgB,IAAI,CAACC,cAAc,CAACN,SAAM,CAACI,SAAS,CAAC,CAACM,GAAG,CAAC,GAChDrB,EAAE,CAACgB,IAAI,CAACC,cAAc,CAACN,SAAM,CAACI,SAAS,CAAC,CAACM,GAAG,CAAC,GAC7C,IAAI;MACV,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,GAAG,WAAHA,GAAGA,CAACP,SAAS,EAAEM,GAAG,EAAEE,KAAK,EAAE;QACzBvB,EAAE,CAACgB,IAAI,CAACC,cAAc,CAACN,SAAM,CAACI,SAAS,CAAC,CAACM,GAAG,CAAC,GAAGE,KAAK;MACvD;IACF;EACF,CAAC,CAAC;EA3EFvB,EAAE,CAACgB,IAAI,CAACC,cAAc,CAACd,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}