{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "statics",
    "__libs",
    "$$libraries",
    "members",
    "has",
    "namespace",
    "get",
    "key",
    "set",
    "value",
    "util",
    "LibraryManager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/LibraryManager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Author:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Provides read/write access to library-specific information such as\n * source/resource URIs.\n */\nqx.Class.define(\"qx.util.LibraryManager\", {\n  extend: qx.core.Object,\n\n  type: \"singleton\",\n\n  statics: {\n    /** @type {Map} The libraries used by this application */\n    __libs: qx.$$libraries || {}\n  },\n\n  members: {\n    /**\n     * Checks whether the library with the given namespace is known to the\n     * application.\n     * @param namespace {String} The library's namespace\n     * @return {Boolean} <code>true</code> if the given library is known\n     */\n    has(namespace) {\n      return !!this.self(arguments).__libs[namespace];\n    },\n\n    /**\n     * Returns the value of an attribute of the given library\n     * @param namespace {String} The library's namespace\n     * @param key {String} Name of the attribute\n     * @return {var|null} The attribute's value or <code>null</code> if it's not defined\n     */\n    get(namespace, key) {\n      return this.self(arguments).__libs[namespace][key]\n        ? this.self(arguments).__libs[namespace][key]\n        : null;\n    },\n\n    /**\n     * Sets an attribute on the given library.\n     *\n     * @param namespace {String} The library's namespace\n     * @param key {String} Name of the attribute\n     * @param value {var} Value of the attribute\n     */\n    set(namespace, key, value) {\n      this.self(arguments).__libs[namespace][key] = value;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,wBAAhB,EAA0C;IACxCC,MAAM,EAAEN,EAAE,CAACO,IAAH,CAAQC,MADwB;IAGxCC,IAAI,EAAE,WAHkC;IAKxCC,OAAO,EAAE;MACP;MACAC,SAAM,EAAEX,EAAE,CAACY,WAAH,IAAkB;IAFnB,CAL+B;IAUxCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,GAPO,eAOHC,SAPG,EAOQ;QACb,OAAO,CAAC,CAAC,uBAAqBJ,SAArB,CAA4BI,SAA5B,CAAT;MACD,CATM;;MAWP;AACJ;AACA;AACA;AACA;AACA;MACIC,GAjBO,eAiBHD,SAjBG,EAiBQE,GAjBR,EAiBa;QAClB,OAAO,uBAAqBN,SAArB,CAA4BI,SAA5B,EAAuCE,GAAvC,IACH,uBAAqBN,SAArB,CAA4BI,SAA5B,EAAuCE,GAAvC,CADG,GAEH,IAFJ;MAGD,CArBM;;MAuBP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,GA9BO,eA8BHH,SA9BG,EA8BQE,GA9BR,EA8BaE,KA9Bb,EA8BoB;QACzB,uBAAqBR,SAArB,CAA4BI,SAA5B,EAAuCE,GAAvC,IAA8CE,KAA9C;MACD;IAhCM;EAV+B,CAA1C;EAtBAnB,EAAE,CAACoB,IAAH,CAAQC,cAAR,CAAuBlB,aAAvB,GAAuCA,aAAvC"
}