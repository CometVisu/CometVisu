{
  "className": "qx.util.placement.Placement",
  "packageName": "qx.util.placement",
  "name": "Placement",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0,
        "index": 677
      },
      "end": {
        "line": 282,
        "column": 3,
        "index": 9064
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Contains methods to compute a position for any object which should\n be positioned relative to another object.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 28,
        "column": 2,
        "index": 755
      },
      "end": {
        "line": 31,
        "column": 3,
        "index": 840
      }
    }
  },
  "properties": {
    "axisX": {
      "location": {
        "start": {
          "line": 37,
          "column": 4,
          "index": 938
        },
        "end": {
          "line": 39,
          "column": 5,
          "index": 973
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The axis object to use for the horizontal placement</p>"
          }
        ]
      },
      "name": "axisX",
      "propertyType": "new",
      "check": "Class"
    },
    "axisY": {
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1053
        },
        "end": {
          "line": 46,
          "column": 5,
          "index": 1088
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The axis object to use for the vertical placement</p>"
          }
        ]
      },
      "name": "axisY",
      "propertyType": "new",
      "check": "Class"
    },
    "edge": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1192
        },
        "end": {
          "line": 54,
          "column": 5,
          "index": 1272
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Specify to which edge of the target object, the object should be attached</p>"
          }
        ]
      },
      "name": "edge",
      "propertyType": "new",
      "init": "top",
      "possibleValues": [
        "top",
        "right",
        "bottom",
        "left"
      ],
      "defaultValue": "top"
    },
    "align": {
      "location": {
        "start": {
          "line": 59,
          "column": 4,
          "index": 1377
        },
        "end": {
          "line": 62,
          "column": 5,
          "index": 1480
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Specify with which edge of the target object, the object should be aligned</p>"
          }
        ]
      },
      "name": "align",
      "propertyType": "new",
      "init": "right",
      "possibleValues": [
        "top",
        "right",
        "bottom",
        "left",
        "center",
        "middle"
      ],
      "defaultValue": "right"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "statics": {
    "__instance": {
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 1504
        },
        "end": {
          "line": 66,
          "column": 20,
          "index": 1520
        }
      },
      "type": "variable",
      "access": "private"
    },
    "compute": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 3575
        },
        "end": {
          "line": 132,
          "column": 5,
          "index": 4465
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>DOM and widget independent method to compute the location\n of an object to make it relative to any other object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "size {Map} With the keys <code>width</code> and <code>height</code>\n   of the object to align",
            "paramName": "size",
            "description": " With the keys <code>width</code> and <code>height</code>\n   of the object to align",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "area {Map} Available area to position the object. Has the keys\n   <code>width</code> and <code>height</code>. Normally this is the parent\n   object of the one to align.",
            "paramName": "area",
            "description": " Available area to position the object. Has the keys\n   <code>width</code> and <code>height</code>. Normally this is the parent\n   object of the one to align.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "target {Map} Location of the object to align the object to. This map\n   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n   and <code>bottom</code>.",
            "paramName": "target",
            "description": " Location of the object to align the object to. This map\n   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n   and <code>bottom</code>.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "offsets {Map} Map with all offsets for each direction.\n   Comes with the keys <code>left</code>, <code>top</code>,\n   <code>right</code> and <code>bottom</code>.",
            "paramName": "offsets",
            "description": " Map with all offsets for each direction.\n   Comes with the keys <code>left</code>, <code>top</code>,\n   <code>right</code> and <code>bottom</code>.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "position {String} Alignment of the object on the target, any of\n   \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\",\n   \"left-top\", \"left-middle\", \"left-bottom\", \"right-top\", \"right-middle\", \"right-bottom\".",
            "paramName": "position",
            "description": " Alignment of the object on the target, any of\n   \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\",\n   \"left-top\", \"left-middle\", \"left-bottom\", \"right-top\", \"right-middle\", \"right-bottom\".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "modeX {String} Horizontal placement mode. Valid values are:\n   <ul>\n   <li><code>direct</code>: place the object directly at the given\n   location.</li>\n   <li><code>keep-align</code>: if parts of the object is outside of the visible\n   area it is moved to the best fitting 'edge' and 'alignment' of the target.\n   It is guaranteed the the new position attaches the object to one of the\n   target edges and that that is aligned with a target edge.</li>\n   <li>best-fit</li>: If parts of the object are outside of the visible\n   area it is moved into the view port ignoring any offset, and position\n   values.\n   </ul>",
            "paramName": "modeX",
            "description": " Horizontal placement mode. Valid values are:\n   <ul>\n   <li><code>direct</code>: place the object directly at the given\n   location.</li>\n   <li><code>keep-align</code>: if parts of the object is outside of the visible\n   area it is moved to the best fitting 'edge' and 'alignment' of the target.\n   It is guaranteed the the new position attaches the object to one of the\n   target edges and that that is aligned with a target edge.</li>\n   <li>best-fit</li>: If parts of the object are outside of the visible\n   area it is moved into the view port ignoring any offset, and position\n   values.\n   </ul>",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "modeY {String} Vertical placement mode. Accepts the same values as\n   the 'modeX' argument.",
            "paramName": "modeY",
            "description": " Vertical placement mode. Accepts the same values as\n   the 'modeX' argument.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the final location stored in the keys\n   <code>left</code> and <code>top</code>.",
            "type": "Map",
            "description": " A map with the final location stored in the keys\n   <code>left</code> and <code>top</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__direct": {
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4472
        },
        "end": {
          "line": 134,
          "column": 18,
          "index": 4486
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__keepAlign": {
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 4492
        },
        "end": {
          "line": 135,
          "column": 21,
          "index": 4509
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__bestFit": {
      "location": {
        "start": {
          "line": 136,
          "column": 4,
          "index": 4515
        },
        "end": {
          "line": 136,
          "column": 19,
          "index": 4530
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__getAxis": {
      "location": {
        "start": {
          "line": 145,
          "column": 4,
          "index": 4776
        },
        "end": {
          "line": 163,
          "column": 5,
          "index": 5323
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the axis implementation for the given mode</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mode {String} One of <code>direct</code>, <code>keep-align</code> or\n   <code>best-fit</code>",
            "paramName": "mode",
            "description": " One of <code>direct</code>, <code>keep-align</code> or\n   <code>best-fit</code>",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.util.placement.AbstractAxis}",
            "type": "qx.util.placement.AbstractAxis",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "members": {
    "__defaultAxis": {
      "location": {
        "start": {
          "line": 167,
          "column": 4,
          "index": 5347
        },
        "end": {
          "line": 167,
          "column": 23,
          "index": 5366
        }
      },
      "type": "variable",
      "access": "private"
    },
    "compute": {
      "location": {
        "start": {
          "line": 187,
          "column": 4,
          "index": 6341
        },
        "end": {
          "line": 232,
          "column": 5,
          "index": 7910
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>DOM and widget independent method to compute the location\n of an object to make it relative to any other object.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "size {Map} With the keys <code>width</code> and <code>height</code>\n   of the object to align",
            "paramName": "size",
            "description": " With the keys <code>width</code> and <code>height</code>\n   of the object to align",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "area {Map} Available area to position the object. Has the keys\n   <code>width</code> and <code>height</code>. Normally this is the parent\n   object of the one to align.",
            "paramName": "area",
            "description": " Available area to position the object. Has the keys\n   <code>width</code> and <code>height</code>. Normally this is the parent\n   object of the one to align.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "target {Map} Location of the object to align the object to. This map\n   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n   and <code>bottom</code>.",
            "paramName": "target",
            "description": " Location of the object to align the object to. This map\n   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n   and <code>bottom</code>.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "offsets {Map} Map with all offsets for each direction.\n   Comes with the keys <code>left</code>, <code>top</code>,\n   <code>right</code> and <code>bottom</code>.",
            "paramName": "offsets",
            "description": " Map with all offsets for each direction.\n   Comes with the keys <code>left</code>, <code>top</code>,\n   <code>right</code> and <code>bottom</code>.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the final location stored in the keys\n   <code>left</code> and <code>top</code>.",
            "type": "Map",
            "description": " A map with the final location stored in the keys\n   <code>left</code> and <code>top</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__getPositionX": {
      "location": {
        "start": {
          "line": 239,
          "column": 4,
          "index": 8031
        },
        "end": {
          "line": 254,
          "column": 5,
          "index": 8452
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the position value for the horizontal axis</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the position",
            "type": "String",
            "description": " the position"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getPositionY": {
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 8571
        },
        "end": {
          "line": 276,
          "column": 5,
          "index": 8992
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the position value for the vertical axis</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the position",
            "type": "String",
            "description": " the position"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getAxisX": {
      "type": "function",
      "name": "getAxisX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>axisX</code>.\n\nFor further details take a look at the property definition: {@link #axisX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Class",
            "desc": "Returns the value for axisX"
          }
        ]
      }
    },
    "setAxisX": {
      "type": "function",
      "name": "setAxisX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>axisX</code>.\n\nFor further details take a look at the property definition: {@link #axisX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Class",
            "paramName": "value",
            "desc": "Value for axisX"
          }
        ]
      }
    },
    "resetAxisX": {
      "type": "function",
      "name": "resetAxisX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>axisX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #axisX}."
          }
        ]
      }
    },
    "getAxisY": {
      "type": "function",
      "name": "getAxisY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>axisY</code>.\n\nFor further details take a look at the property definition: {@link #axisY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Class",
            "desc": "Returns the value for axisY"
          }
        ]
      }
    },
    "setAxisY": {
      "type": "function",
      "name": "setAxisY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>axisY</code>.\n\nFor further details take a look at the property definition: {@link #axisY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Class",
            "paramName": "value",
            "desc": "Value for axisY"
          }
        ]
      }
    },
    "resetAxisY": {
      "type": "function",
      "name": "resetAxisY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>axisY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #axisY}."
          }
        ]
      }
    },
    "getEdge": {
      "type": "function",
      "name": "getEdge",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>edge</code>.\n\nFor further details take a look at the property definition: {@link #edge}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for edge"
          }
        ]
      }
    },
    "setEdge": {
      "type": "function",
      "name": "setEdge",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>edge</code>.\n\nFor further details take a look at the property definition: {@link #edge}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for edge"
          }
        ]
      }
    },
    "resetEdge": {
      "type": "function",
      "name": "resetEdge",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>edge</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #edge}."
          }
        ]
      }
    },
    "getAlign": {
      "type": "function",
      "name": "getAlign",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>align</code>.\n\nFor further details take a look at the property definition: {@link #align}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for align"
          }
        ]
      }
    },
    "setAlign": {
      "type": "function",
      "name": "setAlign",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>align</code>.\n\nFor further details take a look at the property definition: {@link #align}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for align"
          }
        ]
      }
    },
    "resetAlign": {
      "type": "function",
      "name": "resetAlign",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>align</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #align}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 279,
        "column": 2,
        "index": 9001
      },
      "end": {
        "line": 281,
        "column": 3,
        "index": 9060
      }
    }
  },
  "descendants": []
}