{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "_isInRange",
    "util",
    "placement",
    "AbstractAxis",
    "_moveToEdgeAndAlign",
    "computeStart",
    "size",
    "target",
    "offsets",
    "areaSize",
    "position",
    "start",
    "Math",
    "min",
    "max",
    "BestFitAxis"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/placement/BestFitAxis.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Christian Hagendorn (chris_schmidt)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Places the object according to the target. If parts of the object are outside\r\n * of the axis' range the object's start is adjusted so that the overlap between\r\n * the object and the axis is maximized.\r\n */\r\nqx.Bootstrap.define(\"qx.util.placement.BestFitAxis\", {\r\n  statics: {\r\n    /**\r\n     * Whether the object specified by <code>start</code> and <code>size</code>\r\n     * is completely inside of the axis' range..\r\n     *\r\n     * @param start {Integer} Computed start position of the object\r\n     * @param size {Integer} Size of the object\r\n     * @param areaSize {Integer} The size of the axis\r\n     * @return {Boolean} Whether the object is inside of the axis' range\r\n     */\r\n    _isInRange: qx.util.placement.AbstractAxis._isInRange,\r\n\r\n    /**\r\n     * Computes the start of the object by taking only the attachment and\r\n     * alignment into account. The object by be not fully visible.\r\n     *\r\n     * @param size {Integer} Size of the object to align\r\n     * @param target {Map} Location of the object to align the object to. This map\r\n     *   should have the keys <code>start</code> and <code>end</code>.\r\n     * @param offsets {Map} Map with all offsets on each side.\r\n     *   Comes with the keys <code>start</code> and <code>end</code>.\r\n     * @param position {String} Accepts the same values as the <code> position</code>\r\n     *   argument of {@link #computeStart}.\r\n     * @return {Integer} The computed start position of the object.\r\n     */\r\n    _moveToEdgeAndAlign: qx.util.placement.AbstractAxis._moveToEdgeAndAlign,\r\n\r\n    /**\r\n     * Computes the start of the object on the axis\r\n     *\r\n     * @param size {Integer} Size of the object to align\r\n     * @param target {Map} Location of the object to align the object to. This map\r\n     *   should have the keys <code>start</code> and <code>end</code>.\r\n     * @param offsets {Map} Map with all offsets on each side.\r\n     *   Comes with the keys <code>start</code> and <code>end</code>.\r\n     * @param areaSize {Integer} Size of the axis.\r\n     * @param position {String} Alignment of the object on the target. Valid values are\r\n     *   <ul>\r\n     *   <li><code>edge-start</code> The object is placed before the target</li>\r\n     *   <li><code>edge-end</code> The object is placed after the target</li>\r\n     *   <li><code>align-start</code>The start of the object is aligned with the start of the target</li>\r\n     *   <li><code>align-center</code>The center of the object is aligned with the center of the target</li>\r\n     *   <li><code>align-end</code>The end of the object is aligned with the end of the object</li>\r\n     *   </ul>\r\n     * @return {Integer} The computed start position of the object.\r\n     */\r\n    computeStart(size, target, offsets, areaSize, position) {\r\n      var start = this._moveToEdgeAndAlign(size, target, offsets, position);\r\n\r\n      if (this._isInRange(start, size, areaSize)) {\r\n        return start;\r\n      }\r\n\r\n      if (start < 0) {\r\n        start = Math.min(0, areaSize - size);\r\n      }\r\n\r\n      if (start + size > areaSize) {\r\n        start = Math.max(0, areaSize - size);\r\n      }\r\n\r\n      return start;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,+BAA+B,EAAE;IACnDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,EAAEN,EAAE,CAACO,IAAI,CAACC,SAAS,CAACC,YAAY,CAACH,UAAU;MAErD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,mBAAmB,EAAEV,EAAE,CAACO,IAAI,CAACC,SAAS,CAACC,YAAY,CAACC,mBAAmB;MAEvE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAACC,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;QACtD,IAAIC,KAAK,GAAG,IAAI,CAACP,mBAAmB,CAACE,IAAI,EAAEC,MAAM,EAAEC,OAAO,EAAEE,QAAQ,CAAC;QAErE,IAAI,IAAI,CAACV,UAAU,CAACW,KAAK,EAAEL,IAAI,EAAEG,QAAQ,CAAC,EAAE;UAC1C,OAAOE,KAAK;QACd;QAEA,IAAIA,KAAK,GAAG,CAAC,EAAE;UACbA,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,QAAQ,GAAGH,IAAI,CAAC;QACtC;QAEA,IAAIK,KAAK,GAAGL,IAAI,GAAGG,QAAQ,EAAE;UAC3BE,KAAK,GAAGC,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEL,QAAQ,GAAGH,IAAI,CAAC;QACtC;QAEA,OAAOK,KAAK;MACd;IACF;EACF,CAAC,CAAC;EAzFFjB,EAAE,CAACO,IAAI,CAACC,SAAS,CAACa,WAAW,CAAClB,aAAa,GAAGA,aAAa;AAAC"
}