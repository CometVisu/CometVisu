{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "__defaultAxis",
    "util",
    "placement",
    "DirectAxis",
    "properties",
    "axisX",
    "check",
    "axisY",
    "edge",
    "init",
    "align",
    "statics",
    "__instance",
    "compute",
    "size",
    "area",
    "target",
    "offsets",
    "position",
    "modeX",
    "modeY",
    "Placement",
    "splitted",
    "split",
    "set",
    "__getAxis",
    "__direct",
    "__keepAlign",
    "__bestFit",
    "__P_519_2",
    "mode",
    "KeepAlignAxis",
    "BestFitAxis",
    "Error",
    "members",
    "getAxisX",
    "left",
    "computeStart",
    "width",
    "start",
    "end",
    "right",
    "__getPositionX",
    "getAxisY",
    "top",
    "height",
    "bottom",
    "__getPositionY",
    "__P_519_6",
    "getEdge",
    "getAlign",
    "__P_519_7",
    "destruct",
    "_disposeObjects"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/placement/Placement.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Contains methods to compute a position for any object which should\n * be positioned relative to another object.\n */\nqx.Class.define(\"qx.util.placement.Placement\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n    this.__defaultAxis = qx.util.placement.DirectAxis;\n  },\n\n  properties: {\n    /**\n     * The axis object to use for the horizontal placement\n     */\n    axisX: {\n      check: \"Class\"\n    },\n\n    /**\n     * The axis object to use for the vertical placement\n     */\n    axisY: {\n      check: \"Class\"\n    },\n\n    /**\n     * Specify to which edge of the target object, the object should be attached\n     */\n    edge: {\n      check: [\"top\", \"right\", \"bottom\", \"left\"],\n      init: \"top\"\n    },\n\n    /**\n     * Specify with which edge of the target object, the object should be aligned\n     */\n    align: {\n      check: [\"top\", \"right\", \"bottom\", \"left\", \"center\", \"middle\"],\n      init: \"right\"\n    }\n  },\n\n  statics: {\n    __instance: null,\n\n    /**\n     * DOM and widget independent method to compute the location\n     * of an object to make it relative to any other object.\n     *\n     * @param size {Map} With the keys <code>width</code> and <code>height</code>\n     *   of the object to align\n     * @param area {Map} Available area to position the object. Has the keys\n     *   <code>width</code> and <code>height</code>. Normally this is the parent\n     *   object of the one to align.\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     * @param offsets {Map} Map with all offsets for each direction.\n     *   Comes with the keys <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code>.\n     * @param position {String} Alignment of the object on the target, any of\n     *   \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\",\n     *   \"left-top\", \"left-middle\", \"left-bottom\", \"right-top\", \"right-middle\", \"right-bottom\".\n     * @param modeX {String} Horizontal placement mode. Valid values are:\n     *   <ul>\n     *   <li><code>direct</code>: place the object directly at the given\n     *   location.</li>\n     *   <li><code>keep-align</code>: if parts of the object is outside of the visible\n     *   area it is moved to the best fitting 'edge' and 'alignment' of the target.\n     *   It is guaranteed the the new position attaches the object to one of the\n     *   target edges and that that is aligned with a target edge.</li>\n     *   <li>best-fit</li>: If parts of the object are outside of the visible\n     *   area it is moved into the view port ignoring any offset, and position\n     *   values.\n     *   </ul>\n     * @param modeY {String} Vertical placement mode. Accepts the same values as\n     *   the 'modeX' argument.\n     * @return {Map} A map with the final location stored in the keys\n     *   <code>left</code> and <code>top</code>.\n     */\n    compute(size, area, target, offsets, position, modeX, modeY) {\n      this.__instance = this.__instance || new qx.util.placement.Placement();\n\n      var splitted = position.split(\"-\");\n      var edge = splitted[0];\n      var align = splitted[1];\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (align === \"center\" || align === \"middle\") {\n          var expected = \"middle\";\n          if (edge === \"top\" || edge === \"bottom\") {\n            expected = \"center\";\n          }\n          qx.core.Assert.assertEquals(\n            expected,\n            align,\n            \"Please use '\" + edge + \"-\" + expected + \"' instead!\"\n          );\n        }\n      }\n\n      this.__instance.set({\n        axisX: this.__getAxis(modeX),\n        axisY: this.__getAxis(modeY),\n        edge: edge,\n        align: align\n      });\n\n      return this.__instance.compute(size, area, target, offsets);\n    },\n\n    __direct: null,\n    __keepAlign: null,\n    __bestFit: null,\n\n    /**\n     * Get the axis implementation for the given mode\n     *\n     * @param mode {String} One of <code>direct</code>, <code>keep-align</code> or\n     *   <code>best-fit</code>\n     * @return {qx.util.placement.AbstractAxis}\n     */\n    __getAxis(mode) {\n      switch (mode) {\n        case \"direct\":\n          this.__direct = this.__direct || qx.util.placement.DirectAxis;\n          return this.__direct;\n\n        case \"keep-align\":\n          this.__keepAlign =\n            this.__keepAlign || qx.util.placement.KeepAlignAxis;\n          return this.__keepAlign;\n\n        case \"best-fit\":\n          this.__bestFit = this.__bestFit || qx.util.placement.BestFitAxis;\n          return this.__bestFit;\n\n        default:\n          throw new Error(\"Invalid 'mode' argument!'\");\n      }\n    }\n  },\n\n  members: {\n    __defaultAxis: null,\n\n    /**\n     * DOM and widget independent method to compute the location\n     * of an object to make it relative to any other object.\n     *\n     * @param size {Map} With the keys <code>width</code> and <code>height</code>\n     *   of the object to align\n     * @param area {Map} Available area to position the object. Has the keys\n     *   <code>width</code> and <code>height</code>. Normally this is the parent\n     *   object of the one to align.\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     * @param offsets {Map} Map with all offsets for each direction.\n     *   Comes with the keys <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code>.\n     * @return {Map} A map with the final location stored in the keys\n     *   <code>left</code> and <code>top</code>.\n     */\n    compute(size, area, target, offsets) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertObject(size, \"size\");\n        this.assertNumber(size.width, \"size.width\");\n        this.assertNumber(size.height, \"size.height\");\n\n        this.assertObject(area, \"area\");\n        this.assertNumber(area.width, \"area.width\");\n        this.assertNumber(area.height, \"area.height\");\n\n        this.assertObject(target, \"target\");\n        this.assertNumber(target.top, \"target.top\");\n        this.assertNumber(target.right, \"target.right\");\n        this.assertNumber(target.bottom, \"target.bottom\");\n        this.assertNumber(target.left, \"target.left\");\n\n        this.assertObject(offsets, \"offsets\");\n        this.assertNumber(offsets.top, \"offsets.top\");\n        this.assertNumber(offsets.right, \"offsets.right\");\n        this.assertNumber(offsets.bottom, \"offsets.bottom\");\n        this.assertNumber(offsets.left, \"offsets.left\");\n      }\n\n      var axisX = this.getAxisX() || this.__defaultAxis;\n      var left = axisX.computeStart(\n        size.width,\n        { start: target.left, end: target.right },\n        { start: offsets.left, end: offsets.right },\n        area.width,\n        this.__getPositionX()\n      );\n\n      var axisY = this.getAxisY() || this.__defaultAxis;\n      var top = axisY.computeStart(\n        size.height,\n        { start: target.top, end: target.bottom },\n        { start: offsets.top, end: offsets.bottom },\n        area.height,\n        this.__getPositionY()\n      );\n\n      return {\n        left: left,\n        top: top\n      };\n    },\n\n    /**\n     * Get the position value for the horizontal axis\n     *\n     * @return {String} the position\n     */\n    __getPositionX() {\n      var edge = this.getEdge();\n      var align = this.getAlign();\n\n      if (edge == \"left\") {\n        return \"edge-start\";\n      } else if (edge == \"right\") {\n        return \"edge-end\";\n      } else if (align == \"left\") {\n        return \"align-start\";\n      } else if (align == \"center\") {\n        return \"align-center\";\n      } else if (align == \"right\") {\n        return \"align-end\";\n      }\n    },\n\n    /**\n     * Get the position value for the vertical axis\n     *\n     * @return {String} the position\n     */\n    __getPositionY() {\n      var edge = this.getEdge();\n      var align = this.getAlign();\n\n      if (edge == \"top\") {\n        return \"edge-start\";\n      } else if (edge == \"bottom\") {\n        return \"edge-end\";\n      } else if (align == \"top\") {\n        return \"align-start\";\n      } else if (align == \"middle\") {\n        return \"align-center\";\n      } else if (align == \"bottom\") {\n        return \"align-end\";\n      }\n    }\n  },\n\n  destruct() {\n    this._disposeObjects(\"__defaultAxis\");\n  }\n});\n"
  ],
  "mappings": "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"
}