{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "statics",
    "computeStart",
    "size",
    "target",
    "offsets",
    "areaSize",
    "position",
    "Error",
    "_moveToEdgeAndAlign",
    "start",
    "end",
    "parseInt",
    "_isInRange",
    "util",
    "placement",
    "AbstractAxis"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/util/placement/AbstractAxis.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Abstract class to compute the position of an object on one axis.\n */\nqx.Bootstrap.define(\"qx.util.placement.AbstractAxis\", {\n  extend: Object,\n\n  statics: {\n    /**\n     * Computes the start of the object on the axis\n     *\n     * @param size {Integer} Size of the object to align\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>start</code> and <code>end</code>.\n     * @param offsets {Map} Map with all offsets on each side.\n     *   Comes with the keys <code>start</code> and <code>end</code>.\n     * @param areaSize {Integer} Size of the axis.\n     * @param position {String} Alignment of the object on the target. Valid values are\n     *   <ul>\n     *   <li><code>edge-start</code> The object is placed before the target</li>\n     *   <li><code>edge-end</code> The object is placed after the target</li>\n     *   <li><code>align-start</code>The start of the object is aligned with the start of the target</li>\n     *   <li><code>align-center</code>The center of the object is aligned with the center of the target</li>\n     *   <li><code>align-end</code>The end of the object is aligned with the end of the object</li>\n     *   </ul>\n     * @return {Integer} The computed start position of the object.\n     * @abstract\n     */\n    computeStart(size, target, offsets, areaSize, position) {\n      throw new Error(\"abstract method call!\");\n    },\n\n    /**\n     * Computes the start of the object by taking only the attachment and\n     * alignment into account. The object by be not fully visible.\n     *\n     * @param size {Integer} Size of the object to align\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>start</code> and <code>end</code>.\n     * @param offsets {Map} Map with all offsets on each side.\n     *   Comes with the keys <code>start</code> and <code>end</code>.\n     * @param position {String} Accepts the same values as the <code> position</code>\n     *   argument of {@link #computeStart}.\n     * @return {Integer} The computed start position of the object.\n     */\n    _moveToEdgeAndAlign(size, target, offsets, position) {\n      switch (position) {\n        case \"edge-start\":\n          return target.start - offsets.end - size;\n\n        case \"edge-end\":\n          return target.end + offsets.start;\n\n        case \"align-start\":\n          return target.start + offsets.start;\n\n        case \"align-center\":\n          return (\n            target.start +\n            parseInt((target.end - target.start - size) / 2, 10) +\n            offsets.start\n          );\n\n        case \"align-end\":\n          return target.end - offsets.end - size;\n      }\n    },\n\n    /**\n     * Whether the object specified by <code>start</code> and <code>size</code>\n     * is completely inside of the axis' range..\n     *\n     * @param start {Integer} Computed start position of the object\n     * @param size {Integer} Size of the object\n     * @param areaSize {Integer} The size of the axis\n     * @return {Boolean} Whether the object is inside of the axis' range\n     */\n    _isInRange(start, size, areaSize) {\n      return start >= 0 && start + size <= areaSize;\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,gCAApB,EAAsD;IACpDC,MAAM,EAAEC,MAD4C;IAGpDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,YArBO,wBAqBMC,IArBN,EAqBYC,MArBZ,EAqBoBC,OArBpB,EAqB6BC,QArB7B,EAqBuCC,QArBvC,EAqBiD;QACtD,MAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;MACD,CAvBM;;MAyBP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,mBAtCO,+BAsCaN,IAtCb,EAsCmBC,MAtCnB,EAsC2BC,OAtC3B,EAsCoCE,QAtCpC,EAsC8C;QACnD,QAAQA,QAAR;UACE,KAAK,YAAL;YACE,OAAOH,MAAM,CAACM,KAAP,GAAeL,OAAO,CAACM,GAAvB,GAA6BR,IAApC;;UAEF,KAAK,UAAL;YACE,OAAOC,MAAM,CAACO,GAAP,GAAaN,OAAO,CAACK,KAA5B;;UAEF,KAAK,aAAL;YACE,OAAON,MAAM,CAACM,KAAP,GAAeL,OAAO,CAACK,KAA9B;;UAEF,KAAK,cAAL;YACE,OACEN,MAAM,CAACM,KAAP,GACAE,QAAQ,CAAC,CAACR,MAAM,CAACO,GAAP,GAAaP,MAAM,CAACM,KAApB,GAA4BP,IAA7B,IAAqC,CAAtC,EAAyC,EAAzC,CADR,GAEAE,OAAO,CAACK,KAHV;;UAMF,KAAK,WAAL;YACE,OAAON,MAAM,CAACO,GAAP,GAAaN,OAAO,CAACM,GAArB,GAA2BR,IAAlC;QAlBJ;MAoBD,CA3DM;;MA6DP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIU,UAtEO,sBAsEIH,KAtEJ,EAsEWP,IAtEX,EAsEiBG,QAtEjB,EAsE2B;QAChC,OAAOI,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAGP,IAAR,IAAgBG,QAArC;MACD;IAxEM;EAH2C,CAAtD;EAtBAZ,EAAE,CAACoB,IAAH,CAAQC,SAAR,CAAkBC,YAAlB,CAA+BnB,aAA/B,GAA+CA,aAA/C"
}