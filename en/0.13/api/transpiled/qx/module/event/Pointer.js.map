{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "getPointerType",
    "getViewportLeft",
    "getViewportTop",
    "getDocumentLeft",
    "getDocumentTop",
    "getScreenLeft",
    "getScreenTop",
    "normalize",
    "event",
    "element",
    "type",
    "dom",
    "Pointer",
    "defer",
    "qxWeb",
    "$registerEventNormalization",
    "module"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/event/Pointer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Normalization for pointer events. Pointer events are hardware-agnostic and\n * will be fired regardless of which input type of input device is used (e.g. mouse or touchscreen).\n *\n * @require(qx.module.Event)\n * @require(qx.module.event.Pointer#getPointerType) // static code analysis - this method has to referenced\n * @require(qx.module.event.Pointer#getViewportLeft) // static code analysis - this method has to referenced\n * @require(qx.module.event.Pointer#getViewportTop) // static code analysis - this method has to referenced\n * @require(qx.module.event.Pointer#getDocumentLeft) // static code analysis - this method has to referenced\n * @require(qx.module.event.Pointer#getDocumentTop) // static code analysis - this method has to referenced\n * @require(qx.module.event.Pointer#getScreenLeft) // static code analysis - this method has to referenced\n * @require(qx.module.event.Pointer#getScreenTop) // static code analysis - this method has to referenced\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.Pointer\", {\n  statics: {\n    /**\n     * List of event types to be normalized\n     */\n    TYPES: [\n      \"pointerdown\",\n      \"pointerup\",\n      \"pointermove\",\n      \"pointercancel\",\n      \"pointerover\",\n      \"pointerout\"\n    ],\n\n    /**\n     * Returns the device type which the event triggered. This can be one\n     * of the following strings: <code>mouse</code>, <code>pen</code>\n     * or <code>touch</code>.\n     *\n     * @return {String} The type of the pointer.\n     */\n    getPointerType() {\n      // stub for documentation. Implementation is in qx.event.type.dom.Pointer\n      return false;\n    },\n\n    /**\n     * Get the horizontal coordinate at which the event occurred relative\n     * to the viewport.\n     *\n     * @return {Number} The horizontal mouse position\n     */\n    getViewportLeft() {\n      // stub for documentation. Implementation is in qx.event.type.dom.Pointer\n      return false;\n    },\n\n    /**\n     * Get the vertical coordinate at which the event occurred relative\n     * to the viewport.\n     *\n     * @return {Number} The vertical mouse position\n     * @signature function()\n     */\n    getViewportTop() {\n      // stub for documentation. Implementation is in qx.event.type.dom.Pointer\n      return false;\n    },\n\n    /**\n     * Get the horizontal position at which the event occurred relative to the\n     * left of the document. This property takes into account any scrolling of\n     * the page.\n     *\n     * @return {Number} The horizontal mouse position in the document.\n     */\n    getDocumentLeft() {\n      // stub for documentation. Implementation is in qx.event.type.dom.Pointer\n      return false;\n    },\n\n    /**\n     * Get the vertical position at which the event occurred relative to the\n     * top of the document. This property takes into account any scrolling of\n     * the page.\n     *\n     * @return {Number} The vertical mouse position in the document.\n     */\n    getDocumentTop() {\n      // stub for documentation. Implementation is in qx.event.type.dom.Pointer\n      return false;\n    },\n\n    /**\n     * Get the horizontal coordinate at which the event occurred relative to\n     * the origin of the screen coordinate system.\n     *\n     * Note: This value is usually not very useful unless you want to\n     * position a native popup window at this coordinate.\n     *\n     * @return {Number} The horizontal mouse position on the screen.\n     */\n    getScreenLeft() {\n      // stub for documentation. Implementation is in qx.event.type.dom.Pointer\n      return false;\n    },\n\n    /**\n     * Get the vertical coordinate at which the event occurred relative to\n     * the origin of the screen coordinate system.\n     *\n     * Note: This value is usually not very useful unless you want to\n     * position a native popup window at this coordinate.\n     *\n     * @return {Number} The vertical mouse position on the screen.\n     */\n    getScreenTop() {\n      // stub for documentation. Implementation is in qx.event.type.dom.Pointer\n      return false;\n    },\n\n    /**\n     * Manipulates the native event object, adding methods if they're not\n     * already present\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element the listener was attached to\n     * @return {Event} Normalized event object\n     * @internal\n     */\n    normalize(event, element) {\n      if (!event) {\n        return event;\n      }\n\n      qx.event.type.dom.Pointer.normalize(event);\n      return event;\n    }\n  },\n\n  defer(statics) {\n    qxWeb.$registerEventNormalization(\n      qx.module.event.Pointer.TYPES,\n      statics.normalize\n    );\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,yBAApB,EAA+C;IAC7CC,OAAO,EAAE;MACP;AACJ;AACA;MACIC,KAAK,EAAE,CACL,aADK,EAEL,WAFK,EAGL,aAHK,EAIL,eAJK,EAKL,aALK,EAML,YANK,CAJA;;MAaP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,cApBO,4BAoBU;QACf;QACA,OAAO,KAAP;MACD,CAvBM;;MAyBP;AACJ;AACA;AACA;AACA;AACA;MACIC,eA/BO,6BA+BW;QAChB;QACA,OAAO,KAAP;MACD,CAlCM;;MAoCP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,cA3CO,4BA2CU;QACf;QACA,OAAO,KAAP;MACD,CA9CM;;MAgDP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,eAvDO,6BAuDW;QAChB;QACA,OAAO,KAAP;MACD,CA1DM;;MA4DP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,cAnEO,4BAmEU;QACf;QACA,OAAO,KAAP;MACD,CAtEM;;MAwEP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aAjFO,2BAiFS;QACd;QACA,OAAO,KAAP;MACD,CApFM;;MAsFP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,YA/FO,0BA+FQ;QACb;QACA,OAAO,KAAP;MACD,CAlGM;;MAoGP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SA7GO,qBA6GGC,KA7GH,EA6GUC,OA7GV,EA6GmB;QACxB,IAAI,CAACD,KAAL,EAAY;UACV,OAAOA,KAAP;QACD;;QAEDf,EAAE,CAACe,KAAH,CAASE,IAAT,CAAcC,GAAd,CAAkBC,OAAlB,CAA0BL,SAA1B,CAAoCC,KAApC;QACA,OAAOA,KAAP;MACD;IApHM,CADoC;IAwH7CK,KAxH6C,iBAwHvCf,OAxHuC,EAwH9B;MACbgB,KAAK,CAACC,2BAAN,CACEtB,EAAE,CAACuB,MAAH,CAAUR,KAAV,CAAgBI,OAAhB,CAAwBb,KAD1B,EAEED,OAAO,CAACS,SAFV;IAID;EA7H4C,CAA/C;EAjCAd,EAAE,CAACuB,MAAH,CAAUR,KAAV,CAAgBI,OAAhB,CAAwBhB,aAAxB,GAAwCA,aAAxC"
}