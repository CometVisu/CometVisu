{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "BIND_METHODS",
    "getViewportLeft",
    "_original",
    "getViewportTop",
    "getDocumentLeft",
    "getDocumentTop",
    "getScreenLeft",
    "getScreenTop",
    "normalize",
    "event",
    "element",
    "bindMethods",
    "module",
    "Tap",
    "i",
    "l",
    "length",
    "bind",
    "defer",
    "qxWeb",
    "$registerEventNormalization"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/event/Tap.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Daniel Wagner (danielwagner)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Normalization for tap gesture events. These gestures are based on <a href=\"#Pointer\">Pointer events</a>,\r\n * meaning that they are available on all devices, no matter which input device type is used (e.g. mouse or\r\n * touchscreen).\r\n *\r\n * @require(qx.module.Event)\r\n * @require(qx.module.event.Tap#getViewportLeft) // static code analysis - this method has to referenced\r\n * @require(qx.module.event.Tap#getViewportTop) // static code analysis - this method has to referenced\r\n * @require(qx.module.event.Tap#getDocumentLeft) // static code analysis - this method has to referenced\r\n * @require(qx.module.event.Tap#getDocumentTop) // static code analysis - this method has to referenced\r\n * @require(qx.module.event.Tap#getScreenLeft) // static code analysis - this method has to referenced\r\n * @require(qx.module.event.Tap#getScreenTop) // static code analysis - this method has to referenced\r\n *\r\n * @group (Event_Normalization)\r\n */\r\nqx.Bootstrap.define(\"qx.module.event.Tap\", {\r\n  statics: {\r\n    /**\r\n     * List of event types to be normalized\r\n     */\r\n    TYPES: [\"tap\", \"longtap\", \"dbltap\"],\r\n\r\n    /**\r\n     * List methods to be attached to gesture event\r\n     * objects\r\n     * @internal\r\n     */\r\n    BIND_METHODS: [\r\n      \"getViewportLeft\",\r\n      \"getViewportTop\",\r\n      \"getDocumentLeft\",\r\n      \"getDocumentTop\",\r\n      \"getScreenLeft\",\r\n      \"getScreenTop\"\r\n    ],\r\n\r\n    /**\r\n     * Get the horizontal coordinate at which the event occurred relative\r\n     * to the viewport.\r\n     *\r\n     * @return {Number} The horizontal contact position\r\n     */\r\n    getViewportLeft() {\r\n      return this._original.getViewportLeft();\r\n    },\r\n\r\n    /**\r\n     * Get the vertical coordinate at which the event occurred relative\r\n     * to the viewport.\r\n     *\r\n     * @return {Number} The vertical contact position\r\n     * @signature function()\r\n     */\r\n    getViewportTop() {\r\n      return this._original.getViewportTop();\r\n    },\r\n\r\n    /**\r\n     * Get the horizontal position at which the event occurred relative to the\r\n     * left of the document. This property takes into account any scrolling of\r\n     * the page.\r\n     *\r\n     * @return {Number} The horizontal contact position in the document.\r\n     */\r\n    getDocumentLeft() {\r\n      return this._original.getDocumentLeft();\r\n    },\r\n\r\n    /**\r\n     * Get the vertical position at which the event occurred relative to the\r\n     * top of the document. This property takes into account any scrolling of\r\n     * the page.\r\n     *\r\n     * @return {Number} The vertical contact position in the document.\r\n     */\r\n    getDocumentTop() {\r\n      return this._original.getDocumentTop();\r\n    },\r\n\r\n    /**\r\n     * Get the horizontal coordinate at which the event occurred relative to\r\n     * the origin of the screen coordinate system.\r\n     *\r\n     * Note: This value is usually not very useful unless you want to\r\n     * position a native popup window at this coordinate.\r\n     *\r\n     * @return {Number} The horizontal contact position on the screen.\r\n     */\r\n    getScreenLeft() {\r\n      return this._original.getScreenLeft();\r\n    },\r\n\r\n    /**\r\n     * Get the vertical coordinate at which the event occurred relative to\r\n     * the origin of the screen coordinate system.\r\n     *\r\n     * Note: This value is usually not very useful unless you want to\r\n     * position a native popup window at this coordinate.\r\n     *\r\n     * @return {Number} The vertical contact position on the screen.\r\n     */\r\n    getScreenTop() {\r\n      return this._original.getScreenTop();\r\n    },\r\n\r\n    /**\r\n     * Manipulates the native event object, adding methods if they're not\r\n     * already present\r\n     *\r\n     * @param event {Event} Native event object\r\n     * @param element {Element} DOM element the listener was attached to\r\n     * @return {Event} Normalized event object\r\n     * @internal\r\n     */\r\n    normalize(event, element) {\r\n      if (!event) {\r\n        return event;\r\n      }\r\n\r\n      var bindMethods = qx.module.event.Tap.BIND_METHODS;\r\n      for (var i = 0, l = bindMethods.length; i < l; i++) {\r\n        if (typeof event[bindMethods[i]] != \"function\") {\r\n          event[bindMethods[i]] =\r\n            qx.module.event.Tap[bindMethods[i]].bind(event);\r\n        }\r\n      }\r\n\r\n      return event;\r\n    }\r\n  },\r\n\r\n  defer(statics) {\r\n    qxWeb.$registerEventNormalization(\r\n      qx.module.event.Tap.TYPES,\r\n      statics.normalize\r\n    );\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,qBAAqB,EAAE;IACzCC,OAAO,EAAE;MACP;AACJ;AACA;MACIC,KAAK,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC;MAEnC;AACJ;AACA;AACA;AACA;MACIC,YAAY,EAAE,CACZ,iBAAiB,EACjB,gBAAgB,EAChB,iBAAiB,EACjB,gBAAgB,EAChB,eAAe,EACf,cAAc,CACf;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,eAAe,WAAAA,gBAAA,EAAG;QAChB,OAAO,IAAI,CAACC,SAAS,CAACD,eAAe,CAAC,CAAC;MACzC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIE,cAAc,WAAAA,eAAA,EAAG;QACf,OAAO,IAAI,CAACD,SAAS,CAACC,cAAc,CAAC,CAAC;MACxC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,eAAe,WAAAA,gBAAA,EAAG;QAChB,OAAO,IAAI,CAACF,SAAS,CAACE,eAAe,CAAC,CAAC;MACzC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,cAAc,WAAAA,eAAA,EAAG;QACf,OAAO,IAAI,CAACH,SAAS,CAACG,cAAc,CAAC,CAAC;MACxC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aAAa,WAAAA,cAAA,EAAG;QACd,OAAO,IAAI,CAACJ,SAAS,CAACI,aAAa,CAAC,CAAC;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAAA,EAAG;QACb,OAAO,IAAI,CAACL,SAAS,CAACK,YAAY,CAAC,CAAC;MACtC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,WAAAA,UAACC,KAAK,EAAEC,OAAO,EAAE;QACxB,IAAI,CAACD,KAAK,EAAE;UACV,OAAOA,KAAK;QACd;QAEA,IAAIE,WAAW,GAAGlB,EAAE,CAACmB,MAAM,CAACH,KAAK,CAACI,GAAG,CAACb,YAAY;QAClD,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGJ,WAAW,CAACK,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAClD,IAAI,OAAOL,KAAK,CAACE,WAAW,CAACG,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE;YAC9CL,KAAK,CAACE,WAAW,CAACG,CAAC,CAAC,CAAC,GACnBrB,EAAE,CAACmB,MAAM,CAACH,KAAK,CAACI,GAAG,CAACF,WAAW,CAACG,CAAC,CAAC,CAAC,CAACG,IAAI,CAACR,KAAK,CAAC;UACnD;QACF;QAEA,OAAOA,KAAK;MACd;IACF,CAAC;IAEDS,KAAK,WAAAA,MAACpB,OAAO,EAAE;MACbqB,KAAK,CAACC,2BAA2B,CAC/B3B,EAAE,CAACmB,MAAM,CAACH,KAAK,CAACI,GAAG,CAACd,KAAK,EACzBD,OAAO,CAACU,SACV,CAAC;IACH;EACF,CAAC,CAAC;EA3JFf,EAAE,CAACmB,MAAM,CAACH,KAAK,CAACI,GAAG,CAACjB,aAAa,GAAGA,aAAa;AAAC"
}