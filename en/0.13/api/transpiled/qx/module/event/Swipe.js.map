{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "BIND_METHODS",
    "getStartTime",
    "_original",
    "swipe",
    "startTime",
    "getDuration",
    "duration",
    "getAxis",
    "axis",
    "getDirection",
    "direction",
    "getVelocity",
    "velocity",
    "getDistance",
    "distance",
    "normalize",
    "event",
    "element",
    "bindMethods",
    "module",
    "Swipe",
    "i",
    "l",
    "length",
    "bind",
    "defer",
    "qxWeb",
    "$registerEventNormalization"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/event/Swipe.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Normalization for the swipe gesture. This gesture is based on <a href=\"#Pointer\">Pointer events</a>\n * meaning that it's available on all devices, no matter which input device type is used (e.g. mouse or\n * touchscreen).\n *\n * @require(qx.module.Event)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.Swipe\", {\n  statics: {\n    /**\n     * List of event types to be normalized\n     */\n    TYPES: [\"swipe\"],\n\n    BIND_METHODS: [\n      \"getStartTime\",\n      \"getDuration\",\n      \"getAxis\",\n      \"getDirection\",\n      \"getVelocity\",\n      \"getDistance\"\n    ],\n\n    /**\n     * Returns the start time of the performed swipe.\n     *\n     * @return {Integer} the start time\n     */\n    getStartTime() {\n      return this._original.swipe.startTime;\n    },\n\n    /**\n     * Returns the duration the performed swipe took.\n     *\n     * @return {Integer} the duration\n     */\n    getDuration() {\n      return this._original.swipe.duration;\n    },\n\n    /**\n     * Returns whether the performed swipe was on the x or y axis.\n     *\n     * @return {String} \"x\"/\"y\" axis\n     */\n    getAxis() {\n      return this._original.swipe.axis;\n    },\n\n    /**\n     * Returns the direction of the performed swipe in reference to the axis.\n     * y = up / down\n     * x = left / right\n     *\n     * @return {String} the direction\n     */\n    getDirection() {\n      return this._original.swipe.direction;\n    },\n\n    /**\n     * Returns the velocity of the performed swipe.\n     *\n     * @return {Number} the velocity\n     */\n    getVelocity() {\n      return this._original.swipe.velocity;\n    },\n\n    /**\n     * Returns the distance of the performed swipe.\n     *\n     * @return {Integer} the distance\n     */\n    getDistance() {\n      return this._original.swipe.distance;\n    },\n\n    /**\n     * Manipulates the native event object, adding methods if they're not\n     * already present\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element the listener was attached to\n     * @return {Event} Normalized event object\n     * @internal\n     */\n    normalize(event, element) {\n      if (!event) {\n        return event;\n      }\n      // apply mouse event normalizations\n      var bindMethods = qx.module.event.Swipe.BIND_METHODS;\n      for (var i = 0, l = bindMethods.length; i < l; i++) {\n        if (typeof event[bindMethods[i]] != \"function\") {\n          event[bindMethods[i]] =\n            qx.module.event.Swipe[bindMethods[i]].bind(event);\n        }\n      }\n\n      return event;\n    }\n  },\n\n  defer(statics) {\n    qxWeb.$registerEventNormalization(\n      qx.module.event.Swipe.TYPES,\n      statics.normalize\n    );\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAH,CAAaG,MAAb,CAAoB,uBAApB,EAA6C;IAC3CC,OAAO,EAAE;MACP;AACJ;AACA;MACIC,KAAK,EAAE,CAAC,OAAD,CAJA;MAMPC,YAAY,EAAE,CACZ,cADY,EAEZ,aAFY,EAGZ,SAHY,EAIZ,cAJY,EAKZ,aALY,EAMZ,aANY,CANP;;MAeP;AACJ;AACA;AACA;AACA;MACIC,YApBO,0BAoBQ;QACb,OAAO,KAAKC,SAAL,CAAeC,KAAf,CAAqBC,SAA5B;MACD,CAtBM;;MAwBP;AACJ;AACA;AACA;AACA;MACIC,WA7BO,yBA6BO;QACZ,OAAO,KAAKH,SAAL,CAAeC,KAAf,CAAqBG,QAA5B;MACD,CA/BM;;MAiCP;AACJ;AACA;AACA;AACA;MACIC,OAtCO,qBAsCG;QACR,OAAO,KAAKL,SAAL,CAAeC,KAAf,CAAqBK,IAA5B;MACD,CAxCM;;MA0CP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,YAjDO,0BAiDQ;QACb,OAAO,KAAKP,SAAL,CAAeC,KAAf,CAAqBO,SAA5B;MACD,CAnDM;;MAqDP;AACJ;AACA;AACA;AACA;MACIC,WA1DO,yBA0DO;QACZ,OAAO,KAAKT,SAAL,CAAeC,KAAf,CAAqBS,QAA5B;MACD,CA5DM;;MA8DP;AACJ;AACA;AACA;AACA;MACIC,WAnEO,yBAmEO;QACZ,OAAO,KAAKX,SAAL,CAAeC,KAAf,CAAqBW,QAA5B;MACD,CArEM;;MAuEP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAhFO,qBAgFGC,KAhFH,EAgFUC,OAhFV,EAgFmB;QACxB,IAAI,CAACD,KAAL,EAAY;UACV,OAAOA,KAAP;QACD,CAHuB,CAIxB;;;QACA,IAAIE,WAAW,GAAGzB,EAAE,CAAC0B,MAAH,CAAUH,KAAV,CAAgBI,KAAhB,CAAsBpB,YAAxC;;QACA,KAAK,IAAIqB,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,WAAW,CAACK,MAAhC,EAAwCF,CAAC,GAAGC,CAA5C,EAA+CD,CAAC,EAAhD,EAAoD;UAClD,IAAI,OAAOL,KAAK,CAACE,WAAW,CAACG,CAAD,CAAZ,CAAZ,IAAgC,UAApC,EAAgD;YAC9CL,KAAK,CAACE,WAAW,CAACG,CAAD,CAAZ,CAAL,GACE5B,EAAE,CAAC0B,MAAH,CAAUH,KAAV,CAAgBI,KAAhB,CAAsBF,WAAW,CAACG,CAAD,CAAjC,EAAsCG,IAAtC,CAA2CR,KAA3C,CADF;UAED;QACF;;QAED,OAAOA,KAAP;MACD;IA9FM,CADkC;IAkG3CS,KAlG2C,iBAkGrC3B,OAlGqC,EAkG5B;MACb4B,KAAK,CAACC,2BAAN,CACElC,EAAE,CAAC0B,MAAH,CAAUH,KAAV,CAAgBI,KAAhB,CAAsBrB,KADxB,EAEED,OAAO,CAACiB,SAFV;IAID;EAvG0C,CAA7C;EA3BAtB,EAAE,CAAC0B,MAAH,CAAUH,KAAV,CAAgBI,KAAhB,CAAsBxB,aAAtB,GAAsCA,aAAtC"
}