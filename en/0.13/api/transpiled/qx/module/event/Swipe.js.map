{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "BIND_METHODS",
    "getStartTime",
    "_original",
    "swipe",
    "startTime",
    "getDuration",
    "duration",
    "getAxis",
    "axis",
    "getDirection",
    "direction",
    "getVelocity",
    "velocity",
    "getDistance",
    "distance",
    "normalize",
    "event",
    "element",
    "bindMethods",
    "module",
    "Swipe",
    "i",
    "l",
    "length",
    "bind",
    "defer",
    "qxWeb",
    "$registerEventNormalization"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/event/Swipe.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Normalization for the swipe gesture. This gesture is based on <a href=\"#Pointer\">Pointer events</a>\n * meaning that it's available on all devices, no matter which input device type is used (e.g. mouse or\n * touchscreen).\n *\n * @require(qx.module.Event)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.Swipe\", {\n  statics: {\n    /**\n     * List of event types to be normalized\n     */\n    TYPES: [\"swipe\"],\n\n    BIND_METHODS: [\n      \"getStartTime\",\n      \"getDuration\",\n      \"getAxis\",\n      \"getDirection\",\n      \"getVelocity\",\n      \"getDistance\"\n    ],\n\n    /**\n     * Returns the start time of the performed swipe.\n     *\n     * @return {Integer} the start time\n     */\n    getStartTime() {\n      return this._original.swipe.startTime;\n    },\n\n    /**\n     * Returns the duration the performed swipe took.\n     *\n     * @return {Integer} the duration\n     */\n    getDuration() {\n      return this._original.swipe.duration;\n    },\n\n    /**\n     * Returns whether the performed swipe was on the x or y axis.\n     *\n     * @return {String} \"x\"/\"y\" axis\n     */\n    getAxis() {\n      return this._original.swipe.axis;\n    },\n\n    /**\n     * Returns the direction of the performed swipe in reference to the axis.\n     * y = up / down\n     * x = left / right\n     *\n     * @return {String} the direction\n     */\n    getDirection() {\n      return this._original.swipe.direction;\n    },\n\n    /**\n     * Returns the velocity of the performed swipe.\n     *\n     * @return {Number} the velocity\n     */\n    getVelocity() {\n      return this._original.swipe.velocity;\n    },\n\n    /**\n     * Returns the distance of the performed swipe.\n     *\n     * @return {Integer} the distance\n     */\n    getDistance() {\n      return this._original.swipe.distance;\n    },\n\n    /**\n     * Manipulates the native event object, adding methods if they're not\n     * already present\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element the listener was attached to\n     * @return {Event} Normalized event object\n     * @internal\n     */\n    normalize(event, element) {\n      if (!event) {\n        return event;\n      }\n      // apply mouse event normalizations\n      var bindMethods = qx.module.event.Swipe.BIND_METHODS;\n      for (var i = 0, l = bindMethods.length; i < l; i++) {\n        if (typeof event[bindMethods[i]] != \"function\") {\n          event[bindMethods[i]] =\n            qx.module.event.Swipe[bindMethods[i]].bind(event);\n        }\n      }\n\n      return event;\n    }\n  },\n\n  defer(statics) {\n    qxWeb.$registerEventNormalization(\n      qx.module.event.Swipe.TYPES,\n      statics.normalize\n    );\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,uBAAuB,EAAE;IAC3CC,OAAO,EAAE;MACP;AACJ;AACA;MACIC,KAAK,EAAE,CAAC,OAAO,CAAC;MAEhBC,YAAY,EAAE,CACZ,cAAc,EACd,aAAa,EACb,SAAS,EACT,cAAc,EACd,aAAa,EACb,aAAa,CACd;MAED;AACJ;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAAA,EAAG;QACb,OAAO,IAAI,CAACC,SAAS,CAACC,KAAK,CAACC,SAAS;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO,IAAI,CAACH,SAAS,CAACC,KAAK,CAACG,QAAQ;MACtC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAAA,EAAG;QACR,OAAO,IAAI,CAACL,SAAS,CAACC,KAAK,CAACK,IAAI;MAClC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAAA,EAAG;QACb,OAAO,IAAI,CAACP,SAAS,CAACC,KAAK,CAACO,SAAS;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO,IAAI,CAACT,SAAS,CAACC,KAAK,CAACS,QAAQ;MACtC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,WAAW,WAAAA,YAAA,EAAG;QACZ,OAAO,IAAI,CAACX,SAAS,CAACC,KAAK,CAACW,QAAQ;MACtC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,WAAAA,UAACC,KAAK,EAAEC,OAAO,EAAE;QACxB,IAAI,CAACD,KAAK,EAAE;UACV,OAAOA,KAAK;QACd;QACA;QACA,IAAIE,WAAW,GAAGzB,EAAE,CAAC0B,MAAM,CAACH,KAAK,CAACI,KAAK,CAACpB,YAAY;QACpD,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGJ,WAAW,CAACK,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;UAClD,IAAI,OAAOL,KAAK,CAACE,WAAW,CAACG,CAAC,CAAC,CAAC,IAAI,UAAU,EAAE;YAC9CL,KAAK,CAACE,WAAW,CAACG,CAAC,CAAC,CAAC,GACnB5B,EAAE,CAAC0B,MAAM,CAACH,KAAK,CAACI,KAAK,CAACF,WAAW,CAACG,CAAC,CAAC,CAAC,CAACG,IAAI,CAACR,KAAK,CAAC;UACrD;QACF;QAEA,OAAOA,KAAK;MACd;IACF,CAAC;IAEDS,KAAK,WAAAA,MAAC3B,OAAO,EAAE;MACb4B,KAAK,CAACC,2BAA2B,CAC/BlC,EAAE,CAAC0B,MAAM,CAACH,KAAK,CAACI,KAAK,CAACrB,KAAK,EAC3BD,OAAO,CAACiB,SACV,CAAC;IACH;EACF,CAAC,CAAC;EAnIFtB,EAAE,CAAC0B,MAAM,CAACH,KAAK,CAACI,KAAK,CAACxB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}