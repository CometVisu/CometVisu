{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "xhr",
    "url",
    "settings",
    "bom",
    "request",
    "Xhr",
    "open",
    "method",
    "async",
    "header",
    "key",
    "setRequestHeader",
    "script",
    "Script",
    "jsonp",
    "Jsonp",
    "callbackName",
    "setCallbackName",
    "callbackParam",
    "setCallbackParam",
    "setPrefix",
    "defer",
    "qxWeb",
    "$attachAll",
    "module",
    "Io"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/Io.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This module provides basic IO functionality. It contains three ways to load\n * data:\n *\n * * XMLHttpRequest\n * * Script tag\n * * Script tag using JSONP\n *\n * @require(qx.bom.request.Xhr#open)\n *\n * @group (IO)\n */\nqx.Bootstrap.define(\"qx.module.Io\", {\n  statics: {\n    /**\n     * Returns a configured XMLHttpRequest object. Using the send method will\n     * finally send the request.\n     *\n     * @param url {String} Mandatory URL to load the data from.\n     * @param settings {Map?} Optional settings map which may contain one of\n     *   the following settings:\n     * <ul>\n     * <li><code>method</code> The method of the request. Default: <code>GET</code></li>\n     * <li><code>async</code> flag to mark the request as asynchronous. Default: <code>true</code></li>\n     * <li><code>header</code> A map of request headers.</li>\n     * </ul>\n     *\n     * @attachStatic {qxWeb, io.xhr}\n     * @return {qx.bom.request.Xhr} The request object.\n     */\n    xhr(url, settings) {\n      if (!settings) {\n        settings = {};\n      }\n      var xhr = new qx.bom.request.Xhr();\n      xhr.open(settings.method, url, settings.async);\n      if (settings.header) {\n        var header = settings.header;\n        for (var key in header) {\n          xhr.setRequestHeader(key, header[key]);\n        }\n      }\n      return xhr;\n    },\n\n    /**\n     * Returns a predefined script tag wrapper which can be used to load data\n     * from cross-domain origins.\n     *\n     * @param url {String} Mandatory URL to load the data from.\n     * @attachStatic {qxWeb, io.script}\n     * @return {qx.bom.request.Script} The request object.\n     */\n    script(url) {\n      var script = new qx.bom.request.Script();\n      script.open(\"get\", url);\n      return script;\n    },\n\n    /**\n     * Returns a predefined script tag wrapper which can be used to load data\n     * from cross-domain origins via JSONP.\n     *\n     * @param url {String} Mandatory URL to load the data from.\n     * @param settings {Map?} Optional settings map which may contain one of\n     *   the following settings:\n     *\n     * * <code>callbackName</code>: The name of the callback which will\n     *      be called by the loaded script.\n     * * <code>callbackParam</code>: The name of the callback expected by the server\n     * @attachStatic {qxWeb, io.jsonp}\n     * @return {qx.bom.request.Jsonp} The request object.\n     */\n    jsonp(url, settings) {\n      var script = new qx.bom.request.Jsonp();\n      if (settings && settings.callbackName) {\n        script.setCallbackName(settings.callbackName);\n      }\n      if (settings && settings.callbackParam) {\n        script.setCallbackParam(settings.callbackParam);\n      }\n      script.setPrefix(\"qxWeb.$$\"); // needed in case no callback name is given\n      script.open(\"get\", url);\n      return script;\n    }\n  },\n\n  defer(statics) {\n    qxWeb.$attachAll(this, \"io\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,cAAc,EAAE;IAClCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,GAAG,WAAAA,IAACC,GAAG,EAAEC,QAAQ,EAAE;QACjB,IAAI,CAACA,QAAQ,EAAE;UACbA,QAAQ,GAAG,CAAC,CAAC;QACf;QACA,IAAIF,GAAG,GAAG,IAAIN,EAAE,CAACS,GAAG,CAACC,OAAO,CAACC,GAAG,EAAE;QAClCL,GAAG,CAACM,IAAI,CAACJ,QAAQ,CAACK,MAAM,EAAEN,GAAG,EAAEC,QAAQ,CAACM,KAAK,CAAC;QAC9C,IAAIN,QAAQ,CAACO,MAAM,EAAE;UACnB,IAAIA,MAAM,GAAGP,QAAQ,CAACO,MAAM;UAC5B,KAAK,IAAIC,GAAG,IAAID,MAAM,EAAE;YACtBT,GAAG,CAACW,gBAAgB,CAACD,GAAG,EAAED,MAAM,CAACC,GAAG,CAAC,CAAC;UACxC;QACF;QACA,OAAOV,GAAG;MACZ,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIY,MAAM,WAAAA,OAACX,GAAG,EAAE;QACV,IAAIW,MAAM,GAAG,IAAIlB,EAAE,CAACS,GAAG,CAACC,OAAO,CAACS,MAAM,EAAE;QACxCD,MAAM,CAACN,IAAI,CAAC,KAAK,EAAEL,GAAG,CAAC;QACvB,OAAOW,MAAM;MACf,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,KAAK,WAAAA,MAACb,GAAG,EAAEC,QAAQ,EAAE;QACnB,IAAIU,MAAM,GAAG,IAAIlB,EAAE,CAACS,GAAG,CAACC,OAAO,CAACW,KAAK,EAAE;QACvC,IAAIb,QAAQ,IAAIA,QAAQ,CAACc,YAAY,EAAE;UACrCJ,MAAM,CAACK,eAAe,CAACf,QAAQ,CAACc,YAAY,CAAC;QAC/C;QACA,IAAId,QAAQ,IAAIA,QAAQ,CAACgB,aAAa,EAAE;UACtCN,MAAM,CAACO,gBAAgB,CAACjB,QAAQ,CAACgB,aAAa,CAAC;QACjD;QACAN,MAAM,CAACQ,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QAC9BR,MAAM,CAACN,IAAI,CAAC,KAAK,EAAEL,GAAG,CAAC;QACvB,OAAOW,MAAM;MACf;IACF,CAAC;IAEDS,KAAK,WAAAA,MAACtB,OAAO,EAAE;MACbuB,KAAK,CAACC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC;IAC9B;EACF,CAAC,CAAC;EA5GF7B,EAAE,CAAC8B,MAAM,CAACC,EAAE,CAAC5B,aAAa,GAAGA,aAAa;AAAC"
}