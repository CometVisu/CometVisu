{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "configure",
    "responseData",
    "dev",
    "FakeServer",
    "getInstance",
    "removeResponse",
    "method",
    "url",
    "addFilter",
    "filter",
    "removeFilter",
    "respondWith",
    "urlRegExp",
    "response",
    "getFakeServer",
    "restore",
    "defer",
    "qxWeb",
    "$attachStatic",
    "fakeServer",
    "module"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/dev/FakeServer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n/**\n * A wrapper around Sinon.JS's FakeXMLHttpRequest and FakeServer features that\n * allows quick and simple configuration of mock HTTP backends for testing and\n * development.\n * Automatically creates URL filtering rules to ensure that only configured\n * requests are faked while others will be processed normally by the browser's\n * XHR implementation.\n *\n * @group (IO)\n */\nqx.Bootstrap.define(\"qx.module.dev.FakeServer\", {\n  statics: {\n    /**\n     * Configures a set of fake HTTP responses. Each response is defined as a map\n     * that must provide the following keys:\n     * <ul>\n     *   <li><code>method</code> HTTP method to respond to, e.g. <code>PUT</code></li>\n     *   <li><code>url</code> URL used to match requests to fake responses. Can be\n     *   a RegExp or a String. REST-style parameter placeholders in curly braces\n     *   will be replaced with wildcards, e.g. the string \"/resource/{resourceId}\"\n     *   is interpreted as the RegExp <code>/\\/resource\\/\\{.*?\\}/</code>\n     *   <li><code>response</code> This can be either:\n     *     <ul>\n     *       <li>a string: This will be the response body, status code will be 200</li>\n     *       <li>an array containing the status code, a map of response headers and\n     *         the response text, e.g. <code>[200, { \"Content-Type\": \"text/html\" }, \"OK\"]</code>\n     *       </li>\n     *       <li>a function: This will be called with a FakeXMLHttpRequest object as\n     *       the only argument. Its <code>respond</code> method must be called to send a response.\n     *       See <a href=\"http://sinonjs.org/docs/#respond\">Sinon.JS: Respond</a> for details.\n     *       </li>\n     *     </ul>\n     *   </li>\n     * </ul>\n     *\n     * @attachStatic {qxWeb, dev.fakeServer.configure}\n     * @param responseData {Map[]} An array of response description maps.\n     */\n    configure(responseData) {\n      qx.dev.FakeServer.getInstance().configure(responseData);\n    },\n\n    /**\n     * Removes a response that was configured with {@link #configure}\n     * @param method {String} HTTP method of the response\n     * @param url {String|RegExp} URL of the response\n     *\n     * @attachStatic {qxWeb, dev.fakeServer.removeResponse}\n     */\n    removeResponse(method, url) {\n      qx.dev.FakeServer.getInstance().removeResponse(method, url);\n    },\n\n    /**\n     * Adds a URL filtering function to decide whether a request should be handled\n     * by the FakeServer or passed to the regular XMLHttp implementation.\n     * See <a href=\"http://sinonjs.org/docs/#filtered-requests\">Sinon.JS: Filtered Requests</a>\n     * for details.\n     *\n     * @attachStatic {qxWeb, dev.fakeServer.addFilter}\n     * @param filter {Function} URL filter function. Will be called with the\n     * following arguments: <code>method</code>, <code>url</code>, <code>async</code>,\n     * <code>username</code>, <code>password</code>. Must return <code>true</code>\n     * if the request should not be faked.\n     */\n    addFilter(filter) {\n      qx.dev.FakeServer.getInstance().addFilter(filter);\n    },\n\n    /**\n     * Remove a filter that was added with {@link #addFilter}\n     * @param filter {Function} filter function to remove\n     *\n     * @attachStatic {qxWeb, dev.fakeServer.removeFilter}\n     */\n    removeFilter(filter) {\n      qx.dev.FakeServer.getInstance().removeFilter(filter);\n    },\n\n    /**\n     * Defines a fake XHR response to a matching request.\n     *\n     * @attachStatic {qxWeb, dev.fakeServer.respondWith}\n     * @param method {String} HTTP method to respond to, e.g. \"GET\"\n     * @param urlRegExp {RegExp} Request URL must match match this expression\n     * @param response {Function|Array|String} Response to send. See\n     * <a href=\"http://sinonjs.org/docs/#fakeServer\">Sinon.JS: Fake Server</a> for details.\n     */\n    respondWith(method, urlRegExp, response) {\n      qx.dev.FakeServer.getInstance().respondWith(method, urlRegExp, response);\n    },\n\n    /**\n     * Creates and configures a FakeServer if necessary and returns it.\n     *\n     * @attachStatic {qxWeb, dev.fakeServer.getFakeServer}\n     * @return {Object} FakeServer object\n     */\n    getFakeServer() {\n      return qx.dev.FakeServer.getInstance().getFakeServer();\n    },\n\n    /**\n     * Stops the FakeServer and removes all configured responses and/or filters.\n     * @attachStatic {qxWeb, dev.fakeServer.restore}\n     */\n\n    restore() {\n      qx.dev.FakeServer.getInstance().restore();\n    }\n  },\n\n  defer(statics) {\n    qxWeb.$attachStatic({\n      dev: {\n        fakeServer: {\n          configure: statics.configure,\n          removeResponse: statics.removeResponse,\n          addFilter: statics.addFilter,\n          removeFilter: statics.removeFilter,\n          respondWith: statics.respondWith,\n          getFakeServer: statics.getFakeServer,\n          restore: statics.restore\n        }\n      }\n    });\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,0BAA0B,EAAE;IAC9CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,qBAACC,YAAY,EAAE;QACtBP,EAAE,CAACQ,GAAG,CAACC,UAAU,CAACC,WAAW,EAAE,CAACJ,SAAS,CAACC,YAAY,CAAC;MACzD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACII,cAAc,0BAACC,MAAM,EAAEC,GAAG,EAAE;QAC1Bb,EAAE,CAACQ,GAAG,CAACC,UAAU,CAACC,WAAW,EAAE,CAACC,cAAc,CAACC,MAAM,EAAEC,GAAG,CAAC;MAC7D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,qBAACC,MAAM,EAAE;QAChBf,EAAE,CAACQ,GAAG,CAACC,UAAU,CAACC,WAAW,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC;MACnD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,YAAY,wBAACD,MAAM,EAAE;QACnBf,EAAE,CAACQ,GAAG,CAACC,UAAU,CAACC,WAAW,EAAE,CAACM,YAAY,CAACD,MAAM,CAAC;MACtD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,WAAW,uBAACL,MAAM,EAAEM,SAAS,EAAEC,QAAQ,EAAE;QACvCnB,EAAE,CAACQ,GAAG,CAACC,UAAU,CAACC,WAAW,EAAE,CAACO,WAAW,CAACL,MAAM,EAAEM,SAAS,EAAEC,QAAQ,CAAC;MAC1E,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,aAAa,2BAAG;QACd,OAAOpB,EAAE,CAACQ,GAAG,CAACC,UAAU,CAACC,WAAW,EAAE,CAACU,aAAa,EAAE;MACxD,CAAC;MAED;AACJ;AACA;AACA;MAEIC,OAAO,qBAAG;QACRrB,EAAE,CAACQ,GAAG,CAACC,UAAU,CAACC,WAAW,EAAE,CAACW,OAAO,EAAE;MAC3C;IACF,CAAC;IAEDC,KAAK,iBAACjB,OAAO,EAAE;MACbkB,KAAK,CAACC,aAAa,CAAC;QAClBhB,GAAG,EAAE;UACHiB,UAAU,EAAE;YACVnB,SAAS,EAAED,OAAO,CAACC,SAAS;YAC5BK,cAAc,EAAEN,OAAO,CAACM,cAAc;YACtCG,SAAS,EAAET,OAAO,CAACS,SAAS;YAC5BE,YAAY,EAAEX,OAAO,CAACW,YAAY;YAClCC,WAAW,EAAEZ,OAAO,CAACY,WAAW;YAChCG,aAAa,EAAEf,OAAO,CAACe,aAAa;YACpCC,OAAO,EAAEhB,OAAO,CAACgB;UACnB;QACF;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAhJFrB,EAAE,CAAC0B,MAAM,CAAClB,GAAG,CAACC,UAAU,CAACN,aAAa,GAAGA,aAAa;AAAC"
}