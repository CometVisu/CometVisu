{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "members",
    "transform",
    "transforms",
    "_forEachElement",
    "el",
    "bom",
    "element",
    "Transform",
    "translate",
    "value",
    "scale",
    "rotate",
    "skew",
    "setTransformOrigin",
    "setOrigin",
    "getTransformOrigin",
    "nodeType",
    "getOrigin",
    "setTransformStyle",
    "setStyle",
    "getTransformStyle",
    "getStyle",
    "setTransformPerspective",
    "setPerspective",
    "getTransformPerspective",
    "getPerspective",
    "setTransformPerspectiveOrigin",
    "setPerspectiveOrigin",
    "getTransformPerspectiveOrigin",
    "getPerspectiveOrigin",
    "setTransformBackfaceVisibility",
    "setBackfaceVisibility",
    "getTransformBackfaceVisibility",
    "getBackfaceVisibility",
    "defer",
    "statics",
    "qxWeb",
    "$attachAll",
    "module"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/Transform.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This class is responsible for applying CSS3 transforms to the collection.\n * The implementation is mostly a cross browser wrapper for applying the\n * transforms.\n * The API is keep to the spec as close as possible.\n *\n * http://www.w3.org/TR/css3-3d-transforms/\n */\nqx.Bootstrap.define(\"qx.module.Transform\", {\n  members: {\n    /**\n     * Method to apply multiple transforms at once to the given element. It\n     * takes a map containing the transforms you want to apply plus the values\n     * e.g.<code>{scale: 2, rotate: \"5deg\"}</code>.\n     * The values can be either singular, which means a single value will\n     * be added to the CSS. If you give an array, the values will be split up\n     * and each array entry will be used for the X, Y or Z dimension in that\n     * order e.g. <code>{scale: [2, 0.5]}</code> will result in a element\n     * double the size in X direction and half the size in Y direction.\n     * Make sure your browser supports all transformations you apply.\n     *\n     * @attach {qxWeb}\n     * @param transforms {Map} The map containing the transforms and value.\n     * @return {qxWeb} This reference for chaining.\n     */\n    transform(transforms) {\n      this._forEachElement(function (el) {\n        qx.bom.element.Transform.transform(el, transforms);\n      });\n      return this;\n    },\n\n    /**\n     * Translates by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     *\n     * @attach {qxWeb}\n     * @param value {String|Array} The value to translate e.g. <code>\"10px\"</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    translate(value) {\n      return this.transform({ translate: value });\n    },\n\n    /**\n     * Scales by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     *\n     * @attach {qxWeb}\n     * @param value {Number|Array} The value to scale.\n     * @return {qxWeb} This reference for chaining.\n     */\n    scale(value) {\n      return this.transform({ scale: value });\n    },\n\n    /**\n     * Rotates by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     *\n     * @attach {qxWeb}\n     * @param value {String|Array} The value to rotate e.g. <code>\"90deg\"</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    rotate(value) {\n      return this.transform({ rotate: value });\n    },\n\n    /**\n     * Skews by the given value. For further details, take\n     * a look at the {@link #transform} method.\n     *\n     * @attach {qxWeb}\n     * @param value {String|Array} The value to skew e.g. <code>\"90deg\"</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    skew(value) {\n      return this.transform({ skew: value });\n    },\n\n    /**\n     * Sets the transform-origin property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\n     *\n     * @attach {qxWeb}\n     * @param value {String} CSS position values like <code>50% 50%</code> or\n     *   <code>left top</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformOrigin(value) {\n      this._forEachElement(function (el) {\n        qx.bom.element.Transform.setOrigin(el, value);\n      });\n      return this;\n    },\n\n    /**\n     * Returns the transform-origin property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property\n     *\n     * @attach {qxWeb}\n     * @return {String} The set property, e.g. <code>50% 50%</code> or null,\n     *   of the collection is empty.\n     */\n    getTransformOrigin() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getOrigin(this[0]);\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the transform-style property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\n     *\n     * @attach {qxWeb}\n     * @param value {String} Either <code>flat</code> or <code>preserve-3d</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformStyle(value) {\n      this._forEachElement(function (el) {\n        qx.bom.element.Transform.setStyle(el, value);\n      });\n      return this;\n    },\n\n    /**\n     * Returns the transform-style property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property\n     *\n     * @attach {qxWeb}\n     * @return {String} The set property, either <code>flat</code> or\n     *   <code>preserve-3d</code>.\n     */\n    getTransformStyle() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getStyle(this[0]);\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the perspective property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property\n     *\n     * @attach {qxWeb}\n     * @param value {Number} The perspective layer. Numbers between 100\n     *   and 5000 give the best results.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformPerspective(value) {\n      this._forEachElement(function (el) {\n        qx.bom.element.Transform.setPerspective(el, value);\n      });\n      return this;\n    },\n\n    /**\n     * Returns the perspective property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property\n     *\n     * @attach {qxWeb}\n     * @return {String} The set property, e.g. <code>500</code>\n     */\n    getTransformPerspective() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getPerspective(this[0]);\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the perspective-origin property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\n     *\n     * @attach {qxWeb}\n     * @param value {String} CSS position values like <code>50% 50%</code> or\n     *   <code>left top</code>.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformPerspectiveOrigin(value) {\n      this._forEachElement(function (el) {\n        qx.bom.element.Transform.setPerspectiveOrigin(el, value);\n      });\n      return this;\n    },\n\n    /**\n     * Returns the perspective-origin property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property\n     *\n     * @attach {qxWeb}\n     * @return {String} The set property, e.g. <code>50% 50%</code>\n     */\n    getTransformPerspectiveOrigin() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getPerspectiveOrigin(this[0]);\n      }\n      return \"\";\n    },\n\n    /**\n     * Sets the backface-visibility property.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\n     *\n     * @attach {qxWeb}\n     * @param value {Boolean} <code>true</code> if the backface should be visible.\n     * @return {qxWeb} This reference for chaining.\n     */\n    setTransformBackfaceVisibility(value) {\n      this._forEachElement(function (el) {\n        qx.bom.element.Transform.setBackfaceVisibility(el, value);\n      });\n      return this;\n    },\n\n    /**\n     * Returns the backface-visibility property of the first element.\n     *\n     * Spec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property\n     *\n     * @attach {qxWeb}\n     * @return {Boolean} <code>true</code>, if the backface is visible.\n     */\n    getTransformBackfaceVisibility() {\n      if (this[0] && this[0].nodeType === 1) {\n        return qx.bom.element.Transform.getBackfaceVisibility(this[0]);\n      }\n      return \"\";\n    }\n  },\n\n  defer(statics) {\n    qxWeb.$attachAll(this);\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,qBAAqB,EAAE;IACzCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,SAAS,WAATA,SAASA,CAACC,UAAU,EAAE;QACpB,IAAI,CAACC,eAAe,CAAC,UAAUC,EAAE,EAAE;UACjCT,EAAE,CAACU,GAAG,CAACC,OAAO,CAACC,SAAS,CAACN,SAAS,CAACG,EAAE,EAAEF,UAAU,CAAC;QACpD,CAAC,CAAC;QACF,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIM,SAAS,WAATA,SAASA,CAACC,KAAK,EAAE;QACf,OAAO,IAAI,CAACR,SAAS,CAAC;UAAEO,SAAS,EAAEC;QAAM,CAAC,CAAC;MAC7C,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,WAALA,KAAKA,CAACD,KAAK,EAAE;QACX,OAAO,IAAI,CAACR,SAAS,CAAC;UAAES,KAAK,EAAED;QAAM,CAAC,CAAC;MACzC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,MAAM,WAANA,MAAMA,CAACF,KAAK,EAAE;QACZ,OAAO,IAAI,CAACR,SAAS,CAAC;UAAEU,MAAM,EAAEF;QAAM,CAAC,CAAC;MAC1C,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,IAAI,WAAJA,IAAIA,CAACH,KAAK,EAAE;QACV,OAAO,IAAI,CAACR,SAAS,CAAC;UAAEW,IAAI,EAAEH;QAAM,CAAC,CAAC;MACxC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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",
  "ignoreList": []
}