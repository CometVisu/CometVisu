{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "clone",
    "lang",
    "Object",
    "getValues",
    "invert",
    "contains",
    "merge",
    "target",
    "varargs",
    "qxWeb",
    "array",
    "fromArguments",
    "arguments",
    "shift",
    "forEach",
    "sourceObject",
    "objectMergeWith",
    "defer",
    "$attachAll",
    "module",
    "util"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/util/Object.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Alexander Steitz (aback)\n\n************************************************************************ */\n\n/**\n * Helper functions to handle an Object as a Hash map.\n *\n * @group (Utilities)\n * @require (qx.module.util.Array)\n */\nqx.Bootstrap.define(\"qx.module.util.Object\", {\n  statics: {\n    /**\n     * Return a copy of an Object\n     *\n     * @signature function(source, deep)\n     * @attachStatic {qxWeb, object.clone}\n     *\n     * @param source {Object} Object to copy\n     * @param deep {Boolean} If the clone should be a deep clone.\n     * @return {Object} A copy of the object\n     */\n    clone: qx.lang.Object.clone,\n\n    /**\n     * Get the values of a map as array\n     *\n     * @signature function(map)\n     * @attachStatic {qxWeb, object.getValues}\n     *\n     * @param map {Object} the map\n     * @return {Array} array of the values of the map\n     */\n    getValues: qx.lang.Object.getValues,\n\n    /**\n     * Inverts a map by exchanging the keys with the values.\n     *\n     * @signature function(map)\n     * @attachStatic {qxWeb, object.invert}\n     *\n     * If the map has the same values for different keys, information will get lost.\n     * The values will be converted to strings using the toString methods.\n     *\n     * @param map {Object} Map to invert\n     * @return {Object} inverted Map\n     */\n    invert: qx.lang.Object.invert,\n\n    /**\n     * Whether the map contains the given value.\n     *\n     * @signature function(map, value)\n     * @attachStatic {qxWeb, object.contains}\n     *\n     * @param map {Object} Map to search for the value\n     * @param value {var} Value to look for\n     * @return {Boolean} Whether the value was found in the map.\n     */\n    contains: qx.lang.Object.contains,\n\n    /**\n     * Merges one or more objects into the 'target' object.\n     * *The objects are merged by overwriting existing keys.*\n     *\n     * @attachStatic {qxWeb, object.merge}\n     *\n     * @param target {Object} target object to merge into\n     * @param varargs {var} As many items as you want to merge.\n     * @return {Object} the merged object\n     */\n    merge(target, varargs) {\n      var varargs = qxWeb.array.fromArguments(arguments);\n      var target = varargs.shift();\n\n      varargs.forEach(function (sourceObject) {\n        target = qx.Bootstrap.objectMergeWith(target, sourceObject);\n      });\n\n      return target;\n    }\n  },\n\n  defer(statics) {\n    qxWeb.$attachAll(this, \"object\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,uBAAuB,EAAE;IAC3CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM,CAACF,KAAK;MAE3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,SAAS,EAAET,EAAE,CAACO,IAAI,CAACC,MAAM,CAACC,SAAS;MAEnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAAM,EAAEV,EAAE,CAACO,IAAI,CAACC,MAAM,CAACE,MAAM;MAE7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,EAAEX,EAAE,CAACO,IAAI,CAACC,MAAM,CAACG,QAAQ;MAEjC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAAK,WAAAA,MAACC,MAAM,EAAEC,OAAO,EAAE;QACrB,IAAIA,OAAO,GAAGC,KAAK,CAACC,KAAK,CAACC,aAAa,CAACC,SAAS,CAAC;QAClD,IAAIL,MAAM,GAAGC,OAAO,CAACK,KAAK,CAAC,CAAC;QAE5BL,OAAO,CAACM,OAAO,CAAC,UAAUC,YAAY,EAAE;UACtCR,MAAM,GAAGb,EAAE,CAACC,SAAS,CAACqB,eAAe,CAACT,MAAM,EAAEQ,YAAY,CAAC;QAC7D,CAAC,CAAC;QAEF,OAAOR,MAAM;MACf;IACF,CAAC;IAEDU,KAAK,WAAAA,MAAClB,OAAO,EAAE;MACbU,KAAK,CAACS,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC;IAClC;EACF,CAAC,CAAC;EApGFxB,EAAE,CAACyB,MAAM,CAACC,IAAI,CAAClB,MAAM,CAACL,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}