{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "debounce",
    "util",
    "Function",
    "throttle",
    "defer",
    "qxWeb",
    "$attachAll",
    "module"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/module/util/Function.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Alexander Steitz (aback)\n     * Tobias Oberrauch (toberrauch)\n\n************************************************************************ */\n/**\n * Utility module to give some support to work with functions.\n *\n * @group (Utilities)\n */\nqx.Bootstrap.define(\"qx.module.util.Function\", {\n  statics: {\n    /**\n     * Returns a debounced version of the given callback. The execution of the callback\n     * is delayed by the given delay and after no events were triggered anymore.\n     * This mechanism is very useful for event handling: only after a specified delay\n     * the event should be handled (e.g. at keyboard input by the user) to prevent flooding\n     * the handler with a large amounts of events.\n     *\n     * @attachStatic{qxWeb, func.debounce}\n     * @signature function (callback, delay, immediate)\n     * @param callback {Function} the callback which should be executed after the given delay\n     * if the wrapper method is *not* called during this delay.\n     * @param delay {Number} Delay in milliseconds\n     * @param immediate {Boolean?} whether to run the callback at the beginning and then debounce, default is <code>false</code>\n     * @return {Function} a wrapper function which <em>shields</em> the given callback function\n     */\n    debounce: qx.util.Function.debounce,\n\n    /**\n     * Returns a throttled version of the given callback. The execution of the callback\n     * is throttled which means it is only executed in the given interval.\n     * This mechanism is very useful for event handling: only in specified intervals\n     * the event should be handled (e.g. at resize of the browser window) to prevent flooding\n     * the handler with a large amounts of events.\n     * As default the <code>leading</code> and <code>trailing</code> calls are executed.\n     *\n     * @attachStatic{qxWeb, func.throttle}\n     * @signature function (callback, interval, options)\n     * @param callback {Function} the callback which should be executed in the given interval\n     * @param interval {Number} Interval in milliseconds\n     * @param options {Map} the keys are <code>leading</code> and <code>trailing</code> to control the\n     * executing of the callback precisely. Default values are <code>true</code> for both options.\n     * @return {Function} a wrapper function which <em>shields</em> the given callback function\n     */\n    throttle: qx.util.Function.throttle\n  },\n\n  defer(statics) {\n    qxWeb.$attachAll(this, \"func\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,yBAAyB,EAAE;IAC7CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,EAAEN,EAAE,CAACO,IAAI,CAACC,QAAQ,CAACF,QAAQ;MAEnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,QAAQ,EAAET,EAAE,CAACO,IAAI,CAACC,QAAQ,CAACC;IAC7B,CAAC;IAEDC,KAAK,iBAACL,OAAO,EAAE;MACbM,KAAK,CAACC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC;IAChC;EACF,CAAC,CAAC;EAhEFZ,EAAE,CAACa,MAAM,CAACN,IAAI,CAACC,QAAQ,CAACL,aAAa,GAAGA,aAAa;AAAC"
}