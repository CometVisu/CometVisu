{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/module/Storage.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "setLocalItem",
    "key",
    "value",
    "bom",
    "Storage",
    "getLocal",
    "setItem",
    "getLocalItem",
    "getItem",
    "removeLocalItem",
    "removeItem",
    "getLocalLength",
    "getLength",
    "getLocalKey",
    "index",
    "getKey",
    "clearLocal",
    "clear",
    "forEachLocal",
    "callback",
    "scope",
    "forEach",
    "setSessionItem",
    "getSession",
    "getSessionItem",
    "removeSessionItem",
    "getSessionLength",
    "getSessionKey",
    "clearSession",
    "forEachSession",
    "defer",
    "qxWeb",
    "$attachStatic",
    "module"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This module offers a cross browser storage implementation. The API is aligned\n * with the API of the HTML web storage (http://www.w3.org/TR/webstorage/) which is\n * also the preferred implementation used. As fallback for IE < 8, we use user data.\n * If both techniques are unsupported, we supply a in memory storage, which is\n * of course, not persistent.\n */\nqx.Bootstrap.define(\"qx.module.Storage\", {\n  statics :\n  {\n    /**\n     * Store an item in the storage.\n     *\n     * @attachStatic {qxWeb, localStorage.setItem}\n     * @param key {String} The identifier key.\n     * @param value {var} The data, which will be stored as JSON.\n     */\n    setLocalItem : function(key, value) {\n      qx.bom.Storage.getLocal().setItem(key, value);\n    },\n\n\n    /**\n     * Returns the stored item.\n     *\n     * @attachStatic {qxWeb, localStorage.getItem}\n     * @param key {String} The identifier to get the data.\n     * @return {var} The stored data.\n     */\n    getLocalItem : function(key) {\n      return qx.bom.Storage.getLocal().getItem(key);\n    },\n\n\n    /**\n     * Removes an item form the storage.\n     * @attachStatic {qxWeb, localStorage.removeItem}\n     * @param key {String} The identifier.\n     */\n    removeLocalItem : function(key) {\n      qx.bom.Storage.getLocal().removeItem(key);\n    },\n\n\n    /**\n     * Returns the amount of key-value pairs stored.\n     * @attachStatic {qxWeb, localStorage.getLength}\n     * @return {Number} The length of the storage.\n     */\n    getLocalLength : function() {\n      return qx.bom.Storage.getLocal().getLength();\n    },\n\n\n    /**\n     * Returns the named key at the given index.\n     * @attachStatic {qxWeb, localStorage.getKey}\n     * @param index {Number} The index in the storage.\n     * @return {String} The key stored at the given index.\n     */\n    getLocalKey : function(index) {\n      return qx.bom.Storage.getLocal().getKey(index);\n    },\n\n\n    /**\n     * Deletes every stored item in the storage.\n     * @attachStatic {qxWeb, localStorage.clear}\n     */\n    clearLocal : function() {\n      qx.bom.Storage.getLocal().clear();\n    },\n\n\n    /**\n     * Helper to access every stored item.\n     *\n     * @attachStatic {qxWeb, localStorage.forEach}\n     * @param callback {Function} A function which will be called for every item.\n     *   The function will have two arguments, first the key and second the value\n     *    of the stored data.\n     * @param scope {var} The scope of the function.\n     */\n    forEachLocal : function(callback, scope) {\n      qx.bom.Storage.getLocal().forEach(callback, scope);\n    },\n\n\n    /**\n     * Store an item in the storage.\n     *\n     * @attachStatic {qxWeb, sessionStorage.setItem}\n     * @param key {String} The identifier key.\n     * @param value {var} The data, which will be stored as JSON.\n     */\n    setSessionItem : function(key, value) {\n      qx.bom.Storage.getSession().setItem(key, value);\n    },\n\n\n    /**\n     * Returns the stored item.\n     *\n     * @attachStatic {qxWeb, sessionStorage.getItem}\n     * @param key {String} The identifier to get the data.\n     * @return {var} The stored data.\n     */\n    getSessionItem : function(key) {\n      return qx.bom.Storage.getSession().getItem(key);\n    },\n\n\n    /**\n     * Removes an item form the storage.\n     * @attachStatic {qxWeb, sessionStorage.removeItem}\n     * @param key {String} The identifier.\n     */\n    removeSessionItem : function(key) {\n      qx.bom.Storage.getSession().removeItem(key);\n    },\n\n\n    /**\n     * Returns the amount of key-value pairs stored.\n     * @attachStatic {qxWeb, sessionStorage.getLength}\n     * @return {Number} The length of the storage.\n     */\n    getSessionLength : function() {\n      return qx.bom.Storage.getSession().getLength();\n    },\n\n\n    /**\n     * Returns the named key at the given index.\n     * @attachStatic {qxWeb, sessionStorage.getKey}\n     * @param index {Number} The index in the storage.\n     * @return {String} The key stored at the given index.\n     */\n    getSessionKey : function(index) {\n      return qx.bom.Storage.getSession().getKey(index);\n    },\n\n\n    /**\n     * Deletes every stored item in the storage.\n     * @attachStatic {qxWeb, sessionStorage.clear}\n     */\n    clearSession : function() {\n      qx.bom.Storage.getSession().clear();\n    },\n\n\n    /**\n     * Helper to access every stored item.\n     *\n     * @attachStatic {qxWeb, sessionStorage.forEach}\n     * @param callback {Function} A function which will be called for every item.\n     *   The function will have two arguments, first the key and second the value\n     *    of the stored data.\n     * @param scope {var} The scope of the function.\n     */\n    forEachSession : function(callback, scope) {\n      qx.bom.Storage.getSession().forEach(callback, scope);\n    }\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attachStatic({\n      \"localStorage\" : {\n        setItem : statics.setLocalItem,\n        getItem : statics.getLocalItem,\n        removeItem : statics.removeLocalItem,\n        getLength : statics.getLocalLength,\n        getKey : statics.getLocalKey,\n        clear : statics.clearLocal,\n        forEach : statics.forEachLocal\n      },\n      \"sessionStorage\" : {\n        setItem : statics.setSessionItem,\n        getItem : statics.getSessionItem,\n        removeItem : statics.removeSessionItem,\n        getLength : statics.getSessionLength,\n        getKey : statics.getSessionKey,\n        clear : statics.clearSession,\n        forEach : statics.forEachSession\n      }\n    });\n  }\n});"
  ]
}