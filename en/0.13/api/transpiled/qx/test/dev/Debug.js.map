{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MRequirements",
    "members",
    "hasDisposeDebug",
    "testDisposeProfilingCheckFunction",
    "require",
    "n",
    "core",
    "Object",
    "ignoreHash",
    "toHashCode",
    "checkFunction",
    "object",
    "o",
    "undisposed",
    "Debug",
    "stopDisposeProfiling",
    "assertArray",
    "assertEquals",
    "length",
    "stackOk",
    "assertMatch",
    "stackTrace",
    "join",
    "classname",
    "dispose",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/dev/Debug.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.dev.Debug\", {\n  extend: qx.dev.unit.TestCase,\n  include: [qx.dev.unit.MRequirements],\n\n  members: {\n    hasDisposeDebug() {\n      return qx.core.Environment.get(\"qx.debug.dispose\");\n    },\n\n    testDisposeProfilingCheckFunction() {\n      this.require([\"disposeDebug\"]);\n\n      var n = new qx.core.Object();\n      var ignoreHash = n.toHashCode();\n      var checkFunction = function (object) {\n        if (object.toHashCode() == ignoreHash) {\n          return false;\n        }\n        return true;\n      };\n\n      var o = new qx.core.Object();\n      // no need to call startDisposeProfiling - the Testrunner did that already\n      var undisposed = qx.dev.Debug.stopDisposeProfiling(checkFunction);\n      this.assertArray(undisposed);\n      this.assertEquals(1, undisposed.length);\n      this.assertEquals(o, undisposed[0].object);\n      var stackOk = false;\n      this.assertMatch(undisposed[0].stackTrace.join(\" \"), this.classname);\n\n      n.dispose();\n      o.dispose();\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,MAAM,EAAEN,EAAE,CAACO,GAAG,CAACC,IAAI,CAACC,QAAQ;IAC5BC,OAAO,EAAE,CAACV,EAAE,CAACO,GAAG,CAACC,IAAI,CAACG,aAAa,CAAC;IAEpCC,OAAO,EAAE;MACPC,eAAe,WAAfA,eAAeA,CAAA,EAAG;QAChB;MACF,CAAC;MAEDC,iCAAiC,WAAjCA,iCAAiCA,CAAA,EAAG;QAClC,IAAI,CAACC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC;QAE9B,IAAIC,CAAC,GAAG,IAAIhB,EAAE,CAACiB,IAAI,CAACC,MAAM,CAAC,CAAC;QAC5B,IAAIC,UAAU,GAAGH,CAAC,CAACI,UAAU,CAAC,CAAC;QAC/B,IAAIC,aAAa,GAAG,SAAhBA,aAAaA,CAAaC,MAAM,EAAE;UACpC,IAAIA,MAAM,CAACF,UAAU,CAAC,CAAC,IAAID,UAAU,EAAE;YACrC,OAAO,KAAK;UACd;UACA,OAAO,IAAI;QACb,CAAC;QAED,IAAII,CAAC,GAAG,IAAIvB,EAAE,CAACiB,IAAI,CAACC,MAAM,CAAC,CAAC;QAC5B;QACA,IAAIM,UAAU,GAAGxB,EAAE,CAACO,GAAG,CAACkB,KAAK,CAACC,oBAAoB,CAACL,aAAa,CAAC;QACjE,IAAI,CAACM,WAAW,CAACH,UAAU,CAAC;QAC5B,IAAI,CAACI,YAAY,CAAC,CAAC,EAAEJ,UAAU,CAACK,MAAM,CAAC;QACvC,IAAI,CAACD,YAAY,CAACL,CAAC,EAAEC,UAAU,CAAC,CAAC,CAAC,CAACF,MAAM,CAAC;QAC1C,IAAIQ,OAAO,GAAG,KAAK;QACnB,IAAI,CAACC,WAAW,CAACP,UAAU,CAAC,CAAC,CAAC,CAACQ,UAAU,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAACC,SAAS,CAAC;QAEpElB,CAAC,CAACmB,OAAO,CAAC,CAAC;QACXZ,CAAC,CAACY,OAAO,CAAC,CAAC;MACb;IACF;EACF,CAAC,CAAC;EAjDFnC,EAAE,CAACoC,IAAI,CAAC7B,GAAG,CAACkB,KAAK,CAACtB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}