{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testCheckConstructor",
    "text",
    "test",
    "tool",
    "compiler",
    "jsdoc",
    "Parser",
    "parseComment",
    "assert",
    "lang",
    "Object",
    "equals",
    "testCheckParams",
    "parseJsDoc",
    "resolveType",
    "type",
    "console",
    "log",
    "body",
    "length",
    "testCheckIssue633",
    "testCheckRpc",
    "testCheckInlineMarkdown",
    "includes",
    "testHiResSyntax",
    "data",
    "Boolean",
    "testIgnore",
    "testCheckMarkdown",
    "testCheckInlineCode",
    "docComment",
    "testChecksJsdocParamParser",
    "parser",
    "ParamParser",
    "pdoc",
    "name",
    "parseCommand",
    "paramName",
    "description",
    "testChecksJsdocInlineCommentsAndUrls",
    "result"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/compiler/jsdoc/Parser.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n   * Henner Kollmann \n\n************************************************************************ */\n/**\n * test the parser\n */\nqx.Class.define(\"qx.test.compiler.jsdoc.Parser\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    testCheckConstructor() {\n      let text = `\n         /*\n         *************\n         constructor\n         *************\n         */\n      `;\n      var test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n      this.assert(qx.lang.Object.equals(test, {}));\n    },\n\n    testCheckParams() {\n      let text = `*\n         @param {String} json jsdoc style\n         @param json {String}   qooxdoo style\n    `;\n      var test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n      qx.tool.compiler.jsdoc.Parser.parseJsDoc(test, {\n        resolveType: type => type\n      });\n      console.log(test[\"@description\"][0].body);\n      this.assert(test[\"@description\"][0].body === \"\");\n      this.assert(test[\"@param\"].length === 2);\n    },\n\n    testCheckIssue633() {\n      {\n        let text = `*\n        // [Constructor]\n        `;\n        var test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n        console.log(test[\"@description\"][0].body);\n        this.assert(test[\"@description\"][0].body === \"\");\n      }\n      {\n        let text = `\n         *\n         * Create an editor instance\n         * \n         * [Constructor]\n         * \n         * @return {Object}\n         *\n        `;\n        test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n        console.log(test[\"@description\"][0].body);\n        this.assert(test[\"@description\"][0].body !== \"\");\n      }\n    },\n\n    testCheckRpc() {\n      let text = `\n       * <p>This namespace provides an API implementing the\n       * <a href=\"https://www.jsonrpc.org/specification\">JSON Remote Procedure Call (JSON-RPC) version 2 specification</a>\n       * </p>\n       * <p>JSON-RPC v2 is transport-agnostic. We provide a high-level\n       * API interface (qx.io.jsonrpc.Client), a transport interface\n       * (qx.io.jsonrpc.transport.ITransport) and an HTTP transport implementation.\n       * Other transports based on websockets or other mechanisms can be added later.\n       * </p>\n       * Here is an example:\n       *\n       * <pre class=\"javascript\">\n       * (async()=>{\n       *   const client = new qx.io.jsonrpc.Client(\"https://domain.com/endpoint\");\n       *   let result;\n       *   try {\n       *     client.sendNotification(\"other_method\", [1,2,3]); // notifications are \"fire & forget\"\n       *     result = await client.sendRequest(\"other_method\", [1,2,3]);\n       *   } catch(e) {\n       *     // handle exceptions\n       *   }\n       * })();\n       * </pre>\n       *\n       * or using a batch:\n       *\n       * <pre class=\"javascript\">\n       * (async()=>{\n       *   const client = new qx.io.jsonrpc.Client(\"https://domain.com/endpoint\");\n       *   const batch = new qx.io.jsonrpc.protocol.Batch()\n       *     .add(new qx.io.jsonrpc.protocol.Request(\"method3\", [1,2,3]))\n       *     .addNotification(\"method4\") // or shorthand method\n       *    .addRequest(\"method5\",[\"foo\", \"bar\"]) // positional parameters\n       *     .addRequest(\"method6\", {foo:\"bar\"}); // named parameters\n       *   let results;\n       *   try {\n       *     results = await client.sendBatch(batch);\n       *     // results will be an array with three items, the result of the requests\n       *   } catch(e) {\n       *     // handle exceptions\n       *   }\n       * })();\n       * </pre>\n       *\n       * The high-level Client API does not handle transport-specific issues like\n       * authentication - this needs to be done in the transport layer. For example,\n       * to use HTTP Bearer authentication, do this:\n       * <pre class=\"javascript\">\n       * const client = new qx.io.jsonrpc.Client(\"https://domain.com/endpoint\");\n       * const auth = new qx.io.request.authentication.Bearer(\"TOKEN\");\n       * client.getTransportImpl().setAuthentication(auth);\n       * client.sendRequest(\"method-needing-authentication\", [1,2,3]);\n       * </pre>\n       *\n       * If you need a client with a customized transport often, we recommend\n       * to create a class that inherits from the client class, override\n       * the methods which are needed to produce that custom behavior (such\n       * as {@link qx.io.jsonrpc.transport.Http#_createTransportImpl},\n       * and provide a <pre class=\"javascript\">defer</pre> section which registers\n       * the behavior for your particular class of URIs:\n       *\n       * <pre class=\"javascript\">\n       * defer() {\n       *   qx.io.jsonrpc.Client.registerTransport(/^http/, my.custom.Transport);\n       * }\n       * </pre>\n       *\n       * The client will always use the transport that was last registered for\n       * a certain endpoint pattern, i.e. from then on, all clients created\n       * with urls that start with \"http\" will use that custom behavior.\n       *\n       */\n      `;\n      var test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n      console.log(test[\"@description\"][0].body);\n      this.assert(test[\"@description\"][0].body !== \"\");\n    },\n\n    testCheckInlineMarkdown() {\n      let text = `\n    * *strong*\n    * __emphasis__\n    * {@link Resource}     -> link?\n    * @ignore(qx.*)\n    `;\n      var test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n      console.log(test[\"@description\"][0].body);\n      this.assert(test[\"@description\"][0].body !== \"\");\n      this.assert(test[\"@description\"][0].body.includes(\"<strong>\"));\n      this.assert(test[\"@description\"][0].body.includes(\"<em>\"));\n      this.assert(test[\"@ignore\"].length === 1);\n    },\n\n    testHiResSyntax() {\n      let data = qx.tool.compiler.jsdoc.Parser.parseComment(\n        \" *\\n\" +\n          \" * @asset(qx/test/webfonts/fontawesome-webfont.*)\\n\" +\n          \" * @asset(qx/icon/Tango/48/places/folder.png)\\n\" +\n          \" * @asset(qx/icon/Tango/32/places/folder.png)\\n\" +\n          \" * @asset(qx/static/blank.gif)\\n\" +\n          \" * @asset(qx/static/drawer.png)\\n\" +\n          \" * @asset(qx/static/drawer@2x.png)\"\n      );\n\n      this.assert(Boolean(data[\"@asset\"] && data[\"@asset\"].length == 6));\n    },\n\n    testIgnore() {\n      let text = `*\n     @ignore(process.*)\n     @ignore(global.*)\n     @ignore(Symbol.*)\n     @ignore(chrome.*)\n     \n    */ \n    `;\n      var test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n      console.log(test[\"@description\"][0].body);\n      this.assert(test[\"@description\"][0].body === \"\");\n      this.assert(test[\"@ignore\"].length === 4);\n    },\n\n    testCheckMarkdown() {\n      let text = `\n    *\n    * The \\`qx.bom.rest\\` package consists of only one class: {@link Resource}.\n    *\n    * {@link Resource} allows to encapsulate the specifics of a REST interface.\n    * Rather than requesting URLs with a specific HTTP method manually, a resource\n    * representing the remote resource is instantiated and actions are invoked on this resource.\n    * A resource with its actions can be configured declaratively or programmatically.\n    *\n    * There is also {@link qx.io.rest.Resource} which uses {@link Resource} under the hood.\n    * The main differences between them are:\n    *\n    * * The event object available in the listeners (e.g. \\`success()\\`, \\`getSuccess()\\` and \\`getError()\\`) is\n    *   a native JavaScript object instead of a qooxdoo object ({@link qx.event.type.Rest}):\n    * ** See {@link qx.io.rest.Resource} vs. {@link Resource}\n    * ** \\`event.getId()\\` => \\`event.id\\`\n    * ** \\`event.getRequest()\\` => \\`event.request\\`\n    * ** \\`event.getAction()\\` => \\`event.action\\`\n    * ** \\`event.getData()\\` => \\`event.response\\`\n    * ** \\`event.getPhase()\\` => @---@ (see below)\n    * * Methods which allow request manipulation (e.g. \\`configureRequest()\\`) will operate on an\n    *   instance of {@link qx.bom.request.SimpleXhr} instead of {@link qx.io.request.Xhr}\n    *   (their API is similar but not identical)\n    * * The method \\`poll()\\` returns no {@link qx.event.Timer} object. There are two new methods\n    *   (\\`stopPollByAction()\\` and \\`restartPollByAction()\\`) available at {@link Resource}\n    *   which replace the functionality provided by the Timer object.\n    * * The phase support, which is a more elaborate version of readyState, is not available.\n    *   So use readyState instead.\n    * ** Phases (available only in {@link qx.io.rest.Resource}):\n    * *** \\`unsent\\`, \\`opened\\`, \\`sent\\`, \\`loading\\`, \\`load\\`, \\`success\\`\n    * *** \\`abort\\`, \\`timeout\\`, \\`statusError\\`\n    * ** readyState (available in {@link Resource} and {@link qx.io.rest.Resource}):\n    * *** \\`UNSENT\\`\n    * *** \\`OPENED\\`\n    * *** \\`HEADERS_RECEIVED\\`\n    * *** \\`LOADING\\`\n    * *** \\`DONE\\`  \n        `;\n      var test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n      console.log(test[\"@description\"][0].body);\n      this.assert(test[\"@description\"][0].body !== \"\");\n      this.assert(test[\"@description\"][0].body.includes(\"<code>\"));\n      this.assert(test[\"@description\"][0].body.includes(\"<ul>\"));\n      this.assert(test[\"@description\"][0].body.includes(\"<li>\"));\n    },\n\n    testCheckInlineCode() {\n      let text = `\n      * // Start a 5-second recurrent timer.\n      * @require(qx.event.type.Pointer) TEST // load-time dependency for early native events\n      `;\n      var test = qx.tool.compiler.jsdoc.Parser.parseComment(text);\n      console.log(test[\"@description\"][0].body);\n      this.assert(test[\"@description\"][0].body === \"\");\n      console.log(test[\"@require\"][0].body);\n      this.assert(test[\"@require\"][0].body !== \"\");\n      console.log(test[\"@require\"][0].docComment);\n      this.assert(test[\"@require\"][0].docComment !== \"\");\n    },\n\n    testChecksJsdocParamParser() {\n      var parser = new qx.tool.compiler.jsdoc.ParamParser();\n      var pdoc = {\n        name: \"@param\",\n        body: \"value {Boolean}, the new value of the widget\"\n      };\n\n      parser.parseCommand(pdoc, {\n        resolveType: type => type\n      });\n      delete pdoc.name;\n      delete pdoc.body;\n      this.assert(\n        qx.lang.Object.equals(pdoc, {\n          paramName: \"value\",\n          type: \"Boolean\",\n          description: \", the new value of the widget\"\n        })\n      );\n\n      pdoc = {\n        name: \"@param\",\n        body: \"cellInfo {Map}\\nInformation about the cell being renderered, including:\\n<ul>\\n<li>state</li>\\n<li>rowDiv</li>\\n<li>stylesheet</li>\\n<li>element</li>\\n<li>dataIndex</li>\\n<li>cellData</li>\\n<li>height</li>\\n</ul>\"\n      };\n\n      parser.parseCommand(pdoc, {\n        resolveType: type => type\n      });\n      delete pdoc.name;\n      delete pdoc.body;\n      this.assert(\n        qx.lang.Object.equals(pdoc, {\n          paramName: \"cellInfo\",\n          type: \"Map\",\n          description:\n            \"\\nInformation about the cell being renderered, including:\\n<ul>\\n<li>state</li>\\n<li>rowDiv</li>\\n<li>stylesheet</li>\\n<li>element</li>\\n<li>dataIndex</li>\\n<li>cellData</li>\\n<li>height</li>\\n</ul>\"\n        })\n      );\n    },\n\n    testChecksJsdocInlineCommentsAndUrls() {\n      let result;\n\n      result = qx.tool.compiler.jsdoc.Parser.parseComment(\n        `\n         * @ignore(abc,\n         *    def,\n         *    ghi)\n        `\n      );\n\n      this.assert(\n        qx.lang.Object.equals(result, {\n          \"@description\": [\n            {\n              name: \"@description\",\n              body: \"\"\n            }\n          ],\n\n          \"@ignore\": [\n            {\n              name: \"@ignore\",\n              body: \"abc,\\n    def,\\n    ghi\"\n            }\n          ]\n        })\n      );\n\n      result = qx.tool.compiler.jsdoc.Parser.parseComment(\n        `\n         * @ignore(abc, // abc comment\n         *    def, // def comment\n         *    ghi)\n        `\n      );\n\n      this.assert(\n        qx.lang.Object.equals(result, {\n          \"@description\": [\n            {\n              name: \"@description\",\n              body: \"\"\n            }\n          ],\n\n          \"@ignore\": [\n            {\n              name: \"@ignore\",\n              body: \"abc,\\n    def,\\n    ghi\"\n            }\n          ]\n        })\n      );\n\n      result = qx.tool.compiler.jsdoc.Parser.parseComment(`\n         * @ignore(stuff) // comment about ignore stuff\n         * http://abc.com // comment about url\n         * http://dev.com \n         * \n         `);\n      this.assert(\n        qx.lang.Object.equals(result, {\n          \"@description\": [\n            {\n              name: \"@description\",\n              body: \"\"\n            }\n          ],\n\n          \"@ignore\": [\n            {\n              name: \"@ignore\",\n              body: \"stuff\"\n            }\n          ]\n        })\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}