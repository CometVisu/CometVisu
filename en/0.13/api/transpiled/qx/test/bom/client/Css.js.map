{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testBorderImageSyntax",
    "styleName",
    "core",
    "Environment",
    "get",
    "RequirementError",
    "standardSyntax",
    "assertBoolean",
    "assertTrue",
    "assertFalse",
    "test",
    "bom",
    "client",
    "Css"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/bom/client/Css.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.bom.client.Css\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    testBorderImageSyntax() {\n      var styleName = qx.core.Environment.get(\"css.borderimage\");\n      if (typeof styleName !== \"string\") {\n        throw new qx.dev.unit.RequirementError(\"css.borderimage\");\n      }\n\n      var standardSyntax = qx.core.Environment.get(\n        \"css.borderimage.standardsyntax\"\n      );\n\n      this.assertBoolean(\n        standardSyntax,\n        \"Browser supports borderImage but \" + \"syntax type was not detected!\"\n      );\n\n      if (styleName == \"borderImage\") {\n        this.assertTrue(\n          standardSyntax,\n          \"Browser supports unprefixed borderImage \" +\n            \"but syntax type detected as non-standard!\"\n        );\n      } else {\n        this.assertFalse(\n          standardSyntax,\n          \"Browser supports prefixed borderImage \" +\n            \"but syntax type detected as standard!\"\n        );\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,wBAAwB,EAAE;IACxCC,MAAM,EAAEN,EAAE,CAACO,GAAG,CAACC,IAAI,CAACC,QAAQ;IAE5BC,OAAO,EAAE;MACPC,qBAAqB,WAArBA,qBAAqBA,CAAA,EAAG;QACtB,IAAIC,SAAS,GAAGZ,EAAE,CAACa,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,iBAAiB,CAAC;QAC1D,IAAI,OAAOH,SAAS,KAAK,QAAQ,EAAE;UACjC,MAAM,IAAIZ,EAAE,CAACO,GAAG,CAACC,IAAI,CAACQ,gBAAgB,CAAC,iBAAiB,CAAC;QAC3D;QAEA,IAAIC,cAAc,GAAGjB,EAAE,CAACa,IAAI,CAACC,WAAW,CAACC,GAAG,CAC1C,gCACF,CAAC;QAED,IAAI,CAACG,aAAa,CAChBD,cAAc,kEAEhB,CAAC;QAED,IAAIL,SAAS,IAAI,aAAa,EAAE;UAC9B,IAAI,CAACO,UAAU,CACbF,cAAc,qFAGhB,CAAC;QACH,CAAC,MAAM;UACL,IAAI,CAACG,WAAW,CACdH,cAAc,+EAGhB,CAAC;QACH;MACF;IACF;EACF,CAAC,CAAC;EApDFjB,EAAE,CAACqB,IAAI,CAACC,GAAG,CAACC,MAAM,CAACC,GAAG,CAACrB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}