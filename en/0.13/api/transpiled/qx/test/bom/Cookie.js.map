{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testSaveSimpleData",
    "key",
    "dataToSave",
    "result",
    "bom",
    "Cookie",
    "get",
    "assertNull",
    "set",
    "assertEquals",
    "del",
    "testSaveData",
    "key1",
    "key2",
    "dataToSave1",
    "dataToSave2",
    "result1",
    "result2",
    "testEncoding",
    "special",
    "utf",
    "escapedSpecial",
    "escape",
    "escapedUtf",
    "expectedSpecial",
    "unescape",
    "resultSpecial",
    "expectedUtf",
    "resultUtf",
    "escapedCookie",
    "document",
    "cookie",
    "join",
    "assertTrue",
    "decodeURIComponent",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/bom/Cookie.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.bom.Cookie\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    testSaveSimpleData() {\n      var key = \"qx.test.bom.Cookie.testSaveSimpleData\";\n      var dataToSave = \"Qooxdoo\";\n\n      // Check that no value exists\n      var result = qx.bom.Cookie.get(key);\n      this.assertNull(result, \"Empty check before start\");\n\n      // Set and restore value\n      qx.bom.Cookie.set(key, dataToSave);\n      result = qx.bom.Cookie.get(key);\n      this.assertEquals(\n        dataToSave,\n        result,\n        \"It is expected that this test fails\" +\n          \" if you start this test from a file system with Google Chrome.\"\n      );\n\n      // remove value\n      qx.bom.Cookie.del(key);\n      result = qx.bom.Cookie.get(key);\n      this.assertNull(result, \"Remove value\");\n    },\n\n    testSaveData() {\n      var key1 = \"qx.test.bom.Cookie.testSaveData2\";\n      var key2 = \"qx.test.bom.Cookie.testSaveData1\";\n      var dataToSave1 = \"Qooxdoo 1\";\n      var dataToSave2 = \"Qooxdoo 2\";\n\n      // Check that no values exist\n      var result1 = qx.bom.Cookie.get(key1);\n      var result2 = qx.bom.Cookie.get(key2);\n      this.assertNull(result1, \"Empty check before start (one)\");\n      this.assertNull(result2, \"Empty check before start (tow)\");\n\n      // Set and restore values\n      qx.bom.Cookie.set(key1, dataToSave1);\n      qx.bom.Cookie.set(key2, dataToSave2);\n      result1 = qx.bom.Cookie.get(key1);\n      result2 = qx.bom.Cookie.get(key2);\n      this.assertEquals(\n        dataToSave1,\n        result1,\n        \"It is expected that this test fails\" +\n          \" if you start this test from a file system with Google Chrome.\"\n      );\n\n      this.assertEquals(\n        dataToSave2,\n        result2,\n        \"It is expected that this test fails\" +\n          \" if you start this test from a file system with Google Chrome.\"\n      );\n\n      // remove values\n      qx.bom.Cookie.del(key1);\n      qx.bom.Cookie.del(key2);\n      result1 = qx.bom.Cookie.get(key1);\n      result2 = qx.bom.Cookie.get(key2);\n      this.assertNull(result1, \"Remove value (one)\");\n      this.assertNull(result2, \"Remove value (tow)\");\n    },\n\n    testEncoding() {\n      var special = \"~!@#$%^&*(){}[]=:/,;?+'\\\"\\\\\";\n      var utf = \"äëíöü\";\n\n      qx.bom.Cookie.set(\"special\", special);\n      qx.bom.Cookie.set(\"utf\", utf);\n\n      var escapedSpecial = escape(special);\n      var escapedUtf = escape(utf);\n\n      var expectedSpecial = unescape(escapedSpecial);\n      var resultSpecial = qx.bom.Cookie.get(\"special\");\n\n      var expectedUtf = unescape(escapedUtf);\n      var resultUtf = qx.bom.Cookie.get(\"utf\");\n\n      var escapedCookie = [\"manualEscaped\", \"=\", escapedUtf];\n      document.cookie = escapedCookie.join(\"\");\n\n      this.assertNull(qx.bom.Cookie.get(\"manualEscaped\"));\n\n      this.assertTrue(\n        decodeURIComponent(escapedSpecial) == unescape(escapedSpecial),\n        \"There is some incompatible characters.\"\n      );\n\n      // this.assertTrue((decodeURIComponent(escapedUtf) == unescape(escapedUtf)), 'There is some incompatible characters.');\n\n      this.assertEquals(\n        expectedSpecial,\n        resultSpecial,\n        \"There is some incompatible characters.\"\n      );\n\n      this.assertEquals(\n        expectedUtf,\n        resultUtf,\n        \"There is some incompatible characters.\"\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}