{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MMock",
    "MRequirements",
    "statics",
    "UNSENT",
    "OPENED",
    "HEADERS_RECEIVED",
    "LOADING",
    "DONE",
    "members",
    "fakedXhr",
    "fakeReqs",
    "req",
    "setUp",
    "fakeNativeXhr",
    "bom",
    "request",
    "Xhr",
    "tearDown",
    "getSandbox",
    "restore",
    "test_create_instance",
    "assertObject",
    "test_detect_native_XHR",
    "nativeXhr",
    "getRequest",
    "assertNotNull",
    "readyState",
    "test_open_request",
    "fakeReq",
    "getFakeReq",
    "spy",
    "url",
    "method",
    "open",
    "assertCalledWith",
    "test_open_request_throws_when_missing_arguments",
    "msg",
    "assertException",
    "Error",
    "test_open_async_request_on_default",
    "assertTrue",
    "args",
    "test_open_sync_request",
    "assertFalse",
    "test_open_request_with_username_and_password",
    "assertEquals",
    "test_set_request_header",
    "setRequestHeader",
    "test_send_with_data",
    "data",
    "send",
    "test_send_without_data",
    "test_abort_aborts_native_Xhr",
    "abort",
    "assertCalled",
    "test_abort_resets_readyState",
    "constructor",
    "test_call_event_handler",
    "onevent",
    "_emit",
    "test_fire_event",
    "event",
    "on",
    "test_responseText_set_before_onreadystatechange_is_called",
    "that",
    "onreadystatechange",
    "responseText",
    "responseHeaders",
    "test_emit_readystatechange_when_reopened",
    "stub",
    "respond",
    "test_ignore_onreadystatechange_when_readyState_is_unchanged",
    "assertCalledOnce",
    "test_native_onreadystatechange_is_disposed_once_DONE",
    "assertUndefined",
    "test_emit_load_on_successful_request",
    "_emitter",
    "emit",
    "callCount",
    "test_emit_abort",
    "test_emit_abort_before_loadend",
    "withArgs",
    "loadend",
    "assertCallOrder",
    "test_emit_timeout",
    "timeout",
    "wait",
    "test_not_emit_error_when_timeout",
    "core",
    "Environment",
    "get",
    "skip",
    "error",
    "assertNotCalled",
    "test_not_emit_error_when_aborted_immediately",
    "test_cancel_timeout_when_DONE",
    "ontimeout",
    "test_cancel_timeout_when_handler_throws",
    "e",
    "test_fire_loadend_when_request_complete",
    "test_set_readyState_appropriate_to_native_readyState",
    "test_responseText_is_empty_string_when_OPEN",
    "assertIdentical",
    "test_responseText_is_empty_string_when_reopened",
    "test_responseText_is_set_when_DONE",
    "test_query_responseText_when_available",
    "success",
    "state",
    "isIEBelow",
    "test_not_query_responseText_if_unavailable",
    "trap",
    "assertNotEquals",
    "test_responseXML_is_null_when_not_DONE",
    "assertNull",
    "responseXML",
    "test_responseXML_is_null_when_reopened",
    "test_responseXML_is_parsed_document_with_XML_response",
    "headers",
    "body",
    "test_http_status_is_0_when_UNSENT",
    "status",
    "test_http_status_is_0_when_OPENED",
    "test_http_status_is_0_when_aborted_immediately",
    "require",
    "test_http_status_when_DONE",
    "test_statusText_is_empty_string_when_UNSENT",
    "statusText",
    "test_statusText_is_set_when_DONE",
    "test_status_is_set_when_LOADING",
    "test_reset_status_when_reopened",
    "test_normalize_status_1223_to_204",
    "test_normalize_status_0_to_200_when_DONE_and_file_protocol",
    "returns",
    "test_keep_status_0_when_not_yet_DONE_and_file_protocol",
    "test_keep_status_0_when_DONE_with_network_error_and_file_protocol",
    "test_read_protocol_from_requested_URL_when_it_contains_protocol",
    "_getProtocol",
    "test_read_protocol_from_window_if_requested_URL_is_without_protocol",
    "assertMatch",
    "test_getResponseHeader",
    "setResponseHeaders",
    "key",
    "responseHeader",
    "getResponseHeader",
    "test_getAllResponseHeaders",
    "key1",
    "key2",
    "getAllResponseHeaders",
    "test_dispose_deletes_native_Xhr",
    "dispose",
    "test_dispose_aborts",
    "test_isDisposed",
    "isDisposed",
    "test_invoking_public_method_throws_when_disposed",
    "assertDisposedException",
    "lang",
    "Function",
    "bind",
    "callback",
    "useFakeXMLHttpRequest",
    "getRequests",
    "slice",
    "targetVersion",
    "name",
    "version",
    "isFFBelow",
    "parseFloat",
    "hasIEBelow9",
    "RequirementError",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/bom/request/Xhr.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.bom.request.Xhr\", {\n  extend: qx.dev.unit.TestCase,\n\n  include: [qx.dev.unit.MMock, qx.dev.unit.MRequirements],\n\n  statics: {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  },\n\n  members: {\n    /**\n     * The faked XMLHttpRequest.\n     */\n    fakedXhr: null,\n\n    /**\n     * Holds instances created by the faked XMLHttpRequest.\n     */\n    fakeReqs: null,\n\n    /**\n     * The request to test.\n     */\n    req: null,\n\n    setUp() {\n      this.fakeNativeXhr();\n      this.req = new qx.bom.request.Xhr();\n    },\n\n    tearDown() {\n      this.req = null;\n      this.getSandbox().restore();\n    },\n\n    //\n    // General\n    //\n\n    \"test: create instance\"() {\n      this.assertObject(this.req);\n    },\n\n    \"test: detect native XHR\"() {\n      var nativeXhr = this.req.getRequest();\n\n      this.assertObject(nativeXhr);\n      this.assertNotNull(nativeXhr.readyState);\n    },\n\n    //\n    // open()\n    //\n\n    \"test: open request\"() {\n      var fakeReq = this.getFakeReq();\n      this.spy(fakeReq, \"open\");\n\n      var url = \"/foo\";\n      var method = \"GET\";\n      this.req.open(method, url);\n\n      this.assertCalledWith(fakeReq.open, method, url);\n    },\n\n    \"test: open request throws when missing arguments\"() {\n      var req = this.req;\n      var msg = /Not enough arguments/;\n      this.assertException(\n        function () {\n          req.open();\n        },\n        Error,\n        msg\n      );\n\n      this.assertException(\n        function () {\n          req.open(\"GET\");\n        },\n        Error,\n        msg\n      );\n    },\n\n    \"test: open async request on default\"() {\n      var fakeReq = this.getFakeReq();\n      this.spy(fakeReq, \"open\");\n\n      this.req.open(null, null);\n      this.assertTrue(fakeReq.open.args[0][2], \"async must be true\");\n    },\n\n    \"test: open sync request\"() {\n      var fakeReq = this.getFakeReq();\n      this.spy(fakeReq, \"open\");\n\n      this.req.open(null, null, false);\n      this.assertFalse(fakeReq.open.args[0][2], \"async must be false\");\n    },\n\n    \"test: open request with username and password\"() {\n      var fakeReq = this.getFakeReq();\n      this.spy(fakeReq, \"open\");\n\n      this.req.open(null, null, null, \"affe\", \"geheim\");\n      this.assertEquals(\"affe\", fakeReq.open.args[0][3], \"Unexpected user\");\n      this.assertEquals(\n        \"geheim\",\n        fakeReq.open.args[0][4],\n        \"Unexpected password\"\n      );\n    },\n\n    //\n    // setRequestHeader()\n    //\n\n    \"test: set request header\"() {\n      var fakeReq = this.getFakeReq();\n      this.spy(fakeReq, \"setRequestHeader\");\n\n      // Request must be opened before request headers can be set\n      this.req.open(\"GET\", \"/\");\n\n      this.req.setRequestHeader(\"header\", \"value\");\n      this.assertCalledWith(fakeReq.setRequestHeader, \"header\", \"value\");\n    },\n\n    //\n    // send()\n    //\n\n    \"test: send() with data\"() {\n      var fakeReq = this.getFakeReq();\n      this.spy(fakeReq, \"send\");\n\n      var data = \"AFFE\";\n      this.req.open(\"GET\", \"/affe\");\n      this.req.send(data);\n\n      this.assertCalledWith(fakeReq.send, data);\n    },\n\n    // BUGFIXES\n\n    \"test: send() without data\"() {\n      var fakeReq = this.getFakeReq();\n      this.spy(fakeReq, \"send\");\n\n      this.req.open(\"GET\", \"/affe\");\n      this.req.send();\n\n      this.assertCalledWith(fakeReq.send, null);\n    },\n\n    //\n    // abort()\n    //\n\n    \"test: abort() aborts native Xhr\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n      this.spy(fakeReq, \"abort\");\n\n      req.abort();\n      this.assertCalled(fakeReq.abort);\n    },\n\n    \"test: abort() resets readyState\"() {\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      req.abort();\n\n      this.assertEquals(\n        this.constructor.UNSENT,\n        req.readyState,\n        \"Must be UNSENT\"\n      );\n    },\n\n    //\n    // Event helper\n    //\n\n    \"test: call event handler\"() {\n      var req = this.req;\n      req.onevent = this.spy();\n      req._emit(\"event\");\n      this.assertCalled(req.onevent);\n    },\n\n    \"test: fire event\"() {\n      var req = this.req;\n      var event = this.spy();\n      req.onevent = this.spy();\n      req.on(\"event\", event);\n      req._emit(\"event\");\n      this.assertCalled(event);\n    },\n\n    //\n    //\n    // onreadystatechange()\n    //\n\n    \"test: responseText set before onreadystatechange is called\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      var that = this;\n      req.onreadystatechange = function () {\n        that.assertEquals(\"Affe\", req.responseText);\n      };\n      fakeReq.responseText = \"Affe\";\n      fakeReq.readyState = 4;\n      fakeReq.responseHeaders = {};\n      fakeReq.onreadystatechange();\n    },\n\n    \"test: emit readystatechange when reopened\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n      this.stub(req, \"_emit\");\n\n      // Send and respond\n      req.open(\"GET\", \"/\");\n      req.send();\n      fakeReq.respond();\n\n      // Reopen\n      req.open(\"GET\", \"/\");\n\n      this.assertCalledWith(req._emit, \"readystatechange\");\n    },\n\n    // BUGFIXES\n\n    \"test: ignore onreadystatechange when readyState is unchanged\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n      this.spy(req, \"onreadystatechange\");\n\n      req.readyState = this.constructor.OPENED;\n      fakeReq.onreadystatechange();\n      fakeReq.onreadystatechange();\n\n      this.assertCalledOnce(req.onreadystatechange);\n    },\n\n    \"test: native onreadystatechange is disposed once DONE\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      req.onreadystatechange = function () {\n        return \"OP\";\n      };\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      fakeReq.respond();\n      this.assertUndefined(req.getRequest().onreadystatechange());\n    },\n\n    //\n    // onload()\n    //\n\n    \"test: emit load on successful request\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      this.stub(req._emitter, \"emit\");\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      // Status does not matter. Set a non-empty response for file:// workaround.\n      fakeReq.respond(200, {}, \"RESPONSE\");\n\n      this.assertCalledWith(req._emitter.emit, \"load\");\n      this.assertEquals(6, req._emitter.emit.callCount);\n    },\n\n    //\n    // onerror()\n    //\n    // See XhrWithBackend\n    //\n\n    //\n    // onabort()\n    //\n\n    \"test: emit abort\"() {\n      var req = this.req;\n\n      this.spy(req, \"_emit\");\n\n      req.open(\"GET\", \"/\");\n      req.send();\n      req.abort();\n\n      this.assertCalledWith(req._emit, \"abort\");\n    },\n\n    \"test: emit abort before loadend\"() {\n      var req = this.req;\n\n      var emit = this.stub(req, \"_emit\");\n      var abort = emit.withArgs(\"abort\");\n      var loadend = emit.withArgs(\"loadend\");\n\n      req.open(\"GET\", \"/\");\n      req.send();\n      req.abort();\n\n      this.assertCallOrder(abort, loadend);\n    },\n\n    //\n    // ontimeout()\n    //\n\n    \"test: emit timeout\"() {\n      var req = this.req,\n        that = this;\n\n      var timeout = this.stub(req, \"_emit\").withArgs(\"timeout\");\n\n      req.timeout = 10;\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      this.wait(\n        20,\n        function () {\n          this.assertCalledOnce(timeout);\n        },\n        this\n      );\n    },\n\n    \"test: not emit error when timeout\"() {\n      // Since Opera does not fire \"error\" on network error, fire additional\n      // \"error\" on timeout (may well be related to network error)\n      if (qx.core.Environment.get(\"engine.name\") === \"opera\") {\n        this.skip();\n      }\n\n      var req = this.req;\n\n      var error = this.stub(req, \"_emit\").withArgs(\"error\");\n\n      req.timeout = 10;\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      this.wait(\n        20,\n        function () {\n          this.assertNotCalled(error);\n        },\n        this\n      );\n    },\n\n    \"test: not emit error when aborted immediately\"() {\n      var req = this.req;\n\n      var error = this.stub(req, \"_emit\").withArgs(\"error\");\n\n      req.open(\"GET\", \"/\");\n      req.send();\n      req.abort();\n\n      this.assertNotCalled(error);\n    },\n\n    \"test: cancel timeout when DONE\"() {\n      var fakeReq = this.getFakeReq(),\n        req = this.req;\n\n      this.spy(req, \"ontimeout\");\n\n      req.timeout = 10;\n      req.open(\"GET\", \"/\");\n      req.send();\n      fakeReq.respond();\n\n      this.wait(\n        20,\n        function () {\n          this.assertNotCalled(req.ontimeout);\n        },\n        this\n      );\n    },\n\n    \"test: cancel timeout when handler throws\"() {\n      var fakeReq = this.getFakeReq(),\n        req = this.req;\n\n      this.spy(req, \"ontimeout\");\n\n      req.timeout = 10;\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      // Simulate error in handler for readyState DONE\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          // Throw only once\n          req.onreadystatechange = function () {};\n          throw new Error();\n        }\n      };\n\n      try {\n        fakeReq.respond();\n      } catch (e) {\n      } finally {\n        this.wait(\n          20,\n          function () {\n            this.assertNotCalled(req.ontimeout);\n          },\n          this\n        );\n      }\n    },\n\n    //\n    // onloadend()\n    //\n\n    \"test: fire loadend when request complete\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      var loadend = this.stub(req, \"_emit\").withArgs(\"loadend\");\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      // Status does not matter\n      fakeReq.respond();\n\n      this.assertCalled(loadend);\n    },\n\n    //\n    // Events\n    //\n\n    //\n    // readyState\n    //\n\n    \"test: set readyState appropriate to native readyState\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      // Created\n      this.assertEquals(this.constructor.UNSENT, req.readyState);\n\n      // Open\n      req.open(\"GET\", \"/affe\");\n      this.assertEquals(this.constructor.OPENED, req.readyState);\n\n      // Send (and receive)\n      req.send();\n      fakeReq.respond(this.constructor.DONE);\n      this.assertEquals(this.constructor.DONE, req.readyState);\n    },\n\n    //\n    // responseText\n    //\n\n    \"test: responseText is empty string when OPEN\"() {\n      this.req.open(\"GET\", \"/affe\");\n      this.assertIdentical(\"\", this.req.responseText);\n    },\n\n    \"test: responseText is empty string when reopened\"() {\n      var fakeReq = this.getFakeReq();\n\n      // Send and respond\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      req.send();\n      fakeReq.respond(200, { \"Content-Type\": \"text/html\" }, \"Affe\");\n\n      // Reopen\n      req.open(\"GET\", \"/elefant\");\n      this.assertIdentical(\"\", req.responseText);\n    },\n\n    \"test: responseText is set when DONE\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      req.open(\"GET\", \"/\");\n      req.send();\n      fakeReq.respond(200, { \"Content-Type\": \"text/html\" }, \"Affe\");\n\n      this.assertEquals(\"Affe\", req.responseText);\n    },\n\n    // BUGFIXES\n\n    \"test: query responseText when available\"() {\n      var that = this;\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      function success(state) {\n        // Stub and prepare success\n        fakeReq.readyState = state;\n        fakeReq.responseText = \"YIPPIE\";\n        fakeReq.responseHeaders = {};\n\n        // Trigger readystatechange handler\n        fakeReq.onreadystatechange();\n\n        that.assertEquals(\n          \"YIPPIE\",\n          req.responseText,\n          \"When readyState is \" + state\n        );\n      }\n\n      success(this.constructor.DONE);\n\n      // Assert responseText to be set when in progress\n      // in browsers other than IE < 9\n      if (!this.isIEBelow(9)) {\n        success(this.constructor.HEADERS_RECEIVED);\n        success(this.constructor.LOADING);\n      }\n    },\n\n    \"test: not query responseText if unavailable\"() {\n      var that = this;\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      function trap(state) {\n        // Stub and set trap\n        fakeReq.readyState = state;\n        fakeReq.responseText = \"BOGUS\";\n\n        // Trigger readystatechange handler\n        fakeReq.onreadystatechange();\n\n        that.assertNotEquals(\n          \"BOGUS\",\n          req.responseText,\n          \"When readyState is \" + state\n        );\n      }\n\n      if (this.isIEBelow(9)) {\n        trap(this.constructor.UNSENT);\n        trap(this.constructor.OPENED);\n        trap(this.constructor.HEADERS_RECEIVED);\n        trap(this.constructor.LOADING);\n      }\n    },\n\n    //\n    // responseXML\n    //\n\n    \"test: responseXML is null when not DONE\"() {\n      this.assertNull(this.req.responseXML);\n    },\n\n    \"test: responseXML is null when reopened\"() {\n      var fakeReq = this.getFakeReq();\n\n      // Send and respond\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      req.send();\n      fakeReq.respond(\n        200,\n        { \"Content-Type\": \"application/xml\" },\n        \"<affe></affe>\"\n      );\n\n      // Reopen\n      req.open(\"GET\", \"/\");\n      this.assertNull(req.responseXML);\n    },\n\n    \"test: responseXML is parsed document with XML response\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      var headers = { \"Content-Type\": \"application/xml\" };\n      var body = \"<animals><monkey/><mouse/></animals>\";\n      fakeReq.respond(200, headers, body);\n\n      this.assertObject(req.responseXML);\n    },\n\n    //\n    // status and statusText\n    //\n\n    \"test: http status is 0 when UNSENT\"() {\n      this.assertIdentical(0, this.req.status);\n    },\n\n    \"test: http status is 0 when OPENED\"() {\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n\n      this.assertIdentical(0, req.status);\n    },\n\n    \"test: http status is 0 when aborted immediately\"() {\n      this.require([\"http\"]);\n\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      req.send();\n      req.abort();\n\n      this.assertIdentical(0, req.status);\n    },\n\n    \"test: http status when DONE\"() {\n      var req = this.req;\n      var fakeReq = this.getFakeReq();\n      req.open(\"GET\", \"/\");\n      fakeReq.respond(200);\n\n      this.assertIdentical(200, req.status);\n    },\n\n    \"test: statusText is empty string when UNSENT\"() {\n      this.assertIdentical(\"\", this.req.statusText);\n    },\n\n    \"test: statusText is set when DONE\"() {\n      var fakeReq = this.getFakeReq();\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      fakeReq.respond(200);\n\n      this.assertIdentical(\"OK\", req.statusText);\n    },\n\n    \"test: status is set when LOADING\"() {\n      var fakeReq = this.getFakeReq();\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      fakeReq.readyState = this.constructor.LOADING;\n      fakeReq.status = 200;\n      fakeReq.responseHeaders = {};\n      fakeReq.onreadystatechange();\n\n      this.assertIdentical(200, req.status);\n    },\n\n    \"test: reset status when reopened\"() {\n      var fakeReq = this.getFakeReq();\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      fakeReq.respond(200);\n      req.open(\"GET\", \"/\");\n\n      this.assertIdentical(0, req.status);\n      this.assertIdentical(\"\", req.statusText);\n    },\n\n    // BUGFIXES\n\n    \"test: normalize status 1223 to 204\"() {\n      var fakeReq = this.getFakeReq();\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      req.send();\n      fakeReq.respond(1223);\n\n      this.assertIdentical(204, req.status);\n    },\n\n    \"test: normalize status 0 to 200 when DONE and file protocol\"() {\n      var fakeReq = this.getFakeReq();\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      this.stub(req, \"_getProtocol\").returns(\"file:\");\n      fakeReq.respond(0, {}, \"Response\");\n\n      this.assertEquals(200, req.status);\n    },\n\n    \"test: keep status 0 when not yet DONE and file protocol\"() {\n      var fakeReq = this.getFakeReq();\n      var req = this.req;\n      this.stub(req, \"_getProtocol\").returns(\"file:\");\n      req.open(\"GET\", \"/\");\n\n      fakeReq.readyState = 3;\n      fakeReq.onreadystatechange();\n\n      this.assertEquals(0, req.status);\n    },\n\n    \"test: keep status 0 when DONE with network error and file protocol\"() {\n      var fakeReq = this.getFakeReq();\n      var req = this.req;\n      req.open(\"GET\", \"/\");\n      req.send();\n\n      this.stub(req, \"_getProtocol\").returns(\"file:\");\n\n      // Indicate network error\n      fakeReq.readyState = 4;\n      fakeReq.responseText = \"\";\n      fakeReq.onreadystatechange();\n\n      this.assertEquals(0, req.status);\n    },\n\n    //\n    // _getProtocol()\n    //\n\n    \"test: read protocol from requested URL when it contains protocol\"() {\n      var req = this.req;\n      req.open(\"GET\", \"http://example.org/index.html\");\n\n      this.assertEquals(\"http:\", req._getProtocol());\n    },\n\n    \"test: read protocol from window if requested URL is without protocol\"() {\n      this.require([\"http\"]);\n\n      var req = this.req;\n      req.open(\"GET\", \"index.html\");\n\n      this.assertMatch(req._getProtocol(), /https?:/);\n    },\n\n    //\n    // getResponseHeader()\n    //\n\n    \"test: getResponseHeader()\"() {\n      var fakeReq = this.getFakeReq();\n      fakeReq.open();\n      fakeReq.setResponseHeaders({\n        key: \"value\"\n      });\n\n      var responseHeader = this.req.getResponseHeader(\"key\");\n      this.assertEquals(\"value\", responseHeader);\n    },\n\n    //\n    // getAllResponseHeaders()\n    //\n\n    \"test: getAllResponseHeaders()\"() {\n      var fakeReq = this.getFakeReq();\n      fakeReq.open();\n      fakeReq.setResponseHeaders({\n        key1: \"value1\",\n        key2: \"value2\"\n      });\n\n      var responseHeaders = this.req.getAllResponseHeaders();\n      this.assertMatch(responseHeaders, /key1: value1/);\n      this.assertMatch(responseHeaders, /key2: value2/);\n    },\n\n    //\n    // dispose()\n    //\n\n    \"test: dispose() deletes native Xhr\"() {\n      this.req.dispose();\n\n      this.assertNull(this.req.getRequest());\n    },\n\n    \"test: dispose() aborts\"() {\n      var req = this.req;\n\n      this.spy(req, \"abort\");\n      this.req.dispose();\n\n      this.assertCalled(req.abort);\n    },\n\n    \"test: isDisposed()\"() {\n      this.assertFalse(this.req.isDisposed());\n      this.req.dispose();\n      this.assertTrue(this.req.isDisposed());\n    },\n\n    \"test: invoking public method throws when disposed\"() {\n      var req = this.req;\n      var assertDisposedException = qx.lang.Function.bind(function (callback) {\n        this.assertException(\n          qx.lang.Function.bind(callback, this),\n          Error,\n          /Already disposed/\n        );\n      }, this);\n\n      this.req.dispose();\n      assertDisposedException(function () {\n        req.open(\"GET\", \"/\");\n      });\n      assertDisposedException(function () {\n        req.setRequestHeader();\n      });\n      assertDisposedException(function () {\n        req.send();\n      });\n      assertDisposedException(function () {\n        req.abort();\n      });\n      assertDisposedException(function () {\n        req.getResponseHeader();\n      });\n      assertDisposedException(function () {\n        req.getAllResponseHeaders();\n      });\n    },\n\n    fakeNativeXhr() {\n      this.fakedXhr = this.useFakeXMLHttpRequest();\n\n      // Reset pre-existing request so that it uses the faked XHR\n      if (this.req) {\n        this.req = new qx.bom.request.Xhr();\n      }\n    },\n\n    getFakeReq() {\n      return this.getRequests().slice(-1)[0];\n    },\n\n    isIEBelow(targetVersion) {\n      var name = qx.core.Environment.get(\"engine.name\");\n      var version = qx.core.Environment.get(\"engine.version\");\n\n      return name == \"mshtml\" && version < targetVersion;\n    },\n\n    isFFBelow(targetVersion) {\n      var name = qx.core.Environment.get(\"engine.name\");\n      var version = qx.core.Environment.get(\"browser.version\");\n\n      return name == \"gecko\" && parseFloat(version) < targetVersion;\n    },\n\n    hasIEBelow9() {\n      return this.isIEBelow(9);\n    },\n\n    skip(msg) {\n      throw new qx.dev.unit.RequirementError(null, msg);\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}