{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MRequirements",
    "MMock",
    "members",
    "setUp",
    "setUpDoubleRequest",
    "setUpResource",
    "bom",
    "request",
    "SimpleXhr",
    "restore",
    "req",
    "shallowStub",
    "injectStub",
    "__reqs",
    "push",
    "res",
    "dispose",
    "rest",
    "Resource",
    "map",
    "tearDown",
    "getSandbox",
    "forEach",
    "testConfigureRequestReceivesPreConfiguredButUnsentRequest",
    "configureRequest",
    "lang",
    "Function",
    "bind",
    "assertCalledWith",
    "setMethod",
    "assertCalled",
    "setUrl",
    "assertNotCalled",
    "send",
    "get",
    "testConfigureRequestReceivesInvocationDetails",
    "params",
    "data",
    "callback",
    "spy",
    "_action",
    "_params",
    "_data",
    "assertEquals",
    "testMapAction",
    "_getRequestConfig",
    "method",
    "url",
    "testMapActionWhenBaseURL",
    "setBaseUrl",
    "testMapExistingAction",
    "testMapActionCreatesMethod",
    "assertFunction",
    "testMapActionThrowsWhenExistingMethod",
    "require",
    "popular",
    "assertException",
    "Error",
    "testMapActionDoesNotThrowWhenExistingMethodIsEmpty",
    "testDynamicallyCreatedActionForwardsArguments",
    "invoke",
    "testDynamicallyCreatedActionReturnsWhatInvokeReturns",
    "id",
    "stub",
    "returns",
    "testMapActionsFromDescription",
    "description",
    "check",
    "create",
    "testMapActionFromDescriptionThrowsWithNonObject",
    "testMapActionFromDescriptionThrowsWithIncompleteRoute",
    "testInvokeActionGenerically",
    "result",
    "assertSend",
    "testInvokeAction",
    "testInvokeActionReturnsIdOfRequest",
    "toHashCode",
    "assertNumber",
    "testInvokeActionWhileOtherIsInProgress",
    "req1",
    "req2",
    "post",
    "assertCalledOnce",
    "testInvokeSameActionHandlesMultipleRequests",
    "getSuccess",
    "addListener",
    "respond",
    "assertCalledTwice",
    "testInvokeActionWithPositionalParams",
    "testInvokeActionWithPositionalParamsThatEvaluateToFalse",
    "testInvokeActionWithNonStringParams",
    "testInvokeActionWithParamsAndData",
    "put",
    "article",
    "setRequestData",
    "testInvokeActionWithMultiplePositionalParams",
    "commentId",
    "testInvokeActionWithPositionalParamsInQuery",
    "testInvokeActionWithUndefinedParams",
    "testInvokeActionWithNullParams",
    "testInvokeActionWhenContentTypeJson",
    "setRequestHeader",
    "getRequestHeader",
    "Json",
    "location",
    "stringify",
    "testInvokeActionWhenContentTypeJsonAndGet",
    "getMethod",
    "withArgs",
    "testInvokeActionForUrlWithPort",
    "testInvokeActionForRelativeUrl",
    "page",
    "testInvokeActionForRelativeUrlWithDots",
    "testInvokeActionForRouteWithCheck",
    "testInvokeActionFillsInEmptyStringWhenMissingParamAndNoDefault",
    "testInvokeActionFillsInDefaultWhenMissingParam",
    "size",
    "testInvokeActionThrowsWhenMissingRequiredPositionalParam",
    "tag",
    "REQUIRED",
    "testInvokeActionThrowsWhenMissingRequiredRequestParam",
    "photo",
    "testInvokeActionThrowsWhenParamNotMatchCheck",
    "testInvokeActionIgnoresInvalidCheckInProduction",
    "skip",
    "setting",
    "core",
    "Environment",
    "testAbortAction",
    "abort",
    "testAbortActionWhenMultipleRequests",
    "testAbortByActionId",
    "testRefreshAction",
    "refresh",
    "testRefreshActionReplayingPreviousParams",
    "testPollAction",
    "sandbox",
    "useFakeTimers",
    "poll",
    "clock",
    "tick",
    "testNotPollActionWhenNoResponseReceivedYet",
    "testPollActionImmediately",
    "undefined",
    "testPollActionSetsInitialParams",
    "testPollActionReplayingPreviousParams",
    "testPollActionRepeatedlyEndsPreviousTimer",
    "msg",
    "testPollManyActions",
    "testEndPollAction",
    "timer",
    "numCalled",
    "stopPollByAction",
    "testEndPollActionDoesNotEndPollingOfOtherAction",
    "testRestartPollAction",
    "restartPollByAction",
    "testLongPollAction",
    "responses",
    "e",
    "response",
    "longPoll",
    "respondSubsequent",
    "assertArrayEquals",
    "testThrottleLongPoll",
    "value",
    "i",
    "testNotThrottleLongPollWhenNotReceivedWithinLimit",
    "testNotThrottleLongPollWhenNotReceivedSubsequently",
    "j",
    "assertCallCount",
    "testEndLongPollAction",
    "handlerId",
    "removeListenerById",
    "testFireActionSuccess",
    "that",
    "assertEventFired",
    "assertIdentical",
    "action",
    "testFireSuccess",
    "testFireActionError",
    "respondError",
    "testFireError",
    "testFireStarted",
    "listener",
    "on",
    "window",
    "setTimeout",
    "resume",
    "assertTrue",
    "calledOnce",
    "wait",
    "testDisposeRequests",
    "testDisposeRequestsOfSameAction",
    "testDisposeRequestOnLoadEnd",
    "isDone",
    "getResponse",
    "emit",
    "reqIdx",
    "shouldStubResp",
    "validReqIdx",
    "requests",
    "Object",
    "keys",
    "propName",
    "indexOf",
    "Type",
    "isArray",
    "isObject",
    "reqWithin",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/bom/rest/Resource.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * @asset(qx/test/xmlhttp/*)\n */\nqx.Class.define(\"qx.test.bom.rest.Resource\", {\n  extend: qx.dev.unit.TestCase,\n\n  include: [qx.dev.unit.MRequirements, qx.dev.unit.MMock],\n\n  members: {\n    setUp() {\n      this.setUpDoubleRequest();\n      this.setUpResource();\n    },\n\n    setUpDoubleRequest() {\n      // Restore Xhr when wrapped before\n      if (typeof qx.bom.request.SimpleXhr.restore == \"function\") {\n        qx.bom.request.SimpleXhr.restore();\n      }\n\n      var req = (this.req = new qx.bom.request.SimpleXhr());\n\n      // Stub request methods, but\n      // - leave event system intact (addListenerOnce)\n      // - leave disposable intact, cause test methods stub it themselves (dispose)\n      req = this.shallowStub(req, qx.bom.request.SimpleXhr, [\n        \"dispose\",\n        \"addListenerOnce\",\n        \"getTransport\"\n      ]);\n\n      // Inject double and return\n      this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n\n      // Remember request for later disposal\n      this.__reqs = this.__reqs || [];\n      this.__reqs.push(this.req);\n\n      return req;\n    },\n\n    setUpResource() {\n      this.res && this.res.dispose();\n      var res = (this.res = new qx.bom.rest.Resource());\n\n      // Default routes\n      res.map(\"get\", \"GET\", \"/photos\");\n      res.map(\"post\", \"POST\", \"/photos\");\n    },\n\n    tearDown() {\n      this.getSandbox().restore();\n      this.res.dispose();\n      this.__reqs.forEach(function (req) {\n        req.dispose();\n      });\n    },\n\n    //\n    // Configuration\n    //\n\n    \"test: configure request receives pre-configured but unsent request\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.configureRequest(\n        qx.lang.Function.bind(function (req) {\n          this.assertCalledWith(req.setMethod, \"GET\");\n          this.assertCalled(req.setUrl);\n          this.assertNotCalled(req.send);\n        }, this)\n      );\n\n      res.get();\n    },\n\n    \"test: configure request receives invocation details\"() {\n      var res = this.res,\n        req = this.req,\n        params = {},\n        data = {},\n        callback;\n\n      callback = this.spy(\n        qx.lang.Function.bind(function (req, _action, _params, _data) {\n          this.assertEquals(\"get\", _action, \"Unexpected action\");\n          this.assertEquals(params, _params, \"Unexpected params\");\n          this.assertEquals(data, _data, \"Unexpected data\");\n        }, this)\n      );\n\n      res.configureRequest(callback);\n\n      res.get(params, data);\n      this.assertCalled(callback);\n    },\n\n    //\n    // Route\n    //\n\n    \"test: map action\"() {\n      var res = this.res,\n        params;\n\n      params = res._getRequestConfig(\"get\");\n\n      this.assertEquals(\"GET\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n    },\n\n    \"test: map action when base URL\"() {\n      var res = this.res,\n        params;\n\n      res.setBaseUrl(\"http://example.com\");\n      params = res._getRequestConfig(\"get\");\n\n      this.assertEquals(\"http://example.com/photos\", params.url);\n    },\n\n    \"test: map existing action\"() {\n      var res = this.res,\n        params;\n\n      res.map(\"post\", \"GET\", \"/articles\");\n      params = res._getRequestConfig(\"post\");\n\n      this.assertEquals(\"/articles\", params.url);\n    },\n\n    \"test: map action creates method\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.assertFunction(res.get);\n    },\n\n    \"test: map action throws when existing method\"() {\n      this.require([\"debug\"]);\n\n      var res = this.res,\n        req = this.req;\n\n      // For whatever reason\n      res.popular = function () {};\n\n      this.assertException(function () {\n        res.map(\"popular\", \"GET\", \"/photos/popular\");\n      }, Error);\n    },\n\n    \"test: map action does not throw when existing method is empty\"() {\n      this.require([\"debug\"]);\n\n      var res = this.res,\n        req = this.req;\n\n      // For documentation purposes\n      res.get = function () {};\n\n      res.map(\"get\", \"GET\", \"/photos/popular\");\n    },\n\n    \"test: dynamically created action forwards arguments\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.spy(res, \"invoke\");\n      res.get({}, 1, 2, 3);\n\n      this.assertCalledWith(res.invoke, \"get\", {}, 1, 2, 3);\n    },\n\n    \"test: dynamically created action returns what invoke returns\"() {\n      var id = 1;\n      this.stub(this.res, \"invoke\").returns(id);\n      this.assertEquals(id, this.res.get());\n    },\n\n    \"test: map actions from description\"() {\n      var req = this.req,\n        description,\n        res,\n        check = {},\n        params;\n\n      description = {\n        get: { method: \"GET\", url: \"/photos\" },\n        create: { method: \"POST\", url: \"/photos\", check: check }\n      };\n\n      res = new qx.bom.rest.Resource(description);\n\n      params = res._getRequestConfig(\"get\");\n      this.assertEquals(\"GET\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n\n      params = res._getRequestConfig(\"create\");\n      this.assertEquals(\"POST\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n      this.assertEquals(check, params.check);\n\n      res.dispose();\n    },\n\n    \"test: map action from description throws with non-object\"() {\n      this.require([\"debug\"]);\n\n      this.assertException(function () {\n        var res = new qx.bom.rest.Resource([]);\n      });\n    },\n\n    \"test: map action from description throws with incomplete route\"() {\n      this.require([\"debug\"]);\n\n      this.res.dispose();\n      this.assertException(\n        function () {\n          var description = {\n            get: { method: \"GET\" }\n          };\n\n          this.res = new qx.bom.rest.Resource(description);\n        },\n        Error,\n        \"URL must be string for route 'get'\"\n      );\n    },\n\n    //\n    // Invoke\n    //\n\n    \"test: invoke action generically\"() {\n      var res = this.res,\n        req = this.req,\n        result;\n\n      result = res.invoke(\"get\");\n\n      this.assertSend();\n    },\n\n    \"test: invoke action\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get();\n\n      this.assertSend();\n    },\n\n    \"test: invoke action returns id of request\"() {\n      var res = this.res,\n        req = this.req;\n\n      req.toHashCode.restore();\n\n      this.assertNumber(res.invoke(\"get\"));\n    },\n\n    \"test: invoke action while other is in progress\"() {\n      var res = this.res,\n        req1,\n        req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.post();\n\n      this.assertCalledOnce(req1.send);\n      this.assertCalledOnce(req2.send);\n    },\n\n    \"test: invoke same action handles multiple requests\"() {\n      var res = this.res,\n        req1,\n        req2,\n        getSuccess = this.spy();\n\n      res.addListener(\"getSuccess\", getSuccess);\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.get();\n\n      this.respond(\"\", req1);\n      this.respond(\"\", req2);\n\n      this.assertCalledTwice(getSuccess);\n    },\n\n    \"test: invoke action with positional params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: \"1\" });\n\n      this.assertCalledWith(req.setUrl, \"/photos/1\");\n    },\n\n    \"test: invoke action with positional params that evaluate to false\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: 0 });\n\n      this.assertCalledWith(req.setUrl, \"/photos/0\");\n    },\n\n    \"test: invoke action with non-string params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: 1 });\n\n      this.assertCalledWith(req.setUrl, \"/photos/1\");\n    },\n\n    \"test: invoke action with params and data\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"put\", \"PUT\", \"/articles/{id}\");\n      res.put({ id: \"1\" }, { article: '{title: \"Affe\"}' });\n\n      // Note that with method GET, parameters are appended to the URLs query part.\n      // Please refer to the API docs of qx.io.request.AbstractRequest#requestData.\n      //\n      // res.get({id: \"1\"}, {lang: \"de\"});\n      // --> /articles/1/?lang=de\n\n      this.assertCalledWith(req.setRequestData, { article: '{title: \"Affe\"}' });\n    },\n\n    \"test: invoke action with multiple positional params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}/comments/{commentId}\");\n      res.get({ id: \"1\", commentId: \"2\" });\n\n      this.assertCalledWith(req.setUrl, \"/photos/1/comments/2\");\n    },\n\n    \"test: invoke action with positional params in query\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}/comments?id={commentId}\");\n      res.get({ id: \"1\", commentId: \"2\" });\n\n      this.assertCalledWith(req.setUrl, \"/photos/1/comments?id=2\");\n    },\n\n    \"test: invoke action with undefined params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get();\n      this.assertCalled(req.send);\n    },\n\n    \"test: invoke action with null params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get(null);\n      this.assertCalled(req.send);\n    },\n\n    \"test: invoke action when content type json\"() {\n      var res = this.res,\n        req = this.req;\n\n      req.setRequestHeader.restore();\n      req.getRequestHeader.restore();\n\n      res.configureRequest(function (req) {\n        req.setRequestHeader(\"Content-Type\", \"application/json\");\n      });\n\n      this.spy(qx.lang.Json, \"stringify\");\n      var data = { location: \"Karlsruhe\" };\n      res.map(\"post\", \"POST\", \"/photos/{id}/meta\");\n      res.post({ id: 1 }, data);\n\n      this.assertCalledWith(req.setRequestData, '{\"location\":\"Karlsruhe\"}');\n      this.assertCalledWith(qx.lang.Json.stringify, data);\n    },\n\n    \"test: invoke action when content type json and get\"() {\n      var res = this.res,\n        req = this.req;\n\n      req.setMethod.restore();\n      req.getMethod.restore();\n\n      this.spy(qx.lang.Json, \"stringify\");\n      req.getRequestHeader.withArgs(\"Content-Type\").returns(\"application/json\");\n      res.get();\n\n      this.assertNotCalled(qx.lang.Json.stringify);\n    },\n\n    \"test: invoke action for url with port\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"http://example.com:8080/photos/{id}\");\n      res.get({ id: \"1\" });\n\n      this.assertCalledWith(req.setUrl, \"http://example.com:8080/photos/1\");\n    },\n\n    \"test: invoke action for relative url\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"{page}\");\n      res.get({ page: \"index\" });\n      this.assertCalledWith(req.setUrl, \"index\");\n    },\n\n    \"test: invoke action for relative url with dots\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"../{page}\");\n      res.get({ page: \"index\" });\n      this.assertCalledWith(req.setUrl, \"../index\");\n    },\n\n    \"test: invoke action for route with check\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/zoom/{id}\", { id: /\\d+/ });\n      res.get({ id: \"123\" });\n\n      this.assertSend(\"GET\", \"/photos/zoom/123\");\n    },\n\n    \"test: invoke action fills in empty string when missing param and no default\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{tag}\");\n      res.get();\n\n      this.assertSend(\"GET\", \"/photos/\");\n    },\n\n    \"test: invoke action fills in default when missing param\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{tag=recent}/{size}\");\n      res.get({ size: \"large\" });\n\n      this.assertSend(\"GET\", \"/photos/recent/large\");\n    },\n\n    \"test: invoke action throws when missing required positional param\"() {\n      var res = this.res;\n\n      // Require positional param\n      res.map(\"get\", \"GET\", \"/photos/{tag}\", {\n        tag: qx.bom.rest.Resource.REQUIRED\n      });\n\n      this.assertException(\n        function () {\n          res.get();\n        },\n        Error,\n        \"Missing parameter 'tag'\"\n      );\n    },\n\n    \"test: invoke action throws when missing required request param\"() {\n      var res = new qx.bom.rest.Resource();\n\n      // Require request body param\n      res.map(\"post\", \"POST\", \"/photos/\", {\n        photo: qx.bom.rest.Resource.REQUIRED\n      });\n\n      this.assertException(\n        function () {\n          res.post();\n        },\n        Error,\n        \"Missing parameter 'photo'\"\n      );\n    },\n\n    \"test: invoke action throws when param not match check\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\", { id: /\\d+/ });\n      this.assertException(\n        function () {\n          res.get({ id: \"FAIL\" });\n        },\n        Error,\n        \"Parameter 'id' is invalid\"\n      );\n    },\n\n    \"test: invoke action ignores invalid check in production\"() {\n      this.skip(\"needs runtime enviroment checks!\");\n\n      this.require([\"debug\"]);\n\n      var res = this.res;\n\n      var setting = this.stub(qx.core.Environment, \"get\").withArgs(\"qx.debug\");\n      setting.returns(false);\n\n      // Invalid check\n      res.map(\"get\", \"GET\", \"/photos/{id}\", { id: \"\" });\n      res.get({ id: 1 });\n    },\n\n    //\n    // Abort\n    //\n\n    \"test: abort action\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get();\n      res.abort(\"get\");\n\n      this.assertCalledOnce(req.abort);\n    },\n\n    \"test: abort action when multiple requests\"() {\n      var res = this.res,\n        req1,\n        req2;\n\n      req1 = this.setUpDoubleRequest();\n      res.get();\n\n      req2 = this.setUpDoubleRequest();\n      res.get();\n\n      res.abort(\"get\");\n\n      this.assertCalledOnce(req1.abort);\n      this.assertCalledOnce(req2.abort);\n    },\n\n    \"test: abort by action id\"() {\n      var res = this.res,\n        req = this.req;\n\n      req.toHashCode.restore();\n\n      var id = res.get();\n      res.abort(id);\n\n      this.assertCalledOnce(req.abort);\n    },\n\n    //\n    // Helper\n    //\n\n    \"test: refresh action\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get();\n      this.assertSend();\n\n      res.refresh(\"get\");\n      this.assertSend();\n    },\n\n    \"test: refresh action replaying previous params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: \"1\" });\n      this.assertSend(\"GET\", \"/photos/1\");\n\n      res.refresh(\"get\");\n      this.assertSend(\"GET\", \"/photos/1\");\n    },\n\n    \"test: poll action\"() {\n      var res = this.res,\n        sandbox = this.getSandbox();\n\n      sandbox.useFakeTimers();\n      this.spy(res, \"refresh\");\n\n      res.poll(\"get\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      this.assertCalledWith(res.refresh, \"get\");\n      this.assertCalledOnce(res.refresh);\n    },\n\n    \"test: not poll action when no response received yet\"() {\n      var res = this.res,\n        sandbox = this.getSandbox();\n\n      sandbox.useFakeTimers();\n      this.spy(res, \"refresh\");\n\n      res.poll(\"get\", 10);\n      sandbox.clock.tick(20);\n\n      this.assertNotCalled(res.refresh);\n    },\n\n    \"test: poll action immediately\"() {\n      var res = this.res;\n\n      this.spy(res, \"invoke\");\n      res.poll(\"get\", 10, undefined, true);\n      this.assertCalled(res.invoke);\n    },\n\n    \"test: poll action sets initial params\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      this.stub(res, \"invoke\");\n\n      res.poll(\"get\", 10, { id: \"1\" }, true);\n      this.assertCalledWith(res.invoke, \"get\", { id: \"1\" });\n    },\n\n    \"test: poll action replaying previous params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: \"1\" });\n      this.assertSend(\"GET\", \"/photos/1\");\n\n      res.poll(\"get\");\n      this.assertSend(\"GET\", \"/photos/1\");\n    },\n\n    \"test: poll action repeatedly ends previous timer\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        msg;\n\n      sandbox.useFakeTimers();\n      this.stub(res, \"refresh\");\n\n      res.poll(\"get\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      res.poll(\"get\", 100);\n      this.respond();\n      sandbox.clock.tick(100);\n\n      this.assertCalledTwice(res.refresh);\n    },\n\n    \"test: poll many actions\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        spy,\n        get,\n        post;\n\n      this.stub(this.req, \"dispose\");\n      sandbox.useFakeTimers();\n\n      spy = this.spy(res, \"refresh\");\n      get = spy.withArgs(\"get\");\n      post = spy.withArgs(\"post\");\n\n      res.poll(\"get\", 10);\n      res.poll(\"post\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      this.assertCalledOnce(get);\n      this.assertCalledOnce(post);\n\n      this.req.dispose.restore();\n      this.req.dispose();\n    },\n\n    \"test: end poll action\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        timer,\n        numCalled;\n\n      sandbox.useFakeTimers();\n\n      this.spy(res, \"refresh\");\n      res.poll(\"get\", 10);\n      this.respond();\n\n      // 10ms invoke, 20ms refresh, 30ms refresh\n      sandbox.clock.tick(30);\n      res.stopPollByAction(\"get\");\n      sandbox.clock.tick(100);\n\n      this.assertCalledTwice(res.refresh);\n    },\n\n    \"test: end poll action does not end polling of other action\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        timer,\n        spy;\n\n      sandbox.useFakeTimers();\n      spy = this.spy(res, \"refresh\").withArgs(\"get\");\n      this.respond();\n\n      res.poll(\"get\", 10);\n      res.poll(\"post\", 10);\n      sandbox.clock.tick(20);\n      res.stopPollByAction(\"post\");\n      sandbox.clock.tick(10);\n\n      this.assertCalledTwice(spy);\n    },\n\n    \"test: restart poll action\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        timer;\n\n      sandbox.useFakeTimers();\n      this.respond();\n\n      res.poll(\"get\", 10);\n      sandbox.clock.tick(10);\n      res.stopPollByAction(\"get\");\n\n      this.spy(res, \"refresh\");\n      res.restartPollByAction(\"get\");\n      sandbox.clock.tick(10);\n      this.assertCalled(res.refresh);\n    },\n\n    \"test: long poll action\"() {\n      var res = this.res,\n        req = this.req,\n        responses = [];\n\n      // undo this line from setUp() ...\n      // this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n      // ... in order to have unique reqs instead of always\n      //     the same stubbed req from the setUp method.\n      qx.bom.request.SimpleXhr.restore();\n\n      this.stub(req, \"dispose\");\n\n      res.addListener(\"getSuccess\", e => {\n        responses.push(e.response);\n      });\n\n      res.longPoll(\"get\");\n\n      // longPoll() sets up new request when receiving a response\n      this.respondSubsequent(\"1\", 0, true);\n      this.respondSubsequent(\"2\", 1, true);\n      this.respondSubsequent(\"3\", 2, true);\n\n      this.assertArrayEquals([\"1\", \"2\", \"3\"], responses);\n    },\n\n    \"test: throttle long poll\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.stub(req, \"dispose\");\n      this.spy(res, \"refresh\");\n      this.stub(qx.bom.rest.Resource, \"POLL_THROTTLE_COUNT\").value(\"3\");\n\n      res.longPoll(\"get\");\n\n      // A number of immediate responses, above count\n      for (var i = 0; i < 4; i++) {\n        this.respond();\n      }\n\n      res.refresh = function () {\n        throw new Error(\n          \"With throttling in effect, \" + \"must not make new request.\"\n        );\n      };\n\n      // Throttling\n      this.respond();\n    },\n\n    \"test: not throttle long poll when not received within limit\"() {\n      var res = this.res,\n        req = this.req,\n        sandbox = this.getSandbox();\n\n      // undo this line from setUp() ...\n      // this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n      // ... in order to have unique reqs instead of always\n      //     the same stubbed req from the setUp method.\n      qx.bom.request.SimpleXhr.restore();\n\n      this.stub(req, \"dispose\");\n\n      sandbox.useFakeTimers();\n      res.longPoll(\"get\");\n\n      // A number of delayed responses, above count\n      for (var i = 0; i < 31; i++) {\n        sandbox.clock.tick(101);\n        this.respondSubsequent(null, i);\n      }\n\n      this.spy(res, \"refresh\");\n      sandbox.clock.tick(101);\n\n      this.respondSubsequent(null, i);\n      this.assertCalled(res.refresh);\n    },\n\n    \"test: not throttle long poll when not received subsequently\"() {\n      var res = this.res,\n        req = this.req,\n        sandbox = this.getSandbox();\n\n      // undo this line from setUp() ...\n      // this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n      // ... in order to have unique reqs instead of always\n      //     the same stubbed req from the setUp method.\n      qx.bom.request.SimpleXhr.restore();\n\n      this.stub(req, \"dispose\");\n\n      sandbox.useFakeTimers();\n      res.longPoll(\"get\");\n\n      // A number of immediate responses\n      for (var i = 0; i < 30; i++) {\n        this.respondSubsequent(null, i);\n      }\n\n      // Delayed response\n      sandbox.clock.tick(101);\n      this.respondSubsequent(null, i++);\n\n      // // More immediate responses, total count above limit\n      this.spy(res, \"refresh\");\n      for (var j = 0; j < 10; j++) {\n        this.respondSubsequent(null, i + j);\n      }\n\n      this.assertCallCount(res.refresh, 10);\n    },\n\n    \"test: end long poll action\"() {\n      var res = this.res,\n        req = this.req,\n        handlerId,\n        msg;\n\n      // undo this line from setUp() ...\n      // this.injectStub(qx.bom.request, \"SimpleXhr\", req);\n      // ... in order to have unique reqs instead of always\n      //     the same stubbed req from the setUp method.\n      qx.bom.request.SimpleXhr.restore();\n\n      this.stub(req, \"dispose\");\n      this.spy(res, \"refresh\");\n\n      handlerId = res.longPoll(\"get\");\n\n      this.respondSubsequent(null, 0);\n      this.respondSubsequent(null, 1);\n\n      res.removeListenerById(handlerId);\n      this.respondSubsequent(null, 2);\n\n      this.assertCalledTwice(res.refresh);\n    },\n\n    //\n    // Events\n    //\n\n    \"test: fire actionSuccess\"() {\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      res.get();\n      this.assertEventFired(\n        res,\n        \"getSuccess\",\n        function () {\n          that.respond(\"Affe\");\n        },\n        function (e) {\n          that.assertEquals(\"Affe\", e.response);\n          that.assertIdentical(req, e.request);\n          that.assertEquals(\"get\", e.action);\n        }\n      );\n    },\n\n    \"test: fire success\"() {\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      res.get();\n      this.assertEventFired(\n        res,\n        \"success\",\n        function () {\n          that.respond(\"Affe\");\n        },\n        function (e) {\n          that.assertEquals(\"Affe\", e.response);\n          that.assertIdentical(req, e.request);\n          that.assertEquals(\"get\", e.action);\n        }\n      );\n    },\n\n    \"test: fire actionError\"() {\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      res.get();\n      this.assertEventFired(\n        res,\n        \"getError\",\n        function () {\n          that.respondError();\n        },\n        function (e) {\n          that.assertIdentical(req, e.request);\n          that.assertEquals(\"get\", e.action);\n        }\n      );\n    },\n\n    \"test: fire error\"() {\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      res.get();\n      this.assertEventFired(\n        res,\n        \"error\",\n        function () {\n          that.respondError();\n        },\n        function (e) {\n          that.assertIdentical(req, e.request);\n          that.assertEquals(\"get\", e.action);\n        }\n      );\n    },\n\n    \"test: fire started\"() {\n      qx.bom.request.SimpleXhr.restore();\n\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      var listener = this.spy();\n      res.on(\"started\", listener);\n      res.get();\n\n      window.setTimeout(\n        function () {\n          this.resume(function () {\n            this.assertTrue(listener.calledOnce);\n          }, this);\n        }.bind(this),\n        200\n      );\n\n      this.wait(500);\n    },\n\n    //\n    // Dispose\n    //\n\n    \"test: dispose requests\"() {\n      var res = this.res,\n        req1,\n        req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.post();\n\n      this.spy(req1, \"dispose\");\n      this.spy(req2, \"dispose\");\n\n      res.dispose();\n\n      this.assertCalled(req1.dispose);\n      this.assertCalled(req2.dispose);\n    },\n\n    \"test: dispose requests of same action\"() {\n      var res = this.res,\n        req1,\n        req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.get();\n\n      this.spy(req1, \"dispose\");\n      this.spy(req2, \"dispose\");\n\n      res.dispose();\n\n      this.assertCalled(req1.dispose);\n      this.assertCalled(req2.dispose);\n    },\n\n    \"test: dispose request on loadEnd\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.spy(req, \"dispose\");\n\n      res.get();\n      this.respond();\n\n      window.setTimeout(\n        function () {\n          this.resume(function () {\n            this.assertCalledOnce(req.dispose);\n          }, this);\n        }.bind(this),\n        100\n      );\n\n      this.wait(200);\n    },\n\n    assertSend(method, url) {\n      var req = this.req;\n\n      method = method || \"GET\";\n      url = url || \"/photos\";\n\n      this.assertCalledWith(req.setMethod, method);\n      this.assertCalledWith(req.setUrl, url);\n      this.assertCalled(req.send);\n    },\n\n    // Fake response\n    respond(response, req) {\n      req = req || this.req;\n      response = response || \"\";\n\n      req.isDone.returns(true);\n      req.getResponse.returns(response);\n      req.emit(\"success\");\n      req.emit(\"loadEnd\");\n    },\n\n    // Fake response but find and manipulate matching requests *within* res\n    // which is important for tests with more than one request (e.g. poll and long poll)\n    respondSubsequent(response, reqIdx, shouldStubResp) {\n      var response = response || \"\",\n        validReqIdx = reqIdx !== undefined;\n\n      // this.res.__requests isn't available after 'privates' optimization\n      // so find it by some kind of feature detection - this isn't beautiful,\n      // but adding a protected getter just for that is worse\n      var requests = \"\";\n      Object.keys(this.res).forEach(function (propName) {\n        if (\n          propName.indexOf(\"__\") === 0 &&\n          \"get\" in this.res[propName] &&\n          qx.lang.Type.isArray(this.res[propName].get) &&\n          qx.lang.Type.isObject(this.res[propName].get[0]) &&\n          \"$$hash\" in this.res[propName].get[0]\n        ) {\n          requests = propName;\n        }\n      }, this);\n\n      if (validReqIdx && requests) {\n        var reqWithin = this.res[requests].get[reqIdx];\n        if (shouldStubResp) {\n          this.stub(reqWithin, \"isDone\");\n          this.stub(reqWithin, \"getResponse\");\n          reqWithin.isDone.returns(true);\n          reqWithin.getResponse.returns(response);\n        }\n        reqWithin.emit(\"success\");\n        reqWithin.emit(\"loadEnd\");\n        this.res[requests].get[reqIdx] = reqWithin;\n      }\n    },\n\n    // Fake erroneous response\n    respondError() {\n      var req = this.req;\n      req.emit(\"fail\");\n      req.emit(\"loadEnd\");\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}