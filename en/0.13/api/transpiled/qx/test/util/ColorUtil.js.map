{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testRgbToRgbString",
    "assertEquals",
    "util",
    "ColorUtil",
    "rgbToRgbString",
    "testCssStringToRgb",
    "cssStringToRgb",
    "testHex3StringToHex6String",
    "hex3StringToHex6String",
    "rgbToHexString",
    "hexStringToRgb",
    "testRgbToHexString",
    "testStringToRgbString",
    "stringToRgbString",
    "testScale",
    "scale",
    "red",
    "green",
    "blue",
    "testAdjust",
    "adjust",
    "alpha",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/util/ColorUtil.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Jonathan Wei√ü (jonathan_rass)\n     * Christian Hagendorn (cs)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.util.ColorUtil\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    testRgbToRgbString() {\n      this.assertEquals(\n        \"rgba(255,0,0,1)\",\n        qx.util.ColorUtil.rgbToRgbString([255, 0, 0, 1])\n      );\n\n      this.assertEquals(\n        \"rgba(255,0,0,0.5)\",\n        qx.util.ColorUtil.rgbToRgbString([255, 0, 0, 0.5])\n      );\n\n      this.assertEquals(\n        \"rgba(255,0,0,0)\",\n        qx.util.ColorUtil.rgbToRgbString([255, 0, 0, 0])\n      );\n\n      this.assertEquals(\n        \"rgb(255,0,0)\",\n        qx.util.ColorUtil.rgbToRgbString([255, 0, 0])\n      );\n    },\n\n    testCssStringToRgb() {\n      this.assertEquals(\n        \"255,0,0\",\n        qx.util.ColorUtil.cssStringToRgb(\"rgba(255,0,0,1)\")\n      );\n\n      this.assertEquals(\n        \"201,23,120,0.3\",\n        qx.util.ColorUtil.cssStringToRgb(\"rgba(201,23,120,0.3)\")\n      );\n\n      this.assertEquals(\n        \"255,0,0\",\n        qx.util.ColorUtil.cssStringToRgb(\"rgb(255,0,0)\")\n      );\n\n      this.assertEquals(\n        \"201,23,120\",\n        qx.util.ColorUtil.cssStringToRgb(\"rgb(201,23,120)\")\n      );\n    },\n\n    testHex3StringToHex6String() {\n      this.assertEquals(\n        \"#FFFFFF\",\n        qx.util.ColorUtil.hex3StringToHex6String(\"#fff\")\n      );\n\n      this.assertEquals(\n        \"#ffff\",\n        qx.util.ColorUtil.hex3StringToHex6String(\"#ffff\")\n      );\n\n      this.assertEquals(\n        \"#ffffffe1\",\n        qx.util.ColorUtil.hex3StringToHex6String(\"#ffffffe1\")\n      );\n\n      this.assertEquals(\n        \"#FFFFFFA1\",\n        qx.util.ColorUtil.rgbToHexString(\n          qx.util.ColorUtil.hexStringToRgb(\"#ffFFffa1\")\n        )\n      );\n\n      this.assertEquals(\n        \"#FFFFFFEE\",\n        qx.util.ColorUtil.rgbToHexString(\n          qx.util.ColorUtil.hexStringToRgb(\"#fffe\")\n        )\n      );\n    },\n\n    testRgbToHexString() {\n      this.assertEquals(\n        \"#FFFFFF\",\n        qx.util.ColorUtil.rgbToHexString([255, 255, 255])\n      );\n\n      this.assertEquals(\n        \"#FFFFFF\",\n        qx.util.ColorUtil.rgbToHexString([255, 255, 255, 1])\n      );\n\n      this.assertEquals(\"#000000\", qx.util.ColorUtil.rgbToHexString([0, 0, 0]));\n      this.assertEquals(\n        \"#00000066\",\n        qx.util.ColorUtil.rgbToHexString([0, 0, 0, 0.4])\n      );\n    },\n\n    testStringToRgbString() {\n      this.assertEquals(\n        \"rgba(0,0,0,0.5)\",\n        qx.util.ColorUtil.stringToRgbString(\"rgba(0,0,0,0.5)\")\n      );\n\n      this.assertEquals(\n        \"rgb(-1,-1,-1)\",\n        qx.util.ColorUtil.stringToRgbString(\"rgba(0,0,0,0)\")\n      );\n\n      this.assertEquals(\n        \"rgba(11,0,0,0.5)\",\n        qx.util.ColorUtil.stringToRgbString(\"rgba(11,0,0,0.5)\")\n      );\n    },\n\n    testScale() {\n      this.assertEquals(\n        \"rgba(64,191.5,255,0.5)\",\n        qx.util.ColorUtil.scale(\"rgba(128,128,40,0.5)\", {\n          red: -50,\n          green: 50,\n          blue: 100\n        })\n      );\n    },\n    testAdjust() {\n      this.assertEquals(\n        \"rgba(65,193,33,0.6)\",\n        qx.util.ColorUtil.adjust(\"rgba(64,194,32,0.5)\", {\n          red: 1,\n          green: -1,\n          blue: 1,\n          alpha: 0.1\n        })\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}