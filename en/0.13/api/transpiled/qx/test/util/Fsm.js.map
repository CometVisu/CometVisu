{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testAddRemoveObject",
    "before",
    "intermediate",
    "after",
    "fsm",
    "obj",
    "obj2",
    "util",
    "FiniteStateMachine",
    "core",
    "Object",
    "lang",
    "Json",
    "stringify",
    "_getInternalData",
    "addObject",
    "removeObject",
    "assertEquals",
    "test",
    "Fsm"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/util/Fsm.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.util.Fsm\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    /**\n     * Ensure that objects added with fsm.addObject() get cleaned up properly\n     * by fsm.removeObject()\n     */\n    testAddRemoveObject() {\n      var before;\n      var intermediate;\n      var after;\n      var fsm;\n      var obj;\n      var obj2;\n\n      //\n      // Simple test: object with no groups\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add an object\n      fsm.addObject(\"obj\", obj);\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(\n        before,\n        after,\n        \"simple add/remove (\" + intermediate + \")\"\n      );\n\n      //\n      // Single group\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add an object\n      fsm.addObject(\"obj\", obj, \"group1\");\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before, after, \"single group (\" + intermediate + \")\");\n\n      //\n      // Multiple groups\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add an object\n      fsm.addObject(\"obj\", obj, [\"group1\", \"group2\"]);\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before, after, \"single group (\" + intermediate + \")\");\n\n      //\n      // Multiple objects in a single group\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n      obj2 = new qx.core.Object();\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add an object\n      fsm.addObject(\"obj\", obj, \"group1\");\n\n      // Add another object\n      fsm.addObject(\"obj2\", obj2, \"group1\");\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the second object\n      fsm.removeObject(\"obj2\");\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before, after, \"single group (\" + intermediate + \")\");\n\n      //\n      // Multiple objects in a single group, ensuring that state is correct\n      // after only one object is removed\n      //\n\n      // Instantiate a new machine and an object\n      fsm = new qx.util.fsm.FiniteStateMachine(\"testMachine\");\n      obj = new qx.core.Object();\n      obj2 = new qx.core.Object();\n\n      // Add an object\n      fsm.addObject(\"obj\", obj, \"group1\");\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for easy comparison later.\n      before = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Add another object\n      fsm.addObject(\"obj2\", obj2, \"group1\");\n\n      // Retrieve the internal data of the finite state machine.\n      // Convert it to JSON for display later, in case of error\n      intermediate = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the second object\n      fsm.removeObject(\"obj2\");\n\n      // Retrieve the internal data of the finite state machine\n      // Convert it to JSON for easy comparison with the before state\n      after = qx.lang.Json.stringify(fsm._getInternalData(), null, 2);\n\n      // Remove the object\n      fsm.removeObject(\"obj\");\n\n      // Ensure that there are no differences in internal state\n      this.assertEquals(before, after, \"single group (\" + intermediate + \")\");\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}