{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testIsCrossDomainReturnsTrueWithCrossDomainURL",
    "location",
    "window",
    "origin",
    "protocol",
    "host",
    "isCrossDomain",
    "util",
    "Request",
    "assertTrue",
    "hostname",
    "testIsCrossDomainReturnsFalseWithSameOriginURL",
    "assertFalse",
    "testIsSuccessfulReturnsTrueWithSuccessfulHTTPStatus",
    "isSuccessful",
    "testIsMethodReturnsTrueIfHTTPMethodIsKnown",
    "isMethod",
    "undefined",
    "testMethodAllowsRequestBodyReturnsFalseWhenGET",
    "methodAllowsRequestBody",
    "testMethodAllowsRequestBodyReturnsTrueWhenPOST",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/util/Request.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.util.Request\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    \"test: isCrossDomain() returns true with cross-domain URL\"() {\n      var location = window.location,\n        origin = location.protocol + \"//\" + location.host,\n        isCrossDomain = qx.util.Request.isCrossDomain;\n\n      this.assertTrue(isCrossDomain(\"http://cross.domain\"), \"cross\");\n      this.assertTrue(\n        isCrossDomain(location.protocol + \"//\" + location.hostname + \":123456\"),\n        \"port\"\n      );\n\n      this.assertTrue(\n        isCrossDomain(\"foobar\" + \"://\" + location.host),\n        \"protocol\"\n      );\n    },\n\n    \"test: isCrossDomain() returns false with same-origin URL\"() {\n      var location = window.location,\n        origin = location.protocol + \"//\" + location.host,\n        isCrossDomain = qx.util.Request.isCrossDomain;\n\n      this.assertFalse(isCrossDomain(origin));\n      this.assertFalse(isCrossDomain(\"data.json\"), \"simple url\");\n      this.assertFalse(isCrossDomain(\"/data.json\"), \"absolute url\");\n      this.assertFalse(isCrossDomain(\"../data.json\"), \"relative url\");\n      this.assertFalse(\n        isCrossDomain(\"../foo-bar/meep.in/data.json\"),\n        \"strange url\"\n      );\n    },\n\n    \"test: isSuccessful() returns true with successful HTTP status\"() {\n      var isSuccessful = qx.util.Request.isSuccessful;\n\n      this.assertTrue(isSuccessful(200));\n      this.assertTrue(isSuccessful(304));\n\n      this.assertFalse(isSuccessful(404));\n      this.assertFalse(isSuccessful(500));\n    },\n\n    \"test: isMethod() returns true if HTTP method is known\"() {\n      var isMethod = qx.util.Request.isMethod;\n\n      this.assertTrue(isMethod(\"GET\"));\n      this.assertTrue(isMethod(\"POST\"));\n\n      this.assertFalse(isMethod(1));\n      this.assertFalse(isMethod(null));\n      this.assertFalse(isMethod(undefined));\n      this.assertFalse(isMethod([]));\n      this.assertFalse(isMethod({}));\n    },\n\n    \"test: methodAllowsRequestBody() returns false when GET\"() {\n      this.assertFalse(qx.util.Request.methodAllowsRequestBody(\"GET\"));\n    },\n\n    \"test: methodAllowsRequestBody() returns true when POST\"() {\n      this.assertTrue(qx.util.Request.methodAllowsRequestBody(\"POST\"));\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}