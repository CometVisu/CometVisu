{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testEnoughSpace",
    "size",
    "width",
    "height",
    "area",
    "target",
    "left",
    "top",
    "right",
    "bottom",
    "offsets",
    "modes",
    "i",
    "length",
    "mode",
    "assertJsonEquals",
    "util",
    "placement",
    "Placement",
    "compute",
    "testRestrictedBottomKeepAlign",
    "testRestrictedTopKeepAlign",
    "testRestrictedRightKeepAlign",
    "testRestrictedLeftKeepAlign",
    "testRestrictedBottomAndTopWithBetterBottomKeepAlign",
    "testRestrictedLeftAndRightWithBetterLeftKeepAlign",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/util/placement/Placement.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.util.placement.Placement\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    testEnoughSpace() {\n      var size = { width: 200, height: 300 };\n      var area = { width: 1000, height: 1000 };\n      var target = { left: 500, top: 500, right: 600, bottom: 550 };\n      var offsets = { top: 0, left: 0, bottom: 0, right: 0 };\n\n      var modes = [\"direct\", \"keep-align\", \"best-fit\"];\n      for (var i = 0; i < modes.length; i++) {\n        var mode = modes[i];\n\n        this.assertJsonEquals(\n          { left: 500, top: 200 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"top-left\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 450, top: 200 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"top-center\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 400, top: 200 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"top-right\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 500, top: 550 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"bottom-left\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 450, top: 550 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"bottom-center\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 400, top: 550 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"bottom-right\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 300, top: 500 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"left-top\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 300, top: 375 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"left-middle\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 300, top: 250 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"left-bottom\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 600, top: 500 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"right-top\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 600, top: 375 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"right-middle\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n\n        this.assertJsonEquals(\n          { left: 600, top: 250 },\n          qx.util.placement.Placement.compute(\n            size,\n            area,\n            target,\n            offsets,\n            \"right-bottom\",\n            mode,\n            mode\n          ),\n\n          mode\n        );\n      }\n    },\n\n    testRestrictedBottomKeepAlign() {\n      var size = { width: 200, height: 300 };\n      var area = { width: 1000, height: 600 };\n      var target = { left: 500, top: 500, right: 600, bottom: 550 };\n      var offsets = { top: 0, left: 0, bottom: 0, right: 0 };\n\n      this.assertJsonEquals(\n        { left: 500, top: 200 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"bottom-left\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 450, top: 200 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"bottom-center\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 400, top: 200 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"bottom-right\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 300, top: 250 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-top\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 300, top: 250 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 600, top: 250 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-top\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 600, top: 250 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n    },\n\n    testRestrictedTopKeepAlign() {\n      var size = { width: 200, height: 300 };\n      var area = { width: 1000, height: 1000 };\n      var target = { left: 500, top: 100, right: 600, bottom: 150 };\n      var offsets = { top: 0, left: 0, bottom: 0, right: 0 };\n\n      this.assertJsonEquals(\n        { left: 500, top: 150 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"top-left\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 450, top: 150 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"top-center\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 400, top: 150 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"top-right\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 300, top: 100 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 300, top: 100 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-bottom\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 600, top: 100 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 600, top: 100 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-bottom\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n    },\n\n    testRestrictedRightKeepAlign() {\n      var size = { width: 200, height: 300 };\n      var area = { width: 700, height: 1000 };\n      var target = { left: 500, top: 500, right: 600, bottom: 550 };\n      var offsets = { top: 0, left: 0, bottom: 0, right: 0 };\n\n      this.assertJsonEquals(\n        { left: 300, top: 500 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-top\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 300, top: 375 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 300, top: 250 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-bottom\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n    },\n\n    testRestrictedLeftKeepAlign() {\n      var size = { width: 200, height: 300 };\n      var area = { width: 1000, height: 1000 };\n      var target = { left: 100, top: 500, right: 200, bottom: 550 };\n      var offsets = { top: 0, left: 0, bottom: 0, right: 0 };\n\n      this.assertJsonEquals(\n        { left: 200, top: 500 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-top\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 200, top: 375 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 200, top: 250 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-bottom\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n    },\n\n    testRestrictedBottomAndTopWithBetterBottomKeepAlign() {\n      var size = { width: 200, height: 300 };\n      var area = { width: 1000, height: 440 };\n      var target = { left: 500, top: 100, right: 600, bottom: 150 };\n      var offsets = { top: 10, bottom: 20, left: 0, right: 0 };\n\n      this.assertJsonEquals(\n        { left: 500, top: 160 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"bottom-left\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 450, top: 160 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"bottom-center\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 500, top: 160 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"top-left\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 450, top: 160 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"top-center\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 600, top: 110 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-top\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 600, top: 110 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 600, top: 110 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-bottom\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n    },\n\n    testRestrictedLeftAndRightWithBetterLeftKeepAlign() {\n      var size = { width: 200, height: 300 };\n      var area = { width: 650, height: 1000 };\n      var target = { left: 500, top: 500, right: 600, bottom: 550 };\n      var offsets = { top: 0, bottom: 0, left: 10, right: 20 };\n\n      this.assertJsonEquals(\n        { left: 280, top: 500 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-top\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 280, top: 375 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"left-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 280, top: 500 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-top\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 280, top: 375 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"right-middle\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 380, top: 550 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"bottom-left\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 380, top: 550 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"bottom-center\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n\n      this.assertJsonEquals(\n        { left: 380, top: 550 },\n        qx.util.placement.Placement.compute(\n          size,\n          area,\n          target,\n          offsets,\n          \"bottom-right\",\n          \"keep-align\",\n          \"keep-align\"\n        )\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}