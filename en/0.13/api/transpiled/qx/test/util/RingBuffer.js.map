{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testAdd",
    "max",
    "buf",
    "util",
    "RingBuffer",
    "addEntry",
    "assertEquals",
    "getAllEntries",
    "length",
    "allEntries",
    "testAddMany",
    "i",
    "testGet",
    "entries",
    "getEntries",
    "testMark",
    "mark",
    "entriesSinceMark",
    "testClear",
    "clear",
    "testDataTypes",
    "some",
    "_typeof",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/util/RingBuffer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Carsten Lergenmueller (carstenl)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.util.RingBuffer\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    testAdd() {\n      var max = 3;\n      var buf = new qx.util.RingBuffer(max);\n\n      buf.addEntry(1);\n      this.assertEquals(1, buf.getAllEntries().length);\n\n      buf.addEntry(2);\n      this.assertEquals(2, buf.getAllEntries().length);\n\n      buf.addEntry(3);\n      this.assertEquals(3, buf.getAllEntries().length);\n\n      buf.addEntry(4);\n\n      var allEntries = buf.getAllEntries();\n      this.assertEquals(3, allEntries.length);\n\n      this.assertEquals(allEntries[0], 2);\n      this.assertEquals(allEntries[1], 3);\n      this.assertEquals(allEntries[2], 4);\n    },\n\n    testAddMany() {\n      var max = 3;\n      var buf = new qx.util.RingBuffer(max);\n\n      for (var i = 0; i <= 1003; i++) {\n        buf.addEntry(i);\n      }\n\n      var allEntries = buf.getAllEntries();\n      this.assertEquals(3, allEntries.length);\n\n      this.assertEquals(allEntries[0], 1001);\n      this.assertEquals(allEntries[1], 1002);\n      this.assertEquals(allEntries[2], 1003);\n    },\n\n    testGet() {\n      var max = 7;\n      var buf = new qx.util.RingBuffer(max);\n\n      buf.addEntry(1);\n      buf.addEntry(2);\n      buf.addEntry(3);\n      buf.addEntry(5);\n      buf.addEntry(6);\n      buf.addEntry(7);\n      buf.addEntry(8);\n      buf.addEntry(9);\n      buf.addEntry(10);\n\n      var entries = buf.getEntries(4);\n      this.assertEquals(4, entries.length);\n\n      this.assertEquals(entries[0], 7);\n      this.assertEquals(entries[1], 8);\n      this.assertEquals(entries[2], 9);\n      this.assertEquals(entries[3], 10);\n    },\n\n    testMark() {\n      var max = 3;\n      var buf = new qx.util.RingBuffer(max);\n\n      buf.addEntry(1);\n      buf.addEntry(2);\n      buf.mark();\n      buf.addEntry(3);\n      buf.addEntry(4);\n\n      var entriesSinceMark = buf.getEntries(9999, true);\n      this.assertEquals(2, entriesSinceMark.length);\n\n      this.assertEquals(entriesSinceMark[0], 3);\n      this.assertEquals(entriesSinceMark[1], 4);\n    },\n\n    testClear() {\n      var max = 3;\n      var buf = new qx.util.RingBuffer(max);\n\n      buf.addEntry(1);\n      buf.addEntry(2);\n      buf.addEntry(3);\n      buf.addEntry(4);\n\n      this.assertEquals(3, buf.getAllEntries().length);\n\n      buf.clear();\n\n      this.assertEquals(0, buf.getAllEntries().length);\n    },\n\n    testDataTypes() {\n      var max = 6;\n      var buf = new qx.util.RingBuffer(max);\n\n      buf.addEntry(1);\n      buf.addEntry(2);\n      buf.addEntry(3);\n\n      buf.addEntry(null);\n      buf.addEntry(buf);\n      buf.addEntry(\"Some string\");\n      buf.addEntry({ some: \"map\" });\n      buf.addEntry([\"Some array\"]);\n      buf.addEntry(function () {});\n\n      var allEntries = buf.getAllEntries();\n      this.assertEquals(6, allEntries.length);\n\n      this.assertEquals(allEntries[0], null);\n      this.assertEquals(allEntries[1], buf);\n      this.assertEquals(allEntries[2], \"Some string\");\n      this.assertEquals(allEntries[3].some, \"map\");\n      this.assertEquals(allEntries[4][0], \"Some array\");\n      this.assertEquals(typeof allEntries[5], \"function\");\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}