{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MRequirements",
    "members",
    "setUp",
    "require",
    "hasVariantsOptimized",
    "test_If_If_statement_is_pruned_by_the_generator",
    "a",
    "core",
    "Environment",
    "getChecks",
    "get",
    "assertEquals",
    "tearDown_If_If_statement_is_pruned_by_the_generator",
    "test_If_Select_call_is_pruned_by_the_generator",
    "select",
    "tearDown_If_Select_call_is_pruned_by_the_generator",
    "test_If_simple_Get_call_is_pruned_by_the_generator",
    "tearDown_If_simple_Get_call_is_pruned_by_the_generator",
    "test",
    "toolchain",
    "VariantOptimization"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/toolchain/VariantOptimization.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-20011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Thomas Herchenroeder (thron7)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.toolchain.VariantOptimization\", {\n  extend: qx.dev.unit.TestCase,\n  include: qx.dev.unit.MRequirements,\n\n  members: {\n    setUp() {\n      this.require([\"variantsOptimized\"]); // run the tests only when this code is variant-optimized\n    },\n\n    hasVariantsOptimized() {\n      return qx.core.Environment.get(\"qx.optimization.variants\");\n    },\n\n    /*\n     * 1.\n     *\n     * The next tests whether the generator optimized an 'if' statement, so that\n     * only the 'then' branch made it into the optimized code.\n     */\n    \"test If 'if' statement is pruned by the generator\"() {\n      var a = 0;\n      /*\n       * \"qx.test.bool_true\" and \"qx.test.bool_false\" are custom environment\n       * keys that are set in config.json for the framework's AUT.\n       *\n       * Faking \"qx.test.bool_true\" to temporarily evaluate to false here.\n       * (Undone in the \"tearDown\" method).\n       */\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function () {\n        return false;\n      };\n      /*\n       * The 'if' statement should be optimized by the generator, as the value\n       * of \"qx.test.bool_true\" is known at compile time, so that only \"a = 1\"\n       * makes it into the generated code.\n       *\n       * If the 'if' is not optimized, the .get call will actually be performed\n       * returning 'false' (see above), and the else branch will be executed.\n       */\n      if (qx.core.Environment.get(\"qx.test.bool_true\")) {\n        a = 1;\n      } else {\n        a = 2;\n      }\n      // The next will fail if the 'else' branch has been chosen, due to missing\n      // or wrong optimization.\n      this.assertEquals(1, a);\n    },\n\n    \"tearDown If 'if' statement is pruned by the generator\"() {\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function () {\n        return true;\n      };\n    },\n\n    /*\n     * 2.\n     *\n     * In the next test, we apply the same trick as above, to check that a .select\n     * expression has been optimized.\n     */\n    \"test If 'select' call is pruned by the generator\"() {\n      // Fake \"qx.test.bool_true\" to be false at run time.\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function () {\n        return false;\n      };\n      // Under optimization, the .select call will have been gone at run time.\n      var a = qx.core.Environment.select(\"qx.test.bool_true\", {\n        true: 1,\n        false: 2\n      });\n\n      this.assertEquals(1, a);\n    },\n\n    \"tearDown If 'select' call is pruned by the generator\"() {\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function () {\n        return true;\n      };\n    },\n\n    /*\n     * 3.\n     *\n     * Check if a simple .get call is optimized.\n     */\n    \"test If simple 'get' call is pruned by the generator\"() {\n      // Fake \"qx.test.bool_true\" to be false at run time.\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function () {\n        return false;\n      };\n      // Under optimization, the .get call will have been gone at run time.\n      var a = qx.core.Environment.get(\"qx.test.bool_true\");\n      this.assertEquals(true, a);\n    },\n\n    \"tearDown If simple 'get' call is pruned by the generator\"() {\n      qx.core.Environment.getChecks()[\"qx.test.bool_true\"] = function () {\n        return true;\n      };\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}