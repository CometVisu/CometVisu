{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "LayoutTestCase",
    "members",
    "createModel",
    "tableModel",
    "table",
    "model",
    "Simple",
    "setColumns",
    "setData",
    "createRandomRows",
    "rowCount",
    "rowData",
    "nextId",
    "strings",
    "row",
    "date",
    "Date",
    "number",
    "NaN",
    "push",
    "testSetColumnWidth",
    "Table",
    "tcm",
    "getTableColumnModel",
    "destroy",
    "dispose",
    "testGetColumnWidth",
    "testSetHeaderCellRenderer",
    "testGetHeaderCellRenderer",
    "testSetDataCellRenderer",
    "testGetDataCellRenderer",
    "testSetCellEditorFactory",
    "testGetCellEditorFactory",
    "columnmodel",
    "Basic"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/ui/table/columnmodel/Basic.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\nqx.Class.define(\"qx.test.ui.table.columnmodel.Basic\", {\n  extend: qx.test.ui.LayoutTestCase,\n\n  members: {\n    createModel() {\n      var tableModel = new qx.ui.table.model.Simple();\n      tableModel.setColumns([\"ID\", \"A number\", \"String\", \"A date\", \"Boolean\"]);\n      tableModel.setData(this.createRandomRows(5));\n\n      return tableModel;\n    },\n\n    createRandomRows(rowCount) {\n      var rowData = [];\n      var nextId = 0;\n      var strings = [\"a\", \"b\", \"c\", \"d\"];\n      for (var row = 0; row < rowCount; row++) {\n        var date = new Date(row * row * row);\n        var number = row % 2 == 0 ? row / 2 : NaN;\n        rowData.push([nextId++, number, strings[row % 4], date, row % 2 == 1]);\n      }\n      return rowData;\n    },\n\n    testSetColumnWidth() {\n      var model = this.createModel();\n      var table = new qx.ui.table.Table(model);\n      var tcm = table.getTableColumnModel();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertException(\n          function () {\n            tcm.setColumnWidth(6, 10);\n          },\n          qx.core.AssertionError,\n          \"Column not found in table model\",\n          \"Invalid column width.\"\n        );\n      }\n\n      table.destroy();\n      model.dispose();\n    },\n\n    testGetColumnWidth() {\n      var model = this.createModel();\n      var table = new qx.ui.table.Table(model);\n      var tcm = table.getTableColumnModel();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertException(\n          function () {\n            tcm.getColumnWidth(6, 10);\n          },\n          qx.core.AssertionError,\n          \"Column not found in table model\",\n          \"Invalid column width.\"\n        );\n      }\n\n      table.destroy();\n      model.dispose();\n    },\n\n    testSetHeaderCellRenderer() {\n      var model = this.createModel();\n      var table = new qx.ui.table.Table(model);\n      var tcm = table.getTableColumnModel();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertException(\n          function () {\n            tcm.setHeaderCellRenderer(\n              6,\n              new qx.ui.table.headerrenderer.Default()\n            );\n          },\n          qx.core.AssertionError,\n          \"Column not found in table model\",\n          \"Invalid column width.\"\n        );\n      }\n\n      table.destroy();\n      model.dispose();\n    },\n\n    testGetHeaderCellRenderer() {\n      var model = this.createModel();\n      var table = new qx.ui.table.Table(model);\n      var tcm = table.getTableColumnModel();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertException(\n          function () {\n            tcm.getHeaderCellRenderer(6);\n          },\n          qx.core.AssertionError,\n          \"Column not found in table model\",\n          \"Invalid column width.\"\n        );\n      }\n\n      table.destroy();\n      model.dispose();\n    },\n\n    testSetDataCellRenderer() {\n      var model = this.createModel();\n      var table = new qx.ui.table.Table(model);\n      var tcm = table.getTableColumnModel();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertException(\n          function () {\n            tcm.setDataCellRenderer(6, qx.ui.table.cellrenderer.Default);\n          },\n          qx.core.AssertionError,\n          \"Column not found in table model\",\n          \"Invalid column width.\"\n        );\n      }\n\n      table.destroy();\n      model.dispose();\n    },\n\n    testGetDataCellRenderer() {\n      var model = this.createModel();\n      var table = new qx.ui.table.Table(model);\n      var tcm = table.getTableColumnModel();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertException(\n          function () {\n            tcm.getDataCellRenderer(6);\n          },\n          qx.core.AssertionError,\n          \"Column not found in table model\",\n          \"Invalid column width.\"\n        );\n      }\n\n      table.destroy();\n      model.dispose();\n    },\n\n    testSetCellEditorFactory() {\n      var model = this.createModel();\n      var table = new qx.ui.table.Table(model);\n      var tcm = table.getTableColumnModel();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertException(\n          function () {\n            tcm.setCellEditorFactory(6, qx.ui.table.celleditor.SelectBox);\n          },\n          qx.core.AssertionError,\n          \"Column not found in table model\",\n          \"Invalid column width.\"\n        );\n      }\n\n      table.destroy();\n      model.dispose();\n    },\n\n    testGetCellEditorFactory() {\n      var model = this.createModel();\n      var table = new qx.ui.table.Table(model);\n      var tcm = table.getTableColumnModel();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertException(\n          function () {\n            tcm.getCellEditorFactory(6);\n          },\n          qx.core.AssertionError,\n          \"Column not found in table model\",\n          \"Invalid column width.\"\n        );\n      }\n\n      table.destroy();\n      model.dispose();\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}