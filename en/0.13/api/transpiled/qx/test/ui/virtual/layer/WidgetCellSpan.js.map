{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "virtual",
    "layer",
    "LayerTestCase",
    "members",
    "setUp",
    "_pool",
    "WidgetCellSpan",
    "superclass",
    "prototype",
    "call",
    "tearDown",
    "_disposeArray",
    "__cellRenderer",
    "dispose",
    "__rowConfig",
    "__columnConfig",
    "_createLayer",
    "cell",
    "Cell",
    "core",
    "Axis",
    "getCellWidget",
    "row",
    "column",
    "widget",
    "pop",
    "Widget",
    "setBackgroundColor",
    "poolCellWidget",
    "push",
    "_assertCells",
    "firstRow",
    "firstColumn",
    "rowCount",
    "columnCount",
    "msg",
    "children",
    "_cellLayer",
    "_getChildren",
    "assertEquals",
    "length",
    "y",
    "x",
    "getUserData",
    "testGetRenderedCellWidget",
    "rowConfig",
    "columnConfig",
    "pool",
    "data",
    "Array",
    "setAutoDisposeItems",
    "setUserData",
    "setCellSpan",
    "getRoot",
    "add",
    "flush",
    "fullUpdate",
    "getRenderedCellWidget",
    "destroy",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/ui/virtual/layer/WidgetCellSpan.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n   * Jonathan Wei√ü (jonathan_rass)\n   * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.ui.virtual.layer.WidgetCellSpan\", {\n  extend: qx.test.ui.virtual.layer.LayerTestCase,\n\n  members: {\n    setUp() {\n      this._pool = [];\n      super.setUp();\n    },\n\n    tearDown() {\n      super.tearDown();\n      this._disposeArray(\"_pool\");\n      this.__cellRenderer.dispose();\n      this.__rowConfig.dispose();\n      this.__columnConfig.dispose();\n    },\n\n    _createLayer() {\n      this.__cellRenderer = new qx.ui.virtual.cell.Cell();\n\n      this.__rowConfig = new qx.ui.virtual.core.Axis(10, 100);\n      this.__columnConfig = new qx.ui.virtual.core.Axis(20, 100);\n\n      return new qx.ui.virtual.layer.WidgetCellSpan(\n        this,\n        this.__rowConfig,\n        this.__columnConfig\n      );\n    },\n\n    getCellWidget(row, column) {\n      var widget = this._pool.pop() || new qx.ui.core.Widget();\n      widget.setBackgroundColor((row + column) % 2 == 0 ? \"red\" : \"green\");\n      return widget;\n    },\n\n    poolCellWidget(widget) {\n      this._pool.push(widget);\n    },\n\n    _assertCells(firstRow, firstColumn, rowCount, columnCount, msg) {\n      var children = this.layer._cellLayer._getChildren();\n\n      this.assertEquals(rowCount * columnCount, children.length);\n\n      for (var y = 0; y < rowCount; y++) {\n        for (var x = 0; x < columnCount; x++) {\n          var row = firstRow + y;\n          var column = firstColumn + x;\n\n          var widget = children[y * columnCount + x];\n          this.assertEquals(row, widget.getUserData(\"cell.row\"));\n          this.assertEquals(column, widget.getUserData(\"cell.column\"));\n        }\n      }\n    },\n\n    testGetRenderedCellWidget() {\n      var rowConfig = new qx.ui.virtual.core.Axis(10, 100);\n      var columnConfig = new qx.ui.virtual.core.Axis(20, 100);\n\n      var pool = new qx.data.Array();\n      pool.setAutoDisposeItems(true);\n      var layer = new qx.ui.virtual.layer.WidgetCellSpan(\n        {\n          getCellWidget(row, column) {\n            var widget = new qx.ui.core.Widget();\n            widget.setUserData(\"test\", row + \"/\" + column);\n            pool.push(widget);\n            return row == 1 && column == 2 ? null : widget;\n          },\n\n          poolCellWidget(widget) {}\n        },\n\n        rowConfig,\n        columnConfig\n      );\n\n      layer.setCellSpan(2, 0, 1, 2);\n      layer.setCellSpan(2, 3, 1, 2);\n      layer.setCellSpan(2, 2, 2, 1);\n\n      this.getRoot().add(layer);\n      this.flush();\n\n      layer.fullUpdate(1, 1, [10, 10, 10], [50, 50, 50]);\n      this.flush();\n\n      this.assertEquals(null, layer.getRenderedCellWidget(0, 0));\n      this.assertEquals(null, layer.getRenderedCellWidget(0, 1));\n      this.assertEquals(null, layer.getRenderedCellWidget(1, 0));\n      this.assertEquals(null, layer.getRenderedCellWidget(1, 2));\n      this.assertEquals(null, layer.getRenderedCellWidget(4, 1));\n      this.assertEquals(null, layer.getRenderedCellWidget(1, 4));\n      this.assertEquals(null, layer.getRenderedCellWidget(4, 4));\n\n      // non spanning cells\n      this.assertEquals(\n        \"1/1\",\n        layer.getRenderedCellWidget(1, 1).getUserData(\"test\")\n      );\n\n      this.assertEquals(\n        \"1/3\",\n        layer.getRenderedCellWidget(1, 3).getUserData(\"test\")\n      );\n\n      this.assertEquals(\n        \"3/1\",\n        layer.getRenderedCellWidget(3, 1).getUserData(\"test\")\n      );\n\n      this.assertEquals(\n        \"3/3\",\n        layer.getRenderedCellWidget(3, 3).getUserData(\"test\")\n      );\n\n      // spanning cells\n      this.assertEquals(\n        \"2/0\",\n        layer.getRenderedCellWidget(2, 0).getUserData(\"test\")\n      );\n\n      this.assertEquals(\n        \"2/0\",\n        layer.getRenderedCellWidget(2, 1).getUserData(\"test\")\n      );\n\n      this.assertEquals(\n        \"2/3\",\n        layer.getRenderedCellWidget(2, 3).getUserData(\"test\")\n      );\n\n      this.assertEquals(\n        \"2/3\",\n        layer.getRenderedCellWidget(2, 4).getUserData(\"test\")\n      );\n\n      this.assertEquals(\n        \"2/2\",\n        layer.getRenderedCellWidget(2, 2).getUserData(\"test\")\n      );\n\n      this.assertEquals(\n        \"2/2\",\n        layer.getRenderedCellWidget(3, 2).getUserData(\"test\")\n      );\n\n      layer.destroy();\n      rowConfig.dispose();\n      columnConfig.dispose();\n      pool.dispose();\n    }\n  },\n\n  destruct() {\n    this.__cellRenderer = null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,yCAAyC,EAAE;IACzDC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,EAAE,CAACC,OAAO,CAACC,KAAK,CAACC,aAAa;IAE9CC,OAAO,EAAE;MACPC,KAAK,WAALA,KAAKA,CAAA,EAAG;QACN,IAAI,CAACC,KAAK,GAAG,EAAE;QACfd,EAAA,CAAAO,IAAA,CAAAC,EAAA,CAAAC,OAAA,CAAAC,KAAA,CAAAK,cAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAJ,KAAA,CAAAK,IAAA;MACF,CAAC;MAEDC,QAAQ,WAARA,QAAQA,CAAA,EAAG;QACTnB,EAAA,CAAAO,IAAA,CAAAC,EAAA,CAAAC,OAAA,CAAAC,KAAA,CAAAK,cAAA,CAAAC,UAAA,CAAAC,SAAA,CAAAE,QAAA,CAAAD,IAAA;QACA,IAAI,CAACE,aAAa,CAAC,OAAO,CAAC;QAC3B,IAAI,CAACC,SAAc,CAACC,OAAO,CAAC,CAAC;QAC7B,IAAI,CAACC,SAAW,CAACD,OAAO,CAAC,CAAC;QAC1B,IAAI,CAACE,SAAc,CAACF,OAAO,CAAC,CAAC;MAC/B,CAAC;MAEDG,YAAY,WAAZA,YAAYA,CAAA,EAAG;QACb,IAAI,CAACJ,SAAc,GAAG,IAAIrB,EAAE,CAACQ,EAAE,CAACC,OAAO,CAACiB,IAAI,CAACC,IAAI,CAAC,CAAC;QAEnD,IAAI,CAACJ,SAAW,GAAG,IAAIvB,EAAE,CAACQ,EAAE,CAACC,OAAO,CAACmB,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC;QACvD,IAAI,CAACL,SAAc,GAAG,IAAIxB,EAAE,CAACQ,EAAE,CAACC,OAAO,CAACmB,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC;QAE1D,OAAO,IAAI7B,EAAE,CAACQ,EAAE,CAACC,OAAO,CAACC,KAAK,CAACK,cAAc,CAC3C,IAAI,EACJ,IAAI,CAACQ,SAAW,EAChB,IAAI,CAACC,SACP,CAAC;MACH,CAAC;MAEDM,aAAa,WAAbA,aAAaA,CAACC,GAAG,EAAEC,MAAM,EAAE;QACzB,IAAIC,MAAM,GAAG,IAAI,CAACnB,KAAK,CAACoB,GAAG,CAAC,CAAC,IAAI,IAAIlC,EAAE,CAACQ,EAAE,CAACoB,IAAI,CAACO,MAAM,CAAC,CAAC;QACxDF,MAAM,CAACG,kBAAkB,CAAC,CAACL,GAAG,GAAGC,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,OAAO,CAAC;QACpE,OAAOC,MAAM;MACf,CAAC;MAEDI,cAAc,WAAdA,cAAcA,CAACJ,MAAM,EAAE;QACrB,IAAI,CAACnB,KAAK,CAACwB,IAAI,CAACL,MAAM,CAAC;MACzB,CAAC;MAEDM,YAAY,WAAZA,YAAYA,CAACC,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,GAAG,EAAE;QAC9D,IAAIC,QAAQ,GAAG,IAAI,CAACnC,KAAK,CAACoC,UAAU,CAACC,YAAY,CAAC,CAAC;QAEnD,IAAI,CAACC,YAAY,CAACN,QAAQ,GAAGC,WAAW,EAAEE,QAAQ,CAACI,MAAM,CAAC;QAE1D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,EAAEQ,CAAC,EAAE,EAAE;UACjC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,WAAW,EAAEQ,CAAC,EAAE,EAAE;YACpC,IAAIpB,GAAG,GAAGS,QAAQ,GAAGU,CAAC;YACtB,IAAIlB,MAAM,GAAGS,WAAW,GAAGU,CAAC;YAE5B,IAAIlB,MAAM,GAAGY,QAAQ,CAACK,CAAC,GAAGP,WAAW,GAAGQ,CAAC,CAAC;YAC1C,IAAI,CAACH,YAAY,CAACjB,GAAG,EAAEE,MAAM,CAACmB,WAAW,CAAC,UAAU,CAAC,CAAC;YACtD,IAAI,CAACJ,YAAY,CAAChB,MAAM,EAAEC,MAAM,CAACmB,WAAW,CAAC,aAAa,CAAC,CAAC;UAC9D;QACF;MACF,CAAC;MAEDC,yBAAyB,WAAzBA,yBAAyBA,CAAA,EAAG;QAC1B,IAAIC,SAAS,GAAG,IAAItD,EAAE,CAACQ,EAAE,CAACC,OAAO,CAACmB,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC;QACpD,IAAI0B,YAAY,GAAG,IAAIvD,EAAE,CAACQ,EAAE,CAACC,OAAO,CAACmB,IAAI,CAACC,IAAI,CAAC,EAAE,EAAE,GAAG,CAAC;QAEvD,IAAI2B,IAAI,GAAG,IAAIxD,EAAE,CAACyD,IAAI,CAACC,KAAK,CAAC,CAAC;QAC9BF,IAAI,CAACG,mBAAmB,CAAC,IAAI,CAAC;QAC9B,IAAIjD,KAAK,GAAG,IAAIV,EAAE,CAACQ,EAAE,CAACC,OAAO,CAACC,KAAK,CAACK,cAAc,CAChD;UACEe,aAAa,WAAbA,aAAaA,CAACC,GAAG,EAAEC,MAAM,EAAE;YACzB,IAAIC,MAAM,GAAG,IAAIjC,EAAE,CAACQ,EAAE,CAACoB,IAAI,CAACO,MAAM,CAAC,CAAC;YACpCF,MAAM,CAAC2B,WAAW,CAAC,MAAM,EAAE7B,GAAG,GAAG,GAAG,GAAGC,MAAM,CAAC;YAC9CwB,IAAI,CAAClB,IAAI,CAACL,MAAM,CAAC;YACjB,OAAOF,GAAG,IAAI,CAAC,IAAIC,MAAM,IAAI,CAAC,GAAG,IAAI,GAAGC,MAAM;UAChD,CAAC;UAEDI,cAAc,WAAdA,cAAcA,CAACJ,MAAM,EAAE,CAAC;QAC1B,CAAC,EAEDqB,SAAS,EACTC,YACF,CAAC;QAED7C,KAAK,CAACmD,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC7BnD,KAAK,CAACmD,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC7BnD,KAAK,CAACmD,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAE7B,IAAI,CAACC,OAAO,CAAC,CAAC,CAACC,GAAG,CAACrD,KAAK,CAAC;QACzB,IAAI,CAACsD,KAAK,CAAC,CAAC;QAEZtD,KAAK,CAACuD,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAClD,IAAI,CAACD,KAAK,CAAC,CAAC;QAEZ,IAAI,CAAChB,YAAY,CAAC,IAAI,EAAEtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAClB,YAAY,CAAC,IAAI,EAAEtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAClB,YAAY,CAAC,IAAI,EAAEtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAClB,YAAY,CAAC,IAAI,EAAEtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAClB,YAAY,CAAC,IAAI,EAAEtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAClB,YAAY,CAAC,IAAI,EAAEtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAClB,YAAY,CAAC,IAAI,EAAEtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;QAE1D;QACA,IAAI,CAAClB,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;;QAED;QACA,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED,IAAI,CAACJ,YAAY,CACf,KAAK,EACLtC,KAAK,CAACwD,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC,CAACd,WAAW,CAAC,MAAM,CACtD,CAAC;QAED1C,KAAK,CAACyD,OAAO,CAAC,CAAC;QACfb,SAAS,CAAChC,OAAO,CAAC,CAAC;QACnBiC,YAAY,CAACjC,OAAO,CAAC,CAAC;QACtBkC,IAAI,CAAClC,OAAO,CAAC,CAAC;MAChB;IACF,CAAC;IAED8C,QAAQ,WAARA,QAAQA,CAAA,EAAG;MACT,IAAI,CAAC/C,SAAc,GAAG,IAAI;IAC5B;EACF,CAAC,CAAC;EAlLFrB,EAAE,CAACO,IAAI,CAACC,EAAE,CAACC,OAAO,CAACC,KAAK,CAACK,cAAc,CAACZ,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}