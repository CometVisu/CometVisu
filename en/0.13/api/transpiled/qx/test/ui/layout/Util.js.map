{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testFlex",
    "numRuns",
    "run",
    "len",
    "Math",
    "round",
    "random",
    "sumMin",
    "sumMax",
    "sumValue",
    "flexibles",
    "j",
    "min",
    "max",
    "value",
    "flex",
    "ceil",
    "availWidth",
    "result",
    "ui",
    "layout",
    "Util",
    "computeFlexOffsets",
    "sum",
    "i",
    "newSize",
    "offset",
    "assert",
    "assertEquals",
    "testFlexFairness",
    "sumWeights",
    "offsets",
    "error",
    "assertTrue",
    "abs",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/ui/layout/Util.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.ui.layout.Util\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    testFlex() {\n      var numRuns = 500;\n\n      for (var run = 0; run < numRuns; run++) {\n        var len = Math.round(Math.random() * 20) + 1;\n        var sumMin = 0;\n        var sumMax = 0;\n        var sumValue = 0;\n        var flexibles = {};\n\n        for (var j = 0; j < len; j++) {\n          var min = Math.round(Math.random() * 20);\n          var max = min + Math.round(Math.random() * 50) + 1;\n          var value = min + Math.round(Math.random() * (max - min));\n\n          sumMax += max;\n          sumMin += min;\n          sumValue += value;\n\n          flexibles[j] = {\n            min: min,\n            value: value,\n            max: max,\n            flex: Math.ceil(Math.random() * 5) // flex range from 1 .. 5\n          };\n        }\n\n        var availWidth = Math.round(Math.random() * 500);\n\n        var result = qx.ui.layout.Util.computeFlexOffsets(\n          flexibles,\n          availWidth,\n          sumValue\n        );\n\n        // check sum\n        var sum = 0;\n        for (var i in result) {\n          var newSize = flexibles[i].value + result[i].offset;\n\n          sum += newSize;\n          this.assert(flexibles[i].min <= newSize);\n          this.assert(flexibles[i].max >= newSize);\n        }\n\n        if (availWidth !== sum) {\n          this.assert(sum == sumMin || sum == sumMax);\n        } else {\n          this.assertEquals(availWidth, sum);\n        }\n      }\n    },\n\n    /**\n     * Test whether flex distributes the value fair concerning the flex factors\n     */\n    testFlexFairness() {\n      var numRuns = 500;\n\n      for (var run = 0; run < numRuns; run++) {\n        var len = Math.round(Math.random() * 20) + 1;\n        var sumMin = 0;\n        var sumMax = 0;\n        var sumValue = 0;\n        var sumWeights = 0;\n        var flexibles = {};\n\n        for (var j = 0; j < len; j++) {\n          var min = 0;\n          var max = 32000;\n          var value = Math.round(Math.random() * 20);\n\n          sumMax += max;\n          sumMin += min;\n          sumValue += value;\n\n          flexibles[j] = {\n            min: min,\n            value: value,\n            max: max,\n            flex: 1 + Math.ceil(Math.random() * 5) // flex range from 1 .. 5\n          };\n          sumWeights += flexibles[j].flex;\n        }\n\n        var availWidth = sumValue + Math.round(Math.random() * 100);\n        var result = qx.ui.layout.Util.computeFlexOffsets(\n          flexibles,\n          availWidth,\n          sumValue\n        );\n\n        var offsets = 0;\n        for (var i in result) {\n          offsets += result[i].offset;\n        }\n\n        if (sumWeights > 0) {\n          var unit = offsets / sumWeights;\n          for (var j in result) {\n            var error = result[j].offset - unit * flexibles[j].flex;\n            this.assertTrue(\n              Math.abs(error) <= 1,\n              \"The error must be at most one pixel!\"\n            );\n          }\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}