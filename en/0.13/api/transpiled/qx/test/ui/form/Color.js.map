{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "LayoutTestCase",
    "members",
    "__test",
    "__P_393_0",
    "widget",
    "assertTrue",
    "hasInterface",
    "constructor",
    "form",
    "IColorForm",
    "assertNull",
    "getValue",
    "resetValue",
    "setValue",
    "assertEquals",
    "self",
    "assertEventFired",
    "e",
    "getData",
    "destroy",
    "testColorSelector",
    "control",
    "ColorSelector",
    "testColorPopup",
    "ColorPopup",
    "Color"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/ui/form/Color.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\nqx.Class.define(\"qx.test.ui.form.Color\", {\n  extend: qx.test.ui.LayoutTestCase,\n\n  members: {\n    __test(widget) {\n      // check if the interface is implemented\n      this.assertTrue(\n        qx.Class.hasInterface(widget.constructor, qx.ui.form.IColorForm),\n        \"Interface is not implemented.\"\n      );\n\n      // check for the init value\n      this.assertNull(widget.getValue(), \"Wrong init value set.\");\n\n      // just check if the method is available\n      widget.resetValue();\n\n      // check the getter and setter\n      widget.setValue(\"#008000\");\n      this.assertEquals(\n        \"#008000\",\n        widget.getValue(),\n        \"Set or get does not work.\"\n      );\n\n      var self = this;\n      this.assertEventFired(\n        widget,\n        \"changeValue\",\n        function () {\n          widget.setValue(\"#CCCCCC\");\n        },\n        function (e) {\n          self.assertEquals(\"#CCCCCC\", e.getData(), \"Wrong data in the event.\");\n        },\n        \"Event is wrong!\"\n      );\n\n      // test for null values\n      widget.setValue(null);\n\n      widget.destroy();\n    },\n\n    testColorSelector() {\n      this.__test(new qx.ui.control.ColorSelector());\n    },\n\n    testColorPopup() {\n      this.__test(new qx.ui.control.ColorPopup());\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,uBAAuB,EAAE;IACvCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,EAAE,CAACC,cAAc;IAEjCC,OAAO,EAAE;MACPC,SAAM,WAAAC,UAACC,MAAM,EAAE;QACb;QACA,IAAI,CAACC,UAAU,CACbd,EAAE,CAACI,KAAK,CAACW,YAAY,CAACF,MAAM,CAACG,WAAW,EAAEhB,EAAE,CAACQ,EAAE,CAACS,IAAI,CAACC,UAAU,CAAC,EAChE,+BACF,CAAC;;QAED;QACA,IAAI,CAACC,UAAU,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE,uBAAuB,CAAC;;QAE3D;QACAP,MAAM,CAACQ,UAAU,CAAC,CAAC;;QAEnB;QACAR,MAAM,CAACS,QAAQ,CAAC,SAAS,CAAC;QAC1B,IAAI,CAACC,YAAY,CACf,SAAS,EACTV,MAAM,CAACO,QAAQ,CAAC,CAAC,EACjB,2BACF,CAAC;QAED,IAAII,IAAI,GAAG,IAAI;QACf,IAAI,CAACC,gBAAgB,CACnBZ,MAAM,EACN,aAAa,EACb,YAAY;UACVA,MAAM,CAACS,QAAQ,CAAC,SAAS,CAAC;QAC5B,CAAC,EACD,UAAUI,CAAC,EAAE;UACXF,IAAI,CAACD,YAAY,CAAC,SAAS,EAAEG,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE,0BAA0B,CAAC;QACvE,CAAC,EACD,iBACF,CAAC;;QAED;QACAd,MAAM,CAACS,QAAQ,CAAC,IAAI,CAAC;QAErBT,MAAM,CAACe,OAAO,CAAC,CAAC;MAClB,CAAC;MAEDC,iBAAiB,WAAAA,kBAAA,EAAG;QAClB,IAAI,CAAClB,SAAM,CAAC,IAAIX,EAAE,CAACQ,EAAE,CAACsB,OAAO,CAACC,aAAa,CAAC,CAAC,CAAC;MAChD,CAAC;MAEDC,cAAc,WAAAA,eAAA,EAAG;QACf,IAAI,CAACrB,SAAM,CAAC,IAAIX,EAAE,CAACQ,EAAE,CAACsB,OAAO,CAACG,UAAU,CAAC,CAAC,CAAC;MAC7C;IACF;EACF,CAAC,CAAC;EArEFjC,EAAE,CAACO,IAAI,CAACC,EAAE,CAACS,IAAI,CAACiB,KAAK,CAAC/B,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}