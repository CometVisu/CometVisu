{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "LayoutTestCase",
    "members",
    "__test",
    "__P_395_0",
    "widget",
    "assertTrue",
    "hasInterface",
    "constructor",
    "form",
    "IDateForm",
    "assertNull",
    "getValue",
    "resetValue",
    "date",
    "Date",
    "setValue",
    "assertEquals",
    "toString",
    "date2",
    "assertEventFired",
    "e",
    "destroy",
    "testDateField",
    "df",
    "DateField",
    "dispose",
    "testDateChooser",
    "dc",
    "control",
    "DateChooser",
    "testDateFieldIsEmpty",
    "field",
    "isEmpty",
    "testDateFieldPopupState",
    "getRoot",
    "add",
    "flush",
    "open",
    "hasState",
    "close",
    "assertFalse",
    "remove"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/ui/form/Date.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\nqx.Class.define(\"qx.test.ui.form.Date\", {\n  extend: qx.test.ui.LayoutTestCase,\n\n  members: {\n    __test(widget) {\n      // check if the interface is implemented\n      this.assertTrue(\n        qx.Class.hasInterface(widget.constructor, qx.ui.form.IDateForm),\n        \"Interface is not implemented.\"\n      );\n\n      // check for the init value\n      this.assertNull(widget.getValue(), \"Wrong init value set.\");\n\n      // just check if the method is available\n      widget.resetValue();\n\n      // check the getter and setter\n      var date = new Date(1981, 1, 10);\n      widget.setValue(date);\n      this.assertEquals(\n        date.toString(),\n        widget.getValue().toString(),\n        \"Set or get does not work.\"\n      );\n\n      var date2 = new Date(2009, 4, 1);\n      this.assertEventFired(\n        widget,\n        \"changeValue\",\n        function () {\n          widget.setValue(date2);\n        },\n        function (e) {\n          // do nothing\n        },\n        \"Event is wrong!\"\n      );\n\n      // test for null values\n      widget.setValue(null);\n\n      widget.destroy();\n    },\n\n    testDateField() {\n      var df = new qx.ui.form.DateField();\n      this.__test(df);\n      df.dispose();\n    },\n\n    testDateChooser() {\n      var dc = new qx.ui.control.DateChooser();\n      this.__test(dc);\n      dc.dispose();\n    },\n\n    testDateFieldIsEmpty() {\n      var field = new qx.ui.form.DateField();\n\n      this.assertTrue(\n        field.isEmpty(),\n        \"DateField should be empty on initialization.\"\n      );\n\n      field.dispose();\n    },\n\n    testDateFieldPopupState() {\n      var field = new qx.ui.form.DateField();\n      this.getRoot().add(field);\n      this.flush();\n\n      field.open();\n      this.flush();\n\n      this.assertTrue(field.hasState(\"popupOpen\"));\n\n      field.close();\n      this.flush();\n\n      this.assertFalse(field.hasState(\"popupOpen\"));\n\n      this.getRoot().remove(field);\n      this.flush();\n\n      field.dispose();\n      field = null;\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}