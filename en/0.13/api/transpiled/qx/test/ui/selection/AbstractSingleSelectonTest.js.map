{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "LayoutTestCase",
    "type",
    "members",
    "_widget",
    "_mode",
    "_selection",
    "_notInSelection",
    "_getChildren",
    "Error",
    "_createTestElement",
    "name",
    "_assertArrayEquals",
    "expected",
    "found",
    "message",
    "sort",
    "assertArrayEquals",
    "testGetSelection",
    "result",
    "getSelection",
    "testSetSelection",
    "_testSetSelection",
    "testDisabledSetSelection",
    "setEnabled",
    "selection",
    "that",
    "widget",
    "assertEventFired",
    "setSelection",
    "flush",
    "event",
    "data",
    "getData",
    "testSameSetSelection",
    "assertEventNotFired",
    "testSetSelectionWithNotChildElement",
    "testElement",
    "assertException",
    "destroy",
    "testSetSelectionWithTooMuchElements",
    "newSelection",
    "testResetSelection",
    "resetSelection",
    "assertIdentical",
    "length",
    "testDisabledResetSelection",
    "testResetSelectionWithEmptySelection",
    "testIsSelected",
    "isSelected",
    "assertTrue",
    "notSelected",
    "assertFalse",
    "testIsSelectedWithNotChildElement",
    "testIsSelectionEmpty",
    "isSelectionEmpty",
    "testGetSelectables",
    "items",
    "getSelectables",
    "testDisabledGetSelectables",
    "testGetUserSelectables",
    "selectables",
    "i",
    "push",
    "AbstractSingleSelectonTest"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/ui/selection/AbstractSingleSelectonTest.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.ui.selection.AbstractSingleSelectonTest\", {\n  extend: qx.test.ui.LayoutTestCase,\n  type: \"abstract\",\n\n  members: {\n    _widget: null,\n\n    _mode: null,\n\n    _selection: null,\n\n    _notInSelection: null,\n\n    _getChildren() {\n      throw new Error(\"Abstract method call: _getChildren()\");\n    },\n\n    _createTestElement(name) {\n      throw new Error(\"Abstract method call: _createTestElement()\");\n    },\n\n    _assertArrayEquals(expected, found, message) {\n      expected.sort();\n      found.sort();\n      this.assertArrayEquals(expected, found, message);\n    },\n\n    testGetSelection() {\n      var result = this._widget.getSelection();\n      this._assertArrayEquals(\n        this._selection,\n        result,\n        \"The result of the selection is wrong\"\n      );\n    },\n\n    testSetSelection() {\n      this._testSetSelection([this._notInSelection[0]]);\n    },\n\n    testDisabledSetSelection() {\n      this._widget.setEnabled(false);\n      this._testSetSelection([this._notInSelection[0]]);\n    },\n\n    _testSetSelection(selection) {\n      var that = this;\n      var widget = this._widget;\n\n      this._selection = selection;\n\n      // Tests that the event is fired and the event contains the right widget\n      this.assertEventFired(\n        widget,\n        \"changeSelection\",\n        function () {\n          widget.setSelection(that._selection);\n          that.flush();\n        },\n        function (event) {\n          var data = event.getData();\n          that._assertArrayEquals(\n            that._selection,\n            data,\n            \"The result of the\" + \" 'changeSelection' event is wrong!\"\n          );\n        },\n        \"'changeSelection' event not fired!\"\n      );\n\n      // Tests the result from \"getSelection\"\n      var result = this._widget.getSelection();\n      this._assertArrayEquals(\n        this._selection,\n        result,\n        \"The result of\" + \" 'getSelection' method is wrong!\"\n      );\n    },\n\n    testSameSetSelection() {\n      var that = this;\n      var widget = this._widget;\n\n      this._assertArrayEquals(\n        this._selection,\n        this._widget.getSelection(),\n        \"The test setup is wrong!\"\n      );\n\n      this.assertEventNotFired(\n        widget,\n        \"changeSelection\",\n        function () {\n          widget.setSelection(that._selection);\n        },\n        function (event) {},\n        \"'changeSelection' event fired!\"\n      );\n    },\n\n    testSetSelectionWithNotChildElement() {\n      var testElement = this._createTestElement(\"Test Element\");\n      var that = this;\n\n      this.assertException(\n        function () {\n          that._widget.setSelection([testElement]);\n        },\n        Error,\n        null,\n        \"No error occurs by trying to select an element\" +\n          \" which isn't a child element!\"\n      );\n\n      testElement.destroy();\n    },\n\n    testSetSelectionWithTooMuchElements() {\n      var newSelection = [this._selection[0], this._notInSelection[0]];\n      var that = this;\n      this.assertException(\n        function () {\n          that._widget.setSelection(newSelection);\n        },\n        Error,\n        null,\n        \"It isn't possible to select more than one element!\"\n      );\n\n      this._assertArrayEquals(\n        this._selection,\n        this._widget.getSelection(),\n        \"The wrong setSelection call has changed the old seclection!\"\n      );\n    },\n\n    testResetSelection() {\n      var widget = this._widget;\n      var that = this;\n\n      //Tests that the event is fired and the event contains nothing\n      this.assertEventFired(\n        widget,\n        \"changeSelection\",\n        function () {\n          widget.resetSelection();\n          that.flush();\n        },\n        function (event) {\n          if (that._mode === \"one\") {\n            that._assertArrayEquals(\n              [that._getChildren()[0]],\n              event.getData(),\n              \"The first element isn't selected!\"\n            );\n          } else {\n            that.assertIdentical(\n              0,\n              event.getData().length,\n              \"Event isn't empty!\"\n            );\n          }\n        },\n        \"'changeSelection' event not fired!\"\n      );\n\n      // Tests that no item is selected\n      var result = this._widget.getSelection();\n      if (this._mode === \"one\") {\n        this._assertArrayEquals(\n          [this._getChildren()[0]],\n          result,\n          \"The first element isn't selected!\"\n        );\n      } else {\n        this.assertIdentical(0, result.length, \"The result isn't empty!\");\n      }\n    },\n\n    testDisabledResetSelection() {\n      this._widget.setEnabled(false);\n      this.testResetSelection();\n    },\n\n    testResetSelectionWithEmptySelection() {\n      var widget = this._widget;\n      var that = this;\n\n      //Tests that the event is fired and the event contains nothing\n      this.assertEventFired(\n        widget,\n        \"changeSelection\",\n        function () {\n          widget.setSelection([]);\n          that.flush();\n        },\n        function (event) {\n          if (that._mode === \"one\") {\n            that._assertArrayEquals(\n              [that._getChildren()[0]],\n              event.getData(),\n              \"The first element isn't selected!\"\n            );\n          } else {\n            that.assertIdentical(\n              0,\n              event.getData().length,\n              \"Event isn't empty!\"\n            );\n          }\n        },\n        \"'changeSelection' event not fired!\"\n      );\n\n      // Tests that no item is selected\n      var result = this._widget.getSelection();\n      if (this._mode === \"one\") {\n        this._assertArrayEquals(\n          [this._getChildren()[0]],\n          result,\n          \"The first element isn't selected!\"\n        );\n      } else {\n        this.assertIdentical(0, result.length, \"The result isn't empty!\");\n      }\n    },\n\n    testIsSelected() {\n      var result = this._widget.isSelected(this._selection[0]);\n      this.assertTrue(result, \"The wrong item is selected!\");\n\n      var notSelected = this._notInSelection[0];\n      result = this._widget.isSelected(notSelected);\n      this.assertFalse(result, \"The wrong item is selected!\");\n    },\n\n    testIsSelectedWithNotChildElement() {\n      var testElement = this._createTestElement(\"Test Element\");\n      var that = this;\n\n      this.assertException(\n        function () {\n          that._widget.isSelected(testElement);\n        },\n        Error,\n        null,\n        \"No error occurs by calling 'isSelected' with an\" +\n          \" element which isn't a child element!\"\n      );\n\n      testElement.destroy();\n    },\n\n    testIsSelectionEmpty() {\n      var result = this._widget.isSelectionEmpty();\n      this.assertFalse(result, \"The selection is empty!\");\n\n      this._widget.resetSelection();\n      this.flush();\n\n      result = this._widget.isSelectionEmpty();\n      if (this._mode === \"one\") {\n        this.assertFalse(result, \"The selection is empty!\");\n      } else {\n        this.assertTrue(result, \"The selection isn't empty!\");\n      }\n    },\n\n    testGetSelectables() {\n      var items = this._getChildren();\n      var found = this._widget.getSelectables(true);\n\n      this._assertArrayEquals(\n        items,\n        found,\n        \"This list of the returned selectables are wrong!\"\n      );\n    },\n\n    testDisabledGetSelectables() {\n      this._widget.setEnabled(false);\n      this.testGetSelectables();\n    },\n\n    testGetUserSelectables() {\n      var selectables = [];\n      var items = this._getChildren();\n\n      for (var i = 0; i < items.length; i++) {\n        if (i % 2 == 0) {\n          selectables.push(items[i]);\n        } else {\n          items[i].setEnabled(false);\n        }\n      }\n\n      var found = this._widget.getSelectables();\n\n      this._assertArrayEquals(\n        selectables,\n        found,\n        \"This list of the returned selectables are wrong!\"\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}