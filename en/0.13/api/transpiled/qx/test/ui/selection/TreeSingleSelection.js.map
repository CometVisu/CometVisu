{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "selection",
    "AbstractSingleSelectonTest",
    "members",
    "setUp",
    "length",
    "_notInSelection",
    "_mode",
    "_widget",
    "tree",
    "Tree",
    "set",
    "selectionMode",
    "width",
    "height",
    "getRoot",
    "add",
    "root",
    "TreeFolder",
    "setOpen",
    "setRoot",
    "i",
    "folder",
    "file",
    "TreeFile",
    "assertIdentical",
    "getSelection",
    "setSelection",
    "_selection",
    "push",
    "flush",
    "tearDown",
    "TreeSingleSelection",
    "superclass",
    "prototype",
    "call",
    "destroy",
    "_getChildren",
    "getItems",
    "_createTestElement",
    "name",
    "testFolderOpen",
    "f1",
    "f2",
    "assertTrue",
    "getOpen"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/ui/selection/TreeSingleSelection.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.ui.selection.TreeSingleSelection\", {\n  extend: qx.test.ui.selection.AbstractSingleSelectonTest,\n\n  members: {\n    setUp() {\n      var length = 10;\n      this._notInSelection = [];\n      this._mode = \"single\";\n\n      this._widget = new qx.ui.tree.Tree().set({\n        selectionMode: this._mode,\n        width: 200,\n        height: 400\n      });\n\n      this.getRoot().add(this._widget);\n\n      var root = new qx.ui.tree.TreeFolder(\"Root\");\n      root.setOpen(true);\n      this._widget.setRoot(root);\n\n      for (var i = 0; i < length; i++) {\n        var folder = new qx.ui.tree.TreeFolder(\"Folder\" + i);\n        folder.setOpen(true);\n        var file = new qx.ui.tree.TreeFile(\"File\" + i);\n        folder.add(file);\n        root.add(folder);\n\n        if (i == 5) {\n          this.assertIdentical(\n            0,\n            this._widget.getSelection().length,\n            \"Couldn't setup test, because selection isn't empty\"\n          );\n\n          this._widget.setSelection([file]);\n          this._selection = [file];\n        } else {\n          this._notInSelection.push(file);\n        }\n      }\n\n      this.flush();\n    },\n\n    tearDown() {\n      super.tearDown();\n      this._widget.destroy();\n      this._widget = null;\n      this._selection = null;\n      this._notInSelection = null;\n      this.flush();\n    },\n\n    _getChildren() {\n      if (this._widget != null) {\n        return this._widget.getItems();\n      } else {\n        return [];\n      }\n    },\n\n    _createTestElement(name) {\n      return new qx.ui.tree.TreeFile(name);\n    },\n\n    testFolderOpen() {\n      var tree = new qx.ui.tree.Tree();\n      this.getRoot().add(tree);\n\n      var root = new qx.ui.tree.TreeFolder(\"root\");\n      tree.setRoot(root);\n\n      var f1 = new qx.ui.tree.TreeFolder(\"f1\");\n      var f2 = new qx.ui.tree.TreeFolder(\"f2\");\n\n      root.add(f1);\n      f1.add(f2);\n\n      // select the first folder\n      tree.setSelection([f1]);\n\n      // check if the root is opened\n      this.assertTrue(root.getOpen());\n\n      // close the root\n      root.setOpen(false);\n\n      // select the second folder\n      tree.setSelection([f2]);\n\n      // check if the root and f1 is open\n      this.assertTrue(root.getOpen());\n      this.assertTrue(f1.getOpen());\n\n      f1.destroy();\n      f2.destroy();\n      root.destroy();\n      tree.destroy();\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}