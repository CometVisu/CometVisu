{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "test",
    "ui",
    "tree",
    "virtual",
    "SingleSelection",
    "members",
    "setUp",
    "OneSelection",
    "superclass",
    "prototype",
    "call",
    "setSelectionMode",
    "testSelectionWithClosedNode",
    "root",
    "createModelAndSetModel",
    "selection",
    "getSelection",
    "parent",
    "getChildren",
    "getItem",
    "itemToSelect",
    "openNode",
    "push",
    "assertEquals",
    "getLength",
    "selectionOnManager",
    "_manager",
    "length",
    "getLookupTable",
    "indexOf",
    "self",
    "assertEventFired",
    "closeNode",
    "e",
    "testSelectionWithClosedParentNode",
    "nodeToClose",
    "openNodeAndParents",
    "testRemoveItem",
    "removeAt",
    "dispose"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/ui/tree/virtual/OneSelection.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.ui.tree.virtual.OneSelection\", {\n  extend: qx.test.ui.tree.virtual.SingleSelection,\n\n  members: {\n    setUp() {\n      super.setUp();\n\n      this.tree.setSelectionMode(\"one\");\n    },\n\n    testSelectionWithClosedNode() {\n      var root = this.createModelAndSetModel(2);\n      var selection = this.tree.getSelection();\n\n      var parent = root.getChildren().getItem(0);\n      var itemToSelect = parent.getChildren().getItem(2);\n      this.tree.openNode(parent);\n      selection.push(itemToSelect);\n\n      // check selection from tree\n      this.assertEquals(1, selection.getLength(), \"On Tree\");\n      this.assertEquals(itemToSelect, selection.getItem(0), \"On Tree\");\n\n      // check selection from manager\n      var selectionOnManager = this.tree._manager.getSelection();\n      this.assertEquals(1, selectionOnManager.length);\n      this.assertEquals(\n        this.tree.getLookupTable().indexOf(itemToSelect),\n        selectionOnManager[0]\n      );\n\n      var self = this;\n      this.assertEventFired(\n        selection,\n        \"change\",\n        function () {\n          self.tree.closeNode(parent);\n        },\n        function (e) {\n          var selectionOnManager = self.tree._manager.getSelection();\n          self.assertEquals(\n            1,\n            selection.getLength(),\n            \"Selection not reset on Tree\"\n          );\n\n          self.assertEquals(\n            parent,\n            selection.getItem(0),\n            \"Selection not reset on Tree\"\n          );\n\n          self.assertEquals(\n            1,\n            selectionOnManager.length,\n            \"Selection not reset on manager\"\n          );\n\n          self.assertEquals(\n            self.tree.getLookupTable().indexOf(parent),\n            selectionOnManager[0],\n            \"Selection not reset on manager\"\n          );\n        }\n      );\n    },\n\n    testSelectionWithClosedParentNode() {\n      var root = this.createModelAndSetModel(3);\n      var selection = this.tree.getSelection();\n\n      var nodeToClose = root.getChildren().getItem(0);\n      var parent = nodeToClose.getChildren().getItem(1);\n      var itemToSelect = parent.getChildren().getItem(2);\n      this.tree.openNodeAndParents(parent);\n      selection.push(itemToSelect);\n\n      // check selection from tree\n      this.assertEquals(1, selection.getLength(), \"On Tree\");\n      this.assertEquals(itemToSelect, selection.getItem(0), \"On Tree\");\n\n      // check selection from manager\n      var selectionOnManager = this.tree._manager.getSelection();\n      this.assertEquals(1, selectionOnManager.length);\n      this.assertEquals(\n        this.tree.getLookupTable().indexOf(itemToSelect),\n        selectionOnManager[0]\n      );\n\n      var self = this;\n      this.assertEventFired(\n        selection,\n        \"change\",\n        function () {\n          self.tree.closeNode(nodeToClose);\n        },\n        function (e) {\n          var selectionOnManager = self.tree._manager.getSelection();\n          self.assertEquals(\n            1,\n            selection.getLength(),\n            \"Selection not reset on Tree\"\n          );\n\n          self.assertEquals(\n            nodeToClose,\n            selection.getItem(0),\n            \"Selection not reset on Tree\"\n          );\n\n          self.assertEquals(\n            1,\n            selectionOnManager.length,\n            \"Selection not reset on manager\"\n          );\n\n          self.assertEquals(\n            self.tree.getLookupTable().indexOf(nodeToClose),\n            selectionOnManager[0],\n            \"Selection not reset on manager\"\n          );\n        }\n      );\n    },\n\n    testRemoveItem() {\n      var root = this.createModelAndSetModel(2);\n      var selection = this.tree.getSelection();\n\n      var parent = root.getChildren().getItem(0);\n      var itemToSelect = parent.getChildren().getItem(2);\n      this.tree.openNode(parent);\n      selection.push(itemToSelect);\n\n      // check selection from tree before remove item\n      this.assertEquals(1, selection.getLength(), \"On Tree (setup)\");\n      this.assertEquals(itemToSelect, selection.getItem(0), \"On Tree (setup)\");\n\n      var self = this;\n      this.assertEventFired(\n        selection,\n        \"change\",\n        function () {\n          // remove selected item\n          parent.getChildren().removeAt(2).dispose();\n        },\n        function (e) {\n          // check selection from list\n          self.assertEquals(1, selection.getLength(), \"On Tree\");\n          self.assertEquals(parent, selection.getItem(0), \"On Tree\");\n\n          // check selection from manager\n          var selectionOnManager = self.tree._manager.getSelection();\n          self.assertEquals(1, selectionOnManager.length, \"On Manager\");\n          self.assertEquals(\n            self.tree.getLookupTable().indexOf(parent),\n            selectionOnManager[0],\n            \"On Manager\"\n          );\n        }\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}