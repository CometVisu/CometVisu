{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "testValidColors",
    "validColors",
    "red",
    "black",
    "color",
    "assertJsonEquals",
    "util",
    "ColorUtil",
    "stringToRgb",
    "testInvalidColors",
    "invalidColors",
    "i",
    "length",
    "assertException",
    "Error",
    "test",
    "renderer",
    "Color"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/renderer/Color.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.renderer.Color\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    testValidColors() {\n      var validColors = {\n        red: [255, 0, 0], //named\n        black: [0, 0, 0], //named\n        \"#FFF\": [255, 255, 255], //hex3\n        \"#fffa\": [255, 255, 255, 0.667], //hex4\n        \"#Ff1\": [255, 255, 17], //hex3\n        \"#0101FF\": [1, 1, 255], //hex6\n        \"#0101FFef\": [1, 1, 255, 0.937], //hex8\n        \"rgb(123,11,1)\": [123, 11, 1], //rgb\n        \"rgba(123,11,1,0.4)\": [123, 11, 1, 0.4] //rgba\n      };\n\n      for (var color in validColors) {\n        this.assertJsonEquals(\n          validColors[color],\n          qx.util.ColorUtil.stringToRgb(color)\n        );\n      }\n    },\n\n    testInvalidColors() {\n      var invalidColors = [\"blau\", \"1234\", \"#ff\", \"#fffff\", \"rgb(12,13)\"];\n\n      for (var i = 0; i < invalidColors.length; i++) {\n        this.assertException(\n          function () {\n            qx.util.ColorUtil.stringToRgb(invalidColors[i]);\n          },\n          Error,\n          \"Could not parse color\"\n        );\n      }\n\n      this.assertException(\n        function () {\n          qx.util.ColorUtil.stringToRgb(\"inactivecaptiontext\");\n        },\n        Error,\n        \"Could not convert system colors to RGB\"\n      );\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,wBAAwB,EAAE;IACxCC,MAAM,EAAEN,EAAE,CAACO,GAAG,CAACC,IAAI,CAACC,QAAQ;IAE5BC,OAAO,EAAE;MACPC,eAAe,WAAAA,gBAAA,EAAG;QAChB,IAAIC,WAAW,GAAG;UAChBC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;UAAE;UAClBC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAAE;UAClB,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;UAAE;UACzB,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC;UAAE;UACjC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;UAAE;UACxB,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC;UAAE;UACxB,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC;UAAE;UACjC,eAAe,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;UAAE;UAC/B,oBAAoB,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QAC1C,CAAC;QAED,KAAK,IAAIC,KAAK,IAAIH,WAAW,EAAE;UAC7B,IAAI,CAACI,gBAAgB,CACnBJ,WAAW,CAACG,KAAK,CAAC,EAClBf,EAAE,CAACiB,IAAI,CAACC,SAAS,CAACC,WAAW,CAACJ,KAAK,CACrC,CAAC;QACH;MACF,CAAC;MAEDK,iBAAiB,WAAAA,kBAAA,EAAG;QAClB,IAAIC,aAAa,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,CAAC;QAEnE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,aAAa,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;UAC7C,IAAI,CAACE,eAAe,CAClB,YAAY;YACVxB,EAAE,CAACiB,IAAI,CAACC,SAAS,CAACC,WAAW,CAACE,aAAa,CAACC,CAAC,CAAC,CAAC;UACjD,CAAC,EACDG,KAAK,EACL,uBACF,CAAC;QACH;QAEA,IAAI,CAACD,eAAe,CAClB,YAAY;UACVxB,EAAE,CAACiB,IAAI,CAACC,SAAS,CAACC,WAAW,CAAC,qBAAqB,CAAC;QACtD,CAAC,EACDM,KAAK,EACL,wCACF,CAAC;MACH;IACF;EACF,CAAC,CAAC;EAjEFzB,EAAE,CAAC0B,IAAI,CAACC,QAAQ,CAACC,KAAK,CAACzB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}