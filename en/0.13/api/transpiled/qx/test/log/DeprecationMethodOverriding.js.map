{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "members",
    "__lastWarnMsg",
    "__orgWarnMesthod",
    "__orgTraceMesthod",
    "setUp",
    "log",
    "Logger",
    "warn",
    "trace",
    "that",
    "msg",
    "tearDown",
    "testClassABaseclass",
    "instance",
    "test",
    "fixture",
    "ClassA",
    "__test",
    "dispose",
    "testClassB1OverridesMethod",
    "ClassB1",
    "testClassC1DoesnTOverrideMethod",
    "ClassC1",
    "testClassB2DoesnTOverrideMethod",
    "ClassB2",
    "testClassC2OverridesMethod",
    "ClassC2",
    "__P_353_3",
    "callCountOldProperty",
    "callCountNewProperty",
    "reqExpWarnMsg",
    "setOldProperty",
    "setNewProperty",
    "assertEquals",
    "getCallCountApplyOldProperty",
    "getCallCountApplyNewProperty",
    "DeprecationMethodOverriding"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/log/DeprecationMethodOverriding.js"
  ],
  "sourcesContent": [
    "qx.Class.define(\"qx.test.log.DeprecationMethodOverriding\", {\n  extend: qx.dev.unit.TestCase,\n\n  members: {\n    __lastWarnMsg: null,\n\n    __orgWarnMesthod: null,\n\n    __orgTraceMesthod: null,\n\n    setUp() {\n      this.__orgWarnMesthod = qx.log.Logger.warn;\n      this.__orgTraceMesthod = qx.log.Logger.trace;\n\n      var that = this;\n      qx.log.Logger.warn = function (msg) {\n        that.__lastWarnMsg = msg;\n      };\n      qx.log.Logger.trace = function () {};\n    },\n\n    tearDown() {\n      qx.log.Logger.warn = this.__orgWarnMesthod;\n      qx.log.Logger.trace = this.__orgTraceMesthod;\n      this.__orgWarnMesthod = null;\n      this.__orgTraceMesthod = null;\n      this.__lastWarnMsg = null;\n    },\n\n    \"testClassA: baseclass\"() {\n      var instance = new qx.test.log.fixture.ClassA();\n      this.__test(instance, 1, 1, null);\n      instance.dispose();\n    },\n\n    \"testClassB1: overrides method\"() {\n      var instance = new qx.test.log.fixture.ClassB1();\n      this.__test(\n        instance,\n        2,\n        2,\n        /qx.test.log.fixture.ClassB1._applyOldProperty/\n      );\n\n      instance.dispose();\n    },\n\n    \"testClassC1: doesn't override method\"() {\n      var instance = new qx.test.log.fixture.ClassC1();\n      this.__test(\n        instance,\n        2,\n        3,\n        /qx.test.log.fixture.ClassB1._applyOldProperty/\n      );\n\n      instance.dispose();\n    },\n\n    \"testClassB2: doesn't override method\"() {\n      var instance = new qx.test.log.fixture.ClassB2();\n      this.__test(instance, 1, 2, null);\n      instance.dispose();\n    },\n\n    \"testClassC2: overrides method\"() {\n      var instance = new qx.test.log.fixture.ClassC2();\n      this.__test(\n        instance,\n        2,\n        3,\n        /qx.test.log.fixture.ClassC2._applyOldProperty/\n      );\n\n      instance.dispose();\n    },\n\n    __test(\n      instance,\n      callCountOldProperty,\n      callCountNewProperty,\n      reqExpWarnMsg\n    ) {\n      instance.setOldProperty(\"Jo\");\n      instance.setNewProperty(\"Do\");\n\n      this.assertEquals(\n        callCountOldProperty,\n        instance.getCallCountApplyOldProperty()\n      );\n\n      this.assertEquals(\n        callCountNewProperty,\n        instance.getCallCountApplyNewProperty()\n      );\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (reqExpWarnMsg) {\n          this.assertTrue(reqExpWarnMsg.test(this.__lastWarnMsg));\n        } else {\n          this.assertNull(this.__lastWarnMsg);\n        }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}