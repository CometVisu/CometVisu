{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "assertDeepEquals",
    "expected",
    "actual",
    "msg",
    "concat",
    "lang",
    "Json",
    "stringify",
    "assert",
    "Object",
    "equals",
    "assertContains",
    "expectedFragment",
    "assertString",
    "includes",
    "test",
    "io",
    "MAssert"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/io/MAssert.js"
  ],
  "sourcesContent": [
    "/**\n * Mixin containing special assert methods\n */\nqx.Mixin.define(\"qx.test.io.MAssert\", {\n  members: {\n    /**\n     * Deep equal comparison, using Sinon's `deepEqual` comparison.\n     * Two values are \"deep equal\" if:\n     *\n     *   - They are equal, according to samsam.identical\n     *   (https://sinonjs.github.io/samsam/)\n     *   - They are both date objects representing the same time\n     *   - They are both arrays containing elements that are all deepEqual\n     *   - They are objects with the same set of properties, and each property\n     *     in obj1 is deepEqual to the corresponding property in obj2\n     *\n     * Supports cyclic objects.\n     * @param {*} expected\n     * @param {*} actual\n     * @param {String?} msg\n     */\n    assertDeepEquals(expected, actual, msg) {\n      if (!msg) {\n        msg = `Failed to assert that ${qx.lang.Json.stringify(\n          actual\n        )} deeply equals ${qx.lang.Json.stringify(expected)}.`;\n      }\n      this.assert(qx.lang.Object.equals(expected, actual), msg);\n    },\n\n    /**\n     * Asserts that a string fragment is contained in a result\n     * @param {String} expectedFragment\n     * @param {String} actual\n     * @param {String?} msg\n     */\n    assertContains(expectedFragment, actual, msg) {\n      this.assertString(expectedFragment);\n      this.assertString(actual);\n      if (!msg) {\n        msg = `Failed to assert that '${actual}' contains '${expectedFragment}'.`;\n      }\n      this.assert(actual.includes(expectedFragment), msg);\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,oBAAoB,EAAE;IACpCC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,gBAAgB,WAAAA,iBAACC,QAAQ,EAAEC,MAAM,EAAEC,GAAG,EAAE;QACtC,IAAI,CAACA,GAAG,EAAE;UACRA,GAAG,4BAAAC,MAAA,CAA4BX,EAAE,CAACY,IAAI,CAACC,IAAI,CAACC,SAAS,CACnDL,MACF,CAAC,qBAAAE,MAAA,CAAkBX,EAAE,CAACY,IAAI,CAACC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,MAAG;QACxD;QACA,IAAI,CAACO,MAAM,CAACf,EAAE,CAACY,IAAI,CAACI,MAAM,CAACC,MAAM,CAACT,QAAQ,EAAEC,MAAM,CAAC,EAAEC,GAAG,CAAC;MAC3D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIQ,cAAc,WAAAA,eAACC,gBAAgB,EAAEV,MAAM,EAAEC,GAAG,EAAE;QAC5C,IAAI,CAACU,YAAY,CAACD,gBAAgB,CAAC;QACnC,IAAI,CAACC,YAAY,CAACX,MAAM,CAAC;QACzB,IAAI,CAACC,GAAG,EAAE;UACRA,GAAG,6BAAAC,MAAA,CAA6BF,MAAM,kBAAAE,MAAA,CAAeQ,gBAAgB,OAAI;QAC3E;QACA,IAAI,CAACJ,MAAM,CAACN,MAAM,CAACY,QAAQ,CAACF,gBAAgB,CAAC,EAAET,GAAG,CAAC;MACrD;IACF;EACF,CAAC,CAAC;EA7CFV,EAAE,CAACsB,IAAI,CAACC,EAAE,CAACC,OAAO,CAACrB,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}