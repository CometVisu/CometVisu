{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MMock",
    "members",
    "setUpFakeRequest",
    "req",
    "request",
    "io",
    "remote",
    "Request",
    "setState",
    "getSequenceNumber",
    "setData",
    "send",
    "stub",
    "addListener",
    "restore",
    "dispatchEvent",
    "returns",
    "undefined",
    "injectStub",
    "tearDown",
    "getSandbox",
    "test_send_request",
    "rpc",
    "Rpc",
    "callAsync",
    "assertCalledOnce",
    "test_request_data_for_params_with_date_contains_date_literal_when_convert_dates",
    "obj",
    "date",
    "Date",
    "UTC",
    "msg",
    "data",
    "params",
    "getCall",
    "args",
    "assertMatch",
    "test_request_data_for_params_with_nested_date_contains_date_literal_when_convert_dates",
    "nested",
    "test_response_contains_date_from_literal_when_convert_dates",
    "evt",
    "event",
    "Registration",
    "createEvent",
    "Response",
    "str",
    "that",
    "callback",
    "spy",
    "result",
    "_typeof",
    "assertTrue",
    "lang",
    "Type",
    "isDate",
    "setContent",
    "assertCalled",
    "test_response_contains_date_from_literal_when_convert_dates_and_json_response",
    "Json",
    "parse",
    "test_response_is_parsed_as_JSON",
    "assertCalledWith",
    "test_response_is_not_parsed_when_already_object",
    "json",
    "assertNotCalled",
    "test_isConvertDates_returns_true_when_Rpc_true",
    "assertEquals",
    "_isConvertDates",
    "skip",
    "RequirementError",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/qx_packages/qooxdoo_deprecated_qx_io_remote_v1_0_2/source/class/qx/test/io/remote/Rpc.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\nqx.Class.define(\"qx.test.io.remote.Rpc\", {\n  extend: qx.dev.unit.TestCase,\n\n  include: qx.dev.unit.MMock,\n\n  members: {\n    setUpFakeRequest() {\n      var req = (this.request = new qx.io.remote.Request());\n\n      // In prototype chain\n      req.setState =\n        req.getSequenceNumber =\n        req.setData =\n        req.send =\n          function () {};\n\n      // Stub\n      this.stub(req);\n      req.addListener.restore();\n      req.dispatchEvent.restore();\n      req.getSequenceNumber.returns(undefined);\n\n      // Inject\n      this.injectStub(qx.io.remote, \"Request\", req);\n    },\n\n    tearDown() {\n      this.getSandbox().restore();\n    },\n\n    \"test: send request\"() {\n      this.setUpFakeRequest();\n      var rpc = new qx.io.remote.Rpc(\"/foo\");\n\n      rpc.callAsync();\n      this.assertCalledOnce(this.request.send);\n    },\n\n    \"test: request data for params with date contains date literal when convert dates\"() {\n      this.setUpFakeRequest();\n      var obj = { date: new Date(Date.UTC(2020, 0, 1, 0, 0, 0, 123)) },\n        msg,\n        data;\n\n      var rpc = new qx.io.remote.Rpc();\n      this.stub(rpc, \"_isConvertDates\").returns(true);\n      this.stub(rpc, \"createRpcData\").returns({ params: obj });\n      rpc.callAsync();\n\n      data = this.request.setData.getCall(0).args[0];\n      msg = \"Must contain converted date literal\";\n      this.assertMatch(\n        data,\n        /\"new Date\\(Date.UTC\\(2020,0,1,0,0,0,123\\)\\)\"/,\n        msg\n      );\n    },\n\n    \"test: request data for params with nested date contains date literal when convert dates\"() {\n      this.setUpFakeRequest();\n      var obj = {\n          nested: { date: new Date(Date.UTC(2020, 0, 1, 0, 0, 0, 123)) },\n        },\n        msg,\n        data;\n\n      var rpc = new qx.io.remote.Rpc();\n      this.stub(rpc, \"_isConvertDates\").returns(true);\n      this.stub(rpc, \"createRpcData\").returns({ params: obj });\n      rpc.callAsync();\n\n      data = this.request.setData.getCall(0).args[0];\n      msg = \"Must contain converted date literal\";\n      this.assertMatch(\n        data,\n        /\"new Date\\(Date.UTC\\(2020,0,1,0,0,0,123\\)\\)\"/,\n        msg\n      );\n    },\n\n    \"test: response contains date from literal when convert dates\"() {\n      this.setUpFakeRequest();\n      var rpc = new qx.io.remote.Rpc(),\n        req = this.request,\n        evt = qx.event.Registration.createEvent(\n          \"completed\",\n          qx.io.remote.Response\n        ),\n        str = '{\"result\": {\"date\": new Date(Date.UTC(2020,0,1,0,0,0,123))} }',\n        that = this;\n\n      this.stub(rpc, \"_isConvertDates\").returns(true);\n\n      var callback = this.spy(function (result) {\n        var msg = \"Expected value to be date but found \" + typeof result.date;\n        that.assertTrue(qx.lang.Type.isDate(result.date), msg);\n      });\n\n      rpc.callAsync(callback);\n\n      // Fake JSON-like (JavaScript) response\n      evt.setContent(str);\n      req.dispatchEvent(evt);\n\n      this.assertCalled(callback);\n    },\n\n    \"test: response contains date from literal when convert dates and json response\"() {\n      this.setUpFakeRequest();\n      var rpc = new qx.io.remote.Rpc(),\n        req = this.request,\n        evt = qx.event.Registration.createEvent(\n          \"completed\",\n          qx.io.remote.Response\n        ),\n        str = '{\"result\": {\"date\": \"new Date(Date.UTC(2020,0,1,0,0,0,123))\"} }',\n        that = this;\n\n      this.stub(rpc, \"_isConvertDates\").returns(true);\n      this.stub(rpc, \"_isResponseJson\").returns(true);\n      this.spy(qx.lang.Json, \"parse\");\n\n      var callback = this.spy(function (result) {\n        var msg;\n\n        that.assertCalled(qx.lang.Json.parse);\n\n        msg = \"Expected value to be date but found \" + typeof result.date;\n        that.assertTrue(qx.lang.Type.isDate(result.date), msg);\n      });\n\n      rpc.callAsync(callback);\n\n      // Fake JSON (String) response\n      evt.setContent(str);\n      req.dispatchEvent(evt);\n\n      this.assertCalled(callback);\n    },\n\n    \"test: response is parsed as JSON\"() {\n      this.setUpFakeRequest();\n      var rpc = new qx.io.remote.Rpc(),\n        req = this.request,\n        evt = qx.event.Registration.createEvent(\n          \"completed\",\n          qx.io.remote.Response\n        ),\n        str = '{\"result\": { \"json\" : true} }',\n        that = this;\n\n      this.stub(rpc, \"_isConvertDates\").returns(false);\n      this.spy(qx.lang.Json, \"parse\");\n\n      var callback = this.spy(function (result) {\n        that.assertCalledWith(qx.lang.Json.parse, str);\n      });\n\n      rpc.callAsync(callback);\n\n      // Fake JSON (String) response\n      evt.setContent(str);\n      req.dispatchEvent(evt);\n\n      this.assertCalled(callback);\n    },\n\n    \"test: response is not parsed when already object\"() {\n      this.setUpFakeRequest();\n      var rpc = new qx.io.remote.Rpc(),\n        req = this.request,\n        evt = qx.event.Registration.createEvent(\n          \"completed\",\n          qx.io.remote.Response\n        ),\n        obj = { result: { json: true } },\n        that = this;\n\n      this.stub(rpc, \"_isConvertDates\").returns(false);\n      this.spy(qx.lang.Json, \"parse\");\n\n      var callback = this.spy(function (result) {\n        that.assertNotCalled(qx.lang.Json.parse);\n      });\n\n      rpc.callAsync(callback);\n\n      // Object response\n      evt.setContent(obj);\n      req.dispatchEvent(evt);\n\n      this.assertCalled(callback);\n    },\n\n    //\n    // isConvertDates()\n    //\n\n    \"test: isConvertDates() returns true when Rpc true\"() {\n      var rpc = new qx.io.remote.Rpc();\n      this.stub(qx.io.remote.Rpc, \"CONVERT_DATES\", true);\n      this.assertEquals(true, rpc._isConvertDates());\n    },\n\n    skip(msg) {\n      throw new qx.dev.unit.RequirementError(null, msg);\n    },\n  },\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}