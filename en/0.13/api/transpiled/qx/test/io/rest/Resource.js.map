{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "dev",
    "unit",
    "TestCase",
    "include",
    "MRequirements",
    "MMock",
    "members",
    "setUp",
    "setUpDoubleRequest",
    "setUpResource",
    "io",
    "request",
    "Xhr",
    "restore",
    "req",
    "shallowStub",
    "AbstractRequest",
    "injectStub",
    "__reqs",
    "push",
    "res",
    "dispose",
    "rest",
    "Resource",
    "map",
    "tearDown",
    "getSandbox",
    "forEach",
    "test_configure_request_receives_preConfigured_but_unsent_request",
    "configureRequest",
    "lang",
    "Function",
    "bind",
    "assertCalledWith",
    "setMethod",
    "assertCalled",
    "setUrl",
    "assertNotCalled",
    "send",
    "get",
    "test_configure_request_receives_invocation_details",
    "params",
    "data",
    "callback",
    "spy",
    "_action",
    "_params",
    "_data",
    "assertEquals",
    "test_map_action",
    "_getRequestConfig",
    "method",
    "url",
    "test_map_action_when_base_URL",
    "setBaseUrl",
    "test_map_existing_action",
    "test_map_action_creates_method",
    "assertFunction",
    "test_map_action_throws_when_existing_method",
    "require",
    "popular",
    "assertException",
    "Error",
    "test_map_action_does_not_throw_when_existing_method_is_empty",
    "test_dynamically_created_action_forwards_arguments",
    "invoke",
    "test_dynamically_created_action_returns_what_invoke_returns",
    "id",
    "stub",
    "returns",
    "test_map_actions_from_description",
    "description",
    "check",
    "create",
    "test_map_action_from_description_throws_with_nonObject",
    "test_map_action_from_description_throws_with_incomplete_route",
    "test_invoke_action_generically",
    "result",
    "assertSend",
    "test_invoke_action",
    "test_invoke_action_returns_id_of_request",
    "assertNumber",
    "test_invoke_action_while_other_is_in_progress",
    "req1",
    "req2",
    "post",
    "assertCalledOnce",
    "test_invoke_same_action_handles_multiple_requests",
    "getSuccess",
    "addListener",
    "respond",
    "assertCalledTwice",
    "test_invoke_action_with_positional_params",
    "test_invoke_action_with_positional_params_that_evaluate_to_false",
    "test_invoke_action_with_nonString_params",
    "test_invoke_action_with_params_and_data",
    "put",
    "article",
    "setRequestData",
    "test_invoke_action_with_multiple_positional_params",
    "commentId",
    "test_invoke_action_with_positional_params_in_query",
    "test_invoke_action_with_undefined_params",
    "test_invoke_action_with_null_params",
    "test_invoke_action_when_content_type_json",
    "setRequestHeader",
    "getRequestHeader",
    "Json",
    "location",
    "stringify",
    "test_invoke_action_when_content_type_json_and_get",
    "getMethod",
    "withArgs",
    "test_invoke_action_for_url_with_port",
    "test_invoke_action_for_relative_url",
    "page",
    "test_invoke_action_for_relative_url_with_dots",
    "test_invoke_action_for_route_with_check",
    "test_invoke_action_fills_in_empty_string_when_missing_param_and_no_default",
    "test_invoke_action_fills_in_default_when_missing_param",
    "size",
    "test_invoke_action_throws_when_missing_required_positional_param",
    "tag",
    "REQUIRED",
    "test_invoke_action_throws_when_missing_required_request_param",
    "photo",
    "test_invoke_action_throws_when_param_not_match_check",
    "test_invoke_action_ignores_invalid_check_in_production",
    "skip",
    "setting",
    "core",
    "Environment",
    "test_abort_action",
    "abort",
    "test_abort_action_when_multiple_requests",
    "test_abort_by_action_id",
    "test_refresh_action",
    "refresh",
    "test_refresh_action_replaying_previous_params",
    "test_poll_action",
    "sandbox",
    "useFakeTimers",
    "_resource",
    "poll",
    "clock",
    "tick",
    "test_not_poll_action_when_no_response_received_yet",
    "test_poll_action_immediately",
    "undefined",
    "test_poll_action_sets_initial_params",
    "test_poll_action_replaying_previous_params",
    "test_poll_action_repeatedly_ends_previous_timer",
    "msg",
    "test_poll_many_actions",
    "test_end_poll_action",
    "timer",
    "stop",
    "test_end_poll_action_does_not_end_polling_of_other_action",
    "test_restart_poll_action",
    "restart",
    "test_long_poll_action",
    "responses",
    "e",
    "getData",
    "longPoll",
    "assertArrayEquals",
    "test_throttle_long_poll",
    "value",
    "i",
    "test_not_throttle_long_poll_when_not_received_within_limit",
    "test_not_throttle_long_poll_when_not_received_subsequently",
    "assertCallCount",
    "test_end_long_poll_action",
    "handlerId",
    "removeListenerById",
    "test_fire_actionSuccess",
    "that",
    "assertEventFired",
    "getAction",
    "assertIdentical",
    "getRequest",
    "assertInteger",
    "getId",
    "test_fire_success",
    "test_fire_actionError",
    "respondError",
    "getPhase",
    "test_fire_error",
    "test_dispose_requests",
    "test_dispose_requests_of_same_action",
    "test_dispose_request_on_loadEnd",
    "setTimeout",
    "resume",
    "wait",
    "RequirementError",
    "response",
    "isDone",
    "getResponse",
    "fireEvent",
    "phase",
    "test"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/test/io/rest/Resource.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/* ************************************************************************\n\n\n************************************************************************ */\n/**\n *\n * @asset(qx/test/xmlhttp/*)\n */\n\nqx.Class.define(\"qx.test.io.rest.Resource\", {\n  extend: qx.dev.unit.TestCase,\n\n  include: [qx.dev.unit.MRequirements, qx.dev.unit.MMock],\n\n  members: {\n    setUp() {\n      this.setUpDoubleRequest();\n      this.setUpResource();\n    },\n\n    setUpDoubleRequest() {\n      // Restore Xhr when wrapped before\n      if (typeof qx.io.request.Xhr.restore == \"function\") {\n        qx.io.request.Xhr.restore();\n      }\n\n      var req = (this.req = new qx.io.request.Xhr());\n\n      // Stub request methods, leave event system intact\n      req = this.shallowStub(req, qx.io.request.AbstractRequest);\n\n      // Inject double and return\n      this.injectStub(qx.io.request, \"Xhr\", req);\n\n      // Remember request for later disposal\n      this.__reqs = this.__reqs || [];\n      this.__reqs.push(this.req);\n\n      return req;\n    },\n\n    setUpResource() {\n      this.res && this.res.dispose();\n      var res = (this.res = new qx.io.rest.Resource());\n\n      // Default routes\n      res.map(\"get\", \"GET\", \"/photos\");\n      res.map(\"post\", \"POST\", \"/photos\");\n    },\n\n    tearDown() {\n      this.getSandbox().restore();\n      this.res.dispose();\n      this.__reqs.forEach(function (req) {\n        req.dispose();\n      });\n    },\n\n    //\n    // Configuration\n    //\n\n    \"test: configure request receives pre-configured but unsent request\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.configureRequest(\n        qx.lang.Function.bind(function (req) {\n          this.assertCalledWith(req.setMethod, \"GET\");\n          this.assertCalled(req.setUrl);\n          this.assertNotCalled(req.send);\n        }, this)\n      );\n\n      res.get();\n    },\n\n    \"test: configure request receives invocation details\"() {\n      var res = this.res,\n        req = this.req,\n        params = {},\n        data = {},\n        callback;\n\n      callback = this.spy(\n        qx.lang.Function.bind(function (req, _action, _params, _data) {\n          this.assertEquals(\"get\", _action, \"Unexpected action\");\n          this.assertEquals(params, _params, \"Unexpected params\");\n          this.assertEquals(data, _data, \"Unexpected data\");\n        }, this)\n      );\n\n      res.configureRequest(callback);\n\n      res.get(params, data);\n      this.assertCalled(callback);\n    },\n\n    //\n    // Route\n    //\n\n    \"test: map action\"() {\n      var res = this.res,\n        params;\n\n      params = res._getRequestConfig(\"get\");\n\n      this.assertEquals(\"GET\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n    },\n\n    \"test: map action when base URL\"() {\n      var res = this.res,\n        params;\n\n      res.setBaseUrl(\"http://example.com\");\n      params = res._getRequestConfig(\"get\");\n\n      this.assertEquals(\"http://example.com/photos\", params.url);\n    },\n\n    \"test: map existing action\"() {\n      var res = this.res,\n        params;\n\n      res.map(\"post\", \"GET\", \"/articles\");\n      params = res._getRequestConfig(\"post\");\n\n      this.assertEquals(\"/articles\", params.url);\n    },\n\n    \"test: map action creates method\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.assertFunction(res.get);\n    },\n\n    \"test: map action throws when existing method\"() {\n      this.require([\"debug\"]);\n\n      var res = this.res,\n        req = this.req;\n\n      // For whatever reason\n      res.popular = function () {};\n\n      this.assertException(function () {\n        res.map(\"popular\", \"GET\", \"/photos/popular\");\n      }, Error);\n    },\n\n    \"test: map action does not throw when existing method is empty\"() {\n      this.require([\"debug\"]);\n\n      var res = this.res,\n        req = this.req;\n\n      // For documentation purposes\n      res.get = function () {};\n\n      res.map(\"get\", \"GET\", \"/photos/popular\");\n    },\n\n    \"test: dynamically created action forwards arguments\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.spy(res, \"invoke\");\n      res.get({}, 1, 2, 3);\n\n      this.assertCalledWith(res.invoke, \"get\", {}, 1, 2, 3);\n    },\n\n    \"test: dynamically created action returns what invoke returns\"() {\n      var id = 1;\n      this.stub(this.res, \"invoke\").returns(id);\n      this.assertEquals(id, this.res.get());\n    },\n\n    \"test: map actions from description\"() {\n      var req = this.req,\n        description,\n        res,\n        check = {},\n        params;\n\n      description = {\n        get: { method: \"GET\", url: \"/photos\" },\n        create: { method: \"POST\", url: \"/photos\", check: check }\n      };\n\n      res = new qx.io.rest.Resource(description);\n\n      params = res._getRequestConfig(\"get\");\n      this.assertEquals(\"GET\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n\n      params = res._getRequestConfig(\"create\");\n      this.assertEquals(\"POST\", params.method);\n      this.assertEquals(\"/photos\", params.url);\n      this.assertEquals(check, params.check);\n\n      res.dispose();\n    },\n\n    \"test: map action from description throws with non-object\"() {\n      this.require([\"debug\"]);\n\n      this.assertException(function () {\n        var res = new qx.io.rest.Resource([]);\n      });\n    },\n\n    \"test: map action from description throws with incomplete route\"() {\n      this.require([\"debug\"]);\n\n      this.res.dispose();\n      this.assertException(\n        function () {\n          var description = {\n            get: { method: \"GET\" }\n          };\n\n          this.res = new qx.io.rest.Resource(description);\n        },\n        Error,\n        \"URL must be string for route 'get'\"\n      );\n    },\n\n    //\n    // Invoke\n    //\n\n    \"test: invoke action generically\"() {\n      var res = this.res,\n        req = this.req,\n        result;\n\n      result = res.invoke(\"get\");\n\n      this.assertSend();\n    },\n\n    \"test: invoke action\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get();\n\n      this.assertSend();\n    },\n\n    \"test: invoke action returns id of request\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.assertNumber(res.invoke(\"get\"));\n    },\n\n    \"test: invoke action while other is in progress\"() {\n      var res = this.res,\n        req1,\n        req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.post();\n\n      this.assertCalledOnce(req1.send);\n      this.assertCalledOnce(req2.send);\n    },\n\n    \"test: invoke same action handles multiple requests\"() {\n      var res = this.res,\n        req1,\n        req2,\n        getSuccess = this.spy();\n\n      res.addListener(\"getSuccess\", getSuccess);\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.get();\n\n      this.respond(\"\", req1);\n      this.respond(\"\", req2);\n\n      this.assertCalledTwice(getSuccess);\n    },\n\n    \"test: invoke action with positional params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: \"1\" });\n\n      this.assertCalledWith(req.setUrl, \"/photos/1\");\n    },\n\n    \"test: invoke action with positional params that evaluate to false\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: 0 });\n\n      this.assertCalledWith(req.setUrl, \"/photos/0\");\n    },\n\n    \"test: invoke action with non-string params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: 1 });\n\n      this.assertCalledWith(req.setUrl, \"/photos/1\");\n    },\n\n    \"test: invoke action with params and data\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"put\", \"PUT\", \"/articles/{id}\");\n      res.put({ id: \"1\" }, { article: '{title: \"Affe\"}' });\n\n      // Note that with method GET, parameters are appended to the URLs query part.\n      // Please refer to the API docs of qx.io.request.AbstractRequest#requestData.\n      //\n      // res.get({id: \"1\"}, {lang: \"de\"});\n      // --> /articles/1/?lang=de\n\n      this.assertCalledWith(req.setRequestData, { article: '{title: \"Affe\"}' });\n    },\n\n    \"test: invoke action with multiple positional params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}/comments/{commentId}\");\n      res.get({ id: \"1\", commentId: \"2\" });\n\n      this.assertCalledWith(req.setUrl, \"/photos/1/comments/2\");\n    },\n\n    \"test: invoke action with positional params in query\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}/comments?id={commentId}\");\n      res.get({ id: \"1\", commentId: \"2\" });\n\n      this.assertCalledWith(req.setUrl, \"/photos/1/comments?id=2\");\n    },\n\n    \"test: invoke action with undefined params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get();\n      this.assertCalled(req.send);\n    },\n\n    \"test: invoke action with null params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get(null);\n      this.assertCalled(req.send);\n    },\n\n    \"test: invoke action when content type json\"() {\n      var res = this.res,\n        req = this.req;\n\n      req.setRequestHeader.restore();\n      req.getRequestHeader.restore();\n\n      res.configureRequest(function (req) {\n        req.setRequestHeader(\"Content-Type\", \"application/json\");\n      });\n\n      this.spy(qx.lang.Json, \"stringify\");\n      var data = { location: \"Karlsruhe\" };\n      res.map(\"post\", \"POST\", \"/photos/{id}/meta\");\n      res.post({ id: 1 }, data);\n\n      this.assertCalledWith(req.setRequestData, '{\"location\":\"Karlsruhe\"}');\n      this.assertCalledWith(qx.lang.Json.stringify, data);\n    },\n\n    \"test: invoke action when content type json and get\"() {\n      var res = this.res,\n        req = this.req;\n\n      req.setMethod.restore();\n      req.getMethod.restore();\n\n      this.spy(qx.lang.Json, \"stringify\");\n      req.getRequestHeader.withArgs(\"Content-Type\").returns(\"application/json\");\n      res.get();\n\n      this.assertNotCalled(qx.lang.Json.stringify);\n    },\n\n    \"test: invoke action for url with port\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"http://example.com:8080/photos/{id}\");\n      res.get({ id: \"1\" });\n\n      this.assertCalledWith(req.setUrl, \"http://example.com:8080/photos/1\");\n    },\n\n    \"test: invoke action for relative url\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"{page}\");\n      res.get({ page: \"index\" });\n      this.assertCalledWith(req.setUrl, \"index\");\n    },\n\n    \"test: invoke action for relative url with dots\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"../{page}\");\n      res.get({ page: \"index\" });\n      this.assertCalledWith(req.setUrl, \"../index\");\n    },\n\n    \"test: invoke action for route with check\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/zoom/{id}\", { id: /\\d+/ });\n      res.get({ id: \"123\" });\n\n      this.assertSend(\"GET\", \"/photos/zoom/123\");\n    },\n\n    \"test: invoke action fills in empty string when missing param and no default\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{tag}\");\n      res.get();\n\n      this.assertSend(\"GET\", \"/photos/\");\n    },\n\n    \"test: invoke action fills in default when missing param\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{tag=recent}/{size}\");\n      res.get({ size: \"large\" });\n\n      this.assertSend(\"GET\", \"/photos/recent/large\");\n    },\n\n    \"test: invoke action throws when missing required positional param\"() {\n      var res = this.res;\n\n      // Require positional param\n      res.map(\"get\", \"GET\", \"/photos/{tag}\", {\n        tag: qx.io.rest.Resource.REQUIRED\n      });\n\n      this.assertException(\n        function () {\n          res.get();\n        },\n        Error,\n        \"Missing parameter 'tag'\"\n      );\n    },\n\n    \"test: invoke action throws when missing required request param\"() {\n      var res = new qx.io.rest.Resource();\n\n      // Require request body param\n      res.map(\"post\", \"POST\", \"/photos/\", {\n        photo: qx.io.rest.Resource.REQUIRED\n      });\n\n      this.assertException(\n        function () {\n          res.post();\n        },\n        Error,\n        \"Missing parameter 'photo'\"\n      );\n    },\n\n    \"test: invoke action throws when param not match check\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\", { id: /\\d+/ });\n      this.assertException(\n        function () {\n          res.get({ id: \"FAIL\" });\n        },\n        Error,\n        \"Parameter 'id' is invalid\"\n      );\n    },\n\n    \"test: invoke action ignores invalid check in production\"() {\n      this.skip(\"needs runtime enviroment checks!\");\n\n      this.require([\"debug\"]);\n\n      var res = this.res;\n\n      var setting = this.stub(qx.core.Environment, \"get\").withArgs(\"qx.debug\");\n      setting.returns(false);\n\n      // Invalid check\n      res.map(\"get\", \"GET\", \"/photos/{id}\", { id: \"\" });\n      res.get({ id: 1 });\n    },\n\n    //\n    // Abort\n    //\n\n    \"test: abort action\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get();\n      res.abort(\"get\");\n\n      this.assertCalledOnce(req.abort);\n    },\n\n    \"test: abort action when multiple requests\"() {\n      var res = this.res,\n        req1,\n        req2;\n\n      req1 = this.setUpDoubleRequest();\n      res.get();\n\n      req2 = this.setUpDoubleRequest();\n      res.get();\n\n      res.abort(\"get\");\n\n      this.assertCalledOnce(req1.abort);\n      this.assertCalledOnce(req2.abort);\n    },\n\n    \"test: abort by action id\"() {\n      var res = this.res,\n        req = this.req;\n\n      var id = res.get();\n      res.abort(id);\n\n      this.assertCalledOnce(req.abort);\n    },\n\n    //\n    // Helper\n    //\n\n    \"test: refresh action\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.get();\n      this.assertSend();\n\n      res.refresh(\"get\");\n      this.assertSend();\n    },\n\n    \"test: refresh action replaying previous params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: \"1\" });\n      this.assertSend(\"GET\", \"/photos/1\");\n\n      res.refresh(\"get\");\n      this.assertSend(\"GET\", \"/photos/1\");\n    },\n\n    \"test: poll action\"() {\n      var res = this.res,\n        sandbox = this.getSandbox();\n\n      sandbox.useFakeTimers();\n      this.spy(res._resource, \"refresh\");\n\n      res.poll(\"get\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      this.assertCalledWith(res._resource.refresh, \"get\");\n      this.assertCalledOnce(res._resource.refresh);\n    },\n\n    \"test: not poll action when no response received yet\"() {\n      var res = this.res,\n        sandbox = this.getSandbox();\n\n      sandbox.useFakeTimers();\n      this.spy(res, \"refresh\");\n\n      res.poll(\"get\", 10);\n      sandbox.clock.tick(20);\n\n      this.assertNotCalled(res.refresh);\n    },\n\n    \"test: poll action immediately\"() {\n      var res = this.res;\n\n      this.spy(res._resource, \"invoke\");\n      res.poll(\"get\", 10, undefined, true);\n      this.assertCalled(res._resource.invoke);\n    },\n\n    \"test: poll action sets initial params\"() {\n      var res = this.res;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      this.stub(res._resource, \"invoke\");\n\n      res.poll(\"get\", 10, { id: \"1\" }, true);\n      this.assertCalledWith(res._resource.invoke, \"get\", { id: \"1\" });\n    },\n\n    \"test: poll action replaying previous params\"() {\n      var res = this.res,\n        req = this.req;\n\n      res.map(\"get\", \"GET\", \"/photos/{id}\");\n      res.get({ id: \"1\" });\n      this.assertSend(\"GET\", \"/photos/1\");\n\n      res.poll(\"get\");\n      this.assertSend(\"GET\", \"/photos/1\");\n    },\n\n    \"test: poll action repeatedly ends previous timer\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        msg;\n\n      sandbox.useFakeTimers();\n      this.stub(res._resource, \"refresh\");\n\n      res.poll(\"get\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      res.poll(\"get\", 100);\n      this.respond();\n      sandbox.clock.tick(100);\n\n      this.assertCalledTwice(res._resource.refresh);\n    },\n\n    \"test: poll many actions\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        spy,\n        get,\n        post;\n\n      this.stub(this.req, \"dispose\");\n      sandbox.useFakeTimers();\n\n      spy = this.spy(res._resource, \"refresh\");\n      get = spy.withArgs(\"get\");\n      post = spy.withArgs(\"post\");\n\n      res.poll(\"get\", 10);\n      res.poll(\"post\", 10);\n      this.respond();\n      sandbox.clock.tick(20);\n\n      this.assertCalledOnce(get);\n      this.assertCalledOnce(post);\n\n      this.req.dispose.restore();\n      this.req.dispose();\n    },\n\n    \"test: end poll action\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        timer;\n\n      sandbox.useFakeTimers();\n\n      this.spy(res._resource, \"refresh\");\n      timer = res.poll(\"get\", 10);\n      this.respond();\n\n      // 10ms invoke, 20ms refresh, 30ms refresh\n      sandbox.clock.tick(30);\n      timer.stop();\n      sandbox.clock.tick(100);\n\n      this.assertCalledTwice(res._resource.refresh);\n    },\n\n    \"test: end poll action does not end polling of other action\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        timer,\n        spy;\n\n      sandbox.useFakeTimers();\n      spy = this.spy(res._resource, \"refresh\").withArgs(\"get\");\n      this.respond();\n\n      res.poll(\"get\", 10);\n      timer = res.poll(\"post\", 10);\n      sandbox.clock.tick(20);\n      timer.stop();\n      sandbox.clock.tick(10);\n\n      this.assertCalledTwice(spy);\n    },\n\n    \"test: restart poll action\"() {\n      var res = this.res,\n        sandbox = this.getSandbox(),\n        timer;\n\n      sandbox.useFakeTimers();\n      this.respond();\n\n      timer = res.poll(\"get\", 10);\n      sandbox.clock.tick(10);\n      timer.stop();\n\n      this.spy(res._resource, \"refresh\");\n      timer.restart();\n      sandbox.clock.tick(10);\n      this.assertCalled(res._resource.refresh);\n    },\n\n    \"test: long poll action\"() {\n      var res = this.res,\n        req = this.req,\n        responses = [];\n\n      this.stub(req, \"dispose\");\n\n      res.addListener(\"getSuccess\", e => {\n        responses.push(e.getData());\n      });\n\n      res.longPoll(\"get\");\n\n      // longPoll() sets up new request when receiving a response\n      this.respond(\"1\");\n      this.respond(\"2\");\n      this.respond(\"3\");\n\n      this.assertArrayEquals([\"1\", \"2\", \"3\"], responses);\n    },\n\n    \"test: throttle long poll\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.stub(req, \"dispose\");\n      this.spy(res, \"refresh\");\n      this.stub(qx.io.rest.Resource, \"POLL_THROTTLE_COUNT\").value(\"3\");\n\n      res.longPoll(\"get\");\n\n      // A number of immediate responses, above count\n      for (var i = 0; i < 4; i++) {\n        this.respond();\n      }\n\n      res.refresh = function () {\n        throw new Error(\n          \"With throttling in effect, \" + \"must not make new request.\"\n        );\n      };\n\n      // Throttling\n      this.respond();\n    },\n\n    \"test: not throttle long poll when not received within limit\"() {\n      var res = this.res,\n        req = this.req,\n        sandbox = this.getSandbox();\n\n      this.stub(req, \"dispose\");\n\n      sandbox.useFakeTimers();\n      res.longPoll(\"get\");\n\n      // A number of delayed responses, above count\n      for (var i = 0; i < 31; i++) {\n        sandbox.clock.tick(101);\n        this.respond();\n      }\n\n      this.spy(res, \"refresh\");\n      sandbox.clock.tick(101);\n\n      this.respond();\n      this.assertCalled(res.refresh);\n    },\n\n    \"test: not throttle long poll when not received subsequently\"() {\n      var res = this.res,\n        req = this.req,\n        sandbox = this.getSandbox();\n\n      this.stub(req, \"dispose\");\n\n      sandbox.useFakeTimers();\n      res.longPoll(\"get\");\n\n      // A number of immediate responses\n      for (var i = 0; i < 30; i++) {\n        this.respond();\n      }\n\n      // Delayed response\n      sandbox.clock.tick(101);\n      this.respond();\n\n      // More immediate responses, total count above limit\n      this.spy(res, \"refresh\");\n      for (i = 0; i < 10; i++) {\n        this.respond();\n      }\n\n      this.assertCallCount(res.refresh, 10);\n    },\n\n    \"test: end long poll action\"() {\n      var res = this.res,\n        req = this.req,\n        handlerId,\n        msg;\n\n      this.stub(req, \"dispose\");\n      this.spy(res._resource, \"refresh\");\n\n      handlerId = res.longPoll(\"get\");\n\n      this.respond();\n      this.respond();\n\n      res.removeListenerById(handlerId);\n      this.respond();\n\n      this.assertCalledTwice(res._resource.refresh);\n    },\n\n    //\n    // Events\n    //\n\n    \"test: fire actionSuccess\"() {\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      res.get();\n      this.assertEventFired(\n        res,\n        \"getSuccess\",\n        function () {\n          that.respond(\"Affe\");\n        },\n        function (e) {\n          that.assertEquals(\"Affe\", e.getData());\n          that.assertEquals(\"get\", e.getAction());\n          that.assertIdentical(req, e.getRequest());\n          that.assertInteger(e.getId());\n        }\n      );\n    },\n\n    \"test: fire success\"() {\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      res.get();\n      this.assertEventFired(\n        res,\n        \"success\",\n        function () {\n          that.respond(\"Affe\");\n        },\n        function (e) {\n          that.assertEquals(\"Affe\", e.getData());\n          that.assertEquals(\"get\", e.getAction());\n          that.assertIdentical(req, e.getRequest());\n          that.assertInteger(e.getId());\n        }\n      );\n    },\n\n    \"test: fire actionError\"() {\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      res.get();\n      this.assertEventFired(\n        res,\n        \"getError\",\n        function () {\n          that.respondError(\"statusError\");\n        },\n        function (e) {\n          that.assertEquals(\"statusError\", e.getPhase());\n          that.assertIdentical(req, e.getRequest());\n        }\n      );\n    },\n\n    \"test: fire error\"() {\n      var res = this.res,\n        req = this.req,\n        that = this;\n\n      res.get();\n      this.assertEventFired(\n        res,\n        \"error\",\n        function () {\n          that.respondError(\"statusError\");\n        },\n        function (e) {\n          that.assertEquals(\"statusError\", e.getPhase());\n          that.assertIdentical(req, e.getRequest());\n        }\n      );\n    },\n\n    //\n    // Dispose\n    //\n\n    \"test: dispose requests\"() {\n      var res = this.res,\n        req1,\n        req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.post();\n\n      this.spy(req1, \"dispose\");\n      this.spy(req2, \"dispose\");\n\n      res.dispose();\n\n      this.assertCalled(req1.dispose);\n      this.assertCalled(req2.dispose);\n    },\n\n    \"test: dispose requests of same action\"() {\n      var res = this.res,\n        req1,\n        req2;\n\n      req1 = this.req;\n      res.get();\n\n      this.setUpDoubleRequest();\n\n      req2 = this.req;\n      res.get();\n\n      this.spy(req1, \"dispose\");\n      this.spy(req2, \"dispose\");\n\n      res.dispose();\n\n      this.assertCalled(req1.dispose);\n      this.assertCalled(req2.dispose);\n    },\n\n    \"test: dispose request on loadEnd\"() {\n      var res = this.res,\n        req = this.req;\n\n      this.spy(req, \"dispose\");\n\n      res.get();\n      this.respond();\n\n      setTimeout(\n        function () {\n          this.resume(function () {\n            this.assertCalledOnce(req.dispose);\n          }, this);\n        }.bind(this),\n        100\n      );\n\n      this.wait();\n    },\n\n    assertSend(method, url) {\n      var req = this.req;\n\n      method = method || \"GET\";\n      url = url || \"/photos\";\n\n      this.assertCalledWith(req.setMethod, method);\n      this.assertCalledWith(req.setUrl, url);\n      this.assertCalled(req.send);\n    },\n\n    skip(msg) {\n      throw new qx.dev.unit.RequirementError(null, msg);\n    },\n\n    // Fake response\n    respond(response, req) {\n      var req = req || this.req;\n      response = response || \"\";\n      req.isDone.returns(true);\n      req.getPhase.returns(\"success\");\n      req.getResponse.returns(response);\n      req.fireEvent(\"success\");\n      req.fireEvent(\"loadEnd\");\n    },\n\n    // Fake erroneous response\n    respondError(phase) {\n      var req = this.req;\n      phase = phase || \"statusError\";\n      req.getPhase.returns(phase);\n      req.fireEvent(\"fail\");\n      req.fireEvent(\"loadEnd\");\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}