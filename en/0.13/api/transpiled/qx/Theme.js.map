{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "name",
    "config",
    "include",
    "__normalizeArray",
    "patch",
    "theme",
    "$$type",
    "title",
    "toString",
    "genericToString",
    "extend",
    "supertheme",
    "basename",
    "createNamespace",
    "__convert",
    "__initializeAliases",
    "$$registry",
    "i",
    "a",
    "l",
    "length",
    "boot",
    "__P_103_0",
    "objectOrArray",
    "isArray",
    "__P_103_2",
    "aliases",
    "objectMergeWith",
    "getAll",
    "getByName",
    "isDefined",
    "undefined",
    "getTotalNumber",
    "objectGetLength",
    "__extractType",
    "__P_103_3",
    "keys",
    "__inheritableKeys",
    "__P_103_1",
    "type",
    "clazz",
    "prototype",
    "$$clazz",
    "target",
    "source",
    "id",
    "base",
    "__allowedKeys",
    "core",
    "Environment",
    "select",
    "colors",
    "borders",
    "decorations",
    "fonts",
    "icons",
    "widgets",
    "appearances",
    "meta",
    "__metaKeys",
    "color",
    "border",
    "decoration",
    "font",
    "icon",
    "appearance",
    "widget",
    "__validateConfig",
    "_true",
    "allowed",
    "key",
    "Error",
    "_typeof",
    "maps",
    "Array",
    "RegExp",
    "Date",
    "classname",
    "counter",
    "value",
    "_default",
    "mixinTheme",
    "__checkForInvalidTheme",
    "__P_103_8",
    "errorObj",
    "Theme"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/Theme.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Theme classes contain styling information for certain aspects of the\n * graphical user interface.\n *\n * Supported themes are: colors, decorations, fonts, icons, appearances.\n * The additional meta theme allows for grouping of the individual\n * themes.\n *\n * For more details, take a look at the\n * <a href='http://qooxdoo.org/docs/#desktop/gui/theming.md' target='_blank'>\n * documentation of the theme system in the qooxdoo manual.</a>\n */\nqx.Bootstrap.define(\"qx.Theme\", {\n  statics: {\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Theme config\n     *\n     * Example:\n     * <pre class='javascript'>\n     * qx.Theme.define(\"name\",\n     * {\n     *   aliases : {\n     *     \"aliasKey\" : \"resourceFolderOrUri\"\n     *   },\n     *   extend : otherTheme,\n     *   include : [MMixinTheme],\n     *   patch : [MMixinTheme],\n     *   colors : {},\n     *   decorations : {},\n     *   fonts : {},\n     *   widgets : {},\n     *   appearances : {},\n     *   meta : {},\n     *   boot : function(){}\n     * });\n     * </pre>\n     *\n     * For more details, take a look at the\n     * <a href='http://qooxdoo.org/docs/#desktop/gui/theming.md' target='_blank'>\n     * documentation of the theme system in the qooxdoo manual.</a>\n     *\n     * @param name {String} name of the mixin\n     * @param config {Map} config structure\n     */\n    define(name, config) {\n      if (!config) {\n        var config = {};\n      }\n\n      config.include = this.__normalizeArray(config.include);\n      config.patch = this.__normalizeArray(config.patch);\n\n      // Validate incoming data\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__validateConfig(name, config);\n      }\n\n      // Create alias\n      var theme = {\n        $$type: \"Theme\",\n        name: name,\n        title: config.title,\n\n        // Attach toString\n        toString: this.genericToString\n      };\n\n      // Remember extend\n      if (config.extend) {\n        theme.supertheme = config.extend;\n      }\n\n      // Assign to namespace\n      theme.basename = qx.Bootstrap.createNamespace(name, theme);\n\n      // Convert theme entry from Object to Function (for prototype inheritance)\n      this.__convert(theme, config);\n\n      this.__initializeAliases(theme, config);\n\n      // Store class reference in global class registry\n      this.$$registry[name] = theme;\n\n      // Include mixin themes\n      for (var i = 0, a = config.include, l = a.length; i < l; i++) {\n        this.include(theme, a[i]);\n      }\n\n      for (var i = 0, a = config.patch, l = a.length; i < l; i++) {\n        this.patch(theme, a[i]);\n      }\n\n      // Run boot code\n      if (config.boot) {\n        config.boot();\n      }\n    },\n\n    /**\n     * Normalize an object to an array\n     *\n     * @param objectOrArray {Object|Array} Either an object that is to be\n     *   normalized to an array, or an array, which is just passed through\n     *\n     * @return {Array} Either an array that has the original object as its\n     *   single item, or the original array itself\n     */\n    __normalizeArray(objectOrArray) {\n      if (!objectOrArray) {\n        return [];\n      }\n\n      if (qx.Bootstrap.isArray(objectOrArray)) {\n        return objectOrArray;\n      } else {\n        return [objectOrArray];\n      }\n    },\n\n    /**\n     * Initialize alias inheritance\n     *\n     * @param theme {Map} The theme\n     * @param config {Map} config structure\n     */\n    __initializeAliases(theme, config) {\n      var aliases = config.aliases || {};\n      if (config.extend && config.extend.aliases) {\n        qx.Bootstrap.objectMergeWith(aliases, config.extend.aliases, false);\n      }\n\n      theme.aliases = aliases;\n    },\n\n    /**\n     * Return a map of all known themes\n     *\n     * @return {Map} known themes\n     */\n    getAll() {\n      return this.$$registry;\n    },\n\n    /**\n     * Returns a theme by name\n     *\n     * @param name {String} theme name to check\n     * @return {Object ? void} theme object\n     */\n    getByName(name) {\n      return this.$$registry[name];\n    },\n\n    /**\n     * Determine if theme exists\n     *\n     * @param name {String} theme name to check\n     * @return {Boolean} true if theme exists\n     */\n    isDefined(name) {\n      return this.getByName(name) !== undefined;\n    },\n\n    /**\n     * Determine the number of themes which are defined\n     *\n     * @return {Number} the number of classes\n     */\n    getTotalNumber() {\n      return qx.Bootstrap.objectGetLength(this.$$registry);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n       PRIVATE/INTERNAL API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method will be attached to all themes to return\n     * a nice identifier for them.\n     *\n     * @internal\n     * @return {String} The interface identifier\n     */\n    genericToString() {\n      return \"[Theme \" + this.name + \"]\";\n    },\n\n    /**\n     * Extract the inheritable key (could be only one)\n     *\n     * @param config {Map} The map from where to extract the key\n     * @return {String} the key which was found\n     */\n    __extractType(config) {\n      for (\n        var i = 0, keys = this.__inheritableKeys, l = keys.length;\n        i < l;\n        i++\n      ) {\n        if (config[keys[i]]) {\n          return keys[i];\n        }\n      }\n    },\n\n    /**\n     * Convert existing entry to a prototype based inheritance function\n     *\n     * @param theme {Theme} newly created theme object\n     * @param config {Map} incoming theme configuration\n     */\n    __convert(theme, config) {\n      var type = this.__extractType(config);\n\n      // Use theme key from extended theme if own one is not available\n      if (config.extend && !type) {\n        type = config.extend.type;\n      }\n\n      // Save theme type\n      theme.type = type || \"other\";\n\n      // Create pseudo class\n      var clazz = function () {};\n\n      // Process extend config\n      if (config.extend) {\n        clazz.prototype = new config.extend.$$clazz();\n      }\n\n      var target = clazz.prototype;\n      var source = config[type];\n\n      // Copy entries to prototype\n      for (var id in source) {\n        target[id] = source[id];\n\n        // Appearance themes only:\n        // Convert base flag to class reference (needed for mixin support)\n        if (target[id].base) {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            if (!config.extend) {\n              throw new Error(\n                \"Found base flag in entry '\" +\n                  id +\n                  \"' of theme '\" +\n                  config.name +\n                  \"'. Base flags are not allowed for themes without a valid super theme!\"\n              );\n            }\n          }\n\n          target[id].base = config.extend;\n        }\n      }\n\n      // store pseudo class\n      theme.$$clazz = clazz;\n\n      // and create instance under the old key\n      theme[type] = new clazz();\n    },\n\n    /** @type {Map} Internal theme registry */\n    $$registry: {},\n\n    /** @type {Array} Keys which support inheritance */\n    __inheritableKeys: [\n      \"colors\",\n      \"borders\",\n      \"decorations\",\n      \"fonts\",\n      \"icons\",\n      \"widgets\",\n      \"appearances\",\n      \"meta\"\n    ],\n\n    /** @type {Map} allowed keys in theme definition */\n    __allowedKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        title: \"string\", // String\n        aliases: \"object\", // Map\n        type: \"string\", // String\n        extend: \"object\", // Theme\n        colors: \"object\", // Map\n        borders: \"object\", // Map\n        decorations: \"object\", // Map\n        fonts: \"object\", // Map\n        icons: \"object\", // Map\n        widgets: \"object\", // Map\n        appearances: \"object\", // Map\n        meta: \"object\", // Map\n        include: \"object\", // Array\n        patch: \"object\", // Array\n        boot: \"function\" // Function\n      },\n\n      default: null\n    }),\n\n    /** @type {Map} allowed keys inside a meta theme block */\n    __metaKeys: qx.core.Environment.select(\"qx.debug\", {\n      true: {\n        color: \"object\",\n        border: \"object\",\n        decoration: \"object\",\n        font: \"object\",\n        icon: \"object\",\n        appearance: \"object\",\n        widget: \"object\"\n      },\n\n      default: null\n    }),\n\n    /**\n     * Validates incoming configuration and checks keys and values\n     *\n     * @signature function(name, config)\n     * @param name {String} The name of the class\n     * @param config {Map} Configuration map\n     * @throws {Error} if the given config is not valid (e.g. wrong key or wrong key value)\n     */\n    __validateConfig: qx.core.Environment.select(\"qx.debug\", {\n      true(name, config) {\n        var allowed = this.__allowedKeys;\n        for (var key in config) {\n          if (allowed[key] === undefined) {\n            throw new Error(\n              'The configuration key \"' +\n                key +\n                '\" in theme \"' +\n                name +\n                '\" is not allowed!'\n            );\n          }\n\n          if (config[key] == null) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in theme \"' +\n                name +\n                '\"! The value is undefined/null!'\n            );\n          }\n\n          if (allowed[key] !== null && typeof config[key] !== allowed[key]) {\n            throw new Error(\n              'Invalid type of key \"' +\n                key +\n                '\" in theme \"' +\n                name +\n                '\"! The type of the key must be \"' +\n                allowed[key] +\n                '\"!'\n            );\n          }\n        }\n\n        // Validate maps\n        var maps = [\n          \"colors\",\n          \"borders\",\n          \"decorations\",\n          \"fonts\",\n          \"icons\",\n          \"widgets\",\n          \"appearances\",\n          \"meta\"\n        ];\n\n        for (var i = 0, l = maps.length; i < l; i++) {\n          var key = maps[i];\n\n          if (\n            config[key] !== undefined &&\n            (config[key] instanceof Array ||\n              config[key] instanceof RegExp ||\n              config[key] instanceof Date ||\n              config[key].classname !== undefined)\n          ) {\n            throw new Error(\n              'Invalid key \"' +\n                key +\n                '\" in theme \"' +\n                name +\n                '\"! The value needs to be a map!'\n            );\n          }\n        }\n\n        // Check conflicts (detect number ...)\n        var counter = 0;\n        for (var i = 0, l = maps.length; i < l; i++) {\n          var key = maps[i];\n\n          if (config[key]) {\n            counter++;\n          }\n\n          if (counter > 1) {\n            throw new Error(\n              \"You can only define one theme category per file! Invalid theme: \" +\n                name\n            );\n          }\n        }\n\n        // Validate meta\n        if (config.meta) {\n          var value;\n          for (var key in config.meta) {\n            value = config.meta[key];\n\n            if (this.__metaKeys[key] === undefined) {\n              throw new Error(\n                'The key \"' +\n                  key +\n                  '\" is not allowed inside a meta theme block.'\n              );\n            }\n\n            if (typeof value !== this.__metaKeys[key]) {\n              throw new Error(\n                'The type of the key \"' +\n                  key +\n                  '\" inside the meta block is wrong.'\n              );\n            }\n\n            if (\n              !(\n                typeof value === \"object\" &&\n                value !== null &&\n                value.$$type === \"Theme\"\n              )\n            ) {\n              throw new Error(\n                'The content of a meta theme must reference to other themes. The value for \"' +\n                  key +\n                  '\" in theme \"' +\n                  name +\n                  '\" is invalid: ' +\n                  value\n              );\n            }\n          }\n        }\n\n        // Validate extend\n        if (config.extend && config.extend.$$type !== \"Theme\") {\n          throw new Error(\n            'Invalid extend in theme \"' + name + '\": ' + config.extend\n          );\n        }\n\n        // Validate include\n        if (config.include) {\n          for (var i = 0, l = config.include.length; i < l; i++) {\n            if (\n              typeof config.include[i] == \"undefined\" ||\n              config.include[i].$$type !== \"Theme\"\n            ) {\n              throw new Error(\n                'Invalid include in theme \"' + name + '\": ' + config.include[i]\n              );\n            }\n          }\n        }\n\n        // Validate patch\n        if (config.patch) {\n          for (var i = 0, l = config.patch.length; i < l; i++) {\n            if (\n              typeof config.patch[i] === \"undefined\" ||\n              config.patch[i].$$type !== \"Theme\"\n            ) {\n              throw new Error(\n                'Invalid patch in theme \"' + name + '\": ' + config.patch[i]\n              );\n            }\n          }\n        }\n      },\n\n      default() {}\n    }),\n\n    /**\n     * Include all keys of the given mixin theme into the theme. The mixin may\n     * include keys which are already defined in the target theme. Existing\n     * features of equal name will be overwritten.\n     *\n     * @param theme {Theme} An existing theme which should be modified by including the mixin theme.\n     * @param mixinTheme {Theme} The theme to be included.\n     */\n    patch(theme, mixinTheme) {\n      this.__checkForInvalidTheme(mixinTheme);\n\n      var type = this.__extractType(mixinTheme);\n      if (type !== this.__extractType(theme)) {\n        throw new Error(\n          \"The mixins '\" +\n            theme.name +\n            \"' are not compatible '\" +\n            mixinTheme.name +\n            \"'!\"\n        );\n      }\n\n      var source = mixinTheme[type];\n      var target = theme.$$clazz.prototype;\n\n      for (var key in source) {\n        target[key] = source[key];\n      }\n    },\n\n    /**\n     * Include all keys of the given mixin theme into the theme. If the\n     * mixin includes any keys that are already available in the\n     * class, they will be silently ignored. Use the {@link #patch} method\n     * if you need to overwrite keys in the current class.\n     *\n     * @param theme {Theme} An existing theme which should be modified by including the mixin theme.\n     * @param mixinTheme {Theme} The theme to be included.\n     */\n    include(theme, mixinTheme) {\n      this.__checkForInvalidTheme(mixinTheme);\n\n      var type = mixinTheme.type;\n      if (type !== theme.type) {\n        throw new Error(\n          \"The mixins '\" +\n            theme.name +\n            \"' are not compatible '\" +\n            mixinTheme.name +\n            \"'!\"\n        );\n      }\n\n      var source = mixinTheme[type];\n      var target = theme.$$clazz.prototype;\n\n      for (var key in source) {\n        //Skip keys already present\n        if (target[key] !== undefined) {\n          continue;\n        }\n\n        target[key] = source[key];\n      }\n    },\n\n    /**\n     * Helper method to check for an invalid theme\n     *\n     * @param mixinTheme {qx.Theme?null} theme to check\n     * @throws {Error} if the theme is not valid\n     */\n    __checkForInvalidTheme(mixinTheme) {\n      if (typeof mixinTheme === \"undefined\" || mixinTheme == null) {\n        var errorObj = new Error(\"Mixin theme is not a valid theme!\");\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          var stackTrace = qx.dev.StackTrace.getStackTraceFromError(errorObj);\n          qx.Bootstrap.error(this, stackTrace);\n        }\n\n        throw errorObj;\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}