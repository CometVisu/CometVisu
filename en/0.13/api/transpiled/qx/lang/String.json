{
  "className": "qx.lang.String",
  "packageName": "qx.lang",
  "name": "String",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 58,
        "column": 0,
        "index": 1378
      },
      "end": {
        "line": 444,
        "column": 3,
        "index": 15444
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>String helper functions\n The native JavaScript String is not modified by this class. However,\n there are modifications to the native String in {@link qx.lang.normalize.String} for\n browsers that do not support certain features.</p>"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.lang.normalize.String"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__unicodeLetters": {
      "location": {
        "start": {
          "line": 63,
          "column": 4,
          "index": 1591
        },
        "end": {
          "line": 64,
          "column": 2769,
          "index": 4378
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Unicode letters.  they are taken from Steve Levithan's excellent XRegExp library [http://xregexp.com/addons/unicode/unicode-base.js]</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__unicodeFirstLetterInWordRegexp": {
      "location": {
        "start": {
          "line": 69,
          "column": 4,
          "index": 4473
        },
        "end": {
          "line": 69,
          "column": 42,
          "index": 4511
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>A RegExp that matches the first letter in a word - unicode aware</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__camelCaseMap": {
      "location": {
        "start": {
          "line": 75,
          "column": 4,
          "index": 4658
        },
        "end": {
          "line": 75,
          "column": 22,
          "index": 4676
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Cache for often used string operations [camelCasing and hyphenation]\n e.g. marginTop => margin-top"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__hyphenationMap": {
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 4792
        },
        "end": {
          "line": 81,
          "column": 24,
          "index": 4812
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{Map} Cache for often used hyphenation operations\n e.g. marginTop =&gt; margin-top</p>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__characterTypes": {
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 4939
        },
        "end": {
          "line": 84,
          "column": 26,
          "index": 4961
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map<char, String} character types, key is the character and the vaklue is <code>upper</code>, <code>lower</code>, or <code>digit</code>"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "camelCase": {
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 5276
        },
        "end": {
          "line": 104,
          "column": 5,
          "index": 5551
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a hyphenated string (separated by '-') to camel case.\n Example:\n <pre class='javascript'>qx.lang.String.camelCase(\"I-like-cookies\");</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} hyphenated string",
            "paramName": "str",
            "description": " hyphenated string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} camelcase string",
            "type": "qx.lang.String",
            "description": " camelcase string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hyphenate": {
      "location": {
        "start": {
          "line": 115,
          "column": 4,
          "index": 5878
        },
        "end": {
          "line": 124,
          "column": 5,
          "index": 6166
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a camelcased string to a hyphenated (separated by '-') string.\n Example:\n <pre class='javascript'>qx.lang.String.hyphenate(\"weLikeCookies\");</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} camelcased string",
            "paramName": "str",
            "description": " camelcased string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} hyphenated string",
            "type": "qx.lang.String",
            "description": " hyphenated string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "capitalize": {
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 6448
        },
        "end": {
          "line": 157,
          "column": 5,
          "index": 7167
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a string to camel case.\n Example:\n <pre class='javascript'>qx.lang.String.camelCase(\"i like cookies\");</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} any string",
            "paramName": "str",
            "description": " any string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} capitalized string",
            "type": "qx.lang.String",
            "description": " capitalized string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isUpperCase": {
      "location": {
        "start": {
          "line": 164,
          "column": 4,
          "index": 7295
        },
        "end": {
          "line": 166,
          "column": 5,
          "index": 7378
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the string is all upper case</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} str"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isLowerCase": {
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 7506
        },
        "end": {
          "line": 175,
          "column": 5,
          "index": 7589
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the string is all lower case</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} str"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isLetters": {
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 7714
        },
        "end": {
          "line": 184,
          "column": 5,
          "index": 7796
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the string is all letters</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} str"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isDigits": {
      "location": {
        "start": {
          "line": 191,
          "column": 4,
          "index": 7920
        },
        "end": {
          "line": 193,
          "column": 5,
          "index": 8000
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Detects whether the string is all digits</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "{String} str"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clean": {
      "location": {
        "start": {
          "line": 209,
          "column": 4,
          "index": 8355
        },
        "end": {
          "line": 211,
          "column": 5,
          "index": 8419
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes all extraneous whitespace from a string and trims it\n Example:\n <code>\n qx.lang.String.clean(\" i      like     cookies      \\n\\n\");\n </code>\n Returns \"i like cookies\"</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to clean up",
            "paramName": "str",
            "description": " the string to clean up",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Cleaned up string",
            "type": "qx.lang.String",
            "description": " Cleaned up string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trimLeft": {
      "location": {
        "start": {
          "line": 219,
          "column": 4,
          "index": 8596
        },
        "end": {
          "line": 221,
          "column": 5,
          "index": 8655
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>removes white space from the left side of a string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to trim",
            "paramName": "str",
            "description": " the string to trim",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the trimmed string",
            "type": "qx.lang.String",
            "description": " the trimmed string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trimRight": {
      "location": {
        "start": {
          "line": 229,
          "column": 4,
          "index": 8833
        },
        "end": {
          "line": 231,
          "column": 5,
          "index": 8893
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>removes white space from the right side of a string</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to trim",
            "paramName": "str",
            "description": " the string to trim",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the trimmed string",
            "type": "qx.lang.String",
            "description": " the trimmed string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "startsWith": {
      "location": {
        "start": {
          "line": 242,
          "column": 4,
          "index": 9259
        },
        "end": {
          "line": 244,
          "column": 5,
          "index": 9335
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the string starts with the given substring</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use String instance startsWith method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fullstr {String} the string to search in",
            "paramName": "fullstr",
            "description": " the string to search in",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "substr {String} the substring to look for",
            "paramName": "substr",
            "description": " the substring to look for",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the string starts with the given substring",
            "type": "Boolean",
            "description": " whether the string starts with the given substring"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "endsWith": {
      "location": {
        "start": {
          "line": 255,
          "column": 4,
          "index": 9695
        },
        "end": {
          "line": 257,
          "column": 5,
          "index": 9767
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the string ends with the given substring</p>"
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use String instance endsWith method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fullstr {String} the string to search in",
            "paramName": "fullstr",
            "description": " the string to search in",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "substr {String} the substring to look for",
            "paramName": "substr",
            "description": " the substring to look for",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the string ends with the given substring",
            "type": "Boolean",
            "description": " whether the string ends with the given substring"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "repeat": {
      "location": {
        "start": {
          "line": 266,
          "column": 4,
          "index": 10005
        },
        "end": {
          "line": 268,
          "column": 5,
          "index": 10098
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns a string, which repeats a string 'length' times</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} string used to repeat",
            "paramName": "str",
            "description": " string used to repeat",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "times {Integer} the number of repetitions",
            "paramName": "times",
            "description": " the number of repetitions",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} repeated string",
            "type": "qx.lang.String",
            "description": " repeated string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "pad": {
      "location": {
        "start": {
          "line": 278,
          "column": 4,
          "index": 10434
        },
        "end": {
          "line": 288,
          "column": 5,
          "index": 10695
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Pad a string up to a given length. Padding characters are added to the left of the string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string to pad",
            "paramName": "str",
            "description": " the string to pad",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "length {Integer} the final length of the string",
            "paramName": "length",
            "description": " the final length of the string",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "ch {String} character used to fill up the string",
            "paramName": "ch",
            "description": " character used to fill up the string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} padded string",
            "type": "qx.lang.String",
            "description": " padded string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "firstUp": {
      "location": {
        "start": {
          "line": 297,
          "column": 4,
          "index": 10929
        },
        "end": {
          "line": 297,
          "column": 33,
          "index": 10958
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert the first character of the string to upper case.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(str)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string",
            "paramName": "str",
            "description": " the string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with an upper case first character",
            "type": "qx.lang.String",
            "description": " the string with an upper case first character"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "firstLow": {
      "location": {
        "start": {
          "line": 306,
          "column": 4,
          "index": 11191
        },
        "end": {
          "line": 306,
          "column": 35,
          "index": 11222
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Convert the first character of the string to lower case.</p>"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(str)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string",
            "paramName": "str",
            "description": " the string",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with a lower case first character",
            "type": "qx.lang.String",
            "description": " the string with a lower case first character"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 315,
          "column": 4,
          "index": 11473
        },
        "end": {
          "line": 317,
          "column": 5,
          "index": 11548
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether the string contains a given substring</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string",
            "paramName": "str",
            "description": " the string",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "substring {String} substring to search for",
            "paramName": "substring",
            "description": " substring to search for",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the string contains the substring",
            "type": "Boolean",
            "description": " whether the string contains the substring"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "format": {
      "location": {
        "start": {
          "line": 333,
          "column": 4,
          "index": 12468
        },
        "end": {
          "line": 367,
          "column": 5,
          "index": 13286
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Print a list of arguments using a format string\n In the format string occurrences of %n are replaced by the n'th element of the args list.\n You can give an object as argument.\n In this case you should specify namedArgument in your string with %{namedArgument}.\n The named argument will be replace by the value of the property of the object named \"namedArgument\"\n Example:\n </p>\n<pre class='javascript'>qx.lang.String.format(\"Hello %1, my name is %2\", [\"Egon\", \"Franz\"]) == \"Hello Egon, my name is Franz\"</pre>\n<pre class='javascript'>qx.lang.String.format(\"Hello %{yourName}, my name is %{myName}\", {yourName: \"Egon\", myName: \"Franz\"}) == \"Hello Egon, my name is Franz\"</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "pattern {String} format string",
            "paramName": "pattern",
            "description": " format string",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "args {Array} array of arguments to insert into the format string",
            "paramName": "args",
            "description": " array of arguments to insert into the format string",
            "type": "qx.lang.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the formatted string",
            "type": "qx.lang.String",
            "description": " the formatted string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "escapeRegexpChars": {
      "location": {
        "start": {
          "line": 375,
          "column": 4,
          "index": 13516
        },
        "end": {
          "line": 377,
          "column": 5,
          "index": 13607
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Escapes all chars that have a special meaning in regular expressions</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string where to escape the chars.",
            "paramName": "str",
            "description": " the string where to escape the chars.",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with the escaped chars.",
            "type": "qx.lang.String",
            "description": " the string with the escaped chars."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toArray": {
      "location": {
        "start": {
          "line": 386,
          "column": 4,
          "index": 13861
        },
        "end": {
          "line": 388,
          "column": 5,
          "index": 13915
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Converts a string to an array of characters.\n </p>\n<pre>\"hello\" => [ \"h\", \"e\", \"l\", \"l\", \"o\" ];</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string which should be split",
            "paramName": "str",
            "description": " the string which should be split",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the result array of characters",
            "type": "qx.lang.Array",
            "description": " the result array of characters"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stripTags": {
      "location": {
        "start": {
          "line": 398,
          "column": 4,
          "index": 14204
        },
        "end": {
          "line": 400,
          "column": 5,
          "index": 14272
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove HTML/XML tags from a string\n Example:\n </p>\n<pre class='javascript'>qx.lang.String.stripTags(\"&lt;h1>Hello&lt;/h1>\") == \"Hello\"</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} string containing tags",
            "paramName": "str",
            "description": " string containing tags",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with stripped tags",
            "type": "qx.lang.String",
            "description": " the string with stripped tags"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stripScripts": {
      "location": {
        "start": {
          "line": 409,
          "column": 4,
          "index": 14549
        },
        "end": {
          "line": 424,
          "column": 5,
          "index": 14887
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Strips <script> tags including its content from the given string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} string containing tags",
            "paramName": "str",
            "description": " string containing tags",
            "type": "qx.lang.String"
          },
          {
            "name": "@param",
            "body": "exec {Boolean?false} Whether the filtered code should be executed",
            "paramName": "exec",
            "description": " Whether the filtered code should be executed",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The filtered string",
            "type": "qx.lang.String",
            "description": " The filtered string"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "quote": {
      "location": {
        "start": {
          "line": 431,
          "column": 4,
          "index": 15029
        },
        "end": {
          "line": 433,
          "column": 5,
          "index": 15122
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Quotes the given string.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} String to quote.",
            "paramName": "str",
            "description": " String to quote.",
            "type": "qx.lang.String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The quoted string.",
            "type": "qx.lang.String",
            "description": " The quoted string."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 436,
        "column": 2,
        "index": 15131
      },
      "end": {
        "line": 443,
        "column": 3,
        "index": 15440
      }
    }
  },
  "descendants": []
}