{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "trim",
    "replace",
    "startsWith",
    "searchString",
    "position",
    "substr",
    "length",
    "endsWith",
    "subjectString",
    "toString",
    "isFinite",
    "Math",
    "floor",
    "lastIndex",
    "indexOf",
    "codePointAt",
    "TypeError",
    "string",
    "String",
    "size",
    "index",
    "Number",
    "undefined",
    "first",
    "charCodeAt",
    "second",
    "fromCodePoint",
    "_",
    "codeUnits",
    "codeLen",
    "result",
    "len",
    "arguments",
    "codePoint",
    "RangeError",
    "push",
    "fromCharCode",
    "apply",
    "defer",
    "core",
    "Environment",
    "get",
    "prototype",
    "lang",
    "normalize"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/lang/normalize/String.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (wittemann)\r\n\r\n************************************************************************ */\r\n/**\r\n * This class is responsible for the normalization of the native 'String' object.\r\n * It checks if these methods are available and, if not, appends them to\r\n * ensure compatibility in all browsers.\r\n * For usage samples, check out the attached links.\r\n *\r\n * @group (Polyfill)\r\n */\r\nqx.Bootstrap.define(\"qx.lang.normalize.String\", {\r\n  statics: {\r\n    /**\r\n     * Removes whitespace from both ends of the string.\r\n     *\r\n     * <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/Trim\">MDN documentation</a> |\r\n     * <a href=\"http://es5.github.com/#x15.5.4.20\">Annotated ES5 Spec</a>\r\n     *\r\n     * @return {String} The trimmed string\r\n     */\r\n    trim() {\r\n      return this.replace(/^\\s+|\\s+$/g, \"\");\r\n    },\r\n\r\n    /**\r\n     * Determines whether a string begins with the characters of another\r\n     * string, returning true or false as appropriate.\r\n     *\r\n     * @param searchString {String} The characters to be searched for at the\r\n     *   start of this string.\r\n     * @param position {Integer?0} The position in this string at which to\r\n     *   begin searching for <code>searchString</code>.\r\n     * @return {Boolean} Whether the string begins with the other string.\r\n     */\r\n    startsWith(searchString, position) {\r\n      position = position || 0;\r\n      return this.substr(position, searchString.length) === searchString;\r\n    },\r\n\r\n    /**\r\n     * Determines whether a ends with the characters of another string,\r\n     * returning true or false as appropriate.\r\n     *\r\n     * @param searchString {String} The characters to be searched for at the\r\n     *   end of this string.\r\n     * @param position {Integer?length} Search within this string as if this\r\n     *   string were only this long; defaults to this string's actual length,\r\n     *   clamped within the range established by this string's length.\r\n     * @return {Boolean} Whether the string ends with the other string.\r\n     */\r\n    endsWith(searchString, position) {\r\n      var subjectString = this.toString();\r\n      if (\r\n        typeof position !== \"number\" ||\r\n        !isFinite(position) ||\r\n        Math.floor(position) !== position ||\r\n        position > subjectString.length\r\n      ) {\r\n        position = subjectString.length;\r\n      }\r\n      position -= searchString.length;\r\n      var lastIndex = subjectString.indexOf(searchString, position);\r\n      return lastIndex !== -1 && lastIndex === position;\r\n    },\r\n\r\n    /**\r\n     * Returns a non-negative integer that is the Unicode code point value.\r\n     *   see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\r\n     *\r\n     * @param position {Integer} Position of an element in the string to\r\n     *   return the code point value from.\r\n     * @return {Integer} A number representing the code point value of\r\n     *   the character at the given pos. If there is no element at pos,\r\n     *   returns undefined..\r\n     */\r\n    codePointAt(position) {\r\n      if (this == null) {\r\n        throw TypeError();\r\n      }\r\n      var string = String(this);\r\n      var size = string.length;\r\n      // `ToInteger`\r\n      var index = position ? Number(position) : 0;\r\n      if (index != index) {\r\n        // better `isNaN`\r\n        index = 0;\r\n      }\r\n      // Account for out-of-bounds indices:\r\n      if (index < 0 || index >= size) {\r\n        return undefined;\r\n      }\r\n      // Get the first code unit\r\n      var first = string.charCodeAt(index);\r\n      var second;\r\n      if (\r\n        // check if itâ€™s the start of a surrogate pair\r\n        first >= 0xd800 &&\r\n        first <= 0xdbff && // high surrogate\r\n        size > index + 1 // there is a next code unit\r\n      ) {\r\n        second = string.charCodeAt(index + 1);\r\n        if (second >= 0xdc00 && second <= 0xdfff) {\r\n          // low surrogate\r\n          // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n          return (first - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;\r\n        }\r\n      }\r\n      return first;\r\n    },\r\n\r\n    /**\r\n     * Returns a string created by using the specified sequence of code points.\r\n     *   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\r\n     *\r\n     * @param var_args {Integer} A sequence of code points as a variable argument list\r\n     *   The undescore is used as a throwaway variable.\r\n     * @return {String} A string created by using\r\n     *   the specified sequence of code points.\r\n     */\r\n    fromCodePoint(_) {\r\n      var codeUnits = [],\r\n        codeLen = 0,\r\n        result = \"\";\r\n      for (var index = 0, len = arguments.length; index !== len; ++index) {\r\n        var codePoint = +arguments[index];\r\n        // correctly handles all cases including `NaN`, `-Infinity`, `+Infinity`\r\n        // The surrounding `!(...)` is required to correctly handle `NaN` cases\r\n        // The (codePoint>>>0) === codePoint clause handles decimals and negatives\r\n        if (!(codePoint < 0x10ffff && codePoint >>> 0 === codePoint)) {\r\n          throw RangeError(\"Invalid code point: \" + codePoint);\r\n        }\r\n        if (codePoint <= 0xffff) {\r\n          // BMP code point\r\n          codeLen = codeUnits.push(codePoint);\r\n        } else {\r\n          // Astral code point; split in surrogate halves\r\n          // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\r\n          codePoint -= 0x10000;\r\n          codeLen = codeUnits.push(\r\n            (codePoint >> 10) + 0xd800, // highSurrogate\r\n            (codePoint % 0x400) + 0xdc00 // lowSurrogate\r\n          );\r\n        }\r\n        if (codeLen >= 0x3fff) {\r\n          result += String.fromCharCode.apply(null, codeUnits);\r\n          codeUnits.length = 0;\r\n        }\r\n      }\r\n\r\n      return result + String.fromCharCode.apply(null, codeUnits);\r\n    }\r\n  },\r\n\r\n  defer(statics) {\r\n    // trim\r\n    if (!qx.core.Environment.get(\"ecmascript.string.trim\")) {\r\n      String.prototype.trim = statics.trim;\r\n    }\r\n    // startsWith\r\n    if (!qx.core.Environment.get(\"ecmascript.string.startsWith\")) {\r\n      String.prototype.startsWith = statics.startsWith;\r\n    }\r\n    // endsWith\r\n    if (!qx.core.Environment.get(\"ecmascript.string.endsWith\")) {\r\n      String.prototype.endsWith = statics.endsWith;\r\n    }\r\n    // codePointAt\r\n    if (!qx.core.Environment.get(\"ecmascript.string.codePointAt\")) {\r\n      String.prototype.codePointAt = statics.codePointAt;\r\n    }\r\n    // fromCodePoint\r\n    if (!qx.core.Environment.get(\"ecmascript.string.fromCodePoint\")) {\r\n      String.fromCodePoint = statics.fromCodePoint;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACC,SAAS,CAACG,MAAM,CAAC,0BAA0B,EAAE;IAC9CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAAA,EAAG;QACL,OAAO,IAAI,CAACC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,WAAAA,WAACC,YAAY,EAAEC,QAAQ,EAAE;QACjCA,QAAQ,GAAGA,QAAQ,IAAI,CAAC;QACxB,OAAO,IAAI,CAACC,MAAM,CAACD,QAAQ,EAAED,YAAY,CAACG,MAAM,CAAC,KAAKH,YAAY;MACpE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACII,QAAQ,WAAAA,SAACJ,YAAY,EAAEC,QAAQ,EAAE;QAC/B,IAAII,aAAa,GAAG,IAAI,CAACC,QAAQ,CAAC,CAAC;QACnC,IACE,OAAOL,QAAQ,KAAK,QAAQ,IAC5B,CAACM,QAAQ,CAACN,QAAQ,CAAC,IACnBO,IAAI,CAACC,KAAK,CAACR,QAAQ,CAAC,KAAKA,QAAQ,IACjCA,QAAQ,GAAGI,aAAa,CAACF,MAAM,EAC/B;UACAF,QAAQ,GAAGI,aAAa,CAACF,MAAM;QACjC;QACAF,QAAQ,IAAID,YAAY,CAACG,MAAM;QAC/B,IAAIO,SAAS,GAAGL,aAAa,CAACM,OAAO,CAACX,YAAY,EAAEC,QAAQ,CAAC;QAC7D,OAAOS,SAAS,KAAK,CAAC,CAAC,IAAIA,SAAS,KAAKT,QAAQ;MACnD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIW,WAAW,WAAAA,YAACX,QAAQ,EAAE;QACpB,IAAI,IAAI,IAAI,IAAI,EAAE;UAChB,MAAMY,SAAS,CAAC,CAAC;QACnB;QACA,IAAIC,MAAM,GAAGC,MAAM,CAAC,IAAI,CAAC;QACzB,IAAIC,IAAI,GAAGF,MAAM,CAACX,MAAM;QACxB;QACA,IAAIc,KAAK,GAAGhB,QAAQ,GAAGiB,MAAM,CAACjB,QAAQ,CAAC,GAAG,CAAC;QAC3C,IAAIgB,KAAK,IAAIA,KAAK,EAAE;UAClB;UACAA,KAAK,GAAG,CAAC;QACX;QACA;QACA,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAID,IAAI,EAAE;UAC9B,OAAOG,SAAS;QAClB;QACA;QACA,IAAIC,KAAK,GAAGN,MAAM,CAACO,UAAU,CAACJ,KAAK,CAAC;QACpC,IAAIK,MAAM;QACV;QACE;QACAF,KAAK,IAAI,MAAM,IACfA,KAAK,IAAI,MAAM;QAAI;QACnBJ,IAAI,GAAGC,KAAK,GAAG,CAAC,CAAC;QAAA,EACjB;UACAK,MAAM,GAAGR,MAAM,CAACO,UAAU,CAACJ,KAAK,GAAG,CAAC,CAAC;UACrC,IAAIK,MAAM,IAAI,MAAM,IAAIA,MAAM,IAAI,MAAM,EAAE;YACxC;YACA;YACA,OAAO,CAACF,KAAK,GAAG,MAAM,IAAI,KAAK,GAAGE,MAAM,GAAG,MAAM,GAAG,OAAO;UAC7D;QACF;QACA,OAAOF,KAAK;MACd,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,aAAa,WAAAA,cAACC,CAAC,EAAE;QACf,IAAIC,SAAS,GAAG,EAAE;UAChBC,OAAO,GAAG,CAAC;UACXC,MAAM,GAAG,EAAE;QACb,KAAK,IAAIV,KAAK,GAAG,CAAC,EAAEW,GAAG,GAAGC,SAAS,CAAC1B,MAAM,EAAEc,KAAK,KAAKW,GAAG,EAAE,EAAEX,KAAK,EAAE;UAClE,IAAIa,SAAS,GAAG,CAACD,SAAS,CAACZ,KAAK,CAAC;UACjC;UACA;UACA;UACA,IAAI,EAAEa,SAAS,GAAG,QAAQ,IAAIA,SAAS,KAAK,CAAC,KAAKA,SAAS,CAAC,EAAE;YAC5D,MAAMC,UAAU,CAAC,sBAAsB,GAAGD,SAAS,CAAC;UACtD;UACA,IAAIA,SAAS,IAAI,MAAM,EAAE;YACvB;YACAJ,OAAO,GAAGD,SAAS,CAACO,IAAI,CAACF,SAAS,CAAC;UACrC,CAAC,MAAM;YACL;YACA;YACAA,SAAS,IAAI,OAAO;YACpBJ,OAAO,GAAGD,SAAS,CAACO,IAAI,CACtB,CAACF,SAAS,IAAI,EAAE,IAAI,MAAM;YAAE;YAC3BA,SAAS,GAAG,KAAK,GAAI,MAAM,CAAC;YAC/B,CAAC;UACH;;UACA,IAAIJ,OAAO,IAAI,MAAM,EAAE;YACrBC,MAAM,IAAIZ,MAAM,CAACkB,YAAY,CAACC,KAAK,CAAC,IAAI,EAAET,SAAS,CAAC;YACpDA,SAAS,CAACtB,MAAM,GAAG,CAAC;UACtB;QACF;QAEA,OAAOwB,MAAM,GAAGZ,MAAM,CAACkB,YAAY,CAACC,KAAK,CAAC,IAAI,EAAET,SAAS,CAAC;MAC5D;IACF,CAAC;IAEDU,KAAK,WAAAA,MAACvC,OAAO,EAAE;MACb;MACA,IAAI,CAACL,EAAE,CAAC6C,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,wBAAwB,CAAC,EAAE;QACtDvB,MAAM,CAACwB,SAAS,CAAC1C,IAAI,GAAGD,OAAO,CAACC,IAAI;MACtC;MACA;MACA,IAAI,CAACN,EAAE,CAAC6C,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,8BAA8B,CAAC,EAAE;QAC5DvB,MAAM,CAACwB,SAAS,CAACxC,UAAU,GAAGH,OAAO,CAACG,UAAU;MAClD;MACA;MACA,IAAI,CAACR,EAAE,CAAC6C,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,4BAA4B,CAAC,EAAE;QAC1DvB,MAAM,CAACwB,SAAS,CAACnC,QAAQ,GAAGR,OAAO,CAACQ,QAAQ;MAC9C;MACA;MACA,IAAI,CAACb,EAAE,CAAC6C,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,+BAA+B,CAAC,EAAE;QAC7DvB,MAAM,CAACwB,SAAS,CAAC3B,WAAW,GAAGhB,OAAO,CAACgB,WAAW;MACpD;MACA;MACA,IAAI,CAACrB,EAAE,CAAC6C,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC,iCAAiC,CAAC,EAAE;QAC/DvB,MAAM,CAACQ,aAAa,GAAG3B,OAAO,CAAC2B,aAAa;MAC9C;IACF;EACF,CAAC,CAAC;EA9LFhC,EAAE,CAACiD,IAAI,CAACC,SAAS,CAAC1B,MAAM,CAACrB,aAAa,GAAGA,aAAa;AAAC"
}