{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "cast",
    "object",
    "constructor",
    "offset",
    "data",
    "IListData",
    "Class",
    "hasInterface",
    "toArray",
    "ret",
    "core",
    "Environment",
    "get",
    "item",
    "i",
    "l",
    "length",
    "push",
    "Object",
    "prototype",
    "toString",
    "call",
    "apply",
    "Array",
    "slice",
    "fromArguments",
    "args",
    "undefined",
    "fromCollection",
    "coll",
    "arr",
    "fromShortHand",
    "input",
    "len",
    "result",
    "lang",
    "clone",
    "concat",
    "insertAt",
    "obj",
    "splice",
    "insertBefore",
    "obj2",
    "indexOf",
    "insertAfter",
    "removeAt",
    "removeAll",
    "append",
    "arr1",
    "arr2",
    "exclude",
    "forEach",
    "index",
    "remove",
    "contains",
    "includes",
    "equals",
    "toNativeArray",
    "sum",
    "max",
    "min",
    "unique",
    "doneStrings",
    "doneNumbers",
    "doneObjects",
    "value",
    "count",
    "key",
    "Date",
    "now",
    "hasNull",
    "hasFalse",
    "hasTrue",
    "hash",
    "ex",
    "ex1",
    "Error",
    "range",
    "start",
    "stop",
    "step",
    "arguments",
    "Math",
    "ceil",
    "idx",
    "replace",
    "dest",
    "src",
    "Type",
    "isArray",
    "toDataArray"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/lang/Array.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n\r\n   ======================================================================\r\n\r\n   This class contains code based on the following work:\r\n\r\n   * jQuery\r\n     http://jquery.com\r\n     Version 1.3.1\r\n\r\n     Copyright:\r\n       2009 John Resig\r\n\r\n     License:\r\n       MIT: http://www.opensource.org/licenses/mit-license.php\r\n\r\n   * Underscore.js\r\n     http://underscorejs.org\r\n\r\n     Copyright:\r\n       2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n\r\n     License:\r\n       MIT: http://www.opensource.org/licenses/mit-license.php\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Static helper functions for arrays with a lot of often used convenience\r\n * methods like <code>remove</code> or <code>contains</code>.\r\n *\r\n * The native JavaScript Array is not modified by this class. However,\r\n * there are modifications to the native Array in {@link qx.lang.normalize.Array} for\r\n * browsers that do not support certain JavaScript features natively .\r\n *\r\n * @ignore(qx.data)\r\n * @ignore(qx.data.IListData)\r\n * @ignore(qx.Class.*)\r\n * @require(qx.lang.normalize.Date)\r\n */\r\nqx.Bootstrap.define(\"qx.lang.Array\", {\r\n  statics: {\r\n    /**\r\n     * Converts an array like object to any other array like\r\n     * object.\r\n     *\r\n     * Attention: The returned array may be same\r\n     * instance as the incoming one if the constructor is identical!\r\n     *\r\n     * @param object {var} any array-like object\r\n     * @param constructor {Function} constructor of the new instance\r\n     * @param offset {Integer?0} position to start from\r\n     * @return {Array} the converted array\r\n     */\r\n    cast(object, constructor, offset) {\r\n      if (object.constructor === constructor) {\r\n        return object;\r\n      }\r\n\r\n      if (qx.data && qx.data.IListData) {\r\n        if (qx.Class && qx.Class.hasInterface(object, qx.data.IListData)) {\r\n          var object = object.toArray();\r\n        }\r\n      }\r\n\r\n      // Create from given constructor\r\n      var ret = new constructor();\r\n\r\n      // Some collections in mshtml are not able to be sliced.\r\n      // These lines are a special workaround for this client.\r\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\r\n        if (object.item) {\r\n          for (var i = offset || 0, l = object.length; i < l; i++) {\r\n            ret.push(object[i]);\r\n          }\r\n\r\n          return ret;\r\n        }\r\n      }\r\n\r\n      // Copy over items\r\n      if (\r\n        Object.prototype.toString.call(object) === \"[object Array]\" &&\r\n        offset == null\r\n      ) {\r\n        ret.push.apply(ret, object);\r\n      } else {\r\n        ret.push.apply(ret, Array.prototype.slice.call(object, offset || 0));\r\n      }\r\n\r\n      return ret;\r\n    },\r\n\r\n    /**\r\n     * Convert an arguments object into an array.\r\n     *\r\n     * @param args {arguments} arguments object\r\n     * @param offset {Integer?0} position to start from\r\n     * @return {Array} a newly created array (copy) with the content of the arguments object.\r\n     */\r\n    fromArguments(args, offset) {\r\n      // Optimising for this use case can make a big difference (eg x100)\r\n      if (args.length === 0 && (offset === undefined || offset === 0)) {\r\n        return [];\r\n      }\r\n      return Array.prototype.slice.call(args, offset || 0);\r\n    },\r\n\r\n    /**\r\n     * Convert a (node) collection into an array\r\n     *\r\n     * @param coll {var} node collection\r\n     * @return {Array} a newly created array (copy) with the content of the node collection.\r\n     */\r\n    fromCollection(coll) {\r\n      // The native Array.slice cannot be used with some Array-like objects\r\n      // including NodeLists in older IEs\r\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\r\n        if (coll.item) {\r\n          var arr = [];\r\n          for (var i = 0, l = coll.length; i < l; i++) {\r\n            arr[i] = coll[i];\r\n          }\r\n\r\n          return arr;\r\n        }\r\n      }\r\n\r\n      return Array.prototype.slice.call(coll, 0);\r\n    },\r\n\r\n    /**\r\n     * Expand shorthand definition to a four element list.\r\n     * This is an utility function for padding/margin and all other shorthand handling.\r\n     *\r\n     * @param input {Array} arr with one to four elements\r\n     * @return {Array} an arr with four elements\r\n     */\r\n    fromShortHand(input) {\r\n      var len = input.length;\r\n      var result = qx.lang.Array.clone(input);\r\n\r\n      // Copy Values (according to the length)\r\n      switch (len) {\r\n        case 1:\r\n          result[1] = result[2] = result[3] = result[0];\r\n          break;\r\n\r\n        case 2:\r\n          result[2] = result[0];\r\n        // no break here\r\n\r\n        case 3:\r\n          result[3] = result[1];\r\n      }\r\n\r\n      // Return list with 4 items\r\n      return result;\r\n    },\r\n\r\n    /**\r\n     * Return a copy of the given array\r\n     *\r\n     * @param arr {Array} the array to copy\r\n     * @return {Array} copy of the array\r\n     */\r\n    clone(arr) {\r\n      return arr.concat();\r\n    },\r\n\r\n    /**\r\n     * Insert an element at a given position into the array\r\n     *\r\n     * @param arr {Array} the array\r\n     * @param obj {var} the element to insert\r\n     * @param i {Integer} position where to insert the element into the array\r\n     * @return {Array} the array\r\n     */\r\n    insertAt(arr, obj, i) {\r\n      arr.splice(i, 0, obj);\r\n\r\n      return arr;\r\n    },\r\n\r\n    /**\r\n     * Insert an element into the array before a given second element.\r\n     *\r\n     * @param arr {Array} the array\r\n     * @param obj {var} object to be inserted\r\n     * @param obj2 {var} insert obj1 before this object\r\n     * @return {Array} the array\r\n     */\r\n    insertBefore(arr, obj, obj2) {\r\n      var i = arr.indexOf(obj2);\r\n\r\n      if (i == -1) {\r\n        arr.push(obj);\r\n      } else {\r\n        arr.splice(i, 0, obj);\r\n      }\r\n\r\n      return arr;\r\n    },\r\n\r\n    /**\r\n     * Insert an element into the array after a given second element.\r\n     *\r\n     * @param arr {Array} the array\r\n     * @param obj {var} object to be inserted\r\n     * @param obj2 {var} insert obj1 after this object\r\n     * @return {Array} the array\r\n     */\r\n    insertAfter(arr, obj, obj2) {\r\n      var i = arr.indexOf(obj2);\r\n\r\n      if (i == -1 || i == arr.length - 1) {\r\n        arr.push(obj);\r\n      } else {\r\n        arr.splice(i + 1, 0, obj);\r\n      }\r\n\r\n      return arr;\r\n    },\r\n\r\n    /**\r\n     * Remove an element from the array at the given index\r\n     *\r\n     * @param arr {Array} the array\r\n     * @param i {Integer} index of the element to be removed\r\n     * @return {var} The removed element.\r\n     */\r\n    removeAt(arr, i) {\r\n      return arr.splice(i, 1)[0];\r\n    },\r\n\r\n    /**\r\n     * Remove all elements from the array\r\n     *\r\n     * @param arr {Array} the array\r\n     * @return {Array} empty array\r\n     */\r\n    removeAll(arr) {\r\n      arr.length = 0;\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Append the elements of an array to the array\r\n     *\r\n     * @param arr1 {Array} the array\r\n     * @param arr2 {Array} the elements of this array will be appended to other one\r\n     * @return {Array} The modified array.\r\n     * @throws {Error} if one of the arguments is not an array\r\n     */\r\n    append(arr1, arr2) {\r\n      if (arr1 instanceof qx.data.Array) {\r\n        return arr1.append(arr2);\r\n      }\r\n      if (arr2 instanceof qx.data.Array) {\r\n        arr2 = arr2.toArray();\r\n      }\r\n\r\n      // this check is important because opera throws an uncatchable error if apply is called without\r\n      // an arr as second argument.\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        qx.core.Assert &&\r\n          qx.core.Assert.assertArray(\r\n            arr1,\r\n            \"The first parameter must be an array.\"\r\n          );\r\n\r\n        qx.core.Assert &&\r\n          qx.core.Assert.assertArray(\r\n            arr2,\r\n            \"The second parameter must be an array.\"\r\n          );\r\n      }\r\n\r\n      Array.prototype.push.apply(arr1, arr2);\r\n      return arr1;\r\n    },\r\n\r\n    /**\r\n     * Modifies the first array as it removes all elements\r\n     * which are listed in the second array as well.\r\n     *\r\n     * @param arr1 {Array} the array\r\n     * @param arr2 {Array} the elements of this array will be excluded from the other one\r\n     * @return {Array} The modified array.\r\n     * @throws {Error} if one of the arguments is not an array\r\n     */\r\n    exclude(arr1, arr2) {\r\n      if (arr1 instanceof qx.data.Array) {\r\n        return arr1.exclude(arr2);\r\n      }\r\n\r\n      // this check is important because opera throws an uncatchable error if apply is called without\r\n      // an arr as second argument.\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        qx.core.Assert &&\r\n          qx.core.Assert.assertArray(\r\n            arr1,\r\n            \"The first parameter must be an array.\"\r\n          );\r\n\r\n        qx.core.Assert &&\r\n          qx.core.Assert.assertArray(\r\n            arr2,\r\n            \"The second parameter must be an array.\"\r\n          );\r\n      }\r\n\r\n      arr2.forEach(function (item) {\r\n        var index = arr1.indexOf(item);\r\n        if (index != -1) {\r\n          arr1.splice(index, 1);\r\n        }\r\n      });\r\n\r\n      return arr1;\r\n    },\r\n\r\n    /**\r\n     * Remove an element from the array.\r\n     *\r\n     * @param arr {Array} the array\r\n     * @param obj {var} element to be removed from the array\r\n     * @return {var} the removed element\r\n     */\r\n    remove(arr, obj) {\r\n      if (arr instanceof qx.data.Array) {\r\n        return arr.remove(obj);\r\n      }\r\n\r\n      var i = arr.indexOf(obj);\r\n\r\n      if (i != -1) {\r\n        arr.splice(i, 1);\r\n        return obj;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Whether the array contains the given element\r\n     *\r\n     * @deprecated {6.0} Please use Array instance include method instead\r\n     *\r\n     * @param arr {Array} the array\r\n     * @param obj {var} object to look for\r\n     * @return {Boolean} whether the arr contains the element\r\n     */\r\n    contains(arr, obj) {\r\n      return arr.includes(obj);\r\n    },\r\n\r\n    /**\r\n     * Check whether the two arrays have the same content. Checks only the\r\n     * equality of the arrays' content.\r\n     *\r\n     * @param arr1 {Array} first array\r\n     * @param arr2 {Array} second array\r\n     * @return {Boolean} Whether the two arrays are equal\r\n     */\r\n    equals(arr1, arr2) {\r\n      if (arr1 instanceof qx.data.Array) {\r\n        return arr1.equals(arr2);\r\n      }\r\n      arr2 = qx.lang.Array.toNativeArray(arr2);\r\n\r\n      var length = arr1.length;\r\n\r\n      if (length !== arr2.length) {\r\n        return false;\r\n      }\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        if (arr1[i] !== arr2[i]) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Returns the sum of all values in the given array. Supports\r\n     * numeric values only.\r\n     *\r\n     * @param arr {Number[]} Array to process\r\n     * @return {Number} The sum of all values.\r\n     */\r\n    sum(arr) {\r\n      var result = 0;\r\n      for (var i = 0, l = arr.length; i < l; i++) {\r\n        if (arr[i] != undefined) {\r\n          result += arr[i];\r\n        }\r\n      }\r\n\r\n      return result;\r\n    },\r\n\r\n    /**\r\n     * Returns the highest value in the given array. Supports\r\n     * numeric values only.\r\n     *\r\n     * @param arr {Number[]} Array to process\r\n     * @return {Number|null} The highest of all values or undefined if array is empty.\r\n     */\r\n    max(arr) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        qx.core.Assert &&\r\n          qx.core.Assert.assertArray(arr, \"Parameter must be an array.\");\r\n      }\r\n\r\n      var i,\r\n        len = arr.length,\r\n        result = arr[0];\r\n\r\n      for (i = 1; i < len; i++) {\r\n        if (arr[i] > result) {\r\n          result = arr[i];\r\n        }\r\n      }\r\n\r\n      return result === undefined ? null : result;\r\n    },\r\n\r\n    /**\r\n     * Returns the lowest value in the given array. Supports\r\n     * numeric values only.\r\n     *\r\n     * @param arr {Number[]} Array to process\r\n     * @return {Number|null} The lowest of all values or undefined if array is empty.\r\n     */\r\n    min(arr) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        qx.core.Assert &&\r\n          qx.core.Assert.assertArray(arr, \"Parameter must be an array.\");\r\n      }\r\n\r\n      var i,\r\n        len = arr.length,\r\n        result = arr[0];\r\n\r\n      for (i = 1; i < len; i++) {\r\n        if (arr[i] < result) {\r\n          result = arr[i];\r\n        }\r\n      }\r\n\r\n      return result === undefined ? null : result;\r\n    },\r\n\r\n    /**\r\n     * Recreates an array which is free of all duplicate elements from the original.\r\n     *\r\n     * This method does not modify the original array!\r\n     *\r\n     * Keep in mind that this methods deletes undefined indexes.\r\n     *\r\n     * @param arr {Array} Incoming array\r\n     * @return {Array} Returns a copy with no duplicates\r\n     */\r\n    unique(arr) {\r\n      var ret = [],\r\n        doneStrings = {},\r\n        doneNumbers = {},\r\n        doneObjects = {};\r\n      var value,\r\n        count = 0;\r\n      var key = \"qx\" + Date.now();\r\n      var hasNull = false,\r\n        hasFalse = false,\r\n        hasTrue = false;\r\n\r\n      // Rebuild array and omit duplicates\r\n      for (var i = 0, len = arr.length; i < len; i++) {\r\n        value = arr[i];\r\n\r\n        // Differ between null, primitives and reference types\r\n        if (value === null) {\r\n          if (!hasNull) {\r\n            hasNull = true;\r\n            ret.push(value);\r\n          }\r\n        } else if (value === undefined) {\r\n          // pass\r\n        } else if (value === false) {\r\n          if (!hasFalse) {\r\n            hasFalse = true;\r\n            ret.push(value);\r\n          }\r\n        } else if (value === true) {\r\n          if (!hasTrue) {\r\n            hasTrue = true;\r\n            ret.push(value);\r\n          }\r\n        } else if (typeof value === \"string\") {\r\n          if (!doneStrings[value]) {\r\n            doneStrings[value] = 1;\r\n            ret.push(value);\r\n          }\r\n        } else if (typeof value === \"number\") {\r\n          if (!doneNumbers[value]) {\r\n            doneNumbers[value] = 1;\r\n            ret.push(value);\r\n          }\r\n        } else {\r\n          var hash = value[key];\r\n\r\n          if (hash == null) {\r\n            hash = value[key] = count++;\r\n          }\r\n\r\n          if (!doneObjects[hash]) {\r\n            doneObjects[hash] = value;\r\n            ret.push(value);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Clear object hashs\r\n      for (var hash in doneObjects) {\r\n        try {\r\n          delete doneObjects[hash][key];\r\n        } catch (ex) {\r\n          try {\r\n            doneObjects[hash][key] = null;\r\n          } catch (ex1) {\r\n            throw new Error(\r\n              \"Cannot clean-up map entry doneObjects[\" + hash + \"][\" + key + \"]\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      return ret;\r\n    },\r\n\r\n    /**\r\n     * Returns a new array with integers from start to stop incremented or decremented by step.\r\n     *\r\n     * @param start {Integer} start of the new array, defaults to 0\r\n     * @param stop {Integer} stop of the new array\r\n     * @param step {Integer} increment / decrement - depends whether you use positive or negative values\r\n     * @return {Array} Returns a new array with integers\r\n     */\r\n    range(start, stop, step) {\r\n      if (arguments.length <= 1) {\r\n        stop = start || 0;\r\n        start = 0;\r\n      }\r\n      step = arguments[2] || 1;\r\n\r\n      var length = Math.max(Math.ceil((stop - start) / step), 0);\r\n      var idx = 0;\r\n      var range = Array(length);\r\n\r\n      while (idx < length) {\r\n        range[idx++] = start;\r\n        start += step;\r\n      }\r\n\r\n      return range;\r\n    },\r\n\r\n    /**\r\n     * Replaces the contents of the array `dest`\r\n     *\r\n     * @param dest {Array|qx.data.Array} the array to edit (if null then a new array is created)\r\n     * @param src {Array|qx.data.Array} the array to copy from, or null\r\n     * @return {Array} the edited array (or the new array, if dest is null)\r\n     */\r\n    replace(dest, src) {\r\n      if (dest instanceof qx.data.Array) {\r\n        return dest.replace(src);\r\n      }\r\n\r\n      if (src === null) {\r\n        if (dest === null) {\r\n          return null;\r\n        } else {\r\n          return [];\r\n        }\r\n      }\r\n\r\n      src = qx.lang.Array.toNativeArray(src);\r\n      if (dest === null) {\r\n        dest = src.slice(0);\r\n      } else {\r\n        var args = [0, dest.length];\r\n        src.forEach(function (item) {\r\n          args.push(item);\r\n        });\r\n        dest.splice.apply(dest, args);\r\n      }\r\n      return dest;\r\n    },\r\n\r\n    /**\r\n     * Returns a native array from src where possible; qx.data.Array is converted to its native array,\r\n     * in which case unless `clone` parameter is set to true the rules of qx.data.Array.toArray should\r\n     * be followed, ie that the array should not be manipulated directly.\r\n     *\r\n     * @param src {qx.data.Array|Array} the object to return as an array\r\n     * @param clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code\r\n     * @return {Array}\r\n     */\r\n    toNativeArray(src, clone) {\r\n      if (src === undefined || src === null) {\r\n        return src;\r\n      }\r\n      if (src instanceof qx.data.Array) {\r\n        if (clone) {\r\n          return src.toArray().slice(0);\r\n        }\r\n        return src.toArray();\r\n      }\r\n      if (qx.lang.Type.isArray(src)) {\r\n        if (clone) {\r\n          return src.slice(0);\r\n        }\r\n        return src;\r\n      }\r\n      return [src];\r\n    },\r\n\r\n    /**\r\n     * Returns a `qx.data.Array` array from src where possible; if `clone` is true then the result will\r\n     * always be a new instance of `qx.data.Array` even if it is already a `qx.data.Array`\r\n     *\r\n     * @param src {qx.data.Array|Array} the object to return as `qx.data.Array`\r\n     * @param clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code\r\n     * @return {Array}\r\n     */\r\n    toDataArray(src, clone) {\r\n      if (src === undefined || src === null) {\r\n        return src;\r\n      }\r\n      if (src instanceof qx.data.Array) {\r\n        if (clone) {\r\n          return new qx.data.Array(src.toArray());\r\n        }\r\n        return src;\r\n      }\r\n      if (qx.lang.Type.isArray(src)) {\r\n        return new qx.data.Array(src);\r\n      }\r\n      return new qx.data.Array([src]);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}