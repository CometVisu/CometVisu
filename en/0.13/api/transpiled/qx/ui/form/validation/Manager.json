{
  "className": "qx.ui.form.validation.Manager",
  "packageName": "qx.ui.form.validation",
  "name": "Manager",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0,
        "index": 627
      },
      "end": {
        "line": 679,
        "column": 3,
        "index": 21517
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>This validation manager is responsible for validation of forms.</p>"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.ui.tooltip"
        },
        {
          "name": "@ignore",
          "body": "qx.ui.tooltip.Manager.*"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 27,
        "column": 2,
        "index": 707
      },
      "end": {
        "line": 38,
        "column": 3,
        "index": 1026
      }
    }
  },
  "events": {
    "changeValid": {
      "location": {
        "start": {
          "line": 44,
          "column": 4,
          "index": 1102
        },
        "end": {
          "line": 44,
          "column": 37,
          "index": 1135
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Change event for the valid state.</p>"
          }
        ]
      },
      "name": "changeValid",
      "type": "qx.event.type.Data"
    },
    "complete": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1374
        },
        "end": {
          "line": 51,
          "column": 35,
          "index": 1405
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Signals that the validation is done. This is not needed on synchronous\n validation (validation is done right after the call) but very important\n in the case an asynchronous validator will be used.</p>"
          }
        ]
      },
      "name": "complete",
      "type": "qx.event.type.Event"
    }
  },
  "properties": {
    "validator": {
      "location": {
        "start": {
          "line": 66,
          "column": 4,
          "index": 1970
        },
        "end": {
          "line": 71,
          "column": 5,
          "index": 2159
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The validator of the form itself. You can set a function (for\n synchronous validation) or a {@link qx.ui.form.validation.AsyncValidator}.\n In both cases, the function can have all added form items as first\n argument and the manager as a second argument. The manager should be used\n to set the {@link #invalidMessage}.\n Keep in mind that the validator is optional if you don't need the\n validation in the context of the whole form.</p>"
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Function | AsyncValidator}"
          }
        ]
      },
      "name": "validator",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "value instanceof Function || qx.Class.isSubClassOf(value.constructor, qx.ui.form.validation.AsyncValidator)"
    },
    "invalidMessage": {
      "location": {
        "start": {
          "line": 78,
          "column": 4,
          "index": 2345
        },
        "end": {
          "line": 81,
          "column": 5,
          "index": 2406
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The invalid message stores the message why the form validation\n failed. It will be added to the array returned by\n {@link #getInvalidMessages}.</p>"
          }
        ]
      },
      "name": "invalidMessage",
      "propertyType": "new",
      "init": "",
      "check": "String",
      "defaultValue": ""
    },
    "requiredFieldMessage": {
      "location": {
        "start": {
          "line": 87,
          "column": 4,
          "index": 2575
        },
        "end": {
          "line": 90,
          "column": 5,
          "index": 2642
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>This message will be shown if a required field is empty and no individual\n {@link qx.ui.form.MForm#requiredInvalidMessage} is given.</p>"
          }
        ]
      },
      "name": "requiredFieldMessage",
      "propertyType": "new",
      "init": "",
      "check": "String",
      "defaultValue": ""
    },
    "context": {
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2709
        },
        "end": {
          "line": 97,
          "column": 5,
          "index": 2746
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The context for the form validation.</p>"
          }
        ]
      },
      "name": "context",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__formItems": {
      "location": {
        "start": {
          "line": 101,
          "column": 4,
          "index": 2770
        },
        "end": {
          "line": 101,
          "column": 21,
          "index": 2787
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__valid": {
      "location": {
        "start": {
          "line": 102,
          "column": 4,
          "index": 2793
        },
        "end": {
          "line": 102,
          "column": 17,
          "index": 2806
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__asyncResults": {
      "location": {
        "start": {
          "line": 103,
          "column": 4,
          "index": 2812
        },
        "end": {
          "line": 103,
          "column": 24,
          "index": 2832
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__syncValid": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 2838
        },
        "end": {
          "line": 104,
          "column": 21,
          "index": 2855
        }
      },
      "type": "variable",
      "access": "private"
    },
    "add": {
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4066
        },
        "end": {
          "line": 157,
          "column": 5,
          "index": 4763
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Add a form item to the validation manager.\n The form item has to implement at least two interfaces:\n </p>\n<ol>\n   <li>The {@link qx.ui.form.IForm} Interface</li>\n   <li>One of the following interfaces:\n     <ul>\n       <li>{@link qx.ui.form.IBooleanForm}</li>\n       <li>{@link qx.ui.form.IColorForm}</li>\n       <li>{@link qx.ui.form.IDateForm}</li>\n       <li>{@link qx.ui.form.INumberForm}</li>\n       <li>{@link qx.ui.form.IStringForm}</li>\n     </ul>\n   </li>\n </ol>\n<p>The validator can be a synchronous or asynchronous validator. In\n both cases the validator can either returns a boolean or fire an\n {@link qx.core.ValidationError}. For synchronous validation, a plain\n JavaScript function should be used. For all asynchronous validations,\n a {@link qx.ui.form.validation.AsyncValidator} is needed to wrap the\n plain function.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "formItem {qx.ui.core.Widget} The form item to add.",
            "paramName": "formItem",
            "description": " The form item to add.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "validator {Function | qx.ui.form.validation.AsyncValidator}\n   The validator.",
            "paramName": "validator",
            "description": "\n   The validator.",
            "type": [
              "Function",
              "qx.ui.form.validation.AsyncValidator"
            ]
          },
          {
            "name": "@param",
            "body": "context {var?null} The context of the validator.",
            "paramName": "context",
            "description": " The context of the validator.",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5039
        },
        "end": {
          "line": 177,
          "column": 5,
          "index": 5295
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Remove a form item from the validation manager.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "formItem {qx.ui.core.Widget} The form item to remove.",
            "paramName": "formItem",
            "description": " The form item to remove.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget?null} The removed form item or\n  <code>null</code> if the item could not be found.",
            "type": "qx.ui.core.Widget?null",
            "description": " The removed form item or\n  <code>null</code> if the item could not be found."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItems": {
      "location": {
        "start": {
          "line": 184,
          "column": 4,
          "index": 5454
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5626
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns registered form items from the validation manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The form items which will be validated.",
            "type": "Array",
            "description": " The form items which will be validated."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "validate": {
      "location": {
        "start": {
          "line": 203,
          "column": 4,
          "index": 6224
        },
        "end": {
          "line": 251,
          "column": 5,
          "index": 7848
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Invokes the validation. If only synchronous validators are set, the\n result of the whole validation is available at the end of the method\n and can be returned. If an asynchronous validator is set, the result\n is still unknown at the end of this method so nothing will be returned.\n In both cases, a {@link #complete} event will be fired if the validation\n has ended. The result of the validation can then be accessed with the\n {@link #getValid} method.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|undefined} The validation result, if available.",
            "type": "Boolean|undefined",
            "description": " The validation result, if available."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_validateRequired": {
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 8160
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 9017
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if the form item is required. If so, the value is checked\n and the result will be returned. If the form item is not required, true\n will be returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "formItem {qx.ui.core.Widget} The form item to check.",
            "paramName": "formItem",
            "description": " The form item to check.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Validation result",
            "type": "var",
            "description": " Validation result"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_validateItem": {
      "location": {
        "start": {
          "line": 295,
          "column": 4,
          "index": 9520
        },
        "end": {
          "line": 333,
          "column": 5,
          "index": 10738
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates a form item. This method handles the differences of\n synchronous and asynchronous validation and returns the result of the\n validation if possible (synchronous cases). If the validation is\n asynchronous, null will be returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dataEntry {Object} The map stored in {@link #add}",
            "paramName": "dataEntry",
            "description": " The map stored in {@link #add}",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "value {var} The currently set value",
            "paramName": "value",
            "description": " The currently set value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|null} Validation result or <code>null</code> for async\n validation",
            "type": "Boolean|null",
            "description": " Validation result or <code>null</code> for async\n validation"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__validateForm": {
      "location": {
        "start": {
          "line": 345,
          "column": 4,
          "index": 11239
        },
        "end": {
          "line": 382,
          "column": 5,
          "index": 12277
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Validates the form. It checks for asynchronous validation and handles\n the differences to synchronous validation. If no form validator is given,\n true will be returned. If a synchronous validator is given, the\n validation result will be returned. In asynchronous cases, null will be\n returned cause the result is not available.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "items {qx.ui.core.Widget[]} An array of all form items.",
            "paramName": "items",
            "description": " An array of all form items.",
            "type": "qx.ui.core.Widget[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|null} description",
            "type": "Boolean|null",
            "description": " description"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__isAsyncValidator": {
      "location": {
        "start": {
          "line": 392,
          "column": 4,
          "index": 12582
        },
        "end": {
          "line": 401,
          "column": 5,
          "index": 12851
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Helper function which checks, if the given validator is synchronous\n or asynchronous.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "validator {Function|qx.ui.form.validation.AsyncValidator}\n   The validator to check.",
            "paramName": "validator",
            "description": "\n   The validator to check.",
            "type": [
              "Function",
              "qx.ui.form.validation.AsyncValidator"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} True, if the given validator is asynchronous.",
            "type": "Boolean",
            "description": " True, if the given validator is asynchronous."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__supportsInvalid": {
      "location": {
        "start": {
          "line": 411,
          "column": 4,
          "index": 13131
        },
        "end": {
          "line": 414,
          "column": 5,
          "index": 13267
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true, if the given item implements the {@link qx.ui.form.IForm}\n interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "formItem {qx.core.Object} The item to check.",
            "paramName": "formItem",
            "description": " The item to check.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the given item implements the\n   necessary interface.",
            "type": "Boolean",
            "description": " true, if the given item implements the\n   necessary interface."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__supportsSingleSelection": {
      "location": {
        "start": {
          "line": 424,
          "column": 4,
          "index": 13558
        },
        "end": {
          "line": 427,
          "column": 5,
          "index": 13713
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true, if the given item implements the\n {@link qx.ui.core.ISingleSelection} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "formItem {qx.core.Object} The item to check.",
            "paramName": "formItem",
            "description": " The item to check.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the given item implements the\n   necessary interface.",
            "type": "Boolean",
            "description": " true, if the given item implements the\n   necessary interface."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__supportsDataBindingSelection": {
      "location": {
        "start": {
          "line": 437,
          "column": 4,
          "index": 14006
        },
        "end": {
          "line": 440,
          "column": 5,
          "index": 14168
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns true, if the given item implements the\n {@link qx.data.controller.ISelection} interface.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "formItem {qx.core.Object} The item to check.",
            "paramName": "formItem",
            "description": " The item to check.",
            "type": "qx.core.Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the given item implements the\n   necessary interface.",
            "type": "Boolean",
            "description": " true, if the given item implements the\n   necessary interface."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_setValid": {
      "location": {
        "start": {
          "line": 448,
          "column": 4,
          "index": 14382
        },
        "end": {
          "line": 456,
          "column": 5,
          "index": 14636
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the valid state of the manager. It generates the event if\n necessary and stores the new value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Boolean|null} The new valid state of the manager.",
            "paramName": "value",
            "description": " The new valid state of the manager.",
            "type": [
              "Boolean",
              "null"
            ]
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_showToolTip": {
      "location": {
        "start": {
          "line": 463,
          "column": 4,
          "index": 14859
        },
        "end": {
          "line": 513,
          "column": 5,
          "index": 16497
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for showing a tooltip in case the validation is done for\n widgets based on qx.ui.core.Widget.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "valid {Boolean} <code>false</code>, if the tooltip should be shown",
            "paramName": "valid",
            "description": " <code>false</code>, if the tooltip should be shown",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getValid": {
      "location": {
        "start": {
          "line": 520,
          "column": 4,
          "index": 16636
        },
        "end": {
          "line": 522,
          "column": 5,
          "index": 16681
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the valid state of the manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|null} The valid state of the manager.",
            "type": "Boolean|null",
            "description": " The valid state of the manager."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isValid": {
      "location": {
        "start": {
          "line": 529,
          "column": 4,
          "index": 16820
        },
        "end": {
          "line": 531,
          "column": 5,
          "index": 16867
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the valid state of the manager.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean|null} The valid state of the manager.",
            "type": "Boolean|null",
            "description": " The valid state of the manager."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getInvalidMessages": {
      "location": {
        "start": {
          "line": 539,
          "column": 4,
          "index": 17055
        },
        "end": {
          "line": 569,
          "column": 5,
          "index": 17967
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns an array of all invalid messages of the invalid form items and\n the form manager itself.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} All invalid messages.",
            "type": "String[]",
            "description": " All invalid messages."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getInvalidFormItems": {
      "location": {
        "start": {
          "line": 576,
          "column": 4,
          "index": 18073
        },
        "end": {
          "line": 586,
          "column": 5,
          "index": 18332
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Selects invalid form items</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} invalid form items",
            "type": "Array",
            "description": " invalid form items"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reset": {
      "location": {
        "start": {
          "line": 591,
          "column": 4,
          "index": 18384
        },
        "end": {
          "line": 601,
          "column": 5,
          "index": 18723
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Resets the validator.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MProperty"
      ]
    },
    "setItemValid": {
      "location": {
        "start": {
          "line": 615,
          "column": 4,
          "index": 19302
        },
        "end": {
          "line": 620,
          "column": 5,
          "index": 19495
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method to set the given item to valid for asynchronous\n validation calls. This indirection is used to determinate if the\n validation process is completed or if other asynchronous validators\n are still validating. {@link #__checkValidationComplete} checks if the\n validation is complete and will be called at the end of this method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "formItem {qx.ui.core.Widget} The form item to set the valid state.",
            "paramName": "formItem",
            "description": " The form item to set the valid state.",
            "type": "qx.ui.core.Widget"
          },
          {
            "name": "@param",
            "body": "valid {Boolean} The valid state for the form item.",
            "paramName": "valid",
            "description": " The valid state for the form item.",
            "type": "Boolean"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setFormValid": {
      "location": {
        "start": {
          "line": 633,
          "column": 4,
          "index": 19998
        },
        "end": {
          "line": 636,
          "column": 5,
          "index": 20119
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Internal helper method to set the form manager to valid for asynchronous\n validation calls. This indirection is used to determinate if the\n validation process is completed or if other asynchronous validators\n are still validating. {@link #__checkValidationComplete} checks if the\n validation is complete and will be called at the end of this method.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "valid {Boolean} The valid state for the form manager.",
            "paramName": "valid",
            "description": " The valid state for the form manager.",
            "type": "Boolean"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__checkValidationComplete": {
      "location": {
        "start": {
          "line": 643,
          "column": 4,
          "index": 20344
        },
        "end": {
          "line": 661,
          "column": 5,
          "index": 20977
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Checks if all asynchronous validators have validated so the result\n is final and the {@link #complete} event can be fired. If that's not\n the case, nothing will happen in the method.</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getValidator": {
      "type": "function",
      "name": "getValidator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>validator</code>.\n\nFor further details take a look at the property definition: {@link #validator}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "value instanceof Function || qx.Class.isSubClassOf(value.constructor, qx.ui.form.validation.AsyncValidator)",
            "desc": "Returns the value for validator"
          }
        ]
      }
    },
    "setValidator": {
      "type": "function",
      "name": "setValidator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>validator</code>.\n\nFor further details take a look at the property definition: {@link #validator}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "value instanceof Function || qx.Class.isSubClassOf(value.constructor, qx.ui.form.validation.AsyncValidator)",
            "paramName": "value",
            "desc": "Value for validator"
          }
        ]
      }
    },
    "resetValidator": {
      "type": "function",
      "name": "resetValidator",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>validator</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #validator}."
          }
        ]
      }
    },
    "getInvalidMessage": {
      "type": "function",
      "name": "getInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>invalidMessage</code>.\n\nFor further details take a look at the property definition: {@link #invalidMessage}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for invalidMessage"
          }
        ]
      }
    },
    "setInvalidMessage": {
      "type": "function",
      "name": "setInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>invalidMessage</code>.\n\nFor further details take a look at the property definition: {@link #invalidMessage}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for invalidMessage"
          }
        ]
      }
    },
    "resetInvalidMessage": {
      "type": "function",
      "name": "resetInvalidMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>invalidMessage</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #invalidMessage}."
          }
        ]
      }
    },
    "getRequiredFieldMessage": {
      "type": "function",
      "name": "getRequiredFieldMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>requiredFieldMessage</code>.\n\nFor further details take a look at the property definition: {@link #requiredFieldMessage}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for requiredFieldMessage"
          }
        ]
      }
    },
    "setRequiredFieldMessage": {
      "type": "function",
      "name": "setRequiredFieldMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>requiredFieldMessage</code>.\n\nFor further details take a look at the property definition: {@link #requiredFieldMessage}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for requiredFieldMessage"
          }
        ]
      }
    },
    "resetRequiredFieldMessage": {
      "type": "function",
      "name": "resetRequiredFieldMessage",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>requiredFieldMessage</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #requiredFieldMessage}."
          }
        ]
      }
    },
    "getContext": {
      "type": "function",
      "name": "getContext",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>context</code>.\n\nFor further details take a look at the property definition: {@link #context}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for context"
          }
        ]
      }
    },
    "setContext": {
      "type": "function",
      "name": "setContext",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>context</code>.\n\nFor further details take a look at the property definition: {@link #context}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for context"
          }
        ]
      }
    },
    "resetContext": {
      "type": "function",
      "name": "resetContext",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>context</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #context}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 669,
        "column": 2,
        "index": 21172
      },
      "end": {
        "line": 672,
        "column": 3,
        "index": 21246
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}