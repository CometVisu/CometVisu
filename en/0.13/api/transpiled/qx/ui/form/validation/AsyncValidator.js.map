{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "validator",
    "constructor",
    "call",
    "__validatorFunction",
    "members",
    "__item",
    "__manager",
    "__usedForForm",
    "validate",
    "item",
    "value",
    "manager",
    "context",
    "validateForm",
    "items",
    "setValid",
    "valid",
    "message",
    "undefined",
    "setInvalidMessage",
    "setFormValid",
    "setItemValid",
    "destruct",
    "ui",
    "form",
    "validation",
    "AsyncValidator"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/validation/AsyncValidator.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * This class is responsible for validation in all asynchronous cases and\n * should always be used with {@link qx.ui.form.validation.Manager}.\n *\n *\n * It acts like a wrapper for asynchronous validation functions. These\n * validation function must be set in the constructor. The form manager will\n * invoke the validation and the validator function will be called with two\n * arguments:\n * <ul>\n *  <li>asyncValidator: A reference to the corresponding validator.</li>\n *  <li>value: The value of the assigned input field.</li>\n * </ul>\n * These two parameters are needed to set the validation status of the current\n * validator. {@link #setValid} is responsible for doing that.\n *\n *\n * *Warning:* Instances of this class can only be used with one input\n * field at a time. Multi usage is not supported!\n *\n * *Warning:* Calling {@link #setValid} synchronously does not work. If you\n * have an synchronous validator, please check\n * {@link qx.ui.form.validation.Manager#add}. If you have both cases, you have\n * to wrap the synchronous call in a timeout to make it asynchronous.\n */\nqx.Class.define(\"qx.ui.form.validation.AsyncValidator\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param validator {Function} The validator function, which has to be\n   *   asynchronous.\n   */\n  construct(validator) {\n    super();\n    // save the validator function\n    this.__validatorFunction = validator;\n  },\n\n  members: {\n    __validatorFunction: null,\n    __item: null,\n    __manager: null,\n    __usedForForm: null,\n\n    /**\n     * The validate function should only be called by\n     * {@link qx.ui.form.validation.Manager}.\n     *\n     * It stores the given information and calls the validation function set in\n     * the constructor. The method is used for form fields only. Validating a\n     * form itself will be invokes with {@link #validateForm}.\n     *\n     * @param item {qx.ui.core.Widget} The form item which should be validated.\n     * @param value {var} The value of the form item.\n     * @param manager {qx.ui.form.validation.Manager} A reference to the form\n     *   manager.\n     * @param context {var?null} The context of the validator.\n     *\n     * @internal\n     */\n    validate(item, value, manager, context) {\n      // mark as item validator\n      this.__usedForForm = false;\n      // store the item and the manager\n      this.__item = item;\n      this.__manager = manager;\n      // invoke the user set validator function\n      this.__validatorFunction.call(context || this, this, value);\n    },\n\n    /**\n     * The validateForm function should only be called by\n     * {@link qx.ui.form.validation.Manager}.\n     *\n     * It stores the given information and calls the validation function set in\n     * the constructor. The method is used for forms only. Validating a\n     * form item will be invokes with {@link #validate}.\n     *\n     * @param items {qx.ui.core.Widget[]} All form items of the form manager.\n     * @param manager {qx.ui.form.validation.Manager} A reference to the form\n     *   manager.\n     * @param context {var?null} The context of the validator.\n     *\n     * @internal\n     */\n    validateForm(items, manager, context) {\n      this.__usedForForm = true;\n      this.__manager = manager;\n      this.__validatorFunction.call(context, items, this);\n    },\n\n    /**\n     * This method should be called within the asynchronous callback to tell the\n     * validator the result of the validation.\n     *\n     * @param valid {Boolean} The boolean state of the validation.\n     * @param message {String?} The invalidMessage of the validation.\n     */\n    setValid(valid, message) {\n      // valid processing\n      if (this.__usedForForm) {\n        // message processing\n        if (message !== undefined) {\n          this.__manager.setInvalidMessage(message);\n        }\n        this.__manager.setFormValid(valid);\n      } else {\n        // message processing\n        if (message !== undefined) {\n          this.__item.setInvalidMessage(message);\n        }\n        this.__manager.setItemValid(this.__item, valid);\n      }\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct() {\n    this.__manager = this.__item = null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,sCAAsC,EAAE;IACtDC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IAEtB;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,SAAS,EAAE;MACnBV,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAG,WAAA,CAAAC,IAAA;MACA;MACA,IAAI,CAACC,SAAmB,GAAGH,SAAS;IACtC,CAAC;IAEDI,OAAO,EAAE;MACPD,SAAmB,EAAE,IAAI;MACzBE,SAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAI;MACfC,SAAa,EAAE,IAAI;MAEnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,WAAAA,SAACC,IAAI,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAE;QACtC;QACA,IAAI,CAACL,SAAa,GAAG,KAAK;QAC1B;QACA,IAAI,CAACF,SAAM,GAAGI,IAAI;QAClB,IAAI,CAACH,SAAS,GAAGK,OAAO;QACxB;QACA,IAAI,CAACR,SAAmB,CAACD,IAAI,CAACU,OAAO,IAAI,IAAI,EAAE,IAAI,EAAEF,KAAK,CAAC;MAC7D,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,YAAY,WAAAA,aAACC,KAAK,EAAEH,OAAO,EAAEC,OAAO,EAAE;QACpC,IAAI,CAACL,SAAa,GAAG,IAAI;QACzB,IAAI,CAACD,SAAS,GAAGK,OAAO;QACxB,IAAI,CAACR,SAAmB,CAACD,IAAI,CAACU,OAAO,EAAEE,KAAK,EAAE,IAAI,CAAC;MACrD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,WAAAA,SAACC,KAAK,EAAEC,OAAO,EAAE;QACvB;QACA,IAAI,IAAI,CAACV,SAAa,EAAE;UACtB;UACA,IAAIU,OAAO,KAAKC,SAAS,EAAE;YACzB,IAAI,CAACZ,SAAS,CAACa,iBAAiB,CAACF,OAAO,CAAC;UAC3C;UACA,IAAI,CAACX,SAAS,CAACc,YAAY,CAACJ,KAAK,CAAC;QACpC,CAAC,MAAM;UACL;UACA,IAAIC,OAAO,KAAKC,SAAS,EAAE;YACzB,IAAI,CAACb,SAAM,CAACc,iBAAiB,CAACF,OAAO,CAAC;UACxC;UACA,IAAI,CAACX,SAAS,CAACe,YAAY,CAAC,IAAI,CAAChB,SAAM,EAAEW,KAAK,CAAC;QACjD;MACF;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEEM,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAAChB,SAAS,GAAG,IAAI,CAACD,SAAM,GAAG,IAAI;IACrC;EACF,CAAC,CAAC;EA9IFf,EAAE,CAACiC,EAAE,CAACC,IAAI,CAACC,UAAU,CAACC,cAAc,CAACjC,aAAa,GAAGA,aAAa;AAAC"
}