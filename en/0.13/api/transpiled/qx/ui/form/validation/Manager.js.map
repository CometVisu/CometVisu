{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__formItems",
    "__asyncResults",
    "setRequiredFieldMessage",
    "locale",
    "Manager",
    "tr",
    "events",
    "changeValid",
    "complete",
    "properties",
    "validator",
    "check",
    "init",
    "nullable",
    "invalidMessage",
    "requiredFieldMessage",
    "context",
    "members",
    "__valid",
    "__syncValid",
    "add",
    "formItem",
    "__supportsInvalid",
    "Error",
    "__supportsSingleSelection",
    "getValue",
    "dataEntry",
    "item",
    "valid",
    "push",
    "remove",
    "items",
    "i",
    "len",
    "length",
    "splice",
    "getItems",
    "validate",
    "validatorResult",
    "_validateRequired",
    "_validateItem",
    "formValid",
    "__validateForm",
    "lang",
    "Type",
    "isBoolean",
    "_setValid",
    "isEmpty",
    "fireEvent",
    "getRequired",
    "getSelection",
    "__supportsDataBindingSelection",
    "getLength",
    "value",
    "setValid",
    "individualMessage",
    "getRequiredInvalidMessage",
    "message",
    "getRequiredFieldMessage",
    "setInvalidMessage",
    "__isAsyncValidator",
    "toHashCode",
    "call",
    "undefined",
    "e",
    "ValidationError",
    "type",
    "BaseError",
    "DEFAULTMESSAGE",
    "getComment",
    "formValidator",
    "getValidator",
    "getContext",
    "validateForm",
    "async",
    "isFunction",
    "isSubClassOf",
    "constructor",
    "ui",
    "form",
    "validation",
    "AsyncValidator",
    "clazz",
    "hasInterface",
    "IForm",
    "ISingleSelection",
    "data",
    "controller",
    "ISelection",
    "_showToolTip",
    "oldValue",
    "fireDataEvent",
    "tooltip",
    "getInstance",
    "getSharedErrorTooltip",
    "firstInvalid",
    "isValid",
    "getContentLocation",
    "isSeeable",
    "msg",
    "getInvalidMessage",
    "Environment",
    "get",
    "setLabel",
    "getPlaceMethod",
    "location",
    "top",
    "getOffsetTop",
    "placeToPoint",
    "left",
    "right",
    "placeToWidget",
    "show",
    "exclude",
    "getValid",
    "getInvalidMessages",
    "messages",
    "getInvalidFormItems",
    "res",
    "reset",
    "setItemValid",
    "__checkValidationComplete",
    "setFormValid",
    "hash",
    "currentResult",
    "destruct",
    "environment"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/validation/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * This validation manager is responsible for validation of forms.\n *\n * @ignore(qx.ui.tooltip)\n * @ignore(qx.ui.tooltip.Manager.*)\n */\nqx.Class.define(\"qx.ui.form.validation.Manager\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    // storage for all form items\n    this.__formItems = [];\n    // storage for all results of async validation calls\n    this.__asyncResults = {};\n    // set the default required field message\n    this.setRequiredFieldMessage(\n      qx.locale.Manager.tr(\"This field is required\")\n    );\n  },\n\n  events: {\n    /**\n     * Change event for the valid state.\n     */\n    changeValid: \"qx.event.type.Data\",\n\n    /**\n     * Signals that the validation is done. This is not needed on synchronous\n     * validation (validation is done right after the call) but very important\n     * in the case an asynchronous validator will be used.\n     */\n    complete: \"qx.event.type.Event\"\n  },\n\n  properties: {\n    /**\n     * The validator of the form itself. You can set a function (for\n     * synchronous validation) or a {@link qx.ui.form.validation.AsyncValidator}.\n     * In both cases, the function can have all added form items as first\n     * argument and the manager as a second argument. The manager should be used\n     * to set the {@link #invalidMessage}.\n     *\n     * Keep in mind that the validator is optional if you don't need the\n     * validation in the context of the whole form.\n     * @type {Function | AsyncValidator}\n     */\n    validator: {\n      check:\n        \"value instanceof Function || qx.Class.isSubClassOf(value.constructor, qx.ui.form.validation.AsyncValidator)\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * The invalid message stores the message why the form validation\n     * failed. It will be added to the array returned by\n     * {@link #getInvalidMessages}.\n     */\n    invalidMessage: {\n      check: \"String\",\n      init: \"\"\n    },\n\n    /**\n     * This message will be shown if a required field is empty and no individual\n     * {@link qx.ui.form.MForm#requiredInvalidMessage} is given.\n     */\n    requiredFieldMessage: {\n      check: \"String\",\n      init: \"\"\n    },\n\n    /**\n     * The context for the form validation.\n     */\n    context: {\n      nullable: true\n    }\n  },\n\n  members: {\n    __formItems: null,\n    __valid: null,\n    __asyncResults: null,\n    __syncValid: null,\n\n    /**\n     * Add a form item to the validation manager.\n     *\n     * The form item has to implement at least two interfaces:\n     * <ol>\n     *   <li>The {@link qx.ui.form.IForm} Interface</li>\n     *   <li>One of the following interfaces:\n     *     <ul>\n     *       <li>{@link qx.ui.form.IBooleanForm}</li>\n     *       <li>{@link qx.ui.form.IColorForm}</li>\n     *       <li>{@link qx.ui.form.IDateForm}</li>\n     *       <li>{@link qx.ui.form.INumberForm}</li>\n     *       <li>{@link qx.ui.form.IStringForm}</li>\n     *     </ul>\n     *   </li>\n     * </ol>\n     * The validator can be a synchronous or asynchronous validator. In\n     * both cases the validator can either returns a boolean or fire an\n     * {@link qx.core.ValidationError}. For synchronous validation, a plain\n     * JavaScript function should be used. For all asynchronous validations,\n     * a {@link qx.ui.form.validation.AsyncValidator} is needed to wrap the\n     * plain function.\n     *\n     * @param formItem {qx.ui.core.Widget} The form item to add.\n     * @param validator {Function | qx.ui.form.validation.AsyncValidator}\n     *   The validator.\n     * @param context {var?null} The context of the validator.\n     */\n    add(formItem, validator, context) {\n      // check for the form API\n      if (!this.__supportsInvalid(formItem)) {\n        throw new Error(\"Added widget not supported.\");\n      }\n      // check for the data type\n      if (this.__supportsSingleSelection(formItem) && !formItem.getValue) {\n        // check for a validator\n        if (validator != null) {\n          throw new Error(\n            \"Widgets supporting selection can only be validated \" +\n              \"in the form validator\"\n          );\n        }\n      }\n      var dataEntry = {\n        item: formItem,\n        validator: validator,\n        valid: null,\n        context: context\n      };\n\n      this.__formItems.push(dataEntry);\n    },\n\n    /**\n     * Remove a form item from the validation manager.\n     *\n     * @param formItem {qx.ui.core.Widget} The form item to remove.\n     * @return {qx.ui.core.Widget?null} The removed form item or\n     *  <code>null</code> if the item could not be found.\n     */\n    remove(formItem) {\n      var items = this.__formItems;\n\n      for (var i = 0, len = items.length; i < len; i++) {\n        if (formItem === items[i].item) {\n          items.splice(i, 1);\n          return formItem;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns registered form items from the validation manager.\n     *\n     * @return {Array} The form items which will be validated.\n     */\n    getItems() {\n      var items = [];\n      for (var i = 0; i < this.__formItems.length; i++) {\n        items.push(this.__formItems[i].item);\n      }\n      return items;\n    },\n\n    /**\n     * Invokes the validation. If only synchronous validators are set, the\n     * result of the whole validation is available at the end of the method\n     * and can be returned. If an asynchronous validator is set, the result\n     * is still unknown at the end of this method so nothing will be returned.\n     * In both cases, a {@link #complete} event will be fired if the validation\n     * has ended. The result of the validation can then be accessed with the\n     * {@link #getValid} method.\n     *\n     * @return {Boolean|undefined} The validation result, if available.\n     */\n    validate() {\n      var valid = true;\n      this.__syncValid = true; // collaboration of all synchronous validations\n      var items = [];\n\n      // check all validators for the added form items\n      for (var i = 0; i < this.__formItems.length; i++) {\n        var formItem = this.__formItems[i].item;\n        var validator = this.__formItems[i].validator;\n\n        // store the items in case of form validation\n        items.push(formItem);\n\n        // ignore all form items without a validator\n        if (validator == null) {\n          // check for the required property\n          var validatorResult = this._validateRequired(formItem);\n          valid = valid && validatorResult;\n          this.__syncValid = validatorResult && this.__syncValid;\n          continue;\n        }\n\n        var validatorResult = this._validateItem(\n          this.__formItems[i],\n          formItem.getValue()\n        );\n\n        // keep that order to ensure that null is returned on async cases\n        valid = validatorResult && valid;\n        if (validatorResult != null) {\n          this.__syncValid = validatorResult && this.__syncValid;\n        }\n      }\n\n      // check the form validator (be sure to invoke it even if the form\n      // items are already false, so keep the order!)\n      var formValid = this.__validateForm(items);\n      if (qx.lang.Type.isBoolean(formValid)) {\n        this.__syncValid = formValid && this.__syncValid;\n      }\n      valid = formValid && valid;\n\n      this._setValid(valid);\n\n      if (qx.lang.Object.isEmpty(this.__asyncResults)) {\n        this.fireEvent(\"complete\");\n      }\n      return valid;\n    },\n\n    /**\n     * Checks if the form item is required. If so, the value is checked\n     * and the result will be returned. If the form item is not required, true\n     * will be returned.\n     *\n     * @param formItem {qx.ui.core.Widget} The form item to check.\n     * @return {var} Validation result\n     */\n    _validateRequired(formItem) {\n      if (formItem.getRequired()) {\n        var validatorResult;\n        // if its a widget supporting the selection\n        if (this.__supportsSingleSelection(formItem)) {\n          validatorResult = !!formItem.getSelection()[0];\n        } else if (this.__supportsDataBindingSelection(formItem)) {\n          validatorResult = formItem.getSelection().getLength() > 0;\n        } else {\n          var value = formItem.getValue();\n          validatorResult = !!value || value === 0;\n        }\n        formItem.setValid(validatorResult);\n        var individualMessage = formItem.getRequiredInvalidMessage();\n        var message = individualMessage\n          ? individualMessage\n          : this.getRequiredFieldMessage();\n        formItem.setInvalidMessage(message);\n        return validatorResult;\n      }\n      return true;\n    },\n\n    /**\n     * Validates a form item. This method handles the differences of\n     * synchronous and asynchronous validation and returns the result of the\n     * validation if possible (synchronous cases). If the validation is\n     * asynchronous, null will be returned.\n     *\n     * @param dataEntry {Object} The map stored in {@link #add}\n     * @param value {var} The currently set value\n     * @return {Boolean|null} Validation result or <code>null</code> for async\n     * validation\n     */\n    _validateItem(dataEntry, value) {\n      var formItem = dataEntry.item;\n      var context = dataEntry.context;\n      var validator = dataEntry.validator;\n\n      // check for asynchronous validation\n      if (this.__isAsyncValidator(validator)) {\n        // used to check if all async validations are done\n        this.__asyncResults[formItem.toHashCode()] = null;\n        validator.validate(formItem, formItem.getValue(), this, context);\n        return null;\n      }\n\n      var validatorResult = null;\n\n      try {\n        var validatorResult = validator.call(context || this, value, formItem);\n        if (validatorResult === undefined) {\n          validatorResult = true;\n        }\n      } catch (e) {\n        if (e instanceof qx.core.ValidationError) {\n          validatorResult = false;\n          if (e.message && e.message != qx.type.BaseError.DEFAULTMESSAGE) {\n            var invalidMessage = e.message;\n          } else {\n            var invalidMessage = e.getComment();\n          }\n          formItem.setInvalidMessage(invalidMessage);\n        } else {\n          throw e;\n        }\n      }\n\n      formItem.setValid(validatorResult);\n      dataEntry.valid = validatorResult;\n\n      return validatorResult;\n    },\n\n    /**\n     * Validates the form. It checks for asynchronous validation and handles\n     * the differences to synchronous validation. If no form validator is given,\n     * true will be returned. If a synchronous validator is given, the\n     * validation result will be returned. In asynchronous cases, null will be\n     * returned cause the result is not available.\n     *\n     * @param items {qx.ui.core.Widget[]} An array of all form items.\n     * @return {Boolean|null} description\n     */\n    __validateForm(items) {\n      var formValidator = this.getValidator();\n      var context = this.getContext() || this;\n\n      if (formValidator == null) {\n        return true;\n      }\n\n      // reset the invalidMessage\n      this.setInvalidMessage(\"\");\n\n      if (this.__isAsyncValidator(formValidator)) {\n        this.__asyncResults[this.toHashCode()] = null;\n        formValidator.validateForm(items, this, context);\n        return null;\n      }\n\n      try {\n        var formValid = formValidator.call(context, items, this);\n        if (formValid === undefined) {\n          formValid = true;\n        }\n      } catch (e) {\n        if (e instanceof qx.core.ValidationError) {\n          formValid = false;\n\n          if (e.message && e.message != qx.type.BaseError.DEFAULTMESSAGE) {\n            var invalidMessage = e.message;\n          } else {\n            var invalidMessage = e.getComment();\n          }\n          this.setInvalidMessage(invalidMessage);\n        } else {\n          throw e;\n        }\n      }\n      return formValid;\n    },\n\n    /**\n     * Helper function which checks, if the given validator is synchronous\n     * or asynchronous.\n     *\n     * @param validator {Function|qx.ui.form.validation.AsyncValidator}\n     *   The validator to check.\n     * @return {Boolean} True, if the given validator is asynchronous.\n     */\n    __isAsyncValidator(validator) {\n      var async = false;\n      if (!qx.lang.Type.isFunction(validator)) {\n        async = qx.Class.isSubClassOf(\n          validator.constructor,\n          qx.ui.form.validation.AsyncValidator\n        );\n      }\n      return async;\n    },\n\n    /**\n     * Returns true, if the given item implements the {@link qx.ui.form.IForm}\n     * interface.\n     *\n     * @param formItem {qx.core.Object} The item to check.\n     * @return {Boolean} true, if the given item implements the\n     *   necessary interface.\n     */\n    __supportsInvalid(formItem) {\n      var clazz = formItem.constructor;\n      return qx.Class.hasInterface(clazz, qx.ui.form.IForm);\n    },\n\n    /**\n     * Returns true, if the given item implements the\n     * {@link qx.ui.core.ISingleSelection} interface.\n     *\n     * @param formItem {qx.core.Object} The item to check.\n     * @return {Boolean} true, if the given item implements the\n     *   necessary interface.\n     */\n    __supportsSingleSelection(formItem) {\n      var clazz = formItem.constructor;\n      return qx.Class.hasInterface(clazz, qx.ui.core.ISingleSelection);\n    },\n\n    /**\n     * Returns true, if the given item implements the\n     * {@link qx.data.controller.ISelection} interface.\n     *\n     * @param formItem {qx.core.Object} The item to check.\n     * @return {Boolean} true, if the given item implements the\n     *   necessary interface.\n     */\n    __supportsDataBindingSelection(formItem) {\n      var clazz = formItem.constructor;\n      return qx.Class.hasInterface(clazz, qx.data.controller.ISelection);\n    },\n\n    /**\n     * Sets the valid state of the manager. It generates the event if\n     * necessary and stores the new value.\n     *\n     * @param value {Boolean|null} The new valid state of the manager.\n     */\n    _setValid(value) {\n      this._showToolTip(value);\n      var oldValue = this.__valid;\n      this.__valid = value;\n      // check for the change event\n      if (oldValue != value) {\n        this.fireDataEvent(\"changeValid\", value, oldValue);\n      }\n    },\n\n    /**\n     * Responsible for showing a tooltip in case the validation is done for\n     * widgets based on qx.ui.core.Widget.\n     * @param valid {Boolean} <code>false</code>, if the tooltip should be shown\n     */\n    _showToolTip(valid) {\n      // ignore if we don't have a tooltip manager e.g. mobile apps\n      if (!qx.ui.tooltip || !qx.ui.tooltip.Manager) {\n        return;\n      }\n      var tooltip = qx.ui.tooltip.Manager.getInstance().getSharedErrorTooltip();\n\n      if (!valid) {\n        var firstInvalid;\n        for (var i = 0; i < this.__formItems.length; i++) {\n          var item = this.__formItems[i].item;\n          if (!item.isValid()) {\n            firstInvalid = item;\n            // only for desktop widgets\n            if (!item.getContentLocation) {\n              return;\n            }\n            // only consider items on the screen\n            if (item.isSeeable() === false) {\n              continue;\n            }\n\n            let msg = item.getInvalidMessage();\n            if (\n              msg &&\n              qx.core.Environment.get(\n                \"qx.ui.form.validation.Manager.allowDefaultInvalidMessage\"\n              )\n            ) {\n              msg = qx.locale.Manager.tr(\"Invalid field\");\n            } else if (qx.core.Environment.get(\"qx.debug\")) {\n              this.assertTrue(msg != null && msg.length > 0);\n            }\n            tooltip.setLabel(msg);\n\n            if (tooltip.getPlaceMethod() == \"mouse\") {\n              var location = item.getContentLocation();\n              var top = location.top - tooltip.getOffsetTop();\n              tooltip.placeToPoint({ left: location.right, top: top });\n            } else {\n              tooltip.placeToWidget(item);\n            }\n\n            tooltip.show();\n            return;\n          }\n        }\n      } else {\n        tooltip.exclude();\n      }\n    },\n\n    /**\n     * Returns the valid state of the manager.\n     *\n     * @return {Boolean|null} The valid state of the manager.\n     */\n    getValid() {\n      return this.__valid;\n    },\n\n    /**\n     * Returns the valid state of the manager.\n     *\n     * @return {Boolean|null} The valid state of the manager.\n     */\n    isValid() {\n      return this.getValid();\n    },\n\n    /**\n     * Returns an array of all invalid messages of the invalid form items and\n     * the form manager itself.\n     *\n     * @return {String[]} All invalid messages.\n     */\n    getInvalidMessages() {\n      var messages = [];\n      // combine the messages of all form items\n      for (var i = 0; i < this.__formItems.length; i++) {\n        var formItem = this.__formItems[i].item;\n        if (!formItem.getValid()) {\n          let msg = formItem.getInvalidMessage();\n          if (\n            !msg &&\n            qx.core.Environment.get(\n              \"qx.ui.form.validation.Manager.allowDefaultInvalidMessage\"\n            )\n          ) {\n            msg = qx.locale.Manager.tr(\"Invalid field\");\n          } else if (qx.core.Environment.get(\"qx.debug\")) {\n            this.assertTrue(msg !== null && msg.length > 0);\n          }\n          messages.push(msg);\n        }\n      }\n\n      // add the forms fail message\n      if (!this.isValid()) {\n        let msg = this.getInvalidMessage();\n        if (msg != \"\") {\n          messages.push(msg);\n        }\n      }\n\n      return messages;\n    },\n\n    /**\n     * Selects invalid form items\n     *\n     * @return {Array} invalid form items\n     */\n    getInvalidFormItems() {\n      var res = [];\n      for (var i = 0; i < this.__formItems.length; i++) {\n        var formItem = this.__formItems[i].item;\n        if (!formItem.getValid()) {\n          res.push(formItem);\n        }\n      }\n\n      return res;\n    },\n\n    /**\n     * Resets the validator.\n     */\n    reset() {\n      // reset all form items\n      for (var i = 0; i < this.__formItems.length; i++) {\n        var dataEntry = this.__formItems[i];\n        // set the field to valid\n        dataEntry.item.setValid(true);\n      }\n      // set the manager to its initial valid value\n      this.__valid = null;\n      this._showToolTip(true);\n    },\n\n    /**\n     * Internal helper method to set the given item to valid for asynchronous\n     * validation calls. This indirection is used to determinate if the\n     * validation process is completed or if other asynchronous validators\n     * are still validating. {@link #__checkValidationComplete} checks if the\n     * validation is complete and will be called at the end of this method.\n     *\n     * @param formItem {qx.ui.core.Widget} The form item to set the valid state.\n     * @param valid {Boolean} The valid state for the form item.\n     *\n     * @internal\n     */\n    setItemValid(formItem, valid) {\n      // store the result\n      this.__asyncResults[formItem.toHashCode()] = valid;\n      formItem.setValid(valid);\n      this.__checkValidationComplete();\n    },\n\n    /**\n     * Internal helper method to set the form manager to valid for asynchronous\n     * validation calls. This indirection is used to determinate if the\n     * validation process is completed or if other asynchronous validators\n     * are still validating. {@link #__checkValidationComplete} checks if the\n     * validation is complete and will be called at the end of this method.\n     *\n     * @param valid {Boolean} The valid state for the form manager.\n     *\n     * @internal\n     */\n    setFormValid(valid) {\n      this.__asyncResults[this.toHashCode()] = valid;\n      this.__checkValidationComplete();\n    },\n\n    /**\n     * Checks if all asynchronous validators have validated so the result\n     * is final and the {@link #complete} event can be fired. If that's not\n     * the case, nothing will happen in the method.\n     */\n    __checkValidationComplete() {\n      var valid = this.__syncValid;\n\n      // check if all async validators are done\n      for (var hash in this.__asyncResults) {\n        var currentResult = this.__asyncResults[hash];\n        valid = currentResult && valid;\n        // the validation is not done so just do nothing\n        if (currentResult == null) {\n          return;\n        }\n      }\n      // set the actual valid state of the manager\n      this._setValid(valid);\n      // reset the results\n      this.__asyncResults = {};\n      // fire the complete event (no entry in the results with null)\n      this.fireEvent(\"complete\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n  destruct() {\n    this._showToolTip(true);\n    this.__formItems = null;\n  },\n\n  environment: {\n    // Whether to assume a default \"Invalid Field\" message for invalid fields; if false, an\n    //  exception will be raised if invalid fields do not have an `invalidMessage`\n    \"qx.ui.form.validation.Manager.allowDefaultInvalidMessage\": true\n  }\n});\n"
  ],
  "mappings": "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"
}