{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "__formItems",
    "__asyncResults",
    "setRequiredFieldMessage",
    "locale",
    "Manager",
    "tr",
    "events",
    "changeValid",
    "complete",
    "properties",
    "validator",
    "check",
    "init",
    "nullable",
    "invalidMessage",
    "requiredFieldMessage",
    "context",
    "members",
    "__valid",
    "__syncValid",
    "add",
    "formItem",
    "__supportsInvalid",
    "Error",
    "__supportsSingleSelection",
    "getValue",
    "dataEntry",
    "item",
    "valid",
    "push",
    "remove",
    "items",
    "i",
    "len",
    "length",
    "splice",
    "getItems",
    "validate",
    "validatorResult",
    "_validateRequired",
    "_validateItem",
    "formValid",
    "__validateForm",
    "lang",
    "Type",
    "isBoolean",
    "_setValid",
    "isEmpty",
    "fireEvent",
    "getRequired",
    "getSelection",
    "__supportsDataBindingSelection",
    "getLength",
    "value",
    "setValid",
    "individualMessage",
    "getRequiredInvalidMessage",
    "message",
    "getRequiredFieldMessage",
    "setInvalidMessage",
    "__isAsyncValidator",
    "toHashCode",
    "undefined",
    "e",
    "ValidationError",
    "type",
    "BaseError",
    "DEFAULTMESSAGE",
    "getComment",
    "__P_594_6",
    "formValidator",
    "getValidator",
    "getContext",
    "validateForm",
    "__P_594_8",
    "async",
    "isFunction",
    "isSubClassOf",
    "ui",
    "form",
    "validation",
    "AsyncValidator",
    "__P_594_4",
    "clazz",
    "hasInterface",
    "IForm",
    "__P_594_5",
    "ISingleSelection",
    "__P_594_7",
    "data",
    "controller",
    "ISelection",
    "_showToolTip",
    "oldValue",
    "fireDataEvent",
    "tooltip",
    "getInstance",
    "getSharedErrorTooltip",
    "firstInvalid",
    "isValid",
    "getContentLocation",
    "isSeeable",
    "msg",
    "getInvalidMessage",
    "Environment",
    "get",
    "setLabel",
    "getPlaceMethod",
    "location",
    "top",
    "getOffsetTop",
    "placeToPoint",
    "left",
    "right",
    "placeToWidget",
    "show",
    "exclude",
    "getValid",
    "getInvalidMessages",
    "messages",
    "getInvalidFormItems",
    "res",
    "reset",
    "setItemValid",
    "__checkValidationComplete",
    "setFormValid",
    "__P_594_9",
    "hash",
    "currentResult",
    "destruct",
    "environment"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/validation/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * This validation manager is responsible for validation of forms.\n *\n * @ignore(qx.ui.tooltip)\n * @ignore(qx.ui.tooltip.Manager.*)\n */\nqx.Class.define(\"qx.ui.form.validation.Manager\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    // storage for all form items\n    this.__formItems = [];\n    // storage for all results of async validation calls\n    this.__asyncResults = {};\n    // set the default required field message\n    this.setRequiredFieldMessage(\n      qx.locale.Manager.tr(\"This field is required\")\n    );\n  },\n\n  events: {\n    /**\n     * Change event for the valid state.\n     */\n    changeValid: \"qx.event.type.Data\",\n\n    /**\n     * Signals that the validation is done. This is not needed on synchronous\n     * validation (validation is done right after the call) but very important\n     * in the case an asynchronous validator will be used.\n     */\n    complete: \"qx.event.type.Event\"\n  },\n\n  properties: {\n    /**\n     * The validator of the form itself. You can set a function (for\n     * synchronous validation) or a {@link qx.ui.form.validation.AsyncValidator}.\n     * In both cases, the function can have all added form items as first\n     * argument and the manager as a second argument. The manager should be used\n     * to set the {@link #invalidMessage}.\n     *\n     * Keep in mind that the validator is optional if you don't need the\n     * validation in the context of the whole form.\n     * @type {Function | AsyncValidator}\n     */\n    validator: {\n      check:\n        \"value instanceof Function || qx.Class.isSubClassOf(value.constructor, qx.ui.form.validation.AsyncValidator)\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * The invalid message stores the message why the form validation\n     * failed. It will be added to the array returned by\n     * {@link #getInvalidMessages}.\n     */\n    invalidMessage: {\n      check: \"String\",\n      init: \"\"\n    },\n\n    /**\n     * This message will be shown if a required field is empty and no individual\n     * {@link qx.ui.form.MForm#requiredInvalidMessage} is given.\n     */\n    requiredFieldMessage: {\n      check: \"String\",\n      init: \"\"\n    },\n\n    /**\n     * The context for the form validation.\n     */\n    context: {\n      nullable: true\n    }\n  },\n\n  members: {\n    __formItems: null,\n    __valid: null,\n    __asyncResults: null,\n    __syncValid: null,\n\n    /**\n     * Add a form item to the validation manager.\n     *\n     * The form item has to implement at least two interfaces:\n     * <ol>\n     *   <li>The {@link qx.ui.form.IForm} Interface</li>\n     *   <li>One of the following interfaces:\n     *     <ul>\n     *       <li>{@link qx.ui.form.IBooleanForm}</li>\n     *       <li>{@link qx.ui.form.IColorForm}</li>\n     *       <li>{@link qx.ui.form.IDateForm}</li>\n     *       <li>{@link qx.ui.form.INumberForm}</li>\n     *       <li>{@link qx.ui.form.IStringForm}</li>\n     *     </ul>\n     *   </li>\n     * </ol>\n     * The validator can be a synchronous or asynchronous validator. In\n     * both cases the validator can either returns a boolean or fire an\n     * {@link qx.core.ValidationError}. For synchronous validation, a plain\n     * JavaScript function should be used. For all asynchronous validations,\n     * a {@link qx.ui.form.validation.AsyncValidator} is needed to wrap the\n     * plain function.\n     *\n     * @param formItem {qx.ui.core.Widget} The form item to add.\n     * @param validator {Function | qx.ui.form.validation.AsyncValidator}\n     *   The validator.\n     * @param context {var?null} The context of the validator.\n     */\n    add(formItem, validator, context) {\n      // check for the form API\n      if (!this.__supportsInvalid(formItem)) {\n        throw new Error(\"Added widget not supported.\");\n      }\n      // check for the data type\n      if (this.__supportsSingleSelection(formItem) && !formItem.getValue) {\n        // check for a validator\n        if (validator != null) {\n          throw new Error(\n            \"Widgets supporting selection can only be validated \" +\n              \"in the form validator\"\n          );\n        }\n      }\n      var dataEntry = {\n        item: formItem,\n        validator: validator,\n        valid: null,\n        context: context\n      };\n\n      this.__formItems.push(dataEntry);\n    },\n\n    /**\n     * Remove a form item from the validation manager.\n     *\n     * @param formItem {qx.ui.core.Widget} The form item to remove.\n     * @return {qx.ui.core.Widget?null} The removed form item or\n     *  <code>null</code> if the item could not be found.\n     */\n    remove(formItem) {\n      var items = this.__formItems;\n\n      for (var i = 0, len = items.length; i < len; i++) {\n        if (formItem === items[i].item) {\n          items.splice(i, 1);\n          return formItem;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns registered form items from the validation manager.\n     *\n     * @return {Array} The form items which will be validated.\n     */\n    getItems() {\n      var items = [];\n      for (var i = 0; i < this.__formItems.length; i++) {\n        items.push(this.__formItems[i].item);\n      }\n      return items;\n    },\n\n    /**\n     * Invokes the validation. If only synchronous validators are set, the\n     * result of the whole validation is available at the end of the method\n     * and can be returned. If an asynchronous validator is set, the result\n     * is still unknown at the end of this method so nothing will be returned.\n     * In both cases, a {@link #complete} event will be fired if the validation\n     * has ended. The result of the validation can then be accessed with the\n     * {@link #getValid} method.\n     *\n     * @return {Boolean|undefined} The validation result, if available.\n     */\n    validate() {\n      var valid = true;\n      this.__syncValid = true; // collaboration of all synchronous validations\n      var items = [];\n\n      // check all validators for the added form items\n      for (var i = 0; i < this.__formItems.length; i++) {\n        var formItem = this.__formItems[i].item;\n        var validator = this.__formItems[i].validator;\n\n        // store the items in case of form validation\n        items.push(formItem);\n\n        // ignore all form items without a validator\n        if (validator == null) {\n          // check for the required property\n          var validatorResult = this._validateRequired(formItem);\n          valid = valid && validatorResult;\n          this.__syncValid = validatorResult && this.__syncValid;\n          continue;\n        }\n\n        var validatorResult = this._validateItem(\n          this.__formItems[i],\n          formItem.getValue()\n        );\n\n        // keep that order to ensure that null is returned on async cases\n        valid = validatorResult && valid;\n        if (validatorResult != null) {\n          this.__syncValid = validatorResult && this.__syncValid;\n        }\n      }\n\n      // check the form validator (be sure to invoke it even if the form\n      // items are already false, so keep the order!)\n      var formValid = this.__validateForm(items);\n      if (qx.lang.Type.isBoolean(formValid)) {\n        this.__syncValid = formValid && this.__syncValid;\n      }\n      valid = formValid && valid;\n\n      this._setValid(valid);\n\n      if (qx.lang.Object.isEmpty(this.__asyncResults)) {\n        this.fireEvent(\"complete\");\n      }\n      return valid;\n    },\n\n    /**\n     * Checks if the form item is required. If so, the value is checked\n     * and the result will be returned. If the form item is not required, true\n     * will be returned.\n     *\n     * @param formItem {qx.ui.core.Widget} The form item to check.\n     * @return {var} Validation result\n     */\n    _validateRequired(formItem) {\n      if (formItem.getRequired()) {\n        var validatorResult;\n        // if its a widget supporting the selection\n        if (this.__supportsSingleSelection(formItem)) {\n          validatorResult = !!formItem.getSelection()[0];\n        } else if (this.__supportsDataBindingSelection(formItem)) {\n          validatorResult = formItem.getSelection().getLength() > 0;\n        } else {\n          var value = formItem.getValue();\n          validatorResult = !!value || value === 0;\n        }\n        formItem.setValid(validatorResult);\n        var individualMessage = formItem.getRequiredInvalidMessage();\n        var message = individualMessage\n          ? individualMessage\n          : this.getRequiredFieldMessage();\n        formItem.setInvalidMessage(message);\n        return validatorResult;\n      }\n      return true;\n    },\n\n    /**\n     * Validates a form item. This method handles the differences of\n     * synchronous and asynchronous validation and returns the result of the\n     * validation if possible (synchronous cases). If the validation is\n     * asynchronous, null will be returned.\n     *\n     * @param dataEntry {Object} The map stored in {@link #add}\n     * @param value {var} The currently set value\n     * @return {Boolean|null} Validation result or <code>null</code> for async\n     * validation\n     */\n    _validateItem(dataEntry, value) {\n      var formItem = dataEntry.item;\n      var context = dataEntry.context;\n      var validator = dataEntry.validator;\n\n      // check for asynchronous validation\n      if (this.__isAsyncValidator(validator)) {\n        // used to check if all async validations are done\n        this.__asyncResults[formItem.toHashCode()] = null;\n        validator.validate(formItem, formItem.getValue(), this, context);\n        return null;\n      }\n\n      var validatorResult = null;\n\n      try {\n        var validatorResult = validator.call(context || this, value, formItem);\n        if (validatorResult === undefined) {\n          validatorResult = true;\n        }\n      } catch (e) {\n        if (e instanceof qx.core.ValidationError) {\n          validatorResult = false;\n          if (e.message && e.message != qx.type.BaseError.DEFAULTMESSAGE) {\n            var invalidMessage = e.message;\n          } else {\n            var invalidMessage = e.getComment();\n          }\n          formItem.setInvalidMessage(invalidMessage);\n        } else {\n          throw e;\n        }\n      }\n\n      formItem.setValid(validatorResult);\n      dataEntry.valid = validatorResult;\n\n      return validatorResult;\n    },\n\n    /**\n     * Validates the form. It checks for asynchronous validation and handles\n     * the differences to synchronous validation. If no form validator is given,\n     * true will be returned. If a synchronous validator is given, the\n     * validation result will be returned. In asynchronous cases, null will be\n     * returned cause the result is not available.\n     *\n     * @param items {qx.ui.core.Widget[]} An array of all form items.\n     * @return {Boolean|null} description\n     */\n    __validateForm(items) {\n      var formValidator = this.getValidator();\n      var context = this.getContext() || this;\n\n      if (formValidator == null) {\n        return true;\n      }\n\n      // reset the invalidMessage\n      this.setInvalidMessage(\"\");\n\n      if (this.__isAsyncValidator(formValidator)) {\n        this.__asyncResults[this.toHashCode()] = null;\n        formValidator.validateForm(items, this, context);\n        return null;\n      }\n\n      try {\n        var formValid = formValidator.call(context, items, this);\n        if (formValid === undefined) {\n          formValid = true;\n        }\n      } catch (e) {\n        if (e instanceof qx.core.ValidationError) {\n          formValid = false;\n\n          if (e.message && e.message != qx.type.BaseError.DEFAULTMESSAGE) {\n            var invalidMessage = e.message;\n          } else {\n            var invalidMessage = e.getComment();\n          }\n          this.setInvalidMessage(invalidMessage);\n        } else {\n          throw e;\n        }\n      }\n      return formValid;\n    },\n\n    /**\n     * Helper function which checks, if the given validator is synchronous\n     * or asynchronous.\n     *\n     * @param validator {Function|qx.ui.form.validation.AsyncValidator}\n     *   The validator to check.\n     * @return {Boolean} True, if the given validator is asynchronous.\n     */\n    __isAsyncValidator(validator) {\n      var async = false;\n      if (!qx.lang.Type.isFunction(validator)) {\n        async = qx.Class.isSubClassOf(\n          validator.constructor,\n          qx.ui.form.validation.AsyncValidator\n        );\n      }\n      return async;\n    },\n\n    /**\n     * Returns true, if the given item implements the {@link qx.ui.form.IForm}\n     * interface.\n     *\n     * @param formItem {qx.core.Object} The item to check.\n     * @return {Boolean} true, if the given item implements the\n     *   necessary interface.\n     */\n    __supportsInvalid(formItem) {\n      var clazz = formItem.constructor;\n      return qx.Class.hasInterface(clazz, qx.ui.form.IForm);\n    },\n\n    /**\n     * Returns true, if the given item implements the\n     * {@link qx.ui.core.ISingleSelection} interface.\n     *\n     * @param formItem {qx.core.Object} The item to check.\n     * @return {Boolean} true, if the given item implements the\n     *   necessary interface.\n     */\n    __supportsSingleSelection(formItem) {\n      var clazz = formItem.constructor;\n      return qx.Class.hasInterface(clazz, qx.ui.core.ISingleSelection);\n    },\n\n    /**\n     * Returns true, if the given item implements the\n     * {@link qx.data.controller.ISelection} interface.\n     *\n     * @param formItem {qx.core.Object} The item to check.\n     * @return {Boolean} true, if the given item implements the\n     *   necessary interface.\n     */\n    __supportsDataBindingSelection(formItem) {\n      var clazz = formItem.constructor;\n      return qx.Class.hasInterface(clazz, qx.data.controller.ISelection);\n    },\n\n    /**\n     * Sets the valid state of the manager. It generates the event if\n     * necessary and stores the new value.\n     *\n     * @param value {Boolean|null} The new valid state of the manager.\n     */\n    _setValid(value) {\n      this._showToolTip(value);\n      var oldValue = this.__valid;\n      this.__valid = value;\n      // check for the change event\n      if (oldValue != value) {\n        this.fireDataEvent(\"changeValid\", value, oldValue);\n      }\n    },\n\n    /**\n     * Responsible for showing a tooltip in case the validation is done for\n     * widgets based on qx.ui.core.Widget.\n     * @param valid {Boolean} <code>false</code>, if the tooltip should be shown\n     */\n    _showToolTip(valid) {\n      // ignore if we don't have a tooltip manager e.g. mobile apps\n      if (!qx.ui.tooltip || !qx.ui.tooltip.Manager) {\n        return;\n      }\n      var tooltip = qx.ui.tooltip.Manager.getInstance().getSharedErrorTooltip();\n\n      if (!valid) {\n        var firstInvalid;\n        for (var i = 0; i < this.__formItems.length; i++) {\n          var item = this.__formItems[i].item;\n          if (!item.isValid()) {\n            firstInvalid = item;\n            // only for desktop widgets\n            if (!item.getContentLocation) {\n              return;\n            }\n            // only consider items on the screen\n            if (item.isSeeable() === false) {\n              continue;\n            }\n\n            let msg = item.getInvalidMessage();\n            if (\n              msg &&\n              qx.core.Environment.get(\n                \"qx.ui.form.validation.Manager.allowDefaultInvalidMessage\"\n              )\n            ) {\n              msg = qx.locale.Manager.tr(\"Invalid field\");\n            } else if (qx.core.Environment.get(\"qx.debug\")) {\n              this.assertTrue(msg != null && msg.length > 0);\n            }\n            tooltip.setLabel(msg);\n\n            if (tooltip.getPlaceMethod() == \"mouse\") {\n              var location = item.getContentLocation();\n              var top = location.top - tooltip.getOffsetTop();\n              tooltip.placeToPoint({ left: location.right, top: top });\n            } else {\n              tooltip.placeToWidget(item);\n            }\n\n            tooltip.show();\n            return;\n          }\n        }\n      } else {\n        tooltip.exclude();\n      }\n    },\n\n    /**\n     * Returns the valid state of the manager.\n     *\n     * @return {Boolean|null} The valid state of the manager.\n     */\n    getValid() {\n      return this.__valid;\n    },\n\n    /**\n     * Returns the valid state of the manager.\n     *\n     * @return {Boolean|null} The valid state of the manager.\n     */\n    isValid() {\n      return this.getValid();\n    },\n\n    /**\n     * Returns an array of all invalid messages of the invalid form items and\n     * the form manager itself.\n     *\n     * @return {String[]} All invalid messages.\n     */\n    getInvalidMessages() {\n      var messages = [];\n      // combine the messages of all form items\n      for (var i = 0; i < this.__formItems.length; i++) {\n        var formItem = this.__formItems[i].item;\n        if (!formItem.getValid()) {\n          let msg = formItem.getInvalidMessage();\n          if (\n            !msg &&\n            qx.core.Environment.get(\n              \"qx.ui.form.validation.Manager.allowDefaultInvalidMessage\"\n            )\n          ) {\n            msg = qx.locale.Manager.tr(\"Invalid field\");\n          } else if (qx.core.Environment.get(\"qx.debug\")) {\n            this.assertTrue(msg !== null && msg.length > 0);\n          }\n          messages.push(msg);\n        }\n      }\n\n      // add the forms fail message\n      if (!this.isValid()) {\n        let msg = this.getInvalidMessage();\n        if (msg != \"\") {\n          messages.push(msg);\n        }\n      }\n\n      return messages;\n    },\n\n    /**\n     * Selects invalid form items\n     *\n     * @return {Array} invalid form items\n     */\n    getInvalidFormItems() {\n      var res = [];\n      for (var i = 0; i < this.__formItems.length; i++) {\n        var formItem = this.__formItems[i].item;\n        if (!formItem.getValid()) {\n          res.push(formItem);\n        }\n      }\n\n      return res;\n    },\n\n    /**\n     * Resets the validator.\n     */\n    reset() {\n      // reset all form items\n      for (var i = 0; i < this.__formItems.length; i++) {\n        var dataEntry = this.__formItems[i];\n        // set the field to valid\n        dataEntry.item.setValid(true);\n      }\n      // set the manager to its initial valid value\n      this.__valid = null;\n      this._showToolTip(true);\n    },\n\n    /**\n     * Internal helper method to set the given item to valid for asynchronous\n     * validation calls. This indirection is used to determinate if the\n     * validation process is completed or if other asynchronous validators\n     * are still validating. {@link #__checkValidationComplete} checks if the\n     * validation is complete and will be called at the end of this method.\n     *\n     * @param formItem {qx.ui.core.Widget} The form item to set the valid state.\n     * @param valid {Boolean} The valid state for the form item.\n     *\n     * @internal\n     */\n    setItemValid(formItem, valid) {\n      // store the result\n      this.__asyncResults[formItem.toHashCode()] = valid;\n      formItem.setValid(valid);\n      this.__checkValidationComplete();\n    },\n\n    /**\n     * Internal helper method to set the form manager to valid for asynchronous\n     * validation calls. This indirection is used to determinate if the\n     * validation process is completed or if other asynchronous validators\n     * are still validating. {@link #__checkValidationComplete} checks if the\n     * validation is complete and will be called at the end of this method.\n     *\n     * @param valid {Boolean} The valid state for the form manager.\n     *\n     * @internal\n     */\n    setFormValid(valid) {\n      this.__asyncResults[this.toHashCode()] = valid;\n      this.__checkValidationComplete();\n    },\n\n    /**\n     * Checks if all asynchronous validators have validated so the result\n     * is final and the {@link #complete} event can be fired. If that's not\n     * the case, nothing will happen in the method.\n     */\n    __checkValidationComplete() {\n      var valid = this.__syncValid;\n\n      // check if all async validators are done\n      for (var hash in this.__asyncResults) {\n        var currentResult = this.__asyncResults[hash];\n        valid = currentResult && valid;\n        // the validation is not done so just do nothing\n        if (currentResult == null) {\n          return;\n        }\n      }\n      // set the actual valid state of the manager\n      this._setValid(valid);\n      // reset the results\n      this.__asyncResults = {};\n      // fire the complete event (no entry in the results with null)\n      this.fireEvent(\"complete\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n  destruct() {\n    this._showToolTip(true);\n    this.__formItems = null;\n  },\n\n  environment: {\n    // Whether to assume a default \"Invalid Field\" message for invalid fields; if false, an\n    //  exception will be raised if invalid fields do not have an `invalidMessage`\n    \"qx.ui.form.validation.Manager.allowDefaultInvalidMessage\": true\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}