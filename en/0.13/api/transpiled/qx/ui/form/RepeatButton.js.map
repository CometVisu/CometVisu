{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/form/RepeatButton.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "Button",
    "construct",
    "label",
    "icon",
    "__timer",
    "event",
    "AcceleratingTimer",
    "addListener",
    "_onInterval",
    "events",
    "properties",
    "interval",
    "check",
    "init",
    "firstInterval",
    "minTimer",
    "timerDecrease",
    "members",
    "__executed",
    "press",
    "isEnabled",
    "hasState",
    "__startInternalTimer",
    "removeState",
    "addState",
    "release",
    "fireExecuteEvent",
    "execute",
    "__stopInternalTimer",
    "_applyEnabled",
    "value",
    "old",
    "isCapturing",
    "releaseCapture",
    "_onPointerOver",
    "e",
    "getTarget",
    "start",
    "_onPointerOut",
    "stop",
    "_onPointerDown",
    "isLeftPressed",
    "capture",
    "stopPropagation",
    "_onPointerUp",
    "_onTap",
    "_onKeyUp",
    "getKeyIdentifier",
    "_onKeyDown",
    "fireEvent",
    "set",
    "getInterval",
    "getFirstInterval",
    "minimum",
    "getMinTimer",
    "decrease",
    "getTimerDecrease",
    "destruct",
    "_disposeObjects",
    "RepeatButton"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Martin Wittemann (martinwittemann)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The RepeatButton is a special button, which fires repeatedly {@link #execute}\n * events, while a button is pressed on the button. The initial delay\n * and the interval time can be set using the properties {@link #firstInterval}\n * and {@link #interval}. The {@link #execute} events will be fired in a shorter\n * amount of time if a button is hold, until the min {@link #minTimer}\n * is reached. The {@link #timerDecrease} property sets the amount of milliseconds\n * which will decreased after every firing.\n *\n * <pre class='javascript'>\n *   var button = new qx.ui.form.RepeatButton(\"Hello World\");\n *\n *   button.addListener(\"execute\", function(e) {\n *     alert(\"Button is executed\");\n *   }, this);\n *\n *   this.getRoot.add(button);\n * </pre>\n *\n * This example creates a button with the label \"Hello World\" and attaches an\n * event listener to the {@link #execute} event.\n *\n * *External Documentation*\n *\n * <a href='http://qooxdoo.org/docs/#desktop/widget/repeatbutton.md' target='_blank'>\n * Documentation of this widget in the qooxdoo manual.</a>\n */\nqx.Class.define(\"qx.ui.form.RepeatButton\",\n{\n  extend : qx.ui.form.Button,\n\n\n  /**\n   * @param label {String} Label to use\n   * @param icon {String?null} Icon to use\n   */\n  construct : function(label, icon)\n  {\n    this.base(arguments, label, icon);\n\n    // create the timer and add the listener\n    this.__timer = new qx.event.AcceleratingTimer();\n    this.__timer.addListener(\"interval\", this._onInterval, this);\n  },\n\n\n  events :\n  {\n    /**\n     * This event gets dispatched with every interval. The timer gets executed\n     * as long as the user holds down a button.\n     */\n    \"execute\" : \"qx.event.type.Event\",\n\n    /**\n     * This event gets dispatched when the button is pressed.\n     */\n    \"press\"   : \"qx.event.type.Event\",\n\n    /**\n     * This event gets dispatched when the button is released.\n     */\n    \"release\" : \"qx.event.type.Event\"\n  },\n\n\n  properties :\n  {\n    /**\n     * Interval used after the first run of the timer. Usually a smaller value\n     * than the \"firstInterval\" property value to get a faster reaction.\n     */\n    interval :\n    {\n      check : \"Integer\",\n      init  : 100\n    },\n\n    /**\n     * Interval used for the first run of the timer. Usually a greater value\n     * than the \"interval\" property value to a little delayed reaction at the first\n     * time.\n     */\n    firstInterval :\n    {\n      check : \"Integer\",\n      init  : 500\n    },\n\n    /** This configures the minimum value for the timer interval. */\n    minTimer :\n    {\n      check : \"Integer\",\n      init  : 20\n    },\n\n    /** Decrease of the timer on each interval (for the next interval) until minTimer reached. */\n    timerDecrease :\n    {\n      check : \"Integer\",\n      init  : 2\n    }\n  },\n\n\n  members :\n  {\n    __executed : null,\n    __timer : null,\n\n\n    /**\n     * Calling this function is like a tap from the user on the\n     * button with all consequences.\n     * <span style='color: red'>Be sure to call the {@link #release} function.</span>\n     *\n     */\n    press : function()\n    {\n      // only if the button is enabled\n      if (this.isEnabled())\n      {\n        // if the state pressed must be applied (first call)\n        if (!this.hasState(\"pressed\"))\n        {\n          // start the timer\n          this.__startInternalTimer();\n        }\n\n        // set the states\n        this.removeState(\"abandoned\");\n        this.addState(\"pressed\");\n      }\n    },\n\n\n    /**\n     * Calling this function is like a release from the user on the\n     * button with all consequences.\n     * Usually the {@link #release} function will be called before the call of\n     * this function.\n     *\n     * @param fireExecuteEvent {Boolean?true} flag which signals, if an event should be fired\n     */\n    release : function(fireExecuteEvent)\n    {\n      // only if the button is enabled\n      if (!this.isEnabled()) {\n        return;\n      }\n\n      // only if the button is pressed\n      if (this.hasState(\"pressed\"))\n      {\n        // if the button has not been executed\n        if (!this.__executed) {\n          this.execute();\n        }\n      }\n\n      // remove button states\n      this.removeState(\"pressed\");\n      this.removeState(\"abandoned\");\n\n      // stop the repeat timer and therefore the execution\n      this.__stopInternalTimer();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _applyEnabled : function(value, old)\n    {\n      this.base(arguments, value, old);\n\n      if (!value)\n      {\n        if (this.isCapturing()) {\n          // also release capture because out event is missing on iOS\n          this.releaseCapture();\n        }\n\n        // remove button states\n        this.removeState(\"pressed\");\n        this.removeState(\"abandoned\");\n\n        // stop the repeat timer and therefore the execution\n        this.__stopInternalTimer();\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Listener method for \"pointerover\" event\n     * <ul>\n     * <li>Adds state \"hovered\"</li>\n     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOver : function(e)\n    {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      if (this.hasState(\"abandoned\"))\n      {\n        this.removeState(\"abandoned\");\n        this.addState(\"pressed\");\n        this.__timer.start();\n      }\n\n      this.addState(\"hovered\");\n    },\n\n\n    /**\n     * Listener method for \"pointerout\" event\n     * <ul>\n     * <li>Removes \"hovered\" state</li>\n     * <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOut : function(e)\n    {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      this.removeState(\"hovered\");\n\n      if (this.hasState(\"pressed\"))\n      {\n        this.removeState(\"pressed\");\n        this.addState(\"abandoned\");\n        this.__timer.stop();\n      }\n    },\n\n\n    /**\n     * Callback method for the \"pointerdown\" method.\n     *\n     * Sets the interval of the timer (value of firstInterval property) and\n     * starts the timer. Additionally removes the state \"abandoned\" and adds the\n     * state \"pressed\".\n     *\n     * @param e {qx.event.type.Pointer} pointerdown event\n     */\n    _onPointerDown : function(e)\n    {\n      if (!e.isLeftPressed()) {\n        return;\n      }\n\n      // Activate capturing if the button get a pointerout while\n      // the button is pressed.\n      this.capture();\n\n      this.__startInternalTimer();\n      e.stopPropagation();\n    },\n\n\n    /**\n     * Callback method for the \"pointerup\" event.\n     *\n     * Handles the case that the user is releasing a button\n     * before the timer interval method got executed. This way the\n     * \"execute\" method get executed at least one time.\n     *\n     * @param e {qx.event.type.Pointer} pointerup event\n     */\n    _onPointerUp : function(e)\n    {\n      this.releaseCapture();\n\n      if (!this.hasState(\"abandoned\"))\n      {\n        this.addState(\"hovered\");\n\n        if (this.hasState(\"pressed\") && !this.__executed) {\n          this.execute();\n        }\n      }\n\n      this.__stopInternalTimer();\n      e.stopPropagation();\n    },\n\n\n    // Nothing to do, 'execute' is already fired by _onPointerUp.\n    _onTap : function(e) {},\n\n\n    /**\n     * Listener method for \"keyup\" event.\n     *\n     * Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\n     * for the keys \"Enter\" or \"Space\" and stops the internal timer\n     * (same like pointer up).\n     *\n     * @param e {Event} Key event\n     */\n    _onKeyUp : function(e)\n    {\n      switch(e.getKeyIdentifier())\n      {\n        case \"Enter\":\n        case \"Space\":\n          if (this.hasState(\"pressed\"))\n          {\n            if (!this.__executed) {\n              this.execute();\n            }\n\n            this.removeState(\"pressed\");\n            this.removeState(\"abandoned\");\n            e.stopPropagation();\n            this.__stopInternalTimer();\n          }\n      }\n    },\n\n\n    /**\n     * Listener method for \"keydown\" event.\n     *\n     * Removes \"abandoned\" and adds \"pressed\" state\n     * for the keys \"Enter\" or \"Space\". It also starts\n     * the internal timer (same like pointerdown).\n     *\n     * @param e {Event} Key event\n     */\n    _onKeyDown : function(e)\n    {\n      switch(e.getKeyIdentifier())\n      {\n        case \"Enter\":\n        case \"Space\":\n          this.removeState(\"abandoned\");\n          this.addState(\"pressed\");\n          e.stopPropagation();\n          this.__startInternalTimer();\n      }\n    },\n\n\n    /**\n     * Callback for the interval event.\n     *\n     * Stops the timer and starts it with a new interval\n     * (value of the \"interval\" property - value of the \"timerDecrease\" property).\n     * Dispatches the \"execute\" event.\n     *\n     * @param e {qx.event.type.Event} interval event\n     */\n    _onInterval : function(e)\n    {\n      this.__executed = true;\n      this.fireEvent(\"execute\");\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL TIMER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Starts the internal timer which causes firing of execution\n     * events in an interval. It also presses the button.\n     *\n     */\n    __startInternalTimer : function()\n    {\n      this.fireEvent(\"press\");\n\n      this.__executed = false;\n\n      this.__timer.set({\n        interval: this.getInterval(),\n        firstInterval: this.getFirstInterval(),\n        minimum: this.getMinTimer(),\n        decrease: this.getTimerDecrease()\n      }).start();\n\n      this.removeState(\"abandoned\");\n      this.addState(\"pressed\");\n    },\n\n\n    /**\n     * Stops the internal timer and releases the button.\n     *\n     */\n    __stopInternalTimer : function()\n    {\n      this.fireEvent(\"release\");\n\n      this.__timer.stop();\n\n      this.removeState(\"abandoned\");\n      this.removeState(\"pressed\");\n    }\n  },\n\n\n\n\n  /*\n    *****************************************************************************\n       DESTRUCTOR\n    *****************************************************************************\n    */\n\n  destruct : function() {\n    this._disposeObjects(\"__timer\");\n  }\n});\n"
  ]
}