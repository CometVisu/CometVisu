{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "Button",
    "construct",
    "label",
    "icon",
    "__timer",
    "event",
    "AcceleratingTimer",
    "addListener",
    "_onInterval",
    "events",
    "execute",
    "press",
    "release",
    "properties",
    "interval",
    "check",
    "init",
    "firstInterval",
    "minTimer",
    "timerDecrease",
    "members",
    "__executed",
    "isEnabled",
    "hasState",
    "__startInternalTimer",
    "removeState",
    "addState",
    "fireExecuteEvent",
    "__stopInternalTimer",
    "_applyEnabled",
    "value",
    "old",
    "isCapturing",
    "releaseCapture",
    "_onPointerOver",
    "e",
    "getTarget",
    "start",
    "_onPointerOut",
    "stop",
    "_onPointerDown",
    "isLeftPressed",
    "capture",
    "stopPropagation",
    "_onPointerUp",
    "_onTap",
    "_onKeyUp",
    "getKeyIdentifier",
    "_onKeyDown",
    "fireEvent",
    "set",
    "getInterval",
    "getFirstInterval",
    "minimum",
    "getMinTimer",
    "decrease",
    "getTimerDecrease",
    "destruct",
    "_disposeObjects",
    "RepeatButton"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/RepeatButton.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Martin Wittemann (martinwittemann)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The RepeatButton is a special button, which fires repeatedly {@link #execute}\n * events, while a button is pressed on the button. The initial delay\n * and the interval time can be set using the properties {@link #firstInterval}\n * and {@link #interval}. The {@link #execute} events will be fired in a shorter\n * amount of time if a button is hold, until the min {@link #minTimer}\n * is reached. The {@link #timerDecrease} property sets the amount of milliseconds\n * which will decreased after every firing.\n *\n * <pre class='javascript'>\n *   var button = new qx.ui.form.RepeatButton(\"Hello World\");\n *\n *   button.addListener(\"execute\", function(e) {\n *     alert(\"Button is executed\");\n *   }, this);\n *\n *   this.getRoot.add(button);\n * </pre>\n *\n * This example creates a button with the label \"Hello World\" and attaches an\n * event listener to the {@link #execute} event.\n *\n * *External Documentation*\n *\n * <a href='http://qooxdoo.org/docs/#desktop/widget/repeatbutton.md' target='_blank'>\n * Documentation of this widget in the qooxdoo manual.</a>\n */\nqx.Class.define(\"qx.ui.form.RepeatButton\", {\n  extend: qx.ui.form.Button,\n\n  /**\n   * @param label {String} Label to use\n   * @param icon {String?null} Icon to use\n   */\n  construct(label, icon) {\n    super(label, icon);\n\n    // create the timer and add the listener\n    this.__timer = new qx.event.AcceleratingTimer();\n    this.__timer.addListener(\"interval\", this._onInterval, this);\n  },\n\n  events: {\n    /**\n     * This event gets dispatched with every interval. The timer gets executed\n     * as long as the user holds down a button.\n     */\n    execute: \"qx.event.type.Event\",\n\n    /**\n     * This event gets dispatched when the button is pressed.\n     */\n    press: \"qx.event.type.Event\",\n\n    /**\n     * This event gets dispatched when the button is released.\n     */\n    release: \"qx.event.type.Event\"\n  },\n\n  properties: {\n    /**\n     * Interval used after the first run of the timer. Usually a smaller value\n     * than the \"firstInterval\" property value to get a faster reaction.\n     */\n    interval: {\n      check: \"Integer\",\n      init: 100\n    },\n\n    /**\n     * Interval used for the first run of the timer. Usually a greater value\n     * than the \"interval\" property value to a little delayed reaction at the first\n     * time.\n     */\n    firstInterval: {\n      check: \"Integer\",\n      init: 500\n    },\n\n    /** This configures the minimum value for the timer interval. */\n    minTimer: {\n      check: \"Integer\",\n      init: 20\n    },\n\n    /** Decrease of the timer on each interval (for the next interval) until minTimer reached. */\n    timerDecrease: {\n      check: \"Integer\",\n      init: 2\n    }\n  },\n\n  members: {\n    __executed: null,\n    __timer: null,\n\n    /**\n     * Calling this function is like a tap from the user on the\n     * button with all consequences.\n     * <span style='color: red'>Be sure to call the {@link #release} function.</span>\n     *\n     */\n    press() {\n      // only if the button is enabled\n      if (this.isEnabled()) {\n        // if the state pressed must be applied (first call)\n        if (!this.hasState(\"pressed\")) {\n          // start the timer\n          this.__startInternalTimer();\n        }\n\n        // set the states\n        this.removeState(\"abandoned\");\n        this.addState(\"pressed\");\n      }\n    },\n\n    /**\n     * Calling this function is like a release from the user on the\n     * button with all consequences.\n     * Usually the {@link #release} function will be called before the call of\n     * this function.\n     *\n     * @param fireExecuteEvent {Boolean?true} flag which signals, if an event should be fired\n     */\n    release(fireExecuteEvent) {\n      // only if the button is enabled\n      if (!this.isEnabled()) {\n        return;\n      }\n\n      // only if the button is pressed\n      if (this.hasState(\"pressed\")) {\n        // if the button has not been executed\n        if (!this.__executed) {\n          this.execute();\n        }\n      }\n\n      // remove button states\n      this.removeState(\"pressed\");\n      this.removeState(\"abandoned\");\n\n      // stop the repeat timer and therefore the execution\n      this.__stopInternalTimer();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _applyEnabled(value, old) {\n      super._applyEnabled(value, old);\n\n      if (!value) {\n        if (this.isCapturing()) {\n          // also release capture because out event is missing on iOS\n          this.releaseCapture();\n        }\n\n        // remove button states\n        this.removeState(\"pressed\");\n        this.removeState(\"abandoned\");\n\n        // stop the repeat timer and therefore the execution\n        this.__stopInternalTimer();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Listener method for \"pointerover\" event\n     * <ul>\n     * <li>Adds state \"hovered\"</li>\n     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOver(e) {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      if (this.hasState(\"abandoned\")) {\n        this.removeState(\"abandoned\");\n        this.addState(\"pressed\");\n        this.__timer.start();\n      }\n\n      this.addState(\"hovered\");\n    },\n\n    /**\n     * Listener method for \"pointerout\" event\n     * <ul>\n     * <li>Removes \"hovered\" state</li>\n     * <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onPointerOut(e) {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      this.removeState(\"hovered\");\n\n      if (this.hasState(\"pressed\")) {\n        this.removeState(\"pressed\");\n        this.addState(\"abandoned\");\n        this.__timer.stop();\n      }\n    },\n\n    /**\n     * Callback method for the \"pointerdown\" method.\n     *\n     * Sets the interval of the timer (value of firstInterval property) and\n     * starts the timer. Additionally removes the state \"abandoned\" and adds the\n     * state \"pressed\".\n     *\n     * @param e {qx.event.type.Pointer} pointerdown event\n     */\n    _onPointerDown(e) {\n      if (!e.isLeftPressed()) {\n        return;\n      }\n\n      // Activate capturing if the button get a pointerout while\n      // the button is pressed.\n      this.capture();\n\n      this.__startInternalTimer();\n      e.stopPropagation();\n    },\n\n    /**\n     * Callback method for the \"pointerup\" event.\n     *\n     * Handles the case that the user is releasing a button\n     * before the timer interval method got executed. This way the\n     * \"execute\" method get executed at least one time.\n     *\n     * @param e {qx.event.type.Pointer} pointerup event\n     */\n    _onPointerUp(e) {\n      this.releaseCapture();\n\n      if (!this.hasState(\"abandoned\")) {\n        this.addState(\"hovered\");\n\n        if (this.hasState(\"pressed\") && !this.__executed) {\n          this.execute();\n        }\n      }\n\n      this.__stopInternalTimer();\n      e.stopPropagation();\n    },\n\n    // Nothing to do, 'execute' is already fired by _onPointerUp.\n    _onTap(e) {},\n\n    /**\n     * Listener method for \"keyup\" event.\n     *\n     * Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\n     * for the keys \"Enter\" or \"Space\" and stops the internal timer\n     * (same like pointer up).\n     *\n     * @param e {Event} Key event\n     */\n    _onKeyUp(e) {\n      switch (e.getKeyIdentifier()) {\n        case \"Enter\":\n        case \"Space\":\n          if (this.hasState(\"pressed\")) {\n            if (!this.__executed) {\n              this.execute();\n            }\n\n            this.removeState(\"pressed\");\n            this.removeState(\"abandoned\");\n            e.stopPropagation();\n            this.__stopInternalTimer();\n          }\n      }\n    },\n\n    /**\n     * Listener method for \"keydown\" event.\n     *\n     * Removes \"abandoned\" and adds \"pressed\" state\n     * for the keys \"Enter\" or \"Space\". It also starts\n     * the internal timer (same like pointerdown).\n     *\n     * @param e {Event} Key event\n     */\n    _onKeyDown(e) {\n      switch (e.getKeyIdentifier()) {\n        case \"Enter\":\n        case \"Space\":\n          this.removeState(\"abandoned\");\n          this.addState(\"pressed\");\n          e.stopPropagation();\n          this.__startInternalTimer();\n      }\n    },\n\n    /**\n     * Callback for the interval event.\n     *\n     * Stops the timer and starts it with a new interval\n     * (value of the \"interval\" property - value of the \"timerDecrease\" property).\n     * Dispatches the \"execute\" event.\n     *\n     * @param e {qx.event.type.Event} interval event\n     */\n    _onInterval(e) {\n      this.__executed = true;\n      this.fireEvent(\"execute\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL TIMER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Starts the internal timer which causes firing of execution\n     * events in an interval. It also presses the button.\n     *\n     */\n    __startInternalTimer() {\n      this.fireEvent(\"press\");\n\n      this.__executed = false;\n\n      this.__timer\n        .set({\n          interval: this.getInterval(),\n          firstInterval: this.getFirstInterval(),\n          minimum: this.getMinTimer(),\n          decrease: this.getTimerDecrease()\n        })\n        .start();\n\n      this.removeState(\"abandoned\");\n      this.addState(\"pressed\");\n    },\n\n    /**\n     * Stops the internal timer and releases the button.\n     *\n     */\n    __stopInternalTimer() {\n      this.fireEvent(\"release\");\n\n      this.__timer.stop();\n\n      this.removeState(\"abandoned\");\n      this.removeState(\"pressed\");\n    }\n  },\n\n  /*\n    *****************************************************************************\n       DESTRUCTOR\n    *****************************************************************************\n    */\n\n  destruct() {\n    this._disposeObjects(\"__timer\");\n  }\n});\n"
  ],
  "mappings": "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"
}