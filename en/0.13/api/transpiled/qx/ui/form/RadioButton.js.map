{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "Button",
    "include",
    "MForm",
    "MModelProperty",
    "implement",
    "IRadioItem",
    "IForm",
    "IBooleanForm",
    "IModel",
    "construct",
    "label",
    "constructor",
    "call",
    "contentEl",
    "getContentElement",
    "setAttribute",
    "addListener",
    "_onExecute",
    "_onKeyPress",
    "properties",
    "group",
    "check",
    "nullable",
    "apply",
    "value",
    "event",
    "init",
    "appearance",
    "refine",
    "allowGrowX",
    "members",
    "_forwardStates",
    "checked",
    "focused",
    "invalid",
    "hovered",
    "_bindableProperties",
    "_applyValue",
    "old",
    "addState",
    "removeState",
    "Boolean",
    "_applyGroup",
    "remove",
    "add",
    "e",
    "grp",
    "getGroup",
    "getAllowEmptySelection",
    "toggleValue",
    "setValue",
    "getKeyIdentifier",
    "selectPrevious",
    "selectNext",
    "RadioButton"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/RadioButton.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Radio buttons can be used in radio groups to allow to the user to select\n * exactly one item from a list. Radio groups are established by adding\n * radio buttons to a radio manager {@link qx.ui.form.RadioGroup}.\n *\n * Example:\n * <pre class=\"javascript\">\n *   var container = new qx.ui.container.Composite(new qx.ui.layout.VBox);\n *\n *   var female = new qx.ui.form.RadioButton(\"female\");\n *   var male = new qx.ui.form.RadioButton(\"male\");\n *\n *   var mgr = new qx.ui.form.RadioGroup();\n *   mgr.add(female, male);\n *\n *   container.add(male);\n *   container.add(female);\n * </pre>\n */\nqx.Class.define(\"qx.ui.form.RadioButton\", {\n  extend: qx.ui.form.Button,\n  include: [qx.ui.form.MForm, qx.ui.form.MModelProperty],\n\n  implement: [\n    qx.ui.form.IRadioItem,\n    qx.ui.form.IForm,\n    qx.ui.form.IBooleanForm,\n    qx.ui.form.IModel\n  ],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param label {String?null} An optional label for the radio button.\n   */\n  construct(label) {\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      this.assertArgumentsCount(arguments, 0, 1);\n    }\n\n    super(label);\n\n    // ARIA attrs\n    // Important: (Grouped) radio btns should be children of a div with role 'radiogroup'\n    const contentEl = this.getContentElement();\n    contentEl.setAttribute(\"role\", \"radio\");\n    contentEl.setAttribute(\"aria-checked\", false);\n\n    // Add listeners\n    this.addListener(\"execute\", this._onExecute);\n    this.addListener(\"keypress\", this._onKeyPress);\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** The assigned qx.ui.form.RadioGroup which handles the switching between registered buttons */\n    group: {\n      check: \"qx.ui.form.RadioGroup\",\n      nullable: true,\n      apply: \"_applyGroup\"\n    },\n\n    /** The value of the widget. True, if the widget is checked. */\n    value: {\n      check: \"Boolean\",\n      nullable: true,\n      event: \"changeValue\",\n      apply: \"_applyValue\",\n      init: false\n    },\n\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"radiobutton\"\n    },\n\n    // overridden\n    allowGrowX: {\n      refine: true,\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates: {\n      checked: true,\n      focused: true,\n      invalid: true,\n      hovered: true\n    },\n\n    // overridden (from MExecutable to keep the icon out of the binding)\n    /**\n     * @lint ignoreReferenceField(_bindableProperties)\n     */\n    _bindableProperties: [\"enabled\", \"label\", \"toolTipText\", \"value\", \"menu\"],\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyValue(value, old) {\n      value ? this.addState(\"checked\") : this.removeState(\"checked\");\n      this.getContentElement().setAttribute(\"aria-checked\", Boolean(value));\n    },\n\n    /** The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons */\n    _applyGroup(value, old) {\n      if (old) {\n        old.remove(this);\n      }\n\n      if (value) {\n        value.add(this);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT-HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event listener for the \"execute\" event.\n     *\n     * Sets the property \"checked\" to true.\n     *\n     * @param e {qx.event.type.Event} execute event\n     */\n    _onExecute(e) {\n      var grp = this.getGroup();\n      if (grp && grp.getAllowEmptySelection()) {\n        this.toggleValue();\n      } else {\n        this.setValue(true);\n      }\n    },\n\n    /**\n     * Event listener for the \"keyPress\" event.\n     *\n     * Selects the previous RadioButton when pressing \"Left\" or \"Up\" and\n     * Selects the next RadioButton when pressing \"Right\" and \"Down\"\n     *\n     * @param e {qx.event.type.KeySequence} KeyPress event\n     */\n    _onKeyPress(e) {\n      var grp = this.getGroup();\n      if (!grp) {\n        return;\n      }\n\n      switch (e.getKeyIdentifier()) {\n        case \"Left\":\n        case \"Up\":\n          grp.selectPrevious();\n          break;\n\n        case \"Right\":\n        case \"Down\":\n          grp.selectNext();\n          break;\n      }\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,wBAAwB,EAAE;IACxCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,IAAI,CAACC,MAAM;IACzBC,OAAO,EAAE,CAACV,EAAE,CAACO,EAAE,CAACC,IAAI,CAACG,KAAK,EAAEX,EAAE,CAACO,EAAE,CAACC,IAAI,CAACI,cAAc,CAAC;IAEtDC,SAAS,EAAE,CACTb,EAAE,CAACO,EAAE,CAACC,IAAI,CAACM,UAAU,EACrBd,EAAE,CAACO,EAAE,CAACC,IAAI,CAACO,KAAK,EAChBf,EAAE,CAACO,EAAE,CAACC,IAAI,CAACQ,YAAY,EACvBhB,EAAE,CAACO,EAAE,CAACC,IAAI,CAACS,MAAM,CAClB;IAED;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;IACEC,SAAS,WAAAA,UAACC,KAAK,EAAE;MAKfnB,EAAA,CAAAO,EAAA,CAAAC,IAAA,CAAAC,MAAA,CAAAW,WAAA,CAAAC,IAAA,OAAMF,KAAK;;MAEX;MACA;MACA,IAAMG,SAAS,GAAG,IAAI,CAACC,iBAAiB,EAAE;MAC1CD,SAAS,CAACE,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC;MACvCF,SAAS,CAACE,YAAY,CAAC,cAAc,EAAE,KAAK,CAAC;;MAE7C;MACA,IAAI,CAACC,WAAW,CAAC,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;MAC5C,IAAI,CAACD,WAAW,CAAC,UAAU,EAAE,IAAI,CAACE,WAAW,CAAC;IAChD,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,UAAU,EAAE;MACV;MACAC,KAAK,EAAE;QACLC,KAAK,EAAE,uBAAuB;QAC9BC,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE;MACT,CAAC;MAED;MACAC,KAAK,EAAE;QACLH,KAAK,EAAE,SAAS;QAChBC,QAAQ,EAAE,IAAI;QACdG,KAAK,EAAE,aAAa;QACpBF,KAAK,EAAE,aAAa;QACpBG,IAAI,EAAE;MACR,CAAC;MAED;MACAC,UAAU,EAAE;QACVC,MAAM,EAAE,IAAI;QACZF,IAAI,EAAE;MACR,CAAC;MAED;MACAG,UAAU,EAAE;QACVD,MAAM,EAAE,IAAI;QACZF,IAAI,EAAE;MACR;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IACE;IACAI,OAAO,EAAE;MACP;MACA;AACJ;AACA;MACIC,cAAc,EAAE;QACdC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE;MACX,CAAC;MAED;MACA;AACJ;AACA;MACIC,mBAAmB,EAAE,CAAC,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,MAAM,CAAC;MAEzE;AACJ;AACA;AACA;AACA;MAEI;MACAC,WAAW,WAAAA,YAACb,KAAK,EAAEc,GAAG,EAAE;QACtBd,KAAK,GAAG,IAAI,CAACe,QAAQ,CAAC,SAAS,CAAC,GAAG,IAAI,CAACC,WAAW,CAAC,SAAS,CAAC;QAC9D,IAAI,CAAC1B,iBAAiB,EAAE,CAACC,YAAY,CAAC,cAAc,EAAE0B,OAAO,CAACjB,KAAK,CAAC,CAAC;MACvE,CAAC;MAED,wGACAkB,WAAW,WAAAA,YAAClB,KAAK,EAAEc,GAAG,EAAE;QACtB,IAAIA,GAAG,EAAE;UACPA,GAAG,CAACK,MAAM,CAAC,IAAI,CAAC;QAClB;QAEA,IAAInB,KAAK,EAAE;UACTA,KAAK,CAACoB,GAAG,CAAC,IAAI,CAAC;QACjB;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MAEI;AACJ;AACA;AACA;AACA;AACA;AACA;MACI3B,UAAU,WAAAA,WAAC4B,CAAC,EAAE;QACZ,IAAIC,GAAG,GAAG,IAAI,CAACC,QAAQ,EAAE;QACzB,IAAID,GAAG,IAAIA,GAAG,CAACE,sBAAsB,EAAE,EAAE;UACvC,IAAI,CAACC,WAAW,EAAE;QACpB,CAAC,MAAM;UACL,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC;QACrB;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIhC,WAAW,WAAAA,YAAC2B,CAAC,EAAE;QACb,IAAIC,GAAG,GAAG,IAAI,CAACC,QAAQ,EAAE;QACzB,IAAI,CAACD,GAAG,EAAE;UACR;QACF;QAEA,QAAQD,CAAC,CAACM,gBAAgB,EAAE;UAC1B,KAAK,MAAM;UACX,KAAK,IAAI;YACPL,GAAG,CAACM,cAAc,EAAE;YACpB;UAEF,KAAK,OAAO;UACZ,KAAK,MAAM;YACTN,GAAG,CAACO,UAAU,EAAE;YAChB;QAAM;MAEZ;IACF;EACF,CAAC,CAAC;EAhNF9D,EAAE,CAACO,EAAE,CAACC,IAAI,CAACuD,WAAW,CAAC5D,aAAa,GAAGA,aAAa;AAAC"
}