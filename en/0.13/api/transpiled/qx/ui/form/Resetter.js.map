{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "__items",
    "members",
    "add",
    "field",
    "__typeCheck",
    "push",
    "item",
    "init",
    "getValue",
    "remove",
    "i",
    "length",
    "storedItem",
    "splice",
    "reset",
    "dataEntry",
    "e",
    "errors",
    "setValue",
    "Error",
    "join",
    "resetItem",
    "redefine",
    "redefineItem",
    "__P_356_1",
    "hasInterface",
    "ui",
    "form",
    "IField",
    "TypeError",
    "destruct",
    "Resetter"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Resetter.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n     2017 Martijn Evers, The Netherlands\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n     * Martijn Evers (mever)\r\n\r\n************************************************************************ */\r\n/**\r\n * The resetter is responsible for managing a set of fields and resetting these\r\n * fields on a {@link #reset} call. It can handle all form field implementing IField.\r\n */\r\nqx.Class.define(\"qx.ui.form.Resetter\", {\r\n  extend: qx.core.Object,\r\n\r\n  construct() {\r\n    super();\r\n\r\n    this.__items = [];\r\n  },\r\n\r\n  members: {\r\n    __items: null,\r\n\r\n    /**\r\n     * Adding a field to the resetter will get its current value and store\r\n     * it for resetting.\r\n     *\r\n     * @param field {qx.ui.form.IField} The field which should be added.\r\n     * @throws {TypeError} When given argument is not a field.\r\n     */\r\n    add(field) {\r\n      this.__typeCheck(field);\r\n      this.__items.push({ item: field, init: field.getValue() });\r\n    },\r\n\r\n    /**\r\n     * Removes a field from the resetter.\r\n     *\r\n     * @param field {qx.ui.form.IField} The field which should be removed.\r\n     * @throws {TypeError} When given argument is not a field.\r\n     * @return {Boolean} <code>true</code>, if the field has been removed.\r\n     */\r\n    remove(field) {\r\n      this.__typeCheck(field);\r\n      for (var i = 0; i < this.__items.length; i++) {\r\n        var storedItem = this.__items[i];\r\n        if (storedItem.item === field) {\r\n          this.__items.splice(i, 1);\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Resets all added fields to their initial value. The initial value\r\n     * is the value in the widget during the {@link #add}.\r\n     *\r\n     * @return {null|Error} Returns an error when some fields could not be reset.\r\n     */\r\n    reset() {\r\n      var dataEntry,\r\n        e,\r\n        errors = [];\r\n      for (var i = 0; i < this.__items.length; i++) {\r\n        dataEntry = this.__items[i];\r\n        e = dataEntry.item.setValue(dataEntry.init);\r\n        if (e && e instanceof Error) {\r\n          errors.push(e);\r\n        }\r\n      }\r\n\r\n      if (errors.length) {\r\n        return new Error(errors.join(\", \"));\r\n      } else {\r\n        return null;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Resets a single given field. The field has to be added to the resetter\r\n     * instance before. Otherwise, an error is thrown.\r\n     *\r\n     * @param field {qx.ui.form.IField} The field, which should be reset.\r\n     * @throws {TypeError} When given argument is not a field.\r\n     * @return {null|Error} Returns an error when the field value could not be set.\r\n     */\r\n    resetItem(field) {\r\n      this.__typeCheck(field);\r\n      for (var i = 0; i < this.__items.length; i++) {\r\n        var dataEntry = this.__items[i];\r\n        if (dataEntry.item === field) {\r\n          return field.setValue(dataEntry.init);\r\n        }\r\n      }\r\n\r\n      throw new Error(\"The given field has not been added.\");\r\n    },\r\n\r\n    /**\r\n     * Takes the current values of all added fields and uses these values as\r\n     * init values for resetting.\r\n     */\r\n    redefine() {\r\n      // go threw all added items\r\n      for (var i = 0; i < this.__items.length; i++) {\r\n        var item = this.__items[i].item;\r\n        // set the new init value for the item\r\n        this.__items[i].init = item.getValue();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Takes the current value of the given field and stores this value as init\r\n     * value for resetting.\r\n     *\r\n     * @param field {qx.ui.form.IField} The field to redefine.\r\n     * @throws {TypeError} When given argument is not a field.\r\n     */\r\n    redefineItem(field) {\r\n      this.__typeCheck(field);\r\n\r\n      // get the data entry\r\n      var dataEntry;\r\n      for (var i = 0; i < this.__items.length; i++) {\r\n        if (this.__items[i].item === field) {\r\n          dataEntry = this.__items[i];\r\n          dataEntry.init = dataEntry.item.getValue();\r\n          return;\r\n        }\r\n      }\r\n\r\n      throw new Error(\"The given field has not been added.\");\r\n    },\r\n\r\n    /**\r\n     * Assert when given argument is not a field.\r\n     *\r\n     * @param field {qx.ui.form.IField|var} Any argument that should be a field.\r\n     * @throws {TypeError} When given argument is not a field.\r\n     * @private\r\n     */\r\n    __typeCheck(field) {\r\n      if (!qx.Class.hasInterface(field.constructor, qx.ui.form.IField)) {\r\n        throw new TypeError(\"Field \" + field + \" not supported for resetting.\");\r\n      }\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n  destruct() {\r\n    // holding references to widgets --> must set to null\r\n    this.__items = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}