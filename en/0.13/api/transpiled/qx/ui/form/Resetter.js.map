{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__items",
    "members",
    "add",
    "field",
    "__typeCheck",
    "push",
    "item",
    "init",
    "getValue",
    "remove",
    "i",
    "length",
    "storedItem",
    "splice",
    "reset",
    "dataEntry",
    "e",
    "errors",
    "setValue",
    "Error",
    "join",
    "resetItem",
    "redefine",
    "redefineItem",
    "hasInterface",
    "constructor",
    "ui",
    "form",
    "IField",
    "TypeError",
    "destruct",
    "Resetter"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Resetter.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n     2017 Martijn Evers, The Netherlands\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Martijn Evers (mever)\n\n************************************************************************ */\n/**\n * The resetter is responsible for managing a set of fields and resetting these\n * fields on a {@link #reset} call. It can handle all form field implementing IField.\n */\nqx.Class.define(\"qx.ui.form.Resetter\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    this.__items = [];\n  },\n\n  members: {\n    __items: null,\n\n    /**\n     * Adding a field to the resetter will get its current value and store\n     * it for resetting.\n     *\n     * @param field {qx.ui.form.IField} The field which should be added.\n     * @throws {TypeError} When given argument is not a field.\n     */\n    add(field) {\n      this.__typeCheck(field);\n      this.__items.push({ item: field, init: field.getValue() });\n    },\n\n    /**\n     * Removes a field from the resetter.\n     *\n     * @param field {qx.ui.form.IField} The field which should be removed.\n     * @throws {TypeError} When given argument is not a field.\n     * @return {Boolean} <code>true</code>, if the field has been removed.\n     */\n    remove(field) {\n      this.__typeCheck(field);\n      for (var i = 0; i < this.__items.length; i++) {\n        var storedItem = this.__items[i];\n        if (storedItem.item === field) {\n          this.__items.splice(i, 1);\n          return true;\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Resets all added fields to their initial value. The initial value\n     * is the value in the widget during the {@link #add}.\n     *\n     * @return {null|Error} Returns an error when some fields could not be reset.\n     */\n    reset() {\n      var dataEntry,\n        e,\n        errors = [];\n      for (var i = 0; i < this.__items.length; i++) {\n        dataEntry = this.__items[i];\n        e = dataEntry.item.setValue(dataEntry.init);\n        if (e && e instanceof Error) {\n          errors.push(e);\n        }\n      }\n\n      if (errors.length) {\n        return new Error(errors.join(\", \"));\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Resets a single given field. The field has to be added to the resetter\n     * instance before. Otherwise, an error is thrown.\n     *\n     * @param field {qx.ui.form.IField} The field, which should be reset.\n     * @throws {TypeError} When given argument is not a field.\n     * @return {null|Error} Returns an error when the field value could not be set.\n     */\n    resetItem(field) {\n      this.__typeCheck(field);\n      for (var i = 0; i < this.__items.length; i++) {\n        var dataEntry = this.__items[i];\n        if (dataEntry.item === field) {\n          return field.setValue(dataEntry.init);\n        }\n      }\n\n      throw new Error(\"The given field has not been added.\");\n    },\n\n    /**\n     * Takes the current values of all added fields and uses these values as\n     * init values for resetting.\n     */\n    redefine() {\n      // go threw all added items\n      for (var i = 0; i < this.__items.length; i++) {\n        var item = this.__items[i].item;\n        // set the new init value for the item\n        this.__items[i].init = item.getValue();\n      }\n    },\n\n    /**\n     * Takes the current value of the given field and stores this value as init\n     * value for resetting.\n     *\n     * @param field {qx.ui.form.IField} The field to redefine.\n     * @throws {TypeError} When given argument is not a field.\n     */\n    redefineItem(field) {\n      this.__typeCheck(field);\n\n      // get the data entry\n      var dataEntry;\n      for (var i = 0; i < this.__items.length; i++) {\n        if (this.__items[i].item === field) {\n          dataEntry = this.__items[i];\n          dataEntry.init = dataEntry.item.getValue();\n          return;\n        }\n      }\n\n      throw new Error(\"The given field has not been added.\");\n    },\n\n    /**\n     * Assert when given argument is not a field.\n     *\n     * @param field {qx.ui.form.IField|var} Any argument that should be a field.\n     * @throws {TypeError} When given argument is not a field.\n     * @private\n     */\n    __typeCheck(field) {\n      if (!qx.Class.hasInterface(field.constructor, qx.ui.form.IField)) {\n        throw new TypeError(\"Field \" + field + \" not supported for resetting.\");\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n  destruct() {\n    // holding references to widgets --> must set to null\n    this.__items = null;\n  }\n});\n"
  ],
  "mappings": "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"
}