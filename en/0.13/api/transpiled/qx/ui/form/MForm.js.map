{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "locale",
    "Manager",
    "getInstance",
    "addListener",
    "__onChangeLocale",
    "properties",
    "valid",
    "check",
    "init",
    "apply",
    "event",
    "required",
    "invalidMessage",
    "nullable",
    "requiredInvalidMessage",
    "members",
    "_applyValid",
    "value",
    "old",
    "removeState",
    "addState",
    "core",
    "Environment",
    "select",
    "_true",
    "e",
    "getInvalidMessage",
    "translate",
    "setInvalidMessage",
    "getRequiredInvalidMessage",
    "setRequiredInvalidMessage",
    "destruct",
    "removeListener",
    "ui",
    "form",
    "MForm"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/MForm.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Mixin handling the valid and required properties for the form widgets.\r\n */\r\nqx.Mixin.define(\"qx.ui.form.MForm\", {\r\n  construct() {\r\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n      qx.locale.Manager.getInstance().addListener(\r\n        \"changeLocale\",\r\n        this.__onChangeLocale,\r\n        this\r\n      );\r\n    }\r\n  },\r\n\r\n  properties: {\r\n    /**\r\n     * Flag signaling if a widget is valid. If a widget is invalid, an invalid\r\n     * state will be set.\r\n     */\r\n    valid: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyValid\",\r\n      event: \"changeValid\"\r\n    },\r\n\r\n    /**\r\n     * Flag signaling if a widget is required.\r\n     */\r\n    required: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      event: \"changeRequired\"\r\n    },\r\n\r\n    /**\r\n     * Message which will be shown in an tooltip if the widget is invalid.\r\n     */\r\n    invalidMessage: {\r\n      init: null,\r\n      nullable: true,\r\n      check: \"String\",\r\n      event: \"changeInvalidMessage\"\r\n    },\r\n\r\n    /**\r\n     * Message which will be shown in an invalid tooltip if the {@link #required} is\r\n     * set to true.\r\n     */\r\n    requiredInvalidMessage: {\r\n      check: \"String\",\r\n      nullable: true,\r\n      event: \"changeRequiredInvalidMessage\"\r\n    }\r\n  },\r\n\r\n  members: {\r\n    // apply method\r\n    _applyValid(value, old) {\r\n      value ? this.removeState(\"invalid\") : this.addState(\"invalid\");\r\n    },\r\n\r\n    /**\r\n     * Locale change event handler\r\n     *\r\n     * @signature function(e)\r\n     * @param e {Event} the change event\r\n     */\r\n    __onChangeLocale: qx.core.Environment.select(\"qx.dynlocale\", {\r\n      true(e) {\r\n        // invalid message\r\n        var invalidMessage = this.getInvalidMessage();\r\n        if (invalidMessage && invalidMessage.translate) {\r\n          this.setInvalidMessage(invalidMessage.translate());\r\n        }\r\n        // required invalid message\r\n        var requiredInvalidMessage = this.getRequiredInvalidMessage();\r\n        if (requiredInvalidMessage && requiredInvalidMessage.translate) {\r\n          this.setRequiredInvalidMessage(requiredInvalidMessage.translate());\r\n        }\r\n      },\r\n\r\n      false: null\r\n    })\r\n  },\r\n\r\n  destruct() {\r\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n      qx.locale.Manager.getInstance().removeListener(\r\n        \"changeLocale\",\r\n        this.__onChangeLocale,\r\n        this\r\n      );\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,kBAAkB,EAAE;IAClCC,SAAS,WAAAA,UAAA,EAAG;MACmC;QAC3CN,EAAE,CAACO,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC,CAACC,WAAW,CACzC,cAAc,EACd,IAAI,CAACC,SAAgB,EACrB,IACF,CAAC;MACH;IACF,CAAC;IAEDC,UAAU,EAAE;MACV;AACJ;AACA;AACA;MACIC,KAAK,EAAE;QACLC,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,aAAa;QACpBC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIC,QAAQ,EAAE;QACRJ,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,KAAK;QACXE,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIE,cAAc,EAAE;QACdJ,IAAI,EAAE,IAAI;QACVK,QAAQ,EAAE,IAAI;QACdN,KAAK,EAAE,QAAQ;QACfG,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;AACA;MACII,sBAAsB,EAAE;QACtBP,KAAK,EAAE,QAAQ;QACfM,QAAQ,EAAE,IAAI;QACdH,KAAK,EAAE;MACT;IACF,CAAC;IAEDK,OAAO,EAAE;MACP;MACAC,WAAW,WAAAA,YAACC,KAAK,EAAEC,GAAG,EAAE;QACtBD,KAAK,GAAG,IAAI,CAACE,WAAW,CAAC,SAAS,CAAC,GAAG,IAAI,CAACC,QAAQ,CAAC,SAAS,CAAC;MAChE,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIhB,SAAgB,EAAEX,EAAE,CAAC4B,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC,cAAc,EAAE;QAAA,iBAAAC,MACtDC,CAAC,EAAE;UACN;UACA,IAAIb,cAAc,GAAG,IAAI,CAACc,iBAAiB,CAAC,CAAC;UAC7C,IAAId,cAAc,IAAIA,cAAc,CAACe,SAAS,EAAE;YAC9C,IAAI,CAACC,iBAAiB,CAAChB,cAAc,CAACe,SAAS,CAAC,CAAC,CAAC;UACpD;UACA;UACA,IAAIb,sBAAsB,GAAG,IAAI,CAACe,yBAAyB,CAAC,CAAC;UAC7D,IAAIf,sBAAsB,IAAIA,sBAAsB,CAACa,SAAS,EAAE;YAC9D,IAAI,CAACG,yBAAyB,CAAChB,sBAAsB,CAACa,SAAS,CAAC,CAAC,CAAC;UACpE;QACF,CAAC;QAED,SAAO;MACT,CAAC;IACH,CAAC;IAEDI,QAAQ,WAAAA,SAAA,EAAG;MACoC;QAC3CtC,EAAE,CAACO,MAAM,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC8B,cAAc,CAC5C,cAAc,EACd,IAAI,CAAC5B,SAAgB,EACrB,IACF,CAAC;MACH;IACF;EACF,CAAC,CAAC;EAjHFX,EAAE,CAACwC,EAAE,CAACC,IAAI,CAACC,KAAK,CAACvC,aAAa,GAAGA,aAAa;AAAC"
}