{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "basic",
    "Atom",
    "include",
    "core",
    "MExecutable",
    "implement",
    "form",
    "IExecutable",
    "construct",
    "label",
    "icon",
    "constructor",
    "call",
    "addListener",
    "_onPointerOver",
    "_onPointerOut",
    "__timer",
    "event",
    "AcceleratingTimer",
    "_onInterval",
    "properties",
    "appearance",
    "refine",
    "init",
    "interval",
    "check",
    "firstInterval",
    "minTimer",
    "timerDecrease",
    "members",
    "e",
    "isEnabled",
    "getTarget",
    "set",
    "getInterval",
    "getFirstInterval",
    "minimum",
    "getMinTimer",
    "decrease",
    "getTimerDecrease",
    "start",
    "addState",
    "stop",
    "removeState",
    "execute",
    "destruct",
    "_disposeObjects",
    "HoverButton"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/HoverButton.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The HoverButton is an {@link qx.ui.basic.Atom}, which fires repeatedly\n * execute events while the pointer is over the widget.\n *\n * The rate at which the execute event is fired accelerates is the pointer keeps\n * inside of the widget. The initial delay and the interval time can be set using\n * the properties {@link #firstInterval} and {@link #interval}. The\n * {@link #execute} events will be fired in a shorter amount of time if the pointer\n * remains over the widget, until the min {@link #minTimer} is reached.\n * The {@link #timerDecrease} property sets the amount of milliseconds which will\n * decreased after every firing.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   var button = new qx.ui.form.HoverButton(\"Hello World\");\n *\n *   button.addListener(\"execute\", function(e) {\n *     alert(\"Button is hovered\");\n *   }, this);\n *\n *   this.getRoot.add(button);\n * </pre>\n *\n * This example creates a button with the label \"Hello World\" and attaches an\n * event listener to the {@link #execute} event.\n *\n * *External Documentation*\n *\n * <a href='http://qooxdoo.org/docs/#desktop/widget/hoverbutton.md' target='_blank'>\n * Documentation of this widget in the qooxdoo manual.</a>\n */\nqx.Class.define(\"qx.ui.form.HoverButton\", {\n  extend: qx.ui.basic.Atom,\n  include: [qx.ui.core.MExecutable],\n  implement: [qx.ui.form.IExecutable],\n\n  /**\n   * @param label {String} Label to use\n   * @param icon {String?null} Icon to use\n   */\n  construct(label, icon) {\n    super(label, icon);\n\n    this.addListener(\"pointerover\", this._onPointerOver, this);\n    this.addListener(\"pointerout\", this._onPointerOut, this);\n\n    this.__timer = new qx.event.AcceleratingTimer();\n    this.__timer.addListener(\"interval\", this._onInterval, this);\n  },\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"hover-button\"\n    },\n\n    /**\n     * Interval used after the first run of the timer. Usually a smaller value\n     * than the \"firstInterval\" property value to get a faster reaction.\n     */\n    interval: {\n      check: \"Integer\",\n      init: 80\n    },\n\n    /**\n     * Interval used for the first run of the timer. Usually a greater value\n     * than the \"interval\" property value to a little delayed reaction at the first\n     * time.\n     */\n    firstInterval: {\n      check: \"Integer\",\n      init: 200\n    },\n\n    /** This configures the minimum value for the timer interval. */\n    minTimer: {\n      check: \"Integer\",\n      init: 20\n    },\n\n    /** Decrease of the timer on each interval (for the next interval) until minTimer reached. */\n    timerDecrease: {\n      check: \"Integer\",\n      init: 2\n    }\n  },\n\n  members: {\n    __timer: null,\n\n    /**\n     * Start timer on pointer over\n     *\n     * @param e {qx.event.type.Pointer} The pointer event\n     */\n    _onPointerOver(e) {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      this.__timer\n        .set({\n          interval: this.getInterval(),\n          firstInterval: this.getFirstInterval(),\n          minimum: this.getMinTimer(),\n          decrease: this.getTimerDecrease()\n        })\n        .start();\n\n      this.addState(\"hovered\");\n    },\n\n    /**\n     * Stop timer on pointer out\n     *\n     * @param e {qx.event.type.Pointer} The pointer event\n     */\n    _onPointerOut(e) {\n      this.__timer.stop();\n      this.removeState(\"hovered\");\n\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n    },\n\n    /**\n     * Fire execute event on timer interval event\n     */\n    _onInterval() {\n      if (this.isEnabled()) {\n        this.execute();\n      } else {\n        this.__timer.stop();\n      }\n    }\n  },\n\n  destruct() {\n    this._disposeObjects(\"__timer\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,wBAAwB,EAAE;IACxCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,KAAK,CAACC,IAAI;IACxBC,OAAO,EAAE,CAACV,EAAE,CAACO,EAAE,CAACI,IAAI,CAACC,WAAW,CAAC;IACjCC,SAAS,EAAE,CAACb,EAAE,CAACO,EAAE,CAACO,IAAI,CAACC,WAAW,CAAC;IAEnC;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,KAAK,EAAEC,IAAI,EAAE;MACrBlB,EAAA,CAAAO,EAAA,CAAAC,KAAA,CAAAC,IAAA,CAAAU,WAAA,CAAAC,IAAA,OAAMH,KAAK,EAAEC,IAAI;MAEjB,IAAI,CAACG,WAAW,CAAC,aAAa,EAAE,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;MAC1D,IAAI,CAACD,WAAW,CAAC,YAAY,EAAE,IAAI,CAACE,aAAa,EAAE,IAAI,CAAC;MAExD,IAAI,CAACC,SAAO,GAAG,IAAIxB,EAAE,CAACyB,KAAK,CAACC,iBAAiB,CAAC,CAAC;MAC/C,IAAI,CAACF,SAAO,CAACH,WAAW,CAAC,UAAU,EAAE,IAAI,CAACM,WAAW,EAAE,IAAI,CAAC;IAC9D,CAAC;IAEDC,UAAU,EAAE;MACV;MACAC,UAAU,EAAE;QACVC,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;MACIC,QAAQ,EAAE;QACRC,KAAK,EAAE,SAAS;QAChBF,IAAI,EAAE;MACR,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIG,aAAa,EAAE;QACbD,KAAK,EAAE,SAAS;QAChBF,IAAI,EAAE;MACR,CAAC;MAED;MACAI,QAAQ,EAAE;QACRF,KAAK,EAAE,SAAS;QAChBF,IAAI,EAAE;MACR,CAAC;MAED;MACAK,aAAa,EAAE;QACbH,KAAK,EAAE,SAAS;QAChBF,IAAI,EAAE;MACR;IACF,CAAC;IAEDM,OAAO,EAAE;MACPb,SAAO,EAAE,IAAI;MAEb;AACJ;AACA;AACA;AACA;MACIF,cAAc,WAAAA,eAACgB,CAAC,EAAE;QAChB,IAAI,CAAC,IAAI,CAACC,SAAS,CAAC,CAAC,IAAID,CAAC,CAACE,SAAS,CAAC,CAAC,KAAK,IAAI,EAAE;UAC/C;QACF;QAEA,IAAI,CAAChB,SAAO,CACTiB,GAAG,CAAC;UACHT,QAAQ,EAAE,IAAI,CAACU,WAAW,CAAC,CAAC;UAC5BR,aAAa,EAAE,IAAI,CAACS,gBAAgB,CAAC,CAAC;UACtCC,OAAO,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;UAC3BC,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAAC;QAClC,CAAC,CAAC,CACDC,KAAK,CAAC,CAAC;QAEV,IAAI,CAACC,QAAQ,CAAC,SAAS,CAAC;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;MACI1B,aAAa,WAAAA,cAACe,CAAC,EAAE;QACf,IAAI,CAACd,SAAO,CAAC0B,IAAI,CAAC,CAAC;QACnB,IAAI,CAACC,WAAW,CAAC,SAAS,CAAC;QAE3B,IAAI,CAAC,IAAI,CAACZ,SAAS,CAAC,CAAC,IAAID,CAAC,CAACE,SAAS,CAAC,CAAC,KAAK,IAAI,EAAE;UAC/C;QACF;MACF,CAAC;MAED;AACJ;AACA;MACIb,WAAW,WAAAA,YAAA,EAAG;QACZ,IAAI,IAAI,CAACY,SAAS,CAAC,CAAC,EAAE;UACpB,IAAI,CAACa,OAAO,CAAC,CAAC;QAChB,CAAC,MAAM;UACL,IAAI,CAAC5B,SAAO,CAAC0B,IAAI,CAAC,CAAC;QACrB;MACF;IACF,CAAC;IAEDG,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACC,eAAe,CAAC,WAAS,CAAC;IACjC;EACF,CAAC,CAAC;EApKFtD,EAAE,CAACO,EAAE,CAACO,IAAI,CAACyC,WAAW,CAACpD,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}