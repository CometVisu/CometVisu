{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "implement",
    "form",
    "INumberForm",
    "IRange",
    "IForm",
    "include",
    "MContentPadding",
    "MForm",
    "construct",
    "min",
    "value",
    "max",
    "constructor",
    "call",
    "layout",
    "Grid",
    "setColumnFlex",
    "setRowFlex",
    "_setLayout",
    "addListener",
    "_onKeyDown",
    "_onKeyUp",
    "_onRoll",
    "locale",
    "Manager",
    "getInstance",
    "_onChangeLocale",
    "textField",
    "_createChildControl",
    "setMinimum",
    "setMaximum",
    "undefined",
    "setValue",
    "initValue",
    "e",
    "fireNonBubblingEvent",
    "event",
    "type",
    "Focus",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "singleStep",
    "check",
    "pageStep",
    "minimum",
    "apply",
    "nullable",
    "maximum",
    "wrap",
    "editable",
    "numberFormat",
    "allowShrinkY",
    "members",
    "__lastValidValue",
    "__pageUpMode",
    "__pageDownMode",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "TextField",
    "setFilter",
    "_getFilterRegExp",
    "addState",
    "setWidth",
    "setFocusable",
    "_onTextChange",
    "_add",
    "column",
    "row",
    "rowSpan",
    "RepeatButton",
    "_countUp",
    "_countDown",
    "Spinner",
    "superclass",
    "prototype",
    "decimalSeparator",
    "groupSeparator",
    "getNumberFormat",
    "getLocale",
    "Number",
    "getDecimalSeparator",
    "getGroupSeparator",
    "prefix",
    "postfix",
    "getPrefix",
    "getPostfix",
    "filterRegExp",
    "RegExp",
    "lang",
    "String",
    "escapeRegexpChars",
    "_forwardStates",
    "focused",
    "invalid",
    "tabFocus",
    "field",
    "getChildControl",
    "getFocusElement",
    "focus",
    "selectAllText",
    "_applyMinimum",
    "old",
    "getMaximum",
    "getValue",
    "_updateButtons",
    "_applyMaximum",
    "getMinimum",
    "_applyEnabled",
    "_checkValue",
    "_applyValue",
    "format",
    "_applyEditable",
    "setReadOnly",
    "_applyWrap",
    "_applyNumberFormat",
    "removeListener",
    "_onChangeNumberFormat",
    "_getContentPaddingTarget",
    "upButton",
    "downButton",
    "getEnabled",
    "setEnabled",
    "getWrap",
    "getKeyIdentifier",
    "Data",
    "press",
    "stopPropagation",
    "preventDefault",
    "release",
    "getPointerType",
    "delta",
    "getDelta",
    "y",
    "stop",
    "parse",
    "ex",
    "parseFloat",
    "isNaN",
    "ev",
    "setNumberFormat",
    "textfield",
    "newValue",
    "getPageStep",
    "getSingleStep",
    "diff",
    "gotoValue",
    "Math",
    "destruct",
    "nf"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Spinner.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Andreas Ecker (ecker)\r\n     * Martin Wittemann (martinwittemann)\r\n     * Jonathan Wei√ü (jonathan_rass)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A *spinner* is a control that allows you to adjust a numerical value,\r\n * typically within an allowed range. An obvious example would be to specify the\r\n * month of a year as a number in the range 1 - 12.\r\n *\r\n * To do so, a spinner encompasses a field to display the current value (a\r\n * textfield) and controls such as up and down buttons to change that value. The\r\n * current value can also be changed by editing the display field directly, or\r\n * using mouse wheel and cursor keys.\r\n *\r\n * An optional {@link #numberFormat} property allows you to control the format of\r\n * how a value can be entered and will be displayed.\r\n *\r\n * A brief, but non-trivial example:\r\n *\r\n * <pre class='javascript'>\r\n * var s = new qx.ui.form.Spinner();\r\n * s.set({\r\n *   maximum: 3000,\r\n *   minimum: -3000\r\n * });\r\n * var nf = new qx.util.format.NumberFormat();\r\n * nf.setMaximumFractionDigits(2);\r\n * s.setNumberFormat(nf);\r\n * </pre>\r\n *\r\n * A spinner instance without any further properties specified in the\r\n * constructor or a subsequent *set* command will appear with default\r\n * values and behaviour.\r\n *\r\n * @childControl textfield {qx.ui.form.TextField} holds the current value of the spinner\r\n * @childControl upbutton {qx.ui.form.Button} button to increase the value\r\n * @childControl downbutton {qx.ui.form.Button} button to decrease the value\r\n *\r\n */\r\nqx.Class.define(\"qx.ui.form.Spinner\", {\r\n  extend: qx.ui.core.Widget,\r\n  implement: [qx.ui.form.INumberForm, qx.ui.form.IRange, qx.ui.form.IForm],\r\n\r\n  include: [qx.ui.core.MContentPadding, qx.ui.form.MForm],\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param min {Number} Minimum value\r\n   * @param value {Number} Current value\r\n   * @param max {Number} Maximum value\r\n   */\r\n  construct(min, value, max) {\r\n    super();\r\n\r\n    // MAIN LAYOUT\r\n    var layout = new qx.ui.layout.Grid();\r\n    layout.setColumnFlex(0, 1);\r\n    layout.setRowFlex(0, 1);\r\n    layout.setRowFlex(1, 1);\r\n    this._setLayout(layout);\r\n\r\n    // EVENTS\r\n    this.addListener(\"keydown\", this._onKeyDown, this);\r\n    this.addListener(\"keyup\", this._onKeyUp, this);\r\n    this.addListener(\"roll\", this._onRoll, this);\r\n\r\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n      qx.locale.Manager.getInstance().addListener(\r\n        \"changeLocale\",\r\n        this._onChangeLocale,\r\n        this\r\n      );\r\n    }\r\n\r\n    // CREATE CONTROLS\r\n    var textField = this._createChildControl(\"textfield\");\r\n    this._createChildControl(\"upbutton\");\r\n    this._createChildControl(\"downbutton\");\r\n\r\n    // INITIALIZATION\r\n    if (min != null) {\r\n      this.setMinimum(min);\r\n    }\r\n\r\n    if (max != null) {\r\n      this.setMaximum(max);\r\n    }\r\n\r\n    if (value !== undefined) {\r\n      this.setValue(value);\r\n    } else {\r\n      this.initValue();\r\n    }\r\n\r\n    // forward the focusin and focusout events to the textfield. The textfield\r\n    // is not focusable so the events need to be forwarded manually.\r\n    this.addListener(\"focusin\", e => {\r\n      textField.fireNonBubblingEvent(\"focusin\", qx.event.type.Focus);\r\n    });\r\n\r\n    this.addListener(\"focusout\", e => {\r\n      textField.fireNonBubblingEvent(\"focusout\", qx.event.type.Focus);\r\n    });\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    // overridden\r\n    appearance: {\r\n      refine: true,\r\n      init: \"spinner\"\r\n    },\r\n\r\n    // overridden\r\n    focusable: {\r\n      refine: true,\r\n      init: true\r\n    },\r\n\r\n    /** The amount to increment on each event (keypress or pointerdown) */\r\n    singleStep: {\r\n      check: \"Number\",\r\n      init: 1\r\n    },\r\n\r\n    /** The amount to increment on each pageup/pagedown keypress */\r\n    pageStep: {\r\n      check: \"Number\",\r\n      init: 10\r\n    },\r\n\r\n    /** minimal value of the Range object */\r\n    minimum: {\r\n      check: \"Number\",\r\n      apply: \"_applyMinimum\",\r\n      init: 0,\r\n      event: \"changeMinimum\"\r\n    },\r\n\r\n    /** The value of the spinner. */\r\n    value: {\r\n      check: \"this._checkValue(value)\",\r\n      nullable: true,\r\n      apply: \"_applyValue\",\r\n      init: 0,\r\n      event: \"changeValue\"\r\n    },\r\n\r\n    /** maximal value of the Range object */\r\n    maximum: {\r\n      check: \"Number\",\r\n      apply: \"_applyMaximum\",\r\n      init: 100,\r\n      event: \"changeMaximum\"\r\n    },\r\n\r\n    /** whether the value should wrap around */\r\n    wrap: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyWrap\"\r\n    },\r\n\r\n    /** Controls whether the textfield of the spinner is editable or not */\r\n    editable: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyEditable\"\r\n    },\r\n\r\n    /** Controls the display of the number in the textfield */\r\n    numberFormat: {\r\n      check: \"qx.util.format.NumberFormat\",\r\n      apply: \"_applyNumberFormat\",\r\n      nullable: true\r\n    },\r\n\r\n    // overridden\r\n    allowShrinkY: {\r\n      refine: true,\r\n      init: false\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /** Saved last value in case invalid text is entered */\r\n    __lastValidValue: null,\r\n\r\n    /** Whether the page-up button has been pressed */\r\n    __pageUpMode: false,\r\n\r\n    /** Whether the page-down button has been pressed */\r\n    __pageDownMode: false,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      WIDGET INTERNALS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // overridden\r\n    _createChildControlImpl(id, hash) {\r\n      var control;\r\n\r\n      switch (id) {\r\n        case \"textfield\":\r\n          control = new qx.ui.form.TextField();\r\n          control.setFilter(this._getFilterRegExp());\r\n          control.addState(\"inner\");\r\n          control.setWidth(40);\r\n          control.setFocusable(false);\r\n          control.addListener(\"changeValue\", this._onTextChange, this);\r\n\r\n          this._add(control, { column: 0, row: 0, rowSpan: 2 });\r\n          break;\r\n\r\n        case \"upbutton\":\r\n          control = new qx.ui.form.RepeatButton();\r\n          control.addState(\"inner\");\r\n          control.setFocusable(false);\r\n          control.addListener(\"execute\", this._countUp, this);\r\n          this._add(control, { column: 1, row: 0 });\r\n          break;\r\n\r\n        case \"downbutton\":\r\n          control = new qx.ui.form.RepeatButton();\r\n          control.addState(\"inner\");\r\n          control.setFocusable(false);\r\n          control.addListener(\"execute\", this._countDown, this);\r\n          this._add(control, { column: 1, row: 1 });\r\n          break;\r\n      }\r\n\r\n      return control || super._createChildControlImpl(id);\r\n    },\r\n\r\n    /**\r\n     * Returns the regular expression used as the text field's filter\r\n     *\r\n     * @return {RegExp} The filter RegExp.\r\n     */\r\n    _getFilterRegExp() {\r\n      var decimalSeparator, groupSeparator, locale;\r\n\r\n      if (this.getNumberFormat() !== null) {\r\n        locale = this.getNumberFormat().getLocale();\r\n      } else {\r\n        locale = qx.locale.Manager.getInstance().getLocale();\r\n      }\r\n\r\n      decimalSeparator = qx.locale.Number.getDecimalSeparator(locale);\r\n      groupSeparator = qx.locale.Number.getGroupSeparator(locale);\r\n\r\n      var prefix = \"\";\r\n      var postfix = \"\";\r\n      if (this.getNumberFormat() !== null) {\r\n        prefix = this.getNumberFormat().getPrefix() || \"\";\r\n        postfix = this.getNumberFormat().getPostfix() || \"\";\r\n      }\r\n\r\n      var filterRegExp = new RegExp(\r\n        \"[0-9\" +\r\n          qx.lang.String.escapeRegexpChars(decimalSeparator) +\r\n          qx.lang.String.escapeRegexpChars(groupSeparator) +\r\n          qx.lang.String.escapeRegexpChars(prefix) +\r\n          qx.lang.String.escapeRegexpChars(postfix) +\r\n          \"-]\"\r\n      );\r\n\r\n      return filterRegExp;\r\n    },\r\n\r\n    // overridden\r\n    /**\r\n     * @lint ignoreReferenceField(_forwardStates)\r\n     */\r\n    _forwardStates: {\r\n      focused: true,\r\n      invalid: true\r\n    },\r\n\r\n    // overridden\r\n    tabFocus() {\r\n      var field = this.getChildControl(\"textfield\");\r\n\r\n      field.getFocusElement().focus();\r\n      field.selectAllText();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      APPLY METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Apply routine for the minimum property.\r\n     *\r\n     * It sets the value of the spinner to the maximum of the current spinner\r\n     * value and the given min property value.\r\n     *\r\n     * @param value {Number} The new value of the min property\r\n     * @param old {Number} The old value of the min property\r\n     */\r\n    _applyMinimum(value, old) {\r\n      if (this.getMaximum() < value) {\r\n        this.setMaximum(value);\r\n      }\r\n\r\n      if (this.getValue() < value) {\r\n        this.setValue(value);\r\n      } else {\r\n        this._updateButtons();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Apply routine for the maximum property.\r\n     *\r\n     * It sets the value of the spinner to the minimum of the current spinner\r\n     * value and the given max property value.\r\n     *\r\n     * @param value {Number} The new value of the max property\r\n     * @param old {Number} The old value of the max property\r\n     */\r\n    _applyMaximum(value, old) {\r\n      if (this.getMinimum() > value) {\r\n        this.setMinimum(value);\r\n      }\r\n\r\n      if (this.getValue() > value) {\r\n        this.setValue(value);\r\n      } else {\r\n        this._updateButtons();\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    _applyEnabled(value, old) {\r\n      super._applyEnabled(value, old);\r\n\r\n      this._updateButtons();\r\n    },\r\n\r\n    /**\r\n     * Check whether the value being applied is allowed.\r\n     *\r\n     * If you override this to change the allowed type, you will also\r\n     * want to override {@link #_applyValue}, {@link #_applyMinimum},\r\n     * {@link #_applyMaximum}, {@link #_countUp}, {@link #_countDown}, and\r\n     * {@link #_onTextChange} methods as those cater specifically to numeric\r\n     * values.\r\n     *\r\n     * @param value {var}\r\n     *   The value being set\r\n     * @return {Boolean}\r\n     *   <i>true</i> if the value is allowed;\r\n     *   <i>false> otherwise.\r\n     */\r\n    _checkValue(value) {\r\n      return (\r\n        typeof value === \"number\" &&\r\n        value >= this.getMinimum() &&\r\n        value <= this.getMaximum()\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Apply routine for the value property.\r\n     *\r\n     * It disables / enables the buttons and handles the wrap around.\r\n     *\r\n     * @param value {Number} The new value of the spinner\r\n     * @param old {Number} The former value of the spinner\r\n     */\r\n    _applyValue(value, old) {\r\n      var textField = this.getChildControl(\"textfield\");\r\n\r\n      this._updateButtons();\r\n\r\n      // save the last valid value of the spinner\r\n      this.__lastValidValue = value;\r\n\r\n      // write the value of the spinner to the textfield\r\n      if (value !== null) {\r\n        if (this.getNumberFormat()) {\r\n          textField.setValue(this.getNumberFormat().format(value));\r\n        } else {\r\n          textField.setValue(value + \"\");\r\n        }\r\n      } else {\r\n        textField.setValue(\"\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Apply routine for the editable property.<br/>\r\n     * It sets the textfield of the spinner to not read only.\r\n     *\r\n     * @param value {Boolean} The new value of the editable property\r\n     * @param old {Boolean} The former value of the editable property\r\n     */\r\n    _applyEditable(value, old) {\r\n      var textField = this.getChildControl(\"textfield\");\r\n\r\n      if (textField) {\r\n        textField.setReadOnly(!value);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Apply routine for the wrap property.<br/>\r\n     * Enables all buttons if the wrapping is enabled.\r\n     *\r\n     * @param value {Boolean} The new value of the wrap property\r\n     * @param old {Boolean} The former value of the wrap property\r\n     */\r\n    _applyWrap(value, old) {\r\n      this._updateButtons();\r\n    },\r\n\r\n    /**\r\n     * Apply routine for the numberFormat property.<br/>\r\n     * When setting a number format, the display of the\r\n     * value in the text-field will be changed immediately.\r\n     *\r\n     * @param value {Boolean} The new value of the numberFormat property\r\n     * @param old {Boolean} The former value of the numberFormat property\r\n     */\r\n    _applyNumberFormat(value, old) {\r\n      var textField = this.getChildControl(\"textfield\");\r\n      textField.setFilter(this._getFilterRegExp());\r\n\r\n      if (old) {\r\n        old.removeListener(\r\n          \"changeNumberFormat\",\r\n          this._onChangeNumberFormat,\r\n          this\r\n        );\r\n      }\r\n\r\n      var numberFormat = this.getNumberFormat();\r\n      if (numberFormat !== null) {\r\n        numberFormat.addListener(\r\n          \"changeNumberFormat\",\r\n          this._onChangeNumberFormat,\r\n          this\r\n        );\r\n      }\r\n\r\n      this._applyValue(this.__lastValidValue, undefined);\r\n    },\r\n\r\n    /**\r\n     * Returns the element, to which the content padding should be applied.\r\n     *\r\n     * @return {qx.ui.core.Widget} The content padding target.\r\n     */\r\n    _getContentPaddingTarget() {\r\n      return this.getChildControl(\"textfield\");\r\n    },\r\n\r\n    /**\r\n     * Checks the min and max values, disables / enables the\r\n     * buttons and handles the wrap around.\r\n     */\r\n    _updateButtons() {\r\n      var upButton = this.getChildControl(\"upbutton\");\r\n      var downButton = this.getChildControl(\"downbutton\");\r\n      var value = this.getValue();\r\n\r\n      if (!this.getEnabled()) {\r\n        // If Spinner is disabled -> disable buttons\r\n        upButton.setEnabled(false);\r\n        downButton.setEnabled(false);\r\n      } else {\r\n        if (this.getWrap()) {\r\n          // If wraped -> always enable buttons\r\n          upButton.setEnabled(true);\r\n          downButton.setEnabled(true);\r\n        } else {\r\n          // check max value\r\n          if (value !== null && value < this.getMaximum()) {\r\n            upButton.setEnabled(true);\r\n          } else {\r\n            upButton.setEnabled(false);\r\n          }\r\n\r\n          // check min value\r\n          if (value !== null && value > this.getMinimum()) {\r\n            downButton.setEnabled(true);\r\n          } else {\r\n            downButton.setEnabled(false);\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      KEY EVENT-HANDLING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Callback for \"keyDown\" event.<br/>\r\n     * Controls the interval mode (\"single\" or \"page\")\r\n     * and the interval increase by detecting \"Up\"/\"Down\"\r\n     * and \"PageUp\"/\"PageDown\" keys.<br/>\r\n     * The corresponding button will be pressed.\r\n     *\r\n     * @param e {qx.event.type.KeySequence} keyDown event\r\n     */\r\n    _onKeyDown(e) {\r\n      switch (e.getKeyIdentifier()) {\r\n        case \"PageUp\":\r\n          // mark that the spinner is in page mode and process further\r\n          this.__pageUpMode = true;\r\n          this.getChildControl(\"textfield\").fireNonBubblingEvent(\r\n            \"changeValue\",\r\n            qx.event.type.Data\r\n          );\r\n\r\n          this.getChildControl(\"upbutton\").press();\r\n          break;\r\n\r\n        case \"Up\":\r\n          this.getChildControl(\"textfield\").fireNonBubblingEvent(\r\n            \"changeValue\",\r\n            qx.event.type.Data\r\n          );\r\n\r\n          this.getChildControl(\"upbutton\").press();\r\n          break;\r\n\r\n        case \"PageDown\":\r\n          // mark that the spinner is in page mode and process further\r\n          this.__pageDownMode = true;\r\n          this.getChildControl(\"textfield\").fireNonBubblingEvent(\r\n            \"changeValue\",\r\n            qx.event.type.Data\r\n          );\r\n\r\n          this.getChildControl(\"downbutton\").press();\r\n          break;\r\n\r\n        case \"Down\":\r\n          this.getChildControl(\"textfield\").fireNonBubblingEvent(\r\n            \"changeValue\",\r\n            qx.event.type.Data\r\n          );\r\n\r\n          this.getChildControl(\"downbutton\").press();\r\n          break;\r\n\r\n        default:\r\n          // Do not stop unused events\r\n          return;\r\n      }\r\n\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    },\r\n\r\n    /**\r\n     * Callback for \"keyUp\" event.<br/>\r\n     * Detecting \"Up\"/\"Down\" and \"PageUp\"/\"PageDown\" keys.<br/>\r\n     * Releases the button and disabled the page mode, if necessary.\r\n     *\r\n     * @param e {qx.event.type.KeySequence} keyUp event\r\n     */\r\n    _onKeyUp(e) {\r\n      switch (e.getKeyIdentifier()) {\r\n        case \"PageUp\":\r\n          this.getChildControl(\"upbutton\").release();\r\n          this.__pageUpMode = false;\r\n          break;\r\n\r\n        case \"Up\":\r\n          this.getChildControl(\"upbutton\").release();\r\n          break;\r\n\r\n        case \"PageDown\":\r\n          this.getChildControl(\"downbutton\").release();\r\n          this.__pageDownMode = false;\r\n          break;\r\n\r\n        case \"Down\":\r\n          this.getChildControl(\"downbutton\").release();\r\n          break;\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      OTHER EVENT HANDLERS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Callback method for the \"roll\" event.<br/>\r\n     * Increments or decrements the value of the spinner.\r\n     *\r\n     * @param e {qx.event.type.Roll} roll event\r\n     */\r\n    _onRoll(e) {\r\n      // only wheel\r\n      if (e.getPointerType() != \"wheel\") {\r\n        return;\r\n      }\r\n      var delta = e.getDelta().y;\r\n      if (delta < 0) {\r\n        this._countUp();\r\n      } else if (delta > 0) {\r\n        this._countDown();\r\n      }\r\n\r\n      e.stop();\r\n    },\r\n\r\n    /**\r\n     * Callback method for the \"change\" event of the textfield.\r\n     *\r\n     * @param e {qx.event.type.Event} text change event or blur event\r\n     */\r\n    _onTextChange(e) {\r\n      var textField = this.getChildControl(\"textfield\");\r\n      var value;\r\n\r\n      // if a number format is set\r\n      if (this.getNumberFormat()) {\r\n        // try to parse the current number using the number format\r\n        try {\r\n          value = this.getNumberFormat().parse(textField.getValue());\r\n        } catch (ex) {\r\n          // otherwise, process further\r\n        }\r\n      }\r\n\r\n      if (value === undefined) {\r\n        // try to parse the number as a float\r\n        value = parseFloat(textField.getValue());\r\n      }\r\n\r\n      // if the result is a number\r\n      if (!isNaN(value)) {\r\n        // Fix value if invalid\r\n        if (value > this.getMaximum()) {\r\n          value = this.getMaximum();\r\n        } else if (value < this.getMinimum()) {\r\n          value = this.getMinimum();\r\n        }\r\n\r\n        // If value is the same than before, call directly _applyValue()\r\n        if (value === this.__lastValidValue) {\r\n          this._applyValue(this.__lastValidValue);\r\n        } else {\r\n          this.setValue(value);\r\n        }\r\n      } else {\r\n        // otherwise, reset the last valid value\r\n        this._applyValue(this.__lastValidValue, undefined);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Callback method for the locale Manager's \"changeLocale\" event.\r\n     *\r\n     * @param ev {qx.event.type.Event} locale change event\r\n     */\r\n\r\n    _onChangeLocale(ev) {\r\n      if (this.getNumberFormat() !== null) {\r\n        this.setNumberFormat(this.getNumberFormat());\r\n        var textfield = this.getChildControl(\"textfield\");\r\n        textfield.setFilter(this._getFilterRegExp());\r\n        textfield.setValue(this.getNumberFormat().format(this.getValue()));\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Callback method for the number format's \"changeNumberFormat\" event.\r\n     *\r\n     * @param ev {qx.event.type.Event} number format change event\r\n     */\r\n    _onChangeNumberFormat(ev) {\r\n      var textfield = this.getChildControl(\"textfield\");\r\n      textfield.setFilter(this._getFilterRegExp());\r\n      textfield.setValue(this.getNumberFormat().format(this.getValue()));\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      INTERVAL HANDLING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Checks if the spinner is in page mode and counts either the single\r\n     * or page Step up.\r\n     *\r\n     */\r\n    _countUp() {\r\n      if (this.__pageUpMode) {\r\n        var newValue = this.getValue() + this.getPageStep();\r\n      } else {\r\n        var newValue = this.getValue() + this.getSingleStep();\r\n      }\r\n\r\n      // handle the case where wrapping is enabled\r\n      if (this.getWrap()) {\r\n        if (newValue > this.getMaximum()) {\r\n          var diff = this.getMaximum() - newValue;\r\n          newValue = this.getMinimum() - diff - 1;\r\n        }\r\n      }\r\n\r\n      this.gotoValue(newValue);\r\n    },\r\n\r\n    /**\r\n     * Checks if the spinner is in page mode and counts either the single\r\n     * or page Step down.\r\n     *\r\n     */\r\n    _countDown() {\r\n      if (this.__pageDownMode) {\r\n        var newValue = this.getValue() - this.getPageStep();\r\n      } else {\r\n        var newValue = this.getValue() - this.getSingleStep();\r\n      }\r\n\r\n      // handle the case where wrapping is enabled\r\n      if (this.getWrap()) {\r\n        if (newValue < this.getMinimum()) {\r\n          var diff = this.getMinimum() + newValue;\r\n          newValue = this.getMaximum() + diff + 1;\r\n        }\r\n      }\r\n\r\n      this.gotoValue(newValue);\r\n    },\r\n\r\n    /**\r\n     * Normalizes the incoming value to be in the valid range and\r\n     * applies it to the {@link #value} afterwards.\r\n     *\r\n     * @param value {Number} Any number\r\n     * @return {Number} The normalized number\r\n     */\r\n    gotoValue(value) {\r\n      return this.setValue(\r\n        Math.min(this.getMaximum(), Math.max(this.getMinimum(), value))\r\n      );\r\n    },\r\n\r\n    // overridden\r\n    focus() {\r\n      super.focus();\r\n      this.getChildControl(\"textfield\").getFocusElement().focus();\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    var nf = this.getNumberFormat();\r\n    if (nf) {\r\n      nf.removeListener(\"changeNumberFormat\", this._onChangeNumberFormat, this);\r\n    }\r\n\r\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n      qx.locale.Manager.getInstance().removeListener(\r\n        \"changeLocale\",\r\n        this._onChangeLocale,\r\n        this\r\n      );\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}