{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "implement",
    "form",
    "INumberForm",
    "IRange",
    "IForm",
    "include",
    "MContentPadding",
    "MForm",
    "construct",
    "min",
    "value",
    "max",
    "layout",
    "Grid",
    "setColumnFlex",
    "setRowFlex",
    "_setLayout",
    "addListener",
    "_onKeyDown",
    "_onKeyUp",
    "_onRoll",
    "locale",
    "Manager",
    "getInstance",
    "_onChangeLocale",
    "textField",
    "_createChildControl",
    "setMinimum",
    "setMaximum",
    "undefined",
    "setValue",
    "initValue",
    "e",
    "fireNonBubblingEvent",
    "event",
    "type",
    "Focus",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "singleStep",
    "check",
    "pageStep",
    "minimum",
    "apply",
    "nullable",
    "maximum",
    "wrap",
    "editable",
    "numberFormat",
    "allowShrinkY",
    "members",
    "__lastValidValue",
    "__pageUpMode",
    "__pageDownMode",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "TextField",
    "setFilter",
    "_getFilterRegExp",
    "addState",
    "setWidth",
    "setFocusable",
    "_onTextChange",
    "_add",
    "column",
    "row",
    "rowSpan",
    "RepeatButton",
    "_countUp",
    "_countDown",
    "decimalSeparator",
    "groupSeparator",
    "getNumberFormat",
    "getLocale",
    "Number",
    "getDecimalSeparator",
    "getGroupSeparator",
    "prefix",
    "postfix",
    "getPrefix",
    "getPostfix",
    "filterRegExp",
    "RegExp",
    "lang",
    "String",
    "escapeRegexpChars",
    "_forwardStates",
    "focused",
    "invalid",
    "tabFocus",
    "field",
    "getChildControl",
    "getFocusElement",
    "focus",
    "selectAllText",
    "_applyMinimum",
    "old",
    "getMaximum",
    "getValue",
    "_updateButtons",
    "_applyMaximum",
    "getMinimum",
    "_applyEnabled",
    "_checkValue",
    "_applyValue",
    "format",
    "_applyEditable",
    "setReadOnly",
    "_applyWrap",
    "_applyNumberFormat",
    "removeListener",
    "_onChangeNumberFormat",
    "_getContentPaddingTarget",
    "upButton",
    "downButton",
    "getEnabled",
    "setEnabled",
    "getWrap",
    "getKeyIdentifier",
    "Data",
    "press",
    "stopPropagation",
    "preventDefault",
    "release",
    "getPointerType",
    "delta",
    "getDelta",
    "y",
    "stop",
    "parse",
    "ex",
    "parseFloat",
    "isNaN",
    "ev",
    "setNumberFormat",
    "textfield",
    "newValue",
    "getPageStep",
    "getSingleStep",
    "diff",
    "gotoValue",
    "Math",
    "destruct",
    "nf",
    "Spinner"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Spinner.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Martin Wittemann (martinwittemann)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A *spinner* is a control that allows you to adjust a numerical value,\n * typically within an allowed range. An obvious example would be to specify the\n * month of a year as a number in the range 1 - 12.\n *\n * To do so, a spinner encompasses a field to display the current value (a\n * textfield) and controls such as up and down buttons to change that value. The\n * current value can also be changed by editing the display field directly, or\n * using mouse wheel and cursor keys.\n *\n * An optional {@link #numberFormat} property allows you to control the format of\n * how a value can be entered and will be displayed.\n *\n * A brief, but non-trivial example:\n *\n * <pre class='javascript'>\n * var s = new qx.ui.form.Spinner();\n * s.set({\n *   maximum: 3000,\n *   minimum: -3000\n * });\n * var nf = new qx.util.format.NumberFormat();\n * nf.setMaximumFractionDigits(2);\n * s.setNumberFormat(nf);\n * </pre>\n *\n * A spinner instance without any further properties specified in the\n * constructor or a subsequent *set* command will appear with default\n * values and behaviour.\n *\n * @childControl textfield {qx.ui.form.TextField} holds the current value of the spinner\n * @childControl upbutton {qx.ui.form.Button} button to increase the value\n * @childControl downbutton {qx.ui.form.Button} button to decrease the value\n *\n */\nqx.Class.define(\"qx.ui.form.Spinner\", {\n  extend: qx.ui.core.Widget,\n  implement: [qx.ui.form.INumberForm, qx.ui.form.IRange, qx.ui.form.IForm],\n\n  include: [qx.ui.core.MContentPadding, qx.ui.form.MForm],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param min {Number} Minimum value\n   * @param value {Number} Current value\n   * @param max {Number} Maximum value\n   */\n  construct(min, value, max) {\n    super();\n\n    // MAIN LAYOUT\n    var layout = new qx.ui.layout.Grid();\n    layout.setColumnFlex(0, 1);\n    layout.setRowFlex(0, 1);\n    layout.setRowFlex(1, 1);\n    this._setLayout(layout);\n\n    // EVENTS\n    this.addListener(\"keydown\", this._onKeyDown, this);\n    this.addListener(\"keyup\", this._onKeyUp, this);\n    this.addListener(\"roll\", this._onRoll, this);\n\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\n        \"changeLocale\",\n        this._onChangeLocale,\n        this\n      );\n    }\n\n    // CREATE CONTROLS\n    var textField = this._createChildControl(\"textfield\");\n    this._createChildControl(\"upbutton\");\n    this._createChildControl(\"downbutton\");\n\n    // INITIALIZATION\n    if (min != null) {\n      this.setMinimum(min);\n    }\n\n    if (max != null) {\n      this.setMaximum(max);\n    }\n\n    if (value !== undefined) {\n      this.setValue(value);\n    } else {\n      this.initValue();\n    }\n\n    // forward the focusin and focusout events to the textfield. The textfield\n    // is not focusable so the events need to be forwarded manually.\n    this.addListener(\"focusin\", e => {\n      textField.fireNonBubblingEvent(\"focusin\", qx.event.type.Focus);\n    });\n\n    this.addListener(\"focusout\", e => {\n      textField.fireNonBubblingEvent(\"focusout\", qx.event.type.Focus);\n    });\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"spinner\"\n    },\n\n    // overridden\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    /** The amount to increment on each event (keypress or pointerdown) */\n    singleStep: {\n      check: \"Number\",\n      init: 1\n    },\n\n    /** The amount to increment on each pageup/pagedown keypress */\n    pageStep: {\n      check: \"Number\",\n      init: 10\n    },\n\n    /** minimal value of the Range object */\n    minimum: {\n      check: \"Number\",\n      apply: \"_applyMinimum\",\n      init: 0,\n      event: \"changeMinimum\"\n    },\n\n    /** The value of the spinner. */\n    value: {\n      check: \"this._checkValue(value)\",\n      nullable: true,\n      apply: \"_applyValue\",\n      init: 0,\n      event: \"changeValue\"\n    },\n\n    /** maximal value of the Range object */\n    maximum: {\n      check: \"Number\",\n      apply: \"_applyMaximum\",\n      init: 100,\n      event: \"changeMaximum\"\n    },\n\n    /** whether the value should wrap around */\n    wrap: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyWrap\"\n    },\n\n    /** Controls whether the textfield of the spinner is editable or not */\n    editable: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyEditable\"\n    },\n\n    /** Controls the display of the number in the textfield */\n    numberFormat: {\n      check: \"qx.util.format.NumberFormat\",\n      apply: \"_applyNumberFormat\",\n      nullable: true\n    },\n\n    // overridden\n    allowShrinkY: {\n      refine: true,\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** Saved last value in case invalid text is entered */\n    __lastValidValue: null,\n\n    /** Whether the page-up button has been pressed */\n    __pageUpMode: false,\n\n    /** Whether the page-down button has been pressed */\n    __pageDownMode: false,\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET INTERNALS\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"textfield\":\n          control = new qx.ui.form.TextField();\n          control.setFilter(this._getFilterRegExp());\n          control.addState(\"inner\");\n          control.setWidth(40);\n          control.setFocusable(false);\n          control.addListener(\"changeValue\", this._onTextChange, this);\n\n          this._add(control, { column: 0, row: 0, rowSpan: 2 });\n          break;\n\n        case \"upbutton\":\n          control = new qx.ui.form.RepeatButton();\n          control.addState(\"inner\");\n          control.setFocusable(false);\n          control.addListener(\"execute\", this._countUp, this);\n          this._add(control, { column: 1, row: 0 });\n          break;\n\n        case \"downbutton\":\n          control = new qx.ui.form.RepeatButton();\n          control.addState(\"inner\");\n          control.setFocusable(false);\n          control.addListener(\"execute\", this._countDown, this);\n          this._add(control, { column: 1, row: 1 });\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    /**\n     * Returns the regular expression used as the text field's filter\n     *\n     * @return {RegExp} The filter RegExp.\n     */\n    _getFilterRegExp() {\n      var decimalSeparator, groupSeparator, locale;\n\n      if (this.getNumberFormat() !== null) {\n        locale = this.getNumberFormat().getLocale();\n      } else {\n        locale = qx.locale.Manager.getInstance().getLocale();\n      }\n\n      decimalSeparator = qx.locale.Number.getDecimalSeparator(locale);\n      groupSeparator = qx.locale.Number.getGroupSeparator(locale);\n\n      var prefix = \"\";\n      var postfix = \"\";\n      if (this.getNumberFormat() !== null) {\n        prefix = this.getNumberFormat().getPrefix() || \"\";\n        postfix = this.getNumberFormat().getPostfix() || \"\";\n      }\n\n      var filterRegExp = new RegExp(\n        \"[0-9\" +\n          qx.lang.String.escapeRegexpChars(decimalSeparator) +\n          qx.lang.String.escapeRegexpChars(groupSeparator) +\n          qx.lang.String.escapeRegexpChars(prefix) +\n          qx.lang.String.escapeRegexpChars(postfix) +\n          \"-]\"\n      );\n\n      return filterRegExp;\n    },\n\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates: {\n      focused: true,\n      invalid: true\n    },\n\n    // overridden\n    tabFocus() {\n      var field = this.getChildControl(\"textfield\");\n\n      field.getFocusElement().focus();\n      field.selectAllText();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply routine for the minimum property.\n     *\n     * It sets the value of the spinner to the maximum of the current spinner\n     * value and the given min property value.\n     *\n     * @param value {Number} The new value of the min property\n     * @param old {Number} The old value of the min property\n     */\n    _applyMinimum(value, old) {\n      if (this.getMaximum() < value) {\n        this.setMaximum(value);\n      }\n\n      if (this.getValue() < value) {\n        this.setValue(value);\n      } else {\n        this._updateButtons();\n      }\n    },\n\n    /**\n     * Apply routine for the maximum property.\n     *\n     * It sets the value of the spinner to the minimum of the current spinner\n     * value and the given max property value.\n     *\n     * @param value {Number} The new value of the max property\n     * @param old {Number} The old value of the max property\n     */\n    _applyMaximum(value, old) {\n      if (this.getMinimum() > value) {\n        this.setMinimum(value);\n      }\n\n      if (this.getValue() > value) {\n        this.setValue(value);\n      } else {\n        this._updateButtons();\n      }\n    },\n\n    // overridden\n    _applyEnabled(value, old) {\n      super._applyEnabled(value, old);\n\n      this._updateButtons();\n    },\n\n    /**\n     * Check whether the value being applied is allowed.\n     *\n     * If you override this to change the allowed type, you will also\n     * want to override {@link #_applyValue}, {@link #_applyMinimum},\n     * {@link #_applyMaximum}, {@link #_countUp}, {@link #_countDown}, and\n     * {@link #_onTextChange} methods as those cater specifically to numeric\n     * values.\n     *\n     * @param value {var}\n     *   The value being set\n     * @return {Boolean}\n     *   <i>true</i> if the value is allowed;\n     *   <i>false> otherwise.\n     */\n    _checkValue(value) {\n      return (\n        typeof value === \"number\" &&\n        value >= this.getMinimum() &&\n        value <= this.getMaximum()\n      );\n    },\n\n    /**\n     * Apply routine for the value property.\n     *\n     * It disables / enables the buttons and handles the wrap around.\n     *\n     * @param value {Number} The new value of the spinner\n     * @param old {Number} The former value of the spinner\n     */\n    _applyValue(value, old) {\n      var textField = this.getChildControl(\"textfield\");\n\n      this._updateButtons();\n\n      // save the last valid value of the spinner\n      this.__lastValidValue = value;\n\n      // write the value of the spinner to the textfield\n      if (value !== null) {\n        if (this.getNumberFormat()) {\n          textField.setValue(this.getNumberFormat().format(value));\n        } else {\n          textField.setValue(value + \"\");\n        }\n      } else {\n        textField.setValue(\"\");\n      }\n    },\n\n    /**\n     * Apply routine for the editable property.<br/>\n     * It sets the textfield of the spinner to not read only.\n     *\n     * @param value {Boolean} The new value of the editable property\n     * @param old {Boolean} The former value of the editable property\n     */\n    _applyEditable(value, old) {\n      var textField = this.getChildControl(\"textfield\");\n\n      if (textField) {\n        textField.setReadOnly(!value);\n      }\n    },\n\n    /**\n     * Apply routine for the wrap property.<br/>\n     * Enables all buttons if the wrapping is enabled.\n     *\n     * @param value {Boolean} The new value of the wrap property\n     * @param old {Boolean} The former value of the wrap property\n     */\n    _applyWrap(value, old) {\n      this._updateButtons();\n    },\n\n    /**\n     * Apply routine for the numberFormat property.<br/>\n     * When setting a number format, the display of the\n     * value in the text-field will be changed immediately.\n     *\n     * @param value {Boolean} The new value of the numberFormat property\n     * @param old {Boolean} The former value of the numberFormat property\n     */\n    _applyNumberFormat(value, old) {\n      var textField = this.getChildControl(\"textfield\");\n      textField.setFilter(this._getFilterRegExp());\n\n      if (old) {\n        old.removeListener(\n          \"changeNumberFormat\",\n          this._onChangeNumberFormat,\n          this\n        );\n      }\n\n      var numberFormat = this.getNumberFormat();\n      if (numberFormat !== null) {\n        numberFormat.addListener(\n          \"changeNumberFormat\",\n          this._onChangeNumberFormat,\n          this\n        );\n      }\n\n      this._applyValue(this.__lastValidValue, undefined);\n    },\n\n    /**\n     * Returns the element, to which the content padding should be applied.\n     *\n     * @return {qx.ui.core.Widget} The content padding target.\n     */\n    _getContentPaddingTarget() {\n      return this.getChildControl(\"textfield\");\n    },\n\n    /**\n     * Checks the min and max values, disables / enables the\n     * buttons and handles the wrap around.\n     */\n    _updateButtons() {\n      var upButton = this.getChildControl(\"upbutton\");\n      var downButton = this.getChildControl(\"downbutton\");\n      var value = this.getValue();\n\n      if (!this.getEnabled()) {\n        // If Spinner is disabled -> disable buttons\n        upButton.setEnabled(false);\n        downButton.setEnabled(false);\n      } else {\n        if (this.getWrap()) {\n          // If wraped -> always enable buttons\n          upButton.setEnabled(true);\n          downButton.setEnabled(true);\n        } else {\n          // check max value\n          if (value !== null && value < this.getMaximum()) {\n            upButton.setEnabled(true);\n          } else {\n            upButton.setEnabled(false);\n          }\n\n          // check min value\n          if (value !== null && value > this.getMinimum()) {\n            downButton.setEnabled(true);\n          } else {\n            downButton.setEnabled(false);\n          }\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      KEY EVENT-HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Callback for \"keyDown\" event.<br/>\n     * Controls the interval mode (\"single\" or \"page\")\n     * and the interval increase by detecting \"Up\"/\"Down\"\n     * and \"PageUp\"/\"PageDown\" keys.<br/>\n     * The corresponding button will be pressed.\n     *\n     * @param e {qx.event.type.KeySequence} keyDown event\n     */\n    _onKeyDown(e) {\n      switch (e.getKeyIdentifier()) {\n        case \"PageUp\":\n          // mark that the spinner is in page mode and process further\n          this.__pageUpMode = true;\n          this.getChildControl(\"textfield\").fireNonBubblingEvent(\n            \"changeValue\",\n            qx.event.type.Data\n          );\n\n          this.getChildControl(\"upbutton\").press();\n          break;\n\n        case \"Up\":\n          this.getChildControl(\"textfield\").fireNonBubblingEvent(\n            \"changeValue\",\n            qx.event.type.Data\n          );\n\n          this.getChildControl(\"upbutton\").press();\n          break;\n\n        case \"PageDown\":\n          // mark that the spinner is in page mode and process further\n          this.__pageDownMode = true;\n          this.getChildControl(\"textfield\").fireNonBubblingEvent(\n            \"changeValue\",\n            qx.event.type.Data\n          );\n\n          this.getChildControl(\"downbutton\").press();\n          break;\n\n        case \"Down\":\n          this.getChildControl(\"textfield\").fireNonBubblingEvent(\n            \"changeValue\",\n            qx.event.type.Data\n          );\n\n          this.getChildControl(\"downbutton\").press();\n          break;\n\n        default:\n          // Do not stop unused events\n          return;\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    },\n\n    /**\n     * Callback for \"keyUp\" event.<br/>\n     * Detecting \"Up\"/\"Down\" and \"PageUp\"/\"PageDown\" keys.<br/>\n     * Releases the button and disabled the page mode, if necessary.\n     *\n     * @param e {qx.event.type.KeySequence} keyUp event\n     */\n    _onKeyUp(e) {\n      switch (e.getKeyIdentifier()) {\n        case \"PageUp\":\n          this.getChildControl(\"upbutton\").release();\n          this.__pageUpMode = false;\n          break;\n\n        case \"Up\":\n          this.getChildControl(\"upbutton\").release();\n          break;\n\n        case \"PageDown\":\n          this.getChildControl(\"downbutton\").release();\n          this.__pageDownMode = false;\n          break;\n\n        case \"Down\":\n          this.getChildControl(\"downbutton\").release();\n          break;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      OTHER EVENT HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Callback method for the \"roll\" event.<br/>\n     * Increments or decrements the value of the spinner.\n     *\n     * @param e {qx.event.type.Roll} roll event\n     */\n    _onRoll(e) {\n      // only wheel\n      if (e.getPointerType() != \"wheel\") {\n        return;\n      }\n      var delta = e.getDelta().y;\n      if (delta < 0) {\n        this._countUp();\n      } else if (delta > 0) {\n        this._countDown();\n      }\n\n      e.stop();\n    },\n\n    /**\n     * Callback method for the \"change\" event of the textfield.\n     *\n     * @param e {qx.event.type.Event} text change event or blur event\n     */\n    _onTextChange(e) {\n      var textField = this.getChildControl(\"textfield\");\n      var value;\n\n      // if a number format is set\n      if (this.getNumberFormat()) {\n        // try to parse the current number using the number format\n        try {\n          value = this.getNumberFormat().parse(textField.getValue());\n        } catch (ex) {\n          // otherwise, process further\n        }\n      }\n\n      if (value === undefined) {\n        // try to parse the number as a float\n        value = parseFloat(textField.getValue());\n      }\n\n      // if the result is a number\n      if (!isNaN(value)) {\n        // Fix value if invalid\n        if (value > this.getMaximum()) {\n          value = this.getMaximum();\n        } else if (value < this.getMinimum()) {\n          value = this.getMinimum();\n        }\n\n        // If value is the same than before, call directly _applyValue()\n        if (value === this.__lastValidValue) {\n          this._applyValue(this.__lastValidValue);\n        } else {\n          this.setValue(value);\n        }\n      } else {\n        // otherwise, reset the last valid value\n        this._applyValue(this.__lastValidValue, undefined);\n      }\n    },\n\n    /**\n     * Callback method for the locale Manager's \"changeLocale\" event.\n     *\n     * @param ev {qx.event.type.Event} locale change event\n     */\n\n    _onChangeLocale(ev) {\n      if (this.getNumberFormat() !== null) {\n        this.setNumberFormat(this.getNumberFormat());\n        var textfield = this.getChildControl(\"textfield\");\n        textfield.setFilter(this._getFilterRegExp());\n        textfield.setValue(this.getNumberFormat().format(this.getValue()));\n      }\n    },\n\n    /**\n     * Callback method for the number format's \"changeNumberFormat\" event.\n     *\n     * @param ev {qx.event.type.Event} number format change event\n     */\n    _onChangeNumberFormat(ev) {\n      var textfield = this.getChildControl(\"textfield\");\n      textfield.setFilter(this._getFilterRegExp());\n      textfield.setValue(this.getNumberFormat().format(this.getValue()));\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERVAL HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Checks if the spinner is in page mode and counts either the single\n     * or page Step up.\n     *\n     */\n    _countUp() {\n      if (this.__pageUpMode) {\n        var newValue = this.getValue() + this.getPageStep();\n      } else {\n        var newValue = this.getValue() + this.getSingleStep();\n      }\n\n      // handle the case where wrapping is enabled\n      if (this.getWrap()) {\n        if (newValue > this.getMaximum()) {\n          var diff = this.getMaximum() - newValue;\n          newValue = this.getMinimum() - diff - 1;\n        }\n      }\n\n      this.gotoValue(newValue);\n    },\n\n    /**\n     * Checks if the spinner is in page mode and counts either the single\n     * or page Step down.\n     *\n     */\n    _countDown() {\n      if (this.__pageDownMode) {\n        var newValue = this.getValue() - this.getPageStep();\n      } else {\n        var newValue = this.getValue() - this.getSingleStep();\n      }\n\n      // handle the case where wrapping is enabled\n      if (this.getWrap()) {\n        if (newValue < this.getMinimum()) {\n          var diff = this.getMinimum() + newValue;\n          newValue = this.getMaximum() + diff + 1;\n        }\n      }\n\n      this.gotoValue(newValue);\n    },\n\n    /**\n     * Normalizes the incoming value to be in the valid range and\n     * applies it to the {@link #value} afterwards.\n     *\n     * @param value {Number} Any number\n     * @return {Number} The normalized number\n     */\n    gotoValue(value) {\n      return this.setValue(\n        Math.min(this.getMaximum(), Math.max(this.getMinimum(), value))\n      );\n    },\n\n    // overridden\n    focus() {\n      super.focus();\n      this.getChildControl(\"textfield\").getFocusElement().focus();\n    }\n  },\n\n  destruct() {\n    var nf = this.getNumberFormat();\n    if (nf) {\n      nf.removeListener(\"changeNumberFormat\", this._onChangeNumberFormat, this);\n    }\n\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\n        \"changeLocale\",\n        this._onChangeLocale,\n        this\n      );\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}