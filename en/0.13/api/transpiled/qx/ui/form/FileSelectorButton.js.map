{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "Button",
    "statics",
    "_fileInputElementIdCounter",
    "events",
    "changeFileSelection",
    "properties",
    "accept",
    "nullable",
    "check",
    "apply",
    "capture",
    "multiple",
    "directoriesOnly",
    "members",
    "__inputObject",
    "_applyAttribute",
    "value",
    "old",
    "attr",
    "setAttribute",
    "_createContentElement",
    "id",
    "FileSelectorButton",
    "input",
    "html",
    "Input",
    "label",
    "Element",
    "addListenerOnce",
    "e",
    "add",
    "inputEl",
    "getDomElement",
    "setVisible",
    "addEventListener",
    "fireDataEvent",
    "files"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/FileSelectorButton.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo\n\n   https://qooxdoo.org\n\n   Copyright:\n     2022 OETIKER+PARTNER AG\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tobias Oetiker (oetiker)\n\n************************************************************************ */\n\n/**\n * The FileSelectorButton opens a window and lets the user pick one or several\n * files from the local filesystem. A FileList is returned which allows access\n * to the content of the selected files from javascript. The file(s) can now be\n *  processed in javascript, or it/they can be uploaded to a server.\n *\n * *Example*\n *\n * Post the content of the file to the server.\n *\n * ```javascript\n * let button = new qx.ui.form.FileSelectorButton(\"Select File\");\n * button.addListener('changeFileSelection',function(e){\n * let fileList = e.getData();\n *   let form = new FormData();\n *   form.append('file',fileList[0]);\n *   let req = new qx.io.request.Xhr(\"upload\",'POST').set({\n *     requestData: form\n *   });\n *   req.addListener('success',(e) => {\n *     let response = req.getResponse();\n *   });\n * });\n * ```\n *\n * Process the file directly in javascript using the FileReader API.\n *\n * ```javascript\n * let button = new qx.ui.form.FileSelectorButton(\"Select File\");\n * button.addListener('changeFileSelection',function(e){\n *   let fileList = e.getData();\n *   const reader = new FileReader();\n *   reader.addEventListener('load', () => {\n *     let response = reader.result;\n *     console.log(\"The first 4 chrs are: \" + response);\n *   });\n *   const file = fileList[0];\n *   reader.readAsText(file.slice(0,4));\n * });\n * ```\n *\n * [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications)\n */\n\nqx.Class.define(\"qx.ui.form.FileSelectorButton\", {\n  extend: qx.ui.form.Button,\n\n  statics: {\n    _fileInputElementIdCounter: 0\n  },\n\n  events: {\n    /**\n     * The event is fired when the file selection changes.\n     *\n     * The method {@link qx.event.type.Data#getData} returns the\n     * current [fileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\n     */\n    changeFileSelection: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /**\n     * What type of files should be offered in the fileselection dialog.\n     * Use a comma separated list of [Unique file type specifiers](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers). If you dont set anything, all files\n     * are allowed.\n     *\n     * *Example*\n     *\n     * `.doc,.docx,application/msword`\n     */\n    accept: {\n      nullable: true,\n      check: \"String\",\n      apply: \"_applyAttribute\"\n    },\n\n    /**\n     * Specify that the camera should be used for getting the \"file\". The\n     * value defines which camera should be used for capturing images.\n     * `user` indicates the user-facing camera.\n     * `environment` indicates the camera facing away from the user.\n     */\n    capture: {\n      nullable: true,\n      check: [\"user\", \"environment\"],\n      apply: \"_applyAttribute\"\n    },\n\n    /**\n     * Set to \"true\" if you want to allow the selection of multiple files.\n     */\n    multiple: {\n      nullable: true,\n      check: \"Boolean\",\n      apply: \"_applyAttribute\"\n    },\n\n    /**\n     * If present, indicates that only directories should be available for\n     * selection.\n     */\n    directoriesOnly: {\n      nullable: true,\n      check: \"Boolean\",\n      apply: \"_applyAttribute\"\n    }\n  },\n\n  members: {\n    __inputObject: null,\n\n    _applyAttribute(value, old, attr) {\n      if (attr === \"directoriesOnly\") {\n        // while the name of the attribute indicates that this only\n        // works for webkit browsers, this is not the case. These\n        // days the attribute is supported by\n        // [everyone](https://caniuse.com/?search=webkitdirectory).\n        attr = \"webkitdirectory\";\n      }\n      this.__inputObject.setAttribute(attr, value);\n    },\n\n    _createContentElement() {\n      let id = \"qxFileSelector_\" + (++qx.ui.form.FileSelectorButton._fileInputElementIdCounter);\n      let input = (this.__inputObject = new qx.html.Input(\n        \"file\",\n        null,\n        { id: id }\n      ));\n\n      let label = new qx.html.Element(\"label\", {}, { for: id });\n      label.addListenerOnce(\"appear\", e => {\n        label.add(input);\n      });\n\n      input.addListenerOnce(\"appear\", e => {\n        let inputEl = input.getDomElement();\n        // since qx.html.Node does not even create the\n        // domNode if it is not set to visible initially\n        // we have to quickly hide it after creation.\n        input.setVisible(false);\n        inputEl.addEventListener(\"change\", e => {\n          this.fireDataEvent(\"changeFileSelection\", inputEl.files);\n          inputEl.value = \"\";\n        });\n      });\n      return label;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}