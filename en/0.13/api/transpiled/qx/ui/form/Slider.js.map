{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "implement",
    "form",
    "IForm",
    "INumberForm",
    "IRange",
    "include",
    "MForm",
    "construct",
    "orientation",
    "_setLayout",
    "layout",
    "Canvas",
    "getContentElement",
    "setAttribute",
    "addListener",
    "_onKeyPress",
    "_onRoll",
    "_onPointerDown",
    "_onPointerUp",
    "_onUpdate",
    "_onStopEvent",
    "setOrientation",
    "initOrientation",
    "events",
    "changeValue",
    "slideAnimationEnd",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "check",
    "apply",
    "value",
    "nullable",
    "minimum",
    "event",
    "maximum",
    "singleStep",
    "pageStep",
    "knobFactor",
    "members",
    "__sliderLocation",
    "__knobLocation",
    "__knobSize",
    "__dragMode",
    "__dragOffset",
    "__trackingMode",
    "__trackingDirection",
    "__trackingEnd",
    "__timer",
    "__dragTimer",
    "__lastValueEvent",
    "__dragValue",
    "__scrollAnimationframe",
    "_forwardStates",
    "invalid",
    "renderLayout",
    "left",
    "top",
    "width",
    "height",
    "_updateKnobPosition",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "_onPointerOver",
    "_onPointerOut",
    "_add",
    "e",
    "addState",
    "removeState",
    "getPointerType",
    "axis",
    "getOrientation",
    "delta",
    "getDelta",
    "direction",
    "slideBy",
    "getSingleStep",
    "stop",
    "isHorizontal",
    "backward",
    "forward",
    "getKeyIdentifier",
    "slideForward",
    "slideBack",
    "slidePageForward",
    "slidePageBack",
    "slideToBegin",
    "slideToEnd",
    "__isHorizontal",
    "knob",
    "getChildControl",
    "locationProperty",
    "cursorLocation",
    "getDocumentLeft",
    "getDocumentTop",
    "decorator",
    "getDecorator",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "resolve",
    "decoratorPadding",
    "getInsets",
    "padding",
    "getPaddingLeft",
    "getPaddingTop",
    "sliderLocation",
    "bom",
    "element",
    "Location",
    "get",
    "getDomElement",
    "knobLocation",
    "getTarget",
    "Timer",
    "_fireValue",
    "start",
    "__computeTrackingEnd",
    "_onInterval",
    "_onPointerMove",
    "capture",
    "stopPropagation",
    "releaseCapture",
    "getType",
    "deltaSlider",
    "deltaPosition",
    "positionSlider",
    "_valueToPosition",
    "getValue",
    "getBounds",
    "removeListener",
    "dragStop",
    "position",
    "slideTo",
    "_positionToValue",
    "getPageStep",
    "getMinimum",
    "getMaximum",
    "availSize",
    "getInnerSize",
    "knobSize",
    "sizeProperty",
    "_updateKnobSize",
    "__slidingSpace",
    "min",
    "max",
    "old",
    "step",
    "method",
    "Math",
    "avail",
    "percent",
    "range",
    "round",
    "_setKnobPosition",
    "dec",
    "content",
    "getPadding",
    "setStyle",
    "getKnobFactor",
    "setWidth",
    "setHeight",
    "duration",
    "offset",
    "stopSlideAnimation",
    "__animateTo",
    "updatePosition",
    "setValue",
    "__normalizeValue",
    "cancelSequence",
    "to",
    "from",
    "AnimationFrame",
    "on",
    "timePassed",
    "parseInt",
    "fireEvent",
    "startSequence",
    "_applyOrientation",
    "setLayoutProperties",
    "right",
    "bottom",
    "_applyKnobFactor",
    "resetWidth",
    "resetHeight",
    "_applyValue",
    "type",
    "Data",
    "resetValue",
    "tmp",
    "_applyMinimum",
    "_applyMaximum",
    "Slider"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Slider.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The Slider widget provides a vertical or horizontal slider.\n *\n * The Slider is the classic widget for controlling a bounded value.\n * It lets the user move a slider handle along a horizontal or vertical\n * groove and translates the handle's position into an integer value\n * within the defined range.\n *\n * The Slider has very few of its own functions.\n * The most useful functions are slideTo() to set the slider directly to some\n * value; setSingleStep(), setPageStep() to set the steps; and setMinimum()\n * and setMaximum() to define the range of the slider.\n *\n * A slider accepts focus on Tab and provides both a mouse wheel and\n * a keyboard interface. The keyboard interface is the following:\n *\n * * Left/Right move a horizontal slider by one single step.\n * * Up/Down move a vertical slider by one single step.\n * * PageUp moves up one page.\n * * PageDown moves down one page.\n * * Home moves to the start (minimum).\n * * End moves to the end (maximum).\n *\n * Here are the main properties of the class:\n *\n * # <code>value</code>: The bounded integer that {@link qx.ui.form.INumberForm}\n * maintains.\n * # <code>minimum</code>: The lowest possible value.\n * # <code>maximum</code>: The highest possible value.\n * # <code>singleStep</code>: The smaller of two natural steps that an abstract\n * sliders provides and typically corresponds to the user pressing an arrow key.\n * # <code>pageStep</code>: The larger of two natural steps that an abstract\n * slider provides and typically corresponds to the user pressing PageUp or\n * PageDown.\n *\n * @childControl knob {qx.ui.core.Widget} knob to set the value of the slider\n */\nqx.Class.define(\"qx.ui.form.Slider\", {\n  extend: qx.ui.core.Widget,\n  implement: [qx.ui.form.IForm, qx.ui.form.INumberForm, qx.ui.form.IRange],\n\n  include: [qx.ui.form.MForm],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param orientation {String?\"horizontal\"} Configure the\n   * {@link #orientation} property\n   */\n  construct(orientation) {\n    super();\n\n    // Force canvas layout\n    this._setLayout(new qx.ui.layout.Canvas());\n\n    // ARIA attrs\n    this.getContentElement().setAttribute(\"role\", \"slider\");\n\n    // Add listeners\n    this.addListener(\"keypress\", this._onKeyPress, this);\n    this.addListener(\"roll\", this._onRoll, this);\n    this.addListener(\"pointerdown\", this._onPointerDown, this);\n    this.addListener(\"pointerup\", this._onPointerUp, this);\n    this.addListener(\"losecapture\", this._onPointerUp, this);\n    this.addListener(\"resize\", this._onUpdate, this);\n\n    // Stop events\n    this.addListener(\"contextmenu\", this._onStopEvent, this);\n    this.addListener(\"tap\", this._onStopEvent, this);\n    this.addListener(\"dbltap\", this._onStopEvent, this);\n\n    // Initialize orientation\n    if (orientation != null) {\n      this.setOrientation(orientation);\n    } else {\n      this.initOrientation();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Change event for the value.\n     */\n    changeValue: \"qx.event.type.Data\",\n\n    /** Fired as soon as the slide animation ended. */\n    slideAnimationEnd: \"qx.event.type.Event\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"slider\"\n    },\n\n    // overridden\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    /** Whether the slider is horizontal or vertical. */\n    orientation: {\n      check: [\"horizontal\", \"vertical\"],\n      init: \"horizontal\",\n      apply: \"_applyOrientation\"\n    },\n\n    /**\n     * The current slider value.\n     *\n     * Strictly validates according to {@link #minimum} and {@link #maximum}.\n     * Do not apply any value correction to the incoming value. If you depend\n     * on this, please use {@link #slideTo} instead.\n     */\n    value: {\n      check:\n        \"typeof value==='number'&&value>=this.getMinimum()&&value<=this.getMaximum()\",\n      init: 0,\n      apply: \"_applyValue\",\n      nullable: true\n    },\n\n    /**\n     * The minimum slider value (may be negative). This value must be smaller\n     * than {@link #maximum}.\n     */\n    minimum: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMinimum\",\n      event: \"changeMinimum\"\n    },\n\n    /**\n     * The maximum slider value (may be negative). This value must be larger\n     * than {@link #minimum}.\n     */\n    maximum: {\n      check: \"Integer\",\n      init: 100,\n      apply: \"_applyMaximum\",\n      event: \"changeMaximum\"\n    },\n\n    /**\n     * The amount to increment on each event. Typically corresponds\n     * to the user pressing an arrow key.\n     */\n    singleStep: {\n      check: \"Integer\",\n      init: 1\n    },\n\n    /**\n     * The amount to increment on each event. Typically corresponds\n     * to the user pressing <code>PageUp</code> or <code>PageDown</code>.\n     */\n    pageStep: {\n      check: \"Integer\",\n      init: 10\n    },\n\n    /**\n     * Factor to apply to the width/height of the knob in relation\n     * to the dimension of the underlying area.\n     */\n    knobFactor: {\n      check: \"Number\",\n      apply: \"_applyKnobFactor\",\n      nullable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __sliderLocation: null,\n    __knobLocation: null,\n    __knobSize: null,\n    __dragMode: null,\n    __dragOffset: null,\n    __trackingMode: null,\n    __trackingDirection: null,\n    __trackingEnd: null,\n    __timer: null,\n\n    // event delay stuff during drag\n    __dragTimer: null,\n    __lastValueEvent: null,\n    __dragValue: null,\n\n    __scrollAnimationframe: null,\n\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates: {\n      invalid: true\n    },\n\n    // overridden\n    renderLayout(left, top, width, height) {\n      super.renderLayout(left, top, width, height);\n      // make sure the layout engine does not override the knob position\n      this._updateKnobPosition();\n    },\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"knob\":\n          control = new qx.ui.core.Widget();\n\n          control.addListener(\"resize\", this._onUpdate, this);\n          control.addListener(\"pointerover\", this._onPointerOver, this);\n          control.addListener(\"pointerout\", this._onPointerOut, this);\n          this._add(control);\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event handler for pointerover events at the knob child control.\n     *\n     * Adds the 'hovered' state\n     *\n     * @param e {qx.event.type.Pointer} Incoming pointer event\n     */\n    _onPointerOver(e) {\n      this.addState(\"hovered\");\n    },\n\n    /**\n     * Event handler for pointerout events at the knob child control.\n     *\n     * Removes the 'hovered' state\n     *\n     * @param e {qx.event.type.Pointer} Incoming pointer event\n     */\n    _onPointerOut(e) {\n      this.removeState(\"hovered\");\n    },\n\n    /**\n     * Listener of roll event\n     *\n     * @param e {qx.event.type.Roll} Incoming event object\n     */\n    _onRoll(e) {\n      // only wheel\n      if (e.getPointerType() != \"wheel\") {\n        return;\n      }\n\n      var axis = this.getOrientation() === \"horizontal\" ? \"x\" : \"y\";\n      var delta = e.getDelta()[axis];\n\n      var direction = delta > 0 ? 1 : delta < 0 ? -1 : 0;\n      this.slideBy(direction * this.getSingleStep());\n\n      e.stop();\n    },\n\n    /**\n     * Event handler for keypress events.\n     *\n     * Adds support for arrow keys, page up, page down, home and end keys.\n     *\n     * @param e {qx.event.type.KeySequence} Incoming keypress event\n     */\n    _onKeyPress(e) {\n      var isHorizontal = this.getOrientation() === \"horizontal\";\n      var backward = isHorizontal ? \"Left\" : \"Up\";\n      var forward = isHorizontal ? \"Right\" : \"Down\";\n\n      switch (e.getKeyIdentifier()) {\n        case forward:\n          this.slideForward();\n          break;\n\n        case backward:\n          this.slideBack();\n          break;\n\n        case \"PageDown\":\n          this.slidePageForward(100);\n          break;\n\n        case \"PageUp\":\n          this.slidePageBack(100);\n          break;\n\n        case \"Home\":\n          this.slideToBegin(200);\n          break;\n\n        case \"End\":\n          this.slideToEnd(200);\n          break;\n\n        default:\n          return;\n      }\n\n      // Stop processed events\n      e.stop();\n    },\n\n    /**\n     * Listener of pointerdown event. Initializes drag or tracking mode.\n     *\n     * @param e {qx.event.type.Pointer} Incoming event object\n     */\n    _onPointerDown(e) {\n      // this can happen if the user releases the button while dragging outside\n      // of the browser viewport\n      if (this.__dragMode) {\n        return;\n      }\n\n      var isHorizontal = this.__isHorizontal;\n      var knob = this.getChildControl(\"knob\");\n\n      var locationProperty = isHorizontal ? \"left\" : \"top\";\n\n      var cursorLocation = isHorizontal\n        ? e.getDocumentLeft()\n        : e.getDocumentTop();\n\n      var decorator = this.getDecorator();\n      decorator = qx.theme.manager.Decoration.getInstance().resolve(decorator);\n      if (isHorizontal) {\n        var decoratorPadding = decorator ? decorator.getInsets().left : 0;\n        var padding = (this.getPaddingLeft() || 0) + decoratorPadding;\n      } else {\n        var decoratorPadding = decorator ? decorator.getInsets().top : 0;\n        var padding = (this.getPaddingTop() || 0) + decoratorPadding;\n      }\n\n      var sliderLocation = (this.__sliderLocation = qx.bom.element.Location.get(\n        this.getContentElement().getDomElement()\n      )[locationProperty]);\n      sliderLocation += padding;\n\n      var knobLocation = (this.__knobLocation = qx.bom.element.Location.get(\n        knob.getContentElement().getDomElement()\n      )[locationProperty]);\n\n      if (e.getTarget() === knob) {\n        // Switch into drag mode\n        this.__dragMode = true;\n        if (!this.__dragTimer) {\n          // create a timer to fire delayed dragging events if dragging stops.\n          this.__dragTimer = new qx.event.Timer(100);\n          this.__dragTimer.addListener(\"interval\", this._fireValue, this);\n        }\n        this.__dragTimer.start();\n        // Compute dragOffset (includes both: inner position of the widget and\n        // cursor position on knob)\n        this.__dragOffset = cursorLocation + sliderLocation - knobLocation;\n\n        // add state\n        knob.addState(\"pressed\");\n      } else {\n        // Switch into tracking mode\n        this.__trackingMode = true;\n\n        // Detect tracking direction\n        this.__trackingDirection = cursorLocation <= knobLocation ? -1 : 1;\n\n        // Compute end value\n        this.__computeTrackingEnd(e);\n\n        // Directly call interval method once\n        this._onInterval();\n\n        // Initialize timer (when needed)\n        if (!this.__timer) {\n          this.__timer = new qx.event.Timer(100);\n          this.__timer.addListener(\"interval\", this._onInterval, this);\n        }\n\n        // Start timer\n        this.__timer.start();\n      }\n\n      // Register move listener\n      this.addListener(\"pointermove\", this._onPointerMove, this);\n\n      // Activate capturing\n      this.capture();\n\n      // Stop event\n      e.stopPropagation();\n    },\n\n    /**\n     * Listener of pointerup event. Used for cleanup of previously\n     * initialized modes.\n     *\n     * @param e {qx.event.type.Pointer} Incoming event object\n     */\n    _onPointerUp(e) {\n      if (this.__dragMode) {\n        // Release capture mode\n        this.releaseCapture();\n\n        // Cleanup status flags\n        delete this.__dragMode;\n\n        // as we come out of drag mode, make\n        // sure content gets synced\n        this.__dragTimer.stop();\n        this._fireValue();\n\n        delete this.__dragOffset;\n\n        // remove state\n        this.getChildControl(\"knob\").removeState(\"pressed\");\n\n        // it's necessary to check whether the cursor is over the knob widget to be able to\n        // to decide whether to remove the 'hovered' state.\n        if (e.getType() === \"pointerup\") {\n          var deltaSlider;\n          var deltaPosition;\n          var positionSlider;\n\n          if (this.__isHorizontal) {\n            deltaSlider =\n              e.getDocumentLeft() -\n              (this._valueToPosition(this.getValue()) + this.__sliderLocation);\n\n            positionSlider = qx.bom.element.Location.get(\n              this.getContentElement().getDomElement()\n            )[\"top\"];\n            deltaPosition =\n              e.getDocumentTop() -\n              (positionSlider + this.getChildControl(\"knob\").getBounds().top);\n          } else {\n            deltaSlider =\n              e.getDocumentTop() -\n              (this._valueToPosition(this.getValue()) + this.__sliderLocation);\n\n            positionSlider = qx.bom.element.Location.get(\n              this.getContentElement().getDomElement()\n            )[\"left\"];\n            deltaPosition =\n              e.getDocumentLeft() -\n              (positionSlider + this.getChildControl(\"knob\").getBounds().left);\n          }\n\n          if (\n            deltaPosition < 0 ||\n            deltaPosition > this.__knobSize ||\n            deltaSlider < 0 ||\n            deltaSlider > this.__knobSize\n          ) {\n            this.getChildControl(\"knob\").removeState(\"hovered\");\n          }\n        }\n      } else if (this.__trackingMode) {\n        // Stop timer interval\n        this.__timer.stop();\n\n        // Release capture mode\n        this.releaseCapture();\n\n        // Cleanup status flags\n        delete this.__trackingMode;\n        delete this.__trackingDirection;\n        delete this.__trackingEnd;\n      }\n\n      // Remove move listener again\n      this.removeListener(\"pointermove\", this._onPointerMove, this);\n\n      // Stop event\n      if (e.getType() === \"pointerup\") {\n        e.stopPropagation();\n      }\n    },\n\n    /**\n     * Listener of pointermove event for the knob. Only used in drag mode.\n     *\n     * @param e {qx.event.type.Pointer} Incoming event object\n     */\n    _onPointerMove(e) {\n      if (this.__dragMode) {\n        var dragStop = this.__isHorizontal\n          ? e.getDocumentLeft()\n          : e.getDocumentTop();\n        var position = dragStop - this.__dragOffset;\n\n        this.slideTo(this._positionToValue(position));\n      } else if (this.__trackingMode) {\n        // Update tracking end on pointermove\n        this.__computeTrackingEnd(e);\n      }\n\n      // Stop event\n      e.stopPropagation();\n    },\n\n    /**\n     * Listener of interval event by the internal timer. Only used\n     * in tracking sequences.\n     *\n     * @param e {qx.event.type.Event} Incoming event object\n     */\n    _onInterval(e) {\n      // Compute new value\n      var value =\n        this.getValue() + this.__trackingDirection * this.getPageStep();\n\n      // Limit value\n      if (value < this.getMinimum()) {\n        value = this.getMinimum();\n      } else if (value > this.getMaximum()) {\n        value = this.getMaximum();\n      }\n\n      // Stop at tracking position (where the pointer is pressed down)\n      var slideBack = this.__trackingDirection == -1;\n      if (\n        (slideBack && value <= this.__trackingEnd) ||\n        (!slideBack && value >= this.__trackingEnd)\n      ) {\n        value = this.__trackingEnd;\n      }\n\n      // Finally slide to the desired position\n      this.slideTo(value);\n    },\n\n    /**\n     * Listener of resize event for both the slider itself and the knob.\n     *\n     * @param e {qx.event.type.Data} Incoming event object\n     */\n    _onUpdate(e) {\n      // Update sliding space\n      var availSize = this.getInnerSize();\n      var knobSize = this.getChildControl(\"knob\").getBounds();\n      var sizeProperty = this.__isHorizontal ? \"width\" : \"height\";\n\n      // Sync knob size\n      this._updateKnobSize();\n\n      // Store knob size\n      this.__slidingSpace = availSize[sizeProperty] - knobSize[sizeProperty];\n      this.__knobSize = knobSize[sizeProperty];\n\n      // Update knob position (sliding space must be updated first)\n      this._updateKnobPosition();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      UTILS\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Boolean} Whether the slider is laid out horizontally */\n    __isHorizontal: false,\n\n    /**\n     * @type {Integer} Available space for knob to slide on, computed on resize of\n     * the widget\n     */\n    __slidingSpace: 0,\n\n    /**\n     * Computes the value where the tracking should end depending on\n     * the current pointer position.\n     *\n     * @param e {qx.event.type.Pointer} Incoming pointer event\n     */\n    __computeTrackingEnd(e) {\n      var isHorizontal = this.__isHorizontal;\n      var cursorLocation = isHorizontal\n        ? e.getDocumentLeft()\n        : e.getDocumentTop();\n      var sliderLocation = this.__sliderLocation;\n      var knobLocation = this.__knobLocation;\n      var knobSize = this.__knobSize;\n\n      // Compute relative position\n      var position = cursorLocation - sliderLocation;\n      if (cursorLocation >= knobLocation) {\n        position -= knobSize;\n      }\n\n      // Compute stop value\n      var value = this._positionToValue(position);\n\n      var min = this.getMinimum();\n      var max = this.getMaximum();\n\n      if (value < min) {\n        value = min;\n      } else if (value > max) {\n        value = max;\n      } else {\n        var old = this.getValue();\n        var step = this.getPageStep();\n        var method = this.__trackingDirection < 0 ? \"floor\" : \"ceil\";\n\n        // Fix to page step\n        value = old + Math[method]((value - old) / step) * step;\n      }\n\n      // Store value when undefined, otherwise only when it follows the\n      // current direction e.g. goes up or down\n      if (\n        this.__trackingEnd == null ||\n        (this.__trackingDirection == -1 && value <= this.__trackingEnd) ||\n        (this.__trackingDirection == 1 && value >= this.__trackingEnd)\n      ) {\n        this.__trackingEnd = value;\n      }\n    },\n\n    /**\n     * Converts the given position to a value.\n     *\n     * Does not respect single or page step.\n     *\n     * @param position {Integer} Position to use\n     * @return {Integer} Resulting value (rounded)\n     */\n    _positionToValue(position) {\n      // Reading available space\n      var avail = this.__slidingSpace;\n\n      // Protect undefined value (before initial resize) and division by zero\n      if (avail == null || avail == 0) {\n        return 0;\n      }\n\n      // Compute and limit percent\n      var percent = position / avail;\n      if (percent < 0) {\n        percent = 0;\n      } else if (percent > 1) {\n        percent = 1;\n      }\n\n      // Compute range\n      var range = this.getMaximum() - this.getMinimum();\n\n      // Compute value\n      return this.getMinimum() + Math.round(range * percent);\n    },\n\n    /**\n     * Converts the given value to a position to place\n     * the knob to.\n     *\n     * @param value {Integer} Value to use\n     * @return {Integer} Computed position (rounded)\n     */\n    _valueToPosition(value) {\n      // Reading available space\n      var avail = this.__slidingSpace;\n      if (avail == null) {\n        return 0;\n      }\n\n      // Computing range\n      var range = this.getMaximum() - this.getMinimum();\n\n      // Protect division by zero\n      if (range == 0) {\n        return 0;\n      }\n\n      // Translating value to distance from minimum\n      var value = value - this.getMinimum();\n\n      // Compute and limit percent\n      var percent = value / range;\n      if (percent < 0) {\n        percent = 0;\n      } else if (percent > 1) {\n        percent = 1;\n      }\n\n      // Compute position from available space and percent\n      return Math.round(avail * percent);\n    },\n\n    /**\n     * Updates the knob position following the currently configured\n     * value. Useful on reflows where the dimensions of the slider\n     * itself have been modified.\n     *\n     */\n    _updateKnobPosition() {\n      this._setKnobPosition(this._valueToPosition(this.getValue()));\n    },\n\n    /**\n     * Moves the knob to the given position.\n     *\n     * @param position {Integer} Any valid position (needs to be\n     *   greater or equal than zero)\n     */\n    _setKnobPosition(position) {\n      // Use the DOM Element to prevent unnecessary layout recalculations\n      var knob = this.getChildControl(\"knob\");\n      var dec = this.getDecorator();\n      dec = qx.theme.manager.Decoration.getInstance().resolve(dec);\n      var content = knob.getContentElement();\n      if (this.__isHorizontal) {\n        if (dec && dec.getPadding()) {\n          position += dec.getPadding().left;\n        }\n        position += this.getPaddingLeft() || 0;\n        content.setStyle(\"left\", position + \"px\", true);\n      } else {\n        if (dec && dec.getPadding()) {\n          position += dec.getPadding().top;\n        }\n        position += this.getPaddingTop() || 0;\n        content.setStyle(\"top\", position + \"px\", true);\n      }\n    },\n\n    /**\n     * Reconfigures the size of the knob depending on\n     * the optionally defined {@link #knobFactor}.\n     *\n     */\n    _updateKnobSize() {\n      // Compute knob size\n      var knobFactor = this.getKnobFactor();\n      if (knobFactor == null) {\n        return;\n      }\n\n      // Ignore when not rendered yet\n      var avail = this.getInnerSize();\n      if (avail == null) {\n        return;\n      }\n\n      // Read size property\n      if (this.__isHorizontal) {\n        this.getChildControl(\"knob\").setWidth(\n          Math.round(knobFactor * avail.width)\n        );\n      } else {\n        this.getChildControl(\"knob\").setHeight(\n          Math.round(knobFactor * avail.height)\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SLIDE METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Slides backward to the minimum value\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slideToBegin(duration) {\n      this.slideTo(this.getMinimum(), duration);\n    },\n\n    /**\n     * Slides forward to the maximum value\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slideToEnd(duration) {\n      this.slideTo(this.getMaximum(), duration);\n    },\n\n    /**\n     * Slides forward (right or bottom depending on orientation)\n     *\n     */\n    slideForward() {\n      this.slideBy(this.getSingleStep());\n    },\n\n    /**\n     * Slides backward (to left or top depending on orientation)\n     *\n     */\n    slideBack() {\n      this.slideBy(-this.getSingleStep());\n    },\n\n    /**\n     * Slides a page forward (to right or bottom depending on orientation)\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slidePageForward(duration) {\n      this.slideBy(this.getPageStep(), duration);\n    },\n\n    /**\n     * Slides a page backward (to left or top depending on orientation)\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slidePageBack(duration) {\n      this.slideBy(-this.getPageStep(), duration);\n    },\n\n    /**\n     * Slides by the given offset.\n     *\n     * This method works with the value, not with the coordinate.\n     *\n     * @param offset {Integer} Offset to scroll by\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slideBy(offset, duration) {\n      this.slideTo(this.getValue() + offset, duration);\n    },\n\n    /**\n     * Slides to the given value\n     *\n     * This method works with the value, not with the coordinate.\n     *\n     * @param value {Integer} Scroll to a value between the defined\n     *   minimum and maximum.\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    slideTo(value, duration) {\n      this.stopSlideAnimation();\n\n      if (duration) {\n        this.__animateTo(value, duration);\n      } else {\n        this.updatePosition(value);\n      }\n    },\n\n    /**\n     * Updates the position property considering the minimum and maximum values.\n     * @param value {Number} The new position.\n     */\n    updatePosition(value) {\n      this.setValue(this.__normalizeValue(value));\n    },\n\n    /**\n     * In case a slide animation is currently running, it will be stopped.\n     * If not, the method does nothing.\n     */\n    stopSlideAnimation() {\n      if (this.__scrollAnimationframe) {\n        this.__scrollAnimationframe.cancelSequence();\n        this.__scrollAnimationframe = null;\n      }\n    },\n\n    /**\n     * Internal helper to normalize the given value concerning the minimum\n     * and maximum value.\n     * @param value {Number} The value to normalize.\n     * @return {Number} The normalized value.\n     */\n    __normalizeValue(value) {\n      // Bring into allowed range or fix to single step grid\n      if (value < this.getMinimum()) {\n        value = this.getMinimum();\n      } else if (value > this.getMaximum()) {\n        value = this.getMaximum();\n      } else {\n        value =\n          this.getMinimum() +\n          Math.round((value - this.getMinimum()) / this.getSingleStep()) *\n            this.getSingleStep();\n      }\n      return value;\n    },\n\n    /**\n     * Animation helper which takes care of the animated slide.\n     * @param to {Number} The target value.\n     * @param duration {Number} The time in milliseconds the slide to should take.\n     */\n    __animateTo(to, duration) {\n      to = this.__normalizeValue(to);\n      var from = this.getValue();\n\n      this.__scrollAnimationframe = new qx.bom.AnimationFrame();\n\n      this.__scrollAnimationframe.on(\n        \"frame\",\n        function (timePassed) {\n          this.setValue(parseInt((timePassed / duration) * (to - from) + from));\n        },\n        this\n      );\n\n      this.__scrollAnimationframe.on(\n        \"end\",\n        function () {\n          this.setValue(to);\n          this.__scrollAnimationframe = null;\n          this.fireEvent(\"slideAnimationEnd\");\n        },\n        this\n      );\n\n      this.__scrollAnimationframe.startSequence(duration);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyOrientation(value, old) {\n      // ARIA attrs\n      this.getContentElement().setAttribute(\"aria-orientation\", value);\n\n      var knob = this.getChildControl(\"knob\");\n\n      // Update private flag for faster access\n      this.__isHorizontal = value === \"horizontal\";\n\n      // Toggle states and knob layout\n      if (this.__isHorizontal) {\n        this.removeState(\"vertical\");\n        knob.removeState(\"vertical\");\n\n        this.addState(\"horizontal\");\n        knob.addState(\"horizontal\");\n\n        knob.setLayoutProperties({ top: 0, right: null, bottom: 0 });\n      } else {\n        this.removeState(\"horizontal\");\n        knob.removeState(\"horizontal\");\n\n        this.addState(\"vertical\");\n        knob.addState(\"vertical\");\n\n        knob.setLayoutProperties({ right: 0, bottom: null, left: 0 });\n      }\n\n      // Sync knob position\n      this._updateKnobPosition();\n    },\n\n    // property apply\n    _applyKnobFactor(value, old) {\n      if (value != null) {\n        this._updateKnobSize();\n      } else {\n        if (this.__isHorizontal) {\n          this.getChildControl(\"knob\").resetWidth();\n        } else {\n          this.getChildControl(\"knob\").resetHeight();\n        }\n      }\n    },\n\n    // property apply\n    _applyValue(value, old) {\n      if (value != null) {\n        // ARIA attrs\n        this.getContentElement().setAttribute(\"aria-valuenow\", value);\n\n        this._updateKnobPosition();\n        if (this.__dragMode) {\n          this.__dragValue = [value, old];\n        } else {\n          this.fireEvent(\"changeValue\", qx.event.type.Data, [value, old]);\n        }\n      } else {\n        this.resetValue();\n      }\n    },\n\n    /**\n     * Helper for applyValue which fires the changeValue event.\n     */\n    _fireValue() {\n      if (!this.__dragValue) {\n        return;\n      }\n      var tmp = this.__dragValue;\n      this.__dragValue = null;\n      this.fireEvent(\"changeValue\", qx.event.type.Data, tmp);\n    },\n\n    // property apply\n    _applyMinimum(value, old) {\n      // ARIA attrs\n      this.getContentElement().setAttribute(\"aria-valuemin\", value);\n\n      if (this.getValue() < value) {\n        this.setValue(value);\n      }\n\n      this._updateKnobPosition();\n    },\n\n    // property apply\n    _applyMaximum(value, old) {\n      // ARIA attrs\n      this.getContentElement().setAttribute(\"aria-valuemax\", value);\n\n      if (this.getValue() > value) {\n        this.setValue(value);\n      }\n\n      this._updateKnobPosition();\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}