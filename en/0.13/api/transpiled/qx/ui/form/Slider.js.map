{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "implement",
    "form",
    "IForm",
    "INumberForm",
    "IRange",
    "include",
    "MForm",
    "construct",
    "orientation",
    "constructor",
    "call",
    "_setLayout",
    "layout",
    "Canvas",
    "getContentElement",
    "setAttribute",
    "addListener",
    "_onKeyPress",
    "_onRoll",
    "_onPointerDown",
    "_onPointerUp",
    "_onUpdate",
    "_onStopEvent",
    "setOrientation",
    "initOrientation",
    "events",
    "changeValue",
    "slideAnimationEnd",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "check",
    "apply",
    "value",
    "nullable",
    "minimum",
    "event",
    "maximum",
    "singleStep",
    "pageStep",
    "knobFactor",
    "members",
    "__sliderLocation",
    "__knobLocation",
    "__knobSize",
    "__dragMode",
    "__dragOffset",
    "__trackingMode",
    "__trackingDirection",
    "__trackingEnd",
    "__timer",
    "__dragTimer",
    "__lastValueEvent",
    "__dragValue",
    "__scrollAnimationframe",
    "_forwardStates",
    "invalid",
    "renderLayout",
    "left",
    "top",
    "width",
    "height",
    "Slider",
    "superclass",
    "prototype",
    "_updateKnobPosition",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "_onPointerOver",
    "_onPointerOut",
    "_add",
    "e",
    "addState",
    "removeState",
    "getPointerType",
    "axis",
    "getOrientation",
    "delta",
    "getDelta",
    "direction",
    "slideBy",
    "getSingleStep",
    "stop",
    "isHorizontal",
    "backward",
    "forward",
    "getKeyIdentifier",
    "slideForward",
    "slideBack",
    "slidePageForward",
    "slidePageBack",
    "slideToBegin",
    "slideToEnd",
    "__isHorizontal",
    "knob",
    "getChildControl",
    "locationProperty",
    "cursorLocation",
    "getDocumentLeft",
    "getDocumentTop",
    "decorator",
    "getDecorator",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "resolve",
    "decoratorPadding",
    "getInsets",
    "padding",
    "getPaddingLeft",
    "getPaddingTop",
    "sliderLocation",
    "bom",
    "element",
    "Location",
    "get",
    "getDomElement",
    "knobLocation",
    "getTarget",
    "Timer",
    "_fireValue",
    "start",
    "__computeTrackingEnd",
    "_onInterval",
    "_onPointerMove",
    "capture",
    "stopPropagation",
    "releaseCapture",
    "getType",
    "deltaSlider",
    "deltaPosition",
    "positionSlider",
    "_valueToPosition",
    "getValue",
    "getBounds",
    "removeListener",
    "dragStop",
    "position",
    "slideTo",
    "_positionToValue",
    "getPageStep",
    "getMinimum",
    "getMaximum",
    "availSize",
    "getInnerSize",
    "knobSize",
    "sizeProperty",
    "_updateKnobSize",
    "__slidingSpace",
    "__P_366_14",
    "min",
    "max",
    "old",
    "step",
    "method",
    "Math",
    "avail",
    "percent",
    "range",
    "round",
    "_setKnobPosition",
    "dec",
    "content",
    "getPadding",
    "setStyle",
    "getKnobFactor",
    "setWidth",
    "setHeight",
    "duration",
    "offset",
    "stopSlideAnimation",
    "__animateTo",
    "updatePosition",
    "setValue",
    "__normalizeValue",
    "cancelSequence",
    "__P_366_17",
    "__P_366_16",
    "to",
    "from",
    "AnimationFrame",
    "on",
    "timePassed",
    "parseInt",
    "fireEvent",
    "startSequence",
    "_applyOrientation",
    "setLayoutProperties",
    "right",
    "bottom",
    "_applyKnobFactor",
    "resetWidth",
    "resetHeight",
    "_applyValue",
    "type",
    "Data",
    "resetValue",
    "tmp",
    "_applyMinimum",
    "_applyMaximum"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Slider.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The Slider widget provides a vertical or horizontal slider.\r\n *\r\n * The Slider is the classic widget for controlling a bounded value.\r\n * It lets the user move a slider handle along a horizontal or vertical\r\n * groove and translates the handle's position into an integer value\r\n * within the defined range.\r\n *\r\n * The Slider has very few of its own functions.\r\n * The most useful functions are slideTo() to set the slider directly to some\r\n * value; setSingleStep(), setPageStep() to set the steps; and setMinimum()\r\n * and setMaximum() to define the range of the slider.\r\n *\r\n * A slider accepts focus on Tab and provides both a mouse wheel and\r\n * a keyboard interface. The keyboard interface is the following:\r\n *\r\n * * Left/Right move a horizontal slider by one single step.\r\n * * Up/Down move a vertical slider by one single step.\r\n * * PageUp moves up one page.\r\n * * PageDown moves down one page.\r\n * * Home moves to the start (minimum).\r\n * * End moves to the end (maximum).\r\n *\r\n * Here are the main properties of the class:\r\n *\r\n * # <code>value</code>: The bounded integer that {@link qx.ui.form.INumberForm}\r\n * maintains.\r\n * # <code>minimum</code>: The lowest possible value.\r\n * # <code>maximum</code>: The highest possible value.\r\n * # <code>singleStep</code>: The smaller of two natural steps that an abstract\r\n * sliders provides and typically corresponds to the user pressing an arrow key.\r\n * # <code>pageStep</code>: The larger of two natural steps that an abstract\r\n * slider provides and typically corresponds to the user pressing PageUp or\r\n * PageDown.\r\n *\r\n * @childControl knob {qx.ui.core.Widget} knob to set the value of the slider\r\n */\r\nqx.Class.define(\"qx.ui.form.Slider\", {\r\n  extend: qx.ui.core.Widget,\r\n  implement: [qx.ui.form.IForm, qx.ui.form.INumberForm, qx.ui.form.IRange],\r\n\r\n  include: [qx.ui.form.MForm],\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param orientation {String?\"horizontal\"} Configure the\r\n   * {@link #orientation} property\r\n   */\r\n  construct(orientation) {\r\n    super();\r\n\r\n    // Force canvas layout\r\n    this._setLayout(new qx.ui.layout.Canvas());\r\n\r\n    // ARIA attrs\r\n    this.getContentElement().setAttribute(\"role\", \"slider\");\r\n\r\n    // Add listeners\r\n    this.addListener(\"keypress\", this._onKeyPress, this);\r\n    this.addListener(\"roll\", this._onRoll, this);\r\n    this.addListener(\"pointerdown\", this._onPointerDown, this);\r\n    this.addListener(\"pointerup\", this._onPointerUp, this);\r\n    this.addListener(\"losecapture\", this._onPointerUp, this);\r\n    this.addListener(\"resize\", this._onUpdate, this);\r\n\r\n    // Stop events\r\n    this.addListener(\"contextmenu\", this._onStopEvent, this);\r\n    this.addListener(\"tap\", this._onStopEvent, this);\r\n    this.addListener(\"dbltap\", this._onStopEvent, this);\r\n\r\n    // Initialize orientation\r\n    if (orientation != null) {\r\n      this.setOrientation(orientation);\r\n    } else {\r\n      this.initOrientation();\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /**\r\n     * Change event for the value.\r\n     */\r\n    changeValue: \"qx.event.type.Data\",\r\n\r\n    /** Fired as soon as the slide animation ended. */\r\n    slideAnimationEnd: \"qx.event.type.Event\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    // overridden\r\n    appearance: {\r\n      refine: true,\r\n      init: \"slider\"\r\n    },\r\n\r\n    // overridden\r\n    focusable: {\r\n      refine: true,\r\n      init: true\r\n    },\r\n\r\n    /** Whether the slider is horizontal or vertical. */\r\n    orientation: {\r\n      check: [\"horizontal\", \"vertical\"],\r\n      init: \"horizontal\",\r\n      apply: \"_applyOrientation\"\r\n    },\r\n\r\n    /**\r\n     * The current slider value.\r\n     *\r\n     * Strictly validates according to {@link #minimum} and {@link #maximum}.\r\n     * Do not apply any value correction to the incoming value. If you depend\r\n     * on this, please use {@link #slideTo} instead.\r\n     */\r\n    value: {\r\n      check:\r\n        \"typeof value==='number'&&value>=this.getMinimum()&&value<=this.getMaximum()\",\r\n      init: 0,\r\n      apply: \"_applyValue\",\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * The minimum slider value (may be negative). This value must be smaller\r\n     * than {@link #maximum}.\r\n     */\r\n    minimum: {\r\n      check: \"Integer\",\r\n      init: 0,\r\n      apply: \"_applyMinimum\",\r\n      event: \"changeMinimum\"\r\n    },\r\n\r\n    /**\r\n     * The maximum slider value (may be negative). This value must be larger\r\n     * than {@link #minimum}.\r\n     */\r\n    maximum: {\r\n      check: \"Integer\",\r\n      init: 100,\r\n      apply: \"_applyMaximum\",\r\n      event: \"changeMaximum\"\r\n    },\r\n\r\n    /**\r\n     * The amount to increment on each event. Typically corresponds\r\n     * to the user pressing an arrow key.\r\n     */\r\n    singleStep: {\r\n      check: \"Integer\",\r\n      init: 1\r\n    },\r\n\r\n    /**\r\n     * The amount to increment on each event. Typically corresponds\r\n     * to the user pressing <code>PageUp</code> or <code>PageDown</code>.\r\n     */\r\n    pageStep: {\r\n      check: \"Integer\",\r\n      init: 10\r\n    },\r\n\r\n    /**\r\n     * Factor to apply to the width/height of the knob in relation\r\n     * to the dimension of the underlying area.\r\n     */\r\n    knobFactor: {\r\n      check: \"Number\",\r\n      apply: \"_applyKnobFactor\",\r\n      nullable: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __sliderLocation: null,\r\n    __knobLocation: null,\r\n    __knobSize: null,\r\n    __dragMode: null,\r\n    __dragOffset: null,\r\n    __trackingMode: null,\r\n    __trackingDirection: null,\r\n    __trackingEnd: null,\r\n    __timer: null,\r\n\r\n    // event delay stuff during drag\r\n    __dragTimer: null,\r\n    __lastValueEvent: null,\r\n    __dragValue: null,\r\n\r\n    __scrollAnimationframe: null,\r\n\r\n    // overridden\r\n    /**\r\n     * @lint ignoreReferenceField(_forwardStates)\r\n     */\r\n    _forwardStates: {\r\n      invalid: true\r\n    },\r\n\r\n    // overridden\r\n    renderLayout(left, top, width, height) {\r\n      super.renderLayout(left, top, width, height);\r\n      // make sure the layout engine does not override the knob position\r\n      this._updateKnobPosition();\r\n    },\r\n\r\n    // overridden\r\n    _createChildControlImpl(id, hash) {\r\n      var control;\r\n\r\n      switch (id) {\r\n        case \"knob\":\r\n          control = new qx.ui.core.Widget();\r\n\r\n          control.addListener(\"resize\", this._onUpdate, this);\r\n          control.addListener(\"pointerover\", this._onPointerOver, this);\r\n          control.addListener(\"pointerout\", this._onPointerOut, this);\r\n          this._add(control);\r\n          break;\r\n      }\r\n\r\n      return control || super._createChildControlImpl(id);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Event handler for pointerover events at the knob child control.\r\n     *\r\n     * Adds the 'hovered' state\r\n     *\r\n     * @param e {qx.event.type.Pointer} Incoming pointer event\r\n     */\r\n    _onPointerOver(e) {\r\n      this.addState(\"hovered\");\r\n    },\r\n\r\n    /**\r\n     * Event handler for pointerout events at the knob child control.\r\n     *\r\n     * Removes the 'hovered' state\r\n     *\r\n     * @param e {qx.event.type.Pointer} Incoming pointer event\r\n     */\r\n    _onPointerOut(e) {\r\n      this.removeState(\"hovered\");\r\n    },\r\n\r\n    /**\r\n     * Listener of roll event\r\n     *\r\n     * @param e {qx.event.type.Roll} Incoming event object\r\n     */\r\n    _onRoll(e) {\r\n      // only wheel\r\n      if (e.getPointerType() != \"wheel\") {\r\n        return;\r\n      }\r\n\r\n      var axis = this.getOrientation() === \"horizontal\" ? \"x\" : \"y\";\r\n      var delta = e.getDelta()[axis];\r\n\r\n      var direction = delta > 0 ? 1 : delta < 0 ? -1 : 0;\r\n      this.slideBy(direction * this.getSingleStep());\r\n\r\n      e.stop();\r\n    },\r\n\r\n    /**\r\n     * Event handler for keypress events.\r\n     *\r\n     * Adds support for arrow keys, page up, page down, home and end keys.\r\n     *\r\n     * @param e {qx.event.type.KeySequence} Incoming keypress event\r\n     */\r\n    _onKeyPress(e) {\r\n      var isHorizontal = this.getOrientation() === \"horizontal\";\r\n      var backward = isHorizontal ? \"Left\" : \"Up\";\r\n      var forward = isHorizontal ? \"Right\" : \"Down\";\r\n\r\n      switch (e.getKeyIdentifier()) {\r\n        case forward:\r\n          this.slideForward();\r\n          break;\r\n\r\n        case backward:\r\n          this.slideBack();\r\n          break;\r\n\r\n        case \"PageDown\":\r\n          this.slidePageForward(100);\r\n          break;\r\n\r\n        case \"PageUp\":\r\n          this.slidePageBack(100);\r\n          break;\r\n\r\n        case \"Home\":\r\n          this.slideToBegin(200);\r\n          break;\r\n\r\n        case \"End\":\r\n          this.slideToEnd(200);\r\n          break;\r\n\r\n        default:\r\n          return;\r\n      }\r\n\r\n      // Stop processed events\r\n      e.stop();\r\n    },\r\n\r\n    /**\r\n     * Listener of pointerdown event. Initializes drag or tracking mode.\r\n     *\r\n     * @param e {qx.event.type.Pointer} Incoming event object\r\n     */\r\n    _onPointerDown(e) {\r\n      // this can happen if the user releases the button while dragging outside\r\n      // of the browser viewport\r\n      if (this.__dragMode) {\r\n        return;\r\n      }\r\n\r\n      var isHorizontal = this.__isHorizontal;\r\n      var knob = this.getChildControl(\"knob\");\r\n\r\n      var locationProperty = isHorizontal ? \"left\" : \"top\";\r\n\r\n      var cursorLocation = isHorizontal\r\n        ? e.getDocumentLeft()\r\n        : e.getDocumentTop();\r\n\r\n      var decorator = this.getDecorator();\r\n      decorator = qx.theme.manager.Decoration.getInstance().resolve(decorator);\r\n      if (isHorizontal) {\r\n        var decoratorPadding = decorator ? decorator.getInsets().left : 0;\r\n        var padding = (this.getPaddingLeft() || 0) + decoratorPadding;\r\n      } else {\r\n        var decoratorPadding = decorator ? decorator.getInsets().top : 0;\r\n        var padding = (this.getPaddingTop() || 0) + decoratorPadding;\r\n      }\r\n\r\n      var sliderLocation = (this.__sliderLocation = qx.bom.element.Location.get(\r\n        this.getContentElement().getDomElement()\r\n      )[locationProperty]);\r\n      sliderLocation += padding;\r\n\r\n      var knobLocation = (this.__knobLocation = qx.bom.element.Location.get(\r\n        knob.getContentElement().getDomElement()\r\n      )[locationProperty]);\r\n\r\n      if (e.getTarget() === knob) {\r\n        // Switch into drag mode\r\n        this.__dragMode = true;\r\n        if (!this.__dragTimer) {\r\n          // create a timer to fire delayed dragging events if dragging stops.\r\n          this.__dragTimer = new qx.event.Timer(100);\r\n          this.__dragTimer.addListener(\"interval\", this._fireValue, this);\r\n        }\r\n        this.__dragTimer.start();\r\n        // Compute dragOffset (includes both: inner position of the widget and\r\n        // cursor position on knob)\r\n        this.__dragOffset = cursorLocation + sliderLocation - knobLocation;\r\n\r\n        // add state\r\n        knob.addState(\"pressed\");\r\n      } else {\r\n        // Switch into tracking mode\r\n        this.__trackingMode = true;\r\n\r\n        // Detect tracking direction\r\n        this.__trackingDirection = cursorLocation <= knobLocation ? -1 : 1;\r\n\r\n        // Compute end value\r\n        this.__computeTrackingEnd(e);\r\n\r\n        // Directly call interval method once\r\n        this._onInterval();\r\n\r\n        // Initialize timer (when needed)\r\n        if (!this.__timer) {\r\n          this.__timer = new qx.event.Timer(100);\r\n          this.__timer.addListener(\"interval\", this._onInterval, this);\r\n        }\r\n\r\n        // Start timer\r\n        this.__timer.start();\r\n      }\r\n\r\n      // Register move listener\r\n      this.addListener(\"pointermove\", this._onPointerMove, this);\r\n\r\n      // Activate capturing\r\n      this.capture();\r\n\r\n      // Stop event\r\n      e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Listener of pointerup event. Used for cleanup of previously\r\n     * initialized modes.\r\n     *\r\n     * @param e {qx.event.type.Pointer} Incoming event object\r\n     */\r\n    _onPointerUp(e) {\r\n      if (this.__dragMode) {\r\n        // Release capture mode\r\n        this.releaseCapture();\r\n\r\n        // Cleanup status flags\r\n        delete this.__dragMode;\r\n\r\n        // as we come out of drag mode, make\r\n        // sure content gets synced\r\n        this.__dragTimer.stop();\r\n        this._fireValue();\r\n\r\n        delete this.__dragOffset;\r\n\r\n        // remove state\r\n        this.getChildControl(\"knob\").removeState(\"pressed\");\r\n\r\n        // it's necessary to check whether the cursor is over the knob widget to be able to\r\n        // to decide whether to remove the 'hovered' state.\r\n        if (e.getType() === \"pointerup\") {\r\n          var deltaSlider;\r\n          var deltaPosition;\r\n          var positionSlider;\r\n\r\n          if (this.__isHorizontal) {\r\n            deltaSlider =\r\n              e.getDocumentLeft() -\r\n              (this._valueToPosition(this.getValue()) + this.__sliderLocation);\r\n\r\n            positionSlider = qx.bom.element.Location.get(\r\n              this.getContentElement().getDomElement()\r\n            )[\"top\"];\r\n            deltaPosition =\r\n              e.getDocumentTop() -\r\n              (positionSlider + this.getChildControl(\"knob\").getBounds().top);\r\n          } else {\r\n            deltaSlider =\r\n              e.getDocumentTop() -\r\n              (this._valueToPosition(this.getValue()) + this.__sliderLocation);\r\n\r\n            positionSlider = qx.bom.element.Location.get(\r\n              this.getContentElement().getDomElement()\r\n            )[\"left\"];\r\n            deltaPosition =\r\n              e.getDocumentLeft() -\r\n              (positionSlider + this.getChildControl(\"knob\").getBounds().left);\r\n          }\r\n\r\n          if (\r\n            deltaPosition < 0 ||\r\n            deltaPosition > this.__knobSize ||\r\n            deltaSlider < 0 ||\r\n            deltaSlider > this.__knobSize\r\n          ) {\r\n            this.getChildControl(\"knob\").removeState(\"hovered\");\r\n          }\r\n        }\r\n      } else if (this.__trackingMode) {\r\n        // Stop timer interval\r\n        this.__timer.stop();\r\n\r\n        // Release capture mode\r\n        this.releaseCapture();\r\n\r\n        // Cleanup status flags\r\n        delete this.__trackingMode;\r\n        delete this.__trackingDirection;\r\n        delete this.__trackingEnd;\r\n      }\r\n\r\n      // Remove move listener again\r\n      this.removeListener(\"pointermove\", this._onPointerMove, this);\r\n\r\n      // Stop event\r\n      if (e.getType() === \"pointerup\") {\r\n        e.stopPropagation();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Listener of pointermove event for the knob. Only used in drag mode.\r\n     *\r\n     * @param e {qx.event.type.Pointer} Incoming event object\r\n     */\r\n    _onPointerMove(e) {\r\n      if (this.__dragMode) {\r\n        var dragStop = this.__isHorizontal\r\n          ? e.getDocumentLeft()\r\n          : e.getDocumentTop();\r\n        var position = dragStop - this.__dragOffset;\r\n\r\n        this.slideTo(this._positionToValue(position));\r\n      } else if (this.__trackingMode) {\r\n        // Update tracking end on pointermove\r\n        this.__computeTrackingEnd(e);\r\n      }\r\n\r\n      // Stop event\r\n      e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Listener of interval event by the internal timer. Only used\r\n     * in tracking sequences.\r\n     *\r\n     * @param e {qx.event.type.Event} Incoming event object\r\n     */\r\n    _onInterval(e) {\r\n      // Compute new value\r\n      var value =\r\n        this.getValue() + this.__trackingDirection * this.getPageStep();\r\n\r\n      // Limit value\r\n      if (value < this.getMinimum()) {\r\n        value = this.getMinimum();\r\n      } else if (value > this.getMaximum()) {\r\n        value = this.getMaximum();\r\n      }\r\n\r\n      // Stop at tracking position (where the pointer is pressed down)\r\n      var slideBack = this.__trackingDirection == -1;\r\n      if (\r\n        (slideBack && value <= this.__trackingEnd) ||\r\n        (!slideBack && value >= this.__trackingEnd)\r\n      ) {\r\n        value = this.__trackingEnd;\r\n      }\r\n\r\n      // Finally slide to the desired position\r\n      this.slideTo(value);\r\n    },\r\n\r\n    /**\r\n     * Listener of resize event for both the slider itself and the knob.\r\n     *\r\n     * @param e {qx.event.type.Data} Incoming event object\r\n     */\r\n    _onUpdate(e) {\r\n      // Update sliding space\r\n      var availSize = this.getInnerSize();\r\n      var knobSize = this.getChildControl(\"knob\").getBounds();\r\n      var sizeProperty = this.__isHorizontal ? \"width\" : \"height\";\r\n\r\n      // Sync knob size\r\n      this._updateKnobSize();\r\n\r\n      // Store knob size\r\n      this.__slidingSpace = availSize[sizeProperty] - knobSize[sizeProperty];\r\n      this.__knobSize = knobSize[sizeProperty];\r\n\r\n      // Update knob position (sliding space must be updated first)\r\n      this._updateKnobPosition();\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      UTILS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /** @type {Boolean} Whether the slider is laid out horizontally */\r\n    __isHorizontal: false,\r\n\r\n    /**\r\n     * @type {Integer} Available space for knob to slide on, computed on resize of\r\n     * the widget\r\n     */\r\n    __slidingSpace: 0,\r\n\r\n    /**\r\n     * Computes the value where the tracking should end depending on\r\n     * the current pointer position.\r\n     *\r\n     * @param e {qx.event.type.Pointer} Incoming pointer event\r\n     */\r\n    __computeTrackingEnd(e) {\r\n      var isHorizontal = this.__isHorizontal;\r\n      var cursorLocation = isHorizontal\r\n        ? e.getDocumentLeft()\r\n        : e.getDocumentTop();\r\n      var sliderLocation = this.__sliderLocation;\r\n      var knobLocation = this.__knobLocation;\r\n      var knobSize = this.__knobSize;\r\n\r\n      // Compute relative position\r\n      var position = cursorLocation - sliderLocation;\r\n      if (cursorLocation >= knobLocation) {\r\n        position -= knobSize;\r\n      }\r\n\r\n      // Compute stop value\r\n      var value = this._positionToValue(position);\r\n\r\n      var min = this.getMinimum();\r\n      var max = this.getMaximum();\r\n\r\n      if (value < min) {\r\n        value = min;\r\n      } else if (value > max) {\r\n        value = max;\r\n      } else {\r\n        var old = this.getValue();\r\n        var step = this.getPageStep();\r\n        var method = this.__trackingDirection < 0 ? \"floor\" : \"ceil\";\r\n\r\n        // Fix to page step\r\n        value = old + Math[method]((value - old) / step) * step;\r\n      }\r\n\r\n      // Store value when undefined, otherwise only when it follows the\r\n      // current direction e.g. goes up or down\r\n      if (\r\n        this.__trackingEnd == null ||\r\n        (this.__trackingDirection == -1 && value <= this.__trackingEnd) ||\r\n        (this.__trackingDirection == 1 && value >= this.__trackingEnd)\r\n      ) {\r\n        this.__trackingEnd = value;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Converts the given position to a value.\r\n     *\r\n     * Does not respect single or page step.\r\n     *\r\n     * @param position {Integer} Position to use\r\n     * @return {Integer} Resulting value (rounded)\r\n     */\r\n    _positionToValue(position) {\r\n      // Reading available space\r\n      var avail = this.__slidingSpace;\r\n\r\n      // Protect undefined value (before initial resize) and division by zero\r\n      if (avail == null || avail == 0) {\r\n        return 0;\r\n      }\r\n\r\n      // Compute and limit percent\r\n      var percent = position / avail;\r\n      if (percent < 0) {\r\n        percent = 0;\r\n      } else if (percent > 1) {\r\n        percent = 1;\r\n      }\r\n\r\n      // Compute range\r\n      var range = this.getMaximum() - this.getMinimum();\r\n\r\n      // Compute value\r\n      return this.getMinimum() + Math.round(range * percent);\r\n    },\r\n\r\n    /**\r\n     * Converts the given value to a position to place\r\n     * the knob to.\r\n     *\r\n     * @param value {Integer} Value to use\r\n     * @return {Integer} Computed position (rounded)\r\n     */\r\n    _valueToPosition(value) {\r\n      // Reading available space\r\n      var avail = this.__slidingSpace;\r\n      if (avail == null) {\r\n        return 0;\r\n      }\r\n\r\n      // Computing range\r\n      var range = this.getMaximum() - this.getMinimum();\r\n\r\n      // Protect division by zero\r\n      if (range == 0) {\r\n        return 0;\r\n      }\r\n\r\n      // Translating value to distance from minimum\r\n      var value = value - this.getMinimum();\r\n\r\n      // Compute and limit percent\r\n      var percent = value / range;\r\n      if (percent < 0) {\r\n        percent = 0;\r\n      } else if (percent > 1) {\r\n        percent = 1;\r\n      }\r\n\r\n      // Compute position from available space and percent\r\n      return Math.round(avail * percent);\r\n    },\r\n\r\n    /**\r\n     * Updates the knob position following the currently configured\r\n     * value. Useful on reflows where the dimensions of the slider\r\n     * itself have been modified.\r\n     *\r\n     */\r\n    _updateKnobPosition() {\r\n      this._setKnobPosition(this._valueToPosition(this.getValue()));\r\n    },\r\n\r\n    /**\r\n     * Moves the knob to the given position.\r\n     *\r\n     * @param position {Integer} Any valid position (needs to be\r\n     *   greater or equal than zero)\r\n     */\r\n    _setKnobPosition(position) {\r\n      // Use the DOM Element to prevent unnecessary layout recalculations\r\n      var knob = this.getChildControl(\"knob\");\r\n      var dec = this.getDecorator();\r\n      dec = qx.theme.manager.Decoration.getInstance().resolve(dec);\r\n      var content = knob.getContentElement();\r\n      if (this.__isHorizontal) {\r\n        if (dec && dec.getPadding()) {\r\n          position += dec.getPadding().left;\r\n        }\r\n        position += this.getPaddingLeft() || 0;\r\n        content.setStyle(\"left\", position + \"px\", true);\r\n      } else {\r\n        if (dec && dec.getPadding()) {\r\n          position += dec.getPadding().top;\r\n        }\r\n        position += this.getPaddingTop() || 0;\r\n        content.setStyle(\"top\", position + \"px\", true);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Reconfigures the size of the knob depending on\r\n     * the optionally defined {@link #knobFactor}.\r\n     *\r\n     */\r\n    _updateKnobSize() {\r\n      // Compute knob size\r\n      var knobFactor = this.getKnobFactor();\r\n      if (knobFactor == null) {\r\n        return;\r\n      }\r\n\r\n      // Ignore when not rendered yet\r\n      var avail = this.getInnerSize();\r\n      if (avail == null) {\r\n        return;\r\n      }\r\n\r\n      // Read size property\r\n      if (this.__isHorizontal) {\r\n        this.getChildControl(\"knob\").setWidth(\r\n          Math.round(knobFactor * avail.width)\r\n        );\r\n      } else {\r\n        this.getChildControl(\"knob\").setHeight(\r\n          Math.round(knobFactor * avail.height)\r\n        );\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      SLIDE METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Slides backward to the minimum value\r\n     * @param duration {Number} The time in milliseconds the slide to should take.\r\n     */\r\n    slideToBegin(duration) {\r\n      this.slideTo(this.getMinimum(), duration);\r\n    },\r\n\r\n    /**\r\n     * Slides forward to the maximum value\r\n     * @param duration {Number} The time in milliseconds the slide to should take.\r\n     */\r\n    slideToEnd(duration) {\r\n      this.slideTo(this.getMaximum(), duration);\r\n    },\r\n\r\n    /**\r\n     * Slides forward (right or bottom depending on orientation)\r\n     *\r\n     */\r\n    slideForward() {\r\n      this.slideBy(this.getSingleStep());\r\n    },\r\n\r\n    /**\r\n     * Slides backward (to left or top depending on orientation)\r\n     *\r\n     */\r\n    slideBack() {\r\n      this.slideBy(-this.getSingleStep());\r\n    },\r\n\r\n    /**\r\n     * Slides a page forward (to right or bottom depending on orientation)\r\n     * @param duration {Number} The time in milliseconds the slide to should take.\r\n     */\r\n    slidePageForward(duration) {\r\n      this.slideBy(this.getPageStep(), duration);\r\n    },\r\n\r\n    /**\r\n     * Slides a page backward (to left or top depending on orientation)\r\n     * @param duration {Number} The time in milliseconds the slide to should take.\r\n     */\r\n    slidePageBack(duration) {\r\n      this.slideBy(-this.getPageStep(), duration);\r\n    },\r\n\r\n    /**\r\n     * Slides by the given offset.\r\n     *\r\n     * This method works with the value, not with the coordinate.\r\n     *\r\n     * @param offset {Integer} Offset to scroll by\r\n     * @param duration {Number} The time in milliseconds the slide to should take.\r\n     */\r\n    slideBy(offset, duration) {\r\n      this.slideTo(this.getValue() + offset, duration);\r\n    },\r\n\r\n    /**\r\n     * Slides to the given value\r\n     *\r\n     * This method works with the value, not with the coordinate.\r\n     *\r\n     * @param value {Integer} Scroll to a value between the defined\r\n     *   minimum and maximum.\r\n     * @param duration {Number} The time in milliseconds the slide to should take.\r\n     */\r\n    slideTo(value, duration) {\r\n      this.stopSlideAnimation();\r\n\r\n      if (duration) {\r\n        this.__animateTo(value, duration);\r\n      } else {\r\n        this.updatePosition(value);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Updates the position property considering the minimum and maximum values.\r\n     * @param value {Number} The new position.\r\n     */\r\n    updatePosition(value) {\r\n      this.setValue(this.__normalizeValue(value));\r\n    },\r\n\r\n    /**\r\n     * In case a slide animation is currently running, it will be stopped.\r\n     * If not, the method does nothing.\r\n     */\r\n    stopSlideAnimation() {\r\n      if (this.__scrollAnimationframe) {\r\n        this.__scrollAnimationframe.cancelSequence();\r\n        this.__scrollAnimationframe = null;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Internal helper to normalize the given value concerning the minimum\r\n     * and maximum value.\r\n     * @param value {Number} The value to normalize.\r\n     * @return {Number} The normalized value.\r\n     */\r\n    __normalizeValue(value) {\r\n      // Bring into allowed range or fix to single step grid\r\n      if (value < this.getMinimum()) {\r\n        value = this.getMinimum();\r\n      } else if (value > this.getMaximum()) {\r\n        value = this.getMaximum();\r\n      } else {\r\n        value =\r\n          this.getMinimum() +\r\n          Math.round((value - this.getMinimum()) / this.getSingleStep()) *\r\n            this.getSingleStep();\r\n      }\r\n      return value;\r\n    },\r\n\r\n    /**\r\n     * Animation helper which takes care of the animated slide.\r\n     * @param to {Number} The target value.\r\n     * @param duration {Number} The time in milliseconds the slide to should take.\r\n     */\r\n    __animateTo(to, duration) {\r\n      to = this.__normalizeValue(to);\r\n      var from = this.getValue();\r\n\r\n      this.__scrollAnimationframe = new qx.bom.AnimationFrame();\r\n\r\n      this.__scrollAnimationframe.on(\r\n        \"frame\",\r\n        function (timePassed) {\r\n          this.setValue(parseInt((timePassed / duration) * (to - from) + from));\r\n        },\r\n        this\r\n      );\r\n\r\n      this.__scrollAnimationframe.on(\r\n        \"end\",\r\n        function () {\r\n          this.setValue(to);\r\n          this.__scrollAnimationframe = null;\r\n          this.fireEvent(\"slideAnimationEnd\");\r\n        },\r\n        this\r\n      );\r\n\r\n      this.__scrollAnimationframe.startSequence(duration);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PROPERTY APPLY ROUTINES\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // property apply\r\n    _applyOrientation(value, old) {\r\n      // ARIA attrs\r\n      this.getContentElement().setAttribute(\"aria-orientation\", value);\r\n\r\n      var knob = this.getChildControl(\"knob\");\r\n\r\n      // Update private flag for faster access\r\n      this.__isHorizontal = value === \"horizontal\";\r\n\r\n      // Toggle states and knob layout\r\n      if (this.__isHorizontal) {\r\n        this.removeState(\"vertical\");\r\n        knob.removeState(\"vertical\");\r\n\r\n        this.addState(\"horizontal\");\r\n        knob.addState(\"horizontal\");\r\n\r\n        knob.setLayoutProperties({ top: 0, right: null, bottom: 0 });\r\n      } else {\r\n        this.removeState(\"horizontal\");\r\n        knob.removeState(\"horizontal\");\r\n\r\n        this.addState(\"vertical\");\r\n        knob.addState(\"vertical\");\r\n\r\n        knob.setLayoutProperties({ right: 0, bottom: null, left: 0 });\r\n      }\r\n\r\n      // Sync knob position\r\n      this._updateKnobPosition();\r\n    },\r\n\r\n    // property apply\r\n    _applyKnobFactor(value, old) {\r\n      if (value != null) {\r\n        this._updateKnobSize();\r\n      } else {\r\n        if (this.__isHorizontal) {\r\n          this.getChildControl(\"knob\").resetWidth();\r\n        } else {\r\n          this.getChildControl(\"knob\").resetHeight();\r\n        }\r\n      }\r\n    },\r\n\r\n    // property apply\r\n    _applyValue(value, old) {\r\n      if (value != null) {\r\n        // ARIA attrs\r\n        this.getContentElement().setAttribute(\"aria-valuenow\", value);\r\n\r\n        this._updateKnobPosition();\r\n        if (this.__dragMode) {\r\n          this.__dragValue = [value, old];\r\n        } else {\r\n          this.fireEvent(\"changeValue\", qx.event.type.Data, [value, old]);\r\n        }\r\n      } else {\r\n        this.resetValue();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Helper for applyValue which fires the changeValue event.\r\n     */\r\n    _fireValue() {\r\n      if (!this.__dragValue) {\r\n        return;\r\n      }\r\n      var tmp = this.__dragValue;\r\n      this.__dragValue = null;\r\n      this.fireEvent(\"changeValue\", qx.event.type.Data, tmp);\r\n    },\r\n\r\n    // property apply\r\n    _applyMinimum(value, old) {\r\n      // ARIA attrs\r\n      this.getContentElement().setAttribute(\"aria-valuemin\", value);\r\n\r\n      if (this.getValue() < value) {\r\n        this.setValue(value);\r\n      }\r\n\r\n      this._updateKnobPosition();\r\n    },\r\n\r\n    // property apply\r\n    _applyMaximum(value, old) {\r\n      // ARIA attrs\r\n      this.getContentElement().setAttribute(\"aria-valuemax\", value);\r\n\r\n      if (this.getValue() > value) {\r\n        this.setValue(value);\r\n      }\r\n\r\n      this._updateKnobPosition();\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}