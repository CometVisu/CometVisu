{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "basic",
    "Atom",
    "include",
    "core",
    "MExecutable",
    "implement",
    "form",
    "IBooleanForm",
    "IExecutable",
    "IRadioItem",
    "construct",
    "label",
    "icon",
    "constructor",
    "call",
    "addListener",
    "_onPointerOver",
    "_onPointerOut",
    "_onPointerDown",
    "_onPointerUp",
    "_onKeyDown",
    "_onKeyUp",
    "_onExecute",
    "contentEl",
    "getContentElement",
    "setAttribute",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "value",
    "check",
    "nullable",
    "event",
    "apply",
    "group",
    "triState",
    "members",
    "_applyGroup",
    "old",
    "remove",
    "add",
    "_applyValue",
    "addState",
    "removeState",
    "ariaPressed",
    "Boolean",
    "isTriState",
    "_applyTriState",
    "getValue",
    "e",
    "toggleValue",
    "getTarget",
    "hasState",
    "isLeftPressed",
    "capture",
    "stopPropagation",
    "releaseCapture",
    "execute",
    "getKeyIdentifier",
    "ToggleButton"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/ToggleButton.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Martin Wittemann (martinwittemann)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A toggle Button widget\r\n *\r\n * If the user presses the button by tapping on it pressing the enter or\r\n * space key, the button toggles between the pressed an not pressed states.\r\n */\r\nqx.Class.define(\"qx.ui.form.ToggleButton\", {\r\n  extend: qx.ui.basic.Atom,\r\n  include: [qx.ui.core.MExecutable],\r\n\r\n  implement: [\r\n    qx.ui.form.IBooleanForm,\r\n    qx.ui.form.IExecutable,\r\n    qx.ui.form.IRadioItem\r\n  ],\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * Creates a ToggleButton.\r\n   *\r\n   * @param label {String} The text on the button.\r\n   * @param icon {String} An URI to the icon of the button.\r\n   */\r\n  construct(label, icon) {\r\n    super(label, icon);\r\n\r\n    // register pointer events\r\n    this.addListener(\"pointerover\", this._onPointerOver);\r\n    this.addListener(\"pointerout\", this._onPointerOut);\r\n    this.addListener(\"pointerdown\", this._onPointerDown);\r\n    this.addListener(\"pointerup\", this._onPointerUp);\r\n\r\n    // register keyboard events\r\n    this.addListener(\"keydown\", this._onKeyDown);\r\n    this.addListener(\"keyup\", this._onKeyUp);\r\n\r\n    // register execute event\r\n    this.addListener(\"execute\", this._onExecute, this);\r\n\r\n    // ARIA attrs\r\n    const contentEl = this.getContentElement();\r\n    contentEl.setAttribute(\"role\", \"button\");\r\n    contentEl.setAttribute(\"aria-pressed\", false);\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    // overridden\r\n    appearance: {\r\n      refine: true,\r\n      init: \"toggle-button\"\r\n    },\r\n\r\n    // overridden\r\n    focusable: {\r\n      refine: true,\r\n      init: true\r\n    },\r\n\r\n    /** The value of the widget. True, if the widget is checked. */\r\n    value: {\r\n      check: \"Boolean\",\r\n      nullable: true,\r\n      event: \"changeValue\",\r\n      apply: \"_applyValue\",\r\n      init: false\r\n    },\r\n\r\n    /** The assigned qx.ui.form.RadioGroup which handles the switching between registered buttons. */\r\n    group: {\r\n      check: \"qx.ui.form.RadioGroup\",\r\n      nullable: true,\r\n      apply: \"_applyGroup\"\r\n    },\r\n\r\n    /**\r\n     * Whether the button has a third state. Use this for tri-state checkboxes.\r\n     *\r\n     * When enabled, the value null of the property value stands for \"undetermined\",\r\n     * while true is mapped to \"enabled\" and false to \"disabled\" as usual. Note\r\n     * that the value property is set to false initially.\r\n     *\r\n     */\r\n    triState: {\r\n      check: \"Boolean\",\r\n      apply: \"_applyTriState\",\r\n      nullable: true,\r\n      init: null\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /** The assigned {@link qx.ui.form.RadioGroup} which handles the switching between registered buttons */\r\n    _applyGroup(value, old) {\r\n      if (old) {\r\n        old.remove(this);\r\n      }\r\n\r\n      if (value) {\r\n        value.add(this);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Changes the state of the button dependent on the checked value.\r\n     *\r\n     * @param value {Boolean} Current value\r\n     * @param old {Boolean} Previous value\r\n     */\r\n    _applyValue(value, old) {\r\n      value ? this.addState(\"checked\") : this.removeState(\"checked\");\r\n\r\n      let ariaPressed = Boolean(value);\r\n      if (this.isTriState()) {\r\n        if (value === null) {\r\n          ariaPressed = \"mixed\";\r\n          this.addState(\"undetermined\");\r\n        } else if (old === null) {\r\n          this.removeState(\"undetermined\");\r\n        }\r\n      }\r\n\r\n      this.getContentElement().setAttribute(\"aria-pressed\", ariaPressed);\r\n    },\r\n\r\n    /**\r\n     * Apply value property when triState property is modified.\r\n     *\r\n     * @param value {Boolean} Current value\r\n     * @param old {Boolean} Previous value\r\n     */\r\n    _applyTriState(value, old) {\r\n      this._applyValue(this.getValue());\r\n    },\r\n\r\n    /**\r\n     * Handler for the execute event.\r\n     *\r\n     * @param e {qx.event.type.Event} The execute event.\r\n     */\r\n    _onExecute(e) {\r\n      this.toggleValue();\r\n    },\r\n\r\n    /**\r\n     * Listener method for \"pointerover\" event.\r\n     * <ul>\r\n     * <li>Adds state \"hovered\"</li>\r\n     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\r\n     * </ul>\r\n     *\r\n     * @param e {qx.event.type.Pointer} Pointer event\r\n     */\r\n    _onPointerOver(e) {\r\n      if (e.getTarget() !== this) {\r\n        return;\r\n      }\r\n\r\n      this.addState(\"hovered\");\r\n\r\n      if (this.hasState(\"abandoned\")) {\r\n        this.removeState(\"abandoned\");\r\n        this.addState(\"pressed\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Listener method for \"pointerout\" event.\r\n     * <ul>\r\n     * <li>Removes \"hovered\" state</li>\r\n     * <li>Adds \"abandoned\" state (if \"pressed\" state is set)</li>\r\n     * <li>Removes \"pressed\" state (if \"pressed\" state is set and button is not checked)\r\n     * </ul>\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointer event\r\n     */\r\n    _onPointerOut(e) {\r\n      if (e.getTarget() !== this) {\r\n        return;\r\n      }\r\n\r\n      this.removeState(\"hovered\");\r\n\r\n      if (this.hasState(\"pressed\")) {\r\n        if (!this.getValue()) {\r\n          this.removeState(\"pressed\");\r\n        }\r\n\r\n        this.addState(\"abandoned\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Listener method for \"pointerdown\" event.\r\n     * <ul>\r\n     * <li>Activates capturing</li>\r\n     * <li>Removes \"abandoned\" state</li>\r\n     * <li>Adds \"pressed\" state</li>\r\n     * </ul>\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointer event\r\n     */\r\n    _onPointerDown(e) {\r\n      if (!e.isLeftPressed()) {\r\n        return;\r\n      }\r\n\r\n      // Activate capturing if the button get a pointerout while\r\n      // the button is pressed.\r\n      this.capture();\r\n\r\n      this.removeState(\"abandoned\");\r\n      this.addState(\"pressed\");\r\n      e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Listener method for \"pointerup\" event.\r\n     * <ul>\r\n     * <li>Releases capturing</li>\r\n     * <li>Removes \"pressed\" state (if not \"abandoned\" state is set and \"pressed\" state is set)</li>\r\n     * <li>Removes \"abandoned\" state (if set)</li>\r\n     * <li>Toggles {@link #value} (if state \"abandoned\" is not set and state \"pressed\" is set)</li>\r\n     * </ul>\r\n     *\r\n     * @param e {qx.event.type.Pointer} pointer event\r\n     */\r\n    _onPointerUp(e) {\r\n      this.releaseCapture();\r\n\r\n      if (this.hasState(\"abandoned\")) {\r\n        this.removeState(\"abandoned\");\r\n      } else if (this.hasState(\"pressed\")) {\r\n        this.execute();\r\n      }\r\n\r\n      this.removeState(\"pressed\");\r\n      e.stopPropagation();\r\n    },\r\n\r\n    /**\r\n     * Listener method for \"keydown\" event.<br/>\r\n     * Removes \"abandoned\" and adds \"pressed\" state\r\n     * for the keys \"Enter\" or \"Space\"\r\n     *\r\n     * @param e {Event} Key event\r\n     */\r\n    _onKeyDown(e) {\r\n      switch (e.getKeyIdentifier()) {\r\n        case \"Enter\":\r\n        case \"Space\":\r\n          this.removeState(\"abandoned\");\r\n          this.addState(\"pressed\");\r\n\r\n          e.stopPropagation();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Listener method for \"keyup\" event.<br/>\r\n     * Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\r\n     * for the keys \"Enter\" or \"Space\". It also toggles the {@link #value} property.\r\n     *\r\n     * @param e {Event} Key event\r\n     */\r\n    _onKeyUp(e) {\r\n      if (!this.hasState(\"pressed\")) {\r\n        return;\r\n      }\r\n\r\n      switch (e.getKeyIdentifier()) {\r\n        case \"Enter\":\r\n        case \"Space\":\r\n          this.removeState(\"abandoned\");\r\n          this.execute();\r\n\r\n          this.removeState(\"pressed\");\r\n          e.stopPropagation();\r\n      }\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}