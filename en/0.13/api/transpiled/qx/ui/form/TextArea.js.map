{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "AbstractField",
    "construct",
    "value",
    "initWrap",
    "addListener",
    "_onRoll",
    "_onResize",
    "properties",
    "wrap",
    "check",
    "init",
    "apply",
    "appearance",
    "refine",
    "singleStep",
    "minimalLineHeight",
    "autoSize",
    "members",
    "__areaClone",
    "__areaHeight",
    "__originalAreaHeight",
    "setValue",
    "__autoSize",
    "e",
    "getPointerType",
    "contentElement",
    "getContentElement",
    "scrollY",
    "getScrollY",
    "scrollToY",
    "getDelta",
    "y",
    "getSingleStep",
    "newScrollY",
    "stop",
    "dispose",
    "isAutoSize",
    "clone",
    "__getAreaClone",
    "getBounds",
    "_getAreaHeight",
    "scrolledHeight",
    "Math",
    "round",
    "_getScrolledAreaHeight",
    "getMaxHeight",
    "insets",
    "getInsets",
    "innerMaxHeight",
    "top",
    "bottom",
    "setStyle",
    "desiredHeight",
    "max",
    "_setAreaHeight",
    "addListenerOnce",
    "getInnerSize",
    "height",
    "core",
    "queue",
    "Layout",
    "add",
    "Manager",
    "flush",
    "__forceRewrap",
    "cloneDom",
    "getDomElement",
    "parentNode",
    "html",
    "Element",
    "Environment",
    "get",
    "setWrap",
    "getWrap",
    "style",
    "overflow",
    "overflowX",
    "getValue",
    "__scrollCloneToBottom",
    "scrollTop",
    "__createAreaClone",
    "orig",
    "cloneHtml",
    "bom",
    "Input",
    "useNode",
    "setStyles",
    "position",
    "left",
    "removeAttribute",
    "setAttribute",
    "insertBefore",
    "_createInputElement",
    "overflowY",
    "_applyWrap",
    "old",
    "_placeholder",
    "whiteSpace",
    "_applyMinimalLineHeight",
    "_applyAutoSize",
    "removeListener",
    "_applyDimension",
    "content",
    "element",
    "width",
    "getStyle",
    "parseInt",
    "Dimension",
    "getWidth",
    "__warnAutoSizeAndHeight",
    "getHeight",
    "warn",
    "_getContentHint",
    "hint",
    "getMinimalLineHeight",
    "_getTextSize",
    "destruct",
    "setAutoSize",
    "TextArea"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/TextArea.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Jonathan Wei√ü (jonathan_rass)\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * The TextField is a multi-line text input field.\n */\nqx.Class.define(\"qx.ui.form.TextArea\", {\n  extend: qx.ui.form.AbstractField,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param value {String?\"\"} The text area's initial value\n   */\n  construct(value) {\n    super(value);\n    this.initWrap();\n\n    this.addListener(\"roll\", this._onRoll, this);\n    this.addListener(\"resize\", this._onResize, this);\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** Controls whether text wrap is activated or not. */\n    wrap: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyWrap\"\n    },\n\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"textarea\"\n    },\n\n    /** Factor for scrolling the <code>TextArea</code> with the mouse wheel. */\n    singleStep: {\n      check: \"Integer\",\n      init: 20\n    },\n\n    /** Minimal line height. On default this is set to four lines. */\n    minimalLineHeight: {\n      check: \"Integer\",\n      apply: \"_applyMinimalLineHeight\",\n      init: 4\n    },\n\n    /**\n     * Whether the <code>TextArea</code> should automatically adjust to\n     * the height of the content.\n     *\n     * To set the initial height, modify {@link #minHeight}. If you wish\n     * to set a minHeight below four lines of text, also set\n     * {@link #minimalLineHeight}. In order to limit growing to a certain\n     * height, set {@link #maxHeight} respectively. Please note that\n     * autoSize is ignored when the {@link #height} property is in use.\n     */\n    autoSize: {\n      check: \"Boolean\",\n      apply: \"_applyAutoSize\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __areaClone: null,\n    __areaHeight: null,\n    __originalAreaHeight: null,\n\n    // overridden\n    setValue(value) {\n      value = super.setValue(value);\n      this.__autoSize();\n\n      return value;\n    },\n\n    /**\n     * Handles the roll for scrolling the <code>TextArea</code>.\n     *\n     * @param e {qx.event.type.Roll} roll event.\n     */\n    _onRoll(e) {\n      // only wheel\n      if (e.getPointerType() != \"wheel\") {\n        return;\n      }\n      var contentElement = this.getContentElement();\n      var scrollY = contentElement.getScrollY();\n\n      contentElement.scrollToY(\n        scrollY + (e.getDelta().y / 30) * this.getSingleStep()\n      );\n\n      var newScrollY = contentElement.getScrollY();\n\n      if (newScrollY != scrollY) {\n        e.stop();\n      }\n    },\n\n    /**\n     * When the element resizes we throw away the clone and trigger autosize again, otherwise the clone would have\n     * another width and the autosize calculation would be faulty.\n     *\n     * @param e {qx.event.type.Data} resize event.\n     */\n    _onResize(e) {\n      if (this.__areaClone) {\n        this.__areaClone.dispose();\n        this.__areaClone = null;\n        this.__autoSize();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      AUTO SIZE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adjust height of <code>TextArea</code> so that content fits without scroll bar.\n     *\n     */\n    __autoSize() {\n      if (this.isAutoSize()) {\n        var clone = this.__getAreaClone();\n\n        if (clone && this.getBounds()) {\n          // Remember original area height\n          this.__originalAreaHeight =\n            this.__originalAreaHeight || this._getAreaHeight();\n\n          var scrolledHeight = Math.round(this._getScrolledAreaHeight());\n\n          // Show scroll-bar when above maxHeight, if defined\n          if (this.getMaxHeight()) {\n            var insets = this.getInsets();\n            var innerMaxHeight =\n              -insets.top + this.getMaxHeight() - insets.bottom;\n            if (scrolledHeight > innerMaxHeight) {\n              this.getContentElement().setStyle(\"overflowY\", \"auto\");\n            } else {\n              this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n            }\n          }\n\n          // Never shrink below original area height\n          var desiredHeight = Math.max(\n            scrolledHeight,\n            this.__originalAreaHeight\n          );\n\n          // Set new height\n          this._setAreaHeight(desiredHeight);\n\n          // On init, the clone is not yet present. Try again on appear.\n        } else {\n          this.getContentElement().addListenerOnce(\"appear\", () => {\n            this.__autoSize();\n          });\n        }\n      }\n    },\n\n    /**\n     * Get actual height of <code>TextArea</code>\n     *\n     * @return {Integer} Height of <code>TextArea</code>\n     */\n    _getAreaHeight() {\n      return this.getInnerSize().height;\n    },\n\n    /**\n     * Set actual height of <code>TextArea</code>\n     *\n     * @param height {Integer} Desired height of <code>TextArea</code>\n     */\n    _setAreaHeight(height) {\n      if (this._getAreaHeight() !== height) {\n        this.__areaHeight = height;\n\n        qx.ui.core.queue.Layout.add(this);\n\n        // Apply height directly. This works-around a visual glitch in WebKit\n        // browsers where a line-break causes the text to be moved upwards\n        // for one line. Since this change appears instantly whereas the queue\n        // is computed later, a flicker is visible.\n        qx.ui.core.queue.Manager.flush();\n\n        this.__forceRewrap();\n      }\n    },\n\n    /**\n     * Get scrolled area height. Equals the total height of the <code>TextArea</code>,\n     * as if no scroll-bar was visible.\n     *\n     * @return {Integer} Height of scrolled area\n     */\n    _getScrolledAreaHeight() {\n      var clone = this.__getAreaClone();\n      var cloneDom = clone.getDomElement();\n\n      if (cloneDom) {\n        // Clone created but not yet in DOM. Try again.\n        if (!cloneDom.parentNode) {\n          qx.html.Element.flush();\n          return this._getScrolledAreaHeight();\n        }\n\n        // In WebKit and IE8, \"wrap\" must have been \"soft\" on DOM level before setting\n        // \"off\" can disable wrapping. To fix, make sure wrap is toggled.\n        // Otherwise, the height of an auto-size text area with wrapping\n        // disabled initially is incorrectly computed as if wrapping was enabled.\n        if (\n          qx.core.Environment.get(\"engine.name\") === \"webkit\" ||\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\"\n        ) {\n          clone.setWrap(!this.getWrap(), true);\n        }\n\n        clone.setWrap(this.getWrap(), true);\n\n        // Webkit needs overflow \"hidden\" in order to correctly compute height\n        if (\n          qx.core.Environment.get(\"engine.name\") === \"webkit\" ||\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\"\n        ) {\n          cloneDom.style.overflow = \"hidden\";\n        }\n\n        // IE >= 8 needs overflow \"visible\" in order to correctly compute height\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n          qx.core.Environment.get(\"browser.documentmode\") >= 8\n        ) {\n          cloneDom.style.overflow = \"visible\";\n          cloneDom.style.overflowX = \"hidden\";\n        }\n\n        // Update value\n        clone.setValue(this.getValue() || \"\");\n\n        // Force IE > 8 to update size measurements\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n          cloneDom.style.height = \"auto\";\n          qx.html.Element.flush();\n          cloneDom.style.height = \"0\";\n        }\n\n        // Recompute\n        this.__scrollCloneToBottom(clone);\n\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n          qx.core.Environment.get(\"browser.documentmode\") == 8\n        ) {\n          // Flush required for scrollTop to return correct value\n          // when initial value should be taken into consideration\n          if (!cloneDom.scrollTop) {\n            qx.html.Element.flush();\n          }\n        }\n\n        return cloneDom.scrollTop;\n      }\n    },\n\n    /**\n     * Returns the area clone.\n     *\n     * @return {Element|null} DOM Element or <code>null</code> if there is no\n     * original element\n     */\n    __getAreaClone() {\n      this.__areaClone = this.__areaClone || this.__createAreaClone();\n      return this.__areaClone;\n    },\n\n    /**\n     * Creates and prepares the area clone.\n     *\n     * @return {Element} Element\n     */\n    __createAreaClone() {\n      var orig, clone, cloneDom, cloneHtml;\n\n      orig = this.getContentElement();\n\n      // An existing DOM element is required\n      if (!orig.getDomElement()) {\n        return null;\n      }\n\n      // Create DOM clone\n      cloneDom = qx.bom.Element.clone(orig.getDomElement());\n\n      // Convert to qx.html Element\n      cloneHtml = new qx.html.Input(\"textarea\");\n      cloneHtml.useNode(cloneDom);\n      clone = cloneHtml;\n\n      // Push out of view\n      // Zero height (i.e. scrolled area equals height)\n      clone.setStyles(\n        {\n          position: \"absolute\",\n          top: 0,\n          left: \"-9999px\",\n          height: 0,\n          overflow: \"hidden\"\n        },\n\n        true\n      );\n\n      // Fix attributes\n      clone.removeAttribute(\"id\");\n      clone.removeAttribute(\"name\");\n      clone.setAttribute(\"tabIndex\", \"-1\");\n\n      // Copy value\n      clone.setValue(orig.getValue() || \"\");\n\n      // Attach to DOM\n      clone.insertBefore(orig);\n\n      // Make sure scrollTop is actual height\n      this.__scrollCloneToBottom(clone);\n\n      return clone;\n    },\n\n    /**\n     * Scroll <code>TextArea</code> to bottom. That way, scrollTop reflects the height\n     * of the <code>TextArea</code>.\n     *\n     * @param clone {Element} The <code>TextArea</code> to scroll\n     */\n    __scrollCloneToBottom(clone) {\n      clone = clone.getDomElement();\n      if (clone) {\n        clone.scrollTop = 10000;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      FIELD API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createInputElement() {\n      return new qx.html.Input(\"textarea\", {\n        overflowX: \"auto\",\n        overflowY: \"auto\"\n      });\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyWrap(value, old) {\n      this.getContentElement().setWrap(value);\n      if (this._placeholder) {\n        var whiteSpace = value ? \"normal\" : \"nowrap\";\n        this._placeholder.setStyle(\"whiteSpace\", whiteSpace);\n      }\n      this.__autoSize();\n    },\n\n    // property apply\n    _applyMinimalLineHeight() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    // property apply\n    _applyAutoSize(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__warnAutoSizeAndHeight();\n      }\n\n      if (value) {\n        this.__autoSize();\n        this.addListener(\"input\", this.__autoSize, this);\n\n        // This is done asynchronously on purpose. The style given would\n        // otherwise be overridden by the DOM changes queued in the\n        // property apply for wrap. See [BUG #4493] for more details.\n        if (!this.getBounds()) {\n          this.addListenerOnce(\"appear\", function () {\n            this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n          });\n        } else {\n          this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n        }\n      } else {\n        this.removeListener(\"input\", this.__autoSize);\n        this.getContentElement().setStyle(\"overflowY\", \"auto\");\n      }\n    },\n\n    // property apply\n    _applyDimension(value) {\n      super._applyDimension();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__warnAutoSizeAndHeight();\n      }\n\n      if (value === this.getMaxHeight()) {\n        this.__autoSize();\n      }\n    },\n\n    /**\n     * Force rewrapping of text.\n     *\n     * The distribution of characters depends on the space available.\n     * Unfortunately, browsers do not reliably (or not at all) rewrap text when\n     * the size of the text area changes.\n     *\n     * This method is called on change of the area's size.\n     */\n    __forceRewrap() {\n      var content = this.getContentElement();\n      var element = content.getDomElement();\n\n      // Temporarily increase width\n      var width = content.getStyle(\"width\");\n      content.setStyle(\"width\", parseInt(width, 10) + 1000 + \"px\", true);\n\n      // Force browser to render\n      if (element) {\n        qx.bom.element.Dimension.getWidth(element);\n      }\n\n      // Restore width\n      content.setStyle(\"width\", width, true);\n    },\n\n    /**\n     * Warn when both autoSize and height property are set.\n     *\n     */\n    __warnAutoSizeAndHeight() {\n      if (this.isAutoSize() && this.getHeight()) {\n        this.warn(\n          \"autoSize is ignored when the height property is set. \" +\n            \"If you want to set an initial height, use the minHeight \" +\n            \"property instead.\"\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _getContentHint() {\n      var hint = super._getContentHint();\n\n      // lines of text\n      hint.height = hint.height * this.getMinimalLineHeight();\n\n      // 20 character wide\n      hint.width = this._getTextSize().width * 20;\n\n      if (this.isAutoSize()) {\n        hint.height = this.__areaHeight || hint.height;\n      }\n\n      return hint;\n    }\n  },\n\n  destruct() {\n    this.setAutoSize(false);\n    if (this.__areaClone) {\n      this.__areaClone.dispose();\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}