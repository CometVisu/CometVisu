{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "AbstractField",
    "construct",
    "value",
    "initWrap",
    "addListener",
    "_onRoll",
    "_onResize",
    "properties",
    "wrap",
    "check",
    "init",
    "apply",
    "appearance",
    "refine",
    "singleStep",
    "minimalLineHeight",
    "autoSize",
    "members",
    "__areaClone",
    "__areaHeight",
    "__originalAreaHeight",
    "setValue",
    "__autoSize",
    "e",
    "getPointerType",
    "contentElement",
    "getContentElement",
    "scrollY",
    "getScrollY",
    "scrollToY",
    "getDelta",
    "y",
    "getSingleStep",
    "newScrollY",
    "stop",
    "dispose",
    "isAutoSize",
    "clone",
    "__getAreaClone",
    "getBounds",
    "_getAreaHeight",
    "scrolledHeight",
    "Math",
    "round",
    "_getScrolledAreaHeight",
    "getMaxHeight",
    "insets",
    "getInsets",
    "innerMaxHeight",
    "top",
    "bottom",
    "setStyle",
    "desiredHeight",
    "max",
    "_setAreaHeight",
    "addListenerOnce",
    "getInnerSize",
    "height",
    "core",
    "queue",
    "Layout",
    "add",
    "Manager",
    "flush",
    "__forceRewrap",
    "cloneDom",
    "getDomElement",
    "parentNode",
    "html",
    "Element",
    "Environment",
    "get",
    "setWrap",
    "getWrap",
    "style",
    "overflow",
    "overflowX",
    "getValue",
    "__scrollCloneToBottom",
    "scrollTop",
    "__createAreaClone",
    "orig",
    "cloneHtml",
    "bom",
    "Input",
    "useNode",
    "setStyles",
    "position",
    "left",
    "removeAttribute",
    "setAttribute",
    "insertBefore",
    "_createInputElement",
    "overflowY",
    "_applyWrap",
    "old",
    "_placeholder",
    "whiteSpace",
    "_applyMinimalLineHeight",
    "_applyAutoSize",
    "removeListener",
    "_applyDimension",
    "content",
    "element",
    "width",
    "getStyle",
    "parseInt",
    "Dimension",
    "getWidth",
    "__warnAutoSizeAndHeight",
    "getHeight",
    "warn",
    "_getContentHint",
    "hint",
    "getMinimalLineHeight",
    "_getTextSize",
    "destruct",
    "setAutoSize",
    "TextArea"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/TextArea.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Jonathan Wei√ü (jonathan_rass)\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * The TextField is a multi-line text input field.\n */\nqx.Class.define(\"qx.ui.form.TextArea\", {\n  extend: qx.ui.form.AbstractField,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param value {String?\"\"} The text area's initial value\n   */\n  construct(value) {\n    super(value);\n    this.initWrap();\n\n    this.addListener(\"roll\", this._onRoll, this);\n    this.addListener(\"resize\", this._onResize, this);\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /** Controls whether text wrap is activated or not. */\n    wrap: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyWrap\"\n    },\n\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"textarea\"\n    },\n\n    /** Factor for scrolling the <code>TextArea</code> with the mouse wheel. */\n    singleStep: {\n      check: \"Integer\",\n      init: 20\n    },\n\n    /** Minimal line height. On default this is set to four lines. */\n    minimalLineHeight: {\n      check: \"Integer\",\n      apply: \"_applyMinimalLineHeight\",\n      init: 4\n    },\n\n    /**\n     * Whether the <code>TextArea</code> should automatically adjust to\n     * the height of the content.\n     *\n     * To set the initial height, modify {@link #minHeight}. If you wish\n     * to set a minHeight below four lines of text, also set\n     * {@link #minimalLineHeight}. In order to limit growing to a certain\n     * height, set {@link #maxHeight} respectively. Please note that\n     * autoSize is ignored when the {@link #height} property is in use.\n     */\n    autoSize: {\n      check: \"Boolean\",\n      apply: \"_applyAutoSize\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __areaClone: null,\n    __areaHeight: null,\n    __originalAreaHeight: null,\n\n    // overridden\n    setValue(value) {\n      value = super.setValue(value);\n      this.__autoSize();\n\n      return value;\n    },\n\n    /**\n     * Handles the roll for scrolling the <code>TextArea</code>.\n     *\n     * @param e {qx.event.type.Roll} roll event.\n     */\n    _onRoll(e) {\n      // only wheel\n      if (e.getPointerType() != \"wheel\") {\n        return;\n      }\n      var contentElement = this.getContentElement();\n      var scrollY = contentElement.getScrollY();\n\n      contentElement.scrollToY(\n        scrollY + (e.getDelta().y / 30) * this.getSingleStep()\n      );\n\n      var newScrollY = contentElement.getScrollY();\n\n      if (newScrollY != scrollY) {\n        e.stop();\n      }\n    },\n\n    /**\n     * When the element resizes we throw away the clone and trigger autosize again, otherwise the clone would have\n     * another width and the autosize calculation would be faulty.\n     *\n     * @param e {qx.event.type.Data} resize event.\n     */\n    _onResize(e) {\n      if (this.__areaClone) {\n        this.__areaClone.dispose();\n        this.__areaClone = null;\n        this.__autoSize();\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      AUTO SIZE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adjust height of <code>TextArea</code> so that content fits without scroll bar.\n     *\n     */\n    __autoSize() {\n      if (this.isAutoSize()) {\n        var clone = this.__getAreaClone();\n\n        if (clone && this.getBounds()) {\n          // Remember original area height\n          this.__originalAreaHeight =\n            this.__originalAreaHeight || this._getAreaHeight();\n\n          var scrolledHeight = Math.round(this._getScrolledAreaHeight());\n\n          // Show scroll-bar when above maxHeight, if defined\n          if (this.getMaxHeight()) {\n            var insets = this.getInsets();\n            var innerMaxHeight =\n              -insets.top + this.getMaxHeight() - insets.bottom;\n            if (scrolledHeight > innerMaxHeight) {\n              this.getContentElement().setStyle(\"overflowY\", \"auto\");\n            } else {\n              this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n            }\n          }\n\n          // Never shrink below original area height\n          var desiredHeight = Math.max(\n            scrolledHeight,\n            this.__originalAreaHeight\n          );\n\n          // Set new height\n          this._setAreaHeight(desiredHeight);\n\n          // On init, the clone is not yet present. Try again on appear.\n        } else {\n          this.getContentElement().addListenerOnce(\"appear\", () => {\n            this.__autoSize();\n          });\n        }\n      }\n    },\n\n    /**\n     * Get actual height of <code>TextArea</code>\n     *\n     * @return {Integer} Height of <code>TextArea</code>\n     */\n    _getAreaHeight() {\n      return this.getInnerSize().height;\n    },\n\n    /**\n     * Set actual height of <code>TextArea</code>\n     *\n     * @param height {Integer} Desired height of <code>TextArea</code>\n     */\n    _setAreaHeight(height) {\n      if (this._getAreaHeight() !== height) {\n        this.__areaHeight = height;\n\n        qx.ui.core.queue.Layout.add(this);\n\n        // Apply height directly. This works-around a visual glitch in WebKit\n        // browsers where a line-break causes the text to be moved upwards\n        // for one line. Since this change appears instantly whereas the queue\n        // is computed later, a flicker is visible.\n        qx.ui.core.queue.Manager.flush();\n\n        this.__forceRewrap();\n      }\n    },\n\n    /**\n     * Get scrolled area height. Equals the total height of the <code>TextArea</code>,\n     * as if no scroll-bar was visible.\n     *\n     * @return {Integer} Height of scrolled area\n     */\n    _getScrolledAreaHeight() {\n      var clone = this.__getAreaClone();\n      var cloneDom = clone.getDomElement();\n\n      if (cloneDom) {\n        // Clone created but not yet in DOM. Try again.\n        if (!cloneDom.parentNode) {\n          qx.html.Element.flush();\n          return this._getScrolledAreaHeight();\n        }\n\n        // In WebKit and IE8, \"wrap\" must have been \"soft\" on DOM level before setting\n        // \"off\" can disable wrapping. To fix, make sure wrap is toggled.\n        // Otherwise, the height of an auto-size text area with wrapping\n        // disabled initially is incorrectly computed as if wrapping was enabled.\n        if (\n          qx.core.Environment.get(\"engine.name\") === \"webkit\" ||\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\"\n        ) {\n          clone.setWrap(!this.getWrap(), true);\n        }\n\n        clone.setWrap(this.getWrap(), true);\n\n        // Webkit needs overflow \"hidden\" in order to correctly compute height\n        if (\n          qx.core.Environment.get(\"engine.name\") === \"webkit\" ||\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\"\n        ) {\n          cloneDom.style.overflow = \"hidden\";\n        }\n\n        // IE >= 8 needs overflow \"visible\" in order to correctly compute height\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n          qx.core.Environment.get(\"browser.documentmode\") >= 8\n        ) {\n          cloneDom.style.overflow = \"visible\";\n          cloneDom.style.overflowX = \"hidden\";\n        }\n\n        // Update value\n        clone.setValue(this.getValue() || \"\");\n\n        // Force IE > 8 to update size measurements\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\") {\n          cloneDom.style.height = \"auto\";\n          qx.html.Element.flush();\n          cloneDom.style.height = \"0\";\n        }\n\n        // Recompute\n        this.__scrollCloneToBottom(clone);\n\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n          qx.core.Environment.get(\"browser.documentmode\") == 8\n        ) {\n          // Flush required for scrollTop to return correct value\n          // when initial value should be taken into consideration\n          if (!cloneDom.scrollTop) {\n            qx.html.Element.flush();\n          }\n        }\n\n        return cloneDom.scrollTop;\n      }\n    },\n\n    /**\n     * Returns the area clone.\n     *\n     * @return {Element|null} DOM Element or <code>null</code> if there is no\n     * original element\n     */\n    __getAreaClone() {\n      this.__areaClone = this.__areaClone || this.__createAreaClone();\n      return this.__areaClone;\n    },\n\n    /**\n     * Creates and prepares the area clone.\n     *\n     * @return {Element} Element\n     */\n    __createAreaClone() {\n      var orig, clone, cloneDom, cloneHtml;\n\n      orig = this.getContentElement();\n\n      // An existing DOM element is required\n      if (!orig.getDomElement()) {\n        return null;\n      }\n\n      // Create DOM clone\n      cloneDom = qx.bom.Element.clone(orig.getDomElement());\n\n      // Convert to qx.html Element\n      cloneHtml = new qx.html.Input(\"textarea\");\n      cloneHtml.useNode(cloneDom);\n      clone = cloneHtml;\n\n      // Push out of view\n      // Zero height (i.e. scrolled area equals height)\n      clone.setStyles(\n        {\n          position: \"absolute\",\n          top: 0,\n          left: \"-9999px\",\n          height: 0,\n          overflow: \"hidden\"\n        },\n\n        true\n      );\n\n      // Fix attributes\n      clone.removeAttribute(\"id\");\n      clone.removeAttribute(\"name\");\n      clone.setAttribute(\"tabIndex\", \"-1\");\n\n      // Copy value\n      clone.setValue(orig.getValue() || \"\");\n\n      // Attach to DOM\n      clone.insertBefore(orig);\n\n      // Make sure scrollTop is actual height\n      this.__scrollCloneToBottom(clone);\n\n      return clone;\n    },\n\n    /**\n     * Scroll <code>TextArea</code> to bottom. That way, scrollTop reflects the height\n     * of the <code>TextArea</code>.\n     *\n     * @param clone {Element} The <code>TextArea</code> to scroll\n     */\n    __scrollCloneToBottom(clone) {\n      clone = clone.getDomElement();\n      if (clone) {\n        clone.scrollTop = 10000;\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      FIELD API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createInputElement() {\n      return new qx.html.Input(\"textarea\", {\n        overflowX: \"auto\",\n        overflowY: \"auto\"\n      });\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyWrap(value, old) {\n      this.getContentElement().setWrap(value);\n      if (this._placeholder) {\n        var whiteSpace = value ? \"normal\" : \"nowrap\";\n        this._placeholder.setStyle(\"whiteSpace\", whiteSpace);\n      }\n      this.__autoSize();\n    },\n\n    // property apply\n    _applyMinimalLineHeight() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    // property apply\n    _applyAutoSize(value, old) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__warnAutoSizeAndHeight();\n      }\n\n      if (value) {\n        this.__autoSize();\n        this.addListener(\"input\", this.__autoSize, this);\n\n        // This is done asynchronously on purpose. The style given would\n        // otherwise be overridden by the DOM changes queued in the\n        // property apply for wrap. See [BUG #4493] for more details.\n        if (!this.getBounds()) {\n          this.addListenerOnce(\"appear\", function () {\n            this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n          });\n        } else {\n          this.getContentElement().setStyle(\"overflowY\", \"hidden\");\n        }\n      } else {\n        this.removeListener(\"input\", this.__autoSize);\n        this.getContentElement().setStyle(\"overflowY\", \"auto\");\n      }\n    },\n\n    // property apply\n    _applyDimension(value) {\n      super._applyDimension();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.__warnAutoSizeAndHeight();\n      }\n\n      if (value === this.getMaxHeight()) {\n        this.__autoSize();\n      }\n    },\n\n    /**\n     * Force rewrapping of text.\n     *\n     * The distribution of characters depends on the space available.\n     * Unfortunately, browsers do not reliably (or not at all) rewrap text when\n     * the size of the text area changes.\n     *\n     * This method is called on change of the area's size.\n     */\n    __forceRewrap() {\n      var content = this.getContentElement();\n      var element = content.getDomElement();\n\n      // Temporarily increase width\n      var width = content.getStyle(\"width\");\n      content.setStyle(\"width\", parseInt(width, 10) + 1000 + \"px\", true);\n\n      // Force browser to render\n      if (element) {\n        qx.bom.element.Dimension.getWidth(element);\n      }\n\n      // Restore width\n      content.setStyle(\"width\", width, true);\n    },\n\n    /**\n     * Warn when both autoSize and height property are set.\n     *\n     */\n    __warnAutoSizeAndHeight() {\n      if (this.isAutoSize() && this.getHeight()) {\n        this.warn(\n          \"autoSize is ignored when the height property is set. \" +\n            \"If you want to set an initial height, use the minHeight \" +\n            \"property instead.\"\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _getContentHint() {\n      var hint = super._getContentHint();\n\n      // lines of text\n      hint.height = hint.height * this.getMinimalLineHeight();\n\n      // 20 character wide\n      hint.width = this._getTextSize().width * 20;\n\n      if (this.isAutoSize()) {\n        hint.height = this.__areaHeight || hint.height;\n      }\n\n      return hint;\n    }\n  },\n\n  destruct() {\n    this.setAutoSize(false);\n    if (this.__areaClone) {\n      this.__areaClone.dispose();\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}