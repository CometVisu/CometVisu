{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "basic",
    "Atom",
    "include",
    "core",
    "MExecutable",
    "implement",
    "form",
    "IExecutable",
    "construct",
    "label",
    "icon",
    "command",
    "setCommand",
    "getContentElement",
    "setAttribute",
    "addListener",
    "_onPointerOver",
    "_onPointerOut",
    "_onPointerDown",
    "_onPointerUp",
    "_onTap",
    "_onKeyDown",
    "_onKeyUp",
    "e",
    "stopPropagation",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "members",
    "_forwardStates",
    "focused",
    "hovered",
    "pressed",
    "disabled",
    "press",
    "hasState",
    "addState",
    "release",
    "removeState",
    "reset",
    "isEnabled",
    "getTarget",
    "isLeftPressed",
    "capture",
    "releaseCapture",
    "hasPressed",
    "hasAbandoned",
    "execute",
    "getKeyIdentifier",
    "Button"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/form/Button.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A Button widget which supports various states and allows it to be used\n * via the mouse, touch, pen and the keyboard.\n *\n * If the user presses the button by clicking on it, or the <code>Enter</code> or\n * <code>Space</code> keys, the button fires an {@link qx.ui.core.MExecutable#execute} event.\n *\n * If the {@link qx.ui.core.MExecutable#command} property is set, the\n * command is executed as well.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   var button = new qx.ui.form.Button(\"Hello World\");\n *\n *   button.addListener(\"execute\", function(e) {\n *     alert(\"Button was clicked\");\n *   }, this);\n *\n *   this.getRoot().add(button);\n * </pre>\n *\n * This example creates a button with the label \"Hello World\" and attaches an\n * event listener to the {@link #execute} event.\n *\n * *External Documentation*\n *\n * <a href='http://qooxdoo.org/docs/#desktop/widget/button.md' target='_blank'>\n * Documentation of this widget in the qooxdoo manual.</a>\n */\nqx.Class.define(\"qx.ui.form.Button\", {\n  extend: qx.ui.basic.Atom,\n  include: [qx.ui.core.MExecutable],\n  implement: [qx.ui.form.IExecutable],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param label {String} label of the atom\n   * @param icon {String?null} Icon URL of the atom\n   * @param command {qx.ui.command.Command?null} Command instance to connect with\n   */\n  construct(label, icon, command) {\n    super(label, icon);\n\n    if (command != null) {\n      this.setCommand(command);\n    }\n\n    // ARIA attrs\n    this.getContentElement().setAttribute(\"role\", \"button\");\n\n    // Add listeners\n    this.addListener(\"pointerover\", this._onPointerOver);\n    this.addListener(\"pointerout\", this._onPointerOut);\n    this.addListener(\"pointerdown\", this._onPointerDown);\n    this.addListener(\"pointerup\", this._onPointerUp);\n    this.addListener(\"tap\", this._onTap);\n\n    this.addListener(\"keydown\", this._onKeyDown);\n    this.addListener(\"keyup\", this._onKeyUp);\n\n    // Stop events\n    this.addListener(\"dblclick\", function (e) {\n      e.stopPropagation();\n    });\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    appearance: {\n      refine: true,\n      init: \"button\"\n    },\n\n    // overridden\n    focusable: {\n      refine: true,\n      init: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates: {\n      focused: true,\n      hovered: true,\n      pressed: true,\n      disabled: true\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      USER API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Manually press the button\n     */\n    press() {\n      if (this.hasState(\"abandoned\")) {\n        return;\n      }\n\n      this.addState(\"pressed\");\n    },\n\n    /**\n     * Manually release the button\n     */\n    release() {\n      if (this.hasState(\"pressed\")) {\n        this.removeState(\"pressed\");\n      }\n    },\n\n    /**\n     * Completely reset the button (remove all states)\n     */\n    reset() {\n      this.removeState(\"pressed\");\n      this.removeState(\"abandoned\");\n      this.removeState(\"hovered\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Listener method for \"pointerover\" event\n     * <ul>\n     * <li>Adds state \"hovered\"</li>\n     * <li>Removes \"abandoned\" and adds \"pressed\" state (if \"abandoned\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Mouse event\n     */\n    _onPointerOver(e) {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      if (this.hasState(\"abandoned\")) {\n        this.removeState(\"abandoned\");\n        this.addState(\"pressed\");\n      }\n\n      this.addState(\"hovered\");\n    },\n\n    /**\n     * Listener method for \"pointerout\" event\n     * <ul>\n     * <li>Removes \"hovered\" state</li>\n     * <li>Adds \"abandoned\" and removes \"pressed\" state (if \"pressed\" state is set)</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Mouse event\n     */\n    _onPointerOut(e) {\n      if (!this.isEnabled() || e.getTarget() !== this) {\n        return;\n      }\n\n      this.removeState(\"hovered\");\n\n      if (this.hasState(\"pressed\")) {\n        this.removeState(\"pressed\");\n        this.addState(\"abandoned\");\n      }\n    },\n\n    /**\n     * Listener method for \"pointerdown\" event\n     * <ul>\n     * <li>Removes \"abandoned\" state</li>\n     * <li>Adds \"pressed\" state</li>\n     * </ul>\n     *\n     * @param e {qx.event.type.Pointer} Mouse event\n     */\n    _onPointerDown(e) {\n      if (!e.isLeftPressed()) {\n        return;\n      }\n\n      e.stopPropagation();\n\n      // Activate capturing if the button get a pointerout while\n      // the button is pressed.\n      this.capture();\n\n      this.removeState(\"abandoned\");\n      this.addState(\"pressed\");\n    },\n\n    /**\n     * Listener method for \"pointerup\" event\n     * <ul>\n     * <li>Removes \"pressed\" state (if set)</li>\n     * <li>Removes \"abandoned\" state (if set)</li>\n     * <li>Adds \"hovered\" state (if \"abandoned\" state is not set)</li>\n     *</ul>\n     *\n     * @param e {qx.event.type.Pointer} Mouse event\n     */\n    _onPointerUp(e) {\n      this.releaseCapture();\n\n      // We must remove the states before executing the command\n      // because in cases were the window lost the focus while\n      // executing we get the capture phase back (mouseout).\n      var hasPressed = this.hasState(\"pressed\");\n      var hasAbandoned = this.hasState(\"abandoned\");\n\n      if (hasPressed) {\n        this.removeState(\"pressed\");\n      }\n\n      if (hasAbandoned) {\n        this.removeState(\"abandoned\");\n      }\n\n      e.stopPropagation();\n    },\n\n    /**\n     * Listener method for \"tap\" event which stops the propagation.\n     *\n     * @param e {qx.event.type.Pointer} Pointer event\n     */\n    _onTap(e) {\n      // \"execute\" is fired here so that the button can be dragged\n      // without executing it (e.g. in a TabBar with overflow)\n      this.execute();\n      e.stopPropagation();\n    },\n\n    /**\n     * Listener method for \"keydown\" event.<br/>\n     * Removes \"abandoned\" and adds \"pressed\" state\n     * for the keys \"Enter\" or \"Space\"\n     *\n     * @param e {Event} Key event\n     */\n    _onKeyDown(e) {\n      switch (e.getKeyIdentifier()) {\n        case \"Enter\":\n        case \"Space\":\n          this.removeState(\"abandoned\");\n          this.addState(\"pressed\");\n          e.stopPropagation();\n      }\n    },\n\n    /**\n     * Listener method for \"keyup\" event.<br/>\n     * Removes \"abandoned\" and \"pressed\" state (if \"pressed\" state is set)\n     * for the keys \"Enter\" or \"Space\"\n     *\n     * @param e {Event} Key event\n     */\n    _onKeyUp(e) {\n      switch (e.getKeyIdentifier()) {\n        case \"Enter\":\n        case \"Space\":\n          if (this.hasState(\"pressed\")) {\n            this.removeState(\"abandoned\");\n            this.removeState(\"pressed\");\n            this.execute();\n            e.stopPropagation();\n          }\n      }\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}