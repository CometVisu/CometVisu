{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/renderer/table/cell/Icon.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "ui",
    "progressive",
    "renderer",
    "table",
    "cell",
    "Abstract",
    "construct",
    "aliasManager",
    "util",
    "AliasManager",
    "getInstance",
    "resourceManager",
    "ResourceManager",
    "blankImg",
    "resolve",
    "__imageBlank",
    "toUri",
    "members",
    "getBlankImage",
    "_identifyImage",
    "cellInfo",
    "Error",
    "_getCellStyle",
    "ret",
    "_getContentHtml",
    "html",
    "imageData",
    "__getImageData",
    "push",
    "core",
    "Environment",
    "get",
    "test",
    "url",
    "imageWidth",
    "imageHeight",
    "tooltip",
    "extras",
    "join",
    "Icon"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n     2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Carsten Lergenmueller (carstenl)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Abstract Icon cell renderer.\n */\nqx.Class.define(\"qx.ui.progressive.renderer.table.cell.Icon\",\n{\n  type       : \"abstract\",\n  extend     : qx.ui.progressive.renderer.table.cell.Abstract,\n\n\n  /** Create a new instance of an Icon cell renderer */\n  construct : function()\n  {\n    this.base(arguments);\n\n    var aliasManager = qx.util.AliasManager.getInstance();\n    var resourceManager = qx.util.ResourceManager.getInstance();\n    var blankImg = aliasManager.resolve(\"qx/static/blank.gif\");\n\n    this.__imageBlank = resourceManager.toUri(blankImg);\n  },\n\n\n  members :\n  {\n    /**\n     * A blank image for use as a spacer in place of another image\n     */\n    __imageBlank : null,\n\n\n    /**\n     * Retrieve the URI for a blank image\n     *\n     * @return {String}\n     *   The URI of the blank image.\n     */\n    getBlankImage : function()\n    {\n      return this.__imageBlank;\n    },\n\n    /**\n     * Identify the image to be displayed in the cell.\n     *\n     * @param cellInfo {Map}\n     *   Information about the cell being renderered, including:\n     *   <ul>\n     *     <li>state</li>\n     *     <li>rowDiv</li>\n     *     <li>stylesheet</li>\n     *     <li>element</li>\n     *     <li>dataIndex</li>\n     *     <li>cellData</li>\n     *     <li>height</li>\n     *   </ul>\n     *\n     * @return {Map}\n     *   The returned map should contain at least the <i>url</i> field, but\n     *   may contain any others of these:\n     *\n     *   <dl>\n     *     <dt>\n     *       url\n     *     </dt>\n     *     <dd>\n     *       The URL of the image to be displayed\n     *     </dd>\n     *\n     *     <dt>\n     *       imageWidth\n     *     </dt>\n     *     <dd>\n     *       The width at which the image should be displayed\n     *     </dd>\n     *\n     *     <dt>\n     *       imageHeight\n     *     </dt>\n     *     <dd>\n     *       The height at which the image should be displayed\n     *     </dd>\n     *\n     *     <dt>\n     *       extras\n     *     </dt>\n     *     <dd>\n     *       Any extra attributes to be include in the 'image' tag.\n     *     </dd>\n     *   </dl>\n     */\n    _identifyImage : function(cellInfo)\n    {\n      throw new Error(\"_identifyImage() is abstract\");\n    },\n\n    // overridden\n    _getCellStyle : function(cellInfo)\n    {\n      var ret =\n        this.base(arguments, cellInfo) +\n        \"text-align:center;\" +\n        \"vertical-align:middle;\";\n      return ret;\n    },\n\n    // overridden\n    _getContentHtml : function(cellInfo)\n    {\n      var html = [ ];\n      var imageData = this.__getImageData(cellInfo);\n\n      // Start the image tag\n      html.push('<img ');\n\n      // Add magic to make png images work in IE\n      if (qx.core.Environment.get(\"css.alphaimageloaderneeded\") &&\n          /\\.png$/i.test(imageData.url))\n      {\n        html.push('src=\"', this.__imageBlank, '\" style=\"filter:',\n                  \"progid:DXImageTransform.Microsoft.AlphaImageLoader(src='\",\n                  imageData.url,\n                  \"',sizingMethod='scale')\",\n                  '\" ');\n      }\n      else\n      {\n        html.push('src=\"', imageData.url, '\" ');\n      }\n\n      // If image width is specified...\n      if (imageData.imageWidth)\n      {\n        // ... then add it.\n        html.push(\" width='\", imageData.imageWidth, \"px'\");\n      }\n\n      // If image height is specified...\n      if (imageData.imageHeight)\n      {\n        // ... then add it.\n        html.push(\" height='\", imageData.imageHeight, \"px'\");\n      }\n\n      // Move the image off of the top border\n      html.push(\" style='padding-top:2px;'\");\n\n      // If a tooltip is specified...\n      if (imageData.tooltip)\n      {\n        // ... then add it.\n        html.push(\" title='\", imageData.tooltip, \"'\");\n      }\n\n      // If there are any extra parameters specified, add them now.\n      if (imageData.extras)\n      {\n        html.push(imageData.extras);\n      }\n\n      // All done.\n      html.push(\">\");\n\n      // Give 'em what they came for\n      return html.join(\"\");\n    },\n\n    /**\n     * Obtain the image data (url, tooltip) that's appropriate for this cell\n     *\n     * @param cellInfo {Map}\n     *   Information about the cell being renderered, including:\n     *   <ul>\n     *     <li>state</li>\n     *     <li>rowDiv</li>\n     *     <li>stylesheet</li>\n     *     <li>element</li>\n     *     <li>dataIndex</li>\n     *     <li>cellData</li>\n     *     <li>height</li>\n     *   </ul>\n     *\n     * @return {Map}\n     *   See {@link #_identifyImage}\n     */\n    __getImageData : function(cellInfo)\n    {\n      // Query the subclass about image and tooltip\n      var imageData = this._identifyImage(cellInfo);\n\n      // If subclass refuses to give map, construct it\n      if (imageData == null || typeof imageData == \"string\")\n      {\n        imageData =\n        {\n          url     : imageData,\n          tooltip : null\n        };\n      }\n\n      // If subclass gave null as url, replace with url to empty image\n      if (imageData.url == null)\n      {\n        imageData.url = this.__imageBlank;\n      }\n\n      return imageData;\n    }\n  }\n});\n"
  ]
}