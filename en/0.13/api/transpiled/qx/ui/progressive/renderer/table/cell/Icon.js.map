{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "ui",
    "progressive",
    "renderer",
    "table",
    "cell",
    "Abstract",
    "construct",
    "aliasManager",
    "util",
    "AliasManager",
    "getInstance",
    "resourceManager",
    "ResourceManager",
    "blankImg",
    "resolve",
    "_imageBlank",
    "toUri",
    "members",
    "getBlankImage",
    "_identifyImage",
    "cellInfo",
    "Error",
    "_getCellStyle",
    "ret",
    "_getContentHtml",
    "html",
    "imageData",
    "_getImageData",
    "push",
    "core",
    "Environment",
    "get",
    "test",
    "url",
    "imageWidth",
    "imageHeight",
    "tooltip",
    "extras",
    "join",
    "Icon"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/renderer/table/cell/Icon.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n     2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Carsten Lergenmueller (carstenl)\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Abstract Icon cell renderer.\n *\n * @asset(qx/static/blank.gif)\n */\nqx.Class.define(\"qx.ui.progressive.renderer.table.cell.Icon\", {\n  type: \"abstract\",\n  extend: qx.ui.progressive.renderer.table.cell.Abstract,\n\n  /** Create a new instance of an Icon cell renderer */\n  construct() {\n    super();\n\n    var aliasManager = qx.util.AliasManager.getInstance();\n    var resourceManager = qx.util.ResourceManager.getInstance();\n    var blankImg = aliasManager.resolve(\"qx/static/blank.gif\");\n\n    this._imageBlank = resourceManager.toUri(blankImg);\n  },\n\n  members: {\n    /**\n     * A blank image for use as a spacer in place of another image\n     */\n    _imageBlank: null,\n\n    /**\n     * Retrieve the URI for a blank image\n     *\n     * @return {String}\n     *   The URI of the blank image.\n     */\n    getBlankImage() {\n      return this._imageBlank;\n    },\n\n    /**\n     * Identify the image to be displayed in the cell.\n     *\n     * @param cellInfo {Map}\n     *   Information about the cell being renderered, including:\n     *   <ul>\n     *     <li>state</li>\n     *     <li>rowDiv</li>\n     *     <li>stylesheet</li>\n     *     <li>element</li>\n     *     <li>dataIndex</li>\n     *     <li>cellData</li>\n     *     <li>height</li>\n     *   </ul>\n     *\n     * @return {Map}\n     *   The returned map should contain at least the <i>url</i> field, but\n     *   may contain any others of these:\n     *\n     *   <dl>\n     *     <dt>\n     *       url\n     *     </dt>\n     *     <dd>\n     *       The URL of the image to be displayed\n     *     </dd>\n     *\n     *     <dt>\n     *       imageWidth\n     *     </dt>\n     *     <dd>\n     *       The width at which the image should be displayed\n     *     </dd>\n     *\n     *     <dt>\n     *       imageHeight\n     *     </dt>\n     *     <dd>\n     *       The height at which the image should be displayed\n     *     </dd>\n     *\n     *     <dt>\n     *       extras\n     *     </dt>\n     *     <dd>\n     *       Any extra attributes to be include in the 'image' tag.\n     *     </dd>\n     *   </dl>\n     */\n    _identifyImage(cellInfo) {\n      throw new Error(\"_identifyImage() is abstract\");\n    },\n\n    // overridden\n    _getCellStyle(cellInfo) {\n      var ret =\n        super._getCellStyle(cellInfo) +\n        \"text-align:center;\" +\n        \"vertical-align:middle;\";\n      return ret;\n    },\n\n    // overridden\n    _getContentHtml(cellInfo) {\n      var html = [];\n      var imageData = this._getImageData(cellInfo);\n\n      // Start the image tag\n      html.push(\"<img \");\n\n      // Add magic to make png images work in IE\n      if (\n        qx.core.Environment.get(\"css.alphaimageloaderneeded\") &&\n        /\\.png$/i.test(imageData.url)\n      ) {\n        html.push(\n          'src=\"',\n          this._imageBlank,\n          '\" style=\"filter:',\n          \"progid:DXImageTransform.Microsoft.AlphaImageLoader(src='\",\n          imageData.url,\n          \"',sizingMethod='scale')\",\n          '\" '\n        );\n      } else {\n        html.push('src=\"', imageData.url, '\" ');\n      }\n\n      // If image width is specified...\n      if (imageData.imageWidth) {\n        // ... then add it.\n        html.push(\" width='\", imageData.imageWidth, \"px'\");\n      }\n\n      // If image height is specified...\n      if (imageData.imageHeight) {\n        // ... then add it.\n        html.push(\" height='\", imageData.imageHeight, \"px'\");\n      }\n\n      // Move the image off of the top border\n      html.push(\" style='padding-top:2px;'\");\n\n      // If a tooltip is specified...\n      if (imageData.tooltip) {\n        // ... then add it.\n        html.push(\" title='\", imageData.tooltip, \"'\");\n      }\n\n      // If there are any extra parameters specified, add them now.\n      if (imageData.extras) {\n        html.push(imageData.extras);\n      }\n\n      // All done.\n      html.push(\">\");\n\n      // Give 'em what they came for\n      return html.join(\"\");\n    },\n\n    /**\n     * Obtain the image data (url, tooltip) that's appropriate for this cell\n     *\n     * @param cellInfo {Map}\n     *   Information about the cell being renderered, including:\n     *   <ul>\n     *     <li>state</li>\n     *     <li>rowDiv</li>\n     *     <li>stylesheet</li>\n     *     <li>element</li>\n     *     <li>dataIndex</li>\n     *     <li>cellData</li>\n     *     <li>height</li>\n     *   </ul>\n     *\n     * @return {Map}\n     *   See {@link #_identifyImage}\n     */\n    _getImageData(cellInfo) {\n      // Query the subclass about image and tooltip\n      var imageData = this._identifyImage(cellInfo);\n\n      // If subclass refuses to give map, construct it\n      if (imageData == null || typeof imageData == \"string\") {\n        imageData = {\n          url: imageData,\n          tooltip: null\n        };\n      }\n\n      // If subclass gave null as url, replace with url to empty image\n      if (imageData.url == null) {\n        imageData.url = this._imageBlank;\n      }\n\n      return imageData;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}