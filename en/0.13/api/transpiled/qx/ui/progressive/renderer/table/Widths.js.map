{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "numColumns",
    "constructor",
    "call",
    "__columnData",
    "i",
    "ui",
    "ColumnData",
    "members",
    "getData",
    "set",
    "column",
    "map",
    "key",
    "setWidth",
    "setMinWidth",
    "setMaxWidth",
    "Error",
    "width",
    "length",
    "setColumnWidth",
    "progressive",
    "renderer",
    "table",
    "Widths"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/renderer/table/Widths.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2007-2008 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Column width array for a whole set of columns\r\n */\r\nqx.Class.define(\"qx.ui.progressive.renderer.table.Widths\", {\r\n  extend: qx.core.Object,\r\n\r\n  /**\r\n   * @param numColumns {Integer}\r\n   *   The number of columns being used.\r\n   */\r\n  construct(numColumns) {\r\n    super();\r\n\r\n    // Create an array of the specified number of columns, and use the default\r\n    // column data.\r\n    this.__columnData = [];\r\n    for (var i = 0; i < numColumns; i++) {\r\n      this.__columnData[i] = new qx.ui.core.ColumnData();\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __columnData: null,\r\n\r\n    /**\r\n     * Get the array of column data.\r\n     *\r\n     * @return {Array}\r\n     *   Array of column data\r\n     *\r\n     */\r\n    getData() {\r\n      return this.__columnData;\r\n    },\r\n\r\n    /**\r\n     * Set the width, minimum width and/or maximum width of a column at one\r\n     * time.\r\n     *\r\n     * @param column {Integer}\r\n     *   The column number whose attributes are being set.\r\n     *\r\n     * @param map {Map}\r\n     *   An object with any or all of the three members, \"width\", \"minWidth\",\r\n     *   \"maxWidth\".  The property values are as described for {@link\r\n     *   #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\r\n     *   respectively.\r\n     *\r\n     */\r\n    set(column, map) {\r\n      for (var key in map) {\r\n        switch (key) {\r\n          case \"width\":\r\n            this.setWidth(column, map[key]);\r\n            break;\r\n\r\n          case \"minWidth\":\r\n            this.setMinWidth(column, map[key]);\r\n            break;\r\n\r\n          case \"maxWidth\":\r\n            this.setMaxWidth(column, map[key]);\r\n            break;\r\n\r\n          default:\r\n            throw new Error(\"Unrecognized key: \" + key);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Set the width of a column.\r\n     *\r\n     *\r\n     * @param column {Integer} The column whose width is to be set\r\n     *\r\n     * @param width {Integer|String}\r\n     *   The width of the specified column.  The width may be specified as\r\n     *   integer number of pixels (e.g. 100), a string representing percentage\r\n     *   of the inner width of the Table (e.g. \"25%\"), or a string\r\n     *   representing a flex width (e.g. \"1*\").\r\n     *\r\n     *\r\n     * @throws {Error}\r\n     *   Error is thrown if the provided column number is out of the range.\r\n     */\r\n    setWidth(column, width) {\r\n      if (column > this.__columnData.length - 1 || column < 0) {\r\n        throw new Error(\"Column number out of range\");\r\n      }\r\n\r\n      this.__columnData[column].setColumnWidth(width);\r\n    },\r\n\r\n    /**\r\n     * Set the minimum width of a column.\r\n     *\r\n     *\r\n     * @param column {Integer}\r\n     *   The column whose minimum width is to be set\r\n     *\r\n     * @param width {Integer}\r\n     *   The minimum width of the specified column.\r\n     *\r\n     *\r\n     * @throws {Error}\r\n     *   Error is thrown if the provided column number is out of the range.\r\n     */\r\n    setMinWidth(column, width) {\r\n      if (column > this.__columnData.length - 1 || column < 0) {\r\n        throw new Error(\"Column number out of range\");\r\n      }\r\n\r\n      this.__columnData[column].setMinWidth(width);\r\n    },\r\n\r\n    /**\r\n     * Set the maximum width of a column.\r\n     *\r\n     *\r\n     * @param column {Integer}\r\n     *   The column whose maximum width is to be set\r\n     *\r\n     * @param width {Integer}\r\n     *   The maximum width of the specified column.\r\n     *\r\n     *\r\n     * @throws {Error}\r\n     *   Error is thrown if the provided column number is out of the range.\r\n     */\r\n    setMaxWidth(column, width) {\r\n      if (column > this.__columnData.length - 1 || column < 0) {\r\n        throw new Error(\"Column number out of range\");\r\n      }\r\n\r\n      this.__columnData[column].setMaxWidth(width);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,yCAAyC,EAAE;IACzDC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IAEtB;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,UAAU,EAAE;MACpBV,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAG,WAAA,CAAAC,IAAA;;MAEA;MACA;MACA,IAAI,CAACC,SAAY,GAAG,EAAE;MACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,EAAEI,CAAC,EAAE,EAAE;QACnC,IAAI,CAACD,SAAY,CAACC,CAAC,CAAC,GAAG,IAAId,EAAE,CAACe,EAAE,CAACR,IAAI,CAACS,UAAU,CAAC,CAAC;MACpD;IACF,CAAC;IAEDC,OAAO,EAAE;MACPJ,SAAY,EAAE,IAAI;MAElB;AACJ;AACA;AACA;AACA;AACA;AACA;MACIK,OAAO,WAAAA,QAAA,EAAG;QACR,OAAO,IAAI,CAACL,SAAY;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIM,GAAG,WAAAA,IAACC,MAAM,EAAEC,GAAG,EAAE;QACf,KAAK,IAAIC,GAAG,IAAID,GAAG,EAAE;UACnB,QAAQC,GAAG;YACT,KAAK,OAAO;cACV,IAAI,CAACC,QAAQ,CAACH,MAAM,EAAEC,GAAG,CAACC,GAAG,CAAC,CAAC;cAC/B;YAEF,KAAK,UAAU;cACb,IAAI,CAACE,WAAW,CAACJ,MAAM,EAAEC,GAAG,CAACC,GAAG,CAAC,CAAC;cAClC;YAEF,KAAK,UAAU;cACb,IAAI,CAACG,WAAW,CAACL,MAAM,EAAEC,GAAG,CAACC,GAAG,CAAC,CAAC;cAClC;YAEF;cACE,MAAM,IAAII,KAAK,CAAC,oBAAoB,GAAGJ,GAAG,CAAC;UAC/C;QACF;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,WAAAA,SAACH,MAAM,EAAEO,KAAK,EAAE;QACtB,IAAIP,MAAM,GAAG,IAAI,CAACP,SAAY,CAACe,MAAM,GAAG,CAAC,IAAIR,MAAM,GAAG,CAAC,EAAE;UACvD,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QAEA,IAAI,CAACb,SAAY,CAACO,MAAM,CAAC,CAACS,cAAc,CAACF,KAAK,CAAC;MACjD,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIH,WAAW,WAAAA,YAACJ,MAAM,EAAEO,KAAK,EAAE;QACzB,IAAIP,MAAM,GAAG,IAAI,CAACP,SAAY,CAACe,MAAM,GAAG,CAAC,IAAIR,MAAM,GAAG,CAAC,EAAE;UACvD,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QAEA,IAAI,CAACb,SAAY,CAACO,MAAM,CAAC,CAACI,WAAW,CAACG,KAAK,CAAC;MAC9C,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIF,WAAW,WAAAA,YAACL,MAAM,EAAEO,KAAK,EAAE;QACzB,IAAIP,MAAM,GAAG,IAAI,CAACP,SAAY,CAACe,MAAM,GAAG,CAAC,IAAIR,MAAM,GAAG,CAAC,EAAE;UACvD,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QAEA,IAAI,CAACb,SAAY,CAACO,MAAM,CAAC,CAACK,WAAW,CAACE,KAAK,CAAC;MAC9C;IACF;EACF,CAAC,CAAC;EA5JF3B,EAAE,CAACe,EAAE,CAACe,WAAW,CAACC,QAAQ,CAACC,KAAK,CAACC,MAAM,CAAC9B,aAAa,GAAGA,aAAa;AAAC"
}