{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "numColumns",
    "__columnData",
    "i",
    "ui",
    "ColumnData",
    "members",
    "getData",
    "set",
    "column",
    "map",
    "key",
    "setWidth",
    "setMinWidth",
    "setMaxWidth",
    "Error",
    "width",
    "length",
    "setColumnWidth",
    "progressive",
    "renderer",
    "table",
    "Widths"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/renderer/table/Widths.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Column width array for a whole set of columns\n */\nqx.Class.define(\"qx.ui.progressive.renderer.table.Widths\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param numColumns {Integer}\n   *   The number of columns being used.\n   */\n  construct(numColumns) {\n    super();\n\n    // Create an array of the specified number of columns, and use the default\n    // column data.\n    this.__columnData = [];\n    for (var i = 0; i < numColumns; i++) {\n      this.__columnData[i] = new qx.ui.core.ColumnData();\n    }\n  },\n\n  members: {\n    __columnData: null,\n\n    /**\n     * Get the array of column data.\n     *\n     * @return {Array}\n     *   Array of column data\n     *\n     */\n    getData() {\n      return this.__columnData;\n    },\n\n    /**\n     * Set the width, minimum width and/or maximum width of a column at one\n     * time.\n     *\n     * @param column {Integer}\n     *   The column number whose attributes are being set.\n     *\n     * @param map {Map}\n     *   An object with any or all of the three members, \"width\", \"minWidth\",\n     *   \"maxWidth\".  The property values are as described for {@link\n     *   #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n     *   respectively.\n     *\n     */\n    set(column, map) {\n      for (var key in map) {\n        switch (key) {\n          case \"width\":\n            this.setWidth(column, map[key]);\n            break;\n\n          case \"minWidth\":\n            this.setMinWidth(column, map[key]);\n            break;\n\n          case \"maxWidth\":\n            this.setMaxWidth(column, map[key]);\n            break;\n\n          default:\n            throw new Error(\"Unrecognized key: \" + key);\n        }\n      }\n    },\n\n    /**\n     * Set the width of a column.\n     *\n     *\n     * @param column {Integer} The column whose width is to be set\n     *\n     * @param width {Integer|String}\n     *   The width of the specified column.  The width may be specified as\n     *   integer number of pixels (e.g. 100), a string representing percentage\n     *   of the inner width of the Table (e.g. \"25%\"), or a string\n     *   representing a flex width (e.g. \"1*\").\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setWidth(column, width) {\n      if (column > this.__columnData.length - 1 || column < 0) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setColumnWidth(width);\n    },\n\n    /**\n     * Set the minimum width of a column.\n     *\n     *\n     * @param column {Integer}\n     *   The column whose minimum width is to be set\n     *\n     * @param width {Integer}\n     *   The minimum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMinWidth(column, width) {\n      if (column > this.__columnData.length - 1 || column < 0) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setMinWidth(width);\n    },\n\n    /**\n     * Set the maximum width of a column.\n     *\n     *\n     * @param column {Integer}\n     *   The column whose maximum width is to be set\n     *\n     * @param width {Integer}\n     *   The maximum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMaxWidth(column, width) {\n      if (column > this.__columnData.length - 1 || column < 0) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setMaxWidth(width);\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}