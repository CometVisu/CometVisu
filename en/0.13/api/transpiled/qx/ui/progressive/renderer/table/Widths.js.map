{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "numColumns",
    "__columnData",
    "i",
    "ui",
    "ColumnData",
    "members",
    "getData",
    "set",
    "column",
    "map",
    "key",
    "setWidth",
    "setMinWidth",
    "setMaxWidth",
    "Error",
    "width",
    "length",
    "setColumnWidth",
    "progressive",
    "renderer",
    "table",
    "Widths"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/renderer/table/Widths.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * Column width array for a whole set of columns\n */\nqx.Class.define(\"qx.ui.progressive.renderer.table.Widths\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param numColumns {Integer}\n   *   The number of columns being used.\n   */\n  construct(numColumns) {\n    super();\n\n    // Create an array of the specified number of columns, and use the default\n    // column data.\n    this.__columnData = [];\n    for (var i = 0; i < numColumns; i++) {\n      this.__columnData[i] = new qx.ui.core.ColumnData();\n    }\n  },\n\n  members: {\n    __columnData: null,\n\n    /**\n     * Get the array of column data.\n     *\n     * @return {Array}\n     *   Array of column data\n     *\n     */\n    getData() {\n      return this.__columnData;\n    },\n\n    /**\n     * Set the width, minimum width and/or maximum width of a column at one\n     * time.\n     *\n     * @param column {Integer}\n     *   The column number whose attributes are being set.\n     *\n     * @param map {Map}\n     *   An object with any or all of the three members, \"width\", \"minWidth\",\n     *   \"maxWidth\".  The property values are as described for {@link\n     *   #setWidth}, {@link #setMinWidth} and {@link #setMaxWidth}\n     *   respectively.\n     *\n     */\n    set(column, map) {\n      for (var key in map) {\n        switch (key) {\n          case \"width\":\n            this.setWidth(column, map[key]);\n            break;\n\n          case \"minWidth\":\n            this.setMinWidth(column, map[key]);\n            break;\n\n          case \"maxWidth\":\n            this.setMaxWidth(column, map[key]);\n            break;\n\n          default:\n            throw new Error(\"Unrecognized key: \" + key);\n        }\n      }\n    },\n\n    /**\n     * Set the width of a column.\n     *\n     *\n     * @param column {Integer} The column whose width is to be set\n     *\n     * @param width {Integer|String}\n     *   The width of the specified column.  The width may be specified as\n     *   integer number of pixels (e.g. 100), a string representing percentage\n     *   of the inner width of the Table (e.g. \"25%\"), or a string\n     *   representing a flex width (e.g. \"1*\").\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setWidth(column, width) {\n      if (column > this.__columnData.length - 1 || column < 0) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setColumnWidth(width);\n    },\n\n    /**\n     * Set the minimum width of a column.\n     *\n     *\n     * @param column {Integer}\n     *   The column whose minimum width is to be set\n     *\n     * @param width {Integer}\n     *   The minimum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMinWidth(column, width) {\n      if (column > this.__columnData.length - 1 || column < 0) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setMinWidth(width);\n    },\n\n    /**\n     * Set the maximum width of a column.\n     *\n     *\n     * @param column {Integer}\n     *   The column whose maximum width is to be set\n     *\n     * @param width {Integer}\n     *   The maximum width of the specified column.\n     *\n     *\n     * @throws {Error}\n     *   Error is thrown if the provided column number is out of the range.\n     */\n    setMaxWidth(column, width) {\n      if (column > this.__columnData.length - 1 || column < 0) {\n        throw new Error(\"Column number out of range\");\n      }\n\n      this.__columnData[column].setMaxWidth(width);\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}