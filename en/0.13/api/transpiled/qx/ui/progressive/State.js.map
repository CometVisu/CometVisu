{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "initialState",
    "constructor",
    "call",
    "setProgressive",
    "progressive",
    "setModel",
    "model",
    "setPane",
    "pane",
    "setBatchSize",
    "batchSize",
    "setRendererData",
    "rendererData",
    "setUserData",
    "userData",
    "properties",
    "nullable",
    "destruct",
    "ui",
    "State"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/State.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * State of rendering by Progressive.\n */\nqx.Class.define(\"qx.ui.progressive.State\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param initialState {Map}\n   *   Map containing these members:\n   *   <dl>\n   *     <dt>progressive</dt>\n   *       <dd>see {@link #progressive}</dd>\n   *     <dt>model</dt>\n   *       <dd>see {@link #model}</dd>\n   *     <dt>pane</dt>\n   *       <dd>see {@link #pane}</dd>\n   *     <dt>batchSize</dt>\n   *       <dd>see {@link #batchSize}</dd>\n   *     <dt>rendererData</dt>\n   *       <dd>see {@link #rendererData}</dd>\n   *     <dt>userData</dt>\n   *       <dd>see {@link #userData}</dd>\n   *   </dl>\n   */\n  construct(initialState) {\n    super();\n\n    this.setProgressive(initialState.progressive);\n    this.setModel(initialState.model);\n    this.setPane(initialState.pane);\n    this.setBatchSize(initialState.batchSize);\n    this.setRendererData(initialState.rendererData);\n    this.setUserData(initialState.userData);\n  },\n\n  properties: {\n    /**\n     * The {@link qx.ui.progressive.Progressive} with which this {@link\n     * State} is associated. This property should be treated as read-only.\n     */\n    progressive: { nullable: true },\n\n    /**\n     * The data model being used. This property should be treated as\n     * read-only.\n     */\n    model: { nullable: true },\n\n    /**\n     * The widget in which the element data should be rendered.  This property\n     * should be treated as read-only.\n     */\n    pane: { nullable: true },\n\n    /**\n     * How many elements are rendered at a time, before yielding to the\n     * browser.  This property should be treated as read-only.\n     */\n    batchSize: {},\n\n    /**\n     * Add a place for renderers' private data.  If multiple renderers are\n     * being used, each renderer should place its own private data in the the\n     * state object area reserved for that renderer's use:\n     * state.getRendererData()[element.renderer].  This property should be\n     * accessed only by renderers, and all elements of the array other than a\n     * renderer's own element should be treated as read-only.\n     *\n     * IMPORTANT NOTE:  It is the renderer's responsibility to clean up its\n     *                  own mess.  If the renderer places data here, it should\n     *                  also add an event listener for \"renderEnd\" so that it\n     *                  can clean up.\n     */\n    rendererData: {},\n\n    /**\n     * User data.  This is useful, for example, by communication between\n     * the renderStart event listener and the renderers.\n     *\n     * IMPORTANT NOTE:  It is the user's responsibility to clean up his\n     *                  own mess.  If you place data here, you should\n     *                  also add an event listener for \"renderEnd\" to\n     *                  dispose any objects you placed here.\n     */\n    userData: {}\n  },\n\n  destruct() {\n    // Remove references to other objects\n    this.setProgressive(null);\n    this.setModel(null);\n    this.setPane(null);\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,yBAAyB,EAAE;IACzCC,MAAM,EAAEN,EAAE,CAACO,IAAI,CAACC,MAAM;IAEtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAATA,SAASA,CAACC,YAAY,EAAE;MACtBV,EAAA,CAAAO,IAAA,CAAAC,MAAA,CAAAG,WAAA,CAAAC,IAAA;MAEA,IAAI,CAACC,cAAc,CAACH,YAAY,CAACI,WAAW,CAAC;MAC7C,IAAI,CAACC,QAAQ,CAACL,YAAY,CAACM,KAAK,CAAC;MACjC,IAAI,CAACC,OAAO,CAACP,YAAY,CAACQ,IAAI,CAAC;MAC/B,IAAI,CAACC,YAAY,CAACT,YAAY,CAACU,SAAS,CAAC;MACzC,IAAI,CAACC,eAAe,CAACX,YAAY,CAACY,YAAY,CAAC;MAC/C,IAAI,CAACC,WAAW,CAACb,YAAY,CAACc,QAAQ,CAAC;IACzC,CAAC;IAEDC,UAAU,EAAE;MACV;AACJ;AACA;AACA;MACIX,WAAW,EAAE;QAAEY,QAAQ,EAAE;MAAK,CAAC;MAE/B;AACJ;AACA;AACA;MACIV,KAAK,EAAE;QAAEU,QAAQ,EAAE;MAAK,CAAC;MAEzB;AACJ;AACA;AACA;MACIR,IAAI,EAAE;QAAEQ,QAAQ,EAAE;MAAK,CAAC;MAExB;AACJ;AACA;AACA;MACIN,SAAS,EAAE,CAAC,CAAC;MAEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,YAAY,EAAE,CAAC,CAAC;MAEhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,QAAQ,EAAE,CAAC;IACb,CAAC;IAEDG,QAAQ,WAARA,QAAQA,CAAA,EAAG;MACT;MACA,IAAI,CAACd,cAAc,CAAC,IAAI,CAAC;MACzB,IAAI,CAACE,QAAQ,CAAC,IAAI,CAAC;MACnB,IAAI,CAACE,OAAO,CAAC,IAAI,CAAC;IACpB;EACF,CAAC,CAAC;EA/GFjB,EAAE,CAAC4B,EAAE,CAACd,WAAW,CAACe,KAAK,CAAC1B,aAAa,GAAGA,aAAa;AAAC",
  "ignoreList": []
}