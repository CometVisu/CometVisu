{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "container",
    "Composite",
    "construct",
    "structure",
    "layout",
    "VBox",
    "__renderer",
    "set",
    "backgroundColor",
    "progressive",
    "Default",
    "__structure",
    "applyStructure",
    "__bInitialRenderComplete",
    "__bRendering",
    "__initialNumElements",
    "events",
    "renderStart",
    "renderEnd",
    "progress",
    "progressDetail",
    "properties",
    "dataModel",
    "check",
    "apply",
    "batchSize",
    "init",
    "flushWidgetQueueAfterBatch",
    "interElementTimeout",
    "members",
    "__t1",
    "getStructure",
    "addRenderer",
    "name",
    "renderer",
    "join",
    "removeRenderer",
    "Error",
    "render",
    "state",
    "State",
    "model",
    "getDataModel",
    "pane",
    "getPane",
    "getBatchSize",
    "rendererData",
    "__createStateRendererData",
    "userData",
    "Date",
    "getModel",
    "getElementCount",
    "fireDataEvent",
    "initial",
    "__renderElementBatch",
    "event",
    "Timer",
    "once",
    "_applyDataModel",
    "value",
    "old",
    "removeListener",
    "__dataAvailable",
    "dispose",
    "addListener",
    "current",
    "element",
    "i",
    "getNextElement",
    "debug",
    "remaining",
    "getFlushWidgetQueueAfterBatch",
    "core",
    "queue",
    "Manager",
    "flush",
    "getInterElementTimeout",
    "e",
    "getData",
    "destruct",
    "Progressive"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/Progressive.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * <i>Progressive</i>.\n *\n * Follow progressive instructions provided by a data model.  A variable\n * number of instructions are executed at one time, after which control is\n * returned briefly to the browser.  This allows browser rendering between\n * batches of instructions, improving the visual experience.\n *\n * <i>Progressive</i> may be used for various purposes.  Two predefined\n * purposes for which \"renderers\" are provided, are a progressively-rendered\n * table which allows variable row height, and a program load/initialization\n * renderer with progress bar.  (Note that the term \"renderer\" is interpreted\n * quite broadly.  A renderer needn't actually render; rather it is just some\n * set of activities that takes place at one time, e.g a row of table data or\n * a single widget added to the document or a sending a request to a server,\n * etc.)\n */\nqx.Class.define(\"qx.ui.progressive.Progressive\", {\n  extend: qx.ui.container.Composite,\n\n  /**\n   * @param structure {qx.ui.progressive.structure.Abstract}\n   *   The structure of the Progressive pane.\n   */\n  construct(structure) {\n    super(new qx.ui.layout.VBox());\n\n    // Create an object in which we'll track renderers that have been added\n    this.__renderer = {};\n\n    // Prepare to have our pane structure added to us.\n    this.set({\n      backgroundColor: \"white\"\n    });\n\n    // If no structure is provided...\n    if (!structure) {\n      // ... then create a default one.\n      structure = new qx.ui.progressive.structure.Default();\n    }\n\n    // Prepare our pane structure\n    this.__structure = structure;\n    structure.applyStructure(this);\n\n    // We've not yet done our initial render\n    this.__bInitialRenderComplete = false;\n\n    // We're not currently rendering\n    this.__bRendering = false;\n\n    // Number of elements available to be rendered.  Useful for progress\n    // handlers, e.g. a progress bar or status counter.\n    this.__initialNumElements = 0;\n  },\n\n  events: {\n    /**\n     * Event fired when rendering begins.\n     *\n     * The event data is an object with the following members:\n     * <dl>\n     *   <dt>state</dt>\n     *   <dd>\n     *     The state object.\n     *   </dd>\n     *\n     *   <dt>initial</dt>\n     *     The number of elements that are available to be rendered\n     *   <dd>\n     *   </dd>\n     * </dl>\n     */\n    renderStart: \"qx.event.type.Data\",\n\n    /**\n     * Event fired when rendering ends.  The data is the state object.\n     */\n    renderEnd: \"qx.event.type.Data\",\n\n    /**\n     * This event is fired after each batch of elements is rendered, and\n     * control is about to be yielded to the browser.  This is an appropriate\n     * event to listen for, to implement a progress bar.\n     *\n     * The event data is an object with the following members:\n     * <dl>\n     *   <dt>initial</dt>\n     *   <dd>\n     *     The number of elements that were available at the start of this\n     *     rendering request.\n     *   </dd>\n     *\n     *   <dt>remaining</dt>\n     *   <dd>\n     *     The number of elements still remaining to be rendered.\n     *   </dd>\n     * </dl>\n     */\n    progress: \"qx.event.type.Data\",\n\n    /**\n     * This event is fired after each element is rendered.\n     *\n     * The event data is an object with the following members:\n     * <dl>\n     *   <dt>initial</dt>\n     *   <dd>\n     *     The number of elements that were available at the start of this\n     *     rendering request.\n     *   </dd>\n     *\n     *   <dt>remaining</dt>\n     *   <dd>\n     *     The number of elements still remaining to be rendered.\n     *   </dd>\n     *\n     *   <dt>element</dt>\n     *   <dd>\n     *     The object, returned by the data model's getNextElement() method,\n     *     that was just rendered.\n     *   </dd>\n     * </dl>\n     *\n     * Note: Unless batchSize is set to 1 or we happen to be at the end of a\n     *       batch, widgets will not be rendered at this time.  Use this event\n     *       for programmatically processing rendered elements, but not for\n     *       such things as progress bars.  Instead, where only user-visible\n     *       changes such as progress bars are being updated, use the\n     *       \"progress\" event.\n     */\n    progressDetail: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /** The data model. */\n    dataModel: {\n      check: \"qx.ui.progressive.model.Abstract\",\n      apply: \"_applyDataModel\"\n    },\n\n    /**\n     * Number of elements to render at one time.  After this number of\n     * elements has been rendered, control will be yielded to the browser\n     * allowing the elements to actually be displayed.  A short-interval timer\n     * will be set, to regain control to render the next batch of elements.\n     */\n    batchSize: {\n      check: \"Integer\",\n      init: 20\n    },\n\n    /**\n     * Flush the widget queue after each batch is rendered.  This is\n     * particularly relevant for such things as progressive loading, where\n     * the whole purpose is to be able to see the loading progressing.\n     */\n    flushWidgetQueueAfterBatch: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Delay between rendering elements. Zero is normally adequate, but\n     * there are times that the user wants more time between rendering\n     * some elements.\n     */\n    interElementTimeout: {\n      check: \"Integer\",\n      init: 0\n    }\n  },\n\n  members: {\n    __renderer: null,\n    __bRendering: null,\n    __t1: null,\n    __initialNumElements: null,\n    __bInitialRenderComplete: null,\n    __structure: null,\n\n    /**\n     * Return the structure object\n     *\n     * @return {qx.ui.progressive.structure.Abstract} The structure object\n     */\n    getStructure() {\n      return this.__structure;\n    },\n\n    /**\n     * Add a renderer that can be referenced by the data model.\n     *\n     * @param name {String}\n     *   Name referenced in the data model when this renderer is to be used.\n     *\n     * @param renderer {qx.ui.progressive.renderer.Abstract}\n     *   Renderer object used if the data model references the specified name.\n     *\n     */\n    addRenderer(name, renderer) {\n      this.__renderer[name] = renderer;\n      renderer.join(this, name);\n    },\n\n    /**\n     * Remove a previously added renderer.\n     *\n     * @param name {String}\n     *   Remove the renderer which was assigned this name.\n     *\n     */\n    removeRenderer(name) {\n      if (!this.__renderer[name]) {\n        throw new Error(\"No existing renderer named \" + name);\n      }\n\n      delete this.__renderer[name];\n    },\n\n    /**\n     * Render the elements available from the data model.  Elements are\n     * rendered in batches of size {@link #batchSize}.  After each batch of\n     * elements are rendered, control is returned temporarily to the\n     * browser, so that actual screen updates can take place.  A timer is\n     * used to regain control a short while later, in order to render the\n     * next batch of element.\n     *\n     */\n    render() {\n      // Prevent render calls while we're already rendering\n      if (this.__bRendering) {\n        return;\n      }\n\n      this.__bRendering = true;\n\n      var state = new qx.ui.progressive.State({\n        progressive: this,\n        model: this.getDataModel(),\n        pane: this.__structure.getPane(),\n        batchSize: this.getBatchSize(),\n        rendererData: this.__createStateRendererData(),\n        userData: {}\n      });\n\n      // Record render start time\n      this.__t1 = new Date();\n\n      // Render the first batch of elements.  Subsequent batches will be via\n      // timer started from this.__renderElementBatch().\n      if (this.__bInitialRenderComplete) {\n        // Get the starting number of elements\n        this.__initialNumElements = state.getModel().getElementCount();\n\n        // Let listeners know we're beginning to render\n        this.fireDataEvent(\"renderStart\", {\n          state: state,\n          initial: this.__initialNumElements\n        });\n\n        // Begin rendering\n        this.__renderElementBatch(state);\n      } else {\n        // Ensure we leave enough time that 'this' has been rendered, so that\n        // this.getContentElement().getDomElement() is valid and has\n        // properties.  It's needed by some renderers.\n        //\n        // FIXME: Why isn't an event listener for \"appear\" an adequate delay???\n        //        (It's done with a timer like this in Table's Pane too.)\n        qx.event.Timer.once(\n          function () {\n            this.__initialNumElements = state.getModel().getElementCount();\n            this.fireDataEvent(\"renderStart\", {\n              state: state,\n              initial: this.__initialNumElements\n            });\n\n            this.__renderElementBatch(state);\n            this.__bInitialRenderComplete = true;\n          },\n          this,\n          10\n        );\n      }\n    },\n\n    /**\n     * Called when the dataModel property is changed.\n     *\n     * @param value {qx.ui.progressive.model.Abstract}\n     *   The new data model.\n     *\n     * @param old {qx.ui.progressive.model.Abstract}\n     *   The old data model.\n     *\n     */\n    _applyDataModel(value, old) {\n      if (old) {\n        // Remove the old event listener\n        old.removeListener(\"dataAvailable\", this.__dataAvailable, this);\n\n        // Dispose the old model\n        old.dispose();\n      }\n\n      // Add an event listener so we know when data is available in the model\n      value.addListener(\"dataAvailable\", this.__dataAvailable, this);\n    },\n\n    /**\n     * Render a batch of elements.  The batch size is determined by the\n     * Progressive's batch size at the time that rendering began.  That batch\n     * size was copied into the {@link qx.ui.progressive.State} object and is\n     * used herein.\n     *\n     * @param state {qx.ui.progressive.State}\n     *   The current state of rendering.\n     *\n     */\n    __renderElementBatch(state) {\n      var current;\n      var element;\n      var renderer;\n\n      for (var i = state.getBatchSize(); i > 0; i--) {\n        // Retrieve the current element\n        current = state.getModel().getNextElement();\n        if (!current) {\n          // No more elements.  We're done.\n          this.debug(\"Render time: \" + (new Date() - this.__t1) + \"ms\");\n          this.__bRendering = false;\n\n          // Notify any progress handlers that are listening\n          this.fireDataEvent(\"renderEnd\", state);\n\n          // We don't need our render state any longer\n          state.dispose();\n\n          // See ya!\n          return;\n        }\n\n        // Get the element member\n        element = current.element;\n\n        // Get the element's renderer\n        renderer = this.__renderer[element.renderer];\n\n        // Render this element\n        renderer.render(state, element);\n\n        // Notify any progress detail handlers that are listening\n        this.fireDataEvent(\"progressDetail\", {\n          initial: this.__initialNumElements,\n          remaining: current.remaining,\n          element: element\n        });\n      }\n\n      // Notify any progress handlers that are listening\n      this.fireDataEvent(\"progress\", {\n        initial: this.__initialNumElements,\n        remaining: current.remaining\n      });\n\n      // Flush the widget queue\n      if (this.getFlushWidgetQueueAfterBatch()) {\n        qx.ui.core.queue.Manager.flush();\n      }\n\n      // Set a timer to render the next element\n      qx.event.Timer.once(\n        function () {\n          this.__renderElementBatch(state);\n        },\n        this,\n        this.getInterElementTimeout()\n      );\n    },\n\n    /**\n     * Create the map of empty objects for use by the renderers.\n     * @return {Map} renderer data map\n     */\n    __createStateRendererData() {\n      var rendererData = {};\n\n      for (var name in this.__renderer) {\n        rendererData[name] = {};\n      }\n\n      return rendererData;\n    },\n\n    /**\n     * Event callback for the \"dataAvailable\" event.\n     *\n     * @param e {qx.event.type.Data}\n     *   A \"dataAvailable\" event's data contains the initial number of elements\n     *\n     */\n    __dataAvailable(e) {\n      this.__initialNumElements = e.getData();\n      this.render();\n    }\n  },\n\n  /**\n   */\n  destruct() {\n    // For each renderer...\n    for (var name in this.__renderer) {\n      // ... dispose it\n      this.__renderer[name].dispose();\n    }\n\n    // Clean up references\n    this.__t1 = this.__renderer = this.__structure = null;\n  }\n});\n"
  ],
  "mappings": "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"
}