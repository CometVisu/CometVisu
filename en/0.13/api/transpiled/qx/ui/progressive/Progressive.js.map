{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "container",
    "Composite",
    "construct",
    "structure",
    "constructor",
    "call",
    "layout",
    "VBox",
    "__renderer",
    "set",
    "backgroundColor",
    "progressive",
    "Default",
    "__structure",
    "applyStructure",
    "__bInitialRenderComplete",
    "__bRendering",
    "__initialNumElements",
    "events",
    "renderStart",
    "renderEnd",
    "progress",
    "progressDetail",
    "properties",
    "dataModel",
    "check",
    "apply",
    "batchSize",
    "init",
    "flushWidgetQueueAfterBatch",
    "interElementTimeout",
    "members",
    "__t1",
    "getStructure",
    "addRenderer",
    "name",
    "renderer",
    "join",
    "removeRenderer",
    "Error",
    "render",
    "state",
    "State",
    "model",
    "getDataModel",
    "pane",
    "getPane",
    "getBatchSize",
    "rendererData",
    "__createStateRendererData",
    "userData",
    "Date",
    "getModel",
    "getElementCount",
    "fireDataEvent",
    "initial",
    "__renderElementBatch",
    "event",
    "Timer",
    "once",
    "_applyDataModel",
    "value",
    "old",
    "removeListener",
    "__dataAvailable",
    "dispose",
    "addListener",
    "__P_426_7",
    "current",
    "element",
    "i",
    "getNextElement",
    "debug",
    "remaining",
    "getFlushWidgetQueueAfterBatch",
    "core",
    "queue",
    "Manager",
    "flush",
    "getInterElementTimeout",
    "__P_426_6",
    "__P_426_8",
    "e",
    "getData",
    "destruct",
    "Progressive"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/progressive/Progressive.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2008 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * <i>Progressive</i>.\r\n *\r\n * Follow progressive instructions provided by a data model.  A variable\r\n * number of instructions are executed at one time, after which control is\r\n * returned briefly to the browser.  This allows browser rendering between\r\n * batches of instructions, improving the visual experience.\r\n *\r\n * <i>Progressive</i> may be used for various purposes.  Two predefined\r\n * purposes for which \"renderers\" are provided, are a progressively-rendered\r\n * table which allows variable row height, and a program load/initialization\r\n * renderer with progress bar.  (Note that the term \"renderer\" is interpreted\r\n * quite broadly.  A renderer needn't actually render; rather it is just some\r\n * set of activities that takes place at one time, e.g a row of table data or\r\n * a single widget added to the document or a sending a request to a server,\r\n * etc.)\r\n */\r\nqx.Class.define(\"qx.ui.progressive.Progressive\", {\r\n  extend: qx.ui.container.Composite,\r\n\r\n  /**\r\n   * @param structure {qx.ui.progressive.structure.Abstract}\r\n   *   The structure of the Progressive pane.\r\n   */\r\n  construct(structure) {\r\n    super(new qx.ui.layout.VBox());\r\n\r\n    // Create an object in which we'll track renderers that have been added\r\n    this.__renderer = {};\r\n\r\n    // Prepare to have our pane structure added to us.\r\n    this.set({\r\n      backgroundColor: \"white\"\r\n    });\r\n\r\n    // If no structure is provided...\r\n    if (!structure) {\r\n      // ... then create a default one.\r\n      structure = new qx.ui.progressive.structure.Default();\r\n    }\r\n\r\n    // Prepare our pane structure\r\n    this.__structure = structure;\r\n    structure.applyStructure(this);\r\n\r\n    // We've not yet done our initial render\r\n    this.__bInitialRenderComplete = false;\r\n\r\n    // We're not currently rendering\r\n    this.__bRendering = false;\r\n\r\n    // Number of elements available to be rendered.  Useful for progress\r\n    // handlers, e.g. a progress bar or status counter.\r\n    this.__initialNumElements = 0;\r\n  },\r\n\r\n  events: {\r\n    /**\r\n     * Event fired when rendering begins.\r\n     *\r\n     * The event data is an object with the following members:\r\n     * <dl>\r\n     *   <dt>state</dt>\r\n     *   <dd>\r\n     *     The state object.\r\n     *   </dd>\r\n     *\r\n     *   <dt>initial</dt>\r\n     *     The number of elements that are available to be rendered\r\n     *   <dd>\r\n     *   </dd>\r\n     * </dl>\r\n     */\r\n    renderStart: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Event fired when rendering ends.  The data is the state object.\r\n     */\r\n    renderEnd: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * This event is fired after each batch of elements is rendered, and\r\n     * control is about to be yielded to the browser.  This is an appropriate\r\n     * event to listen for, to implement a progress bar.\r\n     *\r\n     * The event data is an object with the following members:\r\n     * <dl>\r\n     *   <dt>initial</dt>\r\n     *   <dd>\r\n     *     The number of elements that were available at the start of this\r\n     *     rendering request.\r\n     *   </dd>\r\n     *\r\n     *   <dt>remaining</dt>\r\n     *   <dd>\r\n     *     The number of elements still remaining to be rendered.\r\n     *   </dd>\r\n     * </dl>\r\n     */\r\n    progress: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * This event is fired after each element is rendered.\r\n     *\r\n     * The event data is an object with the following members:\r\n     * <dl>\r\n     *   <dt>initial</dt>\r\n     *   <dd>\r\n     *     The number of elements that were available at the start of this\r\n     *     rendering request.\r\n     *   </dd>\r\n     *\r\n     *   <dt>remaining</dt>\r\n     *   <dd>\r\n     *     The number of elements still remaining to be rendered.\r\n     *   </dd>\r\n     *\r\n     *   <dt>element</dt>\r\n     *   <dd>\r\n     *     The object, returned by the data model's getNextElement() method,\r\n     *     that was just rendered.\r\n     *   </dd>\r\n     * </dl>\r\n     *\r\n     * Note: Unless batchSize is set to 1 or we happen to be at the end of a\r\n     *       batch, widgets will not be rendered at this time.  Use this event\r\n     *       for programmatically processing rendered elements, but not for\r\n     *       such things as progress bars.  Instead, where only user-visible\r\n     *       changes such as progress bars are being updated, use the\r\n     *       \"progress\" event.\r\n     */\r\n    progressDetail: \"qx.event.type.Data\"\r\n  },\r\n\r\n  properties: {\r\n    /** The data model. */\r\n    dataModel: {\r\n      check: \"qx.ui.progressive.model.Abstract\",\r\n      apply: \"_applyDataModel\"\r\n    },\r\n\r\n    /**\r\n     * Number of elements to render at one time.  After this number of\r\n     * elements has been rendered, control will be yielded to the browser\r\n     * allowing the elements to actually be displayed.  A short-interval timer\r\n     * will be set, to regain control to render the next batch of elements.\r\n     */\r\n    batchSize: {\r\n      check: \"Integer\",\r\n      init: 20\r\n    },\r\n\r\n    /**\r\n     * Flush the widget queue after each batch is rendered.  This is\r\n     * particularly relevant for such things as progressive loading, where\r\n     * the whole purpose is to be able to see the loading progressing.\r\n     */\r\n    flushWidgetQueueAfterBatch: {\r\n      check: \"Boolean\",\r\n      init: false\r\n    },\r\n\r\n    /**\r\n     * Delay between rendering elements. Zero is normally adequate, but\r\n     * there are times that the user wants more time between rendering\r\n     * some elements.\r\n     */\r\n    interElementTimeout: {\r\n      check: \"Integer\",\r\n      init: 0\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __renderer: null,\r\n    __bRendering: null,\r\n    __t1: null,\r\n    __initialNumElements: null,\r\n    __bInitialRenderComplete: null,\r\n    __structure: null,\r\n\r\n    /**\r\n     * Return the structure object\r\n     *\r\n     * @return {qx.ui.progressive.structure.Abstract} The structure object\r\n     */\r\n    getStructure() {\r\n      return this.__structure;\r\n    },\r\n\r\n    /**\r\n     * Add a renderer that can be referenced by the data model.\r\n     *\r\n     * @param name {String}\r\n     *   Name referenced in the data model when this renderer is to be used.\r\n     *\r\n     * @param renderer {qx.ui.progressive.renderer.Abstract}\r\n     *   Renderer object used if the data model references the specified name.\r\n     *\r\n     */\r\n    addRenderer(name, renderer) {\r\n      this.__renderer[name] = renderer;\r\n      renderer.join(this, name);\r\n    },\r\n\r\n    /**\r\n     * Remove a previously added renderer.\r\n     *\r\n     * @param name {String}\r\n     *   Remove the renderer which was assigned this name.\r\n     *\r\n     */\r\n    removeRenderer(name) {\r\n      if (!this.__renderer[name]) {\r\n        throw new Error(\"No existing renderer named \" + name);\r\n      }\r\n\r\n      delete this.__renderer[name];\r\n    },\r\n\r\n    /**\r\n     * Render the elements available from the data model.  Elements are\r\n     * rendered in batches of size {@link #batchSize}.  After each batch of\r\n     * elements are rendered, control is returned temporarily to the\r\n     * browser, so that actual screen updates can take place.  A timer is\r\n     * used to regain control a short while later, in order to render the\r\n     * next batch of element.\r\n     *\r\n     */\r\n    render() {\r\n      // Prevent render calls while we're already rendering\r\n      if (this.__bRendering) {\r\n        return;\r\n      }\r\n\r\n      this.__bRendering = true;\r\n\r\n      var state = new qx.ui.progressive.State({\r\n        progressive: this,\r\n        model: this.getDataModel(),\r\n        pane: this.__structure.getPane(),\r\n        batchSize: this.getBatchSize(),\r\n        rendererData: this.__createStateRendererData(),\r\n        userData: {}\r\n      });\r\n\r\n      // Record render start time\r\n      this.__t1 = new Date();\r\n\r\n      // Render the first batch of elements.  Subsequent batches will be via\r\n      // timer started from this.__renderElementBatch().\r\n      if (this.__bInitialRenderComplete) {\r\n        // Get the starting number of elements\r\n        this.__initialNumElements = state.getModel().getElementCount();\r\n\r\n        // Let listeners know we're beginning to render\r\n        this.fireDataEvent(\"renderStart\", {\r\n          state: state,\r\n          initial: this.__initialNumElements\r\n        });\r\n\r\n        // Begin rendering\r\n        this.__renderElementBatch(state);\r\n      } else {\r\n        // Ensure we leave enough time that 'this' has been rendered, so that\r\n        // this.getContentElement().getDomElement() is valid and has\r\n        // properties.  It's needed by some renderers.\r\n        //\r\n        // FIXME: Why isn't an event listener for \"appear\" an adequate delay???\r\n        //        (It's done with a timer like this in Table's Pane too.)\r\n        qx.event.Timer.once(\r\n          function () {\r\n            this.__initialNumElements = state.getModel().getElementCount();\r\n            this.fireDataEvent(\"renderStart\", {\r\n              state: state,\r\n              initial: this.__initialNumElements\r\n            });\r\n\r\n            this.__renderElementBatch(state);\r\n            this.__bInitialRenderComplete = true;\r\n          },\r\n          this,\r\n          10\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Called when the dataModel property is changed.\r\n     *\r\n     * @param value {qx.ui.progressive.model.Abstract}\r\n     *   The new data model.\r\n     *\r\n     * @param old {qx.ui.progressive.model.Abstract}\r\n     *   The old data model.\r\n     *\r\n     */\r\n    _applyDataModel(value, old) {\r\n      if (old) {\r\n        // Remove the old event listener\r\n        old.removeListener(\"dataAvailable\", this.__dataAvailable, this);\r\n\r\n        // Dispose the old model\r\n        old.dispose();\r\n      }\r\n\r\n      // Add an event listener so we know when data is available in the model\r\n      value.addListener(\"dataAvailable\", this.__dataAvailable, this);\r\n    },\r\n\r\n    /**\r\n     * Render a batch of elements.  The batch size is determined by the\r\n     * Progressive's batch size at the time that rendering began.  That batch\r\n     * size was copied into the {@link qx.ui.progressive.State} object and is\r\n     * used herein.\r\n     *\r\n     * @param state {qx.ui.progressive.State}\r\n     *   The current state of rendering.\r\n     *\r\n     */\r\n    __renderElementBatch(state) {\r\n      var current;\r\n      var element;\r\n      var renderer;\r\n\r\n      for (var i = state.getBatchSize(); i > 0; i--) {\r\n        // Retrieve the current element\r\n        current = state.getModel().getNextElement();\r\n        if (!current) {\r\n          // No more elements.  We're done.\r\n          this.debug(\"Render time: \" + (new Date() - this.__t1) + \"ms\");\r\n          this.__bRendering = false;\r\n\r\n          // Notify any progress handlers that are listening\r\n          this.fireDataEvent(\"renderEnd\", state);\r\n\r\n          // We don't need our render state any longer\r\n          state.dispose();\r\n\r\n          // See ya!\r\n          return;\r\n        }\r\n\r\n        // Get the element member\r\n        element = current.element;\r\n\r\n        // Get the element's renderer\r\n        renderer = this.__renderer[element.renderer];\r\n\r\n        // Render this element\r\n        renderer.render(state, element);\r\n\r\n        // Notify any progress detail handlers that are listening\r\n        this.fireDataEvent(\"progressDetail\", {\r\n          initial: this.__initialNumElements,\r\n          remaining: current.remaining,\r\n          element: element\r\n        });\r\n      }\r\n\r\n      // Notify any progress handlers that are listening\r\n      this.fireDataEvent(\"progress\", {\r\n        initial: this.__initialNumElements,\r\n        remaining: current.remaining\r\n      });\r\n\r\n      // Flush the widget queue\r\n      if (this.getFlushWidgetQueueAfterBatch()) {\r\n        qx.ui.core.queue.Manager.flush();\r\n      }\r\n\r\n      // Set a timer to render the next element\r\n      qx.event.Timer.once(\r\n        function () {\r\n          this.__renderElementBatch(state);\r\n        },\r\n        this,\r\n        this.getInterElementTimeout()\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Create the map of empty objects for use by the renderers.\r\n     * @return {Map} renderer data map\r\n     */\r\n    __createStateRendererData() {\r\n      var rendererData = {};\r\n\r\n      for (var name in this.__renderer) {\r\n        rendererData[name] = {};\r\n      }\r\n\r\n      return rendererData;\r\n    },\r\n\r\n    /**\r\n     * Event callback for the \"dataAvailable\" event.\r\n     *\r\n     * @param e {qx.event.type.Data}\r\n     *   A \"dataAvailable\" event's data contains the initial number of elements\r\n     *\r\n     */\r\n    __dataAvailable(e) {\r\n      this.__initialNumElements = e.getData();\r\n      this.render();\r\n    }\r\n  },\r\n\r\n  /**\r\n   */\r\n  destruct() {\r\n    // For each renderer...\r\n    for (var name in this.__renderer) {\r\n      // ... dispose it\r\n      this.__renderer[name].dispose();\r\n    }\r\n\r\n    // Clean up references\r\n    this.__t1 = this.__renderer = this.__structure = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}