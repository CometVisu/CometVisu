{
  "className": "qx.ui.core.scroll.MRoll",
  "packageName": "qx.ui.core.scroll",
  "name": "MRoll",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 26,
        "column": 0,
        "index": 818
      },
      "end": {
        "line": 139,
        "column": 3,
        "index": 4032
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Mixin holding the handler for roll event. Please\n keep in mind that the including widget has to have the scroll bars\n implemented as child controls named <code>scrollbar-x</code> and\n <code>scrollbar-y</code> to get the handler working. Also, you have to\n attach the listener yourself.</p>"
        }
      ]
    }
  },
  "type": "mixin",
  "properties": {
    "scrollByDrag": {
      "location": {
        "start": {
          "line": 31,
          "column": 4,
          "index": 1014
        },
        "end": {
          "line": 34,
          "column": 5,
          "index": 1080
        }
      },
      "name": "scrollByDrag",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    }
  },
  "members": {
    "_cancelRoll": {
      "location": {
        "start": {
          "line": 38,
          "column": 4,
          "index": 1108
        },
        "end": {
          "line": 38,
          "column": 21,
          "index": 1125
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_addRollHandling": {
      "location": {
        "start": {
          "line": 43,
          "column": 4,
          "index": 1230
        },
        "end": {
          "line": 46,
          "column": 5,
          "index": 1384
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for adding the event listener needed for scroll handling.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_removeRollHandling": {
      "location": {
        "start": {
          "line": 51,
          "column": 4,
          "index": 1491
        },
        "end": {
          "line": 54,
          "column": 5,
          "index": 1654
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Responsible for removing the event listener needed for scroll handling.</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerDownForRoll": {
      "location": {
        "start": {
          "line": 61,
          "column": 4,
          "index": 1833
        },
        "end": {
          "line": 63,
          "column": 5,
          "index": 1910
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Handler for the pointerdown event which simply stops the momentum scrolling.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} pointerdown event",
            "paramName": "e",
            "description": " pointerdown event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onRoll": {
      "location": {
        "start": {
          "line": 70,
          "column": 4,
          "index": 2021
        },
        "end": {
          "line": 137,
          "column": 5,
          "index": 4022
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Roll event handler</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} Roll event",
            "paramName": "e",
            "description": " Roll event",
            "type": "qx.event.type.Roll"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getScrollByDrag": {
      "type": "function",
      "name": "getScrollByDrag",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scrollByDrag</code>.\n\nFor further details take a look at the property definition: {@link #scrollByDrag}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for scrollByDrag"
          }
        ]
      }
    },
    "isScrollByDrag": {
      "type": "function",
      "name": "isScrollByDrag",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scrollByDrag</code>.\n\nFor further details take a look at the property definition: {@link #scrollByDrag}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for scrollByDrag"
          }
        ]
      }
    },
    "setScrollByDrag": {
      "type": "function",
      "name": "setScrollByDrag",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>scrollByDrag</code>.\n\nFor further details take a look at the property definition: {@link #scrollByDrag}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for scrollByDrag"
          }
        ]
      }
    },
    "resetScrollByDrag": {
      "type": "function",
      "name": "resetScrollByDrag",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>scrollByDrag</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #scrollByDrag}."
          }
        ]
      }
    }
  },
  "descendants": []
}