{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "events",
    "changeValue",
    "changeSelection",
    "members",
    "__manager",
    "setValue",
    "item",
    "resetSelection",
    "ui",
    "core",
    "Widget",
    "__getManager",
    "setSelected",
    "TypeError",
    "getValue",
    "getSelected",
    "resetValue",
    "resetSelected",
    "getSelection",
    "selected",
    "setSelection",
    "items",
    "length",
    "Error",
    "isSelected",
    "isSelectionEmpty",
    "getSelectables",
    "all",
    "_onChangeSelected",
    "e",
    "newValue",
    "getData",
    "oldValue",
    "getOldData",
    "fireDataEvent",
    "__P_319_1",
    "that",
    "SingleSelectionManager",
    "getItems",
    "_getItems",
    "isItemSelectable",
    "_isItemSelectable",
    "isVisible",
    "addListener",
    "setAllowEmptySelection",
    "_isAllowEmptySelection",
    "destruct",
    "_disposeObjects",
    "MSingleSelectionHandling"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MSingleSelectionHandling.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * This mixin links all methods to manage the single selection.\n *\n * The class which includes the mixin has to implements two methods:\n *\n * <ul>\n * <li><code>_getItems</code>, this method has to return a <code>Array</code>\n *    of <code>qx.ui.core.Widget</code> that should be managed from the manager.\n * </li>\n * <li><code>_isAllowEmptySelection</code>, this method has to return a\n *    <code>Boolean</code> value for allowing empty selection or not.\n * </li>\n * </ul>\n */\nqx.Mixin.define(\"qx.ui.core.MSingleSelectionHandling\", {\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fires after the value was modified */\n    changeValue: \"qx.event.type.Data\",\n\n    /** Fires after the selection was modified */\n    changeSelection: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** @type {qx.ui.core.SingleSelectionManager} the single selection manager */\n    __manager: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param item {null|qx.ui.core.Widget} Item to set as selected value.\n     * @returns {null|TypeError} The status of this operation.\n     */\n    setValue(item) {\n      if (null === item) {\n        this.resetSelection();\n        return null;\n      }\n\n      if (item instanceof qx.ui.core.Widget) {\n        this.__getManager().setSelected(item);\n        return null;\n      } else {\n        return new TypeError(\n          \"Given argument is not null or a {qx.ui.core.Widget}.\"\n        );\n      }\n    },\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @returns {null|qx.ui.core.Widget} The currently selected widget or null if there is none.\n     */\n    getValue() {\n      return this.__getManager().getSelected() || null;\n    },\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue() {\n      this.__getManager().resetSelected();\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {qx.ui.core.Widget[]} List of items.\n     */\n    getSelection() {\n      var selected = this.__getManager().getSelected();\n\n      if (selected) {\n        return [selected];\n      } else {\n        return [];\n      }\n    },\n\n    /**\n     * Replaces current selection with the given items.\n     *\n     * @param items {qx.ui.core.Widget[]} Items to select.\n     * @throws {Error} if one of the items is not a child element and if\n     *    items contains more than one elements.\n     */\n    setSelection(items) {\n      switch (items.length) {\n        case 0:\n          this.resetSelection();\n          break;\n        case 1:\n          this.__getManager().setSelected(items[0]);\n          break;\n        default:\n          throw new Error(\n            \"Could only select one item, but the selection\" +\n              \" array contains \" +\n              items.length +\n              \" items!\"\n          );\n      }\n    },\n\n    /**\n     * Clears the whole selection at once.\n     */\n    resetSelection() {\n      this.__getManager().resetSelected();\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {qx.ui.core.Widget} Any valid selectable item.\n     * @return {Boolean} Whether the item is selected.\n     * @throws {Error} if one of the items is not a child element.\n     */\n    isSelected(item) {\n      return this.__getManager().isSelected(item);\n    },\n\n    /**\n     * Whether the selection is empty.\n     *\n     * @return {Boolean} Whether the selection is empty.\n     */\n    isSelectionEmpty() {\n      return this.__getManager().isSelectionEmpty();\n    },\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables(all) {\n      return this.__getManager().getSelectables(all);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event listener for <code>changeSelected</code> event on single\n     * selection manager.\n     *\n     * @param e {qx.event.type.Data} Data event.\n     */\n    _onChangeSelected(e) {\n      var newValue = e.getData();\n      var oldValue = e.getOldData();\n      this.fireDataEvent(\"changeValue\", newValue, oldValue);\n\n      newValue == null ? (newValue = []) : (newValue = [newValue]);\n      oldValue == null ? (oldValue = []) : (oldValue = [oldValue]);\n      this.fireDataEvent(\"changeSelection\", newValue, oldValue);\n    },\n\n    /**\n     * Return the selection manager if it is already exists, otherwise creates\n     * the manager.\n     *\n     * @return {qx.ui.core.SingleSelectionManager} Single selection manager.\n     */\n    __getManager() {\n      if (this.__manager == null) {\n        var that = this;\n        this.__manager = new qx.ui.core.SingleSelectionManager({\n          getItems() {\n            return that._getItems();\n          },\n\n          isItemSelectable(item) {\n            if (that._isItemSelectable) {\n              return that._isItemSelectable(item);\n            } else {\n              return item.isVisible();\n            }\n          }\n        });\n\n        this.__manager.addListener(\n          \"changeSelected\",\n          this._onChangeSelected,\n          this\n        );\n      }\n      this.__manager.setAllowEmptySelection(this._isAllowEmptySelection());\n\n      return this.__manager;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeObjects(\"__manager\");\n  }\n});\n"
  ],
  "mappings": "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"
}