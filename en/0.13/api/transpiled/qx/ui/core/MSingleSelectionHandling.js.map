{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "events",
    "changeValue",
    "changeSelection",
    "members",
    "__manager",
    "setValue",
    "item",
    "resetSelection",
    "ui",
    "core",
    "Widget",
    "__getManager",
    "setSelected",
    "TypeError",
    "getValue",
    "getSelected",
    "resetValue",
    "resetSelected",
    "getSelection",
    "selected",
    "setSelection",
    "items",
    "length",
    "Error",
    "isSelected",
    "isSelectionEmpty",
    "getSelectables",
    "all",
    "_onChangeSelected",
    "e",
    "newValue",
    "getData",
    "oldValue",
    "getOldData",
    "fireDataEvent",
    "that",
    "SingleSelectionManager",
    "getItems",
    "_getItems",
    "isItemSelectable",
    "_isItemSelectable",
    "isVisible",
    "addListener",
    "setAllowEmptySelection",
    "_isAllowEmptySelection",
    "destruct",
    "_disposeObjects",
    "MSingleSelectionHandling"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MSingleSelectionHandling.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * This mixin links all methods to manage the single selection.\n *\n * The class which includes the mixin has to implements two methods:\n *\n * <ul>\n * <li><code>_getItems</code>, this method has to return a <code>Array</code>\n *    of <code>qx.ui.core.Widget</code> that should be managed from the manager.\n * </li>\n * <li><code>_isAllowEmptySelection</code>, this method has to return a\n *    <code>Boolean</code> value for allowing empty selection or not.\n * </li>\n * </ul>\n */\nqx.Mixin.define(\"qx.ui.core.MSingleSelectionHandling\", {\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fires after the value was modified */\n    changeValue: \"qx.event.type.Data\",\n\n    /** Fires after the selection was modified */\n    changeSelection: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** @type {qx.ui.core.SingleSelectionManager} the single selection manager */\n    __manager: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param item {null|qx.ui.core.Widget} Item to set as selected value.\n     * @returns {null|TypeError} The status of this operation.\n     */\n    setValue(item) {\n      if (null === item) {\n        this.resetSelection();\n        return null;\n      }\n\n      if (item instanceof qx.ui.core.Widget) {\n        this.__getManager().setSelected(item);\n        return null;\n      } else {\n        return new TypeError(\n          \"Given argument is not null or a {qx.ui.core.Widget}.\"\n        );\n      }\n    },\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @returns {null|qx.ui.core.Widget} The currently selected widget or null if there is none.\n     */\n    getValue() {\n      return this.__getManager().getSelected() || null;\n    },\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue() {\n      this.__getManager().resetSelected();\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {qx.ui.core.Widget[]} List of items.\n     */\n    getSelection() {\n      var selected = this.__getManager().getSelected();\n\n      if (selected) {\n        return [selected];\n      } else {\n        return [];\n      }\n    },\n\n    /**\n     * Replaces current selection with the given items.\n     *\n     * @param items {qx.ui.core.Widget[]} Items to select.\n     * @throws {Error} if one of the items is not a child element and if\n     *    items contains more than one elements.\n     */\n    setSelection(items) {\n      switch (items.length) {\n        case 0:\n          this.resetSelection();\n          break;\n        case 1:\n          this.__getManager().setSelected(items[0]);\n          break;\n        default:\n          throw new Error(\n            \"Could only select one item, but the selection\" +\n              \" array contains \" +\n              items.length +\n              \" items!\"\n          );\n      }\n    },\n\n    /**\n     * Clears the whole selection at once.\n     */\n    resetSelection() {\n      this.__getManager().resetSelected();\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {qx.ui.core.Widget} Any valid selectable item.\n     * @return {Boolean} Whether the item is selected.\n     * @throws {Error} if one of the items is not a child element.\n     */\n    isSelected(item) {\n      return this.__getManager().isSelected(item);\n    },\n\n    /**\n     * Whether the selection is empty.\n     *\n     * @return {Boolean} Whether the selection is empty.\n     */\n    isSelectionEmpty() {\n      return this.__getManager().isSelectionEmpty();\n    },\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables(all) {\n      return this.__getManager().getSelectables(all);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event listener for <code>changeSelected</code> event on single\n     * selection manager.\n     *\n     * @param e {qx.event.type.Data} Data event.\n     */\n    _onChangeSelected(e) {\n      var newValue = e.getData();\n      var oldValue = e.getOldData();\n      this.fireDataEvent(\"changeValue\", newValue, oldValue);\n\n      newValue == null ? (newValue = []) : (newValue = [newValue]);\n      oldValue == null ? (oldValue = []) : (oldValue = [oldValue]);\n      this.fireDataEvent(\"changeSelection\", newValue, oldValue);\n    },\n\n    /**\n     * Return the selection manager if it is already exists, otherwise creates\n     * the manager.\n     *\n     * @return {qx.ui.core.SingleSelectionManager} Single selection manager.\n     */\n    __getManager() {\n      if (this.__manager == null) {\n        var that = this;\n        this.__manager = new qx.ui.core.SingleSelectionManager({\n          getItems() {\n            return that._getItems();\n          },\n\n          isItemSelectable(item) {\n            if (that._isItemSelectable) {\n              return that._isItemSelectable(item);\n            } else {\n              return item.isVisible();\n            }\n          }\n        });\n\n        this.__manager.addListener(\n          \"changeSelected\",\n          this._onChangeSelected,\n          this\n        );\n      }\n      this.__manager.setAllowEmptySelection(this._isAllowEmptySelection());\n\n      return this.__manager;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeObjects(\"__manager\");\n  }\n});\n"
  ],
  "mappings": "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"
}