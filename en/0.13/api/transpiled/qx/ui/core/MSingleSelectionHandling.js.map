{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "events",
    "changeValue",
    "changeSelection",
    "members",
    "__manager",
    "setValue",
    "item",
    "resetSelection",
    "ui",
    "core",
    "Widget",
    "__getManager",
    "setSelected",
    "TypeError",
    "getValue",
    "getSelected",
    "resetValue",
    "resetSelected",
    "getSelection",
    "selected",
    "setSelection",
    "items",
    "length",
    "Error",
    "isSelected",
    "isSelectionEmpty",
    "getSelectables",
    "all",
    "_onChangeSelected",
    "e",
    "newValue",
    "getData",
    "oldValue",
    "getOldData",
    "fireDataEvent",
    "__P_327_1",
    "that",
    "SingleSelectionManager",
    "getItems",
    "_getItems",
    "isItemSelectable",
    "_isItemSelectable",
    "isVisible",
    "addListener",
    "setAllowEmptySelection",
    "_isAllowEmptySelection",
    "destruct",
    "_disposeObjects",
    "MSingleSelectionHandling"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MSingleSelectionHandling.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Christian Hagendorn (chris_schmidt)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This mixin links all methods to manage the single selection.\r\n *\r\n * The class which includes the mixin has to implements two methods:\r\n *\r\n * <ul>\r\n * <li><code>_getItems</code>, this method has to return a <code>Array</code>\r\n *    of <code>qx.ui.core.Widget</code> that should be managed from the manager.\r\n * </li>\r\n * <li><code>_isAllowEmptySelection</code>, this method has to return a\r\n *    <code>Boolean</code> value for allowing empty selection or not.\r\n * </li>\r\n * </ul>\r\n */\r\nqx.Mixin.define(\"qx.ui.core.MSingleSelectionHandling\", {\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /** Fires after the value was modified */\r\n    changeValue: \"qx.event.type.Data\",\r\n\r\n    /** Fires after the selection was modified */\r\n    changeSelection: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /** @type {qx.ui.core.SingleSelectionManager} the single selection manager */\r\n    __manager: null,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PUBLIC API\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\r\n     *\r\n     * @param item {null|qx.ui.core.Widget} Item to set as selected value.\r\n     * @returns {null|TypeError} The status of this operation.\r\n     */\r\n    setValue(item) {\r\n      if (null === item) {\r\n        this.resetSelection();\r\n        return null;\r\n      }\r\n\r\n      if (item instanceof qx.ui.core.Widget) {\r\n        this.__getManager().setSelected(item);\r\n        return null;\r\n      } else {\r\n        return new TypeError(\r\n          \"Given argument is not null or a {qx.ui.core.Widget}.\"\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\r\n     *\r\n     * @returns {null|qx.ui.core.Widget} The currently selected widget or null if there is none.\r\n     */\r\n    getValue() {\r\n      return this.__getManager().getSelected() || null;\r\n    },\r\n\r\n    /**\r\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\r\n     */\r\n    resetValue() {\r\n      this.__getManager().resetSelected();\r\n    },\r\n\r\n    /**\r\n     * Returns an array of currently selected items.\r\n     *\r\n     * Note: The result is only a set of selected items, so the order can\r\n     * differ from the sequence in which the items were added.\r\n     *\r\n     * @return {qx.ui.core.Widget[]} List of items.\r\n     */\r\n    getSelection() {\r\n      var selected = this.__getManager().getSelected();\r\n\r\n      if (selected) {\r\n        return [selected];\r\n      } else {\r\n        return [];\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Replaces current selection with the given items.\r\n     *\r\n     * @param items {qx.ui.core.Widget[]} Items to select.\r\n     * @throws {Error} if one of the items is not a child element and if\r\n     *    items contains more than one elements.\r\n     */\r\n    setSelection(items) {\r\n      switch (items.length) {\r\n        case 0:\r\n          this.resetSelection();\r\n          break;\r\n        case 1:\r\n          this.__getManager().setSelected(items[0]);\r\n          break;\r\n        default:\r\n          throw new Error(\r\n            \"Could only select one item, but the selection\" +\r\n              \" array contains \" +\r\n              items.length +\r\n              \" items!\"\r\n          );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Clears the whole selection at once.\r\n     */\r\n    resetSelection() {\r\n      this.__getManager().resetSelected();\r\n    },\r\n\r\n    /**\r\n     * Detects whether the given item is currently selected.\r\n     *\r\n     * @param item {qx.ui.core.Widget} Any valid selectable item.\r\n     * @return {Boolean} Whether the item is selected.\r\n     * @throws {Error} if one of the items is not a child element.\r\n     */\r\n    isSelected(item) {\r\n      return this.__getManager().isSelected(item);\r\n    },\r\n\r\n    /**\r\n     * Whether the selection is empty.\r\n     *\r\n     * @return {Boolean} Whether the selection is empty.\r\n     */\r\n    isSelectionEmpty() {\r\n      return this.__getManager().isSelectionEmpty();\r\n    },\r\n\r\n    /**\r\n     * Returns all elements which are selectable.\r\n     *\r\n     * @param all {Boolean} true for all selectables, false for the\r\n     *   selectables the user can interactively select\r\n     * @return {qx.ui.core.Widget[]} The contained items.\r\n     */\r\n    getSelectables(all) {\r\n      return this.__getManager().getSelectables(all);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Event listener for <code>changeSelected</code> event on single\r\n     * selection manager.\r\n     *\r\n     * @param e {qx.event.type.Data} Data event.\r\n     */\r\n    _onChangeSelected(e) {\r\n      var newValue = e.getData();\r\n      var oldValue = e.getOldData();\r\n      this.fireDataEvent(\"changeValue\", newValue, oldValue);\r\n\r\n      newValue == null ? (newValue = []) : (newValue = [newValue]);\r\n      oldValue == null ? (oldValue = []) : (oldValue = [oldValue]);\r\n      this.fireDataEvent(\"changeSelection\", newValue, oldValue);\r\n    },\r\n\r\n    /**\r\n     * Return the selection manager if it is already exists, otherwise creates\r\n     * the manager.\r\n     *\r\n     * @return {qx.ui.core.SingleSelectionManager} Single selection manager.\r\n     */\r\n    __getManager() {\r\n      if (this.__manager == null) {\r\n        var that = this;\r\n        this.__manager = new qx.ui.core.SingleSelectionManager({\r\n          getItems() {\r\n            return that._getItems();\r\n          },\r\n\r\n          isItemSelectable(item) {\r\n            if (that._isItemSelectable) {\r\n              return that._isItemSelectable(item);\r\n            } else {\r\n              return item.isVisible();\r\n            }\r\n          }\r\n        });\r\n\r\n        this.__manager.addListener(\r\n          \"changeSelected\",\r\n          this._onChangeSelected,\r\n          this\r\n        );\r\n      }\r\n      this.__manager.setAllowEmptySelection(this._isAllowEmptySelection());\r\n\r\n      return this.__manager;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this._disposeObjects(\"__manager\");\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}