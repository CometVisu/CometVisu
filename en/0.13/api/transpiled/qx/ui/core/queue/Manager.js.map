{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/core/queue/Manager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__scheduled",
    "__canceled",
    "__jobs",
    "__retries",
    "MAX_RETRIES",
    "scheduleFlush",
    "job",
    "self",
    "ui",
    "core",
    "queue",
    "Manager",
    "bom",
    "AnimationFrame",
    "request",
    "flush",
    "__inFlush",
    "jobs",
    "__executeAndRescheduleOnError",
    "visibility",
    "widget",
    "appearance",
    "layout",
    "element",
    "Widget",
    "e",
    "log",
    "Logger",
    "error",
    "Visibility",
    "Appearance",
    "Layout",
    "html",
    "Element",
    "dispose",
    "Dispose",
    "callback",
    "finallyCode",
    "Error",
    "__onUserAction",
    "defer",
    "_scheduleFlush",
    "event",
    "Registration",
    "addListener",
    "window",
    "Environment",
    "get"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class performs the auto flush of all layout relevant queues.\n *\n * @require(qx.event.handler.UserAction)\n */\nqx.Class.define(\"qx.ui.core.queue.Manager\",\n{\n  statics :\n  {\n    /** @type {Boolean} Whether a flush was scheduled */\n    __scheduled : false,\n\n    /** @type {Boolean} true, if the flush should not be executed */\n    __canceled : false,\n\n    /** @type {Map} Internal data structure for the current job list */\n    __jobs : {},\n\n\n    /** @type {Integer} Counts how often a flush failed due to exceptions */\n    __retries : 0,\n\n    /** @type {Integer} Maximum number of flush retries */\n    MAX_RETRIES : 10,\n\n\n    /**\n     * Schedule a deferred flush of all queues.\n     *\n     * @param job {String} The job, which should be performed. Valid values are\n     *     <code>layout</code>, <code>decoration</code> and <code>element</code>.\n     */\n    scheduleFlush : function(job)\n    {\n      // Sometimes not executed in context, fix this\n      var self = qx.ui.core.queue.Manager;\n\n      self.__jobs[job] = true;\n\n      if (!self.__scheduled)\n      {\n        self.__canceled = false;\n\n        qx.bom.AnimationFrame.request(function() {\n          if (self.__canceled) {\n            self.__canceled = false;\n            return;\n          }\n          self.flush();\n        }, self);\n        self.__scheduled = true;\n      }\n    },\n\n\n    /**\n     * Flush all layout queues in the correct order. This function is called\n     * deferred if {@link #scheduleFlush} is called.\n     *\n     */\n    flush : function()\n    {\n      // Sometimes not executed in context, fix this\n      var self = qx.ui.core.queue.Manager;\n\n      // Stop when already executed\n      if (self.__inFlush) {\n        return;\n      }\n\n      self.__inFlush = true;\n\n      // Cancel timeout if called manually\n      self.__canceled = true;\n\n      var jobs = self.__jobs;\n\n      self.__executeAndRescheduleOnError(function()\n      {\n        // Process jobs\n        while (jobs.visibility || jobs.widget || jobs.appearance || jobs.layout || jobs.element)\n        {\n          // No else blocks here because each flush can influence the following flushes!\n          if (jobs.widget)\n          {\n            delete jobs.widget;\n\n            if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n              try {\n                qx.ui.core.queue.Widget.flush();\n              } catch (e) {\n                qx.log.Logger.error(qx.ui.core.queue.Widget, \"Error in the 'Widget' queue:\" + e, e);\n              }\n            } else {\n              qx.ui.core.queue.Widget.flush();\n            }\n          }\n\n          if (jobs.visibility)\n          {\n            delete jobs.visibility;\n\n            if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n              try {\n                qx.ui.core.queue.Visibility.flush();\n              } catch (e) {\n                qx.log.Logger.error(qx.ui.core.queue.Visibility, \"Error in the 'Visibility' queue:\" + e, e);\n              }\n            } else {\n              qx.ui.core.queue.Visibility.flush();\n            }\n          }\n\n          if (jobs.appearance)\n          {\n            delete jobs.appearance;\n\n            if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n              try {\n                qx.ui.core.queue.Appearance.flush();\n              } catch (e) {\n                qx.log.Logger.error(qx.ui.core.queue.Appearance, \"Error in the 'Appearance' queue:\" + e, e);\n              }\n            } else {\n              qx.ui.core.queue.Appearance.flush();\n            }\n          }\n\n          // Defer layout as long as possible\n          if (jobs.widget || jobs.visibility || jobs.appearance) {\n            continue;\n          }\n\n          if (jobs.layout)\n          {\n            delete jobs.layout;\n\n            if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n              try {\n                qx.ui.core.queue.Layout.flush();\n              } catch (e) {\n                qx.log.Logger.error(qx.ui.core.queue.Layout, \"Error in the 'Layout' queue:\" + e, e);\n              }\n            } else {\n              qx.ui.core.queue.Layout.flush();\n            }\n          }\n\n          // Defer element as long as possible\n          if (jobs.widget || jobs.visibility || jobs.appearance || jobs.layout) {\n            continue;\n          }\n\n          if (jobs.element)\n          {\n            delete jobs.element;\n            qx.html.Element.flush();\n          }\n        }\n      }, function() {\n        self.__scheduled = false;\n      });\n\n      self.__executeAndRescheduleOnError(function()\n      {\n        if (jobs.dispose)\n        {\n          delete jobs.dispose;\n\n          if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\n            try {\n              qx.ui.core.queue.Dispose.flush();\n            } catch (e) {\n              qx.log.Logger.error(\"Error in the 'Dispose' queue:\" + e);\n            }\n          } else {\n            qx.ui.core.queue.Dispose.flush();\n          }\n        }\n      }, function() {\n        // Clear flag\n        self.__inFlush = false;\n      });\n\n      // flush succeeded successfully. Reset retries\n      self.__retries = 0;\n    },\n\n\n    /**\n     * Executes the callback code. If the callback throws an error the current\n     * flush is cleaned up and rescheduled. The finally code is called after the\n     * callback even if it has thrown an exception.\n     *\n     * @signature function(callback, finallyCode)\n     * @param callback {Function} the callback function\n     * @param finallyCode {Function} function to be called in the finally block\n     */\n    __executeAndRescheduleOnError : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(callback, finallyCode)\n      {\n        callback();\n        finallyCode();\n      },\n\n\n      \"false\" : function(callback, finallyCode)\n      {\n        var self = qx.ui.core.queue.Manager;\n\n        try\n        {\n          callback();\n        }\n        catch (e)\n        {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            qx.log.Logger.error(\n              \"Error while layout flush: \" + e + \"\\n\" +\n              \"Stack trace: \\n\" +\n              qx.dev.StackTrace.getStackTraceFromError(e)\n            );\n          }\n          self.__scheduled = false;\n          self.__inFlush = false;\n          self.__retries += 1;\n\n          if (self.__retries <= self.MAX_RETRIES) {\n            self.scheduleFlush();\n          } else {\n            throw new Error(\n              \"Fatal Error: Flush terminated \" + (self.__retries-1) + \" times in a row\" +\n              \" due to exceptions in user code. The application has to be reloaded!\"\n            );\n          }\n\n          throw e;\n        }\n        finally\n        {\n          finallyCode();\n        }\n      }\n    }),\n\n\n    /**\n     * Handler used on touch devices to prevent the queue from manipulating\n     * the dom during the touch - mouse - ... event sequence. Usually, iOS\n     * devices fire a click event 300ms after the touchend event. So using\n     * 500ms should be a good value to be on the save side. This is necessary\n     * due to the fact that the event chain is stopped if a manipulation in\n     * the DOM is done.\n     *\n     * @param e {qx.event.type.Data} The user action data event.\n     */\n    __onUserAction : function(e)\n    {\n      qx.ui.core.queue.Manager.flush();\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCT\n  *****************************************************************************\n  */\n\n  defer : function(statics)\n  {\n    // Replace default scheduler for HTML element with local one.\n    // This is quite a hack, but allows us to force other flushes\n    // before the HTML element flush.\n    qx.html.Element._scheduleFlush = statics.scheduleFlush;\n\n    // Register to user action\n    qx.event.Registration.addListener(window, \"useraction\",\n      qx.core.Environment.get(\"event.touch\") ?\n        statics.__onUserAction : statics.flush\n    );\n  }\n});\n"
  ]
}