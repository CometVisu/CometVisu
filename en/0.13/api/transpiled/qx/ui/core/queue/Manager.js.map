{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__scheduled",
    "__canceled",
    "__jobs",
    "__retries",
    "MAX_RETRIES",
    "scheduleFlush",
    "job",
    "self",
    "ui",
    "core",
    "queue",
    "Manager",
    "bom",
    "AnimationFrame",
    "request",
    "flush",
    "__inFlush",
    "jobs",
    "__executeAndRescheduleOnError",
    "visibility",
    "widget",
    "appearance",
    "layout",
    "element",
    "Widget",
    "e",
    "log",
    "Logger",
    "error",
    "Visibility",
    "Appearance",
    "Layout",
    "html",
    "Element",
    "dispose",
    "Dispose",
    "Environment",
    "select",
    "_true",
    "callback",
    "finallyCode",
    "_false",
    "Error",
    "__onUserAction",
    "__P_333_6",
    "defer",
    "_scheduleFlush",
    "event",
    "Registration",
    "addListener",
    "window",
    "get"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/queue/Manager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This class performs the auto flush of all layout relevant queues.\r\n *\r\n * @require(qx.event.handler.UserAction)\r\n */\r\nqx.Class.define(\"qx.ui.core.queue.Manager\", {\r\n  statics: {\r\n    /** @type {Boolean} Whether a flush was scheduled */\r\n    __scheduled: false,\r\n\r\n    /** @type {Boolean} true, if the flush should not be executed */\r\n    __canceled: false,\r\n\r\n    /** @type {Map} Internal data structure for the current job list */\r\n    __jobs: {},\r\n\r\n    /** @type {Integer} Counts how often a flush failed due to exceptions */\r\n    __retries: 0,\r\n\r\n    /** @type {Integer} Maximum number of flush retries */\r\n    MAX_RETRIES: 10,\r\n\r\n    /**\r\n     * Schedule a deferred flush of all queues.\r\n     *\r\n     * @param job {String} The job, which should be performed. Valid values are\r\n     *     <code>layout</code>, <code>decoration</code> and <code>element</code>.\r\n     */\r\n    scheduleFlush(job) {\r\n      // Sometimes not executed in context, fix this\r\n      var self = qx.ui.core.queue.Manager;\r\n\r\n      self.__jobs[job] = true;\r\n\r\n      if (!self.__scheduled) {\r\n        self.__canceled = false;\r\n\r\n        qx.bom.AnimationFrame.request(function () {\r\n          if (self.__canceled) {\r\n            self.__canceled = false;\r\n            return;\r\n          }\r\n          self.flush();\r\n        }, self);\r\n        self.__scheduled = true;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Flush all layout queues in the correct order. This function is called\r\n     * deferred if {@link #scheduleFlush} is called.\r\n     *\r\n     */\r\n    flush() {\r\n      // Sometimes not executed in context, fix this\r\n      var self = qx.ui.core.queue.Manager;\r\n\r\n      // Stop when already executed\r\n      if (self.__inFlush) {\r\n        return;\r\n      }\r\n\r\n      self.__inFlush = true;\r\n\r\n      // Cancel timeout if called manually\r\n      self.__canceled = true;\r\n\r\n      var jobs = self.__jobs;\r\n\r\n      self.__executeAndRescheduleOnError(\r\n        function () {\r\n          // Process jobs\r\n          while (\r\n            jobs.visibility ||\r\n            jobs.widget ||\r\n            jobs.appearance ||\r\n            jobs.layout ||\r\n            jobs.element\r\n          ) {\r\n            // No else blocks here because each flush can influence the following flushes!\r\n            if (jobs.widget) {\r\n              delete jobs.widget;\r\n\r\n              if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\r\n                try {\r\n                  qx.ui.core.queue.Widget.flush();\r\n                } catch (e) {\r\n                  qx.log.Logger.error(\r\n                    qx.ui.core.queue.Widget,\r\n                    \"Error in the 'Widget' queue:\" + e,\r\n                    e\r\n                  );\r\n                }\r\n              } else {\r\n                qx.ui.core.queue.Widget.flush();\r\n              }\r\n            }\r\n\r\n            if (jobs.visibility) {\r\n              delete jobs.visibility;\r\n\r\n              if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\r\n                try {\r\n                  qx.ui.core.queue.Visibility.flush();\r\n                } catch (e) {\r\n                  qx.log.Logger.error(\r\n                    qx.ui.core.queue.Visibility,\r\n                    \"Error in the 'Visibility' queue:\" + e,\r\n                    e\r\n                  );\r\n                }\r\n              } else {\r\n                qx.ui.core.queue.Visibility.flush();\r\n              }\r\n            }\r\n\r\n            if (jobs.appearance) {\r\n              delete jobs.appearance;\r\n\r\n              if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\r\n                try {\r\n                  qx.ui.core.queue.Appearance.flush();\r\n                } catch (e) {\r\n                  qx.log.Logger.error(\r\n                    qx.ui.core.queue.Appearance,\r\n                    \"Error in the 'Appearance' queue:\" + e,\r\n                    e\r\n                  );\r\n                }\r\n              } else {\r\n                qx.ui.core.queue.Appearance.flush();\r\n              }\r\n            }\r\n\r\n            // Defer layout as long as possible\r\n            if (jobs.widget || jobs.visibility || jobs.appearance) {\r\n              continue;\r\n            }\r\n\r\n            if (jobs.layout) {\r\n              delete jobs.layout;\r\n\r\n              if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\r\n                try {\r\n                  qx.ui.core.queue.Layout.flush();\r\n                } catch (e) {\r\n                  qx.log.Logger.error(\r\n                    qx.ui.core.queue.Layout,\r\n                    \"Error in the 'Layout' queue:\" + e,\r\n                    e\r\n                  );\r\n                }\r\n              } else {\r\n                qx.ui.core.queue.Layout.flush();\r\n              }\r\n            }\r\n\r\n            // Defer element as long as possible\r\n            if (\r\n              jobs.widget ||\r\n              jobs.visibility ||\r\n              jobs.appearance ||\r\n              jobs.layout\r\n            ) {\r\n              continue;\r\n            }\r\n\r\n            if (jobs.element) {\r\n              delete jobs.element;\r\n              qx.html.Element.flush();\r\n            }\r\n          }\r\n        },\r\n        function () {\r\n          self.__scheduled = false;\r\n        }\r\n      );\r\n\r\n      self.__executeAndRescheduleOnError(\r\n        function () {\r\n          if (jobs.dispose) {\r\n            delete jobs.dispose;\r\n\r\n            if (qx.core.Environment.get(\"qx.debug.ui.queue\")) {\r\n              try {\r\n                qx.ui.core.queue.Dispose.flush();\r\n              } catch (e) {\r\n                qx.log.Logger.error(\"Error in the 'Dispose' queue:\" + e);\r\n              }\r\n            } else {\r\n              qx.ui.core.queue.Dispose.flush();\r\n            }\r\n          }\r\n        },\r\n        function () {\r\n          // Clear flag\r\n          self.__inFlush = false;\r\n        }\r\n      );\r\n\r\n      // flush succeeded successfully. Reset retries\r\n      self.__retries = 0;\r\n    },\r\n\r\n    /**\r\n     * Executes the callback code. If the callback throws an error the current\r\n     * flush is cleaned up and rescheduled. The finally code is called after the\r\n     * callback even if it has thrown an exception.\r\n     *\r\n     * @signature function(callback, finallyCode)\r\n     * @param callback {Function} the callback function\r\n     * @param finallyCode {Function} function to be called in the finally block\r\n     */\r\n    __executeAndRescheduleOnError: qx.core.Environment.select(\"qx.debug\", {\r\n      true(callback, finallyCode) {\r\n        callback();\r\n        finallyCode();\r\n      },\r\n\r\n      false(callback, finallyCode) {\r\n        var self = qx.ui.core.queue.Manager;\r\n\r\n        try {\r\n          callback();\r\n        } catch (e) {\r\n          if (qx.core.Environment.get(\"qx.debug\")) {\r\n            qx.log.Logger.error(\r\n              \"Error while layout flush: \" +\r\n                e +\r\n                \"\\n\" +\r\n                \"Stack trace: \\n\" +\r\n                qx.dev.StackTrace.getStackTraceFromError(e)\r\n            );\r\n          }\r\n          self.__scheduled = false;\r\n          self.__inFlush = false;\r\n          self.__retries += 1;\r\n\r\n          if (self.__retries <= self.MAX_RETRIES) {\r\n            self.scheduleFlush();\r\n          } else {\r\n            throw new Error(\r\n              \"Fatal Error: Flush terminated \" +\r\n                (self.__retries - 1) +\r\n                \" times in a row\" +\r\n                \" due to exceptions in user code. The application has to be reloaded!\"\r\n            );\r\n          }\r\n\r\n          throw e;\r\n        } finally {\r\n          finallyCode();\r\n        }\r\n      }\r\n    }),\r\n\r\n    /**\r\n     * Handler used on touch devices to prevent the queue from manipulating\r\n     * the dom during the touch - mouse - ... event sequence. Usually, iOS\r\n     * devices fire a click event 300ms after the touchend event. So using\r\n     * 500ms should be a good value to be on the save side. This is necessary\r\n     * due to the fact that the event chain is stopped if a manipulation in\r\n     * the DOM is done.\r\n     *\r\n     * @param e {qx.event.type.Data} The user action data event.\r\n     */\r\n    __onUserAction(e) {\r\n      qx.ui.core.queue.Manager.flush();\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCT\r\n  *****************************************************************************\r\n  */\r\n\r\n  defer(statics) {\r\n    // Replace default scheduler for HTML element with local one.\r\n    // This is quite a hack, but allows us to force other flushes\r\n    // before the HTML element flush.\r\n    qx.html.Element._scheduleFlush = statics.scheduleFlush;\r\n\r\n    // Register to user action\r\n    qx.event.Registration.addListener(\r\n      window,\r\n      \"useraction\",\r\n      qx.core.Environment.get(\"event.touch\")\r\n        ? statics.__onUserAction\r\n        : statics.flush\r\n    );\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}