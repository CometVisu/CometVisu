{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__queue",
    "add",
    "widget",
    "queue",
    "includes",
    "unshift",
    "ui",
    "core",
    "Manager",
    "scheduleFlush",
    "isEmpty",
    "length",
    "flush",
    "i",
    "splice",
    "dispose",
    "Dispose"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/queue/Dispose.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The DisposeQueue registers all widgets which are should be disposed.\r\n * This queue makes it possible to remove widgets from the DOM using\r\n * the layout and element queues and dispose them afterwards.\r\n */\r\nqx.Class.define(\"qx.ui.core.queue.Dispose\", {\r\n  statics: {\r\n    /** @type {Array} This contains all the queued widgets for the next flush. */\r\n    __queue: [],\r\n\r\n    /**\r\n     * Adds a widget to the queue.\r\n     *\r\n     * Should only be used by {@link qx.ui.core.Widget}.\r\n     *\r\n     * @param widget {qx.ui.core.Widget} The widget to add.\r\n     */\r\n    add(widget) {\r\n      var queue = this.__queue;\r\n      if (queue.includes(widget)) {\r\n        return;\r\n      }\r\n\r\n      queue.unshift(widget);\r\n      qx.ui.core.queue.Manager.scheduleFlush(\"dispose\");\r\n    },\r\n\r\n    /**\r\n     * Whether the dispose queue is empty\r\n     * @return {Boolean}\r\n     * @internal\r\n     */\r\n    isEmpty() {\r\n      return this.__queue.length == 0;\r\n    },\r\n\r\n    /**\r\n     * Flushes the dispose queue.\r\n     *\r\n     * This is used exclusively by the {@link qx.ui.core.queue.Manager}.\r\n     */\r\n    flush() {\r\n      // Dispose all registered objects\r\n      var queue = this.__queue;\r\n      for (var i = queue.length - 1; i >= 0; i--) {\r\n        var widget = queue[i];\r\n        queue.splice(i, 1);\r\n        widget.dispose();\r\n      }\r\n\r\n      // Empty check\r\n      if (queue.length != 0) {\r\n        return;\r\n      }\r\n\r\n      // Recreate the array is cheaper compared to keep a sparse array over time\r\n      this.__queue = [];\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,0BAA0B,EAAE;IAC1CC,OAAO,EAAE;MACP;MACAC,SAAO,EAAE,EAAE;MAEX;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,GAAG,WAAAA,IAACC,MAAM,EAAE;QACV,IAAIC,KAAK,GAAG,IAAI,CAACH,SAAO;QACxB,IAAIG,KAAK,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE;UAC1B;QACF;QAEAC,KAAK,CAACE,OAAO,CAACH,MAAM,CAAC;QACrBT,EAAE,CAACa,EAAE,CAACC,IAAI,CAACJ,KAAK,CAACK,OAAO,CAACC,aAAa,CAAC,SAAS,CAAC;MACnD,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,OAAO,WAAAA,QAAA,EAAG;QACR,OAAO,IAAI,CAACV,SAAO,CAACW,MAAM,IAAI,CAAC;MACjC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,KAAK,WAAAA,MAAA,EAAG;QACN;QACA,IAAIT,KAAK,GAAG,IAAI,CAACH,SAAO;QACxB,KAAK,IAAIa,CAAC,GAAGV,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAEE,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1C,IAAIX,MAAM,GAAGC,KAAK,CAACU,CAAC,CAAC;UACrBV,KAAK,CAACW,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;UAClBX,MAAM,CAACa,OAAO,CAAC,CAAC;QAClB;;QAEA;QACA,IAAIZ,KAAK,CAACQ,MAAM,IAAI,CAAC,EAAE;UACrB;QACF;;QAEA;QACA,IAAI,CAACX,SAAO,GAAG,EAAE;MACnB;IACF;EACF,CAAC,CAAC;EA9EFP,EAAE,CAACa,EAAE,CAACC,IAAI,CAACJ,KAAK,CAACa,OAAO,CAACpB,aAAa,GAAGA,aAAa;AAAC"
}