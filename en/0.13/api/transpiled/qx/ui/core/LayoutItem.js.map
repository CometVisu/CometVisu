{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "theme",
    "manager",
    "Meta",
    "getInstance",
    "addListener",
    "_onChangeTheme",
    "properties",
    "minWidth",
    "check",
    "nullable",
    "apply",
    "init",
    "themeable",
    "width",
    "event",
    "maxWidth",
    "minHeight",
    "height",
    "maxHeight",
    "allowGrowX",
    "allowShrinkX",
    "allowGrowY",
    "allowShrinkY",
    "allowStretchX",
    "group",
    "mode",
    "allowStretchY",
    "marginTop",
    "marginRight",
    "marginBottom",
    "marginLeft",
    "margin",
    "alignX",
    "alignY",
    "members",
    "Environment",
    "select",
    "_true",
    "props",
    "util",
    "PropertyUtil",
    "getAllProperties",
    "name",
    "desc",
    "userValue",
    "getUserValue",
    "resetThemed",
    "__computedHeightForWidth",
    "__computedLayout",
    "__hasInvalidLayout",
    "__sizeHint",
    "__updateMargin",
    "__userBounds",
    "__layoutProperties",
    "getBounds",
    "clearSeparators",
    "renderSeparator",
    "separator",
    "bounds",
    "renderLayout",
    "left",
    "top",
    "isDisposed",
    "computed",
    "changes",
    "position",
    "size",
    "local",
    "getHeight",
    "_hasHeightForWidth",
    "flowHeight",
    "_getHeightForWidth",
    "ui",
    "queue",
    "Layout",
    "add",
    "isExcluded",
    "hasValidLayout",
    "scheduleLayoutUpdate",
    "invalidateLayoutCache",
    "getSizeHint",
    "compute",
    "hint",
    "_computeSizeHint",
    "getAllowGrowX",
    "getAllowShrinkX",
    "getAllowGrowY",
    "getAllowShrinkY",
    "getMinWidth",
    "getMinHeight",
    "getWidth",
    "getMaxWidth",
    "Infinity",
    "getMaxHeight",
    "layout",
    "_getLayout",
    "hasHeightForWidth",
    "getHeightForWidth",
    "_applyMargin",
    "parent",
    "$$parent",
    "updateLayoutProperties",
    "_applyAlign",
    "_applyDimension",
    "_applyStretching",
    "hasUserBounds",
    "setUserBounds",
    "resetUserBounds",
    "__emptyProperties",
    "setLayoutProperties",
    "storage",
    "getLayoutParent",
    "key",
    "getLayoutProperties",
    "clearLayoutProperties",
    "invalidateChildrenCache",
    "getApplicationRoot",
    "Init",
    "getApplication",
    "getRoot",
    "setLayoutParent",
    "Visibility",
    "isRootWidget",
    "_getRoot",
    "clone",
    "LayoutItem",
    "superclass",
    "prototype",
    "lang",
    "destruct",
    "removeListener",
    "$$subparent"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/LayoutItem.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The base class of all items, which should be laid out using a layout manager\n * {@link qx.ui.layout.Abstract}.\n */\nqx.Class.define(\"qx.ui.core.LayoutItem\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    // dynamic theme switch\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().addListener(\n        \"changeTheme\",\n        this._onChangeTheme,\n        this\n      );\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /*\n    ---------------------------------------------------------------------------\n      DIMENSION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * The user provided minimal width.\n     *\n     * Also take a look at the related properties {@link #width} and {@link #maxWidth}.\n     */\n    minWidth: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The <code>LayoutItem</code>'s preferred width.\n     *\n     * The computed width may differ from the given width due to\n     * stretching. Also take a look at the related properties\n     * {@link #minWidth} and {@link #maxWidth}.\n     */\n    width: {\n      check: \"Integer\",\n      event: \"changeWidth\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The user provided maximal width.\n     *\n     * Also take a look at the related properties {@link #width} and {@link #minWidth}.\n     */\n    maxWidth: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The user provided minimal height.\n     *\n     * Also take a look at the related properties {@link #height} and {@link #maxHeight}.\n     */\n    minHeight: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The item's preferred height.\n     *\n     * The computed height may differ from the given height due to\n     * stretching. Also take a look at the related properties\n     * {@link #minHeight} and {@link #maxHeight}.\n     */\n    height: {\n      check: \"Integer\",\n      event: \"changeHeight\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /**\n     * The user provided maximum height.\n     *\n     * Also take a look at the related properties {@link #height} and {@link #minHeight}.\n     */\n    maxHeight: {\n      check: \"Integer\",\n      nullable: true,\n      apply: \"_applyDimension\",\n      init: null,\n      themeable: true\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      STRETCHING\n    ---------------------------------------------------------------------------\n    */\n\n    /** Whether the item can grow horizontally. */\n    allowGrowX: {\n      check: \"Boolean\",\n      apply: \"_applyStretching\",\n      init: true,\n      themeable: true\n    },\n\n    /** Whether the item can shrink horizontally. */\n    allowShrinkX: {\n      check: \"Boolean\",\n      apply: \"_applyStretching\",\n      init: true,\n      themeable: true\n    },\n\n    /** Whether the item can grow vertically. */\n    allowGrowY: {\n      check: \"Boolean\",\n      apply: \"_applyStretching\",\n      init: true,\n      themeable: true\n    },\n\n    /** Whether the item can shrink vertically. */\n    allowShrinkY: {\n      check: \"Boolean\",\n      apply: \"_applyStretching\",\n      init: true,\n      themeable: true\n    },\n\n    /** Growing and shrinking in the horizontal direction */\n    allowStretchX: {\n      group: [\"allowGrowX\", \"allowShrinkX\"],\n      mode: \"shorthand\",\n      themeable: true\n    },\n\n    /** Growing and shrinking in the vertical direction */\n    allowStretchY: {\n      group: [\"allowGrowY\", \"allowShrinkY\"],\n      mode: \"shorthand\",\n      themeable: true\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      MARGIN\n    ---------------------------------------------------------------------------\n    */\n\n    /** Margin of the widget (top) */\n    marginTop: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMargin\",\n      themeable: true\n    },\n\n    /** Margin of the widget (right) */\n    marginRight: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMargin\",\n      themeable: true\n    },\n\n    /** Margin of the widget (bottom) */\n    marginBottom: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMargin\",\n      themeable: true\n    },\n\n    /** Margin of the widget (left) */\n    marginLeft: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyMargin\",\n      themeable: true\n    },\n\n    /**\n     * The 'margin' property is a shorthand property for setting 'marginTop',\n     * 'marginRight', 'marginBottom' and 'marginLeft' at the same time.\n     *\n     * If four values are specified they apply to top, right, bottom and left respectively.\n     * If there is only one value, it applies to all sides, if there are two or three,\n     * the missing values are taken from the opposite side.\n     */\n    margin: {\n      group: [\"marginTop\", \"marginRight\", \"marginBottom\", \"marginLeft\"],\n      mode: \"shorthand\",\n      themeable: true\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      ALIGN\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Horizontal alignment of the item in the parent layout.\n     *\n     * Note: Item alignment is only supported by {@link LayoutItem} layouts where\n     * it would have a visual effect. Except for {@link Spacer}, which provides\n     * blank space for layouts, all classes that inherit {@link LayoutItem} support alignment.\n     */\n    alignX: {\n      check: [\"left\", \"center\", \"right\"],\n      nullable: true,\n      apply: \"_applyAlign\",\n      themeable: true\n    },\n\n    /**\n     * Vertical alignment of the item in the parent layout.\n     *\n     * Note: Item alignment is only supported by {@link LayoutItem} layouts where\n     * it would have a visual effect. Except for {@link Spacer}, which provides\n     * blank space for layouts, all classes that inherit {@link LayoutItem} support alignment.\n     */\n    alignY: {\n      check: [\"top\", \"middle\", \"bottom\", \"baseline\"],\n      nullable: true,\n      apply: \"_applyAlign\",\n      themeable: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    /*\n    ---------------------------------------------------------------------------\n      DYNAMIC THEME SWITCH SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for the dynamic theme change.\n     * @signature function()\n     */\n    _onChangeTheme: qx.core.Environment.select(\"qx.dyntheme\", {\n      true() {\n        // reset all themeable properties\n        var props = qx.util.PropertyUtil.getAllProperties(this.constructor);\n        for (var name in props) {\n          var desc = props[name];\n          // only themeable properties not having a user value\n          if (desc.themeable) {\n            var userValue = qx.util.PropertyUtil.getUserValue(this, name);\n            if (userValue == null) {\n              qx.util.PropertyUtil.resetThemed(this, name);\n            }\n          }\n        }\n      },\n      false: null\n    }),\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT PROCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Integer} The computed height */\n    __computedHeightForWidth: null,\n\n    /** @type {Map} The computed size of the layout item */\n    __computedLayout: null,\n\n    /** @type {Boolean} Whether the current layout is valid */\n    __hasInvalidLayout: null,\n\n    /** @type {Map} Cached size hint */\n    __sizeHint: null,\n\n    /** @type {Boolean} Whether the margins have changed and must be updated */\n    __updateMargin: null,\n\n    /** @type {Map} user provided bounds of the widget, which override the layout manager */\n    __userBounds: null,\n\n    /** @type {Map} The item's layout properties */\n    __layoutProperties: null,\n\n    /**\n     * Get the computed location and dimension as computed by\n     * the layout manager.\n     *\n     * @return {Map|null} The location and dimensions in pixel\n     *    (if the layout is valid). Contains the keys\n     *    <code>width</code>, <code>height</code>, <code>left</code> and\n     *    <code>top</code>.\n     */\n    getBounds() {\n      return this.__userBounds || this.__computedLayout || null;\n    },\n\n    /**\n     * Reconfigure number of separators\n     */\n    clearSeparators() {\n      // empty template\n    },\n\n    /**\n     * Renders a separator between two children\n     *\n     * @param separator {String|qx.ui.decoration.IDecorator} The separator to render\n     * @param bounds {Map} Contains the left and top coordinate and the width and height\n     *    of the separator to render.\n     */\n    renderSeparator(separator, bounds) {\n      // empty template\n    },\n\n    /**\n     * Used by the layout engine to apply coordinates and dimensions.\n     *\n     * @param left {Integer} Any integer value for the left position,\n     *   always in pixels\n     * @param top {Integer} Any integer value for the top position,\n     *   always in pixels\n     * @param width {Integer} Any positive integer value for the width,\n     *   always in pixels\n     * @param height {Integer} Any positive integer value for the height,\n     *   always in pixels\n     * @return {Map} A map of which layout sizes changed.\n     */\n    renderLayout(left, top, width, height) {\n      // do not render if the layout item is already disposed\n      if (this.isDisposed()) {\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        var msg =\n          \"Something went wrong with the layout of \" + this.toString() + \"!\";\n        this.assertInteger(left, \"Wrong 'left' argument. \" + msg);\n        this.assertInteger(top, \"Wrong 'top' argument. \" + msg);\n        this.assertInteger(width, \"Wrong 'width' argument. \" + msg);\n        this.assertInteger(height, \"Wrong 'height' argument. \" + msg);\n\n        // this.assertInRange(width, this.getMinWidth() || -1, this.getMaxWidth() || 32000);\n        // this.assertInRange(height, this.getMinHeight() || -1, this.getMaxHeight() || 32000);\n      }\n\n      // Detect size changes\n\n      // Dynamically create data structure for computed layout\n      var computed = this.__computedLayout;\n      if (!computed) {\n        computed = this.__computedLayout = {};\n      }\n\n      // Detect changes\n      var changes = {};\n\n      if (left !== computed.left || top !== computed.top) {\n        changes.position = true;\n\n        computed.left = left;\n        computed.top = top;\n      }\n\n      if (width !== computed.width || height !== computed.height) {\n        changes.size = true;\n\n        computed.width = width;\n        computed.height = height;\n      }\n\n      // Clear invalidation marker\n      if (this.__hasInvalidLayout) {\n        changes.local = true;\n        delete this.__hasInvalidLayout;\n      }\n\n      if (this.__updateMargin) {\n        changes.margin = true;\n        delete this.__updateMargin;\n      }\n\n      /*\n       * Height for width support\n       *\n       * Results into a re-layout which means that width/height is applied in the next iteration.\n       *\n       * Note that it is important that this happens after the above first pass at calculating a\n       * computed size because otherwise getBounds() will return null, and this will cause an\n       * issue where the existing size is expected to have already been applied by the layout.\n       * See https://github.com/qooxdoo/qooxdoo/issues/9553\n       */\n      if (this.getHeight() == null && this._hasHeightForWidth()) {\n        var flowHeight = this._getHeightForWidth(width);\n\n        if (\n          flowHeight != null &&\n          flowHeight !== this.__computedHeightForWidth\n        ) {\n          // This variable is used in the next computation of the size hint\n          this.__computedHeightForWidth = flowHeight;\n\n          // Re-add to layout queue\n          qx.ui.core.queue.Layout.add(this);\n        }\n      }\n\n      // Returns changes, especially for deriving classes\n      return changes;\n    },\n\n    /**\n     * Whether the item should be excluded from the layout\n     *\n     * @return {Boolean} Should the item be excluded by the layout\n     */\n    isExcluded() {\n      return false;\n    },\n\n    /**\n     * Whether the layout of this item (to layout the children)\n     * is valid.\n     *\n     * @return {Boolean} Returns <code>true</code>\n     */\n    hasValidLayout() {\n      return !this.__hasInvalidLayout;\n    },\n\n    /**\n     * Indicate that the item has layout changes and propagate this information\n     * up the item hierarchy.\n     *\n     */\n    scheduleLayoutUpdate() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    /**\n     * Called by the layout manager to mark this item's layout as invalid.\n     * This function should clear all layout relevant caches.\n     */\n    invalidateLayoutCache() {\n      // this.debug(\"Mark layout invalid!\");\n\n      this.__hasInvalidLayout = true;\n      this.__sizeHint = null;\n    },\n\n    /**\n     * A size hint computes the dimensions of a widget. It returns\n     * the recommended dimensions as well as the min and max dimensions.\n     * The min and max values already respect the stretching properties.\n     *\n     * <h3>Wording</h3>\n     * <ul>\n     * <li>User value: Value defined by the widget user, using the size properties</li>\n     *\n     * <li>Layout value: The value computed by {@link qx.ui.core.Widget#_getContentHint}</li>\n     * </ul>\n     *\n     * <h3>Algorithm</h3>\n     * <ul>\n     * <li>minSize: If the user min size is not null, the user value is taken,\n     *     otherwise the layout value is used.</li>\n     *\n     * <li>(preferred) size: If the user value is not null the user value is used,\n     *     otherwise the layout value is used.</li>\n     *\n     * <li>max size: Same as the preferred size.</li>\n     * </ul>\n     *\n     * @param compute {Boolean?true} Automatically compute size hint if currently not\n     *   cached?\n     * @return {Map} The map with the preferred width/height and the allowed\n     *   minimum and maximum values in cases where shrinking or growing\n     *   is required.\n     */\n    getSizeHint(compute) {\n      var hint = this.__sizeHint;\n      if (hint) {\n        return hint;\n      }\n\n      if (compute === false) {\n        return null;\n      }\n\n      // Compute as defined\n      hint = this.__sizeHint = this._computeSizeHint();\n\n      // Respect height for width\n      if (\n        this._hasHeightForWidth() &&\n        this.__computedHeightForWidth &&\n        this.getHeight() == null\n      ) {\n        hint.height = this.__computedHeightForWidth;\n      }\n\n      // normalize width\n      if (hint.minWidth > hint.width) {\n        hint.width = hint.minWidth;\n      }\n      if (hint.maxWidth < hint.width) {\n        hint.width = hint.maxWidth;\n      }\n\n      if (!this.getAllowGrowX()) {\n        hint.maxWidth = hint.width;\n      }\n      if (!this.getAllowShrinkX()) {\n        hint.minWidth = hint.width;\n      }\n\n      // normalize height\n      if (hint.minHeight > hint.height) {\n        hint.height = hint.minHeight;\n      }\n      if (hint.maxHeight < hint.height) {\n        hint.height = hint.maxHeight;\n      }\n\n      if (!this.getAllowGrowY()) {\n        hint.maxHeight = hint.height;\n      }\n      if (!this.getAllowShrinkY()) {\n        hint.minHeight = hint.height;\n      }\n\n      // Finally return\n      return hint;\n    },\n\n    /**\n     * Computes the size hint of the layout item.\n     *\n     * @return {Map} The map with the preferred width/height and the allowed\n     *   minimum and maximum values.\n     */\n    _computeSizeHint() {\n      var minWidth = this.getMinWidth() || 0;\n      var minHeight = this.getMinHeight() || 0;\n\n      var width = this.getWidth() || minWidth;\n      var height = this.getHeight() || minHeight;\n\n      var maxWidth = this.getMaxWidth() || Infinity;\n      var maxHeight = this.getMaxHeight() || Infinity;\n\n      return {\n        minWidth: minWidth,\n        width: width,\n        maxWidth: maxWidth,\n        minHeight: minHeight,\n        height: height,\n        maxHeight: maxHeight\n      };\n    },\n\n    /**\n     * Whether the item supports height for width.\n     *\n     * @return {Boolean} Whether the item supports height for width\n     */\n    _hasHeightForWidth() {\n      var layout = this._getLayout();\n      if (layout) {\n        return layout.hasHeightForWidth();\n      }\n      return false;\n    },\n\n    /**\n     * If an item wants to trade height for width it has to implement this\n     * method and return the preferred height of the item if it is resized to\n     * the given width. This function returns <code>null</code> if the item\n     * do not support height for width.\n     *\n     * @param width {Integer} The computed width\n     * @return {Integer} The desired height\n     */\n    _getHeightForWidth(width) {\n      var layout = this._getLayout();\n      if (layout && layout.hasHeightForWidth()) {\n        return layout.getHeightForWidth(width);\n      }\n\n      return null;\n    },\n\n    /**\n     * Get the widget's layout manager.\n     *\n     * @return {qx.ui.layout.Abstract} The widget's layout manager\n     */\n    _getLayout() {\n      return null;\n    },\n\n    // property apply\n    _applyMargin() {\n      this.__updateMargin = true;\n\n      var parent = this.$$parent;\n      if (parent) {\n        parent.updateLayoutProperties();\n      }\n    },\n\n    // property apply\n    _applyAlign() {\n      var parent = this.$$parent;\n      if (parent) {\n        parent.updateLayoutProperties();\n      }\n    },\n\n    // property apply\n    _applyDimension() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    // property apply\n    _applyStretching() {\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR USER BOUNDARIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether user bounds are set on this layout item\n     *\n     * @return {Boolean} Whether user bounds are set on this layout item\n     */\n    hasUserBounds() {\n      return !!this.__userBounds;\n    },\n\n    /**\n     * Set user bounds of the widget. Widgets with user bounds are sized and\n     * positioned manually and are ignored by any layout manager.\n     *\n     * @param left {Integer} left position (relative to the parent)\n     * @param top {Integer} top position (relative to the parent)\n     * @param width {Integer} width of the layout item\n     * @param height {Integer} height of the layout item\n     */\n    setUserBounds(left, top, width, height) {\n      if (!this.__userBounds) {\n        var parent = this.$$parent;\n        if (parent) {\n          parent.updateLayoutProperties();\n        }\n      }\n\n      this.__userBounds = {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      };\n\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    /**\n     * Clear the user bounds. After this call the layout item is laid out by\n     * the layout manager again.\n     *\n     */\n    resetUserBounds() {\n      if (this.__userBounds) {\n        delete this.__userBounds;\n\n        var parent = this.$$parent;\n        if (parent) {\n          parent.updateLayoutProperties();\n        }\n\n        qx.ui.core.queue.Layout.add(this);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT PROPERTIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} Empty storage pool\n     *\n     * @lint ignoreReferenceField(__emptyProperties)\n     */\n    __emptyProperties: {},\n\n    /**\n     * Stores the given layout properties\n     *\n     * @param props {Map} Incoming layout property data\n     */\n    setLayoutProperties(props) {\n      if (props == null) {\n        return;\n      }\n\n      var storage = this.__layoutProperties;\n      if (!storage) {\n        storage = this.__layoutProperties = {};\n      }\n\n      // Check values through parent\n      var parent = this.getLayoutParent();\n      if (parent) {\n        parent.updateLayoutProperties(props);\n      }\n\n      // Copy over values\n      for (var key in props) {\n        if (props[key] == null) {\n          delete storage[key];\n        } else {\n          storage[key] = props[key];\n        }\n      }\n    },\n\n    /**\n     * Returns currently stored layout properties\n     *\n     * @return {Map} Returns a map of layout properties\n     */\n    getLayoutProperties() {\n      return this.__layoutProperties || this.__emptyProperties;\n    },\n\n    /**\n     * Removes all stored layout properties.\n     *\n     */\n    clearLayoutProperties() {\n      delete this.__layoutProperties;\n    },\n\n    /**\n     * Should be executed on every change of layout properties.\n     *\n     * This also includes \"virtual\" layout properties like margin or align\n     * when they have an effect on the parent and not on the widget itself.\n     *\n     * This method is always executed on the parent not on the\n     * modified widget itself.\n     *\n     * @param props {Map?null} Optional map of known layout properties\n     */\n    updateLayoutProperties(props) {\n      var layout = this._getLayout();\n      if (layout) {\n        // Verify values through underlying layout\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (props) {\n            for (var key in props) {\n              if (props[key] !== null) {\n                layout.verifyLayoutProperty(this, key, props[key]);\n              }\n            }\n          }\n        }\n\n        // Precomputed and cached children data need to be\n        // rebuild on upcoming (re-)layout.\n        layout.invalidateChildrenCache();\n      }\n\n      qx.ui.core.queue.Layout.add(this);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HIERARCHY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the application root\n     *\n     * @return {qx.ui.root.Abstract} The currently used root\n     */\n    getApplicationRoot() {\n      return qx.core.Init.getApplication().getRoot();\n    },\n\n    /**\n     * Get the items parent. Even if the item has been added to a\n     * layout, the parent is always a child of the containing item. The parent\n     * item may be <code>null</code>.\n     *\n     * @return {qx.ui.core.Widget|null} The parent.\n     */\n    getLayoutParent() {\n      return this.$$parent || null;\n    },\n\n    /**\n     * Set the parent\n     *\n     * @param parent {qx.ui.core.Widget|null} The new parent.\n     */\n    setLayoutParent(parent) {\n      if (this.$$parent === parent) {\n        return;\n      }\n\n      this.$$parent = parent || null;\n      qx.ui.core.queue.Visibility.add(this);\n    },\n\n    /**\n     * Whether the item is a root item and directly connected to\n     * the DOM.\n     *\n     * @return {Boolean} Whether the item a root item\n     */\n    isRootWidget() {\n      return false;\n    },\n\n    /**\n     * Returns the root item. The root item is the item which\n     * is directly inserted into an existing DOM node at HTML level.\n     * This is often the BODY element of a typical web page.\n     *\n     * @return {qx.ui.core.Widget} The root item (if available)\n     */\n    _getRoot() {\n      var parent = this;\n\n      while (parent) {\n        if (parent.isRootWidget()) {\n          return parent;\n        }\n\n        parent = parent.$$parent;\n      }\n\n      return null;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CLONE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    clone() {\n      var clone = super.clone();\n\n      var props = this.__layoutProperties;\n      if (props) {\n        clone.__layoutProperties = qx.lang.Object.clone(props);\n      }\n\n      return clone;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    // remove dynamic theme listener\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().removeListener(\n        \"changeTheme\",\n        this._onChangeTheme,\n        this\n      );\n    }\n    this.$$parent =\n      this.$$subparent =\n      this.__layoutProperties =\n      this.__computedLayout =\n      this.__userBounds =\n      this.__sizeHint =\n        null;\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}