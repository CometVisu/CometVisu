{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "constructor",
    "call",
    "theme",
    "manager",
    "Meta",
    "getInstance",
    "addListener",
    "_onChangeTheme",
    "properties",
    "minWidth",
    "check",
    "nullable",
    "apply",
    "init",
    "themeable",
    "width",
    "event",
    "maxWidth",
    "minHeight",
    "height",
    "maxHeight",
    "allowGrowX",
    "allowShrinkX",
    "allowGrowY",
    "allowShrinkY",
    "allowStretchX",
    "group",
    "mode",
    "allowStretchY",
    "marginTop",
    "marginRight",
    "marginBottom",
    "marginLeft",
    "margin",
    "alignX",
    "alignY",
    "members",
    "Environment",
    "select",
    "_true",
    "props",
    "util",
    "PropertyUtil",
    "getAllProperties",
    "name",
    "desc",
    "userValue",
    "getUserValue",
    "resetThemed",
    "__computedHeightForWidth",
    "__computedLayout",
    "__hasInvalidLayout",
    "__sizeHint",
    "__updateMargin",
    "__userBounds",
    "__layoutProperties",
    "getBounds",
    "clearSeparators",
    "renderSeparator",
    "separator",
    "bounds",
    "renderLayout",
    "left",
    "top",
    "isDisposed",
    "computed",
    "changes",
    "position",
    "size",
    "local",
    "getHeight",
    "_hasHeightForWidth",
    "flowHeight",
    "_getHeightForWidth",
    "ui",
    "queue",
    "Layout",
    "add",
    "isExcluded",
    "hasValidLayout",
    "scheduleLayoutUpdate",
    "invalidateLayoutCache",
    "getSizeHint",
    "compute",
    "hint",
    "_computeSizeHint",
    "getAllowGrowX",
    "getAllowShrinkX",
    "getAllowGrowY",
    "getAllowShrinkY",
    "getMinWidth",
    "getMinHeight",
    "getWidth",
    "getMaxWidth",
    "Infinity",
    "getMaxHeight",
    "layout",
    "_getLayout",
    "hasHeightForWidth",
    "getHeightForWidth",
    "_applyMargin",
    "parent",
    "$$parent",
    "updateLayoutProperties",
    "_applyAlign",
    "_applyDimension",
    "_applyStretching",
    "hasUserBounds",
    "setUserBounds",
    "resetUserBounds",
    "__emptyProperties",
    "setLayoutProperties",
    "storage",
    "getLayoutParent",
    "key",
    "getLayoutProperties",
    "clearLayoutProperties",
    "invalidateChildrenCache",
    "getApplicationRoot",
    "Init",
    "getApplication",
    "getRoot",
    "setLayoutParent",
    "Visibility",
    "isRootWidget",
    "_getRoot",
    "clone",
    "LayoutItem",
    "superclass",
    "prototype",
    "lang",
    "destruct",
    "removeListener",
    "$$subparent"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/LayoutItem.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The base class of all items, which should be laid out using a layout manager\r\n * {@link qx.ui.layout.Abstract}.\r\n */\r\nqx.Class.define(\"qx.ui.core.LayoutItem\", {\r\n  type: \"abstract\",\r\n  extend: qx.core.Object,\r\n\r\n  construct() {\r\n    super();\r\n\r\n    // dynamic theme switch\r\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\r\n      qx.theme.manager.Meta.getInstance().addListener(\r\n        \"changeTheme\",\r\n        this._onChangeTheme,\r\n        this\r\n      );\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      DIMENSION\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * The user provided minimal width.\r\n     *\r\n     * Also take a look at the related properties {@link #width} and {@link #maxWidth}.\r\n     */\r\n    minWidth: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      apply: \"_applyDimension\",\r\n      init: null,\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * The <code>LayoutItem</code>'s preferred width.\r\n     *\r\n     * The computed width may differ from the given width due to\r\n     * stretching. Also take a look at the related properties\r\n     * {@link #minWidth} and {@link #maxWidth}.\r\n     */\r\n    width: {\r\n      check: \"Integer\",\r\n      event: \"changeWidth\",\r\n      nullable: true,\r\n      apply: \"_applyDimension\",\r\n      init: null,\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * The user provided maximal width.\r\n     *\r\n     * Also take a look at the related properties {@link #width} and {@link #minWidth}.\r\n     */\r\n    maxWidth: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      apply: \"_applyDimension\",\r\n      init: null,\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * The user provided minimal height.\r\n     *\r\n     * Also take a look at the related properties {@link #height} and {@link #maxHeight}.\r\n     */\r\n    minHeight: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      apply: \"_applyDimension\",\r\n      init: null,\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * The item's preferred height.\r\n     *\r\n     * The computed height may differ from the given height due to\r\n     * stretching. Also take a look at the related properties\r\n     * {@link #minHeight} and {@link #maxHeight}.\r\n     */\r\n    height: {\r\n      check: \"Integer\",\r\n      event: \"changeHeight\",\r\n      nullable: true,\r\n      apply: \"_applyDimension\",\r\n      init: null,\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * The user provided maximum height.\r\n     *\r\n     * Also take a look at the related properties {@link #height} and {@link #minHeight}.\r\n     */\r\n    maxHeight: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      apply: \"_applyDimension\",\r\n      init: null,\r\n      themeable: true\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      STRETCHING\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /** Whether the item can grow horizontally. */\r\n    allowGrowX: {\r\n      check: \"Boolean\",\r\n      apply: \"_applyStretching\",\r\n      init: true,\r\n      themeable: true\r\n    },\r\n\r\n    /** Whether the item can shrink horizontally. */\r\n    allowShrinkX: {\r\n      check: \"Boolean\",\r\n      apply: \"_applyStretching\",\r\n      init: true,\r\n      themeable: true\r\n    },\r\n\r\n    /** Whether the item can grow vertically. */\r\n    allowGrowY: {\r\n      check: \"Boolean\",\r\n      apply: \"_applyStretching\",\r\n      init: true,\r\n      themeable: true\r\n    },\r\n\r\n    /** Whether the item can shrink vertically. */\r\n    allowShrinkY: {\r\n      check: \"Boolean\",\r\n      apply: \"_applyStretching\",\r\n      init: true,\r\n      themeable: true\r\n    },\r\n\r\n    /** Growing and shrinking in the horizontal direction */\r\n    allowStretchX: {\r\n      group: [\"allowGrowX\", \"allowShrinkX\"],\r\n      mode: \"shorthand\",\r\n      themeable: true\r\n    },\r\n\r\n    /** Growing and shrinking in the vertical direction */\r\n    allowStretchY: {\r\n      group: [\"allowGrowY\", \"allowShrinkY\"],\r\n      mode: \"shorthand\",\r\n      themeable: true\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      MARGIN\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /** Margin of the widget (top) */\r\n    marginTop: {\r\n      check: \"Integer\",\r\n      init: 0,\r\n      apply: \"_applyMargin\",\r\n      themeable: true\r\n    },\r\n\r\n    /** Margin of the widget (right) */\r\n    marginRight: {\r\n      check: \"Integer\",\r\n      init: 0,\r\n      apply: \"_applyMargin\",\r\n      themeable: true\r\n    },\r\n\r\n    /** Margin of the widget (bottom) */\r\n    marginBottom: {\r\n      check: \"Integer\",\r\n      init: 0,\r\n      apply: \"_applyMargin\",\r\n      themeable: true\r\n    },\r\n\r\n    /** Margin of the widget (left) */\r\n    marginLeft: {\r\n      check: \"Integer\",\r\n      init: 0,\r\n      apply: \"_applyMargin\",\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * The 'margin' property is a shorthand property for setting 'marginTop',\r\n     * 'marginRight', 'marginBottom' and 'marginLeft' at the same time.\r\n     *\r\n     * If four values are specified they apply to top, right, bottom and left respectively.\r\n     * If there is only one value, it applies to all sides, if there are two or three,\r\n     * the missing values are taken from the opposite side.\r\n     */\r\n    margin: {\r\n      group: [\"marginTop\", \"marginRight\", \"marginBottom\", \"marginLeft\"],\r\n      mode: \"shorthand\",\r\n      themeable: true\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      ALIGN\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Horizontal alignment of the item in the parent layout.\r\n     *\r\n     * Note: Item alignment is only supported by {@link LayoutItem} layouts where\r\n     * it would have a visual effect. Except for {@link Spacer}, which provides\r\n     * blank space for layouts, all classes that inherit {@link LayoutItem} support alignment.\r\n     */\r\n    alignX: {\r\n      check: [\"left\", \"center\", \"right\"],\r\n      nullable: true,\r\n      apply: \"_applyAlign\",\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * Vertical alignment of the item in the parent layout.\r\n     *\r\n     * Note: Item alignment is only supported by {@link LayoutItem} layouts where\r\n     * it would have a visual effect. Except for {@link Spacer}, which provides\r\n     * blank space for layouts, all classes that inherit {@link LayoutItem} support alignment.\r\n     */\r\n    alignY: {\r\n      check: [\"top\", \"middle\", \"bottom\", \"baseline\"],\r\n      nullable: true,\r\n      apply: \"_applyAlign\",\r\n      themeable: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\r\n  members: {\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      DYNAMIC THEME SWITCH SUPPORT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Handler for the dynamic theme change.\r\n     * @signature function()\r\n     */\r\n    _onChangeTheme: qx.core.Environment.select(\"qx.dyntheme\", {\r\n      true() {\r\n        // reset all themeable properties\r\n        var props = qx.util.PropertyUtil.getAllProperties(this.constructor);\r\n        for (var name in props) {\r\n          var desc = props[name];\r\n          // only themeable properties not having a user value\r\n          if (desc.themeable) {\r\n            var userValue = qx.util.PropertyUtil.getUserValue(this, name);\r\n            if (userValue == null) {\r\n              qx.util.PropertyUtil.resetThemed(this, name);\r\n            }\r\n          }\r\n        }\r\n      },\r\n      false: null\r\n    }),\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      LAYOUT PROCESS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /** @type {Integer} The computed height */\r\n    __computedHeightForWidth: null,\r\n\r\n    /** @type {Map} The computed size of the layout item */\r\n    __computedLayout: null,\r\n\r\n    /** @type {Boolean} Whether the current layout is valid */\r\n    __hasInvalidLayout: null,\r\n\r\n    /** @type {Map} Cached size hint */\r\n    __sizeHint: null,\r\n\r\n    /** @type {Boolean} Whether the margins have changed and must be updated */\r\n    __updateMargin: null,\r\n\r\n    /** @type {Map} user provided bounds of the widget, which override the layout manager */\r\n    __userBounds: null,\r\n\r\n    /** @type {Map} The item's layout properties */\r\n    __layoutProperties: null,\r\n\r\n    /**\r\n     * Get the computed location and dimension as computed by\r\n     * the layout manager.\r\n     *\r\n     * @return {Map|null} The location and dimensions in pixel\r\n     *    (if the layout is valid). Contains the keys\r\n     *    <code>width</code>, <code>height</code>, <code>left</code> and\r\n     *    <code>top</code>.\r\n     */\r\n    getBounds() {\r\n      return this.__userBounds || this.__computedLayout || null;\r\n    },\r\n\r\n    /**\r\n     * Reconfigure number of separators\r\n     */\r\n    clearSeparators() {\r\n      // empty template\r\n    },\r\n\r\n    /**\r\n     * Renders a separator between two children\r\n     *\r\n     * @param separator {String|qx.ui.decoration.IDecorator} The separator to render\r\n     * @param bounds {Map} Contains the left and top coordinate and the width and height\r\n     *    of the separator to render.\r\n     */\r\n    renderSeparator(separator, bounds) {\r\n      // empty template\r\n    },\r\n\r\n    /**\r\n     * Used by the layout engine to apply coordinates and dimensions.\r\n     *\r\n     * @param left {Integer} Any integer value for the left position,\r\n     *   always in pixels\r\n     * @param top {Integer} Any integer value for the top position,\r\n     *   always in pixels\r\n     * @param width {Integer} Any positive integer value for the width,\r\n     *   always in pixels\r\n     * @param height {Integer} Any positive integer value for the height,\r\n     *   always in pixels\r\n     * @return {Map} A map of which layout sizes changed.\r\n     */\r\n    renderLayout(left, top, width, height) {\r\n      // do not render if the layout item is already disposed\r\n      if (this.isDisposed()) {\r\n        return null;\r\n      }\r\n\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        var msg =\r\n          \"Something went wrong with the layout of \" + this.toString() + \"!\";\r\n        this.assertInteger(left, \"Wrong 'left' argument. \" + msg);\r\n        this.assertInteger(top, \"Wrong 'top' argument. \" + msg);\r\n        this.assertInteger(width, \"Wrong 'width' argument. \" + msg);\r\n        this.assertInteger(height, \"Wrong 'height' argument. \" + msg);\r\n\r\n        // this.assertInRange(width, this.getMinWidth() || -1, this.getMaxWidth() || 32000);\r\n        // this.assertInRange(height, this.getMinHeight() || -1, this.getMaxHeight() || 32000);\r\n      }\r\n\r\n      // Detect size changes\r\n\r\n      // Dynamically create data structure for computed layout\r\n      var computed = this.__computedLayout;\r\n      if (!computed) {\r\n        computed = this.__computedLayout = {};\r\n      }\r\n\r\n      // Detect changes\r\n      var changes = {};\r\n\r\n      if (left !== computed.left || top !== computed.top) {\r\n        changes.position = true;\r\n\r\n        computed.left = left;\r\n        computed.top = top;\r\n      }\r\n\r\n      if (width !== computed.width || height !== computed.height) {\r\n        changes.size = true;\r\n\r\n        computed.width = width;\r\n        computed.height = height;\r\n      }\r\n\r\n      // Clear invalidation marker\r\n      if (this.__hasInvalidLayout) {\r\n        changes.local = true;\r\n        delete this.__hasInvalidLayout;\r\n      }\r\n\r\n      if (this.__updateMargin) {\r\n        changes.margin = true;\r\n        delete this.__updateMargin;\r\n      }\r\n\r\n      /*\r\n       * Height for width support\r\n       *\r\n       * Results into a re-layout which means that width/height is applied in the next iteration.\r\n       *\r\n       * Note that it is important that this happens after the above first pass at calculating a\r\n       * computed size because otherwise getBounds() will return null, and this will cause an\r\n       * issue where the existing size is expected to have already been applied by the layout.\r\n       * See https://github.com/qooxdoo/qooxdoo/issues/9553\r\n       */\r\n      if (this.getHeight() == null && this._hasHeightForWidth()) {\r\n        var flowHeight = this._getHeightForWidth(width);\r\n\r\n        if (\r\n          flowHeight != null &&\r\n          flowHeight !== this.__computedHeightForWidth\r\n        ) {\r\n          // This variable is used in the next computation of the size hint\r\n          this.__computedHeightForWidth = flowHeight;\r\n\r\n          // Re-add to layout queue\r\n          qx.ui.core.queue.Layout.add(this);\r\n        }\r\n      }\r\n\r\n      // Returns changes, especially for deriving classes\r\n      return changes;\r\n    },\r\n\r\n    /**\r\n     * Whether the item should be excluded from the layout\r\n     *\r\n     * @return {Boolean} Should the item be excluded by the layout\r\n     */\r\n    isExcluded() {\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Whether the layout of this item (to layout the children)\r\n     * is valid.\r\n     *\r\n     * @return {Boolean} Returns <code>true</code>\r\n     */\r\n    hasValidLayout() {\r\n      return !this.__hasInvalidLayout;\r\n    },\r\n\r\n    /**\r\n     * Indicate that the item has layout changes and propagate this information\r\n     * up the item hierarchy.\r\n     *\r\n     */\r\n    scheduleLayoutUpdate() {\r\n      qx.ui.core.queue.Layout.add(this);\r\n    },\r\n\r\n    /**\r\n     * Called by the layout manager to mark this item's layout as invalid.\r\n     * This function should clear all layout relevant caches.\r\n     */\r\n    invalidateLayoutCache() {\r\n      // this.debug(\"Mark layout invalid!\");\r\n\r\n      this.__hasInvalidLayout = true;\r\n      this.__sizeHint = null;\r\n    },\r\n\r\n    /**\r\n     * A size hint computes the dimensions of a widget. It returns\r\n     * the recommended dimensions as well as the min and max dimensions.\r\n     * The min and max values already respect the stretching properties.\r\n     *\r\n     * <h3>Wording</h3>\r\n     * <ul>\r\n     * <li>User value: Value defined by the widget user, using the size properties</li>\r\n     *\r\n     * <li>Layout value: The value computed by {@link qx.ui.core.Widget#_getContentHint}</li>\r\n     * </ul>\r\n     *\r\n     * <h3>Algorithm</h3>\r\n     * <ul>\r\n     * <li>minSize: If the user min size is not null, the user value is taken,\r\n     *     otherwise the layout value is used.</li>\r\n     *\r\n     * <li>(preferred) size: If the user value is not null the user value is used,\r\n     *     otherwise the layout value is used.</li>\r\n     *\r\n     * <li>max size: Same as the preferred size.</li>\r\n     * </ul>\r\n     *\r\n     * @param compute {Boolean?true} Automatically compute size hint if currently not\r\n     *   cached?\r\n     * @return {Map} The map with the preferred width/height and the allowed\r\n     *   minimum and maximum values in cases where shrinking or growing\r\n     *   is required.\r\n     */\r\n    getSizeHint(compute) {\r\n      var hint = this.__sizeHint;\r\n      if (hint) {\r\n        return hint;\r\n      }\r\n\r\n      if (compute === false) {\r\n        return null;\r\n      }\r\n\r\n      // Compute as defined\r\n      hint = this.__sizeHint = this._computeSizeHint();\r\n\r\n      // Respect height for width\r\n      if (\r\n        this._hasHeightForWidth() &&\r\n        this.__computedHeightForWidth &&\r\n        this.getHeight() == null\r\n      ) {\r\n        hint.height = this.__computedHeightForWidth;\r\n      }\r\n\r\n      // normalize width\r\n      if (hint.minWidth > hint.width) {\r\n        hint.width = hint.minWidth;\r\n      }\r\n      if (hint.maxWidth < hint.width) {\r\n        hint.width = hint.maxWidth;\r\n      }\r\n\r\n      if (!this.getAllowGrowX()) {\r\n        hint.maxWidth = hint.width;\r\n      }\r\n      if (!this.getAllowShrinkX()) {\r\n        hint.minWidth = hint.width;\r\n      }\r\n\r\n      // normalize height\r\n      if (hint.minHeight > hint.height) {\r\n        hint.height = hint.minHeight;\r\n      }\r\n      if (hint.maxHeight < hint.height) {\r\n        hint.height = hint.maxHeight;\r\n      }\r\n\r\n      if (!this.getAllowGrowY()) {\r\n        hint.maxHeight = hint.height;\r\n      }\r\n      if (!this.getAllowShrinkY()) {\r\n        hint.minHeight = hint.height;\r\n      }\r\n\r\n      // Finally return\r\n      return hint;\r\n    },\r\n\r\n    /**\r\n     * Computes the size hint of the layout item.\r\n     *\r\n     * @return {Map} The map with the preferred width/height and the allowed\r\n     *   minimum and maximum values.\r\n     */\r\n    _computeSizeHint() {\r\n      var minWidth = this.getMinWidth() || 0;\r\n      var minHeight = this.getMinHeight() || 0;\r\n\r\n      var width = this.getWidth() || minWidth;\r\n      var height = this.getHeight() || minHeight;\r\n\r\n      var maxWidth = this.getMaxWidth() || Infinity;\r\n      var maxHeight = this.getMaxHeight() || Infinity;\r\n\r\n      return {\r\n        minWidth: minWidth,\r\n        width: width,\r\n        maxWidth: maxWidth,\r\n        minHeight: minHeight,\r\n        height: height,\r\n        maxHeight: maxHeight\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Whether the item supports height for width.\r\n     *\r\n     * @return {Boolean} Whether the item supports height for width\r\n     */\r\n    _hasHeightForWidth() {\r\n      var layout = this._getLayout();\r\n      if (layout) {\r\n        return layout.hasHeightForWidth();\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * If an item wants to trade height for width it has to implement this\r\n     * method and return the preferred height of the item if it is resized to\r\n     * the given width. This function returns <code>null</code> if the item\r\n     * do not support height for width.\r\n     *\r\n     * @param width {Integer} The computed width\r\n     * @return {Integer} The desired height\r\n     */\r\n    _getHeightForWidth(width) {\r\n      var layout = this._getLayout();\r\n      if (layout && layout.hasHeightForWidth()) {\r\n        return layout.getHeightForWidth(width);\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /**\r\n     * Get the widget's layout manager.\r\n     *\r\n     * @return {qx.ui.layout.Abstract} The widget's layout manager\r\n     */\r\n    _getLayout() {\r\n      return null;\r\n    },\r\n\r\n    // property apply\r\n    _applyMargin() {\r\n      this.__updateMargin = true;\r\n\r\n      var parent = this.$$parent;\r\n      if (parent) {\r\n        parent.updateLayoutProperties();\r\n      }\r\n    },\r\n\r\n    // property apply\r\n    _applyAlign() {\r\n      var parent = this.$$parent;\r\n      if (parent) {\r\n        parent.updateLayoutProperties();\r\n      }\r\n    },\r\n\r\n    // property apply\r\n    _applyDimension() {\r\n      qx.ui.core.queue.Layout.add(this);\r\n    },\r\n\r\n    // property apply\r\n    _applyStretching() {\r\n      qx.ui.core.queue.Layout.add(this);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      SUPPORT FOR USER BOUNDARIES\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Whether user bounds are set on this layout item\r\n     *\r\n     * @return {Boolean} Whether user bounds are set on this layout item\r\n     */\r\n    hasUserBounds() {\r\n      return !!this.__userBounds;\r\n    },\r\n\r\n    /**\r\n     * Set user bounds of the widget. Widgets with user bounds are sized and\r\n     * positioned manually and are ignored by any layout manager.\r\n     *\r\n     * @param left {Integer} left position (relative to the parent)\r\n     * @param top {Integer} top position (relative to the parent)\r\n     * @param width {Integer} width of the layout item\r\n     * @param height {Integer} height of the layout item\r\n     */\r\n    setUserBounds(left, top, width, height) {\r\n      if (!this.__userBounds) {\r\n        var parent = this.$$parent;\r\n        if (parent) {\r\n          parent.updateLayoutProperties();\r\n        }\r\n      }\r\n\r\n      this.__userBounds = {\r\n        left: left,\r\n        top: top,\r\n        width: width,\r\n        height: height\r\n      };\r\n\r\n      qx.ui.core.queue.Layout.add(this);\r\n    },\r\n\r\n    /**\r\n     * Clear the user bounds. After this call the layout item is laid out by\r\n     * the layout manager again.\r\n     *\r\n     */\r\n    resetUserBounds() {\r\n      if (this.__userBounds) {\r\n        delete this.__userBounds;\r\n\r\n        var parent = this.$$parent;\r\n        if (parent) {\r\n          parent.updateLayoutProperties();\r\n        }\r\n\r\n        qx.ui.core.queue.Layout.add(this);\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      LAYOUT PROPERTIES\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * @type {Map} Empty storage pool\r\n     *\r\n     * @lint ignoreReferenceField(__emptyProperties)\r\n     */\r\n    __emptyProperties: {},\r\n\r\n    /**\r\n     * Stores the given layout properties\r\n     *\r\n     * @param props {Map} Incoming layout property data\r\n     */\r\n    setLayoutProperties(props) {\r\n      if (props == null) {\r\n        return;\r\n      }\r\n\r\n      var storage = this.__layoutProperties;\r\n      if (!storage) {\r\n        storage = this.__layoutProperties = {};\r\n      }\r\n\r\n      // Check values through parent\r\n      var parent = this.getLayoutParent();\r\n      if (parent) {\r\n        parent.updateLayoutProperties(props);\r\n      }\r\n\r\n      // Copy over values\r\n      for (var key in props) {\r\n        if (props[key] == null) {\r\n          delete storage[key];\r\n        } else {\r\n          storage[key] = props[key];\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns currently stored layout properties\r\n     *\r\n     * @return {Map} Returns a map of layout properties\r\n     */\r\n    getLayoutProperties() {\r\n      return this.__layoutProperties || this.__emptyProperties;\r\n    },\r\n\r\n    /**\r\n     * Removes all stored layout properties.\r\n     *\r\n     */\r\n    clearLayoutProperties() {\r\n      delete this.__layoutProperties;\r\n    },\r\n\r\n    /**\r\n     * Should be executed on every change of layout properties.\r\n     *\r\n     * This also includes \"virtual\" layout properties like margin or align\r\n     * when they have an effect on the parent and not on the widget itself.\r\n     *\r\n     * This method is always executed on the parent not on the\r\n     * modified widget itself.\r\n     *\r\n     * @param props {Map?null} Optional map of known layout properties\r\n     */\r\n    updateLayoutProperties(props) {\r\n      var layout = this._getLayout();\r\n      if (layout) {\r\n        // Verify values through underlying layout\r\n        if (qx.core.Environment.get(\"qx.debug\")) {\r\n          if (props) {\r\n            for (var key in props) {\r\n              if (props[key] !== null) {\r\n                layout.verifyLayoutProperty(this, key, props[key]);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // Precomputed and cached children data need to be\r\n        // rebuild on upcoming (re-)layout.\r\n        layout.invalidateChildrenCache();\r\n      }\r\n\r\n      qx.ui.core.queue.Layout.add(this);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      HIERARCHY SUPPORT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Returns the application root\r\n     *\r\n     * @return {qx.ui.root.Abstract} The currently used root\r\n     */\r\n    getApplicationRoot() {\r\n      return qx.core.Init.getApplication().getRoot();\r\n    },\r\n\r\n    /**\r\n     * Get the items parent. Even if the item has been added to a\r\n     * layout, the parent is always a child of the containing item. The parent\r\n     * item may be <code>null</code>.\r\n     *\r\n     * @return {qx.ui.core.Widget|null} The parent.\r\n     */\r\n    getLayoutParent() {\r\n      return this.$$parent || null;\r\n    },\r\n\r\n    /**\r\n     * Set the parent\r\n     *\r\n     * @param parent {qx.ui.core.Widget|null} The new parent.\r\n     */\r\n    setLayoutParent(parent) {\r\n      if (this.$$parent === parent) {\r\n        return;\r\n      }\r\n\r\n      this.$$parent = parent || null;\r\n      qx.ui.core.queue.Visibility.add(this);\r\n    },\r\n\r\n    /**\r\n     * Whether the item is a root item and directly connected to\r\n     * the DOM.\r\n     *\r\n     * @return {Boolean} Whether the item a root item\r\n     */\r\n    isRootWidget() {\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Returns the root item. The root item is the item which\r\n     * is directly inserted into an existing DOM node at HTML level.\r\n     * This is often the BODY element of a typical web page.\r\n     *\r\n     * @return {qx.ui.core.Widget} The root item (if available)\r\n     */\r\n    _getRoot() {\r\n      var parent = this;\r\n\r\n      while (parent) {\r\n        if (parent.isRootWidget()) {\r\n          return parent;\r\n        }\r\n\r\n        parent = parent.$$parent;\r\n      }\r\n\r\n      return null;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      CLONE SUPPORT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // overridden\r\n    clone() {\r\n      var clone = super.clone();\r\n\r\n      var props = this.__layoutProperties;\r\n      if (props) {\r\n        clone.__layoutProperties = qx.lang.Object.clone(props);\r\n      }\r\n\r\n      return clone;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    // remove dynamic theme listener\r\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\r\n      qx.theme.manager.Meta.getInstance().removeListener(\r\n        \"changeTheme\",\r\n        this._onChangeTheme,\r\n        this\r\n      );\r\n    }\r\n    this.$$parent =\r\n      this.$$subparent =\r\n      this.__layoutProperties =\r\n      this.__computedLayout =\r\n      this.__userBounds =\r\n      this.__sizeHint =\r\n        null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}