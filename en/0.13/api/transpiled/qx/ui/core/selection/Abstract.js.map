{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "__selection",
    "events",
    "changeSelection",
    "properties",
    "mode",
    "check",
    "init",
    "apply",
    "drag",
    "quick",
    "readOnly",
    "members",
    "__scrollStepX",
    "__scrollStepY",
    "__scrollTimer",
    "__frameScroll",
    "__lastRelX",
    "__lastRelY",
    "__frameLocation",
    "__dragStartX",
    "__dragStartY",
    "__inCapture",
    "__pointerX",
    "__pointerY",
    "__moveDirectionX",
    "__moveDirectionY",
    "__selectionModified",
    "__selectionContext",
    "__leadItem",
    "__anchorItem",
    "__pointerDownOnSelected",
    "_userInteraction",
    "__oldScrollTop",
    "getSelectionContext",
    "selectAll",
    "getMode",
    "Error",
    "_selectAllItems",
    "_fireChange",
    "selectItem",
    "item",
    "_setSelectedItem",
    "_setLeadItem",
    "_setAnchorItem",
    "_scrollItemIntoView",
    "addItem",
    "_getAnchorItem",
    "_addToSelection",
    "removeItem",
    "_removeFromSelection",
    "isSelectionEmpty",
    "selected",
    "_applyDefaultSelection",
    "getLeadItem",
    "selectItemRange",
    "begin",
    "end",
    "_selectItemRange",
    "clearSelection",
    "_clearSelection",
    "replaceSelection",
    "items",
    "length",
    "_replaceMultiSelection",
    "getSelectedItem",
    "result",
    "_getSelectedItem",
    "undefined",
    "getSelection",
    "values",
    "getSortedSelection",
    "children",
    "getSelectables",
    "sel",
    "sort",
    "a",
    "b",
    "indexOf",
    "isItemSelected",
    "hash",
    "_selectableToHashCode",
    "lang",
    "isEmpty",
    "invertSelection",
    "selectables",
    "i",
    "_toggleInSelection",
    "value",
    "old",
    "_styleSelectable",
    "_isSelectable",
    "_getSelectableFromPointerEvent",
    "event",
    "target",
    "getTarget",
    "enabled",
    "_capture",
    "_releaseCapture",
    "_getLocation",
    "_getDimension",
    "_getSelectableLocationX",
    "_getSelectableLocationY",
    "_getScroll",
    "_scrollBy",
    "xoff",
    "yoff",
    "all",
    "_getSelectableRange",
    "item1",
    "item2",
    "_getFirstSelectable",
    "_getLastSelectable",
    "_getFirstVisibleSelectable",
    "_getLastVisibleSelectable",
    "_getRelatedSelectable",
    "relation",
    "_getPage",
    "lead",
    "up",
    "_applyMode",
    "handlePointerOver",
    "top",
    "getPointerType",
    "getQuick",
    "handlePointerDown",
    "isCtrlPressed",
    "Environment",
    "get",
    "isMetaPressed",
    "isShiftPressed",
    "getDrag",
    "getDocumentLeft",
    "left",
    "getDocumentTop",
    "handleTap",
    "isReadOnly",
    "anchor",
    "_cleanup",
    "handleLoseCapture",
    "handlePointerMove",
    "dragX",
    "dragY",
    "location",
    "right",
    "bottom",
    "Timer",
    "addListener",
    "_onInterval",
    "start",
    "_autoSelect",
    "stopPropagation",
    "handleAddItem",
    "e",
    "getData",
    "handleRemoveItem",
    "stop",
    "inner",
    "relX",
    "Math",
    "max",
    "min",
    "width",
    "relY",
    "height",
    "moveX",
    "nextX",
    "locationX",
    "moveY",
    "nextY",
    "locationY",
    "_deselectItemRange",
    "__navigationKeys",
    "Home",
    "Down",
    "Right",
    "PageDown",
    "End",
    "Up",
    "Left",
    "PageUp",
    "handleKeyPress",
    "current",
    "next",
    "key",
    "getKeyIdentifier",
    "consumed",
    "range",
    "l",
    "selection",
    "mapped",
    "__rangeToMap",
    "modified",
    "selectable",
    "incoming",
    "first",
    "last",
    "context",
    "fireDataEvent",
    "force",
    "destruct",
    "_disposeObjects",
    "ui",
    "Abstract"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/selection/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Generic selection manager to bring rich desktop like selection behavior\n * to widgets and low-level interactive controls.\n *\n * The selection handling supports both Shift and Ctrl/Meta modifies like\n * known from native applications.\n */\nqx.Class.define(\"qx.ui.core.selection.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    // {Map} Internal selection storage\n    this.__selection = {};\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fires after the selection was modified. Contains the selection under the data property. */\n    changeSelection: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Selects the selection mode to use.\n     *\n     * * single: One or no element is selected\n     * * multi: Multi items could be selected. Also allows empty selections.\n     * * additive: Easy Web-2.0 selection mode. Allows multiple selections without modifier keys.\n     * * one: If possible always exactly one item is selected\n     */\n    mode: {\n      check: [\"single\", \"multi\", \"additive\", \"one\"],\n      init: \"single\",\n      apply: \"_applyMode\"\n    },\n\n    /**\n     * Enable drag selection (multi selection of items through\n     * dragging the pointer in pressed states).\n     *\n     * Only possible for the modes <code>multi</code> and <code>additive</code>\n     */\n    drag: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Enable quick selection mode, where no tap is needed to change the selection.\n     *\n     * Only possible for the modes <code>single</code> and <code>one</code>.\n     */\n    quick: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the selection can be changed by user interaction\n     */\n    readOnly: {\n      check: \"Boolean\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    __scrollStepX: 0,\n    __scrollStepY: 0,\n    __scrollTimer: null,\n    __frameScroll: null,\n    __lastRelX: null,\n    __lastRelY: null,\n    __frameLocation: null,\n    __dragStartX: null,\n    __dragStartY: null,\n    __inCapture: null,\n    __pointerX: null,\n    __pointerY: null,\n    __moveDirectionX: null,\n    __moveDirectionY: null,\n    __selectionModified: null,\n    __selectionContext: null,\n    __leadItem: null,\n    __selection: null,\n    __anchorItem: null,\n    __pointerDownOnSelected: null,\n\n    // A flag that signals an user interaction, which means the selection change\n    // was triggered by pointer or keyboard [BUG #3344]\n    _userInteraction: false,\n\n    __oldScrollTop: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      USER APIS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the selection context. One of <code>tap</code>,\n     * <code>quick</code>, <code>drag</code> or <code>key</code> or\n     * <code>null</code>.\n     *\n     * @return {String} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>\n     */\n    getSelectionContext() {\n      return this.__selectionContext;\n    },\n\n    /**\n     * Selects all items of the managed object.\n     *\n     */\n    selectAll() {\n      var mode = this.getMode();\n      if (mode == \"single\" || mode == \"one\") {\n        throw new Error(\"Can not select all items in selection mode: \" + mode);\n      }\n\n      this._selectAllItems();\n      this._fireChange();\n    },\n\n    /**\n     * Selects the given item. Replaces current selection\n     * completely with the new item.\n     *\n     * Use {@link #addItem} instead if you want to add new\n     * items to an existing selection.\n     *\n     * @param item {Object} Any valid item\n     */\n    selectItem(item) {\n      this._setSelectedItem(item);\n\n      var mode = this.getMode();\n      if (mode !== \"single\" && mode !== \"one\") {\n        this._setLeadItem(item);\n        this._setAnchorItem(item);\n      }\n\n      this._scrollItemIntoView(item);\n      this._fireChange();\n    },\n\n    /**\n     * Adds the given item to the existing selection.\n     *\n     * Use {@link #selectItem} instead if you want to replace\n     * the current selection.\n     *\n     * @param item {Object} Any valid item\n     */\n    addItem(item) {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        this._setSelectedItem(item);\n      } else {\n        if (this._getAnchorItem() == null) {\n          this._setAnchorItem(item);\n        }\n\n        this._setLeadItem(item);\n        this._addToSelection(item);\n      }\n\n      this._scrollItemIntoView(item);\n      this._fireChange();\n    },\n\n    /**\n     * Removes the given item from the selection.\n     *\n     * Use {@link #clearSelection} when you want to clear\n     * the whole selection at once.\n     *\n     * @param item {Object} Any valid item\n     */\n    removeItem(item) {\n      this._removeFromSelection(item);\n\n      if (this.getMode() === \"one\" && this.isSelectionEmpty()) {\n        var selected = this._applyDefaultSelection();\n\n        // Do not fire any event in this case.\n        if (selected == item) {\n          return;\n        }\n      }\n\n      if (this.getLeadItem() == item) {\n        this._setLeadItem(null);\n      }\n\n      if (this._getAnchorItem() == item) {\n        this._setAnchorItem(null);\n      }\n\n      this._fireChange();\n    },\n\n    /**\n     * Selects an item range between two given items.\n     *\n     * @param begin {Object} Item to start with\n     * @param end {Object} Item to end at\n     */\n    selectItemRange(begin, end) {\n      var mode = this.getMode();\n      if (mode == \"single\" || mode == \"one\") {\n        throw new Error(\n          \"Can not select multiple items in selection mode: \" + mode\n        );\n      }\n\n      this._selectItemRange(begin, end);\n\n      this._setAnchorItem(begin);\n\n      this._setLeadItem(end);\n      this._scrollItemIntoView(end);\n\n      this._fireChange();\n    },\n\n    /**\n     * Clears the whole selection at once. Also\n     * resets the lead and anchor items and their\n     * styles.\n     *\n     */\n    clearSelection() {\n      if (this.getMode() == \"one\") {\n        var selected = this._applyDefaultSelection(true);\n        if (selected != null) {\n          return;\n        }\n      }\n\n      this._clearSelection();\n      this._setLeadItem(null);\n      this._setAnchorItem(null);\n\n      this._fireChange();\n    },\n\n    /**\n     * Replaces current selection with given array of items.\n     *\n     * Please note that in single selection scenarios it is more\n     * efficient to directly use {@link #selectItem}.\n     *\n     * @param items {Array} Items to select\n     */\n    replaceSelection(items) {\n      var mode = this.getMode();\n      if (mode == \"one\" || mode === \"single\") {\n        if (items.length > 1) {\n          throw new Error(\n            \"Could not select more than one items in mode: \" + mode + \"!\"\n          );\n        }\n\n        if (items.length == 1) {\n          this.selectItem(items[0]);\n        } else {\n          this.clearSelection();\n        }\n        return;\n      } else {\n        this._replaceMultiSelection(items);\n      }\n    },\n\n    /**\n     * Get the selected item. This method does only work in <code>single</code>\n     * selection mode.\n     *\n     * @return {Object} The selected item.\n     */\n    getSelectedItem() {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        var result = this._getSelectedItem();\n        return result != undefined ? result : null;\n      }\n\n      throw new Error(\n        \"The method getSelectedItem() is only supported in 'single' and 'one' selection mode!\"\n      );\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {Object[]} List of items.\n     */\n    getSelection() {\n      return Object.values(this.__selection);\n    },\n\n    /**\n     * Returns the selection sorted by the index in the\n     * container of the selection (the assigned widget)\n     *\n     * @return {Object[]} Sorted list of items\n     */\n    getSortedSelection() {\n      var children = this.getSelectables();\n      var sel = Object.values(this.__selection);\n\n      sel.sort(function (a, b) {\n        return children.indexOf(a) - children.indexOf(b);\n      });\n\n      return sel;\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {var} Any valid selectable item\n     * @return {Boolean} Whether the item is selected\n     */\n    isItemSelected(item) {\n      var hash = this._selectableToHashCode(item);\n      return this.__selection[hash] !== undefined;\n    },\n\n    /**\n     * Whether the selection is empty\n     *\n     * @return {Boolean} Whether the selection is empty\n     */\n    isSelectionEmpty() {\n      return qx.lang.Object.isEmpty(this.__selection);\n    },\n\n    /**\n     * Invert the selection. Select the non selected and deselect the selected.\n     */\n    invertSelection() {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        throw new Error(\n          \"The method invertSelection() is only supported in 'multi' and 'additive' selection mode!\"\n        );\n      }\n\n      var selectables = this.getSelectables();\n      for (var i = 0; i < selectables.length; i++) {\n        this._toggleInSelection(selectables[i]);\n      }\n\n      this._fireChange();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LEAD/ANCHOR SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @param value {Object} Any valid item or <code>null</code>\n     */\n    _setLeadItem(value) {\n      var old = this.__leadItem;\n\n      if (old !== null) {\n        this._styleSelectable(old, \"lead\", false);\n      }\n\n      if (value !== null) {\n        this._styleSelectable(value, \"lead\", true);\n      }\n\n      this.__leadItem = value;\n    },\n\n    /**\n     * Returns the current lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @return {Object} The lead item or <code>null</code>\n     */\n    getLeadItem() {\n      return this.__leadItem;\n    },\n\n    /**\n     * Sets the anchor item. This is the item which is the starting\n     * point for all range selections. Normally this is the item which was\n     * tapped on the last time without any modifier keys pressed.\n     *\n     * @param value {Object} Any valid item or <code>null</code>\n     */\n    _setAnchorItem(value) {\n      var old = this.__anchorItem;\n\n      if (old != null) {\n        this._styleSelectable(old, \"anchor\", false);\n      }\n\n      if (value != null) {\n        this._styleSelectable(value, \"anchor\", true);\n      }\n\n      this.__anchorItem = value;\n    },\n\n    /**\n     * Returns the current anchor item. This is the item which is the starting\n     * point for all range selections. Normally this is the item which was\n     * tapped on the last time without any modifier keys pressed.\n     *\n     * @return {Object} The anchor item or <code>null</code>\n     */\n    _getAnchorItem() {\n      return this.__anchorItem !== null ? this.__anchorItem : null;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      BASIC SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether the given item is selectable.\n     *\n     * @param item {var} Any item\n     * @return {Boolean} <code>true</code> when the item is selectable\n     */\n    _isSelectable(item) {\n      throw new Error(\"Abstract method call: _isSelectable()\");\n    },\n\n    /**\n     * Finds the selectable instance from a pointer event\n     *\n     * @param event {qx.event.type.Pointer} The pointer event\n     * @return {Object|null} The resulting selectable\n     */\n    _getSelectableFromPointerEvent(event) {\n      var target = event.getTarget();\n      // check for target (may be null when leaving the viewport) [BUG #4378]\n      if (target && this._isSelectable(target)) {\n        return target;\n      }\n      return null;\n    },\n\n    /**\n     * Returns an unique hashcode for the given item.\n     *\n     * @param item {var} Any item\n     * @return {String} A valid hashcode\n     */\n    _selectableToHashCode(item) {\n      throw new Error(\"Abstract method call: _selectableToHashCode()\");\n    },\n\n    /**\n     * Updates the style (appearance) of the given item.\n     *\n     * @param item {var} Item to modify\n     * @param type {String} Any of <code>selected</code>, <code>anchor</code> or <code>lead</code>\n     * @param enabled {Boolean} Whether the given style should be added or removed.\n     */\n    _styleSelectable(item, type, enabled) {\n      throw new Error(\"Abstract method call: _styleSelectable()\");\n    },\n\n    /**\n     * Enables capturing of the container.\n     *\n     */\n    _capture() {\n      throw new Error(\"Abstract method call: _capture()\");\n    },\n\n    /**\n     * Releases capturing of the container\n     *\n     */\n    _releaseCapture() {\n      throw new Error(\"Abstract method call: _releaseCapture()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DIMENSION AND LOCATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the location of the container\n     *\n     * @return {Map} Map with the keys <code>top</code>, <code>right</code>,\n     *    <code>bottom</code> and <code>left</code>.\n     */\n    _getLocation() {\n      throw new Error(\"Abstract method call: _getLocation()\");\n    },\n\n    /**\n     * Returns the dimension of the container (available scrolling space).\n     *\n     * @return {Map} Map with the keys <code>width</code> and <code>height</code>.\n     */\n    _getDimension() {\n      throw new Error(\"Abstract method call: _getDimension()\");\n    },\n\n    /**\n     * Returns the relative (to the container) horizontal location of the given item.\n     *\n     * @param item {var} Any item\n     * @return {Map} A map with the keys <code>left</code> and <code>right</code>.\n     */\n    _getSelectableLocationX(item) {\n      throw new Error(\"Abstract method call: _getSelectableLocationX()\");\n    },\n\n    /**\n     * Returns the relative (to the container) horizontal location of the given item.\n     *\n     * @param item {var} Any item\n     * @return {Map} A map with the keys <code>top</code> and <code>bottom</code>.\n     */\n    _getSelectableLocationY(item) {\n      throw new Error(\"Abstract method call: _getSelectableLocationY()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the scroll position of the container.\n     *\n     * @return {Map} Map with the keys <code>left</code> and <code>top</code>.\n     */\n    _getScroll() {\n      throw new Error(\"Abstract method call: _getScroll()\");\n    },\n\n    /**\n     * Scrolls by the given offset\n     *\n     * @param xoff {Integer} Horizontal offset to scroll by\n     * @param yoff {Integer} Vertical offset to scroll by\n     */\n    _scrollBy(xoff, yoff) {\n      throw new Error(\"Abstract method call: _scrollBy()\");\n    },\n\n    /**\n     * Scrolls the given item into the view (make it visible)\n     *\n     * @param item {var} Any item\n     */\n    _scrollItemIntoView(item) {\n      throw new Error(\"Abstract method call: _scrollItemIntoView()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      QUERY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns all selectable items of the container.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {Array} A list of items\n     */\n    getSelectables(all) {\n      throw new Error(\"Abstract method call: getSelectables()\");\n    },\n\n    /**\n     * Returns all selectable items between the two given items.\n     *\n     * The items could be given in any order.\n     *\n     * @param item1 {var} First item\n     * @param item2 {var} Second item\n     * @return {Array} List of items\n     */\n    _getSelectableRange(item1, item2) {\n      throw new Error(\"Abstract method call: _getSelectableRange()\");\n    },\n\n    /**\n     * Returns the first selectable item.\n     *\n     * @return {var} The first selectable item\n     */\n    _getFirstSelectable() {\n      throw new Error(\"Abstract method call: _getFirstSelectable()\");\n    },\n\n    /**\n     * Returns the last selectable item.\n     *\n     * @return {var} The last selectable item\n     */\n    _getLastSelectable() {\n      throw new Error(\"Abstract method call: _getLastSelectable()\");\n    },\n\n    /**\n     * Returns the first visible and selectable item.\n     *\n     * @return {var} The first visible and selectable item\n     */\n    _getFirstVisibleSelectable() {\n      throw new Error(\"Abstract method call: _getFirstVisibleSelectable()\");\n    },\n\n    /**\n     * Returns the last visible and selectable item.\n     *\n     * @return {var} The last visible and selectable item\n     */\n    _getLastVisibleSelectable() {\n      throw new Error(\"Abstract method call: _getLastVisibleSelectable()\");\n    },\n\n    /**\n     * Returns a selectable item which is related to the given\n     * <code>item</code> through the value of <code>relation</code>.\n     *\n     * @param item {var} Any item\n     * @param relation {String} A valid relation: <code>above</code>,\n     *    <code>right</code>, <code>under</code> or <code>left</code>\n     * @return {var} The related item\n     */\n    _getRelatedSelectable(item, relation) {\n      throw new Error(\"Abstract method call: _getRelatedSelectable()\");\n    },\n\n    /**\n     * Returns the item which should be selected on pageUp/pageDown.\n     *\n     * May also scroll to the needed position.\n     *\n     * @param lead {var} The current lead item\n     * @param up {Boolean?false} Which page key was pressed:\n     *   <code>up</code> or <code>down</code>.\n     */\n    _getPage(lead, up) {\n      throw new Error(\"Abstract method call: _getPage()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyMode(value, old) {\n      this._setLeadItem(null);\n      this._setAnchorItem(null);\n\n      this._clearSelection();\n\n      // Mode \"one\" requires one selected item\n      if (value === \"one\") {\n        this._applyDefaultSelection(true);\n      }\n\n      this._fireChange();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method should be connected to the <code>pointerover</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerOver(event) {\n      // All browsers (except Opera) fire a native \"mouseover\" event when a scroll appears\n      // by keyboard interaction. We have to ignore the event to avoid a selection for\n      // \"pointerover\" (quick selection). For more details see [BUG #4225]\n      if (\n        this.__oldScrollTop != null &&\n        this.__oldScrollTop != this._getScroll().top\n      ) {\n        this.__oldScrollTop = null;\n        return;\n      }\n\n      // quick select should only work on mouse events\n      if (event.getPointerType() != \"mouse\") {\n        return;\n      }\n\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      if (!this.getQuick()) {\n        this._userInteraction = false;\n        return;\n      }\n\n      var mode = this.getMode();\n      if (mode !== \"one\" && mode !== \"single\") {\n        this._userInteraction = false;\n        return;\n      }\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      this._setSelectedItem(item);\n\n      // Be sure that item is in view\n      // This does not feel good when pointerover is used\n      // this._scrollItemIntoView(item);\n\n      // Fire change event as needed\n      this._fireChange(\"quick\");\n\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>pointerdown</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerDown(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      // Read in keyboard modifiers\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      // tapping on selected items deselect on pointerup, not on pointerdown\n      if (\n        this.isItemSelected(item) &&\n        !isShiftPressed &&\n        !isCtrlPressed &&\n        !this.getDrag()\n      ) {\n        this.__pointerDownOnSelected = item;\n        this._userInteraction = false;\n        return;\n      } else {\n        this.__pointerDownOnSelected = null;\n      }\n\n      // Be sure that item is in view\n      this._scrollItemIntoView(item);\n\n      // Drag selection\n      var mode = this.getMode();\n      if (\n        this.getDrag() &&\n        mode !== \"single\" &&\n        mode !== \"one\" &&\n        !isShiftPressed &&\n        !isCtrlPressed &&\n        event.getPointerType() == \"mouse\"\n      ) {\n        this._setAnchorItem(item);\n        this._setLeadItem(item);\n\n        // Cache location/scroll data\n        this.__frameLocation = this._getLocation();\n        this.__frameScroll = this._getScroll();\n\n        // Store position at start\n        this.__dragStartX = event.getDocumentLeft() + this.__frameScroll.left;\n        this.__dragStartY = event.getDocumentTop() + this.__frameScroll.top;\n\n        // Switch to capture mode\n        this.__inCapture = true;\n        this._capture();\n      }\n\n      // Fire change event as needed\n      this._fireChange(\"tap\");\n\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>tap</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Tap} A valid pointer event\n     */\n    handleTap(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      // Read in keyboard modifiers\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      if (\n        !isCtrlPressed &&\n        !isShiftPressed &&\n        this.__pointerDownOnSelected != null\n      ) {\n        this._userInteraction = false;\n        var item = this._getSelectableFromPointerEvent(event);\n        if (item === null || !this.isItemSelected(item)) {\n          return;\n        }\n      }\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      // Action depends on selected mode\n      if (!this.isReadOnly()) {\n        switch (this.getMode()) {\n          case \"single\":\n          case \"one\":\n            this._setSelectedItem(item);\n            break;\n\n          case \"additive\":\n            this._setLeadItem(item);\n            this._setAnchorItem(item);\n            this._toggleInSelection(item);\n            break;\n\n          case \"multi\":\n            // Update lead item\n            this._setLeadItem(item);\n\n            // Create/Update range selection\n            if (isShiftPressed) {\n              var anchor = this._getAnchorItem();\n              if (anchor === null) {\n                anchor = this._getFirstSelectable();\n                this._setAnchorItem(anchor);\n              }\n\n              this._selectItemRange(anchor, item, isCtrlPressed);\n            }\n\n            // Toggle in selection\n            else if (isCtrlPressed) {\n              this._setAnchorItem(item);\n              this._toggleInSelection(item);\n            }\n\n            // Replace current selection\n            else {\n              this._setAnchorItem(item);\n              this._setSelectedItem(item);\n            }\n\n            break;\n        }\n      }\n\n      // Cleanup operation\n      this._userInteraction = false;\n      this._cleanup();\n    },\n\n    /**\n     * This method should be connected to the <code>losecapture</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handleLoseCapture(event) {\n      this._cleanup();\n    },\n\n    /**\n     * This method should be connected to the <code>pointermove</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerMove(event) {\n      // Only relevant when capturing is enabled\n      if (!this.__inCapture) {\n        return;\n      }\n\n      // Update pointer position cache\n      this.__pointerX = event.getDocumentLeft();\n      this.__pointerY = event.getDocumentTop();\n\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      // Detect move directions\n      var dragX = this.__pointerX + this.__frameScroll.left;\n      if (dragX > this.__dragStartX) {\n        this.__moveDirectionX = 1;\n      } else if (dragX < this.__dragStartX) {\n        this.__moveDirectionX = -1;\n      } else {\n        this.__moveDirectionX = 0;\n      }\n\n      var dragY = this.__pointerY + this.__frameScroll.top;\n      if (dragY > this.__dragStartY) {\n        this.__moveDirectionY = 1;\n      } else if (dragY < this.__dragStartY) {\n        this.__moveDirectionY = -1;\n      } else {\n        this.__moveDirectionY = 0;\n      }\n\n      // Update scroll steps\n      var location = this.__frameLocation;\n\n      if (this.__pointerX < location.left) {\n        this.__scrollStepX = this.__pointerX - location.left;\n      } else if (this.__pointerX > location.right) {\n        this.__scrollStepX = this.__pointerX - location.right;\n      } else {\n        this.__scrollStepX = 0;\n      }\n\n      if (this.__pointerY < location.top) {\n        this.__scrollStepY = this.__pointerY - location.top;\n      } else if (this.__pointerY > location.bottom) {\n        this.__scrollStepY = this.__pointerY - location.bottom;\n      } else {\n        this.__scrollStepY = 0;\n      }\n\n      // Dynamically create required timer instance\n      if (!this.__scrollTimer) {\n        this.__scrollTimer = new qx.event.Timer(100);\n        this.__scrollTimer.addListener(\"interval\", this._onInterval, this);\n      }\n\n      // Start interval\n      this.__scrollTimer.start();\n\n      // Auto select based on new cursor position\n      this._autoSelect();\n\n      event.stopPropagation();\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>addItem</code> event\n     * of the managed object.\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    handleAddItem(e) {\n      var item = e.getData();\n      if (this.getMode() === \"one\" && this.isSelectionEmpty()) {\n        this.addItem(item);\n      }\n    },\n\n    /**\n     * This method should be connected to the <code>removeItem</code> event\n     * of the managed object.\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    handleRemoveItem(e) {\n      this.removeItem(e.getData());\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER SUPPORT INTERNALS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Stops all timers, release capture etc. to cleanup drag selection\n     */\n    _cleanup() {\n      if (!this.getDrag() && this.__inCapture) {\n        return;\n      }\n\n      // Fire change event if needed\n      if (this.__selectionModified) {\n        this._fireChange(\"tap\");\n      }\n\n      // Remove flags\n      delete this.__inCapture;\n      delete this.__lastRelX;\n      delete this.__lastRelY;\n\n      // Stop capturing\n      this._releaseCapture();\n\n      // Stop timer\n      if (this.__scrollTimer) {\n        this.__scrollTimer.stop();\n      }\n    },\n\n    /**\n     * Event listener for timer used by drag selection\n     *\n     * @param e {qx.event.type.Event} Timer event\n     */\n    _onInterval(e) {\n      // Scroll by defined block size\n      this._scrollBy(this.__scrollStepX, this.__scrollStepY);\n\n      // Update scroll cache\n      this.__frameScroll = this._getScroll();\n\n      // Auto select based on new scroll position and cursor\n      this._autoSelect();\n    },\n\n    /**\n     * Automatically selects items based on the pointer movement during a drag selection\n     */\n    _autoSelect() {\n      var inner = this._getDimension();\n\n      // Get current relative Y position and compare it with previous one\n      var relX =\n        Math.max(\n          0,\n          Math.min(this.__pointerX - this.__frameLocation.left, inner.width)\n        ) + this.__frameScroll.left;\n      var relY =\n        Math.max(\n          0,\n          Math.min(this.__pointerY - this.__frameLocation.top, inner.height)\n        ) + this.__frameScroll.top;\n\n      // Compare old and new relative coordinates (for performance reasons)\n      if (this.__lastRelX === relX && this.__lastRelY === relY) {\n        return;\n      }\n      this.__lastRelX = relX;\n      this.__lastRelY = relY;\n\n      // Cache anchor\n      var anchor = this._getAnchorItem();\n      var lead = anchor;\n\n      // Process X-coordinate\n      var moveX = this.__moveDirectionX;\n      var nextX, locationX;\n\n      while (moveX !== 0) {\n        // Find next item to process depending on current scroll direction\n        nextX =\n          moveX > 0\n            ? this._getRelatedSelectable(lead, \"right\")\n            : this._getRelatedSelectable(lead, \"left\");\n\n        // May be null (e.g. first/last item)\n        if (nextX !== null) {\n          locationX = this._getSelectableLocationX(nextX);\n\n          // Continue when the item is in the visible area\n          if (\n            (moveX > 0 && locationX.left <= relX) ||\n            (moveX < 0 && locationX.right >= relX)\n          ) {\n            lead = nextX;\n            continue;\n          }\n        }\n\n        // Otherwise break\n        break;\n      }\n\n      // Process Y-coordinate\n      var moveY = this.__moveDirectionY;\n      var nextY, locationY;\n\n      while (moveY !== 0) {\n        // Find next item to process depending on current scroll direction\n        nextY =\n          moveY > 0\n            ? this._getRelatedSelectable(lead, \"under\")\n            : this._getRelatedSelectable(lead, \"above\");\n\n        // May be null (e.g. first/last item)\n        if (nextY !== null) {\n          locationY = this._getSelectableLocationY(nextY);\n\n          // Continue when the item is in the visible area\n          if (\n            (moveY > 0 && locationY.top <= relY) ||\n            (moveY < 0 && locationY.bottom >= relY)\n          ) {\n            lead = nextY;\n            continue;\n          }\n        }\n\n        // Otherwise break\n        break;\n      }\n\n      // Differenciate between the two supported modes\n      var mode = this.getMode();\n      if (mode === \"multi\") {\n        // Replace current selection with new range\n        this._selectItemRange(anchor, lead);\n      } else if (mode === \"additive\") {\n        // Behavior depends on the fact whether the\n        // anchor item is selected or not\n        if (this.isItemSelected(anchor)) {\n          this._selectItemRange(anchor, lead, true);\n        } else {\n          this._deselectItemRange(anchor, lead);\n        }\n\n        // Improve performance. This mode does not rely\n        // on full ranges as it always extend the old\n        // selection/deselection.\n        this._setAnchorItem(lead);\n      }\n\n      // Fire change event as needed\n      this._fireChange(\"drag\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      KEYBOARD SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} All supported navigation keys\n     *\n     * @lint ignoreReferenceField(__navigationKeys)\n     */\n    __navigationKeys: {\n      Home: 1,\n      Down: 1,\n      Right: 1,\n      PageDown: 1,\n      End: 1,\n      Up: 1,\n      Left: 1,\n      PageUp: 1\n    },\n\n    /**\n     * This method should be connected to the <code>keypress</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.KeySequence} A valid key sequence event\n     */\n    handleKeyPress(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      var current, next;\n      var key = event.getKeyIdentifier();\n      var mode = this.getMode();\n\n      // Support both control keys on Mac\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      var consumed = false;\n      var readOnly = this.isReadOnly();\n\n      if (key === \"A\" && isCtrlPressed && !readOnly) {\n        if (mode !== \"single\" && mode !== \"one\") {\n          this._selectAllItems();\n          consumed = true;\n        }\n      } else if (key === \"Escape\" && !readOnly) {\n        if (mode !== \"single\" && mode !== \"one\") {\n          this._clearSelection();\n          consumed = true;\n        }\n      } else if (key === \"Space\" && !readOnly) {\n        var lead = this.getLeadItem();\n        if (lead != null && !isShiftPressed) {\n          if (isCtrlPressed || mode === \"additive\") {\n            this._toggleInSelection(lead);\n          } else {\n            this._setSelectedItem(lead);\n          }\n          consumed = true;\n        }\n      } else if (this.__navigationKeys[key] && readOnly) {\n        switch (key) {\n          case \"Home\":\n            next = this._getFirstSelectable();\n            break;\n\n          case \"End\":\n            next = this._getLastSelectable();\n            break;\n\n          case \"Up\":\n            next = this._getRelatedSelectable(\n              this._getFirstVisibleSelectable(),\n              \"above\"\n            );\n\n            break;\n\n          case \"Down\":\n            next = this._getRelatedSelectable(\n              this._getLastVisibleSelectable(),\n              \"under\"\n            );\n\n            break;\n\n          case \"Left\":\n            next = this._getRelatedSelectable(\n              this._getFirstVisibleSelectable(),\n              \"left\"\n            );\n\n            break;\n\n          case \"Right\":\n            next = this._getRelatedSelectable(\n              this._getLastVisibleSelectable(),\n              \"right\"\n            );\n\n            break;\n\n          case \"PageUp\":\n            next = this._getPage(this._getFirstVisibleSelectable(), true);\n            break;\n\n          case \"PageDown\":\n            next = this._getPage(this._getLastVisibleSelectable(), false);\n            break;\n        }\n\n        if (next) {\n          consumed = true;\n          this.__oldScrollTop = this._getScroll().top;\n          this._scrollItemIntoView(next);\n        }\n      } else if (this.__navigationKeys[key]) {\n        consumed = true;\n        if (mode === \"single\" || mode == \"one\") {\n          current = this._getSelectedItem();\n        } else {\n          current = this.getLeadItem();\n        }\n\n        if (current !== null) {\n          switch (key) {\n            case \"Home\":\n              next = this._getFirstSelectable();\n              break;\n\n            case \"End\":\n              next = this._getLastSelectable();\n              break;\n\n            case \"Up\":\n              next = this._getRelatedSelectable(current, \"above\");\n              break;\n\n            case \"Down\":\n              next = this._getRelatedSelectable(current, \"under\");\n              break;\n\n            case \"Left\":\n              next = this._getRelatedSelectable(current, \"left\");\n              break;\n\n            case \"Right\":\n              next = this._getRelatedSelectable(current, \"right\");\n              break;\n\n            case \"PageUp\":\n              next = this._getPage(current, true);\n              break;\n\n            case \"PageDown\":\n              next = this._getPage(current, false);\n              break;\n          }\n        } else {\n          switch (key) {\n            case \"Home\":\n            case \"Down\":\n            case \"Right\":\n            case \"PageDown\":\n              next = this._getFirstSelectable();\n              break;\n\n            case \"End\":\n            case \"Up\":\n            case \"Left\":\n            case \"PageUp\":\n              next = this._getLastSelectable();\n              break;\n          }\n        }\n\n        // Process result\n        if (next !== null) {\n          switch (mode) {\n            case \"single\":\n            case \"one\":\n              this._setSelectedItem(next);\n              break;\n\n            case \"additive\":\n              this._setLeadItem(next);\n              break;\n\n            case \"multi\":\n              if (isShiftPressed) {\n                var anchor = this._getAnchorItem();\n                if (anchor === null) {\n                  this._setAnchorItem((anchor = this._getFirstSelectable()));\n                }\n\n                this._setLeadItem(next);\n                this._selectItemRange(anchor, next, isCtrlPressed);\n              } else {\n                this._setAnchorItem(next);\n                this._setLeadItem(next);\n\n                if (!isCtrlPressed) {\n                  this._setSelectedItem(next);\n                }\n              }\n\n              break;\n          }\n\n          this.__oldScrollTop = this._getScroll().top;\n          this._scrollItemIntoView(next);\n        }\n      }\n\n      if (consumed) {\n        // Stop processed events\n        event.stop();\n\n        // Fire change event as needed\n        this._fireChange(\"key\");\n      }\n      this._userInteraction = false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR ITEM RANGES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds all items to the selection\n     */\n    _selectAllItems() {\n      var range = this.getSelectables();\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._addToSelection(range[i]);\n      }\n    },\n\n    /**\n     * Clears current selection\n     */\n    _clearSelection() {\n      var selection = this.__selection;\n      for (var hash in selection) {\n        this._removeFromSelection(selection[hash]);\n      }\n      this.__selection = {};\n    },\n\n    /**\n     * Select a range from <code>item1</code> to <code>item2</code>.\n     *\n     * @param item1 {Object} Start with this item\n     * @param item2 {Object} End with this item\n     * @param extend {Boolean?false} Whether the current\n     *    selection should be replaced or extended.\n     */\n    _selectItemRange(item1, item2, extend) {\n      var range = this._getSelectableRange(item1, item2);\n\n      // Remove items which are not in the detected range\n      if (!extend) {\n        var selected = this.__selection;\n        var mapped = this.__rangeToMap(range);\n\n        for (var hash in selected) {\n          if (!mapped[hash]) {\n            this._removeFromSelection(selected[hash]);\n          }\n        }\n      }\n\n      // Add new items to the selection\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._addToSelection(range[i]);\n      }\n    },\n\n    /**\n     * Deselect all items between <code>item1</code> and <code>item2</code>.\n     *\n     * @param item1 {Object} Start with this item\n     * @param item2 {Object} End with this item\n     */\n    _deselectItemRange(item1, item2) {\n      var range = this._getSelectableRange(item1, item2);\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._removeFromSelection(range[i]);\n      }\n    },\n\n    /**\n     * Internal method to convert a range to a map of hash\n     * codes for faster lookup during selection compare routines.\n     *\n     * @param range {Array} List of selectable items\n     */\n    __rangeToMap(range) {\n      var mapped = {};\n      var item;\n\n      for (var i = 0, l = range.length; i < l; i++) {\n        item = range[i];\n        mapped[this._selectableToHashCode(item)] = item;\n      }\n\n      return mapped;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SINGLE ITEM QUERY AND MODIFICATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the first selected item. Only makes sense\n     * when using manager in single selection mode.\n     *\n     * @return {var} The selected item (or <code>null</code>)\n     */\n    _getSelectedItem() {\n      for (var hash in this.__selection) {\n        return this.__selection[hash];\n      }\n\n      return null;\n    },\n\n    /**\n     * Replace current selection with given item.\n     *\n     * @param item {var} Any valid selectable item\n     */\n    _setSelectedItem(item) {\n      if (this._isSelectable(item)) {\n        // If already selected try to find out if this is the only item\n        var current = this.__selection;\n        var hash = this._selectableToHashCode(item);\n\n        if (!current[hash] || current.length >= 2) {\n          this._clearSelection();\n          this._addToSelection(item);\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      MODIFY ITEM SELECTION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an item to the current selection.\n     *\n     * @param item {Object} Any item\n     */\n    _addToSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] == null && this._isSelectable(item)) {\n        this.__selection[hash] = item;\n        this._styleSelectable(item, \"selected\", true);\n\n        this.__selectionModified = true;\n      }\n    },\n\n    /**\n     * Toggles the item e.g. remove it when already selected\n     * or select it when currently not.\n     *\n     * @param item {Object} Any item\n     */\n    _toggleInSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] == null) {\n        this.__selection[hash] = item;\n        this._styleSelectable(item, \"selected\", true);\n      } else {\n        delete this.__selection[hash];\n        this._styleSelectable(item, \"selected\", false);\n      }\n\n      this.__selectionModified = true;\n    },\n\n    /**\n     * Removes the given item from the current selection.\n     *\n     * @param item {Object} Any item\n     */\n    _removeFromSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] != null) {\n        delete this.__selection[hash];\n        this._styleSelectable(item, \"selected\", false);\n\n        this.__selectionModified = true;\n      }\n    },\n\n    /**\n     * Replaces current selection with items from given array.\n     *\n     * @param items {Array} List of items to select\n     */\n    _replaceMultiSelection(items) {\n      if (items.length === 0) {\n        this.clearSelection();\n        return;\n      }\n\n      var modified = false;\n\n      // Build map from hash codes and filter non-selectables\n      var selectable, hash;\n      var incoming = {};\n      for (var i = 0, l = items.length; i < l; i++) {\n        selectable = items[i];\n        if (this._isSelectable(selectable)) {\n          hash = this._selectableToHashCode(selectable);\n          incoming[hash] = selectable;\n        }\n      }\n\n      // Remember last\n      var first = items[0];\n      var last = selectable;\n\n      // Clear old entries from map\n      var current = this.__selection;\n      for (var hash in current) {\n        if (incoming[hash]) {\n          // Reduce map to make next loop faster\n          delete incoming[hash];\n        } else {\n          // update internal map\n          selectable = current[hash];\n          delete current[hash];\n\n          // apply styling\n          this._styleSelectable(selectable, \"selected\", false);\n\n          // remember that the selection has been modified\n          modified = true;\n        }\n      }\n\n      // Add remaining selectables to selection\n      for (var hash in incoming) {\n        // update internal map\n        selectable = current[hash] = incoming[hash];\n\n        // apply styling\n        this._styleSelectable(selectable, \"selected\", true);\n\n        // remember that the selection has been modified\n        modified = true;\n      }\n\n      // Do not do anything if selection is equal to previous one\n      if (!modified) {\n        return false;\n      }\n\n      // Scroll last incoming item into view\n      this._scrollItemIntoView(last);\n\n      // Reset anchor and lead item\n      this._setLeadItem(first);\n      this._setAnchorItem(first);\n\n      // Finally fire change event\n      this.__selectionModified = true;\n      this._fireChange();\n    },\n\n    /**\n     * Fires the selection change event if the selection has\n     * been modified.\n     *\n     * @param context {String} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>\n     */\n    _fireChange(context) {\n      if (this.__selectionModified) {\n        // Store context\n        this.__selectionContext = context || null;\n\n        // Fire data event which contains the current selection\n        this.fireDataEvent(\"changeSelection\", this.getSelection());\n        delete this.__selectionModified;\n      }\n    },\n\n    /**\n     * Applies the default selection. The default item is the first item.\n     *\n     * @param force {Boolean} Whether the default selection should be forced.\n     *\n     * @return {var} The selected item.\n     */\n    _applyDefaultSelection(force) {\n      if (\n        force === true ||\n        (this.getMode() === \"one\" && this.isSelectionEmpty())\n      ) {\n        var first = this._getFirstSelectable();\n        if (first != null) {\n          this.selectItem(first);\n        }\n        return first;\n      }\n      return null;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeObjects(\"__scrollTimer\");\n    this.__selection = this.__pointerDownOnSelected = this.__anchorItem = null;\n    this.__leadItem = null;\n  }\n});\n"
  ],
  "mappings": "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"
}