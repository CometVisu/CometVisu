{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "construct",
    "__selection",
    "events",
    "changeSelection",
    "properties",
    "mode",
    "check",
    "init",
    "apply",
    "drag",
    "quick",
    "readOnly",
    "members",
    "__scrollStepX",
    "__scrollStepY",
    "__scrollTimer",
    "__frameScroll",
    "__lastRelX",
    "__lastRelY",
    "__frameLocation",
    "__dragStartX",
    "__dragStartY",
    "__inCapture",
    "__pointerX",
    "__pointerY",
    "__moveDirectionX",
    "__moveDirectionY",
    "__selectionModified",
    "__selectionContext",
    "__leadItem",
    "__anchorItem",
    "__pointerDownOnSelected",
    "_userInteraction",
    "__oldScrollTop",
    "getSelectionContext",
    "selectAll",
    "getMode",
    "Error",
    "_selectAllItems",
    "_fireChange",
    "selectItem",
    "item",
    "_setSelectedItem",
    "_setLeadItem",
    "_setAnchorItem",
    "_scrollItemIntoView",
    "addItem",
    "_getAnchorItem",
    "_addToSelection",
    "removeItem",
    "_removeFromSelection",
    "isSelectionEmpty",
    "selected",
    "_applyDefaultSelection",
    "getLeadItem",
    "selectItemRange",
    "begin",
    "end",
    "_selectItemRange",
    "clearSelection",
    "_clearSelection",
    "replaceSelection",
    "items",
    "length",
    "_replaceMultiSelection",
    "getSelectedItem",
    "result",
    "_getSelectedItem",
    "undefined",
    "getSelection",
    "values",
    "getSortedSelection",
    "children",
    "getSelectables",
    "sel",
    "sort",
    "a",
    "b",
    "indexOf",
    "isItemSelected",
    "hash",
    "_selectableToHashCode",
    "lang",
    "isEmpty",
    "invertSelection",
    "selectables",
    "i",
    "_toggleInSelection",
    "value",
    "old",
    "_styleSelectable",
    "_isSelectable",
    "_getSelectableFromPointerEvent",
    "event",
    "target",
    "getTarget",
    "enabled",
    "_capture",
    "_releaseCapture",
    "_getLocation",
    "_getDimension",
    "_getSelectableLocationX",
    "_getSelectableLocationY",
    "_getScroll",
    "_scrollBy",
    "xoff",
    "yoff",
    "all",
    "_getSelectableRange",
    "item1",
    "item2",
    "_getFirstSelectable",
    "_getLastSelectable",
    "_getFirstVisibleSelectable",
    "_getLastVisibleSelectable",
    "_getRelatedSelectable",
    "relation",
    "_getPage",
    "lead",
    "up",
    "_applyMode",
    "handlePointerOver",
    "top",
    "getPointerType",
    "getQuick",
    "handlePointerDown",
    "isCtrlPressed",
    "Environment",
    "get",
    "isMetaPressed",
    "isShiftPressed",
    "getDrag",
    "getDocumentLeft",
    "left",
    "getDocumentTop",
    "handleTap",
    "isReadOnly",
    "anchor",
    "_cleanup",
    "handleLoseCapture",
    "handlePointerMove",
    "dragX",
    "dragY",
    "location",
    "right",
    "bottom",
    "Timer",
    "addListener",
    "_onInterval",
    "start",
    "_autoSelect",
    "stopPropagation",
    "handleAddItem",
    "e",
    "getData",
    "handleRemoveItem",
    "stop",
    "inner",
    "relX",
    "Math",
    "max",
    "min",
    "width",
    "relY",
    "height",
    "moveX",
    "nextX",
    "locationX",
    "moveY",
    "nextY",
    "locationY",
    "_deselectItemRange",
    "__navigationKeys",
    "Home",
    "Down",
    "Right",
    "PageDown",
    "End",
    "Up",
    "Left",
    "PageUp",
    "handleKeyPress",
    "current",
    "next",
    "key",
    "getKeyIdentifier",
    "consumed",
    "range",
    "l",
    "selection",
    "mapped",
    "__rangeToMap",
    "modified",
    "selectable",
    "incoming",
    "first",
    "last",
    "context",
    "fireDataEvent",
    "force",
    "destruct",
    "_disposeObjects",
    "ui",
    "Abstract"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/selection/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Generic selection manager to bring rich desktop like selection behavior\n * to widgets and low-level interactive controls.\n *\n * The selection handling supports both Shift and Ctrl/Meta modifies like\n * known from native applications.\n */\nqx.Class.define(\"qx.ui.core.selection.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n\n    // {Map} Internal selection storage\n    this.__selection = {};\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /** Fires after the selection was modified. Contains the selection under the data property. */\n    changeSelection: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Selects the selection mode to use.\n     *\n     * * single: One or no element is selected\n     * * multi: Multi items could be selected. Also allows empty selections.\n     * * additive: Easy Web-2.0 selection mode. Allows multiple selections without modifier keys.\n     * * one: If possible always exactly one item is selected\n     */\n    mode: {\n      check: [\"single\", \"multi\", \"additive\", \"one\"],\n      init: \"single\",\n      apply: \"_applyMode\"\n    },\n\n    /**\n     * Enable drag selection (multi selection of items through\n     * dragging the pointer in pressed states).\n     *\n     * Only possible for the modes <code>multi</code> and <code>additive</code>\n     */\n    drag: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Enable quick selection mode, where no tap is needed to change the selection.\n     *\n     * Only possible for the modes <code>single</code> and <code>one</code>.\n     */\n    quick: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether the selection can be changed by user interaction\n     */\n    readOnly: {\n      check: \"Boolean\",\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n  /* eslint-disable @qooxdoo/qx/no-refs-in-members */\n  members: {\n    __scrollStepX: 0,\n    __scrollStepY: 0,\n    __scrollTimer: null,\n    __frameScroll: null,\n    __lastRelX: null,\n    __lastRelY: null,\n    __frameLocation: null,\n    __dragStartX: null,\n    __dragStartY: null,\n    __inCapture: null,\n    __pointerX: null,\n    __pointerY: null,\n    __moveDirectionX: null,\n    __moveDirectionY: null,\n    __selectionModified: null,\n    __selectionContext: null,\n    __leadItem: null,\n    __selection: null,\n    __anchorItem: null,\n    __pointerDownOnSelected: null,\n\n    // A flag that signals an user interaction, which means the selection change\n    // was triggered by pointer or keyboard [BUG #3344]\n    _userInteraction: false,\n\n    __oldScrollTop: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      USER APIS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the selection context. One of <code>tap</code>,\n     * <code>quick</code>, <code>drag</code> or <code>key</code> or\n     * <code>null</code>.\n     *\n     * @return {String} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>\n     */\n    getSelectionContext() {\n      return this.__selectionContext;\n    },\n\n    /**\n     * Selects all items of the managed object.\n     *\n     */\n    selectAll() {\n      var mode = this.getMode();\n      if (mode == \"single\" || mode == \"one\") {\n        throw new Error(\"Can not select all items in selection mode: \" + mode);\n      }\n\n      this._selectAllItems();\n      this._fireChange();\n    },\n\n    /**\n     * Selects the given item. Replaces current selection\n     * completely with the new item.\n     *\n     * Use {@link #addItem} instead if you want to add new\n     * items to an existing selection.\n     *\n     * @param item {Object} Any valid item\n     */\n    selectItem(item) {\n      this._setSelectedItem(item);\n\n      var mode = this.getMode();\n      if (mode !== \"single\" && mode !== \"one\") {\n        this._setLeadItem(item);\n        this._setAnchorItem(item);\n      }\n\n      this._scrollItemIntoView(item);\n      this._fireChange();\n    },\n\n    /**\n     * Adds the given item to the existing selection.\n     *\n     * Use {@link #selectItem} instead if you want to replace\n     * the current selection.\n     *\n     * @param item {Object} Any valid item\n     */\n    addItem(item) {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        this._setSelectedItem(item);\n      } else {\n        if (this._getAnchorItem() == null) {\n          this._setAnchorItem(item);\n        }\n\n        this._setLeadItem(item);\n        this._addToSelection(item);\n      }\n\n      this._scrollItemIntoView(item);\n      this._fireChange();\n    },\n\n    /**\n     * Removes the given item from the selection.\n     *\n     * Use {@link #clearSelection} when you want to clear\n     * the whole selection at once.\n     *\n     * @param item {Object} Any valid item\n     */\n    removeItem(item) {\n      this._removeFromSelection(item);\n\n      if (this.getMode() === \"one\" && this.isSelectionEmpty()) {\n        var selected = this._applyDefaultSelection();\n\n        // Do not fire any event in this case.\n        if (selected == item) {\n          return;\n        }\n      }\n\n      if (this.getLeadItem() == item) {\n        this._setLeadItem(null);\n      }\n\n      if (this._getAnchorItem() == item) {\n        this._setAnchorItem(null);\n      }\n\n      this._fireChange();\n    },\n\n    /**\n     * Selects an item range between two given items.\n     *\n     * @param begin {Object} Item to start with\n     * @param end {Object} Item to end at\n     */\n    selectItemRange(begin, end) {\n      var mode = this.getMode();\n      if (mode == \"single\" || mode == \"one\") {\n        throw new Error(\n          \"Can not select multiple items in selection mode: \" + mode\n        );\n      }\n\n      this._selectItemRange(begin, end);\n\n      this._setAnchorItem(begin);\n\n      this._setLeadItem(end);\n      this._scrollItemIntoView(end);\n\n      this._fireChange();\n    },\n\n    /**\n     * Clears the whole selection at once. Also\n     * resets the lead and anchor items and their\n     * styles.\n     *\n     */\n    clearSelection() {\n      if (this.getMode() == \"one\") {\n        var selected = this._applyDefaultSelection(true);\n        if (selected != null) {\n          return;\n        }\n      }\n\n      this._clearSelection();\n      this._setLeadItem(null);\n      this._setAnchorItem(null);\n\n      this._fireChange();\n    },\n\n    /**\n     * Replaces current selection with given array of items.\n     *\n     * Please note that in single selection scenarios it is more\n     * efficient to directly use {@link #selectItem}.\n     *\n     * @param items {Array} Items to select\n     */\n    replaceSelection(items) {\n      var mode = this.getMode();\n      if (mode == \"one\" || mode === \"single\") {\n        if (items.length > 1) {\n          throw new Error(\n            \"Could not select more than one items in mode: \" + mode + \"!\"\n          );\n        }\n\n        if (items.length == 1) {\n          this.selectItem(items[0]);\n        } else {\n          this.clearSelection();\n        }\n        return;\n      } else {\n        this._replaceMultiSelection(items);\n      }\n    },\n\n    /**\n     * Get the selected item. This method does only work in <code>single</code>\n     * selection mode.\n     *\n     * @return {Object} The selected item.\n     */\n    getSelectedItem() {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        var result = this._getSelectedItem();\n        return result != undefined ? result : null;\n      }\n\n      throw new Error(\n        \"The method getSelectedItem() is only supported in 'single' and 'one' selection mode!\"\n      );\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {Object[]} List of items.\n     */\n    getSelection() {\n      return Object.values(this.__selection);\n    },\n\n    /**\n     * Returns the selection sorted by the index in the\n     * container of the selection (the assigned widget)\n     *\n     * @return {Object[]} Sorted list of items\n     */\n    getSortedSelection() {\n      var children = this.getSelectables();\n      var sel = Object.values(this.__selection);\n\n      sel.sort(function (a, b) {\n        return children.indexOf(a) - children.indexOf(b);\n      });\n\n      return sel;\n    },\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {var} Any valid selectable item\n     * @return {Boolean} Whether the item is selected\n     */\n    isItemSelected(item) {\n      var hash = this._selectableToHashCode(item);\n      return this.__selection[hash] !== undefined;\n    },\n\n    /**\n     * Whether the selection is empty\n     *\n     * @return {Boolean} Whether the selection is empty\n     */\n    isSelectionEmpty() {\n      return qx.lang.Object.isEmpty(this.__selection);\n    },\n\n    /**\n     * Invert the selection. Select the non selected and deselect the selected.\n     */\n    invertSelection() {\n      var mode = this.getMode();\n      if (mode === \"single\" || mode === \"one\") {\n        throw new Error(\n          \"The method invertSelection() is only supported in 'multi' and 'additive' selection mode!\"\n        );\n      }\n\n      var selectables = this.getSelectables();\n      for (var i = 0; i < selectables.length; i++) {\n        this._toggleInSelection(selectables[i]);\n      }\n\n      this._fireChange();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LEAD/ANCHOR SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @param value {Object} Any valid item or <code>null</code>\n     */\n    _setLeadItem(value) {\n      var old = this.__leadItem;\n\n      if (old !== null) {\n        this._styleSelectable(old, \"lead\", false);\n      }\n\n      if (value !== null) {\n        this._styleSelectable(value, \"lead\", true);\n      }\n\n      this.__leadItem = value;\n    },\n\n    /**\n     * Returns the current lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @return {Object} The lead item or <code>null</code>\n     */\n    getLeadItem() {\n      return this.__leadItem;\n    },\n\n    /**\n     * Sets the anchor item. This is the item which is the starting\n     * point for all range selections. Normally this is the item which was\n     * tapped on the last time without any modifier keys pressed.\n     *\n     * @param value {Object} Any valid item or <code>null</code>\n     */\n    _setAnchorItem(value) {\n      var old = this.__anchorItem;\n\n      if (old != null) {\n        this._styleSelectable(old, \"anchor\", false);\n      }\n\n      if (value != null) {\n        this._styleSelectable(value, \"anchor\", true);\n      }\n\n      this.__anchorItem = value;\n    },\n\n    /**\n     * Returns the current anchor item. This is the item which is the starting\n     * point for all range selections. Normally this is the item which was\n     * tapped on the last time without any modifier keys pressed.\n     *\n     * @return {Object} The anchor item or <code>null</code>\n     */\n    _getAnchorItem() {\n      return this.__anchorItem !== null ? this.__anchorItem : null;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      BASIC SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Whether the given item is selectable.\n     *\n     * @param item {var} Any item\n     * @return {Boolean} <code>true</code> when the item is selectable\n     */\n    _isSelectable(item) {\n      throw new Error(\"Abstract method call: _isSelectable()\");\n    },\n\n    /**\n     * Finds the selectable instance from a pointer event\n     *\n     * @param event {qx.event.type.Pointer} The pointer event\n     * @return {Object|null} The resulting selectable\n     */\n    _getSelectableFromPointerEvent(event) {\n      var target = event.getTarget();\n      // check for target (may be null when leaving the viewport) [BUG #4378]\n      if (target && this._isSelectable(target)) {\n        return target;\n      }\n      return null;\n    },\n\n    /**\n     * Returns an unique hashcode for the given item.\n     *\n     * @param item {var} Any item\n     * @return {String} A valid hashcode\n     */\n    _selectableToHashCode(item) {\n      throw new Error(\"Abstract method call: _selectableToHashCode()\");\n    },\n\n    /**\n     * Updates the style (appearance) of the given item.\n     *\n     * @param item {var} Item to modify\n     * @param type {String} Any of <code>selected</code>, <code>anchor</code> or <code>lead</code>\n     * @param enabled {Boolean} Whether the given style should be added or removed.\n     */\n    _styleSelectable(item, type, enabled) {\n      throw new Error(\"Abstract method call: _styleSelectable()\");\n    },\n\n    /**\n     * Enables capturing of the container.\n     *\n     */\n    _capture() {\n      throw new Error(\"Abstract method call: _capture()\");\n    },\n\n    /**\n     * Releases capturing of the container\n     *\n     */\n    _releaseCapture() {\n      throw new Error(\"Abstract method call: _releaseCapture()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DIMENSION AND LOCATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the location of the container\n     *\n     * @return {Map} Map with the keys <code>top</code>, <code>right</code>,\n     *    <code>bottom</code> and <code>left</code>.\n     */\n    _getLocation() {\n      throw new Error(\"Abstract method call: _getLocation()\");\n    },\n\n    /**\n     * Returns the dimension of the container (available scrolling space).\n     *\n     * @return {Map} Map with the keys <code>width</code> and <code>height</code>.\n     */\n    _getDimension() {\n      throw new Error(\"Abstract method call: _getDimension()\");\n    },\n\n    /**\n     * Returns the relative (to the container) horizontal location of the given item.\n     *\n     * @param item {var} Any item\n     * @return {Map} A map with the keys <code>left</code> and <code>right</code>.\n     */\n    _getSelectableLocationX(item) {\n      throw new Error(\"Abstract method call: _getSelectableLocationX()\");\n    },\n\n    /**\n     * Returns the relative (to the container) horizontal location of the given item.\n     *\n     * @param item {var} Any item\n     * @return {Map} A map with the keys <code>top</code> and <code>bottom</code>.\n     */\n    _getSelectableLocationY(item) {\n      throw new Error(\"Abstract method call: _getSelectableLocationY()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the scroll position of the container.\n     *\n     * @return {Map} Map with the keys <code>left</code> and <code>top</code>.\n     */\n    _getScroll() {\n      throw new Error(\"Abstract method call: _getScroll()\");\n    },\n\n    /**\n     * Scrolls by the given offset\n     *\n     * @param xoff {Integer} Horizontal offset to scroll by\n     * @param yoff {Integer} Vertical offset to scroll by\n     */\n    _scrollBy(xoff, yoff) {\n      throw new Error(\"Abstract method call: _scrollBy()\");\n    },\n\n    /**\n     * Scrolls the given item into the view (make it visible)\n     *\n     * @param item {var} Any item\n     */\n    _scrollItemIntoView(item) {\n      throw new Error(\"Abstract method call: _scrollItemIntoView()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      QUERY SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns all selectable items of the container.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {Array} A list of items\n     */\n    getSelectables(all) {\n      throw new Error(\"Abstract method call: getSelectables()\");\n    },\n\n    /**\n     * Returns all selectable items between the two given items.\n     *\n     * The items could be given in any order.\n     *\n     * @param item1 {var} First item\n     * @param item2 {var} Second item\n     * @return {Array} List of items\n     */\n    _getSelectableRange(item1, item2) {\n      throw new Error(\"Abstract method call: _getSelectableRange()\");\n    },\n\n    /**\n     * Returns the first selectable item.\n     *\n     * @return {var} The first selectable item\n     */\n    _getFirstSelectable() {\n      throw new Error(\"Abstract method call: _getFirstSelectable()\");\n    },\n\n    /**\n     * Returns the last selectable item.\n     *\n     * @return {var} The last selectable item\n     */\n    _getLastSelectable() {\n      throw new Error(\"Abstract method call: _getLastSelectable()\");\n    },\n\n    /**\n     * Returns the first visible and selectable item.\n     *\n     * @return {var} The first visible and selectable item\n     */\n    _getFirstVisibleSelectable() {\n      throw new Error(\"Abstract method call: _getFirstVisibleSelectable()\");\n    },\n\n    /**\n     * Returns the last visible and selectable item.\n     *\n     * @return {var} The last visible and selectable item\n     */\n    _getLastVisibleSelectable() {\n      throw new Error(\"Abstract method call: _getLastVisibleSelectable()\");\n    },\n\n    /**\n     * Returns a selectable item which is related to the given\n     * <code>item</code> through the value of <code>relation</code>.\n     *\n     * @param item {var} Any item\n     * @param relation {String} A valid relation: <code>above</code>,\n     *    <code>right</code>, <code>under</code> or <code>left</code>\n     * @return {var} The related item\n     */\n    _getRelatedSelectable(item, relation) {\n      throw new Error(\"Abstract method call: _getRelatedSelectable()\");\n    },\n\n    /**\n     * Returns the item which should be selected on pageUp/pageDown.\n     *\n     * May also scroll to the needed position.\n     *\n     * @param lead {var} The current lead item\n     * @param up {Boolean?false} Which page key was pressed:\n     *   <code>up</code> or <code>down</code>.\n     */\n    _getPage(lead, up) {\n      throw new Error(\"Abstract method call: _getPage()\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyMode(value, old) {\n      this._setLeadItem(null);\n      this._setAnchorItem(null);\n\n      this._clearSelection();\n\n      // Mode \"one\" requires one selected item\n      if (value === \"one\") {\n        this._applyDefaultSelection(true);\n      }\n\n      this._fireChange();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * This method should be connected to the <code>pointerover</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerOver(event) {\n      // All browsers (except Opera) fire a native \"mouseover\" event when a scroll appears\n      // by keyboard interaction. We have to ignore the event to avoid a selection for\n      // \"pointerover\" (quick selection). For more details see [BUG #4225]\n      if (\n        this.__oldScrollTop != null &&\n        this.__oldScrollTop != this._getScroll().top\n      ) {\n        this.__oldScrollTop = null;\n        return;\n      }\n\n      // quick select should only work on mouse events\n      if (event.getPointerType() != \"mouse\") {\n        return;\n      }\n\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      if (!this.getQuick()) {\n        this._userInteraction = false;\n        return;\n      }\n\n      var mode = this.getMode();\n      if (mode !== \"one\" && mode !== \"single\") {\n        this._userInteraction = false;\n        return;\n      }\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      this._setSelectedItem(item);\n\n      // Be sure that item is in view\n      // This does not feel good when pointerover is used\n      // this._scrollItemIntoView(item);\n\n      // Fire change event as needed\n      this._fireChange(\"quick\");\n\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>pointerdown</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerDown(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      // Read in keyboard modifiers\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      // tapping on selected items deselect on pointerup, not on pointerdown\n      if (\n        this.isItemSelected(item) &&\n        !isShiftPressed &&\n        !isCtrlPressed &&\n        !this.getDrag()\n      ) {\n        this.__pointerDownOnSelected = item;\n        this._userInteraction = false;\n        return;\n      } else {\n        this.__pointerDownOnSelected = null;\n      }\n\n      // Be sure that item is in view\n      this._scrollItemIntoView(item);\n\n      // Drag selection\n      var mode = this.getMode();\n      if (\n        this.getDrag() &&\n        mode !== \"single\" &&\n        mode !== \"one\" &&\n        !isShiftPressed &&\n        !isCtrlPressed &&\n        event.getPointerType() == \"mouse\"\n      ) {\n        this._setAnchorItem(item);\n        this._setLeadItem(item);\n\n        // Cache location/scroll data\n        this.__frameLocation = this._getLocation();\n        this.__frameScroll = this._getScroll();\n\n        // Store position at start\n        this.__dragStartX = event.getDocumentLeft() + this.__frameScroll.left;\n        this.__dragStartY = event.getDocumentTop() + this.__frameScroll.top;\n\n        // Switch to capture mode\n        this.__inCapture = true;\n        this._capture();\n      }\n\n      // Fire change event as needed\n      this._fireChange(\"tap\");\n\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>tap</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Tap} A valid pointer event\n     */\n    handleTap(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      // Read in keyboard modifiers\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      if (\n        !isCtrlPressed &&\n        !isShiftPressed &&\n        this.__pointerDownOnSelected != null\n      ) {\n        this._userInteraction = false;\n        var item = this._getSelectableFromPointerEvent(event);\n        if (item === null || !this.isItemSelected(item)) {\n          return;\n        }\n      }\n\n      var item = this._getSelectableFromPointerEvent(event);\n      if (item === null) {\n        this._userInteraction = false;\n        return;\n      }\n\n      // Action depends on selected mode\n      if (!this.isReadOnly()) {\n        switch (this.getMode()) {\n          case \"single\":\n          case \"one\":\n            this._setSelectedItem(item);\n            break;\n\n          case \"additive\":\n            this._setLeadItem(item);\n            this._setAnchorItem(item);\n            this._toggleInSelection(item);\n            break;\n\n          case \"multi\":\n            // Update lead item\n            this._setLeadItem(item);\n\n            // Create/Update range selection\n            if (isShiftPressed) {\n              var anchor = this._getAnchorItem();\n              if (anchor === null) {\n                anchor = this._getFirstSelectable();\n                this._setAnchorItem(anchor);\n              }\n\n              this._selectItemRange(anchor, item, isCtrlPressed);\n            }\n\n            // Toggle in selection\n            else if (isCtrlPressed) {\n              this._setAnchorItem(item);\n              this._toggleInSelection(item);\n            }\n\n            // Replace current selection\n            else {\n              this._setAnchorItem(item);\n              this._setSelectedItem(item);\n            }\n\n            break;\n        }\n      }\n\n      // Cleanup operation\n      this._userInteraction = false;\n      this._cleanup();\n    },\n\n    /**\n     * This method should be connected to the <code>losecapture</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handleLoseCapture(event) {\n      this._cleanup();\n    },\n\n    /**\n     * This method should be connected to the <code>pointermove</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.Pointer} A valid pointer event\n     */\n    handlePointerMove(event) {\n      // Only relevant when capturing is enabled\n      if (!this.__inCapture) {\n        return;\n      }\n\n      // Update pointer position cache\n      this.__pointerX = event.getDocumentLeft();\n      this.__pointerY = event.getDocumentTop();\n\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      // Detect move directions\n      var dragX = this.__pointerX + this.__frameScroll.left;\n      if (dragX > this.__dragStartX) {\n        this.__moveDirectionX = 1;\n      } else if (dragX < this.__dragStartX) {\n        this.__moveDirectionX = -1;\n      } else {\n        this.__moveDirectionX = 0;\n      }\n\n      var dragY = this.__pointerY + this.__frameScroll.top;\n      if (dragY > this.__dragStartY) {\n        this.__moveDirectionY = 1;\n      } else if (dragY < this.__dragStartY) {\n        this.__moveDirectionY = -1;\n      } else {\n        this.__moveDirectionY = 0;\n      }\n\n      // Update scroll steps\n      var location = this.__frameLocation;\n\n      if (this.__pointerX < location.left) {\n        this.__scrollStepX = this.__pointerX - location.left;\n      } else if (this.__pointerX > location.right) {\n        this.__scrollStepX = this.__pointerX - location.right;\n      } else {\n        this.__scrollStepX = 0;\n      }\n\n      if (this.__pointerY < location.top) {\n        this.__scrollStepY = this.__pointerY - location.top;\n      } else if (this.__pointerY > location.bottom) {\n        this.__scrollStepY = this.__pointerY - location.bottom;\n      } else {\n        this.__scrollStepY = 0;\n      }\n\n      // Dynamically create required timer instance\n      if (!this.__scrollTimer) {\n        this.__scrollTimer = new qx.event.Timer(100);\n        this.__scrollTimer.addListener(\"interval\", this._onInterval, this);\n      }\n\n      // Start interval\n      this.__scrollTimer.start();\n\n      // Auto select based on new cursor position\n      this._autoSelect();\n\n      event.stopPropagation();\n      this._userInteraction = false;\n    },\n\n    /**\n     * This method should be connected to the <code>addItem</code> event\n     * of the managed object.\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    handleAddItem(e) {\n      var item = e.getData();\n      if (this.getMode() === \"one\" && this.isSelectionEmpty()) {\n        this.addItem(item);\n      }\n    },\n\n    /**\n     * This method should be connected to the <code>removeItem</code> event\n     * of the managed object.\n     *\n     * @param e {qx.event.type.Data} The event object\n     */\n    handleRemoveItem(e) {\n      this.removeItem(e.getData());\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      POINTER SUPPORT INTERNALS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Stops all timers, release capture etc. to cleanup drag selection\n     */\n    _cleanup() {\n      if (!this.getDrag() && this.__inCapture) {\n        return;\n      }\n\n      // Fire change event if needed\n      if (this.__selectionModified) {\n        this._fireChange(\"tap\");\n      }\n\n      // Remove flags\n      delete this.__inCapture;\n      delete this.__lastRelX;\n      delete this.__lastRelY;\n\n      // Stop capturing\n      this._releaseCapture();\n\n      // Stop timer\n      if (this.__scrollTimer) {\n        this.__scrollTimer.stop();\n      }\n    },\n\n    /**\n     * Event listener for timer used by drag selection\n     *\n     * @param e {qx.event.type.Event} Timer event\n     */\n    _onInterval(e) {\n      // Scroll by defined block size\n      this._scrollBy(this.__scrollStepX, this.__scrollStepY);\n\n      // Update scroll cache\n      this.__frameScroll = this._getScroll();\n\n      // Auto select based on new scroll position and cursor\n      this._autoSelect();\n    },\n\n    /**\n     * Automatically selects items based on the pointer movement during a drag selection\n     */\n    _autoSelect() {\n      var inner = this._getDimension();\n\n      // Get current relative Y position and compare it with previous one\n      var relX =\n        Math.max(\n          0,\n          Math.min(this.__pointerX - this.__frameLocation.left, inner.width)\n        ) + this.__frameScroll.left;\n      var relY =\n        Math.max(\n          0,\n          Math.min(this.__pointerY - this.__frameLocation.top, inner.height)\n        ) + this.__frameScroll.top;\n\n      // Compare old and new relative coordinates (for performance reasons)\n      if (this.__lastRelX === relX && this.__lastRelY === relY) {\n        return;\n      }\n      this.__lastRelX = relX;\n      this.__lastRelY = relY;\n\n      // Cache anchor\n      var anchor = this._getAnchorItem();\n      var lead = anchor;\n\n      // Process X-coordinate\n      var moveX = this.__moveDirectionX;\n      var nextX, locationX;\n\n      while (moveX !== 0) {\n        // Find next item to process depending on current scroll direction\n        nextX =\n          moveX > 0\n            ? this._getRelatedSelectable(lead, \"right\")\n            : this._getRelatedSelectable(lead, \"left\");\n\n        // May be null (e.g. first/last item)\n        if (nextX !== null) {\n          locationX = this._getSelectableLocationX(nextX);\n\n          // Continue when the item is in the visible area\n          if (\n            (moveX > 0 && locationX.left <= relX) ||\n            (moveX < 0 && locationX.right >= relX)\n          ) {\n            lead = nextX;\n            continue;\n          }\n        }\n\n        // Otherwise break\n        break;\n      }\n\n      // Process Y-coordinate\n      var moveY = this.__moveDirectionY;\n      var nextY, locationY;\n\n      while (moveY !== 0) {\n        // Find next item to process depending on current scroll direction\n        nextY =\n          moveY > 0\n            ? this._getRelatedSelectable(lead, \"under\")\n            : this._getRelatedSelectable(lead, \"above\");\n\n        // May be null (e.g. first/last item)\n        if (nextY !== null) {\n          locationY = this._getSelectableLocationY(nextY);\n\n          // Continue when the item is in the visible area\n          if (\n            (moveY > 0 && locationY.top <= relY) ||\n            (moveY < 0 && locationY.bottom >= relY)\n          ) {\n            lead = nextY;\n            continue;\n          }\n        }\n\n        // Otherwise break\n        break;\n      }\n\n      // Differenciate between the two supported modes\n      var mode = this.getMode();\n      if (mode === \"multi\") {\n        // Replace current selection with new range\n        this._selectItemRange(anchor, lead);\n      } else if (mode === \"additive\") {\n        // Behavior depends on the fact whether the\n        // anchor item is selected or not\n        if (this.isItemSelected(anchor)) {\n          this._selectItemRange(anchor, lead, true);\n        } else {\n          this._deselectItemRange(anchor, lead);\n        }\n\n        // Improve performance. This mode does not rely\n        // on full ranges as it always extend the old\n        // selection/deselection.\n        this._setAnchorItem(lead);\n      }\n\n      // Fire change event as needed\n      this._fireChange(\"drag\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      KEYBOARD SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Map} All supported navigation keys\n     *\n     * @lint ignoreReferenceField(__navigationKeys)\n     */\n    __navigationKeys: {\n      Home: 1,\n      Down: 1,\n      Right: 1,\n      PageDown: 1,\n      End: 1,\n      Up: 1,\n      Left: 1,\n      PageUp: 1\n    },\n\n    /**\n     * This method should be connected to the <code>keypress</code> event\n     * of the managed object.\n     *\n     * @param event {qx.event.type.KeySequence} A valid key sequence event\n     */\n    handleKeyPress(event) {\n      // this is a method invoked by an user interaction, so be careful to\n      // set / clear the mark this._userInteraction [BUG #3344]\n      this._userInteraction = true;\n\n      var current, next;\n      var key = event.getKeyIdentifier();\n      var mode = this.getMode();\n\n      // Support both control keys on Mac\n      var isCtrlPressed =\n        event.isCtrlPressed() ||\n        (qx.core.Environment.get(\"os.name\") == \"osx\" && event.isMetaPressed());\n      var isShiftPressed = event.isShiftPressed();\n\n      var consumed = false;\n      var readOnly = this.isReadOnly();\n\n      if (key === \"A\" && isCtrlPressed && !readOnly) {\n        if (mode !== \"single\" && mode !== \"one\") {\n          this._selectAllItems();\n          consumed = true;\n        }\n      } else if (key === \"Escape\" && !readOnly) {\n        if (mode !== \"single\" && mode !== \"one\") {\n          this._clearSelection();\n          consumed = true;\n        }\n      } else if (key === \"Space\" && !readOnly) {\n        var lead = this.getLeadItem();\n        if (lead != null && !isShiftPressed) {\n          if (isCtrlPressed || mode === \"additive\") {\n            this._toggleInSelection(lead);\n          } else {\n            this._setSelectedItem(lead);\n          }\n          consumed = true;\n        }\n      } else if (this.__navigationKeys[key] && readOnly) {\n        switch (key) {\n          case \"Home\":\n            next = this._getFirstSelectable();\n            break;\n\n          case \"End\":\n            next = this._getLastSelectable();\n            break;\n\n          case \"Up\":\n            next = this._getRelatedSelectable(\n              this._getFirstVisibleSelectable(),\n              \"above\"\n            );\n\n            break;\n\n          case \"Down\":\n            next = this._getRelatedSelectable(\n              this._getLastVisibleSelectable(),\n              \"under\"\n            );\n\n            break;\n\n          case \"Left\":\n            next = this._getRelatedSelectable(\n              this._getFirstVisibleSelectable(),\n              \"left\"\n            );\n\n            break;\n\n          case \"Right\":\n            next = this._getRelatedSelectable(\n              this._getLastVisibleSelectable(),\n              \"right\"\n            );\n\n            break;\n\n          case \"PageUp\":\n            next = this._getPage(this._getFirstVisibleSelectable(), true);\n            break;\n\n          case \"PageDown\":\n            next = this._getPage(this._getLastVisibleSelectable(), false);\n            break;\n        }\n\n        if (next) {\n          consumed = true;\n          this.__oldScrollTop = this._getScroll().top;\n          this._scrollItemIntoView(next);\n        }\n      } else if (this.__navigationKeys[key]) {\n        consumed = true;\n        if (mode === \"single\" || mode == \"one\") {\n          current = this._getSelectedItem();\n        } else {\n          current = this.getLeadItem();\n        }\n\n        if (current !== null) {\n          switch (key) {\n            case \"Home\":\n              next = this._getFirstSelectable();\n              break;\n\n            case \"End\":\n              next = this._getLastSelectable();\n              break;\n\n            case \"Up\":\n              next = this._getRelatedSelectable(current, \"above\");\n              break;\n\n            case \"Down\":\n              next = this._getRelatedSelectable(current, \"under\");\n              break;\n\n            case \"Left\":\n              next = this._getRelatedSelectable(current, \"left\");\n              break;\n\n            case \"Right\":\n              next = this._getRelatedSelectable(current, \"right\");\n              break;\n\n            case \"PageUp\":\n              next = this._getPage(current, true);\n              break;\n\n            case \"PageDown\":\n              next = this._getPage(current, false);\n              break;\n          }\n        } else {\n          switch (key) {\n            case \"Home\":\n            case \"Down\":\n            case \"Right\":\n            case \"PageDown\":\n              next = this._getFirstSelectable();\n              break;\n\n            case \"End\":\n            case \"Up\":\n            case \"Left\":\n            case \"PageUp\":\n              next = this._getLastSelectable();\n              break;\n          }\n        }\n\n        // Process result\n        if (next !== null) {\n          switch (mode) {\n            case \"single\":\n            case \"one\":\n              this._setSelectedItem(next);\n              break;\n\n            case \"additive\":\n              this._setLeadItem(next);\n              break;\n\n            case \"multi\":\n              if (isShiftPressed) {\n                var anchor = this._getAnchorItem();\n                if (anchor === null) {\n                  this._setAnchorItem((anchor = this._getFirstSelectable()));\n                }\n\n                this._setLeadItem(next);\n                this._selectItemRange(anchor, next, isCtrlPressed);\n              } else {\n                this._setAnchorItem(next);\n                this._setLeadItem(next);\n\n                if (!isCtrlPressed) {\n                  this._setSelectedItem(next);\n                }\n              }\n\n              break;\n          }\n\n          this.__oldScrollTop = this._getScroll().top;\n          this._scrollItemIntoView(next);\n        }\n      }\n\n      if (consumed) {\n        // Stop processed events\n        event.stop();\n\n        // Fire change event as needed\n        this._fireChange(\"key\");\n      }\n      this._userInteraction = false;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SUPPORT FOR ITEM RANGES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds all items to the selection\n     */\n    _selectAllItems() {\n      var range = this.getSelectables();\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._addToSelection(range[i]);\n      }\n    },\n\n    /**\n     * Clears current selection\n     */\n    _clearSelection() {\n      var selection = this.__selection;\n      for (var hash in selection) {\n        this._removeFromSelection(selection[hash]);\n      }\n      this.__selection = {};\n    },\n\n    /**\n     * Select a range from <code>item1</code> to <code>item2</code>.\n     *\n     * @param item1 {Object} Start with this item\n     * @param item2 {Object} End with this item\n     * @param extend {Boolean?false} Whether the current\n     *    selection should be replaced or extended.\n     */\n    _selectItemRange(item1, item2, extend) {\n      var range = this._getSelectableRange(item1, item2);\n\n      // Remove items which are not in the detected range\n      if (!extend) {\n        var selected = this.__selection;\n        var mapped = this.__rangeToMap(range);\n\n        for (var hash in selected) {\n          if (!mapped[hash]) {\n            this._removeFromSelection(selected[hash]);\n          }\n        }\n      }\n\n      // Add new items to the selection\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._addToSelection(range[i]);\n      }\n    },\n\n    /**\n     * Deselect all items between <code>item1</code> and <code>item2</code>.\n     *\n     * @param item1 {Object} Start with this item\n     * @param item2 {Object} End with this item\n     */\n    _deselectItemRange(item1, item2) {\n      var range = this._getSelectableRange(item1, item2);\n      for (var i = 0, l = range.length; i < l; i++) {\n        this._removeFromSelection(range[i]);\n      }\n    },\n\n    /**\n     * Internal method to convert a range to a map of hash\n     * codes for faster lookup during selection compare routines.\n     *\n     * @param range {Array} List of selectable items\n     */\n    __rangeToMap(range) {\n      var mapped = {};\n      var item;\n\n      for (var i = 0, l = range.length; i < l; i++) {\n        item = range[i];\n        mapped[this._selectableToHashCode(item)] = item;\n      }\n\n      return mapped;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SINGLE ITEM QUERY AND MODIFICATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the first selected item. Only makes sense\n     * when using manager in single selection mode.\n     *\n     * @return {var} The selected item (or <code>null</code>)\n     */\n    _getSelectedItem() {\n      for (var hash in this.__selection) {\n        return this.__selection[hash];\n      }\n\n      return null;\n    },\n\n    /**\n     * Replace current selection with given item.\n     *\n     * @param item {var} Any valid selectable item\n     */\n    _setSelectedItem(item) {\n      if (this._isSelectable(item)) {\n        // If already selected try to find out if this is the only item\n        var current = this.__selection;\n        var hash = this._selectableToHashCode(item);\n\n        if (!current[hash] || current.length >= 2) {\n          this._clearSelection();\n          this._addToSelection(item);\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      MODIFY ITEM SELECTION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds an item to the current selection.\n     *\n     * @param item {Object} Any item\n     */\n    _addToSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] == null && this._isSelectable(item)) {\n        this.__selection[hash] = item;\n        this._styleSelectable(item, \"selected\", true);\n\n        this.__selectionModified = true;\n      }\n    },\n\n    /**\n     * Toggles the item e.g. remove it when already selected\n     * or select it when currently not.\n     *\n     * @param item {Object} Any item\n     */\n    _toggleInSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] == null) {\n        this.__selection[hash] = item;\n        this._styleSelectable(item, \"selected\", true);\n      } else {\n        delete this.__selection[hash];\n        this._styleSelectable(item, \"selected\", false);\n      }\n\n      this.__selectionModified = true;\n    },\n\n    /**\n     * Removes the given item from the current selection.\n     *\n     * @param item {Object} Any item\n     */\n    _removeFromSelection(item) {\n      var hash = this._selectableToHashCode(item);\n\n      if (this.__selection[hash] != null) {\n        delete this.__selection[hash];\n        this._styleSelectable(item, \"selected\", false);\n\n        this.__selectionModified = true;\n      }\n    },\n\n    /**\n     * Replaces current selection with items from given array.\n     *\n     * @param items {Array} List of items to select\n     */\n    _replaceMultiSelection(items) {\n      if (items.length === 0) {\n        this.clearSelection();\n        return;\n      }\n\n      var modified = false;\n\n      // Build map from hash codes and filter non-selectables\n      var selectable, hash;\n      var incoming = {};\n      for (var i = 0, l = items.length; i < l; i++) {\n        selectable = items[i];\n        if (this._isSelectable(selectable)) {\n          hash = this._selectableToHashCode(selectable);\n          incoming[hash] = selectable;\n        }\n      }\n\n      // Remember last\n      var first = items[0];\n      var last = selectable;\n\n      // Clear old entries from map\n      var current = this.__selection;\n      for (var hash in current) {\n        if (incoming[hash]) {\n          // Reduce map to make next loop faster\n          delete incoming[hash];\n        } else {\n          // update internal map\n          selectable = current[hash];\n          delete current[hash];\n\n          // apply styling\n          this._styleSelectable(selectable, \"selected\", false);\n\n          // remember that the selection has been modified\n          modified = true;\n        }\n      }\n\n      // Add remaining selectables to selection\n      for (var hash in incoming) {\n        // update internal map\n        selectable = current[hash] = incoming[hash];\n\n        // apply styling\n        this._styleSelectable(selectable, \"selected\", true);\n\n        // remember that the selection has been modified\n        modified = true;\n      }\n\n      // Do not do anything if selection is equal to previous one\n      if (!modified) {\n        return false;\n      }\n\n      // Scroll last incoming item into view\n      this._scrollItemIntoView(last);\n\n      // Reset anchor and lead item\n      this._setLeadItem(first);\n      this._setAnchorItem(first);\n\n      // Finally fire change event\n      this.__selectionModified = true;\n      this._fireChange();\n    },\n\n    /**\n     * Fires the selection change event if the selection has\n     * been modified.\n     *\n     * @param context {String} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>\n     */\n    _fireChange(context) {\n      if (this.__selectionModified) {\n        // Store context\n        this.__selectionContext = context || null;\n\n        // Fire data event which contains the current selection\n        this.fireDataEvent(\"changeSelection\", this.getSelection());\n        delete this.__selectionModified;\n      }\n    },\n\n    /**\n     * Applies the default selection. The default item is the first item.\n     *\n     * @param force {Boolean} Whether the default selection should be forced.\n     *\n     * @return {var} The selected item.\n     */\n    _applyDefaultSelection(force) {\n      if (\n        force === true ||\n        (this.getMode() === \"one\" && this.isSelectionEmpty())\n      ) {\n        var first = this._getFirstSelectable();\n        if (first != null) {\n          this.selectItem(first);\n        }\n        return first;\n      }\n      return null;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._disposeObjects(\"__scrollTimer\");\n    this.__selection = this.__pointerDownOnSelected = this.__anchorItem = null;\n    this.__leadItem = null;\n  }\n});\n"
  ],
  "mappings": "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"
}