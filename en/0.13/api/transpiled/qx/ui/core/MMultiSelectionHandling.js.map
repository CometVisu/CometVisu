{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "clazz",
    "SELECTION_MANAGER",
    "manager",
    "__manager",
    "addListener",
    "handlePointerDown",
    "handleTap",
    "handlePointerOver",
    "handlePointerMove",
    "handleLoseCapture",
    "handleKeyPress",
    "handleAddItem",
    "handleRemoveItem",
    "_onSelectionChange",
    "events",
    "changeValue",
    "changeSelection",
    "properties",
    "selectionMode",
    "check",
    "init",
    "apply",
    "dragSelection",
    "quickSelection",
    "members",
    "__inOnSelectionChange",
    "setValue",
    "items",
    "clearSelection",
    "setSelection",
    "e",
    "getValue",
    "getSelection",
    "resetValue",
    "selectAll",
    "isSelected",
    "item",
    "ui",
    "core",
    "Widget",
    "contains",
    "Error",
    "isItemSelected",
    "addToSelection",
    "addItem",
    "removeFromSelection",
    "removeItem",
    "selectRange",
    "begin",
    "end",
    "selectItemRange",
    "resetSelection",
    "i",
    "length",
    "currentSelection",
    "lang",
    "Array",
    "equals",
    "replaceSelection",
    "getSortedSelection",
    "isSelectionEmpty",
    "getSelectionContext",
    "_getManager",
    "getSelectables",
    "all",
    "invertSelection",
    "_getLeadItem",
    "mode",
    "getMode",
    "getSelectedItem",
    "getLeadItem",
    "_applySelectionMode",
    "value",
    "old",
    "setMode",
    "_applyDragSelection",
    "setDrag",
    "_applyQuickSelection",
    "setQuick",
    "fireDataEvent",
    "getData",
    "getOldData",
    "destruct",
    "_disposeObjects",
    "MMultiSelectionHandling"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MMultiSelectionHandling.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Christian Hagendorn (chris_schmidt)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This mixin links all methods to manage the multi selection from the\r\n * internal selection manager to the widget.\r\n */\r\nqx.Mixin.define(\"qx.ui.core.MMultiSelectionHandling\", {\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  construct() {\r\n    // Create selection manager\r\n    var clazz = this.SELECTION_MANAGER;\r\n    var manager = (this.__manager = new clazz(this));\r\n\r\n    // Add widget event listeners\r\n    this.addListener(\"pointerdown\", manager.handlePointerDown, manager);\r\n    this.addListener(\"tap\", manager.handleTap, manager);\r\n    this.addListener(\"pointerover\", manager.handlePointerOver, manager);\r\n    this.addListener(\"pointermove\", manager.handlePointerMove, manager);\r\n    this.addListener(\"losecapture\", manager.handleLoseCapture, manager);\r\n    this.addListener(\"keypress\", manager.handleKeyPress, manager);\r\n\r\n    this.addListener(\"addItem\", manager.handleAddItem, manager);\r\n    this.addListener(\"removeItem\", manager.handleRemoveItem, manager);\r\n\r\n    // Add manager listeners\r\n    manager.addListener(\"changeSelection\", this._onSelectionChange, this);\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /** Fires after the value was modified */\r\n    changeValue: \"qx.event.type.Data\",\r\n\r\n    /** Fires after the selection was modified */\r\n    changeSelection: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * The selection mode to use.\r\n     *\r\n     * For further details please have a look at:\r\n     * {@link qx.ui.core.selection.Abstract#mode}\r\n     */\r\n    selectionMode: {\r\n      check: [\"single\", \"multi\", \"additive\", \"one\"],\r\n      init: \"single\",\r\n      apply: \"_applySelectionMode\"\r\n    },\r\n\r\n    /**\r\n     * Enable drag selection (multi selection of items through\r\n     * dragging the pointer in pressed states).\r\n     *\r\n     * Only possible for the selection modes <code>multi</code> and <code>additive</code>\r\n     */\r\n    dragSelection: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyDragSelection\"\r\n    },\r\n\r\n    /**\r\n     * Enable quick selection mode, where no tap is needed to change the selection.\r\n     *\r\n     * Only possible for the modes <code>single</code> and <code>one</code>.\r\n     */\r\n    quickSelection: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyQuickSelection\"\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /** @type {qx.ui.core.selection.Abstract} The selection manager */\r\n    __manager: null,\r\n\r\n    /** @type {Boolean} used to control recursion in onSelectionChange */\r\n    __inOnSelectionChange: false,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      USER API\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\r\n     *\r\n     * @param items {null|qx.ui.core.Widget[]} Items to select.\r\n     * @returns {null|TypeError} The status of this operation.\r\n     */\r\n    setValue(items) {\r\n      if (null === items) {\r\n        this.__manager.clearSelection();\r\n        return null;\r\n      }\r\n\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        for (var i = 0, l = items.length; i < l; i++) {\r\n          if (!(items[i] instanceof qx.ui.core.Widget)) {\r\n            return new TypeError(\r\n              \"Some items in provided argument are not widgets\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      try {\r\n        this.setSelection(items);\r\n        return null;\r\n      } catch (e) {\r\n        return e;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\r\n     *\r\n     * @returns {qx.ui.core.Widget[]} The selected widgets or null if there are none.\r\n     */\r\n    getValue() {\r\n      return this.__manager.getSelection();\r\n    },\r\n\r\n    /**\r\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\r\n     */\r\n    resetValue() {\r\n      this.__manager.clearSelection();\r\n    },\r\n\r\n    /**\r\n     * Selects all items of the managed object.\r\n     */\r\n    selectAll() {\r\n      this.__manager.selectAll();\r\n    },\r\n\r\n    /**\r\n     * Detects whether the given item is currently selected.\r\n     *\r\n     * @param item {qx.ui.core.Widget} Any valid selectable item.\r\n     * @return {Boolean} Whether the item is selected.\r\n     * @throws {Error} if the item is not a child element.\r\n     */\r\n    isSelected(item) {\r\n      if (!qx.ui.core.Widget.contains(this, item)) {\r\n        throw new Error(\r\n          \"Could not test if \" +\r\n            item +\r\n            \" is selected, because it is not a child element!\"\r\n        );\r\n      }\r\n\r\n      return this.__manager.isItemSelected(item);\r\n    },\r\n\r\n    /**\r\n     * Adds the given item to the existing selection.\r\n     *\r\n     * Use {@link #setSelection} instead if you want to replace\r\n     * the current selection.\r\n     *\r\n     * @param item {qx.ui.core.Widget} Any valid item.\r\n     * @throws {Error} if the item is not a child element.\r\n     */\r\n    addToSelection(item) {\r\n      if (!qx.ui.core.Widget.contains(this, item)) {\r\n        throw new Error(\r\n          \"Could not add + \" +\r\n            item +\r\n            \" to selection, because it is not a child element!\"\r\n        );\r\n      }\r\n\r\n      this.__manager.addItem(item);\r\n    },\r\n\r\n    /**\r\n     * Removes the given item from the selection.\r\n     *\r\n     * Use {@link #resetSelection} when you want to clear\r\n     * the whole selection at once.\r\n     *\r\n     * @param item {qx.ui.core.Widget} Any valid item\r\n     * @throws {Error} if the item is not a child element.\r\n     */\r\n    removeFromSelection(item) {\r\n      if (!qx.ui.core.Widget.contains(this, item)) {\r\n        throw new Error(\r\n          \"Could not remove \" +\r\n            item +\r\n            \" from selection, because it is not a child element!\"\r\n        );\r\n      }\r\n\r\n      this.__manager.removeItem(item);\r\n    },\r\n\r\n    /**\r\n     * Selects an item range between two given items.\r\n     *\r\n     * @param begin {qx.ui.core.Widget} Item to start with\r\n     * @param end {qx.ui.core.Widget} Item to end at\r\n     */\r\n    selectRange(begin, end) {\r\n      this.__manager.selectItemRange(begin, end);\r\n    },\r\n\r\n    /**\r\n     * Clears the whole selection at once. Also\r\n     * resets the lead and anchor items and their\r\n     * styles.\r\n     */\r\n    resetSelection() {\r\n      this.__manager.clearSelection();\r\n    },\r\n\r\n    /**\r\n     * Replaces current selection with the given items.\r\n     *\r\n     * @param items {qx.ui.core.Widget[]} Items to select.\r\n     * @throws {Error} if one of the items is not a child element and if\r\n     *    the mode is set to <code>single</code> or <code>one</code> and\r\n     *    the items contains more than one item.\r\n     */\r\n    setSelection(items) {\r\n      // Block recursion so that when selection changes modelSelection, the modelSelection\r\n      //  cannot change selection again; this is important because modelSelection does not\r\n      //  necessarily match selection, for example when the item's model properties are\r\n      //  null.\r\n      if (this.__inOnSelectionChange) {\r\n        return;\r\n      }\r\n      for (var i = 0; i < items.length; i++) {\r\n        if (!qx.ui.core.Widget.contains(this, items[i])) {\r\n          throw new Error(\r\n            \"Could not select \" +\r\n              items[i] +\r\n              \", because it is not a child element!\"\r\n          );\r\n        }\r\n      }\r\n\r\n      if (items.length === 0) {\r\n        this.resetSelection();\r\n      } else {\r\n        var currentSelection = this.getSelection();\r\n        if (!qx.lang.Array.equals(currentSelection, items)) {\r\n          this.__manager.replaceSelection(items);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns an array of currently selected items.\r\n     *\r\n     * Note: The result is only a set of selected items, so the order can\r\n     * differ from the sequence in which the items were added.\r\n     *\r\n     * @return {qx.ui.core.Widget[]} List of items.\r\n     */\r\n    getSelection() {\r\n      return this.__manager.getSelection();\r\n    },\r\n\r\n    /**\r\n     * Returns an array of currently selected items sorted\r\n     * by their index in the container.\r\n     *\r\n     * @return {qx.ui.core.Widget[]} Sorted list of items\r\n     */\r\n    getSortedSelection() {\r\n      return this.__manager.getSortedSelection();\r\n    },\r\n\r\n    /**\r\n     * Whether the selection is empty\r\n     *\r\n     * @return {Boolean} Whether the selection is empty\r\n     */\r\n    isSelectionEmpty() {\r\n      return this.__manager.isSelectionEmpty();\r\n    },\r\n\r\n    /**\r\n     * Returns the last selection context.\r\n     *\r\n     * @return {String|null} One of <code>tap</code>, <code>quick</code>,\r\n     *    <code>drag</code> or <code>key</code> or <code>null</code>.\r\n     */\r\n    getSelectionContext() {\r\n      return this.__manager.getSelectionContext();\r\n    },\r\n\r\n    /**\r\n     * Returns the internal selection manager. Use this with\r\n     * caution!\r\n     *\r\n     * @return {qx.ui.core.selection.Abstract} The selection manager\r\n     */\r\n    _getManager() {\r\n      return this.__manager;\r\n    },\r\n\r\n    /**\r\n     * Returns all elements which are selectable.\r\n     *\r\n     * @param all {Boolean} true for all selectables, false for the\r\n     *   selectables the user can interactively select\r\n     * @return {qx.ui.core.Widget[]} The contained items.\r\n     */\r\n    getSelectables(all) {\r\n      return this.__manager.getSelectables(all);\r\n    },\r\n\r\n    /**\r\n     * Invert the selection. Select the non selected and deselect the selected.\r\n     */\r\n    invertSelection() {\r\n      this.__manager.invertSelection();\r\n    },\r\n\r\n    /**\r\n     * Returns the current lead item. Generally the item which was last modified\r\n     * by the user (tapped on etc.)\r\n     *\r\n     * @return {qx.ui.core.Widget} The lead item or <code>null</code>\r\n     */\r\n    _getLeadItem() {\r\n      var mode = this.__manager.getMode();\r\n\r\n      if (mode === \"single\" || mode === \"one\") {\r\n        return this.__manager.getSelectedItem();\r\n      } else {\r\n        return this.__manager.getLeadItem();\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PROPERTY APPLY ROUTINES\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // property apply\r\n    _applySelectionMode(value, old) {\r\n      this.__manager.setMode(value);\r\n    },\r\n\r\n    // property apply\r\n    _applyDragSelection(value, old) {\r\n      this.__manager.setDrag(value);\r\n    },\r\n\r\n    // property apply\r\n    _applyQuickSelection(value, old) {\r\n      this.__manager.setQuick(value);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      EVENT HANDLER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Event listener for <code>changeSelection</code> event on selection manager.\r\n     *\r\n     * @param e {qx.event.type.Data} Data event\r\n     */\r\n    _onSelectionChange(e) {\r\n      if (this.__inOnSelectionChange) {\r\n        return;\r\n      }\r\n      this.__inOnSelectionChange = true;\r\n      try {\r\n        this.fireDataEvent(\"changeSelection\", e.getData(), e.getOldData());\r\n        this.fireDataEvent(\"changeValue\", e.getData(), e.getOldData());\r\n      } finally {\r\n        this.__inOnSelectionChange = false;\r\n      }\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this._disposeObjects(\"__manager\");\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}