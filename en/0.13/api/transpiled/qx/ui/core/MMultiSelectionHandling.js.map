{
  "version": 3,
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/compiler/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MMultiSelectionHandling.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "clazz",
    "SELECTION_MANAGER",
    "manager",
    "__manager",
    "addListener",
    "handlePointerDown",
    "handleTap",
    "handlePointerOver",
    "handlePointerMove",
    "handleLoseCapture",
    "handleKeyPress",
    "handleAddItem",
    "handleRemoveItem",
    "_onSelectionChange",
    "events",
    "properties",
    "selectionMode",
    "check",
    "init",
    "apply",
    "dragSelection",
    "quickSelection",
    "members",
    "__inOnSelectionChange",
    "setValue",
    "items",
    "clearSelection",
    "setSelection",
    "e",
    "getValue",
    "getSelection",
    "resetValue",
    "selectAll",
    "isSelected",
    "item",
    "ui",
    "core",
    "Widget",
    "contains",
    "Error",
    "isItemSelected",
    "addToSelection",
    "addItem",
    "removeFromSelection",
    "removeItem",
    "selectRange",
    "begin",
    "end",
    "selectItemRange",
    "resetSelection",
    "i",
    "length",
    "currentSelection",
    "lang",
    "Array",
    "equals",
    "replaceSelection",
    "getSortedSelection",
    "isSelectionEmpty",
    "getSelectionContext",
    "_getManager",
    "getSelectables",
    "all",
    "invertSelection",
    "_getLeadItem",
    "mode",
    "getMode",
    "getSelectedItem",
    "getLeadItem",
    "_applySelectionMode",
    "value",
    "old",
    "setMode",
    "_applyDragSelection",
    "setDrag",
    "_applyQuickSelection",
    "setQuick",
    "fireDataEvent",
    "getData",
    "getOldData",
    "destruct",
    "_disposeObjects",
    "MMultiSelectionHandling"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * This mixin links all methods to manage the multi selection from the\n * internal selection manager to the widget.\n */\nqx.Mixin.define(\"qx.ui.core.MMultiSelectionHandling\",\n{\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    // Create selection manager\n    var clazz = this.SELECTION_MANAGER;\n    var manager = this.__manager = new clazz(this);\n\n    // Add widget event listeners\n    this.addListener(\"pointerdown\", manager.handlePointerDown, manager);\n    this.addListener(\"tap\", manager.handleTap, manager);\n    this.addListener(\"pointerover\", manager.handlePointerOver, manager);\n    this.addListener(\"pointermove\", manager.handlePointerMove, manager);\n    this.addListener(\"losecapture\", manager.handleLoseCapture, manager);\n    this.addListener(\"keypress\", manager.handleKeyPress, manager);\n\n    this.addListener(\"addItem\", manager.handleAddItem, manager);\n    this.addListener(\"removeItem\", manager.handleRemoveItem, manager);\n\n    // Add manager listeners\n    manager.addListener(\"changeSelection\", this._onSelectionChange, this);\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fires after the value was modified */\n    \"changeValue\" : \"qx.event.type.Data\",\n\n    /** Fires after the selection was modified */\n    \"changeSelection\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n\n  properties :\n  {\n    /**\n     * The selection mode to use.\n     *\n     * For further details please have a look at:\n     * {@link qx.ui.core.selection.Abstract#mode}\n     */\n    selectionMode :\n    {\n      check : [ \"single\", \"multi\", \"additive\", \"one\" ],\n      init : \"single\",\n      apply : \"_applySelectionMode\"\n    },\n\n    /**\n     * Enable drag selection (multi selection of items through\n     * dragging the pointer in pressed states).\n     *\n     * Only possible for the selection modes <code>multi</code> and <code>additive</code>\n     */\n    dragSelection :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyDragSelection\"\n    },\n\n    /**\n     * Enable quick selection mode, where no tap is needed to change the selection.\n     *\n     * Only possible for the modes <code>single</code> and <code>one</code>.\n     */\n    quickSelection :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyQuickSelection\"\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members :\n  {\n    /** @type {qx.ui.core.selection.Abstract} The selection manager */\n    __manager : null,\n\n    /** @type {Boolean} used to control recursion in onSelectionChange */\n    __inOnSelectionChange: false,\n\n    \n    /*\n    ---------------------------------------------------------------------------\n      USER API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param items {null|qx.ui.core.Widget[]} Items to select.\n     * @returns {null|TypeError} The status of this operation.\n     */\n    setValue : function(items) {\n      if (null === items) {\n        this.__manager.clearSelection();\n        return null;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        for (var i=0, l=items.length; i<l; i++) {\n          if (!(items[i] instanceof qx.ui.core.Widget)) {\n            return new TypeError(\"Some items in provided argument are not widgets\");\n          }\n        }\n      }\n\n      try {\n        this.setSelection(items);\n        return null;\n\n      } catch (e) {\n        return e;\n      }\n    },\n\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @returns {qx.ui.core.Widget[]} The selected widgets or null if there are none.\n     */\n    getValue : function() {\n      return this.__manager.getSelection();\n    },\n\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue : function() {\n      this.__manager.clearSelection();\n    },\n\n\n    /**\n     * Selects all items of the managed object.\n     */\n    selectAll : function() {\n      this.__manager.selectAll();\n    },\n\n\n    /**\n     * Detects whether the given item is currently selected.\n     *\n     * @param item {qx.ui.core.Widget} Any valid selectable item.\n     * @return {Boolean} Whether the item is selected.\n     * @throws {Error} if the item is not a child element.\n     */\n    isSelected : function(item) {\n      if (!qx.ui.core.Widget.contains(this, item)) {\n        throw new Error(\"Could not test if \" + item +\n          \" is selected, because it is not a child element!\");\n      }\n\n      return this.__manager.isItemSelected(item);\n    },\n\n\n    /**\n     * Adds the given item to the existing selection.\n     *\n     * Use {@link #setSelection} instead if you want to replace\n     * the current selection.\n     *\n     * @param item {qx.ui.core.Widget} Any valid item.\n     * @throws {Error} if the item is not a child element.\n     */\n    addToSelection : function(item) {\n      if (!qx.ui.core.Widget.contains(this, item)) {\n        throw new Error(\"Could not add + \" + item +\n          \" to selection, because it is not a child element!\");\n      }\n\n      this.__manager.addItem(item);\n    },\n\n\n    /**\n     * Removes the given item from the selection.\n     *\n     * Use {@link #resetSelection} when you want to clear\n     * the whole selection at once.\n     *\n     * @param item {qx.ui.core.Widget} Any valid item\n     * @throws {Error} if the item is not a child element.\n     */\n    removeFromSelection : function(item) {\n      if (!qx.ui.core.Widget.contains(this, item)) {\n        throw new Error(\"Could not remove \" + item +\n          \" from selection, because it is not a child element!\");\n      }\n\n      this.__manager.removeItem(item);\n    },\n\n\n    /**\n     * Selects an item range between two given items.\n     *\n     * @param begin {qx.ui.core.Widget} Item to start with\n     * @param end {qx.ui.core.Widget} Item to end at\n     */\n    selectRange : function(begin, end) {\n      this.__manager.selectItemRange(begin, end);\n    },\n\n\n    /**\n     * Clears the whole selection at once. Also\n     * resets the lead and anchor items and their\n     * styles.\n     */\n    resetSelection : function() {\n      this.__manager.clearSelection();\n    },\n\n\n    /**\n     * Replaces current selection with the given items.\n     *\n     * @param items {qx.ui.core.Widget[]} Items to select.\n     * @throws {Error} if one of the items is not a child element and if\n     *    the mode is set to <code>single</code> or <code>one</code> and\n     *    the items contains more than one item.\n     */\n    setSelection : function(items) {\n      // Block recursion so that when selection changes modelSelection, the modelSelection\n      //  cannot change selection again; this is important because modelSelection does not\n      //  necessarily match selection, for example when the item's model properties are\n      //  null.\n      if (this.__inOnSelectionChange) {\n        return;\n      }\n      for (var i = 0; i < items.length; i++) {\n        if (!qx.ui.core.Widget.contains(this, items[i])) {\n          throw new Error(\"Could not select \" + items[i] +\n            \", because it is not a child element!\");\n        }\n      }\n\n      if (items.length === 0) {\n        this.resetSelection();\n      } else {\n        var currentSelection = this.getSelection();\n        if (!qx.lang.Array.equals(currentSelection, items)) {\n          this.__manager.replaceSelection(items);\n        }\n      }\n    },\n\n\n    /**\n     * Returns an array of currently selected items.\n     *\n     * Note: The result is only a set of selected items, so the order can\n     * differ from the sequence in which the items were added.\n     *\n     * @return {qx.ui.core.Widget[]} List of items.\n     */\n    getSelection : function() {\n      return this.__manager.getSelection();\n    },\n\n    /**\n     * Returns an array of currently selected items sorted\n     * by their index in the container.\n     *\n     * @return {qx.ui.core.Widget[]} Sorted list of items\n     */\n    getSortedSelection : function() {\n      return this.__manager.getSortedSelection();\n    },\n\n    /**\n     * Whether the selection is empty\n     *\n     * @return {Boolean} Whether the selection is empty\n     */\n    isSelectionEmpty : function() {\n      return this.__manager.isSelectionEmpty();\n    },\n\n    /**\n     * Returns the last selection context.\n     *\n     * @return {String | null} One of <code>tap</code>, <code>quick</code>,\n     *    <code>drag</code> or <code>key</code> or <code>null</code>.\n     */\n    getSelectionContext : function() {\n      return this.__manager.getSelectionContext();\n    },\n\n    /**\n     * Returns the internal selection manager. Use this with\n     * caution!\n     *\n     * @return {qx.ui.core.selection.Abstract} The selection manager\n     */\n    _getManager : function() {\n      return this.__manager;\n    },\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables: function(all) {\n      return this.__manager.getSelectables(all);\n    },\n\n    /**\n     * Invert the selection. Select the non selected and deselect the selected.\n     */\n    invertSelection: function() {\n      this.__manager.invertSelection();\n    },\n\n\n    /**\n     * Returns the current lead item. Generally the item which was last modified\n     * by the user (tapped on etc.)\n     *\n     * @return {qx.ui.core.Widget} The lead item or <code>null</code>\n     */\n    _getLeadItem : function() {\n      var mode = this.__manager.getMode();\n\n      if (mode === \"single\" || mode === \"one\") {\n        return this.__manager.getSelectedItem();\n      } else {\n        return this.__manager.getLeadItem();\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n\n    // property apply\n    _applySelectionMode : function(value, old) {\n      this.__manager.setMode(value);\n    },\n\n    // property apply\n    _applyDragSelection : function(value, old) {\n      this.__manager.setDrag(value);\n    },\n\n    // property apply\n    _applyQuickSelection : function(value, old) {\n      this.__manager.setQuick(value);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Event listener for <code>changeSelection</code> event on selection manager.\n     *\n     * @param e {qx.event.type.Data} Data event\n     */\n    _onSelectionChange : function(e) {\n      if (this.__inOnSelectionChange) {\n        return;\n      }\n      this.__inOnSelectionChange = true;\n      try {\n        this.fireDataEvent(\"changeSelection\", e.getData(), e.getOldData());\n        this.fireDataEvent(\"changeValue\", e.getData(), e.getOldData());\n      } finally {\n        this.__inOnSelectionChange = false;\n      }\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n\n  destruct : function() {\n    this._disposeObjects(\"__manager\");\n  }\n});\n"
  ]
}