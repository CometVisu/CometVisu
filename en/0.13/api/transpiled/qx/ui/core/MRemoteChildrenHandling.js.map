{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__forward",
    "__P_325_0",
    "functionName",
    "a1",
    "a2",
    "a3",
    "container",
    "getChildrenContainer",
    "getChildren",
    "hasChildren",
    "add",
    "child",
    "options",
    "remove",
    "removeAll",
    "indexOf",
    "addAt",
    "index",
    "addBefore",
    "before",
    "addAfter",
    "after",
    "removeAt",
    "ui",
    "core",
    "MRemoteChildrenHandling"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MRemoteChildrenHandling.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This mixin redirects all children handling methods to a child widget of the\r\n * including class. This is e.g. used in {@link qx.ui.window.Window} to add\r\n * child widgets directly to the window pane.\r\n *\r\n * The including class must implement the method <code>getChildrenContainer</code>,\r\n * which has to return the widget, to which the child widgets should be added.\r\n */\r\nqx.Mixin.define(\"qx.ui.core.MRemoteChildrenHandling\", {\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Forward the call with the given function name to the children container\r\n     *\r\n     * @param functionName {String} name of the method to forward\r\n     * @param a1 {var?} first argument of the method to call\r\n     * @param a2 {var?} second argument of the method to call\r\n     * @param a3 {var?} third argument of the method to call\r\n     * @return {var} The return value of the forward method\r\n     */\r\n    __forward(functionName, a1, a2, a3) {\r\n      var container = this.getChildrenContainer();\r\n      if (container === this) {\r\n        functionName = \"_\" + functionName;\r\n      }\r\n      return container[functionName](a1, a2, a3);\r\n    },\r\n\r\n    /**\r\n     * Returns the children list\r\n     *\r\n     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are\r\n     *   reference types, please do not modify them in-place)\r\n     */\r\n    getChildren() {\r\n      return this.__forward(\"getChildren\");\r\n    },\r\n\r\n    /**\r\n     * Whether the widget contains children.\r\n     *\r\n     * @return {Boolean} Returns <code>true</code> when the widget has children.\r\n     */\r\n    hasChildren() {\r\n      return this.__forward(\"hasChildren\");\r\n    },\r\n\r\n    /**\r\n     * Adds a new child widget.\r\n     *\r\n     * The supported keys of the layout options map depend on the layout manager\r\n     * used to position the widget. The options are documented in the class\r\n     * documentation of each layout manager {@link qx.ui.layout}.\r\n     *\r\n     * @param child {qx.ui.core.LayoutItem} the item to add.\r\n     * @param options {Map?null} Optional layout data for item.\r\n     * @return {qx.ui.core.Widget} This object (for chaining support)\r\n     */\r\n    add(child, options) {\r\n      return this.__forward(\"add\", child, options);\r\n    },\r\n\r\n    /**\r\n     * Remove the given child item.\r\n     *\r\n     * @param child {qx.ui.core.LayoutItem} the item to remove\r\n     * @return {qx.ui.core.Widget} This object (for chaining support)\r\n     */\r\n    remove(child) {\r\n      return this.__forward(\"remove\", child);\r\n    },\r\n\r\n    /**\r\n     * Remove all children.\r\n     * @return {Array} An array containing the removed children.\r\n     */\r\n    removeAll() {\r\n      return this.__forward(\"removeAll\");\r\n    },\r\n\r\n    /**\r\n     * Returns the index position of the given item if it is\r\n     * a child item. Otherwise it returns <code>-1</code>.\r\n     *\r\n     * This method works on the widget's children list. Some layout managers\r\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\r\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\r\n     * ignore the children order for the layout process.\r\n     *\r\n     * @param child {qx.ui.core.LayoutItem} the item to query for\r\n     * @return {Integer} The index position or <code>-1</code> when\r\n     *   the given item is no child of this layout.\r\n     */\r\n    indexOf(child) {\r\n      return this.__forward(\"indexOf\", child);\r\n    },\r\n\r\n    /**\r\n     * Add a child at the specified index\r\n     *\r\n     * This method works on the widget's children list. Some layout managers\r\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\r\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\r\n     * ignore the children order for the layout process.\r\n     *\r\n     * @param child {qx.ui.core.LayoutItem} item to add\r\n     * @param index {Integer} Index, at which the item will be inserted\r\n     * @param options {Map?null} Optional layout data for item.\r\n     */\r\n    addAt(child, index, options) {\r\n      this.__forward(\"addAt\", child, index, options);\r\n    },\r\n\r\n    /**\r\n     * Add an item before another already inserted item\r\n     *\r\n     * This method works on the widget's children list. Some layout managers\r\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\r\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\r\n     * ignore the children order for the layout process.\r\n     *\r\n     * @param child {qx.ui.core.LayoutItem} item to add\r\n     * @param before {qx.ui.core.LayoutItem} item before the new item will be inserted.\r\n     * @param options {Map?null} Optional layout data for item.\r\n     */\r\n    addBefore(child, before, options) {\r\n      this.__forward(\"addBefore\", child, before, options);\r\n    },\r\n\r\n    /**\r\n     * Add an item after another already inserted item\r\n     *\r\n     * This method works on the widget's children list. Some layout managers\r\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\r\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\r\n     * ignore the children order for the layout process.\r\n     *\r\n     * @param child {qx.ui.core.LayoutItem} item to add\r\n     * @param after {qx.ui.core.LayoutItem} item, after which the new item will be inserted\r\n     * @param options {Map?null} Optional layout data for item.\r\n     */\r\n    addAfter(child, after, options) {\r\n      this.__forward(\"addAfter\", child, after, options);\r\n    },\r\n\r\n    /**\r\n     * Remove the item at the specified index.\r\n     *\r\n     * This method works on the widget's children list. Some layout managers\r\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\r\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\r\n     * ignore the children order for the layout process.\r\n     *\r\n     * @param index {Integer} Index of the item to remove.\r\n     * @return {qx.ui.core.LayoutItem} The removed item\r\n     */\r\n    removeAt(index) {\r\n      return this.__forward(\"removeAt\", index);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}