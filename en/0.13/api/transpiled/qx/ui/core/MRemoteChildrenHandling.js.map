{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__forward",
    "functionName",
    "a1",
    "a2",
    "a3",
    "container",
    "getChildrenContainer",
    "getChildren",
    "hasChildren",
    "add",
    "child",
    "options",
    "remove",
    "removeAll",
    "indexOf",
    "addAt",
    "index",
    "addBefore",
    "before",
    "addAfter",
    "after",
    "removeAt",
    "ui",
    "core",
    "MRemoteChildrenHandling"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MRemoteChildrenHandling.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This mixin redirects all children handling methods to a child widget of the\n * including class. This is e.g. used in {@link qx.ui.window.Window} to add\n * child widgets directly to the window pane.\n *\n * The including class must implement the method <code>getChildrenContainer</code>,\n * which has to return the widget, to which the child widgets should be added.\n */\nqx.Mixin.define(\"qx.ui.core.MRemoteChildrenHandling\", {\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Forward the call with the given function name to the children container\n     *\n     * @param functionName {String} name of the method to forward\n     * @param a1 {var?} first argument of the method to call\n     * @param a2 {var?} second argument of the method to call\n     * @param a3 {var?} third argument of the method to call\n     * @return {var} The return value of the forward method\n     */\n    __forward(functionName, a1, a2, a3) {\n      var container = this.getChildrenContainer();\n      if (container === this) {\n        functionName = \"_\" + functionName;\n      }\n      return container[functionName](a1, a2, a3);\n    },\n\n    /**\n     * Returns the children list\n     *\n     * @return {qx.ui.core.LayoutItem[]} The children array (Arrays are\n     *   reference types, please do not modify them in-place)\n     */\n    getChildren() {\n      return this.__forward(\"getChildren\");\n    },\n\n    /**\n     * Whether the widget contains children.\n     *\n     * @return {Boolean} Returns <code>true</code> when the widget has children.\n     */\n    hasChildren() {\n      return this.__forward(\"hasChildren\");\n    },\n\n    /**\n     * Adds a new child widget.\n     *\n     * The supported keys of the layout options map depend on the layout manager\n     * used to position the widget. The options are documented in the class\n     * documentation of each layout manager {@link qx.ui.layout}.\n     *\n     * @param child {qx.ui.core.LayoutItem} the item to add.\n     * @param options {Map?null} Optional layout data for item.\n     * @return {qx.ui.core.Widget} This object (for chaining support)\n     */\n    add(child, options) {\n      return this.__forward(\"add\", child, options);\n    },\n\n    /**\n     * Remove the given child item.\n     *\n     * @param child {qx.ui.core.LayoutItem} the item to remove\n     * @return {qx.ui.core.Widget} This object (for chaining support)\n     */\n    remove(child) {\n      return this.__forward(\"remove\", child);\n    },\n\n    /**\n     * Remove all children.\n     * @return {Array} An array containing the removed children.\n     */\n    removeAll() {\n      return this.__forward(\"removeAll\");\n    },\n\n    /**\n     * Returns the index position of the given item if it is\n     * a child item. Otherwise it returns <code>-1</code>.\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param child {qx.ui.core.LayoutItem} the item to query for\n     * @return {Integer} The index position or <code>-1</code> when\n     *   the given item is no child of this layout.\n     */\n    indexOf(child) {\n      return this.__forward(\"indexOf\", child);\n    },\n\n    /**\n     * Add a child at the specified index\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param child {qx.ui.core.LayoutItem} item to add\n     * @param index {Integer} Index, at which the item will be inserted\n     * @param options {Map?null} Optional layout data for item.\n     */\n    addAt(child, index, options) {\n      this.__forward(\"addAt\", child, index, options);\n    },\n\n    /**\n     * Add an item before another already inserted item\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param child {qx.ui.core.LayoutItem} item to add\n     * @param before {qx.ui.core.LayoutItem} item before the new item will be inserted.\n     * @param options {Map?null} Optional layout data for item.\n     */\n    addBefore(child, before, options) {\n      this.__forward(\"addBefore\", child, before, options);\n    },\n\n    /**\n     * Add an item after another already inserted item\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param child {qx.ui.core.LayoutItem} item to add\n     * @param after {qx.ui.core.LayoutItem} item, after which the new item will be inserted\n     * @param options {Map?null} Optional layout data for item.\n     */\n    addAfter(child, after, options) {\n      this.__forward(\"addAfter\", child, after, options);\n    },\n\n    /**\n     * Remove the item at the specified index.\n     *\n     * This method works on the widget's children list. Some layout managers\n     * (e.g. {@link qx.ui.layout.HBox}) use the children order as additional\n     * layout information. Other layout manager (e.g. {@link qx.ui.layout.Grid})\n     * ignore the children order for the layout process.\n     *\n     * @param index {Integer} Index of the item to remove.\n     * @return {qx.ui.core.LayoutItem} The removed item\n     */\n    removeAt(index) {\n      return this.__forward(\"removeAt\", index);\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}