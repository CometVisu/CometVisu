{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "statics",
    "__visible",
    "__direction",
    "setVisibleElement",
    "elem",
    "getVisibleElement",
    "setMoveDirection",
    "direction",
    "Error",
    "getMoveDirection",
    "properties",
    "position",
    "check",
    "init",
    "themeable",
    "placeMethod",
    "domMove",
    "placementModeX",
    "placementModeY",
    "offsetLeft",
    "offsetTop",
    "offsetRight",
    "offsetBottom",
    "offset",
    "group",
    "mode",
    "members",
    "__ptwLiveUpdater",
    "__ptwLiveDisappearListener",
    "__ptwLiveUpdateDisappearListener",
    "getLayoutLocation",
    "widget",
    "insets",
    "bounds",
    "left",
    "top",
    "getBounds",
    "size",
    "getLayoutParent",
    "isRootWidget",
    "getInsets",
    "rootCoords",
    "getContentLocation",
    "right",
    "width",
    "bottom",
    "height",
    "moveTo",
    "visible",
    "ui",
    "core",
    "MPlacement",
    "elemLocation",
    "Math",
    "max",
    "getDomMove",
    "setDomPosition",
    "setLayoutProperties",
    "placeToWidget",
    "target",
    "liveupdate",
    "__cleanupFromLastPlaceToWidgetLiveUpdate",
    "lang",
    "Function",
    "bind",
    "event",
    "Idle",
    "getInstance",
    "addListener",
    "coords",
    "_place",
    "__P_316_5",
    "removeListener",
    "placeToPointer",
    "round",
    "getDocumentLeft",
    "getDocumentTop",
    "placeToElement",
    "_this",
    "location",
    "bom",
    "element",
    "Location",
    "get",
    "offsetWidth",
    "offsetHeight",
    "placeToPoint",
    "point",
    "_getPlacementOffsets",
    "getOffsetLeft",
    "getOffsetTop",
    "getOffsetRight",
    "getOffsetBottom",
    "__getPlacementSize",
    "__P_316_6",
    "callback",
    "_this2",
    "_computePlacementSize",
    "isVisible",
    "addListenerOnce",
    "call",
    "result",
    "util",
    "placement",
    "Placement",
    "compute",
    "getPosition",
    "getPlacementModeX",
    "getPlacementModeY",
    "removeState",
    "addState",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/core/MPlacement.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Martin Wittemann (martinwittemann)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Methods to place popup like widgets to other widgets, points,\n * pointer event coordinates, etc.\n */\nqx.Mixin.define(\"qx.ui.core.MPlacement\", {\n  statics: {\n    __visible: null,\n    __direction: \"left\",\n\n    /**\n     * Set the always visible element. If an element is set, the\n     * {@link #moveTo} method takes care of every move and tries not to cover\n     * the given element with a movable widget like a popup or context menu.\n     *\n     * @param elem {qx.ui.core.Widget} The widget which should always be visible.\n     */\n    setVisibleElement(elem) {\n      this.__visible = elem;\n    },\n\n    /**\n     * Returns the given always visible element. See {@link #setVisibleElement}\n     * for more details.\n     *\n     * @return {qx.ui.core.Widget|null} The given widget.\n     */\n    getVisibleElement() {\n      return this.__visible;\n    },\n\n    /**\n     * Set the move direction for an element which hides always visible element.\n     * The value has only an effect when the {@link #setVisibleElement} is set.\n     *\n     * @param direction {String} The direction <code>left</code> or <code>top</code>.\n     */\n    setMoveDirection(direction) {\n      if (direction === \"top\" || direction === \"left\") {\n        this.__direction = direction;\n      } else {\n        throw new Error(\n          \"Invalid value for the parameter 'direction' \" +\n            \"[qx.ui.core.MPlacement.setMoveDirection()], the value was '\" +\n            direction +\n            \"' \" +\n            \"but 'top' or 'left' are allowed.\"\n        );\n      }\n    },\n\n    /**\n     * Returns the move direction for an element which hides always visible element.\n     * See {@link #setMoveDirection} for more details.\n     *\n     * @return {String} The move direction.\n     */\n    getMoveDirection() {\n      return this.__direction;\n    }\n  },\n\n  properties: {\n    /**\n     * Position of the aligned object in relation to the opener.\n     *\n     * Please note than changes to this property are only applied\n     * when re-aligning the widget.\n     *\n     * The first part of the value is the edge to attach to. The second\n     * part the alignment of the orthogonal edge after the widget\n     * has been attached.\n     *\n     * The default value \"bottom-left\" for example means that the\n     * widget should be shown directly under the given target and\n     * then should be aligned to be left edge:\n     *\n     * <pre>\n     * +--------+\n     * | target |\n     * +--------+\n     * +-------------+\n     * |   widget    |\n     * +-------------+\n     * </pre>\n     */\n    position: {\n      check: [\n        \"top-left\",\n        \"top-center\",\n        \"top-right\",\n        \"bottom-left\",\n        \"bottom-center\",\n        \"bottom-right\",\n        \"left-top\",\n        \"left-middle\",\n        \"left-bottom\",\n        \"right-top\",\n        \"right-middle\",\n        \"right-bottom\"\n      ],\n\n      init: \"bottom-left\",\n      themeable: true\n    },\n\n    /**\n     * Whether the widget should be placed relative to an other widget or to\n     * the pointer.\n     */\n    placeMethod: {\n      check: [\"widget\", \"pointer\"],\n      init: \"pointer\",\n      themeable: true\n    },\n\n    /** Whether the widget should moved using DOM methods. */\n    domMove: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Selects the algorithm to place the widget horizontally. <code>direct</code>\n     * uses {@link qx.util.placement.DirectAxis}, <code>keep-align</code>\n     * uses {@link qx.util.placement.KeepAlignAxis} and <code>best-fit</code>\n     * uses {@link qx.util.placement.BestFitAxis}.\n     */\n    placementModeX: {\n      check: [\"direct\", \"keep-align\", \"best-fit\"],\n      init: \"keep-align\",\n      themeable: true\n    },\n\n    /**\n     * Selects the algorithm to place the widget vertically. <code>direct</code>\n     * uses {@link qx.util.placement.DirectAxis}, <code>keep-align</code>\n     * uses {@link qx.util.placement.KeepAlignAxis} and <code>best-fit</code>\n     * uses {@link qx.util.placement.BestFitAxis}.\n     */\n    placementModeY: {\n      check: [\"direct\", \"keep-align\", \"best-fit\"],\n      init: \"keep-align\",\n      themeable: true\n    },\n\n    /** Left offset of the pointer (in pixel) */\n    offsetLeft: {\n      check: \"Integer\",\n      init: 0,\n      themeable: true\n    },\n\n    /** Top offset of the pointer (in pixel) */\n    offsetTop: {\n      check: \"Integer\",\n      init: 0,\n      themeable: true\n    },\n\n    /** Right offset of the pointer (in pixel) */\n    offsetRight: {\n      check: \"Integer\",\n      init: 0,\n      themeable: true\n    },\n\n    /** Bottom offset of the pointer (in pixel) */\n    offsetBottom: {\n      check: \"Integer\",\n      init: 0,\n      themeable: true\n    },\n\n    /** Offsets in one group */\n    offset: {\n      group: [\"offsetTop\", \"offsetRight\", \"offsetBottom\", \"offsetLeft\"],\n      mode: \"shorthand\",\n      themeable: true\n    }\n  },\n\n  members: {\n    __ptwLiveUpdater: null,\n    __ptwLiveDisappearListener: null,\n    __ptwLiveUpdateDisappearListener: null,\n\n    /**\n     * Returns the location data like {qx.bom.element.Location#get} does,\n     * but does not rely on DOM elements coordinates to be rendered. Instead,\n     * this method works with the available layout data available in the moment\n     * when it is executed.\n     * This works best when called in some type of <code>resize</code> or\n     * <code>move</code> event which are supported by all widgets out of the\n     * box.\n     *\n     * @param widget {qx.ui.core.Widget} Any widget\n     * @return {Map|null} Returns a map with <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code> which contains the distance\n     *   of the widget relative coords the document.\n     */\n    getLayoutLocation(widget) {\n      // Use post-layout dimensions\n      // which do not rely on the final rendered DOM element\n      var insets, bounds, left, top;\n\n      // Add bounds of the widget itself\n      bounds = widget.getBounds();\n\n      if (!bounds) {\n        return null;\n      }\n\n      left = bounds.left;\n      top = bounds.top;\n\n      // Keep size to protect it for loop\n      var size = bounds;\n\n      // Now loop up with parents until reaching the root\n      widget = widget.getLayoutParent();\n      while (widget && !widget.isRootWidget()) {\n        // Add coordinates\n        bounds = widget.getBounds();\n        left += bounds.left;\n        top += bounds.top;\n\n        // Add insets\n        insets = widget.getInsets();\n        left += insets.left;\n        top += insets.top;\n\n        // Next parent\n        widget = widget.getLayoutParent();\n      }\n\n      // Add the rendered location of the root widget\n      if (widget && widget.isRootWidget()) {\n        var rootCoords = widget.getContentLocation();\n        if (rootCoords) {\n          left += rootCoords.left;\n          top += rootCoords.top;\n        }\n      }\n\n      // Build location data\n      return {\n        left: left,\n        top: top,\n        right: left + size.width,\n        bottom: top + size.height\n      };\n    },\n\n    /**\n     * Sets the position. Uses low-level, high-performance DOM\n     * methods when the property {@link #domMove} is enabled.\n     * Checks if an always visible element is set and moves the widget to not\n     * overlay the always visible widget if possible. The algorithm tries to\n     * move the widget as far left as necessary but not of the screen.\n     * ({@link #setVisibleElement})\n     *\n     * @param left {Integer} The left position\n     * @param top {Integer} The top position\n     */\n    moveTo(left, top) {\n      var visible = qx.ui.core.MPlacement.getVisibleElement();\n\n      // if we have an always visible element\n      if (visible) {\n        var bounds = this.getBounds();\n        var elemLocation = visible.getContentLocation();\n\n        // if we have bounds for both elements\n        if (bounds && elemLocation) {\n          var bottom = top + bounds.height;\n          var right = left + bounds.width;\n\n          // horizontal placement wrong\n          // each number is for the upcomming check (huge element is\n          // the always visible, eleme prefixed)\n          //     | 3 |\n          //   ---------\n          //   | |---| |\n          //   |       |\n          // --|-|   |-|--\n          // 1 | |   | | 2\n          // --|-|   |-|--\n          //   |       |\n          //   | |---| |\n          //   ---------\n          //     | 4 |\n          if (\n            right > elemLocation.left &&\n            left < elemLocation.right &&\n            bottom > elemLocation.top &&\n            top < elemLocation.bottom\n          ) {\n            var direction = qx.ui.core.MPlacement.getMoveDirection();\n\n            if (direction === \"left\") {\n              left = Math.max(elemLocation.left - bounds.width, 0);\n            } else {\n              top = Math.max(elemLocation.top - bounds.height, 0);\n            }\n          }\n        }\n      }\n\n      if (this.getDomMove()) {\n        this.setDomPosition(left, top);\n      } else {\n        this.setLayoutProperties({ left: left, top: top });\n      }\n    },\n\n    /**\n     * Places the widget to another (at least laid out) widget. The DOM\n     * element is not needed, but the bounds are needed to compute the\n     * location of the widget to align to.\n     *\n     * @param target {qx.ui.core.Widget} Target coords align coords\n     * @param liveupdate {Boolean} Flag indicating if the position of the\n     * widget should be checked and corrected automatically.\n     * @return {Boolean} true if the widget was successfully placed\n     */\n    placeToWidget(target, liveupdate) {\n      // Use the idle event to make sure that the widget's position gets\n      // updated automatically (e.g. the widget gets scrolled).\n      if (liveupdate) {\n        this.__cleanupFromLastPlaceToWidgetLiveUpdate();\n\n        // Bind target and livupdate to placeToWidget\n        this.__ptwLiveUpdater = qx.lang.Function.bind(\n          this.placeToWidget,\n          this,\n          target,\n          false\n        );\n\n        qx.event.Idle.getInstance().addListener(\n          \"interval\",\n          this.__ptwLiveUpdater\n        );\n\n        // Remove the listener when the element disappears.\n        this.__ptwLiveUpdateDisappearListener = function () {\n          this.__cleanupFromLastPlaceToWidgetLiveUpdate();\n        };\n\n        this.addListener(\n          \"disappear\",\n          this.__ptwLiveUpdateDisappearListener,\n          this\n        );\n      }\n\n      var coords =\n        target.getContentLocation() || this.getLayoutLocation(target);\n\n      if (coords != null) {\n        this._place(coords);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    /**\n     * Removes all resources allocated by the last run of placeToWidget with liveupdate=true\n     */\n    __cleanupFromLastPlaceToWidgetLiveUpdate() {\n      if (this.__ptwLiveUpdater) {\n        qx.event.Idle.getInstance().removeListener(\n          \"interval\",\n          this.__ptwLiveUpdater\n        );\n\n        this.__ptwLiveUpdater = null;\n      }\n\n      if (this.__ptwLiveUpdateDisappearListener) {\n        this.removeListener(\n          \"disappear\",\n          this.__ptwLiveUpdateDisappearListener,\n          this\n        );\n\n        this.__ptwLiveUpdateDisappearListener = null;\n      }\n    },\n\n    /**\n     * Places the widget to the pointer position.\n     *\n     * @param event {qx.event.type.Pointer} Pointer event to align to\n     */\n    placeToPointer(event) {\n      var left = Math.round(event.getDocumentLeft());\n      var top = Math.round(event.getDocumentTop());\n\n      var coords = {\n        left: left,\n        top: top,\n        right: left,\n        bottom: top\n      };\n\n      this._place(coords);\n    },\n\n    /**\n     * Places the widget to any (rendered) DOM element.\n     *\n     * @param elem {Element} DOM element to align to\n     * @param liveupdate {Boolean} Flag indicating if the position of the\n     * widget should be checked and corrected automatically.\n     */\n    placeToElement(elem, liveupdate) {\n      var location = qx.bom.element.Location.get(elem);\n      var coords = {\n        left: location.left,\n        top: location.top,\n        right: location.left + elem.offsetWidth,\n        bottom: location.top + elem.offsetHeight\n      };\n\n      // Use the idle event to make sure that the widget's position gets\n      // updated automatically (e.g. the widget gets scrolled).\n      if (liveupdate) {\n        // Bind target and livupdate to placeToWidget\n        this.__ptwLiveUpdater = qx.lang.Function.bind(\n          this.placeToElement,\n          this,\n          elem,\n          false\n        );\n\n        qx.event.Idle.getInstance().addListener(\n          \"interval\",\n          this.__ptwLiveUpdater\n        );\n\n        // Remove the listener when the element disappears.\n        this.addListener(\"disappear\", () => {\n          if (this.__ptwLiveUpdater) {\n            qx.event.Idle.getInstance().removeListener(\n              \"interval\",\n              this.__ptwLiveUpdater\n            );\n\n            this.__ptwLiveUpdater = null;\n          }\n        });\n      }\n\n      this._place(coords);\n    },\n\n    /**\n     * Places the widget in relation to the given point\n     *\n     * @param point {Map} Coordinate of any point with the keys <code>left</code>\n     *   and <code>top</code>.\n     */\n    placeToPoint(point) {\n      var coords = {\n        left: point.left,\n        top: point.top,\n        right: point.left,\n        bottom: point.top\n      };\n\n      this._place(coords);\n    },\n\n    /**\n     * Returns the placement offsets as a map\n     *\n     * @return {Map} The placement offsets\n     */\n    _getPlacementOffsets() {\n      return {\n        left: this.getOffsetLeft(),\n        top: this.getOffsetTop(),\n        right: this.getOffsetRight(),\n        bottom: this.getOffsetBottom()\n      };\n    },\n\n    /**\n     * Get the size of the object to place. The callback will be called with\n     * the size as first argument. This methods works asynchronously.\n     *\n     * The size of the object to place is the size of the widget. If a widget\n     * including this mixin needs a different size it can implement the method\n     * <code>_computePlacementSize</code>, which returns the size.\n     *\n     *  @param callback {Function} This function will be called with the size as\n     *    first argument\n     */\n    __getPlacementSize(callback) {\n      var size = null;\n\n      if (this._computePlacementSize) {\n        var size = this._computePlacementSize();\n      } else if (this.isVisible()) {\n        var size = this.getBounds();\n      }\n\n      if (size == null) {\n        this.addListenerOnce(\"appear\", () => {\n          this.__getPlacementSize(callback);\n        });\n      } else {\n        callback.call(this, size);\n      }\n    },\n\n    /**\n     * Internal method to read specific this properties and\n     * apply the results to the this afterwards.\n     *\n     * @param coords {Map} Location of the object to align the this to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     */\n    _place(coords) {\n      this.__getPlacementSize(function (size) {\n        var result = qx.util.placement.Placement.compute(\n          size,\n          this.getLayoutParent().getBounds(),\n          coords,\n          this._getPlacementOffsets(),\n          this.getPosition(),\n          this.getPlacementModeX(),\n          this.getPlacementModeY()\n        );\n\n        // state handling for tooltips e.g.\n        this.removeState(\"placementLeft\");\n        this.removeState(\"placementRight\");\n        this.addState(\n          coords.left < result.left ? \"placementRight\" : \"placementLeft\"\n        );\n\n        this.moveTo(result.left, result.top);\n      });\n    }\n  },\n\n  destruct() {\n    this.__cleanupFromLastPlaceToWidgetLiveUpdate();\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,uBAAuB,EAAE;IACvCC,OAAO,EAAE;MACPC,SAAS,EAAE,IAAI;MACfC,SAAW,EAAE,MAAM;MAEnB;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,iBAAiB,WAAAA,kBAACC,IAAI,EAAE;QACtB,IAAI,CAACH,SAAS,GAAGG,IAAI;MACvB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,iBAAiB,WAAAA,kBAAA,EAAG;QAClB,OAAO,IAAI,CAACJ,SAAS;MACvB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIK,gBAAgB,WAAAA,iBAACC,SAAS,EAAE;QAC1B,IAAIA,SAAS,KAAK,KAAK,IAAIA,SAAS,KAAK,MAAM,EAAE;UAC/C,IAAI,CAACL,SAAW,GAAGK,SAAS;QAC9B,CAAC,MAAM;UACL,MAAM,IAAIC,KAAK,CACb,4GAEED,SAAS,GACT,IAAI,GACJ,kCAAkC,CACrC;QACH;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIE,gBAAgB,WAAAA,iBAAA,EAAG;QACjB,OAAO,IAAI,CAACP,SAAW;MACzB;IACF,CAAC;IAEDQ,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,EAAE;QACRC,KAAK,EAAE,CACL,UAAU,EACV,YAAY,EACZ,WAAW,EACX,aAAa,EACb,eAAe,EACf,cAAc,EACd,UAAU,EACV,aAAa,EACb,aAAa,EACb,WAAW,EACX,cAAc,EACd,cAAc,CACf;QAEDC,IAAI,EAAE,aAAa;QACnBC,SAAS,EAAE;MACb,CAAC;MAED;AAC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"
}