{
  "className": "qx.ui.layout.Grid",
  "packageName": "qx.ui.layout",
  "name": "Grid",
  "superClass": "qx.ui.layout.Abstract",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 76,
        "column": 0,
        "index": 2602
      },
      "end": {
        "line": 1437,
        "column": 3,
        "index": 42775
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>The grid layout manager arranges the items in a two dimensional\n grid. Widgets can be placed into the grid's cells and may span multiple rows\n and columns.\n<em>Features</em></p>\n<ul>\n<li>Flex values for rows and columns</li>\n<li>Minimal and maximal column and row sizes</li>\n<li>Manually setting of column and row sizes</li>\n<li>Horizontal and vertical alignment</li>\n<li>Horizontal and vertical spacing</li>\n<li>Column and row spans</li>\n<li><p>Auto-sizing\n<em>Item Properties</em></p></li>\n</ul>\n<ul>\n <li><strong>row</strong> <em>(Integer)</em>: The row of the cell the\n   widget should occupy. Each cell can only containing one widget. This layout\n   property is mandatory.\n </li>\n <li><strong>column</strong> <em>(Integer)</em>: The column of the cell the\n   widget should occupy. Each cell can only containing one widget. This layout\n   property is mandatory.\n </li>\n <li><strong>rowSpan</strong> <em>(Integer)</em>: The number of rows, the\n   widget should span, starting from the row specified in the <code>row</code>\n   property. The cells in the spanned rows must be empty as well.\n </li>\n <li><strong>colSpan</strong> <em>(Integer)</em>: The number of columns, the\n   widget should span, starting from the column specified in the <code>column</code>\n   property. The cells in the spanned columns must be empty as well.\n </li>\n </ul>\n<p><em>Example</em>\n Here is a little example of how to use the grid layout.\n </p>\n<pre class=\"javascript\">\n var layout = new qx.ui.layout.Grid();\n layout.setRowFlex(0, 1);\n layout.setColumnWidth(1, 200);\n var container = new qx.ui.container.Composite(layout);\n container.add(new qx.ui.core.Widget(), {row: 0, column: 0});\n container.add(new qx.ui.core.Widget(), {row: 0, column: 1});\n container.add(new qx.ui.core.Widget(), {row: 1, column: 0, rowSpan: 2});\n </pre>\n<p><em>External Documentation</em>\n <a href='https://qooxdoo.org/documentation/#/desktop/layout/grid.md'>\n Extended documentation</a> and links to demos of this layout in the qooxdoo manual.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 91,
        "column": 2,
        "index": 3093
      },
      "end": {
        "line": 104,
        "column": 3,
        "index": 3314
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "spacingX {Integer?0} The horizontal spacing between grid cells.\n     Sets {@link #spacingX}.",
          "paramName": "spacingX",
          "description": " The horizontal spacing between grid cells.\n     Sets {@link #spacingX}.",
          "optional": true,
          "defaultValue": "0",
          "type": "Integer"
        },
        {
          "name": "@param",
          "body": "spacingY {Integer?0} The vertical spacing between grid cells.\n     Sets {@link #spacingY}.",
          "paramName": "spacingY",
          "description": " The vertical spacing between grid cells.\n     Sets {@link #spacingY}.",
          "optional": true,
          "defaultValue": "0",
          "type": "Integer"
        }
      ]
    }
  },
  "properties": {
    "spacingX": {
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3590
        },
        "end": {
          "line": 120,
          "column": 5,
          "index": 3680
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The horizontal spacing between grid cells.</p>"
          }
        ]
      },
      "name": "spacingX",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "spacingY": {
      "location": {
        "start": {
          "line": 125,
          "column": 4,
          "index": 3751
        },
        "end": {
          "line": 129,
          "column": 5,
          "index": 3841
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The vertical spacing between grid cells.</p>"
          }
        ]
      },
      "name": "spacingY",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": 0,
      "check": "Integer",
      "defaultValue": 0
    },
    "allowGrowSpannedCellWidth": {
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 4294
        },
        "end": {
          "line": 142,
          "column": 5,
          "index": 4405
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Allow growing of spanning cells' widths beyond the accumulated widths of the columns.\n The default behavior (init value false) is that the width of the spanning cell is\n determined by the accumulated width of the columns (plus spacing).\n Setting this property to true lets the cell width grow as needed to show\n the widget in the spanning cell, which also enlarges the width of the spanned columns.</p>"
          }
        ]
      },
      "name": "allowGrowSpannedCellWidth",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__grid": {
      "location": {
        "start": {
          "line": 153,
          "column": 4,
          "index": 4665
        },
        "end": {
          "line": 153,
          "column": 16,
          "index": 4677
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} 2D array of grid cell data"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__rowData": {
      "location": {
        "start": {
          "line": 154,
          "column": 4,
          "index": 4683
        },
        "end": {
          "line": 154,
          "column": 19,
          "index": 4698
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__colData": {
      "location": {
        "start": {
          "line": 155,
          "column": 4,
          "index": 4704
        },
        "end": {
          "line": 155,
          "column": 19,
          "index": 4719
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__colSpans": {
      "location": {
        "start": {
          "line": 157,
          "column": 4,
          "index": 4726
        },
        "end": {
          "line": 157,
          "column": 20,
          "index": 4742
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__rowSpans": {
      "location": {
        "start": {
          "line": 158,
          "column": 4,
          "index": 4748
        },
        "end": {
          "line": 158,
          "column": 20,
          "index": 4764
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__maxRowIndex": {
      "location": {
        "start": {
          "line": 159,
          "column": 4,
          "index": 4770
        },
        "end": {
          "line": 159,
          "column": 23,
          "index": 4789
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__maxColIndex": {
      "location": {
        "start": {
          "line": 160,
          "column": 4,
          "index": 4795
        },
        "end": {
          "line": 160,
          "column": 23,
          "index": 4814
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__rowHeights": {
      "location": {
        "start": {
          "line": 163,
          "column": 4,
          "index": 4865
        },
        "end": {
          "line": 163,
          "column": 22,
          "index": 4883
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} cached row heights"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__colWidths": {
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 4936
        },
        "end": {
          "line": 166,
          "column": 21,
          "index": 4953
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} cached column widths"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "verifyLayoutProperty": {
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 4978
        },
        "end": {
          "line": 188,
          "column": 6,
          "index": 5477
        }
      },
      "jsdoc": {},
      "type": "variable",
      "access": "public"
    },
    "__buildGrid": {
      "location": {
        "start": {
          "line": 193,
          "column": 4,
          "index": 5555
        },
        "end": {
          "line": 282,
          "column": 5,
          "index": 7842
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Rebuild the internal representation of the grid</p>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_setRowData": {
      "location": {
        "start": {
          "line": 291,
          "column": 4,
          "index": 8061
        },
        "end": {
          "line": 300,
          "column": 5,
          "index": 8290
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stores data for a grid row</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "key {String} The key under which the data should be stored",
            "paramName": "key",
            "description": " The key under which the data should be stored",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} data to store",
            "paramName": "value",
            "description": " data to store",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setColumnData": {
      "location": {
        "start": {
          "line": 309,
          "column": 4,
          "index": 8518
        },
        "end": {
          "line": 318,
          "column": 5,
          "index": 8762
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Stores data for a grid column</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "key {String} The key under which the data should be stored",
            "paramName": "key",
            "description": " The key under which the data should be stored",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} data to store",
            "paramName": "value",
            "description": " data to store",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "setSpacing": {
      "location": {
        "start": {
          "line": 327,
          "column": 4,
          "index": 9036
        },
        "end": {
          "line": 331,
          "column": 5,
          "index": 9148
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Shortcut to set both horizontal and vertical spacing between grid cells\n to the same value.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "spacing {Integer} new horizontal and vertical spacing",
            "paramName": "spacing",
            "description": " new horizontal and vertical spacing",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support).",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnAlign": {
      "location": {
        "start": {
          "line": 349,
          "column": 4,
          "index": 9912
        },
        "end": {
          "line": 362,
          "column": 5,
          "index": 10372
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the default cell alignment for a column. This alignment can be\n overridden on a per cell basis by setting the cell's content widget's\n <code>alignX</code> and <code>alignY</code> properties.\n If on a grid cell both row and a column alignment is set, the horizontal\n alignment is taken from the column and the vertical alignment is taken\n from the row.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} Column index",
            "paramName": "column",
            "description": " Column index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "hAlign {String} The horizontal alignment. Valid values are\n    \"left\", \"center\" and \"right\".",
            "paramName": "hAlign",
            "description": " The horizontal alignment. Valid values are\n    \"left\", \"center\" and \"right\".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "vAlign {String} The vertical alignment. Valid values are\n    \"top\", \"middle\", \"bottom\"",
            "paramName": "vAlign",
            "description": " The vertical alignment. Valid values are\n    \"top\", \"middle\", \"bottom\"",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnAlign": {
      "location": {
        "start": {
          "line": 371,
          "column": 4,
          "index": 10647
        },
        "end": {
          "line": 378,
          "column": 5,
          "index": 10834
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a map of the column's alignment.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     containing the vertical and horizontal column alignment.",
            "type": "Map",
            "description": " A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     containing the vertical and horizontal column alignment."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRowAlign": {
      "location": {
        "start": {
          "line": 396,
          "column": 4,
          "index": 11589
        },
        "end": {
          "line": 409,
          "column": 5,
          "index": 12025
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the default cell alignment for a row. This alignment can be\n overridden on a per cell basis by setting the cell's content widget's\n <code>alignX</code> and <code>alignY</code> properties.\n If on a grid cell both row and a column alignment is set, the horizontal\n alignment is taken from the column and the vertical alignment is taken\n from the row.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} Row index",
            "paramName": "row",
            "description": " Row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "hAlign {String} The horizontal alignment. Valid values are\n    \"left\", \"center\" and \"right\".",
            "paramName": "hAlign",
            "description": " The horizontal alignment. Valid values are\n    \"left\", \"center\" and \"right\".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "vAlign {String} The vertical alignment. Valid values are\n    \"top\", \"middle\", \"bottom\"",
            "paramName": "vAlign",
            "description": " The vertical alignment. Valid values are\n    \"top\", \"middle\", \"bottom\"",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowAlign": {
      "location": {
        "start": {
          "line": 418,
          "column": 4,
          "index": 12288
        },
        "end": {
          "line": 425,
          "column": 5,
          "index": 12466
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a map of the row's alignment.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The Row index",
            "paramName": "row",
            "description": " The Row index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     containing the vertical and horizontal row alignment.",
            "type": "Map",
            "description": " A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     containing the vertical and horizontal row alignment."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCellWidget": {
      "location": {
        "start": {
          "line": 436,
          "column": 4,
          "index": 12880
        },
        "end": {
          "line": 443,
          "column": 5,
          "index": 13065
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the widget located in the cell. If a the cell is empty or the widget\n has a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>,\n <code>null</code> is returned.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The cell's row index",
            "paramName": "row",
            "description": " The cell's row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "column {Integer} The cell's column index",
            "paramName": "column",
            "description": " The cell's column index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget|null}The cell's widget. The value may be null.",
            "type": "qx.ui.core.Widget|null",
            "description": "The cell's widget. The value may be null."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowCount": {
      "location": {
        "start": {
          "line": 450,
          "column": 4,
          "index": 13203
        },
        "end": {
          "line": 456,
          "column": 5,
          "index": 13338
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the number of rows in the grid layout.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The number of rows in the layout",
            "type": "Integer",
            "description": " The number of rows in the layout"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnCount": {
      "location": {
        "start": {
          "line": 463,
          "column": 4,
          "index": 13482
        },
        "end": {
          "line": 469,
          "column": 5,
          "index": 13620
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the number of columns in the grid layout.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The number of columns in the layout",
            "type": "Integer",
            "description": " The number of columns in the layout"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCellAlign": {
      "location": {
        "start": {
          "line": 483,
          "column": 4,
          "index": 14279
        },
        "end": {
          "line": 524,
          "column": 5,
          "index": 15364
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get a map of the cell's alignment. For vertical alignment the row alignment\n takes precedence over the column alignment. For horizontal alignment it is\n the over way round. If an alignment is set on the cell widget using\n {@link qx.ui.core.LayoutItem#setLayoutProperties}, this alignment takes\n always precedence over row or column alignment.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The cell's row index",
            "paramName": "row",
            "description": " The cell's row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "column {Integer} The cell's column index",
            "paramName": "column",
            "description": " The cell's column index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     containing the vertical and horizontal cell alignment.",
            "type": "Map",
            "description": " A map with the keys <code>vAlign</code> and <code>hAlign</code>\n     containing the vertical and horizontal cell alignment."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnFlex": {
      "location": {
        "start": {
          "line": 534,
          "column": 4,
          "index": 15669
        },
        "end": {
          "line": 538,
          "column": 5,
          "index": 15805
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the flex value for a grid column.\n By default the column flex value is <code>0</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "flex {Integer} The column's flex value",
            "paramName": "flex",
            "description": " The column's flex value",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnFlex": {
      "location": {
        "start": {
          "line": 546,
          "column": 4,
          "index": 15976
        },
        "end": {
          "line": 549,
          "column": 5,
          "index": 16115
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the flex value of a grid column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The column's flex value",
            "type": "Integer",
            "description": " The column's flex value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRowFlex": {
      "location": {
        "start": {
          "line": 559,
          "column": 4,
          "index": 16405
        },
        "end": {
          "line": 563,
          "column": 5,
          "index": 16529
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the flex value for a grid row.\n By default the row flex value is <code>0</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "flex {Integer} The row's flex value",
            "paramName": "flex",
            "description": " The row's flex value",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowFlex": {
      "location": {
        "start": {
          "line": 571,
          "column": 4,
          "index": 16688
        },
        "end": {
          "line": 575,
          "column": 5,
          "index": 16847
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the flex value of a grid row.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The row's flex value",
            "type": "Integer",
            "description": " The row's flex value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnMaxWidth": {
      "location": {
        "start": {
          "line": 585,
          "column": 4,
          "index": 17153
        },
        "end": {
          "line": 589,
          "column": 5,
          "index": 17305
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the maximum width of a grid column.\n The default value is <code>Infinity</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxWidth {Integer} The column's maximum width",
            "paramName": "maxWidth",
            "description": " The column's maximum width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnMaxWidth": {
      "location": {
        "start": {
          "line": 597,
          "column": 4,
          "index": 17482
        },
        "end": {
          "line": 600,
          "column": 5,
          "index": 17640
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the maximum width of a grid column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The column's maximum width",
            "type": "Integer",
            "description": " The column's maximum width"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnWidth": {
      "location": {
        "start": {
          "line": 610,
          "column": 4,
          "index": 17937
        },
        "end": {
          "line": 614,
          "column": 5,
          "index": 18077
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the preferred width of a grid column.\n The default value is <code>Infinity</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "width {Integer} The column's width",
            "paramName": "width",
            "description": " The column's width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnWidth": {
      "location": {
        "start": {
          "line": 622,
          "column": 4,
          "index": 18248
        },
        "end": {
          "line": 625,
          "column": 5,
          "index": 18393
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the preferred width of a grid column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The column's width",
            "type": "Integer",
            "description": " The column's width"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnMinWidth": {
      "location": {
        "start": {
          "line": 635,
          "column": 4,
          "index": 18692
        },
        "end": {
          "line": 639,
          "column": 5,
          "index": 18844
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the minimum width of a grid column.\n The default value is <code>0</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "minWidth {Integer} The column's minimum width",
            "paramName": "minWidth",
            "description": " The column's minimum width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnMinWidth": {
      "location": {
        "start": {
          "line": 647,
          "column": 4,
          "index": 19021
        },
        "end": {
          "line": 650,
          "column": 5,
          "index": 19140
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the minimum width of a grid column.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "column {Integer} The column index",
            "paramName": "column",
            "description": " The column index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The column's minimum width",
            "type": "Integer",
            "description": " The column's minimum width"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRowMaxHeight": {
      "location": {
        "start": {
          "line": 660,
          "column": 4,
          "index": 19436
        },
        "end": {
          "line": 664,
          "column": 5,
          "index": 19580
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the maximum height of a grid row.\n The default value is <code>Infinity</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxHeight {Integer} The row's maximum width",
            "paramName": "maxHeight",
            "description": " The row's maximum width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowMaxHeight": {
      "location": {
        "start": {
          "line": 672,
          "column": 4,
          "index": 19746
        },
        "end": {
          "line": 675,
          "column": 5,
          "index": 19865
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the maximum height of a grid row.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The row's maximum width",
            "type": "Integer",
            "description": " The row's maximum width"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRowHeight": {
      "location": {
        "start": {
          "line": 685,
          "column": 4,
          "index": 20152
        },
        "end": {
          "line": 689,
          "column": 5,
          "index": 20284
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the preferred height of a grid row.\n The default value is <code>Infinity</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "height {Integer} The row's width",
            "paramName": "height",
            "description": " The row's width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowHeight": {
      "location": {
        "start": {
          "line": 697,
          "column": 4,
          "index": 20444
        },
        "end": {
          "line": 700,
          "column": 5,
          "index": 20583
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the preferred height of a grid row.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The row's width",
            "type": "Integer",
            "description": " The row's width"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRowMinHeight": {
      "location": {
        "start": {
          "line": 710,
          "column": 4,
          "index": 20872
        },
        "end": {
          "line": 714,
          "column": 5,
          "index": 21016
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Set the minimum height of a grid row.\n The default value is <code>0</code>.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "minHeight {Integer} The row's minimum width",
            "paramName": "minHeight",
            "description": " The row's minimum width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.layout.Grid} This object (for chaining support)",
            "type": "qx.ui.layout.Grid",
            "description": " This object (for chaining support)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowMinHeight": {
      "location": {
        "start": {
          "line": 722,
          "column": 4,
          "index": 21182
        },
        "end": {
          "line": 725,
          "column": 5,
          "index": 21294
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Get the minimum height of a grid row.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "row {Integer} The row index",
            "paramName": "row",
            "description": " The row index",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The row's minimum width",
            "type": "Integer",
            "description": " The row's minimum width"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getOuterSize": {
      "location": {
        "start": {
          "line": 733,
          "column": 4,
          "index": 21507
        },
        "end": {
          "line": 748,
          "column": 5,
          "index": 22033
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes the widget's size hint including the widget's margins</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.LayoutItem} The widget to get the size for",
            "paramName": "widget",
            "description": " The widget to get the size for",
            "type": "qx.ui.core.LayoutItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} a size hint map",
            "type": "Map",
            "description": " a size hint map"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fixHeightsRowSpan": {
      "location": {
        "start": {
          "line": 763,
          "column": 4,
          "index": 22533
        },
        "end": {
          "line": 869,
          "column": 5,
          "index": 26298
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether all row spans fit with their preferred height into the\n preferred row heights. If there is not enough space, the preferred\n row sizes are increased. The distribution respects the flex and max\n values of the rows.\n  The same is true for the min sizes.\n  The height array is modified in place.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowHeights {Map[]} The current row height array as computed by\n     {@link #_getRowHeights}.",
            "paramName": "rowHeights",
            "description": " The current row height array as computed by\n     {@link #_getRowHeights}.",
            "type": "Map[]"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fixWidthsColSpan": {
      "location": {
        "start": {
          "line": 884,
          "column": 4,
          "index": 26803
        },
        "end": {
          "line": 998,
          "column": 5,
          "index": 30862
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Check whether all col spans fit with their preferred width into the\n preferred column widths. If there is not enough space the preferred\n column sizes are increased. The distribution respects the flex and max\n values of the columns.\n  The same is true for the min sizes.\n  The width array is modified in place.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "colWidths {Map[]} The current column width array as computed by\n     {@link #_getColWidths}.",
            "paramName": "colWidths",
            "description": " The current column width array as computed by\n     {@link #_getColWidths}.",
            "type": "Map[]"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getRowHeights": {
      "location": {
        "start": {
          "line": 1007,
          "column": 4,
          "index": 31133
        },
        "end": {
          "line": 1068,
          "column": 5,
          "index": 32836
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compute the min/pref/max row heights.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} An array containing height information for each row. The\n     entries have the keys <code>minHeight</code>, <code>maxHeight</code> and\n     <code>height</code>.",
            "type": "Map[]",
            "description": " An array containing height information for each row. The\n     entries have the keys <code>minHeight</code>, <code>maxHeight</code> and\n     <code>height</code>."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getColWidths": {
      "location": {
        "start": {
          "line": 1077,
          "column": 4,
          "index": 33108
        },
        "end": {
          "line": 1134,
          "column": 5,
          "index": 34658
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Compute the min/pref/max column widths.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} An array containing width information for each column. The\n     entries have the keys <code>minWidth</code>, <code>maxWidth</code> and\n     <code>width</code>.",
            "type": "Map[]",
            "description": " An array containing width information for each column. The\n     entries have the keys <code>minWidth</code>, <code>maxWidth</code> and\n     <code>width</code>."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getColumnFlexOffsets": {
      "location": {
        "start": {
          "line": 1144,
          "column": 4,
          "index": 35035
        },
        "end": {
          "line": 1177,
          "column": 5,
          "index": 35864
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes for each column by how many pixels it must grow or shrink, taking\n the column flex values and min/max widths into account.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "width {Integer} The grid width",
            "paramName": "width",
            "description": " The grid width",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer[]} Sparse array of offsets to add to each column width. If\n     an array entry is empty nothing should be added to the column.",
            "type": "Integer[]",
            "description": " Sparse array of offsets to add to each column width. If\n     an array entry is empty nothing should be added to the column."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getRowFlexOffsets": {
      "location": {
        "start": {
          "line": 1187,
          "column": 4,
          "index": 36233
        },
        "end": {
          "line": 1224,
          "column": 5,
          "index": 37104
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Computes for each row by how many pixels it must grow or shrink, taking\n the row flex values and min/max heights into account.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "height {Integer} The grid height",
            "paramName": "height",
            "description": " The grid height",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer[]} Sparse array of offsets to add to each row height. If\n     an array entry is empty nothing should be added to the row.",
            "type": "Integer[]",
            "description": " Sparse array of offsets to add to each row height. If\n     an array entry is empty nothing should be added to the row."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getColSpans": {
      "location": {
        "start": {
          "line": 1233,
          "column": 4,
          "index": 37335
        },
        "end": {
          "line": 1235,
          "column": 5,
          "index": 37387
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the internal private __colSpans array in order\n have a protected getter which can be used other methods\n to make them overridable</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} the __colSpans array",
            "type": "Array",
            "description": " the __colSpans array"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 1238,
          "column": 4,
          "index": 37412
        },
        "end": {
          "line": 1357,
          "column": 5,
          "index": 40992
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "invalidateLayoutCache": {
      "location": {
        "start": {
          "line": 1360,
          "column": 4,
          "index": 41017
        },
        "end": {
          "line": 1365,
          "column": 5,
          "index": 41149
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 1368,
          "column": 4,
          "index": 41174
        },
        "end": {
          "line": 1418,
          "column": 5,
          "index": 42384
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getSpacingX": {
      "type": "function",
      "name": "getSpacingX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>spacingX</code>.\n\nFor further details take a look at the property definition: {@link #spacingX}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for spacingX"
          }
        ]
      }
    },
    "setSpacingX": {
      "type": "function",
      "name": "setSpacingX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>spacingX</code>.\n\nFor further details take a look at the property definition: {@link #spacingX}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for spacingX"
          }
        ]
      }
    },
    "resetSpacingX": {
      "type": "function",
      "name": "resetSpacingX",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>spacingX</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #spacingX}."
          }
        ]
      }
    },
    "getSpacingY": {
      "type": "function",
      "name": "getSpacingY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>spacingY</code>.\n\nFor further details take a look at the property definition: {@link #spacingY}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for spacingY"
          }
        ]
      }
    },
    "setSpacingY": {
      "type": "function",
      "name": "setSpacingY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>spacingY</code>.\n\nFor further details take a look at the property definition: {@link #spacingY}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for spacingY"
          }
        ]
      }
    },
    "resetSpacingY": {
      "type": "function",
      "name": "resetSpacingY",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>spacingY</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #spacingY}."
          }
        ]
      }
    },
    "getAllowGrowSpannedCellWidth": {
      "type": "function",
      "name": "getAllowGrowSpannedCellWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowSpannedCellWidth</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowSpannedCellWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowSpannedCellWidth"
          }
        ]
      }
    },
    "isAllowGrowSpannedCellWidth": {
      "type": "function",
      "name": "isAllowGrowSpannedCellWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>allowGrowSpannedCellWidth</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowSpannedCellWidth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for allowGrowSpannedCellWidth"
          }
        ]
      }
    },
    "setAllowGrowSpannedCellWidth": {
      "type": "function",
      "name": "setAllowGrowSpannedCellWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>allowGrowSpannedCellWidth</code>.\n\nFor further details take a look at the property definition: {@link #allowGrowSpannedCellWidth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for allowGrowSpannedCellWidth"
          }
        ]
      }
    },
    "resetAllowGrowSpannedCellWidth": {
      "type": "function",
      "name": "resetAllowGrowSpannedCellWidth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>allowGrowSpannedCellWidth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #allowGrowSpannedCellWidth}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1427,
        "column": 2,
        "index": 42578
      },
      "end": {
        "line": 1436,
        "column": 3,
        "index": 42771
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}