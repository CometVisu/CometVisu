{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacing",
    "alignX",
    "separator",
    "setSpacing",
    "setAlignX",
    "setSeparator",
    "properties",
    "check",
    "init",
    "apply",
    "alignY",
    "nullable",
    "reversed",
    "members",
    "__widths",
    "__flexs",
    "__enableFlex",
    "__children",
    "_applyReversed",
    "_invalidChildrenCache",
    "_applyLayoutChange",
    "__rebuildCache",
    "children",
    "_getLayoutChildren",
    "length",
    "enableFlex",
    "reuse",
    "props",
    "widths",
    "Array",
    "flexs",
    "getReversed",
    "concat",
    "reverse",
    "i",
    "getLayoutProperties",
    "width",
    "parseFloat",
    "flex",
    "verifyLayoutProperty",
    "core",
    "Environment",
    "select",
    "item",
    "name",
    "value",
    "assertMatch",
    "Util",
    "PERCENT_VALUE",
    "assertNumber",
    "assert",
    "assertBoolean",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "util",
    "getSpacing",
    "getSeparator",
    "gaps",
    "computeHorizontalSeparatorGaps",
    "computeHorizontalGaps",
    "child",
    "percent",
    "hint",
    "allocatedWidth",
    "getSizeHint",
    "Math",
    "floor",
    "minWidth",
    "maxWidth",
    "push",
    "flexibles",
    "offset",
    "notEnoughSpace",
    "min",
    "max",
    "flexShrink",
    "result",
    "computeFlexOffsets",
    "left",
    "getMarginLeft",
    "getAlignX",
    "round",
    "top",
    "height",
    "marginRight",
    "marginTop",
    "marginBottom",
    "_clearSeparators",
    "separatorInsets",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "resolve",
    "getInsets",
    "separatorWidth",
    "right",
    "getMarginTop",
    "getMarginBottom",
    "minHeight",
    "maxHeight",
    "computeVerticalAlignOffset",
    "getAlignY",
    "_renderSeparator",
    "collapseMargins",
    "getMarginRight",
    "_computeSizeHint",
    "percentMinWidth",
    "margin",
    "l",
    "destruct",
    "HBox"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/HBox.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A horizontal box layout.\n *\n * The horizontal box layout lays out widgets in a horizontal row, from left\n * to right.\n *\n * *Features*\n *\n * * Minimum and maximum dimensions\n * * Prioritized growing/shrinking (flex)\n * * Margins (with horizontal collapsing)\n * * Auto sizing (ignoring percent values)\n * * Percent widths (not relevant for size hint)\n * * Alignment (child property {@link qx.ui.core.LayoutItem#alignX} is ignored)\n * * Horizontal spacing (collapsed with margins)\n * * Reversed children layout (from last to first)\n * * Vertical children stretching (respecting size hints)\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>flex</strong> <em>(Integer)</em>: The flexibility of a layout item determines how the container\n *   distributes remaining empty space among its children. If items are made\n *   flexible, they can grow or shrink accordingly. Their relative flex values\n *   determine how the items are being resized, i.e. the larger the flex ratio\n *   of two items, the larger the resizing of the first item compared to the\n *   second.\n *\n *   If there is only one flex item in a layout container, its actual flex\n *   value is not relevant. To disallow items to become flexible, set the\n *   flex value to zero.\n * </li>\n * <li><strong>flexShrink</strong> <em>(Boolean)</em>: Only valid if `flex` is\n *    set to a non-zero value, `flexShrink` tells the layout to force the child\n *    widget to shink if there is not enough space available for all of the children.\n *    This is used in scenarios such as when the child insists that it has a `minWidth`\n *    but there simply is not enough space to support that minimum width, so the\n *    overflow has to be cut off.  This setting allows the container to pick\n *    which children are able to have their `minWidth` sacrificed.  Without this\n *    setting, one oversized child can force later children out of view, regardless\n *    of `flex` settings\n * </li>\n * <li><strong>width</strong> <em>(String)</em>: Allows to define a percent\n *   width for the item. The width in percent, if specified, is used instead\n *   of the width defined by the size hint. The minimum and maximum width still\n *   takes care of the element's limits. It has no influence on the layout's\n *   size hint. Percent values are mostly useful for widgets which are sized by\n *   the outer hierarchy.\n * </li>\n * </ul>\n *\n * *Example*\n *\n * Here is a little example of how to use the HBox layout.\n *\n * <pre class=\"javascript\">\n * var layout = new qx.ui.layout.HBox();\n * layout.setSpacing(4); // apply spacing\n *\n * var container = new qx.ui.container.Composite(layout);\n *\n * container.add(new qx.ui.core.Widget());\n * container.add(new qx.ui.core.Widget());\n * container.add(new qx.ui.core.Widget());\n * </pre>\n *\n * *External Documentation*\n *\n * See <a href='https://qooxdoo.org/documentation/#/desktop/layout/box.md'>extended documentation</a>\n * and links to demos for this layout.\n *\n */\nqx.Class.define(\"qx.ui.layout.HBox\", {\n  extend: qx.ui.layout.Abstract,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacing {Integer?0} The spacing between child widgets {@link #spacing}.\n   * @param alignX {String?\"left\"} Horizontal alignment of the whole children\n   *     block {@link #alignX}.\n   * @param separator {String|qx.ui.decoration.IDecorator?} A separator to render between the items\n   */\n  construct(spacing, alignX, separator) {\n    super();\n\n    if (spacing) {\n      this.setSpacing(spacing);\n    }\n\n    if (alignX) {\n      this.setAlignX(alignX);\n    }\n\n    if (separator) {\n      this.setSeparator(separator);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    /**\n     * Horizontal alignment of the whole children block. The horizontal\n     * alignment of the child is completely ignored in HBoxes (\n     * {@link qx.ui.core.LayoutItem#alignX}).\n     */\n    alignX: {\n      check: [\"left\", \"center\", \"right\"],\n      init: \"left\",\n      apply: \"_applyLayoutChange\"\n    },\n\n    /**\n     * Vertical alignment of each child. Can be overridden through\n     * {@link qx.ui.core.LayoutItem#alignY}.\n     */\n    alignY: {\n      check: [\"top\", \"middle\", \"bottom\"],\n      init: \"top\",\n      apply: \"_applyLayoutChange\"\n    },\n\n    /** Horizontal spacing between two children */\n    spacing: {\n      check: \"Integer\",\n      init: 0,\n      apply: \"_applyLayoutChange\"\n    },\n\n    /** Separator lines to use between the objects */\n    separator: {\n      check: \"Decorator\",\n      nullable: true,\n      apply: \"_applyLayoutChange\"\n    },\n\n    /** Whether the actual children list should be laid out in reversed order. */\n    reversed: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyReversed\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __widths: null,\n    __flexs: null,\n    __enableFlex: null,\n    __children: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyReversed() {\n      // easiest way is to invalidate the cache\n      this._invalidChildrenCache = true;\n\n      // call normal layout change\n      this._applyLayoutChange();\n    },\n\n    /**\n     * Rebuilds caches for flex and percent layout properties\n     */\n    __rebuildCache() {\n      var children = this._getLayoutChildren();\n      var length = children.length;\n      var enableFlex = false;\n      var reuse =\n        this.__widths &&\n        this.__widths.length != length &&\n        this.__flexs &&\n        this.__widths;\n      var props;\n\n      // Sparse array (keep old one if lengths has not been modified)\n      var widths = reuse ? this.__widths : new Array(length);\n      var flexs = reuse ? this.__flexs : new Array(length);\n\n      // Reverse support\n      if (this.getReversed()) {\n        children = children.concat().reverse();\n      }\n\n      // Loop through children to preparse values\n      for (var i = 0; i < length; i++) {\n        props = children[i].getLayoutProperties();\n\n        if (props.width != null) {\n          widths[i] = parseFloat(props.width) / 100;\n        }\n\n        if (props.flex != null) {\n          flexs[i] = props.flex;\n          enableFlex = true;\n        } else {\n          // reset (in case the index of the children changed: BUG #3131)\n          flexs[i] = 0;\n        }\n      }\n\n      // Store data\n      if (!reuse) {\n        this.__widths = widths;\n        this.__flexs = flexs;\n      }\n\n      this.__enableFlex = enableFlex;\n      this.__children = children;\n\n      // Clear invalidation marker\n      delete this._invalidChildrenCache;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    verifyLayoutProperty: qx.core.Environment.select(\"qx.debug\", {\n      true(item, name, value) {\n        if (name === \"width\") {\n          this.assertMatch(value, qx.ui.layout.Util.PERCENT_VALUE);\n        } else if (name === \"flex\") {\n          this.assertNumber(value);\n          this.assert(value >= 0);\n        } else if (name === \"flexShrink\") {\n          this.assertBoolean(value);\n        } else {\n          this.assert(\n            false,\n            \"The property '\" + name + \"' is not supported by the HBox layout!\"\n          );\n        }\n      },\n\n      false: null\n    }),\n\n    // overridden\n    renderLayout(availWidth, availHeight, padding) {\n      // Rebuild flex/width caches\n      if (this._invalidChildrenCache) {\n        this.__rebuildCache();\n      }\n\n      // Cache children\n      var children = this.__children;\n      var length = children.length;\n      var util = qx.ui.layout.Util;\n\n      // Compute gaps\n      var spacing = this.getSpacing();\n      var separator = this.getSeparator();\n      var gaps;\n      if (separator) {\n        gaps = util.computeHorizontalSeparatorGaps(\n          children,\n          spacing,\n          separator\n        );\n      } else {\n        gaps = util.computeHorizontalGaps(children, spacing, true);\n      }\n\n      // First run to cache children data and compute allocated width\n      var i, child, width, percent;\n      var widths = [],\n        hint;\n      var allocatedWidth = gaps;\n\n      for (i = 0; i < length; i += 1) {\n        percent = this.__widths[i];\n        hint = children[i].getSizeHint();\n\n        width =\n          percent != null\n            ? Math.floor((availWidth - gaps) * percent)\n            : hint.width;\n\n        // Limit computed value\n        if (width < hint.minWidth) {\n          width = hint.minWidth;\n        } else if (width > hint.maxWidth) {\n          width = hint.maxWidth;\n        }\n\n        widths.push(width);\n        allocatedWidth += width;\n      }\n\n      // Flex support (growing/shrinking)\n      if (this.__enableFlex && allocatedWidth != availWidth) {\n        var flexibles = {};\n        var flex, offset;\n        var notEnoughSpace = allocatedWidth > availWidth;\n\n        for (i = 0; i < length; i += 1) {\n          flex = this.__flexs[i];\n\n          if (flex > 0) {\n            hint = children[i].getSizeHint();\n\n            flexibles[i] = {\n              min: hint.minWidth,\n              value: widths[i],\n              max: hint.maxWidth,\n              flex: flex\n            };\n\n            if (notEnoughSpace) {\n              var props = children[i].getLayoutProperties();\n              if (props && props.flexShrink) {\n                flexibles[i].min = 0;\n              }\n            }\n          }\n        }\n\n        var result = util.computeFlexOffsets(\n          flexibles,\n          availWidth,\n          allocatedWidth\n        );\n\n        for (i in result) {\n          offset = result[i].offset;\n\n          widths[i] += offset;\n          allocatedWidth += offset;\n        }\n      }\n\n      // Start with left coordinate\n      var left = children[0].getMarginLeft();\n\n      // Alignment support\n      if (allocatedWidth < availWidth && this.getAlignX() != \"left\") {\n        left = availWidth - allocatedWidth;\n\n        if (this.getAlignX() === \"center\") {\n          left = Math.round(left / 2);\n        }\n      }\n\n      // Layouting children\n      var hint, top, height, width, marginRight, marginTop, marginBottom;\n      var spacing = this.getSpacing();\n\n      // Pre configure separators\n      this._clearSeparators();\n\n      // Compute separator width\n      if (separator) {\n        var separatorInsets = qx.theme.manager.Decoration.getInstance()\n          .resolve(separator)\n          .getInsets();\n        var separatorWidth = separatorInsets.left + separatorInsets.right;\n      }\n\n      // Render children and separators\n      for (i = 0; i < length; i += 1) {\n        child = children[i];\n        width = widths[i];\n        hint = child.getSizeHint();\n\n        marginTop = child.getMarginTop();\n        marginBottom = child.getMarginBottom();\n\n        // Find usable height\n        height = Math.max(\n          hint.minHeight,\n          Math.min(availHeight - marginTop - marginBottom, hint.maxHeight)\n        );\n\n        // Respect vertical alignment\n        top = util.computeVerticalAlignOffset(\n          child.getAlignY() || this.getAlignY(),\n          height,\n          availHeight,\n          marginTop,\n          marginBottom\n        );\n\n        // Add collapsed margin\n        if (i > 0) {\n          // Whether a separator has been configured\n          if (separator) {\n            // add margin of last child and spacing\n            left += marginRight + spacing;\n\n            // then render the separator at this position\n            this._renderSeparator(separator, {\n              left: left + padding.left,\n              top: padding.top,\n              width: separatorWidth,\n              height: availHeight\n            });\n\n            // and finally add the size of the separator, the spacing (again) and the left margin\n            left += separatorWidth + spacing + child.getMarginLeft();\n          } else {\n            // Support margin collapsing when no separator is defined\n            left += util.collapseMargins(\n              spacing,\n              marginRight,\n              child.getMarginLeft()\n            );\n          }\n        }\n\n        // Layout child\n        child.renderLayout(\n          left + padding.left,\n          top + padding.top,\n          width,\n          height\n        );\n\n        // Add width\n        left += width;\n\n        // Remember right margin (for collapsing)\n        marginRight = child.getMarginRight();\n      }\n    },\n\n    // overridden\n    _computeSizeHint() {\n      // Rebuild flex/width caches\n      if (this._invalidChildrenCache) {\n        this.__rebuildCache();\n      }\n\n      var util = qx.ui.layout.Util;\n      var children = this.__children;\n\n      // Initialize\n      var minWidth = 0,\n        width = 0,\n        percentMinWidth = 0;\n      var minHeight = 0,\n        height = 0;\n      var child, hint, margin;\n\n      // Iterate over children\n      for (var i = 0, l = children.length; i < l; i += 1) {\n        child = children[i];\n        hint = child.getSizeHint();\n\n        // Sum up widths\n        width += hint.width;\n\n        // Detect if child is shrinkable or has percent width and update minWidth\n        var flex = this.__flexs[i];\n        var percent = this.__widths[i];\n        if (flex) {\n          minWidth += hint.minWidth;\n        } else if (percent) {\n          percentMinWidth = Math.max(\n            percentMinWidth,\n            Math.round(hint.minWidth / percent)\n          );\n        } else {\n          minWidth += hint.width;\n        }\n\n        // Build vertical margin sum\n        margin = child.getMarginTop() + child.getMarginBottom();\n\n        // Find biggest height\n        if (hint.height + margin > height) {\n          height = hint.height + margin;\n        }\n\n        // Find biggest minHeight\n        if (hint.minHeight + margin > minHeight) {\n          minHeight = hint.minHeight + margin;\n        }\n      }\n\n      minWidth += percentMinWidth;\n\n      // Respect gaps\n      var spacing = this.getSpacing();\n      var separator = this.getSeparator();\n      var gaps;\n      if (separator) {\n        gaps = util.computeHorizontalSeparatorGaps(\n          children,\n          spacing,\n          separator\n        );\n      } else {\n        gaps = util.computeHorizontalGaps(children, spacing, true);\n      }\n\n      // Return hint\n      return {\n        minWidth: minWidth + gaps,\n        width: width + gaps,\n        minHeight: minHeight,\n        height: height\n      };\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__widths = this.__flexs = this.__children = null;\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,MAAM,CAACC,QAAQ;IAE7B;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;IACEC,SAAS,qBAACC,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAE;MACpC;MAEA,IAAIF,OAAO,EAAE;QACX,IAAI,CAACG,UAAU,CAACH,OAAO,CAAC;MAC1B;MAEA,IAAIC,MAAM,EAAE;QACV,IAAI,CAACG,SAAS,CAACH,MAAM,CAAC;MACxB;MAEA,IAAIC,SAAS,EAAE;QACb,IAAI,CAACG,YAAY,CAACH,SAAS,CAAC;MAC9B;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEI,UAAU,EAAE;MACV;AACJ;AACA;AACA;AACA;MACIL,MAAM,EAAE;QACNM,KAAK,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC;QAClCC,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;AACA;MACIC,MAAM,EAAE;QACNH,KAAK,EAAE,CAAC,KAAK,EAAE,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"
}