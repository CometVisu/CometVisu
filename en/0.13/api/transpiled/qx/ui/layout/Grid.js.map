{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacingX",
    "spacingY",
    "constructor",
    "call",
    "__rowData",
    "__colData",
    "setSpacingX",
    "setSpacingY",
    "properties",
    "check",
    "init",
    "apply",
    "allowGrowSpannedCellWidth",
    "members",
    "__grid",
    "__colSpans",
    "__rowSpans",
    "__maxRowIndex",
    "__maxColIndex",
    "__rowHeights",
    "__colWidths",
    "verifyLayoutProperty",
    "core",
    "Environment",
    "select",
    "_true",
    "item",
    "name",
    "value",
    "layoutProperties",
    "row",
    "column",
    "rowSpan",
    "colSpan",
    "assert",
    "assertInteger",
    "__buildGrid",
    "__P_379_9",
    "grid",
    "colSpans",
    "rowSpans",
    "maxRowIndex",
    "maxColIndex",
    "children",
    "_getLayoutChildren",
    "i",
    "l",
    "length",
    "child",
    "props",
    "getLayoutProperties",
    "Error",
    "x",
    "y",
    "undefined",
    "Math",
    "max",
    "push",
    "_invalidChildrenCache",
    "_setRowData",
    "key",
    "rowData",
    "_setColumnData",
    "colData",
    "setSpacing",
    "spacing",
    "setColumnAlign",
    "hAlign",
    "vAlign",
    "_applyLayoutChange",
    "getColumnAlign",
    "setRowAlign",
    "getRowAlign",
    "getCellWidget",
    "getRowCount",
    "getColumnCount",
    "getCellAlign",
    "widget",
    "widgetProps",
    "getAlignY",
    "getAlignX",
    "setColumnFlex",
    "flex",
    "getColumnFlex",
    "setRowFlex",
    "getRowFlex",
    "rowFlex",
    "setColumnMaxWidth",
    "maxWidth",
    "getColumnMaxWidth",
    "Infinity",
    "setColumnWidth",
    "width",
    "getColumnWidth",
    "setColumnMinWidth",
    "minWidth",
    "getColumnMinWidth",
    "setRowMaxHeight",
    "maxHeight",
    "getRowMaxHeight",
    "setRowHeight",
    "height",
    "getRowHeight",
    "setRowMinHeight",
    "minHeight",
    "getRowMinHeight",
    "_getOuterSize",
    "hint",
    "getSizeHint",
    "hMargins",
    "getMarginLeft",
    "getMarginRight",
    "vMargins",
    "getMarginTop",
    "getMarginBottom",
    "outerSize",
    "_fixHeightsRowSpan",
    "rowHeights",
    "vSpacing",
    "getSpacingY",
    "widgetRow",
    "prefSpanHeight",
    "minSpanHeight",
    "rowFlexes",
    "j",
    "rowHeight",
    "min",
    "lang",
    "Object",
    "isEmpty",
    "rowIncrements",
    "Util",
    "computeFlexOffsets",
    "k",
    "offset",
    "totalSpacing",
    "availableHeight",
    "avgRowHeight",
    "floor",
    "usedHeight",
    "rowsNeedAddition",
    "currentHeight",
    "additionalRowHeight",
    "_fixWidthsColSpan",
    "colWidths",
    "hSpacing",
    "getSpacingX",
    "_getColSpans",
    "widgetColumn",
    "prefSpanWidth",
    "minSpanWidth",
    "colFlexes",
    "col",
    "colWidth",
    "colFlex",
    "getAllowGrowSpannedCellWidth",
    "colIncrements",
    "availableWidth",
    "avgColWidth",
    "usedWidth",
    "colsNeedAddition",
    "currentWidth",
    "additionalColWidth",
    "_getRowHeights",
    "widgetRowSpan",
    "cellSize",
    "_getColWidths",
    "widgetColSpan",
    "_getColumnFlexOffsets",
    "diff",
    "flexibles",
    "_getRowFlexOffsets",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "prefWidths",
    "colStretchOffsets",
    "prefHeights",
    "rowStretchOffsets",
    "left",
    "top",
    "spanWidth",
    "spanHeight",
    "cellHint",
    "marginTop",
    "marginLeft",
    "marginBottom",
    "marginRight",
    "cellWidth",
    "cellHeight",
    "cellAlign",
    "cellLeft",
    "computeHorizontalAlignOffset",
    "cellTop",
    "computeVerticalAlignOffset",
    "invalidateLayoutCache",
    "Grid",
    "superclass",
    "prototype",
    "_computeSizeHint",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/layout/Grid.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Sebastian Werner (wpbasti)\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The grid layout manager arranges the items in a two dimensional\r\n * grid. Widgets can be placed into the grid's cells and may span multiple rows\r\n * and columns.\r\n *\r\n * *Features*\r\n *\r\n * * Flex values for rows and columns\r\n * * Minimal and maximal column and row sizes\r\n * * Manually setting of column and row sizes\r\n * * Horizontal and vertical alignment\r\n * * Horizontal and vertical spacing\r\n * * Column and row spans\r\n * * Auto-sizing\r\n *\r\n * *Item Properties*\r\n *\r\n * <ul>\r\n * <li><strong>row</strong> <em>(Integer)</em>: The row of the cell the\r\n *   widget should occupy. Each cell can only containing one widget. This layout\r\n *   property is mandatory.\r\n * </li>\r\n * <li><strong>column</strong> <em>(Integer)</em>: The column of the cell the\r\n *   widget should occupy. Each cell can only containing one widget. This layout\r\n *   property is mandatory.\r\n * </li>\r\n * <li><strong>rowSpan</strong> <em>(Integer)</em>: The number of rows, the\r\n *   widget should span, starting from the row specified in the <code>row</code>\r\n *   property. The cells in the spanned rows must be empty as well.\r\n * </li>\r\n * <li><strong>colSpan</strong> <em>(Integer)</em>: The number of columns, the\r\n *   widget should span, starting from the column specified in the <code>column</code>\r\n *   property. The cells in the spanned columns must be empty as well.\r\n * </li>\r\n * </ul>\r\n *\r\n * *Example*\r\n *\r\n * Here is a little example of how to use the grid layout.\r\n *\r\n * <pre class=\"javascript\">\r\n * var layout = new qx.ui.layout.Grid();\r\n * layout.setRowFlex(0, 1); // make row 0 flexible\r\n * layout.setColumnWidth(1, 200); // set with of column 1 to 200 pixel\r\n *\r\n * var container = new qx.ui.container.Composite(layout);\r\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 0});\r\n * container.add(new qx.ui.core.Widget(), {row: 0, column: 1});\r\n * container.add(new qx.ui.core.Widget(), {row: 1, column: 0, rowSpan: 2});\r\n * </pre>\r\n *\r\n * *External Documentation*\r\n *\r\n * <a href='https://qooxdoo.org/documentation/#/desktop/layout/grid.md'>\r\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\r\n */\r\nqx.Class.define(\"qx.ui.layout.Grid\", {\r\n  extend: qx.ui.layout.Abstract,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param spacingX {Integer?0} The horizontal spacing between grid cells.\r\n   *     Sets {@link #spacingX}.\r\n   * @param spacingY {Integer?0} The vertical spacing between grid cells.\r\n   *     Sets {@link #spacingY}.\r\n   */\r\n  construct(spacingX, spacingY) {\r\n    super();\r\n\r\n    this.__rowData = [];\r\n    this.__colData = [];\r\n\r\n    if (spacingX) {\r\n      this.setSpacingX(spacingX);\r\n    }\r\n\r\n    if (spacingY) {\r\n      this.setSpacingY(spacingY);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * The horizontal spacing between grid cells.\r\n     */\r\n    spacingX: {\r\n      check: \"Integer\",\r\n      init: 0,\r\n      apply: \"_applyLayoutChange\"\r\n    },\r\n\r\n    /**\r\n     * The vertical spacing between grid cells.\r\n     */\r\n    spacingY: {\r\n      check: \"Integer\",\r\n      init: 0,\r\n      apply: \"_applyLayoutChange\"\r\n    },\r\n\r\n    /**\r\n     * Allow growing of spanning cells' widths beyond the accumulated widths of the columns.\r\n     * The default behavior (init value false) is that the width of the spanning cell is\r\n     * determined by the accumulated width of the columns (plus spacing).\r\n     * Setting this property to true lets the cell width grow as needed to show\r\n     * the widget in the spanning cell, which also enlarges the width of the spanned columns.\r\n     */\r\n    allowGrowSpannedCellWidth: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyLayoutChange\"\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /** @type {Array} 2D array of grid cell data */\r\n    __grid: null,\r\n    __rowData: null,\r\n    __colData: null,\r\n\r\n    __colSpans: null,\r\n    __rowSpans: null,\r\n    __maxRowIndex: null,\r\n    __maxColIndex: null,\r\n\r\n    /** @type {Array} cached row heights */\r\n    __rowHeights: null,\r\n\r\n    /** @type {Array} cached column widths */\r\n    __colWidths: null,\r\n\r\n    // overridden\r\n    verifyLayoutProperty: qx.core.Environment.select(\"qx.debug\", {\r\n      true(item, name, value) {\r\n        var layoutProperties = {\r\n          row: 1,\r\n          column: 1,\r\n          rowSpan: 1,\r\n          colSpan: 1\r\n        };\r\n\r\n        this.assert(\r\n          layoutProperties[name] == 1,\r\n          \"The property '\" + name + \"' is not supported by the Grid layout!\"\r\n        );\r\n\r\n        this.assertInteger(value);\r\n        this.assert(value >= 0, \"Value must be positive\");\r\n      },\r\n\r\n      false: null\r\n    }),\r\n\r\n    /**\r\n     * Rebuild the internal representation of the grid\r\n     */\r\n    __buildGrid() {\r\n      var grid = [];\r\n      var colSpans = [];\r\n      var rowSpans = [];\r\n\r\n      var maxRowIndex = -1;\r\n      var maxColIndex = -1;\r\n\r\n      var children = this._getLayoutChildren();\r\n\r\n      for (var i = 0, l = children.length; i < l; i++) {\r\n        var child = children[i];\r\n        var props = child.getLayoutProperties();\r\n\r\n        var row = props.row;\r\n        var column = props.column;\r\n\r\n        props.colSpan = props.colSpan || 1;\r\n        props.rowSpan = props.rowSpan || 1;\r\n\r\n        // validate arguments\r\n        if (row == null || column == null) {\r\n          throw new Error(\r\n            \"The layout properties 'row' and 'column' of the child widget '\" +\r\n              child +\r\n              \"' must be defined!\"\r\n          );\r\n        }\r\n\r\n        if (grid[row] && grid[row][column]) {\r\n          throw new Error(\r\n            \"Cannot add widget '\" +\r\n              child +\r\n              \"'!. \" +\r\n              \"There is already a widget '\" +\r\n              grid[row][column] +\r\n              \"' in this cell (\" +\r\n              row +\r\n              \", \" +\r\n              column +\r\n              \") for '\" +\r\n              this +\r\n              \"'\"\r\n          );\r\n        }\r\n\r\n        for (var x = column; x < column + props.colSpan; x++) {\r\n          for (var y = row; y < row + props.rowSpan; y++) {\r\n            if (grid[y] == undefined) {\r\n              grid[y] = [];\r\n            }\r\n\r\n            grid[y][x] = child;\r\n\r\n            maxColIndex = Math.max(maxColIndex, x);\r\n            maxRowIndex = Math.max(maxRowIndex, y);\r\n          }\r\n        }\r\n\r\n        if (props.rowSpan > 1) {\r\n          rowSpans.push(child);\r\n        }\r\n\r\n        if (props.colSpan > 1) {\r\n          colSpans.push(child);\r\n        }\r\n      }\r\n\r\n      // make sure all columns are defined so that accessing the grid using\r\n      // this.__grid[column][row] will never raise an exception\r\n      for (var y = 0; y <= maxRowIndex; y++) {\r\n        if (grid[y] == undefined) {\r\n          grid[y] = [];\r\n        }\r\n      }\r\n\r\n      this.__grid = grid;\r\n\r\n      this.__colSpans = colSpans;\r\n      this.__rowSpans = rowSpans;\r\n\r\n      this.__maxRowIndex = maxRowIndex;\r\n      this.__maxColIndex = maxColIndex;\r\n\r\n      this.__rowHeights = null;\r\n      this.__colWidths = null;\r\n\r\n      // Clear invalidation marker\r\n      delete this._invalidChildrenCache;\r\n    },\r\n\r\n    /**\r\n     * Stores data for a grid row\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @param key {String} The key under which the data should be stored\r\n     * @param value {var} data to store\r\n     */\r\n    _setRowData(row, key, value) {\r\n      var rowData = this.__rowData[row];\r\n\r\n      if (!rowData) {\r\n        this.__rowData[row] = {};\r\n        this.__rowData[row][key] = value;\r\n      } else {\r\n        rowData[key] = value;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Stores data for a grid column\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @param key {String} The key under which the data should be stored\r\n     * @param value {var} data to store\r\n     */\r\n    _setColumnData(column, key, value) {\r\n      var colData = this.__colData[column];\r\n\r\n      if (!colData) {\r\n        this.__colData[column] = {};\r\n        this.__colData[column][key] = value;\r\n      } else {\r\n        colData[key] = value;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Shortcut to set both horizontal and vertical spacing between grid cells\r\n     * to the same value.\r\n     *\r\n     * @param spacing {Integer} new horizontal and vertical spacing\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support).\r\n     */\r\n    setSpacing(spacing) {\r\n      this.setSpacingY(spacing);\r\n      this.setSpacingX(spacing);\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Set the default cell alignment for a column. This alignment can be\r\n     * overridden on a per cell basis by setting the cell's content widget's\r\n     * <code>alignX</code> and <code>alignY</code> properties.\r\n     *\r\n     * If on a grid cell both row and a column alignment is set, the horizontal\r\n     * alignment is taken from the column and the vertical alignment is taken\r\n     * from the row.\r\n     *\r\n     * @param column {Integer} Column index\r\n     * @param hAlign {String} The horizontal alignment. Valid values are\r\n     *    \"left\", \"center\" and \"right\".\r\n     * @param vAlign {String} The vertical alignment. Valid values are\r\n     *    \"top\", \"middle\", \"bottom\"\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setColumnAlign(column, hAlign, vAlign) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertInteger(column, \"Invalid parameter 'column'\");\r\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\r\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\r\n      }\r\n\r\n      this._setColumnData(column, \"hAlign\", hAlign);\r\n      this._setColumnData(column, \"vAlign\", vAlign);\r\n\r\n      this._applyLayoutChange();\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get a map of the column's alignment.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\r\n     *     containing the vertical and horizontal column alignment.\r\n     */\r\n    getColumnAlign(column) {\r\n      var colData = this.__colData[column] || {};\r\n\r\n      return {\r\n        vAlign: colData.vAlign || \"top\",\r\n        hAlign: colData.hAlign || \"left\"\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Set the default cell alignment for a row. This alignment can be\r\n     * overridden on a per cell basis by setting the cell's content widget's\r\n     * <code>alignX</code> and <code>alignY</code> properties.\r\n     *\r\n     * If on a grid cell both row and a column alignment is set, the horizontal\r\n     * alignment is taken from the column and the vertical alignment is taken\r\n     * from the row.\r\n     *\r\n     * @param row {Integer} Row index\r\n     * @param hAlign {String} The horizontal alignment. Valid values are\r\n     *    \"left\", \"center\" and \"right\".\r\n     * @param vAlign {String} The vertical alignment. Valid values are\r\n     *    \"top\", \"middle\", \"bottom\"\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setRowAlign(row, hAlign, vAlign) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertInteger(row, \"Invalid parameter 'row'\");\r\n        this.assertInArray(hAlign, [\"left\", \"center\", \"right\"]);\r\n        this.assertInArray(vAlign, [\"top\", \"middle\", \"bottom\"]);\r\n      }\r\n\r\n      this._setRowData(row, \"hAlign\", hAlign);\r\n      this._setRowData(row, \"vAlign\", vAlign);\r\n\r\n      this._applyLayoutChange();\r\n\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get a map of the row's alignment.\r\n     *\r\n     * @param row {Integer} The Row index\r\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\r\n     *     containing the vertical and horizontal row alignment.\r\n     */\r\n    getRowAlign(row) {\r\n      var rowData = this.__rowData[row] || {};\r\n\r\n      return {\r\n        vAlign: rowData.vAlign || \"top\",\r\n        hAlign: rowData.hAlign || \"left\"\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Get the widget located in the cell. If a the cell is empty or the widget\r\n     * has a {@link qx.ui.core.Widget#visibility} value of <code>exclude</code>,\r\n     * <code>null</code> is returned.\r\n     *\r\n     * @param row {Integer} The cell's row index\r\n     * @param column {Integer} The cell's column index\r\n     * @return {qx.ui.core.Widget|null}The cell's widget. The value may be null.\r\n     */\r\n    getCellWidget(row, column) {\r\n      if (this._invalidChildrenCache) {\r\n        this.__buildGrid();\r\n      }\r\n\r\n      var row = this.__grid[row] || {};\r\n      return row[column] || null;\r\n    },\r\n\r\n    /**\r\n     * Get the number of rows in the grid layout.\r\n     *\r\n     * @return {Integer} The number of rows in the layout\r\n     */\r\n    getRowCount() {\r\n      if (this._invalidChildrenCache) {\r\n        this.__buildGrid();\r\n      }\r\n\r\n      return this.__maxRowIndex + 1;\r\n    },\r\n\r\n    /**\r\n     * Get the number of columns in the grid layout.\r\n     *\r\n     * @return {Integer} The number of columns in the layout\r\n     */\r\n    getColumnCount() {\r\n      if (this._invalidChildrenCache) {\r\n        this.__buildGrid();\r\n      }\r\n\r\n      return this.__maxColIndex + 1;\r\n    },\r\n\r\n    /**\r\n     * Get a map of the cell's alignment. For vertical alignment the row alignment\r\n     * takes precedence over the column alignment. For horizontal alignment it is\r\n     * the over way round. If an alignment is set on the cell widget using\r\n     * {@link qx.ui.core.LayoutItem#setLayoutProperties}, this alignment takes\r\n     * always precedence over row or column alignment.\r\n     *\r\n     * @param row {Integer} The cell's row index\r\n     * @param column {Integer} The cell's column index\r\n     * @return {Map} A map with the keys <code>vAlign</code> and <code>hAlign</code>\r\n     *     containing the vertical and horizontal cell alignment.\r\n     */\r\n    getCellAlign(row, column) {\r\n      var vAlign = \"top\";\r\n      var hAlign = \"left\";\r\n\r\n      var rowData = this.__rowData[row];\r\n      var colData = this.__colData[column];\r\n\r\n      var widget = this.__grid[row][column];\r\n      if (widget) {\r\n        var widgetProps = {\r\n          vAlign: widget.getAlignY(),\r\n          hAlign: widget.getAlignX()\r\n        };\r\n      } else {\r\n        widgetProps = {};\r\n      }\r\n\r\n      // compute vAlign\r\n      // precedence : widget -> row -> column\r\n      if (widgetProps.vAlign) {\r\n        vAlign = widgetProps.vAlign;\r\n      } else if (rowData && rowData.vAlign) {\r\n        vAlign = rowData.vAlign;\r\n      } else if (colData && colData.vAlign) {\r\n        vAlign = colData.vAlign;\r\n      }\r\n\r\n      // compute hAlign\r\n      // precedence : widget -> column -> row\r\n      if (widgetProps.hAlign) {\r\n        hAlign = widgetProps.hAlign;\r\n      } else if (colData && colData.hAlign) {\r\n        hAlign = colData.hAlign;\r\n      } else if (rowData && rowData.hAlign) {\r\n        hAlign = rowData.hAlign;\r\n      }\r\n\r\n      return {\r\n        vAlign: vAlign,\r\n        hAlign: hAlign\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Set the flex value for a grid column.\r\n     * By default the column flex value is <code>0</code>.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @param flex {Integer} The column's flex value\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setColumnFlex(column, flex) {\r\n      this._setColumnData(column, \"flex\", flex);\r\n      this._applyLayoutChange();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the flex value of a grid column.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @return {Integer} The column's flex value\r\n     */\r\n    getColumnFlex(column) {\r\n      var colData = this.__colData[column] || {};\r\n      return colData.flex !== undefined ? colData.flex : 0;\r\n    },\r\n\r\n    /**\r\n     * Set the flex value for a grid row.\r\n     * By default the row flex value is <code>0</code>.\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @param flex {Integer} The row's flex value\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setRowFlex(row, flex) {\r\n      this._setRowData(row, \"flex\", flex);\r\n      this._applyLayoutChange();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the flex value of a grid row.\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @return {Integer} The row's flex value\r\n     */\r\n    getRowFlex(row) {\r\n      var rowData = this.__rowData[row] || {};\r\n      var rowFlex = rowData.flex !== undefined ? rowData.flex : 0;\r\n      return rowFlex;\r\n    },\r\n\r\n    /**\r\n     * Set the maximum width of a grid column.\r\n     * The default value is <code>Infinity</code>.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @param maxWidth {Integer} The column's maximum width\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setColumnMaxWidth(column, maxWidth) {\r\n      this._setColumnData(column, \"maxWidth\", maxWidth);\r\n      this._applyLayoutChange();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the maximum width of a grid column.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @return {Integer} The column's maximum width\r\n     */\r\n    getColumnMaxWidth(column) {\r\n      var colData = this.__colData[column] || {};\r\n      return colData.maxWidth !== undefined ? colData.maxWidth : Infinity;\r\n    },\r\n\r\n    /**\r\n     * Set the preferred width of a grid column.\r\n     * The default value is <code>Infinity</code>.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @param width {Integer} The column's width\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setColumnWidth(column, width) {\r\n      this._setColumnData(column, \"width\", width);\r\n      this._applyLayoutChange();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the preferred width of a grid column.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @return {Integer} The column's width\r\n     */\r\n    getColumnWidth(column) {\r\n      var colData = this.__colData[column] || {};\r\n      return colData.width !== undefined ? colData.width : null;\r\n    },\r\n\r\n    /**\r\n     * Set the minimum width of a grid column.\r\n     * The default value is <code>0</code>.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @param minWidth {Integer} The column's minimum width\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setColumnMinWidth(column, minWidth) {\r\n      this._setColumnData(column, \"minWidth\", minWidth);\r\n      this._applyLayoutChange();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the minimum width of a grid column.\r\n     *\r\n     * @param column {Integer} The column index\r\n     * @return {Integer} The column's minimum width\r\n     */\r\n    getColumnMinWidth(column) {\r\n      var colData = this.__colData[column] || {};\r\n      return colData.minWidth || 0;\r\n    },\r\n\r\n    /**\r\n     * Set the maximum height of a grid row.\r\n     * The default value is <code>Infinity</code>.\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @param maxHeight {Integer} The row's maximum width\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setRowMaxHeight(row, maxHeight) {\r\n      this._setRowData(row, \"maxHeight\", maxHeight);\r\n      this._applyLayoutChange();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the maximum height of a grid row.\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @return {Integer} The row's maximum width\r\n     */\r\n    getRowMaxHeight(row) {\r\n      var rowData = this.__rowData[row] || {};\r\n      return rowData.maxHeight || Infinity;\r\n    },\r\n\r\n    /**\r\n     * Set the preferred height of a grid row.\r\n     * The default value is <code>Infinity</code>.\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @param height {Integer} The row's width\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setRowHeight(row, height) {\r\n      this._setRowData(row, \"height\", height);\r\n      this._applyLayoutChange();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the preferred height of a grid row.\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @return {Integer} The row's width\r\n     */\r\n    getRowHeight(row) {\r\n      var rowData = this.__rowData[row] || {};\r\n      return rowData.height !== undefined ? rowData.height : null;\r\n    },\r\n\r\n    /**\r\n     * Set the minimum height of a grid row.\r\n     * The default value is <code>0</code>.\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @param minHeight {Integer} The row's minimum width\r\n     * @return {qx.ui.layout.Grid} This object (for chaining support)\r\n     */\r\n    setRowMinHeight(row, minHeight) {\r\n      this._setRowData(row, \"minHeight\", minHeight);\r\n      this._applyLayoutChange();\r\n      return this;\r\n    },\r\n\r\n    /**\r\n     * Get the minimum height of a grid row.\r\n     *\r\n     * @param row {Integer} The row index\r\n     * @return {Integer} The row's minimum width\r\n     */\r\n    getRowMinHeight(row) {\r\n      var rowData = this.__rowData[row] || {};\r\n      return rowData.minHeight || 0;\r\n    },\r\n\r\n    /**\r\n     * Computes the widget's size hint including the widget's margins\r\n     *\r\n     * @param widget {qx.ui.core.LayoutItem} The widget to get the size for\r\n     * @return {Map} a size hint map\r\n     */\r\n    _getOuterSize(widget) {\r\n      var hint = widget.getSizeHint();\r\n      var hMargins = widget.getMarginLeft() + widget.getMarginRight();\r\n      var vMargins = widget.getMarginTop() + widget.getMarginBottom();\r\n\r\n      var outerSize = {\r\n        height: hint.height + vMargins,\r\n        width: hint.width + hMargins,\r\n        minHeight: hint.minHeight + vMargins,\r\n        minWidth: hint.minWidth + hMargins,\r\n        maxHeight: hint.maxHeight + vMargins,\r\n        maxWidth: hint.maxWidth + hMargins\r\n      };\r\n\r\n      return outerSize;\r\n    },\r\n\r\n    /**\r\n     * Check whether all row spans fit with their preferred height into the\r\n     * preferred row heights. If there is not enough space, the preferred\r\n     * row sizes are increased. The distribution respects the flex and max\r\n     * values of the rows.\r\n     *\r\n     *  The same is true for the min sizes.\r\n     *\r\n     *  The height array is modified in place.\r\n     *\r\n     * @param rowHeights {Map[]} The current row height array as computed by\r\n     *     {@link #_getRowHeights}.\r\n     */\r\n    _fixHeightsRowSpan(rowHeights) {\r\n      var vSpacing = this.getSpacingY();\r\n\r\n      for (var i = 0, l = this.__rowSpans.length; i < l; i++) {\r\n        var widget = this.__rowSpans[i];\r\n\r\n        var hint = this._getOuterSize(widget);\r\n\r\n        var widgetProps = widget.getLayoutProperties();\r\n        var widgetRow = widgetProps.row;\r\n\r\n        var prefSpanHeight = vSpacing * (widgetProps.rowSpan - 1);\r\n        var minSpanHeight = prefSpanHeight;\r\n\r\n        var rowFlexes = {};\r\n\r\n        for (var j = 0; j < widgetProps.rowSpan; j++) {\r\n          var row = widgetProps.row + j;\r\n          var rowHeight = rowHeights[row];\r\n          var rowFlex = this.getRowFlex(row);\r\n\r\n          if (rowFlex > 0) {\r\n            // compute flex array for the preferred height\r\n            rowFlexes[row] = {\r\n              min: rowHeight.minHeight,\r\n              value: rowHeight.height,\r\n              max: rowHeight.maxHeight,\r\n              flex: rowFlex\r\n            };\r\n          }\r\n\r\n          prefSpanHeight += rowHeight.height;\r\n          minSpanHeight += rowHeight.minHeight;\r\n        }\r\n\r\n        // If there is not enough space for the preferred size\r\n        // increment the preferred row sizes.\r\n        if (prefSpanHeight < hint.height) {\r\n          if (!qx.lang.Object.isEmpty(rowFlexes)) {\r\n            var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\r\n              rowFlexes,\r\n              hint.height,\r\n              prefSpanHeight\r\n            );\r\n\r\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\r\n              var offset = rowIncrements[widgetRow + k]\r\n                ? rowIncrements[widgetRow + k].offset\r\n                : 0;\r\n              rowHeights[widgetRow + k].height += offset;\r\n            }\r\n            // row is too small and we have no flex value set\r\n          } else {\r\n            var totalSpacing = vSpacing * (widgetProps.rowSpan - 1);\r\n            var availableHeight = hint.height - totalSpacing;\r\n\r\n            // get the row height which every child would need to share the\r\n            // available hight equally\r\n            var avgRowHeight = Math.floor(\r\n              availableHeight / widgetProps.rowSpan\r\n            );\r\n\r\n            // get the hight already used and the number of children which do\r\n            // not have at least that avg row height\r\n            var usedHeight = 0;\r\n            var rowsNeedAddition = 0;\r\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\r\n              var currentHeight = rowHeights[widgetRow + k].height;\r\n              usedHeight += currentHeight;\r\n              if (currentHeight < avgRowHeight) {\r\n                rowsNeedAddition++;\r\n              }\r\n            }\r\n\r\n            // the difference of available and used needs to be shared among\r\n            // those not having the min size\r\n            var additionalRowHeight = Math.floor(\r\n              (availableHeight - usedHeight) / rowsNeedAddition\r\n            );\r\n\r\n            // add the extra height to the too small children\r\n            for (var k = 0; k < widgetProps.rowSpan; k++) {\r\n              if (rowHeights[widgetRow + k].height < avgRowHeight) {\r\n                rowHeights[widgetRow + k].height += additionalRowHeight;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // If there is not enough space for the min size\r\n        // increment the min row sizes.\r\n        if (minSpanHeight < hint.minHeight) {\r\n          var rowIncrements = qx.ui.layout.Util.computeFlexOffsets(\r\n            rowFlexes,\r\n            hint.minHeight,\r\n            minSpanHeight\r\n          );\r\n\r\n          for (var j = 0; j < widgetProps.rowSpan; j++) {\r\n            var offset = rowIncrements[widgetRow + j]\r\n              ? rowIncrements[widgetRow + j].offset\r\n              : 0;\r\n            rowHeights[widgetRow + j].minHeight += offset;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Check whether all col spans fit with their preferred width into the\r\n     * preferred column widths. If there is not enough space the preferred\r\n     * column sizes are increased. The distribution respects the flex and max\r\n     * values of the columns.\r\n     *\r\n     *  The same is true for the min sizes.\r\n     *\r\n     *  The width array is modified in place.\r\n     *\r\n     * @param colWidths {Map[]} The current column width array as computed by\r\n     *     {@link #_getColWidths}.\r\n     */\r\n    _fixWidthsColSpan(colWidths) {\r\n      var hSpacing = this.getSpacingX();\r\n      var colSpans = this._getColSpans();\r\n\r\n      for (var i = 0, l = colSpans.length; i < l; i++) {\r\n        var widget = colSpans[i];\r\n\r\n        var hint = this._getOuterSize(widget);\r\n\r\n        var widgetProps = widget.getLayoutProperties();\r\n        var widgetColumn = widgetProps.column;\r\n\r\n        var prefSpanWidth = hSpacing * (widgetProps.colSpan - 1);\r\n        var minSpanWidth = prefSpanWidth;\r\n\r\n        var colFlexes = {};\r\n\r\n        var offset;\r\n\r\n        for (var j = 0; j < widgetProps.colSpan; j++) {\r\n          var col = widgetProps.column + j;\r\n          var colWidth = colWidths[col];\r\n          var colFlex = this.getColumnFlex(col);\r\n\r\n          // compute flex array for the preferred width\r\n          if (colFlex > 0) {\r\n            colFlexes[col] = {\r\n              min: colWidth.minWidth,\r\n              value: colWidth.width,\r\n              max: colWidth.maxWidth,\r\n              flex: colFlex\r\n            };\r\n          }\r\n\r\n          prefSpanWidth += colWidth.width;\r\n          minSpanWidth += colWidth.minWidth;\r\n        }\r\n\r\n        // If there is not enough space for the preferred size\r\n        // increment the preferred column sizes.\r\n        if (prefSpanWidth < hint.width) {\r\n          // Do not adapt column widths to the width\r\n          // of the spanning cell if allowGrowSpannedCellWidth property\r\n          // is set to false\r\n          // See https://github.com/qooxdoo/qooxdoo/issues/9871\r\n          if (\r\n            !this.getAllowGrowSpannedCellWidth() ||\r\n            !qx.lang.Object.isEmpty(colFlexes)\r\n          ) {\r\n            var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\r\n              colFlexes,\r\n              hint.width,\r\n              prefSpanWidth\r\n            );\r\n\r\n            for (var j = 0; j < widgetProps.colSpan; j++) {\r\n              offset = colIncrements[widgetColumn + j]\r\n                ? colIncrements[widgetColumn + j].offset\r\n                : 0;\r\n              colWidths[widgetColumn + j].width += offset;\r\n            }\r\n            // col is too small and we have no flex value set\r\n          } else {\r\n            var totalSpacing = hSpacing * (widgetProps.colSpan - 1);\r\n            var availableWidth = hint.width - totalSpacing;\r\n\r\n            // get the col width which every child would need to share the\r\n            // available width equally\r\n            var avgColWidth = Math.floor(availableWidth / widgetProps.colSpan);\r\n\r\n            // get the width already used and the number of children which do\r\n            // not have at least that avg col width\r\n            var usedWidth = 0;\r\n            var colsNeedAddition = 0;\r\n            for (var k = 0; k < widgetProps.colSpan; k++) {\r\n              var currentWidth = colWidths[widgetColumn + k].width;\r\n              usedWidth += currentWidth;\r\n              if (currentWidth < avgColWidth) {\r\n                colsNeedAddition++;\r\n              }\r\n            }\r\n\r\n            // the difference of available and used needs to be shared among\r\n            // those not having the min size\r\n            var additionalColWidth = Math.floor(\r\n              (availableWidth - usedWidth) / colsNeedAddition\r\n            );\r\n\r\n            // add the extra width to the too small children\r\n            for (var k = 0; k < widgetProps.colSpan; k++) {\r\n              if (colWidths[widgetColumn + k].width < avgColWidth) {\r\n                colWidths[widgetColumn + k].width += additionalColWidth;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // If there is not enough space for the min size\r\n        // increment the min column sizes.\r\n        if (minSpanWidth < hint.minWidth) {\r\n          var colIncrements = qx.ui.layout.Util.computeFlexOffsets(\r\n            colFlexes,\r\n            hint.minWidth,\r\n            minSpanWidth\r\n          );\r\n\r\n          for (var j = 0; j < widgetProps.colSpan; j++) {\r\n            offset = colIncrements[widgetColumn + j]\r\n              ? colIncrements[widgetColumn + j].offset\r\n              : 0;\r\n            colWidths[widgetColumn + j].minWidth += offset;\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Compute the min/pref/max row heights.\r\n     *\r\n     * @return {Map[]} An array containing height information for each row. The\r\n     *     entries have the keys <code>minHeight</code>, <code>maxHeight</code> and\r\n     *     <code>height</code>.\r\n     */\r\n    _getRowHeights() {\r\n      if (this.__rowHeights != null) {\r\n        return this.__rowHeights;\r\n      }\r\n\r\n      var rowHeights = [];\r\n\r\n      var maxRowIndex = this.__maxRowIndex;\r\n      var maxColIndex = this.__maxColIndex;\r\n\r\n      for (var row = 0; row <= maxRowIndex; row++) {\r\n        var minHeight = 0;\r\n        var height = 0;\r\n        var maxHeight = 0;\r\n\r\n        for (var col = 0; col <= maxColIndex; col++) {\r\n          var widget = this.__grid[row][col];\r\n          if (!widget) {\r\n            continue;\r\n          }\r\n\r\n          // ignore rows with row spans at this place\r\n          // these rows will be taken into account later\r\n          var widgetRowSpan = widget.getLayoutProperties().rowSpan || 0;\r\n          if (widgetRowSpan > 1) {\r\n            continue;\r\n          }\r\n\r\n          var cellSize = this._getOuterSize(widget);\r\n\r\n          if (this.getRowFlex(row) > 0) {\r\n            minHeight = Math.max(minHeight, cellSize.minHeight);\r\n          } else {\r\n            minHeight = Math.max(minHeight, cellSize.height);\r\n          }\r\n\r\n          height = Math.max(height, cellSize.height);\r\n        }\r\n\r\n        var minHeight = Math.max(minHeight, this.getRowMinHeight(row));\r\n        var maxHeight = this.getRowMaxHeight(row);\r\n\r\n        if (this.getRowHeight(row) !== null) {\r\n          var height = this.getRowHeight(row);\r\n        } else {\r\n          var height = Math.max(minHeight, Math.min(height, maxHeight));\r\n        }\r\n\r\n        rowHeights[row] = {\r\n          minHeight: minHeight,\r\n          height: height,\r\n          maxHeight: maxHeight\r\n        };\r\n      }\r\n\r\n      if (this.__rowSpans.length > 0) {\r\n        this._fixHeightsRowSpan(rowHeights);\r\n      }\r\n\r\n      this.__rowHeights = rowHeights;\r\n      return rowHeights;\r\n    },\r\n\r\n    /**\r\n     * Compute the min/pref/max column widths.\r\n     *\r\n     * @return {Map[]} An array containing width information for each column. The\r\n     *     entries have the keys <code>minWidth</code>, <code>maxWidth</code> and\r\n     *     <code>width</code>.\r\n     */\r\n    _getColWidths() {\r\n      if (this.__colWidths != null) {\r\n        return this.__colWidths;\r\n      }\r\n\r\n      var colWidths = [];\r\n\r\n      var maxColIndex = this.__maxColIndex;\r\n      var maxRowIndex = this.__maxRowIndex;\r\n\r\n      for (var col = 0; col <= maxColIndex; col++) {\r\n        var width = 0;\r\n        var minWidth = 0;\r\n        var maxWidth = Infinity;\r\n\r\n        for (var row = 0; row <= maxRowIndex; row++) {\r\n          var widget = this.__grid[row][col];\r\n          if (!widget) {\r\n            continue;\r\n          }\r\n\r\n          // ignore columns with col spans at this place\r\n          // these columns will be taken into account later\r\n          var widgetColSpan = widget.getLayoutProperties().colSpan || 0;\r\n          if (widgetColSpan > 1) {\r\n            continue;\r\n          }\r\n\r\n          var cellSize = this._getOuterSize(widget);\r\n\r\n          minWidth = Math.max(minWidth, cellSize.minWidth);\r\n\r\n          width = Math.max(width, cellSize.width);\r\n        }\r\n\r\n        minWidth = Math.max(minWidth, this.getColumnMinWidth(col));\r\n        maxWidth = this.getColumnMaxWidth(col);\r\n\r\n        if (this.getColumnWidth(col) !== null) {\r\n          var width = this.getColumnWidth(col);\r\n        } else {\r\n          var width = Math.max(minWidth, Math.min(width, maxWidth));\r\n        }\r\n\r\n        colWidths[col] = {\r\n          minWidth: minWidth,\r\n          width: width,\r\n          maxWidth: maxWidth\r\n        };\r\n      }\r\n\r\n      if (this._getColSpans().length > 0) {\r\n        this._fixWidthsColSpan(colWidths);\r\n      }\r\n\r\n      this.__colWidths = colWidths;\r\n      return colWidths;\r\n    },\r\n\r\n    /**\r\n     * Computes for each column by how many pixels it must grow or shrink, taking\r\n     * the column flex values and min/max widths into account.\r\n     *\r\n     * @param width {Integer} The grid width\r\n     * @return {Integer[]} Sparse array of offsets to add to each column width. If\r\n     *     an array entry is empty nothing should be added to the column.\r\n     */\r\n    _getColumnFlexOffsets(width) {\r\n      var hint = this.getSizeHint();\r\n      var diff = width - hint.width;\r\n\r\n      if (diff == 0) {\r\n        return {};\r\n      }\r\n\r\n      // collect all flexible children\r\n      var colWidths = this._getColWidths();\r\n      var flexibles = {};\r\n\r\n      for (var i = 0, l = colWidths.length; i < l; i++) {\r\n        var col = colWidths[i];\r\n        var colFlex = this.getColumnFlex(i);\r\n\r\n        if (\r\n          colFlex <= 0 ||\r\n          (col.width == col.maxWidth && diff > 0) ||\r\n          (col.width == col.minWidth && diff < 0)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        flexibles[i] = {\r\n          min: col.minWidth,\r\n          value: col.width,\r\n          max: col.maxWidth,\r\n          flex: colFlex\r\n        };\r\n      }\r\n\r\n      return qx.ui.layout.Util.computeFlexOffsets(flexibles, width, hint.width);\r\n    },\r\n\r\n    /**\r\n     * Computes for each row by how many pixels it must grow or shrink, taking\r\n     * the row flex values and min/max heights into account.\r\n     *\r\n     * @param height {Integer} The grid height\r\n     * @return {Integer[]} Sparse array of offsets to add to each row height. If\r\n     *     an array entry is empty nothing should be added to the row.\r\n     */\r\n    _getRowFlexOffsets(height) {\r\n      var hint = this.getSizeHint();\r\n      var diff = height - hint.height;\r\n\r\n      if (diff == 0) {\r\n        return {};\r\n      }\r\n\r\n      // collect all flexible children\r\n      var rowHeights = this._getRowHeights();\r\n      var flexibles = {};\r\n\r\n      for (var i = 0, l = rowHeights.length; i < l; i++) {\r\n        var row = rowHeights[i];\r\n        var rowFlex = this.getRowFlex(i);\r\n\r\n        if (\r\n          rowFlex <= 0 ||\r\n          (row.height == row.maxHeight && diff > 0) ||\r\n          (row.height == row.minHeight && diff < 0)\r\n        ) {\r\n          continue;\r\n        }\r\n\r\n        flexibles[i] = {\r\n          min: row.minHeight,\r\n          value: row.height,\r\n          max: row.maxHeight,\r\n          flex: rowFlex\r\n        };\r\n      }\r\n\r\n      return qx.ui.layout.Util.computeFlexOffsets(\r\n        flexibles,\r\n        height,\r\n        hint.height\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Returns the internal private __colSpans array in order\r\n     * have a protected getter which can be used other methods\r\n     * to make them overridable\r\n     *\r\n     * @return {Array} the __colSpans array\r\n     */\r\n    _getColSpans() {\r\n      return this.__colSpans;\r\n    },\r\n\r\n    // overridden\r\n    renderLayout(availWidth, availHeight, padding) {\r\n      if (this._invalidChildrenCache) {\r\n        this.__buildGrid();\r\n      }\r\n\r\n      var Util = qx.ui.layout.Util;\r\n      var hSpacing = this.getSpacingX();\r\n      var vSpacing = this.getSpacingY();\r\n\r\n      // calculate column widths\r\n      var prefWidths = this._getColWidths();\r\n      var colStretchOffsets = this._getColumnFlexOffsets(availWidth);\r\n\r\n      var colWidths = [];\r\n\r\n      var maxColIndex = this.__maxColIndex;\r\n      var maxRowIndex = this.__maxRowIndex;\r\n\r\n      var offset;\r\n\r\n      for (var col = 0; col <= maxColIndex; col++) {\r\n        offset = colStretchOffsets[col] ? colStretchOffsets[col].offset : 0;\r\n        colWidths[col] = prefWidths[col].width + offset;\r\n      }\r\n\r\n      // calculate row heights\r\n      var prefHeights = this._getRowHeights();\r\n      var rowStretchOffsets = this._getRowFlexOffsets(availHeight);\r\n\r\n      var rowHeights = [];\r\n\r\n      for (var row = 0; row <= maxRowIndex; row++) {\r\n        offset = rowStretchOffsets[row] ? rowStretchOffsets[row].offset : 0;\r\n        rowHeights[row] = prefHeights[row].height + offset;\r\n      }\r\n\r\n      // do the layout\r\n      var left = 0;\r\n      for (var col = 0; col <= maxColIndex; col++) {\r\n        var top = 0;\r\n\r\n        for (var row = 0; row <= maxRowIndex; row++) {\r\n          var widget = this.__grid[row][col];\r\n\r\n          // ignore empty cells\r\n          if (!widget) {\r\n            top += rowHeights[row] + vSpacing;\r\n            continue;\r\n          }\r\n\r\n          var widgetProps = widget.getLayoutProperties();\r\n\r\n          // ignore cells, which have cell spanning but are not the origin\r\n          // of the widget\r\n          if (widgetProps.row !== row || widgetProps.column !== col) {\r\n            top += rowHeights[row] + vSpacing;\r\n            continue;\r\n          }\r\n\r\n          // compute sizes width including cell spanning\r\n          var spanWidth = hSpacing * (widgetProps.colSpan - 1);\r\n          for (var i = 0; i < widgetProps.colSpan; i++) {\r\n            spanWidth += colWidths[col + i];\r\n          }\r\n\r\n          var spanHeight = vSpacing * (widgetProps.rowSpan - 1);\r\n          for (var i = 0; i < widgetProps.rowSpan; i++) {\r\n            spanHeight += rowHeights[row + i];\r\n          }\r\n\r\n          var cellHint = widget.getSizeHint();\r\n          var marginTop = widget.getMarginTop();\r\n          var marginLeft = widget.getMarginLeft();\r\n          var marginBottom = widget.getMarginBottom();\r\n          var marginRight = widget.getMarginRight();\r\n\r\n          var cellWidth = Math.max(\r\n            cellHint.minWidth,\r\n            Math.min(spanWidth - marginLeft - marginRight, cellHint.maxWidth)\r\n          );\r\n\r\n          var cellHeight = Math.max(\r\n            cellHint.minHeight,\r\n            Math.min(spanHeight - marginTop - marginBottom, cellHint.maxHeight)\r\n          );\r\n\r\n          var cellAlign = this.getCellAlign(row, col);\r\n          var cellLeft =\r\n            left +\r\n            Util.computeHorizontalAlignOffset(\r\n              cellAlign.hAlign,\r\n              cellWidth,\r\n              spanWidth,\r\n              marginLeft,\r\n              marginRight\r\n            );\r\n\r\n          var cellTop =\r\n            top +\r\n            Util.computeVerticalAlignOffset(\r\n              cellAlign.vAlign,\r\n              cellHeight,\r\n              spanHeight,\r\n              marginTop,\r\n              marginBottom\r\n            );\r\n\r\n          widget.renderLayout(\r\n            cellLeft + padding.left,\r\n            cellTop + padding.top,\r\n            cellWidth,\r\n            cellHeight\r\n          );\r\n\r\n          top += rowHeights[row] + vSpacing;\r\n        }\r\n\r\n        left += colWidths[col] + hSpacing;\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    invalidateLayoutCache() {\r\n      super.invalidateLayoutCache();\r\n\r\n      this.__colWidths = null;\r\n      this.__rowHeights = null;\r\n    },\r\n\r\n    // overridden\r\n    _computeSizeHint() {\r\n      if (this._invalidChildrenCache) {\r\n        this.__buildGrid();\r\n      }\r\n\r\n      // calculate col widths\r\n      var colWidths = this._getColWidths();\r\n\r\n      var minWidth = 0,\r\n        width = 0;\r\n\r\n      for (var i = 0, l = colWidths.length; i < l; i++) {\r\n        var col = colWidths[i];\r\n        if (this.getColumnFlex(i) > 0) {\r\n          minWidth += col.minWidth;\r\n        } else {\r\n          minWidth += col.width;\r\n        }\r\n\r\n        width += col.width;\r\n      }\r\n\r\n      // calculate row heights\r\n      var rowHeights = this._getRowHeights();\r\n\r\n      var minHeight = 0,\r\n        height = 0;\r\n      for (var i = 0, l = rowHeights.length; i < l; i++) {\r\n        var row = rowHeights[i];\r\n\r\n        if (this.getRowFlex(i) > 0) {\r\n          minHeight += row.minHeight;\r\n        } else {\r\n          minHeight += row.height;\r\n        }\r\n\r\n        height += row.height;\r\n      }\r\n\r\n      var spacingX = this.getSpacingX() * (colWidths.length - 1);\r\n      var spacingY = this.getSpacingY() * (rowHeights.length - 1);\r\n\r\n      var hint = {\r\n        minWidth: minWidth + spacingX,\r\n        width: width + spacingX,\r\n        minHeight: minHeight + spacingY,\r\n        height: height + spacingY\r\n      };\r\n\r\n      return hint;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCT\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this.__grid =\r\n      this.__rowData =\r\n      this.__colData =\r\n      this.__colSpans =\r\n      this.__rowSpans =\r\n      this.__colWidths =\r\n      this.__rowHeights =\r\n        null;\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,MAAM,CAACC,QAAQ;IAE7B;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,QAAQ,EAAEC,QAAQ,EAAE;MAC5BZ,EAAA,CAAAO,EAAA,CAAAC,MAAA,CAAAC,QAAA,CAAAI,WAAA,CAAAC,IAAA;MAEA,IAAI,CAACC,SAAS,GAAG,EAAE;MACnB,IAAI,CAACC,SAAS,GAAG,EAAE;MAEnB,IAAIL,QAAQ,EAAE;QACZ,IAAI,CAACM,WAAW,CAACN,QAAQ,CAAC;MAC5B;MAEA,IAAIC,QAAQ,EAAE;QACZ,IAAI,CAACM,WAAW,CAACN,QAAQ,CAAC;MAC5B;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEO,UAAU,EAAE;MACV;AACJ;AACA;MACIR,QAAQ,EAAE;QACRS,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;MACIV,QAAQ,EAAE;QACRQ,KAAK,EAAE,SAAS;QAChBC,IAAI,EAAE,CAAC;QACPC,KAAK,EAAE;MACT,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AA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"
}