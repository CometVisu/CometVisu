{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "activeWindow",
    "check",
    "apply",
    "event",
    "init",
    "nullable",
    "events",
    "windowAdded",
    "windowRemoved",
    "members",
    "__windows",
    "__manager",
    "getWindowManager",
    "setWindowManager",
    "ui",
    "window",
    "Window",
    "DEFAULT_MANAGER_CLASS",
    "supportsMaximize",
    "manager",
    "setDesktop",
    "_onChangeActive",
    "e",
    "getData",
    "setActiveWindow",
    "getTarget",
    "getActiveWindow",
    "_applyActiveWindow",
    "value",
    "old",
    "changeActiveWindow",
    "updateStack",
    "_onChangeModal",
    "_onChangeVisibility",
    "_afterAddChild",
    "win",
    "Class",
    "isDefined",
    "_addWindow",
    "getWindows",
    "includes",
    "push",
    "fireDataEvent",
    "addListener",
    "getActive",
    "_afterRemoveChild",
    "_removeWindow",
    "lang",
    "Array",
    "remove",
    "removeListener",
    "destruct",
    "_disposeArray",
    "_disposeObjects",
    "MDesktop"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/window/MDesktop.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This mixin implements the key methods of the {@link qx.ui.window.IDesktop}.\r\n *\r\n * @ignore(qx.ui.window.Window)\r\n * @ignore(qx.ui.window.Window.*)\r\n */\r\nqx.Mixin.define(\"qx.ui.window.MDesktop\", {\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /**\r\n     * The currently active window\r\n     */\r\n    activeWindow: {\r\n      check: \"qx.ui.window.Window\",\r\n      apply: \"_applyActiveWindow\",\r\n      event: \"changeActiveWindow\",\r\n      init: null,\r\n      nullable: true\r\n    }\r\n  },\r\n\r\n  events: {\r\n    /**\r\n     * Fired when a window was added.\r\n     */\r\n    windowAdded: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired when a window was removed.\r\n     */\r\n    windowRemoved: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __windows: null,\r\n    __manager: null,\r\n\r\n    /**\r\n     * Get the desktop's window manager. Each desktop must have a window manager.\r\n     * If none is configured the default window manager {@link qx.ui.window.Window#DEFAULT_MANAGER_CLASS}\r\n     * is used.\r\n     *\r\n     * @return {qx.ui.window.IWindowManager} The desktop's window manager\r\n     */\r\n    getWindowManager() {\r\n      if (!this.__manager) {\r\n        this.setWindowManager(new qx.ui.window.Window.DEFAULT_MANAGER_CLASS());\r\n      }\r\n      return this.__manager;\r\n    },\r\n\r\n    /**\r\n     * Whether the configured layout supports a maximized window\r\n     * e.g. is a Canvas.\r\n     *\r\n     * @return {Boolean} Whether the layout supports maximized windows\r\n     */\r\n    supportsMaximize() {\r\n      return true;\r\n    },\r\n\r\n    /**\r\n     * Sets the desktop's window manager\r\n     *\r\n     * @param manager {qx.ui.window.IWindowManager} The window manager\r\n     */\r\n    setWindowManager(manager) {\r\n      if (this.__manager) {\r\n        this.__manager.setDesktop(null);\r\n      }\r\n\r\n      manager.setDesktop(this);\r\n      this.__manager = manager;\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called if one of the managed windows changes its active\r\n     * state.\r\n     *\r\n     * @param e {qx.event.type.Event} the event object.\r\n     */\r\n    _onChangeActive(e) {\r\n      if (e.getData()) {\r\n        this.setActiveWindow(e.getTarget());\r\n      } else if (this.getActiveWindow() == e.getTarget()) {\r\n        this.setActiveWindow(null);\r\n      }\r\n    },\r\n\r\n    // property apply\r\n    _applyActiveWindow(value, old) {\r\n      this.getWindowManager().changeActiveWindow(value, old);\r\n      this.getWindowManager().updateStack();\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called if one of the managed windows changes its modality\r\n     *\r\n     * @param e {qx.event.type.Event} the event object.\r\n     */\r\n    _onChangeModal(e) {\r\n      this.getWindowManager().updateStack();\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called if one of the managed windows changes its visibility\r\n     * state.\r\n     */\r\n    _onChangeVisibility() {\r\n      this.getWindowManager().updateStack();\r\n    },\r\n\r\n    /**\r\n     * Overrides the method {@link qx.ui.core.Widget#_afterAddChild}\r\n     *\r\n     * @param win {qx.ui.core.Widget} added widget\r\n     */\r\n    _afterAddChild(win) {\r\n      if (\r\n        qx.Class.isDefined(\"qx.ui.window.Window\") &&\r\n        win instanceof qx.ui.window.Window\r\n      ) {\r\n        this._addWindow(win);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the case, when a window is added to the desktop.\r\n     *\r\n     * @param win {qx.ui.window.Window} Window, which has been added\r\n     */\r\n    _addWindow(win) {\r\n      if (!this.getWindows().includes(win)) {\r\n        this.getWindows().push(win);\r\n\r\n        this.fireDataEvent(\"windowAdded\", win);\r\n\r\n        win.addListener(\"changeActive\", this._onChangeActive, this);\r\n        win.addListener(\"changeModal\", this._onChangeModal, this);\r\n        win.addListener(\"changeVisibility\", this._onChangeVisibility, this);\r\n      }\r\n\r\n      if (win.getActive()) {\r\n        this.setActiveWindow(win);\r\n      }\r\n\r\n      this.getWindowManager().updateStack();\r\n    },\r\n\r\n    /**\r\n     * Overrides the method {@link qx.ui.core.Widget#_afterRemoveChild}\r\n     *\r\n     * @param win {qx.ui.core.Widget} removed widget\r\n     */\r\n    _afterRemoveChild(win) {\r\n      if (\r\n        qx.Class.isDefined(\"qx.ui.window.Window\") &&\r\n        win instanceof qx.ui.window.Window\r\n      ) {\r\n        this._removeWindow(win);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handles the case, when a window is removed from the desktop.\r\n     *\r\n     * @param win {qx.ui.window.Window} Window, which has been removed\r\n     */\r\n    _removeWindow(win) {\r\n      if (this.getWindows().includes(win)) {\r\n        qx.lang.Array.remove(this.getWindows(), win);\r\n\r\n        this.fireDataEvent(\"windowRemoved\", win);\r\n\r\n        win.removeListener(\"changeActive\", this._onChangeActive, this);\r\n        win.removeListener(\"changeModal\", this._onChangeModal, this);\r\n        win.removeListener(\"changeVisibility\", this._onChangeVisibility, this);\r\n\r\n        this.getWindowManager().updateStack();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get a list of all windows added to the desktop (including hidden windows)\r\n     *\r\n     * @return {qx.ui.window.Window[]} Array of managed windows\r\n     */\r\n    getWindows() {\r\n      if (!this.__windows) {\r\n        this.__windows = [];\r\n      }\r\n      return this.__windows;\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this._disposeArray(\"__windows\");\r\n    this._disposeObjects(\"__manager\");\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,uBAAuB,EAAE;IACvC;AACF;AACA;AACA;AACA;;IAEEC,UAAU,EAAE;MACV;AACJ;AACA;MACIC,YAAY,EAAE;QACZC,KAAK,EAAE,qBAAqB;QAC5BC,KAAK,EAAE,oBAAoB;QAC3BC,KAAK,EAAE,oBAAoB;QAC3BC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE;MACZ;IACF,CAAC;IAEDC,MAAM,EAAE;MACN;AACJ;AACA;MACIC,WAAW,EAAE,oBAAoB;MAEjC;AACJ;AACA;MACIC,aAAa,EAAE;IACjB,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACPC,SAAS,EAAE,IAAI;MACfC,SAAS,EAAE,IAAI;MAEf;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,gBAAgB,WAAAA,iBAAA,EAAG;QACjB,IAAI,CAAC,IAAI,CAACD,SAAS,EAAE;UACnB,IAAI,CAACE,gBAAgB,CAAC,IAAIpB,EAAE,CAACqB,EAAE,CAACC,MAAM,CAACC,MAAM,CAACC,qBAAqB,CAAC,CAAC,CAAC;QACxE;QACA,OAAO,IAAI,CAACN,SAAS;MACvB,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIO,gBAAgB,WAAAA,iBAAA,EAAG;QACjB,OAAO,IAAI;MACb,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIL,gBAAgB,WAAAA,iBAACM,OAAO,EAAE;QACxB,IAAI,IAAI,CAACR,SAAS,EAAE;UAClB,IAAI,CAACA,SAAS,CAACS,UAAU,CAAC,IAAI,CAAC;QACjC;QAEAD,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;QACxB,IAAI,CAACT,SAAS,GAAGQ,OAAO;MAC1B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIE,eAAe,WAAAA,gBAACC,CAAC,EAAE;QACjB,IAAIA,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE;UACf,IAAI,CAACC,eAAe,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC,CAAC;QACrC,CAAC,MAAM,IAAI,IAAI,CAACC,eAAe,CAAC,CAAC,IAAIJ,CAAC,CAACG,SAAS,CAAC,CAAC,EAAE;UAClD,IAAI,CAACD,eAAe,CAAC,IAAI,CAAC;QAC5B;MACF,CAAC;MAED;MACAG,kBAAkB,WAAAA,mBAACC,KAAK,EAAEC,GAAG,EAAE;QAC7B,IAAI,CAACjB,gBAAgB,CAAC,CAAC,CAACkB,kBAAkB,CAACF,KAAK,EAAEC,GAAG,CAAC;QACtD,IAAI,CAACjB,gBAAgB,CAAC,CAAC,CAACmB,WAAW,CAAC,CAAC;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,cAAc,WAAAA,eAACV,CAAC,EAAE;QAChB,IAAI,CAACV,gBAAgB,CAAC,CAAC,CAACmB,WAAW,CAAC,CAAC;MACvC,CAAC;MAED;AACJ;AACA;AACA;MACIE,mBAAmB,WAAAA,oBAAA,EAAG;QACpB,IAAI,CAACrB,gBAAgB,CAAC,CAAC,CAACmB,WAAW,CAAC,CAAC;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIG,cAAc,WAAAA,eAACC,GAAG,EAAE;QAClB,IACE1C,EAAE,CAAC2C,KAAK,CAACC,SAAS,CAAC,qBAAqB,CAAC,IACzCF,GAAG,YAAY1C,EAAE,CAACqB,EAAE,CAACC,MAAM,CAACC,MAAM,EAClC;UACA,IAAI,CAACsB,UAAU,CAACH,GAAG,CAAC;QACtB;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIG,UAAU,WAAAA,WAACH,GAAG,EAAE;QACd,IAAI,CAAC,IAAI,CAACI,UAAU,CAAC,CAAC,CAACC,QAAQ,CAACL,GAAG,CAAC,EAAE;UACpC,IAAI,CAACI,UAAU,CAAC,CAAC,CAACE,IAAI,CAACN,GAAG,CAAC;UAE3B,IAAI,CAACO,aAAa,CAAC,aAAa,EAAEP,GAAG,CAAC;UAEtCA,GAAG,CAACQ,WAAW,CAAC,cAAc,EAAE,IAAI,CAACtB,eAAe,EAAE,IAAI,CAAC;UAC3Dc,GAAG,CAACQ,WAAW,CAAC,aAAa,EAAE,IAAI,CAACX,cAAc,EAAE,IAAI,CAAC;UACzDG,GAAG,CAACQ,WAAW,CAAC,kBAAkB,EAAE,IAAI,CAACV,mBAAmB,EAAE,IAAI,CAAC;QACrE;QAEA,IAAIE,GAAG,CAACS,SAAS,CAAC,CAAC,EAAE;UACnB,IAAI,CAACpB,eAAe,CAACW,GAAG,CAAC;QAC3B;QAEA,IAAI,CAACvB,gBAAgB,CAAC,CAAC,CAACmB,WAAW,CAAC,CAAC;MACvC,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIc,iBAAiB,WAAAA,kBAACV,GAAG,EAAE;QACrB,IACE1C,EAAE,CAAC2C,KAAK,CAACC,SAAS,CAAC,qBAAqB,CAAC,IACzCF,GAAG,YAAY1C,EAAE,CAACqB,EAAE,CAACC,MAAM,CAACC,MAAM,EAClC;UACA,IAAI,CAAC8B,aAAa,CAACX,GAAG,CAAC;QACzB;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIW,aAAa,WAAAA,cAACX,GAAG,EAAE;QACjB,IAAI,IAAI,CAACI,UAAU,CAAC,CAAC,CAACC,QAAQ,CAACL,GAAG,CAAC,EAAE;UACnC1C,EAAE,CAACsD,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,IAAI,CAACV,UAAU,CAAC,CAAC,EAAEJ,GAAG,CAAC;UAE5C,IAAI,CAACO,aAAa,CAAC,eAAe,EAAEP,GAAG,CAAC;UAExCA,GAAG,CAACe,cAAc,CAAC,cAAc,EAAE,IAAI,CAAC7B,eAAe,EAAE,IAAI,CAAC;UAC9Dc,GAAG,CAACe,cAAc,CAAC,aAAa,EAAE,IAAI,CAAClB,cAAc,EAAE,IAAI,CAAC;UAC5DG,GAAG,CAACe,cAAc,CAAC,kBAAkB,EAAE,IAAI,CAACjB,mBAAmB,EAAE,IAAI,CAAC;UAEtE,IAAI,CAACrB,gBAAgB,CAAC,CAAC,CAACmB,WAAW,CAAC,CAAC;QACvC;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIQ,UAAU,WAAAA,WAAA,EAAG;QACX,IAAI,CAAC,IAAI,CAAC7B,SAAS,EAAE;UACnB,IAAI,CAACA,SAAS,GAAG,EAAE;QACrB;QACA,OAAO,IAAI,CAACA,SAAS;MACvB;IACF,CAAC;IAED;AACF;AACA;AACA;AACA;IAEEyC,QAAQ,WAAAA,SAAA,EAAG;MACT,IAAI,CAACC,aAAa,CAAC,WAAW,CAAC;MAC/B,IAAI,CAACC,eAAe,CAAC,WAAW,CAAC;IACnC;EACF,CAAC,CAAC;EA1OF5D,EAAE,CAACqB,EAAE,CAACC,MAAM,CAACuC,QAAQ,CAAC1D,aAAa,GAAGA,aAAa;AAAC"
}