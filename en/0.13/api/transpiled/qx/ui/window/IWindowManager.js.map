{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "setDesktop",
    "desktop",
    "assertInterface",
    "ui",
    "window",
    "IDesktop",
    "changeActiveWindow",
    "active",
    "oldActive",
    "updateStack",
    "bringToFront",
    "win",
    "assertInstance",
    "Window",
    "sendToBack",
    "IWindowManager"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/window/IWindowManager.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Required interface for all window manager.\r\n *\r\n * Window manager handle the z-order and modality blocking of windows managed\r\n * by the connected desktop {@link qx.ui.window.IDesktop}.\r\n */\r\nqx.Interface.define(\"qx.ui.window.IWindowManager\", {\r\n  members: {\r\n    /**\r\n     * Connect the window manager to the window desktop\r\n     *\r\n     * @param desktop {qx.ui.window.IDesktop|null} The connected desktop or null\r\n     */\r\n    setDesktop(desktop) {\r\n      if (desktop !== null) {\r\n        this.assertInterface(desktop, qx.ui.window.IDesktop);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Inform the window manager about a new active window\r\n     *\r\n     * @param active {qx.ui.window.Window} new active window\r\n     * @param oldActive {qx.ui.window.Window} old active window\r\n     */\r\n    changeActiveWindow(active, oldActive) {},\r\n\r\n    /**\r\n     * Update the window order and modality blocker\r\n     */\r\n    updateStack() {},\r\n\r\n    /**\r\n     * Ask the manager to bring a window to the front.\r\n     *\r\n     * @param win {qx.ui.window.Window} window to bring to front\r\n     */\r\n    bringToFront(win) {\r\n      this.assertInstance(win, qx.ui.window.Window);\r\n    },\r\n\r\n    /**\r\n     * Ask the manager to send a window to the back.\r\n     *\r\n     * @param win {qx.ui.window.Window} window to sent to back\r\n     */\r\n    sendToBack(win) {\r\n      this.assertInstance(win, qx.ui.window.Window);\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,6BAA6B,EAAE;IACjDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;MACIC,UAAU,WAAAA,WAACC,OAAO,EAAE;QAClB,IAAIA,OAAO,KAAK,IAAI,EAAE;UACpB,IAAI,CAACC,eAAe,CAACD,OAAO,EAAER,EAAE,CAACU,EAAE,CAACC,MAAM,CAACC,QAAQ,CAAC;QACtD;MACF,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;MACIC,kBAAkB,WAAAA,mBAACC,MAAM,EAAEC,SAAS,EAAE,CAAC,CAAC;MAExC;AACJ;AACA;MACIC,WAAW,WAAAA,YAAA,EAAG,CAAC,CAAC;MAEhB;AACJ;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAACC,GAAG,EAAE;QAChB,IAAI,CAACC,cAAc,CAACD,GAAG,EAAElB,EAAE,CAACU,EAAE,CAACC,MAAM,CAACS,MAAM,CAAC;MAC/C,CAAC;MAED;AACJ;AACA;AACA;AACA;MACIC,UAAU,WAAAA,WAACH,GAAG,EAAE;QACd,IAAI,CAACC,cAAc,CAACD,GAAG,EAAElB,EAAE,CAACU,EAAE,CAACC,MAAM,CAACS,MAAM,CAAC;MAC/C;IACF;EACF,CAAC,CAAC;EApEFpB,EAAE,CAACU,EAAE,CAACC,MAAM,CAACW,cAAc,CAACnB,aAAa,GAAGA,aAAa;AAAC"
}