{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "configureItem",
    "item",
    "configureGroupItem",
    "createItem",
    "createGroupItem",
    "bindItem",
    "controller",
    "id",
    "bindGroupItem",
    "filter",
    "data",
    "sorter",
    "a",
    "b",
    "group",
    "onPool",
    "ui",
    "list",
    "core",
    "IListDelegate"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/list/core/IListDelegate.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Objects which are used as delegates for the <code>qx.ui.list.List</code> may\n * implement any of the methods described in this interface. The delegate does\n * not need to implement all the methods of this interface. If a method is not\n * implemented the <code>qx.ui.list.List</code> provides a default\n * implementation.\n *\n * Note: This interface is meant to document the delegate but should not be\n * listed in the <code>implement</code> key of a class unless all methods are\n * actually implemented.\n */\nqx.Interface.define(\"qx.ui.list.core.IListDelegate\", {\n  members: {\n    /**\n     * Gives the user the opportunity to set individual styles and properties\n     * on the item widget cells created by the controller.\n     *\n     * @param item {qx.ui.core.Widget} Item to modify.\n     */\n    configureItem(item) {},\n\n    /**\n     * Gives the user the opportunity to set individual styles and properties\n     * on the group widget cells created by the controller.\n     *\n     * @param item {qx.ui.core.Widget} Group to modify.\n     */\n    configureGroupItem(item) {},\n\n    /**\n     * Creates an item cell which will be used for rendering. Be sure to\n     * implement the {@link #bindItem} function as well to get the needed\n     * properties bound.\n     *\n     * @return {qx.ui.core.Widget} A new created item cell.\n     */\n    createItem() {},\n\n    /**\n     * Creates a group cell which will be used for rendering. Be sure to\n     * implement the {@link #bindGroupItem} function as well to get the needed\n     * properties bound.\n     *\n     * @return {qx.ui.core.Widget} A new created item cell.\n     */\n    createGroupItem() {},\n\n    /**\n     * Sets up the binding for the given item and index.\n     *\n     * For every property you want to bind, use\n     * {@link MWidgetController#bindProperty} like this:\n     * <code>\n     * controller.bindProperty(\"path.in.the.model\", \"label\", options, item, id);\n     * </code>\n     *\n     * @param controller {qx.ui.list.core.MWidgetController} The currently used controller.\n     * @param item {qx.ui.core.Widget} The created and used item.\n     * @param id {Integer} The id for the binding.\n     */\n    bindItem(controller, item, id) {},\n\n    /**\n     * Sets up the binding for the given group item and index.\n     *\n     * For every property you want to bind, use\n     * {@link MWidgetController#bindProperty} like this:\n     * <code>\n     * controller.bindProperty(null, \"value\", options, item, id);\n     * </code>\n     *\n     * @param controller {qx.ui.list.core.MWidgetController} The currently used controller.\n     * @param item {qx.ui.core.Widget} The created and used group item.\n     * @param id {Integer} The id for the binding.\n     */\n    bindGroupItem(controller, item, id) {},\n\n    /**\n     * Gives the user the opportunity to filter the model. The filter\n     * method has to return <code>true</code> if the given data should be\n     * shown and <code>false</code> if the given data should be ignored.\n     *\n     * @param data {var} The data to be checked.\n     * @return {Boolean} <code>true</code> if the data passes the filter,\n     *   <code>false</code> otherwise.\n     */\n    filter(data) {},\n\n    /**\n     * Gives the user the opportunity to sort the model. The sorting method\n     * should return a negative value if a < b, zero if a = b, or a positive\n     * value if a > b.\n     *\n     * @param a {var} value to compare.\n     * @param b {var} value to compare.\n     * @return {Integer} should return a negative value if a < b, zero\n     *   if a = b, or a positive value if a > b.\n     */\n    sorter(a, b) {},\n\n    /**\n     * Gives the user the opportunity to group the model. The group method\n     * should return unique identifier for the passed data.\n     *\n     * Note: When you returning <code>null</code> the passed data will added\n     * to the default group, which is <code>???</code> from the type\n     * <code>String</code>. But keep in mind that you can only use the default\n     * group feature when each other group identifier is also a <code>String</code>.\n     * Otherwise an exception occurs, because you can't mix <code>Object</code>\n     * and <code>String</code> group identifiers.\n     *\n     * @param data {var} The data to be checked.\n     * @return {String|Object|null} The group identifier for the data.\n     */\n    group(data) {},\n\n    /**\n     * Gives the user the opportunity to reset properties or states.\n     *\n     * @param item {qx.ui.core.Widget} Item to modify.\n     */\n    onPool(item) {}\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,SAAH,CAAaC,MAAb,CAAoB,+BAApB,EAAqD;IACnDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,aAPO,yBAOOC,IAPP,EAOa,CAAE,CAPf;;MASP;AACJ;AACA;AACA;AACA;AACA;MACIC,kBAfO,8BAeYD,IAfZ,EAekB,CAAE,CAfpB;;MAiBP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIE,UAxBO,wBAwBM,CAAE,CAxBR;;MA0BP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,eAjCO,6BAiCW,CAAE,CAjCb;;MAmCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAhDO,oBAgDEC,UAhDF,EAgDcL,IAhDd,EAgDoBM,EAhDpB,EAgDwB,CAAE,CAhD1B;;MAkDP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aA/DO,yBA+DOF,UA/DP,EA+DmBL,IA/DnB,EA+DyBM,EA/DzB,EA+D6B,CAAE,CA/D/B;;MAiEP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,MA1EO,kBA0EAC,IA1EA,EA0EM,CAAE,CA1ER;;MA4EP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,MAtFO,kBAsFAC,CAtFA,EAsFGC,CAtFH,EAsFM,CAAE,CAtFR;;MAwFP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,KAtGO,iBAsGDJ,IAtGC,EAsGK,CAAE,CAtGP;;MAwGP;AACJ;AACA;AACA;AACA;MACIK,MA7GO,kBA6GAd,IA7GA,EA6GM,CAAE;IA7GR;EAD0C,CAArD;EA/BAR,EAAE,CAACuB,EAAH,CAAMC,IAAN,CAAWC,IAAX,CAAgBC,aAAhB,CAA8BvB,aAA9B,GAA8CA,aAA9C"
}