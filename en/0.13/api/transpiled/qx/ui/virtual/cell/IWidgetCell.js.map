{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "getCellWidget",
    "data",
    "states",
    "pool",
    "widget",
    "updateStates",
    "updateData",
    "ui",
    "virtual",
    "cell",
    "IWidgetCell"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/cell/IWidgetCell.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Jonathan Wei√ü (jonathan_rass)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A widget cell renderer manages a pool of widgets to render cells in a\r\n * {@link qx.ui.virtual.layer.WidgetCell} layer.\r\n */\r\nqx.Interface.define(\"qx.ui.virtual.cell.IWidgetCell\", {\r\n  members: {\r\n    /**\r\n     * Get a widget instance to render the cell\r\n     *\r\n     * @param data {var} Data needed for the cell to render.\r\n     * @param states {Map} The states set on the cell (e.g. <i>selected</i>,\r\n     * <i>focused</i>, <i>editable</i>).\r\n     *\r\n     * @return {qx.ui.core.LayoutItem} The cell widget\r\n     */\r\n    getCellWidget(data, states) {},\r\n\r\n    /**\r\n     * Release the given widget instance.\r\n     *\r\n     * Either pool or dispose the widget.\r\n     *\r\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to pool\r\n     */\r\n    pool(widget) {},\r\n\r\n    /**\r\n     * Update the states of the given widget.\r\n     *\r\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to update\r\n     * @param states {Map} The cell widget's states\r\n     */\r\n    updateStates(widget, states) {},\r\n\r\n    /**\r\n     * Update the data the cell widget should display\r\n     *\r\n     * @param widget {qx.ui.core.LayoutItem} The cell widget to update\r\n     * @param data {var} The data to display\r\n     */\r\n    updateData(widget, data) {}\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,gCAAgC,EAAE;IACpDC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aAAa,WAAAA,cAACC,IAAI,EAAEC,MAAM,EAAE,CAAC,CAAC;MAE9B;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,IAAI,WAAAA,KAACC,MAAM,EAAE,CAAC,CAAC;MAEf;AACJ;AACA;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAACD,MAAM,EAAEF,MAAM,EAAE,CAAC,CAAC;MAE/B;AACJ;AACA;AACA;AACA;AACA;MACII,UAAU,WAAAA,WAACF,MAAM,EAAEH,IAAI,EAAE,CAAC;IAC5B;EACF,CAAC,CAAC;EA7DFR,EAAE,CAACc,EAAE,CAACC,OAAO,CAACC,IAAI,CAACC,WAAW,CAACd,aAAa,GAAGA,aAAa;AAAC"
}