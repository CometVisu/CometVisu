{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "virtual",
    "cell",
    "ICell",
    "construct",
    "CellStylesheet",
    "getInstance",
    "members",
    "getCssClasses",
    "value",
    "states",
    "getAttributes",
    "getStyles",
    "getInsets",
    "getContent",
    "getCellProperties",
    "classes",
    "style",
    "attributes",
    "content",
    "insets",
    "Abstract"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/cell/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Abstract base class for HTML based cell renderer.\n *\n * HTML cell renderer are used to construct an HTML string, which is used to\n * render the cell.\n *\n * @require(qx.bom.Stylesheet)\n *\n */\nqx.Class.define(\"qx.ui.virtual.cell.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n  implement: qx.ui.virtual.cell.ICell,\n\n  construct() {\n    super();\n\n    // initialize stylesheet\n    qx.ui.virtual.cell.CellStylesheet.getInstance();\n  },\n\n  members: {\n    /**\n     * Get the css classes for the cell\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {String} Space separated list of CSS classes\n     */\n    getCssClasses(value, states) {\n      return \"qx-cell\";\n    },\n\n    /**\n     * Get the element attributes for the cell\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {String} Compiled string of cell attributes. e.g.\n     *   <code>'tabIndex=\"1\" readonly=\"false\"'</code>\n     */\n    getAttributes(value, states) {\n      return \"\";\n    },\n\n    /**\n     * Get the CSS styles for the cell\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {String} Compiled string of CSS styles. e.g.\n     *   <code>'color=\"red; padding: 10px'</code>\n     */\n    getStyles(value, states) {\n      return \"\";\n    },\n\n    /**\n     * Get the cell's insets. Insets are the sum of the cell's padding and\n     * border width.\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {Integer[]} An array containing the sum of horizontal insets at index\n     *   <code>0</code> and the sum of vertical insets at index <code>1</code>.\n     */\n    getInsets(value, states) {\n      return [0, 0];\n    },\n\n    /**\n     * Get cell'S HTML content\n     *\n     * @param value {var} The cell's data value\n     * @param states {Object} A map containing the cell's state names as map keys.\n     * @return {String} The cell's content as HTML fragment.\n     */\n    getContent(value, states) {\n      return value;\n    },\n\n    getCellProperties(value, states) {\n      return {\n        classes: this.getCssClasses(value, states),\n        style: this.getStyles(value, states),\n        attributes: this.getAttributes(value, states),\n        content: this.getContent(value, states),\n        insets: this.getInsets(value, states)\n      };\n    }\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,6BAAhB,EAA+C;IAC7CC,IAAI,EAAE,UADuC;IAE7CC,MAAM,EAAEP,EAAE,CAACQ,IAAH,CAAQC,MAF6B;IAG7CC,SAAS,EAAEV,EAAE,CAACW,EAAH,CAAMC,OAAN,CAAcC,IAAd,CAAmBC,KAHe;IAK7CC,SAL6C,uBAKjC;MACV,sCADU,CAGV;;MACAf,EAAE,CAACW,EAAH,CAAMC,OAAN,CAAcC,IAAd,CAAmBG,cAAnB,CAAkCC,WAAlC;IACD,CAV4C;IAY7CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,aARO,yBAQOC,KARP,EAQcC,MARd,EAQsB;QAC3B,OAAO,SAAP;MACD,CAVM;;MAYP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aApBO,yBAoBOF,KApBP,EAoBcC,MApBd,EAoBsB;QAC3B,OAAO,EAAP;MACD,CAtBM;;MAwBP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIE,SAhCO,qBAgCGH,KAhCH,EAgCUC,MAhCV,EAgCkB;QACvB,OAAO,EAAP;MACD,CAlCM;;MAoCP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIG,SA7CO,qBA6CGJ,KA7CH,EA6CUC,MA7CV,EA6CkB;QACvB,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;MACD,CA/CM;;MAiDP;AACJ;AACA;AACA;AACA;AACA;AACA;MACII,UAxDO,sBAwDIL,KAxDJ,EAwDWC,MAxDX,EAwDmB;QACxB,OAAOD,KAAP;MACD,CA1DM;MA4DPM,iBA5DO,6BA4DWN,KA5DX,EA4DkBC,MA5DlB,EA4D0B;QAC/B,OAAO;UACLM,OAAO,EAAE,KAAKR,aAAL,CAAmBC,KAAnB,EAA0BC,MAA1B,CADJ;UAELO,KAAK,EAAE,KAAKL,SAAL,CAAeH,KAAf,EAAsBC,MAAtB,CAFF;UAGLQ,UAAU,EAAE,KAAKP,aAAL,CAAmBF,KAAnB,EAA0BC,MAA1B,CAHP;UAILS,OAAO,EAAE,KAAKL,UAAL,CAAgBL,KAAhB,EAAuBC,MAAvB,CAJJ;UAKLU,MAAM,EAAE,KAAKP,SAAL,CAAeJ,KAAf,EAAsBC,MAAtB;QALH,CAAP;MAOD;IApEM;EAZoC,CAA/C;EA3BArB,EAAE,CAACW,EAAH,CAAMC,OAAN,CAAcC,IAAd,CAAmBmB,QAAnB,CAA4B7B,aAA5B,GAA4CA,aAA5C"
}