{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "cell",
    "Cell",
    "type",
    "construct",
    "constructor",
    "call",
    "_aliasManager",
    "util",
    "AliasManager",
    "getInstance",
    "members",
    "__defaultWidth",
    "__defaultHeight",
    "__getImageSize",
    "__P_471_2",
    "source",
    "ResourceManager",
    "ImageLoader",
    "io",
    "width",
    "height",
    "has",
    "getImageWidth",
    "getImageHeight",
    "isLoaded",
    "getWidth",
    "getHeight",
    "__createImage",
    "__P_471_3",
    "imageData",
    "url",
    "resolve",
    "sizes",
    "tooltip",
    "_identifyImage",
    "value",
    "Error",
    "getContent",
    "states",
    "content",
    "styles",
    "display",
    "verticalAlign",
    "position",
    "tag",
    "bom",
    "element",
    "Decoration",
    "getTagName",
    "ret",
    "getAttributes",
    "css",
    "Style",
    "compile",
    "style",
    "src",
    "AbstractImage"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/cell/AbstractImage.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n     * Carsten Lergenmueller (carstenl)\r\n     * Jonathan Wei√ü (jonathan_rass)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Abstract base class for image cell renderer.\r\n */\r\nqx.Class.define(\"qx.ui.virtual.cell.AbstractImage\", {\r\n  extend: qx.ui.virtual.cell.Cell,\r\n  type: \"abstract\",\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  construct() {\r\n    super();\r\n    this._aliasManager = qx.util.AliasManager.getInstance();\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __defaultWidth: 16,\r\n    __defaultHeight: 16,\r\n    _aliasManager: null,\r\n\r\n    /**\r\n     * Compute the size of the given image\r\n     *\r\n     * @param source {String} the image URL\r\n     * @return {Map} A map containing the image's <code>width</code> and\r\n     *    <code>height</code>\r\n     */\r\n    __getImageSize(source) {\r\n      var ResourceManager = qx.util.ResourceManager.getInstance();\r\n      var ImageLoader = qx.io.ImageLoader;\r\n      var width, height;\r\n\r\n      // Detect if the image registry knows this image\r\n      if (ResourceManager.has(source)) {\r\n        width = ResourceManager.getImageWidth(source);\r\n        height = ResourceManager.getImageHeight(source);\r\n      } else if (ImageLoader.isLoaded(source)) {\r\n        width = ImageLoader.getWidth(source);\r\n        height = ImageLoader.getHeight(source);\r\n      } else {\r\n        width = this.__defaultWidth;\r\n        height = this.__defaultHeight;\r\n      }\r\n\r\n      return { width: width, height: height };\r\n    },\r\n\r\n    /**\r\n     * Compute image meta data\r\n     *\r\n     * @param imageData {Object|String} Either a string containing the image URL\r\n     *   or a map, which describes the image. Map keys:\r\n     *   <ul>\r\n     *     <li>url (required)</li>\r\n     *     <li>width</li>\r\n     *     <li>height</li>\r\n     *     <li>tooltip</li>\r\n     *   </ul>\r\n     * @return {Object} A map describing the image. Map keys:\r\n     *   <ul>\r\n     *     <li>url</li>\r\n     *     <li>width</li>\r\n     *     <li>height</li>\r\n     *     <li>tooltip (optional)</li>\r\n     *   </ul>\r\n     */\r\n    __createImage(imageData) {\r\n      if (typeof imageData == \"string\") {\r\n        imageData = { url: imageData };\r\n      }\r\n\r\n      var url = this._aliasManager.resolve(imageData.url || null);\r\n      var sizes;\r\n\r\n      if (imageData.width && imageData.height) {\r\n        sizes = { width: imageData.width, height: imageData.height };\r\n      } else {\r\n        sizes = this.__getImageSize(url);\r\n      }\r\n\r\n      return {\r\n        width: sizes.width,\r\n        height: sizes.height,\r\n        url: url,\r\n        tooltip: imageData.tooltip\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Identifies the Image to show. This is a template method, which must be\r\n     * implements by sub classes.\r\n     *\r\n     * @abstract\r\n     * @param value {var} The cell's data value\r\n     * @return {Map} A map having the following attributes:\r\n     *           <ul>\r\n     *           <li>\"url\": (type string) must be the URL of the image to show.</li>\r\n     *           <li>\"width\": (type int) the width of the image in pixels.</li>\r\n     *           <li>\"height\": (type int) the height of the image in pixels.</li>\r\n     *           <li>\"tooltip\": (type string) must be the image tooltip text.</li>\r\n     *           </ul>\r\n     */\r\n    _identifyImage(value) {\r\n      throw new Error(\"_identifyImage is abstract\");\r\n    },\r\n\r\n    // overridden\r\n    getContent(value, states) {\r\n      if (value === null) {\r\n        return \"\";\r\n      }\r\n\r\n      var content = \"\";\r\n      var imageData = this.__createImage(this._identifyImage(value));\r\n      var tooltip = imageData.tooltip\r\n        ? 'title=\"' + imageData.tooltip + '\"'\r\n        : \"\";\r\n\r\n      var styles = {\r\n        width: imageData.width + \"px\",\r\n        height: imageData.height + \"px\",\r\n        display: \"inline-block\",\r\n        verticalAlign: \"top\",\r\n        position: \"static\"\r\n      };\r\n\r\n      var tag = qx.bom.element.Decoration.getTagName(\r\n        \"no-repeat\",\r\n        imageData.url\r\n      );\r\n\r\n      var ret = qx.bom.element.Decoration.getAttributes(\r\n        imageData.url,\r\n        \"no-repeat\",\r\n        styles\r\n      );\r\n\r\n      var css = qx.bom.element.Style.compile(ret.style);\r\n\r\n      if (tag === \"img\") {\r\n        content = '<img src=\"' + ret.src + '\" style=\"' + css + '\" ';\r\n        content += tooltip + \"/>\";\r\n      } else {\r\n        content = '<div style=\"' + css + '\" ';\r\n        content += tooltip + \"></div>\";\r\n      }\r\n      return content;\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}