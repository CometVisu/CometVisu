{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "cell",
    "Cell",
    "type",
    "construct",
    "_aliasManager",
    "util",
    "AliasManager",
    "getInstance",
    "members",
    "__defaultWidth",
    "__defaultHeight",
    "__getImageSize",
    "source",
    "ResourceManager",
    "ImageLoader",
    "io",
    "width",
    "height",
    "has",
    "getImageWidth",
    "getImageHeight",
    "isLoaded",
    "getWidth",
    "getHeight",
    "__createImage",
    "imageData",
    "url",
    "resolve",
    "sizes",
    "tooltip",
    "_identifyImage",
    "value",
    "Error",
    "getContent",
    "states",
    "content",
    "styles",
    "display",
    "verticalAlign",
    "position",
    "tag",
    "bom",
    "element",
    "Decoration",
    "getTagName",
    "ret",
    "getAttributes",
    "css",
    "Style",
    "compile",
    "style",
    "src",
    "AbstractImage"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/cell/AbstractImage.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Carsten Lergenmueller (carstenl)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Abstract base class for image cell renderer.\n */\nqx.Class.define(\"qx.ui.virtual.cell.AbstractImage\", {\n  extend: qx.ui.virtual.cell.Cell,\n  type: \"abstract\",\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct() {\n    super();\n    this._aliasManager = qx.util.AliasManager.getInstance();\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __defaultWidth: 16,\n    __defaultHeight: 16,\n    _aliasManager: null,\n\n    /**\n     * Compute the size of the given image\n     *\n     * @param source {String} the image URL\n     * @return {Map} A map containing the image's <code>width</code> and\n     *    <code>height</code>\n     */\n    __getImageSize(source) {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      var ImageLoader = qx.io.ImageLoader;\n      var width, height;\n\n      // Detect if the image registry knows this image\n      if (ResourceManager.has(source)) {\n        width = ResourceManager.getImageWidth(source);\n        height = ResourceManager.getImageHeight(source);\n      } else if (ImageLoader.isLoaded(source)) {\n        width = ImageLoader.getWidth(source);\n        height = ImageLoader.getHeight(source);\n      } else {\n        width = this.__defaultWidth;\n        height = this.__defaultHeight;\n      }\n\n      return { width: width, height: height };\n    },\n\n    /**\n     * Compute image meta data\n     *\n     * @param imageData {Object|String} Either a string containing the image URL\n     *   or a map, which describes the image. Map keys:\n     *   <ul>\n     *     <li>url (required)</li>\n     *     <li>width</li>\n     *     <li>height</li>\n     *     <li>tooltip</li>\n     *   </ul>\n     * @return {Object} A map describing the image. Map keys:\n     *   <ul>\n     *     <li>url</li>\n     *     <li>width</li>\n     *     <li>height</li>\n     *     <li>tooltip (optional)</li>\n     *   </ul>\n     */\n    __createImage(imageData) {\n      if (typeof imageData == \"string\") {\n        imageData = { url: imageData };\n      }\n\n      var url = this._aliasManager.resolve(imageData.url || null);\n      var sizes;\n\n      if (imageData.width && imageData.height) {\n        sizes = { width: imageData.width, height: imageData.height };\n      } else {\n        sizes = this.__getImageSize(url);\n      }\n\n      return {\n        width: sizes.width,\n        height: sizes.height,\n        url: url,\n        tooltip: imageData.tooltip\n      };\n    },\n\n    /**\n     * Identifies the Image to show. This is a template method, which must be\n     * implements by sub classes.\n     *\n     * @abstract\n     * @param value {var} The cell's data value\n     * @return {Map} A map having the following attributes:\n     *           <ul>\n     *           <li>\"url\": (type string) must be the URL of the image to show.</li>\n     *           <li>\"width\": (type int) the width of the image in pixels.</li>\n     *           <li>\"height\": (type int) the height of the image in pixels.</li>\n     *           <li>\"tooltip\": (type string) must be the image tooltip text.</li>\n     *           </ul>\n     */\n    _identifyImage(value) {\n      throw new Error(\"_identifyImage is abstract\");\n    },\n\n    // overridden\n    getContent(value, states) {\n      if (value === null) {\n        return \"\";\n      }\n\n      var content = \"\";\n      var imageData = this.__createImage(this._identifyImage(value));\n      var tooltip = imageData.tooltip\n        ? 'title=\"' + imageData.tooltip + '\"'\n        : \"\";\n\n      var styles = {\n        width: imageData.width + \"px\",\n        height: imageData.height + \"px\",\n        display: \"inline-block\",\n        verticalAlign: \"top\",\n        position: \"static\"\n      };\n\n      var tag = qx.bom.element.Decoration.getTagName(\n        \"no-repeat\",\n        imageData.url\n      );\n\n      var ret = qx.bom.element.Decoration.getAttributes(\n        imageData.url,\n        \"no-repeat\",\n        styles\n      );\n\n      var css = qx.bom.element.Style.compile(ret.style);\n\n      if (tag === \"img\") {\n        content = '<img src=\"' + ret.src + '\" style=\"' + css + '\" ';\n        content += tooltip + \"/>\";\n      } else {\n        content = '<div style=\"' + css + '\" ';\n        content += tooltip + \"></div>\";\n      }\n      return content;\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}