{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "cell",
    "Cell",
    "construct",
    "numberFormat",
    "constructor",
    "call",
    "setNumberFormat",
    "properties",
    "check",
    "init",
    "util",
    "format",
    "NumberFormat",
    "appearance",
    "refine",
    "members",
    "getContent",
    "value",
    "states",
    "getNumberFormat",
    "Number"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/cell/Number.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Jonathan Wei√ü (jonathan_rass)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Number cell renderer.\r\n *\r\n * Renders the call using the configured number formatter.\r\n */\r\nqx.Class.define(\"qx.ui.virtual.cell.Number\", {\r\n  extend: qx.ui.virtual.cell.Cell,\r\n\r\n  /**\r\n   * @param numberFormat {qx.util.format.NumberFormat|null} Optional number\r\n   *   format to use.\r\n   */\r\n  construct(numberFormat) {\r\n    super();\r\n\r\n    if (numberFormat) {\r\n      this.setNumberFormat(numberFormat);\r\n    }\r\n  },\r\n\r\n  properties: {\r\n    /** The number format used to render the cell */\r\n    numberFormat: {\r\n      check: \"qx.util.format.NumberFormat\",\r\n      // it is on intension that only one number format is used for\r\n      // all instances\r\n      init: new qx.util.format.NumberFormat()\r\n    },\r\n\r\n    // overridden\r\n    appearance: {\r\n      refine: true,\r\n      init: \"cell-number\"\r\n    }\r\n  },\r\n\r\n  members: {\r\n    // overridden\r\n    getContent(value, states) {\r\n      return value !== null ? this.getNumberFormat().format(value) : \"\";\r\n    }\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,2BAA2B,EAAE;IAC3CC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,IAAI,CAACC,IAAI;IAE/B;AACF;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,YAAY,EAAE;MACtBZ,EAAA,CAAAO,EAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAC,IAAA,CAAAG,WAAA,CAAAC,IAAA;MAEA,IAAIF,YAAY,EAAE;QAChB,IAAI,CAACG,eAAe,CAACH,YAAY,CAAC;MACpC;IACF,CAAC;IAEDI,UAAU,EAAE;MACV;MACAJ,YAAY,EAAE;QACZK,KAAK,EAAE,6BAA6B;QACpC;QACA;QACAC,IAAI,EAAE,IAAIlB,EAAE,CAACmB,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC;MACxC,CAAC;MAED;MACAC,UAAU,EAAE;QACVC,MAAM,EAAE,IAAI;QACZL,IAAI,EAAE;MACR;IACF,CAAC;IAEDM,OAAO,EAAE;MACP;MACAC,UAAU,WAAAA,WAACC,KAAK,EAAEC,MAAM,EAAE;QACxB,OAAOD,KAAK,KAAK,IAAI,GAAG,IAAI,CAACE,eAAe,CAAC,CAAC,CAACR,MAAM,CAACM,KAAK,CAAC,GAAG,EAAE;MACnE;IACF;EACF,CAAC,CAAC;EA7DF1B,EAAE,CAACO,EAAE,CAACC,OAAO,CAACC,IAAI,CAACoB,MAAM,CAAC1B,aAAa,GAAGA,aAAa;AAAC"
}