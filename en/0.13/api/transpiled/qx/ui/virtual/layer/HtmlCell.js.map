{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "construct",
    "htmlCellProvider",
    "setZIndex",
    "_cellProvider",
    "members",
    "_getCellSizeStyle",
    "width",
    "height",
    "insetX",
    "insetY",
    "style",
    "core",
    "Environment",
    "get",
    "_fullUpdate",
    "firstRow",
    "firstColumn",
    "rowSizes",
    "columnSizes",
    "html",
    "left",
    "top",
    "row",
    "column",
    "y",
    "length",
    "x",
    "cellProperties",
    "getCellProperties",
    "insets",
    "push",
    "classes",
    "attributes",
    "content",
    "getContentElement",
    "setAttribute",
    "join",
    "destruct",
    "HtmlCell"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/HtmlCell.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * The HtmlCell layer renders each cell with custom HTML markup. The concrete\n * markup for each cell is provided by a cell provider.\n */\nqx.Class.define(\"qx.ui.virtual.layer.HtmlCell\", {\n  extend: qx.ui.virtual.layer.Abstract,\n\n  /**\n   * @param htmlCellProvider {qx.ui.virtual.core.IHtmlCellProvider} This class\n   *    provides the HTML markup for each cell.\n   */\n  construct(htmlCellProvider) {\n    super();\n    this.setZIndex(12);\n\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      this.assertInterface(\n        htmlCellProvider,\n        qx.ui.virtual.core.IHtmlCellProvider\n      );\n    }\n    this._cellProvider = htmlCellProvider;\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Get the cell size taking the box model into account\n     *\n     * @param width {Integer} The cell's (border-box) width in pixel\n     * @param height {Integer} The cell's (border-box) height in pixel\n     * @param insetX {Integer} The cell's horizontal insets, i.e. the sum of\n     *    horizontal paddings and borders\n     * @param insetY {Integer} The cell's vertical insets, i.e. the sum of\n     *    vertical paddings and borders\n     * @return {String} The CSS style string for the cell size\n     */\n    _getCellSizeStyle(width, height, insetX, insetY) {\n      var style = \"\";\n      if (qx.core.Environment.get(\"css.boxmodel\") == \"content\") {\n        width -= insetX;\n        height -= insetY;\n      }\n\n      style += \"width:\" + width + \"px;\";\n      style += \"height:\" + height + \"px;\";\n\n      return style;\n    },\n\n    // overridden\n    _fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\n      var html = [];\n      var left = 0;\n      var top = 0;\n      var row = firstRow;\n      var column = firstColumn;\n      for (var y = 0; y < rowSizes.length; y++) {\n        var left = 0;\n        var column = firstColumn;\n        var height = rowSizes[y];\n        for (var x = 0; x < columnSizes.length; x++) {\n          var width = columnSizes[x];\n          var cellProperties = this._cellProvider.getCellProperties(\n            row,\n            column\n          );\n\n          var insets = cellProperties.insets || [0, 0];\n\n          html.push(\n            \"<div \",\n            \"style='\",\n            \"left:\",\n            left,\n            \"px;\",\n            \"top:\",\n            top,\n            \"px;\",\n            this._getCellSizeStyle(width, height, insets[0], insets[1]),\n            cellProperties.style || \"\",\n            \"' \",\n            \"class='\",\n            cellProperties.classes || \"\",\n            \"' \",\n            cellProperties.attributes || \"\",\n            \">\",\n            cellProperties.content || \"\",\n            \"</div>\"\n          );\n\n          column++;\n          left += width;\n        }\n        top += height;\n        row++;\n      }\n\n      this.getContentElement().setAttribute(\"html\", html.join(\"\"));\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._cellProvider = null;\n  }\n});\n"
  ],
  "mappings": "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"
}