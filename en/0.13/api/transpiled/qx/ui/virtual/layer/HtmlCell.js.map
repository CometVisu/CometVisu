{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "construct",
    "htmlCellProvider",
    "setZIndex",
    "_cellProvider",
    "members",
    "_getCellSizeStyle",
    "width",
    "height",
    "insetX",
    "insetY",
    "style",
    "core",
    "Environment",
    "get",
    "_fullUpdate",
    "firstRow",
    "firstColumn",
    "rowSizes",
    "columnSizes",
    "html",
    "left",
    "top",
    "row",
    "column",
    "y",
    "length",
    "x",
    "cellProperties",
    "getCellProperties",
    "insets",
    "push",
    "classes",
    "attributes",
    "content",
    "getContentElement",
    "setAttribute",
    "join",
    "destruct",
    "HtmlCell"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/HtmlCell.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * The HtmlCell layer renders each cell with custom HTML markup. The concrete\n * markup for each cell is provided by a cell provider.\n */\nqx.Class.define(\"qx.ui.virtual.layer.HtmlCell\", {\n  extend: qx.ui.virtual.layer.Abstract,\n\n  /**\n   * @param htmlCellProvider {qx.ui.virtual.core.IHtmlCellProvider} This class\n   *    provides the HTML markup for each cell.\n   */\n  construct(htmlCellProvider) {\n    super();\n    this.setZIndex(12);\n\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      this.assertInterface(\n        htmlCellProvider,\n        qx.ui.virtual.core.IHtmlCellProvider\n      );\n    }\n    this._cellProvider = htmlCellProvider;\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Get the cell size taking the box model into account\n     *\n     * @param width {Integer} The cell's (border-box) width in pixel\n     * @param height {Integer} The cell's (border-box) height in pixel\n     * @param insetX {Integer} The cell's horizontal insets, i.e. the sum of\n     *    horizontal paddings and borders\n     * @param insetY {Integer} The cell's vertical insets, i.e. the sum of\n     *    vertical paddings and borders\n     * @return {String} The CSS style string for the cell size\n     */\n    _getCellSizeStyle(width, height, insetX, insetY) {\n      var style = \"\";\n      if (qx.core.Environment.get(\"css.boxmodel\") == \"content\") {\n        width -= insetX;\n        height -= insetY;\n      }\n\n      style += \"width:\" + width + \"px;\";\n      style += \"height:\" + height + \"px;\";\n\n      return style;\n    },\n\n    // overridden\n    _fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\n      var html = [];\n      var left = 0;\n      var top = 0;\n      var row = firstRow;\n      var column = firstColumn;\n      for (var y = 0; y < rowSizes.length; y++) {\n        var left = 0;\n        var column = firstColumn;\n        var height = rowSizes[y];\n        for (var x = 0; x < columnSizes.length; x++) {\n          var width = columnSizes[x];\n          var cellProperties = this._cellProvider.getCellProperties(\n            row,\n            column\n          );\n\n          var insets = cellProperties.insets || [0, 0];\n\n          html.push(\n            \"<div \",\n            \"style='\",\n            \"left:\",\n            left,\n            \"px;\",\n            \"top:\",\n            top,\n            \"px;\",\n            this._getCellSizeStyle(width, height, insets[0], insets[1]),\n            cellProperties.style || \"\",\n            \"' \",\n            \"class='\",\n            cellProperties.classes || \"\",\n            \"' \",\n            cellProperties.attributes || \"\",\n            \">\",\n            cellProperties.content || \"\",\n            \"</div>\"\n          );\n\n          column++;\n          left += width;\n        }\n        top += height;\n        row++;\n      }\n\n      this.getContentElement().setAttribute(\"html\", html.join(\"\"));\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this._cellProvider = null;\n  }\n});\n"
  ],
  "mappings": "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"
}