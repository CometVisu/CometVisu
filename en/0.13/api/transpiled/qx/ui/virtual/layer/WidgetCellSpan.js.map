{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "include",
    "core",
    "MChildrenHandling",
    "construct",
    "widgetCellProvider",
    "rowConfig",
    "columnConfig",
    "setZIndex",
    "_spanManager",
    "CellSpanManager",
    "_cellProvider",
    "__spacerPool",
    "_cellLayer",
    "WidgetCell",
    "__getCellProviderForNonSpanningCells",
    "_setLayout",
    "layout",
    "Grow",
    "_add",
    "properties",
    "anonymous",
    "refine",
    "init",
    "members",
    "getRenderedCellWidget",
    "row",
    "column",
    "widget",
    "getUserData",
    "children",
    "_getChildren",
    "i",
    "l",
    "length",
    "child",
    "cell",
    "rowSpan",
    "colSpan",
    "setCellSpan",
    "columnSpan",
    "id",
    "removeCell",
    "addCell",
    "queue",
    "Widget",
    "add",
    "_getSpacer",
    "spacer",
    "pop",
    "Spacer",
    "setUserData",
    "self",
    "cellProvider",
    "spacerPool",
    "nonSpanningCellProvider",
    "getCellWidget",
    "_spanMap",
    "poolCellWidget",
    "push",
    "__updateCellSpanData",
    "firstRow",
    "firstColumn",
    "rowCount",
    "columnCount",
    "_cells",
    "findCellsInWindow",
    "_bounds",
    "getCellBounds",
    "computeCellSpanMap",
    "__updateCellSpanWidgets",
    "getChildren",
    "_remove",
    "cellBounds",
    "cellWidget",
    "setUserBounds",
    "left",
    "top",
    "width",
    "height",
    "lastRow",
    "lastColumn",
    "_fullUpdate",
    "rowSizes",
    "columnSizes",
    "fullUpdate",
    "_updateLayerWindow",
    "updateLayerWindow",
    "destruct",
    "dispose",
    "_disposeObjects",
    "WidgetCellSpan"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/WidgetCellSpan.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * An extended WidgetCell layer, which adds the possibility to specify row and\n * column spans for specific cells.\n */\nqx.Class.define(\"qx.ui.virtual.layer.WidgetCellSpan\", {\n  extend: qx.ui.virtual.layer.Abstract,\n\n  include: [qx.ui.core.MChildrenHandling],\n\n  /**\n   * @param widgetCellProvider {qx.ui.virtual.core.IWidgetCellProvider} This\n   *    class manages the life cycle of the cell widgets.\n   * @param rowConfig {qx.ui.virtual.core.Axis} The row configuration of the pane\n   *    in which the cells will be rendered\n   * @param columnConfig {qx.ui.virtual.core.Axis} The column configuration of the pane\n   *    in which the cells will be rendered\n   */\n  construct(widgetCellProvider, rowConfig, columnConfig) {\n    super();\n    this.setZIndex(12);\n\n    this._spanManager = new qx.ui.virtual.layer.CellSpanManager(\n      rowConfig,\n      columnConfig\n    );\n\n    this._cellProvider = widgetCellProvider;\n    this.__spacerPool = [];\n\n    this._cellLayer = new qx.ui.virtual.layer.WidgetCell(\n      this.__getCellProviderForNonSpanningCells()\n    );\n\n    this._cellLayer.setZIndex(0);\n\n    this._setLayout(new qx.ui.layout.Grow());\n    this._add(this._cellLayer);\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    anonymous: {\n      refine: true,\n      init: false\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Returns the widget used to render the given cell. May return null if the\n     * cell isn’t rendered currently rendered.\n     *\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @return {qx.ui.core.LayoutItem|null} the widget used to render the given\n     *    cell or <code>null</code>\n     */\n    getRenderedCellWidget(row, column) {\n      var widget = this._cellLayer.getRenderedCellWidget(row, column);\n      if (!widget || widget.getUserData(\"cell.spanning\")) {\n        var children = this._getChildren();\n        for (var i = 0, l = children.length; i < l; i++) {\n          var child = children[i];\n          if (child == this._cellLayer) {\n            continue;\n          }\n\n          var cell = {\n            row: child.getUserData(\"cell.row\"),\n            column: child.getUserData(\"cell.column\"),\n            rowSpan: child.getUserData(\"cell.rowspan\"),\n            colSpan: child.getUserData(\"cell.colspan\")\n          };\n\n          if (\n            cell.row <= row &&\n            row < cell.row + cell.rowSpan &&\n            cell.column <= column &&\n            column < cell.column + cell.colSpan\n          ) {\n            return child;\n          }\n        }\n        return null;\n      }\n\n      return widget;\n    },\n\n    __spacerPool: null,\n\n    /**\n     * Set the row and column span for a specific cell\n     *\n     * @param row {PositiveInteger} The cell's row\n     * @param column {PositiveInteger} The cell's column\n     * @param rowSpan {PositiveInteger} The number of rows the cells spans\n     * @param columnSpan {PositiveInteger} The number of columns the cells spans\n     */\n    setCellSpan(row, column, rowSpan, columnSpan) {\n      var id = row + \"x\" + column;\n      this._spanManager.removeCell(id);\n      if (rowSpan > 1 || columnSpan > 1) {\n        this._spanManager.addCell(id, row, column, rowSpan, columnSpan);\n      }\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /**\n     * Get the spacer widget, for span cells\n     *\n     * @return {qx.ui.core.Spacer} The spacer widget.\n     */\n    _getSpacer() {\n      var spacer = this.__spacerPool.pop();\n      if (!spacer) {\n        spacer = new qx.ui.core.Spacer();\n        spacer.setUserData(\"cell.empty\", 1);\n        spacer.setUserData(\"cell.spanning\", 1);\n      }\n      return spacer;\n    },\n\n    /**\n     * Get the cell provider for the non spanning cells\n     *\n     * @return {qx.ui.virtual.core.IWidgetCellProvider} the cell provider\n     */\n    __getCellProviderForNonSpanningCells() {\n      var self = this;\n      var cellProvider = this._cellProvider;\n      var spacerPool = this.__spacerPool;\n\n      var nonSpanningCellProvider = {\n        getCellWidget(row, column) {\n          if (!self._spanMap[row][column]) {\n            var widget = cellProvider.getCellWidget(row, column);\n          } else {\n            var widget = self._getSpacer();\n          }\n          return widget;\n        },\n\n        poolCellWidget(widget) {\n          if (widget.getUserData(\"cell.spanning\")) {\n            spacerPool.push(widget);\n          } else {\n            cellProvider.poolCellWidget(widget);\n          }\n        }\n      };\n\n      return nonSpanningCellProvider;\n    },\n\n    /**\n     * Updates the fields <code>_cells</code>, <code>_bounds</code> and\n     * <code>_spanMap</code> according to the given grid window.\n     *\n     * @param firstRow {PositiveInteger} first visible row\n     * @param firstColumn {PositiveInteger} first visible column\n     * @param rowCount {PositiveInteger} number of rows to update\n     * @param columnCount {PositiveInteger} number columns to update\n     */\n    __updateCellSpanData(firstRow, firstColumn, rowCount, columnCount) {\n      this._cells = this._spanManager.findCellsInWindow(\n        firstRow,\n        firstColumn,\n        rowCount,\n        columnCount\n      );\n\n      if (this._cells.length > 0) {\n        this._bounds = this._spanManager.getCellBounds(\n          this._cells,\n          firstRow,\n          firstColumn\n        );\n\n        this._spanMap = this._spanManager.computeCellSpanMap(\n          this._cells,\n          firstRow,\n          firstColumn,\n          rowCount,\n          columnCount\n        );\n      } else {\n        this._bounds = [];\n        // create empty dummy map\n        this._spanMap = [];\n        for (var i = 0; i < rowCount; i++) {\n          this._spanMap[firstRow + i] = [];\n        }\n      }\n    },\n\n    /**\n     * Updates the widget in spanned cells.\n     *\n     * Note: The method {@link #__updateCellSpanData} must be called before\n     * this method is called:\n     */\n    __updateCellSpanWidgets() {\n      // remove and pool existing cells\n      var children = this.getChildren();\n      for (var i = children.length - 1; i >= 0; i--) {\n        var child = children[i];\n        if (child !== this._cellLayer) {\n          this._cellProvider.poolCellWidget(child);\n          this._remove(child);\n        }\n      }\n\n      for (var i = 0, l = this._cells.length; i < l; i++) {\n        var cell = this._cells[i];\n        var cellBounds = this._bounds[i];\n        var cellWidget = this._cellProvider.getCellWidget(\n          cell.firstRow,\n          cell.firstColumn\n        );\n\n        if (cellWidget) {\n          cellWidget.setUserBounds(\n            cellBounds.left,\n            cellBounds.top,\n            cellBounds.width,\n            cellBounds.height\n          );\n\n          cellWidget.setUserData(\"cell.row\", cell.firstRow);\n          cellWidget.setUserData(\"cell.column\", cell.firstColumn);\n          cellWidget.setUserData(\n            \"cell.rowspan\",\n            cell.lastRow - cell.firstRow + 1\n          );\n\n          cellWidget.setUserData(\n            \"cell.colspan\",\n            cell.lastColumn - cell.firstColumn + 1\n          );\n\n          this._add(cellWidget);\n        }\n      }\n    },\n\n    // overridden\n    _fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\n      this.__updateCellSpanData(\n        firstRow,\n        firstColumn,\n        rowSizes.length,\n        columnSizes.length\n      );\n\n      this.__updateCellSpanWidgets();\n      this._cellLayer.fullUpdate(firstRow, firstColumn, rowSizes, columnSizes);\n    },\n\n    // overridden\n    _updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes) {\n      this.__updateCellSpanData(\n        firstRow,\n        firstColumn,\n        rowSizes.length,\n        columnSizes.length\n      );\n\n      this.__updateCellSpanWidgets();\n      this._cellLayer.updateLayerWindow(\n        firstRow,\n        firstColumn,\n        rowSizes,\n        columnSizes\n      );\n    }\n  },\n\n  destruct() {\n    var children = this._getChildren();\n    for (var i = 0; i < children.length; i++) {\n      children[i].dispose();\n    }\n\n    this._disposeObjects(\"_spanManager\", \"_cellLayer\");\n    this._cellProvider =\n      this.__spacerPool =\n      this._cells =\n      this._bounds =\n      this._spanMap =\n        null;\n  }\n});\n"
  ],
  "mappings": "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"
}