{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "include",
    "core",
    "MChildrenHandling",
    "construct",
    "widgetCellProvider",
    "rowConfig",
    "columnConfig",
    "constructor",
    "call",
    "setZIndex",
    "_spanManager",
    "CellSpanManager",
    "_cellProvider",
    "__spacerPool",
    "_cellLayer",
    "WidgetCell",
    "__getCellProviderForNonSpanningCells",
    "_setLayout",
    "layout",
    "Grow",
    "_add",
    "properties",
    "anonymous",
    "refine",
    "init",
    "members",
    "getRenderedCellWidget",
    "row",
    "column",
    "widget",
    "getUserData",
    "children",
    "_getChildren",
    "i",
    "l",
    "length",
    "child",
    "cell",
    "rowSpan",
    "colSpan",
    "setCellSpan",
    "columnSpan",
    "id",
    "removeCell",
    "addCell",
    "queue",
    "Widget",
    "add",
    "_getSpacer",
    "spacer",
    "pop",
    "Spacer",
    "setUserData",
    "__P_494_1",
    "self",
    "cellProvider",
    "spacerPool",
    "nonSpanningCellProvider",
    "getCellWidget",
    "_spanMap",
    "poolCellWidget",
    "push",
    "__updateCellSpanData",
    "__P_494_2",
    "firstRow",
    "firstColumn",
    "rowCount",
    "columnCount",
    "_cells",
    "findCellsInWindow",
    "_bounds",
    "getCellBounds",
    "computeCellSpanMap",
    "__updateCellSpanWidgets",
    "__P_494_3",
    "getChildren",
    "_remove",
    "cellBounds",
    "cellWidget",
    "setUserBounds",
    "left",
    "top",
    "width",
    "height",
    "lastRow",
    "lastColumn",
    "_fullUpdate",
    "rowSizes",
    "columnSizes",
    "fullUpdate",
    "_updateLayerWindow",
    "updateLayerWindow",
    "destruct",
    "dispose",
    "_disposeObjects",
    "WidgetCellSpan"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/WidgetCellSpan.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Jonathan Weiß (jonathan_rass)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * An extended WidgetCell layer, which adds the possibility to specify row and\r\n * column spans for specific cells.\r\n */\r\nqx.Class.define(\"qx.ui.virtual.layer.WidgetCellSpan\", {\r\n  extend: qx.ui.virtual.layer.Abstract,\r\n\r\n  include: [qx.ui.core.MChildrenHandling],\r\n\r\n  /**\r\n   * @param widgetCellProvider {qx.ui.virtual.core.IWidgetCellProvider} This\r\n   *    class manages the life cycle of the cell widgets.\r\n   * @param rowConfig {qx.ui.virtual.core.Axis} The row configuration of the pane\r\n   *    in which the cells will be rendered\r\n   * @param columnConfig {qx.ui.virtual.core.Axis} The column configuration of the pane\r\n   *    in which the cells will be rendered\r\n   */\r\n  construct(widgetCellProvider, rowConfig, columnConfig) {\r\n    super();\r\n    this.setZIndex(12);\r\n\r\n    this._spanManager = new qx.ui.virtual.layer.CellSpanManager(\r\n      rowConfig,\r\n      columnConfig\r\n    );\r\n\r\n    this._cellProvider = widgetCellProvider;\r\n    this.__spacerPool = [];\r\n\r\n    this._cellLayer = new qx.ui.virtual.layer.WidgetCell(\r\n      this.__getCellProviderForNonSpanningCells()\r\n    );\r\n\r\n    this._cellLayer.setZIndex(0);\r\n\r\n    this._setLayout(new qx.ui.layout.Grow());\r\n    this._add(this._cellLayer);\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    // overridden\r\n    anonymous: {\r\n      refine: true,\r\n      init: false\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Returns the widget used to render the given cell. May return null if the\r\n     * cell isn’t rendered currently rendered.\r\n     *\r\n     * @param row {Integer} The cell's row index\r\n     * @param column {Integer} The cell's column index\r\n     * @return {qx.ui.core.LayoutItem|null} the widget used to render the given\r\n     *    cell or <code>null</code>\r\n     */\r\n    getRenderedCellWidget(row, column) {\r\n      var widget = this._cellLayer.getRenderedCellWidget(row, column);\r\n      if (!widget || widget.getUserData(\"cell.spanning\")) {\r\n        var children = this._getChildren();\r\n        for (var i = 0, l = children.length; i < l; i++) {\r\n          var child = children[i];\r\n          if (child == this._cellLayer) {\r\n            continue;\r\n          }\r\n\r\n          var cell = {\r\n            row: child.getUserData(\"cell.row\"),\r\n            column: child.getUserData(\"cell.column\"),\r\n            rowSpan: child.getUserData(\"cell.rowspan\"),\r\n            colSpan: child.getUserData(\"cell.colspan\")\r\n          };\r\n\r\n          if (\r\n            cell.row <= row &&\r\n            row < cell.row + cell.rowSpan &&\r\n            cell.column <= column &&\r\n            column < cell.column + cell.colSpan\r\n          ) {\r\n            return child;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n\r\n      return widget;\r\n    },\r\n\r\n    __spacerPool: null,\r\n\r\n    /**\r\n     * Set the row and column span for a specific cell\r\n     *\r\n     * @param row {PositiveInteger} The cell's row\r\n     * @param column {PositiveInteger} The cell's column\r\n     * @param rowSpan {PositiveInteger} The number of rows the cells spans\r\n     * @param columnSpan {PositiveInteger} The number of columns the cells spans\r\n     */\r\n    setCellSpan(row, column, rowSpan, columnSpan) {\r\n      var id = row + \"x\" + column;\r\n      this._spanManager.removeCell(id);\r\n      if (rowSpan > 1 || columnSpan > 1) {\r\n        this._spanManager.addCell(id, row, column, rowSpan, columnSpan);\r\n      }\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    /**\r\n     * Get the spacer widget, for span cells\r\n     *\r\n     * @return {qx.ui.core.Spacer} The spacer widget.\r\n     */\r\n    _getSpacer() {\r\n      var spacer = this.__spacerPool.pop();\r\n      if (!spacer) {\r\n        spacer = new qx.ui.core.Spacer();\r\n        spacer.setUserData(\"cell.empty\", 1);\r\n        spacer.setUserData(\"cell.spanning\", 1);\r\n      }\r\n      return spacer;\r\n    },\r\n\r\n    /**\r\n     * Get the cell provider for the non spanning cells\r\n     *\r\n     * @return {qx.ui.virtual.core.IWidgetCellProvider} the cell provider\r\n     */\r\n    __getCellProviderForNonSpanningCells() {\r\n      var self = this;\r\n      var cellProvider = this._cellProvider;\r\n      var spacerPool = this.__spacerPool;\r\n\r\n      var nonSpanningCellProvider = {\r\n        getCellWidget(row, column) {\r\n          if (!self._spanMap[row][column]) {\r\n            var widget = cellProvider.getCellWidget(row, column);\r\n          } else {\r\n            var widget = self._getSpacer();\r\n          }\r\n          return widget;\r\n        },\r\n\r\n        poolCellWidget(widget) {\r\n          if (widget.getUserData(\"cell.spanning\")) {\r\n            spacerPool.push(widget);\r\n          } else {\r\n            cellProvider.poolCellWidget(widget);\r\n          }\r\n        }\r\n      };\r\n\r\n      return nonSpanningCellProvider;\r\n    },\r\n\r\n    /**\r\n     * Updates the fields <code>_cells</code>, <code>_bounds</code> and\r\n     * <code>_spanMap</code> according to the given grid window.\r\n     *\r\n     * @param firstRow {PositiveInteger} first visible row\r\n     * @param firstColumn {PositiveInteger} first visible column\r\n     * @param rowCount {PositiveInteger} number of rows to update\r\n     * @param columnCount {PositiveInteger} number columns to update\r\n     */\r\n    __updateCellSpanData(firstRow, firstColumn, rowCount, columnCount) {\r\n      this._cells = this._spanManager.findCellsInWindow(\r\n        firstRow,\r\n        firstColumn,\r\n        rowCount,\r\n        columnCount\r\n      );\r\n\r\n      if (this._cells.length > 0) {\r\n        this._bounds = this._spanManager.getCellBounds(\r\n          this._cells,\r\n          firstRow,\r\n          firstColumn\r\n        );\r\n\r\n        this._spanMap = this._spanManager.computeCellSpanMap(\r\n          this._cells,\r\n          firstRow,\r\n          firstColumn,\r\n          rowCount,\r\n          columnCount\r\n        );\r\n      } else {\r\n        this._bounds = [];\r\n        // create empty dummy map\r\n        this._spanMap = [];\r\n        for (var i = 0; i < rowCount; i++) {\r\n          this._spanMap[firstRow + i] = [];\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Updates the widget in spanned cells.\r\n     *\r\n     * Note: The method {@link #__updateCellSpanData} must be called before\r\n     * this method is called:\r\n     */\r\n    __updateCellSpanWidgets() {\r\n      // remove and pool existing cells\r\n      var children = this.getChildren();\r\n      for (var i = children.length - 1; i >= 0; i--) {\r\n        var child = children[i];\r\n        if (child !== this._cellLayer) {\r\n          this._cellProvider.poolCellWidget(child);\r\n          this._remove(child);\r\n        }\r\n      }\r\n\r\n      for (var i = 0, l = this._cells.length; i < l; i++) {\r\n        var cell = this._cells[i];\r\n        var cellBounds = this._bounds[i];\r\n        var cellWidget = this._cellProvider.getCellWidget(\r\n          cell.firstRow,\r\n          cell.firstColumn\r\n        );\r\n\r\n        if (cellWidget) {\r\n          cellWidget.setUserBounds(\r\n            cellBounds.left,\r\n            cellBounds.top,\r\n            cellBounds.width,\r\n            cellBounds.height\r\n          );\r\n\r\n          cellWidget.setUserData(\"cell.row\", cell.firstRow);\r\n          cellWidget.setUserData(\"cell.column\", cell.firstColumn);\r\n          cellWidget.setUserData(\r\n            \"cell.rowspan\",\r\n            cell.lastRow - cell.firstRow + 1\r\n          );\r\n\r\n          cellWidget.setUserData(\r\n            \"cell.colspan\",\r\n            cell.lastColumn - cell.firstColumn + 1\r\n          );\r\n\r\n          this._add(cellWidget);\r\n        }\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    _fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\r\n      this.__updateCellSpanData(\r\n        firstRow,\r\n        firstColumn,\r\n        rowSizes.length,\r\n        columnSizes.length\r\n      );\r\n\r\n      this.__updateCellSpanWidgets();\r\n      this._cellLayer.fullUpdate(firstRow, firstColumn, rowSizes, columnSizes);\r\n    },\r\n\r\n    // overridden\r\n    _updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes) {\r\n      this.__updateCellSpanData(\r\n        firstRow,\r\n        firstColumn,\r\n        rowSizes.length,\r\n        columnSizes.length\r\n      );\r\n\r\n      this.__updateCellSpanWidgets();\r\n      this._cellLayer.updateLayerWindow(\r\n        firstRow,\r\n        firstColumn,\r\n        rowSizes,\r\n        columnSizes\r\n      );\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    var children = this._getChildren();\r\n    for (var i = 0; i < children.length; i++) {\r\n      children[i].dispose();\r\n    }\r\n\r\n    this._disposeObjects(\"_spanManager\", \"_cellLayer\");\r\n    this._cellProvider =\r\n      this.__spacerPool =\r\n      this._cells =\r\n      this._bounds =\r\n      this._spanMap =\r\n        null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}