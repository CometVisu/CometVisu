{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "type",
    "implement",
    "virtual",
    "ILayer",
    "construct",
    "__jobs",
    "properties",
    "anonymous",
    "refine",
    "init",
    "members",
    "__arguments",
    "__firstRow",
    "__firstColumn",
    "__rowSizes",
    "__columnSizes",
    "getFirstRow",
    "getFirstColumn",
    "getRowSizes",
    "getColumnSizes",
    "syncWidget",
    "jobs",
    "getContentElement",
    "getDomElement",
    "fullUpdate",
    "updateLayerWindow",
    "updateLayerData",
    "_fullUpdate",
    "apply",
    "_updateLayerWindow",
    "_updateLayerData",
    "args",
    "firstRow",
    "firstColumn",
    "rowSizes",
    "columnSizes",
    "Error",
    "queue",
    "add",
    "arguments",
    "destruct",
    "layer",
    "Abstract"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Abstract base class for layers of a virtual pane.\n *\n * This class queues calls to {@link #fullUpdate}, {@link #updateLayerWindow}\n * and {@link #updateLayerData} and only performs the absolute necessary\n * actions. Concrete implementation of this class must at least implement\n * the {@link #_fullUpdate} method. Additionally the two methods\n * {@link #_updateLayerWindow} and {@link #_updateLayerData} may be implemented\n * to increase the performance.\n */\nqx.Class.define(\"qx.ui.virtual.layer.Abstract\", {\n  extend: qx.ui.core.Widget,\n  type: \"abstract\",\n\n  implement: [qx.ui.virtual.core.ILayer],\n\n  /*\n   *****************************************************************************\n      CONSTRUCTOR\n   *****************************************************************************\n   */\n\n  construct() {\n    super();\n\n    this.__jobs = {};\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    // overridden\n    anonymous: {\n      refine: true,\n      init: true\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __jobs: null,\n    __arguments: null,\n\n    __firstRow: null,\n    __firstColumn: null,\n    __rowSizes: null,\n    __columnSizes: null,\n\n    /**\n     * Get the first rendered row\n     *\n     * @return {Integer} The first rendered row\n     */\n    getFirstRow() {\n      return this.__firstRow;\n    },\n\n    /**\n     * Get the first rendered column\n     *\n     * @return {Integer} The first rendered column\n     */\n    getFirstColumn() {\n      return this.__firstColumn;\n    },\n\n    /**\n     * Get the sizes of the rendered rows\n     *\n     * @return {Integer[]} List of row heights\n     */\n    getRowSizes() {\n      return this.__rowSizes || [];\n    },\n\n    /**\n     * Get the sizes of the rendered column\n     *\n     * @return {Integer[]} List of column widths\n     */\n    getColumnSizes() {\n      return this.__columnSizes || [];\n    },\n\n    // overridden\n    syncWidget(jobs) {\n      // return if the layer is not yet rendered\n      // it will rendered in the appear event\n      if (!this.getContentElement().getDomElement()) {\n        return;\n      }\n\n      if (\n        this.__jobs.fullUpdate ||\n        (this.__jobs.updateLayerWindow && this.__jobs.updateLayerData)\n      ) {\n        this._fullUpdate.apply(this, this.__arguments);\n      } else if (this.__jobs.updateLayerWindow) {\n        this._updateLayerWindow.apply(this, this.__arguments);\n      } else if (this.__jobs.updateLayerData && this.__rowSizes) {\n        this._updateLayerData();\n      }\n\n      if (this.__jobs.fullUpdate || this.__jobs.updateLayerWindow) {\n        var args = this.__arguments;\n        this.__firstRow = args[0];\n        this.__firstColumn = args[1];\n        this.__rowSizes = args[2];\n        this.__columnSizes = args[3];\n      }\n\n      this.__jobs = {};\n    },\n\n    /**\n     * Update the layer to reflect changes in the data the layer displays.\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     */\n    _updateLayerData() {\n      this._fullUpdate(\n        this.__firstRow,\n        this.__firstColumn,\n        this.__rowSizes,\n        this.__columnSizes\n      );\n    },\n\n    /**\n     * Do a complete update of the layer. All cached data should be discarded.\n     * This method is called e.g. after changes to the grid geometry\n     * (row/column sizes, row/column count, ...).\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     *\n     * @param firstRow {Integer} Index of the first row to display\n     * @param firstColumn {Integer} Index of the first column to display\n     * @param rowSizes {Integer[]} Array of heights for each row to display\n     * @param columnSizes {Integer[]} Array of widths for each column to display\n     */\n    _fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\n      throw new Error(\"Abstract method '_fullUpdate' called!\");\n    },\n\n    /**\n     * Update the layer to display a different window of the virtual grid.\n     * This method is called if the pane is scrolled, resized or cells\n     * are prefetched. The implementation can assume that no other grid\n     * data has been changed since the last \"fullUpdate\" of \"updateLayerWindow\"\n     * call.\n     *\n     * Note: It is guaranteed that this method is only called after the layer\n     * has been rendered.\n     *\n     * @param firstRow {Integer} Index of the first row to display\n     * @param firstColumn {Integer} Index of the first column to display\n     * @param rowSizes {Integer[]} Array of heights for each row to display\n     * @param columnSizes {Integer[]} Array of widths for each column to display\n     */\n    _updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes) {\n      this._fullUpdate(firstRow, firstColumn, rowSizes, columnSizes);\n    },\n\n    // interface implementation\n    updateLayerData() {\n      this.__jobs.updateLayerData = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    // interface implementation\n    fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\n      this.__arguments = arguments;\n      this.__jobs.fullUpdate = true;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    // interface implementation\n    updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes) {\n      this.__arguments = arguments;\n      this.__jobs.updateLayerWindow = true;\n      qx.ui.core.queue.Widget.add(this);\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    this.__jobs =\n      this.__arguments =\n      this.__rowSizes =\n      this.__columnSizes =\n        null;\n  }\n});\n"
  ],
  "mappings": "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"
}