{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "type",
    "implement",
    "virtual",
    "ILayer",
    "construct",
    "constructor",
    "call",
    "__jobs",
    "properties",
    "anonymous",
    "refine",
    "init",
    "members",
    "__arguments",
    "__firstRow",
    "__firstColumn",
    "__rowSizes",
    "__columnSizes",
    "getFirstRow",
    "getFirstColumn",
    "getRowSizes",
    "getColumnSizes",
    "syncWidget",
    "jobs",
    "getContentElement",
    "getDomElement",
    "fullUpdate",
    "updateLayerWindow",
    "updateLayerData",
    "_fullUpdate",
    "apply",
    "_updateLayerWindow",
    "_updateLayerData",
    "args",
    "firstRow",
    "firstColumn",
    "rowSizes",
    "columnSizes",
    "Error",
    "queue",
    "add",
    "arguments",
    "destruct",
    "layer",
    "Abstract"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/layer/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Abstract base class for layers of a virtual pane.\r\n *\r\n * This class queues calls to {@link #fullUpdate}, {@link #updateLayerWindow}\r\n * and {@link #updateLayerData} and only performs the absolute necessary\r\n * actions. Concrete implementation of this class must at least implement\r\n * the {@link #_fullUpdate} method. Additionally the two methods\r\n * {@link #_updateLayerWindow} and {@link #_updateLayerData} may be implemented\r\n * to increase the performance.\r\n */\r\nqx.Class.define(\"qx.ui.virtual.layer.Abstract\", {\r\n  extend: qx.ui.core.Widget,\r\n  type: \"abstract\",\r\n\r\n  implement: [qx.ui.virtual.core.ILayer],\r\n\r\n  /*\r\n   *****************************************************************************\r\n      CONSTRUCTOR\r\n   *****************************************************************************\r\n   */\r\n\r\n  construct() {\r\n    super();\r\n\r\n    this.__jobs = {};\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    // overridden\r\n    anonymous: {\r\n      refine: true,\r\n      init: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __jobs: null,\r\n    __arguments: null,\r\n\r\n    __firstRow: null,\r\n    __firstColumn: null,\r\n    __rowSizes: null,\r\n    __columnSizes: null,\r\n\r\n    /**\r\n     * Get the first rendered row\r\n     *\r\n     * @return {Integer} The first rendered row\r\n     */\r\n    getFirstRow() {\r\n      return this.__firstRow;\r\n    },\r\n\r\n    /**\r\n     * Get the first rendered column\r\n     *\r\n     * @return {Integer} The first rendered column\r\n     */\r\n    getFirstColumn() {\r\n      return this.__firstColumn;\r\n    },\r\n\r\n    /**\r\n     * Get the sizes of the rendered rows\r\n     *\r\n     * @return {Integer[]} List of row heights\r\n     */\r\n    getRowSizes() {\r\n      return this.__rowSizes || [];\r\n    },\r\n\r\n    /**\r\n     * Get the sizes of the rendered column\r\n     *\r\n     * @return {Integer[]} List of column widths\r\n     */\r\n    getColumnSizes() {\r\n      return this.__columnSizes || [];\r\n    },\r\n\r\n    // overridden\r\n    syncWidget(jobs) {\r\n      // return if the layer is not yet rendered\r\n      // it will rendered in the appear event\r\n      if (!this.getContentElement().getDomElement()) {\r\n        return;\r\n      }\r\n\r\n      if (\r\n        this.__jobs.fullUpdate ||\r\n        (this.__jobs.updateLayerWindow && this.__jobs.updateLayerData)\r\n      ) {\r\n        this._fullUpdate.apply(this, this.__arguments);\r\n      } else if (this.__jobs.updateLayerWindow) {\r\n        this._updateLayerWindow.apply(this, this.__arguments);\r\n      } else if (this.__jobs.updateLayerData && this.__rowSizes) {\r\n        this._updateLayerData();\r\n      }\r\n\r\n      if (this.__jobs.fullUpdate || this.__jobs.updateLayerWindow) {\r\n        var args = this.__arguments;\r\n        this.__firstRow = args[0];\r\n        this.__firstColumn = args[1];\r\n        this.__rowSizes = args[2];\r\n        this.__columnSizes = args[3];\r\n      }\r\n\r\n      this.__jobs = {};\r\n    },\r\n\r\n    /**\r\n     * Update the layer to reflect changes in the data the layer displays.\r\n     *\r\n     * Note: It is guaranteed that this method is only called after the layer\r\n     * has been rendered.\r\n     */\r\n    _updateLayerData() {\r\n      this._fullUpdate(\r\n        this.__firstRow,\r\n        this.__firstColumn,\r\n        this.__rowSizes,\r\n        this.__columnSizes\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Do a complete update of the layer. All cached data should be discarded.\r\n     * This method is called e.g. after changes to the grid geometry\r\n     * (row/column sizes, row/column count, ...).\r\n     *\r\n     * Note: It is guaranteed that this method is only called after the layer\r\n     * has been rendered.\r\n     *\r\n     * @param firstRow {Integer} Index of the first row to display\r\n     * @param firstColumn {Integer} Index of the first column to display\r\n     * @param rowSizes {Integer[]} Array of heights for each row to display\r\n     * @param columnSizes {Integer[]} Array of widths for each column to display\r\n     */\r\n    _fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\r\n      throw new Error(\"Abstract method '_fullUpdate' called!\");\r\n    },\r\n\r\n    /**\r\n     * Update the layer to display a different window of the virtual grid.\r\n     * This method is called if the pane is scrolled, resized or cells\r\n     * are prefetched. The implementation can assume that no other grid\r\n     * data has been changed since the last \"fullUpdate\" of \"updateLayerWindow\"\r\n     * call.\r\n     *\r\n     * Note: It is guaranteed that this method is only called after the layer\r\n     * has been rendered.\r\n     *\r\n     * @param firstRow {Integer} Index of the first row to display\r\n     * @param firstColumn {Integer} Index of the first column to display\r\n     * @param rowSizes {Integer[]} Array of heights for each row to display\r\n     * @param columnSizes {Integer[]} Array of widths for each column to display\r\n     */\r\n    _updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes) {\r\n      this._fullUpdate(firstRow, firstColumn, rowSizes, columnSizes);\r\n    },\r\n\r\n    // interface implementation\r\n    updateLayerData() {\r\n      this.__jobs.updateLayerData = true;\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    // interface implementation\r\n    fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\r\n      this.__arguments = arguments;\r\n      this.__jobs.fullUpdate = true;\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    // interface implementation\r\n    updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes) {\r\n      this.__arguments = arguments;\r\n      this.__jobs.updateLayerWindow = true;\r\n      qx.ui.core.queue.Widget.add(this);\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this.__jobs =\r\n      this.__arguments =\r\n      this.__rowSizes =\r\n      this.__columnSizes =\r\n        null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}