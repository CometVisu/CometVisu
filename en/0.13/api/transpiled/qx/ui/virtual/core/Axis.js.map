{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "defaultItemSize",
    "itemCount",
    "customSizes",
    "events",
    "change",
    "members",
    "__ranges",
    "getDefaultItemSize",
    "setDefaultItemSize",
    "fireNonBubblingEvent",
    "getItemCount",
    "setItemCount",
    "setItemSize",
    "index",
    "size",
    "getItemSize",
    "resetItemSizes",
    "__getRanges",
    "defaultSize",
    "indexes",
    "key",
    "parseInt",
    "push",
    "length",
    "ranges",
    "startIndex",
    "endIndex",
    "firstItemSize",
    "rangeStart",
    "rangeEnd",
    "sort",
    "a",
    "b",
    "correctionSum",
    "i",
    "cellSize",
    "unshift",
    "lastRange",
    "remainingItemsSize",
    "__findRangeByPosition",
    "position",
    "start",
    "end",
    "pivot",
    "range",
    "getItemAtPosition",
    "getTotalSize",
    "startPos",
    "offset",
    "Math",
    "floor",
    "__findRangeByIndex",
    "getItemPosition",
    "getItemSizes",
    "minSizeSum",
    "sum",
    "sizes",
    "itemSize",
    "destruct",
    "ui",
    "virtual",
    "Axis"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/core/Axis.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The axis maps virtual screen coordinates to item indexes. By default all\n * items have the same size but it is also possible to give specific items\n * a different size.\n */\nqx.Class.define(\"qx.ui.virtual.core.Axis\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param defaultItemSize {Integer} The default size of the items.\n   * @param itemCount {Integer} The number of item on the axis.\n   */\n  construct(defaultItemSize, itemCount) {\n    super();\n\n    this.itemCount = itemCount;\n    this.defaultItemSize = defaultItemSize;\n\n    // sparse array\n    this.customSizes = {};\n  },\n\n  events: {\n    /** Every change to the axis configuration triggers this event. */\n    change: \"qx.event.type.Event\"\n  },\n\n  members: {\n    __ranges: null,\n\n    /**\n     * Get the default size of the items.\n     *\n     * @return {Integer} The default item size.\n     */\n    getDefaultItemSize() {\n      return this.defaultItemSize;\n    },\n\n    /**\n     * Set the default size the items.\n     *\n     * @param defaultItemSize {Integer} The default size of the items.\n     */\n    setDefaultItemSize(defaultItemSize) {\n      if (this.defaultItemSize !== defaultItemSize) {\n        this.defaultItemSize = defaultItemSize;\n        this.__ranges = null;\n        this.fireNonBubblingEvent(\"change\");\n      }\n    },\n\n    /**\n     * Get the number of items in the axis.\n     *\n     * @return {Integer} The number of items.\n     */\n    getItemCount() {\n      return this.itemCount;\n    },\n\n    /**\n     * Set the number of items in the axis.\n     *\n     * @param itemCount {Integer} The new item count.\n     */\n    setItemCount(itemCount) {\n      if (this.itemCount !== itemCount) {\n        this.itemCount = itemCount;\n        this.__ranges = null;\n        this.fireNonBubblingEvent(\"change\");\n      }\n    },\n\n    /**\n     * Sets the size of a specific item. This allow item, which have a size\n     * different from the default size.\n     *\n     * @param index {Integer} Index of the item to change.\n     * @param size {Integer} New size of the item.\n     */\n    setItemSize(index, size) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArgumentsCount(arguments, 2, 2);\n        this.assert(\n          size >= 0 || size === null,\n          \"'size' must be 'null' or an integer larger than 0.\"\n        );\n      }\n      if (this.customSizes[index] == size) {\n        return;\n      }\n\n      if (size === null) {\n        delete this.customSizes[index];\n      } else {\n        this.customSizes[index] = size;\n      }\n      this.__ranges = null;\n      this.fireNonBubblingEvent(\"change\");\n    },\n\n    /**\n     * Get the size of the item at the given index.\n     *\n     * @param index {Integer} Index of the item to get the size for.\n     * @return {Integer} Size of the item.\n     */\n    getItemSize(index) {\n      // custom size of 0 is not allowed\n      return this.customSizes[index] || this.defaultItemSize;\n    },\n\n    /**\n     * Reset all custom sizes set with {@link #setItemSize}.\n     */\n    resetItemSizes() {\n      this.customSizes = {};\n      this.__ranges = null;\n      this.fireNonBubblingEvent(\"change\");\n    },\n\n    /**\n     * Split the position range into disjunct intervals. Each interval starts\n     * with a custom sized cell. Each position is contained in exactly one range.\n     * The ranges are sorted according to their start position.\n     *\n     * Complexity: O(n log n) (n = number of custom sized cells)\n     *\n     * @return {Map[]} The sorted list of ranges.\n     */\n    __getRanges() {\n      if (this.__ranges) {\n        return this.__ranges;\n      }\n\n      var defaultSize = this.defaultItemSize;\n      var itemCount = this.itemCount;\n\n      var indexes = [];\n      for (var key in this.customSizes) {\n        var index = parseInt(key, 10);\n        if (index < itemCount) {\n          indexes.push(index);\n        }\n      }\n      if (indexes.length == 0) {\n        var ranges = [\n          {\n            startIndex: 0,\n            endIndex: itemCount - 1,\n            firstItemSize: defaultSize,\n            rangeStart: 0,\n            rangeEnd: itemCount * defaultSize - 1\n          }\n        ];\n\n        this.__ranges = ranges;\n        return ranges;\n      }\n\n      indexes.sort(function (a, b) {\n        return a > b ? 1 : -1;\n      });\n\n      var ranges = [];\n      var correctionSum = 0;\n\n      for (var i = 0; i < indexes.length; i++) {\n        var index = indexes[i];\n        if (index >= itemCount) {\n          break;\n        }\n\n        var cellSize = this.customSizes[index];\n        var rangeStart = index * defaultSize + correctionSum;\n\n        correctionSum += cellSize - defaultSize;\n\n        ranges[i] = {\n          startIndex: index,\n          firstItemSize: cellSize,\n          rangeStart: rangeStart\n        };\n\n        if (i > 0) {\n          ranges[i - 1].rangeEnd = rangeStart - 1;\n          ranges[i - 1].endIndex = index - 1;\n        }\n      }\n\n      // fix first range\n      if (ranges[0].rangeStart > 0) {\n        ranges.unshift({\n          startIndex: 0,\n          endIndex: ranges[0].startIndex - 1,\n          firstItemSize: defaultSize,\n          rangeStart: 0,\n          rangeEnd: ranges[0].rangeStart - 1\n        });\n      }\n\n      // fix last range\n      var lastRange = ranges[ranges.length - 1];\n      var remainingItemsSize =\n        (itemCount - lastRange.startIndex - 1) * defaultSize;\n      lastRange.rangeEnd =\n        lastRange.rangeStart + lastRange.firstItemSize + remainingItemsSize - 1;\n      lastRange.endIndex = itemCount - 1;\n\n      this.__ranges = ranges;\n      return ranges;\n    },\n\n    /**\n     * Returns the range, which contains the position\n     *\n     * Complexity: O(log n) (n = number of custom sized cells)\n     *\n     * @param position {Integer} The position.\n     * @return {Map} The range, which contains the given position.\n     */\n    __findRangeByPosition(position) {\n      var ranges = this.__ranges || this.__getRanges();\n\n      var start = 0;\n      var end = ranges.length - 1;\n\n      // binary search in the sorted ranges list\n      while (true) {\n        var pivot = start + ((end - start) >> 1);\n        var range = ranges[pivot];\n\n        if (range.rangeEnd < position) {\n          start = pivot + 1;\n        } else if (range.rangeStart > position) {\n          end = pivot - 1;\n        } else {\n          return range;\n        }\n      }\n    },\n\n    /**\n     * Get the item and the offset into the item at the given position.\n     *\n     * @param position {Integer|null} The position to get the item for.\n     * @return {Map} A map with the keys <code>index</code> and\n     *    <code>offset</code>. The index is the index of the item containing the\n     *    position and offsets specifies offset into this item. If the position\n     *    is outside of the range, <code>null</code> is returned.\n     */\n    getItemAtPosition(position) {\n      if (position < 0 || position >= this.getTotalSize()) {\n        return null;\n      }\n\n      var range = this.__findRangeByPosition(position);\n\n      var startPos = range.rangeStart;\n      var index = range.startIndex;\n      var firstItemSize = range.firstItemSize;\n\n      if (startPos + firstItemSize > position) {\n        return {\n          index: index,\n          offset: position - startPos\n        };\n      } else {\n        var defaultSize = this.defaultItemSize;\n        return {\n          index:\n            index +\n            1 +\n            Math.floor((position - startPos - firstItemSize) / defaultSize),\n          offset: (position - startPos - firstItemSize) % defaultSize\n        };\n      }\n    },\n\n    /**\n     * Returns the range, which contains the position.\n     *\n     * Complexity: O(log n) (n = number of custom sized cells)\n     *\n     * @param index {Integer} The index of the item to get the range for.\n     * @return {Map} The range for the index.\n     */\n    __findRangeByIndex(index) {\n      var ranges = this.__ranges || this.__getRanges();\n\n      var start = 0;\n      var end = ranges.length - 1;\n\n      // binary search in the sorted ranges list\n      while (true) {\n        var pivot = start + ((end - start) >> 1);\n        var range = ranges[pivot];\n\n        if (range.endIndex < index) {\n          start = pivot + 1;\n        } else if (range.startIndex > index) {\n          end = pivot - 1;\n        } else {\n          return range;\n        }\n      }\n    },\n\n    /**\n     * Get the start position of the item with the given index.\n     *\n     * @param index {Integer} The item's index.\n     * @return {Integer|null} The start position of the item. If the index is outside\n     *    of the axis range <code>null</code> is returned.\n     */\n    getItemPosition(index) {\n      if (index < 0 || index >= this.itemCount) {\n        return null;\n      }\n\n      var range = this.__findRangeByIndex(index);\n      if (range.startIndex == index) {\n        return range.rangeStart;\n      } else {\n        return (\n          range.rangeStart +\n          range.firstItemSize +\n          (index - range.startIndex - 1) * this.defaultItemSize\n        );\n      }\n    },\n\n    /**\n     * Returns the sum of all cell sizes.\n     *\n     * @return {Integer} The sum of all item sizes.\n     */\n    getTotalSize() {\n      var ranges = this.__ranges || this.__getRanges();\n      return ranges[ranges.length - 1].rangeEnd + 1;\n    },\n\n    /**\n     * Get an array of item sizes starting with the item at \"startIndex\". The\n     * sum of all sizes in the returned array is at least \"minSizeSum\".\n     *\n     * @param startIndex {Integer} The index of the first item.\n     * @param minSizeSum {Integer} The minimum sum of the item sizes.\n     * @return {Integer[]} List of item sizes starting with the size of the item\n     *    at index <code>startIndex</code>. The sum of the item sizes is at least\n     *    <code>minSizeSum</code>.\n     */\n    getItemSizes(startIndex, minSizeSum) {\n      var customSizes = this.customSizes;\n      var defaultSize = this.defaultItemSize;\n\n      var sum = 0;\n      var sizes = [];\n      var i = 0;\n      while (sum < minSizeSum) {\n        var itemSize =\n          customSizes[startIndex] != null\n            ? customSizes[startIndex]\n            : defaultSize;\n        startIndex++;\n\n        sum += itemSize;\n        sizes[i++] = itemSize;\n        if (startIndex >= this.itemCount) {\n          break;\n        }\n      }\n      return sizes;\n    }\n  },\n\n  destruct() {\n    this.customSizes = this.__ranges = null;\n  }\n});\n"
  ],
  "mappings": "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"
}