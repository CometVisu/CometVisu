{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "defaultItemSize",
    "itemCount",
    "constructor",
    "call",
    "customSizes",
    "events",
    "change",
    "members",
    "__ranges",
    "getDefaultItemSize",
    "setDefaultItemSize",
    "fireNonBubblingEvent",
    "getItemCount",
    "setItemCount",
    "setItemSize",
    "index",
    "size",
    "getItemSize",
    "resetItemSizes",
    "__getRanges",
    "__P_476_1",
    "defaultSize",
    "indexes",
    "key",
    "parseInt",
    "push",
    "length",
    "ranges",
    "startIndex",
    "endIndex",
    "firstItemSize",
    "rangeStart",
    "rangeEnd",
    "sort",
    "a",
    "b",
    "correctionSum",
    "i",
    "cellSize",
    "unshift",
    "lastRange",
    "remainingItemsSize",
    "__findRangeByPosition",
    "__P_476_2",
    "position",
    "start",
    "end",
    "pivot",
    "range",
    "getItemAtPosition",
    "getTotalSize",
    "startPos",
    "offset",
    "Math",
    "floor",
    "__findRangeByIndex",
    "__P_476_3",
    "getItemPosition",
    "getItemSizes",
    "minSizeSum",
    "sum",
    "sizes",
    "itemSize",
    "destruct",
    "ui",
    "virtual",
    "Axis"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/core/Axis.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The axis maps virtual screen coordinates to item indexes. By default all\n * items have the same size but it is also possible to give specific items\n * a different size.\n */\nqx.Class.define(\"qx.ui.virtual.core.Axis\", {\n  extend: qx.core.Object,\n\n  /**\n   * @param defaultItemSize {Integer} The default size of the items.\n   * @param itemCount {Integer} The number of item on the axis.\n   */\n  construct(defaultItemSize, itemCount) {\n    super();\n\n    this.itemCount = itemCount;\n    this.defaultItemSize = defaultItemSize;\n\n    // sparse array\n    this.customSizes = {};\n  },\n\n  events: {\n    /** Every change to the axis configuration triggers this event. */\n    change: \"qx.event.type.Event\"\n  },\n\n  members: {\n    __ranges: null,\n\n    /**\n     * Get the default size of the items.\n     *\n     * @return {Integer} The default item size.\n     */\n    getDefaultItemSize() {\n      return this.defaultItemSize;\n    },\n\n    /**\n     * Set the default size the items.\n     *\n     * @param defaultItemSize {Integer} The default size of the items.\n     */\n    setDefaultItemSize(defaultItemSize) {\n      if (this.defaultItemSize !== defaultItemSize) {\n        this.defaultItemSize = defaultItemSize;\n        this.__ranges = null;\n        this.fireNonBubblingEvent(\"change\");\n      }\n    },\n\n    /**\n     * Get the number of items in the axis.\n     *\n     * @return {Integer} The number of items.\n     */\n    getItemCount() {\n      return this.itemCount;\n    },\n\n    /**\n     * Set the number of items in the axis.\n     *\n     * @param itemCount {Integer} The new item count.\n     */\n    setItemCount(itemCount) {\n      if (this.itemCount !== itemCount) {\n        this.itemCount = itemCount;\n        this.__ranges = null;\n        this.fireNonBubblingEvent(\"change\");\n      }\n    },\n\n    /**\n     * Sets the size of a specific item. This allow item, which have a size\n     * different from the default size.\n     *\n     * @param index {Integer} Index of the item to change.\n     * @param size {Integer} New size of the item.\n     */\n    setItemSize(index, size) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArgumentsCount(arguments, 2, 2);\n        this.assert(\n          size >= 0 || size === null,\n          \"'size' must be 'null' or an integer larger than 0.\"\n        );\n      }\n      if (this.customSizes[index] == size) {\n        return;\n      }\n\n      if (size === null) {\n        delete this.customSizes[index];\n      } else {\n        this.customSizes[index] = size;\n      }\n      this.__ranges = null;\n      this.fireNonBubblingEvent(\"change\");\n    },\n\n    /**\n     * Get the size of the item at the given index.\n     *\n     * @param index {Integer} Index of the item to get the size for.\n     * @return {Integer} Size of the item.\n     */\n    getItemSize(index) {\n      // custom size of 0 is not allowed\n      return this.customSizes[index] || this.defaultItemSize;\n    },\n\n    /**\n     * Reset all custom sizes set with {@link #setItemSize}.\n     */\n    resetItemSizes() {\n      this.customSizes = {};\n      this.__ranges = null;\n      this.fireNonBubblingEvent(\"change\");\n    },\n\n    /**\n     * Split the position range into disjunct intervals. Each interval starts\n     * with a custom sized cell. Each position is contained in exactly one range.\n     * The ranges are sorted according to their start position.\n     *\n     * Complexity: O(n log n) (n = number of custom sized cells)\n     *\n     * @return {Map[]} The sorted list of ranges.\n     */\n    __getRanges() {\n      if (this.__ranges) {\n        return this.__ranges;\n      }\n\n      var defaultSize = this.defaultItemSize;\n      var itemCount = this.itemCount;\n\n      var indexes = [];\n      for (var key in this.customSizes) {\n        var index = parseInt(key, 10);\n        if (index < itemCount) {\n          indexes.push(index);\n        }\n      }\n      if (indexes.length == 0) {\n        var ranges = [\n          {\n            startIndex: 0,\n            endIndex: itemCount - 1,\n            firstItemSize: defaultSize,\n            rangeStart: 0,\n            rangeEnd: itemCount * defaultSize - 1\n          }\n        ];\n\n        this.__ranges = ranges;\n        return ranges;\n      }\n\n      indexes.sort(function (a, b) {\n        return a > b ? 1 : -1;\n      });\n\n      var ranges = [];\n      var correctionSum = 0;\n\n      for (var i = 0; i < indexes.length; i++) {\n        var index = indexes[i];\n        if (index >= itemCount) {\n          break;\n        }\n\n        var cellSize = this.customSizes[index];\n        var rangeStart = index * defaultSize + correctionSum;\n\n        correctionSum += cellSize - defaultSize;\n\n        ranges[i] = {\n          startIndex: index,\n          firstItemSize: cellSize,\n          rangeStart: rangeStart\n        };\n\n        if (i > 0) {\n          ranges[i - 1].rangeEnd = rangeStart - 1;\n          ranges[i - 1].endIndex = index - 1;\n        }\n      }\n\n      // fix first range\n      if (ranges[0].rangeStart > 0) {\n        ranges.unshift({\n          startIndex: 0,\n          endIndex: ranges[0].startIndex - 1,\n          firstItemSize: defaultSize,\n          rangeStart: 0,\n          rangeEnd: ranges[0].rangeStart - 1\n        });\n      }\n\n      // fix last range\n      var lastRange = ranges[ranges.length - 1];\n      var remainingItemsSize =\n        (itemCount - lastRange.startIndex - 1) * defaultSize;\n      lastRange.rangeEnd =\n        lastRange.rangeStart + lastRange.firstItemSize + remainingItemsSize - 1;\n      lastRange.endIndex = itemCount - 1;\n\n      this.__ranges = ranges;\n      return ranges;\n    },\n\n    /**\n     * Returns the range, which contains the position\n     *\n     * Complexity: O(log n) (n = number of custom sized cells)\n     *\n     * @param position {Integer} The position.\n     * @return {Map} The range, which contains the given position.\n     */\n    __findRangeByPosition(position) {\n      var ranges = this.__ranges || this.__getRanges();\n\n      var start = 0;\n      var end = ranges.length - 1;\n\n      // binary search in the sorted ranges list\n      while (true) {\n        var pivot = start + ((end - start) >> 1);\n        var range = ranges[pivot];\n\n        if (range.rangeEnd < position) {\n          start = pivot + 1;\n        } else if (range.rangeStart > position) {\n          end = pivot - 1;\n        } else {\n          return range;\n        }\n      }\n    },\n\n    /**\n     * Get the item and the offset into the item at the given position.\n     *\n     * @param position {Integer|null} The position to get the item for.\n     * @return {Map} A map with the keys <code>index</code> and\n     *    <code>offset</code>. The index is the index of the item containing the\n     *    position and offsets specifies offset into this item. If the position\n     *    is outside of the range, <code>null</code> is returned.\n     */\n    getItemAtPosition(position) {\n      if (position < 0 || position >= this.getTotalSize()) {\n        return null;\n      }\n\n      var range = this.__findRangeByPosition(position);\n\n      var startPos = range.rangeStart;\n      var index = range.startIndex;\n      var firstItemSize = range.firstItemSize;\n\n      if (startPos + firstItemSize > position) {\n        return {\n          index: index,\n          offset: position - startPos\n        };\n      } else {\n        var defaultSize = this.defaultItemSize;\n        return {\n          index:\n            index +\n            1 +\n            Math.floor((position - startPos - firstItemSize) / defaultSize),\n          offset: (position - startPos - firstItemSize) % defaultSize\n        };\n      }\n    },\n\n    /**\n     * Returns the range, which contains the position.\n     *\n     * Complexity: O(log n) (n = number of custom sized cells)\n     *\n     * @param index {Integer} The index of the item to get the range for.\n     * @return {Map} The range for the index.\n     */\n    __findRangeByIndex(index) {\n      var ranges = this.__ranges || this.__getRanges();\n\n      var start = 0;\n      var end = ranges.length - 1;\n\n      // binary search in the sorted ranges list\n      while (true) {\n        var pivot = start + ((end - start) >> 1);\n        var range = ranges[pivot];\n\n        if (range.endIndex < index) {\n          start = pivot + 1;\n        } else if (range.startIndex > index) {\n          end = pivot - 1;\n        } else {\n          return range;\n        }\n      }\n    },\n\n    /**\n     * Get the start position of the item with the given index.\n     *\n     * @param index {Integer} The item's index.\n     * @return {Integer|null} The start position of the item. If the index is outside\n     *    of the axis range <code>null</code> is returned.\n     */\n    getItemPosition(index) {\n      if (index < 0 || index >= this.itemCount) {\n        return null;\n      }\n\n      var range = this.__findRangeByIndex(index);\n      if (range.startIndex == index) {\n        return range.rangeStart;\n      } else {\n        return (\n          range.rangeStart +\n          range.firstItemSize +\n          (index - range.startIndex - 1) * this.defaultItemSize\n        );\n      }\n    },\n\n    /**\n     * Returns the sum of all cell sizes.\n     *\n     * @return {Integer} The sum of all item sizes.\n     */\n    getTotalSize() {\n      var ranges = this.__ranges || this.__getRanges();\n      return ranges[ranges.length - 1].rangeEnd + 1;\n    },\n\n    /**\n     * Get an array of item sizes starting with the item at \"startIndex\". The\n     * sum of all sizes in the returned array is at least \"minSizeSum\".\n     *\n     * @param startIndex {Integer} The index of the first item.\n     * @param minSizeSum {Integer} The minimum sum of the item sizes.\n     * @return {Integer[]} List of item sizes starting with the size of the item\n     *    at index <code>startIndex</code>. The sum of the item sizes is at least\n     *    <code>minSizeSum</code>.\n     */\n    getItemSizes(startIndex, minSizeSum) {\n      var customSizes = this.customSizes;\n      var defaultSize = this.defaultItemSize;\n\n      var sum = 0;\n      var sizes = [];\n      var i = 0;\n      while (sum < minSizeSum) {\n        var itemSize =\n          customSizes[startIndex] != null\n            ? customSizes[startIndex]\n            : defaultSize;\n        startIndex++;\n\n        sum += itemSize;\n        sizes[i++] = itemSize;\n        if (startIndex >= this.itemCount) {\n          break;\n        }\n      }\n      return sizes;\n    }\n  },\n\n  destruct() {\n    this.customSizes = this.__ranges = null;\n  }\n});\n"
  ],
  "mappings": "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"
}