{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "fullUpdate",
    "firstRow",
    "firstColumn",
    "rowSizes",
    "columnSizes",
    "assertArgumentsCount",
    "arguments",
    "assertPositiveInteger",
    "assertArray",
    "updateLayerWindow",
    "updateLayerData",
    "ui",
    "virtual",
    "core",
    "ILayer"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/core/ILayer.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A layer is responsible to render one aspect of a virtual pane. The pane tells\r\n * each layer to render/update a specific window of the virtual grid.\r\n */\r\nqx.Interface.define(\"qx.ui.virtual.core.ILayer\", {\r\n  members: {\r\n    /**\r\n     * Do a complete update of the layer. All cached data should be discarded.\r\n     * This method is called e.g. after changes to the grid geometry\r\n     * (row/column sizes, row/column count, ...).\r\n     *\r\n     * Note: This method can only be called after the widgets initial appear\r\n     * event has been fired because it may work with the widget's DOM elements.\r\n     *\r\n     * @param firstRow {Integer} Index of the first row to display.\r\n     * @param firstColumn {Integer} Index of the first column to display.\r\n     * @param rowSizes {Integer[]} Array of heights for each row to display.\r\n     * @param columnSizes {Integer[]} Array of widths for each column to display.\r\n     */\r\n    fullUpdate(firstRow, firstColumn, rowSizes, columnSizes) {\r\n      this.assertArgumentsCount(arguments, 6, 6);\r\n      this.assertPositiveInteger(firstRow);\r\n      this.assertPositiveInteger(firstColumn);\r\n      this.assertArray(rowSizes);\r\n      this.assertArray(columnSizes);\r\n    },\r\n\r\n    /**\r\n     * Update the layer to display a different window of the virtual grid.\r\n     * This method is called if the pane is scrolled, resized or cells\r\n     * are prefetched. The implementation can assume that no other grid\r\n     * data has been changed since the last \"fullUpdate\" of \"updateLayerWindow\"\r\n     * call.\r\n     *\r\n     * Note: This method can only be called after the widgets initial appear\r\n     * event has been fired because it may work with the widget's DOM elements.\r\n     *\r\n     * @param firstRow {Integer} Index of the first row to display.\r\n     * @param firstColumn {Integer} Index of the first column to display.\r\n     * @param rowSizes {Integer[]} Array of heights for each row to display.\r\n     * @param columnSizes {Integer[]} Array of widths for each column to display.\r\n     */\r\n    updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes) {\r\n      this.assertArgumentsCount(arguments, 6, 6);\r\n      this.assertPositiveInteger(firstRow);\r\n      this.assertPositiveInteger(firstColumn);\r\n      this.assertArray(rowSizes);\r\n      this.assertArray(columnSizes);\r\n    },\r\n\r\n    /**\r\n     * Update the layer to reflect changes in the data the layer displays.\r\n     */\r\n    updateLayerData() {}\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,2BAA2B,EAAE;IAC/CC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,WAAAA,WAACC,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,WAAW,EAAE;QACvD,IAAI,CAACC,oBAAoB,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;QAC1C,IAAI,CAACC,qBAAqB,CAACN,QAAQ,CAAC;QACpC,IAAI,CAACM,qBAAqB,CAACL,WAAW,CAAC;QACvC,IAAI,CAACM,WAAW,CAACL,QAAQ,CAAC;QAC1B,IAAI,CAACK,WAAW,CAACJ,WAAW,CAAC;MAC/B,CAAC;MAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIK,iBAAiB,WAAAA,kBAACR,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,WAAW,EAAE;QAC9D,IAAI,CAACC,oBAAoB,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;QAC1C,IAAI,CAACC,qBAAqB,CAACN,QAAQ,CAAC;QACpC,IAAI,CAACM,qBAAqB,CAACL,WAAW,CAAC;QACvC,IAAI,CAACM,WAAW,CAACL,QAAQ,CAAC;QAC1B,IAAI,CAACK,WAAW,CAACJ,WAAW,CAAC;MAC/B,CAAC;MAED;AACJ;AACA;MACIM,eAAe,WAAAA,gBAAA,EAAG,CAAC;IACrB;EACF,CAAC,CAAC;EAzEFjB,EAAE,CAACkB,EAAE,CAACC,OAAO,CAACC,IAAI,CAACC,MAAM,CAAClB,aAAa,GAAGA,aAAa;AAAC"
}