{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "rowCount",
    "columnCount",
    "cellHeight",
    "cellWidth",
    "__rowConfig",
    "virtual",
    "Axis",
    "__columnConfig",
    "__scrollTop",
    "__scrollLeft",
    "__paneHeight",
    "__paneWidth",
    "__layerWindow",
    "__jobs",
    "__layerContainer",
    "container",
    "Composite",
    "setUserBounds",
    "_add",
    "__layers",
    "addListener",
    "fullUpdate",
    "_onResize",
    "addListenerOnce",
    "_onAppear",
    "_onPointerDown",
    "_onTap",
    "_onDbltap",
    "_onContextmenu",
    "events",
    "cellTap",
    "cellContextmenu",
    "cellDbltap",
    "update",
    "scrollX",
    "scrollY",
    "properties",
    "width",
    "refine",
    "init",
    "height",
    "members",
    "__dontFireUpdate",
    "__columnSizes",
    "__rowSizes",
    "__pointerDownCoords",
    "getRowConfig",
    "getColumnConfig",
    "getChildren",
    "addLayer",
    "layer",
    "push",
    "add",
    "getLayers",
    "getVisibleLayers",
    "layers",
    "i",
    "length",
    "isVisible",
    "getScrollMaxX",
    "paneSize",
    "getInnerSize",
    "Math",
    "max",
    "getTotalSize",
    "getScrollMaxY",
    "setScrollY",
    "value",
    "old",
    "_deferredUpdateScrollPosition",
    "fireDataEvent",
    "getScrollY",
    "setScrollX",
    "getScrollX",
    "getScrollSize",
    "scrollRowIntoView",
    "row",
    "bounds",
    "getBounds",
    "event",
    "Timer",
    "once",
    "itemTop",
    "getItemPosition",
    "itemBottom",
    "getItemSize",
    "scrollTop",
    "scrollColumnIntoView",
    "column",
    "itemLeft",
    "itemRight",
    "scrollLeft",
    "scrollCellIntoView",
    "getCellAtPosition",
    "documentX",
    "documentY",
    "rowData",
    "columnData",
    "paneLocation",
    "getContentLocation",
    "top",
    "bottom",
    "left",
    "right",
    "getItemAtPosition",
    "index",
    "prefetchX",
    "minLeft",
    "maxLeft",
    "minRight",
    "maxRight",
    "paneRight",
    "rightAvailable",
    "min",
    "_setLayerWindow",
    "prefetchY",
    "minAbove",
    "maxAbove",
    "minBelow",
    "maxBelow",
    "paneBottom",
    "belowAvailable",
    "above",
    "below",
    "getContentElement",
    "getDomElement",
    "_updateScrollPosition",
    "fireEvent",
    "e",
    "getDocumentLeft",
    "getDocumentTop",
    "__handlePointerCellEvent",
    "_checkScrollBounds",
    "maxx",
    "maxy",
    "cellEventType",
    "coords",
    "pointerDownCoords",
    "fireNonBubblingEvent",
    "CellEvent",
    "syncWidget",
    "jobs",
    "_fullUpdate",
    "minWidth",
    "minHeight",
    "doFullUpdate",
    "rowCellData",
    "firstRow",
    "rowSizes",
    "getItemSizes",
    "offset",
    "layerHeight",
    "lang",
    "Array",
    "sum",
    "layerTop",
    "layerBottom",
    "columnCellData",
    "firstColumn",
    "columnSizes",
    "layerWidth",
    "layerLeft",
    "layerRight",
    "getPaddingLeft",
    "getPaddingTop",
    "updateLayerWindow",
    "__checkPaneResize",
    "scrollSize",
    "queue",
    "isUpdatePending",
    "paneWindow",
    "destruct",
    "_disposeArray",
    "_disposeObjects",
    "Pane"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/core/Pane.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * The Pane provides a window of a larger virtual grid.\n *\n * The actual rendering is performed by one or several layers ({@link ILayer}.\n * The pane computes, which cells of the virtual area is visible and instructs\n * the layers to render these cells.\n */\nqx.Class.define(\"qx.ui.virtual.core.Pane\", {\n  extend: qx.ui.core.Widget,\n\n  /**\n   * @param rowCount {Integer?0} The number of rows of the virtual grid.\n   * @param columnCount {Integer?0} The number of columns of the virtual grid.\n   * @param cellHeight {Integer?10} The default cell height.\n   * @param cellWidth {Integer?10} The default cell width.\n   */\n  construct(rowCount, columnCount, cellHeight, cellWidth) {\n    super();\n\n    this.__rowConfig = new qx.ui.virtual.core.Axis(cellHeight, rowCount);\n    this.__columnConfig = new qx.ui.virtual.core.Axis(cellWidth, columnCount);\n\n    this.__scrollTop = 0;\n    this.__scrollLeft = 0;\n\n    this.__paneHeight = 0;\n    this.__paneWidth = 0;\n\n    this.__layerWindow = {};\n    this.__jobs = {};\n\n    // create layer container. The container does not have a layout manager\n    // layers are positioned using \"setUserBounds\"\n    this.__layerContainer = new qx.ui.container.Composite();\n    this.__layerContainer.setUserBounds(0, 0, 0, 0);\n    this._add(this.__layerContainer);\n\n    this.__layers = [];\n\n    this.__rowConfig.addListener(\"change\", this.fullUpdate, this);\n    this.__columnConfig.addListener(\"change\", this.fullUpdate, this);\n\n    this.addListener(\"resize\", this._onResize, this);\n    this.addListenerOnce(\"appear\", this._onAppear, this);\n\n    this.addListener(\"pointerdown\", this._onPointerDown, this);\n    this.addListener(\"tap\", this._onTap, this);\n    this.addListener(\"dbltap\", this._onDbltap, this);\n    this.addListener(\"contextmenu\", this._onContextmenu, this);\n  },\n\n  events: {\n    /** Fired if a cell is tapped. */\n    cellTap: \"qx.ui.virtual.core.CellEvent\",\n\n    /** Fired if a cell is right-clicked. */\n    cellContextmenu: \"qx.ui.virtual.core.CellEvent\",\n\n    /** Fired if a cell is double-tapped. */\n    cellDbltap: \"qx.ui.virtual.core.CellEvent\",\n\n    /** Fired on resize of either the container or the (virtual) content. */\n    update: \"qx.event.type.Event\",\n\n    /** Fired if the pane is scrolled horizontally. */\n    scrollX: \"qx.event.type.Data\",\n\n    /** Fired if the pane is scrolled vertically. */\n    scrollY: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    // overridden\n    width: {\n      refine: true,\n      init: 400\n    },\n\n    // overridden\n    height: {\n      refine: true,\n      init: 300\n    }\n  },\n\n  members: {\n    __rowConfig: null,\n    __columnConfig: null,\n    __scrollTop: null,\n    __scrollLeft: null,\n    __paneHeight: null,\n    __paneWidth: null,\n    __layerWindow: null,\n    __jobs: null,\n    __layerContainer: null,\n    __layers: null,\n    __dontFireUpdate: null,\n    __columnSizes: null,\n    __rowSizes: null,\n    __pointerDownCoords: null,\n\n    /*\n    ---------------------------------------------------------------------------\n      ACCESSOR METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get the axis object, which defines the row numbers and the row sizes.\n     *\n     * @return {qx.ui.virtual.core.Axis} The row configuration.\n     */\n    getRowConfig() {\n      return this.__rowConfig;\n    },\n\n    /**\n     * Get the axis object, which defines the column numbers and the column sizes.\n     *\n     * @return {qx.ui.virtual.core.Axis} The column configuration.\n     */\n    getColumnConfig() {\n      return this.__columnConfig;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYER MANAGEMENT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns an array containing the layer container.\n     *\n     * @return {Object[]} The layer container array.\n     */\n    getChildren() {\n      return [this.__layerContainer];\n    },\n\n    /**\n     * Add a layer to the layer container.\n     *\n     * @param layer {qx.ui.virtual.core.ILayer} The layer to add.\n     */\n    addLayer(layer) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInterface(layer, qx.ui.virtual.core.ILayer);\n      }\n\n      this.__layers.push(layer);\n      layer.setUserBounds(0, 0, 0, 0);\n      this.__layerContainer.add(layer);\n    },\n\n    /**\n     * Get a list of all layers.\n     *\n     * @return {qx.ui.virtual.core.ILayer[]} List of the pane's layers.\n     */\n    getLayers() {\n      return this.__layers;\n    },\n\n    /**\n     * Get a list of all visible layers.\n     *\n     * @return {qx.ui.virtual.core.ILayer[]} List of the pane's visible layers.\n     */\n    getVisibleLayers() {\n      var layers = [];\n      for (var i = 0; i < this.__layers.length; i++) {\n        var layer = this.__layers[i];\n        if (layer.isVisible()) {\n          layers.push(layer);\n        }\n      }\n      return layers;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * The maximum horizontal scroll position.\n     *\n     * @return {Integer} Maximum horizontal scroll position.\n     */\n    getScrollMaxX() {\n      var paneSize = this.getInnerSize();\n\n      if (paneSize) {\n        return Math.max(0, this.__columnConfig.getTotalSize() - paneSize.width);\n      }\n\n      return 0;\n    },\n\n    /**\n     * The maximum vertical scroll position.\n     *\n     * @return {Integer} Maximum vertical scroll position.\n     */\n    getScrollMaxY() {\n      var paneSize = this.getInnerSize();\n\n      if (paneSize) {\n        return Math.max(0, this.__rowConfig.getTotalSize() - paneSize.height);\n      }\n\n      return 0;\n    },\n\n    /**\n     * Scrolls the content to the given left coordinate.\n     *\n     * @param value {Integer} The vertical position to scroll to.\n     */\n    setScrollY(value) {\n      var max = this.getScrollMaxY();\n\n      if (value < 0) {\n        value = 0;\n      } else if (value > max) {\n        value = max;\n      }\n\n      if (this.__scrollTop !== value) {\n        var old = this.__scrollTop;\n        this.__scrollTop = value;\n        this._deferredUpdateScrollPosition();\n        this.fireDataEvent(\"scrollY\", value, old);\n      }\n    },\n\n    /**\n     * Returns the vertical scroll offset.\n     *\n     * @return {Integer} The vertical scroll offset.\n     */\n    getScrollY() {\n      return this.__scrollTop;\n    },\n\n    /**\n     * Scrolls the content to the given top coordinate.\n     *\n     * @param value {Integer} The horizontal position to scroll to.\n     */\n    setScrollX(value) {\n      var max = this.getScrollMaxX();\n\n      if (value < 0) {\n        value = 0;\n      } else if (value > max) {\n        value = max;\n      }\n\n      if (value !== this.__scrollLeft) {\n        var old = this.__scrollLeft;\n        this.__scrollLeft = value;\n        this._deferredUpdateScrollPosition();\n\n        this.fireDataEvent(\"scrollX\", value, old);\n      }\n    },\n\n    /**\n     * Returns the horizontal scroll offset.\n     *\n     * @return {Integer} The horizontal scroll offset.\n     */\n    getScrollX() {\n      return this.__scrollLeft;\n    },\n\n    /**\n     * The (virtual) size of the content.\n     *\n     * @return {Map} Size of the content (keys: <code>width</code> and\n     *     <code>height</code>).\n     */\n    getScrollSize() {\n      return {\n        width: this.__columnConfig.getTotalSize(),\n        height: this.__rowConfig.getTotalSize()\n      };\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL INTO VIEW SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Scrolls a row into the visible area of the pane.\n     *\n     * @param row {Integer} The row's index.\n     */\n    scrollRowIntoView(row) {\n      var bounds = this.getBounds();\n      if (!bounds) {\n        this.addListenerOnce(\"appear\", () => {\n          // It's important that the registered events are first dispatched.\n          qx.event.Timer.once(\n            function () {\n              this.scrollRowIntoView(row);\n            },\n            this,\n            0\n          );\n        });\n\n        return;\n      }\n\n      var itemTop = this.__rowConfig.getItemPosition(row);\n      var itemBottom = itemTop + this.__rowConfig.getItemSize(row);\n      var scrollTop = this.getScrollY();\n\n      if (itemTop < scrollTop) {\n        this.setScrollY(itemTop);\n      } else if (itemBottom > scrollTop + bounds.height) {\n        this.setScrollY(itemBottom - bounds.height);\n      }\n    },\n\n    /**\n     * Scrolls a column into the visible area of the pane.\n     *\n     * @param column {Integer} The column's index.\n     */\n    scrollColumnIntoView(column) {\n      var bounds = this.getBounds();\n      if (!bounds) {\n        this.addListenerOnce(\"appear\", () => {\n          // It's important that the registered events are first dispatched.\n          qx.event.Timer.once(\n            function () {\n              this.scrollColumnIntoView(column);\n            },\n            this,\n            0\n          );\n        });\n\n        return;\n      }\n\n      var itemLeft = this.__columnConfig.getItemPosition(column);\n      var itemRight = itemLeft + this.__columnConfig.getItemSize(column);\n      var scrollLeft = this.getScrollX();\n\n      if (itemLeft < scrollLeft) {\n        this.setScrollX(itemLeft);\n      } else if (itemRight > scrollLeft + bounds.width) {\n        this.setScrollX(itemRight - bounds.width);\n      }\n    },\n\n    /**\n     * Scrolls a grid cell into the visible area of the pane.\n     *\n     * @param row {Integer} The cell's row index.\n     * @param column {Integer} The cell's column index.\n     */\n    scrollCellIntoView(column, row) {\n      var bounds = this.getBounds();\n      if (!bounds) {\n        this.addListenerOnce(\"appear\", () => {\n          // It's important that the registered events are first dispatched.\n          qx.event.Timer.once(\n            function () {\n              this.scrollCellIntoView(column, row);\n            },\n            this,\n            0\n          );\n        });\n\n        return;\n      }\n\n      this.scrollColumnIntoView(column);\n      this.scrollRowIntoView(row);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      CELL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get the grid cell at the given absolute document coordinates. This method\n     * can be used to convert the pointer position returned by\n     * {@link qx.event.type.Pointer#getDocumentLeft} and\n     * {@link qx.event.type.Pointer#getDocumentLeft} into cell coordinates.\n     *\n     * @param documentX {Integer} The x coordinate relative to the viewport\n     *    origin.\n     * @param documentY {Integer} The y coordinate relative to the viewport\n     *    origin.\n     * @return {Map|null} A map containing the <code>row</code> and <code>column</code>\n     *    of the found cell. If the coordinate is outside of the pane's bounds\n     *    or there is no cell at the coordinate <code>null</code> is returned.\n     */\n    getCellAtPosition(documentX, documentY) {\n      var rowData, columnData;\n      var paneLocation = this.getContentLocation();\n\n      if (\n        !paneLocation ||\n        documentY < paneLocation.top ||\n        documentY >= paneLocation.bottom ||\n        documentX < paneLocation.left ||\n        documentX >= paneLocation.right\n      ) {\n        return null;\n      }\n\n      rowData = this.__rowConfig.getItemAtPosition(\n        this.getScrollY() + documentY - paneLocation.top\n      );\n\n      columnData = this.__columnConfig.getItemAtPosition(\n        this.getScrollX() + documentX - paneLocation.left\n      );\n\n      if (!rowData || !columnData) {\n        return null;\n      }\n\n      return {\n        row: rowData.index,\n        column: columnData.index\n      };\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PREFETCH SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Increase the layers width beyond the needed width to improve\n     * horizontal scrolling. The layers are only resized if invisible parts\n     * left/right of the pane window are smaller than minLeft/minRight.\n     *\n     * @param minLeft {Integer} Only prefetch if the invisible part left of the\n     *    pane window if smaller than this (pixel) value.\n     * @param maxLeft {Integer} The amount of pixel the layers should reach\n     *    left of the pane window.\n     * @param minRight {Integer} Only prefetch if the invisible part right of the\n     *    pane window if smaller than this (pixel) value.\n     * @param maxRight {Integer} The amount of pixel the layers should reach\n     *    right of the pane window.\n     */\n    prefetchX(minLeft, maxLeft, minRight, maxRight) {\n      var layers = this.getVisibleLayers();\n      if (layers.length == 0) {\n        return;\n      }\n\n      var bounds = this.getBounds();\n      if (!bounds) {\n        return;\n      }\n\n      var paneRight = this.__scrollLeft + bounds.width;\n      var rightAvailable = this.__paneWidth - paneRight;\n      if (\n        this.__scrollLeft - this.__layerWindow.left <\n          Math.min(this.__scrollLeft, minLeft) ||\n        this.__layerWindow.right - paneRight <\n          Math.min(rightAvailable, minRight)\n      ) {\n        var left = Math.min(this.__scrollLeft, maxLeft);\n        var right = Math.min(rightAvailable, maxRight);\n        this._setLayerWindow(\n          layers,\n          this.__scrollLeft - left,\n          this.__scrollTop,\n          bounds.width + left + right,\n          bounds.height,\n          false\n        );\n      }\n    },\n\n    /**\n     * Increase the layers height beyond the needed height to improve\n     * vertical scrolling. The layers are only resized if invisible parts\n     * above/below the pane window are smaller than minAbove/minBelow.\n     *\n     * @param minAbove {Integer} Only prefetch if the invisible part above the\n     *    pane window if smaller than this (pixel) value.\n     * @param maxAbove {Integer} The amount of pixel the layers should reach\n     *    above the pane window.\n     * @param minBelow {Integer} Only prefetch if the invisible part below the\n     *    pane window if smaller than this (pixel) value.\n     * @param maxBelow {Integer} The amount of pixel the layers should reach\n     *    below the pane window.\n     */\n    prefetchY(minAbove, maxAbove, minBelow, maxBelow) {\n      var layers = this.getVisibleLayers();\n      if (layers.length == 0) {\n        return;\n      }\n\n      var bounds = this.getBounds();\n      if (!bounds) {\n        return;\n      }\n\n      var paneBottom = this.__scrollTop + bounds.height;\n      var belowAvailable = this.__paneHeight - paneBottom;\n      if (\n        this.__scrollTop - this.__layerWindow.top <\n          Math.min(this.__scrollTop, minAbove) ||\n        this.__layerWindow.bottom - paneBottom <\n          Math.min(belowAvailable, minBelow)\n      ) {\n        var above = Math.min(this.__scrollTop, maxAbove);\n        var below = Math.min(belowAvailable, maxBelow);\n        this._setLayerWindow(\n          layers,\n          this.__scrollLeft,\n          this.__scrollTop - above,\n          bounds.width,\n          bounds.height + above + below,\n          false\n        );\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Resize event handler.\n     *\n     * Updates the visible window.\n     */\n    _onResize() {\n      if (this.getContentElement().getDomElement()) {\n        this.__dontFireUpdate = true;\n        this._updateScrollPosition();\n        this.__dontFireUpdate = null;\n        this.fireEvent(\"update\");\n      }\n    },\n\n    /**\n     * Resize event handler. Do a full update on first appear.\n     */\n    _onAppear() {\n      this.fullUpdate();\n    },\n\n    /**\n     * Event listener for pointer down. Remembers cell position to prevent pointer event when cell position change.\n     *\n     * @param e {qx.event.type.Pointer} The incoming pointer event.\n     */\n    _onPointerDown(e) {\n      this.__pointerDownCoords = this.getCellAtPosition(\n        e.getDocumentLeft(),\n        e.getDocumentTop()\n      );\n    },\n\n    /**\n     * Event listener for pointer taps. Fires an cellTap event.\n     *\n     * @param e {qx.event.type.Pointer} The incoming pointer event.\n     */\n    _onTap(e) {\n      this.__handlePointerCellEvent(e, \"cellTap\");\n    },\n\n    /**\n     * Event listener for context menu taps. Fires an cellContextmenu event.\n     *\n     * @param e {qx.event.type.Pointer} The incoming pointer event.\n     */\n    _onContextmenu(e) {\n      this.__handlePointerCellEvent(e, \"cellContextmenu\");\n    },\n\n    /**\n     * Event listener for double taps. Fires an cellDbltap event.\n     *\n     * @param e {qx.event.type.Pointer} The incoming pointer event.\n     */\n    _onDbltap(e) {\n      this.__handlePointerCellEvent(e, \"cellDbltap\");\n    },\n\n    /**\n     * Fixed scrollbar position whenever it is out of range\n     * it can happen when removing an item from the list reducing\n     * the max value for scrollY #8976\n     */\n    _checkScrollBounds() {\n      var maxx = this.getScrollMaxX();\n      var maxy = this.getScrollMaxY();\n      if (this.__scrollLeft < 0) {\n        this.__scrollLeft = 0;\n      } else if (this.__scrollLeft > maxx) {\n        this.__scrollLeft = maxx;\n      }\n      if (this.__scrollTop < 0) {\n        this.__scrollTop = 0;\n      } else if (this.__scrollTop > maxy) {\n        this.__scrollTop = maxy;\n      }\n    },\n\n    /**\n     * Converts a pointer event into a cell event and fires the cell event if the\n     * pointer is over a cell.\n     *\n     * @param e {qx.event.type.Pointer} The pointer event.\n     * @param cellEventType {String} The name of the cell event to fire.\n     */\n    __handlePointerCellEvent(e, cellEventType) {\n      var coords = this.getCellAtPosition(\n        e.getDocumentLeft(),\n        e.getDocumentTop()\n      );\n\n      if (!coords) {\n        return;\n      }\n\n      var pointerDownCoords = this.__pointerDownCoords;\n      if (\n        pointerDownCoords == null ||\n        pointerDownCoords.row !== coords.row ||\n        pointerDownCoords.column !== coords.column\n      ) {\n        return;\n      }\n\n      this.fireNonBubblingEvent(cellEventType, qx.ui.virtual.core.CellEvent, [\n        this,\n        e,\n        coords.row,\n        coords.column\n      ]);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PANE UPDATE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    syncWidget(jobs) {\n      if (this.__jobs._fullUpdate) {\n        this._checkScrollBounds();\n        this._fullUpdate();\n      } else if (this.__jobs._updateScrollPosition) {\n        this._checkScrollBounds();\n        this._updateScrollPosition();\n      }\n      this.__jobs = {};\n    },\n\n    /**\n     * Sets the size of the layers to contain the cells at the pixel position\n     * \"left/right\" up to \"left+minHeight/right+minHeight\". The offset of the\n     * layer container is adjusted to respect the pane's scroll top and scroll\n     * left values.\n     *\n     * @param layers {qx.ui.virtual.core.ILayer[]} List of layers to update.\n     * @param left {Integer} Maximum left pixel coordinate of the layers.\n     * @param top {Integer} Maximum top pixel coordinate of the layers.\n     * @param minWidth {Integer} The minimum end coordinate of the layers will\n     *    be larger than <code>left+minWidth</code>.\n     * @param minHeight {Integer} The minimum end coordinate of the layers will\n     *    be larger than <code>top+minHeight</code>.\n     * @param doFullUpdate {Boolean?false} Whether a full update on the layer\n     *    should be performed of if only the layer window should be updated.\n     */\n    _setLayerWindow(layers, left, top, minWidth, minHeight, doFullUpdate) {\n      var rowCellData = this.__rowConfig.getItemAtPosition(top);\n      if (rowCellData) {\n        var firstRow = rowCellData.index;\n        var rowSizes = this.__rowConfig.getItemSizes(\n          firstRow,\n          minHeight + rowCellData.offset\n        );\n\n        var layerHeight = qx.lang.Array.sum(rowSizes);\n        var layerTop = top - rowCellData.offset;\n        var layerBottom = top - rowCellData.offset + layerHeight;\n      } else {\n        var firstRow = 0;\n        var rowSizes = [];\n        var layerHeight = 0;\n        var layerTop = 0;\n        var layerBottom = 0;\n      }\n\n      var columnCellData = this.__columnConfig.getItemAtPosition(left);\n      if (columnCellData) {\n        var firstColumn = columnCellData.index;\n        var columnSizes = this.__columnConfig.getItemSizes(\n          firstColumn,\n          minWidth + columnCellData.offset\n        );\n\n        var layerWidth = qx.lang.Array.sum(columnSizes);\n        var layerLeft = left - columnCellData.offset;\n        var layerRight = left - columnCellData.offset + layerWidth;\n      } else {\n        var firstColumn = 0;\n        var columnSizes = [];\n        var layerWidth = 0;\n        var layerLeft = 0;\n        var layerRight = 0;\n      }\n\n      this.__layerWindow = {\n        top: layerTop,\n        bottom: layerBottom,\n        left: layerLeft,\n        right: layerRight\n      };\n\n      this.__layerContainer.setUserBounds(\n        (this.getPaddingLeft() || 0) +\n          (this.__layerWindow.left - this.__scrollLeft),\n        (this.getPaddingTop() || 0) +\n          (this.__layerWindow.top - this.__scrollTop),\n        layerWidth,\n        layerHeight\n      );\n\n      this.__columnSizes = columnSizes;\n      this.__rowSizes = rowSizes;\n\n      for (var i = 0; i < this.__layers.length; i++) {\n        var layer = this.__layers[i];\n        layer.setUserBounds(0, 0, layerWidth, layerHeight);\n\n        if (doFullUpdate) {\n          layer.fullUpdate(firstRow, firstColumn, rowSizes, columnSizes);\n        } else {\n          layer.updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes);\n        }\n      }\n    },\n\n    /**\n     * Check whether the pane was resized and fire an {@link #update} event if\n     * it was.\n     */\n    __checkPaneResize() {\n      if (this.__dontFireUpdate) {\n        return;\n      }\n\n      var scrollSize = this.getScrollSize();\n      if (\n        this.__paneHeight !== scrollSize.height ||\n        this.__paneWidth !== scrollSize.width\n      ) {\n        this.__paneHeight = scrollSize.height;\n        this.__paneWidth = scrollSize.width;\n        this.fireEvent(\"update\");\n      }\n    },\n\n    /**\n     * Schedule a full update on all visible layers.\n     */\n    fullUpdate() {\n      this.__jobs._fullUpdate = 1;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /**\n     * Whether a full update is scheduled.\n     *\n     * @return {Boolean} Whether a full update is scheduled.\n     */\n    isUpdatePending() {\n      return !!this.__jobs._fullUpdate;\n    },\n\n    /**\n     * Perform a full update on all visible layers. All cached data will be\n     * discarded.\n     */\n    _fullUpdate() {\n      var layers = this.getVisibleLayers();\n      if (layers.length == 0) {\n        this.__checkPaneResize();\n        return;\n      }\n\n      var bounds = this.getBounds();\n\n      if (!bounds) {\n        return; // the pane has not yet been rendered -> wait for the appear event\n      }\n\n      this._setLayerWindow(\n        layers,\n        this.__scrollLeft,\n        this.__scrollTop,\n        bounds.width,\n        bounds.height,\n        true\n      );\n\n      this.__checkPaneResize();\n    },\n\n    /**\n     * Schedule an update the visible window of the grid according to the top\n     * and left scroll positions.\n     */\n    _deferredUpdateScrollPosition() {\n      this.__jobs._updateScrollPosition = 1;\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n    /**\n     * Update the visible window of the grid according to the top and left scroll\n     * positions.\n     */\n    _updateScrollPosition() {\n      var layers = this.getVisibleLayers();\n      if (layers.length == 0) {\n        this.__checkPaneResize();\n        return;\n      }\n\n      var bounds = this.getBounds();\n      if (!bounds) {\n        return; // the pane has not yet been rendered -> wait for the appear event\n      }\n\n      // the visible window of the virtual coordinate space\n      var paneWindow = {\n        top: this.__scrollTop,\n        bottom: this.__scrollTop + bounds.height,\n        left: this.__scrollLeft,\n        right: this.__scrollLeft + bounds.width\n      };\n\n      if (\n        this.__layerWindow.top <= paneWindow.top &&\n        this.__layerWindow.bottom >= paneWindow.bottom &&\n        this.__layerWindow.left <= paneWindow.left &&\n        this.__layerWindow.right >= paneWindow.right\n      ) {\n        // only update layer container offset\n        this.__layerContainer.setUserBounds(\n          (this.getPaddingLeft() || 0) +\n            (this.__layerWindow.left - paneWindow.left),\n          (this.getPaddingTop() || 0) +\n            (this.__layerWindow.top - paneWindow.top),\n          this.__layerWindow.right - this.__layerWindow.left,\n          this.__layerWindow.bottom - this.__layerWindow.top\n        );\n      } else {\n        this._setLayerWindow(\n          layers,\n          this.__scrollLeft,\n          this.__scrollTop,\n          bounds.width,\n          bounds.height,\n          false\n        );\n      }\n\n      this.__checkPaneResize();\n    }\n  },\n\n  destruct() {\n    this._disposeArray(\"__layers\");\n    this._disposeObjects(\"__rowConfig\", \"__columnConfig\", \"__layerContainer\");\n    this.__layerWindow =\n      this.__jobs =\n      this.__columnSizes =\n      this.__rowSizes =\n        null;\n  }\n});\n"
  ],
  "mappings": "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"
}