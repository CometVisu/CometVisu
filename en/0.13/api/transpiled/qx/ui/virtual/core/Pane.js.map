{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "rowCount",
    "columnCount",
    "cellHeight",
    "cellWidth",
    "constructor",
    "call",
    "__rowConfig",
    "virtual",
    "Axis",
    "__columnConfig",
    "__scrollTop",
    "__scrollLeft",
    "__paneHeight",
    "__paneWidth",
    "__layerWindow",
    "__jobs",
    "__layerContainer",
    "container",
    "Composite",
    "setUserBounds",
    "_add",
    "__layers",
    "addListener",
    "fullUpdate",
    "_onResize",
    "addListenerOnce",
    "_onAppear",
    "_onPointerDown",
    "_onTap",
    "_onDbltap",
    "_onContextmenu",
    "events",
    "cellTap",
    "cellContextmenu",
    "cellDbltap",
    "update",
    "scrollX",
    "scrollY",
    "properties",
    "width",
    "refine",
    "init",
    "height",
    "members",
    "__dontFireUpdate",
    "__columnSizes",
    "__rowSizes",
    "__pointerDownCoords",
    "getRowConfig",
    "getColumnConfig",
    "getChildren",
    "addLayer",
    "layer",
    "push",
    "add",
    "getLayers",
    "getVisibleLayers",
    "layers",
    "i",
    "length",
    "isVisible",
    "getScrollMaxX",
    "paneSize",
    "getInnerSize",
    "Math",
    "max",
    "getTotalSize",
    "getScrollMaxY",
    "setScrollY",
    "value",
    "old",
    "_deferredUpdateScrollPosition",
    "fireDataEvent",
    "getScrollY",
    "setScrollX",
    "getScrollX",
    "getScrollSize",
    "scrollRowIntoView",
    "row",
    "_this",
    "bounds",
    "getBounds",
    "event",
    "Timer",
    "once",
    "itemTop",
    "getItemPosition",
    "itemBottom",
    "getItemSize",
    "scrollTop",
    "scrollColumnIntoView",
    "column",
    "_this2",
    "itemLeft",
    "itemRight",
    "scrollLeft",
    "scrollCellIntoView",
    "_this3",
    "getCellAtPosition",
    "documentX",
    "documentY",
    "rowData",
    "columnData",
    "paneLocation",
    "getContentLocation",
    "top",
    "bottom",
    "left",
    "right",
    "getItemAtPosition",
    "index",
    "prefetchX",
    "minLeft",
    "maxLeft",
    "minRight",
    "maxRight",
    "paneRight",
    "rightAvailable",
    "min",
    "_setLayerWindow",
    "prefetchY",
    "minAbove",
    "maxAbove",
    "minBelow",
    "maxBelow",
    "paneBottom",
    "belowAvailable",
    "above",
    "below",
    "getContentElement",
    "getDomElement",
    "_updateScrollPosition",
    "fireEvent",
    "e",
    "getDocumentLeft",
    "getDocumentTop",
    "__handlePointerCellEvent",
    "_checkScrollBounds",
    "maxx",
    "maxy",
    "__P_485_14",
    "cellEventType",
    "coords",
    "pointerDownCoords",
    "fireNonBubblingEvent",
    "CellEvent",
    "syncWidget",
    "jobs",
    "_fullUpdate",
    "minWidth",
    "minHeight",
    "doFullUpdate",
    "rowCellData",
    "firstRow",
    "rowSizes",
    "getItemSizes",
    "offset",
    "layerHeight",
    "lang",
    "Array",
    "sum",
    "layerTop",
    "layerBottom",
    "columnCellData",
    "firstColumn",
    "columnSizes",
    "layerWidth",
    "layerLeft",
    "layerRight",
    "getPaddingLeft",
    "getPaddingTop",
    "updateLayerWindow",
    "__checkPaneResize",
    "__P_485_15",
    "scrollSize",
    "queue",
    "isUpdatePending",
    "paneWindow",
    "destruct",
    "_disposeArray",
    "_disposeObjects",
    "Pane"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/core/Pane.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Fabian Jakobs (fjakobs)\r\n     * Jonathan Wei√ü (jonathan_rass)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The Pane provides a window of a larger virtual grid.\r\n *\r\n * The actual rendering is performed by one or several layers ({@link ILayer}.\r\n * The pane computes, which cells of the virtual area is visible and instructs\r\n * the layers to render these cells.\r\n */\r\nqx.Class.define(\"qx.ui.virtual.core.Pane\", {\r\n  extend: qx.ui.core.Widget,\r\n\r\n  /**\r\n   * @param rowCount {Integer?0} The number of rows of the virtual grid.\r\n   * @param columnCount {Integer?0} The number of columns of the virtual grid.\r\n   * @param cellHeight {Integer?10} The default cell height.\r\n   * @param cellWidth {Integer?10} The default cell width.\r\n   */\r\n  construct(rowCount, columnCount, cellHeight, cellWidth) {\r\n    super();\r\n\r\n    this.__rowConfig = new qx.ui.virtual.core.Axis(cellHeight, rowCount);\r\n    this.__columnConfig = new qx.ui.virtual.core.Axis(cellWidth, columnCount);\r\n\r\n    this.__scrollTop = 0;\r\n    this.__scrollLeft = 0;\r\n\r\n    this.__paneHeight = 0;\r\n    this.__paneWidth = 0;\r\n\r\n    this.__layerWindow = {};\r\n    this.__jobs = {};\r\n\r\n    // create layer container. The container does not have a layout manager\r\n    // layers are positioned using \"setUserBounds\"\r\n    this.__layerContainer = new qx.ui.container.Composite();\r\n    this.__layerContainer.setUserBounds(0, 0, 0, 0);\r\n    this._add(this.__layerContainer);\r\n\r\n    this.__layers = [];\r\n\r\n    this.__rowConfig.addListener(\"change\", this.fullUpdate, this);\r\n    this.__columnConfig.addListener(\"change\", this.fullUpdate, this);\r\n\r\n    this.addListener(\"resize\", this._onResize, this);\r\n    this.addListenerOnce(\"appear\", this._onAppear, this);\r\n\r\n    this.addListener(\"pointerdown\", this._onPointerDown, this);\r\n    this.addListener(\"tap\", this._onTap, this);\r\n    this.addListener(\"dbltap\", this._onDbltap, this);\r\n    this.addListener(\"contextmenu\", this._onContextmenu, this);\r\n  },\r\n\r\n  events: {\r\n    /** Fired if a cell is tapped. */\r\n    cellTap: \"qx.ui.virtual.core.CellEvent\",\r\n\r\n    /** Fired if a cell is right-clicked. */\r\n    cellContextmenu: \"qx.ui.virtual.core.CellEvent\",\r\n\r\n    /** Fired if a cell is double-tapped. */\r\n    cellDbltap: \"qx.ui.virtual.core.CellEvent\",\r\n\r\n    /** Fired on resize of either the container or the (virtual) content. */\r\n    update: \"qx.event.type.Event\",\r\n\r\n    /** Fired if the pane is scrolled horizontally. */\r\n    scrollX: \"qx.event.type.Data\",\r\n\r\n    /** Fired if the pane is scrolled vertically. */\r\n    scrollY: \"qx.event.type.Data\"\r\n  },\r\n\r\n  properties: {\r\n    // overridden\r\n    width: {\r\n      refine: true,\r\n      init: 400\r\n    },\r\n\r\n    // overridden\r\n    height: {\r\n      refine: true,\r\n      init: 300\r\n    }\r\n  },\r\n\r\n  members: {\r\n    __rowConfig: null,\r\n    __columnConfig: null,\r\n    __scrollTop: null,\r\n    __scrollLeft: null,\r\n    __paneHeight: null,\r\n    __paneWidth: null,\r\n    __layerWindow: null,\r\n    __jobs: null,\r\n    __layerContainer: null,\r\n    __layers: null,\r\n    __dontFireUpdate: null,\r\n    __columnSizes: null,\r\n    __rowSizes: null,\r\n    __pointerDownCoords: null,\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      ACCESSOR METHODS\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Get the axis object, which defines the row numbers and the row sizes.\r\n     *\r\n     * @return {qx.ui.virtual.core.Axis} The row configuration.\r\n     */\r\n    getRowConfig() {\r\n      return this.__rowConfig;\r\n    },\r\n\r\n    /**\r\n     * Get the axis object, which defines the column numbers and the column sizes.\r\n     *\r\n     * @return {qx.ui.virtual.core.Axis} The column configuration.\r\n     */\r\n    getColumnConfig() {\r\n      return this.__columnConfig;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      LAYER MANAGEMENT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Returns an array containing the layer container.\r\n     *\r\n     * @return {Object[]} The layer container array.\r\n     */\r\n    getChildren() {\r\n      return [this.__layerContainer];\r\n    },\r\n\r\n    /**\r\n     * Add a layer to the layer container.\r\n     *\r\n     * @param layer {qx.ui.virtual.core.ILayer} The layer to add.\r\n     */\r\n    addLayer(layer) {\r\n      if (qx.core.Environment.get(\"qx.debug\")) {\r\n        this.assertInterface(layer, qx.ui.virtual.core.ILayer);\r\n      }\r\n\r\n      this.__layers.push(layer);\r\n      layer.setUserBounds(0, 0, 0, 0);\r\n      this.__layerContainer.add(layer);\r\n    },\r\n\r\n    /**\r\n     * Get a list of all layers.\r\n     *\r\n     * @return {qx.ui.virtual.core.ILayer[]} List of the pane's layers.\r\n     */\r\n    getLayers() {\r\n      return this.__layers;\r\n    },\r\n\r\n    /**\r\n     * Get a list of all visible layers.\r\n     *\r\n     * @return {qx.ui.virtual.core.ILayer[]} List of the pane's visible layers.\r\n     */\r\n    getVisibleLayers() {\r\n      var layers = [];\r\n      for (var i = 0; i < this.__layers.length; i++) {\r\n        var layer = this.__layers[i];\r\n        if (layer.isVisible()) {\r\n          layers.push(layer);\r\n        }\r\n      }\r\n      return layers;\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      SCROLL SUPPORT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * The maximum horizontal scroll position.\r\n     *\r\n     * @return {Integer} Maximum horizontal scroll position.\r\n     */\r\n    getScrollMaxX() {\r\n      var paneSize = this.getInnerSize();\r\n\r\n      if (paneSize) {\r\n        return Math.max(0, this.__columnConfig.getTotalSize() - paneSize.width);\r\n      }\r\n\r\n      return 0;\r\n    },\r\n\r\n    /**\r\n     * The maximum vertical scroll position.\r\n     *\r\n     * @return {Integer} Maximum vertical scroll position.\r\n     */\r\n    getScrollMaxY() {\r\n      var paneSize = this.getInnerSize();\r\n\r\n      if (paneSize) {\r\n        return Math.max(0, this.__rowConfig.getTotalSize() - paneSize.height);\r\n      }\r\n\r\n      return 0;\r\n    },\r\n\r\n    /**\r\n     * Scrolls the content to the given left coordinate.\r\n     *\r\n     * @param value {Integer} The vertical position to scroll to.\r\n     */\r\n    setScrollY(value) {\r\n      var max = this.getScrollMaxY();\r\n\r\n      if (value < 0) {\r\n        value = 0;\r\n      } else if (value > max) {\r\n        value = max;\r\n      }\r\n\r\n      if (this.__scrollTop !== value) {\r\n        var old = this.__scrollTop;\r\n        this.__scrollTop = value;\r\n        this._deferredUpdateScrollPosition();\r\n        this.fireDataEvent(\"scrollY\", value, old);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the vertical scroll offset.\r\n     *\r\n     * @return {Integer} The vertical scroll offset.\r\n     */\r\n    getScrollY() {\r\n      return this.__scrollTop;\r\n    },\r\n\r\n    /**\r\n     * Scrolls the content to the given top coordinate.\r\n     *\r\n     * @param value {Integer} The horizontal position to scroll to.\r\n     */\r\n    setScrollX(value) {\r\n      var max = this.getScrollMaxX();\r\n\r\n      if (value < 0) {\r\n        value = 0;\r\n      } else if (value > max) {\r\n        value = max;\r\n      }\r\n\r\n      if (value !== this.__scrollLeft) {\r\n        var old = this.__scrollLeft;\r\n        this.__scrollLeft = value;\r\n        this._deferredUpdateScrollPosition();\r\n\r\n        this.fireDataEvent(\"scrollX\", value, old);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the horizontal scroll offset.\r\n     *\r\n     * @return {Integer} The horizontal scroll offset.\r\n     */\r\n    getScrollX() {\r\n      return this.__scrollLeft;\r\n    },\r\n\r\n    /**\r\n     * The (virtual) size of the content.\r\n     *\r\n     * @return {Map} Size of the content (keys: <code>width</code> and\r\n     *     <code>height</code>).\r\n     */\r\n    getScrollSize() {\r\n      return {\r\n        width: this.__columnConfig.getTotalSize(),\r\n        height: this.__rowConfig.getTotalSize()\r\n      };\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      SCROLL INTO VIEW SUPPORT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Scrolls a row into the visible area of the pane.\r\n     *\r\n     * @param row {Integer} The row's index.\r\n     */\r\n    scrollRowIntoView(row) {\r\n      var bounds = this.getBounds();\r\n      if (!bounds) {\r\n        this.addListenerOnce(\"appear\", () => {\r\n          // It's important that the registered events are first dispatched.\r\n          qx.event.Timer.once(\r\n            function () {\r\n              this.scrollRowIntoView(row);\r\n            },\r\n            this,\r\n            0\r\n          );\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      var itemTop = this.__rowConfig.getItemPosition(row);\r\n      var itemBottom = itemTop + this.__rowConfig.getItemSize(row);\r\n      var scrollTop = this.getScrollY();\r\n\r\n      if (itemTop < scrollTop) {\r\n        this.setScrollY(itemTop);\r\n      } else if (itemBottom > scrollTop + bounds.height) {\r\n        this.setScrollY(itemBottom - bounds.height);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Scrolls a column into the visible area of the pane.\r\n     *\r\n     * @param column {Integer} The column's index.\r\n     */\r\n    scrollColumnIntoView(column) {\r\n      var bounds = this.getBounds();\r\n      if (!bounds) {\r\n        this.addListenerOnce(\"appear\", () => {\r\n          // It's important that the registered events are first dispatched.\r\n          qx.event.Timer.once(\r\n            function () {\r\n              this.scrollColumnIntoView(column);\r\n            },\r\n            this,\r\n            0\r\n          );\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      var itemLeft = this.__columnConfig.getItemPosition(column);\r\n      var itemRight = itemLeft + this.__columnConfig.getItemSize(column);\r\n      var scrollLeft = this.getScrollX();\r\n\r\n      if (itemLeft < scrollLeft) {\r\n        this.setScrollX(itemLeft);\r\n      } else if (itemRight > scrollLeft + bounds.width) {\r\n        this.setScrollX(itemRight - bounds.width);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Scrolls a grid cell into the visible area of the pane.\r\n     *\r\n     * @param row {Integer} The cell's row index.\r\n     * @param column {Integer} The cell's column index.\r\n     */\r\n    scrollCellIntoView(column, row) {\r\n      var bounds = this.getBounds();\r\n      if (!bounds) {\r\n        this.addListenerOnce(\"appear\", () => {\r\n          // It's important that the registered events are first dispatched.\r\n          qx.event.Timer.once(\r\n            function () {\r\n              this.scrollCellIntoView(column, row);\r\n            },\r\n            this,\r\n            0\r\n          );\r\n        });\r\n\r\n        return;\r\n      }\r\n\r\n      this.scrollColumnIntoView(column);\r\n      this.scrollRowIntoView(row);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      CELL SUPPORT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Get the grid cell at the given absolute document coordinates. This method\r\n     * can be used to convert the pointer position returned by\r\n     * {@link qx.event.type.Pointer#getDocumentLeft} and\r\n     * {@link qx.event.type.Pointer#getDocumentLeft} into cell coordinates.\r\n     *\r\n     * @param documentX {Integer} The x coordinate relative to the viewport\r\n     *    origin.\r\n     * @param documentY {Integer} The y coordinate relative to the viewport\r\n     *    origin.\r\n     * @return {Map|null} A map containing the <code>row</code> and <code>column</code>\r\n     *    of the found cell. If the coordinate is outside of the pane's bounds\r\n     *    or there is no cell at the coordinate <code>null</code> is returned.\r\n     */\r\n    getCellAtPosition(documentX, documentY) {\r\n      var rowData, columnData;\r\n      var paneLocation = this.getContentLocation();\r\n\r\n      if (\r\n        !paneLocation ||\r\n        documentY < paneLocation.top ||\r\n        documentY >= paneLocation.bottom ||\r\n        documentX < paneLocation.left ||\r\n        documentX >= paneLocation.right\r\n      ) {\r\n        return null;\r\n      }\r\n\r\n      rowData = this.__rowConfig.getItemAtPosition(\r\n        this.getScrollY() + documentY - paneLocation.top\r\n      );\r\n\r\n      columnData = this.__columnConfig.getItemAtPosition(\r\n        this.getScrollX() + documentX - paneLocation.left\r\n      );\r\n\r\n      if (!rowData || !columnData) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        row: rowData.index,\r\n        column: columnData.index\r\n      };\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PREFETCH SUPPORT\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Increase the layers width beyond the needed width to improve\r\n     * horizontal scrolling. The layers are only resized if invisible parts\r\n     * left/right of the pane window are smaller than minLeft/minRight.\r\n     *\r\n     * @param minLeft {Integer} Only prefetch if the invisible part left of the\r\n     *    pane window if smaller than this (pixel) value.\r\n     * @param maxLeft {Integer} The amount of pixel the layers should reach\r\n     *    left of the pane window.\r\n     * @param minRight {Integer} Only prefetch if the invisible part right of the\r\n     *    pane window if smaller than this (pixel) value.\r\n     * @param maxRight {Integer} The amount of pixel the layers should reach\r\n     *    right of the pane window.\r\n     */\r\n    prefetchX(minLeft, maxLeft, minRight, maxRight) {\r\n      var layers = this.getVisibleLayers();\r\n      if (layers.length == 0) {\r\n        return;\r\n      }\r\n\r\n      var bounds = this.getBounds();\r\n      if (!bounds) {\r\n        return;\r\n      }\r\n\r\n      var paneRight = this.__scrollLeft + bounds.width;\r\n      var rightAvailable = this.__paneWidth - paneRight;\r\n      if (\r\n        this.__scrollLeft - this.__layerWindow.left <\r\n          Math.min(this.__scrollLeft, minLeft) ||\r\n        this.__layerWindow.right - paneRight <\r\n          Math.min(rightAvailable, minRight)\r\n      ) {\r\n        var left = Math.min(this.__scrollLeft, maxLeft);\r\n        var right = Math.min(rightAvailable, maxRight);\r\n        this._setLayerWindow(\r\n          layers,\r\n          this.__scrollLeft - left,\r\n          this.__scrollTop,\r\n          bounds.width + left + right,\r\n          bounds.height,\r\n          false\r\n        );\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Increase the layers height beyond the needed height to improve\r\n     * vertical scrolling. The layers are only resized if invisible parts\r\n     * above/below the pane window are smaller than minAbove/minBelow.\r\n     *\r\n     * @param minAbove {Integer} Only prefetch if the invisible part above the\r\n     *    pane window if smaller than this (pixel) value.\r\n     * @param maxAbove {Integer} The amount of pixel the layers should reach\r\n     *    above the pane window.\r\n     * @param minBelow {Integer} Only prefetch if the invisible part below the\r\n     *    pane window if smaller than this (pixel) value.\r\n     * @param maxBelow {Integer} The amount of pixel the layers should reach\r\n     *    below the pane window.\r\n     */\r\n    prefetchY(minAbove, maxAbove, minBelow, maxBelow) {\r\n      var layers = this.getVisibleLayers();\r\n      if (layers.length == 0) {\r\n        return;\r\n      }\r\n\r\n      var bounds = this.getBounds();\r\n      if (!bounds) {\r\n        return;\r\n      }\r\n\r\n      var paneBottom = this.__scrollTop + bounds.height;\r\n      var belowAvailable = this.__paneHeight - paneBottom;\r\n      if (\r\n        this.__scrollTop - this.__layerWindow.top <\r\n          Math.min(this.__scrollTop, minAbove) ||\r\n        this.__layerWindow.bottom - paneBottom <\r\n          Math.min(belowAvailable, minBelow)\r\n      ) {\r\n        var above = Math.min(this.__scrollTop, maxAbove);\r\n        var below = Math.min(belowAvailable, maxBelow);\r\n        this._setLayerWindow(\r\n          layers,\r\n          this.__scrollLeft,\r\n          this.__scrollTop - above,\r\n          bounds.width,\r\n          bounds.height + above + below,\r\n          false\r\n        );\r\n      }\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      EVENT LISTENER\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n     * Resize event handler.\r\n     *\r\n     * Updates the visible window.\r\n     */\r\n    _onResize() {\r\n      if (this.getContentElement().getDomElement()) {\r\n        this.__dontFireUpdate = true;\r\n        this._updateScrollPosition();\r\n        this.__dontFireUpdate = null;\r\n        this.fireEvent(\"update\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Resize event handler. Do a full update on first appear.\r\n     */\r\n    _onAppear() {\r\n      this.fullUpdate();\r\n    },\r\n\r\n    /**\r\n     * Event listener for pointer down. Remembers cell position to prevent pointer event when cell position change.\r\n     *\r\n     * @param e {qx.event.type.Pointer} The incoming pointer event.\r\n     */\r\n    _onPointerDown(e) {\r\n      this.__pointerDownCoords = this.getCellAtPosition(\r\n        e.getDocumentLeft(),\r\n        e.getDocumentTop()\r\n      );\r\n    },\r\n\r\n    /**\r\n     * Event listener for pointer taps. Fires an cellTap event.\r\n     *\r\n     * @param e {qx.event.type.Pointer} The incoming pointer event.\r\n     */\r\n    _onTap(e) {\r\n      this.__handlePointerCellEvent(e, \"cellTap\");\r\n    },\r\n\r\n    /**\r\n     * Event listener for context menu taps. Fires an cellContextmenu event.\r\n     *\r\n     * @param e {qx.event.type.Pointer} The incoming pointer event.\r\n     */\r\n    _onContextmenu(e) {\r\n      this.__handlePointerCellEvent(e, \"cellContextmenu\");\r\n    },\r\n\r\n    /**\r\n     * Event listener for double taps. Fires an cellDbltap event.\r\n     *\r\n     * @param e {qx.event.type.Pointer} The incoming pointer event.\r\n     */\r\n    _onDbltap(e) {\r\n      this.__handlePointerCellEvent(e, \"cellDbltap\");\r\n    },\r\n\r\n    /**\r\n     * Fixed scrollbar position whenever it is out of range\r\n     * it can happen when removing an item from the list reducing\r\n     * the max value for scrollY #8976\r\n     */\r\n    _checkScrollBounds() {\r\n      var maxx = this.getScrollMaxX();\r\n      var maxy = this.getScrollMaxY();\r\n      if (this.__scrollLeft < 0) {\r\n        this.__scrollLeft = 0;\r\n      } else if (this.__scrollLeft > maxx) {\r\n        this.__scrollLeft = maxx;\r\n      }\r\n      if (this.__scrollTop < 0) {\r\n        this.__scrollTop = 0;\r\n      } else if (this.__scrollTop > maxy) {\r\n        this.__scrollTop = maxy;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Converts a pointer event into a cell event and fires the cell event if the\r\n     * pointer is over a cell.\r\n     *\r\n     * @param e {qx.event.type.Pointer} The pointer event.\r\n     * @param cellEventType {String} The name of the cell event to fire.\r\n     */\r\n    __handlePointerCellEvent(e, cellEventType) {\r\n      var coords = this.getCellAtPosition(\r\n        e.getDocumentLeft(),\r\n        e.getDocumentTop()\r\n      );\r\n\r\n      if (!coords) {\r\n        return;\r\n      }\r\n\r\n      var pointerDownCoords = this.__pointerDownCoords;\r\n      if (\r\n        pointerDownCoords == null ||\r\n        pointerDownCoords.row !== coords.row ||\r\n        pointerDownCoords.column !== coords.column\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      this.fireNonBubblingEvent(cellEventType, qx.ui.virtual.core.CellEvent, [\r\n        this,\r\n        e,\r\n        coords.row,\r\n        coords.column\r\n      ]);\r\n    },\r\n\r\n    /*\r\n    ---------------------------------------------------------------------------\r\n      PANE UPDATE\r\n    ---------------------------------------------------------------------------\r\n    */\r\n\r\n    // overridden\r\n    syncWidget(jobs) {\r\n      if (this.__jobs._fullUpdate) {\r\n        this._checkScrollBounds();\r\n        this._fullUpdate();\r\n      } else if (this.__jobs._updateScrollPosition) {\r\n        this._checkScrollBounds();\r\n        this._updateScrollPosition();\r\n      }\r\n      this.__jobs = {};\r\n    },\r\n\r\n    /**\r\n     * Sets the size of the layers to contain the cells at the pixel position\r\n     * \"left/right\" up to \"left+minHeight/right+minHeight\". The offset of the\r\n     * layer container is adjusted to respect the pane's scroll top and scroll\r\n     * left values.\r\n     *\r\n     * @param layers {qx.ui.virtual.core.ILayer[]} List of layers to update.\r\n     * @param left {Integer} Maximum left pixel coordinate of the layers.\r\n     * @param top {Integer} Maximum top pixel coordinate of the layers.\r\n     * @param minWidth {Integer} The minimum end coordinate of the layers will\r\n     *    be larger than <code>left+minWidth</code>.\r\n     * @param minHeight {Integer} The minimum end coordinate of the layers will\r\n     *    be larger than <code>top+minHeight</code>.\r\n     * @param doFullUpdate {Boolean?false} Whether a full update on the layer\r\n     *    should be performed of if only the layer window should be updated.\r\n     */\r\n    _setLayerWindow(layers, left, top, minWidth, minHeight, doFullUpdate) {\r\n      var rowCellData = this.__rowConfig.getItemAtPosition(top);\r\n      if (rowCellData) {\r\n        var firstRow = rowCellData.index;\r\n        var rowSizes = this.__rowConfig.getItemSizes(\r\n          firstRow,\r\n          minHeight + rowCellData.offset\r\n        );\r\n\r\n        var layerHeight = qx.lang.Array.sum(rowSizes);\r\n        var layerTop = top - rowCellData.offset;\r\n        var layerBottom = top - rowCellData.offset + layerHeight;\r\n      } else {\r\n        var firstRow = 0;\r\n        var rowSizes = [];\r\n        var layerHeight = 0;\r\n        var layerTop = 0;\r\n        var layerBottom = 0;\r\n      }\r\n\r\n      var columnCellData = this.__columnConfig.getItemAtPosition(left);\r\n      if (columnCellData) {\r\n        var firstColumn = columnCellData.index;\r\n        var columnSizes = this.__columnConfig.getItemSizes(\r\n          firstColumn,\r\n          minWidth + columnCellData.offset\r\n        );\r\n\r\n        var layerWidth = qx.lang.Array.sum(columnSizes);\r\n        var layerLeft = left - columnCellData.offset;\r\n        var layerRight = left - columnCellData.offset + layerWidth;\r\n      } else {\r\n        var firstColumn = 0;\r\n        var columnSizes = [];\r\n        var layerWidth = 0;\r\n        var layerLeft = 0;\r\n        var layerRight = 0;\r\n      }\r\n\r\n      this.__layerWindow = {\r\n        top: layerTop,\r\n        bottom: layerBottom,\r\n        left: layerLeft,\r\n        right: layerRight\r\n      };\r\n\r\n      this.__layerContainer.setUserBounds(\r\n        (this.getPaddingLeft() || 0) +\r\n          (this.__layerWindow.left - this.__scrollLeft),\r\n        (this.getPaddingTop() || 0) +\r\n          (this.__layerWindow.top - this.__scrollTop),\r\n        layerWidth,\r\n        layerHeight\r\n      );\r\n\r\n      this.__columnSizes = columnSizes;\r\n      this.__rowSizes = rowSizes;\r\n\r\n      for (var i = 0; i < this.__layers.length; i++) {\r\n        var layer = this.__layers[i];\r\n        layer.setUserBounds(0, 0, layerWidth, layerHeight);\r\n\r\n        if (doFullUpdate) {\r\n          layer.fullUpdate(firstRow, firstColumn, rowSizes, columnSizes);\r\n        } else {\r\n          layer.updateLayerWindow(firstRow, firstColumn, rowSizes, columnSizes);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Check whether the pane was resized and fire an {@link #update} event if\r\n     * it was.\r\n     */\r\n    __checkPaneResize() {\r\n      if (this.__dontFireUpdate) {\r\n        return;\r\n      }\r\n\r\n      var scrollSize = this.getScrollSize();\r\n      if (\r\n        this.__paneHeight !== scrollSize.height ||\r\n        this.__paneWidth !== scrollSize.width\r\n      ) {\r\n        this.__paneHeight = scrollSize.height;\r\n        this.__paneWidth = scrollSize.width;\r\n        this.fireEvent(\"update\");\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Schedule a full update on all visible layers.\r\n     */\r\n    fullUpdate() {\r\n      this.__jobs._fullUpdate = 1;\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    /**\r\n     * Whether a full update is scheduled.\r\n     *\r\n     * @return {Boolean} Whether a full update is scheduled.\r\n     */\r\n    isUpdatePending() {\r\n      return !!this.__jobs._fullUpdate;\r\n    },\r\n\r\n    /**\r\n     * Perform a full update on all visible layers. All cached data will be\r\n     * discarded.\r\n     */\r\n    _fullUpdate() {\r\n      var layers = this.getVisibleLayers();\r\n      if (layers.length == 0) {\r\n        this.__checkPaneResize();\r\n        return;\r\n      }\r\n\r\n      var bounds = this.getBounds();\r\n\r\n      if (!bounds) {\r\n        return; // the pane has not yet been rendered -> wait for the appear event\r\n      }\r\n\r\n      this._setLayerWindow(\r\n        layers,\r\n        this.__scrollLeft,\r\n        this.__scrollTop,\r\n        bounds.width,\r\n        bounds.height,\r\n        true\r\n      );\r\n\r\n      this.__checkPaneResize();\r\n    },\r\n\r\n    /**\r\n     * Schedule an update the visible window of the grid according to the top\r\n     * and left scroll positions.\r\n     */\r\n    _deferredUpdateScrollPosition() {\r\n      this.__jobs._updateScrollPosition = 1;\r\n      qx.ui.core.queue.Widget.add(this);\r\n    },\r\n\r\n    /**\r\n     * Update the visible window of the grid according to the top and left scroll\r\n     * positions.\r\n     */\r\n    _updateScrollPosition() {\r\n      var layers = this.getVisibleLayers();\r\n      if (layers.length == 0) {\r\n        this.__checkPaneResize();\r\n        return;\r\n      }\r\n\r\n      var bounds = this.getBounds();\r\n      if (!bounds) {\r\n        return; // the pane has not yet been rendered -> wait for the appear event\r\n      }\r\n\r\n      // the visible window of the virtual coordinate space\r\n      var paneWindow = {\r\n        top: this.__scrollTop,\r\n        bottom: this.__scrollTop + bounds.height,\r\n        left: this.__scrollLeft,\r\n        right: this.__scrollLeft + bounds.width\r\n      };\r\n\r\n      if (\r\n        this.__layerWindow.top <= paneWindow.top &&\r\n        this.__layerWindow.bottom >= paneWindow.bottom &&\r\n        this.__layerWindow.left <= paneWindow.left &&\r\n        this.__layerWindow.right >= paneWindow.right\r\n      ) {\r\n        // only update layer container offset\r\n        this.__layerContainer.setUserBounds(\r\n          (this.getPaddingLeft() || 0) +\r\n            (this.__layerWindow.left - paneWindow.left),\r\n          (this.getPaddingTop() || 0) +\r\n            (this.__layerWindow.top - paneWindow.top),\r\n          this.__layerWindow.right - this.__layerWindow.left,\r\n          this.__layerWindow.bottom - this.__layerWindow.top\r\n        );\r\n      } else {\r\n        this._setLayerWindow(\r\n          layers,\r\n          this.__scrollLeft,\r\n          this.__scrollTop,\r\n          bounds.width,\r\n          bounds.height,\r\n          false\r\n        );\r\n      }\r\n\r\n      this.__checkPaneResize();\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this._disposeArray(\"__layers\");\r\n    this._disposeObjects(\"__rowConfig\", \"__columnConfig\", \"__layerContainer\");\r\n    this.__layerWindow =\r\n      this.__jobs =\r\n      this.__columnSizes =\r\n      this.__rowSizes =\r\n        null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}