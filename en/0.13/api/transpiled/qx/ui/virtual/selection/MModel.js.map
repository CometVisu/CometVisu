{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "_initSelectionManager",
    "__selection",
    "data",
    "Array",
    "addListener",
    "_onChangeSelection",
    "_applySelection",
    "properties",
    "selectionMode",
    "check",
    "init",
    "apply",
    "dragSelection",
    "quickSelection",
    "events",
    "changeSelection",
    "changeValue",
    "members",
    "_manager",
    "__ignoreChangeSelection",
    "__ignoreManagerChangeSelection",
    "setValue",
    "selection",
    "resetSelection",
    "setSelection",
    "getValue",
    "getSelection",
    "resetValue",
    "self",
    "selectionDelegate",
    "isItemSelectable",
    "row",
    "_provider",
    "isSelectable",
    "styleSelectable",
    "type",
    "wasAdded",
    "styleSelectabled",
    "styleUnselectabled",
    "ui",
    "virtual",
    "Row",
    "getPane",
    "attachPointerEvents",
    "attachKeyEvents",
    "_onManagerChangeSelection",
    "setAutoScrollIntoView",
    "value",
    "_autoScrollIntoView",
    "getAutoScrollIntoView",
    "_updateSelection",
    "replace",
    "removeAll",
    "initSelection",
    "warn",
    "classname",
    "old",
    "_applySelectionMode",
    "setMode",
    "_applyDragSelection",
    "setDrag",
    "_applyQuickSelection",
    "setQuick",
    "e",
    "newSelection",
    "i",
    "getLength",
    "item",
    "getItem",
    "selectables",
    "_getSelectables",
    "index",
    "indexOf",
    "_reverseLookup",
    "push",
    "_beforeApplySelection",
    "lang",
    "Type",
    "isFunction",
    "equals",
    "replaceSelection",
    "ex",
    "selectItem",
    "length",
    "__synchronizeSelection",
    "_afterApplySelection",
    "fireDataEvent",
    "getData",
    "getOldData",
    "__isSelectionEquals",
    "managerSelection",
    "_getDataFromRow",
    "__replaceSelection",
    "args",
    "concat",
    "temp",
    "splice",
    "dispose",
    "_applyDefaultSelection",
    "destruct",
    "MModel"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/selection/MModel.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Implements the different selection modes single, multi, additive and one\n * selection with there drag and quick selection.\n *\n * Example how to use selection:\n * <pre class=\"javascript\">\n * var rawData = [];\n * for (var i = 0; i < 2500; i++) {\n *  rawData[i] = \"Item No \" + i;\n * }\n *\n * var model = qx.data.marshal.Json.createModel(rawData);\n * var list = new qx.ui.list.List(model);\n *\n * // Pre-Select \"Item No 20\"\n * list.getSelection().push(model.getItem(20));\n *\n * // log change selection\n * list.getSelection().addListener(\"change\", function(e) {\n *   this.debug(\"Selection: \" + list.getSelection().getItem(0));\n * }, this);\n * </pre>\n *\n * @internal\n */\nqx.Mixin.define(\"qx.ui.virtual.selection.MModel\", {\n  construct() {\n    this._initSelectionManager();\n    this.__selection = new qx.data.Array();\n    this.__selection.addListener(\"change\", this._onChangeSelection, this);\n    this._applySelection(this.__selection, null);\n  },\n\n  properties: {\n    /** Current selected items */\n    /* psuedo property - implemented manually in code below\n    selection :\n    {\n      check : \"qx.data.Array\",\n      event : \"changeSelection\",\n      apply : \"_applySelection\",\n      nullable : false,\n      deferredInit : true\n    },\n    */\n\n    /**\n     * The selection mode to use.\n     *\n     * For further details please have a look at:\n     * {@link qx.ui.core.selection.Abstract#mode}\n     */\n    selectionMode: {\n      check: [\"single\", \"multi\", \"additive\", \"one\"],\n      init: \"single\",\n      apply: \"_applySelectionMode\"\n    },\n\n    /**\n     * Enable drag selection (multi selection of items through\n     * dragging the pointer in pressed states).\n     *\n     * Only possible for the selection modes <code>multi</code> and <code>additive</code>\n     */\n    dragSelection: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyDragSelection\"\n    },\n\n    /**\n     * Enable quick selection mode, where no tap is needed to change the selection.\n     *\n     * Only possible for the modes <code>single</code> and <code>one</code>.\n     */\n    quickSelection: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyQuickSelection\"\n    }\n  },\n\n  events: {\n    /**\n     * This event is fired as soon as the content of the selection property changes, but\n     * this is not equal to the change of the selection of the widget. If the selection\n     * of the widget changes, the content of the array stored in the selection property\n     * changes. This means you have to listen to the change event of the selection array\n     * to get an event as soon as the user changes the selected item.\n     * <pre class=\"javascript\">obj.getSelection().addListener(\"change\", listener, this);</pre>\n     */\n    changeSelection: \"qx.event.type.Data\",\n\n    /** Fires after the value was modified */\n    changeValue: \"qx.event.type.Data\"\n  },\n\n  members: {\n    /** @type {qx.ui.virtual.selection.Row} selection manager */\n    _manager: null,\n\n    /** @type {Boolean} flag to ignore the selection change from {@link #selection} */\n    __ignoreChangeSelection: false,\n\n    /** @type {Boolean} flag to ignore the selection change from <code>_manager</code> */\n    __ignoreManagerChangeSelection: false,\n\n    __selection: null,\n\n    /**\n     * setValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @param selection {qx.data.IListData|null} List data to select as value.\n     * @return {null} The status of this operation.\n     */\n    setValue(selection) {\n      if (null === selection) {\n        this.resetSelection();\n      } else {\n        this.setSelection(selection);\n      }\n\n      return null;\n    },\n\n    /**\n     * getValue implements part of the {@link qx.ui.form.IField} interface.\n     *\n     * @return {qx.data.IListData} The current selection.\n     */\n    getValue() {\n      return this.getSelection();\n    },\n\n    /**\n     * resetValue implements part of the {@link qx.ui.form.IField} interface.\n     */\n    resetValue() {\n      this.resetSelection();\n    },\n\n    /**\n     * Initialize the selection manager with his delegate.\n     */\n    _initSelectionManager() {\n      var self = this;\n      var selectionDelegate = {\n        isItemSelectable(row) {\n          return self._provider.isSelectable(row);\n        },\n\n        styleSelectable(row, type, wasAdded) {\n          if (type != \"selected\") {\n            return;\n          }\n\n          if (wasAdded) {\n            self._provider.styleSelectabled(row);\n          } else {\n            self._provider.styleUnselectabled(row);\n          }\n        }\n      };\n\n      this._manager = new qx.ui.virtual.selection.Row(\n        this.getPane(),\n        selectionDelegate\n      );\n\n      this._manager.attachPointerEvents(this.getPane());\n      this._manager.attachKeyEvents(this);\n      this._manager.addListener(\n        \"changeSelection\",\n        this._onManagerChangeSelection,\n        this\n      );\n    },\n\n    /**\n     * Determines, if automatically scrolling of selected item is active.\n     * Set <code>false</code> to suspend auto scrolling.\n     *\n     * @param value {Boolean} Set <code>false</code> to suspend auto scrolling.\n     */\n    setAutoScrollIntoView(value) {\n      this._manager._autoScrollIntoView = value;\n    },\n\n    /**\n     * Returns true, if automatically scrolling of selected item is active.\n     *\n     * @return {Boolean} Returns <code>false</code> if auto scrolling is suspended.\n     */\n    getAutoScrollIntoView() {\n      return this._manager._autoScrollIntoView;\n    },\n\n    /**\n     * Method to update the selection, this method can be used when the model has\n     * changes.\n     */\n    _updateSelection() {\n      if (this._manager == null) {\n        return;\n      }\n\n      this._onChangeSelection();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Setter for selection property; takes the selection on, and does not change the\n     * array instance in `this.selection`\n     *\n     * @param value {qx.data.Array} the new selection\n     */\n    setSelection(value) {\n      if (value) {\n        this.__selection.replace(value);\n      } else {\n        this.__selection.removeAll();\n      }\n    },\n\n    /**\n     * Getter for selection property\n     *\n     * @return {qx.data.Array}\n     */\n    getSelection() {\n      return this.__selection;\n    },\n\n    /**\n     * Reset for selection property\n     */\n    resetSelection() {\n      this.__selection.removeAll();\n    },\n\n    /**\n     * Init for selection property; takes the selection on, and does not change the\n     * array instance in `this.selection`\n     *\n     * @param value {qx.data.Array} the new selection\n     */\n    initSelection(value) {\n      this.warn(\n        \"Using initSelection on \" +\n          this.classname +\n          \" is probably not what you intended - the selection instance does not change\"\n      );\n\n      this.setSelection(value);\n    },\n\n    /**\n     * Apply method for selection property\n     *\n     * @param value {qx.data.Array} new value\n     * @param old {qx.data.Array} old value\n     */\n    _applySelection(value, old) {\n      this._onChangeSelection();\n    },\n\n    // apply method\n    _applySelectionMode(value, old) {\n      this._manager.setMode(value);\n    },\n\n    // apply method\n    _applyDragSelection(value, old) {\n      this._manager.setDrag(value);\n    },\n\n    // apply method\n    _applyQuickSelection(value, old) {\n      this._manager.setQuick(value);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      SELECTION HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event handler for the internal selection change {@link #selection}.\n     *\n     * @param e {qx.event.type.Data} the change event.\n     */\n    _onChangeSelection(e) {\n      if (this.__ignoreManagerChangeSelection == true) {\n        return;\n      }\n\n      this.__ignoreChangeSelection = true;\n      var selection = this.getSelection();\n\n      var newSelection = [];\n      for (var i = 0; i < selection.getLength(); i++) {\n        var item = selection.getItem(i);\n        var selectables = this._getSelectables();\n        var index = -1;\n\n        if (selectables != null) {\n          index = selectables.indexOf(item);\n        }\n\n        var row = this._reverseLookup(index);\n\n        if (row >= 0) {\n          newSelection.push(row);\n        }\n      }\n\n      if (\n        this._beforeApplySelection != null &&\n        qx.lang.Type.isFunction(this._beforeApplySelection)\n      ) {\n        this._beforeApplySelection(newSelection);\n      }\n\n      try {\n        if (!qx.lang.Array.equals(newSelection, this._manager.getSelection())) {\n          this._manager.replaceSelection(newSelection);\n        }\n      } catch (ex) {\n        this._manager.selectItem(newSelection[newSelection.length - 1]);\n      }\n      this.__synchronizeSelection();\n\n      if (\n        this._afterApplySelection != null &&\n        qx.lang.Type.isFunction(this._afterApplySelection)\n      ) {\n        this._afterApplySelection();\n      }\n\n      this.__ignoreChangeSelection = false;\n    },\n\n    /**\n     * Event handler for the selection change from the <code>_manager</code>.\n     *\n     * @param e {qx.event.type.Data} the change event.\n     */\n    _onManagerChangeSelection(e) {\n      if (this.__ignoreChangeSelection == true) {\n        return;\n      }\n\n      this.__ignoreManagerChangeSelection = true;\n\n      this.__synchronizeSelection();\n\n      this.__ignoreManagerChangeSelection = false;\n\n      this.fireDataEvent(\"changeValue\", e.getData(), e.getOldData());\n    },\n\n    /**\n     * Synchronized the selection form the manager with the local one.\n     */\n    __synchronizeSelection() {\n      if (this.__isSelectionEquals()) {\n        return;\n      }\n\n      var managerSelection = this._manager.getSelection();\n      var newSelection = [];\n\n      for (var i = 0; i < managerSelection.length; i++) {\n        var item = this._getDataFromRow(managerSelection[i]);\n\n        if (item != null) {\n          newSelection.push(item);\n        }\n      }\n\n      this.__replaceSelection(newSelection);\n    },\n\n    /**\n     * Replace the current selection with the passed selection Array.\n     *\n     * @param newSelection {qx.data.Array} The new selection.\n     */\n    __replaceSelection(newSelection) {\n      var selection = this.getSelection();\n      if (newSelection.length > 0) {\n        var args = [0, selection.getLength()];\n        args = args.concat(newSelection);\n        // dispose data array returned by splice to avoid memory leak\n        var temp = selection.splice.apply(selection, args);\n        temp.dispose();\n      } else {\n        selection.removeAll();\n      }\n    },\n\n    /**\n     * Checks whether the local and the manager selection are equal.\n     *\n     * @return {Boolean} <code>true</code> if the selections are equal,\n     *   <code>false</code> otherwise.\n     */\n    __isSelectionEquals() {\n      var selection = this.getSelection();\n      var managerSelection = this._manager.getSelection();\n\n      if (selection.getLength() !== managerSelection.length) {\n        return false;\n      }\n\n      for (var i = 0; i < selection.getLength(); i++) {\n        var item = selection.getItem(i);\n        var selectables = this._getSelectables();\n        var index = -1;\n\n        if (selectables != null) {\n          index = selectables.indexOf(item);\n        }\n        var row = this._reverseLookup(index);\n\n        if (row !== managerSelection[i]) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Helper Method to select default item.\n     */\n    _applyDefaultSelection() {\n      if (this._manager != null) {\n        this._manager._applyDefaultSelection();\n      }\n    }\n  },\n\n  destruct() {\n    this._manager.dispose();\n    this._manager = null;\n    if (this.__selection) {\n      this.__selection.dispose();\n    }\n  }\n});\n"
  ],
  "mappings": "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"
}