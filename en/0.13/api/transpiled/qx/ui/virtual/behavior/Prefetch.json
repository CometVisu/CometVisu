{
  "className": "qx.ui.virtual.behavior.Prefetch",
  "packageName": "qx.ui.virtual.behavior",
  "name": "Prefetch",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 26,
        "column": 0,
        "index": 802
      },
      "end": {
        "line": 224,
        "column": 3,
        "index": 7066
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>Behavior to support pre-rendering of invisible areas of a virtual scroller.\n If applied to a scroller it will start a timer and increase the rendered area\n of the scroller after a certain period of time. Subsequent scrolling will not\n have to render this pre-computed area again.</p>"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 51,
        "column": 2,
        "index": 1908
      },
      "end": {
        "line": 86,
        "column": 3,
        "index": 2947
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "scroller {qx.ui.virtual.core.Scroller} The scroller to prefetch",
          "paramName": "scroller",
          "description": " The scroller to prefetch",
          "type": "qx.ui.virtual.core.Scroller"
        },
        {
          "name": "@param",
          "body": "settings {Map} This map contains minimum and maximum pixels to\n prefetch near the view port.\n <ul>\n   <li>minLeft: minimum pixels to prefetch left to the view port</li>\n   <li>maxLeft: maximum pixels to prefetch left to the view port</li>\n   <li>minRight: minimum pixels to prefetch right to the view port</li>\n   <li>maxRight: maximum pixels to prefetch right to the view port</li>\n   <li>minAbove: minimum pixels to prefetch above the view port</li>\n   <li>maxAbove: maximum pixels to prefetch above the view port</li>\n   <li>minBelow: minimum pixels to prefetch below the view port</li>\n   <li>maxBelow: maximum pixels to prefetch below the view port</li>\n </ul>",
          "paramName": "settings",
          "description": " This map contains minimum and maximum pixels to\n prefetch near the view port.\n <ul>\n   <li>minLeft: minimum pixels to prefetch left to the view port</li>\n   <li>maxLeft: maximum pixels to prefetch left to the view port</li>\n   <li>minRight: minimum pixels to prefetch right to the view port</li>\n   <li>maxRight: maximum pixels to prefetch right to the view port</li>\n   <li>minAbove: minimum pixels to prefetch above the view port</li>\n   <li>maxAbove: maximum pixels to prefetch above the view port</li>\n   <li>minBelow: minimum pixels to prefetch below the view port</li>\n   <li>maxBelow: maximum pixels to prefetch below the view port</li>\n </ul>",
          "type": "Map"
        }
      ]
    }
  },
  "properties": {
    "scroller": {
      "location": {
        "start": {
          "line": 96,
          "column": 4,
          "index": 3243
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 3379
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.ui.virtual.core.Scroller} The scroller to prefetch"
          }
        ]
      },
      "name": "scroller",
      "propertyType": "new",
      "apply": "_applyScroller",
      "nullable": true,
      "allowNull": true,
      "check": "qx.ui.virtual.core.Scroller"
    },
    "interval": {
      "location": {
        "start": {
          "line": 104,
          "column": 4,
          "index": 3433
        },
        "end": {
          "line": 108,
          "column": 5,
          "index": 3525
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Polling interval"
          }
        ]
      },
      "name": "interval",
      "propertyType": "new",
      "apply": "_applyInterval",
      "init": 200,
      "check": "Integer",
      "defaultValue": 200
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "__prefetchX": {
      "location": {
        "start": {
          "line": 118,
          "column": 4,
          "index": 3743
        },
        "end": {
          "line": 118,
          "column": 21,
          "index": 3760
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__prefetchY": {
      "location": {
        "start": {
          "line": 119,
          "column": 4,
          "index": 3767
        },
        "end": {
          "line": 119,
          "column": 21,
          "index": 3784
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__timer": {
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3791
        },
        "end": {
          "line": 120,
          "column": 17,
          "index": 3804
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onScrollXId": {
      "location": {
        "start": {
          "line": 121,
          "column": 4,
          "index": 3811
        },
        "end": {
          "line": 121,
          "column": 23,
          "index": 3830
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__onScrollYId": {
      "location": {
        "start": {
          "line": 122,
          "column": 4,
          "index": 3837
        },
        "end": {
          "line": 122,
          "column": 23,
          "index": 3856
        }
      },
      "type": "variable",
      "access": "private"
    },
    "setPrefetchX": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4264
        },
        "end": {
          "line": 134,
          "column": 5,
          "index": 4389
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Configure horizontal prefetching</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "minLeft {Integer} minimum pixels to prefetch left to the view port",
            "paramName": "minLeft",
            "description": " minimum pixels to prefetch left to the view port",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxLeft {Integer} maximum pixels to prefetch left to the view port",
            "paramName": "maxLeft",
            "description": " maximum pixels to prefetch left to the view port",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "minRight {Integer} minimum pixels to prefetch right to the view port",
            "paramName": "minRight",
            "description": " minimum pixels to prefetch right to the view port",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxRight {Integer} maximum pixels to prefetch right to the view port",
            "paramName": "maxRight",
            "description": " maximum pixels to prefetch right to the view port",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setPrefetchY": {
      "location": {
        "start": {
          "line": 144,
          "column": 4,
          "index": 4787
        },
        "end": {
          "line": 146,
          "column": 5,
          "index": 4916
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Configure vertical prefetching</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "minAbove {Integer} minimum pixels to prefetch above the view port",
            "paramName": "minAbove",
            "description": " minimum pixels to prefetch above the view port",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxAbove {Integer} maximum pixels to prefetch above the view port",
            "paramName": "maxAbove",
            "description": " maximum pixels to prefetch above the view port",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "minBelow {Integer} minimum pixels to prefetch below the view port",
            "paramName": "minBelow",
            "description": " minimum pixels to prefetch below the view port",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "maxBelow {Integer} maximum pixels to prefetch below the view port",
            "paramName": "maxBelow",
            "description": " maximum pixels to prefetch below the view port",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onInterval": {
      "location": {
        "start": {
          "line": 151,
          "column": 4,
          "index": 4970
        },
        "end": {
          "line": 163,
          "column": 5,
          "index": 5378
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Update prefetching</p>"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyScroller": {
      "location": {
        "start": {
          "line": 166,
          "column": 4,
          "index": 5410
        },
        "end": {
          "line": 205,
          "column": 5,
          "index": 6614
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "scroller"
      ]
    },
    "_applyInterval": {
      "location": {
        "start": {
          "line": 208,
          "column": 4,
          "index": 6646
        },
        "end": {
          "line": 210,
          "column": 5,
          "index": 6721
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "protected",
      "applyFor": [
        "interval"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getScroller": {
      "type": "function",
      "name": "getScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>scroller</code>.\n\nFor further details take a look at the property definition: {@link #scroller}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.virtual.core.Scroller",
            "desc": "Returns the value for scroller"
          }
        ]
      }
    },
    "setScroller": {
      "type": "function",
      "name": "setScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>scroller</code>.\n\nFor further details take a look at the property definition: {@link #scroller}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.virtual.core.Scroller",
            "paramName": "value",
            "desc": "Value for scroller"
          }
        ]
      }
    },
    "resetScroller": {
      "type": "function",
      "name": "resetScroller",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>scroller</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #scroller}."
          }
        ]
      }
    },
    "getInterval": {
      "type": "function",
      "name": "getInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>interval</code>.\n\nFor further details take a look at the property definition: {@link #interval}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for interval"
          }
        ]
      }
    },
    "setInterval": {
      "type": "function",
      "name": "setInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>interval</code>.\n\nFor further details take a look at the property definition: {@link #interval}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for interval"
          }
        ]
      }
    },
    "resetInterval": {
      "type": "function",
      "name": "resetInterval",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>interval</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #interval}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 219,
        "column": 2,
        "index": 6928
      },
      "end": {
        "line": 223,
        "column": 3,
        "index": 7061
      }
    },
    "jsdoc": {}
  },
  "descendants": []
}