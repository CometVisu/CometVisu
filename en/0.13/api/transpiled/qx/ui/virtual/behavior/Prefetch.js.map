{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "scroller",
    "settings",
    "setPrefetchX",
    "minLeft",
    "maxLeft",
    "minRight",
    "maxRight",
    "setPrefetchY",
    "minAbove",
    "maxAbove",
    "minBelow",
    "maxBelow",
    "__timer",
    "event",
    "Timer",
    "getInterval",
    "addListener",
    "_onInterval",
    "setScroller",
    "properties",
    "check",
    "nullable",
    "init",
    "apply",
    "interval",
    "members",
    "__prefetchX",
    "__prefetchY",
    "__onScrollXId",
    "__onScrollYId",
    "px",
    "getScroller",
    "getPane",
    "prefetchX",
    "ui",
    "queue",
    "Manager",
    "flush",
    "py",
    "prefetchY",
    "_applyScroller",
    "value",
    "old",
    "getChildControl",
    "removeListenerById",
    "getContentElement",
    "getDomElement",
    "stop",
    "addListenerOnce",
    "start",
    "restart",
    "_applyInterval",
    "setInterval",
    "destruct",
    "_disposeObjects",
    "virtual",
    "behavior",
    "Prefetch"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/behavior/Prefetch.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Behavior to support pre-rendering of invisible areas of a virtual scroller.\n * If applied to a scroller it will start a timer and increase the rendered area\n * of the scroller after a certain period of time. Subsequent scrolling will not\n * have to render this pre-computed area again.\n *\n */\nqx.Class.define(\"qx.ui.virtual.behavior.Prefetch\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param scroller {qx.ui.virtual.core.Scroller} The scroller to prefetch\n   * @param settings {Map} This map contains minimum and maximum pixels to\n   * prefetch near the view port.\n   * <ul>\n   *   <li>minLeft: minimum pixels to prefetch left to the view port</li>\n   *   <li>maxLeft: maximum pixels to prefetch left to the view port</li>\n   *   <li>minRight: minimum pixels to prefetch right to the view port</li>\n   *   <li>maxRight: maximum pixels to prefetch right to the view port</li>\n   *   <li>minAbove: minimum pixels to prefetch above the view port</li>\n   *   <li>maxAbove: maximum pixels to prefetch above the view port</li>\n   *   <li>minBelow: minimum pixels to prefetch below the view port</li>\n   *   <li>maxBelow: maximum pixels to prefetch below the view port</li>\n   * </ul>\n   */\n\n  construct(scroller, settings) {\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      this.assertObject(settings);\n      this.assertPositiveInteger(settings.minLeft);\n      this.assertPositiveInteger(settings.maxLeft);\n      this.assertPositiveInteger(settings.minRight);\n      this.assertPositiveInteger(settings.maxRight);\n      this.assertPositiveInteger(settings.minAbove);\n      this.assertPositiveInteger(settings.maxAbove);\n      this.assertPositiveInteger(settings.minBelow);\n      this.assertPositiveInteger(settings.maxBelow);\n    }\n\n    super();\n\n    this.setPrefetchX(\n      settings.minLeft,\n      settings.maxLeft,\n      settings.minRight,\n      settings.maxRight\n    );\n\n    this.setPrefetchY(\n      settings.minAbove,\n      settings.maxAbove,\n      settings.minBelow,\n      settings.maxBelow\n    );\n\n    this.__timer = new qx.event.Timer(this.getInterval());\n    this.__timer.addListener(\"interval\", this._onInterval, this);\n\n    if (scroller) {\n      this.setScroller(scroller);\n    }\n  },\n\n  /*\n   *****************************************************************************\n      PROPERTIES\n   *****************************************************************************\n   */\n\n  properties: {\n    /** @type {qx.ui.virtual.core.Scroller} The scroller to prefetch */\n    scroller: {\n      check: \"qx.ui.virtual.core.Scroller\",\n      nullable: true,\n      init: null,\n      apply: \"_applyScroller\"\n    },\n\n    /** @type {Integer} Polling interval */\n    interval: {\n      check: \"Integer\",\n      init: 200,\n      apply: \"_applyInterval\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __prefetchX: null,\n    __prefetchY: null,\n    __timer: null,\n    __onScrollXId: null,\n    __onScrollYId: null,\n\n    /**\n     * Configure horizontal prefetching\n     *\n     * @param minLeft {Integer} minimum pixels to prefetch left to the view port\n     * @param maxLeft {Integer} maximum pixels to prefetch left to the view port\n     * @param minRight {Integer} minimum pixels to prefetch right to the view port\n     * @param maxRight {Integer} maximum pixels to prefetch right to the view port\n     */\n    setPrefetchX(minLeft, maxLeft, minRight, maxRight) {\n      this.__prefetchX = [minLeft, maxLeft, minRight, maxRight];\n    },\n\n    /**\n     * Configure vertical prefetching\n     *\n     * @param minAbove {Integer} minimum pixels to prefetch above the view port\n     * @param maxAbove {Integer} maximum pixels to prefetch above the view port\n     * @param minBelow {Integer} minimum pixels to prefetch below the view port\n     * @param maxBelow {Integer} maximum pixels to prefetch below the view port\n     */\n    setPrefetchY(minAbove, maxAbove, minBelow, maxBelow) {\n      this.__prefetchY = [minAbove, maxAbove, minBelow, maxBelow];\n    },\n\n    /**\n     * Update prefetching\n     */\n    _onInterval() {\n      var px = this.__prefetchX;\n      if (px[1] && px[3]) {\n        this.getScroller().getPane().prefetchX(px[0], px[1], px[2], px[3]);\n        qx.ui.core.queue.Manager.flush();\n      }\n\n      var py = this.__prefetchY;\n      if (py[1] && py[3]) {\n        this.getScroller().getPane().prefetchY(py[0], py[1], py[2], py[3]);\n        qx.ui.core.queue.Manager.flush();\n      }\n    },\n\n    // property apply\n    _applyScroller(value, old) {\n      if (old) {\n        if (this.__onScrollXId) {\n          old\n            .getChildControl(\"scrollbar-x\")\n            .removeListenerById(this.__onScrollXId);\n        }\n        if (this.__onScrollYId) {\n          old\n            .getChildControl(\"scrollbar-y\")\n            .removeListenerById(this.__onScrollYId);\n        }\n      }\n\n      if (value) {\n        if (!value.getContentElement().getDomElement()) {\n          this.__timer.stop();\n          value.addListenerOnce(\"appear\", this.__timer.start, this.__timer);\n        } else {\n          this.__timer.restart();\n        }\n\n        //        if (value.hasChildControl(\"scrollbar-x\"))\n        //        {\n        this.__onScrollXId = value\n          .getChildControl(\"scrollbar-x\")\n          .addListener(\"scroll\", this.__timer.restart, this.__timer);\n\n        //        }\n        //        if (value.hasChildControl(\"scrollbar-y\"))\n        //        {\n        this.__onScrollYId = value\n          .getChildControl(\"scrollbar-y\")\n          .addListener(\"scroll\", this.__timer.restart, this.__timer);\n\n        //        }\n      } else {\n        this.__timer.stop();\n      }\n    },\n\n    // property apply\n    _applyInterval(value, old) {\n      this.__timer.setInterval(value);\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct() {\n    this.setScroller(null);\n    this.__prefetchX = this.__prefetchY = null;\n    this._disposeObjects(\"__timer\");\n  }\n});\n"
  ],
  "mappings": "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"
}