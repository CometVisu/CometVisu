{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "scroller",
    "settings",
    "setPrefetchX",
    "minLeft",
    "maxLeft",
    "minRight",
    "maxRight",
    "setPrefetchY",
    "minAbove",
    "maxAbove",
    "minBelow",
    "maxBelow",
    "__timer",
    "event",
    "Timer",
    "getInterval",
    "addListener",
    "_onInterval",
    "setScroller",
    "properties",
    "check",
    "nullable",
    "init",
    "apply",
    "interval",
    "members",
    "__prefetchX",
    "__prefetchY",
    "__onScrollXId",
    "__onScrollYId",
    "px",
    "getScroller",
    "getPane",
    "prefetchX",
    "ui",
    "queue",
    "Manager",
    "flush",
    "py",
    "prefetchY",
    "_applyScroller",
    "value",
    "old",
    "getChildControl",
    "removeListenerById",
    "getContentElement",
    "getDomElement",
    "stop",
    "addListenerOnce",
    "start",
    "restart",
    "_applyInterval",
    "setInterval",
    "destruct",
    "_disposeObjects",
    "virtual",
    "behavior",
    "Prefetch"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/virtual/behavior/Prefetch.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Behavior to support pre-rendering of invisible areas of a virtual scroller.\n * If applied to a scroller it will start a timer and increase the rendered area\n * of the scroller after a certain period of time. Subsequent scrolling will not\n * have to render this pre-computed area again.\n *\n */\nqx.Class.define(\"qx.ui.virtual.behavior.Prefetch\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param scroller {qx.ui.virtual.core.Scroller} The scroller to prefetch\n   * @param settings {Map} This map contains minimum and maximum pixels to\n   * prefetch near the view port.\n   * <ul>\n   *   <li>minLeft: minimum pixels to prefetch left to the view port</li>\n   *   <li>maxLeft: maximum pixels to prefetch left to the view port</li>\n   *   <li>minRight: minimum pixels to prefetch right to the view port</li>\n   *   <li>maxRight: maximum pixels to prefetch right to the view port</li>\n   *   <li>minAbove: minimum pixels to prefetch above the view port</li>\n   *   <li>maxAbove: maximum pixels to prefetch above the view port</li>\n   *   <li>minBelow: minimum pixels to prefetch below the view port</li>\n   *   <li>maxBelow: maximum pixels to prefetch below the view port</li>\n   * </ul>\n   */\n\n  construct(scroller, settings) {\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      this.assertObject(settings);\n      this.assertPositiveInteger(settings.minLeft);\n      this.assertPositiveInteger(settings.maxLeft);\n      this.assertPositiveInteger(settings.minRight);\n      this.assertPositiveInteger(settings.maxRight);\n      this.assertPositiveInteger(settings.minAbove);\n      this.assertPositiveInteger(settings.maxAbove);\n      this.assertPositiveInteger(settings.minBelow);\n      this.assertPositiveInteger(settings.maxBelow);\n    }\n\n    super();\n\n    this.setPrefetchX(\n      settings.minLeft,\n      settings.maxLeft,\n      settings.minRight,\n      settings.maxRight\n    );\n\n    this.setPrefetchY(\n      settings.minAbove,\n      settings.maxAbove,\n      settings.minBelow,\n      settings.maxBelow\n    );\n\n    this.__timer = new qx.event.Timer(this.getInterval());\n    this.__timer.addListener(\"interval\", this._onInterval, this);\n\n    if (scroller) {\n      this.setScroller(scroller);\n    }\n  },\n\n  /*\n   *****************************************************************************\n      PROPERTIES\n   *****************************************************************************\n   */\n\n  properties: {\n    /** @type {qx.ui.virtual.core.Scroller} The scroller to prefetch */\n    scroller: {\n      check: \"qx.ui.virtual.core.Scroller\",\n      nullable: true,\n      init: null,\n      apply: \"_applyScroller\"\n    },\n\n    /** @type {Integer} Polling interval */\n    interval: {\n      check: \"Integer\",\n      init: 200,\n      apply: \"_applyInterval\"\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __prefetchX: null,\n    __prefetchY: null,\n    __timer: null,\n    __onScrollXId: null,\n    __onScrollYId: null,\n\n    /**\n     * Configure horizontal prefetching\n     *\n     * @param minLeft {Integer} minimum pixels to prefetch left to the view port\n     * @param maxLeft {Integer} maximum pixels to prefetch left to the view port\n     * @param minRight {Integer} minimum pixels to prefetch right to the view port\n     * @param maxRight {Integer} maximum pixels to prefetch right to the view port\n     */\n    setPrefetchX(minLeft, maxLeft, minRight, maxRight) {\n      this.__prefetchX = [minLeft, maxLeft, minRight, maxRight];\n    },\n\n    /**\n     * Configure vertical prefetching\n     *\n     * @param minAbove {Integer} minimum pixels to prefetch above the view port\n     * @param maxAbove {Integer} maximum pixels to prefetch above the view port\n     * @param minBelow {Integer} minimum pixels to prefetch below the view port\n     * @param maxBelow {Integer} maximum pixels to prefetch below the view port\n     */\n    setPrefetchY(minAbove, maxAbove, minBelow, maxBelow) {\n      this.__prefetchY = [minAbove, maxAbove, minBelow, maxBelow];\n    },\n\n    /**\n     * Update prefetching\n     */\n    _onInterval() {\n      var px = this.__prefetchX;\n      if (px[1] && px[3]) {\n        this.getScroller().getPane().prefetchX(px[0], px[1], px[2], px[3]);\n        qx.ui.core.queue.Manager.flush();\n      }\n\n      var py = this.__prefetchY;\n      if (py[1] && py[3]) {\n        this.getScroller().getPane().prefetchY(py[0], py[1], py[2], py[3]);\n        qx.ui.core.queue.Manager.flush();\n      }\n    },\n\n    // property apply\n    _applyScroller(value, old) {\n      if (old) {\n        if (this.__onScrollXId) {\n          old\n            .getChildControl(\"scrollbar-x\")\n            .removeListenerById(this.__onScrollXId);\n        }\n        if (this.__onScrollYId) {\n          old\n            .getChildControl(\"scrollbar-y\")\n            .removeListenerById(this.__onScrollYId);\n        }\n      }\n\n      if (value) {\n        if (!value.getContentElement().getDomElement()) {\n          this.__timer.stop();\n          value.addListenerOnce(\"appear\", this.__timer.start, this.__timer);\n        } else {\n          this.__timer.restart();\n        }\n\n        //        if (value.hasChildControl(\"scrollbar-x\"))\n        //        {\n        this.__onScrollXId = value\n          .getChildControl(\"scrollbar-x\")\n          .addListener(\"scroll\", this.__timer.restart, this.__timer);\n\n        //        }\n        //        if (value.hasChildControl(\"scrollbar-y\"))\n        //        {\n        this.__onScrollYId = value\n          .getChildControl(\"scrollbar-y\")\n          .addListener(\"scroll\", this.__timer.restart, this.__timer);\n\n        //        }\n      } else {\n        this.__timer.stop();\n      }\n    },\n\n    // property apply\n    _applyInterval(value, old) {\n      this.__timer.setInterval(value);\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct() {\n    this.setScroller(null);\n    this.__prefetchX = this.__prefetchY = null;\n    this._disposeObjects(\"__timer\");\n  }\n});\n"
  ],
  "mappings": "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"
}