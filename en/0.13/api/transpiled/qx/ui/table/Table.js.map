{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MDragDropScrolling",
    "construct",
    "tableModel",
    "custom",
    "initiallyHiddenColumns",
    "setInitiallyHiddenColumns",
    "selectionManager",
    "setNewSelectionManager",
    "selectionModel",
    "setNewSelectionModel",
    "tableColumnModel",
    "setNewTableColumnModel",
    "tablePane",
    "setNewTablePane",
    "tablePaneHeader",
    "setNewTablePaneHeader",
    "tablePaneScroller",
    "setNewTablePaneScroller",
    "tablePaneModel",
    "setNewTablePaneModel",
    "columnMenu",
    "setNewColumnMenu",
    "_setLayout",
    "layout",
    "VBox",
    "__scrollerParent",
    "container",
    "Composite",
    "HBox",
    "_add",
    "flex",
    "setDataRowRenderer",
    "table",
    "rowrenderer",
    "Default",
    "__selectionManager",
    "getNewSelectionManager",
    "setSelectionModel",
    "getNewSelectionModel",
    "setTableModel",
    "getEmptyTableModel",
    "setMetaColumnCounts",
    "setTabIndex",
    "addListener",
    "_onKeyDown",
    "_onFocusChanged",
    "spacer",
    "set",
    "height",
    "_onResize",
    "__focusedCol",
    "__focusedRow",
    "locale",
    "Manager",
    "getInstance",
    "_onChangeLocale",
    "initStatusBarVisible",
    "getTableModel",
    "init",
    "getContentElement",
    "setAttribute",
    "events",
    "columnVisibilityMenuCreateStart",
    "columnVisibilityMenuCreateEnd",
    "tableWidthChanged",
    "verticalScrollBarChanged",
    "cellTap",
    "cellDbltap",
    "cellContextmenu",
    "dataEdited",
    "statics",
    "__redirectEvents",
    "properties",
    "appearance",
    "refine",
    "focusable",
    "minWidth",
    "selectable",
    "check",
    "apply",
    "event",
    "rowHeight",
    "themeable",
    "forceLineHeight",
    "headerCellsVisible",
    "headerCellHeight",
    "nullable",
    "statusBarVisible",
    "additionalStatusBarText",
    "columnVisibilityButtonVisible",
    "metaColumnCounts",
    "focusCellOnPointerMove",
    "rowFocusChangeModifiesSelection",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "keepFirstVisibleRowComplete",
    "alwaysUpdateCells",
    "resetSelectionOnHeaderTap",
    "resetSelectionOnTapBelowRows",
    "minCellEditHeight",
    "dataRowRenderer",
    "modalCellEditorPreOpenFunction",
    "excludeScrollerScrollbarsIfNotNeeded",
    "newColumnMenu",
    "columnmenu",
    "Button",
    "newSelectionManager",
    "obj",
    "selection",
    "newSelectionModel",
    "Model",
    "newTableColumnModel",
    "columnmodel",
    "Basic",
    "newTablePane",
    "pane",
    "Pane",
    "newTablePaneHeader",
    "Header",
    "newTablePaneScroller",
    "Scroller",
    "newTablePaneModel",
    "columnModel",
    "members",
    "__additionalStatusBarText",
    "__lastRowCount",
    "__lastColCount",
    "__internalChange",
    "__columnMenuButtons",
    "__columnModel",
    "__emptyTableModel",
    "__hadVerticalScrollBar",
    "__timer",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "basic",
    "Label",
    "allowGrowX",
    "getNewColumnMenu",
    "menu",
    "factory",
    "_initColumnMenu",
    "_applySelectionModel",
    "value",
    "old",
    "removeListener",
    "_onSelectionChanged",
    "_applyRowHeight",
    "scrollerArr",
    "_getPaneScrollerArr",
    "i",
    "length",
    "updateVerScrollBarMaximum",
    "_applyHeaderCellsVisible",
    "_showChildControl",
    "_excludeChildControl",
    "getColumnVisibilityButtonVisible",
    "_applyColumnVisibilityButtonVisible",
    "_applyHeaderCellHeight",
    "getHeader",
    "setHeight",
    "_applyMinCellEditHeight",
    "setMinCellEditHeight",
    "model",
    "Simple",
    "setColumns",
    "setData",
    "_applyTableModel",
    "getTableColumnModel",
    "getColumnCount",
    "_onTableModelMetaDataChanged",
    "_onTableModelDataChanged",
    "_updateStatusBar",
    "_updateTableData",
    "getRowCount",
    "getNewTableColumnModel",
    "_onColVisibilityChanged",
    "_onColWidthChanged",
    "_onColOrderChanged",
    "paneScroller",
    "paneModel",
    "getTablePaneModel",
    "setTableColumnModel",
    "_applyStatusBarVisible",
    "_applyAdditionalStatusBarText",
    "_applyMetaColumnCounts",
    "handlers",
    "manager",
    "Registration",
    "getManager",
    "evName",
    "Table",
    "capture",
    "getListeners",
    "bubble",
    "_cleanUpMetaColumns",
    "leftX",
    "setFirstColumnX",
    "setMaxColumnCount",
    "getNewTablePaneModel",
    "getNewTablePaneScroller",
    "setTablePaneModel",
    "_onScrollY",
    "j",
    "context",
    "handler",
    "add",
    "isLast",
    "getHeaderCellHeight",
    "setTopRightWidget",
    "getChildControl",
    "isColumnVisibilityButtonVisible",
    "_updateScrollerWidths",
    "_updateScrollBarVisibility",
    "_applyFocusCellOnPointerMove",
    "setFocusCellOnPointerMove",
    "_applyShowCellFocusIndicator",
    "setShowCellFocusIndicator",
    "_applyContextMenuFromDataCellsOnly",
    "setContextMenuFromDataCellsOnly",
    "_applyKeepFirstVisibleRowComplete",
    "onKeepFirstVisibleRowCompleteChanged",
    "_applyResetSelectionOnHeaderTap",
    "setResetSelectionOnHeaderTap",
    "_applyResetSelectionOnTapBelowRows",
    "setResetSelectionOnTapBelowRows",
    "getSelectionManager",
    "getChildren",
    "getPaneScroller",
    "metaColumn",
    "fromMetaColumn",
    "destroy",
    "evt",
    "updateContent",
    "_onChangeTheme",
    "getDataRowRenderer",
    "initThemeValues",
    "onSelectionChanged",
    "onTableModelMetaDataChanged",
    "data",
    "getData",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "removeStart",
    "removeCount",
    "_onContextMenuOpen",
    "e",
    "getSelectionModel",
    "removeSelectionInterval",
    "setFocusedCell",
    "onTableModelDataChanged",
    "rowCount",
    "colCount",
    "setScrollY",
    "_onKeyPress",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "deprecateMethodOverriding",
    "getEnabled",
    "oldFocusedRow",
    "consumed",
    "identifier",
    "getKeyIdentifier",
    "isEditing",
    "getModifiers",
    "stopEditing",
    "moveFocusedCell",
    "startEditing",
    "cancelEditing",
    "focus",
    "isCtrlPressed",
    "setSelectionInterval",
    "handleSelectKeyDown",
    "scroller",
    "getTablePane",
    "getRowHeight",
    "direction",
    "getVisibleRowCount",
    "getScrollY",
    "getRowFocusChangeModifiesSelection",
    "handleMoveKeyDown",
    "preventDefault",
    "stopPropagation",
    "onFocusChanged",
    "onColVisibilityChanged",
    "col",
    "visible",
    "setColumnVisible",
    "setColumnWidth",
    "newWidth",
    "onColOrderChanged",
    "getTablePaneScrollerAtPageX",
    "pageX",
    "metaCol",
    "_getMetaColumnAtPageX",
    "row",
    "scrollVisible",
    "scrollCellVisible",
    "cellId",
    "toHashCode",
    "resetSelection",
    "resetCellFocus",
    "getFocusedColumn",
    "getFocusedRow",
    "highlightFocusedRow",
    "bHighlight",
    "setHighlightFocusRow",
    "clearFocusedRowHighlight",
    "relatedTarget",
    "getRelatedTarget",
    "FocusIndicator",
    "deltaX",
    "deltaY",
    "undefined",
    "x",
    "getVisibleX",
    "getVisibleColumnCount",
    "lang",
    "Number",
    "limit",
    "getVisibleColumnAtX",
    "elem",
    "getDomElement",
    "addListenerOnce",
    "_getMetaColumnAtColumnX",
    "started",
    "blockHeaderElements",
    "getBlocker",
    "blockContent",
    "unblockHeaderElements",
    "unblock",
    "pos",
    "getContentLocation",
    "left",
    "right",
    "visXPos",
    "getMetaColumnCounts",
    "rightXPos",
    "counts",
    "getStatusBarVisible",
    "selectedRowCount",
    "getSelectedCount",
    "text",
    "trn",
    "setValue",
    "width",
    "getTotalWidth",
    "setPaneWidth",
    "setLayoutProperties",
    "getBounds",
    "horBar",
    "HORIZONTAL_SCROLLBAR",
    "verBar",
    "VERTICAL_SCROLLBAR",
    "horNeeded",
    "verNeeded",
    "getExcludeScrollerScrollbarsIfNotNeeded",
    "bars",
    "getNeededScrollBars",
    "setHorizontalScrollBarVisible",
    "getVerticalScrollBarVisible",
    "Timer",
    "once",
    "setVerticalScrollBarVisible",
    "fireDataEvent",
    "columnButton",
    "empty",
    "getMenu",
    "iCol",
    "l",
    "getOverallColumnAtX",
    "menuButton",
    "getColumnName",
    "column",
    "bVisible",
    "isColumnVisible",
    "Assert",
    "assertInterface",
    "IColumnMenuItem",
    "_createColumnVisibilityCheckBoxHandler",
    "fireEvent",
    "type",
    "listener",
    "self",
    "arr",
    "push",
    "arguments",
    "join",
    "removeListenerById",
    "ids",
    "split",
    "shift",
    "removed",
    "call",
    "destruct",
    "dispose",
    "_disposeObjects",
    "_disposeMap"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/Table.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Table\n *\n * A detailed description can be found in the package description\n * {@link qx.ui.table}.\n *\n * @childControl statusbar {qx.ui.basic.Label} label to show the status of the table\n * @childControl column-button {qx.ui.table.columnmenu.Button} button to open the column menu\n */\nqx.Class.define(\"qx.ui.table.Table\", {\n  extend: qx.ui.core.Widget,\n  include: qx.ui.core.MDragDropScrolling,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param tableModel {qx.ui.table.ITableModel ? null}\n   *   The table model to read the data from.\n   *\n   * @param custom {Map ? null}\n   *   A map provided to override the various supplemental classes allocated\n   *   within this constructor.  Each property must be a function which\n   *   returns an object instance, as indicated by shown the defaults listed\n   *   here:\n   *\n   *   <dl>\n   *     <dt>initiallyHiddenColumns</dt>\n   *       <dd>\n   *         {Array?}\n   *         A list of column numbers that should be initially invisible. Any\n   *         column not mentioned will be initially visible, and if no array\n   *         is provided, all columns will be initially visible.\n   *       </dd>\n   *     <dt>selectionManager</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.selection.Manager(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>selectionModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.selection.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tableColumnModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.columnmodel.Basic(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePane</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Pane(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneHeader</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Header(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneScroller</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Scroller(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>columnMenu</dt>\n   *       <dd><pre class='javascript'>\n   *         function()\n   *         {\n   *           return new qx.ui.table.columnmenu.Button();\n   *         }\n   *       </pre></dd>\n   *   </dl>\n   */\n  construct(tableModel, custom) {\n    super();\n    //\n    // Use default objects if custom objects are not specified\n    //\n    if (!custom) {\n      custom = {};\n    }\n\n    if (custom.initiallyHiddenColumns) {\n      this.setInitiallyHiddenColumns(custom.initiallyHiddenColumns);\n    }\n\n    if (custom.selectionManager) {\n      this.setNewSelectionManager(custom.selectionManager);\n    }\n\n    if (custom.selectionModel) {\n      this.setNewSelectionModel(custom.selectionModel);\n    }\n\n    if (custom.tableColumnModel) {\n      this.setNewTableColumnModel(custom.tableColumnModel);\n    }\n\n    if (custom.tablePane) {\n      this.setNewTablePane(custom.tablePane);\n    }\n\n    if (custom.tablePaneHeader) {\n      this.setNewTablePaneHeader(custom.tablePaneHeader);\n    }\n\n    if (custom.tablePaneScroller) {\n      this.setNewTablePaneScroller(custom.tablePaneScroller);\n    }\n\n    if (custom.tablePaneModel) {\n      this.setNewTablePaneModel(custom.tablePaneModel);\n    }\n\n    if (custom.columnMenu) {\n      this.setNewColumnMenu(custom.columnMenu);\n    }\n\n    this._setLayout(new qx.ui.layout.VBox());\n\n    // Create the child widgets\n    this.__scrollerParent = new qx.ui.container.Composite(\n      new qx.ui.layout.HBox()\n    );\n\n    this._add(this.__scrollerParent, { flex: 1 });\n\n    // Allocate a default data row renderer\n    this.setDataRowRenderer(new qx.ui.table.rowrenderer.Default(this));\n\n    // Create the models\n    this.__selectionManager = this.getNewSelectionManager()(this);\n    this.setSelectionModel(this.getNewSelectionModel()(this));\n    this.setTableModel(tableModel || this.getEmptyTableModel());\n\n    // create the main meta column\n    this.setMetaColumnCounts([-1]);\n\n    // Make focusable\n    this.setTabIndex(1);\n    this.addListener(\"keydown\", this._onKeyDown);\n    this.addListener(\"focus\", this._onFocusChanged);\n    this.addListener(\"blur\", this._onFocusChanged);\n\n    // attach the resize listener to the last child of the layout. This\n    // ensures that all other children are laid out before\n    var spacer = new qx.ui.core.Widget().set({\n      height: 0\n    });\n\n    this._add(spacer);\n    spacer.addListener(\"resize\", this._onResize, this);\n\n    this.__focusedCol = null;\n    this.__focusedRow = null;\n\n    // add an event listener which updates the table content on locale change\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\n        \"changeLocale\",\n        this._onChangeLocale,\n        this\n      );\n    }\n\n    this.initStatusBarVisible();\n\n    // If the table model has an init() method...\n    tableModel = this.getTableModel();\n    if (tableModel.init && typeof tableModel.init == \"function\") {\n      // ... then call it now to allow the table model to affect table\n      // properties.\n      tableModel.init(this);\n    }\n\n    // ARIA attrs\n    this.getContentElement().setAttribute(\"role\", \"grid\");\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Dispatched before adding the column list to the column visibility menu.\n     * The event data is a map with two properties: table and menu.  Listeners\n     * may add additional items to the menu, which appear at the top of the\n     * menu.\n     */\n    columnVisibilityMenuCreateStart: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched after adding the column list to the column visibility menu.\n     * The event data is a map with two properties: table and menu.  Listeners\n     * may add additional items to the menu, which appear at the bottom of the\n     * menu.\n     */\n    columnVisibilityMenuCreateEnd: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched when the width of the table has changed.\n     */\n    tableWidthChanged: \"qx.event.type.Event\",\n\n    /**\n     * Dispatched when updating scrollbars discovers that a vertical scrollbar\n     * is needed when it previously was not, or vice versa.  The data is a\n     * boolean indicating whether a vertical scrollbar is now being used.\n     */\n    verticalScrollBarChanged: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched when a data cell has been tapped.\n     */\n    cellTap: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched when a data cell has been tapped.\n     */\n    cellDbltap: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched when the context menu is needed in a data cell\n     */\n    cellContextmenu: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched after a cell editor is flushed.\n     *\n     * The data is a map containing this properties:\n     * <ul>\n     *   <li>row</li>\n     *   <li>col</li>\n     *   <li>value</li>\n     *   <li>oldValue</li>\n     * </ul>\n     */\n    dataEdited: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** Events that must be redirected to the scrollers. */\n    __redirectEvents: { cellTap: 1, cellDbltap: 1, cellContextmenu: 1 }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    appearance: {\n      refine: true,\n      init: \"table\"\n    },\n\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    minWidth: {\n      refine: true,\n      init: 50\n    },\n\n    /**\n     * The list of columns that are initially hidden. This property is set by\n     * the constructor, from the value received in\n     * custom.initiallyHiddenColumns, and is only used when a column model is\n     * initialized. It can be of great benefit in tables with numerous columns\n     * where most are not initially visible. The process of creating the\n     * headers for all of the columns, only to have those columns discarded\n     * shortly thereafter when setColumnVisibility(false) is called, is a\n     * waste of (significant, in some browsers) time. Specifying the\n     * non-visible columns at constructor time can therefore avoid the initial\n     * creation of all of those superfluous widgets.\n     */\n    initiallyHiddenColumns: {\n      init: null\n    },\n\n    /**\n     * Whether the widget contains content which may be selected by the user.\n     *\n     * If the value set to <code>true</code> the native browser selection can\n     * be used for text selection. But it is normally useful for\n     * forms fields, longer texts/documents, editors, etc.\n     *\n     * Note: This has no effect on Table!\n     */\n    selectable: {\n      refine: true,\n      init: false\n    },\n\n    /** The selection model. */\n    selectionModel: {\n      check: \"qx.ui.table.selection.Model\",\n      apply: \"_applySelectionModel\",\n      event: \"changeSelectionModel\"\n    },\n\n    /** The table model. */\n    tableModel: {\n      check: \"qx.ui.table.ITableModel\",\n      apply: \"_applyTableModel\",\n      event: \"changeTableModel\"\n    },\n\n    /** The height of the table rows. */\n    rowHeight: {\n      check: \"Number\",\n      init: 20,\n      apply: \"_applyRowHeight\",\n      event: \"changeRowHeight\",\n      themeable: true\n    },\n\n    /**\n     * Force line height to match row height.  May be disabled if cell\n     * renderers being used wish to render multiple lines of data within a\n     * cell.  (With the default setting, all but the first of multiple lines\n     * of data will not be visible.)\n     */\n    forceLineHeight: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     *  Whether the header cells are visible. When setting this to false,\n     *  you'll likely also want to set the {#columnVisibilityButtonVisible}\n     *  property to false as well, to entirely remove the header row.\n     */\n    headerCellsVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyHeaderCellsVisible\",\n      themeable: true\n    },\n\n    /** The height of the header cells. */\n    headerCellHeight: {\n      check: \"Integer\",\n      init: 16,\n      apply: \"_applyHeaderCellHeight\",\n      event: \"changeHeaderCellHeight\",\n      nullable: true,\n      themeable: true\n    },\n\n    /** Whether to show the status bar */\n    statusBarVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyStatusBarVisible\"\n    },\n\n    /** The Statusbartext, set it, if you want some more Information */\n    additionalStatusBarText: {\n      nullable: true,\n      init: null,\n      apply: \"_applyAdditionalStatusBarText\"\n    },\n\n    /** Whether to show the column visibility button */\n    columnVisibilityButtonVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyColumnVisibilityButtonVisible\",\n      themeable: true\n    },\n\n    /**\n     * @type {Integer[]} The number of columns per meta column. If the last array entry is -1,\n     * this meta column will get the remaining columns.\n     */\n    metaColumnCounts: {\n      check: \"Object\",\n      apply: \"_applyMetaColumnCounts\"\n    },\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyFocusCellOnPointerMove\"\n    },\n\n    /**\n     * Whether row focus change by keyboard also modifies selection\n     */\n    rowFocusChangeModifiesSelection: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowCellFocusIndicator\"\n    },\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyContextMenuFromDataCellsOnly\"\n    },\n\n    /**\n     * Whether the table should keep the first visible row complete. If set to false,\n     * the first row may be rendered partial, depending on the vertical scroll value.\n     */\n    keepFirstVisibleRowComplete: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyKeepFirstVisibleRowComplete\"\n    },\n\n    /**\n     * Whether the table cells should be updated when only the selection or the\n     * focus changed. This slows down the table update but allows to react on a\n     * changed selection or a changed focus in a cell renderer.\n     */\n    alwaysUpdateCells: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyResetSelectionOnHeaderTap\"\n    },\n\n    /**\n     * Whether to reset the selection when the unpopulated table area is tapped.\n     * The default is false which keeps the behaviour as before\n     */\n    resetSelectionOnTapBelowRows: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyResetSelectionOnTapBelowRows\"\n    },\n\n    /**\n     * If set then defines the minimum height of the focus indicator when editing\n     */\n    minCellEditHeight: {\n      check: \"Integer\",\n      nullable: true,\n      init: null,\n      apply: \"_applyMinCellEditHeight\"\n    },\n\n    /** The renderer to use for styling the rows. */\n    dataRowRenderer: {\n      check: \"qx.ui.table.IRowRenderer\",\n      init: null,\n      nullable: true,\n      event: \"changeDataRowRenderer\"\n    },\n\n    /**\n     * A function to call when before modal cell editor is opened.\n     *\n     * @signature function(cellEditor, cellInfo)\n     *\n     * @param cellEditor {qx.ui.window.Window}\n     *   The modal window which has been created for this cell editor\n     *\n     * @param cellInfo {Map}\n     *   Information about the cell for which this cell editor was created.\n     *   It contains the following properties:\n     *       col, row, xPos, value\n     *\n     */\n    modalCellEditorPreOpenFunction: {\n      check: \"Function\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * By default, all Scrollers' (meta-columns') horizontal scrollbars are\n     * shown if any one is required. Allow not showing any that are not\n     * required.\n     */\n    excludeScrollerScrollbarsIfNotNeeded: {\n      check: \"Boolean\",\n      init: false,\n      nullable: false\n    },\n\n    /**\n     * A function to instantiate a new column menu button.\n     */\n    newColumnMenu: {\n      check: \"Function\",\n      init() {\n        return new qx.ui.table.columnmenu.Button();\n      }\n    },\n\n    /**\n     * A function to instantiate a selection manager.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property must\n     * be set before calling the Table constructor.\n     */\n    newSelectionManager: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.selection.Manager(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a selection model.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property must\n     * be set before calling the Table constructor.\n     */\n    newSelectionModel: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.selection.Model(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table column model.  This allows subclasses\n     * of Table to subclass this internal class.  To take effect, this\n     * property must be set before calling the Table constructor.\n     */\n    newTableColumnModel: {\n      check: \"Function\",\n      init(table) {\n        return new qx.ui.table.columnmodel.Basic(table);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property\n     * must be set before calling the Table constructor.\n     */\n    newTablePane: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Pane(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property\n     * must be set before calling the Table constructor.\n     */\n    newTablePaneHeader: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Header(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane scroller.  this allows\n     * subclasses of Table to subclass this internal class.  To take effect,\n     * this property must be set before calling the Table constructor.\n     */\n    newTablePaneScroller: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Scroller(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane model.  this allows subclasses\n     * of Table to subclass this internal class.  To take effect, this\n     * property must be set before calling the Table constructor.\n     */\n    newTablePaneModel: {\n      check: \"Function\",\n      init(columnModel) {\n        return new qx.ui.table.pane.Model(columnModel);\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __focusedCol: null,\n    __focusedRow: null,\n\n    __scrollerParent: null,\n\n    __selectionManager: null,\n\n    __additionalStatusBarText: null,\n    __lastRowCount: null,\n    __lastColCount: null,\n    __internalChange: null,\n\n    __columnMenuButtons: null,\n    __columnModel: null,\n    __emptyTableModel: null,\n\n    __hadVerticalScrollBar: null,\n\n    __timer: null,\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"statusbar\":\n          control = new qx.ui.basic.Label();\n          control.set({\n            allowGrowX: true\n          });\n\n          this._add(control);\n          break;\n\n        case \"column-button\":\n          control = this.getNewColumnMenu()();\n          control.set({\n            focusable: false\n          });\n\n          // Create the initial menu too\n          var menu = control.factory(\"menu\", { table: this });\n\n          // Add a listener to initialize the column menu when it becomes visible\n          menu.addListener(\"appear\", this._initColumnMenu, this);\n\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    // property modifier\n    _applySelectionModel(value, old) {\n      this.__selectionManager.setSelectionModel(value);\n\n      if (old != null) {\n        old.removeListener(\"changeSelection\", this._onSelectionChanged, this);\n      }\n\n      value.addListener(\"changeSelection\", this._onSelectionChanged, this);\n    },\n\n    // property modifier\n    _applyRowHeight(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].updateVerScrollBarMaximum();\n      }\n    },\n\n    // property modifier\n    _applyHeaderCellsVisible(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        if (value) {\n          scrollerArr[i]._showChildControl(\"header\");\n        } else {\n          scrollerArr[i]._excludeChildControl(\"header\");\n        }\n      }\n      // also hide the column visibility button\n      if (this.getColumnVisibilityButtonVisible()) {\n        this._applyColumnVisibilityButtonVisible(value);\n      }\n    },\n\n    // property modifier\n    _applyHeaderCellHeight(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().setHeight(value);\n      }\n    },\n\n    // property modifier\n    _applyMinCellEditHeight(value) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setMinCellEditHeight(value);\n      }\n    },\n\n    /**\n     * Get an empty table model instance to use for this table. Use this table\n     * to configure the table with no table model.\n     *\n     * @return {qx.ui.table.ITableModel} The empty table model\n     */\n    getEmptyTableModel() {\n      if (!this.__emptyTableModel) {\n        this.__emptyTableModel = new qx.ui.table.model.Simple();\n        this.__emptyTableModel.setColumns([]);\n        this.__emptyTableModel.setData([]);\n      }\n      return this.__emptyTableModel;\n    },\n\n    // property modifier\n    _applyTableModel(value, old) {\n      this.getTableColumnModel().init(value.getColumnCount(), this);\n\n      if (old != null) {\n        old.removeListener(\n          \"metaDataChanged\",\n          this._onTableModelMetaDataChanged,\n          this\n        );\n\n        old.removeListener(\"dataChanged\", this._onTableModelDataChanged, this);\n      }\n\n      value.addListener(\n        \"metaDataChanged\",\n        this._onTableModelMetaDataChanged,\n        this\n      );\n\n      value.addListener(\"dataChanged\", this._onTableModelDataChanged, this);\n\n      // Update the status bar\n      this._updateStatusBar();\n\n      this._updateTableData(0, value.getRowCount(), 0, value.getColumnCount());\n\n      this._onTableModelMetaDataChanged();\n\n      // If the table model has an init() method, call it. We don't, however,\n      // call it if this is the initial setting of the table model, as the\n      // scrollers are not yet initialized. In that case, the init method is\n      // called explicitly by the Table constructor.\n      if (old && value.init && typeof value.init == \"function\") {\n        value.init(this);\n      }\n    },\n\n    /**\n     * Get the The table column model.\n     *\n     * @return {qx.ui.table.columnmodel.Basic} The table's column model\n     */\n    getTableColumnModel() {\n      if (!this.__columnModel) {\n        var columnModel = (this.__columnModel =\n          this.getNewTableColumnModel()(this));\n\n        columnModel.addListener(\n          \"visibilityChanged\",\n          this._onColVisibilityChanged,\n          this\n        );\n\n        columnModel.addListener(\"widthChanged\", this._onColWidthChanged, this);\n        columnModel.addListener(\"orderChanged\", this._onColOrderChanged, this);\n\n        // Get the current table model\n        var tableModel = this.getTableModel();\n        columnModel.init(tableModel.getColumnCount(), this);\n\n        // Reset the table column model in each table pane model\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          var paneScroller = scrollerArr[i];\n          var paneModel = paneScroller.getTablePaneModel();\n          paneModel.setTableColumnModel(columnModel);\n        }\n      }\n      return this.__columnModel;\n    },\n\n    // property modifier\n    _applyStatusBarVisible(value, old) {\n      if (value) {\n        this._showChildControl(\"statusbar\");\n      } else {\n        this._excludeChildControl(\"statusbar\");\n      }\n\n      if (value) {\n        this._updateStatusBar();\n      }\n    },\n\n    // property modifier\n    _applyAdditionalStatusBarText(value, old) {\n      this.__additionalStatusBarText = value;\n      this._updateStatusBar();\n    },\n\n    // property modifier\n    _applyColumnVisibilityButtonVisible(value, old) {\n      if (value) {\n        this._showChildControl(\"column-button\");\n      } else {\n        this._excludeChildControl(\"column-button\");\n      }\n    },\n\n    // property modifier\n    _applyMetaColumnCounts(value, old) {\n      var metaColumnCounts = value;\n      var scrollerArr = this._getPaneScrollerArr();\n      var handlers = {};\n\n      if (value > old) {\n        // Save event listeners on the redirected events so we can re-apply\n        // them to new scrollers.\n        var manager = qx.event.Registration.getManager(scrollerArr[0]);\n        for (var evName in qx.ui.table.Table.__redirectEvents) {\n          handlers[evName] = {};\n          handlers[evName].capture = manager.getListeners(\n            scrollerArr[0],\n            evName,\n            true\n          );\n\n          handlers[evName].bubble = manager.getListeners(\n            scrollerArr[0],\n            evName,\n            false\n          );\n        }\n      }\n\n      // Remove the panes not needed any more\n      this._cleanUpMetaColumns(metaColumnCounts.length);\n\n      // Update the old panes\n      var leftX = 0;\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var paneScroller = scrollerArr[i];\n        var paneModel = paneScroller.getTablePaneModel();\n        paneModel.setFirstColumnX(leftX);\n        paneModel.setMaxColumnCount(metaColumnCounts[i]);\n        leftX += metaColumnCounts[i];\n      }\n\n      // Add the new panes\n      if (metaColumnCounts.length > scrollerArr.length) {\n        var columnModel = this.getTableColumnModel();\n\n        for (var i = scrollerArr.length; i < metaColumnCounts.length; i++) {\n          var paneModel = this.getNewTablePaneModel()(columnModel);\n          paneModel.setFirstColumnX(leftX);\n          paneModel.setMaxColumnCount(metaColumnCounts[i]);\n          leftX += metaColumnCounts[i];\n\n          var paneScroller = this.getNewTablePaneScroller()(this);\n          paneScroller.setTablePaneModel(paneModel);\n\n          // Register event listener for vertical scrolling\n          paneScroller.addListener(\"changeScrollY\", this._onScrollY, this);\n\n          // Apply redirected events to this new scroller\n          for (evName in qx.ui.table.Table.__redirectEvents) {\n            // On first setting of meta columns (constructing phase), there\n            // are no handlers to deal with yet.\n            if (!handlers[evName]) {\n              break;\n            }\n\n            if (\n              handlers[evName].capture &&\n              handlers[evName].capture.length > 0\n            ) {\n              var capture = handlers[evName].capture;\n              for (var j = 0; j < capture.length; j++) {\n                // Determine what context to use.  If the context does not\n                // exist, we assume that the context is this table.  If it\n                // does exist and it equals the first pane scroller (from\n                // which we retrieved the listeners) then set the context\n                // to be this new pane scroller.  Otherwise leave the context\n                // as it was set.\n                var context = capture[j].context;\n                if (!context) {\n                  context = this;\n                } else if (context == scrollerArr[0]) {\n                  context = paneScroller;\n                }\n\n                paneScroller.addListener(\n                  evName,\n                  capture[j].handler,\n                  context,\n                  true\n                );\n              }\n            }\n\n            if (handlers[evName].bubble && handlers[evName].bubble.length > 0) {\n              var bubble = handlers[evName].bubble;\n              for (var j = 0; j < bubble.length; j++) {\n                // Determine what context to use.  If the context does not\n                // exist, we assume that the context is this table.  If it\n                // does exist and it equals the first pane scroller (from\n                // which we retrieved the listeners) then set the context\n                // to be this new pane scroller.  Otherwise leave the context\n                // as it was set.\n                var context = bubble[j].context;\n                if (!context) {\n                  context = this;\n                } else if (context == scrollerArr[0]) {\n                  context = paneScroller;\n                }\n\n                paneScroller.addListener(\n                  evName,\n                  bubble[j].handler,\n                  context,\n                  false\n                );\n              }\n            }\n          }\n\n          // last meta column is flexible\n          var flex = i == metaColumnCounts.length - 1 ? 1 : 0;\n          this.__scrollerParent.add(paneScroller, { flex: flex });\n          scrollerArr = this._getPaneScrollerArr();\n        }\n      }\n\n      // Update all meta columns\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var paneScroller = scrollerArr[i];\n        var isLast = i == scrollerArr.length - 1;\n\n        // Set the right header height\n        paneScroller.getHeader().setHeight(this.getHeaderCellHeight());\n\n        // Put the column visibility button in the top right corner of the last meta column\n        paneScroller.setTopRightWidget(\n          isLast ? this.getChildControl(\"column-button\") : null\n        );\n      }\n\n      if (!this.isColumnVisibilityButtonVisible()) {\n        this._excludeChildControl(\"column-button\");\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    // property modifier\n    _applyFocusCellOnPointerMove(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setFocusCellOnPointerMove(value);\n      }\n    },\n\n    // property modifier\n    _applyShowCellFocusIndicator(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setShowCellFocusIndicator(value);\n      }\n    },\n\n    // property modifier\n    _applyContextMenuFromDataCellsOnly(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setContextMenuFromDataCellsOnly(value);\n      }\n    },\n\n    // property modifier\n    _applyKeepFirstVisibleRowComplete(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onKeepFirstVisibleRowCompleteChanged();\n      }\n    },\n\n    // property modifier\n    _applyResetSelectionOnHeaderTap(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setResetSelectionOnHeaderTap(value);\n      }\n    },\n\n    // property modifier\n    _applyResetSelectionOnTapBelowRows(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setResetSelectionOnTapBelowRows(value);\n      }\n    },\n\n    /**\n     * Returns the selection manager.\n     *\n     * @return {qx.ui.table.selection.Manager} the selection manager.\n     */\n    getSelectionManager() {\n      return this.__selectionManager;\n    },\n\n    /**\n     * Returns an array containing all TablePaneScrollers in this table.\n     *\n     * @return {qx.ui.table.pane.Scroller[]} all TablePaneScrollers in this table.\n     */\n    _getPaneScrollerArr() {\n      return this.__scrollerParent.getChildren();\n    },\n\n    /**\n     * Returns a TablePaneScroller of this table.\n     *\n     * @param metaColumn {Integer} the meta column to get the TablePaneScroller for.\n     * @return {qx.ui.table.pane.Scroller} the qx.ui.table.pane.Scroller.\n     */\n    getPaneScroller(metaColumn) {\n      return this._getPaneScrollerArr()[metaColumn];\n    },\n\n    /**\n     * Cleans up the meta columns.\n     *\n     * @param fromMetaColumn {Integer} the first meta column to clean up. All following\n     *      meta columns will be cleaned up, too. All previous meta columns will\n     *      stay unchanged. If 0 all meta columns will be cleaned up.\n     */\n    _cleanUpMetaColumns(fromMetaColumn) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      if (scrollerArr != null) {\n        for (var i = scrollerArr.length - 1; i >= fromMetaColumn; i--) {\n          scrollerArr[i].destroy();\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the locale has changed.\n     *\n     * @param evt {Event} the event.\n     */\n    _onChangeLocale(evt) {\n      this.updateContent();\n      this._updateStatusBar();\n    },\n\n    // overridden\n    _onChangeTheme() {\n      super._onChangeTheme();\n\n      this.getDataRowRenderer().initThemeValues();\n      this.updateContent();\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onSelectionChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onSelectionChanged();\n      }\n\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onTableModelMetaDataChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onTableModelMetaDataChanged();\n      }\n\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the table model data has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onTableModelDataChanged(evt) {\n      var data = evt.getData();\n\n      this._updateTableData(\n        data.firstRow,\n        data.lastRow,\n        data.firstColumn,\n        data.lastColumn,\n        data.removeStart,\n        data.removeCount\n      );\n    },\n\n    // overridden\n    _onContextMenuOpen(e) {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n    /**\n     * To update the table if the table model has changed and remove selection.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     * @param removeStart {Integer ? null} The first index of the interval (including), to remove selection.\n     * @param removeCount {Integer ? null} The count of the interval, to remove selection.\n     */\n    _updateTableData(\n      firstRow,\n      lastRow,\n      firstColumn,\n      lastColumn,\n      removeStart,\n      removeCount\n    ) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      // update selection if rows were removed\n      if (removeCount) {\n        this.getSelectionModel().removeSelectionInterval(\n          removeStart,\n          removeStart + removeCount - 1,\n          true\n        );\n\n        // remove focus if the focused row has been removed\n        if (\n          this.__focusedRow >= removeStart &&\n          this.__focusedRow < removeStart + removeCount\n        ) {\n          this.setFocusedCell();\n        }\n      }\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onTableModelDataChanged(\n          firstRow,\n          lastRow,\n          firstColumn,\n          lastColumn\n        );\n      }\n\n      var rowCount = this.getTableModel().getRowCount();\n\n      if (rowCount != this.__lastRowCount) {\n        this.__lastRowCount = rowCount;\n\n        this._updateScrollBarVisibility();\n        this._updateStatusBar();\n\n        // ARIA attrs\n        this.getContentElement().setAttribute(\"aria-rowcount\", rowCount);\n      }\n\n      const colCount = this.getTableModel().getColumnCount();\n\n      if (colCount != this.__lastColCount) {\n        this.__lastColCount = colCount;\n\n        // ARIA attrs\n        this.getContentElement().setAttribute(\"aria-colcount\", colCount);\n      }\n    },\n\n    /**\n     * Event handler. Called when a TablePaneScroller has been scrolled vertically.\n     *\n     * @param evt {Map} the event.\n     */\n    _onScrollY(evt) {\n      if (!this.__internalChange) {\n        this.__internalChange = true;\n\n        // Set the same scroll position to all meta columns\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          scrollerArr[i].setScrollY(evt.getData());\n        }\n\n        this.__internalChange = false;\n      }\n    },\n\n    /**\n     * Event handler. Called when a key was pressed.\n     *\n     * @param evt {qx.event.type.KeySequence} the event.\n     * @deprecated {6.0} please use _onKeyDown instead!\n     */\n    _onKeyPress(evt) {\n      qx.log.Logger.deprecatedMethodWarning(\n        this._onKeyPress,\n        \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\"\n      );\n\n      qx.log.Logger.deprecateMethodOverriding(\n        this,\n        qx.ui.table.Table,\n        \"_onKeyPress\",\n        \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\"\n      );\n\n      this._onKeyDown(evt);\n    },\n    /**\n     * Event handler. Called when on key down event\n     *\n     * @param evt {qx.event.type.KeySequence} the event.\n     */\n    _onKeyDown(evt) {\n      if (!this.getEnabled()) {\n        return;\n      }\n\n      // No editing mode\n      var oldFocusedRow = this.__focusedRow;\n      var consumed = false;\n\n      // Handle keys that are independent from the modifiers\n      var identifier = evt.getKeyIdentifier();\n\n      if (this.isEditing()) {\n        // Editing mode\n        if (evt.getModifiers() == 0) {\n          switch (identifier) {\n            case \"Enter\":\n              this.stopEditing();\n              var oldFocusedRow = this.__focusedRow;\n              this.moveFocusedCell(0, 1);\n\n              if (this.__focusedRow != oldFocusedRow) {\n                consumed = this.startEditing();\n              }\n\n              break;\n\n            case \"Escape\":\n              this.cancelEditing();\n              this.focus();\n              break;\n\n            default:\n              consumed = false;\n              break;\n          }\n        }\n      } else {\n        consumed = true;\n        // No editing mode\n        if (evt.isCtrlPressed()) {\n          // Handle keys that depend on modifiers\n\n          switch (identifier) {\n            case \"A\": // Ctrl + A\n              var rowCount = this.getTableModel().getRowCount();\n\n              if (rowCount > 0) {\n                this.getSelectionModel().setSelectionInterval(0, rowCount - 1);\n              }\n\n              break;\n\n            default:\n              consumed = false;\n              break;\n          }\n        } else {\n          // Handle keys that are independent from the modifiers\n          switch (identifier) {\n            case \"Space\":\n              this.__selectionManager.handleSelectKeyDown(\n                this.__focusedRow,\n                evt\n              );\n\n              break;\n\n            case \"F2\":\n            case \"Enter\":\n              this.startEditing();\n              consumed = true;\n              break;\n\n            case \"Home\":\n              this.setFocusedCell(this.__focusedCol, 0, true);\n              break;\n\n            case \"End\":\n              var rowCount = this.getTableModel().getRowCount();\n              this.setFocusedCell(this.__focusedCol, rowCount - 1, true);\n              break;\n\n            case \"Left\":\n              this.moveFocusedCell(-1, 0);\n              break;\n\n            case \"Right\":\n              this.moveFocusedCell(1, 0);\n              break;\n\n            case \"Up\":\n              this.moveFocusedCell(0, -1);\n              break;\n\n            case \"Down\":\n              this.moveFocusedCell(0, 1);\n              break;\n\n            case \"PageUp\":\n            case \"PageDown\":\n              var scroller = this.getPaneScroller(0);\n              var pane = scroller.getTablePane();\n              var rowHeight = this.getRowHeight();\n              var direction = identifier == \"PageUp\" ? -1 : 1;\n              rowCount = pane.getVisibleRowCount() - 1;\n              scroller.setScrollY(\n                scroller.getScrollY() + direction * rowCount * rowHeight\n              );\n\n              this.moveFocusedCell(0, direction * rowCount);\n              break;\n\n            default:\n              consumed = false;\n          }\n        }\n      }\n\n      if (\n        oldFocusedRow != this.__focusedRow &&\n        this.getRowFocusChangeModifiesSelection()\n      ) {\n        // The focus moved -> Let the selection manager handle this event\n        this.__selectionManager.handleMoveKeyDown(this.__focusedRow, evt);\n      }\n\n      if (consumed) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    },\n\n    /**\n     * Event handler. Called when the table gets the focus.\n     *\n     * @param evt {Map} the event.\n     */\n    _onFocusChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onFocusChanged();\n      }\n    },\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColVisibilityChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onColVisibilityChanged();\n      }\n\n      var data = evt.getData();\n      if (\n        this.__columnMenuButtons != null &&\n        data.col != null &&\n        data.visible != null\n      ) {\n        this.__columnMenuButtons[data.col].setColumnVisible(data.visible);\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Event handler. Called when the width of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColWidthChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var data = evt.getData();\n        scrollerArr[i].setColumnWidth(data.col, data.newWidth);\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColOrderChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onColOrderChanged();\n      }\n\n      // A column may have been moved between meta columns\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Gets the TablePaneScroller at a certain x position in the page. If there is\n     * no TablePaneScroller at this position, null is returned.\n     *\n     * @param pageX {Integer} the position in the page to check (in pixels).\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller or null.\n     */\n    getTablePaneScrollerAtPageX(pageX) {\n      var metaCol = this._getMetaColumnAtPageX(pageX);\n      return metaCol != -1 ? this.getPaneScroller(metaCol) : null;\n    },\n\n    /**\n     * Sets the currently focused cell. A value of <code>null</code> hides the\n     * focus cell.\n     *\n     * @param col {Integer?null} the model index of the focused cell's column.\n     * @param row {Integer?null} the model index of the focused cell's row.\n     * @param scrollVisible {Boolean ? false} whether to scroll the new focused cell\n     *          visible.\n     */\n    setFocusedCell(col, row, scrollVisible) {\n      if (\n        !this.isEditing() &&\n        (col != this.__focusedCol || row != this.__focusedRow)\n      ) {\n        if (col === null) {\n          col = 0;\n        }\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          scrollerArr[i].setFocusedCell(col, row);\n        }\n\n        if (col != null && scrollVisible) {\n          this.scrollCellVisible(col, row);\n        }\n\n        // ARIA attrs\n        const cellId =\n          \"qooxdoo-table-cell-\" + this.toHashCode() + \"-\" + row + \"-\" + col;\n        this.getContentElement().setAttribute(\"aria-activedescendant\", cellId);\n      }\n    },\n\n    /**\n     * Resets (clears) the current selection\n     */\n    resetSelection() {\n      this.getSelectionModel().resetSelection();\n    },\n\n    /**\n     * Resets the focused cell.\n     */\n    resetCellFocus() {\n      this.setFocusedCell(null, null, false);\n    },\n\n    /**\n     * Returns the column of the currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn() {\n      return this.__focusedCol;\n    },\n\n    /**\n     * Returns the row of the currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow() {\n      return this.__focusedRow;\n    },\n\n    /**\n     * Select whether the focused row is highlighted\n     *\n     * @param bHighlight {Boolean}\n     *   Flag indicating whether the focused row should be highlighted.\n     *\n     */\n    highlightFocusedRow(bHighlight) {\n      this.getDataRowRenderer().setHighlightFocusRow(bHighlight);\n    },\n\n    /**\n     * Remove the highlighting of the current focus row.\n     *\n     * This is used to temporarily remove the highlighting of the currently\n     * focused row, and is expected to be used most typically by adding a\n     * listener on the \"pointerout\" event, so that the focus highlighting is\n     * suspended when the pointer leaves the table:\n     *\n     *     table.addListener(\"pointerout\", table.clearFocusedRowHighlight);\n     *\n     * @param evt {qx.event.type.Pointer} Incoming pointer event\n     */\n    clearFocusedRowHighlight(evt) {\n      if (evt) {\n        var relatedTarget = evt.getRelatedTarget();\n        if (\n          relatedTarget instanceof qx.ui.table.pane.Pane ||\n          relatedTarget instanceof qx.ui.table.pane.FocusIndicator\n        ) {\n          return;\n        }\n      }\n\n      // Remove focus from any cell that has it\n      this.resetCellFocus();\n\n      // Now, for each pane scroller...\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        // ... repaint without focus.\n        scrollerArr[i].onFocusChanged();\n      }\n    },\n\n    /**\n     * Moves the focus.\n     *\n     * @param deltaX {Integer} The delta by which the focus should be moved on the x axis.\n     * @param deltaY {Integer} The delta by which the focus should be moved on the y axis.\n     */\n    moveFocusedCell(deltaX, deltaY) {\n      var col = this.__focusedCol;\n      var row = this.__focusedRow;\n\n      // could also be undefined [BUG #4676]. In that case default to first cell focus\n      if (\n        col === null ||\n        col === undefined ||\n        row === null ||\n        row === undefined\n      ) {\n        this.setFocusedCell(0, 0, true);\n        return;\n      }\n\n      if (deltaX != 0) {\n        var columnModel = this.getTableColumnModel();\n        var x = columnModel.getVisibleX(col);\n        var colCount = columnModel.getVisibleColumnCount();\n        x = qx.lang.Number.limit(x + deltaX, 0, colCount - 1);\n        col = columnModel.getVisibleColumnAtX(x);\n      }\n\n      if (deltaY != 0) {\n        var tableModel = this.getTableModel();\n        row = qx.lang.Number.limit(\n          row + deltaY,\n          0,\n          tableModel.getRowCount() - 1\n        );\n      }\n\n      this.setFocusedCell(col, row, true);\n    },\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible(col, row) {\n      // get the dom element\n      var elem = this.getContentElement().getDomElement();\n      // if the dom element is not available, the table hasn't been rendered\n      if (!elem) {\n        // postpone the scroll until the table has appeared\n        this.addListenerOnce(\"appear\", () => {\n          this.scrollCellVisible(col, row);\n        });\n      }\n\n      var columnModel = this.getTableColumnModel();\n      var x = columnModel.getVisibleX(col);\n\n      var metaColumn = this._getMetaColumnAtColumnX(x);\n\n      if (metaColumn != -1) {\n        this.getPaneScroller(metaColumn).scrollCellVisible(col, row);\n      }\n    },\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        return this.getPaneScroller(metaColumn).isEditing();\n      }\n      return false;\n    },\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already editing\n     * or if the column is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        var started = this.getPaneScroller(metaColumn).startEditing();\n        return started;\n      }\n\n      return false;\n    },\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        this.getPaneScroller(metaColumn).stopEditing();\n      }\n    },\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        this.getPaneScroller(metaColumn).cancelEditing();\n      }\n    },\n\n    /**\n     * Update the table content of every attached table pane.\n     */\n    updateContent() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getTablePane().updateContent(true);\n      }\n    },\n\n    /**\n     * Activates the blocker widgets on all column headers and the\n     * column button\n     */\n    blockHeaderElements() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().getBlocker().blockContent(20);\n      }\n      this.getChildControl(\"column-button\").getBlocker().blockContent(20);\n    },\n\n    /**\n     * Deactivates the blocker widgets on all column headers and the\n     * column button\n     */\n    unblockHeaderElements() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().getBlocker().unblock();\n      }\n      this.getChildControl(\"column-button\").getBlocker().unblock();\n    },\n\n    /**\n     * Gets the meta column at a certain x position in the page. If there is no\n     * meta column at this position, -1 is returned.\n     *\n     * @param pageX {Integer} the position in the page to check (in pixels).\n     * @return {Integer} the index of the meta column or -1.\n     */\n    _getMetaColumnAtPageX(pageX) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var pos = scrollerArr[i].getContentLocation();\n\n        if (pageX >= pos.left && pageX <= pos.right) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Returns the meta column a column is shown in. If the column is not shown at\n     * all, -1 is returned.\n     *\n     * @param visXPos {Integer} the visible x position of the column.\n     * @return {Integer} the meta column the column is shown in.\n     */\n    _getMetaColumnAtColumnX(visXPos) {\n      var metaColumnCounts = this.getMetaColumnCounts();\n      var rightXPos = 0;\n\n      for (var i = 0; i < metaColumnCounts.length; i++) {\n        var counts = metaColumnCounts[i];\n        rightXPos += counts;\n\n        if (counts == -1 || visXPos < rightXPos) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Updates the text shown in the status bar.\n     */\n    _updateStatusBar() {\n      var tableModel = this.getTableModel();\n\n      if (this.getStatusBarVisible()) {\n        var selectedRowCount = this.getSelectionModel().getSelectedCount();\n        var rowCount = tableModel.getRowCount();\n\n        var text;\n\n        if (rowCount >= 0) {\n          if (selectedRowCount == 0) {\n            text = this.trn(\"one row\", \"%1 rows\", rowCount, rowCount);\n          } else {\n            text = this.trn(\n              \"one of one row\",\n              \"%1 of %2 rows\",\n              rowCount,\n              selectedRowCount,\n              rowCount\n            );\n          }\n        }\n\n        if (this.__additionalStatusBarText) {\n          if (text) {\n            text += this.__additionalStatusBarText;\n          } else {\n            text = this.__additionalStatusBarText;\n          }\n        }\n\n        if (text) {\n          this.getChildControl(\"statusbar\").setValue(text);\n        }\n      }\n    },\n\n    /**\n     * Updates the widths of all scrollers.\n     */\n    _updateScrollerWidths() {\n      // Give all scrollers except for the last one the wanted width\n      // (The last one has a flex with)\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var isLast = i == scrollerArr.length - 1;\n        var width = scrollerArr[i].getTablePaneModel().getTotalWidth();\n        scrollerArr[i].setPaneWidth(width);\n\n        var flex = isLast ? 1 : 0;\n        scrollerArr[i].setLayoutProperties({ flex: flex });\n      }\n    },\n\n    /**\n     * Updates the visibility of the scrollbars in the meta columns.\n     */\n    _updateScrollBarVisibility() {\n      if (!this.getBounds()) {\n        return;\n      }\n\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      var scrollerArr = this._getPaneScrollerArr();\n\n      // Check which scroll bars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n      var excludeScrollerScrollbarsIfNotNeeded;\n\n      // Determine whether we need to render horizontal scrollbars for meta\n      // columns that don't themselves actually require it\n      excludeScrollerScrollbarsIfNotNeeded =\n        this.getExcludeScrollerScrollbarsIfNotNeeded();\n\n      if (!excludeScrollerScrollbarsIfNotNeeded) {\n        for (var i = 0; i < scrollerArr.length; i++) {\n          var isLast = i == scrollerArr.length - 1;\n\n          // Only show the last vertical scrollbar\n          var bars = scrollerArr[i].getNeededScrollBars(horNeeded, !isLast);\n\n          if (bars & horBar) {\n            horNeeded = true;\n          }\n\n          if (isLast && bars & verBar) {\n            verNeeded = true;\n          }\n        }\n      }\n\n      // Set the needed scrollbars\n      for (var i = 0; i < scrollerArr.length; i++) {\n        isLast = i == scrollerArr.length - 1;\n\n        // If we don't want to include scrollbars for meta columns that don't\n        // require it, find out whether this meta column requires it.\n        if (excludeScrollerScrollbarsIfNotNeeded) {\n          horNeeded = !!(\n            scrollerArr[i].getNeededScrollBars(false, !isLast) & horBar\n          );\n\n          // Show the horizontal scrollbar if needed. Specify null to indicate\n          // that the scrollbar should be hidden rather than excluded.\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded || null);\n        } else {\n          // Show the horizontal scrollbar if needed.\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded);\n        }\n\n        // If this is the last meta-column...\n        if (isLast) {\n          // ... then get the current (old) use of vertical scroll bar\n          verNeeded = !!(\n            scrollerArr[i].getNeededScrollBars(false, false) & verBar\n          );\n\n          if (this.__hadVerticalScrollBar == null) {\n            this.__hadVerticalScrollBar =\n              scrollerArr[i].getVerticalScrollBarVisible();\n            this.__timer = qx.event.Timer.once(\n              function () {\n                // reset the last visible state of the vertical scroll bar\n                // in a timeout to prevent infinite loops.\n                this.__hadVerticalScrollBar = null;\n                this.__timer = null;\n              },\n              this,\n              0\n            );\n          }\n        }\n\n        scrollerArr[i].setVerticalScrollBarVisible(isLast && verNeeded);\n\n        // If this is the last meta-column and the use of a vertical scroll bar\n        // has changed...\n        if (isLast && verNeeded != this.__hadVerticalScrollBar) {\n          // ... then dispatch an event to any awaiting listeners\n          this.fireDataEvent(\"verticalScrollBarChanged\", verNeeded);\n        }\n      }\n    },\n\n    /**\n     * Initialize the column menu\n     */\n    _initColumnMenu() {\n      var tableModel = this.getTableModel();\n      var columnModel = this.getTableColumnModel();\n\n      var columnButton = this.getChildControl(\"column-button\");\n\n      // Remove all items from the menu. We'll rebuild it here.\n      columnButton.empty();\n\n      // Inform listeners who may want to insert menu items at the beginning\n      var menu = columnButton.getMenu();\n      var data = {\n        table: this,\n        menu: menu,\n        columnButton: columnButton\n      };\n\n      this.fireDataEvent(\"columnVisibilityMenuCreateStart\", data);\n\n      this.__columnMenuButtons = {};\n      for (var iCol = 0, l = tableModel.getColumnCount(); iCol < l; iCol++) {\n        var col = columnModel.getOverallColumnAtX(iCol);\n        var menuButton = columnButton.factory(\"menu-button\", {\n          text: tableModel.getColumnName(col),\n          column: col,\n          bVisible: columnModel.isColumnVisible(col)\n        });\n\n        qx.core.Assert.assertInterface(menuButton, qx.ui.table.IColumnMenuItem);\n\n        menuButton.addListener(\n          \"changeColumnVisible\",\n          this._createColumnVisibilityCheckBoxHandler(col),\n          this\n        );\n\n        this.__columnMenuButtons[col] = menuButton;\n      }\n\n      // Inform listeners who may want to insert menu items at the end\n      data = {\n        table: this,\n        menu: menu,\n        columnButton: columnButton\n      };\n\n      this.fireDataEvent(\"columnVisibilityMenuCreateEnd\", data);\n    },\n\n    /**\n     * Creates a handler for a check box of the column visibility menu.\n     *\n     * @param col {Integer} the model index of column to create the handler for.\n     * @return {Function} The created event handler.\n     */\n    _createColumnVisibilityCheckBoxHandler(col) {\n      return function (evt) {\n        var columnModel = this.getTableColumnModel();\n        columnModel.setColumnVisible(col, evt.getData());\n      };\n    },\n\n    /**\n     * Sets the width of a column.\n     *\n     * @param col {Integer} the model index of column.\n     * @param width {Integer} the new width in pixels.\n     */\n    setColumnWidth(col, width) {\n      this.getTableColumnModel().setColumnWidth(col, width);\n    },\n\n    /**\n     * Resize event handler\n     */\n    _onResize() {\n      this.fireEvent(\"tableWidthChanged\");\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    // overridden\n    addListener(type, listener, self, capture) {\n      if (this.self(arguments).__redirectEvents[type]) {\n        // start the id with the type (needed for removing)\n        var id = [type];\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          id.push(arr[i].addListener.apply(arr[i], arguments));\n        }\n        // join the id's of every event with \"\n        return id.join('\"');\n      } else {\n        return super.addListener(type, listener, self, capture);\n      }\n    },\n\n    // overridden\n    removeListener(type, listener, self, capture) {\n      if (this.self(arguments).__redirectEvents[type]) {\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          arr[i].removeListener.apply(arr[i], arguments);\n        }\n      } else {\n        super.removeListener(type, listener, self, capture);\n      }\n    },\n\n    // overridden\n    removeListenerById(id) {\n      var ids = id.split('\"');\n      // type is the first entry of the connected id\n      var type = ids.shift();\n      if (this.self(arguments).__redirectEvents[type]) {\n        var removed = true;\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          removed = arr[i].removeListenerById.call(arr[i], ids[i]) && removed;\n        }\n        return removed;\n      } else {\n        return super.removeListenerById(id);\n      }\n    },\n\n    destroy() {\n      this.getChildControl(\"column-button\").getMenu().destroy();\n      super.destroy();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    // remove the event listener which handled the locale change\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\n        \"changeLocale\",\n        this._onChangeLocale,\n        this\n      );\n    }\n\n    // we allocated these objects on init so we have to clean them up.\n    var selectionModel = this.getSelectionModel();\n    if (selectionModel) {\n      selectionModel.dispose();\n    }\n\n    var dataRowRenderer = this.getDataRowRenderer();\n    if (dataRowRenderer) {\n      dataRowRenderer.dispose();\n    }\n\n    if (this.getTableModel() != null) {\n      this.getTableModel().removeListener(\n        \"metaDataChanged\",\n        this._onTableModelMetaDataChanged,\n        this\n      );\n\n      this.getTableModel().removeListener(\n        \"dataChanged\",\n        this._onTableModelDataChanged,\n        this\n      );\n    }\n\n    this.getTableColumnModel().dispose();\n    this._disposeObjects(\n      \"__selectionManager\",\n      \"__scrollerParent\",\n      \"__emptyTableModel\",\n      \"__emptyTableModel\",\n      \"__columnModel\",\n      \"__timer\"\n    );\n\n    this._disposeMap(\"__columnMenuButtons\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;EAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EAAqC;IACnCC,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWC,MADgB;IAEnCC,OAAO,EAAEV,EAAE,CAACO,EAAH,CAAMC,IAAN,CAAWG,kBAFe;;IAInC;AACF;AACA;AACA;AACA;;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SA7FmC,qBA6FzBC,UA7FyB,EA6FbC,MA7Fa,EA6FL;MAC5B,yCAD4B,CAE5B;MACA;MACA;;MACA,IAAI,CAACA,MAAL,EAAa;QACXA,MAAM,GAAG,EAAT;MACD;;MAED,IAAIA,MAAM,CAACC,sBAAX,EAAmC;QACjC,KAAKC,yBAAL,CAA+BF,MAAM,CAACC,sBAAtC;MACD;;MAED,IAAID,MAAM,CAACG,gBAAX,EAA6B;QAC3B,KAAKC,sBAAL,CAA4BJ,MAAM,CAACG,gBAAnC;MACD;;MAED,IAAIH,MAAM,CAACK,cAAX,EAA2B;QACzB,KAAKC,oBAAL,CAA0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"
}