{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MDragDropScrolling",
    "construct",
    "tableModel",
    "custom",
    "initiallyHiddenColumns",
    "setInitiallyHiddenColumns",
    "selectionManager",
    "setNewSelectionManager",
    "selectionModel",
    "setNewSelectionModel",
    "tableColumnModel",
    "setNewTableColumnModel",
    "tablePane",
    "setNewTablePane",
    "tablePaneHeader",
    "setNewTablePaneHeader",
    "tablePaneScroller",
    "setNewTablePaneScroller",
    "tablePaneModel",
    "setNewTablePaneModel",
    "columnMenu",
    "setNewColumnMenu",
    "_setLayout",
    "layout",
    "VBox",
    "__scrollerParent",
    "container",
    "Composite",
    "HBox",
    "_add",
    "flex",
    "setDataRowRenderer",
    "table",
    "rowrenderer",
    "Default",
    "__selectionManager",
    "getNewSelectionManager",
    "setSelectionModel",
    "getNewSelectionModel",
    "setTableModel",
    "getEmptyTableModel",
    "setMetaColumnCounts",
    "setTabIndex",
    "addListener",
    "_onKeyDown",
    "_onFocusChanged",
    "spacer",
    "set",
    "height",
    "_onResize",
    "__focusedCol",
    "__focusedRow",
    "locale",
    "Manager",
    "getInstance",
    "_onChangeLocale",
    "initStatusBarVisible",
    "getTableModel",
    "init",
    "getContentElement",
    "setAttribute",
    "events",
    "columnVisibilityMenuCreateStart",
    "columnVisibilityMenuCreateEnd",
    "tableWidthChanged",
    "verticalScrollBarChanged",
    "cellTap",
    "cellDbltap",
    "cellContextmenu",
    "dataEdited",
    "statics",
    "__redirectEvents",
    "properties",
    "appearance",
    "refine",
    "focusable",
    "minWidth",
    "selectable",
    "check",
    "apply",
    "event",
    "rowHeight",
    "themeable",
    "forceLineHeight",
    "headerCellsVisible",
    "headerCellHeight",
    "nullable",
    "statusBarVisible",
    "additionalStatusBarText",
    "columnVisibilityButtonVisible",
    "metaColumnCounts",
    "focusCellOnPointerMove",
    "rowFocusChangeModifiesSelection",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "keepFirstVisibleRowComplete",
    "alwaysUpdateCells",
    "resetSelectionOnHeaderTap",
    "resetSelectionOnTapBelowRows",
    "minCellEditHeight",
    "dataRowRenderer",
    "modalCellEditorPreOpenFunction",
    "excludeScrollerScrollbarsIfNotNeeded",
    "newColumnMenu",
    "columnmenu",
    "Button",
    "newSelectionManager",
    "obj",
    "selection",
    "newSelectionModel",
    "Model",
    "newTableColumnModel",
    "columnmodel",
    "Basic",
    "newTablePane",
    "pane",
    "Pane",
    "newTablePaneHeader",
    "Header",
    "newTablePaneScroller",
    "Scroller",
    "newTablePaneModel",
    "columnModel",
    "members",
    "__additionalStatusBarText",
    "__lastRowCount",
    "__lastColCount",
    "__internalChange",
    "__columnMenuButtons",
    "__columnModel",
    "__emptyTableModel",
    "__hadVerticalScrollBar",
    "__timer",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "basic",
    "Label",
    "allowGrowX",
    "getNewColumnMenu",
    "menu",
    "factory",
    "_initColumnMenu",
    "_applySelectionModel",
    "value",
    "old",
    "removeListener",
    "_onSelectionChanged",
    "_applyRowHeight",
    "scrollerArr",
    "_getPaneScrollerArr",
    "i",
    "length",
    "updateVerScrollBarMaximum",
    "_applyHeaderCellsVisible",
    "_showChildControl",
    "_excludeChildControl",
    "getColumnVisibilityButtonVisible",
    "_applyColumnVisibilityButtonVisible",
    "_applyHeaderCellHeight",
    "getHeader",
    "setHeight",
    "_applyMinCellEditHeight",
    "setMinCellEditHeight",
    "model",
    "Simple",
    "setColumns",
    "setData",
    "_applyTableModel",
    "getTableColumnModel",
    "getColumnCount",
    "_onTableModelMetaDataChanged",
    "_onTableModelDataChanged",
    "_updateStatusBar",
    "_updateTableData",
    "getRowCount",
    "getNewTableColumnModel",
    "_onColVisibilityChanged",
    "_onColWidthChanged",
    "_onColOrderChanged",
    "paneScroller",
    "paneModel",
    "getTablePaneModel",
    "setTableColumnModel",
    "_applyStatusBarVisible",
    "_applyAdditionalStatusBarText",
    "_applyMetaColumnCounts",
    "handlers",
    "manager",
    "Registration",
    "getManager",
    "evName",
    "Table",
    "capture",
    "getListeners",
    "bubble",
    "_cleanUpMetaColumns",
    "leftX",
    "setFirstColumnX",
    "setMaxColumnCount",
    "getNewTablePaneModel",
    "getNewTablePaneScroller",
    "setTablePaneModel",
    "_onScrollY",
    "j",
    "context",
    "handler",
    "add",
    "isLast",
    "getHeaderCellHeight",
    "setTopRightWidget",
    "getChildControl",
    "isColumnVisibilityButtonVisible",
    "_updateScrollerWidths",
    "_updateScrollBarVisibility",
    "_applyFocusCellOnPointerMove",
    "setFocusCellOnPointerMove",
    "_applyShowCellFocusIndicator",
    "setShowCellFocusIndicator",
    "_applyContextMenuFromDataCellsOnly",
    "setContextMenuFromDataCellsOnly",
    "_applyKeepFirstVisibleRowComplete",
    "onKeepFirstVisibleRowCompleteChanged",
    "_applyResetSelectionOnHeaderTap",
    "setResetSelectionOnHeaderTap",
    "_applyResetSelectionOnTapBelowRows",
    "setResetSelectionOnTapBelowRows",
    "getSelectionManager",
    "getChildren",
    "getPaneScroller",
    "metaColumn",
    "fromMetaColumn",
    "destroy",
    "evt",
    "updateContent",
    "_onChangeTheme",
    "getDataRowRenderer",
    "initThemeValues",
    "onSelectionChanged",
    "onTableModelMetaDataChanged",
    "data",
    "getData",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "removeStart",
    "removeCount",
    "_onContextMenuOpen",
    "e",
    "getSelectionModel",
    "removeSelectionInterval",
    "setFocusedCell",
    "onTableModelDataChanged",
    "rowCount",
    "colCount",
    "setScrollY",
    "_onKeyPress",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "deprecateMethodOverriding",
    "getEnabled",
    "oldFocusedRow",
    "consumed",
    "identifier",
    "getKeyIdentifier",
    "isEditing",
    "getModifiers",
    "stopEditing",
    "moveFocusedCell",
    "startEditing",
    "cancelEditing",
    "focus",
    "isCtrlPressed",
    "setSelectionInterval",
    "handleSelectKeyDown",
    "scroller",
    "getTablePane",
    "getRowHeight",
    "direction",
    "getVisibleRowCount",
    "getScrollY",
    "getRowFocusChangeModifiesSelection",
    "handleMoveKeyDown",
    "preventDefault",
    "stopPropagation",
    "onFocusChanged",
    "onColVisibilityChanged",
    "col",
    "visible",
    "setColumnVisible",
    "setColumnWidth",
    "newWidth",
    "onColOrderChanged",
    "getTablePaneScrollerAtPageX",
    "pageX",
    "metaCol",
    "_getMetaColumnAtPageX",
    "row",
    "scrollVisible",
    "scrollCellVisible",
    "cellId",
    "toHashCode",
    "resetSelection",
    "resetCellFocus",
    "getFocusedColumn",
    "getFocusedRow",
    "highlightFocusedRow",
    "bHighlight",
    "setHighlightFocusRow",
    "clearFocusedRowHighlight",
    "relatedTarget",
    "getRelatedTarget",
    "FocusIndicator",
    "deltaX",
    "deltaY",
    "undefined",
    "x",
    "getVisibleX",
    "getVisibleColumnCount",
    "lang",
    "Number",
    "limit",
    "getVisibleColumnAtX",
    "elem",
    "getDomElement",
    "addListenerOnce",
    "_getMetaColumnAtColumnX",
    "started",
    "blockHeaderElements",
    "getBlocker",
    "blockContent",
    "unblockHeaderElements",
    "unblock",
    "pos",
    "getContentLocation",
    "left",
    "right",
    "visXPos",
    "getMetaColumnCounts",
    "rightXPos",
    "counts",
    "getStatusBarVisible",
    "selectedRowCount",
    "getSelectedCount",
    "text",
    "trn",
    "setValue",
    "width",
    "getTotalWidth",
    "setPaneWidth",
    "setLayoutProperties",
    "getBounds",
    "horBar",
    "HORIZONTAL_SCROLLBAR",
    "verBar",
    "VERTICAL_SCROLLBAR",
    "horNeeded",
    "verNeeded",
    "getExcludeScrollerScrollbarsIfNotNeeded",
    "bars",
    "getNeededScrollBars",
    "setHorizontalScrollBarVisible",
    "getVerticalScrollBarVisible",
    "Timer",
    "once",
    "setVerticalScrollBarVisible",
    "fireDataEvent",
    "columnButton",
    "empty",
    "getMenu",
    "iCol",
    "l",
    "getOverallColumnAtX",
    "menuButton",
    "getColumnName",
    "column",
    "bVisible",
    "isColumnVisible",
    "Assert",
    "assertInterface",
    "IColumnMenuItem",
    "_createColumnVisibilityCheckBoxHandler",
    "fireEvent",
    "type",
    "listener",
    "self",
    "arr",
    "push",
    "arguments",
    "join",
    "removeListenerById",
    "ids",
    "split",
    "shift",
    "removed",
    "call",
    "destruct",
    "dispose",
    "_disposeObjects",
    "_disposeMap"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/Table.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Table\n *\n * A detailed description can be found in the package description\n * {@link qx.ui.table}.\n *\n * @childControl statusbar {qx.ui.basic.Label} label to show the status of the table\n * @childControl column-button {qx.ui.table.columnmenu.Button} button to open the column menu\n */\nqx.Class.define(\"qx.ui.table.Table\", {\n  extend: qx.ui.core.Widget,\n  include: qx.ui.core.MDragDropScrolling,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param tableModel {qx.ui.table.ITableModel ? null}\n   *   The table model to read the data from.\n   *\n   * @param custom {Map ? null}\n   *   A map provided to override the various supplemental classes allocated\n   *   within this constructor.  Each property must be a function which\n   *   returns an object instance, as indicated by shown the defaults listed\n   *   here:\n   *\n   *   <dl>\n   *     <dt>initiallyHiddenColumns</dt>\n   *       <dd>\n   *         {Array?}\n   *         A list of column numbers that should be initially invisible. Any\n   *         column not mentioned will be initially visible, and if no array\n   *         is provided, all columns will be initially visible.\n   *       </dd>\n   *     <dt>selectionManager</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.selection.Manager(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>selectionModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.selection.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tableColumnModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.columnmodel.Basic(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePane</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Pane(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneHeader</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Header(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneScroller</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Scroller(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tablePaneModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.pane.Model(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>columnMenu</dt>\n   *       <dd><pre class='javascript'>\n   *         function()\n   *         {\n   *           return new qx.ui.table.columnmenu.Button();\n   *         }\n   *       </pre></dd>\n   *   </dl>\n   */\n  construct(tableModel, custom) {\n    super();\n    //\n    // Use default objects if custom objects are not specified\n    //\n    if (!custom) {\n      custom = {};\n    }\n\n    if (custom.initiallyHiddenColumns) {\n      this.setInitiallyHiddenColumns(custom.initiallyHiddenColumns);\n    }\n\n    if (custom.selectionManager) {\n      this.setNewSelectionManager(custom.selectionManager);\n    }\n\n    if (custom.selectionModel) {\n      this.setNewSelectionModel(custom.selectionModel);\n    }\n\n    if (custom.tableColumnModel) {\n      this.setNewTableColumnModel(custom.tableColumnModel);\n    }\n\n    if (custom.tablePane) {\n      this.setNewTablePane(custom.tablePane);\n    }\n\n    if (custom.tablePaneHeader) {\n      this.setNewTablePaneHeader(custom.tablePaneHeader);\n    }\n\n    if (custom.tablePaneScroller) {\n      this.setNewTablePaneScroller(custom.tablePaneScroller);\n    }\n\n    if (custom.tablePaneModel) {\n      this.setNewTablePaneModel(custom.tablePaneModel);\n    }\n\n    if (custom.columnMenu) {\n      this.setNewColumnMenu(custom.columnMenu);\n    }\n\n    this._setLayout(new qx.ui.layout.VBox());\n\n    // Create the child widgets\n    this.__scrollerParent = new qx.ui.container.Composite(\n      new qx.ui.layout.HBox()\n    );\n\n    this._add(this.__scrollerParent, { flex: 1 });\n\n    // Allocate a default data row renderer\n    this.setDataRowRenderer(new qx.ui.table.rowrenderer.Default(this));\n\n    // Create the models\n    this.__selectionManager = this.getNewSelectionManager()(this);\n    this.setSelectionModel(this.getNewSelectionModel()(this));\n    this.setTableModel(tableModel || this.getEmptyTableModel());\n\n    // create the main meta column\n    this.setMetaColumnCounts([-1]);\n\n    // Make focusable\n    this.setTabIndex(1);\n    this.addListener(\"keydown\", this._onKeyDown);\n    this.addListener(\"focus\", this._onFocusChanged);\n    this.addListener(\"blur\", this._onFocusChanged);\n\n    // attach the resize listener to the last child of the layout. This\n    // ensures that all other children are laid out before\n    var spacer = new qx.ui.core.Widget().set({\n      height: 0\n    });\n\n    this._add(spacer);\n    spacer.addListener(\"resize\", this._onResize, this);\n\n    this.__focusedCol = null;\n    this.__focusedRow = null;\n\n    // add an event listener which updates the table content on locale change\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\n        \"changeLocale\",\n        this._onChangeLocale,\n        this\n      );\n    }\n\n    this.initStatusBarVisible();\n\n    // If the table model has an init() method...\n    tableModel = this.getTableModel();\n    if (tableModel.init && typeof tableModel.init == \"function\") {\n      // ... then call it now to allow the table model to affect table\n      // properties.\n      tableModel.init(this);\n    }\n\n    // ARIA attrs\n    this.getContentElement().setAttribute(\"role\", \"grid\");\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Dispatched before adding the column list to the column visibility menu.\n     * The event data is a map with two properties: table and menu.  Listeners\n     * may add additional items to the menu, which appear at the top of the\n     * menu.\n     */\n    columnVisibilityMenuCreateStart: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched after adding the column list to the column visibility menu.\n     * The event data is a map with two properties: table and menu.  Listeners\n     * may add additional items to the menu, which appear at the bottom of the\n     * menu.\n     */\n    columnVisibilityMenuCreateEnd: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched when the width of the table has changed.\n     */\n    tableWidthChanged: \"qx.event.type.Event\",\n\n    /**\n     * Dispatched when updating scrollbars discovers that a vertical scrollbar\n     * is needed when it previously was not, or vice versa.  The data is a\n     * boolean indicating whether a vertical scrollbar is now being used.\n     */\n    verticalScrollBarChanged: \"qx.event.type.Data\",\n\n    /**\n     * Dispatched when a data cell has been tapped.\n     */\n    cellTap: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched when a data cell has been tapped.\n     */\n    cellDbltap: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched when the context menu is needed in a data cell\n     */\n    cellContextmenu: \"qx.ui.table.pane.CellEvent\",\n\n    /**\n     * Dispatched after a cell editor is flushed.\n     *\n     * The data is a map containing this properties:\n     * <ul>\n     *   <li>row</li>\n     *   <li>col</li>\n     *   <li>value</li>\n     *   <li>oldValue</li>\n     * </ul>\n     */\n    dataEdited: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** Events that must be redirected to the scrollers. */\n    __redirectEvents: { cellTap: 1, cellDbltap: 1, cellContextmenu: 1 }\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties: {\n    appearance: {\n      refine: true,\n      init: \"table\"\n    },\n\n    focusable: {\n      refine: true,\n      init: true\n    },\n\n    minWidth: {\n      refine: true,\n      init: 50\n    },\n\n    /**\n     * The list of columns that are initially hidden. This property is set by\n     * the constructor, from the value received in\n     * custom.initiallyHiddenColumns, and is only used when a column model is\n     * initialized. It can be of great benefit in tables with numerous columns\n     * where most are not initially visible. The process of creating the\n     * headers for all of the columns, only to have those columns discarded\n     * shortly thereafter when setColumnVisibility(false) is called, is a\n     * waste of (significant, in some browsers) time. Specifying the\n     * non-visible columns at constructor time can therefore avoid the initial\n     * creation of all of those superfluous widgets.\n     */\n    initiallyHiddenColumns: {\n      init: null\n    },\n\n    /**\n     * Whether the widget contains content which may be selected by the user.\n     *\n     * If the value set to <code>true</code> the native browser selection can\n     * be used for text selection. But it is normally useful for\n     * forms fields, longer texts/documents, editors, etc.\n     *\n     * Note: This has no effect on Table!\n     */\n    selectable: {\n      refine: true,\n      init: false\n    },\n\n    /** The selection model. */\n    selectionModel: {\n      check: \"qx.ui.table.selection.Model\",\n      apply: \"_applySelectionModel\",\n      event: \"changeSelectionModel\"\n    },\n\n    /** The table model. */\n    tableModel: {\n      check: \"qx.ui.table.ITableModel\",\n      apply: \"_applyTableModel\",\n      event: \"changeTableModel\"\n    },\n\n    /** The height of the table rows. */\n    rowHeight: {\n      check: \"Number\",\n      init: 20,\n      apply: \"_applyRowHeight\",\n      event: \"changeRowHeight\",\n      themeable: true\n    },\n\n    /**\n     * Force line height to match row height.  May be disabled if cell\n     * renderers being used wish to render multiple lines of data within a\n     * cell.  (With the default setting, all but the first of multiple lines\n     * of data will not be visible.)\n     */\n    forceLineHeight: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     *  Whether the header cells are visible. When setting this to false,\n     *  you'll likely also want to set the {#columnVisibilityButtonVisible}\n     *  property to false as well, to entirely remove the header row.\n     */\n    headerCellsVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyHeaderCellsVisible\",\n      themeable: true\n    },\n\n    /** The height of the header cells. */\n    headerCellHeight: {\n      check: \"Integer\",\n      init: 16,\n      apply: \"_applyHeaderCellHeight\",\n      event: \"changeHeaderCellHeight\",\n      nullable: true,\n      themeable: true\n    },\n\n    /** Whether to show the status bar */\n    statusBarVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyStatusBarVisible\"\n    },\n\n    /** The Statusbartext, set it, if you want some more Information */\n    additionalStatusBarText: {\n      nullable: true,\n      init: null,\n      apply: \"_applyAdditionalStatusBarText\"\n    },\n\n    /** Whether to show the column visibility button */\n    columnVisibilityButtonVisible: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyColumnVisibilityButtonVisible\",\n      themeable: true\n    },\n\n    /**\n     * @type {Integer[]} The number of columns per meta column. If the last array entry is -1,\n     * this meta column will get the remaining columns.\n     */\n    metaColumnCounts: {\n      check: \"Object\",\n      apply: \"_applyMetaColumnCounts\"\n    },\n\n    /**\n     * Whether the focus should moved when the pointer is moved over a cell. If false\n     * the focus is only moved on pointer taps.\n     */\n    focusCellOnPointerMove: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyFocusCellOnPointerMove\"\n    },\n\n    /**\n     * Whether row focus change by keyboard also modifies selection\n     */\n    rowFocusChangeModifiesSelection: {\n      check: \"Boolean\",\n      init: true\n    },\n\n    /**\n     * Whether the cell focus indicator should be shown\n     */\n    showCellFocusIndicator: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyShowCellFocusIndicator\"\n    },\n\n    /**\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\n     * is right-clicked. It is not fired when a right-click occurs in the\n     * empty area of the table below the last data row. By turning on this\n     * property, \"cellContextMenu\" events will also be generated when a\n     * right-click occurs in that empty area. In such a case, row identifier\n     * in the event data will be null, so event handlers can check (row ===\n     * null) to handle this case.\n     */\n    contextMenuFromDataCellsOnly: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyContextMenuFromDataCellsOnly\"\n    },\n\n    /**\n     * Whether the table should keep the first visible row complete. If set to false,\n     * the first row may be rendered partial, depending on the vertical scroll value.\n     */\n    keepFirstVisibleRowComplete: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyKeepFirstVisibleRowComplete\"\n    },\n\n    /**\n     * Whether the table cells should be updated when only the selection or the\n     * focus changed. This slows down the table update but allows to react on a\n     * changed selection or a changed focus in a cell renderer.\n     */\n    alwaysUpdateCells: {\n      check: \"Boolean\",\n      init: false\n    },\n\n    /**\n     * Whether to reset the selection when a header cell is tapped. Since\n     * most data models do not have provisions to retain a selection after\n     * sorting, the default is to reset the selection in this case. Some data\n     * models, however, do have the capability to retain the selection, so\n     * when using those, this property should be set to false.\n     */\n    resetSelectionOnHeaderTap: {\n      check: \"Boolean\",\n      init: true,\n      apply: \"_applyResetSelectionOnHeaderTap\"\n    },\n\n    /**\n     * Whether to reset the selection when the unpopulated table area is tapped.\n     * The default is false which keeps the behaviour as before\n     */\n    resetSelectionOnTapBelowRows: {\n      check: \"Boolean\",\n      init: false,\n      apply: \"_applyResetSelectionOnTapBelowRows\"\n    },\n\n    /**\n     * If set then defines the minimum height of the focus indicator when editing\n     */\n    minCellEditHeight: {\n      check: \"Integer\",\n      nullable: true,\n      init: null,\n      apply: \"_applyMinCellEditHeight\"\n    },\n\n    /** The renderer to use for styling the rows. */\n    dataRowRenderer: {\n      check: \"qx.ui.table.IRowRenderer\",\n      init: null,\n      nullable: true,\n      event: \"changeDataRowRenderer\"\n    },\n\n    /**\n     * A function to call when before modal cell editor is opened.\n     *\n     * @signature function(cellEditor, cellInfo)\n     *\n     * @param cellEditor {qx.ui.window.Window}\n     *   The modal window which has been created for this cell editor\n     *\n     * @param cellInfo {Map}\n     *   Information about the cell for which this cell editor was created.\n     *   It contains the following properties:\n     *       col, row, xPos, value\n     *\n     */\n    modalCellEditorPreOpenFunction: {\n      check: \"Function\",\n      init: null,\n      nullable: true\n    },\n\n    /**\n     * By default, all Scrollers' (meta-columns') horizontal scrollbars are\n     * shown if any one is required. Allow not showing any that are not\n     * required.\n     */\n    excludeScrollerScrollbarsIfNotNeeded: {\n      check: \"Boolean\",\n      init: false,\n      nullable: false\n    },\n\n    /**\n     * A function to instantiate a new column menu button.\n     */\n    newColumnMenu: {\n      check: \"Function\",\n      init() {\n        return new qx.ui.table.columnmenu.Button();\n      }\n    },\n\n    /**\n     * A function to instantiate a selection manager.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property must\n     * be set before calling the Table constructor.\n     */\n    newSelectionManager: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.selection.Manager(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a selection model.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property must\n     * be set before calling the Table constructor.\n     */\n    newSelectionModel: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.selection.Model(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table column model.  This allows subclasses\n     * of Table to subclass this internal class.  To take effect, this\n     * property must be set before calling the Table constructor.\n     */\n    newTableColumnModel: {\n      check: \"Function\",\n      init(table) {\n        return new qx.ui.table.columnmodel.Basic(table);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property\n     * must be set before calling the Table constructor.\n     */\n    newTablePane: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Pane(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane.  this allows subclasses of\n     * Table to subclass this internal class.  To take effect, this property\n     * must be set before calling the Table constructor.\n     */\n    newTablePaneHeader: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Header(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane scroller.  this allows\n     * subclasses of Table to subclass this internal class.  To take effect,\n     * this property must be set before calling the Table constructor.\n     */\n    newTablePaneScroller: {\n      check: \"Function\",\n      init(obj) {\n        return new qx.ui.table.pane.Scroller(obj);\n      }\n    },\n\n    /**\n     * A function to instantiate a table pane model.  this allows subclasses\n     * of Table to subclass this internal class.  To take effect, this\n     * property must be set before calling the Table constructor.\n     */\n    newTablePaneModel: {\n      check: \"Function\",\n      init(columnModel) {\n        return new qx.ui.table.pane.Model(columnModel);\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __focusedCol: null,\n    __focusedRow: null,\n\n    __scrollerParent: null,\n\n    __selectionManager: null,\n\n    __additionalStatusBarText: null,\n    __lastRowCount: null,\n    __lastColCount: null,\n    __internalChange: null,\n\n    __columnMenuButtons: null,\n    __columnModel: null,\n    __emptyTableModel: null,\n\n    __hadVerticalScrollBar: null,\n\n    __timer: null,\n\n    // overridden\n    _createChildControlImpl(id, hash) {\n      var control;\n\n      switch (id) {\n        case \"statusbar\":\n          control = new qx.ui.basic.Label();\n          control.set({\n            allowGrowX: true\n          });\n\n          this._add(control);\n          break;\n\n        case \"column-button\":\n          control = this.getNewColumnMenu()();\n          control.set({\n            focusable: false\n          });\n\n          // Create the initial menu too\n          var menu = control.factory(\"menu\", { table: this });\n\n          // Add a listener to initialize the column menu when it becomes visible\n          menu.addListener(\"appear\", this._initColumnMenu, this);\n\n          break;\n      }\n\n      return control || super._createChildControlImpl(id);\n    },\n\n    // property modifier\n    _applySelectionModel(value, old) {\n      this.__selectionManager.setSelectionModel(value);\n\n      if (old != null) {\n        old.removeListener(\"changeSelection\", this._onSelectionChanged, this);\n      }\n\n      value.addListener(\"changeSelection\", this._onSelectionChanged, this);\n    },\n\n    // property modifier\n    _applyRowHeight(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].updateVerScrollBarMaximum();\n      }\n    },\n\n    // property modifier\n    _applyHeaderCellsVisible(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        if (value) {\n          scrollerArr[i]._showChildControl(\"header\");\n        } else {\n          scrollerArr[i]._excludeChildControl(\"header\");\n        }\n      }\n      // also hide the column visibility button\n      if (this.getColumnVisibilityButtonVisible()) {\n        this._applyColumnVisibilityButtonVisible(value);\n      }\n    },\n\n    // property modifier\n    _applyHeaderCellHeight(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().setHeight(value);\n      }\n    },\n\n    // property modifier\n    _applyMinCellEditHeight(value) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setMinCellEditHeight(value);\n      }\n    },\n\n    /**\n     * Get an empty table model instance to use for this table. Use this table\n     * to configure the table with no table model.\n     *\n     * @return {qx.ui.table.ITableModel} The empty table model\n     */\n    getEmptyTableModel() {\n      if (!this.__emptyTableModel) {\n        this.__emptyTableModel = new qx.ui.table.model.Simple();\n        this.__emptyTableModel.setColumns([]);\n        this.__emptyTableModel.setData([]);\n      }\n      return this.__emptyTableModel;\n    },\n\n    // property modifier\n    _applyTableModel(value, old) {\n      this.getTableColumnModel().init(value.getColumnCount(), this);\n\n      if (old != null) {\n        old.removeListener(\n          \"metaDataChanged\",\n          this._onTableModelMetaDataChanged,\n          this\n        );\n\n        old.removeListener(\"dataChanged\", this._onTableModelDataChanged, this);\n      }\n\n      value.addListener(\n        \"metaDataChanged\",\n        this._onTableModelMetaDataChanged,\n        this\n      );\n\n      value.addListener(\"dataChanged\", this._onTableModelDataChanged, this);\n\n      // Update the status bar\n      this._updateStatusBar();\n\n      this._updateTableData(0, value.getRowCount(), 0, value.getColumnCount());\n\n      this._onTableModelMetaDataChanged();\n\n      // If the table model has an init() method, call it. We don't, however,\n      // call it if this is the initial setting of the table model, as the\n      // scrollers are not yet initialized. In that case, the init method is\n      // called explicitly by the Table constructor.\n      if (old && value.init && typeof value.init == \"function\") {\n        value.init(this);\n      }\n    },\n\n    /**\n     * Get the The table column model.\n     *\n     * @return {qx.ui.table.columnmodel.Basic} The table's column model\n     */\n    getTableColumnModel() {\n      if (!this.__columnModel) {\n        var columnModel = (this.__columnModel =\n          this.getNewTableColumnModel()(this));\n\n        columnModel.addListener(\n          \"visibilityChanged\",\n          this._onColVisibilityChanged,\n          this\n        );\n\n        columnModel.addListener(\"widthChanged\", this._onColWidthChanged, this);\n        columnModel.addListener(\"orderChanged\", this._onColOrderChanged, this);\n\n        // Get the current table model\n        var tableModel = this.getTableModel();\n        columnModel.init(tableModel.getColumnCount(), this);\n\n        // Reset the table column model in each table pane model\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          var paneScroller = scrollerArr[i];\n          var paneModel = paneScroller.getTablePaneModel();\n          paneModel.setTableColumnModel(columnModel);\n        }\n      }\n      return this.__columnModel;\n    },\n\n    // property modifier\n    _applyStatusBarVisible(value, old) {\n      if (value) {\n        this._showChildControl(\"statusbar\");\n      } else {\n        this._excludeChildControl(\"statusbar\");\n      }\n\n      if (value) {\n        this._updateStatusBar();\n      }\n    },\n\n    // property modifier\n    _applyAdditionalStatusBarText(value, old) {\n      this.__additionalStatusBarText = value;\n      this._updateStatusBar();\n    },\n\n    // property modifier\n    _applyColumnVisibilityButtonVisible(value, old) {\n      if (value) {\n        this._showChildControl(\"column-button\");\n      } else {\n        this._excludeChildControl(\"column-button\");\n      }\n    },\n\n    // property modifier\n    _applyMetaColumnCounts(value, old) {\n      var metaColumnCounts = value;\n      var scrollerArr = this._getPaneScrollerArr();\n      var handlers = {};\n\n      if (value > old) {\n        // Save event listeners on the redirected events so we can re-apply\n        // them to new scrollers.\n        var manager = qx.event.Registration.getManager(scrollerArr[0]);\n        for (var evName in qx.ui.table.Table.__redirectEvents) {\n          handlers[evName] = {};\n          handlers[evName].capture = manager.getListeners(\n            scrollerArr[0],\n            evName,\n            true\n          );\n\n          handlers[evName].bubble = manager.getListeners(\n            scrollerArr[0],\n            evName,\n            false\n          );\n        }\n      }\n\n      // Remove the panes not needed any more\n      this._cleanUpMetaColumns(metaColumnCounts.length);\n\n      // Update the old panes\n      var leftX = 0;\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var paneScroller = scrollerArr[i];\n        var paneModel = paneScroller.getTablePaneModel();\n        paneModel.setFirstColumnX(leftX);\n        paneModel.setMaxColumnCount(metaColumnCounts[i]);\n        leftX += metaColumnCounts[i];\n      }\n\n      // Add the new panes\n      if (metaColumnCounts.length > scrollerArr.length) {\n        var columnModel = this.getTableColumnModel();\n\n        for (var i = scrollerArr.length; i < metaColumnCounts.length; i++) {\n          var paneModel = this.getNewTablePaneModel()(columnModel);\n          paneModel.setFirstColumnX(leftX);\n          paneModel.setMaxColumnCount(metaColumnCounts[i]);\n          leftX += metaColumnCounts[i];\n\n          var paneScroller = this.getNewTablePaneScroller()(this);\n          paneScroller.setTablePaneModel(paneModel);\n\n          // Register event listener for vertical scrolling\n          paneScroller.addListener(\"changeScrollY\", this._onScrollY, this);\n\n          // Apply redirected events to this new scroller\n          for (evName in qx.ui.table.Table.__redirectEvents) {\n            // On first setting of meta columns (constructing phase), there\n            // are no handlers to deal with yet.\n            if (!handlers[evName]) {\n              break;\n            }\n\n            if (\n              handlers[evName].capture &&\n              handlers[evName].capture.length > 0\n            ) {\n              var capture = handlers[evName].capture;\n              for (var j = 0; j < capture.length; j++) {\n                // Determine what context to use.  If the context does not\n                // exist, we assume that the context is this table.  If it\n                // does exist and it equals the first pane scroller (from\n                // which we retrieved the listeners) then set the context\n                // to be this new pane scroller.  Otherwise leave the context\n                // as it was set.\n                var context = capture[j].context;\n                if (!context) {\n                  context = this;\n                } else if (context == scrollerArr[0]) {\n                  context = paneScroller;\n                }\n\n                paneScroller.addListener(\n                  evName,\n                  capture[j].handler,\n                  context,\n                  true\n                );\n              }\n            }\n\n            if (handlers[evName].bubble && handlers[evName].bubble.length > 0) {\n              var bubble = handlers[evName].bubble;\n              for (var j = 0; j < bubble.length; j++) {\n                // Determine what context to use.  If the context does not\n                // exist, we assume that the context is this table.  If it\n                // does exist and it equals the first pane scroller (from\n                // which we retrieved the listeners) then set the context\n                // to be this new pane scroller.  Otherwise leave the context\n                // as it was set.\n                var context = bubble[j].context;\n                if (!context) {\n                  context = this;\n                } else if (context == scrollerArr[0]) {\n                  context = paneScroller;\n                }\n\n                paneScroller.addListener(\n                  evName,\n                  bubble[j].handler,\n                  context,\n                  false\n                );\n              }\n            }\n          }\n\n          // last meta column is flexible\n          var flex = i == metaColumnCounts.length - 1 ? 1 : 0;\n          this.__scrollerParent.add(paneScroller, { flex: flex });\n          scrollerArr = this._getPaneScrollerArr();\n        }\n      }\n\n      // Update all meta columns\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var paneScroller = scrollerArr[i];\n        var isLast = i == scrollerArr.length - 1;\n\n        // Set the right header height\n        paneScroller.getHeader().setHeight(this.getHeaderCellHeight());\n\n        // Put the column visibility button in the top right corner of the last meta column\n        paneScroller.setTopRightWidget(\n          isLast ? this.getChildControl(\"column-button\") : null\n        );\n      }\n\n      if (!this.isColumnVisibilityButtonVisible()) {\n        this._excludeChildControl(\"column-button\");\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    // property modifier\n    _applyFocusCellOnPointerMove(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setFocusCellOnPointerMove(value);\n      }\n    },\n\n    // property modifier\n    _applyShowCellFocusIndicator(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setShowCellFocusIndicator(value);\n      }\n    },\n\n    // property modifier\n    _applyContextMenuFromDataCellsOnly(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setContextMenuFromDataCellsOnly(value);\n      }\n    },\n\n    // property modifier\n    _applyKeepFirstVisibleRowComplete(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onKeepFirstVisibleRowCompleteChanged();\n      }\n    },\n\n    // property modifier\n    _applyResetSelectionOnHeaderTap(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setResetSelectionOnHeaderTap(value);\n      }\n    },\n\n    // property modifier\n    _applyResetSelectionOnTapBelowRows(value, old) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].setResetSelectionOnTapBelowRows(value);\n      }\n    },\n\n    /**\n     * Returns the selection manager.\n     *\n     * @return {qx.ui.table.selection.Manager} the selection manager.\n     */\n    getSelectionManager() {\n      return this.__selectionManager;\n    },\n\n    /**\n     * Returns an array containing all TablePaneScrollers in this table.\n     *\n     * @return {qx.ui.table.pane.Scroller[]} all TablePaneScrollers in this table.\n     */\n    _getPaneScrollerArr() {\n      return this.__scrollerParent.getChildren();\n    },\n\n    /**\n     * Returns a TablePaneScroller of this table.\n     *\n     * @param metaColumn {Integer} the meta column to get the TablePaneScroller for.\n     * @return {qx.ui.table.pane.Scroller} the qx.ui.table.pane.Scroller.\n     */\n    getPaneScroller(metaColumn) {\n      return this._getPaneScrollerArr()[metaColumn];\n    },\n\n    /**\n     * Cleans up the meta columns.\n     *\n     * @param fromMetaColumn {Integer} the first meta column to clean up. All following\n     *      meta columns will be cleaned up, too. All previous meta columns will\n     *      stay unchanged. If 0 all meta columns will be cleaned up.\n     */\n    _cleanUpMetaColumns(fromMetaColumn) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      if (scrollerArr != null) {\n        for (var i = scrollerArr.length - 1; i >= fromMetaColumn; i--) {\n          scrollerArr[i].destroy();\n        }\n      }\n    },\n\n    /**\n     * Event handler. Called when the locale has changed.\n     *\n     * @param evt {Event} the event.\n     */\n    _onChangeLocale(evt) {\n      this.updateContent();\n      this._updateStatusBar();\n    },\n\n    // overridden\n    _onChangeTheme() {\n      super._onChangeTheme();\n\n      this.getDataRowRenderer().initThemeValues();\n      this.updateContent();\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the selection has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onSelectionChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onSelectionChanged();\n      }\n\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onTableModelMetaDataChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onTableModelMetaDataChanged();\n      }\n\n      this._updateStatusBar();\n    },\n\n    /**\n     * Event handler. Called when the table model data has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onTableModelDataChanged(evt) {\n      var data = evt.getData();\n\n      this._updateTableData(\n        data.firstRow,\n        data.lastRow,\n        data.firstColumn,\n        data.lastColumn,\n        data.removeStart,\n        data.removeCount\n      );\n    },\n\n    // overridden\n    _onContextMenuOpen(e) {\n      // This is Widget's context menu handler which typically retrieves\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\n      // We want to allow the cellContextmenu handler to create the menu,\n      // so we'll override this method with a null one, and do the menu\n      // placement and display handling in our _onContextMenu method.\n    },\n\n    /**\n     * To update the table if the table model has changed and remove selection.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     * @param removeStart {Integer ? null} The first index of the interval (including), to remove selection.\n     * @param removeCount {Integer ? null} The count of the interval, to remove selection.\n     */\n    _updateTableData(\n      firstRow,\n      lastRow,\n      firstColumn,\n      lastColumn,\n      removeStart,\n      removeCount\n    ) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      // update selection if rows were removed\n      if (removeCount) {\n        this.getSelectionModel().removeSelectionInterval(\n          removeStart,\n          removeStart + removeCount - 1,\n          true\n        );\n\n        // remove focus if the focused row has been removed\n        if (\n          this.__focusedRow >= removeStart &&\n          this.__focusedRow < removeStart + removeCount\n        ) {\n          this.setFocusedCell();\n        }\n      }\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onTableModelDataChanged(\n          firstRow,\n          lastRow,\n          firstColumn,\n          lastColumn\n        );\n      }\n\n      var rowCount = this.getTableModel().getRowCount();\n\n      if (rowCount != this.__lastRowCount) {\n        this.__lastRowCount = rowCount;\n\n        this._updateScrollBarVisibility();\n        this._updateStatusBar();\n\n        // ARIA attrs\n        this.getContentElement().setAttribute(\"aria-rowcount\", rowCount);\n      }\n\n      const colCount = this.getTableModel().getColumnCount();\n\n      if (colCount != this.__lastColCount) {\n        this.__lastColCount = colCount;\n\n        // ARIA attrs\n        this.getContentElement().setAttribute(\"aria-colcount\", colCount);\n      }\n    },\n\n    /**\n     * Event handler. Called when a TablePaneScroller has been scrolled vertically.\n     *\n     * @param evt {Map} the event.\n     */\n    _onScrollY(evt) {\n      if (!this.__internalChange) {\n        this.__internalChange = true;\n\n        // Set the same scroll position to all meta columns\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          scrollerArr[i].setScrollY(evt.getData());\n        }\n\n        this.__internalChange = false;\n      }\n    },\n\n    /**\n     * Event handler. Called when a key was pressed.\n     *\n     * @param evt {qx.event.type.KeySequence} the event.\n     * @deprecated {6.0} please use _onKeyDown instead!\n     */\n    _onKeyPress(evt) {\n      qx.log.Logger.deprecatedMethodWarning(\n        this._onKeyPress,\n        \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\"\n      );\n\n      qx.log.Logger.deprecateMethodOverriding(\n        this,\n        qx.ui.table.Table,\n        \"_onKeyPress\",\n        \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\"\n      );\n\n      this._onKeyDown(evt);\n    },\n    /**\n     * Event handler. Called when on key down event\n     *\n     * @param evt {qx.event.type.KeySequence} the event.\n     */\n    _onKeyDown(evt) {\n      if (!this.getEnabled()) {\n        return;\n      }\n\n      // No editing mode\n      var oldFocusedRow = this.__focusedRow;\n      var consumed = false;\n\n      // Handle keys that are independent from the modifiers\n      var identifier = evt.getKeyIdentifier();\n\n      if (this.isEditing()) {\n        // Editing mode\n        if (evt.getModifiers() == 0) {\n          switch (identifier) {\n            case \"Enter\":\n              this.stopEditing();\n              var oldFocusedRow = this.__focusedRow;\n              this.moveFocusedCell(0, 1);\n\n              if (this.__focusedRow != oldFocusedRow) {\n                consumed = this.startEditing();\n              }\n\n              break;\n\n            case \"Escape\":\n              this.cancelEditing();\n              this.focus();\n              break;\n\n            default:\n              consumed = false;\n              break;\n          }\n        }\n      } else {\n        consumed = true;\n        // No editing mode\n        if (evt.isCtrlPressed()) {\n          // Handle keys that depend on modifiers\n\n          switch (identifier) {\n            case \"A\": // Ctrl + A\n              var rowCount = this.getTableModel().getRowCount();\n\n              if (rowCount > 0) {\n                this.getSelectionModel().setSelectionInterval(0, rowCount - 1);\n              }\n\n              break;\n\n            default:\n              consumed = false;\n              break;\n          }\n        } else {\n          // Handle keys that are independent from the modifiers\n          switch (identifier) {\n            case \"Space\":\n              this.__selectionManager.handleSelectKeyDown(\n                this.__focusedRow,\n                evt\n              );\n\n              break;\n\n            case \"F2\":\n            case \"Enter\":\n              this.startEditing();\n              consumed = true;\n              break;\n\n            case \"Home\":\n              this.setFocusedCell(this.__focusedCol, 0, true);\n              break;\n\n            case \"End\":\n              var rowCount = this.getTableModel().getRowCount();\n              this.setFocusedCell(this.__focusedCol, rowCount - 1, true);\n              break;\n\n            case \"Left\":\n              this.moveFocusedCell(-1, 0);\n              break;\n\n            case \"Right\":\n              this.moveFocusedCell(1, 0);\n              break;\n\n            case \"Up\":\n              this.moveFocusedCell(0, -1);\n              break;\n\n            case \"Down\":\n              this.moveFocusedCell(0, 1);\n              break;\n\n            case \"PageUp\":\n            case \"PageDown\":\n              var scroller = this.getPaneScroller(0);\n              var pane = scroller.getTablePane();\n              var rowHeight = this.getRowHeight();\n              var direction = identifier == \"PageUp\" ? -1 : 1;\n              rowCount = pane.getVisibleRowCount() - 1;\n              scroller.setScrollY(\n                scroller.getScrollY() + direction * rowCount * rowHeight\n              );\n\n              this.moveFocusedCell(0, direction * rowCount);\n              break;\n\n            default:\n              consumed = false;\n          }\n        }\n      }\n\n      if (\n        oldFocusedRow != this.__focusedRow &&\n        this.getRowFocusChangeModifiesSelection()\n      ) {\n        // The focus moved -> Let the selection manager handle this event\n        this.__selectionManager.handleMoveKeyDown(this.__focusedRow, evt);\n      }\n\n      if (consumed) {\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n    },\n\n    /**\n     * Event handler. Called when the table gets the focus.\n     *\n     * @param evt {Map} the event.\n     */\n    _onFocusChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onFocusChanged();\n      }\n    },\n\n    /**\n     * Event handler. Called when the visibility of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColVisibilityChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onColVisibilityChanged();\n      }\n\n      var data = evt.getData();\n      if (\n        this.__columnMenuButtons != null &&\n        data.col != null &&\n        data.visible != null\n      ) {\n        this.__columnMenuButtons[data.col].setColumnVisible(data.visible);\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Event handler. Called when the width of a column has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColWidthChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var data = evt.getData();\n        scrollerArr[i].setColumnWidth(data.col, data.newWidth);\n      }\n\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Event handler. Called when the column order has changed.\n     *\n     * @param evt {Map} the event.\n     */\n    _onColOrderChanged(evt) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].onColOrderChanged();\n      }\n\n      // A column may have been moved between meta columns\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    /**\n     * Gets the TablePaneScroller at a certain x position in the page. If there is\n     * no TablePaneScroller at this position, null is returned.\n     *\n     * @param pageX {Integer} the position in the page to check (in pixels).\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller or null.\n     */\n    getTablePaneScrollerAtPageX(pageX) {\n      var metaCol = this._getMetaColumnAtPageX(pageX);\n      return metaCol != -1 ? this.getPaneScroller(metaCol) : null;\n    },\n\n    /**\n     * Sets the currently focused cell. A value of <code>null</code> hides the\n     * focus cell.\n     *\n     * @param col {Integer?null} the model index of the focused cell's column.\n     * @param row {Integer?null} the model index of the focused cell's row.\n     * @param scrollVisible {Boolean ? false} whether to scroll the new focused cell\n     *          visible.\n     */\n    setFocusedCell(col, row, scrollVisible) {\n      if (\n        !this.isEditing() &&\n        (col != this.__focusedCol || row != this.__focusedRow)\n      ) {\n        if (col === null) {\n          col = 0;\n        }\n\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        var scrollerArr = this._getPaneScrollerArr();\n\n        for (var i = 0; i < scrollerArr.length; i++) {\n          scrollerArr[i].setFocusedCell(col, row);\n        }\n\n        if (col != null && scrollVisible) {\n          this.scrollCellVisible(col, row);\n        }\n\n        // ARIA attrs\n        const cellId =\n          \"qooxdoo-table-cell-\" + this.toHashCode() + \"-\" + row + \"-\" + col;\n        this.getContentElement().setAttribute(\"aria-activedescendant\", cellId);\n      }\n    },\n\n    /**\n     * Resets (clears) the current selection\n     */\n    resetSelection() {\n      this.getSelectionModel().resetSelection();\n    },\n\n    /**\n     * Resets the focused cell.\n     */\n    resetCellFocus() {\n      this.setFocusedCell(null, null, false);\n    },\n\n    /**\n     * Returns the column of the currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedColumn() {\n      return this.__focusedCol;\n    },\n\n    /**\n     * Returns the row of the currently focused cell.\n     *\n     * @return {Integer} the model index of the focused cell's column.\n     */\n    getFocusedRow() {\n      return this.__focusedRow;\n    },\n\n    /**\n     * Select whether the focused row is highlighted\n     *\n     * @param bHighlight {Boolean}\n     *   Flag indicating whether the focused row should be highlighted.\n     *\n     */\n    highlightFocusedRow(bHighlight) {\n      this.getDataRowRenderer().setHighlightFocusRow(bHighlight);\n    },\n\n    /**\n     * Remove the highlighting of the current focus row.\n     *\n     * This is used to temporarily remove the highlighting of the currently\n     * focused row, and is expected to be used most typically by adding a\n     * listener on the \"pointerout\" event, so that the focus highlighting is\n     * suspended when the pointer leaves the table:\n     *\n     *     table.addListener(\"pointerout\", table.clearFocusedRowHighlight);\n     *\n     * @param evt {qx.event.type.Pointer} Incoming pointer event\n     */\n    clearFocusedRowHighlight(evt) {\n      if (evt) {\n        var relatedTarget = evt.getRelatedTarget();\n        if (\n          relatedTarget instanceof qx.ui.table.pane.Pane ||\n          relatedTarget instanceof qx.ui.table.pane.FocusIndicator\n        ) {\n          return;\n        }\n      }\n\n      // Remove focus from any cell that has it\n      this.resetCellFocus();\n\n      // Now, for each pane scroller...\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        // ... repaint without focus.\n        scrollerArr[i].onFocusChanged();\n      }\n    },\n\n    /**\n     * Moves the focus.\n     *\n     * @param deltaX {Integer} The delta by which the focus should be moved on the x axis.\n     * @param deltaY {Integer} The delta by which the focus should be moved on the y axis.\n     */\n    moveFocusedCell(deltaX, deltaY) {\n      var col = this.__focusedCol;\n      var row = this.__focusedRow;\n\n      // could also be undefined [BUG #4676]. In that case default to first cell focus\n      if (\n        col === null ||\n        col === undefined ||\n        row === null ||\n        row === undefined\n      ) {\n        this.setFocusedCell(0, 0, true);\n        return;\n      }\n\n      if (deltaX != 0) {\n        var columnModel = this.getTableColumnModel();\n        var x = columnModel.getVisibleX(col);\n        var colCount = columnModel.getVisibleColumnCount();\n        x = qx.lang.Number.limit(x + deltaX, 0, colCount - 1);\n        col = columnModel.getVisibleColumnAtX(x);\n      }\n\n      if (deltaY != 0) {\n        var tableModel = this.getTableModel();\n        row = qx.lang.Number.limit(\n          row + deltaY,\n          0,\n          tableModel.getRowCount() - 1\n        );\n      }\n\n      this.setFocusedCell(col, row, true);\n    },\n\n    /**\n     * Scrolls a cell visible.\n     *\n     * @param col {Integer} the model index of the column the cell belongs to.\n     * @param row {Integer} the model index of the row the cell belongs to.\n     */\n    scrollCellVisible(col, row) {\n      // get the dom element\n      var elem = this.getContentElement().getDomElement();\n      // if the dom element is not available, the table hasn't been rendered\n      if (!elem) {\n        // postpone the scroll until the table has appeared\n        this.addListenerOnce(\"appear\", () => {\n          this.scrollCellVisible(col, row);\n        });\n      }\n\n      var columnModel = this.getTableColumnModel();\n      var x = columnModel.getVisibleX(col);\n\n      var metaColumn = this._getMetaColumnAtColumnX(x);\n\n      if (metaColumn != -1) {\n        this.getPaneScroller(metaColumn).scrollCellVisible(col, row);\n      }\n    },\n\n    /**\n     * Returns whether currently a cell is editing.\n     *\n     * @return {var} whether currently a cell is editing.\n     */\n    isEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        return this.getPaneScroller(metaColumn).isEditing();\n      }\n      return false;\n    },\n\n    /**\n     * Starts editing the currently focused cell. Does nothing if already editing\n     * or if the column is not editable.\n     *\n     * @return {Boolean} whether editing was started\n     */\n    startEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        var started = this.getPaneScroller(metaColumn).startEditing();\n        return started;\n      }\n\n      return false;\n    },\n\n    /**\n     * Stops editing and writes the editor's value to the model.\n     */\n    stopEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        this.getPaneScroller(metaColumn).stopEditing();\n      }\n    },\n\n    /**\n     * Stops editing without writing the editor's value to the model.\n     */\n    cancelEditing() {\n      if (this.__focusedCol != null) {\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\n        var metaColumn = this._getMetaColumnAtColumnX(x);\n        this.getPaneScroller(metaColumn).cancelEditing();\n      }\n    },\n\n    /**\n     * Update the table content of every attached table pane.\n     */\n    updateContent() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getTablePane().updateContent(true);\n      }\n    },\n\n    /**\n     * Activates the blocker widgets on all column headers and the\n     * column button\n     */\n    blockHeaderElements() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().getBlocker().blockContent(20);\n      }\n      this.getChildControl(\"column-button\").getBlocker().blockContent(20);\n    },\n\n    /**\n     * Deactivates the blocker widgets on all column headers and the\n     * column button\n     */\n    unblockHeaderElements() {\n      var scrollerArr = this._getPaneScrollerArr();\n      for (var i = 0; i < scrollerArr.length; i++) {\n        scrollerArr[i].getHeader().getBlocker().unblock();\n      }\n      this.getChildControl(\"column-button\").getBlocker().unblock();\n    },\n\n    /**\n     * Gets the meta column at a certain x position in the page. If there is no\n     * meta column at this position, -1 is returned.\n     *\n     * @param pageX {Integer} the position in the page to check (in pixels).\n     * @return {Integer} the index of the meta column or -1.\n     */\n    _getMetaColumnAtPageX(pageX) {\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var pos = scrollerArr[i].getContentLocation();\n\n        if (pageX >= pos.left && pageX <= pos.right) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Returns the meta column a column is shown in. If the column is not shown at\n     * all, -1 is returned.\n     *\n     * @param visXPos {Integer} the visible x position of the column.\n     * @return {Integer} the meta column the column is shown in.\n     */\n    _getMetaColumnAtColumnX(visXPos) {\n      var metaColumnCounts = this.getMetaColumnCounts();\n      var rightXPos = 0;\n\n      for (var i = 0; i < metaColumnCounts.length; i++) {\n        var counts = metaColumnCounts[i];\n        rightXPos += counts;\n\n        if (counts == -1 || visXPos < rightXPos) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    /**\n     * Updates the text shown in the status bar.\n     */\n    _updateStatusBar() {\n      var tableModel = this.getTableModel();\n\n      if (this.getStatusBarVisible()) {\n        var selectedRowCount = this.getSelectionModel().getSelectedCount();\n        var rowCount = tableModel.getRowCount();\n\n        var text;\n\n        if (rowCount >= 0) {\n          if (selectedRowCount == 0) {\n            text = this.trn(\"one row\", \"%1 rows\", rowCount, rowCount);\n          } else {\n            text = this.trn(\n              \"one of one row\",\n              \"%1 of %2 rows\",\n              rowCount,\n              selectedRowCount,\n              rowCount\n            );\n          }\n        }\n\n        if (this.__additionalStatusBarText) {\n          if (text) {\n            text += this.__additionalStatusBarText;\n          } else {\n            text = this.__additionalStatusBarText;\n          }\n        }\n\n        if (text) {\n          this.getChildControl(\"statusbar\").setValue(text);\n        }\n      }\n    },\n\n    /**\n     * Updates the widths of all scrollers.\n     */\n    _updateScrollerWidths() {\n      // Give all scrollers except for the last one the wanted width\n      // (The last one has a flex with)\n      var scrollerArr = this._getPaneScrollerArr();\n\n      for (var i = 0; i < scrollerArr.length; i++) {\n        var isLast = i == scrollerArr.length - 1;\n        var width = scrollerArr[i].getTablePaneModel().getTotalWidth();\n        scrollerArr[i].setPaneWidth(width);\n\n        var flex = isLast ? 1 : 0;\n        scrollerArr[i].setLayoutProperties({ flex: flex });\n      }\n    },\n\n    /**\n     * Updates the visibility of the scrollbars in the meta columns.\n     */\n    _updateScrollBarVisibility() {\n      if (!this.getBounds()) {\n        return;\n      }\n\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\n      var scrollerArr = this._getPaneScrollerArr();\n\n      // Check which scroll bars are needed\n      var horNeeded = false;\n      var verNeeded = false;\n      var excludeScrollerScrollbarsIfNotNeeded;\n\n      // Determine whether we need to render horizontal scrollbars for meta\n      // columns that don't themselves actually require it\n      excludeScrollerScrollbarsIfNotNeeded =\n        this.getExcludeScrollerScrollbarsIfNotNeeded();\n\n      if (!excludeScrollerScrollbarsIfNotNeeded) {\n        for (var i = 0; i < scrollerArr.length; i++) {\n          var isLast = i == scrollerArr.length - 1;\n\n          // Only show the last vertical scrollbar\n          var bars = scrollerArr[i].getNeededScrollBars(horNeeded, !isLast);\n\n          if (bars & horBar) {\n            horNeeded = true;\n          }\n\n          if (isLast && bars & verBar) {\n            verNeeded = true;\n          }\n        }\n      }\n\n      // Set the needed scrollbars\n      for (var i = 0; i < scrollerArr.length; i++) {\n        isLast = i == scrollerArr.length - 1;\n\n        // If we don't want to include scrollbars for meta columns that don't\n        // require it, find out whether this meta column requires it.\n        if (excludeScrollerScrollbarsIfNotNeeded) {\n          horNeeded = !!(\n            scrollerArr[i].getNeededScrollBars(false, !isLast) & horBar\n          );\n\n          // Show the horizontal scrollbar if needed. Specify null to indicate\n          // that the scrollbar should be hidden rather than excluded.\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded || null);\n        } else {\n          // Show the horizontal scrollbar if needed.\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded);\n        }\n\n        // If this is the last meta-column...\n        if (isLast) {\n          // ... then get the current (old) use of vertical scroll bar\n          verNeeded = !!(\n            scrollerArr[i].getNeededScrollBars(false, false) & verBar\n          );\n\n          if (this.__hadVerticalScrollBar == null) {\n            this.__hadVerticalScrollBar =\n              scrollerArr[i].getVerticalScrollBarVisible();\n            this.__timer = qx.event.Timer.once(\n              function () {\n                // reset the last visible state of the vertical scroll bar\n                // in a timeout to prevent infinite loops.\n                this.__hadVerticalScrollBar = null;\n                this.__timer = null;\n              },\n              this,\n              0\n            );\n          }\n        }\n\n        scrollerArr[i].setVerticalScrollBarVisible(isLast && verNeeded);\n\n        // If this is the last meta-column and the use of a vertical scroll bar\n        // has changed...\n        if (isLast && verNeeded != this.__hadVerticalScrollBar) {\n          // ... then dispatch an event to any awaiting listeners\n          this.fireDataEvent(\"verticalScrollBarChanged\", verNeeded);\n        }\n      }\n    },\n\n    /**\n     * Initialize the column menu\n     */\n    _initColumnMenu() {\n      var tableModel = this.getTableModel();\n      var columnModel = this.getTableColumnModel();\n\n      var columnButton = this.getChildControl(\"column-button\");\n\n      // Remove all items from the menu. We'll rebuild it here.\n      columnButton.empty();\n\n      // Inform listeners who may want to insert menu items at the beginning\n      var menu = columnButton.getMenu();\n      var data = {\n        table: this,\n        menu: menu,\n        columnButton: columnButton\n      };\n\n      this.fireDataEvent(\"columnVisibilityMenuCreateStart\", data);\n\n      this.__columnMenuButtons = {};\n      for (var iCol = 0, l = tableModel.getColumnCount(); iCol < l; iCol++) {\n        var col = columnModel.getOverallColumnAtX(iCol);\n        var menuButton = columnButton.factory(\"menu-button\", {\n          text: tableModel.getColumnName(col),\n          column: col,\n          bVisible: columnModel.isColumnVisible(col)\n        });\n\n        qx.core.Assert.assertInterface(menuButton, qx.ui.table.IColumnMenuItem);\n\n        menuButton.addListener(\n          \"changeColumnVisible\",\n          this._createColumnVisibilityCheckBoxHandler(col),\n          this\n        );\n\n        this.__columnMenuButtons[col] = menuButton;\n      }\n\n      // Inform listeners who may want to insert menu items at the end\n      data = {\n        table: this,\n        menu: menu,\n        columnButton: columnButton\n      };\n\n      this.fireDataEvent(\"columnVisibilityMenuCreateEnd\", data);\n    },\n\n    /**\n     * Creates a handler for a check box of the column visibility menu.\n     *\n     * @param col {Integer} the model index of column to create the handler for.\n     * @return {Function} The created event handler.\n     */\n    _createColumnVisibilityCheckBoxHandler(col) {\n      return function (evt) {\n        var columnModel = this.getTableColumnModel();\n        columnModel.setColumnVisible(col, evt.getData());\n      };\n    },\n\n    /**\n     * Sets the width of a column.\n     *\n     * @param col {Integer} the model index of column.\n     * @param width {Integer} the new width in pixels.\n     */\n    setColumnWidth(col, width) {\n      this.getTableColumnModel().setColumnWidth(col, width);\n    },\n\n    /**\n     * Resize event handler\n     */\n    _onResize() {\n      this.fireEvent(\"tableWidthChanged\");\n      this._updateScrollerWidths();\n      this._updateScrollBarVisibility();\n    },\n\n    // overridden\n    addListener(type, listener, self, capture) {\n      if (this.self(arguments).__redirectEvents[type]) {\n        // start the id with the type (needed for removing)\n        var id = [type];\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          id.push(arr[i].addListener.apply(arr[i], arguments));\n        }\n        // join the id's of every event with \"\n        return id.join('\"');\n      } else {\n        return super.addListener(type, listener, self, capture);\n      }\n    },\n\n    // overridden\n    removeListener(type, listener, self, capture) {\n      if (this.self(arguments).__redirectEvents[type]) {\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          arr[i].removeListener.apply(arr[i], arguments);\n        }\n      } else {\n        super.removeListener(type, listener, self, capture);\n      }\n    },\n\n    // overridden\n    removeListenerById(id) {\n      var ids = id.split('\"');\n      // type is the first entry of the connected id\n      var type = ids.shift();\n      if (this.self(arguments).__redirectEvents[type]) {\n        var removed = true;\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\n          removed = arr[i].removeListenerById.call(arr[i], ids[i]) && removed;\n        }\n        return removed;\n      } else {\n        return super.removeListenerById(id);\n      }\n    },\n\n    destroy() {\n      this.getChildControl(\"column-button\").getMenu().destroy();\n      super.destroy();\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    // remove the event listener which handled the locale change\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\n        \"changeLocale\",\n        this._onChangeLocale,\n        this\n      );\n    }\n\n    // we allocated these objects on init so we have to clean them up.\n    var selectionModel = this.getSelectionModel();\n    if (selectionModel) {\n      selectionModel.dispose();\n    }\n\n    var dataRowRenderer = this.getDataRowRenderer();\n    if (dataRowRenderer) {\n      dataRowRenderer.dispose();\n    }\n\n    if (this.getTableModel() != null) {\n      this.getTableModel().removeListener(\n        \"metaDataChanged\",\n        this._onTableModelMetaDataChanged,\n        this\n      );\n\n      this.getTableModel().removeListener(\n        \"dataChanged\",\n        this._onTableModelDataChanged,\n        this\n      );\n    }\n\n    this.getTableColumnModel().dispose();\n    this._disposeObjects(\n      \"__selectionManager\",\n      \"__scrollerParent\",\n      \"__emptyTableModel\",\n      \"__emptyTableModel\",\n      \"__columnModel\",\n      \"__timer\"\n    );\n\n    this._disposeMap(\"__columnMenuButtons\");\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,IAAI,CAACC,MAAM;IACzBC,OAAO,EAAEV,EAAE,CAACO,EAAE,CAACC,IAAI,CAACG,kBAAkB;IAEtC;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,qBAACC,UAAU,EAAEC,MAAM,EAAE;MAC5B;MACA;MACA;MACA;MACA,IAAI,CAACA,MAAM,EAAE;QACXA,MAAM,GAAG,CAAC,CAAC;MACb;MAEA,IAAIA,MAAM,CAACC,sBAAsB,EAAE;QACjC,IAAI,CAACC,yBAAyB,CAACF,MAAM,CAACC,sBAAsB,CAAC;MAC/D;MAEA,IAAID,MAAM,CAACG,gBAAgB,EAAE;QAC3B,IAAI,CAACC,sBAAsB,CAACJ,MAAM,CAACG,gBAAgB,CAAC;MACtD;MAEA,IAAIH,MAAM,CAACK,cAAc,EAAE;QACzB,IAAI,CAACC,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"
}