{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MDragDropScrolling",
    "construct",
    "tableModel",
    "custom",
    "constructor",
    "call",
    "initiallyHiddenColumns",
    "setInitiallyHiddenColumns",
    "selectionManager",
    "setNewSelectionManager",
    "selectionModel",
    "setNewSelectionModel",
    "tableColumnModel",
    "setNewTableColumnModel",
    "tablePane",
    "setNewTablePane",
    "tablePaneHeader",
    "setNewTablePaneHeader",
    "tablePaneScroller",
    "setNewTablePaneScroller",
    "tablePaneModel",
    "setNewTablePaneModel",
    "columnMenu",
    "setNewColumnMenu",
    "_setLayout",
    "layout",
    "VBox",
    "__scrollerParent",
    "container",
    "Composite",
    "HBox",
    "_add",
    "flex",
    "setDataRowRenderer",
    "table",
    "rowrenderer",
    "Default",
    "__selectionManager",
    "getNewSelectionManager",
    "setSelectionModel",
    "getNewSelectionModel",
    "setTableModel",
    "getEmptyTableModel",
    "setMetaColumnCounts",
    "setTabIndex",
    "addListener",
    "_onKeyDown",
    "_onFocusChanged",
    "spacer",
    "set",
    "height",
    "_onResize",
    "__focusedCol",
    "__focusedRow",
    "locale",
    "Manager",
    "getInstance",
    "_onChangeLocale",
    "initStatusBarVisible",
    "getTableModel",
    "init",
    "getContentElement",
    "setAttribute",
    "events",
    "columnVisibilityMenuCreateStart",
    "columnVisibilityMenuCreateEnd",
    "tableWidthChanged",
    "verticalScrollBarChanged",
    "cellTap",
    "cellDbltap",
    "cellContextmenu",
    "dataEdited",
    "statics",
    "__redirectEvents",
    "properties",
    "appearance",
    "refine",
    "focusable",
    "minWidth",
    "selectable",
    "check",
    "apply",
    "event",
    "rowHeight",
    "themeable",
    "forceLineHeight",
    "headerCellsVisible",
    "headerCellHeight",
    "nullable",
    "statusBarVisible",
    "additionalStatusBarText",
    "columnVisibilityButtonVisible",
    "metaColumnCounts",
    "focusCellOnPointerMove",
    "rowFocusChangeModifiesSelection",
    "showCellFocusIndicator",
    "contextMenuFromDataCellsOnly",
    "keepFirstVisibleRowComplete",
    "alwaysUpdateCells",
    "resetSelectionOnHeaderTap",
    "resetSelectionOnTapBelowRows",
    "minCellEditHeight",
    "dataRowRenderer",
    "modalCellEditorPreOpenFunction",
    "excludeScrollerScrollbarsIfNotNeeded",
    "newColumnMenu",
    "columnmenu",
    "Button",
    "newSelectionManager",
    "obj",
    "selection",
    "newSelectionModel",
    "Model",
    "newTableColumnModel",
    "columnmodel",
    "Basic",
    "newTablePane",
    "pane",
    "Pane",
    "newTablePaneHeader",
    "Header",
    "newTablePaneScroller",
    "Scroller",
    "newTablePaneModel",
    "columnModel",
    "members",
    "__additionalStatusBarText",
    "__lastRowCount",
    "__lastColCount",
    "__internalChange",
    "__columnMenuButtons",
    "__columnModel",
    "__emptyTableModel",
    "__hadVerticalScrollBar",
    "__timer",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "basic",
    "Label",
    "allowGrowX",
    "getNewColumnMenu",
    "menu",
    "factory",
    "_initColumnMenu",
    "Table",
    "superclass",
    "prototype",
    "_applySelectionModel",
    "value",
    "old",
    "removeListener",
    "_onSelectionChanged",
    "_applyRowHeight",
    "scrollerArr",
    "_getPaneScrollerArr",
    "i",
    "length",
    "updateVerScrollBarMaximum",
    "_applyHeaderCellsVisible",
    "_showChildControl",
    "_excludeChildControl",
    "getColumnVisibilityButtonVisible",
    "_applyColumnVisibilityButtonVisible",
    "_applyHeaderCellHeight",
    "getHeader",
    "setHeight",
    "_applyMinCellEditHeight",
    "setMinCellEditHeight",
    "model",
    "Simple",
    "setColumns",
    "setData",
    "_applyTableModel",
    "getTableColumnModel",
    "getColumnCount",
    "_onTableModelMetaDataChanged",
    "_onTableModelDataChanged",
    "_updateStatusBar",
    "_updateTableData",
    "getRowCount",
    "getNewTableColumnModel",
    "_onColVisibilityChanged",
    "_onColWidthChanged",
    "_onColOrderChanged",
    "paneScroller",
    "paneModel",
    "getTablePaneModel",
    "setTableColumnModel",
    "_applyStatusBarVisible",
    "_applyAdditionalStatusBarText",
    "_applyMetaColumnCounts",
    "handlers",
    "manager",
    "Registration",
    "getManager",
    "evName",
    "capture",
    "getListeners",
    "bubble",
    "_cleanUpMetaColumns",
    "leftX",
    "setFirstColumnX",
    "setMaxColumnCount",
    "getNewTablePaneModel",
    "getNewTablePaneScroller",
    "setTablePaneModel",
    "_onScrollY",
    "j",
    "context",
    "handler",
    "add",
    "isLast",
    "getHeaderCellHeight",
    "setTopRightWidget",
    "getChildControl",
    "isColumnVisibilityButtonVisible",
    "_updateScrollerWidths",
    "_updateScrollBarVisibility",
    "_applyFocusCellOnPointerMove",
    "setFocusCellOnPointerMove",
    "_applyShowCellFocusIndicator",
    "setShowCellFocusIndicator",
    "_applyContextMenuFromDataCellsOnly",
    "setContextMenuFromDataCellsOnly",
    "_applyKeepFirstVisibleRowComplete",
    "onKeepFirstVisibleRowCompleteChanged",
    "_applyResetSelectionOnHeaderTap",
    "setResetSelectionOnHeaderTap",
    "_applyResetSelectionOnTapBelowRows",
    "setResetSelectionOnTapBelowRows",
    "getSelectionManager",
    "getChildren",
    "getPaneScroller",
    "metaColumn",
    "fromMetaColumn",
    "destroy",
    "evt",
    "updateContent",
    "_onChangeTheme",
    "getDataRowRenderer",
    "initThemeValues",
    "onSelectionChanged",
    "onTableModelMetaDataChanged",
    "data",
    "getData",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "removeStart",
    "removeCount",
    "_onContextMenuOpen",
    "e",
    "getSelectionModel",
    "removeSelectionInterval",
    "setFocusedCell",
    "onTableModelDataChanged",
    "rowCount",
    "colCount",
    "setScrollY",
    "_onKeyPress",
    "log",
    "Logger",
    "deprecatedMethodWarning",
    "deprecateMethodOverriding",
    "getEnabled",
    "oldFocusedRow",
    "consumed",
    "identifier",
    "getKeyIdentifier",
    "isEditing",
    "getModifiers",
    "stopEditing",
    "moveFocusedCell",
    "startEditing",
    "cancelEditing",
    "focus",
    "isCtrlPressed",
    "setSelectionInterval",
    "handleSelectKeyDown",
    "scroller",
    "getTablePane",
    "getRowHeight",
    "direction",
    "getVisibleRowCount",
    "getScrollY",
    "getRowFocusChangeModifiesSelection",
    "handleMoveKeyDown",
    "preventDefault",
    "stopPropagation",
    "onFocusChanged",
    "onColVisibilityChanged",
    "col",
    "visible",
    "setColumnVisible",
    "setColumnWidth",
    "newWidth",
    "onColOrderChanged",
    "getTablePaneScrollerAtPageX",
    "pageX",
    "metaCol",
    "_getMetaColumnAtPageX",
    "row",
    "scrollVisible",
    "scrollCellVisible",
    "cellId",
    "toHashCode",
    "resetSelection",
    "resetCellFocus",
    "getFocusedColumn",
    "getFocusedRow",
    "highlightFocusedRow",
    "bHighlight",
    "setHighlightFocusRow",
    "clearFocusedRowHighlight",
    "relatedTarget",
    "getRelatedTarget",
    "FocusIndicator",
    "deltaX",
    "deltaY",
    "undefined",
    "x",
    "getVisibleX",
    "getVisibleColumnCount",
    "lang",
    "Number",
    "limit",
    "getVisibleColumnAtX",
    "_this",
    "elem",
    "getDomElement",
    "addListenerOnce",
    "_getMetaColumnAtColumnX",
    "started",
    "blockHeaderElements",
    "getBlocker",
    "blockContent",
    "unblockHeaderElements",
    "unblock",
    "pos",
    "getContentLocation",
    "left",
    "right",
    "visXPos",
    "getMetaColumnCounts",
    "rightXPos",
    "counts",
    "getStatusBarVisible",
    "selectedRowCount",
    "getSelectedCount",
    "text",
    "trn",
    "setValue",
    "width",
    "getTotalWidth",
    "setPaneWidth",
    "setLayoutProperties",
    "getBounds",
    "horBar",
    "HORIZONTAL_SCROLLBAR",
    "verBar",
    "VERTICAL_SCROLLBAR",
    "horNeeded",
    "verNeeded",
    "getExcludeScrollerScrollbarsIfNotNeeded",
    "bars",
    "getNeededScrollBars",
    "setHorizontalScrollBarVisible",
    "getVerticalScrollBarVisible",
    "Timer",
    "once",
    "setVerticalScrollBarVisible",
    "fireDataEvent",
    "columnButton",
    "empty",
    "getMenu",
    "iCol",
    "l",
    "getOverallColumnAtX",
    "menuButton",
    "getColumnName",
    "column",
    "bVisible",
    "isColumnVisible",
    "Assert",
    "assertInterface",
    "IColumnMenuItem",
    "_createColumnVisibilityCheckBoxHandler",
    "fireEvent",
    "type",
    "listener",
    "self",
    "arr",
    "push",
    "arguments",
    "join",
    "removeListenerById",
    "ids",
    "split",
    "shift",
    "removed",
    "destruct",
    "dispose",
    "_disposeObjects",
    "_disposeMap"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/Table.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n     * Fabian Jakobs (fjakobs)\r\n     * Jonathan Wei√ü (jonathan_rass)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * Table\r\n *\r\n * A detailed description can be found in the package description\r\n * {@link qx.ui.table}.\r\n *\r\n * @childControl statusbar {qx.ui.basic.Label} label to show the status of the table\r\n * @childControl column-button {qx.ui.table.columnmenu.Button} button to open the column menu\r\n */\r\nqx.Class.define(\"qx.ui.table.Table\", {\r\n  extend: qx.ui.core.Widget,\r\n  include: qx.ui.core.MDragDropScrolling,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  /**\r\n   * @param tableModel {qx.ui.table.ITableModel ? null}\r\n   *   The table model to read the data from.\r\n   *\r\n   * @param custom {Map ? null}\r\n   *   A map provided to override the various supplemental classes allocated\r\n   *   within this constructor.  Each property must be a function which\r\n   *   returns an object instance, as indicated by shown the defaults listed\r\n   *   here:\r\n   *\r\n   *   <dl>\r\n   *     <dt>initiallyHiddenColumns</dt>\r\n   *       <dd>\r\n   *         {Array?}\r\n   *         A list of column numbers that should be initially invisible. Any\r\n   *         column not mentioned will be initially visible, and if no array\r\n   *         is provided, all columns will be initially visible.\r\n   *       </dd>\r\n   *     <dt>selectionManager</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.selection.Manager(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>selectionModel</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.selection.Model(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>tableColumnModel</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.columnmodel.Basic(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>tablePaneModel</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.pane.Model(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>tablePane</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.pane.Pane(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>tablePaneHeader</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.pane.Header(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>tablePaneScroller</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.pane.Scroller(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>tablePaneModel</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function(obj)\r\n   *         {\r\n   *           return new qx.ui.table.pane.Model(obj);\r\n   *         }\r\n   *       </pre></dd>\r\n   *     <dt>columnMenu</dt>\r\n   *       <dd><pre class='javascript'>\r\n   *         function()\r\n   *         {\r\n   *           return new qx.ui.table.columnmenu.Button();\r\n   *         }\r\n   *       </pre></dd>\r\n   *   </dl>\r\n   */\r\n  construct(tableModel, custom) {\r\n    super();\r\n    //\r\n    // Use default objects if custom objects are not specified\r\n    //\r\n    if (!custom) {\r\n      custom = {};\r\n    }\r\n\r\n    if (custom.initiallyHiddenColumns) {\r\n      this.setInitiallyHiddenColumns(custom.initiallyHiddenColumns);\r\n    }\r\n\r\n    if (custom.selectionManager) {\r\n      this.setNewSelectionManager(custom.selectionManager);\r\n    }\r\n\r\n    if (custom.selectionModel) {\r\n      this.setNewSelectionModel(custom.selectionModel);\r\n    }\r\n\r\n    if (custom.tableColumnModel) {\r\n      this.setNewTableColumnModel(custom.tableColumnModel);\r\n    }\r\n\r\n    if (custom.tablePane) {\r\n      this.setNewTablePane(custom.tablePane);\r\n    }\r\n\r\n    if (custom.tablePaneHeader) {\r\n      this.setNewTablePaneHeader(custom.tablePaneHeader);\r\n    }\r\n\r\n    if (custom.tablePaneScroller) {\r\n      this.setNewTablePaneScroller(custom.tablePaneScroller);\r\n    }\r\n\r\n    if (custom.tablePaneModel) {\r\n      this.setNewTablePaneModel(custom.tablePaneModel);\r\n    }\r\n\r\n    if (custom.columnMenu) {\r\n      this.setNewColumnMenu(custom.columnMenu);\r\n    }\r\n\r\n    this._setLayout(new qx.ui.layout.VBox());\r\n\r\n    // Create the child widgets\r\n    this.__scrollerParent = new qx.ui.container.Composite(\r\n      new qx.ui.layout.HBox()\r\n    );\r\n\r\n    this._add(this.__scrollerParent, { flex: 1 });\r\n\r\n    // Allocate a default data row renderer\r\n    this.setDataRowRenderer(new qx.ui.table.rowrenderer.Default(this));\r\n\r\n    // Create the models\r\n    this.__selectionManager = this.getNewSelectionManager()(this);\r\n    this.setSelectionModel(this.getNewSelectionModel()(this));\r\n    this.setTableModel(tableModel || this.getEmptyTableModel());\r\n\r\n    // create the main meta column\r\n    this.setMetaColumnCounts([-1]);\r\n\r\n    // Make focusable\r\n    this.setTabIndex(1);\r\n    this.addListener(\"keydown\", this._onKeyDown);\r\n    this.addListener(\"focus\", this._onFocusChanged);\r\n    this.addListener(\"blur\", this._onFocusChanged);\r\n\r\n    // attach the resize listener to the last child of the layout. This\r\n    // ensures that all other children are laid out before\r\n    var spacer = new qx.ui.core.Widget().set({\r\n      height: 0\r\n    });\r\n\r\n    this._add(spacer);\r\n    spacer.addListener(\"resize\", this._onResize, this);\r\n\r\n    this.__focusedCol = null;\r\n    this.__focusedRow = null;\r\n\r\n    // add an event listener which updates the table content on locale change\r\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n      qx.locale.Manager.getInstance().addListener(\r\n        \"changeLocale\",\r\n        this._onChangeLocale,\r\n        this\r\n      );\r\n    }\r\n\r\n    this.initStatusBarVisible();\r\n\r\n    // If the table model has an init() method...\r\n    tableModel = this.getTableModel();\r\n    if (tableModel.init && typeof tableModel.init == \"function\") {\r\n      // ... then call it now to allow the table model to affect table\r\n      // properties.\r\n      tableModel.init(this);\r\n    }\r\n\r\n    // ARIA attrs\r\n    this.getContentElement().setAttribute(\"role\", \"grid\");\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /**\r\n     * Dispatched before adding the column list to the column visibility menu.\r\n     * The event data is a map with two properties: table and menu.  Listeners\r\n     * may add additional items to the menu, which appear at the top of the\r\n     * menu.\r\n     */\r\n    columnVisibilityMenuCreateStart: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Dispatched after adding the column list to the column visibility menu.\r\n     * The event data is a map with two properties: table and menu.  Listeners\r\n     * may add additional items to the menu, which appear at the bottom of the\r\n     * menu.\r\n     */\r\n    columnVisibilityMenuCreateEnd: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Dispatched when the width of the table has changed.\r\n     */\r\n    tableWidthChanged: \"qx.event.type.Event\",\r\n\r\n    /**\r\n     * Dispatched when updating scrollbars discovers that a vertical scrollbar\r\n     * is needed when it previously was not, or vice versa.  The data is a\r\n     * boolean indicating whether a vertical scrollbar is now being used.\r\n     */\r\n    verticalScrollBarChanged: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Dispatched when a data cell has been tapped.\r\n     */\r\n    cellTap: \"qx.ui.table.pane.CellEvent\",\r\n\r\n    /**\r\n     * Dispatched when a data cell has been tapped.\r\n     */\r\n    cellDbltap: \"qx.ui.table.pane.CellEvent\",\r\n\r\n    /**\r\n     * Dispatched when the context menu is needed in a data cell\r\n     */\r\n    cellContextmenu: \"qx.ui.table.pane.CellEvent\",\r\n\r\n    /**\r\n     * Dispatched after a cell editor is flushed.\r\n     *\r\n     * The data is a map containing this properties:\r\n     * <ul>\r\n     *   <li>row</li>\r\n     *   <li>col</li>\r\n     *   <li>value</li>\r\n     *   <li>oldValue</li>\r\n     * </ul>\r\n     */\r\n    dataEdited: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     STATICS\r\n  *****************************************************************************\r\n  */\r\n\r\n  statics: {\r\n    /** Events that must be redirected to the scrollers. */\r\n    __redirectEvents: { cellTap: 1, cellDbltap: 1, cellContextmenu: 1 }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    appearance: {\r\n      refine: true,\r\n      init: \"table\"\r\n    },\r\n\r\n    focusable: {\r\n      refine: true,\r\n      init: true\r\n    },\r\n\r\n    minWidth: {\r\n      refine: true,\r\n      init: 50\r\n    },\r\n\r\n    /**\r\n     * The list of columns that are initially hidden. This property is set by\r\n     * the constructor, from the value received in\r\n     * custom.initiallyHiddenColumns, and is only used when a column model is\r\n     * initialized. It can be of great benefit in tables with numerous columns\r\n     * where most are not initially visible. The process of creating the\r\n     * headers for all of the columns, only to have those columns discarded\r\n     * shortly thereafter when setColumnVisibility(false) is called, is a\r\n     * waste of (significant, in some browsers) time. Specifying the\r\n     * non-visible columns at constructor time can therefore avoid the initial\r\n     * creation of all of those superfluous widgets.\r\n     */\r\n    initiallyHiddenColumns: {\r\n      init: null\r\n    },\r\n\r\n    /**\r\n     * Whether the widget contains content which may be selected by the user.\r\n     *\r\n     * If the value set to <code>true</code> the native browser selection can\r\n     * be used for text selection. But it is normally useful for\r\n     * forms fields, longer texts/documents, editors, etc.\r\n     *\r\n     * Note: This has no effect on Table!\r\n     */\r\n    selectable: {\r\n      refine: true,\r\n      init: false\r\n    },\r\n\r\n    /** The selection model. */\r\n    selectionModel: {\r\n      check: \"qx.ui.table.selection.Model\",\r\n      apply: \"_applySelectionModel\",\r\n      event: \"changeSelectionModel\"\r\n    },\r\n\r\n    /** The table model. */\r\n    tableModel: {\r\n      check: \"qx.ui.table.ITableModel\",\r\n      apply: \"_applyTableModel\",\r\n      event: \"changeTableModel\"\r\n    },\r\n\r\n    /** The height of the table rows. */\r\n    rowHeight: {\r\n      check: \"Number\",\r\n      init: 20,\r\n      apply: \"_applyRowHeight\",\r\n      event: \"changeRowHeight\",\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * Force line height to match row height.  May be disabled if cell\r\n     * renderers being used wish to render multiple lines of data within a\r\n     * cell.  (With the default setting, all but the first of multiple lines\r\n     * of data will not be visible.)\r\n     */\r\n    forceLineHeight: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    },\r\n\r\n    /**\r\n     *  Whether the header cells are visible. When setting this to false,\r\n     *  you'll likely also want to set the {#columnVisibilityButtonVisible}\r\n     *  property to false as well, to entirely remove the header row.\r\n     */\r\n    headerCellsVisible: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyHeaderCellsVisible\",\r\n      themeable: true\r\n    },\r\n\r\n    /** The height of the header cells. */\r\n    headerCellHeight: {\r\n      check: \"Integer\",\r\n      init: 16,\r\n      apply: \"_applyHeaderCellHeight\",\r\n      event: \"changeHeaderCellHeight\",\r\n      nullable: true,\r\n      themeable: true\r\n    },\r\n\r\n    /** Whether to show the status bar */\r\n    statusBarVisible: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyStatusBarVisible\"\r\n    },\r\n\r\n    /** The Statusbartext, set it, if you want some more Information */\r\n    additionalStatusBarText: {\r\n      nullable: true,\r\n      init: null,\r\n      apply: \"_applyAdditionalStatusBarText\"\r\n    },\r\n\r\n    /** Whether to show the column visibility button */\r\n    columnVisibilityButtonVisible: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyColumnVisibilityButtonVisible\",\r\n      themeable: true\r\n    },\r\n\r\n    /**\r\n     * @type {Integer[]} The number of columns per meta column. If the last array entry is -1,\r\n     * this meta column will get the remaining columns.\r\n     */\r\n    metaColumnCounts: {\r\n      check: \"Object\",\r\n      apply: \"_applyMetaColumnCounts\"\r\n    },\r\n\r\n    /**\r\n     * Whether the focus should moved when the pointer is moved over a cell. If false\r\n     * the focus is only moved on pointer taps.\r\n     */\r\n    focusCellOnPointerMove: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyFocusCellOnPointerMove\"\r\n    },\r\n\r\n    /**\r\n     * Whether row focus change by keyboard also modifies selection\r\n     */\r\n    rowFocusChangeModifiesSelection: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    },\r\n\r\n    /**\r\n     * Whether the cell focus indicator should be shown\r\n     */\r\n    showCellFocusIndicator: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyShowCellFocusIndicator\"\r\n    },\r\n\r\n    /**\r\n     * By default, the \"cellContextmenu\" event is fired only when a data cell\r\n     * is right-clicked. It is not fired when a right-click occurs in the\r\n     * empty area of the table below the last data row. By turning on this\r\n     * property, \"cellContextMenu\" events will also be generated when a\r\n     * right-click occurs in that empty area. In such a case, row identifier\r\n     * in the event data will be null, so event handlers can check (row ===\r\n     * null) to handle this case.\r\n     */\r\n    contextMenuFromDataCellsOnly: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyContextMenuFromDataCellsOnly\"\r\n    },\r\n\r\n    /**\r\n     * Whether the table should keep the first visible row complete. If set to false,\r\n     * the first row may be rendered partial, depending on the vertical scroll value.\r\n     */\r\n    keepFirstVisibleRowComplete: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyKeepFirstVisibleRowComplete\"\r\n    },\r\n\r\n    /**\r\n     * Whether the table cells should be updated when only the selection or the\r\n     * focus changed. This slows down the table update but allows to react on a\r\n     * changed selection or a changed focus in a cell renderer.\r\n     */\r\n    alwaysUpdateCells: {\r\n      check: \"Boolean\",\r\n      init: false\r\n    },\r\n\r\n    /**\r\n     * Whether to reset the selection when a header cell is tapped. Since\r\n     * most data models do not have provisions to retain a selection after\r\n     * sorting, the default is to reset the selection in this case. Some data\r\n     * models, however, do have the capability to retain the selection, so\r\n     * when using those, this property should be set to false.\r\n     */\r\n    resetSelectionOnHeaderTap: {\r\n      check: \"Boolean\",\r\n      init: true,\r\n      apply: \"_applyResetSelectionOnHeaderTap\"\r\n    },\r\n\r\n    /**\r\n     * Whether to reset the selection when the unpopulated table area is tapped.\r\n     * The default is false which keeps the behaviour as before\r\n     */\r\n    resetSelectionOnTapBelowRows: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      apply: \"_applyResetSelectionOnTapBelowRows\"\r\n    },\r\n\r\n    /**\r\n     * If set then defines the minimum height of the focus indicator when editing\r\n     */\r\n    minCellEditHeight: {\r\n      check: \"Integer\",\r\n      nullable: true,\r\n      init: null,\r\n      apply: \"_applyMinCellEditHeight\"\r\n    },\r\n\r\n    /** The renderer to use for styling the rows. */\r\n    dataRowRenderer: {\r\n      check: \"qx.ui.table.IRowRenderer\",\r\n      init: null,\r\n      nullable: true,\r\n      event: \"changeDataRowRenderer\"\r\n    },\r\n\r\n    /**\r\n     * A function to call when before modal cell editor is opened.\r\n     *\r\n     * @signature function(cellEditor, cellInfo)\r\n     *\r\n     * @param cellEditor {qx.ui.window.Window}\r\n     *   The modal window which has been created for this cell editor\r\n     *\r\n     * @param cellInfo {Map}\r\n     *   Information about the cell for which this cell editor was created.\r\n     *   It contains the following properties:\r\n     *       col, row, xPos, value\r\n     *\r\n     */\r\n    modalCellEditorPreOpenFunction: {\r\n      check: \"Function\",\r\n      init: null,\r\n      nullable: true\r\n    },\r\n\r\n    /**\r\n     * By default, all Scrollers' (meta-columns') horizontal scrollbars are\r\n     * shown if any one is required. Allow not showing any that are not\r\n     * required.\r\n     */\r\n    excludeScrollerScrollbarsIfNotNeeded: {\r\n      check: \"Boolean\",\r\n      init: false,\r\n      nullable: false\r\n    },\r\n\r\n    /**\r\n     * A function to instantiate a new column menu button.\r\n     */\r\n    newColumnMenu: {\r\n      check: \"Function\",\r\n      init() {\r\n        return new qx.ui.table.columnmenu.Button();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * A function to instantiate a selection manager.  this allows subclasses of\r\n     * Table to subclass this internal class.  To take effect, this property must\r\n     * be set before calling the Table constructor.\r\n     */\r\n    newSelectionManager: {\r\n      check: \"Function\",\r\n      init(obj) {\r\n        return new qx.ui.table.selection.Manager(obj);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * A function to instantiate a selection model.  this allows subclasses of\r\n     * Table to subclass this internal class.  To take effect, this property must\r\n     * be set before calling the Table constructor.\r\n     */\r\n    newSelectionModel: {\r\n      check: \"Function\",\r\n      init(obj) {\r\n        return new qx.ui.table.selection.Model(obj);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * A function to instantiate a table column model.  This allows subclasses\r\n     * of Table to subclass this internal class.  To take effect, this\r\n     * property must be set before calling the Table constructor.\r\n     */\r\n    newTableColumnModel: {\r\n      check: \"Function\",\r\n      init(table) {\r\n        return new qx.ui.table.columnmodel.Basic(table);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * A function to instantiate a table pane.  this allows subclasses of\r\n     * Table to subclass this internal class.  To take effect, this property\r\n     * must be set before calling the Table constructor.\r\n     */\r\n    newTablePane: {\r\n      check: \"Function\",\r\n      init(obj) {\r\n        return new qx.ui.table.pane.Pane(obj);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * A function to instantiate a table pane.  this allows subclasses of\r\n     * Table to subclass this internal class.  To take effect, this property\r\n     * must be set before calling the Table constructor.\r\n     */\r\n    newTablePaneHeader: {\r\n      check: \"Function\",\r\n      init(obj) {\r\n        return new qx.ui.table.pane.Header(obj);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * A function to instantiate a table pane scroller.  this allows\r\n     * subclasses of Table to subclass this internal class.  To take effect,\r\n     * this property must be set before calling the Table constructor.\r\n     */\r\n    newTablePaneScroller: {\r\n      check: \"Function\",\r\n      init(obj) {\r\n        return new qx.ui.table.pane.Scroller(obj);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * A function to instantiate a table pane model.  this allows subclasses\r\n     * of Table to subclass this internal class.  To take effect, this\r\n     * property must be set before calling the Table constructor.\r\n     */\r\n    newTablePaneModel: {\r\n      check: \"Function\",\r\n      init(columnModel) {\r\n        return new qx.ui.table.pane.Model(columnModel);\r\n      }\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    __focusedCol: null,\r\n    __focusedRow: null,\r\n\r\n    __scrollerParent: null,\r\n\r\n    __selectionManager: null,\r\n\r\n    __additionalStatusBarText: null,\r\n    __lastRowCount: null,\r\n    __lastColCount: null,\r\n    __internalChange: null,\r\n\r\n    __columnMenuButtons: null,\r\n    __columnModel: null,\r\n    __emptyTableModel: null,\r\n\r\n    __hadVerticalScrollBar: null,\r\n\r\n    __timer: null,\r\n\r\n    // overridden\r\n    _createChildControlImpl(id, hash) {\r\n      var control;\r\n\r\n      switch (id) {\r\n        case \"statusbar\":\r\n          control = new qx.ui.basic.Label();\r\n          control.set({\r\n            allowGrowX: true\r\n          });\r\n\r\n          this._add(control);\r\n          break;\r\n\r\n        case \"column-button\":\r\n          control = this.getNewColumnMenu()();\r\n          control.set({\r\n            focusable: false\r\n          });\r\n\r\n          // Create the initial menu too\r\n          var menu = control.factory(\"menu\", { table: this });\r\n\r\n          // Add a listener to initialize the column menu when it becomes visible\r\n          menu.addListener(\"appear\", this._initColumnMenu, this);\r\n\r\n          break;\r\n      }\r\n\r\n      return control || super._createChildControlImpl(id);\r\n    },\r\n\r\n    // property modifier\r\n    _applySelectionModel(value, old) {\r\n      this.__selectionManager.setSelectionModel(value);\r\n\r\n      if (old != null) {\r\n        old.removeListener(\"changeSelection\", this._onSelectionChanged, this);\r\n      }\r\n\r\n      value.addListener(\"changeSelection\", this._onSelectionChanged, this);\r\n    },\r\n\r\n    // property modifier\r\n    _applyRowHeight(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].updateVerScrollBarMaximum();\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyHeaderCellsVisible(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        if (value) {\r\n          scrollerArr[i]._showChildControl(\"header\");\r\n        } else {\r\n          scrollerArr[i]._excludeChildControl(\"header\");\r\n        }\r\n      }\r\n      // also hide the column visibility button\r\n      if (this.getColumnVisibilityButtonVisible()) {\r\n        this._applyColumnVisibilityButtonVisible(value);\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyHeaderCellHeight(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].getHeader().setHeight(value);\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyMinCellEditHeight(value) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].setMinCellEditHeight(value);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get an empty table model instance to use for this table. Use this table\r\n     * to configure the table with no table model.\r\n     *\r\n     * @return {qx.ui.table.ITableModel} The empty table model\r\n     */\r\n    getEmptyTableModel() {\r\n      if (!this.__emptyTableModel) {\r\n        this.__emptyTableModel = new qx.ui.table.model.Simple();\r\n        this.__emptyTableModel.setColumns([]);\r\n        this.__emptyTableModel.setData([]);\r\n      }\r\n      return this.__emptyTableModel;\r\n    },\r\n\r\n    // property modifier\r\n    _applyTableModel(value, old) {\r\n      this.getTableColumnModel().init(value.getColumnCount(), this);\r\n\r\n      if (old != null) {\r\n        old.removeListener(\r\n          \"metaDataChanged\",\r\n          this._onTableModelMetaDataChanged,\r\n          this\r\n        );\r\n\r\n        old.removeListener(\"dataChanged\", this._onTableModelDataChanged, this);\r\n      }\r\n\r\n      value.addListener(\r\n        \"metaDataChanged\",\r\n        this._onTableModelMetaDataChanged,\r\n        this\r\n      );\r\n\r\n      value.addListener(\"dataChanged\", this._onTableModelDataChanged, this);\r\n\r\n      // Update the status bar\r\n      this._updateStatusBar();\r\n\r\n      this._updateTableData(0, value.getRowCount(), 0, value.getColumnCount());\r\n\r\n      this._onTableModelMetaDataChanged();\r\n\r\n      // If the table model has an init() method, call it. We don't, however,\r\n      // call it if this is the initial setting of the table model, as the\r\n      // scrollers are not yet initialized. In that case, the init method is\r\n      // called explicitly by the Table constructor.\r\n      if (old && value.init && typeof value.init == \"function\") {\r\n        value.init(this);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Get the The table column model.\r\n     *\r\n     * @return {qx.ui.table.columnmodel.Basic} The table's column model\r\n     */\r\n    getTableColumnModel() {\r\n      if (!this.__columnModel) {\r\n        var columnModel = (this.__columnModel =\r\n          this.getNewTableColumnModel()(this));\r\n\r\n        columnModel.addListener(\r\n          \"visibilityChanged\",\r\n          this._onColVisibilityChanged,\r\n          this\r\n        );\r\n\r\n        columnModel.addListener(\"widthChanged\", this._onColWidthChanged, this);\r\n        columnModel.addListener(\"orderChanged\", this._onColOrderChanged, this);\r\n\r\n        // Get the current table model\r\n        var tableModel = this.getTableModel();\r\n        columnModel.init(tableModel.getColumnCount(), this);\r\n\r\n        // Reset the table column model in each table pane model\r\n        var scrollerArr = this._getPaneScrollerArr();\r\n\r\n        for (var i = 0; i < scrollerArr.length; i++) {\r\n          var paneScroller = scrollerArr[i];\r\n          var paneModel = paneScroller.getTablePaneModel();\r\n          paneModel.setTableColumnModel(columnModel);\r\n        }\r\n      }\r\n      return this.__columnModel;\r\n    },\r\n\r\n    // property modifier\r\n    _applyStatusBarVisible(value, old) {\r\n      if (value) {\r\n        this._showChildControl(\"statusbar\");\r\n      } else {\r\n        this._excludeChildControl(\"statusbar\");\r\n      }\r\n\r\n      if (value) {\r\n        this._updateStatusBar();\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyAdditionalStatusBarText(value, old) {\r\n      this.__additionalStatusBarText = value;\r\n      this._updateStatusBar();\r\n    },\r\n\r\n    // property modifier\r\n    _applyColumnVisibilityButtonVisible(value, old) {\r\n      if (value) {\r\n        this._showChildControl(\"column-button\");\r\n      } else {\r\n        this._excludeChildControl(\"column-button\");\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyMetaColumnCounts(value, old) {\r\n      var metaColumnCounts = value;\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n      var handlers = {};\r\n\r\n      if (value > old) {\r\n        // Save event listeners on the redirected events so we can re-apply\r\n        // them to new scrollers.\r\n        var manager = qx.event.Registration.getManager(scrollerArr[0]);\r\n        for (var evName in qx.ui.table.Table.__redirectEvents) {\r\n          handlers[evName] = {};\r\n          handlers[evName].capture = manager.getListeners(\r\n            scrollerArr[0],\r\n            evName,\r\n            true\r\n          );\r\n\r\n          handlers[evName].bubble = manager.getListeners(\r\n            scrollerArr[0],\r\n            evName,\r\n            false\r\n          );\r\n        }\r\n      }\r\n\r\n      // Remove the panes not needed any more\r\n      this._cleanUpMetaColumns(metaColumnCounts.length);\r\n\r\n      // Update the old panes\r\n      var leftX = 0;\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        var paneScroller = scrollerArr[i];\r\n        var paneModel = paneScroller.getTablePaneModel();\r\n        paneModel.setFirstColumnX(leftX);\r\n        paneModel.setMaxColumnCount(metaColumnCounts[i]);\r\n        leftX += metaColumnCounts[i];\r\n      }\r\n\r\n      // Add the new panes\r\n      if (metaColumnCounts.length > scrollerArr.length) {\r\n        var columnModel = this.getTableColumnModel();\r\n\r\n        for (var i = scrollerArr.length; i < metaColumnCounts.length; i++) {\r\n          var paneModel = this.getNewTablePaneModel()(columnModel);\r\n          paneModel.setFirstColumnX(leftX);\r\n          paneModel.setMaxColumnCount(metaColumnCounts[i]);\r\n          leftX += metaColumnCounts[i];\r\n\r\n          var paneScroller = this.getNewTablePaneScroller()(this);\r\n          paneScroller.setTablePaneModel(paneModel);\r\n\r\n          // Register event listener for vertical scrolling\r\n          paneScroller.addListener(\"changeScrollY\", this._onScrollY, this);\r\n\r\n          // Apply redirected events to this new scroller\r\n          for (evName in qx.ui.table.Table.__redirectEvents) {\r\n            // On first setting of meta columns (constructing phase), there\r\n            // are no handlers to deal with yet.\r\n            if (!handlers[evName]) {\r\n              break;\r\n            }\r\n\r\n            if (\r\n              handlers[evName].capture &&\r\n              handlers[evName].capture.length > 0\r\n            ) {\r\n              var capture = handlers[evName].capture;\r\n              for (var j = 0; j < capture.length; j++) {\r\n                // Determine what context to use.  If the context does not\r\n                // exist, we assume that the context is this table.  If it\r\n                // does exist and it equals the first pane scroller (from\r\n                // which we retrieved the listeners) then set the context\r\n                // to be this new pane scroller.  Otherwise leave the context\r\n                // as it was set.\r\n                var context = capture[j].context;\r\n                if (!context) {\r\n                  context = this;\r\n                } else if (context == scrollerArr[0]) {\r\n                  context = paneScroller;\r\n                }\r\n\r\n                paneScroller.addListener(\r\n                  evName,\r\n                  capture[j].handler,\r\n                  context,\r\n                  true\r\n                );\r\n              }\r\n            }\r\n\r\n            if (handlers[evName].bubble && handlers[evName].bubble.length > 0) {\r\n              var bubble = handlers[evName].bubble;\r\n              for (var j = 0; j < bubble.length; j++) {\r\n                // Determine what context to use.  If the context does not\r\n                // exist, we assume that the context is this table.  If it\r\n                // does exist and it equals the first pane scroller (from\r\n                // which we retrieved the listeners) then set the context\r\n                // to be this new pane scroller.  Otherwise leave the context\r\n                // as it was set.\r\n                var context = bubble[j].context;\r\n                if (!context) {\r\n                  context = this;\r\n                } else if (context == scrollerArr[0]) {\r\n                  context = paneScroller;\r\n                }\r\n\r\n                paneScroller.addListener(\r\n                  evName,\r\n                  bubble[j].handler,\r\n                  context,\r\n                  false\r\n                );\r\n              }\r\n            }\r\n          }\r\n\r\n          // last meta column is flexible\r\n          var flex = i == metaColumnCounts.length - 1 ? 1 : 0;\r\n          this.__scrollerParent.add(paneScroller, { flex: flex });\r\n          scrollerArr = this._getPaneScrollerArr();\r\n        }\r\n      }\r\n\r\n      // Update all meta columns\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        var paneScroller = scrollerArr[i];\r\n        var isLast = i == scrollerArr.length - 1;\r\n\r\n        // Set the right header height\r\n        paneScroller.getHeader().setHeight(this.getHeaderCellHeight());\r\n\r\n        // Put the column visibility button in the top right corner of the last meta column\r\n        paneScroller.setTopRightWidget(\r\n          isLast ? this.getChildControl(\"column-button\") : null\r\n        );\r\n      }\r\n\r\n      if (!this.isColumnVisibilityButtonVisible()) {\r\n        this._excludeChildControl(\"column-button\");\r\n      }\r\n\r\n      this._updateScrollerWidths();\r\n      this._updateScrollBarVisibility();\r\n    },\r\n\r\n    // property modifier\r\n    _applyFocusCellOnPointerMove(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].setFocusCellOnPointerMove(value);\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyShowCellFocusIndicator(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].setShowCellFocusIndicator(value);\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyContextMenuFromDataCellsOnly(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].setContextMenuFromDataCellsOnly(value);\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyKeepFirstVisibleRowComplete(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].onKeepFirstVisibleRowCompleteChanged();\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyResetSelectionOnHeaderTap(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].setResetSelectionOnHeaderTap(value);\r\n      }\r\n    },\r\n\r\n    // property modifier\r\n    _applyResetSelectionOnTapBelowRows(value, old) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].setResetSelectionOnTapBelowRows(value);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns the selection manager.\r\n     *\r\n     * @return {qx.ui.table.selection.Manager} the selection manager.\r\n     */\r\n    getSelectionManager() {\r\n      return this.__selectionManager;\r\n    },\r\n\r\n    /**\r\n     * Returns an array containing all TablePaneScrollers in this table.\r\n     *\r\n     * @return {qx.ui.table.pane.Scroller[]} all TablePaneScrollers in this table.\r\n     */\r\n    _getPaneScrollerArr() {\r\n      return this.__scrollerParent.getChildren();\r\n    },\r\n\r\n    /**\r\n     * Returns a TablePaneScroller of this table.\r\n     *\r\n     * @param metaColumn {Integer} the meta column to get the TablePaneScroller for.\r\n     * @return {qx.ui.table.pane.Scroller} the qx.ui.table.pane.Scroller.\r\n     */\r\n    getPaneScroller(metaColumn) {\r\n      return this._getPaneScrollerArr()[metaColumn];\r\n    },\r\n\r\n    /**\r\n     * Cleans up the meta columns.\r\n     *\r\n     * @param fromMetaColumn {Integer} the first meta column to clean up. All following\r\n     *      meta columns will be cleaned up, too. All previous meta columns will\r\n     *      stay unchanged. If 0 all meta columns will be cleaned up.\r\n     */\r\n    _cleanUpMetaColumns(fromMetaColumn) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      if (scrollerArr != null) {\r\n        for (var i = scrollerArr.length - 1; i >= fromMetaColumn; i--) {\r\n          scrollerArr[i].destroy();\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the locale has changed.\r\n     *\r\n     * @param evt {Event} the event.\r\n     */\r\n    _onChangeLocale(evt) {\r\n      this.updateContent();\r\n      this._updateStatusBar();\r\n    },\r\n\r\n    // overridden\r\n    _onChangeTheme() {\r\n      super._onChangeTheme();\r\n\r\n      this.getDataRowRenderer().initThemeValues();\r\n      this.updateContent();\r\n      this._updateStatusBar();\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the selection has changed.\r\n     *\r\n     * @param evt {Map} the event.\r\n     */\r\n    _onSelectionChanged(evt) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].onSelectionChanged();\r\n      }\r\n\r\n      this._updateStatusBar();\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the table model meta data has changed.\r\n     *\r\n     * @param evt {Map} the event.\r\n     */\r\n    _onTableModelMetaDataChanged(evt) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].onTableModelMetaDataChanged();\r\n      }\r\n\r\n      this._updateStatusBar();\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the table model data has changed.\r\n     *\r\n     * @param evt {Map} the event.\r\n     */\r\n    _onTableModelDataChanged(evt) {\r\n      var data = evt.getData();\r\n\r\n      this._updateTableData(\r\n        data.firstRow,\r\n        data.lastRow,\r\n        data.firstColumn,\r\n        data.lastColumn,\r\n        data.removeStart,\r\n        data.removeCount\r\n      );\r\n    },\r\n\r\n    // overridden\r\n    _onContextMenuOpen(e) {\r\n      // This is Widget's context menu handler which typically retrieves\r\n      // and displays the menu as soon as it receives a \"contextmenu\" event.\r\n      // We want to allow the cellContextmenu handler to create the menu,\r\n      // so we'll override this method with a null one, and do the menu\r\n      // placement and display handling in our _onContextMenu method.\r\n    },\r\n\r\n    /**\r\n     * To update the table if the table model has changed and remove selection.\r\n     *\r\n     * @param firstRow {Integer} The index of the first row that has changed.\r\n     * @param lastRow {Integer} The index of the last row that has changed.\r\n     * @param firstColumn {Integer} The model index of the first column that has changed.\r\n     * @param lastColumn {Integer} The model index of the last column that has changed.\r\n     * @param removeStart {Integer ? null} The first index of the interval (including), to remove selection.\r\n     * @param removeCount {Integer ? null} The count of the interval, to remove selection.\r\n     */\r\n    _updateTableData(\r\n      firstRow,\r\n      lastRow,\r\n      firstColumn,\r\n      lastColumn,\r\n      removeStart,\r\n      removeCount\r\n    ) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      // update selection if rows were removed\r\n      if (removeCount) {\r\n        this.getSelectionModel().removeSelectionInterval(\r\n          removeStart,\r\n          removeStart + removeCount - 1,\r\n          true\r\n        );\r\n\r\n        // remove focus if the focused row has been removed\r\n        if (\r\n          this.__focusedRow >= removeStart &&\r\n          this.__focusedRow < removeStart + removeCount\r\n        ) {\r\n          this.setFocusedCell();\r\n        }\r\n      }\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].onTableModelDataChanged(\r\n          firstRow,\r\n          lastRow,\r\n          firstColumn,\r\n          lastColumn\r\n        );\r\n      }\r\n\r\n      var rowCount = this.getTableModel().getRowCount();\r\n\r\n      if (rowCount != this.__lastRowCount) {\r\n        this.__lastRowCount = rowCount;\r\n\r\n        this._updateScrollBarVisibility();\r\n        this._updateStatusBar();\r\n\r\n        // ARIA attrs\r\n        this.getContentElement().setAttribute(\"aria-rowcount\", rowCount);\r\n      }\r\n\r\n      const colCount = this.getTableModel().getColumnCount();\r\n\r\n      if (colCount != this.__lastColCount) {\r\n        this.__lastColCount = colCount;\r\n\r\n        // ARIA attrs\r\n        this.getContentElement().setAttribute(\"aria-colcount\", colCount);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when a TablePaneScroller has been scrolled vertically.\r\n     *\r\n     * @param evt {Map} the event.\r\n     */\r\n    _onScrollY(evt) {\r\n      if (!this.__internalChange) {\r\n        this.__internalChange = true;\r\n\r\n        // Set the same scroll position to all meta columns\r\n        var scrollerArr = this._getPaneScrollerArr();\r\n\r\n        for (var i = 0; i < scrollerArr.length; i++) {\r\n          scrollerArr[i].setScrollY(evt.getData());\r\n        }\r\n\r\n        this.__internalChange = false;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when a key was pressed.\r\n     *\r\n     * @param evt {qx.event.type.KeySequence} the event.\r\n     * @deprecated {6.0} please use _onKeyDown instead!\r\n     */\r\n    _onKeyPress(evt) {\r\n      qx.log.Logger.deprecatedMethodWarning(\r\n        this._onKeyPress,\r\n        \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\"\r\n      );\r\n\r\n      qx.log.Logger.deprecateMethodOverriding(\r\n        this,\r\n        qx.ui.table.Table,\r\n        \"_onKeyPress\",\r\n        \"The method '_onKeyPress()' is deprecated. Please use '_onKeyDown()' instead.\"\r\n      );\r\n\r\n      this._onKeyDown(evt);\r\n    },\r\n    /**\r\n     * Event handler. Called when on key down event\r\n     *\r\n     * @param evt {qx.event.type.KeySequence} the event.\r\n     */\r\n    _onKeyDown(evt) {\r\n      if (!this.getEnabled()) {\r\n        return;\r\n      }\r\n\r\n      // No editing mode\r\n      var oldFocusedRow = this.__focusedRow;\r\n      var consumed = false;\r\n\r\n      // Handle keys that are independent from the modifiers\r\n      var identifier = evt.getKeyIdentifier();\r\n\r\n      if (this.isEditing()) {\r\n        // Editing mode\r\n        if (evt.getModifiers() == 0) {\r\n          switch (identifier) {\r\n            case \"Enter\":\r\n              this.stopEditing();\r\n              var oldFocusedRow = this.__focusedRow;\r\n              this.moveFocusedCell(0, 1);\r\n\r\n              if (this.__focusedRow != oldFocusedRow) {\r\n                consumed = this.startEditing();\r\n              }\r\n\r\n              break;\r\n\r\n            case \"Escape\":\r\n              this.cancelEditing();\r\n              this.focus();\r\n              break;\r\n\r\n            default:\r\n              consumed = false;\r\n              break;\r\n          }\r\n        }\r\n      } else {\r\n        consumed = true;\r\n        // No editing mode\r\n        if (evt.isCtrlPressed()) {\r\n          // Handle keys that depend on modifiers\r\n\r\n          switch (identifier) {\r\n            case \"A\": // Ctrl + A\r\n              var rowCount = this.getTableModel().getRowCount();\r\n\r\n              if (rowCount > 0) {\r\n                this.getSelectionModel().setSelectionInterval(0, rowCount - 1);\r\n              }\r\n\r\n              break;\r\n\r\n            default:\r\n              consumed = false;\r\n              break;\r\n          }\r\n        } else {\r\n          // Handle keys that are independent from the modifiers\r\n          switch (identifier) {\r\n            case \"Space\":\r\n              this.__selectionManager.handleSelectKeyDown(\r\n                this.__focusedRow,\r\n                evt\r\n              );\r\n\r\n              break;\r\n\r\n            case \"F2\":\r\n            case \"Enter\":\r\n              this.startEditing();\r\n              consumed = true;\r\n              break;\r\n\r\n            case \"Home\":\r\n              this.setFocusedCell(this.__focusedCol, 0, true);\r\n              break;\r\n\r\n            case \"End\":\r\n              var rowCount = this.getTableModel().getRowCount();\r\n              this.setFocusedCell(this.__focusedCol, rowCount - 1, true);\r\n              break;\r\n\r\n            case \"Left\":\r\n              this.moveFocusedCell(-1, 0);\r\n              break;\r\n\r\n            case \"Right\":\r\n              this.moveFocusedCell(1, 0);\r\n              break;\r\n\r\n            case \"Up\":\r\n              this.moveFocusedCell(0, -1);\r\n              break;\r\n\r\n            case \"Down\":\r\n              this.moveFocusedCell(0, 1);\r\n              break;\r\n\r\n            case \"PageUp\":\r\n            case \"PageDown\":\r\n              var scroller = this.getPaneScroller(0);\r\n              var pane = scroller.getTablePane();\r\n              var rowHeight = this.getRowHeight();\r\n              var direction = identifier == \"PageUp\" ? -1 : 1;\r\n              rowCount = pane.getVisibleRowCount() - 1;\r\n              scroller.setScrollY(\r\n                scroller.getScrollY() + direction * rowCount * rowHeight\r\n              );\r\n\r\n              this.moveFocusedCell(0, direction * rowCount);\r\n              break;\r\n\r\n            default:\r\n              consumed = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        oldFocusedRow != this.__focusedRow &&\r\n        this.getRowFocusChangeModifiesSelection()\r\n      ) {\r\n        // The focus moved -> Let the selection manager handle this event\r\n        this.__selectionManager.handleMoveKeyDown(this.__focusedRow, evt);\r\n      }\r\n\r\n      if (consumed) {\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the table gets the focus.\r\n     *\r\n     * @param evt {Map} the event.\r\n     */\r\n    _onFocusChanged(evt) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].onFocusChanged();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the visibility of a column has changed.\r\n     *\r\n     * @param evt {Map} the event.\r\n     */\r\n    _onColVisibilityChanged(evt) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].onColVisibilityChanged();\r\n      }\r\n\r\n      var data = evt.getData();\r\n      if (\r\n        this.__columnMenuButtons != null &&\r\n        data.col != null &&\r\n        data.visible != null\r\n      ) {\r\n        this.__columnMenuButtons[data.col].setColumnVisible(data.visible);\r\n      }\r\n\r\n      this._updateScrollerWidths();\r\n      this._updateScrollBarVisibility();\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the width of a column has changed.\r\n     *\r\n     * @param evt {Map} the event.\r\n     */\r\n    _onColWidthChanged(evt) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        var data = evt.getData();\r\n        scrollerArr[i].setColumnWidth(data.col, data.newWidth);\r\n      }\r\n\r\n      this._updateScrollerWidths();\r\n      this._updateScrollBarVisibility();\r\n    },\r\n\r\n    /**\r\n     * Event handler. Called when the column order has changed.\r\n     *\r\n     * @param evt {Map} the event.\r\n     */\r\n    _onColOrderChanged(evt) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].onColOrderChanged();\r\n      }\r\n\r\n      // A column may have been moved between meta columns\r\n      this._updateScrollerWidths();\r\n      this._updateScrollBarVisibility();\r\n    },\r\n\r\n    /**\r\n     * Gets the TablePaneScroller at a certain x position in the page. If there is\r\n     * no TablePaneScroller at this position, null is returned.\r\n     *\r\n     * @param pageX {Integer} the position in the page to check (in pixels).\r\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller or null.\r\n     */\r\n    getTablePaneScrollerAtPageX(pageX) {\r\n      var metaCol = this._getMetaColumnAtPageX(pageX);\r\n      return metaCol != -1 ? this.getPaneScroller(metaCol) : null;\r\n    },\r\n\r\n    /**\r\n     * Sets the currently focused cell. A value of <code>null</code> hides the\r\n     * focus cell.\r\n     *\r\n     * @param col {Integer?null} the model index of the focused cell's column.\r\n     * @param row {Integer?null} the model index of the focused cell's row.\r\n     * @param scrollVisible {Boolean ? false} whether to scroll the new focused cell\r\n     *          visible.\r\n     */\r\n    setFocusedCell(col, row, scrollVisible) {\r\n      if (\r\n        !this.isEditing() &&\r\n        (col != this.__focusedCol || row != this.__focusedRow)\r\n      ) {\r\n        if (col === null) {\r\n          col = 0;\r\n        }\r\n\r\n        this.__focusedCol = col;\r\n        this.__focusedRow = row;\r\n\r\n        var scrollerArr = this._getPaneScrollerArr();\r\n\r\n        for (var i = 0; i < scrollerArr.length; i++) {\r\n          scrollerArr[i].setFocusedCell(col, row);\r\n        }\r\n\r\n        if (col != null && scrollVisible) {\r\n          this.scrollCellVisible(col, row);\r\n        }\r\n\r\n        // ARIA attrs\r\n        const cellId =\r\n          \"qooxdoo-table-cell-\" + this.toHashCode() + \"-\" + row + \"-\" + col;\r\n        this.getContentElement().setAttribute(\"aria-activedescendant\", cellId);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Resets (clears) the current selection\r\n     */\r\n    resetSelection() {\r\n      this.getSelectionModel().resetSelection();\r\n    },\r\n\r\n    /**\r\n     * Resets the focused cell.\r\n     */\r\n    resetCellFocus() {\r\n      this.setFocusedCell(null, null, false);\r\n    },\r\n\r\n    /**\r\n     * Returns the column of the currently focused cell.\r\n     *\r\n     * @return {Integer} the model index of the focused cell's column.\r\n     */\r\n    getFocusedColumn() {\r\n      return this.__focusedCol;\r\n    },\r\n\r\n    /**\r\n     * Returns the row of the currently focused cell.\r\n     *\r\n     * @return {Integer} the model index of the focused cell's column.\r\n     */\r\n    getFocusedRow() {\r\n      return this.__focusedRow;\r\n    },\r\n\r\n    /**\r\n     * Select whether the focused row is highlighted\r\n     *\r\n     * @param bHighlight {Boolean}\r\n     *   Flag indicating whether the focused row should be highlighted.\r\n     *\r\n     */\r\n    highlightFocusedRow(bHighlight) {\r\n      this.getDataRowRenderer().setHighlightFocusRow(bHighlight);\r\n    },\r\n\r\n    /**\r\n     * Remove the highlighting of the current focus row.\r\n     *\r\n     * This is used to temporarily remove the highlighting of the currently\r\n     * focused row, and is expected to be used most typically by adding a\r\n     * listener on the \"pointerout\" event, so that the focus highlighting is\r\n     * suspended when the pointer leaves the table:\r\n     *\r\n     *     table.addListener(\"pointerout\", table.clearFocusedRowHighlight);\r\n     *\r\n     * @param evt {qx.event.type.Pointer} Incoming pointer event\r\n     */\r\n    clearFocusedRowHighlight(evt) {\r\n      if (evt) {\r\n        var relatedTarget = evt.getRelatedTarget();\r\n        if (\r\n          relatedTarget instanceof qx.ui.table.pane.Pane ||\r\n          relatedTarget instanceof qx.ui.table.pane.FocusIndicator\r\n        ) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Remove focus from any cell that has it\r\n      this.resetCellFocus();\r\n\r\n      // Now, for each pane scroller...\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        // ... repaint without focus.\r\n        scrollerArr[i].onFocusChanged();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Moves the focus.\r\n     *\r\n     * @param deltaX {Integer} The delta by which the focus should be moved on the x axis.\r\n     * @param deltaY {Integer} The delta by which the focus should be moved on the y axis.\r\n     */\r\n    moveFocusedCell(deltaX, deltaY) {\r\n      var col = this.__focusedCol;\r\n      var row = this.__focusedRow;\r\n\r\n      // could also be undefined [BUG #4676]. In that case default to first cell focus\r\n      if (\r\n        col === null ||\r\n        col === undefined ||\r\n        row === null ||\r\n        row === undefined\r\n      ) {\r\n        this.setFocusedCell(0, 0, true);\r\n        return;\r\n      }\r\n\r\n      if (deltaX != 0) {\r\n        var columnModel = this.getTableColumnModel();\r\n        var x = columnModel.getVisibleX(col);\r\n        var colCount = columnModel.getVisibleColumnCount();\r\n        x = qx.lang.Number.limit(x + deltaX, 0, colCount - 1);\r\n        col = columnModel.getVisibleColumnAtX(x);\r\n      }\r\n\r\n      if (deltaY != 0) {\r\n        var tableModel = this.getTableModel();\r\n        row = qx.lang.Number.limit(\r\n          row + deltaY,\r\n          0,\r\n          tableModel.getRowCount() - 1\r\n        );\r\n      }\r\n\r\n      this.setFocusedCell(col, row, true);\r\n    },\r\n\r\n    /**\r\n     * Scrolls a cell visible.\r\n     *\r\n     * @param col {Integer} the model index of the column the cell belongs to.\r\n     * @param row {Integer} the model index of the row the cell belongs to.\r\n     */\r\n    scrollCellVisible(col, row) {\r\n      // get the dom element\r\n      var elem = this.getContentElement().getDomElement();\r\n      // if the dom element is not available, the table hasn't been rendered\r\n      if (!elem) {\r\n        // postpone the scroll until the table has appeared\r\n        this.addListenerOnce(\"appear\", () => {\r\n          this.scrollCellVisible(col, row);\r\n        });\r\n      }\r\n\r\n      var columnModel = this.getTableColumnModel();\r\n      var x = columnModel.getVisibleX(col);\r\n\r\n      var metaColumn = this._getMetaColumnAtColumnX(x);\r\n\r\n      if (metaColumn != -1) {\r\n        this.getPaneScroller(metaColumn).scrollCellVisible(col, row);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Returns whether currently a cell is editing.\r\n     *\r\n     * @return {var} whether currently a cell is editing.\r\n     */\r\n    isEditing() {\r\n      if (this.__focusedCol != null) {\r\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\r\n        var metaColumn = this._getMetaColumnAtColumnX(x);\r\n        return this.getPaneScroller(metaColumn).isEditing();\r\n      }\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Starts editing the currently focused cell. Does nothing if already editing\r\n     * or if the column is not editable.\r\n     *\r\n     * @return {Boolean} whether editing was started\r\n     */\r\n    startEditing() {\r\n      if (this.__focusedCol != null) {\r\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\r\n        var metaColumn = this._getMetaColumnAtColumnX(x);\r\n        var started = this.getPaneScroller(metaColumn).startEditing();\r\n        return started;\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Stops editing and writes the editor's value to the model.\r\n     */\r\n    stopEditing() {\r\n      if (this.__focusedCol != null) {\r\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\r\n        var metaColumn = this._getMetaColumnAtColumnX(x);\r\n        this.getPaneScroller(metaColumn).stopEditing();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Stops editing without writing the editor's value to the model.\r\n     */\r\n    cancelEditing() {\r\n      if (this.__focusedCol != null) {\r\n        var x = this.getTableColumnModel().getVisibleX(this.__focusedCol);\r\n        var metaColumn = this._getMetaColumnAtColumnX(x);\r\n        this.getPaneScroller(metaColumn).cancelEditing();\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Update the table content of every attached table pane.\r\n     */\r\n    updateContent() {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].getTablePane().updateContent(true);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Activates the blocker widgets on all column headers and the\r\n     * column button\r\n     */\r\n    blockHeaderElements() {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].getHeader().getBlocker().blockContent(20);\r\n      }\r\n      this.getChildControl(\"column-button\").getBlocker().blockContent(20);\r\n    },\r\n\r\n    /**\r\n     * Deactivates the blocker widgets on all column headers and the\r\n     * column button\r\n     */\r\n    unblockHeaderElements() {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        scrollerArr[i].getHeader().getBlocker().unblock();\r\n      }\r\n      this.getChildControl(\"column-button\").getBlocker().unblock();\r\n    },\r\n\r\n    /**\r\n     * Gets the meta column at a certain x position in the page. If there is no\r\n     * meta column at this position, -1 is returned.\r\n     *\r\n     * @param pageX {Integer} the position in the page to check (in pixels).\r\n     * @return {Integer} the index of the meta column or -1.\r\n     */\r\n    _getMetaColumnAtPageX(pageX) {\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        var pos = scrollerArr[i].getContentLocation();\r\n\r\n        if (pageX >= pos.left && pageX <= pos.right) {\r\n          return i;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    /**\r\n     * Returns the meta column a column is shown in. If the column is not shown at\r\n     * all, -1 is returned.\r\n     *\r\n     * @param visXPos {Integer} the visible x position of the column.\r\n     * @return {Integer} the meta column the column is shown in.\r\n     */\r\n    _getMetaColumnAtColumnX(visXPos) {\r\n      var metaColumnCounts = this.getMetaColumnCounts();\r\n      var rightXPos = 0;\r\n\r\n      for (var i = 0; i < metaColumnCounts.length; i++) {\r\n        var counts = metaColumnCounts[i];\r\n        rightXPos += counts;\r\n\r\n        if (counts == -1 || visXPos < rightXPos) {\r\n          return i;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    },\r\n\r\n    /**\r\n     * Updates the text shown in the status bar.\r\n     */\r\n    _updateStatusBar() {\r\n      var tableModel = this.getTableModel();\r\n\r\n      if (this.getStatusBarVisible()) {\r\n        var selectedRowCount = this.getSelectionModel().getSelectedCount();\r\n        var rowCount = tableModel.getRowCount();\r\n\r\n        var text;\r\n\r\n        if (rowCount >= 0) {\r\n          if (selectedRowCount == 0) {\r\n            text = this.trn(\"one row\", \"%1 rows\", rowCount, rowCount);\r\n          } else {\r\n            text = this.trn(\r\n              \"one of one row\",\r\n              \"%1 of %2 rows\",\r\n              rowCount,\r\n              selectedRowCount,\r\n              rowCount\r\n            );\r\n          }\r\n        }\r\n\r\n        if (this.__additionalStatusBarText) {\r\n          if (text) {\r\n            text += this.__additionalStatusBarText;\r\n          } else {\r\n            text = this.__additionalStatusBarText;\r\n          }\r\n        }\r\n\r\n        if (text) {\r\n          this.getChildControl(\"statusbar\").setValue(text);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Updates the widths of all scrollers.\r\n     */\r\n    _updateScrollerWidths() {\r\n      // Give all scrollers except for the last one the wanted width\r\n      // (The last one has a flex with)\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        var isLast = i == scrollerArr.length - 1;\r\n        var width = scrollerArr[i].getTablePaneModel().getTotalWidth();\r\n        scrollerArr[i].setPaneWidth(width);\r\n\r\n        var flex = isLast ? 1 : 0;\r\n        scrollerArr[i].setLayoutProperties({ flex: flex });\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Updates the visibility of the scrollbars in the meta columns.\r\n     */\r\n    _updateScrollBarVisibility() {\r\n      if (!this.getBounds()) {\r\n        return;\r\n      }\r\n\r\n      var horBar = qx.ui.table.pane.Scroller.HORIZONTAL_SCROLLBAR;\r\n      var verBar = qx.ui.table.pane.Scroller.VERTICAL_SCROLLBAR;\r\n      var scrollerArr = this._getPaneScrollerArr();\r\n\r\n      // Check which scroll bars are needed\r\n      var horNeeded = false;\r\n      var verNeeded = false;\r\n      var excludeScrollerScrollbarsIfNotNeeded;\r\n\r\n      // Determine whether we need to render horizontal scrollbars for meta\r\n      // columns that don't themselves actually require it\r\n      excludeScrollerScrollbarsIfNotNeeded =\r\n        this.getExcludeScrollerScrollbarsIfNotNeeded();\r\n\r\n      if (!excludeScrollerScrollbarsIfNotNeeded) {\r\n        for (var i = 0; i < scrollerArr.length; i++) {\r\n          var isLast = i == scrollerArr.length - 1;\r\n\r\n          // Only show the last vertical scrollbar\r\n          var bars = scrollerArr[i].getNeededScrollBars(horNeeded, !isLast);\r\n\r\n          if (bars & horBar) {\r\n            horNeeded = true;\r\n          }\r\n\r\n          if (isLast && bars & verBar) {\r\n            verNeeded = true;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Set the needed scrollbars\r\n      for (var i = 0; i < scrollerArr.length; i++) {\r\n        isLast = i == scrollerArr.length - 1;\r\n\r\n        // If we don't want to include scrollbars for meta columns that don't\r\n        // require it, find out whether this meta column requires it.\r\n        if (excludeScrollerScrollbarsIfNotNeeded) {\r\n          horNeeded = !!(\r\n            scrollerArr[i].getNeededScrollBars(false, !isLast) & horBar\r\n          );\r\n\r\n          // Show the horizontal scrollbar if needed. Specify null to indicate\r\n          // that the scrollbar should be hidden rather than excluded.\r\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded || null);\r\n        } else {\r\n          // Show the horizontal scrollbar if needed.\r\n          scrollerArr[i].setHorizontalScrollBarVisible(horNeeded);\r\n        }\r\n\r\n        // If this is the last meta-column...\r\n        if (isLast) {\r\n          // ... then get the current (old) use of vertical scroll bar\r\n          verNeeded = !!(\r\n            scrollerArr[i].getNeededScrollBars(false, false) & verBar\r\n          );\r\n\r\n          if (this.__hadVerticalScrollBar == null) {\r\n            this.__hadVerticalScrollBar =\r\n              scrollerArr[i].getVerticalScrollBarVisible();\r\n            this.__timer = qx.event.Timer.once(\r\n              function () {\r\n                // reset the last visible state of the vertical scroll bar\r\n                // in a timeout to prevent infinite loops.\r\n                this.__hadVerticalScrollBar = null;\r\n                this.__timer = null;\r\n              },\r\n              this,\r\n              0\r\n            );\r\n          }\r\n        }\r\n\r\n        scrollerArr[i].setVerticalScrollBarVisible(isLast && verNeeded);\r\n\r\n        // If this is the last meta-column and the use of a vertical scroll bar\r\n        // has changed...\r\n        if (isLast && verNeeded != this.__hadVerticalScrollBar) {\r\n          // ... then dispatch an event to any awaiting listeners\r\n          this.fireDataEvent(\"verticalScrollBarChanged\", verNeeded);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Initialize the column menu\r\n     */\r\n    _initColumnMenu() {\r\n      var tableModel = this.getTableModel();\r\n      var columnModel = this.getTableColumnModel();\r\n\r\n      var columnButton = this.getChildControl(\"column-button\");\r\n\r\n      // Remove all items from the menu. We'll rebuild it here.\r\n      columnButton.empty();\r\n\r\n      // Inform listeners who may want to insert menu items at the beginning\r\n      var menu = columnButton.getMenu();\r\n      var data = {\r\n        table: this,\r\n        menu: menu,\r\n        columnButton: columnButton\r\n      };\r\n\r\n      this.fireDataEvent(\"columnVisibilityMenuCreateStart\", data);\r\n\r\n      this.__columnMenuButtons = {};\r\n      for (var iCol = 0, l = tableModel.getColumnCount(); iCol < l; iCol++) {\r\n        var col = columnModel.getOverallColumnAtX(iCol);\r\n        var menuButton = columnButton.factory(\"menu-button\", {\r\n          text: tableModel.getColumnName(col),\r\n          column: col,\r\n          bVisible: columnModel.isColumnVisible(col)\r\n        });\r\n\r\n        qx.core.Assert.assertInterface(menuButton, qx.ui.table.IColumnMenuItem);\r\n\r\n        menuButton.addListener(\r\n          \"changeColumnVisible\",\r\n          this._createColumnVisibilityCheckBoxHandler(col),\r\n          this\r\n        );\r\n\r\n        this.__columnMenuButtons[col] = menuButton;\r\n      }\r\n\r\n      // Inform listeners who may want to insert menu items at the end\r\n      data = {\r\n        table: this,\r\n        menu: menu,\r\n        columnButton: columnButton\r\n      };\r\n\r\n      this.fireDataEvent(\"columnVisibilityMenuCreateEnd\", data);\r\n    },\r\n\r\n    /**\r\n     * Creates a handler for a check box of the column visibility menu.\r\n     *\r\n     * @param col {Integer} the model index of column to create the handler for.\r\n     * @return {Function} The created event handler.\r\n     */\r\n    _createColumnVisibilityCheckBoxHandler(col) {\r\n      return function (evt) {\r\n        var columnModel = this.getTableColumnModel();\r\n        columnModel.setColumnVisible(col, evt.getData());\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Sets the width of a column.\r\n     *\r\n     * @param col {Integer} the model index of column.\r\n     * @param width {Integer} the new width in pixels.\r\n     */\r\n    setColumnWidth(col, width) {\r\n      this.getTableColumnModel().setColumnWidth(col, width);\r\n    },\r\n\r\n    /**\r\n     * Resize event handler\r\n     */\r\n    _onResize() {\r\n      this.fireEvent(\"tableWidthChanged\");\r\n      this._updateScrollerWidths();\r\n      this._updateScrollBarVisibility();\r\n    },\r\n\r\n    // overridden\r\n    addListener(type, listener, self, capture) {\r\n      if (this.self(arguments).__redirectEvents[type]) {\r\n        // start the id with the type (needed for removing)\r\n        var id = [type];\r\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\r\n          id.push(arr[i].addListener.apply(arr[i], arguments));\r\n        }\r\n        // join the id's of every event with \"\r\n        return id.join('\"');\r\n      } else {\r\n        return super.addListener(type, listener, self, capture);\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    removeListener(type, listener, self, capture) {\r\n      if (this.self(arguments).__redirectEvents[type]) {\r\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\r\n          arr[i].removeListener.apply(arr[i], arguments);\r\n        }\r\n      } else {\r\n        super.removeListener(type, listener, self, capture);\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    removeListenerById(id) {\r\n      var ids = id.split('\"');\r\n      // type is the first entry of the connected id\r\n      var type = ids.shift();\r\n      if (this.self(arguments).__redirectEvents[type]) {\r\n        var removed = true;\r\n        for (var i = 0, arr = this._getPaneScrollerArr(); i < arr.length; i++) {\r\n          removed = arr[i].removeListenerById.call(arr[i], ids[i]) && removed;\r\n        }\r\n        return removed;\r\n      } else {\r\n        return super.removeListenerById(id);\r\n      }\r\n    },\r\n\r\n    destroy() {\r\n      this.getChildControl(\"column-button\").getMenu().destroy();\r\n      super.destroy();\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    // remove the event listener which handled the locale change\r\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\r\n      qx.locale.Manager.getInstance().removeListener(\r\n        \"changeLocale\",\r\n        this._onChangeLocale,\r\n        this\r\n      );\r\n    }\r\n\r\n    // we allocated these objects on init so we have to clean them up.\r\n    var selectionModel = this.getSelectionModel();\r\n    if (selectionModel) {\r\n      selectionModel.dispose();\r\n    }\r\n\r\n    var dataRowRenderer = this.getDataRowRenderer();\r\n    if (dataRowRenderer) {\r\n      dataRowRenderer.dispose();\r\n    }\r\n\r\n    if (this.getTableModel() != null) {\r\n      this.getTableModel().removeListener(\r\n        \"metaDataChanged\",\r\n        this._onTableModelMetaDataChanged,\r\n        this\r\n      );\r\n\r\n      this.getTableModel().removeListener(\r\n        \"dataChanged\",\r\n        this._onTableModelDataChanged,\r\n        this\r\n      );\r\n    }\r\n\r\n    this.getTableColumnModel().dispose();\r\n    this._disposeObjects(\r\n      \"__selectionManager\",\r\n      \"__scrollerParent\",\r\n      \"__emptyTableModel\",\r\n      \"__emptyTableModel\",\r\n      \"__columnModel\",\r\n      \"__timer\"\r\n    );\r\n\r\n    this._disposeMap(\"__columnMenuButtons\");\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAH,EAAE,CAACI,KAAK,CAACC,MAAM,CAAC,mBAAmB,EAAE;IACnCC,MAAM,EAAEN,EAAE,CAACO,EAAE,CAACC,IAAI,CAACC,MAAM;IACzBC,OAAO,EAAEV,EAAE,CAACO,EAAE,CAACC,IAAI,CAACG,kBAAkB;IAEtC;AACF;AACA;AACA;AACA;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACEC,SAAS,WAAAA,UAACC,UAAU,EAAEC,MAAM,EAAE;MAC5Bd,EAAA,CAAAO,EAAA,CAAAC,IAAA,CAAAC,MAAA,CAAAM,WAAA,CAAAC,IAAA;MACA;MACA;MACA;MACA,IAAI,CAACF,MAAM,EAAE;QACXA,MAAM,GAAG,CAAC,CAAC;MACb;MAEA,IAAIA,MAAM,CAACG,sBAAsB,EAAE;QACjC,IAAI,CAACC,yBAAyB,CAACJ,MAAM,CAACG,sBAAsB,CAAC;MAC/D;MAEA,IAAIH,MAAM,CAACK,gBAAgB,EAAE;QAC3B,IAAI,CAACC,sBAAsB,CAACN,MAAM,CAACK,g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"
}