{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "events",
    "dataChanged",
    "metaDataChanged",
    "sorted",
    "members",
    "getRowCount",
    "getRowData",
    "rowIndex",
    "getColumnCount",
    "getColumnId",
    "columnIndex",
    "getColumnIndexById",
    "columnId",
    "getColumnName",
    "isColumnEditable",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "getSortColumnIndex",
    "isSortAscending",
    "prefetchRows",
    "firstRowIndex",
    "lastRowIndex",
    "getValue",
    "getValueById",
    "setValue",
    "value",
    "setValueById",
    "ui",
    "table",
    "ITableModel"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/ITableModel.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * The data model of a table.\r\n */\r\nqx.Interface.define(\"qx.ui.table.ITableModel\", {\r\n  /*\r\n  *****************************************************************************\r\n     EVENTS\r\n  *****************************************************************************\r\n  */\r\n\r\n  events: {\r\n    /**\r\n     * Fired when the table data changed (the stuff shown in the table body).\r\n     * The data property of the event may be null or a map having the following attributes:\r\n     * <ul>\r\n     *   <li>firstRow: The index of the first row that has changed.</li>\r\n     *   <li>lastRow: The index of the last row that has changed.</li>\r\n     *   <li>firstColumn: The model index of the first column that has changed.</li>\r\n     *   <li>lastColumn: The model index of the last column that has changed.</li>\r\n     * </ul>\r\n     */\r\n    dataChanged: \"qx.event.type.Data\",\r\n\r\n    /**\r\n     * Fired when the meta data changed (the stuff shown in the table header).\r\n     */\r\n    metaDataChanged: \"qx.event.type.Event\",\r\n\r\n    /**\r\n     * Fired after the table is sorted (but before the metaDataChanged event)\r\n     */\r\n    sorted: \"qx.event.type.Data\"\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    /**\r\n     * Returns the number of rows in the model.\r\n     *\r\n     * @abstract\r\n     * @return {Integer} the number of rows.\r\n     */\r\n    getRowCount() {},\r\n\r\n    /**\r\n     *\r\n     * Returns the data of one row. This function may be overridden by models which hold\r\n     * all data of a row in one object. By using this function, clients have a way of\r\n     * quickly retrieving the entire row data.\r\n     *\r\n     * <b>Important:</b>Models which do not have their row data accessible in one object\r\n     * may return null.\r\n     *\r\n     * @param rowIndex {Integer} the model index of the row.\r\n     * @return {Object} the row data as an object or null if the model does not support row data\r\n     *                    objects. The details on the object returned are determined by the model\r\n     *                    implementation only.\r\n     */\r\n    getRowData(rowIndex) {},\r\n\r\n    /**\r\n     * Returns the number of columns in the model.\r\n     *\r\n     * @abstract\r\n     * @return {Integer} the number of columns.\r\n     */\r\n    getColumnCount() {},\r\n\r\n    /**\r\n     * Returns the ID of column. The ID may be used to identify columns\r\n     * independent from their index in the model. E.g. for being aware of added\r\n     * columns when saving the width of a column.\r\n     *\r\n     * @abstract\r\n     * @param columnIndex {Integer} the index of the column.\r\n     * @return {String} the ID of the column.\r\n     */\r\n    getColumnId(columnIndex) {},\r\n\r\n    /**\r\n     * Returns the index of a column.\r\n     *\r\n     * @abstract\r\n     * @param columnId {String} the ID of the column.\r\n     * @return {Integer} the index of the column.\r\n     */\r\n    getColumnIndexById(columnId) {},\r\n\r\n    /**\r\n     * Returns the name of a column. This name will be shown to the user in the\r\n     * table header.\r\n     *\r\n     * @abstract\r\n     * @param columnIndex {Integer} the index of the column.\r\n     * @return {String} the name of the column.\r\n     */\r\n    getColumnName(columnIndex) {},\r\n\r\n    /**\r\n     * Returns whether a column is editable.\r\n     *\r\n     * @param columnIndex {Integer} the column to check.\r\n     * @return {Boolean} whether the column is editable.\r\n     */\r\n    isColumnEditable(columnIndex) {},\r\n\r\n    /**\r\n     * Returns whether a column is sortable.\r\n     *\r\n     * @param columnIndex {Integer} the column to check.\r\n     * @return {Boolean} whether the column is sortable.\r\n     */\r\n    isColumnSortable(columnIndex) {},\r\n\r\n    /**\r\n     * Sorts the model by a column.\r\n     *\r\n     * @param columnIndex {Integer} the column to sort by.\r\n     * @param ascending {Boolean} whether to sort ascending.\r\n     */\r\n    sortByColumn(columnIndex, ascending) {},\r\n\r\n    /**\r\n     * Returns the column index the model is sorted by. If the model is not sorted\r\n     * -1 is returned.\r\n     *\r\n     * @return {Integer} the column index the model is sorted by.\r\n     */\r\n    getSortColumnIndex() {},\r\n\r\n    /**\r\n     * Returns whether the model is sorted ascending.\r\n     *\r\n     * @return {Boolean} whether the model is sorted ascending.\r\n     */\r\n    isSortAscending() {},\r\n\r\n    /**\r\n     * Prefetches some rows. This is a hint to the model that the specified rows\r\n     * will be read soon.\r\n     *\r\n     * @param firstRowIndex {Integer} the index of first row.\r\n     * @param lastRowIndex {Integer} the index of last row.\r\n     */\r\n    prefetchRows(firstRowIndex, lastRowIndex) {},\r\n\r\n    /**\r\n     * Returns a cell value by column index.\r\n     *\r\n     * @abstract\r\n     * @param columnIndex {Integer} the index of the column.\r\n     * @param rowIndex {Integer} the index of the row.\r\n     * @return {var} The value of the cell.\r\n     * @see #getValueById\r\n     */\r\n    getValue(columnIndex, rowIndex) {},\r\n\r\n    /**\r\n     * Returns a cell value by column ID.\r\n     *\r\n     * Whenever you have the choice, use {@link #getValue()} instead,\r\n     * because this should be faster.\r\n     *\r\n     * @param columnId {String} the ID of the column.\r\n     * @param rowIndex {Integer} the index of the row.\r\n     * @return {var} the value of the cell.\r\n     */\r\n    getValueById(columnId, rowIndex) {},\r\n\r\n    /**\r\n     * Sets a cell value by column index.\r\n     *\r\n     * @abstract\r\n     * @param columnIndex {Integer} The index of the column.\r\n     * @param rowIndex {Integer} the index of the row.\r\n     * @param value {var} The new value.\r\n     * @see #setValueById\r\n     */\r\n    setValue(columnIndex, rowIndex, value) {},\r\n\r\n    /**\r\n     * Sets a cell value by column ID.\r\n     *\r\n     * Whenever you have the choice, use {@link #setValue()} instead,\r\n     * because this should be faster.\r\n     *\r\n     * @param columnId {String} The ID of the column.\r\n     * @param rowIndex {Integer} The index of the row.\r\n     * @param value {var} The new value.\r\n     */\r\n    setValueById(columnId, rowIndex, value) {}\r\n  }\r\n});\r\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,yBAAyB,EAAE;IAC7C;AACF;AACA;AACA;AACA;;IAEEC,MAAM,EAAE;MACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,EAAE,oBAAoB;MAEjC;AACJ;AACA;MACIC,eAAe,EAAE,qBAAqB;MAEtC;AACJ;AACA;MACIC,MAAM,EAAE;IACV,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,WAAW,WAAAA,YAAA,EAAG,CAAC,CAAC;MAEhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,WAAAA,WAACC,QAAQ,EAAE,CAAC,CAAC;MAEvB;AACJ;AACA;AACA;AACA;AACA;MACIC,cAAc,WAAAA,eAAA,EAAG,CAAC,CAAC;MAEnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,WAAAA,YAACC,WAAW,EAAE,CAAC,CAAC;MAE3B;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,kBAAkB,WAAAA,mBAACC,QAAQ,EAAE,CAAC,CAAC;MAE/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aAAa,WAAAA,cAACH,WAAW,EAAE,CAAC,CAAC;MAE7B;AACJ;AACA;AACA;AACA;AACA;MACII,gBAAgB,WAAAA,iBAACJ,WAAW,EAAE,CAAC,CAAC;MAEhC;AACJ;AACA;AACA;AACA;AACA;MACIK,gBAAgB,WAAAA,iBAACL,WAAW,EAAE,CAAC,CAAC;MAEhC;AACJ;AACA;AACA;AACA;AACA;MACIM,YAAY,WAAAA,aAACN,WAAW,EAAEO,SAAS,EAAE,CAAC,CAAC;MAEvC;AACJ;AACA;AACA;AACA;AACA;MACIC,kBAAkB,WAAAA,mBAAA,EAAG,CAAC,CAAC;MAEvB;AACJ;AACA;AACA;AACA;MACIC,eAAe,WAAAA,gBAAA,EAAG,CAAC,CAAC;MAEpB;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAACC,aAAa,EAAEC,YAAY,EAAE,CAAC,CAAC;MAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,WAAAA,SAACb,WAAW,EAAEH,QAAQ,EAAE,CAAC,CAAC;MAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIiB,YAAY,WAAAA,aAACZ,QAAQ,EAAEL,QAAQ,EAAE,CAAC,CAAC;MAEnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIkB,QAAQ,WAAAA,SAACf,WAAW,EAAEH,QAAQ,EAAEmB,KAAK,EAAE,CAAC,CAAC;MAEzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,YAAY,WAAAA,aAACf,QAAQ,EAAEL,QAAQ,EAAEmB,KAAK,EAAE,CAAC;IAC3C;EACF,CAAC,CAAC;EAvNFhC,EAAE,CAACkC,EAAE,CAACC,KAAK,CAACC,WAAW,CAACjC,aAAa,GAAGA,aAAa;AAAC"
}