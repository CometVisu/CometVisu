{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "events",
    "dataChanged",
    "metaDataChanged",
    "sorted",
    "members",
    "getRowCount",
    "getRowData",
    "rowIndex",
    "getColumnCount",
    "getColumnId",
    "columnIndex",
    "getColumnIndexById",
    "columnId",
    "getColumnName",
    "isColumnEditable",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "getSortColumnIndex",
    "isSortAscending",
    "prefetchRows",
    "firstRowIndex",
    "lastRowIndex",
    "getValue",
    "getValueById",
    "setValue",
    "value",
    "setValueById",
    "ui",
    "table",
    "ITableModel"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/ITableModel.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * The data model of a table.\n */\nqx.Interface.define(\"qx.ui.table.ITableModel\", {\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when the table data changed (the stuff shown in the table body).\n     * The data property of the event may be null or a map having the following attributes:\n     * <ul>\n     *   <li>firstRow: The index of the first row that has changed.</li>\n     *   <li>lastRow: The index of the last row that has changed.</li>\n     *   <li>firstColumn: The model index of the first column that has changed.</li>\n     *   <li>lastColumn: The model index of the last column that has changed.</li>\n     * </ul>\n     */\n    dataChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the meta data changed (the stuff shown in the table header).\n     */\n    metaDataChanged: \"qx.event.type.Event\",\n\n    /**\n     * Fired after the table is sorted (but before the metaDataChanged event)\n     */\n    sorted: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /**\n     * Returns the number of rows in the model.\n     *\n     * @abstract\n     * @return {Integer} the number of rows.\n     */\n    getRowCount() {},\n\n    /**\n     *\n     * Returns the data of one row. This function may be overridden by models which hold\n     * all data of a row in one object. By using this function, clients have a way of\n     * quickly retrieving the entire row data.\n     *\n     * <b>Important:</b>Models which do not have their row data accessible in one object\n     * may return null.\n     *\n     * @param rowIndex {Integer} the model index of the row.\n     * @return {Object} the row data as an object or null if the model does not support row data\n     *                    objects. The details on the object returned are determined by the model\n     *                    implementation only.\n     */\n    getRowData(rowIndex) {},\n\n    /**\n     * Returns the number of columns in the model.\n     *\n     * @abstract\n     * @return {Integer} the number of columns.\n     */\n    getColumnCount() {},\n\n    /**\n     * Returns the ID of column. The ID may be used to identify columns\n     * independent from their index in the model. E.g. for being aware of added\n     * columns when saving the width of a column.\n     *\n     * @abstract\n     * @param columnIndex {Integer} the index of the column.\n     * @return {String} the ID of the column.\n     */\n    getColumnId(columnIndex) {},\n\n    /**\n     * Returns the index of a column.\n     *\n     * @abstract\n     * @param columnId {String} the ID of the column.\n     * @return {Integer} the index of the column.\n     */\n    getColumnIndexById(columnId) {},\n\n    /**\n     * Returns the name of a column. This name will be shown to the user in the\n     * table header.\n     *\n     * @abstract\n     * @param columnIndex {Integer} the index of the column.\n     * @return {String} the name of the column.\n     */\n    getColumnName(columnIndex) {},\n\n    /**\n     * Returns whether a column is editable.\n     *\n     * @param columnIndex {Integer} the column to check.\n     * @return {Boolean} whether the column is editable.\n     */\n    isColumnEditable(columnIndex) {},\n\n    /**\n     * Returns whether a column is sortable.\n     *\n     * @param columnIndex {Integer} the column to check.\n     * @return {Boolean} whether the column is sortable.\n     */\n    isColumnSortable(columnIndex) {},\n\n    /**\n     * Sorts the model by a column.\n     *\n     * @param columnIndex {Integer} the column to sort by.\n     * @param ascending {Boolean} whether to sort ascending.\n     */\n    sortByColumn(columnIndex, ascending) {},\n\n    /**\n     * Returns the column index the model is sorted by. If the model is not sorted\n     * -1 is returned.\n     *\n     * @return {Integer} the column index the model is sorted by.\n     */\n    getSortColumnIndex() {},\n\n    /**\n     * Returns whether the model is sorted ascending.\n     *\n     * @return {Boolean} whether the model is sorted ascending.\n     */\n    isSortAscending() {},\n\n    /**\n     * Prefetches some rows. This is a hint to the model that the specified rows\n     * will be read soon.\n     *\n     * @param firstRowIndex {Integer} the index of first row.\n     * @param lastRowIndex {Integer} the index of last row.\n     */\n    prefetchRows(firstRowIndex, lastRowIndex) {},\n\n    /**\n     * Returns a cell value by column index.\n     *\n     * @abstract\n     * @param columnIndex {Integer} the index of the column.\n     * @param rowIndex {Integer} the index of the row.\n     * @return {var} The value of the cell.\n     * @see #getValueById\n     */\n    getValue(columnIndex, rowIndex) {},\n\n    /**\n     * Returns a cell value by column ID.\n     *\n     * Whenever you have the choice, use {@link #getValue()} instead,\n     * because this should be faster.\n     *\n     * @param columnId {String} the ID of the column.\n     * @param rowIndex {Integer} the index of the row.\n     * @return {var} the value of the cell.\n     */\n    getValueById(columnId, rowIndex) {},\n\n    /**\n     * Sets a cell value by column index.\n     *\n     * @abstract\n     * @param columnIndex {Integer} The index of the column.\n     * @param rowIndex {Integer} the index of the row.\n     * @param value {var} The new value.\n     * @see #setValueById\n     */\n    setValue(columnIndex, rowIndex, value) {},\n\n    /**\n     * Sets a cell value by column ID.\n     *\n     * Whenever you have the choice, use {@link #setValue()} instead,\n     * because this should be faster.\n     *\n     * @param columnId {String} The ID of the column.\n     * @param rowIndex {Integer} The index of the row.\n     * @param value {var} The new value.\n     */\n    setValueById(columnId, rowIndex, value) {}\n  }\n});\n"
  ],
  "mappings": ";;;;;;;;;EAAAA,EAAE,CAACC,SAAS,CAACC,oBAAoB,CAACC,aAAa,CAAC;EAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA;AACA;AACA;EACAH,EAAE,CAACI,SAAS,CAACC,MAAM,CAAC,yBAAyB,EAAE;IAC7C;AACF;AACA;AACA;AACA;;IAEEC,MAAM,EAAE;MACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,EAAE,oBAAoB;MAEjC;AACJ;AACA;MACIC,eAAe,EAAE,qBAAqB;MAEtC;AACJ;AACA;MACIC,MAAM,EAAE;IACV,CAAC;IAED;AACF;AACA;AACA;AACA;;IAEEC,OAAO,EAAE;MACP;AACJ;AACA;AACA;AACA;AACA;MACIC,WAAW,yBAAG,CAAC,CAAC;MAEhB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,UAAU,sBAACC,QAAQ,EAAE,CAAC,CAAC;MAEvB;AACJ;AACA;AACA;AACA;AACA;MACIC,cAAc,4BAAG,CAAC,CAAC;MAEnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,WAAW,uBAACC,WAAW,EAAE,CAAC,CAAC;MAE3B;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,kBAAkB,8BAACC,QAAQ,EAAE,CAAC,CAAC;MAE/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,aAAa,yBAACH,WAAW,EAAE,CAAC,CAAC;MAE7B;AACJ;AACA;AACA;AACA;AACA;MACII,gBAAgB,4BAACJ,WAAW,EAAE,CAAC,CAAC;MAEhC;AACJ;AACA;AACA;AACA;AACA;MACIK,gBAAgB,4BAACL,WAAW,EAAE,CAAC,CAAC;MAEhC;AACJ;AACA;AACA;AACA;AACA;MACIM,YAAY,wBAACN,WAAW,EAAEO,SAAS,EAAE,CAAC,CAAC;MAEvC;AACJ;AACA;AACA;AACA;AACA;MACIC,kBAAkB,gCAAG,CAAC,CAAC;MAEvB;AACJ;AACA;AACA;AACA;MACIC,eAAe,6BAAG,CAAC,CAAC;MAEpB;AACJ;AACA;AACA;AACA;AACA;AACA;MACIC,YAAY,wBAACC,aAAa,EAAEC,YAAY,EAAE,CAAC,CAAC;MAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,QAAQ,oBAACb,WAAW,EAAEH,QAAQ,EAAE,CAAC,CAAC;MAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIiB,YAAY,wBAACZ,QAAQ,EAAEL,QAAQ,EAAE,CAAC,CAAC;MAEnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIkB,QAAQ,oBAACf,WAAW,EAAEH,QAAQ,EAAEmB,KAAK,EAAE,CAAC,CAAC;MAEzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIC,YAAY,wBAACf,QAAQ,EAAEL,QAAQ,EAAEmB,KAAK,EAAE,CAAC;IAC3C;EACF,CAAC,CAAC;EAvNFhC,EAAE,CAACkC,EAAE,CAACC,KAAK,CAACC,WAAW,CAACjC,aAAa,GAAGA,aAAa;AAAC"
}