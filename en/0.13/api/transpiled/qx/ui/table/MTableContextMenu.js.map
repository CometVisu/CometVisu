{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "_this",
    "addListener",
    "e",
    "contextMenu",
    "getContextMenu",
    "isDisposed",
    "hide",
    "setContextMenu",
    "getApplicationRoot",
    "remove",
    "dispose",
    "col",
    "getColumn",
    "contextMenuHandler",
    "getContextMenuHandler",
    "handlerContext",
    "__contextMenuHandlerContext",
    "tableModel",
    "getTableModel",
    "ui",
    "menu",
    "Menu",
    "preventDefault",
    "addListenerOnce",
    "bShowContextMenu",
    "call",
    "getRow",
    "__contextMenuHandler",
    "members",
    "setContextMenuHandler",
    "handler",
    "context",
    "destruct",
    "table",
    "MTableContextMenu"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/MTableContextMenu.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006-2009 Derrell Lipman\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Derrell Lipman (derrell)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * This mixin allows easily adding handlers for context menus on table columns.\r\n */\r\nqx.Mixin.define(\"qx.ui.table.MTableContextMenu\", {\r\n  construct() {\r\n    // Add an event listener to handle context menu events.  The actual menu\r\n    // is built by a function registered with a call to\r\n    // setContextMenuHandler(col, handler).\r\n    this.addListener(\"cellContextmenu\", e => {\r\n      var contextMenu = this.getContextMenu();\r\n\r\n      // Dispose of any previously existing context menu\r\n      if (contextMenu && !contextMenu.isDisposed()) {\r\n        // Dispose of the context menu.\r\n        contextMenu.hide();\r\n        this.setContextMenu(null);\r\n        this.getApplicationRoot().remove(contextMenu);\r\n        contextMenu.dispose();\r\n        contextMenu = null;\r\n      }\r\n\r\n      // Get the context menu handler for the column on which the context\r\n      // menu request was issued.\r\n      var col = e.getColumn();\r\n      var contextMenuHandler = this.getContextMenuHandler(col);\r\n\r\n      // If there's no context menu handler for this column, we have nothing\r\n      // to do.\r\n      if (typeof contextMenuHandler !== \"function\") {\r\n        return;\r\n      }\r\n\r\n      // Get the context object for the handler function\r\n      var handlerContext = this.__contextMenuHandlerContext[col];\r\n\r\n      // Get the data model\r\n      var tableModel = this.getTableModel();\r\n\r\n      // Create a context menu for this tree.\r\n      contextMenu = new qx.ui.menu.Menu();\r\n\r\n      // Don't display context menus from the context menu\r\n      contextMenu.addListener(\"contextmenu\", function (e) {\r\n        e.preventDefault();\r\n      });\r\n\r\n      // This prevents the display of context menu on table header cells\r\n      contextMenu.addListenerOnce(\"disappear\", () => {\r\n        this.setContextMenu(null);\r\n      });\r\n\r\n      // Call the context menu handler for this column.\r\n      var bShowContextMenu = contextMenuHandler.call(\r\n        handlerContext,\r\n        col,\r\n        e.getRow(),\r\n        this,\r\n        tableModel,\r\n        contextMenu\r\n      );\r\n\r\n      // If we were told not to display the context menu...\r\n      if (!bShowContextMenu) {\r\n        // ... then we're all done here.\r\n        contextMenu.dispose();\r\n        return;\r\n      }\r\n\r\n      // Set the context menu\r\n      this.setContextMenu(contextMenu);\r\n    });\r\n\r\n    // Provide an array in which context menu handlers will be stored.  The\r\n    // array is indexed by column number.\r\n    this.__contextMenuHandler = [];\r\n    this.__contextMenuHandlerContext = [];\r\n  },\r\n\r\n  members: {\r\n    __contextMenuHandler: null,\r\n    __contextMenuHandlerContext: null,\r\n\r\n    /**\r\n     * Add a handler for a context menu which is initiated in a specific\r\n     * column.\r\n     *\r\n     * @param col {Integer}\r\n     *   The column number in which the context menu request originated\r\n     *\r\n     * @param handler {Function}\r\n     *   The function to call when a context menu request originates in the\r\n     *   specified column. The handler is called with the following arguments:\r\n     *   <ul>\r\n     *     <li>\r\n     *       <b>column</b>: (Integer)\r\n     *       The number of the column in which the right click was issued\r\n     *     </li>\r\n     *     <li>\r\n     *       <b>row</b>: (Integer)\r\n     *       The number of the row in which the right click was issued\r\n     *     </li>\r\n     *     <li>\r\n     *       <b>table</b>: {@link qx.ui.table.Table}\r\n     *       The table in which the right click was issued\r\n     *     </li>\r\n     *     <li>\r\n     *       <b>dataModel</b>: {@link qx.ui.table.model.Abstract}\r\n     *       Complete data model of the table\r\n     *     </li>\r\n     *     <li>\r\n     *       <b>contextMenu</b>: {@link qx.ui.menu.Menu}\r\n     *       Menu in which buttons can be added to implement this context menu\r\n     *     </li>\r\n     *   </ul>\r\n     *   The function must return a (Boolean), indicating whether the context\r\n     *   menu should be shown or not. The context menu will be shown when the\r\n     *   handler function returns <code>true</code>. When the handler function\r\n     *   returns <code>false</code> the context menu will <b>not</b> be shown.\r\n     *\r\n     * @param context {Object?this}\r\n     *   Optional execution context for the callback (i.e. \"this\").\r\n     *   If not provided, the {@link qx.ui.table.Table} object this mixin is\r\n     *   applied to is used.\r\n     *\r\n     */\r\n    setContextMenuHandler(col, handler, context) {\r\n      this.__contextMenuHandler[col] = handler;\r\n      this.__contextMenuHandlerContext[col] = context || this;\r\n    },\r\n\r\n    /**\r\n     * Return the registered context menu handler for a column.\r\n     *\r\n     * @param col {Integer}\r\n     *   The column number for which the context menu handler is requested\r\n     *\r\n     * @return {Function}\r\n     *   The handler function which has been registered for the specified\r\n     *   column. The arguments of the handler is documented in\r\n     *   {@link #setContextMenuHandler}.\r\n     */\r\n    getContextMenuHandler(col) {\r\n      return this.__contextMenuHandler[col];\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     DESTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  destruct() {\r\n    this.__contextMenuHandler = null;\r\n    this.__contextMenuHandlerContext = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}