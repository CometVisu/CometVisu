{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ITableModel",
    "events",
    "dataChanged",
    "metaDataChanged",
    "sorted",
    "construct",
    "__columnIdArr",
    "__columnNameArr",
    "__columnIndexMap",
    "statics",
    "THROW_ON_MODEL_CHANGE_DURING_EDIT",
    "parseInt",
    "Environment",
    "get",
    "members",
    "__internalChange",
    "__table",
    "init",
    "getTable",
    "getRowCount",
    "Error",
    "getRowData",
    "rowIndex",
    "isColumnEditable",
    "columnIndex",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "getSortColumnIndex",
    "isSortAscending",
    "prefetchRows",
    "firstRowIndex",
    "lastRowIndex",
    "getValue",
    "getValueById",
    "columnId",
    "getColumnIndexById",
    "setValue",
    "value",
    "setValueById",
    "getColumnCount",
    "length",
    "getColumnId",
    "getColumnName",
    "setColumnIds",
    "columnIdArr",
    "i",
    "Array",
    "fireEvent",
    "setColumnNamesByIndex",
    "columnNameArr",
    "setColumnNamesById",
    "columnNameMap",
    "setColumns",
    "bSetIds",
    "_checkEditing",
    "model",
    "Abstract",
    "isEditing",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * An abstract table model that performs the column handling, so subclasses only\n * need to care for row handling.\n */\nqx.Class.define(\"qx.ui.table.model.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n  implement: qx.ui.table.ITableModel,\n\n  events: {\n    /**\n     * Fired when the table data changed (the stuff shown in the table body).\n     * The data property of the event will be a map having the following\n     * attributes:\n     * <ul>\n     *   <li>firstRow: The index of the first row that has changed.</li>\n     *   <li>lastRow: The index of the last row that has changed.</li>\n     *   <li>firstColumn: The model index of the first column that has changed.</li>\n     *   <li>lastColumn: The model index of the last column that has changed.</li>\n     * </ul>\n     *\n     * Additionally, if the data changed as a result of rows being removed\n     * from the data model, then these additional attributes will be in the\n     * data:\n     * <ul>\n     *   <li>removeStart: The model index of the first row that was removed.</li>\n     *   <li>removeCount: The number of rows that were removed.</li>\n     * </ul>\n     */\n    dataChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the meta data changed (the stuff shown in the table header).\n     */\n    metaDataChanged: \"qx.event.type.Event\",\n\n    /**\n     * Fired after the table is sorted (but before the metaDataChanged event)\n     */\n    sorted: \"qx.event.type.Data\"\n  },\n\n  construct() {\n    super();\n\n    this.__columnIdArr = [];\n    this.__columnNameArr = [];\n    this.__columnIndexMap = {};\n  },\n\n  statics: {\n    /**\n     * Member to control if a table should throw an error when you try to change the\n     * data model data whilst there is an incomplete edit. It could possibly break\n     * current implementations so only introduce the change from QX v8.\n     * Ref: https://github.com/qooxdoo/qooxdoo/pull/10377#discussion_r818697343\n     */\n    THROW_ON_MODEL_CHANGE_DURING_EDIT:\n      parseInt(qx.core.Environment.get(\"qx.version\"), 10) >= 8\n  },\n\n  members: {\n    __columnIdArr: null,\n    __columnNameArr: null,\n    __columnIndexMap: null,\n    __internalChange: null,\n    __table: null,\n\n    /**\n     * Initialize the table model <--> table interaction. The table model is\n     * passed to the table constructor, but the table model doesn't otherwise\n     * know anything about the table nor can it operate on table\n     * properties. This function provides the capability for the table model\n     * to specify characteristics of the table. It is called when the table\n     * model is applied to the table.\n     *\n     * @param table {qx.ui.table.Table}\n     *   The table to which this model is attached\n     */\n    init(table) {\n      // store a reference back to the table\n      this.__table = table;\n    },\n\n    /**\n     *\n     *\n     * @returns table {qx.ui.table.Table}\n     */\n    getTable() {\n      return this.__table;\n    },\n\n    /**\n     * Abstract method\n     * @throws {Error} An error if this method is called.\n     */\n    getRowCount() {\n      throw new Error(\"getRowCount is abstract\");\n    },\n\n    getRowData(rowIndex) {\n      return null;\n    },\n\n    isColumnEditable(columnIndex) {\n      return false;\n    },\n\n    isColumnSortable(columnIndex) {\n      return false;\n    },\n\n    sortByColumn(columnIndex, ascending) {},\n\n    getSortColumnIndex() {\n      return -1;\n    },\n\n    isSortAscending() {\n      return true;\n    },\n\n    prefetchRows(firstRowIndex, lastRowIndex) {},\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} the index of the column\n     * @param rowIndex {Integer} the index of the row\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    getValue(columnIndex, rowIndex) {\n      throw new Error(\"getValue is abstract\");\n    },\n\n    getValueById(columnId, rowIndex) {\n      return this.getValue(this.getColumnIndexById(columnId), rowIndex);\n    },\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} index of the column\n     * @param rowIndex {Integer} index of the row\n     * @param value {var} Value to be set\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    setValue(columnIndex, rowIndex, value) {\n      throw new Error(\"setValue is abstract\");\n    },\n\n    setValueById(columnId, rowIndex, value) {\n      this.setValue(this.getColumnIndexById(columnId), rowIndex, value);\n    },\n\n    // overridden\n    getColumnCount() {\n      return this.__columnIdArr.length;\n    },\n\n    // overridden\n    getColumnIndexById(columnId) {\n      return this.__columnIndexMap[columnId];\n    },\n\n    // overridden\n    getColumnId(columnIndex) {\n      return this.__columnIdArr[columnIndex];\n    },\n\n    // overridden\n    getColumnName(columnIndex) {\n      return this.__columnNameArr[columnIndex];\n    },\n\n    /**\n     * Sets the column IDs. These IDs may be used internally to identify a\n     * column.\n     *\n     * Note: This will clear previously set column names.\n     *\n     *\n     * @param columnIdArr {String[]} the IDs of the columns.\n     * @see #setColumns\n     */\n    setColumnIds(columnIdArr) {\n      this.__columnIdArr = columnIdArr;\n\n      // Create the reverse map\n      this.__columnIndexMap = {};\n\n      for (var i = 0; i < columnIdArr.length; i++) {\n        this.__columnIndexMap[columnIdArr[i]] = i;\n      }\n\n      this.__columnNameArr = new Array(columnIdArr.length);\n\n      // Inform the listeners\n      if (!this.__internalChange) {\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameArr {String[]} the names of the columns.\n     * @throws {Error} If the amount of given columns is different from the table.\n     * @see #setColumnIds\n     */\n    setColumnNamesByIndex(columnNameArr) {\n      if (this.__columnIdArr.length != columnNameArr.length) {\n        throw new Error(\n          \"this.__columnIdArr and columnNameArr have different length: \" +\n            this.__columnIdArr.length +\n            \" != \" +\n            columnNameArr.length\n        );\n      }\n\n      this.__columnNameArr = columnNameArr;\n\n      // Inform the listeners\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameMap {Map} a map containing the column IDs as keys and the\n     *          column name as values.\n     * @see #setColumnIds\n     */\n    setColumnNamesById(columnNameMap) {\n      this.__columnNameArr = new Array(this.__columnIdArr.length);\n\n      for (var i = 0; i < this.__columnIdArr.length; ++i) {\n        this.__columnNameArr[i] = columnNameMap[this.__columnIdArr[i]];\n      }\n    },\n\n    /**\n     * Sets the column names (and optionally IDs)\n     *\n     * Note: You can not change the _number_ of columns this way.  The number\n     *       of columns is highly intertwined in the entire table operation,\n     *       and dynamically changing it would require as much work as just\n     *       recreating your table.  If you must change the number of columns\n     *       in a table then you should remove the table and add a new one.\n     *\n     * @param columnNameArr {String[]}\n     *   The column names. These names will be shown to the user.\n     *\n     * @param columnIdArr {String[] ? null}\n     *   The column IDs. These IDs may be used internally to identify a\n     *   column. If null, the column names are used as IDs unless ID values\n     *   have already been set. If ID values have already been set, they will\n     *   continue to be used if no ID values are explicitly provided here.\n     *\n     * @throws {Error} If the amount of given columns is different from the table.\n     *\n     */\n    setColumns(columnNameArr, columnIdArr) {\n      var bSetIds = this.__columnIdArr.length == 0 || columnIdArr;\n\n      if (columnIdArr == null) {\n        if (this.__columnIdArr.length == 0) {\n          columnIdArr = columnNameArr;\n        } else {\n          columnIdArr = this.__columnIdArr;\n        }\n      }\n\n      if (columnIdArr.length != columnNameArr.length) {\n        throw new Error(\n          \"columnIdArr and columnNameArr have different length: \" +\n            columnIdArr.length +\n            \" != \" +\n            columnNameArr.length\n        );\n      }\n\n      if (bSetIds) {\n        this.__internalChange = true;\n        this.setColumnIds(columnIdArr);\n        this.__internalChange = false;\n      }\n\n      this.setColumnNamesByIndex(columnNameArr);\n    },\n\n    _checkEditing() {\n      if (!qx.ui.table.model.Abstract.THROW_ON_MODEL_CHANGE_DURING_EDIT) {\n        return;\n      }\n      if (this.getTable() && this.getTable().isEditing()) {\n        throw new Error(\n          \"A cell is currently being edited. Commit or cancel the edit before setting the table data\"\n        );\n      }\n    }\n  },\n\n  destruct() {\n    this.__columnIdArr = this.__columnNameArr = this.__columnIndexMap = null;\n  }\n});\n"
  ],
  "mappings": "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"
}