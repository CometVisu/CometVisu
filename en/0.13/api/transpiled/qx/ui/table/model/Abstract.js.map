{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ITableModel",
    "events",
    "dataChanged",
    "metaDataChanged",
    "sorted",
    "construct",
    "constructor",
    "call",
    "__columnIdArr",
    "__columnNameArr",
    "__columnIndexMap",
    "statics",
    "THROW_ON_MODEL_CHANGE_DURING_EDIT",
    "parseInt",
    "members",
    "__internalChange",
    "__table",
    "init",
    "getTable",
    "getRowCount",
    "Error",
    "getRowData",
    "rowIndex",
    "isColumnEditable",
    "columnIndex",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "getSortColumnIndex",
    "isSortAscending",
    "prefetchRows",
    "firstRowIndex",
    "lastRowIndex",
    "getValue",
    "getValueById",
    "columnId",
    "getColumnIndexById",
    "setValue",
    "value",
    "setValueById",
    "getColumnCount",
    "length",
    "getColumnId",
    "getColumnName",
    "setColumnIds",
    "columnIdArr",
    "i",
    "Array",
    "fireEvent",
    "setColumnNamesByIndex",
    "columnNameArr",
    "setColumnNamesById",
    "columnNameMap",
    "setColumns",
    "bSetIds",
    "_checkEditing",
    "model",
    "Abstract",
    "isEditing",
    "destruct"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Abstract.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * An abstract table model that performs the column handling, so subclasses only\n * need to care for row handling.\n */\nqx.Class.define(\"qx.ui.table.model.Abstract\", {\n  type: \"abstract\",\n  extend: qx.core.Object,\n  implement: qx.ui.table.ITableModel,\n\n  events: {\n    /**\n     * Fired when the table data changed (the stuff shown in the table body).\n     * The data property of the event will be a map having the following\n     * attributes:\n     * <ul>\n     *   <li>firstRow: The index of the first row that has changed.</li>\n     *   <li>lastRow: The index of the last row that has changed.</li>\n     *   <li>firstColumn: The model index of the first column that has changed.</li>\n     *   <li>lastColumn: The model index of the last column that has changed.</li>\n     * </ul>\n     *\n     * Additionally, if the data changed as a result of rows being removed\n     * from the data model, then these additional attributes will be in the\n     * data:\n     * <ul>\n     *   <li>removeStart: The model index of the first row that was removed.</li>\n     *   <li>removeCount: The number of rows that were removed.</li>\n     * </ul>\n     */\n    dataChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the meta data changed (the stuff shown in the table header).\n     */\n    metaDataChanged: \"qx.event.type.Event\",\n\n    /**\n     * Fired after the table is sorted (but before the metaDataChanged event)\n     */\n    sorted: \"qx.event.type.Data\"\n  },\n\n  construct() {\n    super();\n\n    this.__columnIdArr = [];\n    this.__columnNameArr = [];\n    this.__columnIndexMap = {};\n  },\n\n  statics: {\n    /**\n     * Member to control if a table should throw an error when you try to change the\n     * data model data whilst there is an incomplete edit. It could possibly break\n     * current implementations so only introduce the change from QX v8.\n     * Ref: https://github.com/qooxdoo/qooxdoo/pull/10377#discussion_r818697343\n     */\n    THROW_ON_MODEL_CHANGE_DURING_EDIT:\n      parseInt(qx.core.Environment.get(\"qx.version\"), 10) >= 8\n  },\n\n  members: {\n    __columnIdArr: null,\n    __columnNameArr: null,\n    __columnIndexMap: null,\n    __internalChange: null,\n    __table: null,\n\n    /**\n     * Initialize the table model <--> table interaction. The table model is\n     * passed to the table constructor, but the table model doesn't otherwise\n     * know anything about the table nor can it operate on table\n     * properties. This function provides the capability for the table model\n     * to specify characteristics of the table. It is called when the table\n     * model is applied to the table.\n     *\n     * @param table {qx.ui.table.Table}\n     *   The table to which this model is attached\n     */\n    init(table) {\n      // store a reference back to the table\n      this.__table = table;\n    },\n\n    /**\n     *\n     *\n     * @returns table {qx.ui.table.Table}\n     */\n    getTable() {\n      return this.__table;\n    },\n\n    /**\n     * Abstract method\n     * @throws {Error} An error if this method is called.\n     */\n    getRowCount() {\n      throw new Error(\"getRowCount is abstract\");\n    },\n\n    getRowData(rowIndex) {\n      return null;\n    },\n\n    isColumnEditable(columnIndex) {\n      return false;\n    },\n\n    isColumnSortable(columnIndex) {\n      return false;\n    },\n\n    sortByColumn(columnIndex, ascending) {},\n\n    getSortColumnIndex() {\n      return -1;\n    },\n\n    isSortAscending() {\n      return true;\n    },\n\n    prefetchRows(firstRowIndex, lastRowIndex) {},\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} the index of the column\n     * @param rowIndex {Integer} the index of the row\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    getValue(columnIndex, rowIndex) {\n      throw new Error(\"getValue is abstract\");\n    },\n\n    getValueById(columnId, rowIndex) {\n      return this.getValue(this.getColumnIndexById(columnId), rowIndex);\n    },\n\n    /**\n     * Abstract method\n     *\n     * @param columnIndex {Integer} index of the column\n     * @param rowIndex {Integer} index of the row\n     * @param value {var} Value to be set\n     *\n     * @throws {Error} An error if this method is called.\n     */\n    setValue(columnIndex, rowIndex, value) {\n      throw new Error(\"setValue is abstract\");\n    },\n\n    setValueById(columnId, rowIndex, value) {\n      this.setValue(this.getColumnIndexById(columnId), rowIndex, value);\n    },\n\n    // overridden\n    getColumnCount() {\n      return this.__columnIdArr.length;\n    },\n\n    // overridden\n    getColumnIndexById(columnId) {\n      return this.__columnIndexMap[columnId];\n    },\n\n    // overridden\n    getColumnId(columnIndex) {\n      return this.__columnIdArr[columnIndex];\n    },\n\n    // overridden\n    getColumnName(columnIndex) {\n      return this.__columnNameArr[columnIndex];\n    },\n\n    /**\n     * Sets the column IDs. These IDs may be used internally to identify a\n     * column.\n     *\n     * Note: This will clear previously set column names.\n     *\n     *\n     * @param columnIdArr {String[]} the IDs of the columns.\n     * @see #setColumns\n     */\n    setColumnIds(columnIdArr) {\n      this.__columnIdArr = columnIdArr;\n\n      // Create the reverse map\n      this.__columnIndexMap = {};\n\n      for (var i = 0; i < columnIdArr.length; i++) {\n        this.__columnIndexMap[columnIdArr[i]] = i;\n      }\n\n      this.__columnNameArr = new Array(columnIdArr.length);\n\n      // Inform the listeners\n      if (!this.__internalChange) {\n        this.fireEvent(\"metaDataChanged\");\n      }\n    },\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameArr {String[]} the names of the columns.\n     * @throws {Error} If the amount of given columns is different from the table.\n     * @see #setColumnIds\n     */\n    setColumnNamesByIndex(columnNameArr) {\n      if (this.__columnIdArr.length != columnNameArr.length) {\n        throw new Error(\n          \"this.__columnIdArr and columnNameArr have different length: \" +\n            this.__columnIdArr.length +\n            \" != \" +\n            columnNameArr.length\n        );\n      }\n\n      this.__columnNameArr = columnNameArr;\n\n      // Inform the listeners\n      this.fireEvent(\"metaDataChanged\");\n    },\n\n    /**\n     * Sets the column names. These names will be shown to the user.\n     *\n     * Note: The column IDs have to be defined before.\n     *\n     *\n     * @param columnNameMap {Map} a map containing the column IDs as keys and the\n     *          column name as values.\n     * @see #setColumnIds\n     */\n    setColumnNamesById(columnNameMap) {\n      this.__columnNameArr = new Array(this.__columnIdArr.length);\n\n      for (var i = 0; i < this.__columnIdArr.length; ++i) {\n        this.__columnNameArr[i] = columnNameMap[this.__columnIdArr[i]];\n      }\n    },\n\n    /**\n     * Sets the column names (and optionally IDs)\n     *\n     * Note: You can not change the _number_ of columns this way.  The number\n     *       of columns is highly intertwined in the entire table operation,\n     *       and dynamically changing it would require as much work as just\n     *       recreating your table.  If you must change the number of columns\n     *       in a table then you should remove the table and add a new one.\n     *\n     * @param columnNameArr {String[]}\n     *   The column names. These names will be shown to the user.\n     *\n     * @param columnIdArr {String[] ? null}\n     *   The column IDs. These IDs may be used internally to identify a\n     *   column. If null, the column names are used as IDs unless ID values\n     *   have already been set. If ID values have already been set, they will\n     *   continue to be used if no ID values are explicitly provided here.\n     *\n     * @throws {Error} If the amount of given columns is different from the table.\n     *\n     */\n    setColumns(columnNameArr, columnIdArr) {\n      var bSetIds = this.__columnIdArr.length == 0 || columnIdArr;\n\n      if (columnIdArr == null) {\n        if (this.__columnIdArr.length == 0) {\n          columnIdArr = columnNameArr;\n        } else {\n          columnIdArr = this.__columnIdArr;\n        }\n      }\n\n      if (columnIdArr.length != columnNameArr.length) {\n        throw new Error(\n          \"columnIdArr and columnNameArr have different length: \" +\n            columnIdArr.length +\n            \" != \" +\n            columnNameArr.length\n        );\n      }\n\n      if (bSetIds) {\n        this.__internalChange = true;\n        this.setColumnIds(columnIdArr);\n        this.__internalChange = false;\n      }\n\n      this.setColumnNamesByIndex(columnNameArr);\n    },\n\n    _checkEditing() {\n      if (!qx.ui.table.model.Abstract.THROW_ON_MODEL_CHANGE_DURING_EDIT) {\n        return;\n      }\n      if (this.getTable() && this.getTable().isEditing()) {\n        throw new Error(\n          \"A cell is currently being edited. Commit or cancel the edit before setting the table data\"\n        );\n      }\n    }\n  },\n\n  destruct() {\n    this.__columnIdArr = this.__columnNameArr = this.__columnIndexMap = null;\n  }\n});\n"
  ],
  "mappings": "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",
  "ignoreList": []
}