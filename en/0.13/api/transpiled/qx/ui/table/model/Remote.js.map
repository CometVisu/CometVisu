{
  "version": 3,
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "ui",
    "table",
    "model",
    "Abstract",
    "construct",
    "constructor",
    "call",
    "_sortColumnIndex",
    "_sortAscending",
    "_rowCount",
    "_lruCounter",
    "_firstLoadingBlock",
    "_firstRowToLoad",
    "_lastRowToLoad",
    "_ignoreCurrentRequest",
    "_rowBlockCache",
    "_rowBlockCount",
    "_sortableColArr",
    "_editableColArr",
    "properties",
    "blockSize",
    "check",
    "init",
    "maxCachedBlockCount",
    "clearCacheOnRemove",
    "blockConcurrentLoadRowCount",
    "members",
    "_loadRowCountRequestRunning",
    "_clearCache",
    "_getIgnoreCurrentRequest",
    "getRowCount",
    "getBlockConcurrentLoadRowCount",
    "_loadRowCount",
    "Error",
    "_onRowCountLoaded",
    "rowCount",
    "Number",
    "data",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "getColumnCount",
    "fireDataEvent",
    "reloadData",
    "cancelingSucceed",
    "_cancelCurrentRequest",
    "clearCache",
    "getCacheContent",
    "sortColumnIndex",
    "sortAscending",
    "lruCounter",
    "rowBlockCache",
    "rowBlockCount",
    "restoreCacheContent",
    "cacheContent",
    "iterateCachedRows",
    "iterator",
    "object",
    "getBlockSize",
    "blockCount",
    "Math",
    "ceil",
    "block",
    "blockData",
    "rowOffset",
    "rowDataArr",
    "relRow",
    "length",
    "rowData",
    "newRowData",
    "prefetchRows",
    "firstRowIndex",
    "lastRowIndex",
    "totalBlockCount",
    "firstBlock",
    "parseInt",
    "lastBlock",
    "firstBlockToLoad",
    "lastBlockToLoad",
    "isDirty",
    "_loadRowData",
    "_onRowDataLoaded",
    "_setRowBlockData",
    "i",
    "blockRowData",
    "mailCount",
    "min",
    "row",
    "push",
    "getMaxCachedBlockCount",
    "lruBlock",
    "minLru",
    "currBlock",
    "currLru",
    "lru",
    "removeRow",
    "rowIndex",
    "_checkEditing",
    "getClearCacheOnRemove",
    "startBlock",
    "removeIndex",
    "splice",
    "nextBlockData",
    "hasListener",
    "getRowData",
    "getValue",
    "columnIndex",
    "columnId",
    "getColumnId",
    "setValue",
    "value",
    "setEditable",
    "editable",
    "col",
    "fireEvent",
    "setColumnEditable",
    "isColumnEditable",
    "setColumnSortable",
    "sortable",
    "isColumnSortable",
    "sortByColumn",
    "ascending",
    "getSortColumnIndex",
    "isSortAscending",
    "setSortColumnIndexWithoutSortingData",
    "setSortAscendingWithoutSortingData",
    "destruct",
    "Remote"
  ],
  "sources": [
    "/home/runner/work/CometVisu/CometVisu/node_modules/@qooxdoo/framework/source/class/qx/ui/table/model/Remote.js"
  ],
  "sourcesContent": [
    "/* ************************************************************************\r\n\r\n   qooxdoo - the new era of web development\r\n\r\n   http://qooxdoo.org\r\n\r\n   Copyright:\r\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\r\n\r\n   License:\r\n     MIT: https://opensource.org/licenses/MIT\r\n     See the LICENSE file in the project's top-level directory for details.\r\n\r\n   Authors:\r\n     * Til Schneider (til132)\r\n\r\n************************************************************************ */\r\n\r\n/**\r\n * A table model that loads its data from a backend.\r\n * <p>\r\n * Only a subset of the available rows, those which are within or near the\r\n * currently visible area, are loaded. If a quick scroll operation occurs,\r\n * rows will soon be displayed using asynchronous loading in the background.\r\n * All loaded data is managed through a cache which automatically removes\r\n * the oldest used rows when it gets full.\r\n * <p>\r\n * This class is abstract: The actual loading of row data must be done by\r\n * subclasses.\r\n */\r\nqx.Class.define(\"qx.ui.table.model.Remote\", {\r\n  type: \"abstract\",\r\n  extend: qx.ui.table.model.Abstract,\r\n\r\n  /*\r\n  *****************************************************************************\r\n     CONSTRUCTOR\r\n  *****************************************************************************\r\n  */\r\n\r\n  construct() {\r\n    super();\r\n\r\n    this._sortColumnIndex = -1;\r\n    this._sortAscending = true;\r\n    this._rowCount = -1;\r\n\r\n    this._lruCounter = 0;\r\n\r\n    // Holds the index of the first block that is currently loading.\r\n    // Is -1 if there is currently no request on its way.\r\n    this._firstLoadingBlock = -1;\r\n\r\n    // Holds the index of the first row that should be loaded when the response of\r\n    // the current request arrives. Is -1 we need no following request.\r\n    this._firstRowToLoad = -1;\r\n\r\n    // Counterpart to _firstRowToLoad\r\n    this._lastRowToLoad = -1;\r\n\r\n    // Holds whether the current request will bring obsolete data. When true the\r\n    // response of the current request will be ignored.\r\n    this._ignoreCurrentRequest = false;\r\n\r\n    this._rowBlockCache = {};\r\n    this._rowBlockCount = 0;\r\n\r\n    this._sortableColArr = null;\r\n    this._editableColArr = null;\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     PROPERTIES\r\n  *****************************************************************************\r\n  */\r\n\r\n  properties: {\r\n    /** The number of rows that are stored in one cache block. */\r\n    blockSize: {\r\n      check: \"Integer\",\r\n      init: 50\r\n    },\r\n\r\n    /** The maximum number of row blocks kept in the cache. */\r\n    maxCachedBlockCount: {\r\n      check: \"Integer\",\r\n      init: 15\r\n    },\r\n\r\n    /**\r\n     * Whether to clear the cache when some rows are removed.\r\n     * If true the rows are removed locally in the cache.\r\n     */\r\n    clearCacheOnRemove: {\r\n      check: \"Boolean\",\r\n      init: false\r\n    },\r\n\r\n    /**\r\n     * Whether to block remote requests for the row count while a request for\r\n     * the row count is pending. Row counts are requested at various times and\r\n     * from various parts of the code, resulting in numerous requests to the\r\n     * user-provided _loadRowCount() method, often while other requests are\r\n     * already pending. The default behavior now ignores requests to load a\r\n     * new row count if such a request is already pending. It is therefore now\r\n     * conceivable that the row count changes between an initial request for\r\n     * the row count and a later (ignored) request. Since the chance of this\r\n     * is low, the desirability of reducing the server requests outweighs the\r\n     * slight possibility of an altered count (which will, by the way, be\r\n     * detected soon thereafter upon the next request for the row count). If\r\n     * the old behavior is desired, set this property to false.\r\n     */\r\n    blockConcurrentLoadRowCount: {\r\n      check: \"Boolean\",\r\n      init: true\r\n    }\r\n  },\r\n\r\n  /*\r\n  *****************************************************************************\r\n     MEMBERS\r\n  *****************************************************************************\r\n  */\r\n\r\n  members: {\r\n    _rowCount: null,\r\n    _ignoreCurrentRequest: null,\r\n\r\n    _lruCounter: null,\r\n    _firstLoadingBlock: null,\r\n    _firstRowToLoad: null,\r\n    _lastRowToLoad: null,\r\n    _rowBlockCache: null,\r\n    _rowBlockCount: null,\r\n\r\n    _sortColumnIndex: null,\r\n    _sortAscending: null,\r\n\r\n    _editableColArr: null,\r\n    _sortableColArr: null,\r\n\r\n    _loadRowCountRequestRunning: false,\r\n\r\n    _clearCache: false,\r\n\r\n    /**\r\n     * Returns whether the current request is ignored by the model.\r\n     *\r\n     * @return {Boolean} true when the current request is ignored by the model.\r\n     */\r\n    _getIgnoreCurrentRequest() {\r\n      return this._ignoreCurrentRequest;\r\n    },\r\n\r\n    // overridden\r\n    getRowCount() {\r\n      if (this._rowCount == -1) {\r\n        if (\r\n          !this._loadRowCountRequestRunning ||\r\n          !this.getBlockConcurrentLoadRowCount()\r\n        ) {\r\n          this._loadRowCountRequestRunning = true;\r\n          this._loadRowCount();\r\n        }\r\n\r\n        // NOTE: _loadRowCount may set this._rowCount\r\n        return this._rowCount == -1 ? 0 : this._rowCount;\r\n      } else {\r\n        return this._rowCount;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Implementing classes have to call {@link #_onRowCountLoaded} when the\r\n     * server response arrived. That method has to be called! Even when there\r\n     * was an error.\r\n     *\r\n     * @abstract\r\n     * @throws {Error} the abstract function warning.\r\n     */\r\n    _loadRowCount() {\r\n      throw new Error(\"_loadRowCount is abstract\");\r\n    },\r\n\r\n    /**\r\n     * Sets the row count.\r\n     *\r\n     * Has to be called by {@link #_loadRowCount}.\r\n     *\r\n     * @param rowCount {Integer} the number of rows in this model or null if loading.\r\n     */\r\n    _onRowCountLoaded(rowCount) {\r\n      if (this.getBlockConcurrentLoadRowCount()) {\r\n        // There's no longer a loadRowCount() in progress\r\n        this._loadRowCountRequestRunning = false;\r\n      }\r\n\r\n      // this.debug(\"row count loaded: \" + rowCount);\r\n      if (rowCount == null || rowCount < 0) {\r\n        rowCount = 0;\r\n      }\r\n\r\n      this._rowCount = Number(rowCount);\r\n\r\n      // Inform the listeners\r\n      var data = {\r\n        firstRow: 0,\r\n        lastRow: rowCount - 1,\r\n        firstColumn: 0,\r\n        lastColumn: this.getColumnCount() - 1\r\n      };\r\n\r\n      this.fireDataEvent(\"dataChanged\", data);\r\n    },\r\n\r\n    /**\r\n     * Reloads the model and clears the local cache.\r\n     *\r\n     */\r\n    reloadData() {\r\n      // If there is currently a request on its way, then this request will bring\r\n      // obsolete data -> Ignore it\r\n      if (this._firstLoadingBlock != -1) {\r\n        var cancelingSucceed = this._cancelCurrentRequest();\r\n        if (cancelingSucceed) {\r\n          // The request was canceled -> We're not loading any blocks any more\r\n          this._firstLoadingBlock = -1;\r\n          this._ignoreCurrentRequest = false;\r\n        } else {\r\n          // The request was not canceled -> Ignore it\r\n          this._ignoreCurrentRequest = true;\r\n        }\r\n      }\r\n\r\n      // Force clearing row cache, because of reloading data.\r\n      this._clearCache = true;\r\n\r\n      // Forget a possibly outstanding request\r\n      // (_loadRowCount will tell the listeners anyway, that the whole table\r\n      // changed)\r\n      //\r\n      // NOTE: This will inform the listeners as soon as the new row count is\r\n      // known\r\n      this._firstRowToLoad = -1;\r\n      this._lastRowToLoad = -1;\r\n      this._loadRowCountRequestRunning = true;\r\n      this._loadRowCount();\r\n    },\r\n\r\n    /**\r\n     * Clears the cache.\r\n     *\r\n     */\r\n    clearCache() {\r\n      this._rowBlockCache = {};\r\n      this._rowBlockCount = 0;\r\n    },\r\n\r\n    /**\r\n     * Returns the current state of the cache.\r\n     * <p>\r\n     * Do not change anything in the returned data. This breaks the model state.\r\n     * Use this method only together with {@link #restoreCacheContent} for backing\r\n     * up state for a later restore.\r\n     *\r\n     * @return {Map} the current cache state.\r\n     */\r\n    getCacheContent() {\r\n      return {\r\n        sortColumnIndex: this._sortColumnIndex,\r\n        sortAscending: this._sortAscending,\r\n        rowCount: this._rowCount,\r\n        lruCounter: this._lruCounter,\r\n        rowBlockCache: this._rowBlockCache,\r\n        rowBlockCount: this._rowBlockCount\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Restores a cache state created by {@link #getCacheContent}.\r\n     *\r\n     * @param cacheContent {Map} An old cache state.\r\n     */\r\n    restoreCacheContent(cacheContent) {\r\n      // If there is currently a request on its way, then this request will bring\r\n      // obsolete data -> Ignore it\r\n      if (this._firstLoadingBlock != -1) {\r\n        // Try to cancel the current request\r\n        var cancelingSucceed = this._cancelCurrentRequest();\r\n\r\n        if (cancelingSucceed) {\r\n          // The request was canceled -> We're not loading any blocks any more\r\n          this._firstLoadingBlock = -1;\r\n          this._ignoreCurrentRequest = false;\r\n        } else {\r\n          // The request was not canceled -> Ignore it\r\n          this._ignoreCurrentRequest = true;\r\n        }\r\n      }\r\n\r\n      // Restore the cache content\r\n      this._sortColumnIndex = cacheContent.sortColumnIndex;\r\n      this._sortAscending = cacheContent.sortAscending;\r\n      this._rowCount = cacheContent.rowCount;\r\n      this._lruCounter = cacheContent.lruCounter;\r\n      this._rowBlockCache = cacheContent.rowBlockCache;\r\n      this._rowBlockCount = cacheContent.rowBlockCount;\r\n\r\n      // Inform the listeners\r\n      var data = {\r\n        firstRow: 0,\r\n        lastRow: this._rowCount - 1,\r\n        firstColumn: 0,\r\n        lastColumn: this.getColumnCount() - 1\r\n      };\r\n\r\n      this.fireDataEvent(\"dataChanged\", data);\r\n    },\r\n\r\n    /**\r\n     * Cancels the current request if possible.\r\n     *\r\n     * Should be overridden by subclasses if they are able to cancel requests. This\r\n     * allows sending a new request directly after a call of {@link #reloadData}.\r\n     *\r\n     * @return {Boolean} whether the request was canceled.\r\n     */\r\n    _cancelCurrentRequest() {\r\n      return false;\r\n    },\r\n\r\n    /**\r\n     * Iterates through all cached rows.\r\n     *\r\n     * The iterator will be called for each cached row with two parameters: The row\r\n     * index of the current row (Integer) and the row data of that row (var[]). If\r\n     * the iterator returns something this will be used as new row data.\r\n     *\r\n     * The iterator is called in the same order as the rows are in the model\r\n     * (the row index is always ascending).\r\n     *\r\n     * @param iterator {Function} The iterator function to call.\r\n     * @param object {Object} context of the iterator\r\n     */\r\n    iterateCachedRows(iterator, object) {\r\n      var blockSize = this.getBlockSize();\r\n      var blockCount = Math.ceil(this.getRowCount() / blockSize);\r\n\r\n      // Remove the row and move the rows of all following blocks\r\n      for (var block = 0; block <= blockCount; block++) {\r\n        var blockData = this._rowBlockCache[block];\r\n\r\n        if (blockData != null) {\r\n          var rowOffset = block * blockSize;\r\n          var rowDataArr = blockData.rowDataArr;\r\n\r\n          for (var relRow = 0; relRow < rowDataArr.length; relRow++) {\r\n            // Call the iterator for this row\r\n            var rowData = rowDataArr[relRow];\r\n            var newRowData = iterator.call(object, rowOffset + relRow, rowData);\r\n\r\n            if (newRowData != null) {\r\n              rowDataArr[relRow] = newRowData;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    prefetchRows(firstRowIndex, lastRowIndex) {\r\n      // this.debug(\"Prefetch wanted: \" + firstRowIndex + \"..\" + lastRowIndex);\r\n      if (this._firstLoadingBlock == -1) {\r\n        var blockSize = this.getBlockSize();\r\n        var totalBlockCount = Math.ceil(this._rowCount / blockSize);\r\n\r\n        // There is currently no request running -> Start a new one\r\n        // NOTE: We load one more block above and below to have a smooth\r\n        //       scrolling into the next block without blank cells\r\n        var firstBlock = parseInt(firstRowIndex / blockSize, 10) - 1;\r\n\r\n        if (firstBlock < 0) {\r\n          firstBlock = 0;\r\n        }\r\n\r\n        var lastBlock = parseInt(lastRowIndex / blockSize, 10) + 1;\r\n\r\n        if (lastBlock >= totalBlockCount) {\r\n          lastBlock = totalBlockCount - 1;\r\n        }\r\n\r\n        // Check which blocks we have to load\r\n        var firstBlockToLoad = -1;\r\n        var lastBlockToLoad = -1;\r\n\r\n        for (var block = firstBlock; block <= lastBlock; block++) {\r\n          if (\r\n            (this._clearCache && !this._loadRowCountRequestRunning) ||\r\n            this._rowBlockCache[block] == null ||\r\n            this._rowBlockCache[block].isDirty\r\n          ) {\r\n            // We don't have this block\r\n            if (firstBlockToLoad == -1) {\r\n              firstBlockToLoad = block;\r\n            }\r\n\r\n            lastBlockToLoad = block;\r\n          }\r\n        }\r\n\r\n        // Load the blocks\r\n        if (firstBlockToLoad != -1) {\r\n          this._firstRowToLoad = -1;\r\n          this._lastRowToLoad = -1;\r\n\r\n          this._firstLoadingBlock = firstBlockToLoad;\r\n\r\n          // this.debug(\"Starting server request. rows: \" + firstRowIndex + \"..\" + lastRowIndex + \", blocks: \" + firstBlockToLoad + \"..\" + lastBlockToLoad);\r\n          this._loadRowData(\r\n            firstBlockToLoad * blockSize,\r\n            (lastBlockToLoad + 1) * blockSize - 1\r\n          );\r\n        }\r\n      } else {\r\n        // There is already a request running -> Remember this request\r\n        // so it can be executed after the current one is finished.\r\n        this._firstRowToLoad = firstRowIndex;\r\n        this._lastRowToLoad = lastRowIndex;\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Loads some row data from the server.\r\n     *\r\n     * Implementing classes have to call {@link #_onRowDataLoaded} when the server\r\n     * response arrived. That method has to be called! Even when there was an error.\r\n     *\r\n     * @abstract\r\n     * @param firstRow {Integer} The index of the first row to load.\r\n     * @param lastRow {Integer} The index of the last row to load.\r\n     * @throws {Error} the abstract function warning.\r\n     */\r\n    _loadRowData(firstRow, lastRow) {\r\n      throw new Error(\"_loadRowData is abstract\");\r\n    },\r\n\r\n    /**\r\n     * Sets row data.\r\n     *\r\n     * Has to be called by {@link #_loadRowData}.\r\n     *\r\n     * @param rowDataArr {Map[]} the loaded row data or null if there was an error.\r\n     */\r\n    _onRowDataLoaded(rowDataArr) {\r\n      // Clear cache if function was called because of a reload.\r\n      if (this._clearCache) {\r\n        this.clearCache();\r\n        this._clearCache = false;\r\n      }\r\n\r\n      if (rowDataArr != null && !this._ignoreCurrentRequest) {\r\n        var blockSize = this.getBlockSize();\r\n        var blockCount = Math.ceil(rowDataArr.length / blockSize);\r\n\r\n        if (blockCount == 1) {\r\n          // We got one block -> Use the rowData directly\r\n          this._setRowBlockData(this._firstLoadingBlock, rowDataArr);\r\n        } else {\r\n          // We got more than one block -> We've to split the rowData\r\n          for (var i = 0; i < blockCount; i++) {\r\n            var rowOffset = i * blockSize;\r\n            var blockRowData = [];\r\n            var mailCount = Math.min(blockSize, rowDataArr.length - rowOffset);\r\n\r\n            for (var row = 0; row < mailCount; row++) {\r\n              blockRowData.push(rowDataArr[rowOffset + row]);\r\n            }\r\n\r\n            this._setRowBlockData(this._firstLoadingBlock + i, blockRowData);\r\n          }\r\n        }\r\n\r\n        // this.debug(\"Got server answer. blocks: \" + this._firstLoadingBlock + \"..\" + (this._firstLoadingBlock + blockCount - 1) + \". mail count: \" + rowDataArr.length + \" block count:\" + blockCount);\r\n        // Inform the listeners\r\n        var data = {\r\n          firstRow: this._firstLoadingBlock * blockSize,\r\n          lastRow: (this._firstLoadingBlock + blockCount + 1) * blockSize - 1,\r\n          firstColumn: 0,\r\n          lastColumn: this.getColumnCount() - 1\r\n        };\r\n\r\n        this.fireDataEvent(\"dataChanged\", data);\r\n      }\r\n\r\n      // We're not loading any blocks any more\r\n      this._firstLoadingBlock = -1;\r\n      this._ignoreCurrentRequest = false;\r\n\r\n      // Check whether we have to start a new request\r\n      if (this._firstRowToLoad != -1) {\r\n        this.prefetchRows(this._firstRowToLoad, this._lastRowToLoad);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets the data of one block.\r\n     *\r\n     * @param block {Integer} the index of the block.\r\n     * @param rowDataArr {var[][]} the data to set.\r\n     */\r\n    _setRowBlockData(block, rowDataArr) {\r\n      if (this._rowBlockCache[block] == null) {\r\n        // This is a new block -> Check whether we have to remove another block first\r\n        this._rowBlockCount++;\r\n\r\n        while (this._rowBlockCount > this.getMaxCachedBlockCount()) {\r\n          // Find the last recently used block\r\n          // NOTE: We never remove block 0 and 1\r\n          var lruBlock;\r\n          var minLru = this._lruCounter;\r\n\r\n          for (var currBlock in this._rowBlockCache) {\r\n            var currLru = this._rowBlockCache[currBlock].lru;\r\n\r\n            if (currLru < minLru && currBlock > 1) {\r\n              minLru = currLru;\r\n              lruBlock = currBlock;\r\n            }\r\n          }\r\n\r\n          // Remove that block\r\n          // this.debug(\"Removing block: \" + lruBlock + \". current LRU: \" + this._lruCounter);\r\n          delete this._rowBlockCache[lruBlock];\r\n          this._rowBlockCount--;\r\n        }\r\n      }\r\n\r\n      this._rowBlockCache[block] = {\r\n        lru: ++this._lruCounter,\r\n        rowDataArr: rowDataArr\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Removes a row from the model.\r\n     *\r\n     * @param rowIndex {Integer} the index of the row to remove.\r\n     */\r\n    removeRow(rowIndex) {\r\n      this._checkEditing();\r\n      if (this.getClearCacheOnRemove()) {\r\n        this.clearCache();\r\n\r\n        // Inform the listeners\r\n        var data = {\r\n          firstRow: 0,\r\n          lastRow: this.getRowCount() - 1,\r\n          firstColumn: 0,\r\n          lastColumn: this.getColumnCount() - 1\r\n        };\r\n\r\n        this.fireDataEvent(\"dataChanged\", data);\r\n      } else {\r\n        var blockSize = this.getBlockSize();\r\n        var blockCount = Math.ceil(this.getRowCount() / blockSize);\r\n        var startBlock = parseInt(rowIndex / blockSize, 10);\r\n\r\n        // Remove the row and move the rows of all following blocks\r\n        for (var block = startBlock; block <= blockCount; block++) {\r\n          var blockData = this._rowBlockCache[block];\r\n\r\n          if (blockData != null) {\r\n            // Remove the row in the start block\r\n            // NOTE: In the other blocks the first row is removed\r\n            //       (This is the row that was)\r\n            var removeIndex = 0;\r\n\r\n            if (block == startBlock) {\r\n              removeIndex = rowIndex - block * blockSize;\r\n            }\r\n\r\n            blockData.rowDataArr.splice(removeIndex, 1);\r\n\r\n            if (block == blockCount - 1) {\r\n              // This is the last block\r\n              if (blockData.rowDataArr.length == 0) {\r\n                // It is empty now -> Remove it\r\n                delete this._rowBlockCache[block];\r\n              }\r\n            } else {\r\n              // Try to copy the first row of the next block to the end of this block\r\n              // so this block can stays clean\r\n              var nextBlockData = this._rowBlockCache[block + 1];\r\n\r\n              if (nextBlockData != null) {\r\n                blockData.rowDataArr.push(nextBlockData.rowDataArr[0]);\r\n              } else {\r\n                // There is no row to move -> Mark this block as dirty\r\n                blockData.isDirty = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (this._rowCount != -1) {\r\n          this._rowCount--;\r\n        }\r\n\r\n        // Inform the listeners\r\n        if (this.hasListener(\"dataChanged\")) {\r\n          var data = {\r\n            firstRow: rowIndex,\r\n            lastRow: this.getRowCount() - 1,\r\n            firstColumn: 0,\r\n            lastColumn: this.getColumnCount() - 1\r\n          };\r\n\r\n          this.fireDataEvent(\"dataChanged\", data);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     *\r\n     * See overridden method for details.\r\n     *\r\n     * @param rowIndex {Integer} the model index of the row.\r\n     * @return {Object} Map containing a value for each column.\r\n     */\r\n    getRowData(rowIndex) {\r\n      var blockSize = this.getBlockSize();\r\n      var block = parseInt(rowIndex / blockSize, 10);\r\n      var blockData = this._rowBlockCache[block];\r\n\r\n      if (blockData == null) {\r\n        // This block is not (yet) loaded\r\n        return null;\r\n      } else {\r\n        var rowData = blockData.rowDataArr[rowIndex - block * blockSize];\r\n\r\n        // Update the last recently used counter\r\n        if (blockData.lru != this._lruCounter) {\r\n          blockData.lru = ++this._lruCounter;\r\n        }\r\n\r\n        return rowData;\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    getValue(columnIndex, rowIndex) {\r\n      var rowData = this.getRowData(rowIndex);\r\n\r\n      if (rowData == null) {\r\n        return null;\r\n      } else {\r\n        var columnId = this.getColumnId(columnIndex);\r\n        return rowData[columnId];\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    setValue(columnIndex, rowIndex, value) {\r\n      var rowData = this.getRowData(rowIndex);\r\n\r\n      if (rowData == null) {\r\n        // row has not yet been loaded or does not exist\r\n        return;\r\n      } else {\r\n        var columnId = this.getColumnId(columnIndex);\r\n        rowData[columnId] = value;\r\n\r\n        // Inform the listeners\r\n        if (this.hasListener(\"dataChanged\")) {\r\n          var data = {\r\n            firstRow: rowIndex,\r\n            lastRow: rowIndex,\r\n            firstColumn: columnIndex,\r\n            lastColumn: columnIndex\r\n          };\r\n\r\n          this.fireDataEvent(\"dataChanged\", data);\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Sets all columns editable or not editable.\r\n     *\r\n     * @param editable {Boolean} whether all columns are editable.\r\n     */\r\n    setEditable(editable) {\r\n      this._editableColArr = [];\r\n\r\n      for (var col = 0; col < this.getColumnCount(); col++) {\r\n        this._editableColArr[col] = editable;\r\n      }\r\n\r\n      this.fireEvent(\"metaDataChanged\");\r\n    },\r\n\r\n    /**\r\n     * Sets whether a column is editable.\r\n     *\r\n     * @param columnIndex {Integer} the column of which to set the editable state.\r\n     * @param editable {Boolean} whether the column should be editable.\r\n     */\r\n    setColumnEditable(columnIndex, editable) {\r\n      if (editable != this.isColumnEditable(columnIndex)) {\r\n        if (this._editableColArr == null) {\r\n          this._editableColArr = [];\r\n        }\r\n\r\n        this._editableColArr[columnIndex] = editable;\r\n\r\n        this.fireEvent(\"metaDataChanged\");\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    isColumnEditable(columnIndex) {\r\n      return this._editableColArr\r\n        ? this._editableColArr[columnIndex] == true\r\n        : false;\r\n    },\r\n\r\n    /**\r\n     * Sets whether a column is sortable.\r\n     *\r\n     * @param columnIndex {Integer} the column of which to set the sortable state.\r\n     * @param sortable {Boolean} whether the column should be sortable.\r\n     */\r\n    setColumnSortable(columnIndex, sortable) {\r\n      if (sortable != this.isColumnSortable(columnIndex)) {\r\n        if (this._sortableColArr == null) {\r\n          this._sortableColArr = [];\r\n        }\r\n\r\n        this._sortableColArr[columnIndex] = sortable;\r\n\r\n        this.fireEvent(\"metaDataChanged\");\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    isColumnSortable(columnIndex) {\r\n      return this._sortableColArr\r\n        ? this._sortableColArr[columnIndex] !== false\r\n        : true;\r\n    },\r\n\r\n    // overridden\r\n    sortByColumn(columnIndex, ascending) {\r\n      if (\r\n        this._sortColumnIndex != columnIndex ||\r\n        this._sortAscending != ascending\r\n      ) {\r\n        this._sortColumnIndex = columnIndex;\r\n        this._sortAscending = ascending;\r\n\r\n        this.clearCache();\r\n\r\n        // Inform the listeners\r\n        this.fireEvent(\"metaDataChanged\");\r\n      }\r\n    },\r\n\r\n    // overridden\r\n    getSortColumnIndex() {\r\n      return this._sortColumnIndex;\r\n    },\r\n\r\n    // overridden\r\n    isSortAscending() {\r\n      return this._sortAscending;\r\n    },\r\n\r\n    /**\r\n     * Sets the sorted column without sorting the data.\r\n     * Use this method, if you want to mark the column as the sorted column,\r\n     * (e.g. for appearance reason), but the sorting of the data will be done\r\n     * in another step.\r\n     *\r\n     * @param sortColumnIndex {Integer} the column, which shall be marked as the sorted column.\r\n     */\r\n    setSortColumnIndexWithoutSortingData(sortColumnIndex) {\r\n      this._sortColumnIndex = sortColumnIndex;\r\n    },\r\n\r\n    /**\r\n     * Sets the direction of the sorting without sorting the data.\r\n     * Use this method, if you want to set the direction of sorting, (e.g\r\n     * for appearance reason), but the sorting of the data will be done in\r\n     * another step.\r\n     *\r\n     * @param sortAscending {Boolean} whether the sorting direction is ascending\r\n     *        (true) or not (false).\r\n     */\r\n    setSortAscendingWithoutSortingData(sortAscending) {\r\n      this._sortAscending = sortAscending;\r\n    }\r\n  },\r\n\r\n  destruct() {\r\n    this._sortableColArr = this._editableColArr = this._rowBlockCache = null;\r\n  }\r\n});\r\n"
  ],
  "mappings": "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"
}