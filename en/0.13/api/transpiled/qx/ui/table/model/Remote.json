{
  "className": "qx.ui.table.model.Remote",
  "packageName": "qx.ui.table.model",
  "name": "Remote",
  "superClass": "qx.ui.table.model.Abstract",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 31,
        "column": 0,
        "index": 973
      },
      "end": {
        "line": 808,
        "column": 3,
        "index": 24883
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>A table model that loads its data from a backend.\n <p>\n Only a subset of the available rows, those which are within or near the\n currently visible area, are loaded. If a quick scroll operation occurs,\n rows will soon be displayed using asynchronous loading in the background.\n All loaded data is managed through a cache which automatically removes\n the oldest used rows when it gets full.\n <p>\n This class is abstract: The actual loading of row data must be done by\n subclasses.</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "construct": {
    "location": {
      "start": {
        "line": 41,
        "column": 2,
        "index": 1268
      },
      "end": {
        "line": 70,
        "column": 3,
        "index": 2138
      }
    },
    "jsdoc": {}
  },
  "properties": {
    "blockSize": {
      "location": {
        "start": {
          "line": 80,
          "column": 4,
          "index": 2414
        },
        "end": {
          "line": 83,
          "column": 5,
          "index": 2471
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The number of rows that are stored in one cache block.</p>"
          }
        ]
      },
      "name": "blockSize",
      "propertyType": "new",
      "init": 50,
      "check": "Integer",
      "defaultValue": 50
    },
    "maxCachedBlockCount": {
      "location": {
        "start": {
          "line": 86,
          "column": 4,
          "index": 2541
        },
        "end": {
          "line": 89,
          "column": 5,
          "index": 2608
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The maximum number of row blocks kept in the cache.</p>"
          }
        ]
      },
      "name": "maxCachedBlockCount",
      "propertyType": "new",
      "init": 15,
      "check": "Integer",
      "defaultValue": 15
    },
    "clearCacheOnRemove": {
      "location": {
        "start": {
          "line": 95,
          "column": 4,
          "index": 2751
        },
        "end": {
          "line": 98,
          "column": 5,
          "index": 2820
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to clear the cache when some rows are removed.\n If true the rows are removed locally in the cache.</p>"
          }
        ]
      },
      "name": "clearCacheOnRemove",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "blockConcurrentLoadRowCount": {
      "location": {
        "start": {
          "line": 114,
          "column": 4,
          "index": 3755
        },
        "end": {
          "line": 117,
          "column": 5,
          "index": 3832
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Whether to block remote requests for the row count while a request for\n the row count is pending. Row counts are requested at various times and\n from various parts of the code, resulting in numerous requests to the\n user-provided _loadRowCount() method, often while other requests are\n already pending. The default behavior now ignores requests to load a\n new row count if such a request is already pending. It is therefore now\n conceivable that the row count changes between an initial request for\n the row count and a later (ignored) request. Since the chance of this\n is low, the desirability of reducing the server requests outweighs the\n slight possibility of an altered count (which will, by the way, be\n detected soon thereafter upon the next request for the row count). If\n the old behavior is desired, set this property to false.</p>"
          }
        ]
      },
      "name": "blockConcurrentLoadRowCount",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>The owning object</p>"
          }
        ]
      }
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>{String} The ID of the object.</p>"
          }
        ]
      }
    }
  },
  "members": {
    "_rowCount": {
      "location": {
        "start": {
          "line": 127,
          "column": 4,
          "index": 4040
        },
        "end": {
          "line": 127,
          "column": 19,
          "index": 4055
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_ignoreCurrentRequest": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 4061
        },
        "end": {
          "line": 128,
          "column": 31,
          "index": 4088
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_lruCounter": {
      "location": {
        "start": {
          "line": 130,
          "column": 4,
          "index": 4095
        },
        "end": {
          "line": 130,
          "column": 21,
          "index": 4112
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_firstLoadingBlock": {
      "location": {
        "start": {
          "line": 131,
          "column": 4,
          "index": 4118
        },
        "end": {
          "line": 131,
          "column": 28,
          "index": 4142
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_firstRowToLoad": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 4148
        },
        "end": {
          "line": 132,
          "column": 25,
          "index": 4169
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_lastRowToLoad": {
      "location": {
        "start": {
          "line": 133,
          "column": 4,
          "index": 4175
        },
        "end": {
          "line": 133,
          "column": 24,
          "index": 4195
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_rowBlockCache": {
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 4201
        },
        "end": {
          "line": 134,
          "column": 24,
          "index": 4221
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_rowBlockCount": {
      "location": {
        "start": {
          "line": 135,
          "column": 4,
          "index": 4227
        },
        "end": {
          "line": 135,
          "column": 24,
          "index": 4247
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_sortColumnIndex": {
      "location": {
        "start": {
          "line": 137,
          "column": 4,
          "index": 4254
        },
        "end": {
          "line": 137,
          "column": 26,
          "index": 4276
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_sortAscending": {
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 4282
        },
        "end": {
          "line": 138,
          "column": 24,
          "index": 4302
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_editableColArr": {
      "location": {
        "start": {
          "line": 140,
          "column": 4,
          "index": 4309
        },
        "end": {
          "line": 140,
          "column": 25,
          "index": 4330
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_sortableColArr": {
      "location": {
        "start": {
          "line": 141,
          "column": 4,
          "index": 4336
        },
        "end": {
          "line": 141,
          "column": 25,
          "index": 4357
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_loadRowCountRequestRunning": {
      "location": {
        "start": {
          "line": 143,
          "column": 4,
          "index": 4364
        },
        "end": {
          "line": 143,
          "column": 38,
          "index": 4398
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_clearCache": {
      "location": {
        "start": {
          "line": 145,
          "column": 4,
          "index": 4405
        },
        "end": {
          "line": 145,
          "column": 22,
          "index": 4423
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_getIgnoreCurrentRequest": {
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 4601
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 4676
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns whether the current request is ignored by the model.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the current request is ignored by the model.",
            "type": "Boolean",
            "description": " true when the current request is ignored by the model."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getRowCount": {
      "location": {
        "start": {
          "line": 157,
          "column": 4,
          "index": 4701
        },
        "end": {
          "line": 172,
          "column": 5,
          "index": 5137
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "_loadRowCount": {
      "location": {
        "start": {
          "line": 182,
          "column": 4,
          "index": 5414
        },
        "end": {
          "line": 184,
          "column": 5,
          "index": 5489
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Implementing classes have to call {@link #_onRowCountLoaded} when the\n server response arrived. That method has to be called! Even when there\n was an error.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onRowCountLoaded": {
      "location": {
        "start": {
          "line": 193,
          "column": 4,
          "index": 5690
        },
        "end": {
          "line": 215,
          "column": 5,
          "index": 6294
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the row count.\n Has to be called by {@link #_loadRowCount}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowCount {Integer} the number of rows in this model or null if loading.",
            "paramName": "rowCount",
            "description": " the number of rows in this model or null if loading.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "reloadData": {
      "location": {
        "start": {
          "line": 221,
          "column": 4,
          "index": 6377
        },
        "end": {
          "line": 249,
          "column": 5,
          "index": 7430
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Reloads the model and clears the local cache.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clearCache": {
      "location": {
        "start": {
          "line": 255,
          "column": 4,
          "index": 7485
        },
        "end": {
          "line": 258,
          "column": 5,
          "index": 7568
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Clears the cache.</p>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCacheContent": {
      "location": {
        "start": {
          "line": 269,
          "column": 4,
          "index": 7903
        },
        "end": {
          "line": 278,
          "column": 5,
          "index": 8203
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Returns the current state of the cache.\n <p>\n Do not change anything in the returned data. This breaks the model state.\n Use this method only together with {@link #restoreCacheContent} for backing\n up state for a later restore.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} the current cache state.",
            "type": "Map",
            "description": " the current cache state."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "restoreCacheContent": {
      "location": {
        "start": {
          "line": 285,
          "column": 4,
          "index": 8353
        },
        "end": {
          "line": 319,
          "column": 5,
          "index": 9589
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Restores a cache state created by {@link #getCacheContent}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cacheContent {Map} An old cache state.",
            "paramName": "cacheContent",
            "description": " An old cache state.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_cancelCurrentRequest": {
      "location": {
        "start": {
          "line": 329,
          "column": 4,
          "index": 9899
        },
        "end": {
          "line": 331,
          "column": 5,
          "index": 9950
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Cancels the current request if possible.\n Should be overridden by subclasses if they are able to cancel requests. This\n allows sending a new request directly after a call of {@link #reloadData}.</p>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the request was canceled.",
            "type": "Boolean",
            "description": " whether the request was canceled."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "iterateCachedRows": {
      "location": {
        "start": {
          "line": 346,
          "column": 4,
          "index": 10515
        },
        "end": {
          "line": 369,
          "column": 5,
          "index": 11347
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Iterates through all cached rows.\n The iterator will be called for each cached row with two parameters: The row\n index of the current row (Integer) and the row data of that row (var[]). If\n the iterator returns something this will be used as new row data.\n The iterator is called in the same order as the rows are in the model\n (the row index is always ascending).</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterator {Function} The iterator function to call.",
            "paramName": "iterator",
            "description": " The iterator function to call.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "object {Object} context of the iterator",
            "paramName": "object",
            "description": " context of the iterator",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "prefetchRows": {
      "location": {
        "start": {
          "line": 372,
          "column": 4,
          "index": 11372
        },
        "end": {
          "line": 431,
          "column": 5,
          "index": 13497
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "_loadRowData": {
      "location": {
        "start": {
          "line": 444,
          "column": 4,
          "index": 13953
        },
        "end": {
          "line": 446,
          "column": 5,
          "index": 14043
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Loads some row data from the server.\n Implementing classes have to call {@link #_onRowDataLoaded} when the server\n response arrived. That method has to be called! Even when there was an error.</p>"
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "firstRow {Integer} The index of the first row to load.",
            "paramName": "firstRow",
            "description": " The index of the first row to load.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastRow {Integer} The index of the last row to load.",
            "paramName": "lastRow",
            "description": " The index of the last row to load.",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} the abstract function warning.",
            "type": "Error",
            "description": " the abstract function warning."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onRowDataLoaded": {
      "location": {
        "start": {
          "line": 455,
          "column": 4,
          "index": 14236
        },
        "end": {
          "line": 504,
          "column": 5,
          "index": 16134
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets row data.\n Has to be called by {@link #_loadRowData}.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowDataArr {Map[]} the loaded row data or null if there was an error.",
            "paramName": "rowDataArr",
            "description": " the loaded row data or null if there was an error.",
            "type": "Map[]"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_setRowBlockData": {
      "location": {
        "start": {
          "line": 512,
          "column": 4,
          "index": 16305
        },
        "end": {
          "line": 543,
          "column": 5,
          "index": 17348
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the data of one block.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "block {Integer} the index of the block.",
            "paramName": "block",
            "description": " the index of the block.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowDataArr {var[][]} the data to set.",
            "paramName": "rowDataArr",
            "description": " the data to set.",
            "type": "var[][]"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "removeRow": {
      "location": {
        "start": {
          "line": 550,
          "column": 4,
          "index": 17480
        },
        "end": {
          "line": 622,
          "column": 5,
          "index": 19835
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Removes a row from the model.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowIndex {Integer} the index of the row to remove.",
            "paramName": "rowIndex",
            "description": " the index of the row to remove.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowData": {
      "location": {
        "start": {
          "line": 631,
          "column": 4,
          "index": 20039
        },
        "end": {
          "line": 649,
          "column": 5,
          "index": 20586
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>See overridden method for details.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowIndex {Integer} the model index of the row.",
            "paramName": "rowIndex",
            "description": " the model index of the row.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Map containing a value for each column.",
            "type": "Object",
            "description": " Map containing a value for each column."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "getValue": {
      "location": {
        "start": {
          "line": 652,
          "column": 4,
          "index": 20611
        },
        "end": {
          "line": 661,
          "column": 5,
          "index": 20859
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "setValue": {
      "location": {
        "start": {
          "line": 664,
          "column": 4,
          "index": 20884
        },
        "end": {
          "line": 686,
          "column": 5,
          "index": 21507
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "setEditable": {
      "location": {
        "start": {
          "line": 693,
          "column": 4,
          "index": 21654
        },
        "end": {
          "line": 701,
          "column": 5,
          "index": 21875
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets all columns editable or not editable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "editable {Boolean} whether all columns are editable.",
            "paramName": "editable",
            "description": " whether all columns are editable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnEditable": {
      "location": {
        "start": {
          "line": 709,
          "column": 4,
          "index": 22102
        },
        "end": {
          "line": 719,
          "column": 5,
          "index": 22408
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets whether a column is editable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column of which to set the editable state.",
            "paramName": "columnIndex",
            "description": " the column of which to set the editable state.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "editable {Boolean} whether the column should be editable.",
            "paramName": "editable",
            "description": " whether the column should be editable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isColumnEditable": {
      "location": {
        "start": {
          "line": 722,
          "column": 4,
          "index": 22433
        },
        "end": {
          "line": 726,
          "column": 5,
          "index": 22573
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "setColumnSortable": {
      "location": {
        "start": {
          "line": 734,
          "column": 4,
          "index": 22800
        },
        "end": {
          "line": 744,
          "column": 5,
          "index": 23106
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets whether a column is sortable.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column of which to set the sortable state.",
            "paramName": "columnIndex",
            "description": " the column of which to set the sortable state.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "sortable {Boolean} whether the column should be sortable.",
            "paramName": "sortable",
            "description": " whether the column should be sortable.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isColumnSortable": {
      "location": {
        "start": {
          "line": 747,
          "column": 4,
          "index": 23131
        },
        "end": {
          "line": 751,
          "column": 5,
          "index": 23272
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "sortByColumn": {
      "location": {
        "start": {
          "line": 754,
          "column": 4,
          "index": 23297
        },
        "end": {
          "line": 767,
          "column": 5,
          "index": 23649
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "getSortColumnIndex": {
      "location": {
        "start": {
          "line": 770,
          "column": 4,
          "index": 23674
        },
        "end": {
          "line": 772,
          "column": 5,
          "index": 23738
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "isSortAscending": {
      "location": {
        "start": {
          "line": 775,
          "column": 4,
          "index": 23763
        },
        "end": {
          "line": 777,
          "column": 5,
          "index": 23822
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "appearsIn": [
        "qx.ui.table.model.Abstract",
        "qx.ui.table.ITableModel"
      ]
    },
    "setSortColumnIndexWithoutSortingData": {
      "location": {
        "start": {
          "line": 787,
          "column": 4,
          "index": 24183
        },
        "end": {
          "line": 789,
          "column": 5,
          "index": 24291
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the sorted column without sorting the data.\n Use this method, if you want to mark the column as the sorted column,\n (e.g. for appearance reason), but the sorting of the data will be done\n in another step.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sortColumnIndex {Integer} the column, which shall be marked as the sorted column.",
            "paramName": "sortColumnIndex",
            "description": " the column, which shall be marked as the sorted column.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setSortAscendingWithoutSortingData": {
      "location": {
        "start": {
          "line": 800,
          "column": 4,
          "index": 24676
        },
        "end": {
          "line": 802,
          "column": 5,
          "index": 24776
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the direction of the sorting without sorting the data.\n Use this method, if you want to set the direction of sorting, (e.g\n for appearance reason), but the sorting of the data will be done in\n another step.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "sortAscending {Boolean} whether the sorting direction is ascending\n        (true) or not (false).",
            "paramName": "sortAscending",
            "description": " whether the sorting direction is ascending\n        (true) or not (false).",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.table.model.Abstract",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    },
    "getBlockSize": {
      "type": "function",
      "name": "getBlockSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockSize</code>.\n\nFor further details take a look at the property definition: {@link #blockSize}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for blockSize"
          }
        ]
      }
    },
    "setBlockSize": {
      "type": "function",
      "name": "setBlockSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>blockSize</code>.\n\nFor further details take a look at the property definition: {@link #blockSize}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for blockSize"
          }
        ]
      }
    },
    "resetBlockSize": {
      "type": "function",
      "name": "resetBlockSize",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>blockSize</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #blockSize}."
          }
        ]
      }
    },
    "getMaxCachedBlockCount": {
      "type": "function",
      "name": "getMaxCachedBlockCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>maxCachedBlockCount</code>.\n\nFor further details take a look at the property definition: {@link #maxCachedBlockCount}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for maxCachedBlockCount"
          }
        ]
      }
    },
    "setMaxCachedBlockCount": {
      "type": "function",
      "name": "setMaxCachedBlockCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>maxCachedBlockCount</code>.\n\nFor further details take a look at the property definition: {@link #maxCachedBlockCount}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for maxCachedBlockCount"
          }
        ]
      }
    },
    "resetMaxCachedBlockCount": {
      "type": "function",
      "name": "resetMaxCachedBlockCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>maxCachedBlockCount</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #maxCachedBlockCount}."
          }
        ]
      }
    },
    "getClearCacheOnRemove": {
      "type": "function",
      "name": "getClearCacheOnRemove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>clearCacheOnRemove</code>.\n\nFor further details take a look at the property definition: {@link #clearCacheOnRemove}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for clearCacheOnRemove"
          }
        ]
      }
    },
    "isClearCacheOnRemove": {
      "type": "function",
      "name": "isClearCacheOnRemove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>clearCacheOnRemove</code>.\n\nFor further details take a look at the property definition: {@link #clearCacheOnRemove}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for clearCacheOnRemove"
          }
        ]
      }
    },
    "setClearCacheOnRemove": {
      "type": "function",
      "name": "setClearCacheOnRemove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>clearCacheOnRemove</code>.\n\nFor further details take a look at the property definition: {@link #clearCacheOnRemove}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for clearCacheOnRemove"
          }
        ]
      }
    },
    "resetClearCacheOnRemove": {
      "type": "function",
      "name": "resetClearCacheOnRemove",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>clearCacheOnRemove</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #clearCacheOnRemove}."
          }
        ]
      }
    },
    "getBlockConcurrentLoadRowCount": {
      "type": "function",
      "name": "getBlockConcurrentLoadRowCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockConcurrentLoadRowCount</code>.\n\nFor further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for blockConcurrentLoadRowCount"
          }
        ]
      }
    },
    "isBlockConcurrentLoadRowCount": {
      "type": "function",
      "name": "isBlockConcurrentLoadRowCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>blockConcurrentLoadRowCount</code>.\n\nFor further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for blockConcurrentLoadRowCount"
          }
        ]
      }
    },
    "setBlockConcurrentLoadRowCount": {
      "type": "function",
      "name": "setBlockConcurrentLoadRowCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>blockConcurrentLoadRowCount</code>.\n\nFor further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for blockConcurrentLoadRowCount"
          }
        ]
      }
    },
    "resetBlockConcurrentLoadRowCount": {
      "type": "function",
      "name": "resetBlockConcurrentLoadRowCount",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>blockConcurrentLoadRowCount</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #blockConcurrentLoadRowCount}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 805,
        "column": 2,
        "index": 24785
      },
      "end": {
        "line": 807,
        "column": 3,
        "index": 24879
      }
    }
  },
  "events": {},
  "descendants": []
}