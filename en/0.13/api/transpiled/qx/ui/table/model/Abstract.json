{
  "className": "qx.ui.table.model.Abstract",
  "packageName": "qx.ui.table.model",
  "name": "Abstract",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.ui.table.ITableModel"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0,
        "index": 588
      },
      "end": {
        "line": 334,
        "column": 3,
        "index": 9558
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "<p>An abstract table model that performs the column handling, so subclasses only\n need to care for row handling.</p>"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": true,
  "isStatic": false,
  "isSingleton": false,
  "events": {
    "dataChanged": {
      "location": {
        "start": {
          "line": 48,
          "column": 4,
          "index": 1607
        },
        "end": {
          "line": 48,
          "column": 37,
          "index": 1640
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the table data changed (the stuff shown in the table body).\n The data property of the event will be a map having the following\n attributes:\n </p>\n<ul>\n   <li>firstRow: The index of the first row that has changed.</li>\n   <li>lastRow: The index of the last row that has changed.</li>\n   <li>firstColumn: The model index of the first column that has changed.</li>\n   <li>lastColumn: The model index of the last column that has changed.</li>\n </ul>\n<p>Additionally, if the data changed as a result of rows being removed\n from the data model, then these additional attributes will be in the\n data:\n </p>\n<ul>\n   <li>removeStart: The model index of the first row that was removed.</li>\n   <li>removeCount: The number of rows that were removed.</li>\n </ul>"
          }
        ]
      },
      "name": "dataChanged",
      "type": "qx.event.type.Data"
    },
    "metaDataChanged": {
      "location": {
        "start": {
          "line": 53,
          "column": 4,
          "index": 1742
        },
        "end": {
          "line": 53,
          "column": 42,
          "index": 1780
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired when the meta data changed (the stuff shown in the table header).</p>"
          }
        ]
      },
      "name": "metaDataChanged",
      "type": "qx.event.type.Event"
    },
    "sorted": {
      "location": {
        "start": {
          "line": 58,
          "column": 4,
          "index": 1881
        },
        "end": {
          "line": 58,
          "column": 32,
          "index": 1909
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Fired after the table is sorted (but before the metaDataChanged event)</p>"
          }
        ]
      },
      "name": "sorted",
      "type": "qx.event.type.Data"
    }
  },
  "construct": {
    "location": {
      "start": {
        "line": 61,
        "column": 2,
        "index": 1918
      },
      "end": {
        "line": 67,
        "column": 3,
        "index": 2041
      }
    }
  },
  "statics": {
    "THROW_ON_MODEL_CHANGE_DURING_EDIT": {
      "location": {
        "start": {
          "line": 76,
          "column": 4,
          "index": 2397
        },
        "end": {
          "line": 77,
          "column": 62,
          "index": 2494
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Member to control if a table should throw an error when you try to change the\n data model data whilst there is an incomplete edit. It could possibly break\n current implementations so only introduce the change from QX v8.\n Ref: https://github.com/qooxdoo/qooxdoo/pull/10377#discussion_r818697343</p>"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__columnIdArr": {
      "location": {
        "start": {
          "line": 81,
          "column": 4,
          "index": 2518
        },
        "end": {
          "line": 81,
          "column": 23,
          "index": 2537
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__columnNameArr": {
      "location": {
        "start": {
          "line": 82,
          "column": 4,
          "index": 2543
        },
        "end": {
          "line": 82,
          "column": 25,
          "index": 2564
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__columnIndexMap": {
      "location": {
        "start": {
          "line": 83,
          "column": 4,
          "index": 2570
        },
        "end": {
          "line": 83,
          "column": 26,
          "index": 2592
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__internalChange": {
      "location": {
        "start": {
          "line": 84,
          "column": 4,
          "index": 2598
        },
        "end": {
          "line": 84,
          "column": 26,
          "index": 2620
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__table": {
      "location": {
        "start": {
          "line": 85,
          "column": 4,
          "index": 2626
        },
        "end": {
          "line": 85,
          "column": 17,
          "index": 2639
        }
      },
      "type": "variable",
      "access": "private"
    },
    "init": {
      "location": {
        "start": {
          "line": 98,
          "column": 4,
          "index": 3171
        },
        "end": {
          "line": 101,
          "column": 5,
          "index": 3263
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Initialize the table model <--> table interaction. The table model is\n passed to the table constructor, but the table model doesn't otherwise\n know anything about the table nor can it operate on table\n properties. This function provides the capability for the table model\n to specify characteristics of the table. It is called when the table\n model is applied to the table.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "table {qx.ui.table.Table}\n   The table to which this model is attached",
            "paramName": "table",
            "description": "\n   The table to which this model is attached",
            "type": "qx.ui.table.Table"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTable": {
      "location": {
        "start": {
          "line": 108,
          "column": 4,
          "index": 3342
        },
        "end": {
          "line": 110,
          "column": 5,
          "index": 3387
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "table {qx.ui.table.Table}"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowCount": {
      "location": {
        "start": {
          "line": 116,
          "column": 4,
          "index": 3491
        },
        "end": {
          "line": 118,
          "column": 5,
          "index": 3562
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abstract method</p>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} An error if this method is called.",
            "type": "Error",
            "description": " An error if this method is called."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getRowData": {
      "location": {
        "start": {
          "line": 120,
          "column": 4,
          "index": 3569
        },
        "end": {
          "line": 122,
          "column": 5,
          "index": 3616
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "rowIndex {Integer} the model index of the row.",
            "paramName": "rowIndex",
            "description": " the model index of the row.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the row data as an object or null if the model does not support row data\n                    objects. The details on the object returned are determined by the model\n                    implementation only.",
            "type": "Object",
            "description": " the row data as an object or null if the model does not support row data\n                    objects. The details on the object returned are determined by the model\n                    implementation only."
          }
        ]
      }
    },
    "isColumnEditable": {
      "location": {
        "start": {
          "line": 124,
          "column": 4,
          "index": 3623
        },
        "end": {
          "line": 126,
          "column": 5,
          "index": 3680
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to check.",
            "paramName": "columnIndex",
            "description": " the column to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the column is editable.",
            "type": "Boolean",
            "description": " whether the column is editable."
          }
        ]
      }
    },
    "isColumnSortable": {
      "location": {
        "start": {
          "line": 128,
          "column": 4,
          "index": 3687
        },
        "end": {
          "line": 130,
          "column": 5,
          "index": 3744
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to check.",
            "paramName": "columnIndex",
            "description": " the column to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the column is sortable.",
            "type": "Boolean",
            "description": " whether the column is sortable."
          }
        ]
      }
    },
    "sortByColumn": {
      "location": {
        "start": {
          "line": 132,
          "column": 4,
          "index": 3751
        },
        "end": {
          "line": 132,
          "column": 43,
          "index": 3790
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to sort by.",
            "paramName": "columnIndex",
            "description": " the column to sort by.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "ascending {Boolean} whether to sort ascending.",
            "paramName": "ascending",
            "description": " whether to sort ascending.",
            "type": "Boolean"
          }
        ]
      }
    },
    "getSortColumnIndex": {
      "location": {
        "start": {
          "line": 134,
          "column": 4,
          "index": 3797
        },
        "end": {
          "line": 136,
          "column": 5,
          "index": 3842
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the column index the model is sorted by.",
            "type": "Integer",
            "description": " the column index the model is sorted by."
          }
        ]
      }
    },
    "isSortAscending": {
      "location": {
        "start": {
          "line": 138,
          "column": 4,
          "index": 3849
        },
        "end": {
          "line": 140,
          "column": 5,
          "index": 3893
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the model is sorted ascending.",
            "type": "Boolean",
            "description": " whether the model is sorted ascending."
          }
        ]
      }
    },
    "prefetchRows": {
      "location": {
        "start": {
          "line": 142,
          "column": 4,
          "index": 3900
        },
        "end": {
          "line": 142,
          "column": 48,
          "index": 3944
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "firstRowIndex {Integer} the index of first row.",
            "paramName": "firstRowIndex",
            "description": " the index of first row.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastRowIndex {Integer} the index of last row.",
            "paramName": "lastRowIndex",
            "description": " the index of last row.",
            "type": "Integer"
          }
        ]
      }
    },
    "getValue": {
      "location": {
        "start": {
          "line": 152,
          "column": 4,
          "index": 4176
        },
        "end": {
          "line": 154,
          "column": 5,
          "index": 4262
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abstract method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the index of the column",
            "paramName": "columnIndex",
            "description": " the index of the column",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} the index of the row",
            "paramName": "rowIndex",
            "description": " the index of the row",
            "type": "Integer"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} An error if this method is called.",
            "type": "Error",
            "description": " An error if this method is called."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getValueById": {
      "location": {
        "start": {
          "line": 156,
          "column": 4,
          "index": 4269
        },
        "end": {
          "line": 158,
          "column": 5,
          "index": 4382
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "columnId {String} the ID of the column.",
            "paramName": "columnId",
            "description": " the ID of the column.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} the index of the row.",
            "paramName": "rowIndex",
            "description": " the index of the row.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the cell.",
            "type": "var",
            "description": " the value of the cell."
          }
        ]
      }
    },
    "setValue": {
      "location": {
        "start": {
          "line": 169,
          "column": 4,
          "index": 4648
        },
        "end": {
          "line": 171,
          "column": 5,
          "index": 4741
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Abstract method</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} index of the column",
            "paramName": "columnIndex",
            "description": " index of the column",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} index of the row",
            "paramName": "rowIndex",
            "description": " index of the row",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value {var} Value to be set",
            "paramName": "value",
            "description": " Value to be set",
            "type": "var"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} An error if this method is called.",
            "type": "Error",
            "description": " An error if this method is called."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "setValueById": {
      "location": {
        "start": {
          "line": 173,
          "column": 4,
          "index": 4748
        },
        "end": {
          "line": 175,
          "column": 5,
          "index": 4868
        }
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ],
      "jsdoc": {
        "@param": [
          {
            "name": "@param",
            "body": "columnId {String} The ID of the column.",
            "paramName": "columnId",
            "description": " The ID of the column.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} The index of the row.",
            "paramName": "rowIndex",
            "description": " The index of the row.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value {var} The new value.",
            "paramName": "value",
            "description": " The new value.",
            "type": "var"
          }
        ]
      }
    },
    "getColumnCount": {
      "location": {
        "start": {
          "line": 178,
          "column": 4,
          "index": 4893
        },
        "end": {
          "line": 180,
          "column": 5,
          "index": 4957
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getColumnIndexById": {
      "location": {
        "start": {
          "line": 183,
          "column": 4,
          "index": 4982
        },
        "end": {
          "line": 185,
          "column": 5,
          "index": 5064
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getColumnId": {
      "location": {
        "start": {
          "line": 188,
          "column": 4,
          "index": 5089
        },
        "end": {
          "line": 190,
          "column": 5,
          "index": 5167
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "getColumnName": {
      "location": {
        "start": {
          "line": 193,
          "column": 4,
          "index": 5192
        },
        "end": {
          "line": 195,
          "column": 5,
          "index": 5274
        }
      },
      "jsdoc": {},
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.table.ITableModel",
      "appearsIn": [
        "qx.ui.table.ITableModel"
      ]
    },
    "setColumnIds": {
      "location": {
        "start": {
          "line": 207,
          "column": 4,
          "index": 5551
        },
        "end": {
          "line": 223,
          "column": 5,
          "index": 5983
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column IDs. These IDs may be used internally to identify a\n column.\n Note: This will clear previously set column names.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIdArr {String[]} the IDs of the columns.",
            "paramName": "columnIdArr",
            "description": " the IDs of the columns.",
            "type": "String[]"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setColumns"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnNamesByIndex": {
      "location": {
        "start": {
          "line": 235,
          "column": 4,
          "index": 6325
        },
        "end": {
          "line": 249,
          "column": 5,
          "index": 6762
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column names. These names will be shown to the user.\n Note: The column IDs have to be defined before.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnNameArr {String[]} the names of the columns.",
            "paramName": "columnNameArr",
            "description": " the names of the columns.",
            "type": "String[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the amount of given columns is different from the table.",
            "type": "Error",
            "description": " If the amount of given columns is different from the table."
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setColumnIds"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumnNamesById": {
      "location": {
        "start": {
          "line": 261,
          "column": 4,
          "index": 7077
        },
        "end": {
          "line": 267,
          "column": 5,
          "index": 7326
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column names. These names will be shown to the user.\n Note: The column IDs have to be defined before.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnNameMap {Map} a map containing the column IDs as keys and the\n          column name as values.",
            "paramName": "columnNameMap",
            "description": " a map containing the column IDs as keys and the\n          column name as values.",
            "type": "Map"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setColumnIds"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setColumns": {
      "location": {
        "start": {
          "line": 290,
          "column": 4,
          "index": 8352
        },
        "end": {
          "line": 317,
          "column": 5,
          "index": 9116
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "<p>Sets the column names (and optionally IDs)\n Note: You can not change the <em>number</em> of columns this way.  The number\n       of columns is highly intertwined in the entire table operation,\n       and dynamically changing it would require as much work as just\n       recreating your table.  If you must change the number of columns\n       in a table then you should remove the table and add a new one.</p>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnNameArr {String[]}\n   The column names. These names will be shown to the user.",
            "paramName": "columnNameArr",
            "description": "\n   The column names. These names will be shown to the user.",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "columnIdArr {String[] ? null}\n   The column IDs. These IDs may be used internally to identify a\n   column. If null, the column names are used as IDs unless ID values\n   have already been set. If ID values have already been set, they will\n   continue to be used if no ID values are explicitly provided here.",
            "paramName": "columnIdArr",
            "description": "\n   The column IDs. These IDs may be used internally to identify a\n   column. If null, the column names are used as IDs unless ID values\n   have already been set. If ID values have already been set, they will\n   continue to be used if no ID values are explicitly provided here.",
            "optional": true,
            "defaultValue": "null",
            "type": "String[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} If the amount of given columns is different from the table.",
            "type": "Error",
            "description": " If the amount of given columns is different from the table."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_checkEditing": {
      "location": {
        "start": {
          "line": 319,
          "column": 4,
          "index": 9123
        },
        "end": {
          "line": 328,
          "column": 5,
          "index": 9451
        }
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxOwner</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ]
      }
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "[[ ObjectMethod Function ]]",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "[[ ObjectMethod Function ]]",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>qxObjectId</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 331,
        "column": 2,
        "index": 9460
      },
      "end": {
        "line": 333,
        "column": 3,
        "index": 9554
      }
    }
  },
  "descendants": [
    "qx.ui.table.model.Remote",
    "qx.ui.table.model.Simple",
    "qx.ui.treevirtual.SimpleTreeDataModel"
  ]
}